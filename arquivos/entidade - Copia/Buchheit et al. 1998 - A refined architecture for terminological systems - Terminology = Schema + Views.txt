ELSEVIER 

Artificial  Intelligence 99 ( 1998) 209-260 

Artificial 
Intelligence 

A  refined  architecture  for  terminological  systems: 
Terminology  =  Schema  +  Views 

h4.  Buchheit  a~1, EM.  Doninibv2,  W.  Nuttcv3,  A.  Schaerfbv* 
’  Interactive  Objects  Sofhvare  GmbH  (iO),  Freiburg,  Germany 
b  Dipartimento  di  Informatica  e  Sistemistica,  Vniversitci  di  Roma  “La  Sapienza”,  Roma,  Italy 
’  German  Research  Center  for  Artificial  Intelligence  GmbH  (DFKI),  Saarbriicken,  Germany 

Received June 1995; revised  April  1997 

Abstract 

Traditionally,  the core  of  a Terminological  Knowledge  Representation  System  (TKRS)  consists 
of  a  TBox  or  terminology,  where  concepts  are  introduced,  and  an  ABox  or  world  description, 
where  facts  about  individuals  are  stated  in  terms  of  concept  memberships.  This  design  has  a 
drawback  because  in  most  applications  the  TBox  has  to  meet  two  functions  at  a  time:  On  the  one 
hand-similarly 
structures  with  type  information  are  introduced 
through  primitive  concepts  and  primitive  roles;  on  the  other  hand,  views  on  the  objects  in  the 
knowledge  base  are  provided  through  defined  concepts. 

to  a database  schema-frame-like 

We propose  to  account  for  this  conceptual  separation  by  partitioning  the TBox  into  two  compo- 
nents  for primitive  and  defined  concepts,  which  we call  the schema  and  the  view part.  We envision 
the  two  parts  to  differ  with  respect  to  the  language  for  concepts,  the  statements  allowed,  and  the 
semantics. 

We  argue  that  this  separation  achieves  more  conceptual  clarity  about  the  role  of  primitive 
and  defined  concepts  and  the  semantics  of  terminological  cycles.  Two  case  studies  show  the 
computational  benefits  to  be  gained  from  the  refined  architecture.  @  1998 Elsevier  Science  B.V. 

Keywords:  Domain  modelling;  Knowledge 
architectures; 

Subumption  of  concepts 

representation 

systems;  Description 

logics;  Knowledge-base 

author.  Email:  aschaerf@dis.uniromal.it. 

* Corresponding 
’ Email:  buchheit@io.freinet.de. 
2 Email:  donini@dis.uniromal.it. 
’ Email:  werner.nutt@dtki.de. 

0004-3702/95/$19.00 
PII  SOOO4-3702(97)00079-9 

@  1998  Elsevier  Science  B.V.  All  rights  reserved. 

210 

M.  Euchheit  et  al. /Artificial 

Intetiigence  99  (199%) 209-260 

1.  Introduction 

Research  on  terminological 

abstract  ar- 
the  structure 
that  allows  for  two 

reasoning  usually  presupposes 

the  following 
system,  which  quite  well  reflects 

representation 

systems.  There  is  a  logical  representation 

chitecture  of  a  knowledge 
of  implemented 
kinds  of  statements: 
and  in  the  ABox,  or  world  description, 
membership 
design  of  systems,  such  as  CLASSIC  [ 51, BACK  [ 311,  LOOM 
development 
properties  of  inferences 

are  introduced, 
in  terms  of  concept 
and  role  relationship.  This  abstract  architecture  has  been  the  basis  for  the 
[ 261,  and  KRIS  [ 31,  the 
of  the  computational 

In  the  TBox,  or  terminology, 
individuals 

concept  descriptions 
are  characterized 

(see  e.g.,  [28]), 
(see  e.g.,  [ 17,291) 

and  the  investigation 

of  algorithms 

language 

. 
Given  this  setting,  there  are  three  parameters 

language 

for  concept  descriptions, 

system: 
allowed,  and 
tried  to  improve  systems 
these  three  parameters.  But  in  all  existing  systems  and  almost  all  theoretical 

(i)the 
(iii)  the  semantics  given  to  concepts  and  statements.  Research 
by  modifying 
studies 

that  characterize  a  terminological 
form  of  the  statements 

for  all  components.4 

to  be  uniform 

(ii)the 

language  and  semantics  are  supposed 
The  results  of  those  studies  were  unsatisfactory 

inferences 
has  been  reached  about 

are  only  possible 

the  need  to  model  cyclic  dependencies 

in  at  least  two  respects.  First,  it  seems 
for  languages  with  little  expressivity.  Second, 
cycles,  although 
between  classes  of  objects  arises 

the  semantics  of  terminological 

that  tractable 
no  consensus 
in  applications 
constantly 

(see,  e.g., 

[ 271)  . 

We  suggest 

to  refine 

the  two-layered 

architecture 

consisting 

the  role  of  primitive 

is  twofold:  On  the  one  hand,  we  want 

Our  goal 
about 
cycles;  on  the  other  hand,  we  want  to  improve 
worst-case  complexity.  Since  our  changes  are  not  primarily  motivated  by  mathematical 
considerations 
practical  system  design. 

and  defined  concepts  and  the  semantics  of  terminological 

but  by  the  way  systems  are  used,  we  expect 

the  tradeoff  between  expressivity 

to  achieve  more  conceptual 

to  come  up  with  a  more 

and 

frame-like 

restrictions 

two  functions 

like  isa-relationships 

structures  by  introducing 

In  applications  we  found 

that  the  TBox  has  to  meet 

between  concepts,  or  range  restrictions 

at  a  time.  One 
primitive  concepts  and  roles,  together 
is  to  declare 
and 
with  type  information 
of  roles.  For  example,  suppose  we  want  to  model  a  company  envi- 
number 
the  concept  Employee  with  slots  lives-in  of  type  City, 
ronment.  Then  we  may  introduce 
salary  of  type  Salary,  and  boss  of  type  Manager.  The 
works-for  of  type  Department, 
slots  lives-in  and  salary  have  exactly  one  filler,  works-for  may  have  more  than  one  filler. 
The  concept  Manager 
in  HighSalary. 
systems.  For  this 
Such  introductions 
in 
purpose, 
also  an 
modeling 
Employee.  These  declarations 
the  set  of 
interpretations. 
possible 

limited  expressivity 
the  boss  of  an  Employee 

a  language  with 
tasks,  e.g., 

is  sufficient.  Cycles  occur  naturally 

of  Employee,  having  a  salary 

to  class  declarations 

have  no  definitional 

is  a  specialization 

they  just  restrict 

in  object-oriented 

is  a  Manager 

are  similar 

therefore 

import; 

and 

4 In  1241 a  combination  of  a  weak  language  for  ABoxes  and  a  strong  language  for  queries  has  been 

investigated. 

of  TBox  and  ABox. 
clarity 

M.  Buchheit  et  aL/Artijicial  Intelligence  99  (1998)  209-260 

211 

The  second 

is  to  define  new  concepts 

function  of  a  TBox 
by  specifying  necessary  and  sufficient  conditions 
seen  as  defining  abstractions 
concepts  are  important 
rules.  For  this  purpose  we  need  more  expressive 
they  must  have  definitional 

in  terms  of  primitive  ones 
for  concept  membership.  This  can  be 
in  the  knowledge  base.  Defined 
the  knowledge  base  and  as  left-hand  sides  of  trigger 
If  cycles  occur  in  this  part 

or  views  on  the  objects 

for  querying 

languages. 

import. 

As  an  outcome  of  our  analysis  we  propose  to  split  the  TBox  into  two  components: 
frame  structures  and  one  for  defining  views.  By  analogy 

one 
to  the  structure 
the  schema  and  the  second  one  the  view  part. 
the  form  of  statements, 

for  declaring 
of  databases  we  call  the  first  component 
We  envision 
and  the  semantics  of  cycles. 

the  two  parts  to  differ  with  respect  to  the  language, 

The  schema  consists  of  a  set  of  primitive 

concept 

introductions, 

formulated 

in  the 

language,  and  the  view  part  consists  of  a  set  of  concept  definitions, 

formulated 

In  general, 

schema 
in  the  view  language. 
view  language.  Since  the  role  of  statements 
interpretations, 
[ 301 )-is 
(see 
we  propose 
fixpoint  semantics. 

first  order  semantics-also 
adequate 

to  choose  a  semantics 

for  cycles  occurring 

the  schema 

language  will  be  less  expressive 

than  the 
in  the  schema  is  to  restrict  the  set  of  possible 
in  this  context 
called  descriptive 
semantics 
in  the  schema.  For  cycles  in  the  view  part, 
that  defines  concepts  uniquely,  e.g.,  least  or  greatest 

to  be  gained 

for  improving 

for  polynomial 

this  refinement 

the  full-fledged 

is  not  to  present 

form  of  statements, 

The  purpose  of  this  work 

the  options 
the  benefits 

the  new  architecture 
language, 

from 
has  more  degrees  of  freedom 
and  semantics 

design  of  a  new  sys- 
tem,  but  to  explore 
that  arise  from  the  separation  of  the  TBox  into  schema 
and  views  Among 
are  the  following 
three.  First, 
sys- 
tems,  since 
can  be  specified  differently 
for  schema  and  views.  In  fact,  we  found  a  combination 
of  schema  and  view  language 
that  allows 
the  two  languages 
into  one  leads 
to  a  con- 
sensus  about 
the  fact  that 
no  distinction 
in- 
and  defined  concepts.  Moreover, 
refers  to  inferences  with  defined  concepts. 
tractability 
We  proved  that  reasoning  with  cycles  is  easier  when  only  primitive  concepts  are  consid- 
complexity  measures, 
ered.  Third, 
which  yields  a  more  fine-grained 
of  reason- 
complexity 
ing. 

the  semantics 
has  been  made  between  primitive 

allows  for  more  differentiated 
picture  of  the  computational 

of  reasoning  with  cycles  mostly 

procedures  whereas  merging 

cycles  has  been  precisely 

that  one  of  the  obstacles 

the  refined  architecture 

Second,  we  believe 

of  terminological 

to  intractability. 

inference 

Beside  the  proposal 

for  a  new  architecture, 

the  paper  presents  various  technical 

and  the  complexity  of  terminological 
for  inclusion 

semantics 
semantics  proposed 

on  the  semantics 
effect  of  fixpoint 
for  various 
results 
complexity 
schema 
is  polynomial 
For  one  of  the  two  extension  we  identify 
polynomial 

results  on  reasoning 

under  descriptive 

reasoning. 

languages 

in  the  basic  language,  whereas 

a  syntactic 

in  the  literature 

in  presence  of  terminological 

it  is  intractable 

reasoning.  First,  we  analyse 

some  equivalence 
[ 28,351.  Second,  we  provide 
cycles  for  three  different 
that  reasoning 
for  two  of  its  extensions. 
that  still  allows 

restriction 

for 

semantics. 

In  particular,  we  prove 

axioms  and  we  provide 

Moreover,  we  prove  that  in  two  systems,  namely  KRIS, and  CONCEPTBASE  [ 221,  it 
the  complexity  of  reasoning.  As 

to  add  a  cyclic  schema  without 

increasing 

is  possible 

results 
the 

212 

M.  Buchheit  ef  al. /Art$cial 

Infe&vxe 

99  (1998)  209-260 

Table  1 
Syntax  and  semantics  of  concept 

forming  constructs 

Construct  name 

set 

top 
bottom 
singleton 
intersection 
union 
complement 
universal  quantification 
existential  quantification 
existential  agreement 
number  restrictions 

Syntax 

T 

;I 
CflD 

CUD 

4 

VR.C 
3R.C 
3Q  g  R 

(b  nR) 
(<  nR) 

Table  2 
Syntax  and  semantics  of  role  forming  constructs 

Construct  name 

inverse  role 
role  restriction 
role  chain 
role  conjunction 
self 

Syntax 

p-1 

(R:C) 
QoR 
QnR 
E 

A= 
0 
{a=) 
C=nDl 

C=UD= 
A=\@ 
1d1  1 Vd2 : Cdl,&)  E R*  - 
dl  E  C’} 
{dl  1 34  : (dl>d2)  E  RI  A  d2  E  C=} 
{d113dz:(dl,d2)EQZ.,d,,d2)ERZ} 
{dl  1 Ilid2 I (di.dz)  E R’}  2  n} 
{dl  / it{‘12 
E  R=}  <  n} 

I  Cdl.&) 

Semantics 

I (dz.d,) 
E  I’=} 
I Cdl.&)  E R’  Ad2  E  CT} 
1% 

{(dl,dz) 
{(dl.dz) 
{(4,4) 
{(dlsds)  I Cdl.&)  E Q=  A  (dl.d2)  E  RI} 
((4.4) 

) dl  E  A=} 

: (dl.d2) 

E  Qz/l 

(d2,d3)  E  Rx} 

byproducts  of  this  result,  we  also  prove  that  instance  checking 
(which  was  proven  by  Hollunder 

[ 181  only  for  a  restricted 

language). 

in  KRIS 

is  in  PSPACE 

In  the  following 
three  parts: 

concepts,  defined  concepts  and  assertions 

prises 
with  primitive 
tively.  In  Section  3  we  examine 
and  in  Section  4,  schemas  are  considered 
studies 
that  adding  a  simple  schema  with  cycles 
the  complexity  of  reasoning.  Finally,  conclusions 

section  we  outline  our  refined  architecture  of  a  TKRS,  which  com- 
the  view  taxonomy,  and  the  world  description,  dealing 
the  schema, 
respec- 
in  our  architecture 
cycles 
in  detail.  In  Section  5,  we  show  by  two  case 
to  existing  systems  does  not  increase 
are  drawn  in  Section  6. 

the  effect  of  terminological 

in  traditional 

systems, 

2.  The  refined  architecture 

We  start  this  section  by  a  short  reminder  on  concept 
and  their  semantics 

languages.  Then  we  discuss 

the 
in  the  different  components  of  a  TKRS.  Finally, 
and  introduce  different 

the  reasoning 

services  provided  by  each  component 

form  of  statements 
we  specify 
complexity  measures 

for  analyzing 

them. 

2.1.  Concept 

languages 

In  concept 

roles 
(ranged  over  by  Q,  R)  can  be  built  up  from  simpler  ones  using  concept  and  role  forming 

(ranged  over  by  C,  0)  and  complex 

complex  concepts 

languages, 

M.  Buchheit  et  al./Arti&ial 

Intelligence  99  (1998)  209-260 

213 

constructs 
symbols  are 

(see  Tables  1  and  2  for  a  set  of  common 

constructs). 

The  basic  syntactic 

(i)  concept  names,  which  are  divided 

into  schema  names 

(ranged  over  by  A,  B) 

and  view  names 
role  names 
individual  names 

(ranged  over  by  V) , 
(ranged  over  by  P),  and 
(or  individuals) 

(ranged  over  by  a,  b)  . 

(ii) 
(iii) 

to  an  element  of  A’.  We  assume 

.I)  consists  of  the  domain  AZ  and  the  interpretation 

function 
to  a  subset  of  A’,  every  role  to  a  subset  of  A’  x  A’, 
are 
is  usually 
(UNA).  Complex  concepts  and  roles  are  interpreted 

that  different 

individuals 

to  different  elements  of  A’,  i.e.,  a’  +  bz  for  a  #  b.  This  restriction 

.to the  semantics  given  in  Tables  1 and  2,  respectively 
of  the  set  X).  We  call  two  concepts  C  and  D  equivalent 

the 
(written  C  E  D), 
1.  A  subconcept  of  a  concept  C  is  a  substring  of 

(with  #X  we  denote 

interpretation 

An  interpretation  Z  =  (A’, 
.I,  which  maps  every  concept 
individual 
and  every 
mapped 
called  Unique  Name  Assumption 
according 
cardinality 
iff  Cz  =  DZ  for  every 
C  that  is  itself  a  concept. 
In  our  architecture, 

for  expressing 

schema  statements 

there  are  two  different  concept 

language 
and  queries 
whereas  concepts 
view  and  schema 
concept  and  role  forming  constructs 

in  a  TKRS,  a  schema 
views 
for  formulating 
in  the  schema  language  contain  only  schema  names 
in  the  view  language  may  contain  both  schema  and  view  names.  The 
in  the  case  studies  will  be  defined  by  restricting 
the  set  of 
languages 
to  a  subset  of  those  in  Tables  1 and  2. 

languages 
and  a  view  language 

to  the  system.  Concepts 

2.2.  The  three  components 

Now  we  describe 

the  three  parts  of  a  TKRS: 

the  schema, 

the  view  taxonomy,  and  the 

world  description. 

2.2.1.  The  schema 
The  schema 

introduces 
and  elementary 

concepts 
concepts  and  roles  that  models 
ovals,  (direct) 
isa  relationships 
Formally, 

relationships 

concept  and  role  names  and  states  isa-relationships 
type  constraints 

between 
for  the  roles.  Fig.  1  shows  a  part  of  the 
the  company  environment.  Concepts  are  represented  by 
by  dotted  arrows  and  roles  by  normal  arrows. 

between  concepts  and  type  constraints  on  roles  are  stated  by 

inclusion  axioms  having  one  of  the  forms: 

A  &  L), 

P  5  AI  x  AZ, 

(remember 

the  first  axiom,  called  a  concept 

that  only  schema  names  can  appear 

where  A,  Al,  A2  are  schema  names,  P  is  a  role  name,  and  D  is  a  concept  of  the  schema 
language 
language). 
Intuitively, 
inclusion,  states  that  all  instances  of  A  are 
also  instances  of  D.  The  second  axiom,  called  a  role  inclusion,  states  that  the  role  P  has 
axioms. 
domain  AI  and  codomain  AZ.  A  schema  S  consists  of  a  finite  set  of  inclusion 
An  interpretation  Z  satisjies  an  axiom  A  C: D  if  AZ  c  D’,  and  it  satisfies  P  C  Al  x  A2 
if  P’  G  AT  x  AC.  The  interpretation  Z  is  a  model  of  the  schema  S  if  it  satisfies  all 
axioms 

in  S.  Given  a  schema  S  and  two  concepts  C,  D,  we  say  that  C  is  S-satisjiable 

in  the  schema 

214 

M.  Buchheit  et  al. /Ar?Qicial  Intelligence  99  (1998)  209-260 

Fig.  1.  Concepts  and  roles  in  the  company  environment. 

Employee 

E  (=  1 salary) 

Employee 

g  (=  1 lives-in) 

Manager 

Manager 

C  Employee 

C  Vsalary.HighSalary 

Engineering  C  Subject 

HighSalary 

5  Salary 

salary 

boss 

E  Employee  x  Salary 

&  Employee  x  Manager 

Researcher 

E  Employee 

works-for 

C  Employee  x  Department 

Researcher 

Researcher 

E  Vworks-for.ResearchDept 
C  (2  1 has-degree) 

lives-in 

c  Employee  x  City 

has-degree  C  Researcher  x  Subject 

ResearchDept 

L  Department 

situated 

E  Department 

x  City 

Fig.  2.  Schema  axioms  for  the  company  environment. 

if  there  is  a  model  Z  of  S  such  that  Cz  #  0,  and  we  say  that  C  is  S-subsumed 
written  C  ES  D  or  S  k  C  L  D,  if  Cz  C  D’ 

for  every  model  Z  of  S. 

by  D, 

In  Fig.  2  we  give  the  schema  axioms 

that  the  role  salary  has  the  domain  Employee  and 
the  axiom  salary  L  Employee  x  Salary.  The  restriction 
exactly  one  salary 
is  expressed  by 
Employee  C  (<  1 salary).  5  The  fact  that  every  Manager 
axiom  Manager  5  Employee,  and  that  a  Manager  must  have  a  HighSalary 
Vsalary.HighSalary. 

for  the  company  example  of  Fig.  1.  The  fact 
is  stated  by 
that  an  Employee  must  have 
and 
leads  to  the 
to  Manager  G 

the  two  axioms  Employee  C  (3 

the  codomain  Salary 

is  an  Employee 

1  salary) 

6 

’ Two  axioms  of  the  form  A  E  (< 
‘The 

introduced 
new  architecture.  However, 
known  from  frame  systems  and  object-oriented 

for  defining  a  schema 

syntax 

databases. 

I P)  and  A  C  (2  1 P)  are  abbreviated  by  A  &  (=  1 P). 

in  a  real  system  one  would 

implement  more  user-friendly 

is  well-suited 

for  studying 

the  theoretical  properties  of  the 
as  they  are 

languages 

M.  Buchheit  et  al./Art$cial 

Intelligence  99  (1998)  209-260 

215 

Inclusion 

axioms 
schema  na.me  on  the  left-hand 
declares 
for  being  a  manager. 
If  an  individual 
too. 

that  every  manager 

is  asserted 

It  gives, 

impose  only  necessary 

conditions 

for  being  an  instance 

of  the 

the  axiom 

side.  For  example, 

“Manager  E  Employee” 
is  an  employee,  but  does  not  give  a  sufficient  condition 
for  being  an  employee: 
condition 
that  it  is  an  Employee, 
to  be  a  Manager  we  can  deduce 

though,  a  sufficient 

“Employee 

In  general, 

axioms.  So  one  may  state 

inclusion 
employees,  writing 

cycles 
through 
are  themselves 
systems 
is  a  serious 

A  schema  may  contain 
the  bosses  of  an  employee 
existing 
Employee”. 
for  terminological 
cycles,  which 
domain  models.  One  of  the  main 
argue  that  axioms 
we  consider  possible.  Therefore, 
semantics,  which 
poses 
and  greatest 
sense  are  the  least  or  greatest, 
Section  3. 

that 
~  Vboss. 
(such  as  CLASSIC  and  KRIS)  do  not  allow 
in 
is  to  fix  their  semantics.  We 
to  cycles 
in  the  schema  have  the  role  of  narrowing  down  the  class  of  models 
they  should  be  interpreted  under  so-called  descriptive 
[30]  pro- 
least  fixpoint 
that  in  some 
in 

in  the  presence  of  cycles,  namely 
into  account  only  models 

two  other  kinds  of  semantics 

respectively.  We  will  discuss 

since  cycles  are  ubiquitous 

this  issue  in  more  detail 

for  reasoning.  Nebel 

semantics,  which 

into  consideration 

takes  all  models 

issues  related 

restriction, 

fixpoint 

take 

2.2.2.  The  view  taxonomy 

The  view  taxonomy  contains  view  dejinitions  of  the  form 

where  V  is  a  view  name  and  C  is  a  concept 
schema  and  view  names  can  appear 
defining  ne:w  classes  of  objects 
introduced 
between  schema  and  view  names 
between 

that  both 
by 
in  view  concepts).  Views  provide  abstractions 
in  terms  of  other  views  and  the  concept  and  role  names 
in  the  schema.  We  refer  to  “V  A  C”  as  the  definition  of  V.  The  distinction 
the  separation 

is  crucial  for  our  architecture. 

in  the  view  language 

schema  and  views. 

(remember 

It  ensures 

A  view  taxonomy  V  is  a  finite  set  of  view  definitions 
(i) 
(ii)  eac.h  view  name  occurring  on  the  right-hand 

for  each  view  name 

there  is  at  most  one  definition, 

such  that 
and 

side  of  a  definition  has  a  definition 

in  11. 

Differently 

from  schema  axioms,  view  definitions  give  necessary  and  sufficient  con- 
the  bosses 

ditions.  As  an  example  of  a  view,  using  the  inverse  of  boss,  one  can  describe 
of  the  employee  Bill  as  the  instances  of  “BillsBosses  A  3boss-‘.{BILL}“. 

An  interpretation  Z  satisfies 

the  definition  V  -  C  if  V’  = C’,  and  it  is  a  model  for  a 

view  taxonomy  V  if  Z  satisfies  all  definitions 

in  V. 

Whether  or  not 

to  allow  cycles 

in  view  definitions 

the  role  of  cycles 

from 
the  schema, 
In  this  case,  descriptive 

Differently 
definitions. 
determine 
ones.  We  will  discuss 
this  problem 
In  this  paper  however,  we  only  deal  with  cycle-free  view 
problem  does  not  arise  and  descriptive 

the  extension  of  defined  concepts 

in  general 

semantics 

semantics 

uniquely 

is  adequate. 

is  a  delicate  design  decision. 
in  the  view  part  is  to  state  recursive 
it  might  not 
is  not  adequate  because 
from  the  extension  of  the  other 
cycles. 
this 

taxonomies.  Therefore 

in  the  section  on  terminological 

216 

M.  Buchheit  et  al. /Artijicial 

Intelligence  99  (1998)  209-260 

2.2.3.  The  world  description 

A  state  of  affairs  in  the  world  is  described  by  assertions  of  the  form 

a:  c, 

aRb, 

an 
where  C  and  R  are  concept  and  role  descriptions 
assertion  a: C  states  that  a  is  an  instance  of  the  concept  C,  and  aRb  states  that  LZ is  in 
the  role  R.  Assertions  of  the  form  a: A  or  aPb,  where  A  and  P 
relation  with  b  through 
are  names 
involving  view 
names  and  complex  concepts  are  comparable 

in  the  schema,  resemble  basic  facts  in  a  database.  Assertions 

in  the  view  language. 

to  view  updates. 

Intuitively, 

A  world  description  W 

is  as  usual:  an 
interpretation  Z  satisjes  a: C  if  a’  E  C’  and  it  satisfies  aRb  if  (ar,  bz)  E  Rx;  it  is  a 
in  W. 
model  of  W  if  it  satisfies  every  assertion 

is  a  finite  set  of  assertions.  The  semantics 

Summarizing, 

a  knowledge  base  is  a  triple  2  =  (S,  V,  W),  where  S  is  a  schema, 
V  a  view  taxonomy, 
and  W  a  world  description.  An  interpretation  Z  is  a  model  of  a 
knowledge  base  if  it  is  a  model  of  all  three  components.  A  knowledge  base  is  satisjiable 
if  there  exists  a  model  for  it. 

2.3.  Reasoning 

services 

There  are  several 

reasoning 

services 

that  a  terminological 

system  must  provide.  We 

concentrate 

on  the  following  as  the  basic  ones. 

l Schema  validation: 

Given  a  schema  S,  check  whether 
schema  name  as  a  nonempty 

set. 

l Schema  subsumption: 

there  exists  a  model  of  S  that  interprets  every 

Given  a  schema  S,  and  schema  names  Al  and  AZ,  check  whether  A;  C  At 
every  model  Z  of  S.  This  is  written  as  S  /=  Al  C  A2  or  as  Al  CS  AZ. 

for 

l  View  subsumption: 

Given  a  schema  S,  a  view  taxonomy  V,  and  view  names  V,  and  6,  check  whether 
Vl” &  V-f  for  every  model  Z  of  S  and  V.  This  is  written  as  S,  V  +  VI  &  V2 or  as 

Vl  C&V 

v,. 

l  Instance  checking: 

Given  a  knowledge  base  2,  an  individual 
uz  E  VI  holds  in  every  model  Z  of  2’.  This  is  written  as  2  k  a:  V. 

a,  and  a  view  name  V,  check  whether 

the  skeleton  of  his/her  domain  model  is  consistent. 

support  the  knowledge  engineer  by  check- 
is  the 

Instance  checking 

Schema  validation  and  schema  subsumption 

in  querying 
queries 

ing  whether 
basic  operation 
and  optimizing 
account 
subsumption, 
rid  of  S  and  V  by  expanding  definitions 
S  and/or  V  are  cyclic. 

in  all  services  and 

but  also  for  instance  checking. 

that  the  view 

(see  e.g.,  [7]  ).  Note  that  the  schema  S  has  to  be  taken 

a  knowledge  base.  View  subsumption 

helps 

in  organizing 
into 
for  view 
that  forbid  cycles,  one  can  get 
(as  shown  in  [ 291)  . This  is  not  possible  when 

taxonomy  Y  is  relevant  not  only 

In  systems 

Notice 
explanation 
sertions  play  no  role 

for  this 

that  we  do  not  consider 

the  world  description 

for  subsumption 

is  twofold:  First, 
in  determining 

in  most  of  the  languages  we  consider, 
relation 
the  subsumption 

(see  e.g., 

problems.  The 
the  as- 
and 

[ 29]), 

M.  Buchheit  et  al. /Artijicial 

Intelligence  99  (1998)  209-260 

217 

therefore 
languages 
taining 
the  static  relationship 
description. 

references 

the  world  description 
in  which  assertions  do  affect  the  subsumption 

can  be  neglected 

to  individuals 

e.g.,  the  singleton 

between  views, 

independently 

relation 

in  such  cases.  Second,  even 

(those 
set  constructor)  we  are  interested 

in  the 
languages  con- 
in 
of  the  current  state  of  the  world 

2.4.  Comp,!exity measures 

into  three  components 

allows  us  to  introduce 

The  separation  of  the  core  of  a  TKRS 
for  analyzing 

refined  complexity  measures 

the  difficulty  of  inferences. 
is  generally  measured  with  respect 

The  complexity 

of  a  problem 

input.  However,  with  regard 
the  schema, 

whole 
given,  namely 
reason,  different  kinds  of  complexity  measures  may  be  defined,  similarly 
been  suggested 
in  [ 371  for  queries  over  relational  databases.  We  consider 
measures 

to  our  setting, 
taxonomy, 

the  size  of  X): 

to  the  size  of  the 
three  different  pieces  of  input  are 
this 
For 
to  what  has 
the  following 

the  world  description. 

the  view 

and 

(where  1x1 denotes 
l  schem.a  complexity:  the  complexity 
l  view complexity:  the  complexity 
l  world  description  complexity:  the  complexity 
l  combined  complexity:  the  complexity 
complexity 
The  combined 

takes  into  account 

as  a  function  of  IS]; 

as  a  function  of  IVI; 

as  a  function  of  IWI; 

as  a  function  of  ISI  +  IV/ +  I WI. 

consider  only  a  part  of  the  input,  so  they  are  meaningful 
to  suppose 
that  the  size  of  the  other  parts 
to  analyze 
the  schema  complexity 
much  bigger 
in  the  world  description 
to  be  much 

larger  than  the  schema  and  the  view  part. 

of  view  subsumption 

complexity 

than  the  two  views  which  are  compared.  Similarly,  one  might  be  interested 
of  instance  checking  whenever  one  can  expect  W 

the  whole  input.  The  other  three  instead 
it  is  reasonable 
it  is  sensible 
the  schema 

instance, 
because  usually 

only  when 

is  negligible.  For 

is 

It  is  worth  noticing 

that  for  every  problem 

the  combined 

complexity, 

input, 

the  whole 

account 
complexity  of  a  problem 
the  other  ones  are  linear.  Similarly, 
combined 
is  polynomial, 

complexity 

is  at  least  as  high  as  the  other 

three.  For  example, 

is  0(  ISI.  15’1. IWl),  the  combined  complexity 
if  the  complexity  of  a  given  problem 

taking 

into 
if  the 
is  cubic,  whereas 
the 
is  0(  IS]lvl), 

and  the  view  complexity 

are  exponential, 

the  schema  complexity 

and  the  world  description 

complexity 

is  constant. 

In  this  paper,  we  use  combined 
in  our  architecture  with  reasoning 
complexity 
reasoning 
investigated 

the  complexity  of  reasoning 
one.  Moreover,  we  use  schema 
to  show  how  the  presence  of  a  large  schema  affects  the  complexity  of  the 
services  previously  defined.  View  and  world  description  complexity  have  been 
in  [ 1,291  and  [ 17,321, 

in  the  traditional 

respectively. 

to  compare 

complexity 

(under  different  names) 
For  a  general  description  of  the  complexity 

classes  we  use,  see  [ 231. 

3.  Terminological  cycles 

Terminologies  with  cycles-so-called 

been  investigated 
by  a  number  of  researchers.  There  are  two  main 
cycles: 
The  first  is  to  fix  the  semantics  and  the  second,  based  on  this,  to  come  up  with  a  proper 

to  terminological 

“terminological 

issues  related 

cycles”-have 

218 

M.  Buchheit  et  al. /Artificial  Intelligence  99  (I 998)  209-260 

inference  procedure. 
this  end,  we  first  recall  some  definitions 
topic,  Then  we  examine 
shows  up  that  our  choice, 
inferences 
with  in  Sections  4  and  5. 

In  this  section  we  discuss 

in  detail 

and  then  summarize 

the  different  possibilities 

of  a  semantics 

the  descriptive 

semantics, 

the  problem  of  semantics.  To 
the  previous  work  on  this 
It 
for  our  formalism. 
comes  off  best.  The  problem  of 
are  dealt 

and  the  influence  of  the  different  kinds  of  cycles  to  their  complexity 

3.1.  Semantics 

for  cycles 

a  set  of  inclusions 

Intuitively, 
on  the  left-hand 
define  when  a  terminology, 
kinds  of  semantics 
of  concept 
distinguish 
inferences 

inclusions. 
between  different 
for  concrete  schema 

or  definitions 

side  also  appears  on  the  right-hand 

schema  or  view  taxonomy 

for  cycles.  For  the  moment  we  suppose 

In  Section  4  we  extend 

is  cyclic, 

if  a  concept  name  appearing 
side.  In  the  following,  we  formally 
is  cyclic.  Then  we  review  various 
that  a  schema  consists  only 
this  to  role  inclusions.  There  we  also 
of 
their  effects  on  the  complexity 

types  of  cycles  and 
languages. 

Let  7  be  a  terminology 
there 

and  view  definitions  where 
graph 
of  7  as  follows.  The  nodes  are  the  concept  names  in  7.  Let  AI,  A2  be  two  nodes. 
inclusion  or  a  view  definition 
is  an  edge  from  A, 

consisting  of  concept 
is  at  most  one  definition.  We  define 

to  AZ,  iff  there  is  a  concept 

the  dependency 

inclusions 

for  each  view  name 
D(7) 
There 
with  Al  on  its  left-hand 
cyclic, 
contains 
if  D(  7) 
knowledge  base.  We  say  S  is  cyclic, 
D(V) 
D (S  u  V)  contains  a  cycle  if  and  only  if  either  D(S) 

a  cycle.  Note 

contains 

if  D(S) 

is 
side  and  A2  appearing  on  its  right-hand 
a  cycle,  and  cycle-free  otherwise.  Let  2  =  (S,  V,  W)  be  a 
if 
in  the  schema, 

that,  since  view  names  are  not  allowed 

contains  a  cycle.  We  say  1,  is  cyclic, 

side.  We  say  7 

or  D(V) 

for  a  terminology  means 

To  come  up  with  a  semantics 

for  reasoning.  Let  us  concentrate 

contains  one. 
to  define  which  of  its  models 
should  be  considered 
and  let  7  be  a 
on  definitions 
set  of  concept  definitions, 
:=  {A;  G  C;  1 i  E  l..n},  where  each  A;  occurs  only  once 
as  the  left-hand 
that 
the  other 
occur  on  the  left-hand 
ones  are  called  atomic  concepts.  All  role  names  are  atomic  roles,  since  there  are  no  role 
definitions. 

i.e.,  A;  #  Al  for  i  #  j.  The  concept  names 

are  called  defbzed  concepts, 

side  of  a  view  definition 

side  of  a  definition, 

7 

to  a  model  of  the  terminology 

The  problem  when  cycles  are  present 

to  the  idea  of  a  “definition”.  So  one  has  to  restrict 

is  that  an  interpretation 
in  more 

of  the  atomic  concepts 
than  one  way  (see  e.g., 
the  defined  concepts  are  not  uniquely  determined  by  the  atomic  ones. 
the  models 
in 

might  be  extendible 
[ 281)  . Therefore, 
This  is  counterintuitive 
taken  into  account.  Nebel 
the  presence  of  cycles:  descriptive 
jixpoint 
and  greatest 
account-as 
usual 
gfp-semantics 
maximal.  To  make  this  idea  more  precise,  we  need  some  definitions. 

into 
lfp-  and 
that  are  in  some  sense  minimal  or 

three  types  of  semantics 
least  &point 

for  a  terminology 
(@semantics), 

semantics, 
(&p-semantics). 

models  of  a  terminology.  The 

take  into  account  only 

The  descriptive 

[28]  proposes 

those  models 

semantics-all 

first-order 

semantics 

semantics 

semantics 

takes 

An  atomic 

interpretation  3  of  7 

An  atomic 
denotation  of  the  Ai’s.  Note  that  not  every  extension  of  3 

J  can  be  extended 

interpretation 

is  a  model  of  7. 

interprets  only  the  atomic  concepts  and  roles  in  7. 
the 

to  an  interpretation 

of  7  by  defining 

M.  Buchheit  et  al. /Artificial 

Intelligence  99  (1998)  209-260 

219 

Let  J  be  an  atomic 
all  subsets  of  A  and  (2’)” 
‘7$  (2”)”  + 

(2’)”  by 

interpretation 

of  ‘7  with  domain  A.  Let  2’  denote 
the  n-fold  Cartesian  product  of  2’.  We  define  a  mapping 

the  set  of 

7$-(O) 

:=  (c&...,c:>, 

whereO:==(Oi,..., 

0,) 

A fixpoint  of  73 

and  7  is  the  extension  of  3  defined  by  AZ  := Oi  for  i  E  l..n. 
the  interpretation 

is  an  0  E  ( 2A)n  such  that  7~  (0)  =  0.  Obviously, 

defined  by  J  and  0  is  a  model  of  7 

if  and  only  if  0  is  a  fixpoint  of  73. 

lattice 

(D,  6) 

is  called  monotonic 

A  mapping  T:  D  -+  D  on  a  complete 

for  all  a,  b  E  D.  Every  monotonic  mapping  on  a  complete 
and  a  leastfipoint 
the  fixpoints 

if  a  <  b 
implies  T(a)  <  T(b) 
lattice 
has  a  fixpoint.  Among 
(see 
e.g.,  [25,  Chapter  1,  Section  51).  Let  “G”  be  the  componentwise 
subset  ordering  on 
lattice,  every  monotonic  mapping  7~  has  a 
is  a  complete 
(2”)“.  Since 
greatest  and  a  least  fixpoint.  There  exist  simple  syntactic  criteria  on  terminologies  which 
(see  e.g.,  [ 351).  We  say 
guarantee 
that  a  terminology 

Ithat,  for  a  given  7,  all  73  are  monotonic 

there  is  a  greatest&point 

for  all  3. 

for  all  J 

((2”)“, 

6) 

7 

is  monotonic 
For  a  set  of  concept  definitions 

models  of  7 
lfp-semantics 
some  mapping  73 

that  are  the  greatest 
takes  into  account  only 
(lfp-models). 

if  the  7~  are  monotonic 
the  gfp-semantics 
7 
fixpoint  of  some  mapping  73 

those  models  of  7 

takes  into  account  only 
(gfp-models). 

those 
The 
that  are  the  least  fixpoint  of 

3.2.  Previous  work 

There  exists  a  rich  body  of  research  on  the  semantics  of  terminological 

cycles  and  on 

in  their  presence. 

algorithms 
[ 1 ] 
containing 

for  reasoning 
inferences  with 

(see 

respect 

concept  conjunction 

In 
3L0, 
decision  problems 
comes  off  best” 
language  TLN,  which  extends  3Lc  by  number 
semantics,  which  covers  our  intuitions 
languages, 
the  complexity 
to  PSPACE-complete 

of  subsumption  with  respect 

for  lfp-  and  gfp-semantics. 

the  presence  of  cycles 

increases 

to  the  three 

types  of  semantics 

for  the  language 

and  universal  quantification, 
for  finite  automata.  Baader  argues  that  “as  it  stands,  the  gfp-semantics 

are  characterized 

as 

[ 1,  p. 6261)  .  In  [ 301  these  characterizations 

are  extended 

to  the 
restrictions.  Nebel  argues  that  “the  only 
is  the  descriptive  one”  (see  [ 28,  p.  1351)  . In  both 
the  complexity  of  reasoning.  For  example, 
rises  from  NP-complete 
to  a  terminology 

Dionne,  Mays  and  Oles 

[ 12,131  base 

their  approach 

to  the  semantics 

on  non-well-founded 
show  that  subsumption 
semantics. 

set 

theory.  They  consider 
their  semantics 

under 

a  limited 

language 

for  which 

is  equivalent 

to  subsumption 

Reasoning  with  respect 

to  descriptive 
,4LC  and  in  [6]  for  ALCNI?. 

language 
ments  of  concepts  and  ALCNR 
ti0ns.l  ALCNR 

extends  dLC  by  role  conjunction 

and  number 

is  the  language  of  the  system  KRIS.  For  both  dLC 

semantics  has  been  considered 
The  language  ALC  extends 

of  cycles 
they 
under  gfp- 

in  [2]  for  the 
.FLo  by  comple- 
restric- 
and  ALCNI?. 

‘See  Section  5.1  for  a  formal  definition  of  the  two  languages. 

220 

M.  Buchheit  et  al. /Artificial 

Intelligence  99  (1998)  209-260 

subsumption 
proven  EXPTIME-complete) 
terminologies. 

checking  with  cyclic  definitions 

is  EXPTIME-hard 

,  whereas 

the  problem 

is  PSPACE-complete 

(for  ACC  it  has  been 
for  cycle-free 

An  approach  based  on  the  ~-calculus  was  proposed 

independently 

[ 111.  Following 
to  apply  lfp-  or  gfp-semantics 

this  approach 

by  Schild 

[35] 
to  specify 
it  is  possible 
to  a  particular  definition. 

flexibility  but  it  leaves 

the  burden  of  choice 

to  the  user  and  not  to 

in  a  terminology  whether 

and  De  Giacomo  and  Lenzerini 
locally 
This  offers  optimal 
the  designer  of  the  system. 

Summarizing, 

one  can  say  that  the  presence  of  terminological 

in  the  examined 

the 
cases.  No  consensus  has  been  reached  as  to 

increases 

cycles 

complexity 
which  semantics-lfp-, 

of  reasoning 

gfp-,  or  descriptive-should 

be  preferred. 

3.3.  Inclusions  versus  dejinitions 

to  apply 

In  order 

the  different  kinds  of  semantics 

the  consequences,  we  have  to  transform 

inclusions 
is  defined  only  for  sets  of  definitions.  Nebel 

and  to 
since  fix- 
examine 
to  transform 
point  semantics 
an  inclusion  A  L  C  into  a  definition  A  A  A  fl  C  where  A  is  a  new  concept  name. 
Schild 
are  unsatisfactory 
following. 

into  A  A  A  fl  C.  However,  both  transformations 
for  schema 

the  transformation 
or  even  unnecessary 

into  definitions, 
[ 281  proposes 

as  we  will  show  in  the 

to  our  schema 

[ 351  proposes 

formalism 

inclusions 

Let  S  =  {A;  C  C;  1 i  E  1 ..n}  be  a  set  of  inclusion 

axioms.  Without 

loss  of  generality, 

that  each  A;  occurs  only  once  on  the  left-hand 

side,  since 

inclusions  A  C 

, A  C  D,  can  be  replaced  by  the  single 

inclusion  A  L  DI  fl  . . . n  D,. 

we  suppose 
. 
DI, 

With  s  we  denote 

the  transformation 

proposed  by  Nebel,  with  S” 

the  inclusions  by  definitions, 

the  one  proposed 
that  is, 

by  Schild,  and  with  S=  the  one  that  replaces 

l S  :=  {A;  -  Ai  n  Ci  1 i  E  l..n}, 
l S” 
l S=:={Ai-C; 

:=  {A;  -  A;  n  C;  1 i  E  l..n}, 
liE 

l..n}. 

of  lfp-  and  gfp-semantics 

and  the 

Obviously, 

Now  we  consider 

every  model  of  $,  S”,  or  S=  is  also  a  model  of  S. 
in  turn  the  different  combinations 
of  Nebel  and  Schild.  Taking 

the  transformation 

of  the  interpretation 

interprets  each  Ai  as  the  empty  set,  independently 

has  for  both  transforma- 
lfp-semantics 
that  naturally  arising  models  are  omitted.  Obviously,  an  lfp-model 

two  transformations 
tions  the  consequence 
of  the  Ci. 
of  S” 
s,  we  consider  an  example.  Let  S  be  the  schema 
In  order  to  examine 
in 
of  s  =  {A  k  A  n  VP.A}  can  be  characterized 
S  =  {A  C: V’P.A}.  The  lfp-models 
terms  of  P-chains.  A  P-chain 
is  a  sequence  of  objects  where  each  one  is  a  P-filler  of 
its  predecessor.  An  lfp-model  of  3  interprets  A  as  all  the  instances  of  A  for  which  all 
the  objects  reachable  by  a  P-chain  are  again  in  A  and  from  which  no  infinite  P-chain 
is 
a  cyclic  P-chain  are  omitted.  For 
issuing 
that  models  containing 
example,  with  the  schema  S  =  {Employee  C  Vis-deputy-of.Employee} 
and  the  world 
JOE,  with  the  lfp- 
description  where  JOE  is-deputy-of  MARY  and  MARY  is-deputy-of 
JOE  and  MARY  cannot  be  Employees.  Notice  however  that  this  is  a  problem 
semantics, 
of  lfp-semantics 
only  and  it  shows 
that  the  approach  of  taking 

in  general,  and  not  one  of  the  specific  transformation 

(see  [ 1 ] ) . This  means 

is  not  acceptable 

in  this  situation. 

lfp-semantics 

M.  Buchheit  et  al. /Art$cial 

Intelligence  99  (1998)  209-260 

221 

Before  we  consider 

the  combinations 

of  gfp-semantics  with  the  two  transformations, 

we  have  to  introduce 
(D,  6).  With  gfp(T)  we  denote 
With 
the  Proposition 

l&X  we  denote 

5.1  in  [ 251. 

some  notations.  Let  T: D  3  D  be  a  mapping  on  a  complete 

the  greatest 

lattice 
fixpoint  of  T.  Let  X  be  a  subset  of  D. 
is  a  weak  form  of 

the  least  upper  bound  of  X.  The  next  result 

Proposition  3.1.  Let  T: D  +  D  be  a  monotonic  mapping  on  the  complete  lattice 
(D,  6).  Then  gfp(T)  = lub{x  1 x  6  T(x)}. 

The  following  proposition,  due  to  Schild 
S”  and  S=  are  equivalent  under  gfp-semantics. 

[ 341,  shows  that  for  a  large  class  of  schemas, 

Proposition  3.2.  Let  S  be  a  set  of  inclusion  axioms.  Suppose  that  S=  is  monotonic. 
Then  an  interpretation  Z  is a &&model  of S”  iff Z  is a  tip-model  of  F. 

that  if  S=  is  monotonic 

Proof.  First,  notice 
then  S” 
{A;  L  Ci  1 i  E  1 ..n}  and  Zi  and  ZZ  two  interpretations 
l..n. 
A?  2  A?  and  CIF1 C  C,?, 
monotonic. 

If  S=  is  monotonic 

then  C,?’  2  Cp 

it  follows 

is  monotonic. 

such  that  AT  C  A? 

In  fact,  let  S  = 
for  i  E 

f or  i  E  l..n.  From 

the  two  set  inclusions 

that  A?  n  C,?  &  A?  rl ClF2, proving 

that  S” 

is 

Let  Z  =  (A, 

.‘)  be  an  interpretation 

and  ,7  the  corresponding 

i.e.,  the  restriction  of  Z  to  the  atomic  concepts  and  roles  of  S.  Remember 
is  a  complete 
componentwise 

on  (24)‘,  Then  the  following  holds: 

lattice.  With  Cz  we  denote 

intersection 

the  vector 

(Cf, 

atomic 

interpretation, 
that  ( (24)“,  <) 
. . . , C,“)  and  with  “A”  the 

gfp(ST)  = lub{U  1 0  <  S?(O)} 

=zub{O~O<OAC=} 

=  lub{O  1 0  <  C=} 

= lub{U  I 0  6  S;(O)} 

=gfp(s;). 

(1) 

(2) 

(3) 

(4) 

(5) 

Eqs.  ( 1)  and  (5)  follow  from  the  monotonicity 
Eq.  (2)  and 
Eq.  (3) 
AcAnB. 

is  based  on  a  well-known 

result 

(4) 

0 

follow  by  definition  of  the  mappings  Sy  and  S>, 

of  S”  and  S=  and  from  Proposition  3.1, 
and 
if 

i.e.,  A  C  B  if  and  only 

respectively, 

from  set  theory, 

As  a  consequence 

of  the  preceding  proposition, 

taking  the  transformation 

gether  with  gfp-semantics 
to  be  identical.  For  example, 

if  the  schema 

is 

forces  all  schema  concepts  with  the  same  frame-like 

of  Schild  to- 
structure 

S  =  {Horse  E  Vchild.Horse, 

Human  C  Vchild.Human}, 

horses  and  humans  would  be  equivalent  under  gfp-semantics. 
the  transformation 

Next  we  consider 

S.  We  show  that  the  descriptive  models  of  S 

and  the  gfp-models  of  S  correspond 

to  each  other  in  the  sense  that 

222 

M.  Buchheit  et  al./Art@cial 

Intelligence  99  (1998)  209-260 

(  1)  every  gfp-model  of  S  is  a  descriptive  model  of  S  and 
(2)  every  descriptive  model  of  S  can  be  turned 

into  a  gfp-model  of  S  by  choosing 

the  denotation  of  the  additional 

atomic  concepts  Ai  in  a  suitable  manner. 

The  first  point 

is  obvious.  To  see  the  second  point,  for  an  interpretation  Z  of  S  let  z 

denote 

the  interpretation 

of  S  defined  by  A’ 

:=  A’  and  Pz 

:= P’ 

for  every  concept 

name  A  and  role  name  P  appearing 
holds. 

in  S  and  A;’  :=  AZ  for  i  E  1.~.  Then  the  following 

Proposition  3.3.  Let  Z  be  a  model  of  S.  Then  z  is  a  &p-model  of  s. 

Proof.  Let  2  denote 
. . , AZ) 

(A?,. 

the  atomic 

interpretation 

corresponding 

to  r.  We  first  show  that 

is  a  fixpoint  of  ST.  To  this  end  we  have  to  show  that  AT  =  (Ai  n  C;)’ 

for  i  E  1 ..n.  By  definition  of  z 
to  AZ  =  AZ  n  Cl?  for  i  E  1.~.  The 
inclusions  A’  >  AZ  n  C,?  hold  trivially.  For  the  inclusions  Al  G  AI  fl  C,?  it  remains 
to  show  that  A’  &  C,?  for  i  E  1.~.  But  this  follows  from  the  fact  that  Z  is  a  model  of 
S  =  {Ai  &  Ci  1 i  E  l..n}. 

this  is  equivalent 

In  order 

to  see 

that  z 

is  a  gfp-model 

observe 

that  for  every 

fixpoint  model  Z* 

extending  3 

it  holds  that  A’*  =  Aa  f’Y C” 

and  therefore  A’*  G  AT.  But  by  definition 

of  z  we  have  AT  =  $  =  AT  = AT.  That  is,  AZ*  G  AT.  Hence,  Z*  is  a  smaller  fixpoint 
than  2. 

0 

Hence 

taking 
mantics  and  gfp-semantics 
semantics 
means 
with  respect 
semantics. 

that  making 

to  gfp-semantics 

the  transformation 

of  Nebel  has  the  consequence 

that  descriptive 

se- 

is  also  a  conclusion  with  respect 

to  gfp-semantics 

coincide, 

i.e.,  every  conclusion  with  respect 

to  descriptive 
and  vice  versa.  But  this 

that  transformation 

a  mechanism 
is  just  a  detour  of  reasoning  with  respect 

and  then  providing 

for  reasoning 
to  descriptive 

The  following 

theorem  summarizes 
tions  proposed  by  Nebel  and  Schild. 

our  results  on  gfp-semantics 

for  the  transforma- 

Theorem  3.4.  Let  S  be  a  set  of  inclusion  axioms  and  Al,  A2  two  schema  names. 

If  S=  is  monotonic, 

(i) 
(ii)  S  k  Al  &  A2  under  g&-semantics 

then  S”  and  S=  are  equivalent  under  &p-semantics. 

if and  only  if  S  k  Al  r  A2  under  descriptive 

semantics. 

In  conclusion, 
ism  leads  either 
gives  additional 

one  can  say  that  adopting 
to  unacceptable 
evidence 

for  our  choice 

lfp-  or  gfp-semantics 

results  or  is  equivalent 

for  our  schema  formal- 
semantics.  This 

to  take  descriptive 

for  the  schema. 

to  descriptive 
semantics 

3.4.  Schema  cycles  versus  view  cycles 

We  feel  that  much  of  the  confusion 

many  computational 
fore  we  propose 

cycles  and 
problems  stem  from  the  mixing  of  inclusions  and  definitions.  There- 
the  schema,  containing  only  inclusions, 

about  the  semantics  of  terminological 

to  make  a  distinction  between 

M.  Buchheit et al. /Artijicial  Intelligence 99 (1998) 209-260 

223 

containing 

the  vifew  taxonomy 
to  the  concept 

and 
respect 
have  the  role  of  narrowing  down 
they  should  be  interpreted  under  descriptive 
this  choice. 
section  support 
from  the  schema, 
Differently 

only  definitions.  These 
language  and  the  type  of  semantics.  The  axioms 

two  parts  also  differ  with 
in  the  schema 
the  class  of  models  we  consider  possible.  Therefore, 
in  this 

semantics.  Also  the  results  presented 

the  role  of  cycles  in  the  view  part  is  to  state  recursive  def- 
that  are  above  Bill 

the  group  of  individuals 

-  BillsBossesUZlboss-‘.BillsSuperBosses”. 

if  we  assume  descriptive 

But  as  argued  before, 
semantics.  For  a 

if  we  want  to  describe 

this  does  not  yield  a  definition 

initions.  For  example, 
in  the  hierarchy  of  bosses  we  can  use  the  definitions 
and  “BillsSuperBosses 
in  general 
fixed  interpretation 
BillsSuperBosses 
obtain 
subsumption 
language  defined 

the  intended  meaning 

in  Tables  1  and  2. 

of  BILL  and  the  role  boss  there  may  be  several  ways  to  interpret 
in  such  a  way  that  the  above  equality  holds.  In  this  example,  we  only 
for 
of  views  under  such  semantics  are  known  only  for  fragments  of  the  concept 

lfp-semantics.  Unfortunately, 

if  we  assume 

algorithms 

“BillsBosses  A  Iboss-‘.{BILL}” 

In  this  paper,  we  only  deal  with  cycle-free  view  taxonomies. 

In  this  case  all  the  three 

types  of  semantics 

coincide. 

4.  Schemas 

The  schema 

introduces 

the  concepts 

and  roles  of  the  domain 

concepts 

in  terminological 

their  relationships. 

In  this  section  we  first  introduce 
the  statements  most  frequently  occurring 

describes 
In  SC,  we  can  express 
primitive 
the  language  S&,,  where 
database  schemas.  Then  we  investigate 
one  can  state  that  two  classes  are  disjoint,  and  S&v,  which  allows  for  statements  about 
inverse  attributes.  We  show  that  reasoning 
it  is  hard 
for  the  two  extensions.  The  language  SL  will  also  be  used  in  Section  5  as  the  schema 
language 

systems  and  in  the  static  parts  of  object-oriented 

two  extensions  of  SC 

in  our  case  studies. 

about  SC-schemas 

in  the  declaration 

is  easy,  while 

the  concept 

to  be  modeled 

and 
language  SE. 
of 

4.1.  SC-schemas 

A  schema  does  not  contain  definitions, 

concepts  and  roles,  which  are  expressed  by  inclusion 

but  imposes  only  necessary 
axioms. 

conditions 

on 

Basic  schema 

information 

can  be  captured 

if  we  choose 

the  concept 

language  SC, 

introduced 

in  171,  which  is  defined  by  the  syntax  rule 

D  - 

A  1 VP.A  1 (2  1 P)  ( (<  1 P). 

like 
As  shown  in  Section  2,  by  such  schemas  we  can  express  elementary 
and  restrictions  of  the  codomain 
domain  and1 codomain  of  roles,  inclusion 
of  a  role  due  to  restrictions  of  its  domain.  Moreover,  we  can  specify  a  role  as  necessary 
(at  least  one  value)  or  single  valued 
inclusion 

axioms  where  all  concepts  are  from  SC. 

(at  most  one  value).  An  SC-schema 

type  information 

relationships, 

is  a  set  of 

224 

M.  Buchheit  et  al. /Artificial 

Intelligence  99  (1998)  209-260 

The  basic  reasoning 

task  for  schemas 

is  to  determine  validity.  For  SL-schemas, 

this 

is  trivial. 

Proposition  4.1.  Every  SL-schema 

is  valid. 

Proof.  For  a  given  SC-schema  S  we  construct  an  interpretation  Z  =  (A’, 
Let  dz  be  the  set  of  individuals 
For  any  concept  name  A,  role  name  P  and  individual 
{(a,a) 
that  A’  #  0  for  every  concept  name  A. 

:= 
1 a  E  A’},  and  a’  := a.  It  is  easy  to  check  that  Z  satisfies  every  axiom  in  S  and 

.‘)  as  follows. 
that  there  is  at  least  one). 

a  we  define  AZ  :=  A’,  P’ 

in  our  language 

(we  assume 

(cid:144)i 

to  determine 

It  is  also  interesting 

schema  names 
that  are  entailed  by  a  schema.  For  a  schema  S,  we  write  A  3s  B  if  there  are  schema 
the  axioms  Ai-  &  A;  for  i  E  1.~ 
names  A=  Ao,Al..., 
subsumption 
In  other  words,  “5s” 
statements 

A,  =  B  such  that  S  contains 
is  the  transitive, 

reflexive  closure  of  the  explicit 

relations  between 

the  subsumption 

in  S. 

An  SC-schema  may  entail  non-obvious 

subsumptions. 

For  example, 

from  the  schema 

{salary  &  Person  x  Salary,  Employee  C  (2  1 salary)} 

it  follows 

that  every  employee 

is  a  person. 

We  will  call  a  schema  S  isa-complete 

follow  from  the  statements 

if  all  implicit 
inclusions, 

about 

subsumption 

relations  of  this 
i.e.,  if  Ai  3s  AZ,  whenever 

axioms  P  C  A2  x  B  and  Al  5  (2  1 P).  Obviously, 

is  isa-complete 

takes  polynomial 

time.  Moreover,  an  arbitrary 

verifying  whether  a 
schema  can  be 

in  polynomial 

time  into  an  equivalent 

schema 

that  is  isa-complete.  * 

kind  already 
S  contains 
schema 
transformed 

General  assumption. 
complete. 

In  the  rest  of  the  section  we  assume 

that  all  schemas  are  isa- 

Proposition  4.2.  Let  S  be  an  isa-complete 
Then  A  &  B  if and  only  if  A  5s  B. 

SC-schema 

and  A,  B  be  schema  names. 

Proof.  This  is  a  consequence 

of  Proposition  4.15.  q 

We  conclude 

that  subsumption 

of  schema  names  with  respect 

to  an  SC-schema 

can 

be  computed 

in  polynomial 

time. 

4.2.  Schemas  with  disjointness  axioms 

In  many  modeling 

the  company  environment 

tasks  one  would  like  to  state  that  certain  classes  are  disjoint.  Con- 
in  Fig.  2,  one  might  want  to  require  employees,  cities, 
instances.  This  can  be  achieved  by  disjointness 

etc.,  not  to  have  common 

sidering 
departments, 
axioms  of  the  form 

’  Two  sets  of  axioms  are  equivalent  if  they  have  the  same  models. 

M.  Buchheit  et  al. /Artificial 

Intelligence  99  (I 998)  209-260 

225 

language  obtained 

from  S_L  by  adding  negation  of  concept  names  TB 

is 

The  schema 
called  SL<\is. 
In  contrast 

to  SL,  not  every  S&,-schema 

valid  if  for  every  schema  name 
a  nonempty 
decided  by  considering 

set.  The  following  proposition 

one  concept  at  a  time. 

there 

is  some  model  of  S  where 

is  valid.  We  say  that  a  schema  S  is  locally 
as 
can  be 

says  that  validity  of  S&i,-schemas 

it  is  interpreted 

Proposition  4.3.  An  SL,g,-schema 

is  valid  if  and  only  if  it  is  locally  valid. 

Proof.  See  the  Appendix. 

0 

4.2.1.  Validity  of  SLdi,-schemas 

is  co-NP-hard 
the  validity  of  SLdi,-schemas 

We  show  that  deciding 

is  co-NP-hard.  The  proof  consists 
in  a  reductj  on  of  the  satisfiability  problem  for  concepts  of  the  language  AL&  (see  [ 361)) 
which  is  defined  by  the  syntax  rule 

C,C’- 

_LjTIAI~AICnC’IVP.Cj3P.C. 

that  deciding 

[ 141  it  has  been  shown 

is  co-NP- 
In 
there 
reason 
complete.  The  intuitive 
always  exists  an  unsatisfiability 
the  interaction  of 
universal  and  existential  quantifiers  may  generate  an  exponential  number  of  Skolem  con- 
stants,  which  results 
that  have  to  be  considered 
during 

for  this  result 
proof  of  polynomial 

is  that  for  an  unsatisfiable 

the  search  for  a  proof. 

number  of  deductions 

length.  However, 

of  ALE-concepts 

in  an  exponential 

satisfiability 

concept 

The  proof  in  [ 141  reveals,  more  specifically, 

that  satisfiability 

is  still  co-NP-complete 

for  restricted  AC&-concepts  C,  which  satisfy  the  following  properties: 

(i)  only  one  role  symbol  occurs 
(ii)  no  concept  name  other  than  T  and  I  occurs 
(iii) 
(iv)  every  proper  subconcept  of  C  distinct 

there  is  exactly  one  occurrence  of  I 

in  C; 

in  C; 

from  I 

in  C; 

is  satisfiable. 

A  subconcept 
other  than  _L is  unsatisfiable 
form  3P.I 

or  _L F’ D. 

is  proper  if  it  is  a  proper  substring.  The  condition 

that  no  proper  subconcept 

implies 

that  a  restricted  concept  has  no  subconcept  of  the 

Our  proof  consists 

in  associating 
SC  such  that  SC  is  valid  if  and  only  if  C  is  satisfiable. 

to  every  restricted  ALE-concept  C  an  SLdi,-schema 

loss  of  generality,  we  assume 

is  Q. 
Construction  4.4.  Let  C  be  a  restricted  AL&-concept  whose  only  role  symbol 
Without 
that  C  has 
exactly  one  subconcept  of  the  form  VQ._L.  We  choose  for  each  subconcept  D  #  _L of 
C  a  concept  name  AD  and  for  every  subconcept  D  =  3Q.D’  a  role  symbol  PD.  Let 
concept  names. 
?c  be  the  set  of  all  such  role  symbols.  Let  A +,  A-  be  two  additional 
Then  we  enter 
for  every 
subconcept  D  of  C  the  following  axioms: 

into  the  schema  SC  the  axiom  A+  C  TA-, 

that  C  #  1.  The  assumptions 

and  furthermore, 

imply 

226 

M.  Buchheit  et  al. /Art$icial 

Intelligence  99  (1998)  209-260 

(1)  AD  5  ADI,  AD  &  AD,,,  if  D  = D’  n  D”; 
(2)  AD  &  (3  1 Pn),  Ao  L  VP~.AD/, 
(3)  AD  g  VP.AD~  for  all  P  E  PC,  if  D  = VQ.0’  with  D’  #  I; 
for  all  P  E  PC,  if  D  = VQ..l_. 
(4)  AD  5  VP.A+,  AD  5  ‘dP.A-, 

if  D  = 3Q.D’; 

our  reduction 

The  idea  underlying 
this  process,  conceptually 
quantified 

In 
universally 
all  roles  P  E  PC,  and  existentially 
existential  quantification 
about  ALE-concepts, 
inferences 

subconcepts 

about  S&i,-SChemaS  difficult. 

is  to  “unfold” 

the  concept  C  into  a  set  of  axioms. 
the  role  Q  is  imitated  by  the  union  of  all  P  E  PC, 
over 
into  an 

subconcepts  D  are  translated 

into  universal  quantification 

of  C  are  translated 

quantified 

over  the  role  PD.  Thus,  the  reduction  shows  that,  as  in  reasoning 
the  interplay  between  universal  and  existential  quantifiers  makes 

Lemma  4.5.  Let  C  be  a  restricted  d&Z-concept. 
satisfiable. 

Then  SC  is  valid  if  and  only  if  C  is 

Proof.  See  the  Appendix. 

0 

Theorem  4.6.  Validity  of  S&i,-schemas 

is  co-NP-hard. 

4.2.2.  An  algorithm 
Next  we  describe 

for  reasoning  about  S&i,-schemas 

an  algorithm 

for  deciding 

it  is  a  method 
From 

S.  Actually, 
S-satisfiable. 
decided  with  polynomial 
Our  method  consists 

to  check  whether  a  finite  conjunction 

it  we  can  derive  as  an  upper  complexity  bound 

the  local  validity  of  an  S&,-schema 
of  schema  names 
is 
that  validity  can  be 

space  for  arbitrary  schemas. 

in  constructing 

for  every  schema  S  a  labeled  directed  graph  0~ 

such  that  the  validity  of  S  can  be  decided  by  traversing  Gs.  The  size  of  & 
in  the  size  of  S,  and  the  portion  of  G’s  to  be  explored  might  also  be  exponential 
in 
the  size  of  S.  We  obtain  our  PSPACE  result  by  keeping  only  a  small  portion  of  Gs  in 
memory  at  a  time. 

is  exponential 

Let  P  be  a  role  symbol.  We  say  that  P  is  necessary  on  A  if  there 

is  an  A’  with 
A  5s  A’  and  A’  5  (2  1 P)  E  S.  If  P  is  necessary  on  A  then  in  any  model  of  S  every 
instance  of  A  has  a  P-filler. 

We  say  that  S  contains  a  P-transition 

if  there  is  an 
At  with  A  5s  A’  and  A’  C  VP.B  E  S  or  if  there  is  a  role  inclusion  P  C  A”  x  B  E  S. 
Note  that  if  P  is  necessary  on  A  then,  since  S  is  isa-complete, 
it  holds  that  A  5~  A”.  If 
there  is  a  P-transition 
of  A  is  an  instance  of  B. 

from  A  to  B,  then  in  any  model  of  S  every  P-filler  of  an  instance 

from  A  to  B  (written  AAsB) 

If  C  is  a  set  of  concept  names  occurring 

in  S  we  define  the  range  of  P  on  C  as  the 

set 

range(  P, C)  :=  {B  ( A LsB 

for  some  A  E  C}. 

Construction  4.7.  For  an  S&,-Schema 
lows: 

S 

the  schema  graph  $7~  is  defined  as  fol- 

l  every  set  C  of  concept  names  occurring 

in  S  is  a  node  of  Gs; 

hf.  Buchheit  et  al. /Artijicial 

Intelligence  99  (1998)  209-260 

227 

l  there  is  an  edge  with  label  P  from  C  to  C’  if 
l  P  is  necessary  on  A  for  some  A  E  C,  and 
0  C’== range(P,C). 

A  node  C  is  a  conf7ict  node  if  there  are  A,  B  E  C  such  that  A’  5  7Bf  E  S  for  some 
A’,  B’  with  A  3s  A’  and  B  5s  B’. 

. . . , A,} 

represents 

Intuitively, 

the  assumption 

a  node  C  =  {Al, 

that  Al  ,. . .,A,,,  have 
some 
instance.  A  conflict  node  stands 
a  common 
in  S.  If  there  is  an  edge  with  label  P  from  C  to  C’ =  {BI  , . . . , B,}, 
axiom 
disjointness 
(because  P  is  necessary  on 
then  every  common 
instance  of  Bl  , . . . , B,  (because  C’  is  the  range  of  P  on 
some  Ai),  which 
C)  .  The  set  C’  might  be  the  empty  set.  But  then  there  is  no  edge  going  out  of  C’,  since  a 
role  P  can  be  necessary  only  on  concepts.  The  graph  Gs  will  be  used  to  check  whether 
the  assumption 

that  Al,  . . . , A,,,  have  a  common 

leads  to  a  contradiction. 

. . , A,  has  a  P-filler 

for  an  assumption 

instance  of  Al,. 

that  contradicts 

is  a  common 

instance 

Lemma  4.8.  Let  S  be  an  isa-complete 
A,  r-I...  n  A,,,  is  S-unsatis$able 
node. 

. . , A,,}.  Then 
if and  only  if  there  is  a  path  in  &from  C  to a  conflict 

and  C  =  {Al,. 

S&,-schema 

Proof.  See  the  Appendix.  q 

if  and  only 

is  not  S-satisfiable 

, A,,} 
as  follows: 

By  Lemma  4.8,  A1  n  . ..  n  A,, 

G.s  from  C  =  {Al,... 
nondeterministically 
nodes  until  we  have  reached  a  conflict  node.  A  successor  node  can  be  computed 
the  current  node  and  the  schema  are  known.  Both  can  be  stored  using  no  more 
polynomial 
Savitch’s  Theorem 
space  algorithm.  This  proves 

if  there  is  a  path  in 
to  some  conflict  node  C’.  Such  a  path  can  be  detected 
for  a  given  node  we  construct  a  sequence  of  successor 
if 
than 
space  algorithm.  By 

space.  Thus,  there  exists  a  nondeterministic 
it  can  be  transformed 

polynomial 
into  a  deterministic 

the  following 

polynomial 

theorem: 

[ 21]), 

(see 

Theorem  41.9.  There  is  a  PSPACE  algorithm 
schema  names  Al,  . . . , A,,,  whether 

that  decides  for  an  S.&,-schema 

S  and 

the  conjunction  Al  n  + . . n  A, 

is  S-satis$able. 

Combining 

Theorem  4.9  with  the  preceding  hardness 

result 

leads 

to  the  following 

complexity  bounds. 

Corollary  ~1.10. The  validity  problem  for  S.&i,-schemes 

is in PSPACE  and  co-NP-hard. 

4.2.3.  Cycles 

in  S&,-schemas 

In  Section  3  we  introduced 

a  general  notion  of  terminological 

cycles 

for  arbitrary 

role  inclusions. 

In  this  section  we  refine  this  notion  for  S.&,-schemas 

schemas  without 
and  adopt  it  also  to  role  inclusions.  Then  we  identify  a  class  of  cycles  that  increases 
complexity 
graph 
we  mark  the  edges  in  order  to  classify 

in  two  directions.  First,  we  add  edges  coming 

the  dependency 
and  second, 

To  this  end,  we  extend 

from  role  inclusions 

about  S&i,-SCheltlaS. 

of  reasoning 

the  cycles. 

the 

their  influence 
harmless.  For  example, 

228 

M.  Buchheit  et  al. /Artificial 

Intelligence  99  (I998)  209-260 

Role  inclusions  may  give  rise  to  terminological 

cycles.  To  see  this,  note  that  an  axiom 

xA2isequivalenttothetwoaxioms(> 

oftheformPCAr 
Thus,  a  role  inclusion  P  C  Al  x  A2  leads 
is 
an  edge  from  A  to  A:!  for  every  concept  name  A,  since  A  &  T  and  T  5  VP.A2  hold. 
There  is  also  an  edge  from  A  to  Al  for  every  axiom  A  L  (2  1 P),  since  (3  1 P)  C  A1 
holds. 

to  two  kinds  of  additional 

1P)  LA~,TEVP.AZ.~ 

edges.  There 

We  want  to  distinguish 

between  different  classes  of  cycles  and  clarify 

on  the  complexity  of  inferences.  Some  cycles  are  computationally 
the  schema  S  =  {AI  L  AZ, A2  _C A I }  is  cyclic,  but  in  every  model  of  S,  Al  and  A2 
denote 
the  same 
meaning.  We  extend 
the  definition  of  the  dependency  graph  by  using  labeled  edges.  The 
label  indicates 

the  same  set.  One  can  get  rid  of  A 1,  say,  while  keeping  essentially 

the  edge  comes  from. 

the  kind  of  axiom 

Let  S  be  an  S&,-schema.  We  redefine 

the  dependency  graph  D(S) 

of  S  as  follows. 

The  nodes  are  the  concept  names 

in  S.  Let  Al,  AZ  be  two  nodes.  There  is 

l  an  k-edge 
l  a  some-edge 

in  S; 

from  Al  to  A2  if  there  is  an  axiom  AI  5  A2  in  S; 

from  AI  to  A2  if  there  are  axioms  AI  C: (2  1 P)  and  P  5  A2  x  A3 

l an  all-edge 

from  Al  to  A2  if  there  is  an  axiom  AI  L  YP.A2 

in  S  or  if  there  is  an 

axiom  P  &  A  x  A2  in  S; 

from  Al  to  A2  if  there  is  an  axiom  Al  L  ?A2  in  S. 

l a  neg-edge 
Since  schemas  are  assumed 
to  A2  if  there 

to  be  isa-complete, 
is  a  some-edge 

there  is  always  a  sequence  of  isa- 
if 

to  AZ.  We  say  S  is  cyclic, 

edges  from  Al 
D(S) 
contains  a  cycle,  and  cycle-free  otherwise.  An  all-cycle 
at  least  one  all-edge  and  no  neg-edge.  A  schema  S  is  all-cycle-free, 
no  all-cycle. 

from  Al 

is  a  cycle  which  contains 
contains 

if  D(S) 

So  the  all-cycle-free 

schemas  are  a  subset  of  all  schemas  and  the  cycle-free 
schemas.  Now  we  want  to  determine 

schemas 
the  complexity  of 

are  a  subset  of  the  all-cycle-free 
for  these  subclasses. 
reasoning 
Notice 
that  the  schema  built  by  Construction 
the  following 

for  validity  checking. 

lower  bound 

4.4  is  always  cycle-free.  This  leads  to 

Theorem  4.11.  Validity  of  cycle-free  S&s-schemes 

is  co-NP-hard. 

Now  we  turn  to  the  upper  bound.  First  notice 

the  correspondence 

between  all-cycles 

and  cyclic  chains  of  P-transitions. 

Proposition  4.12.  A  schema  S  contains  an  all-cycle 

iff  there  is  a  sequence  of  transitions 

AoasAI,. 

. . , AkASAO. 

Thus, 

if  Co, Cl,.  . . , C,  is  a  path  in  the  schema  graph  &  of  an  all-cycle-free 

S,  then  any  two  distinct 
paths  in  GS  is  bounded 

sets  C’;, Cj  on  the  path  are  disjoint.  Therefore, 

linearly  by  the  number  of  names  occurring 

schema 
the  length  of 
in  S.  Thus,  the  non- 

’ An  interpretation  Z  satisfies  an  arbitrary  inclusion  C  C  D  if  CT  c  D’. 

M.  Buchheit  et  al. /Artificial 

Intelligence  99  (1998)  209-260 

229 

algorithm  of  Section  4.2.2  that  follows  a  path  issuing 

it  reaches  a  conflict  node  can  be  run  in  polynomial 

. . . , Am} 
from  {Al, 
time.  This  gives  the  following 

deterministic 
until 
result. 

Theorem  41.13. Let  S  be  an  all-cycle-free  S&,-Schema. 
junction  A1 n.  . enAn,  of  schema  names  is  S-unsatisfiable 
polynomial 

time. 

Then  deciding  whether  a  con- 

can  be  done  in  nondeterministic 

Combining 

this  theorem  with  the  hardness  result  of  Theorem  4.6  leads  to  the  following 

complexity  bound. 

Corollary  4.14.  The  validity  problem 
plete. 

for  all-cycle-free 

S&i,-schemas 

is  co-NP-com- 

4.2.4.  Subsumption 

in  S&s 

Deciding 

subsumption 
be  easier  than  checking  unsatisfiability: 
B  not  occurring 
that  the  difficulty  of  subsumption 
satisfiability 
the  relation  “3~“. 

in  S  we  have  At  n  . . . fl  A,,  Cs  B.  The  following  proposition 

of  schema  names  with  respect 

Al  r”l. . . fl  A,,  is  S-unsatisfiable 

to  an  S&,-Schema  S  cannot 
iff  for  any  name 
shows 
stems  solely  from  the  difficulty  of  checking 
is  captured  completely  by 

checking 

and  that  for  satisfiable  concepts  S-subsumption 

Proposition  4.15.  Let  S  be  an 
schema  names.  Suppose 
and  only  if  there  is  an  Ai  such  that  Ai  -&  A. 

isa-complete 
that  Al  n  . . . n A,,,  is  S-satis$able. 

S&i,-SChWUl 

and  A,  Al,. 

. . , A,,,,  be 
Then  Al  n..  . n A,,,  &  A  if 

Proof.  Obviously, 
If  A1  n.  x + n A, 

if  Ai  5s  A,  then  Ai  &  A  and  thus  Al  n  . . . fl  A,,  Es  A. 
is  S-satisfiable, 

then  the  interpretation  Z  constructed 

Lemma  4.8  is  a  model  of  S  with  C  :=  {Al, 
with  Ai  js  A,  then  C  4  A’.  Hence,  Al  fl.  . . n  A, 

in  the  proof  of 
. . . , A,,}  E  A:  n  . . . n  A;.  If  there  is  no  Ai 

is  not  S-subsumed 

by  A.  q 

Corollary  4.16.  Subsumption 
schemas 
polynomial 
mial  time  algorithm. 

is  NP-hard.  For  arbitrary  SLd,-schemas 

space.  For  all-cycle  free  S&i,-SChemUS, 

of  conjunctions  of  schema  names  with  respect 

to  S&is- 
this  problem  can  be  decided  using 
polyno- 
there  is  a  nondeterministic 

Proof.  NP-hardness 
S.&i,-SChenlaS is  co-NP-hard 

holds  because  unsatisfiability 

of  schema  names  with  respect 

to 

(see  Construction 

4.4  and  Lemma  4.5). 

An  algorithm  can  decide  whether  Al  n.  . . n A,,  is  subsumed  by  BI  n + . . n  B,  by  first 
If  so,  it  returns  “yes”,  Otherwise, 
the  second 
time.  Now,  the  upper  bounds  follow  from  the  upper  bounds 

for  every  Bj  there  is  an  Ai  such  that  Ai  3s  Bj.  Clearly, 

checking  whether  A1  n  . . . n  A, 
it  checks  whether 
check  can  be  in  polynomial 
for  checking  S-satisfiability. 

is  S-unsatisfiable. 

q 

230 

M.  Buchheit  et  al. /ArtiJicial 

Intelligence  99  (1998)  209-260 

4.25  Dichotomic 

schemas 

We  now  investigate  a  restricted  class  of  S&i,-Schemas that  allow  for  polynomial 

reasoning.  We  facilitate  our  presentation 
form. 

by  assuming 

that  schemas  come 

time 
in  a  normal 

A  schema  S  is  normal 
l S  contains  exactly  one  axiom  of  the  form  P  5  A  x B; 
l  if  either  A’  ‘& (2  1 P)  E  S,  or  A’  C  (6  1 P)  E  S,  or  A’  C  VP.B’  E  S, 

if  for  every  P  occurring 

in  S  we  have: 

then 

A’  _is  A  and  B’  5s  B. 

In  normal  schemas, 
schema.  We  denote 
about  P  only 

involve  concepts 
A  normal  S~~~,-SChUlM S  is  dichotomic 

the  domain  and  codomain  of  a  role  P  have  a  unique  name 
them  as  dom(  P)  and  cod(P), 
that  are  S-subsumed 

respectively.  Moreover, 
statements 
by  the  domain  or  codomain  of  P. 
if  for  every  role  P  we  have  that  S  contains 
at  most  one  axiom  of  the  form  A  G  (3  1 P),  and  if  so,  then  A  = dom(  P).  Dichotomic 
to  the  fact  that  a  role  is  either  necessary  on  its  entire  domain 
schemas  owe  their  name 
or  it  is  not  necessary 
the  interaction  between 
universal  and  existential  quantification 

for  any  concept.  Thus, 

over  roles  is  limited. 

in  such  a  schema, 

in  the 

Practical  schemas  are  mostly  normal  and  often  also  dichotomic.  For  example,  schemas 

of  object-oriented 
databases  usually  enforce 
between  set-valued  and  other  attributes.  For  a  set-valued  attribute, 
be  empty,  while  other  attributes  always  have  exactly  one  filler.  The  latter  correspond 
roles. 
necessary, 

the  set  of  fillers  may 
to 

this  property  by  distinguishing 

to  non-necessary 

implicitly 

the  former 
We  show  that  for  dichotomic 

For  any  dichotomic 
inspect  ?2s  in  order  to  decide 
of  DS  is  polynomial 

in  the  size  of  S. 

schemas  validity  can  be  decided 

time. 
schema  S  we  construct  a  directed  graph  YDs such  that  it  suffices  to 
to  Gs,  the  size 
of  concepts. 

the  satisfiability 

in  polynomial 

In  contrast 

Construction  4.17.  For  every  S&i,-SChf3lla S 
defined  as  follows: 

the  dichotomic 

schema  graph  DS 

is 

l  the  nodes  are  sets  {A,  B}  consisting  of  one  or  two  concept  names  occurring 

in  S 

(note 

that  A,  B  need  not  be  distinct) 

; 

l there  is  an  edge  with  label  P  from  (A,  B}  to  {A’,  B’}  if 

l  P  is  necessary  on  dom(  P), 

and  BLsB’, 

l  ALsA’ 
l  A,  B  3s  dam(P) 
(note 

that  this  definition 

and 

also  captures 

the  case  that  A  = B  or  A’  = B’). 

A  node  {A,  B}  is  a  confiict  node  if  there  are  A’,  B’  with  A  3s  A’,  B  5s  B’  such  that 
A’  C  7B’  E  S. 

The  intuition  underlying  DS  is  similar 

to  the  one  that  led  to  !&.  For  arbitrary  Scdi,- 
schemas,  however,  we  had  to  take  into  account  arbitrarily  big  sets  of  schema  names, 
while  for  dichotomic 

schemas  we  can  concentrate  on  sets  with  at  most  two  elements. 

Lemma  4.18.  Let  S  be  a  dichotomic 
conflict  node  in  & 
that  a  conflict  node  in  Vs 

is  reachable  from  {A  1, . . . , A,,) 

is  reachable  from  {Ai,  Aj}. 

schema  and  Al,. 

. . , A,,  be  concept  names.  A 
if  and  only  if  there  are  Ai,  Aj  such 

M.  Buchheit  et  al. /Artificial 

Intelligence  99  (1998)  209-240 

231 

Proof.  See: the  Appendix. 

Cl 

Corollary  4.19.  Let  S  be  a  dichotomic  schema  and  Al,. 
the  following  are  equivalent: 

. . , A,,,  be  concept  names.  Then 

(i)  Al  n  ...  n  A,,  is  not  S-satisfiable; 
(ii) 
(iii) 

there  are  A;,  Aj  such  that  Ai  n  A,i  is  not  S-satisfiable; 
there  are  Ai,  Aj  such  that  a  conflict  node  in  Vs 

is  reachable  from  {Ai,  Aj}. 

Corollary  4.20.  For  dichotomic  schemas,  satisfiability  and  subsumption  of  conjunctions 
of  concept  names  can  be  decided 

in  polynomial 

time. 

4.2.6.  Related  work 

3.4  tells  us  that  subsumption  with  respect 

to  to  a  schema  S, 

that 

is  a 

Theorem 
set  of  inclusion 
with  respect 
[ 11  and  Nebel 
sets  of-possibly 
semantics,  They  determined 
This  could  suggest 

[29,30] 
have 
cyclic-concept 

axioms,  under  descriptive 

semantics 

can  be  reduced 

to  to  the  set  of  definitions  S  under  greatest 
the  subsumption 
investigated 

definitions  under  various  semantics,  among 

fixpoint 

to  subsumption 
semantics.  Baader 
to 
them  gfp- 
and  developed  algorithms. 

problem  with  respect 

the  complexity  of  subsumption 

to  make  use  of  their  techniques 

to  reason  about  schemas. 
to  ours.  They  reduce  the  subsump- 

In  addition, 

their  technical  approach 

looks  similar 

for  regular 

to  inclusion  problems 

for  a  given  set  of  definitions  a  nondeterministic 

tion  problelm  under  gfp-semantics 
languages.  To  do  so, 
automaton  where  the  states 
they  construct 
are  the  names  of  concepts  and  where  the  transitions  between  states  are  marked  with  role 
in  question  are  defined 
symbols.  The  regular 
The  automaton 
if  and  only 
By  a  translation 
completeness 
case  of  acyclic 

a  cycle. 
this  yields  PSPACE- 
in  the 

from  automata 
terminologies 

of  subsumption 
terminologies. 

contains 
of  well-known 

in  terms  of  the  automaton. 

results 
in  general 

and  co-NP-completeness 

if  the  terminology 

languages 

contains 

a  cycle 

theory, 

At  first  glance, 

as  directed  graphs  with  labeled  arcs.  In  particular,  constructing 
nondeterministic 
automaton  by  the  powerset 
schema  graph  out  of  a  schema. 

the  method  strongly  resembles  ours.  Evidently,  automata  can  be  viewed 
out  of  a 
a 

is  very  similar 

to  constructing 

a  deterministic 

technique 

it  turns  out  that  the  languages 

for  which  Baader  and  Nebel  give  algorithms 

reasoning  problems 

subsets  of  SC.  Also, 

However, 
are  virtually 
While 
SC,  reasoning 
schema  names  are  always  satisfiable, 
transitivity 
definitions: 

from 
reasoning 

about  SL-schemas 

A  further  difference 

inclusions 
for  schemas  become  difficult  when  disjointness 

they  do  not  consider 

is  almost 

trivial:  schema  names  and  conjunctions 

role 

as  we  do. 
to 
is  added 
of 
relations  can  be  derived  by 
are  replaced  by 

if  inclusions 

those  given  explicitly.  This 

and  all  subsumption 
is  different 

for  very  limited 

is  costly  already 
is  that  in  the  present  work  the  connection  between  schemas  and 
as  in  the  work  by  Baader  and  Nebel.  In  their  case, 

languages. 

automata 
concepts  of  the  form  (3  1 P)  do  not  have  a  particular 

is  not  so  straightforward 

impact  on  subsumption: 

(i) 

the  subsumption 
for  schemas  where  such 
is  not  any  more  difficult 
concepts  occur  than  it  is  for  schemas  without,  and  the  algorithms  are  essentially 
the  same; 

problem 

232 

M.  Buchheit  et  al. /Artificial 

Intelligence  99  (1998)  209-260 

(ii)  only  concepts  of  the  form  VP.B  are  relevant 

for  the  existence  of  transitions 

in 

their  automata. 

In  SC,+_-schemas, 

instead, 

sions  (3  1 P)  and  universal  quantification 
It  is  not  too  difficult 
complexity. 
of  the  type  A  L  (2  1 P)  or  no  inclusion 
subsumption 
Finally, 

are  polynomial. 

the  complexity 

results 

schemas,  we  have  shown  that  unsatisfiability-and 
plete.  For  acyclic 
co-NP-complete. 
Summarizing, 

terminologies, 

the  interplay  between  existential  quantification 

in  expres- 
in  expressions  VP.B  is  the  primary  source  of 

to  see  that  for  schemas 

of  the  form  A  E  ‘dP.B  satisfiability 

that  either  contain  no  inclusion 
and 

look  similar  but, 

in  fact,  are  different.  For  acyclic 
NP-com- 

therefore  subsumption-is 

Baader  and  Nebel  have  shown 

that  subsumption 

is 

the  two  lines  of  research  concentrated  on  different  aspects  of  reasoning 

terminologies.  While  Baader  and  Nebel 

about 
reasoning,  our  work  deals  with  reasoning 

the  impact  of  definitions 
in  the  presence  of  constraints  on  classes. 

studied 

on 

4.3.  Schemas  with inverse  roles 

Often,  it  would  be  convenient 

to  make  statements  about  inverses  of  roles  in  a  schema. 
Then  with  the  ax- 
are 

that  only  researchers 

one  can  express 

for  works-for-‘. 

let  the  role  employs  be  a  shorthand 

For  instance, 
iom  ResearchDept  C  Vemploys.Researcher, 
for  a  research  department. 
working 

As  seen  before,  subsumption 

in  the  sense 

S  are  obvious 
difficulty  of  subsumption  with  respect 
checking 
of  satisfiability 
schema, 
concepts, 
company 

(Proposition 
this  may  give  rise  also  to  implicit  subsumption 
as  we  illustrate  with  an  example.  Consider 
schema: 

relations  between  names  occurring 
that  A  Es  B  iff  A  5s  B  (Proposition 

in  an  S&schema 
4.2))  while 

to  S&i,-schemas 
4.15).  However,  if  we  allow  for  inverse  roles  in  a 

the 
stems  only  from  the  difficulty 

relationships  between  satisfiable 
fragment  of  the 
the  following 

S  =  { 

Researcher  5 

(2  1 works-for), 

Researcher  L  Vworks-for.ResearchDept, 

ResearchDept  C  Vemploys.Employee}. 

is  isa-complete 

the  schema 
that  Researcher 

Although 
entails 
researcher.  Then  JOE  works  for  some  research  department, 
departments 
ployee.  Hence,  JOE  is  an  employee. 

is  subsumed  by  Employee.  Suppose 

only  employ  employees, 

and  Researcher 

individual 

every 

-&  Employee  does  not  hold, 

it 

that  JOE 
is  an  arbitrary 
say  D007.  Since  research 
employed  by  DO07  is  an  em- 

Detecting 

such  implicit 

subsumption 
from  SL:  by  allowing 

the  language  obtained 
concepts  of  the  form  VP-‘.A, 
that  subsumption 
we  show  that  for  S&v-schemas 
all  models  and  reasoning  with  respect 

of  concept  names  with  respect  to  S&-schemes 
there  is  a  difference  between 
to  all  finite  models. 

for  inverse  roles, 

relations  might  be  complex.  Let  us  call  SCiny 
i.e.,  S,&,”  contains  also 
In  this  subsection,  we  prove 
is  NP-hard.  Moreover, 
reasoning  with  respect  to 

and  (<  1 P-l). 

(2  1 P-‘) 

M.  Buchheit  et  al. /Artijicial 

Intelligence  99  (1998)  209-260 

233 

4.3.1.  Subsumption  with respect  to S&,-schemas 

is  NP-hard 

We  con:jtruct  for  every 

restricted  AL&-concept  C  an  S&,-schema 

Sc  containing 

two  concept  names  A  and  A’  such  that  Sc  k  A  L  A’  if  and  only  if  C  is  unsatisfiable. 
that  associates 
the  construction  we  inductively  define  a  function  Ac (D) 

To  specify 

each  subconcept  D  of  C  the  level  at  which  D  occurs 
at  level  0;  if  D  =  D1  ll  D2,  then  Ac(Di) 
:=  Ac(  D); 
then  AC (~3’)  :=  AC (D)  +  1.  The  level  gives  us  the  number  of  quantifiers 
of  which  11  is  located. 

to 
in  C:  the  concept  C  itself  occurs 
if  D  =  3R.D’  or  if  D  =  VR.D’ 
in  the  scope 

We  obtain  SC  by  modifying 

of  SC  in  Section  4.2.1.  We  do  not  need 
the  names  A+,  A-,  but  choose  concept  names  Ao,  . . . , Ak,  where  k =  AC (I).  Steps  (1) 
to  (3) 
in 
step  (4),  we  enter  the  following  axioms 

remain  exactly  as  they  are  for  SC.  However, 

instead  of  the  axioms  added 

the  construction 

into  SC: 

.‘ik  g  VP-‘.&_,, 

(4’)  Ag  C  VP.Ak  for  all  P  E  PC,  if  D  =  VQ.1; 
(5’) 
To  explain 
is  an 
interpretation,  we  say  that  a  sequence  do,.  . . , d,  of  elements  of  A’  is  a  chain  of  length 
n  from  do  I:O d,  if  there  are  roles  PI,  . . . , P,  E  Pc  such  that  (d;_l,di)  E  Pi’  for  i E  I..n. 
We  say  that  d,  is  reachable  from  do  if  there  is  a  chain  from  do  to  d,. 

. . . , Al  5  VP-’ 
.A0  for  all  P  E  PC. 
intuition,  we  need  some  definitions. 

the  underlying 

If  Z  =  (A’, 

.‘) 

In  Section  4.2.1,  for  an  interpretation  Z  to  be  an  SC-model, 

it  is  crucial 

that  elements 

two  properties: 

for  any  P  E  PC,  Now,  & 

of  AZ,, D  == VQ.l_,  d o  not  have  P-fillers 
in  such  a 
way  that  for  Z  to  be  an  SC-model  where  Ac  is  not  interpreted  as  a  subset  of  Ao, Z  has 
there  is  some  element  d  E  A$  (since  otherwise  As  =  0  is 
to  satisfy 
from  d  by  a  chain 
a  subset  of  any  set),  and  (ii)  no  element  d’  E  A$  which  is  reachable 
in  (4’)) 
of  length 
and  (5’)) 
that 
elements  of  A;  do  not  have  any  P-fillers. 

ii  -  1  has  a  P-filler 
force  d  to  be  an  element  of  A:).  Thus,  in  both  cases  it  is  important 

for  any  P  E  PC  (since  otherwise 

the  axioms 

is  delined 

(i) 

Lemma  4.21.  Let  C  be  a  restricted  dIC&-concept.  Then  sc  b  Ac  5  A0  if  and  only  if 
C  is  unsatisfiable. 

Proof.  See  the  Appendix. 

Cl 

Theorem  4.22.  Subsumption  of  concept  names  with  respect  to  Sf&-schems 
hard. 

is  NP- 

Proof.  The  claim  follows  by  the  preceding 
is  NP-hard 
d,CCE-concepts 

(see  Section  4.2.1). 

0 

lemma  because  unsatisfiability 

of  restricted 

As  an  upper  bound,  we  have  that  reasoning 

for  reasoning 

in  SL, ,nv  is  in  EXPTIME.  This  follows 
of  which 

in  the  language  ALUNZ, 

from  the  same  bound  given 
S.Ci”,  is  a  sublanguage. 

in  [ lo] 

4.3.2.  Finite  model  reasoning 

For  S&i,-schemas, 

it  does  not  make  a  difference 

sumption  of  concept  names  with  respect 
interpretations,  i.e.,  interpretations  with  finite  domains. 

to  all  interpretations 

if  we  define  satisfiability 
or  with  respect 

or  sub- 
to  finite 

234 

M.  Buchheit  et  al.  /Artificial 

Intelligence  99  (1998)  209-240 

However, 

in  an  S&,-schema 

all  finite  models  of  S,  but  not  for  all  models.  To  see  this,  observe 
every  model 
B.  For  example,  consider 

to  interpret  A  as  a  set  of  cardinality 
the  schema 

S  there  may  be  concepts  A,  B  such  that  AZ  C  BZ  for 
that  S  may  require 
of 

at  least  as  great  as  the  cardinality 

S  =  {  Manager  C  (2  1 boss-‘), 

Manager  5  Vboss-‘.Employee, 

Employee  C  (6  1 boss)}, 

that  every  manager 

in  any  finite  model, 

in  any  model  one  can  map  injectively 

is  the  boss  of  are  employees.  Moreover, 

saying 
manager 
boss.  As  a  consequence, 
employee.  Thus, 
number  of  employees. 
model  Z  we  have  Employee  ’  =  ManageF. 
els.  Consequently, 
have  Manage? 
ing  about  schemas  with  respect 
will  not  study 
niques. 

is  the  boss  of  at  least  one  person,  and  that  all  persons  a 
every  employee  has  at  most  one 
to  some 
every  manager 
the 
then  for  any  finite 
in  infinite  mod- 
L  Manager}  we 
infinite  model.  Reason- 
in  [9,  lo].  We 
tech- 

to  finite  models  has  been 
in  this  paper,  since 

investigated 
this  requires  different 

in  every  finite  model  Z  of  S’  :=  S  U  {Employee 

If  we  add  the  axiom  Employee  C  Manager, 

the  number  of  managers  does  not  exceed 

C  Employeez,  which  need  not  hold 

This  need  not  be  true 

finite  model 

reasoning 

in  an 

5.  Case  studies 

In 

this  section,  we  study  some 
the  architecture  we  propose.  We  extend 
schemas.  The  view  languages 
are  derived 
the  literature,  namely  KRIS  [ 31  and  CONCEPTBASE 

illustrative 

examples 

that  show 

the  advantages 

two  systems  by  the  language  SL 
from  two  implemented 

systems  described 

of 
for  cyclic 
in 

[ 221. 

For  the  extended 
in  particular,  we  obtain 

the  following 

results: 

systems,  we  study  the  complexity  of  the  reasoning 

services,  where, 

l  combined 

complexity 

is  not  increased  by  the  presence  of  terminological 

cycles 

in 

the  schema; 

l  reasoning  with  respect 

to  schema  complexity 

is  always 

tractable. 

result  can  intuitively 

be  interpreted 

as  stating 

that  in  both  cases  the  com- 

In  this  section,  we  assume 

In  fact,  this  can  be  achieved  by  iteratively 

is  due  to  the  view  language  alone. 
taxonomy 
that  the  view 
sides  of  view  definitions 
in  the  right-hand 

that  no  view  names  occur 
description. 
with  its  definition,  which  is  possible  because  of  our  acyclicity  assumption 
a  discussion 
assuming 
into  account 
pair  (S,  W). 

is  cycle-free.  We  also  assume 
or  in  the  world 
every  view  name 
(see  [ 291  for 
In  practice, 
to 
from  this  point  on  we  do  not  take 
the  knowledge  base  2  to  be  simply  a 

and  its  complexity). 
is  empty.  Therefore, 

the  view  taxonomy,  and  we  assume 

that  the  view  taxonomy 

of  this  substitution 

this  is  equivalent 

substituting 

The  two  systems  stand  for  two  different  design  paradigms 

study  emphasizes 

a  different  aspect  of  the  benefits 

(see  [4]  ) . Thus  each  case 
that  can  be  gained  from  our  proposal. 

The  second 
plexity  of  inferences 

M.  Buchheit et al. /Artificial  Intelligence 99 (1998) 209-260 

235 

VI  =  Researcher  n  Vhas-degree.Engineering 

V2 =  Employee  FI 3has-degree.Engineering 

Fig. 3. ALCNR-views. 

The  syslem  KRIS  is  built  at  DFKI  and  used  in  several  applications 

as  the  knowledge 
to  provide  complete 
are 

component 

subsumption 

inference  procedures 

for  a  language  which 

(see  e.g.,  [ 381).  The  designers  wanted 
is  so  rich  that  no  polynomial 

(if  P  #  NP).  The  concept 
and  it  provides  universal 
and 

language  of  KRIS  is  closed  under  propositional 
and  existential  quantification 

representation 
reasoning 
feasible 
connectives 
reason, 
provides  number 
in  which  our  architecture 
through  schema  concepts.  We  show  that,  for  this  extension,  both  view  subsumption 
instance  checking 
in  [ 181  for  the  sublanguage 
proofs  extend 

over  roles.  For  this 
[3].  Since  KRIS  also 
the  aspect 
that  of  KRIS is  that  it  allows  for  cycles  going 
and 

in  PSPACE.  Instance  checking  was  proved  PSPACE-complete 

restrictions  on  roles,  it  is  a  proper  extension  of  SL.  Hence, 

that  result  for  the  first  time  to  the  full  language  of  KRIS. 

role  conjunction.  As  a  byproduct,  our 

of  KRIS excluding 

are  PSPACE-hard 

goes  beyond 

checking 

instance 

remain 

that  define  queries.  The  former  correspond 
in  our  framework.  Class  descriptions 

CONCEF’TBASE  is  a  deductive  object-oriented 
In  CONCEPTBASE 

database  system,  which  was  developed 
in 
there  is  a  distinction  between  classes 
to  schema  concepts 
in  CONCEPTBASE 
and  restrictions 
condi- 
in  which  the  structural  part 
is  specified  coincides  with  SC.  The  view  language  we  consider  has 
in  [ 71  as  an  extension  of  the  structural  part  of  query  classes.  In  this  case 
language  as  in  the  previous 
that  do  not  occur  in  the  other.  The  design 
the  constructs 
this 

at  the  University  of  Aachen. 
the  schema  and  classes 
and  the  latter  to  view  concepts 
consist  of  two  parts:  a  structural  part,  where  essentially 
on  attributes  are  expressed,  and  a  nonstructural 
tions  can  be  expressed  with  first-order  formulas.  The  language 
of  schema  classes 
been  proposed 
study  the  view  language 
cases.  Instead,  each  of  the  two  offers  constructs 
is  such  that  all  inferences  are  polynomial  while  combining 
in  the  sche,ma  and  the  view  language  would  make  reasoning 
case  study 
between  expressivity 

isa-relationships 
part  where  additional  membership 

one  can  reach  a  better  compromise 

is  not  an  extension  of  the  schema 

than  with  the  homogeneous 

that  with  our  architecture 

intractable.  Therefore, 

traditional  one. 

in  one  language 

and  tractability 

illustrates 

5.1.  The  language  of  KRIS  as  view  language 

The  system  KRIS  provides  as  its  basic 

language  dLCAfR,  which 

is  defined  by  the 

following 

syntax  rules: 

C,D---+ 

AITIIICnDJCUDl~Cl~‘R.CI3R.CI(2nR)l(6nR) 

R  -----$ P,  n  . . . n  Pk 

The  language  ALCNR, 

union,  and  complement 

first  introduced 
of  concepts,  universal 

in  [ 201,  allows  one  to  express 

intersection, 

and  existential  quantification 

on  roles, 

236 

M.  Buchheit  et  al. /Artificial  Intelligence  99  (1998)  209-260 

and  role  conjunction. 

Fig.  3  contains 

some  examples  of  ALCNR- 

the  researchers  only  having  degrees 
the  employees  who  have  a  degree  in  engineering.  Without  any  schema 

in  engineering.  View  V2 

informa- 

relationship 

the  schema  of 
between  VI  and  V2. But  given 
is  an  employee,  and  (2)  every  researcher  has  some  degree. 

restrictions 

number 
views.  View  VI  denotes 
denotes 
tion  there  is  no  subsumption 
Fig.  2,  ( I )  every  researcher 
Hence,  view  VI  is  subsumed  by  t$. 

An  ALCNR-knowledge 

base  is  a  pair  (S,  W),  where  S  is  an  SL-schema 

and  W 
respectively.  Throughout  Section  5.1,  by  knowledge 

is  an  dLCN%world 
base  we  always  mean  ALCNIZ-knowledge 
of  reasoning 
the  complexity 

description, 

base. 

We  study 
stance  checking 
analysis,  we  assume 
encoding 
the  analysis  holds  also  if  numbers  cannot  exceed  a  constant  bound. 

(S,  W)  b  a: D,  where  C, D  are  ALCNR-concepts. 
in  number 

that  numbers 

restrictions 

for  both  view  subsumption  C  &s  D  and  in- 

For  the  complexity 
are  represented  with  unary 

(i.e.,  a  number  n  is  represented  as  a  string  of  n  equal  symbols).  Alternatively, 

Reasoning 

in  ACCNR-knowledge 

bases  can  be  done  using  a  calculus 

logic.  Schmidt-SchauB 

similar 
and  Smolka 

to  the 
[ 361 

in  first-order 

tableaux  calculus  with  equality 
first  used  such  a  calculus 
that  allows 
subsection  we  introduce 
the  complexity  of  reasoning  by  means  of  the  calculus. 

restrictions 
for  ALCNR, 

to  express  neither  number 

for  the  language  ALC which 

the  calculus 

of  dCCN7Z 
is  a  sublanguage 
nor  role  conjunction. 
In  the  next 
and  in  the  following  one  we  study 

5.1.1.  Completion 

rules  of  the  ACCNR-calculus 

The  ALCNR-calculus 

operates  on  knowledge  bases; 

edge  base,  called  the  initial  knowledge  base,  and  adds  assertions 
by  suitable  completion 
rules.  Before  describing  how  assertions 
expand 

the  syntax  and  the  definitions 

in  a  suitable  way. 

it  starts  from  the  given  knowl- 
to  the  world  description 
are  added,  we  need  to 

We  assume 

that  there  exists  an  alphabet  of  new  individuals,  which  are  denoted  by 
in  the 
the  letters  X,  y,  z,  and  w,  possibly  with  subscript. 
for  old  and  new 
knowledge  base  are  called  old  individuals.  We  use  the  term  individual 
the  old  individuals,  which 
individuals, 
are  always 
in 
Section  2.1))  two  (or  more)  new  individuals  might  be  interpreted  as  the  same  element; 
to  enforce  a  different 
s  and  t,  we  add  the  following 
new  type  of  assertion 

and  use  s,  t,  u  to  denote 
interpreted 

interpretation 
in  the  world  description: 

individuals.  Unlike 
(recall 

the  Unique  Name  Assumption 

as  different  elements 

for  two  individuals 

initially  present 

Individuals 

Formally, 
The  definition  of  a  model  remains 

the  same. 

let  Z  be  an  interpretation:  We  say  that  Z  satisjes 

the  assertion  s  $  t  if  sz  #  t’. 

To  make  the  interpretation 
m  the  definition 
contains 

of  interpretation 
the  assertion 

% 
description 
appearing 

in  W. 

of  old  and  new  individuals  homogeneous,  we  drop  the  UNA 
that  a  world 

of  old  individuals, 

and  we  assume 

a  #b 

for  every  pair  a,  b  of  distinct  old  individuals 

The  following  proposition 
that  for  developing 

is  an  immediate 

It 
algorithms  one  can  concentrate  on  knowledge  base  satisfia- 

of  the  above  definitions. 

consequence 

shows 
bility. 

M. Buchheir er at./Artificial Intelligence 99 (1998) 209-260 

231 

Sl: 

(S,W) 

---$  (S,  {s:  A,  t:  B}  u  W) 

if  1.  sPt  is  in  W,  and 

2.  P  L  A  x  B  is  in  S 

s2: 

(S,W) 

+ 

(S,{sPy}u  W) 

if  1.  s: VP.C 

is  in  W, 

2.  s:  A  is  in  W, 
3.  A  C  (2  1 P) 
4.  y  is  a  fresh  new  individual, 
5.  there  is  no  t  such  that  sPt  is  in  W 

is  in  S, 

and 

S3:  (S,W) 

+ 

(S,{t:B}u  W) 

if  1.  s:  A  is  in  W, 

2.  sPt  is  in  W,  and 
3.  A  E  VP.B 

is  in  S 

S4: 

(S,  W)  + 

(S,{s:  B}  u  W) 

if  1.  s:  A  is  in  W,  and 
2.  A  5  B  is  in  S 

s5: 

(S,W) 

+ 

(S,{s:(~lP)}UW) 

if  1.  s:  A  is  in  W,  and 

2.  A  L  (6  1 P)  is  in  S 

Fig.  4.  The  schema  rules  for  &CNR. 

Proposition  5.1.  Let  C,  D  be  ALCNR-concepts, 
edge  base,  x  a  new  and  a  an  old  individual.  Then: 

let  (S,  W)  be  an  ALCNR-knowl- 

(i)  C  KS  D  if and  only  if  the  knowledge  base  (S,  {x:  C  n  lD}) 
(ii)  Fi,) 

k  a:  D  if  and  only  if  the  knowledge  base  (S,  W  U {a:  lD}) 

is  unsatis$able. 

is  unsatis- 

a  e. 

We  assume 

that  concepts  are  in  negation  normal form,  i.e.,  the  only  complements 

they 

contain  are  of  the  form  TA,  where  A  is  a  concept  name.  Arbitrary  ALCNR-concepts 
can  be  rewritten 

in  negation  normal 

time  into  equivalent 
concepts 
is  described  by  a  set  of  ALCNR-completion 

form  [ 151. 
rules,  which 
the  schema  rules  and  the  view  rules.  If  it  is  clear  from 

in  linear 
The  ALCNR-calculus 

into  two  subsets, 

are  divided. 
the  context,  we  omit 
knowledge  base 
contradiction 

the  prefix  ALCNR. 
,Z =  (S,  W).  The  completion 

The  input  of  the  calculus 
rules  add  assertions 

is  an  ALCNR- 
to  W  until  either  a 

is  generated  or  the  knowledge  base  is  recognized 

to  be  satisfiable. 

The  schema  rules  are  presented 
to  a  knowledge  base  Z$ if  2  satisfies 
is  altered  when  transformed 
according 
ensure 
sPtisinMI,PgAxBisinS,andifs:Aandt:BarenotbothinW. 

termination 

in  Fig.  4.  A  completion 
the  conditions 
to  the  rule.  The  second  requirement 
is  applicable 
rule  Sl 

rule  is  said  to  be  applicable 
associated  with  the  rule  and  if  2 
is  needed 
to 
to  (S,  W)  if 

of  our  calculus.  As  an  example, 

238 

M.  Buchheit  et  al. /Artificial 

Intelligence  99  (1998)  209-260 

VI: 

(S, W) 

--f  (S,  {s: c,,  s: C2) u W) 

if  1.  s:  Ci  fl  C2  is  in  W 

v2: 

(S,W) 

+ 

(8,  {XD}  UW) 

if  1.  s:  Ci  LJ C2  is  in  W, 

2.  neither  s:  Ci  nor  s:  Cz  is  in  W,  and 
3.  D  =  c,  or  D  =  c2 

v3: 

(S,  W)  4 

(S,{t:C} 

u  W) 

if  1.  s:VR.C 

is  in  W,  and 

2.  t  is  an  R-successor  of  s 

v4: 

(s,w) 

+ 

(s,{sRiy,. 

. . ,sPky,  y:C}  u  w) 

if  1.  s:  3R.C 

is  in  W, 

2.  R =  P,  fl  . . . fl Pk, 
3.  y  is  a  fresh  new  individual, 
4.  there  is  no  t  such  that  t  is  an 
of  s  in  W  and 

and 

R-successor 
t: C  is  in  W 

v5: 

(S,W) 

--)  (S,{SPlYj,.. 

.,sPky;~~~~..n}U{y;~yj~~,j~~..~,~#j}UW) 

if  1.  s:  (3  12 R)  is  in  W, 
. f-l Pk, 
2.  R =  P,  n.. 
3.  yi,  . . . , y,,  are  fresh  new  individuals, 
4.  there  do  not  exist  n  R-successors  of  s  in  W 

and 

V6: 

(S,  W) 

-+  (S,  wry/t]) 

if  1.  s:(<nR) 

isin  W, 

2.  s  has  more  than  n  R-successors 
3.  y,  t  are  two  R-successors  of  s  which  are  not  separated 

in  W,  and 

Fig.  5. The  view  rules  for  ALCNR. 

Note  that  the  schema 

rules  never  add  to  a  world  description 

rules 
from  the  others:  The  corresponding 

differently 
hand  side  of  the  axiom  to  W,  but  only  the  logical  consequences 
schema 
1 P)  ;  this  is  done  for  termination 
Moreover, 
Hence, 
by  the  number  of  assertions 

treat  axioms  of  the  form  A  L  (3  1 P)  and  A  5  VP.C 
rules  (S2  and  S3)  do  not  add  the  right- 
of  the  axiom.  In  this  way, 
assertions  of  the  form  s: VP.C  or  s:  (3 
(see  Section  5.1.2). 
1). 
is  bounded 

the  number  of  new  individuals  generated  because  of  schema  axioms 
in  the  world  description. 

and  complexity 
rule  S2  is  applied  only  if  a  corresponding 

considerations 
assertion  exists  in  W  (condition 

Before  providing 

the  view  rules,  we  introduce  some  more  notation.  Let  W  be  a  world 
and  R =  PI Il.  . . n Pk  (k  2  1)  be  a  role.  We  then  say  that  t  is  an  R-successor 

description 
ofsinWifsPlt,...,sPktxehW. 

We  say  that  s  and  t  are  separated  in  W  if  the  assertion  s  +  t  is  in  W. 

so  that 
choice.  For  this  reason,  we 

M.  Buchheit  et  al. /AniiJiciai  intelligence  99  (1998)  209-260 

239 

Let  W  be  a  world  description,  n  a  new  individual, 

and  s  an  individual;  with  W  [ n/s] 

we  denote 
(observe 

the  world  description  obtained  by  replacing  each  occurrence  of  x  in  W  by  s 

that  we  never  replace  an  old  individual). 

The  vierv  rules  are  presented 

in  Fig.  5.  The  rules  Vl 

into  more  elementary 
restrictions.. 

assertions.  The  rule  V6  identifies 

to  V5  break  up  assertions 
to  at-most 

according 

individuals 

The  rule:s  V2  and  V6  can  be  applied 

in  different  ways  to  the  same  assertion, 

the  result  of  their  application  depends  on  a  nondeterministic 
call  them  nondeterministic 
rules,  since:  they  introduce  new  individuals 
are  called  rtongenerating. 

rules.  Moreover,  we  call  the  rules  S2,  V6  and  V5  generating 
into  the  world  description.  All  other  rules 

If  _Y and  Y  are  two  AEN%knowledge 

bases, 

then  2’  is  said  to  be  directly  de- 

rived  from  _X if  it  is  obtained 
rule,  and  2:’  is  said  to  be  derived  from  2  if  it  is  obtained 
applications. 

from  2  by  the  application 

of  an  ACCNR-completion 

from  2  by  a  sequence  of 

The  nexl:  theorem 

shows 

that  both  schema  and  view  rules  do  not  add  unnecessary 

contradictions; 
of  applying 
of  applying 

that  is,  starting 

from  a  satisfiable  knowledge  base  there  is  always  a  way 
the  rules  which  leads  to  a  satisfiable  knowledge  base  again  (multiple  ways 
rules  are  possible, 

since  the  rules  V2  and  V6  are  nondeterministic). 

Theorem  5i.2  (Invariance). 

Let  2  be  an  ACCNR-knowledge 
(i)  Let  2’  be  directly  derived  from  2.  if  2’  is  satisfiable 
(ii)  Conversely, 

if  2  is  satisfiable  and  a  rule  is  applicable 

base. 

then  2  is  satisfiable. 

to  8,  then  there  exists  a 

satisfiable  knowledge  base  2  directly  derived  from  2  using  that  rule. 

The  proof  of  the  Invariance  Theorem 
in  first-order 

rules 

tableaux 
as  a  langualge  for  expressing 
form  C  C  i3).  The  only  kind  of  schema  statements  not  considered 
P  5  A  x  B,  whose  corresponding 

schema  axioms  between  concepts 

theorem  was  proved 

logic.  A  similar 

A  knowledge 

base 

knowledge  base  derived 

is  complete 

rule  is  obviously 
if  no  completion 
from  _Z is  called  a  completion  of  2. 

sound. 

is  mainly 

a  rephrasing  of  the  soundness 

of 

in  [6]  with  JltcCNR 
(i.e.,  statements  of  the 
in  the  cited  paper  is 

rule  applies 

to  it.  Any  complete 

In  Section  5.1.2  we  show  that  the  completion  process  always  terminates, 

i.e.,  it  always 
of  a  complete  knowledge  base  can  be 

reaches  a  completion, 
decided  very  easily  by  looking 

and  that  the  satisfiability 

for  obvious  contradictions,  which  we  call  clashes. 
base  (S,  W)  contains  a  clash  if  one  of  the  following 

situa- 

An  dENI&knowledge 

tions  occurs: 
(i) 
(ii)  {s:  A,  s: ‘A} 
(iii) 

{s:(<nR)}U{sP,t;,..., 

s:  A_ E  W,  for  some  individual 

s, 

U{ti+tjIi,jE 
where  R=  PI  Fl...flPk. 

is  given  by  an  evidently 
containing 

a  clash 

c  W,  for  some  individual 

s  and  some  concept  name  A, 

sPkt[  1 i  E  l..n+  1) 

l..n+l,i 

#  j}C  W, 

A  clash 
description 
situation 

in  which 

it  is  asserted 

that  an  individual 

has  at  most  n  R-successors, 

unsatisfiable 

set  of  assertions, 

is  obviously  unsatisfiable.  The  third  case  represents 

hence  any  world 
the 
and  at 

240 

M.  Buchheit  et  al. /Artificial 

Intelligence  99  (1998)  209-260 

the  same  time  it  has  more 
another,  because 

the  successors  are  pairwise  separated. 

than  12 R-successors, 

none  of  which  can  be  identified  with 

Obviously,  a  knowledge  base  that  contains  a  clash  cannot  be  satisfiable.  Consequently, 

if  all  completions 
the  original  knowledge  base  was  unsatisfiable. 
clash-free 
model  of  the  completion 
we  conclude 

the  corresponding 

canonical 

then 

contain  a  clash,  then  by  the  Invariance  Theorem  S.Z(ii)  we  know  that 
is 
is  a 

interpretation  Zx  (as  defined  below) 

If,  however,  one  of  the  completions 

(see  Proposition  5.4).  Again  by  the  Invariance  Theorem  5.2(i) 

that  the  original  knowledge  base  was  satisfiable. 

Given  a  complete  knowledge  base  2  =  (S,  W),  we  choose  a  new  individual 

u  not 

appearing 

in  W  and  define  the  canonical 

interpretation  12  as  follows: 

A’-‘  := {s  / s  is  an  individual 

in  W  U  {u}}, 

ST_’ .- .-s, 

A’-‘  := {s  1 s: A  is  in  W  U  {u}}, 

lJ=x :=  {(s,  t)  1 sPt  is  in  W  U  {(u,u)}} 

U  {(s,  u)  1 there  is  no  sPt  in  W,  but  for  some  A, 

s: A  is  in  W  and  A  5  (2  1 P) 

is  in  S}. 

individual 

interpretation 
u  which  appears 

Note  that  the  canonical 
the  special 
and  is  related 
designed 
such 
purpose  of  u  is  to  satisfy  all  axioms  A  L  (2  1 P)  for  those  individuals 
is  in  W,  but  that  have  no  P-successor 

uses  all  the  individuals  of  the  knowledge  base,  plus 
of  every  primitive  concept 
rules  are 
as  filler.  The 
s  such  that  s:  A 

to  itself  by  every  role  P.  As  pointed  out  before, 
that  not  every  necessary 

role  will  get  a  new 

in  the  interpretation 

the  schema 

individual 

in  W. 
show  that  satisfiability 

termination 

in  the  following 

These  considerations 
able,  which  we  prove 
proving 
of  applying 
space  with  respect  to  combined  complexity 
complexity.  Thus,  we  have  the  following 

completion 

of  the  calculus,  we  prove 

result: 

subsection. 

rules  such  that  they  always 

of  dLCN%knowledge 

is  decid- 
In  fact,  we  do  more:  Instead  of  just 
is  a  way 

that  there 

the  stronger 

result 

bases 

and  polynomial 

terminate  and  use  just  polynomial 
time  with  respect  to  schema 

Theorem  5.3.  With  SL  as  schema 
subsumption 
complexity,  and  in  PTIME  with  respect  to  schema  complexity. 

language  and  ALCNX 

instance  checking  are  PSPACE-complete  with  respect 

and 

as  view  language, 

view 
to  combined 

5.1.2.  Correctness  and  complexity  of  the  ACCNR-calculus 
To  prove  Theorem  5.3,  we  first  show  that  the  canonical 

interpretation 

clash-free  knowledge  base  is  a  model.  Together  with  the  Invariance  Theorem 
us  the  soundness  of  the  d.CCNR-calculus. 
and  thus  show  completeness. 

Then  we  turn  to  termination 

of  a  complete 
this  gives 
and  complexity 

Proposition  5.4.  A  complete,  clash-free  ACCNR-knowledge 

base  is  satisfiable. 

Proof.  See  the  Appendix. 

0 

M.  Buchheit et al. /Artificial  Intelligence 99 (I 998) 209-260 

241 

termination 
the  individuals 

and  complexity,  we  need  some  more  definitions,  which 
Before  we  consider 
are  based  on  viewing 
in  a  graph,  and 
assertions  albout  roles  as  labeled  arcs  in  this  graph.  We  say  that  t  is  a  direct  successor  of 
s  in  W  if  for  some  role  R,  the  individual 
t  is  an  R-successor  of  s.  If  W  is  clear  from  the 
context  we  simply  say  that  t  is  an  R-successor  or  a  direct  successor  of  t.  Moreover,  we 
call  successor 
its  inverse. 

closure  of  the  relation  “direct  successor” 

in  a  world  description 

and  predecessor 

the  transitive 

as  nodes 

For  A.CCNR-knowledge 

bases,  the  “successor” 

relation 

restricted 

to  new  individuals 

forms  a  tree: 

Proposition 

5.5.  Let  (S,  W’)  be  derivedfrom 

the  initial  knowledge  base  (S,  W).  Then 

no  new  individual  W’  is  a  direct  successor  of  two  different  individuals. 

Proof.  Obviously, 
dCCN%calculus 
rule  applications. 

in  W  there  is  no  new  individual.  By  an  analysis  of  all  rules  of  the 
it  can  be  shown  that  the  property  of  the  proposition 
is  invariant  under 
0 

to  compute  all  the  completions 
such  completions  may  be  of  exponen- 
requires 
the  nondeterministic 

calculus 

The  calculus  proposed 

in  the  previous  section  requires 

of  an  initial  knowledge  base  2.  Unfortunately, 
tial  size  with  respect 
exponential 

to  the  size  of  2,  hence 

space. 

To  obtain  a  polynomial-space 

complete  world  description 
We  modify 
complete  knowledge  base  and  we  call  the  modified 
The  trace  rules  consist  of  the  rules  presented 

the  previous 

completion 

calculus, 

it  is  therefore  crucial  not  to  keep  an  entire 
in  memory,  but  to  store  only  small  portions  of  it  at  a  time. 
rules,  so  that  they  build  up  only  a  portion  of  a 

rules  trace  rules. 
above,  but  adding 

to  the  application 

conditions 

l  For  all  assertions 
We  label  S:!‘,  V4’,  VS 

of  the  generating 
tP’z 
these  modified 
Let  T  be  a  knowledge  base  obtained 
T  a  trace  of  2Y if  no  trace  rule  applies 
rules  and 

Completion 

rules  S2,  V4,  V5  the  following 
in  W,  either 

t  is  a  predecessor  of  s  or  s  =  t 

further  condition: 

rules. 
from  2  by  application  of  the  trace  rules.  We  call 
to  T. 
trace  rules  are  always  applied 

(S,  W) 
1 of  all  rules).  We 
that  a  rule  is  applied  to  the  assertion  s:  C,  or  applied  to 

in  W  of  an  assertion  s:  C,  or  spt  (condition 

to  a  knowledge  base 

this  property  by  saying 

because  of  the  presence 
exploit 
the  individual 
We  require 

s  (instead  of  saying 
that  trace  rules  are  applied  using 

that  it  is  applied 

to  the  knowledge  base  (S,  W)). 

the  following 

strategy: 

(i)  apply  a  rule  to  a  new  individual  only  if  no  rule  is  applicable 
(ii)  apply  a  rule 
individual 
apply  generating 
this  strategy, 

individual 
y  such  that  y  is  a  predecessor  of  x; 
rules  only  if  no  nongenerating 

trace  rules  exhibit 

if  no  rule 

to  a  new 

x  only 

(iii) 
Using 

rule  is  applicable. 
the  following  behavior:  Given  an  individual 

is  applicable 

to  a  new 

to  an  old  one; 

s,  if  at  least  one  generating 
introduced.  Then,  after  possibly 
individual 
Unlike  normal  completion 

J;  is  (nondeterministically) 

further  nongenerating 

to  s,  all  of  s’s  successors  yt,  . . . , y,,  are 
to  s,  one  new 

rules  are  applied 
chosen,  and  all  successors  of  vi  are  introduced. 
for  any  individual  different 

is  introduced 

rules,  no  successor 

rule  is  applicable 

242 

M.  Buchheit  et  al. /Artificial 

Intelligence  99  (1998)  209-260 

from  y;,  Then,  one  individual 
role  of  yi  before. 

is  chosen  among 

the  successors  of  yi,  which  plays 

the 

The  reason  why  we  introduce 

all  the  successors  of  the  “chosen” 

is  the 
s  all  direct  successors  of  s  must  be  present 
force  us 

restrictions 

individual 

individual 

at  some  stage  of  the  computation, 

following:  For  every  chosen 
simultaneously 
to  identify  certain  successors.  This  is  important  because,  when  identifying 
the  assertions  about  them  are  combined,  which  may  lead  to  clashes 
not  have  occurred. 

since  the  number 

individuals, 
that  otherwise  would 

Trace  rules  for  checking 

satisfiability 

of  concepts  without 

for  the  language  ACC were  defined 
languages 
an  ACCNR-concept 
C  by  generating 
memory  at  a  time,  is  given  in  [ 151. 

in  [ 15,19,20].  A  polynomial-space 

the  presence  of  a  schema 
to  more  expressive 

in  [36],  and  were  extended 
algorithm 

that  checks  the  satisfiability  of 
all  completions  while  keeping  only  one  trace  in 

We  now  adapt 
and 

subsumption 
(S,  Wt ), T2 =  (S,  I%) 

those  previous 
later  on  also  for  instance 

results 

to  the  presence  of  a  schema, 

first  for  view 
checking.  The  union  of  two  traces  7’r  = 

is  defined  as  TI U T2 =  (S,  Wr  U W2). 

We  call  depth  of  a  concept  D,  written  depth(D), 

the  maxima1  sequence  of  nested 

quantifiers 

in  D  (including 

also  number 

restrictions 

as  quantifiers).  More  precisely: 

0 

1 

if  D  is  of  the  form  A,  I,  or  T, 

ifDisoftheform(>nR)or(<nR), 

deptb(  D)  := 

deprh( C) 

if  D  is  of  the  form  4, 

max(depth(Di)) 

if  D  is  of  the  form  D1  n  D2  or  D1 U D2, 

I 

depth(C)  +  1 

if  D  is  of  the  form  VR.C  or  3R.C. 

The  following  proposition 

collects  a  number  of  properties 

concerning 

the  depth  of 

concepts  and  traces. 

Proposition  5.6.  Let  C  be  an  ALCCNR-concept,  x  a  new  individual,  and  W  =  {x:  C} 
the  corresponding  world  description;  let  S  be  an  SC-schema,  and  .Z  =  (S,  W)  the 
corresponding  knowledge  base.  Then: 

(i)  For  every  chain  of  direct  successors  x,  ~1,.  . . , yt, in  a  knowledge  base  derived 
from  2,  if y;: D  is  in  W,  and  yi: D  has  been  added  by  the  application  of  a  view 
rule  then  depth(D)  6  depth(C)  -  i. 

(ii)  For  every  chain  of  direct  successors  n, ~1,.  . . , yr, in  a  knowledge  base  derived 

from  8,  the  length  of  the  chain  h  is  bounded  by  /C(  (the  size  of  C). 

(iii)  Let  N  be  the  maximal  number  of  direct  successors  of  an  individual  in  a  trace. 

Then  N  is  bounded  by  (C 1. 

(iv)  The  size  of  a  trace  issuing from  2  is polynomially  bounded  by  JC/  and  linearly 

bounded  by  ISI. 

(v)  Every  completion  of  2  can  be  obtained  as  the  union  of finitely  many  traces. 
(vi)  Suppose  2’  =  (S,  W’)  is a  completion  of  2,  and  7  is a finite  set  of  traces  such 
that Z’  =  UTEl  T.  Then  2’  contains  a  clash  if and  only  if some  T  E  ‘T  contains 
a  clash. 

M.  Buchheit  et  al. /Art$icial 

Intelligence  99  (1998)  209-260 

243 

Proof.  See  the  Appendix. 

0 

Now  we  can  prove 

the  main 

result  about 

the  complexity 

of  view  subsumption 

in 

d.CC%‘?-knowledge 

bases: 

Proposition  5.7.  Let  S  be  an  SC-schema, 

(ii)  Checking  C  CIs  D  can  be  done  in  polynomial 

and  C,  D  be  ALCNR-concepts. 
space  with  respect 

Then: 
to  ISI,  ICI, 

and  IDI; 

(ii)  Checking  C  YES D  can  be  done  in  polynomial 

time  with  respect  to  ISI. 

Proof.  Combining 
view  subsumption 
to  combined 
one  generates 
time. 

Proposition 
can  be  checked 

5.6  with  Proposition 
in  nondeterministic 

polynomial 

5.1 (i),  one  directly  proves 

that 
space  with  respect 
is  satisfiable, 

complexity. 

In  fact,  in  order  to  check  that  (S,  {x:  C  fl  lD}) 

a  clash-free 

completion 

keeping 

in  memory  only  one  of  its  traces  at  a 

A  deterministic 

time  the  most  recent  choice 

check  must  also  explore  all  possible  choices  given  by  the  assertions 
(e.g.,  s:  Ct ) 

(e.g.,  s:  CT),  and  all  traces  are  recomputed 
a  rephrasing  of  the  exploration  of  an  AND-OR 

of  the  form  s:  Ct  U  Cz  and  s:  ( <  n I?).  Any 
having  an  alternative  gives  rise  to  at  least  one  trace  containing 
is  taken 
basically 
to  different 
Since  the  nlested  choices 
cannot  exceed 
PSPACE.  This  proves  Proposition  5.7(i)  . 

tree  (AND  nodes  correspond 
choices). 
to  be  kept  in  memory  at  one  time  are  polynomially  many  (they 
is  in 

a  clash, 
for  this  new  choice.  The  method 

traces  to  be  generated,  while  OR  nodes  correspond 

the  size  of  a  trace),  also  this  deterministic 

version  of  the  method 

the  alternative 

to  alternative 

is 

The  result  on  schema  complexity  of  view  subsumption 

(Proposition  5.7(  ii)  )  is  proved 

in  two  steps: 

(condition 

form  of  lD, 

of  generating 

1  of  all  mentioned 

and  the  number  of  completions 

rules,  while  the  number  of  different  completions 

Step  1:  We  prove  that  both  the  number  of  traces  in  a  completion  of  (S,  {x:  C  l’l D’}), 
depends 
that  the  number  of  traces  in  a  completion  depends  on  the 

where  D’  is  the  negation  normal 
only  on  ICI  and  IDI.  Observe 
number  of  applications 
of  nondeterministic 
rules.  All  these 
depends  on  the  number  of  choices  of  applications 
the  presence  of  assertions  which  are 
rules  require 
rules) 
rules,  except  for  an  assertion  of  the  form  s:  (<  1 P),  which  can 
not  added  by  schema 
leaves  no  choice  to  rule  V6  but  leads 
be  introduced  by  rule  S5.  However, 
the  presence  of  this  assertion  does  not 
it  to  identify  all  direct  P-successors 
lead  to  multiple  completions.  Moreover, 
the  number  of  different  applications  of  rule  V6 
depends  on  the  number  of  direct  successors  of  an  individual.  Hence,  both  the  number  of 
and  the  number  of  possible  completions  depend  on  the  number  of 
traces  in  a  completion 
individuals 
forms 
to  new  individuals 
a  tree  (see  Proposition 
can  be  estimated  by  N’*, where 
N  is  the  tree  branching 
h  is  the  tree  depth.  From  Proposition 
ICI  +  IDI,  which  proves 

number  of  direct  successors  of  an  individual-and 

and  (iii),  both  h  and  N  are  bounded  by 

generated.  Since  the  “successor” 

this  assertion 
of  s.  Hence 

the  number  of  individuals 

5.5), 
factor-the 

the  claim. 

restricted 

relation 

5.6(ii) 

Step  2:  Observe 

that,  since  the  number  of  traces  in  a  completion 

completions 

depend  only  on  r 

I and  IDI,  schema  complexity 

and  the  number  of 
from  the 

can  be  computed 

244 

M.  Buchheit  et  al. /Arttjkial 

Intelligence  99  (1998)  209-260 

maximal  size  of  a  single  trace.  This  size  is  linear  in  ISI,  as  proved  in  Proposition  5.6(  iv). 
Therefore, 

is  in  PTIME,  and  more  precisely 

schema  complexity 

in  0(  IS/). 

17 

We  now  turn  to  to  the  problem  of  instance  checking.  For  view  subsumption  we  can 
that  the  initial  knowledge  base  contains  only  one  assertion,  namely  an  assertion 
suppose 
of  the  form  n:  C  for  an  AUNT-concept 
C.  Then,  x  is  the  root  of  the  “tree  of  traces”. 
This  is  no  longer  true  for  instance  checking.  Since  the  problem  of  checking  whether  a  is 
an  instance  of  C  with  respect  to  a  knowledge  base  (S,  W)  is  reduced 
of  the  knowledge  base  (S,  W  U  {a:  -C}), 
assertions. 

to  the  satisfiability 
the  world  description  may  contain  arbitrary 

The  trace  algorithm 

for  subsumption 
[36]  was  extended  by  Baader  and  Holhmder 

of  ACC-concepts 

Smolka 
ACC-world  descriptions 
of  an  arbitrary  knowledge  base  to  the  satisfiability  of  a  number  of  knowledge  bases  with 
only  one  individual.  This  is  achieved  by  introducing  projections. 

[3] 
(see  also  [ 171).  The  basic  idea  there  is  to  reduce  satisfiability 

given  by  Schmidt-Schaug 
to  solve  instance  checking 

and 
in 

Let  (S,  W)  be  a  knowledge  base  and  s  an  individual 

along  s,  denoted  as  W,, 
in  W.  In  other  words,  ?V,  represents  all  the  information 
an  instance  of,  according 

is  the  world  description 

to  W. 

formed  by  all  assertions 

in  W.  The  projection  of  W 
s:  C  that  are 
about  the  concepts  which  s  is 

In  order  to  get  a  correct  method, 

one  has  to  make  all  properties  of  old  individuals 

the  basic  idea  has  to  be  refined.  Before  considering 
explicit.  This  is  captured 

projections, 
by  the  notion  of  a  precompletion. 

A  knowledge  base  is  said  to  be  a  precompletion 

is  obtained 
possible. 

lo 

from  2  by  applying 

the  completion 

of  another  knowledge  base  2  if  it 
as  far  as 

rules  only  to  old  individuals, 

Now,  for  checking 

the  satisfiability 

2  =  (S,  W’)  of  2,  extract 
clash-free 
(S,  W:)) 
x  appearing 
for  satisfiability.  The  correctness  of  this  method  follows  from  the  next  propositions. 

of  a  knowledge  base  2,  one  can  examine  each 
bases 
them 

precompletion 
for  all  new 

the  various  knowledge 

independently 

in  W’,  and 

individuals 

check 

Proposition  5.8.  A  knowledge  base  2  =  (S,  W)  is  satis$able 
a  precompletion 

2’  =  (S,  W’)  of  2  that  is  satisfiable. 

if  and  only  if  there  exists 

Proof.  See  the  Appendix. 

0 

Intuitively, 

the  above  proposition 

tion  by  first  computing 
next  proposition 
independently. 

a  precompletion, 

states  that  one  can  always  build  a  clash-free  comple- 
rules  to  new  individuals.  The 

and  then  applying 

shows  that  rules  can  be  applied 

to  new  individuals 

for  each  individual 

Proposition  5.9.  A  precompletion 
clash-free,  and  for  each  new  individual  x  in  W’, 
clash-free  completion. 

2’  =  (S,  W’)  of  2  is  satisjiable  if  and  only  if  it  is 
(S,  W:)  has  a 
the  knowledge  base 

“’ Notice 

that  this  notion  of  precompletion 

is  different 

from  the  one  given  in  [ 171 

M.  Buchheit  et  al. /Art$icial 

Intelligence  99  (1998)  209-260 

245 

Proof.  See  the  Appendix.  q 

The  size  of  precompletions 

is  polynomially 

bounded  by  the  size  of  the  schema  and 

the  world  dlescription  of  the  initial  knowledge  base: 

Proposition  5.10.  Every  precompletion 
mial  size  with  respect  to  2,  and  the  number  of  individuals 

of  a  knowledge  base  2  =  (S,  W)  has  polyno- 

in  it  does  not  depend  on 

ISI. 

Proof.  See  the  Appendix. 

Cl 

Now  we  can  prove 

the  main 

result  concerning 

instance 

checking 

in  ACCNR- 

knowledge  bases: 

Proposition  5.11.  Let  S  be  an  S&schema,  W  an  ALCNR-world 
individual,  and  D  an  ALCNR-concept. 

Then: 

description,  a  an 

(i)  Checking 

(S,  W)  k  a:  D  can  be  done  in  polynomial  space  with  respect  to  ISI, 

IWI,  and  IDI; 

(ii)  Checking 

(S,  W)  b  a:  D  can  be  done  in  polynomial 

time  with  respect  to  ISI. 

(S,  W)  +  a:  D,  one  has  to  check  whether 

Proof.  To  check  whether 
(S,  WU  {a:  D’}),  where  D ’  is  the  negation  normal  form  of  -D, 
sition  5.1  To  this  end,  compute 
(S,  W  U {a: D’}) 
individual 
trace  calculus  developed  before.  Again, 
version 
rules. 

the  knowledge  base 
(Propo- 
2  of 
space  by  Proposition  5. IO);  then,  for  each  new 
the 

space.  The  deterministic 
of  nondeterministic 

there  is  a  clash-free  completion  of  (S,  W:)  using 

a  clash-free  precompletion 

track  of  all  backtracking 

J:  in  Y,  check  whether 

(this  needs  polynomial 

this  needs  polynomial 

(nondeterministically) 

in  applications 

is  unsatisfiable 

just  keeps 

points 

We  now  turn  to  the  second  point  of  the  proposition.  Let  2  =  (S,  W)  be  an  AENR- 
in  four  steps. 

in  a  precompletion 

does  not  depend  on  ISI,  by 

knowledge  base.  We  prove  the  claim 
Step  1:  The  number  of  individuals 
I. 

5.10.  Call  this  number 

Proposition 

Step  2:  For  each  assertion  of  the  form  s:  Cl  I-  Cz,  there  are  two  different  applications 

there  are  at  most  2’  different  applications, 
the  total  number  of  different  applications 

for  each 
of  rule  V2  to  the  assertion;  hence 
of  rule 
concept  Cl  UC, 
in  W.  Therefore, 
the  number  of  different 
V2  is  0(  I)/VI  .2’),  which  does  not  depend  on  ISI.  Similarly, 
s:  ( <  n  R)  is  bounded  by  Z( I  -  1)  . . . (n  +  1) 
applications 
(the  number  of  sequences  of  elements  of  l..Z  of  length  Z -  n),  and  the  total  number  of 
different  applications 
Step  3:  Since 
different  applications 

the  number  of  possible  precompletions 

of  rule  V6  does  not  depend  on  ISI. 

of  rule  V6  to  the  assertion 

rules,  this  number 

of  nondeterministic 

depends  only  on  the  number  of 
is  0(  1)  with  respect  to  ISI. 
is  the  product  of  the  following 

Step  4:  The  schema  complexity  of  the  entire  method 

factors: 

l  the  maximal  number  of  precompletions 
l  the  time  to  compute  a  precompietion 

(a  constant  with  respect 

to  ISI), 

(linear 

in  [S[  from  Proposition  5.10), 

246 

M.  Buchheit  et  al. /Art@cial 

Intelligence  99  (1998)  209-260 

l  the  number  of  new  individuals 
l  the  schema  complexity 

in  a  precompletion 
of  the  trace  calculus  applied 

(I,  a  constant  with  respect  to  S), 
in 

to  (S,  W:) 

(again, 

linear 

ISI). 
Therefore, 

the  schema  complexity  of  instance  checking 

is  in  0(  lS12). 

0 

Summing  up,  by  Propositions 
While 

the  combined  complexity  of  inferences 

5.7  and  5.11  we  proved  Theorem  5.3. 

language, 

guage  and  SC  as  schema 
guage  raises  the  combined  complexity 
tion  between  ACCNR-concepts 
Hence,  we  can  conclude 
systems 
whereas  adding 

like  KRIS without  changing 

full  cyclic  definitions 

that  simple 

is  PSPACE,  using  ACCNI?,  also  as  the  schema 

in  our  case,  with  ALCNR  as  view  lan- 
lan- 
[ 341.  However,  subsump- 
is  already  PSPACE-complete. 

to  EXPTIME-hardness 
any  schema) 

(without 

inclusion 
substantially 
increases 

axioms  with  cycles  can  be  added 
the  complexity  of  reasoning 

to 
services, 

significantly 

the  complexity. 

inverse 

to  note 

languages 

It  is  important 

is  that  schema 

can  be  extended 

(e.g.,  ALC  plus 

In  fact,  the  schema 

of  the  view  rules  and  they  can  be  applied  a  polynomial 

that  the  results  on  schema  complexity 
roles). 

to  the  size  of  the  schema,  still  independently 
only 

to 
rules  are  valid 
other 
number  of  times 
independently 
of  the  view  rules.  The  key 
with  respect 
if  an  assertion  of  the  form 
point 
to  a  world 
x:VR.C 
description.  Hence, 
of  the  schema  rules  is  fixed  by  the  size 
of  the  knowledge  base  generated  by  the  view  rules  and  by  the  number  of  assertions  of 
to  the 
the  form  x:VR.C 
size  of  the  schema 
infinite 
applications 

the  view  rules  can  generate.  This 
the  view  contains 
(unless 

is  a  constant  with  respect 
that  can  trigger 

themselves  never  add  such  assertions 

like  the  transitive  closure  construct). 

is  present,  and  schema  rules 

the  number  of  applications 

rules  create  new 

some  constructors 

of  the  rules, 

individuals 

5.2.  The  language  of  CONCEPTBASE  as  view  language 

roles  P  or  inverses  P-’ 

In  [ 71  the  query  language  QC  was  defined,  which  is  derived  from  the  CONCEPTBASE 
In  &L,  roles  are  formed  with  all  the  constructs  of  Table  2.  That  is,  roles  can 
there  are  role 
Intuitively, 
satisfies  C. 
to  so-called  paths:  RI  o R2 0.  . . o R,.  In  QC,  concepts  are  formed 

(R:  C),  where  R  is  a  role  and  C  is  a  &C-concept. 
the  pairs  related  by  R  to  those  whose  second  component 

system. 
be  primitive 
restrictions,  written 
(R:  C) 
restricts 
Roles  can  be  composed 
according 

roles.  Furthermore, 

of  primitive 

to  the  rule: 

C,D- 

AITI{a})CflD)3R.C13Q-R. 

Observe 
formulas.  We  feel 
to  existentially 
concepts 
practical  queries  are  of  this  form  and  do  not  involve  universal  quantification. 

that  concepts  and  roles  can  be  arbitrarily  nested 
in  QC  correspond 

quantified 

through 

role  restrictions.  All 
that  many 

Fig.  6  contains 

some  examples  of  &L  queries.  Suppose  we  are  given 

Fig.  2.  Query  Qi  denotes  all  the  managers 
is  an  employee 
salary.  Then  query  Qr  is  subsumed  by  Q2  since  every  manager 
salaries  of  managers  must  be  high  salaries.  Query  Qs  denotes  all  the  researchers 
live  in  the  town 
in  which 
denotes  all  the  employees 

the  department 
that  work  for  a  research  department 

the  schema  of 
that  get  a  high 
and 
that 
for  is  situated.  Query  QJ 
that  the  city  they  are 

and  Q2  all  the  employees 

they  are  working 

M.  Buchheit  et  al. /ArtQicial 

Intelligence  99  (1998)  209-260 

247 

Ql  =  Manager 

Q2  =  Employee 

fl  3salary.HighSalary 

Q3  =  Researcher  n  Gilives-in  A  works-for  o situated 

Q4  =  Employee  n  Fl(works-for:  ResearchDept) 

-  lives-in  o  hosts 

Fig.  6.  QL  queries. 

living 
in  is  hosting.  With  hosts  being 
Q4.  This  is  because  every  researcher 
is  a  research  department. 
For  the  combination 

the  inverse  of  situated,  query  Q3  is  subsumed  by 
is  an  employee  and  any  department  he  works  for 

of  SL  and  &L:  in  our  architecture,  we  have  the  following 

results: 

Theorem  5.12.  With  SL  as  schema 
sumption  and  instance  checking  are  in  PTIME  with  respect  to  combined  complexity. 

language  and  &L  as  view  language, 

view  sub- 

checking 

The  result  on  instance 

is  an  easy  consequence 

that,  by  means  of  singletons, 

of  the  one  on  view  sub- 
can  be  completely 
sumption  observing 
to  sub- 
described  by  means  of  concepts 
to 
sumption 
the  concept:  {a}  FIG  and  the  assertion  aRb  to  the  concept  {a}  I-I 3R.{b}.  More  precisely, 
the  transformation  @ of  a  world  description 
is  defined  as  follows.  Let  W 
be  a  world  description,  C  a  concept,  and  a,  b  two  old  individuals, 

so  that  instance  checking  can  then  be  reduced 

the  assertion  a: C  corresponds 

a  world  description 

into  a  concept 

(as  shown 

Intuitively, 

checking 

[ 331). 

then 

in 

@(J”J) := n,a,w,@(a>, 

@(a:C):=3Q.({a}nC), 

@(aRb) 

:= 3Q.({a} 

n  3R.{b}), 

where  Q  does  not  appear  in  W.  Intuitively,  @ “encodes” 
implicit  assertions  of  the  concept  @J(W).  The  following  proposition 
between 

the  W  and  Q(W). 

the  world  description  W  in  the 
states  the  relation 

Proposition  5.13.  Given  a  schema  S,  a  world  description  W,  an  old  individual  a,  and 
a  concept  C,  then: 

(i)  W 
(ii) 

,Is satisjiable 
f= C(a) 

(S,  W) 

iff  @( W) 
is  satisfiable, 
ifs@(W)  n  {a}  LS  C. 

Proposition 
5.13  can  be  proved  analogously 
A  detailed  proof  of  the  view  subsumption 

the  proof  requires 

techniques  quite  different 

case  study,  we  will  demonstrate 
schema  and  query 

the  main  characteristics 

language.  The  restricted  query 

of  these  techniques 
language  SL- 

is 

to  Lemma  6.6  of  [ 331. 
part  of  Theorem  5.12  can  be  found 

in 
from  the  ones  used  in  the 

[ 71,  But,  since 
preceding 
for  a  restricted 
defined  by  the  rule 

248 

M.  Buchheit  et  al. /Artificial 

Intelligence  99  (I 998)  209-260 

Dl:  (S, 3)(G)  --) 

(S, {s: c,  s: D}  u 3)(G) 

if  1.  s:  C  fl  D  is  in  3 

D2: 

(S,3)@) 

+ 

(S,  {S&Y:  C}  U F)(G) 

if  1.  x3P.C 

is  in  F’, 

2.  there  is  no  t  such  that  sPt  and  t:  C  are  in  3,  and 
3.  y  is  a  fresh  new  individual 

Sl: 

(S,3)@) 

-+ 

(S,  (1:  A2) 

u  F)(G) 

if  1.  s:A,  and  sPt  are  in  3,  and 

2,  A1  C  VP.A2 

is  in  S 

s2: 

(S,  3)  (9) 

-+ 

(S,  {SPY)  u  3)(6) 

if  1.  there  is  an  A  such  that  s:  A  is  in  3, 

is  in  S, 

2.  A  g  (2  1 P) 
3.  there  is  no  t  such  that  spt  is  in  3,  and  s:  3P.C 
4.  y  is  a  fresh  new  individual 
--$  (S,3)(0 

U  {s:C,s:  D}) 

(S,3)(6) 

Gl: 

is  in  9,  and 

if  1.  s:CnD 

is  in  17 

G2: 

(S,  3)  (L7)  + 

(S,3)(6U 

{r:C}) 

if  1.  s:3P.C 

is  in  G,  and 

2.  sPt  is  in  3 

Cl: 

(S,  3)(9) 

--f 

(S,  {s:  C  n  D}  U 3)(G) 

if  1.  s:C  and  s:  D  are  in  3,  and 

2.  s:  C  FI D  is  in  6 

C2: 

(S,3)(6) 

* 

(S,  {s:  3P.C)  u  3)  (G) 

if  1.  there  is  a  t  such  that  sPt  and  t: C  are  in  3,  and 

2.  s:  3P.C 

is  in  G 

Fig.  7.  The  decomposition,  schema,  goal,  and composition  rules. 

D  - 

VP.A 

I(> 

1 P). 

An  SC--schema 
language  QL- 
to  the  following 

inclusions 

contains  only 

of  the  form  A  C  D.  In  the  restricted  query 
there  are  no  role  forming  operators  and  concepts  are  formed  according 
syntax  rule: 

C,D-+ 

A(CtlD13P.C. 

The  basic 

subsumption 

idea  for  deciding 

between  views  C  and  D  is  as  follows.  We 
knowledge  base  where  s  is  an 
take  an  object  s  and  transform  C  into  a  prototypical 
them  into  concepts,  and  relating 
instance  of  C.  We  do  so  by  generating  objects,  entering 
them  through 
to  the 
instances  of  D  then  C  is  subsumed  by  D.  If  not,  we  have  an  interpretation  where  an 

roles.  Then  we  evaluate  D  over  this  knowledge  base.  If  s  belongs 

M.  Buchheit  et  al. /Artificial 

Intelligence  99  (1998)  209-260 

249 

object  is  in  C  but  not  in  D  and  therefore  C  is  not  subsumed  by  D.  The  next  proposition 
gives  the  formal  justification 

for  this  idea. 

Proposition  5.14.  Let  S  be  an  SL--schema, 
individual.  Then 

C,  D  be  QLC--concepts, 

and  s  be  an 

C  CIs  D 

if 

(S,  {s:  C}) 

/= s: D. 

In  order 

the  goals 

the  facts-and 

The  transformation 

and  evaluation  process 

the  rules,  we  add  more 

is  specified  by  a  calculus, 

the  goal  {s:  D}.  Applying 

schema,  goal,  and  composition 

four  kinds  of  rules:  decomposition, 

on  a  second  world  description  E  called 
together  are  called  a  pair 

the  Q,!Z-calculus 
that  features 
rules. 
The  rules  work  on  a  knowledge  base  that  consists  of  the  schema  S  and  a  world  de- 
the  goals. 
scription  3-called 
to 
The  knowlcedge  base  and 
(S,  F)(G). 
s  and  start  with  the  knowledge  base 
decide  whether  C  &  D,  we  take  an  individual 
(S,  {s:  C})  and 
facts  and  goals 
Intuitively,  C  is  subsumed  by  D  iff  the  final  knowl- 
until  no  more  rule  is  applicable. 
style  calculus 
edge  base  contains 
(S,  {s:  C, s:  -D}) 
of  the  first  case  study,  where  we  start  with 
and  check 
language 
would 
lead 
culus  exploit 
the  polynomiality 
plicable 
pair 
needed 
to  a  pair 
in  3. 

this 
the  case  of  &L  as  view 
number  of  possible  completions.  All  rules  of  this  cal- 
for 
structure  of  concepts,  which 
is  ap- 
of  the  procedure.  The  rules  are  presented 
if  the 
if  it  satisfies 
is 
transformed 

of  our  calculus.  As  an  example, 
a  fact  s:  C  n  D  and 

is  applicable 
if  either  s: C  or  s:  D  is  not 

the  completions 
to  an  exponential 
the  hierarchical 

is  the  basic 
in  Fig.  7.  A  rule 
the  rule  and 

associated  with 
to  the  rule.  The  second 

to  a  pair 
is  altered  when 

the  conditions 
according 

to  (ensure  termination 

the  fact  s:  D.  This 

to  the  refutation 

the  knowledge 

is  a  difference 

if  3  contains 

for  clashes. 

requirement 

(S,  3)(G) 

rule  Dl 

reason 

base 

In 

The  decomposition 

rules  (Dl,  D2)  work  on  facts.  They  break  up  the  initial  fact  s:  C 

into  facts  involving  only  primitive  concepts  and  primitive 

roles. 

derivable 

that  limits 

The  schema  rules  (S  1,  S2)  also  work  on  facts.  They  add  information 

facts.  The  first  rule  is  simple,  It  adds  membership 
in  3.  Rule  52,  however,  which  might  create  a  new  individual, 
the  number  of  new  individuals: 

the  schema  and  the  current 
for  individuals 
to  a  tricky  control 
creates  a  role  filler  that  is  required  by  a  goal.  This  control 
of  the  corresponding 
to  universally 
quantification 
calculus.  Without 
in  the  worsl:  case. 

from 
assertions 
is  subject 
if  it 
to  the  control 
is  restricted 
(see  rule  S2  in  Fig.  4).  Note  that  an  existential 
in  the  refutation  style 
could  be  introduced 

constrained 
in  a  goal  would  give  rise  to  a  universal  quantification 

rules  in  the  preceding  case  study.  There  the  application 

this  control,  an  exponential  number  of  individuals 

it  is  only  applicable 

is  comparable 

individuals 

The  goal  rules  (Gl,  G2)  work  on  goals.  They  guide 

subgoals 

D  by  deriving 
relates  goals  to  facts:  if  the  goal  is  to  find  s:  3P.C, 
the  ones  which  are  explicitly  mentioned 

from  the  original  goal  s: D.  The  interesting 

as  P-fillers  of  s  in  the  facts. 

the  evaluation  of  the  concept 
rule  is  G2,  since  it 
tested  are 

then  the  only  individuals 

The  composition 

rules  (Cl,  C2)  compose  complex 

by  the  goals.  This  can  be  understood 

as  a  bottom-up 

facts  from  simpler  ones  directed 
evaluation  of  concept  D  over  3. 

250 

M.  Buchheit  et  al. /Art@&1 

Intelligence  99  (1998)  209-260 

Both  the  decomposition 
Since 
the  individuals 
created  by  S2,  decomposition 
only 
if  no  decomposition 
whole  procedure  polynomial. 

rule  D2  and  the  schema 

introduced  by  D2  carry  more  specific 
rules  receive  priority, 

information 

rule  S2  can  introduce 

individuals. 
than  the  ones 
i.e.,  a  schema  rule  can  be  applied 
the 

to  keeping 

rule 

is  applicable.  This  strategy  contributes 

In  [ 71  one  can  find  the  full  calculus  and  a  proof  that  for  Q&concepts  C, D  and  an 
S,  we  have  that  C  Cs  D  if  and  only  if  s: D  is  in  the  completed 

facts. 

S&Schema 

rules 

quantified 

of  C.  Hence, 

subconcept 
is  less  or  equal 

that  the  number  of  individuals 
is  polynomially 
introduced  by  a  decomposition 

bounded  by  the 
rule,  there  is  an 
generated 
the  number  of  individuals 
to  the  size  of  C.  Let  us  call  these  individuals 

result 
is  based  on  the  observation 
(S,  .7=c)(G~)  of  (S,  {s:  C})({s:  D}) 

The  complexity 
in  the  completion 
size  of  C  and  D.  For  every  individual 
existentially 
by  decomposition 
primary  individuals. Then,  since 
is  controlled  by  the  structure  of  D,  one  can  show  that  for  every  primary 
number  of  nonprimary 
polynomial 
of  rule  applications 
of  the  schema  S.  Thus, 
polynomial 

for  the  number  of  individuals.  One  can  show  that  the  number 
and  the  size 
in  time 

by  the  schema  rule  S2 
the 
is  bounded  by  the  size  of  D.  Summarizing,  we  get  a 

the  completion  of  (S,  {s:  C})  ({s:  D})  can  be  computed 

in  the  size  of  C,  D  and  S.  This  yields  our  claim. 

bounded  by  the  number  of  individuals 

the  introduction 

is  polynomially 

of  individuals 

upper  bound 

successors 

individual 

Theorem  5.12  illustrates 

universal  quantification 
have  both  without 
which  contains  both  universal 
NP-hard,  even  for  cycle-free 

losing 

the  benefits  of  the  new  architecture  because  by  restricting 
to  views  we  can 
to  the  schema  and  existential  quantification 
tractability.  Note  that  in  the  language  ALE (cf.  Section  4.2.1) 
is 

and  existential  quantification, 

subsumption 

checking 

terminologies. 

6.  Conclusion 

We  have  proposed 

to  replace 
a  schema,  where  primitive 

the  traditional  TBox  in  a  terminological 
concepts  describing 

frame-like 

system  by  two 
are 
structures 

and  a  view  part  that  contains  defined  concepts.  We  feel  that  this  architecture 

components: 
introduced, 
reflects  adequately 
We  also  think 

cycles.  Given 
cycles 
view  part  a  definitional 

the  way  terminological 

systems  are  used  in  most  applications. 

that  this  distinction 

can  clarify 

the  discussion 

about 

the  different 

functionalities 

of  the  schema  and  view  part,  we  propose 

the  semantics  of 
that 
in  the 

in  the  schema  are  interpreted  with  descriptive 
should  be  adopted. 
In  two  case  studies  we  have  shown  that  the  revised  architecture  yields  a  better  tradeoff 

semantics  while  for  cycles 

semantics 

between  expressivity 

and  the  complexity  of  reasoning. 

The  schema 

language  SL:  we  have 

in  many  cases. 
Sometimes,  however,  one  might  want  to  impose  more  integrity  constraints  on  primitive 
concepts 
to  this  problem:  Either 
and  have  to  pay  by  a  more  costly  reasoning  process,  ”  or  we 
we  enrich 

introduced  might  be  sufficient 

in  it.  We  see  two  solutions 

than  can  be  expressed 

the  language 

”  Recently,  Calvanese 
of  SL,  building  on  the  results  and  techniques  described 

[ 81  has  determined 

in  the  present  paper. 

the  complexity  of  reasoning  about  schemas 

in  various  extensions 

M.  Buchheit  et  al./Artificial 

Intelligence  99  (1998)  209-260 

251 

treat  such  constraints 
knowledge  base.  The  second  alternative 
epistemic  operators 

[ 161)  . 

(see 

in  a  passive  way  by  only  verifying 

them  for  the  objects 

can  be  given  a  logical  semantics 

in  the 
in  terms  of 

Acknowledgements 

This  work  has  been  partly  funded  by  the  Esprit  Long  Term  Research  Project  No.  22469 
and  by  AS1  ( Agenzia  Spaziale  Ital- 

of  Data  Warehouse  Quality 

(DWQ)“, 

“Foundations 
iana),  CNI!  (Consiglio  Nazionale  delle  Ricerche) 
sita  e  della  Ricerca  Scientifica 

e  Tecnologica). 

and  MURST 

(Minister0  dell’univer- 

Appendix  A.  Proofs 

Obviously,  S  is  locally  valid  if  it 
Proof  of  Proposition  4.3.  Let  S  be  an  S&,-schema. 
is  valid.  TCI prove  the  converse, 
to  show  that  for  any  concept  names  Al,  AZ, 
given  two  models  Zi  and  12  of  S  with  Af’  #  8  and  Aifi  #  0  we  can  construct  a  model 
Z  of  S  such  that  A;  #  0  and  A:  #  0. 

it  suffices 

Without 

loss  of  generality,  we  can  assume 

that  the  domains  AZ1 and  A4  are  disjoint. 
We  then  define  Z  on  the  domain  A’  := AZ’ U AZ  by  A’  := AZ’  U AZ2  for  every  concept 
a. 
name  A,  P-I  := Pzl  U P z,  for  every  role  name  P,  and  a’ 
that  in  the  language  SCdi,  for  every  concept  C  we  have  Cz  = 
that  an  axiom  satisfied  by  Zt  and  12  is  also  satisfied  by  1. 
both  Al  and  A2  are  interpreted  under  Z  as 

Czl  u  Cz.  We  conclude 
Hence,  Z  is  a  model  of  S.  By  construction, 
nonempty 

for  every  individual 

It  is  easy 

to  verify 

s,ets.  0 

:=  a” 

.z) 

3  = 
such  that  A:  #  8.  We  modify  _7 so  as  to  yield  an  interpretation  Z  =  (AZ,  +‘) 
in  Sc  and  put 
is  a  model  of  SC,  so  is  1,  and  AZ  #  8.  We  show  by 

Proof  of  Lemma  4.5.  “=+”  Suppose  SC  is  valid.  There 
( A9, 
with  Cz  #  0.  We  define  Z  as  equal 
Q=  :=  Upc.pc P 3,  Since  J 
induction  over  the  structure  of  concepts 
This  implies 

that  A$  C  Cz  and,  since  As  f  8,  the  claim  follows. 

that  A$  C  D”  for  every  subconcept  D  of  C. 

to  ,7  for  every  symbol  occurring 

interpretation 

is  an 

Base  case:  If  D  =  T,  then  AZ  2  A3  =  Tz.  Suppose 

that  D  =  VQ.1.  The  schema 
and  for  every  P  E  PC  the  axioms  AD  C  VP.A+ 

the  axiom  A+  C  TA-, 
Thus, 

if  d  E  AD, ’ 

Sc  contains 
and  AD  L  VP.A-. 
PC.  Otherwise, 
impossible, 

because 

such  a  filler  would  be  an  element  of  (A+)’ 

and  of  (A-)‘, 
these  sets  are  disjoint.  This  proves  that  A$  g  (VQ.J-)z. 

then  d  has  no  filler  for  any  of  the  roles  P  E 
is 

which 

Inductive  case:  If  D  =  D’  fl  D”,  then  Sc  contains 

AD!!.  By  the  induction 
A;  2  AI,,  (-I AZ,,,  C  D’=  n  D”=  = Dr. 

hypothesis  we  know 

the  axioms  AD  5  ADI  and  AD  L 
c  D”‘,  Hence, 

that  A&  G  D”  and  A& 

If  D  =  3Q.D’, 

then  Sc  contains 

the  axioms  AD  g  ( 2  1 PO)  and  AD  L  VPD.D’.  This 
that  for  any  d  E  A$  there  is  some  d’  with  (d,  d’)  E  Pg  and  d’  E  A$,.  Then, 
hypothesis  we  have 

of  Q,  we  have  (d,  d’)  E  Q’,  and  by  the  induction 

implies 
by  definition 
A$  2  D”.  Hence,  d  E  (3Q.D’)‘. 

This  shows  that  A;  5  (3Q.D’)‘. 

252 

M.  Buchheit  et  al. /Artificial 

Intelligence  99  (1998)  209-240 

If  D  = QQ.D’,  D’  #  I, 

then  SC  contains 

for  every  P  E  PC  the  axiom  AD  C  VP.Ap. 

Let  d  E  A5  and  (d,  d’)  E  QT.  By  definition  of  Q  we  have  (d,  d’)  E  Pz 
P  E  PC.  From 
hypothesis  A&  5  D” 

for  some 
that  d’  E  A&,  which  together  with  the  induction 

that  d’  E  0”.  This  shows  that  A:  C  (QQ.D’)z. 

the  axioms 

it  follows 

implies 

“+” 
The  concept  C  has  a  model  3.  We  extend  2 

Suppose  C  is  satisfiable.  We  construct  an  interpretation  Z  such  that  As  #  0. 
Z  by  defining 
that  are  not  elements 
for  every 
and,  for  D  of  the  form  3Q.D’, 

:=  AZ  U  {d+,  d-1,  where  d+,  d-  are  t wo  distinct  objects 

is  given  by  A$,  :=  Dg 

to  an  interpretation 

interpretation 

in  Sc 

:= {d-}, 

of  the  symbols 
),  (A-)’ 
:=  d+ 
{ 
1 d  ;  A:,  d’  E  A$, 

(A+)’ 

A’ 
of  AZ.  The 
subconcept  D  of  C 
Pz  := {(d,d’) 

We  check  that  Z  satisfies  every  axiom 

the 
axioms  AD  C  AD,  and  AD  5  AD!),  which  are  satisfied,  since  by  definition  of  1,  we 

(d,d’)  E  QJ} 

for  every  P  E  PC. 
in  SC.  For  any  D  = D’  n  D”,  SC  contains 

have  A5  =  (D’  n  D”),7  = Dts 

fl  D”’  = A&  n  AZ pt. 

If  D  =  3Q.D’, 

then  Sc  contains 

the  axioms  AD  C  (2  1 PO)  and  AD  L  VPLI.D’. 

for  every  d  E  AZ  =  Dz 

Since  A$  =  (3Q.D’)g, 
(d,d’)  E  Q”,  which 
definition  of  Pg,  every  filler  for  PD  is  an  element  of  A$.  Thus, 
satisfied. 

that  (d,  d’)  E  Pz.  Thus,  the  first  axiom 

implies 

there  is  some  d’  E  D” 

such  that 
is  satisfied.  By 
is 

the  second  axiom 

If  D  =  VQ.D’, 

then  Sc  contains 

for  every  P  E  PC  the  axiom  AD  C  ‘dP.Ap.  By 

_ 
and  Pz  C  Qg.  This 

implies 

that  all  such 

definition,  we  have  A;  =  D3,  A&  = Dt3, 
axioms  are  satisfied. 
If  D  = t/Q.-L, 

then  there  are  axioms  A+  5  --JA-,  and  AD  C  QP.A+,  AD  C  QP.A- 

every  P  E  PC.  By  construction, 
is  satisfied.  Moreover, 
that  elements  of  A;  do  not  have  a  filler  for  any  role  P  E  PC.  Thus, 
are  satisfied. 

since  Dz  =  (QQ.1)” 

and  (A-)z 

(A+)’ 

are  disjoint.  Thus, 

for 
the  first  axiom 
and  P’  G  Q”  for  ‘all  P  E  PC,  it  follows 
the  latter  axioms 

This  proves 

that  Z  is  a  model  of  Sc.  Also,  we  have  that  A$  =  C3  #  0.  However, 

it 
might  be  the  case  that  A;  =  0  for  some  prop er  subconcept  D  #  _L of  C.  Since  such 
in  a  similar 
a  subconcept  D  is  satisfiable, 
way  as  above  a  model  of  Sc  that  interprets  AD  as  a  nonempty 
set.  This  proves  that  Sc 
is  locally  valid.  By  Proposition  4.3,  Sc  is  valid.  q 

it  has  a  model  from  which  we  can  construct 

Suppose 

there  is  a  path  Co, Cl,  . . . , Ck  in  &s  from  C  =  Ca 
there  are  roles  PI,.  . . , Pk  such  that  Pi  is  necessary  on 

Proof  of  Lemma  4.8.  “+” 
to  some  conflict  node  Ck.  Then 
some  concept 
Assume 

that  AI  fl  . . . n  A,, 

in  Ci-  1, and  C; =  range(  Pi, Ci_ 1) .  Obviously,  C;  #  8  for  every  i  E  O..k. 

is  S-satisfiable.  Then 
S  with  an  element  d  E  A’  such  that  d  E  A:  n  . . . n  Ai.  We  show  by  induction 
for  every 

there  is  a  model  Z  =  (A’,  -‘)  of 
that 
for  i  =  0  coincides  with  our 

i  E  O..k  we  have  nAEc,  A’  #  0.  The  claim 

assumption.  Suppose 
A  E  C;_ I,  there  exists  an  element  di  such  that  (di-  1, di)  E  Pi”.  Moreover, 

that  di_1  E  A’  for  every  A  E  Ci_1.  Since  Pi  is  necessary  on  some 
for  every 

B  E  CL we  have  di  E  B’, 
follows 
“e=” 
construct 

that  dk  E  nBECt B’,  which  is  impossible  because  Ck is  a  conflict  node. 

Suppose 
from  C.  We 
a  model  Z  of  S  such  that  A:  n  . . . n  AZ  #  0.  We  define  AZ  as  the  set  of 

is  reachable  by  a  path 

that  no  conflict  node 

issuing 

since 

there  is  a  transition  A--%sB 

for  some  A  E  Ci_1.  It 

M.  Buchheit  et  al. /Art@cial 

Intelligence  99  (1998)  209-260 

253 

all  nodes 
concept  name  A  we  define 

i:n  G’s  that  are  reachable  by  a  (possibly 

empty)  path  issuing 

from  C.  For  a 

A’  := {C’  E  A’  1 A’  E  C’  for  some  A’  3s  A}. 

For  a  role  .P  we  define 

Pr 

:=  {(C’,  range(  P, C’)  )  ( C’  E  AZ  and  P  is  necessary  on  some  A’  E  C’}. 

We  have  to  check  that  Z  satisfies  every  axiom 

in  S. 

Suppose 

that  P 

that  P  C  A  x  B  E  S.  Let  (C’,  C”)  E  P’.  Then 

is  some  A’  E  C’ 
that 
(2  1 P)  E  S.  Since  S  is  isa-complete,  we  have  A”  5s  A.  Hence,  A’  -&  A, 

is  some  A”  with  A’  5~  A”  such 

on  A’.  Thus, 

is  necessary 

there 

there 

such 
A”  5 

which  implies  C’  E  A’.  Also,  there  is  a  transition  A’PsB, 
Hence,  C”  E  B’. 

which  implies 

that  B  E  C”. 

We  now  show  that  Z  satisfies  all  axioms  of  the  form  A  C  C  in  S.  Consider  a  concept 

name  A  and  some  C’  E  A’.  Then  there  exists  some  A’  3s  A  with  A’  E  C’. 

Suppose 
Suppose 

that  A  C  B  E  S.  Then  C’  E  B’,  since  A’  5s  B. 
that  A  &  (2  1 P)  E  S.  Then  P  is  necessary  on  A’.  With  C”  :=  range(  P, C’) 

we  have 

is  an  edge  in  Gs, 

(i) 
(C’,C”) 
(ii)  C”  E  A’,  and 
(C’,C”)  E  PI. 
(iii) 
Suppose 

that  A  L  VP.B  E  S.  Let 

(C’,  C”)  E  P’.  Then  B  E  C”,  since  C”  = 

range(  P, C’),  which 

implies 

that  C”  E  B’. 

Suppose 

Z,  every  role  is  interpreted 

that  A  E  (<  1 P)  E  S.  This  axiom 
as  a  partial  function. 

is  satisfied  because,  by  construction 

of 

Suppose 
B’  E  C’.  This 
implies 
only  nodes  reachable 

that  A  L  TB  E  S.  Assume 

that  C’  E  B’.  Then 

that  C’  is  a  conflict  node,  which  is  impossible, 
from  C,  and  no  conflict  node  can  be  reached  from  C.  0 

there  is  some  B’  <_s B  with 
since  A’  contains 

Suppose 

Proof  of  Llemma 4.18.  “*” 
there  is  a  path  CO, Cl,  . . . , Ck  in  G’s  from  Ca  = 
in 
A,,,}  to  some  conflict  node  Ck_ We  show  that  there  is  a  path  co,  cl,. 
{A,,..., 
Ds  such  that  61 2  C! for  1 E  O..k  and  &  is  a  conflict  node.  This  yields  the  claim  because 
and  has  at  most 
&~CO={A,,... 
two  elements.  We  proceed  by  induction  on  k  -  1. 
Base  case:  Since  Ck  is  a  conflict  node  in  &, 

there  are  names  Bk,  Bk  E  Ck  such  that 
there  are  B;,  i!$  with  Bk  3s  Bi,  fik  5s  86,  and  Bi  &  -&k  E  S.  Hence,  &  :=  (Bk, Bk) 
is  a  conflict  node  in  Ds. 

and,  since  (?a is  a  node  in  ‘Ds,  it  is  nonempty 

. . ,& 

, A,} 

Inductive  case:  Suppose 

that  cl  =  {BI,  Bj}  2  Ci  has  already  been  defined  and  that  the 
edge  from  (31-r  to  Cr  is  labeled  with  P.  By  definition  of  f&r, the  role  P  is  necessary  on 
some  c  E  C!r-r . Hence,  P  is  necessary  on  dom(  P)  because  S  is  dichotomic.  Also  there 

are  transitions  CL_sBl, 

CAsbr 

in  S  for  some  C,  c  E  Cl-r. 

Let  us  say  that  a  transition  AP‘sB 

is  proper 

A’  C  VP.B  E  S,  and  improper  otherwise.  Note  that  in  a  dichotomic 

if  there  is  an  A’  with  A  5s  A’  and 
schema  S  we  have 

A  -&  dom(  P) 

if  A&sB 

is  proper  and  that  B  = cod(P) 

if  AP‘sB 

is  improper. 

254 

M.  Buchheit  et  al. /Artificial 

Intelligence  99  (1998)  209-260 

We  distinguish 

three  cases: 

the  two  transitions  CLsBl, 

(i) 
(ii)  one  transition 
(iii)  none  of  the  two  transitions 
In  case  (i),  we  define  f1-r 

is  proper  and  the  other  is  not; 

is  proper. 

C&se, 

are  both  proper; 

:=  {C,  c}.  The  properness  of  the  two  transitions 

implies 

that  there  is  a  P-edge 

in  Vs  from  c-1 

to  ($. 

In  case  (ii), 

since  CA_~BI 

is  proper,  C  3s  dom(  P),  and  fin  =  cod(P), 

because 

~?Asl?, 
an  edge  with  label  P  from  (?l_t  :=  {C}  to  cl. 

is  improper.  Hence,  S  contains  also  the  transition  CAss,. 

Thus, 

there  is 

In  case  (iii), 

the  fact 
that  P  is  necessary  on  c  E  Cr_t  it  follows,  because  of  the  dichotomy  of  S,  that  c  3s 

are  improper,  BI  =  b1  =  cod(P). 

since  both  transitions 

From 

dam(P).  Hence,  S  contains 
P-edge 

in  23s  from  c-t 

:=  {c} 

the  transitions 
to  el;. 

(?  ’ 

-sBl 

and  cAsj[, 

which  yields  a 

Summarizing,  we  have  shown  that  in  each  of  the  three  cases  there  is  a  nonempty 

set 

cl;_ r  c  Cj-  I  with  I&  1) <  2  from  which  there  is  an  edge  to  cl  in  Vs. 

“+” 

Suppose 

there  is  a  path 

{Bo,~o}%{Bd,}, 

. . . ,  {&-I,%,}%{Bdk} 

. . , A,,}  and  Cl  :=  range(Pl,Cl_t) 

to  some  conflict  node  (Bk,  Bk}.  We  inductively  define 
in  Ds  from  {Bo,  80)  =  {Ai,  Aj} 
{Bl,  fin}  C  Cl  for 
Co :=  {Al,. 
any  1 f  O..k.  Moreover,  since  each  PI  is  necessary  on  its  domain,  and  Bl,  &  3s  dom(  P), 
CI_~  and  Cl  are  linked 
in  GS  by  an  edge  with  label  Pl.  Since  Bk,  ijk  E  Ck,  we  have  that 
Ck is  a  conflict  node  in  Gs. 

for  1 E  l..k.  Obviously, 

Summarizing,  we  have  exhibited 

a  path 

in  G’s  that  connects 

{Al,. 

. . , Am} 

to  the 

conflict  node  Ck.  0 

Proof  of  Lemma  4.21.  “+” 
3  =  (Az,pg) 
and  At  = 0. 

then  by  Lemma  4.5  there  is  a  model 
of  SC  such  that  A$  #  0.  We  modify  3’  to  a  model  Z  of  Sc  with  AZ  f  0 

If  C  is  satisfiable, 

Let  Z  have 

the  same  domain  as  3.  We  define  AZ  :=  8  for  i  E  O..k.  On  the  other 

concept  and  role  names,  7  coincides  with 
Obviously,  Z  satisfies  every  axiom 

.9. 
in  Se 

in  Sc.  Also,  every  axiom 
A;  5  VP-’  *Ai_,  for  i  E  l..k 
the 
case  of  the  subconcept  D  = VQ.1. 
is  a  model  of  Sc,  no  element  of  As  has  a 
filler  for  any  role  P  E  PC.  This  shows  that  every  axiom  AD  C  vP.Ak  with  P  E  PC  is 
satisfied. 

is  satisfied  by  Z  because  AZ  = 8.  Finally,  we  consider 

that  occurs 

Since  J 

Summing  up,  we  have  shown 

that  there  is  a  model  Z  of  Sc  such  that  AZ  $  AC.  We 

conclude 
“e” 

that  Sc  #  AC  &  Ao. 
Suppose 

that  Sc  #  AC  L  Ao.  Then  there  is  a  model  J’  =  (A,  ..7)  of  Sc  and  an 
element  do  E  A  such  that  do  E  A,, 3  but  do  $  A$.  We  inductively  define  a  sequence  of 
interpretations  Xc, Zt , . . . ,I,,  on  the  same  domain  as  J  such  that  Z  :=  Z,  is  a  model  of 
SC.  The  construction 
is  such  that  for  each  concept  name  A  and  role  name  P  we  have 
AT-1  c  AZ,  c  A3  and  P’j-l  &  P*j  c  P3 

for  all  j  E  l..n. 

M.  Buchheit  et  al. /Artificial 

Intelligence  99  (1998)  209-260 

255 

Base  case:  We  define  10  by  A? 

:=  {do}  and  by  interpreting 

all  other  concept  and 

role  names  as  the  empty  set. 

Inductive  case:  Suppose  Zj-t  has  been  defined.  We  distinguish 

three  cases: 

(i)  Sc  contains  an  axiom  A  L  B  and  and  there  is  some  d  E  A?--’  \  B=J-‘.  If  this 
coincide  on  the 

:= Bq-l  U  {d}  and  let  .q  and  J-1 

condition  holds,  define  Bq 
other  names 

in  SC. 

(ii)  SC  contains  an  axiom  A  5  (2  1 P)  and  there  is  some  d  E  AT--l  such  that 
If  this  condition  holds,  since  Sc 
there  is  some 
.q-l 
and 

the  same  axiom,  3 
(d,  d’)  E  P3.  Define  P’J  :=  P’J-’  U  {(d,  d’)}  and  let  3 

there  does  not  exist  a  d’  with  (d,  d’)  E  Pq-I. 
contains 
d’  with 
coincide  on  the  other  names 

is  a  mode1  of  Sc,  and  AT-I  G  A3, 

in  Sc. 

(c,  c’)  E  P’j,  but  c’  $  Bq. 

that  c  E  Aq, 
:=  #-I 
Bq 

(iii)  Sc  contains  an  axiom  A  C  VP.B,  A+  Z  B  #  A-,  and  there  are  c,  c’  such 
holds,  define 
in  Sc. 
the  axioms 
in 
that  Bq  C  B3 
is  a  subset  of  the  interpretation 

in  the  cases  (i)  and  (iii)  Sc  contains 
is  a  model  of  SC,  we  conclude 

I+ {c’}  and  let  .rj  and  .r-- J  1 coincide  on  the  other  names 

too.  Thus,  from  the  fact  that  J 

of  a  symbol  under  Zj 

If  this  condition 

the  interpretation 

to  case  (ii), 

Note  that  similarly 
question, 
and  hence 
under  3. 

Since  Sc  does  not  contain  a  cycle,  the  construction 

process 

terminates  with  an  inter- 

pretation 

I,,.  Let  Z  :=  2,.  We  show  that  Z  is  a  mode1  of  Sc. 

By  construction, 

Z  satisfies  all  axioms  of  the  form  A  _C B,  A  C  (2  1 P),  and 
= 0. 

A  C  VP.B  where  A+  #  B  #  A-.  Also  by  construction,  we  have  (A+)’  =  (A-)’ 
Hence,  Z  satisfies  A+  L  A-. 
Z  satisfies 
(A-)’ 

the  axioms  AD  C  VP.A+,  AD  5  VP.A-,  where  D  = VQ.1.  Since 
=  0:  we  have  to  show  that  no  element  of  A;  has  a  filler  for  any  P  E  PC. 

to  show  that  for  all  P  E  PC,  the  interpretation 

It  remains 

(A+)’  = 

that 

Assume, 

on  the  contrary, 

there 
(d,  d’)  E  PT.  Since  A$  C  Ag,  we  have  d  E  As.  The  schema  SC  contains 
A.  C  VP.&.  Hence,  d’  E  Ak3. 
it  can  be  shown 

is  a  d  E  A;  and  a  role  P  E  Pc 

By  induction, 

in  Z  from  do  by  a  chain  of  length  A(E).  Thus,  d  is  reachable 

that  for  each  subconcept  E  of  C,  if  c  E  ET,  then  c  is 
in  Z  from  do 

such 

that 
the  axioms 

reachable 
by  a  chain  Iof length  A(D). 

We  have  A(I)  =  k,  which 

imples  A(D)  =  k  -  1.  Thus, 

there  is  a  chain  do,  dl,. 

. . , 

dk-2,  d.  This  chain  can  be  extended 
for  all  P  E  PC,  so  that  do,  dl,  .  . . , d,  d’  is  a  chain  of  length  k  in  J, 
J’  satisfies 
contradicts 
any  P  E  Pc,  which  completes  our  proof  that  Z  is  a  mode1  of  SC. 

to  a  chain  of  length  k  from  do  to  d’.  Also,  Pz  2  P” 
too.  Now,  since 
that  do  E  A{,  which 
about  do.  Therefore,  no  element  A;  has  a  filler  for 

the  axioms  A;  C  VP-‘*Ai_1 
our  initial  assumption 

for  i  E  l..k, 

it  follows 

0 

Proof  of  Pmposition  5.4.  Call  _?Z =  (S,  W)  the  complete  clash-free  dLC%‘?-knowledge 
base.  We  show  that  the  canonical 
the  form  sPt,  and  s  #t 
form  s:  C  can  be  proved 
system 
straint 
We  treat  only 
We  have 

2-r  is  a  mode1  of  2.  The  assertions  of 
satisfied  by  12.  The  assertions  of  the 
con- 
the  structure  of  C. 
of  rule  S2. 
First  we 

interpretation 
in  W  are  obviously 
to  be  satisfied  based  on  known 

s  (see  e.g., 
the  case  s:VP.D 

that  for  all  d  with 

for  (analogous) 

on  applicability 

the  restrictions 

that  d  E  04. 

(s,  d)  E  Pzz 

the  proof 

to  clarify 

induction 

to  show 

it  holds 

results 

is  by 

[6]); 

on 

256 

M.  Buchheit  et  al. /Artificial 

Intelligence  99  (1998)  209-260 

that  it  cannot  be  d  =  u.  In  fact,  the  pair  (s,u) 

is  added 

in  W,  but  for  some  A,  s: A  is  in  W  and  A  5 

is  in  W,  rule  S2  would  be  applicable, 

is  complete.  Therefore,  d  #  CL Hence 

from 

the  definition 

prove 
is  no  spt 
since  also  s:VP.D 
sis  that  2 
canonical 
must  be  in  S  (application 
DlS. 

interpretation 

the  assertion  sPd  is  in  W,  and  since  S  is  complete, 

of  rule  V3).  Then  by  induction 

to  P’-’  only 

(2  1 P) 
contradicting 

if  there 
is  in  S.  Now 
the  hypothe- 
of  PI-’  in  the 
also  d:  D 
hypothesis  we  have  d  E 

For  axioms  of  the  form  A  C  C,  we  have  to  prove  that  for  every  d  E  A”, 

if  d  is  in 
AZ’  then  d  is  in  Czz.  Based  on  the  definition  of  22,  the  domain  element  d  can  be  in 
AZx in  two  cases:  either  d  =  u  or  d  =  s  and  s:  A  is  in  W. 

In  the  first  case,  from  the  definition  of  12,  one  can  verify 

that  u  is  in  the  extension 

of  every  SC-concept, 

thus  u  is  in  CT-‘,  too. 

In  the  second  case,  if  C  is  either  of  the  form  B  or  (<  1 P)  then  the  axiom  is  satisfied 
line  of  reasoning:  Since  s:  A  is  in  W  and  2  is  complete,  based 

based  on  the  following 
on  the  schema  rules  S4  and  S5,  s:  C  is  in  W  too,  and  therefore  s  E  Czz. 

Suppose  now  that  A  5  VP.B 

is  in  S  and  s:  A  is  in  W.  We  have  to  show  that  for  all 
the  definition  of  12,  for  any 
d  such  that  (s,  d)  E  Pzz,  we  have  that  d  E  BZZ. From 
such  d  either  d  =  u  or  there  exists  t  such  that  d  =  t  and  SPZ is  in  W.  In  the  first  case,  u 
is  in  B’z  because  of  the  definition  of  2,. 
for 
the  rule  S3,  t: B  is  in  W  and  thus  t  E BZx  by  definition  of  Zz. 

In  the  second  case,  since  2  is  complete, 

Consider  now  the  case  that  A  C  (2  1 P)  is  in  S  and  s:  A  is  in  W.  If  there  exists  an 
t  such  that  sPt  is  in  W,  then  (s,  t)  is  in  PI-‘,  and  therefore  s  is  in  (2  1 P)‘“. 
(s,  u)  is 

individual 
In  case  there  is  no  t  such  that  sPt  is  in  W,  then  based  on  the  definition  of  Zr, 
in  P’-‘,  and  thus  s  E  (3  1 P)zx  again. 

One  can  prove  that  the  axioms  of  the  form  P  C  Al  x  AZ are  satisfied  by  12,  using 

similar  arguments.  q 

Proof  of  Proposition  5.6. 

(i)  By  induction 

on  the  application 

of  rules.  By  hypothesis, 

therefore  we  do  not  consider 

rule, 

been  added  by  a  view 
rules, 
the  induction 
in  W  (condition 
depth(  3R.D)  <  depth(C)  -  i.  For  the  new  assertion, 
depth(3R.D) 

-  1  <  depth(C)  -  (i+  1). 

is  straightforward, 

1 ),  it  adds 

e.g.,  if  rule  V4’  is  applied  because  y;:  3R.D 

the  new  assertion  y;+r : D.  By  the  induction 

hypothesis, 

the  claim  holds  since  depth(D)  = 

schema 

the  assertion  y;:  D  has 
rules.  For  view 
is 

(ii)  Suppose  no:  Then, 

introduced  by  the  application  of  a  generating 

in  W  of  an  assertion  of  the  form  yk: D,  where  either  D  =  VP.E 

a  successor  has  been 
presence 
or  D  =  3R.E 
involved  are  subconcepts 
depth(C)  -k  =  depth(C)  -  ICI. H owever,  depth(C) 
and  therefore  depth(D)  <  0.  Since  depth(D) 

there  is  a  direct  successor  yk+i  of  yk,  with  k =  ICI.  But  such 
the 
(rule  S2’), 
that  all  the  concepts 
above  applies:  depth(D)  < 
less  or  equal  than  ICI 

is  obviously 
is  at  least  1,  a  contradiction 

(rule  V4’),  or  D  =  (2  rz R)  (rule  VS).  Observe 

of  C,  hence  Proposition 

rule,  requiring 

follows. 

5.6(i) 

(iii)  The  number  N  is  bounded  by  the  sum  of  all  numbers  n  in  concepts  of  the  form 
in  C,  plus  all  concepts  of 
rule  S2).  Hence,  N  <  ICI, 

(2  n  R),  plus  all  concepts  of  the  form  3R.D,  both  appearing 
the  form  VP.D  appearing 
1 of  the  generating 
if  numbers  are  coded  in  unary  notation. 

in  C  (condition 

M.  Buchheit  et  al./Artijicial 

Intelligence  99  (1998)  209-260 

257 

in  a  trace  are  a  chain  X, yi  ,  . . . , yiz plus  all  their  direct  successors. 
in  a  trace  is  bounded  by  (h  +  1)  . (N  +  1)  < 
is  in  0(  ]C 1’).  The  number  of  assertions  of  the  form  s:  D  is  then 
(each  subconcept  of  either  C  or  S,  times  the  number  of  individuals). 

(iv)  The  individuals 

the  total  number  of  individuals 

that  in  assertions 
individual, 

Therefore 
( IC 1 +  1)2  which 
0(  ]C12.( ]C’l+lSl)) 
Given 
same 
s  #  t  is  0(  N2  .  ICI)  =  0(  ]C13).  Finally, 
t  must  be  a  direct  successor  of  s,  hence  their  total  number 
in  a  trace  (hence 
conclude 
and  linear 

that  the  number  of  assertions 

generated  by  the  application 

s  #  t  the  individuals 

in  ISI. 

s,  t  must  be  both  direct  successors  of  the 
of  a  rule  VS,  the  number  of  assertions 
in  the  assertions  of  the  form  spt  the  individual 

is  0(  ICI  . N)  = 0(  lC12). We 
in  ICI 
is  polynomial 
its  size) 

(v)  A  proof 

for  a  similar  problem 

,Z  can  be  transformed 
5.5  the  “successor” 

in 

is  given 

[ 191  by  showing 

into  a  trace  rule  application 

that  each  rule 
in  a  set  of  traces. 
forms  a  tree. 
in 
is  lost,  since  the  conditions  of  application  of  each  rule 

restricted 
into  as  many  parts  as  there  are  branches 

to  new  individuals 

relation 
can  be  decomposed 

tree.  No  assertion 

application 
in 
By  Proposition 
Hence,  every  completion 
the  successor 
are  local, 

i.e.,  they  depend  only  on  an  individual 

and  (possibly) 

its  direct  successors. 

s,  and  on  assertions 

(vi)  The:  claim  follows  from  the  locality  of  clashes:  All  two  types  of  clash  depend  on 
(first  type  of  clash)  or  both 
an  individual 
the 
s  and  direct  successors  of  s  (second 
trace  in  which  the  successors  of  s-if 
(there  always  must  be  such  a 
trace,  from  the  previous  point  and  from  the  strategy  of  application  of  trace  rules).  That 
trace  contains 

If  2’  contains  a  clash,  consider 

the  same  clash  as  2’. 

type  of  clash). 

either  s  alone 

generated 

involving 

any-are 

0 

then  a  rule  is  applicable 

is  derived  from  2  using  completion 

Proof  of  Proposition  5.8.  “*”  Each  precompletion 
rules.  If  _Z i.tself  is  not  a  precompletion, 
is  satisfiable,  Theorem  5.2(  ii)  says  that  there  exists  a  satisfiable  knowledge  base  directly 
derived  from  2  by  applying 
that  rule.  If  the  new  knowledge  base  is  not  a  precompletion, 
one  can  repeat  the  same  argument,  and  so  on  until  a  satisfiable  precompletion 
This  calculus 
a  satisfiable  precompletion 
is  just  a  restricted  version  of  the  general  calculus-i.e., 
the  rules  are  more  restrictive. 

is  reached. 
it 
the  condition  of  application  of 

terminates,  because 

to  an  old  individual. 

for  obtaining 

eventually 

If  .Z 

“+” 

B:y  induction  on  the  number  of  rule  applications 

needed 

The  base  case  is  trivial,  while  in  the  inductive  case  Theorem  5.2(i)  proves  the  claim. 

to  obtain  2’  from  2. 
0 

a  precompletion  must  be  clash-free 

Proof  of  Proposition  5.9.  “=x”  Obviously, 
satisfiable.  For  each  new  individual  n,  let  C,  be  the  conjunction 
that  X: D  is  in  W,.  Obviously, 
if  (S,  WL)  is  satisfiable 
again  C,).  Combining  Propositions  5.6  and  5.4,  we  know  that  (S,  X: CX) is  satisfiable 
and  only  if  there  exists  a  finite,  clash-free  completion  of  it.  Such  a  clash-free  completion 
contains  a  ‘clash-free  completion 

to  be 
of  the  concepts  D  such 
if  and  only 
times  to  decompose 

the  knowledge  base  (S,  X: CX)  is  satisfiable 
to  apply  rule  Vl  as  many 

(it  is  sufficient 

if 

of  (S,  W:). 
there  exists  a  clash-free  precompletion 

2’  =  (S,  W’)  such  that  for 

‘<*=,’  Suppose 
each  new  individual 
then  one  can  compute  a  clash-free 
X,  the  clash-free 

completion 

x  in  W’,  the  knowledge  base  (S,  W:)  has  a  clash-free  completion; 

completion 

of  2’  as  the  union  of  2’  and,  for  each 
Recall 

(up  to  renaming  of  new  individuals). 

of  (S,  W:) 

258 

M.  Buchheit  et  al. /Artificial 

Intelligence  99  (1998)  209-260 

conditions 

that  all  application 
a  rule  is  applied  depends  on  assertions 
successors.  Hence,  a  completion 
separate  completions 
not  need  to  check  for  assertions 
local,  such  a  completion 

is  clash-free, 

of  each  completion 

rule  are  local, 

about  one  individual 
of  2  can  actually  be  constructed 

s,  and  possibly 

i.e.,  whether  or  not 
its  direct 
from  2’  and  from 
does 
are 

of  (S,  IV:),  since  each  rule  application 

in  one  completion 

from  other  completions.  Since  also  clash  conditions 
0 

and  by  Proposition  5.4,  2 

is  satisfiable. 

similarly 

in  a  precompletion: 

Proof  of  Proposition  5.10.  Let  N  be  the  maximal  number  of  direct  successors  of  an 
to  Proposition  5.6(  iii),  N  is  bounded  by  the 
old  individual 
sum  of  all  numbers  n  in  concepts  of  the  form  (2  n  I?),  plus  all  concepts  of  the  form 
3R.C,  plus  all  concepts  of  the  form  VP.C, 
if 
in  unary  notation.  Call  o  the  number  of  old  individuals.  The  total 
numbers 
is  then  w  old  individuals,  plus  at  most  N.  w 
number  of  individuals 
new  individuals; 
that  the 
number  of  individuals 

is  in  0(  lW1’).  This  proves 

in  W.  Hence,  N  <  /WI, 

does  not  depend  on  IS/. 

in  the  precompletion 

.  (N  +  1))  which 

in  total  O(w 

all  appearing 

are  coded 

The  number  of  possible 

(sub)concepts 

that  is  0(  IW12. (ISI  +  /W[)  ).  Similarly, 

is  0(  ISI  +  IWl);  hence  the  number  of  asser- 
the  number  of 
the  number  of  assertions  s  +  t 

tions  of  the  form  s:  C  is  bounded  by  the  number  of  individuals 
possible  concepts, 
is  bounded  by  6.1~ (UNA  on  old  individuals) 
plus  w.  N2,  that  is  0(  lW13).  The  number 
of  assertions  of  the  form  sPt  is  bounded  by  o2  . IWI  relations  between  old  individuals 
plus  w  . N,  that  is,  0(  lW13).  S umming  up  all  assertions, 
ww2~  w  + IW>>.  0 

the  size  of  a  precompletion 

times 

is 

References 

] I]  F.  Baader,  Terminological 

cycles  in  KL-ONE-based 

knowledge 

representation 

languages, 

in:  Proceedings 

AAAI-90,  Boston,  MA,  1990,  pp.  621-626. 

[2]  F.  Baader,  H.-J.  Bilrckert,  B.  Hollunder,  W.  Nutt,  J.H.  Siekmann,  Concept 

logics 

in:  J.W.  Lloyd 

(Ed.), 

Computational 

[ 31  F.  Baader,  B.  Holhmder,  A  terminological 

Logics,  Symposium  Proceedings,  Springer,  Berlin,  1990,  pp.  177-201. 
knowledge 

representation 

algorithm, 
In  Artificial 

in:  Proceedings  Workshop  on  Processing  Declarative  Knowledge 

Intelligence,  Vol.  567,  Springer,  Berlin,  1991,  pp.  67-86. 

system  with  complete 

inference 
(PDK-91),  Lecture  Notes 

14 ) F.  Baader,  W.  Nutt,  Are  complete  and  expressive 

in: 
Working  Notes  AAAI  Fall  Symposium  on  Issues  on  Description  Logics:  Users  Meet  Developers,  1992, 
pp. l-5. 

feasible?  Position  paper, 

terrninological 

systems 

[5]  A.  Borgida,  R.J.  Brachman,  D.L.  McCuinness,  L.  Alperin  Resnick,  CLASSIC:  a  structural  data  model 
of  Data,  1989, 

International  Conference  on  Management 

in:  Proceedings  ACM  SIGMOD 

for  objects, 
pp.  59-67. 

]6]  M.  Buchheit,  EM.  Donini,  A.  Schaerf,  Decidable 
systems,  J.  Artif.  Intell.  Res.  1  (1993)  109-138. 

reasoning 

in  terminological 

knowledge 

representation 

]7]  M.  Buchheit,  A.M.  Jeusfeld,  W.  Nutt,  M.  Staudt,  Subsumption 
(Special 

in:  Extending  Database  Technology,  EDBT’94 

databases, 
1994)  33-54 

between  queries 
Issue), 

Information  Systems  19  ( 1) 

to  object-oriented 

[ 81  D.  Calvanese,  Reasoning  with  inclusion  axioms 

in  description 

Wahlster 
Hungary, 

(Ed.),  Proceedings 
John  Wiley  and  Sons,  1996,  pp.  303-307. 

12th  European  Conference  on  Artificial 

logics:  algorithms 
Intelligence 

and  complexity, 
(ECAI-96).  Budapest, 

in:  W. 

[9  I  D.  Calvanese,  M.  Lenzerini,  On  the  interaction  between 

10th  IEEE  International  Conference 
Society  Press,  1994,  pp.  204-213. 

on  Data  Engineering 

ISA  and  cardinality  constraints, 

in:  Proceedings 
(ICDE-94).  Houston,  TX,  IEEE  Computer 

M.  Buchheit  et  al. /Art$cial 

Intelligence  99  (1998)  209-260 

259 

[ 101 D.  Calvanese,  M.  Lenzerini,  D.  Nardi,  A  unified  framework  for  class  based  representation  formalisms, 
in: J. Doyle,  E.  Sandewall,  P  Torasso  (Eds.),  Proceedings  4th  International  Conference  on the  Principles 
of  Knowledge  Representation  and  Reasoning  (KR-94),  Bonn,  Germany,  Morgan  Kaufmann,  Los  Altos, 
CA,  1994, pp.  109-120. 

[ 111 G.  De  Giacomo,  M.  Lenzerini,  A  uniform  framework  for  concept  definitions  in  description  logics,  J. 

Artif.  Itnell.  Res.  6  (1997)  87-l  10. 

[ 121 R.  Dionne,  E.  Mays,  F.J.  Oles,  A  non-well-founded  approach  to  terminological  cycles,  in:  Proceedings 

AAAI-92,  San Jose,  CA,  AAAI  Press/MIT  Press,  1992, pp.  761-766. 

[ 131 R.  Dionne,  E.  Mays,  F.J.  Oles,  The  equivalence  of  model  theoretic  and  structural  subsumption  in 
description  logics,  in:  Proceedings  IJCAI-93,  Chambery,  France,  Morgan  Kaufmann,  Los  Altos,  CA, 
1993, pp.  710-716. 

[ 141 EM.  Donini,  B.  Hollunder,  M. Lenzerini,  A.  Marchetti,  D. Nardi, W. Nutt, The complexity  of existential 

quantific,ltion  in  concept  languages,  Artificial  Intelligence  53  ( 1992)  309-327. 

[ 151 EM.  Donini,  M.  Lenzerini,  D.  Nardi,  W.  Nutt,  The  complexity  of  concept  languages,  Inform.  and 

Comput.  134 (1997)  l-58. 

[ 161 EM.  Donini,  M.  Lenzerini,  D.  Nardi,  W.  Nutt,  A.  Schaerf,  Adding  epistemic  operators  to  concept 
languages,  in:  Proceedings  3rd  International  Conference  on  the  Principles  of  Knowledge  Representation 
and  Reasoning  (KR_92),Cambridge,  MA,  Morgan  Kaufmann,  Los  Altos,  1992, pp.  342-353. 

[ 171 EM.  Donini,  M. Lenzerini,  D. Nardi,  A.  Schaerf,  Deduction  in concept  languages:  from  subsumption  to 

instance  checking,  J.  Logic  and  Computation  4  (4)  ( 1994) 423452. 

[ 181 B. Hollunder, Algorithmic  foundations  of terminological  knowledge representation  systems,  Ph.D. Thesis, 

University  of  Saarbriicken,  1994. 

[ 191 B.  Hollunder,  W.  Nutt,  Subsumption  algorithms  for  concept  languages,  Technical  Report  RR-90-04, 
Deutsches  Forschungszentrum  filr  Ktlnstliche  Intelligenz  (DFKI),  Kaiserslautem,  Germany,  1990. 
[20]  B.  Hollunder,  W. Nutt,  M.  Schmidt-SchauB,  Subsumption  algorithms  for  concept  description  languages, 
in:  Proceedings  9th  European  Conference  on  Artificial  Intelligence  (ECAI-90).  Stockholm,  Sweden, 
Pitman,  London,  1990, pp.  348-353. 

[ 211 J.E. Hopcroft,  J.D. Ullman, Formal Languages  and their Relation to Automata, Addison-Wesley,  Reading, 

MA,  1969. 

[22]  M. Jarke,  R. Gallersdiirfer,  M. Jeusfeld,  M.  Staudt, S. Eherer,  Conceptbase-a  deductive  object  manager 

for  meta  databases,  J.  Intelligent  Information  Systems  4  (2)  (1995). 

[23]  D.S.  Johnson,  A  catalog  of  complexity  classes,  in:  J.  van  Leeuwen  (Ed.),  Handbook  of  Theoretical 

Computer  Science,  Vol. A,  Elsevier,  Amsterdam,  1990, Chapter  2. 

[24]  M.  Lenu:rini,  A.  Schaerf,  Concept  languages  as  query  languages,  in:  Proceedings  AAAI-91,  Anaheim, 

CA,  1991, pp.  471-476. 

[25]  J.W. Lloyd.  Foundations  of  Logic  Programming,  2nd ext.  ed.,  Springer,  Berlin,  1987. 
[26]  R.  MacGregor,  Inside  the  LOOM  description  classifier,  SIGART Bull. 2  (3)  (1991)  88-92. 
[27]  R. MacGregor,  What’s  needed  to  make a description  Iogic a good  KR citizen,  in:  Working Notes  AAAl 

Fall  Symposium  on  Issues  on  Description  Logics:  Users  Meet  Developers,  1992, pp.  53-55. 

[28]  B.  Nebel,  Reasoning  and  Revision  in  Hybrid  Representation  Systems,  Lecture  Notes  in  Artificial 

Intelligence,  Springer,  Berlin,  1990. 

[29]  B.  Nebel,  Terminological  reasoning  is  inherently  intractable,  Artificial  Intelligence  43  ( 1990)  235-249. 
1301 B. Nebel,  Terminological  cycles:  semantics  and computational  properties,  in: J.F. Sowa  (Ed.),  Principles 

of  Semantic  Networks,  Morgan  Kaufmann,  Los  Altos,  1991, pp.  331-361. 

1311 C.  Peltason,  The  BACK  system-an  overview,  SIGART Bull. 2  (3)  (1991)  114-119. 
[32]  A.  Schaerf,  On  the  complexity  of  the  instance  checking  problem  in  concept  languages  with  existential 

quantification,  J.  Intelligent  Information  Systems  2  (1993)  265-278. 

[33]  A.  Schaerf,  Reasoning  with  individuals  in  concept  languages,  Data and  Knowledge  Engineering  13 (2) 

(1994)  141-176. 

[34]  K.  Schild,  Personal  communication,  1994. 
[ 35 J K. Schild,  Terminological  cycles  and  the  propositional  ~-calculus,  in: J. Doyle,  B. Sandewall,  P. Torasso 
and 

on  the  Principles  of  Knowledge  Representation 

4th  International  Conference 

(KR-94),  Bonn,  Germany,  Morgan  Kaufmann,  Los  Altos,  1994,  pp.  509-520. 

(Eds.),  Proceedings 
Reasoning 

260 

M.  Buchheit  et  al. /Artijicial 

Intelligence  99  (1998)  209-260 

1361  M.  Schmidt-SchauB, 

G.  Smolka,  Attributive 

concept 

descriptions 

with 

complements, 

Artificial 

Intelligence  48  ( 1)  ( 199 1)  1-26. 

[ 371  M.  Vardi,  The  complexity  of  relational  query  languages, 

in:  Proceedings 

14th  ACM  SIGACT  Sympsium 

on  Theory  of  Computing 

(STOC-82), 
[ 381  W.  Wahlster,  E.  Andre,  W.  Finkier,  H.-J.  Profitlich,  T.  Rist,  Plan-based 

1982,  pp.  137-146. 

and  graphics  generation,  Artificial 

Intelligence  63  (1993)  387-428. 

integration  of  natural 

language 

