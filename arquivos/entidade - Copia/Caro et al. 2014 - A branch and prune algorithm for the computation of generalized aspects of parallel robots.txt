Artiﬁcial Intelligence 211 (2014) 34–50

Contents lists available at ScienceDirect

Artiﬁcial Intelligence

www.elsevier.com/locate/artint

A branch and prune algorithm for the computation of
generalized aspects of parallel robots ✩
S. Caro a, D. Chablat a, A. Goldsztejn b,∗

, D. Ishii c, C. Jermann d

a CNRS, IRCCyN, Nantes, France
b CNRS, LINA (UMR-6241), Nantes, France
c Tokyo Institute of Technology, Tokyo, Japan
d Université de Nantes, LINA (UMR-6241), Nantes, France

a r t i c l e

i n f o

a b s t r a c t

Article history:
Received 18 April 2013
Received in revised form 6 February 2014
Accepted 8 February 2014
Available online 18 February 2014

Keywords:
Numerical constraints
Parallel robots
Singularities
Generalized aspects

Parallel robots enjoy enhanced mechanical characteristics that have to be contrasted with
a more complicated design. In particular, they often have parallel singularities at some
poses, and the robots may become uncontrollable, and could even be damaged, in such
conﬁgurations. The computation of the connected components in the set of nonsingular
reachable conﬁgurations, called generalized aspects, is therefore a key issue in their design.
This paper introduces a new method, based on numerical constraint programming, to
compute a certiﬁed enclosure of the generalized aspects. Though this method does
not allow counting their number rigorously, it constructs inner approximations of the
nonsingular workspace that allow commanding parallel robots safely. It also provides a
lower-bound on the exact number of generalized aspects. It is moreover the ﬁrst general
method able to handle any parallel robot in theory, though its computational complexity
currently restricts its usage to robots with three degrees of freedom. Finally, the constraint
programming paradigm it relies on makes it possible to consider various additional
constraints (e.g., collision avoidance), making it suitable for practical considerations.

© 2014 Elsevier B.V. All rights reserved.

1. Introduction

Mechanical manipulators, commonly called robots, are widely used in the industry to automatize various tasks. They
are mechanical assemblies of rigid links connected by mobile joints. Some joints are actuated and they allow commanding
the robot operating link, called its end-effector (or platform). One key characteristic of a robot is its reachable workspace,
informally deﬁned as the set of poses its end-effector can reach. Indeed, its size deﬁnes the scope of operational trajectories
the robot can perform. The workspace can be computed from the set of possible command inputs using the kinematic
model of the robot, a system of equations relating the commands and the pose coordinates. The size of this system is often
referred to as the degrees of freedom (DOF) of the robot.

Robots comply with either a serial or a parallel (or possibly a hybrid) assembly, whether its links are connected in
series or in parallel. Parallel robots [1,2] present several advantages with respect to serial ones: They are naturally stiffer,
leading to better accuracy with larger loads, and allow high speed motions. These advantages are contrasted by a more

✩

This paper is an invited revision of a paper ﬁrst published at the 18th International Conference on Principles and Practice of Constraint Programming

(CP 2012).
* Corresponding author.

http://dx.doi.org/10.1016/j.artint.2014.02.001
0004-3702/© 2014 Elsevier B.V. All rights reserved.

S. Caro et al. / Artiﬁcial Intelligence 211 (2014) 34–50

35

complicated design that yields diﬃculties for the computation and the analysis of their workspace. First, one pose of the
robot’s end-effector may be reached by several actuated joint commands (which correspond to different working modes), and
conversely one input command may lead to several poses of its end-effector (which correspond to different assembly modes).
Second, parallel robots generally have parallel singularities [3], i.e., speciﬁc conﬁgurations where they become uncontrollable
and can even be damaged.

One central issue in designing parallel robots is to compute its nonsingular workspace, together with the corresponding
commands, so that the robot can be safely operated. This amounts to computing the connected components of the set of
nonsingular conﬁgurations, called generalized aspect in [4]. This computation must be certiﬁed in terms of non-singularity
and connectivity in order to guarantee safe operations. Few frameworks provide such certiﬁcations, among which algebraic
computations and interval analysis. Algebraic methods are in general too expensive and apply only for polynomial systems.
Still, the cylindrical algebraic decomposition was used in [5] with a connectivity analysis limited to robots with 2 DOFs.
Though generalized aspects are mathematical objects that cannot, in general, be computed exactly using numerical meth-
ods, interval analysis allows the rigorous computation of some approximation. It was used in [6] for robots having a single
solution to their inverse kinematic problem; Though limited, this method can still tackle important classes of robots like
the Stewart platform. A quad-tree with certiﬁcation of nonsingularity was built in [7] for some planar robots with 2 DOFs;
This method can be extended to higher dimensional robots, but it requires the a priori separation of working modes by ad
hoc inequalities, and is not certiﬁed with respect to connectivity. Finally, the two works [8,9] propose algorithms based on
interval analysis to analyze the connectivity of set deﬁned by inequalities constraints, but cannot be extended to equality
constraints. In particular, the developments presented in the present paper somehow extend the interval-based path plan-
ning method proposed in [8] for sets deﬁned by inequality constraints only, to manifolds deﬁned by equality, disequality
and inequality constraints.

In this paper we propose a branch and prune algorithm incorporating the certiﬁcation of the solutions and of their con-
nectivity. This allows a fully automated and certiﬁed computation of what we call connected sets of nonsingular conﬁgurations
(CSNCs), i.e., certiﬁed approximations of generalized aspects, from the model of arbitrary parallel robots, including robots
with multiple solutions to their direct and inverse kinematic problems, without requiring any a priori study to separate their
working modes. Though the proposed method does not allow counting the number of CSNCs rigorously, it constructs in-
ner approximations of the nonsingular workspace that allow commanding parallel robots safely. Although less important in
practice, a more accurate and costly connectivity analysis is also proposed, which enables separating non-connected CSNCs,
hence providing a lower-bound on the exact number of generalized aspects. The algorithm is applicable to robots with an
arbitrary number of DOF, although the complexity of the computations currently restricts its application to robots with
three DOFs. It is also very ﬂexible as it can naturally take into account additional constraints such as, e.g., arm collisions,
obstacle avoidance or joint limits. It is thus the ﬁrst method able to handle such a large class of robots for the problem of
computing connected sets of nonsingular conﬁgurations. Its main limitation is its performances, due to the combinatorial
explosion of the number of computed boxes with the dimension of the problem and the prescribed computational precision.
As a consequence, we have applied it to planar robots only at the moment.

A motivating example is presented in Section 2 followed by some preliminaries about numerical constraint program-
ming and robotics in Section 3. The proposed algorithm for certiﬁed singularity free connected components computation is
presented in Section 4. Finally, experiments on planar robots with 2 and 3 degrees of freedom are presented in Section 5.

Notations. Boldface letters denote vectors. Thus f(x) = 0 denotes a system of equations f on a vector of variables x:
f 1(x1, . . . , xn) = 0, . . . , fk(x1, . . . , xn) = 0. The Jacobian matrix of f(x) with respect to the subset x
of the variables x is de-
noted Fx(cid:3) (x). Interval variables are denoted using bracketed symbols, e.g., [x] = [x, x] := {x ∈ R | x (cid:2) x (cid:2) x}. Hence, [x] is an
interval vector (box) and [ A] = ([ai j]) is an interval matrix. IR denotes the set of intervals and IRn the set of n-dimensional
boxes. For an interval [x], we denote wid[x] := x − x its width, int[x] := {x ∈ R | x < x < x} its interior, and mid[x] := (x + x)/2
its midpoint. These notations are extended to interval vectors.

(cid:3)

2. Motivating example

Description. Consider the simple PRRP1 planar robot depicted in Fig. 1 (left), which involves two prismatic joints (gray
rectangles) sliding along two perpendicular directions. These prismatic joints are connected through three rigid bars (black
lines) linked by two revolute joints (circles) that allow free rotations between the rigid bars. The lengths of the prismatic
joints are respectively denoted by x and q, the end-effector pose x being along the horizontal direction and the command
q corresponding to the height along the vertical direction. Fig. 1 (left) shows one generic conﬁguration of the robot. Note
that there is another symmetric (negative) pose x associated to the same command q, which is typical of parallel robots.
From this conﬁguration, every (vertical) change in q induces a unique corresponding (horizontal) change in x, hence this
conﬁguration is nonsingular. Fig. 1 (right) shows two singular conﬁgurations. In the plain green pose (where the robot’s main
rigid bar is horizontal), increasing or decreasing the command q both entails a decrease of x. In the dashed red pose (where

1 In robotics, manipulators are typically named according to the sequence of joints they are made of, e.g., P stands for prismatic joint and R stands for

revolute joint, actuated joints being underlined.

36

S. Caro et al. / Artiﬁcial Intelligence 211 (2014) 34–50

Fig. 1. The PRRP in a generic pose (left) and in singular poses (right). (For interpretation of the references to color in this ﬁgure, the reader is referred to
the web version of this article.)

Fig. 2. The PRRP kinematic model solutions set (left) and the computed paving (right). (For interpretation of the references to color in this ﬁgure, the reader
is referred to the web version of this article.)

the robot’s main rigid bar is vertical), increasing or decreasing the command q entails a vertical motion of the end-effector
which is impossible due to the robot architecture, hence a potential damage to the robot. The green conﬁguration amounts
to a serial singularity, which restricts the robot mobility without damaging it; the red conﬁguration is a parallel singularity,
which may damage the robot.

Kinematic model. The coordinates of the revolute joints are respectively (a, q) and (x, b), where a and b are architecture
parameters corresponding to the lengths of the two horizontal and vertical small rigid bars. Then the main oblique rigid
bar enforces the distance between these two points to be equal to its length l, a third architecture parameter. Hence, the
kinematic model of this robot is deﬁned as follows:

(x − a)2 + (q − b)2 = l2.

(1)

(cid:2)

The solution set of this model, the circle of center (a, b) and radius l, is depicted in Fig. 2 (left). The direct kinematic problem
l2 − (q − b)2 if q ∈ [b − l, b + l], no solution otherwise.
consists in computing x knowing q, leading to two solutions a ±
Similarly, the inverse kinematic problem consists in computing q knowing x, leading to two solutions b ±
l2 − (x − a)2
provided that x ∈ [a − l, a + l], no solution otherwise. It is noteworthy that this simple robot is representative of the general
case since parallel robots can have several solutions to both their direct and inverse kinematic problems. It is also typical
regarding its singularities: It has two serial singularities where the solution set has a vertical tangent (leftmost and rightmost
green points in left hand side graphic of Fig. 2), and two parallel singularities where the solution set has a horizontal tangent
(topmost and bottommost red points in the left hand side graphic of Fig. 2). These four singularities split the solution set
into four singularity free connected components (quarters of circle), i.e., this robot has four generalized aspects. We can
determine the nonsingular workspace of the robot by projecting each aspect onto the x component (the thick lines above
and under the paving in Fig. 2 (right)).

(cid:2)

Certiﬁed approximation of generalized aspects. This paper uses numerical constraint programming in order to compute,
with full certiﬁcation, subsets of the different aspects, called connected sets of nonsingular conﬁgurations (CSNC) in the follow-
ing. The standard branch and prune algorithm is adapted in such a way that solving the robot kinematic model together
with non-singularity constraints leads to the enclosure depicted in the right hand side graphic of Fig. 2. Each solution box
is certiﬁably crossed by a single aspect which covers the whole box projection on the x subspace, and each pair of neighbor
solution boxes are certiﬁed to share a common solution. Therefore, the connected components A1, A2, A3, A4 of the com-
puted boxes shown in the right hand side graphic of Fig. 2 allow separating the four aspects, and provide, by projection,
inner approximations of the nonsingular workspace of this robot.

S. Caro et al. / Artiﬁcial Intelligence 211 (2014) 34–50

37

Algorithm 1 Branch and prune.
Input: NCSP (cid:5)v, [v], c(cid:6), precision (cid:2) > 0
Output: pair of sets of boxes (U , S)
1: L ← {[v]}, S ← ∅ and U ← ∅
2: while L (cid:9)= ∅ do
3:

[v] ← Extract(L)
[v] ← Prunec([v])
if [v] (cid:9)= ∅ then

4:

5:

6:

7:

8:

9:

10:

11:

12:

if Provec([v]) then
S ← S ∪ {[v]}

else if wid[v] > (cid:2) then
L ← L ∪ Branch([v])

else

U ← U ∪ {[v]}

end if

end if

13:
14: end while
15: return (U , S)

3. Preliminaries

3.1. Numerical constraint programming

Numerical constraint solving inherits principles and methods from discrete constraint solving [10] and interval anal-
ysis [11]. Indeed, as their variable domains are continuous subsets of R,
it is impossible to enumerate the possible
assignments and numeric constraint solvers thus resorts to interval computations. As a result, we use a so-called interval ex-
tension [ f ] : IRn → IR of each function f : Rn → R involved in a constraint, such that ∀[a] ∈ IRn, ∀a ∈ [a], f (a) ∈ [ f ]([a]).

3.1.1. Numerical constraint satisfaction problems

A numerical constraint satisfaction problem (NCSP) is deﬁned as a triple (cid:5)v, [v], c(cid:6) that consists of

• a vector of variables v = (v 1, . . . , vn),
• an initial domain, in the form of a box [v] = ([v 1], . . . ,[ vn]) ∈ IRn, and
• a constraint c(v) := (f(v) = 0 ∧ g(v) (cid:3) 0), f : Rn → Re and g : Rn → Ri , i.e., a conjunction of e equations and i inequal-

ities.

A solution of an NCSP is an assignment of its variables v ∈ [v] that satisﬁes its constraints. The solution set Σ of an NCSP

is the region within its initial domain that satisﬁes its constraints, i.e., Σ([v]) := {v ∈ [v] | c(v)}.

3.1.2. The branch and prune algorithm

The branch and prune algorithm [12] is the standard complete solving method for NCSPs. It takes a problem as an input and
outputs two sets of boxes, called respectively the undecided boxes (stored inside U ) and solution boxes (stored inside S).
It interleaves a refutation phase, called prune, that eliminates inconsistent assignments within a box, and an exploration
phase, called branch, that divides a box into several sub-boxes to be searched recursively, until a prescribed precision (cid:2) is
reached. Algorithm 1 shows a generic description of this scheme. It involves four subroutines: Extract (extraction of the
next box to be processed), Prunec (reduction of the domains based on refutation of assignments that cannot satisfy a subset
of constraint c), Provec (certiﬁcation that a box contains some solutions of the constraint c, the speciﬁc semantic being
problem dependent), and Branch (division of the processed box into sub-boxes to be further processed). Each of them has to
be instantiated depending on the problem to be solved. The procedure Prunec obviously depends on the type of constraint in
the problem, as well as on other characteristics of the problem. The procedures Extract and Branch allow deﬁning the search
strategy (e.g., breadth-ﬁrst, depth-ﬁrst, etc.), which may be tuned differently with respect to the problem. The procedure
Provec actually deﬁnes the aim of the branch and prune. A box for which Provec succeeds is called a solution box: Being a
solution box can take different meaning depending on the considered problem and the question asked. For instance, if the
question is to ﬁnd the real solutions of a well-constrained system of equations, then it will generally implement a solution
existence (and often uniqueness) theorem, e.g., Miranda, Brouwer or interval Newton [13], that guarantees that the solution
box contains a (unique) real solution; on the other hand, if the question is to compute the solution set of a conjunction of
inequality constraints, then it will usually implement a universal solution test, which guarantees that every real assignment
in the solution box is a solution of the NCSP.

38

S. Caro et al. / Artiﬁcial Intelligence 211 (2014) 34–50

3.2. Parallel robots, singularities and generalized aspects

As illustrated in Section 2, the kinematic model of a parallel robot can be expressed as a system of equations relating its

end-effector pose x and its commands q:

f(x, q) = 0.

(2)

A solution (x, q) is called a conﬁguration, and the solution set Σ is called the conﬁguration manifold and lies within the
conﬁguration space (also called the pose-command product space). The subspace restricted to the pose parameters x (resp.
command parameters q) is known as the workspace (resp. joint-space). The projection Σx (resp. Σq) of the solution set Σ is
called the robot reachable workspace (resp. reachable joint-space). In this paper, we restrict to the most typical architectures
which satisfy dim x = dim q = dim f = n, i.e., neither over- nor under-actuated manipulators. Then, by the implicit function
theorem, this system of equations deﬁnes a local bijection between x and q provided the Jacobian matrices Fx(x, q) and
Fq(x, q) are non-singular. The conﬁgurations (x, q) that do not satisfy these regularity conditions are called singularities,
respectively parallel or serial whether Fx(x, q) or Fq(x, q) is singular. These algebraic singularity characterizations correspond
to the horizontal and vertical tangents of the kinematic manifold described in Section 2.

A key issue in robotics is to control a robot while avoiding singularities, in particular because reaching a parallel singu-
larity can dramatically damage a robot. This leads to the deﬁnition of generalized aspects [4] as maximal sets of nonsingular
conﬁgurations (x, q) that can all be connected within Σ without crossing any singularity. More formally, the set of nonsin-
gular conﬁgurations of the robot is

(cid:3)

∗ :=

Σ

(x, q) ∈ Rn × Rn | f(x, q) = 0, det Fx(x, q) (cid:9)= 0, det Fq(x, q) (cid:9)= 0

(cid:4)
.

(3)

This corresponds, e.g., to the four quarters of circle in the left hand side graphic of Fig. 2, where the four singularities
(green and red points) are removed. As illustrated by this diagram, Σ ∗
is generally made of several connected components.2
Formally, the generalized aspects of the robots are deﬁned to be the connected components of (3).

For a given generalized aspect A, its projection Ax is a maximal singularity-free region in the robot reachable workspace.
Knowing these regions allows roboticists to safely plan robot motions: Any two poses in Ax are connected by at least one
singularity-free path. In addition, the study of aspects provides important information about robot characteristics, e.g., if
(x, q) and (x, q
, i.e., two different commands yield the same pose, then the robot is said
to be cuspidal [16]. Cuspidal robots can change assembly mode without crossing singularities, yielding an extra ﬂexibility in
their usage. Finally, the computation of aspects allows roboticists to make informed choices when designing a robot for a
given task.

(cid:3)) exist in an aspect A and q (cid:9)= q

(cid:3)

4. Description of the method

The proposed method for the generalized aspect computation relies on solving the following NCSP whose solutions are

the nonsingular conﬁgurations of the robot:
(cid:7)
[x], [q]

(cid:5)
(x, q),

(cid:6)

, f(x, q) = 0 ∧ det Fx(x, q) (cid:9)= 0 ∧ det Fq(x, q) (cid:9)= 0

(cid:8)
.

(4)

Let Σ([x], [q]) be the solution set of this NCSP. Our method computes a set of boxes partly covering this solution set.
This set of boxes is partitioned into subsets that represent fully certiﬁed approximations of the aspects of the considered
robot, in terms of both solution existence and connectedness within the solution set. The computed boxes have to satisfy
the speciﬁc properties stated in Section 4.1. The corresponding branch and prune instantiation is described in Section 4.2.
Finally, the connections between the output boxes have to be certiﬁed as described in Section 4.3, and the connected
component analysis is described in Section 4.4.

4.1. From the NCSP model to the generalized aspects computation

We aim at computing a (ﬁnite) set of boxes S ⊆ IRn × IRn together with (undirected) links N , i.e. 2-subsets of S,

satisfying the following three properties:

(P1) ∀([x], [q]) ∈ S, ∀x ∈ [x], ∃ a unique q ∈ [q], f(x, q) = 0;
(P2) ∀([x], [q]) ∈ S, ∀x ∈ [x], ∀q ∈ [q], det Fx(x, q) (cid:9)= 0 ∧ det Fq(x, q) (cid:9)= 0;
(P3) ∀{([x], [q]), ([x

(cid:3)])} ∈ N , ∃(x, q) ∈ ([x], [q]) ∩ ([x

(cid:3)]), f(x, q) = 0.

(cid:3)], [q

(cid:3)], [q

Property (P1) allows deﬁning in each ([x], [q]) ∈ S a function κ([x],[q]) : [x] → [q] that associates the unique command
q = κ([x],[q])(x) with a given position x (i.e., the solution of the inverse kinematic problem locally deﬁned inside ([x], [q])).

2 The connected components [14] of a set are its subsets that are connected and maximal with respect to inclusion. They deﬁne a unique partition of
the set. Since the Jacobian of f is full rank at nonsingular conﬁgurations, Σ ∗
is a manifold. In that case, connectedness is equivalent to path-connectedness
(see [15]), which matches the requirement for path planning.

S. Caro et al. / Artiﬁcial Intelligence 211 (2014) 34–50

39

Property (P2) proves there is no singularity in the box. Furthermore, it allows applying the Implicit Function Theorem to
prove that κ([x],[q]) is differentiable (and hence continuous) inside [x]. Therefore, for a given box ([x], [q]) ∈ S, the solution
set restricted to this box

(cid:6)

(cid:7)
[x], [q]

Σ

=

(cid:3)(cid:6)

(cid:7)
x, κ([x],[q])(x)

(cid:4)
: x ∈ [x]

is proved to be connected and singularity free, and is thus a subset of one generalized aspect.

These two properties entail in particular that Σ ∗ ∩ ([x], [q]) is a connected manifold, hence a subset of a single aspect,
and that [x] is included inside the reachable workspace. They are satisﬁed by the motivating example output shown in
Fig. 2 (right). Remark that given a box ([x], [q]) ∈ S and a position x ∈ [x], the corresponding command κ([x],[q])(x) is easily
computed using Newton iterations applied to the system f(x, ·) = 0 with initial iterate ˜q ∈ [q] (e.g., ˜q = mid[q]).

Property (P3) basically entails that Σ([x], [q]) and Σ([x

(cid:3)], [q

(cid:3)]) are connected, and are thus subsets of the same aspect.

Finally, assuming Sk ⊆ S to be a connected component of the undirected graph (S, N ), the solution set

(5)

(6)

(cid:9)

Σ

([x],[q])∈Sk

(cid:7)
(cid:6)
[x], [q]

is fully certiﬁed to belong to one single generalized aspect. Hence the ﬁnal output of the process will be several sets of
boxes Sk, each of them being certiﬁed to enclose one connected set of nonsingular conﬁgurations (CSNC). As mentioned
previously, certiﬁed approximations of CSNCs are of central importance for practical robot design and usage purposes.

4.2. Instantiaton of the branch and prune algorithm

The main speciﬁcity of the proposed branch and prune algorithm lies within the solution test used in the Provec function,
which must ensure the desired properties. The pruning and branching steps use standard operators and can be tuned
appropriately depending on the considered robot. Details are provided below.

4.2.1. Solution test

The Provec function of Algorithm 1 has to return true only when properties (P1) and (P2) are veriﬁed. The former
is related to proving the existence of solution and is performed using a parametric Newton operator as described in the
following paragraph. The latter requires checking the regularity of some interval matrices as described in the next paragraph.

Existence proof The standard way to prove that a box ([x], [q]) satisﬁes Property (P1) is to use a parametric interval Newton
existence test [17–19]. Using the Hansen–Sengupta [13] version of the interval Newton, the following sequence is computed

(cid:11)

(cid:10)
q0

:= [q], . . . ,

(cid:11)

(cid:10)

qk+1

:= [H]

(cid:6)(cid:10)

(cid:11)(cid:7)

(cid:11)

(cid:10)

qk

∩

(7)

qk

where [H] is the Hansen–Sengupta operator applied to the system f([x], q) = 0, which depends only on the variables q
and hence is a square system of equations with interval parameters. As soon as ∅ (cid:9)= [qk+1] ⊆ int[qk] is veriﬁed, the interval
Newton operators properties entail

∀x ∈ [x], ∃q ∈ [q], f(x, q) = 0,

(8)
hence the box ([x], [qk+1]) is proved to satisfy Property (P1). However, because Algorithm 1 has to bisect the domain [q]
for insuring convergence by separating the different commands associated to the same pose,3 this test fails in practice in
most situations. This issue was overcome in [19], in the restricted context of constraints of the form x = f(q), by computing
[qk+1] := [H]([qk]) in (7), i.e., removing the intersection with [qk], in order to allow inﬂating and shifting [qk−1] if neces-
sary.4 As a result, the Hansen–Sengupta operator acts as a rigorous local search routine allowing the sequence to converge
towards the aimed solution set. An inﬂation factor τ has also to be applied before the Hansen–Sengupta operator so as to
ease the strict inclusion test after each iteration. Hence, the computation of [qk+1] is as follows:

(cid:11)

(cid:10)
˜qk

(cid:10)
:= mid
qk

(cid:11)

(cid:6)(cid:10)

(cid:11)

(cid:10)
− mid

qk

qk

(cid:11)(cid:7)

+ τ

(cid:11)

(cid:10)
qk+1

and

:= [H]

(cid:6)(cid:10)

(cid:11)(cid:7)

.

(9)

˜qk

Then the condition ∅ (cid:9)= [qk+1] ⊆ int[ ˜qk] also implies Property (P1) and is likely to succeed as soon as ([x], [q]) is small
enough and close enough to some nonsingular solution, which eventually happens thanks to the bisection process. A typical
value for the inﬂation factor is τ = 1.01, which would have to be more accurately tuned for badly conditioned problems,
but it is not the case of usual robots.

3 In [17], only problems where the system has one unique solution for each parameter value were tackled, hence without bisecting variable domains and

using directly the parametric existence test (7).

4 This interval-Newton driven inﬂation technique is used in global optimization to prove feasibility of approximate feasible points. It is, for instance,
implemented by the Intlab [20] function verifynlss. It was also used in [18] in the context of sensitivity analysis, and in [21] within a numerical
constraint based method dedicated to the projection of a manifold.

40

S. Caro et al. / Artiﬁcial Intelligence 211 (2014) 34–50

In order to satisfy the regularity constraints in Property (P2), the interval evaluation of each Jacobian Fx and
Regularity test
Fq over the box ([x], [q]) has to be regular. Testing the regularity of interval matrices is NP-hard, so suﬃcient conditions are
usually used instead. Here, we use the strong regularity of a square interval matrix [ A], which consists in checking that C[ A]
is strongly diagonally dominant, where C is usually chosen as an approximate inverse of the midpoint of [ A] (see [13]).

4.2.2. Pruning

The considered constraints are of two types: A system of n equalities, and two disequalities. Since the latter generally
does not allow any pruning in the context of numerical CSPs, only the former is considered for pruning. In our context, the
Prunec function is implemented as a standard AC3-like ﬁxed-point propagation of contracting operators that enforces local
consistencies, like the Hull [22,23] or the Box consistencies [22,24], which allows an inexpensive refutation non-solution.
Moreover, a stronger consistency can be achieved using some interval-Newton based operator. Those operators readily apply
to square systems of equations, but have to be adapted to under constrained systems of equations. This is detailed in
Section 4.2.1, since those operators also allow proving the existence of solutions.

4.2.3. Search strategy

The standard search strategy for NCSPs applies appropriately in our context: We use a deep ﬁrst search strategy within
the Extract function, which is adequate and avoids the risk of ﬁlling up the memory (unlike a breadth-ﬁrst search or
largest-ﬁrst search approach). The Branch function typically selects a variable in a round-robin manner (i.e., all domains are
selected cyclically) and splits the corresponding interval at its midpoint (i.e., a domain is split into two halves).

4.3. Computing and certifying links

The computation of N , i.e., the links that satisfy Property (P3), is done in two steps:

1. Maintain the neighborhood graph (R, M), where R = L ∪ S ∪ U is the set of all boxes produced by the algorithm,

deﬁned as the graph between the boxes in R which share at least a common point;

2. Compute the certiﬁed neighborhood graph (S, N ), where N ⊆ M ∩ 2

S

is the set of links between certiﬁed boxes that

satisfy Property (P3).

S
N is generally a strict subset of M ∩ 2

: Indeed, two certiﬁed boxes with nonempty intersection may still contain

different components of Σ ∗

. Note that, (R, M) and (S, N ) somehow play similar roles as G±

in [8].

4.3.1. Maintaining the neighborhood graph

(cid:3)], [q

Two boxes ([x], [q]) and ([x
(cid:3)], [q

(cid:3)]) are neighbors if and only if they share at least one common point, i.e., ([x], [q]) ∩
(cid:3)]) (cid:9)= ∅. The neighborhood links M are maintained during the branch and prune computation: After the current box
([x
has been pruned (line 4 of Algorithm 1), its neighbors are updated accordingly (it may have lost some neighbors); also, the
boxes produced when splitting the current box (line 9 of Algorithm 1) inherit from (some of) the neighbors of the current
box, and are neighbors to one another. One delicate point in managing neighborhood comes from the fact that some pose
or command parameters are often angles whose domains are restricted to a single period, e.g., [−π , π ]; the periodicity of
these parameters has to be taken into account: Boxes are neighbors when they share a common point modulo 2π on their
periodic dimensions.

4.3.2. Certifying connectivity between neighbors

S
The links M ∩ 2

between certiﬁed boxes have to be checked to satisfy (P3): It may happen that two neighbor boxes
share no common point satisfying the kinematic relation f = 0, e.g., if they each cover a portion of two disjoint, but close,
aspects. Asserting neighborhood Property (P3)
requires again a certiﬁcation procedure: For any pair of neighbor certiﬁed
boxes {([x], [q]), ([x
(cid:10)
(cid:3)
q

S
(cid:3)])} ∈ M ∩ 2
(cid:6)
(cid:6)
[x] ∩
, f

(cid:3)], [q
(cid:11)(cid:7)

, we verify

(cid:7)
, q

[q] ∩

∃q ∈

= 0,

(cid:10)
x

(10)

mid

(cid:11)(cid:7)

(cid:6)

(cid:3)

which implies Σ([x], [q]) ∩ Σ([x
also connected, this proves that Σ([x], [q]) and Σ([x

(cid:3)], [q

(cid:3)]) belong to the same aspect.

(cid:3)], [q

(cid:3)]) (cid:9)= ∅. Since the union of two connected sets that have a nonempty intersection is

Using the certiﬁcation procedure described in Section 4.2 allows proving Eq. (10). Finally, N is deﬁned as the subset of

S
M ∩ 2

of pairs that satisfy (10), and obviously satisfy Property (P1), Property (P2) and Property (P3).

4.4. Connected components computation

We present two ways to compute connected sets of nonsingular conﬁgurations (CSNCs) from the graphs (R, M)

and (S, N ).

S. Caro et al. / Artiﬁcial Intelligence 211 (2014) 34–50

41

Fig. 3. Singular singularity.

4.4.1. Simple CSNCs construction

The ﬁrst simply consists in computing the connected components (Si, Ni) of the graph (S, N ), using a standard algo-
rithm for the graph connected component computation (e.g., [25]). This leads to a partition of S into Si , each Si covering a
single aspect of the considered robot. However, there is no certiﬁed information about the disconnectedness of the different
components: The major portion of a large aspect should be covered with a single CSNC, but the instability of the proving
process close to singular regions implies that many small “spurious” CSNCs should appear at the boundaries. Together with
the fact very small aspects may not be covered by certiﬁed boxes, this is the reason why the number of computed CSNCs is
not related to the exact number of aspects of a robot.

For practical considerations, the spurious CSNCs can be eliminated using a measure of their size: All computed CSNCs
are ordered by decreasing number of constituting boxes; The largest ratio, in number of constituting boxes, between two
consecutive CSNCs in this order is computed, and used as a separation between relevant and spurious components. Though
heuristic, we show in Section 5 that this ﬁltering process allows retrieving the most signiﬁcant CSNCs which in fact corre-
spond to the exact aspects of the robots for which they are known.

4.4.2. CSNCs construction and separation

The second approach is more complex, but provides more information in term of connectedness: The main computed
CSNCs can be proved to be actually separated either because they have different determinant signs, or because they are
disconnected within (R, M). However, it can happen that some generalized aspects may not be separable numerically
using these conditions, as illustrated by the following example.

Example. Consider the manifold Σ ∗ := {x ∈ R3 | x2
= 1, x1x2 (cid:9)= 0}. It is made of 4 connected components, as
+ x2
3
1
illustrated on the left hand side graphic of Fig. 3. However, these four components, although connected, are inﬁnitely close to
each other, making their separation impossible using some box classiﬁcation with respect to the sign of x1x2. Note that this
situation is not generic: By slightly perturbing the separating equation to, e.g., Σ ∗ := {x ∈ R3 | x2
= 1, x1x2 (cid:9)= 0.01},
1
which is depicted on the right hand side of Fig. 3, we obtain three connected components which can be separated using
the sign of x1x2 − 0.01.

+ x2
2

+ x2
3

+ x2
2

The undecidable status illustrated by the previous example is actually generic for some robots: As soon as one of the
determinants det Fx(x, q) or det Fq(x, q) can be formally factored (e.g., when one of these Jacobians are diagonal, in which
case the its determinant is the product of its diagonal entries), some aspects may turn out to be non separable using
only the signs of these determinants. In order to overcome this diﬃculty, exploiting the structure of the determinants is
mandatory: When possible, we factor the product det Fx(x, q) det Fq(x, q) to d1(x, q) · · · dp(x, q) and, instead of recording the
sign of both det Fx([x], [q]) and det Fq([x], [q]) for each box, we record the sign of each di([x], [q]).

For each possible s = (s1, . . . , sp) ∈ {−1, 1}p , we deﬁne (Rs, Ms) ⊆ (R, M) as the subgraphs of (R, M) whose boxes
satisfy sup sidi([x], [q]) (cid:3) 0, i.e., Rs contains boxes whose interval evaluations di([x], [q]) have signs compatible with s. Then,
i ), i ∈ {1, . . . , Is}, of each (Rs, Ms). Finally, we compute the connected
we compute the connected components (Rs
components of (Rs
i ) containing only certiﬁed boxes and links, and denote them
i
(S s

i j), j ∈ {1, . . . , J s,i} with J s,i (cid:3) 0 ( J s,i could be equal to zero if (Rs

i ) contains no certiﬁed box or link).

∩ N ), the subgraph of (Rs

∩ S, Ms
i

i , Ms

i , Ms

i , Ms

i j, N s

42

S. Caro et al. / Artiﬁcial Intelligence 211 (2014) 34–50

Fig. 4. Considered robot architectures.

Obviously, boxes in two different (Rs

i , Ms

i ) and (Rs

i(cid:3) , Ms

(cid:3)

(cid:3)

i(cid:3) ) cannot contain solutions that belong to the same aspect.

(cid:3)

card

i ∈ {1, . . . Is} | J s,i > 0

(cid:4)

(11)

Therefore,

(cid:12)

s∈{−1,1}p

is a lower bound of the number of aspect. On the other hand, as mentioned in the previous subsection, we expect (S s
i j, N s
i j)
to contain numerous spurious CSNCs due to the instability of the proving process close to singular regions. The same
heuristic ﬁltering can thus be used to isolate the largest CSNCs of practical interest.

5. Experiments

We present experiments on four planar robots with respectively 2 and 3 degrees of freedom, yielding respectively a con-
ﬁguration manifold of dimension 2 or 3 embedded in a conﬁguration space of dimension 4 or 6. Although these dimensions
seem somehow low, some of them represent real challenges for methods that certify admissibility and connectivity.

5.1. Implementation

We have implemented the proposed method described in Section 4 using the Realpaver library [26] in C++, specializing
the classes for the different routines in the branch and prune algorithm. Given an NCSP that models a robot and a pre-
scribed precision (cid:2), the implementation outputs certiﬁed boxes grouped by certiﬁed connected components as explained
in Section 4. Hence we can count not only the number of output boxes but also the number of certiﬁed connected set of
nonsingular conﬁgurations (CSNCs) that can be extracted from them. The experiments were run using a 3.4 GHz Intel Xeon
processor with 16 GB of RAM.

5.2. Robot models

Robot RPRPR (resp. RRRRR) is represented inFig. 4 (a) (resp. Fig. 4(b)). It has two arms, each connecting an anchor point
( A, B) to its end-effector ( P ), each composed of a revolute joint, a prismatic (resp. revolute) joint and again a revolute
joint in sequence. The end-effector P lies at the shared extremal revolute joint and is described as a 2D point (x1, x2) ∈
[−20, 20]2. The prismatic (resp. initial revolute) joint in each arm is actuated, allowing to vary the arms lengths (resp.
angles). The arm lengths (resp. angles) are considered to be the command (q1, q2) ∈ [2, 6] × [4, 9] (resp. [−π , π ]2) of the
robot. Using the architecture parameters deﬁned in [27] (resp. [4]), their kinematic equations are respectively

S. Caro et al. / Artiﬁcial Intelligence 211 (2014) 34–50

43

Table 1
Experimental results.

# aspects
precision
# boxes
# boxesﬁltered
# CSNCs
# CSNCsﬁltered
# CSNCsseparated
time (s)

PRRP

4
0.1
38
28
4
4
4
0.003

RPRPR

2
0.1
2176
1444
4
2
2
0.36

RRRRR

10
0.1
69 612
53 062
1767
10
10
38

3-RPR

2
0.3
13 564 854
5 833 951
44 220
2
2
12 700

3-RRR*

unknown
0.008
11 870 068
5 841 193
56 269
25
25
10 700

= 0,

− q2
1

+ x2
x2
1
2
(x1 − 9)2 + x2
2

− q2
2

= 0,

and

(x1 − 8 cos q1)2 + (x2 − 8 sin q1)2 − 25 = 0,
(x1 − 9 − 5 cos q2)2 + (x2 − 5 sin q2)2 − 64 = 0.

Robot 3-RPR (resp. 3-RRR) is represented in Fig. 4(c) (resp. Fig. 4(d)). It has three arms, each connecting an anchor point
( A1, A2, A3) to its end-effector ( P ), each composed of a revolute joint, a prismatic (resp. revolute) joint and again a revolute
joint in sequence. The end-effector is a triangular platform whose vertices are attached to the extremal revolute joints of
the arms. The pose parameters (x1, x2, x3) represent the coordinates (x1, x2) ∈ [−50, 50]2 of one vertex of the platform, and
the angle x3 ∈ [−π , π ] between its basis and the horizontal axis. The prismatic (resp. initial revolute) joint in each arm is
actuated, allowing to vary the arm lengths (resp. angles). The arm lengths (resp. angles) are considered to be the command
(q1, q2, q3) ∈ [10, 32]3 (resp [−π , π ]3) of the robot. Using the architecture parameters deﬁned in [28] (resp. [27]), their
kinematic equations are:

= 0,

+ x2
2

− q2
1

x2
1
(x1 + 17 cos x3 − 15.9)2 + (x2 + 17 sin x3)2 − q2
2
(cid:6)
(cid:7)
2 +
x1 + 20.8 cos(x3 + 0.8822)

= 0,
x2 + 20.8 sin(x3 + 0.8822) − 10

(cid:6)

(cid:7)

2 − q2
3

= 0,

and, respectively

(x1 − 10 − 10 cos q1)2 + (x2 − 10 − 10 sin q1)2 − 100 = 0,
(x1 + 10 cos x3 − 10 − 10 cos q2)2 + (x2 + 10 sin x3 − 10 − 10 sin q2)2 − 100 = 0,
(cid:6)
2 +
x1 + 10

2 cos(x3 + π /4) − 10 cos q3

2 sin(x3 + π /4) − 10 − 10 sin q3

x2 + 10

√

√

(cid:6)

(cid:7)

(cid:7)

2 − 100 = 0.

Due to the computational complexity of our method, we have added the extra constraint x3 = 0 to the latter model of
robot 3-RRR, i.e., ﬁxing the orientation of its platform. This constraint virtually reduces the dimension of the problem to 5
instead of 6, making it tractable in reasonable time with our method. Results below integrate this additional constraint and
we denote this modiﬁed robot 3-RRR* in the following.

5.2.1. History and applications of the four planar parallel robots under study

We can ﬁnd many studies on the four planar parallel robots under study and some practical applications in the literature.
The RPRPR robot, also called bipod robot, is used in the so-called hexapod machine tools, which are the most widespread
[29], and in the famous Gough-Stewart platforms, commonly met in ﬂight-simulators [30]. Thebipod robot is also used in
the design of the Micromat Hexa industrial machine developed at the IWU in Chemnitz and in the design of the CMW300
industrial robot developed by the Compagnie Mécanique des Vosges in France [31].

The RRRRR robot, usually called ﬁve-bar mechanism, has often been used in research papers as an illustrative example
due to its simplicity and interesting kinematic properties similar to those of spatial robots, namely: (i) several working
and assembly modes [4]; (ii) error analysis and assembly conditions [32,33]; (iii) generalized aspects [34]; (iv) trajectory
planning [35]. There exist some prototypes of the RRRRR robot such as the Dexterous Twin-Arm Robot (DexTAR) developed
by Prof. Bonev and his team [36].

A reference book on kinematics, static analysis and stiffness of 3-DOF planar parallel robots composed of revolute and/or
prismatic joints was published by Duffy [37]. There have been various studies of these robots. 3-RPR planar parallel robots
have been extensively studied [2]: synthesis, kinematic and singularity analysis, workspace analysis. 3-RRR planar parallel
robots have also been studied in [38–40]. Some prototypes based on the architecture of the 3-RRR planar parallel robot have
been developed such as the NaVARo that has eight actuation modes thanks to three transmissions with two clutches and
additional parallelogram linkages [41].

44

S. Caro et al. / Artiﬁcial Intelligence 211 (2014) 34–50

Fig. 5. Number of boxes in each connected component. Each bar corresponding to a CSNC shows the number of contained boxes (ordered largest ﬁrst). The
rightmost bar in each histogram corresponds to the largest CSNC that is ﬁltered out with our heuristic.

5.3. Computation of CSNCs

Table 1 provides some ﬁgures on our computations. Its columns represent the different robots we consider. Line “# as-
pects” provides the theoretically established number of aspects of each robot provided in [27,4,28] (this value is unknown
for the 3-RRR* robot). Line “precision” gives the prescribed precision (cid:2) used in the computation. Lines “# boxes” and
“# CSNCs” give respectively the number of boxes and the number of connected sets of nonsingular conﬁgurations returned
by our method. Line “time” gives the overall computational time in seconds of the method, including the connected com-
ponents computation with connectivity certiﬁcation. Note that, this timing does not contain the time taken for ﬁltering out
the spurious CSNCs.

Despite the quite coarse precisions we have used, the number of output boxes can be very large, due to the dimension
of the search space we are paving. The number of CSNCs is much smaller, but still does not match the theoretically known
number of aspects (except for the PRRP which is very simple), implying numerous disjoint CSNCs do in fact belong to
the same aspect. As explained in Section 4.4, this is due to the numerical instability of the kinematic equations of the
robots in the vicinity of the aspect boundaries, which are singularities of the robot. Indeed, in these regions, the numerical
certiﬁcation process cannot operate homogeneously, resulting in disconnected subsets of certiﬁed boxes, separated either by
non-certiﬁed boxes or by non-certiﬁed links.

These spurious CSNCs have no practical use in robotics because they represent only very small, hence negligible, regions
of the reachable workspace, moreover too close to singularities to safely operate within. For practical considerations, we can
thus ﬁlter them out as explained in Section 4.4.1. Applying this heuristic, practical, post-process, the number of obtained
CSNCs, reported at Line “# CSNCsﬁltered” inTable 1, reaches the theoretically known number of aspects in the cases of
the robots we considered. Line “# boxesﬁltered” in Table 1 shows the total number of boxes after the ﬁltering heuristic.
retained after ﬁltering (the dashed lines represent the computed
Fig. 5 illustrates the number of boxes of the CSNCs
heuristic thresholds), as well as the number of boxes of the largest spurious (and ﬁltered) CSNC right after the dashed line.
Line “# CSNCsseparated” gives the lower bounds of the number of aspects, which are computed by the method described in
Section 4.4.2. These results seem to indicate that our assumption is correct for the considered robots, i.e., that the major
part of each aspect is indeed covered with a single large CSNC.

The retained CSNCs projected onto the x subspace are depicted in Figs. 6 and 7.5 They graphically correspond to the
aspects of the robots for which they are theoretically known (e.g., see [27,7,4,28]). Note that the red boxes, that enclose the
singularity curves, seem to cross the aspects due to the projection onto the workspace, while they of course do not cross in
the conﬁguration space where the boxes have been computed and proved to certify Property (P2).

The computation requires quickly growing time and space with respect to the prescribed precision (cid:2), since this parameter
controls the explosion of the number of spurious components, hence boxes, at the boundaries of the aspects. We thus need
to tweak it for an eﬃcient and reliable aspect determination. For the ﬁrst three robots, the precision (cid:2) = 0.1 gave precise
enough results to compute precisely CSNCs corresponding to the known aspects after ﬁltering out the spurious components.
For 3-RPR, we had to use the coarser precision (cid:2) = 0.3 to avoid getting out of memory. Still, it was suﬃcient to compute
precise CSNCs approximating the two known aspects of this robot. In the computation of 3-RRR*, the threshold between
the regular and the spurious components is not as clear as for the other robots, even though we improved the precision up
to (cid:2) = 0.008. Nevertheless, only the largest CSNCs have a practical usage in the context of robotics, hence deciding whether

5 Figures are available at http://www.ueda.info.waseda.ac.jp/~ishii/pub/aspects/.

S. Caro et al. / Artiﬁcial Intelligence 211 (2014) 34–50

45

Fig. 6. Computed 3D workspace of 3-RPR (after ﬁltering). First ﬁgure shows the undecided boxes that cover the surface of the workspace. Second and third
ﬁgures show the computed CSNCs corresponding to the two aspects. (For interpretation of the references to color in this ﬁgure, the reader is referred to
the web version of this article.)

these very small CSNCs are really spurious is not critical. According to our ﬁltering criterion, we selected the 25 largest ones
that are depicted in Fig. 7.

5.4. Handling additional constraints

In the process of robot design, various properties should be veriﬁed in addition to the aspect identiﬁcation. In our
framework, such properties can be handled by simply adding constraints to the robots models, which is an intrinsic strength
of NCSPs based method with respect to other methods, e.g., based on formal computations. In the following, we investigate
the impact of three recurrent issues in robotics: Self-collisions between different robot links, joint limits, and collision with
obstacles inside the workspace. We use the RRRRR robot as an illustrative example.

The considered additional constraints are inequality constraints: More precisely, they can be formulated as conjunctions
and/or disjunctions of inequalities. Therefore, they are involved in both pruning and proving, and solution boxes will be
proved to fully satisfy these additional constraints in addition to properties (P1), (P2) and (P3) deﬁned in page 5. Note
that due to the additional constraints expressions, a trivial contractor is used, which simply uses interval evaluations to
check if a box contains no solution.

5.4.1. Arm collisions

First we show how to avoid collisions between arms of the RRRRR robot. The required additional constraint consists of
enforcing no collision of any pair of links. For an arbitrary pair of links (T , U ) and (V , W ), where T , U , V and W are their
respective endpoints, their non-intersection is mathematically expressed as:
∀λ ∈ [0, 1], ∀μ ∈ [0, 1], λ T + (1 − λ)U (cid:9)= μ V + (1 − μ)W .

One such constraint must be imposed for each pair of links in the robot. Inner and outer tests for such a constraint are
easily derived.

Link collisions happen in full-dimensional regions of the workspace. Indeed, when two links intersect at a given pose,
they also intersect at neighbor poses (except when intersecting at their extremities). Hence, link collisions constraints deﬁne
colliding regions, which must be removed from the computed CSNCs. Fig. 8 illustrates these facts. Fig. 8(a) presents one of
the CSNCs we have previously obtained for the RRRRR robot (see Fig. 7(b)). Fig. 8(b) then shows how this component is
reduced when considering link collisions, and presents two poses to explain this reduction. Pose P 1 induces no link colli-
sion and thus remains within the collision-free CSNC. Pose P 2 previously belonged to the CSNC but does not belong to the
collision-free CSNC as it induces a link collision. The two full-dimensional regions corresponding to collision and collision-
free conﬁgurations have to be separated by a boundary, which corresponds to tangential collisions. They are depicted in
blue in contrast with the red boundaries that represent singularities of the robot. Note that like singularities, some of the
collision boundaries overlap with the collision-free components due to the projection in the 2D workspace of the paving
computed in the 4D conﬁguration space.

Results are depicted in Fig. 9. We set the precision to 0.01 for a better visualization of the collision boundaries, although
a cruder precision is suﬃcient to obtain the collision-free CSNCs. As in the previous experiment, we obtain ten CSNCs that
are collision free. They correspond to collision-free subregions of the ten CSNCs obtained previously. Note that some of the
previously obtained components remain unaffected by the additional constraint, i.e., they were already collision-free. As in
Fig. 8, blue boxes in each ﬁgure represent collision boundaries where the end point of a link comes to touch another link.

5.4.2. Joint limits

In the second experiment, we compute the CSNCs while considering the joint limits, which are inherent in real mecha-
nisms. Limits of the range of actuated joints are easily enforced by setting their corresponding domains. Instead, we consider
(cid:3)),
joint limits of non-actuated joints. In the RRRRR robot, it consists in limiting the angle between the links ( A
inside the interval [θ, θ]. This is equivalent to the conjunction of the two following two-sided inequality constraints:

P ) and (P B

(cid:3)

θ (cid:2) cos

−1

(cid:5)u | v(cid:6)
(cid:18)u(cid:18)(cid:18)v(cid:18)

(cid:2) θ,

46

S. Caro et al. / Artiﬁcial Intelligence 211 (2014) 34–50

Fig. 7. Projections into the 2D workspace of the computed CSNCs (after ﬁltering). Green boxes are certiﬁed; red and black boxes are undecided (i.e., do not
satisfy Properties (P1) and (P2), respectively). (For interpretation of the references to color in this ﬁgure legend, the reader is referred to the web version
of this article.)

S. Caro et al. / Artiﬁcial Intelligence 211 (2014) 34–50

47

Fig. 8. Aspect decomposition of RRRRR with respect to various additional constraints. (For interpretation of the references to color in this ﬁgure, the reader
is referred to the web version of this article.)

θ (cid:2) sin

−1

⊥ | v(cid:6)
(cid:5)u
(cid:18)u⊥(cid:18)(cid:18)v(cid:18)

(cid:2) θ,

where u = P − A

(cid:3)

, v = P − B

(cid:3)

and u

⊥ = (−u2, u1), and (cid:5) · | · (cid:6) is the scalar product.

As in the link collisions, this constraint will remove some regions from the computed CSNCs. Fig. 8(c) presents the joint-
limited CSNCs of the RRRRR robot resulting from the original CSNC depicted in Fig. 8(a) when the angle at the end-effector
P is limited to [−π /2, π /2]. It also presents two poses: Pose P 1 is consistent with the joint limit and thus remains within
the original joint-limited CSNC. Pose P 2 did belong to the original CSNC but it does not belong to the computed joint-limited
CSNC since, at this pose, the joint limit is not respected. Blue boxes represent joint limit boundaries where the limited joint
angle becomes π /2 or −π /2.

The other joint-limited CSNCs are depicted in Fig. 10. We have twelve joint-limited CSNCs where the ﬁrst and sixth

original CSNCs in Fig. 7(b) have been split in two by the joint limit constraint.

48

S. Caro et al. / Artiﬁcial Intelligence 211 (2014) 34–50

Fig. 9. Computed CSNCs of RRRRR taking into account link collisions. (For interpretation of the references to color in this ﬁgure, the reader is referred to
the web version of this article.)

Fig. 10. Computed CSNCs of RRRRR with a limited angle. (For interpretation of the references to color in this ﬁgure, the reader is referred to the web
version of this article.)

5.4.3. Collision with obstacles

The third experiment takes into account the collision of robot links with an obstacle in the workspace. We assume a
circular obstacle centered at point C with radius R. For each link (T , U ) of the robot, collision-freeness is described by the
constraint dist2(C, (T , U )) (cid:3) R2 where

(cid:6)

(cid:7)
C, (T , U )

:=

dist2

⎧
⎨

⎩

(cid:5)C − T |C − T (cid:6)
(cid:5)C − U |C − U (cid:6)
(cid:5)C − T |C − T (cid:6) − (cid:5)U −T |C−T (cid:6)2
(cid:5)U −T |U −T (cid:6)

if (cid:5)U − T |C − T (cid:6) < 0
if (cid:5)T − U |C − U (cid:6) < 0
otherwise.

Again, the obstacle avoidance constraint yields collision regions and collision-free regions within the aspects. Fig. 8(d)
presents the three collision-free CSNCs of the RRRRR robot resulting from the CSNC depicted in Fig. 8(a) when a circular
obstacle (in black) located at C = (4.5, 0) with radius R = 1 is to be avoided. It also presents two poses: Pose P 1 induces no
collision with the obstacle and thus remains within the collision-free CSNC. Pose P 2 did belong to the original CSNC but it
does not belong to the collision-free CSNCs since, at this pose, a link overlaps with the obstacle. Again, blue boxes represent
the boundaries between collision-free and collision regions.

The other collision-free CSNCs are depicted in Fig. 11. We have twenty six collision-free CSNCs where the ﬁrst, sec-
ond, third, sixth, seventh and eighth original CSNCs in Fig. 7(b) are split into three, four, four, three, four and four parts
respectively.

S. Caro et al. / Artiﬁcial Intelligence 211 (2014) 34–50

49

6. Conclusion

Fig. 11. Computed CSNCs of RRRRR with a circular obstacle.

The computation of aspects, i.e., connected components of nonsingular conﬁgurations, is a critical task in the design and
analysis of parallel robots. The proposed algorithm uses numerical constraint programming to fully certify this computation.
It is worth noting that this is the ﬁrst algorithm that automatically handles such a large class of kinematic models with
fully certifying the conﬁgurations existence, non-singularity and connectivity: The only restriction of the algorithm is its
computational complexity, which is exponential with respect to the number of degrees of freedom of the robot.

The presented experiments have reported the sharp approximations of aspects for some realistic models: Large connected
sets of nonsingular conﬁgurations, particularly suitable for path planning, have been computed for well-known planar robots
with two and three degrees of freedom, the number of which matches the exact number of aspects. The more challenging
3-RRR planar parallel robot, whose number of aspects is still an open question, remains out of reach because of the com-
plexity of the computation, though we have obtained some promising results for a given orientation of its moving-platform.
Tackling this robot, as well as more complex and spatial ones, will certainly require the deﬁnition of stronger, dedicated,
operators, and probably a change of computing paradigm, e.g., using parallelepipeds [42] instead of boxes. Finally, although
experiments have shown that the proposed method computes approximations of all aspects of well-known robots, it cannot
be used for rigorously counting the aspects, a challenge we will address in the future on the basis of this method.

Acknowledgements

This work was partially funded by the French agency ANR project SIROPA (PSIROB06_174445) and JSPS (KAKENHI

23-3810). The computer used for the experiments was supported by Prof. Kazunori Ueda (Waseda University, Tokyo).

References

[1] X. Kong, C. Gosselin, Type Synthesis of Parallel Mechanisms, Springer, 2007.

50

S. Caro et al. / Artiﬁcial Intelligence 211 (2014) 34–50

[2] J.-P. Merlet, Parallel Robots, Kluwer, Dordrecht, 2000.
[3] S. Amine, M. Tale-Masouleh, S. Caro, P. Wenger, C. Gosselin, Singularity conditions of 3T1R parallel manipulators with identical limb structures, ASME

J. Mech. Robot. 4 (1) (2012), 011011-1–011011-11.

[4] D. Chablat, P. Wenger, Working modes and aspects in fully parallel manipulators, in: International Conference on Robotics and Automation, vol. 3,

1998, pp. 1964–1969.

[5] D. Chablat, G. Moroz, P. Wenger, Uniqueness domains and non singular assembly mode changing trajectories, in: International Conference on Robotics

and Automation, 2011, pp. 3946–3951.

[6] J.-P. Merlet, A formal-numerical approach for robust in-workspace singularity detection, IEEE Trans. Robot. 23 (3) (2007) 393–402.
[7] D. Chablat, Joint space and workspace analysis of a two-dof closed-chain manipulator, in: Proc. of ROMANSY 18 Robot Design, Dynamics and Control,

Springer, 2010, pp. 81–90.

[8] L. Jaulin, Path planning using intervals and graphs, Reliab. Comput. 7 (1) (2001) 1–15.
[9] N. Delanoue, L. Jaulin, B. Cottenceau, Guaranteeing the homotopy type of a set deﬁned by non-linear inequalities, Reliab. Comput. 13 (5) (2007)

381–398, http://dx.doi.org/10.1007/s11155-007-9043-8.

[10] U. Montanari, Networks of constraints: Fundamentals properties and applications to picture processing, Inf. Sci. 7 (2) (1974) 95–132.
[11] R. Moore, Interval Analysis, Prentice-Hall, 1966.
[12] P. Van Hentenryck, D. Mcallester, D. Kapur, Solving polynomial systems using a branch and prune approach, SIAM J. Numer. Anal. 34 (1997) 797–827.
[13] A. Neumaier, Interval Methods for Systems of Equations, Cambridge University Press, 1990.
[14] J. Munkres, Topology, Prentice-Hall, 2000.
[15] J. Lee, Introduction to Topological Manifolds, Grad. Texts Math., Springer, 2010.
[16] P. Wenger, Cuspidal and noncuspidal robot manipulators, Robotica 25 (6) (2007) 717–724.
[17] A. Goldsztejn, A branch and prune algorithm for the approximation of non-linear AE-solution sets, in: Proc. of ACM SAC 2006, 2006, pp. 1650–1654.
[18] A. Goldsztejn, Sensitivity analysis using a ﬁxed point interval iteration, Tech. rep. hal-00339377, CNRS-HAL, 2008.
[19] A. Goldsztejn, L. Jaulin, Inner approximation of the range of vector-valued functions, Reliab. Comput. 14 (2010) 1–23.
[20] S. Rump, INTLAB – INTerval LABoratory, in: T. Csendes (Ed.), Developments in Reliable Computing, Kluwer Academic Publishers, 1999, pp. 77–104.
[21] D. Ishii, A. Goldsztejn, C. Jermann, Interval-based projection method for under-constrained numerical systems, Constraints 17 (4) (2012) 432–460.
[22] F. Benhamou, F. Goualard, L. Granvilliers, J.-F. Puget, Revising hull and box consistency, in: Proc. of International Conference on Logic Programming,

1999, pp. 230–244.

[23] O. Lhomme, Consistency techniques for numeric CSPs, in: Proc. of IJCAI 1993, 1993, pp. 232–238.
[24] A. Goldsztejn, F. Goualard, Box consistency through adaptive shaving, in: Proc. of ACM SAC 2010, 2010, pp. 2049–2054.
[25] J. Hopcroft, R. Tarjan, Algorithm 447: eﬃcient algorithms for graph manipulation, Commun. ACM 16 (6) (1973) 372–378.
[26] L. Granvilliers, F. Benhamou, Algorithm 852: Realpaver: an interval solver using constraint satisfaction techniques, ACM Trans. Math. Softw. 32 (1)

(2006) 138–156.

[27] D. Chablat, Domaines d’unicité et parcourabilité pour les manipulateurs pleinement parallèles, Ph.D. thesis, École Centrale de Nantes, 1998.
[28] M. Coste, A simple proof that generic 3-RPR manipulators have two aspects, Tech. rep., Institut de Recherche Mathématique de Rennes (IRMAR), 2010.
[29] P. Zou, Kinematic analysis of a biglide parallel grinder, J. Mater. Process. Technol. 138 (1–3) (2003) 461–463.
[30] L. Du Plessis, J. Snyman, Design and optimum operation of a reconﬁgurable planar Gough–Stewart machining platform, in: 3rd Chemnitzer Parallelkine-

matik Seminar, 2002, pp. 729–749.

[31] P. Wenger, C. Gosselin, B. Maillé, Comparative study of serial and parallel mechanism topologies for machine tool, in: Int. Workshop on Parallel

Kinematic Machines, 1999, pp. 23–35.

[32] N. Binaud, P. Cardou, S. Caro, P. Wenger, Kinematic sensitivity of robotic manipulators to joint clearances, in: Proceedings of ASME Design Engineering

Technical Conferences, Montreal, QC, Canada, 2010.

[33] G. Wu, S. Bai, J. Kepler, S. Caro, Error modeling and experimental validation of a planar 3-PPR parallel manipulator with joint clearances, ASME J. Mech.

Robot. 4 (2012) 0410081–04100812.

[34] S. Caro, P. Wenger, D. Chablat, Non-singular assembly mode changing trajectories of a 6-DOF parallel robot, in: Proceedings of the ASME 2012 Interna-
tional Design Engineering Technical Conferences & Computers and Information in Engineering Conference IDETC/CIE, Chicago, Illinois, USA, 2012.
[35] C. Barnard, S. Briot, S. Caro, Trajectory generation for high speed pick and place robots, in: Proceedings of the ASME 2012 11th Biennial Conference on

Engineering Systems Design and Analysis, ESDA 2012, Nantes, France, 2012.

[36] A. Joubair, M. Slamani, I.A. Bonev, Kinematic calibration of a ﬁve-bar planar parallel robot using all working modes, Robot. Comput.-Integr. Manuf.

29 (4) (2013) 15–25.

[37] J. Duffy, Statics and Kinematics with Applications to Robotics, Cambridge University Press, New York, 1996.
[38] K. Hunt, Structural kinematics of in parallel actuated robot arms, J. Mech. Transm. Autom. Des. 105 (4) (1983) 705–712.
[39] C. Gosselin, Kinematic analysis optimization and programming of parallel robotic manipulators, Ph.D. thesis, McGill University, Montreal, 1988.
[40] M. Husty, On the workspace of planar three-legged platforms, in: World Automation Congress, vol. 3, 1996, pp. 339–344.
[41] N. Rakotomanga, D. Chablat, S. Caro, Performance of a planar parallel mechanism with variable actuation, in: Advances in Robot Kinematics, 2008,

pp. 311–320.

[42] A. Goldsztejn, L. Granvilliers, A new framework for sharp and eﬃcient resolution of NCSP with manifolds of solutions, Constraints 15 (2) (2010)

190–212.

