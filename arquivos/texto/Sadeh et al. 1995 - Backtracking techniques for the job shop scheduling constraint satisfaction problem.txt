Artificial Intelligence 76 1995 455480 Artificial Intelligence Backtracking techniques job shop scheduling constraint satisfaction problem Norman Sadeh Katia Sycara Yalin Xiong 5000 Forbes Avenue The Robotics Institute Carnegie Mellon University Pittsburgh PA 152133891 USA Received June 1993 revised May 1994 Abstract This paper studies version job shop scheduling problem start improve time windows ordering heuristics In paper combine techniques variablevalue time windows This problem CSP A popular method solving type problems completed violating constraints earliestlatest operations scheduled nonrelaxable wellknown NPcomplete Constraint possible Satisfaction Problem involves depthfirst backtrack search In earlier work focused development consistency enforcing techniques new efficiency search procedure lookback schemes help search procedure recover socalled deadend search states partial solutions 1 More specifically successively Dynamic Consistency Enforcement termines far backtrack selectively enforcing higher levels consistency 2 Learning Ordering From Failure variables participating dynamically modifies based earlier conflicts 3 Zncomplete Backjumping Heuristic abandons areas search space efforts These schemes shown 1 appear 2 enable solved excessive efficiently solve problems computation lookback schemes advocated cost 3 effective solving job shop scheduling problems critical subproblems order average complexity backtrack search procedure require excessive computational identifies critical subproblems variables intelligent literature backtracking dynamically instantiated schemes reduce l This research supported Defense Advanced Research Projects Agency contract F3060291F0016 grants McDonnell Aircraft Company Digital Equipment Corporation Corresponding author 00043702950950 SSDZ 0004370295000786 0 1995 Elsevier Science BV All rights reserved 456 N Sadeh et al I Artificial Intelligence 76 1995 455480 1 Introduction This paper concerned design recovery schemes incremental scheduling approaches sions order complete require undoing earlier scheduling deci construction feasible schedule operations earliest possible start scheduled nonrelaxable Job shop scheduling deals allocation resources time perform collection tasks The job shop scheduling model studied paper allows time possible finish time windows windows wellknown NPcomplete Constraint Satisfaction Problem This problem CSP operations shifts time windows determined spacecraft mission scheduling problems astronomical rescheduling prob lems small set operations need rescheduled revising schedule operations performed events control include factory scheduling problems Instances problem timelatest factory lo One approach approach assignment reservation scheduling problems solved solving CSPs use depthfirst backtrack search 21226 iterative Using scheduled variable selection selection operation If tentative reached process constructing schedule partial solution completed violating problem constraints earlier assignments need undone This process undoing earlier assign ments referred efficiency search come solution While procedure increases time required worstcase complexity backtrack search exponential reduce averagecase complexity proposed techniques 6 backtracking operation literature It deteriorates value search time techniques prune global solution participate consistency enforced search space 16 There Consistency enforcing schemes These alternatives generally tradeoff search state savings achieved Variablevalue ordering heuristics These heuristics help judiciously decide instantiate value assign variable variable 2 6 8 13 17 181 By instantiating difficult variables increases current partial solution backtracking S 13 181 Good value ordering heuristics reduce backtracking selecting values solutions Lookbuck enforcing average effective reducing backtracking While possible design consistency impossible 471124 variablevalue heuristics generally chances completing large number expected schemes schemes participate ordering 618 1 A search state associated partial solution Each search state defines new CSP variables variables instantiated constraints initial problem constraints constraints reflecting current assignments N Sadeh et al I Artijicial Intelligence 76 1995 455480 457 efficiently guarantee backtrackfree help recover deadend states possible past mistakes search Lookback schemes designed learn earlier work focused development techniques variablevalue efficient consistency In enforcing ordering heuristics job shop schedul ing CSPs 8 18 2023 251 In paper combine techniques new lookback average complexity search procedure They enable efficiently efficiently solved Finally experimen solve problems tal results techniques effective solving job shop scheduling problems schemes These schemes shown indicate reduce lookback schemes advocated strategy goes literature The search values said recovery states When simplest deadend variable This strategy source current deadend recently instantiated variable alternative value left assigns known chronological remaining backtracking Often recent assignment earlier Because typically modifies assignments impact conflict hand chronological backtracking returns thrashing similar deadend happens Thrashing reduced backjumping schemes attempt backtrack way variables source conflict ll Search efficiency improved learning past mistakes For instance record earlier conflicts form new constraints repeating earlier mistakes 724 Dependencydirected technique dependencydirected search states need explored exponential worstcase complexity constraint recording component time space Simpler techniques developed dependencydirected bookkeeping required fullblown backjumping assuming variables directly connected constraint assigned conflicting values 4 Nthorder deep shallow learning reduce constraint recording complexity dependencydirected recording conflicts involving N fewer variables 4 24 Al number reduce scheme impractical prevent backtracking approximate reduces constraint greatly backjumping backtracking incorporating backtracking backtracking Graphbused backjumping recording Graphbused backjumping works best CSPs sparse constraint graphs 4 Instead constraint job shop scheduling problems highly interconnected graphs Furthermore graphbased backjumping increase search efficiency combination forward checking 13 mechanisms stronger consistency enforcing mechanisms entailed job shop scheduling 18 Our experiments suggest Nthorder deep shallow learning problems techniques job shop techniques use constraint size scheduling problems This search efficiency applied fail improve Two variables said connected constraint participate constraint 458 N Sadeh et al I Artificial Intelligence 76 1995 455480 decide record earlier failures When limit smallsize conflicts fail record important constraints criterion When complexities prohibitive techniques yielded good lookback Instead paper presents results job shop scheduling problems 1 Dynamic Consistency Enforcement DCE selective dependencydirected scheme dynamically focuses effort critical resource subproblems 2 Learning Ordering From Failure LOFF adaptive scheme suggests new variable orderings based earlier conflicts 3 Incomplete Backjumping Heuristic IBH scheme gives searching areas search space require scheduling includes Related work Nthorder Badie et al learning minimum set heuristically selected source conflict l implements variation deep Prosser Burke use 3 scheduling problems solve onemachine shallow learning work The remainder paper organized follows Section 2 provides backtrack search study Sections 4 5 6 successively results contributions paper formal definition job shop CSP Section 3 describes procedure considered backtracking presented Section 7 Section 8 summarizes study Experimental schemes developed 2 The job shop constraint satisfaction problem The job shop scheduling problem j set resources RES R set operations O O Ob scheduled according routing FORE 0 jobs J R Each job jl consists process 0 BE specifies partial ordering operations scheduling set requires In lob shop CSP studied paper job j release date rd date dd operations performed Each operation Of fixed duration duf variable start time stf The domain initially constrained release possible start times operation dates job operation belongs model allows additional unary constraints set admissible restrict defining time windows start times operation operation carried shifts factory In order successfully executed operation Of requires pf scheduling different milling machine machinist Rfj 1 s j Gpf choose pool physical resources Rij G RES milling machines If necessary resources More formally problem defined follows N Sadeh et al I Artificial Intelligence 76 1995 455480 459 Variables A vector variables qr consists associated operation Of 1 s 1 G n 1 c c 1 start time sti operation 2 resource requirements Rf 1 j Constraints The nonunary constraints problem types 1 Precedence constraints defined process routings translate inequalities type stf duf stj Of BEFORE Of linear 2 Capacity constraints time operation VP fq R R v stf du Z stj v stj duf G stf These constraints ply express use different resources Of overlap3 disjunctive constraints form sim operations 0 restrict translate use resource Additionally model accommodate unary constraints restrict set possible values individual variables These constraints dates release dates operations performed More generally model accommodate constraint restricts Time assumed discrete set possible start times operation operation start times end times integer values resource requirement Rij selected set resource alternatives Oij c RES include nonrelaxable job need type unary Objective In job shop CSP studied paper feasible solution fast possible Notice simply minimizing time spent deciding search state explore come number search states visited It accounts objective objective different Example Fig 1 depicts simple job shop scheduling problem requirement single possible value jobs J jI j2 j3 j4 resources RES R R R R4 In example operation single resource It assumed jobs released time 0 completed required time 20 Please note simplifying assumptions release dates techniques operations requirements Note problem defined time 3 infeasible None operations resource R start complete sum durations operations discussed resource jobs different alternatives impossible 18 Hence requirements 3 These constraints generalized dealing resources capacity larger 460 N Sadeh et al I Artificial Intelligence 76 1995 455480 I j20f3R b H K f v I 0 5 R l j 0 4 R capacity constraint precedence constraint Fig 1 A simple problem jobs Each node labeled operation duration resource requires represents time 21 As observation form simple consistency checking rule However complexity easily operations operationalized number operations applying simple rule possible subsets operations given resource quickly prohibitive need selective applying checks Additionally feasible need rely complex mechanisms described passing check schedule grows guarantee problem exponential 3 The search procedure A depthfirst backtrack interleaved application consistency enforcing mechanisms vari states ablevalue described steer clear deadend ordering heuristics search procedure search considered attempt Fig 2 Specifically search starts state operations procedure scheduled The BASICDEPTHFIRST scheduling operations Each time operation search state created propagation procedure unscheduled operations Next operation reservation applied update selected consistency enforcing procedure selected operation The procedure goes recursively scheduled scheduled new constraint set possible reservations proceeds incrementally N Sadeh et al I Artificial Intelligence 76 1995 455480 461 Procdur BASICMPTEIRST 0 0 Than solution STOP If UUSCEEDOP LMi CONFLICT FALSE Call COIUSTRAINTPROPAGATION If CONFLICT FALSE lhmn Begin Lot OP Let RmsaIarIrwREsEnvoP limt possible romrvatiorm OPERSRLBCTION UWSCEEDOP OP ordarad hourimtic bomt rasarvatione fir according value orring Lat RRSERV Pop firat rwarvation Push OPRESBRV SCRQDLE Rm 0P OtiSCHED0P Call BASICDRPTRFIRST 0 RQURIIpIWaRILSERVOP znd El00 Call SIMPLBBACRTRACK 0 End If End Procoduro Procodura If sm SIMPLZBACKTRACX ra Than Lt rJOsoLDTIow TRW STOP operation remonmtion Rm Let OP operation pair Inert 0P WSCRBDOP If REIuxtmaoREsERvoP 0 pair pu8had SCEZDULB Than Bogin RRSBRV Pop ramrvation Push OPRBSERV SCEELXJLE R3tkIHIWORESERVOP Ramova OP UXSCRSDOP Call BASICDEPTRFIRST End Else Call SIMPLEBACRTRACR End If End Procodura Begin Program Lot scRRDvLE 0 Let WSCREDOP 0 1 ooooo Lat NOSOLtJTIOU FALSI Call BASICDEPTHFIRST0 If HOSOLDTIOW I FUSE Than PRINTSOLuTIObl Elm PRINT Infeasible Problem End If End Program Fig 2 Basic depthfirst backtrack search procedure detected calling operations successfully scheduled inconsis In case procedure needs undo tency conflict Fig 2 SIMPLE earlier decisions backtrack The backtracking mechanism systematically BACKTRACK procedure goes recently scheduled operation tries alternative reserva left procedure goes tions operation recently scheduled operation If procedure returns problem initial search state infeasible state schedule chronological If alternative backtracking reservation 462 N Sadeh et al Artificial Intelligence 76 1995 455480 The default consistency enforcing mechanisms heuristics study ones described 1823 briefly described compared favorably variablevalue ordering 18 These mechanisms number heuristics Consistency enforcing procedure The consistency enforcing procedure use combines consistency mechanisms 1 2 search state pair earliestlatest maintained longest path procedure constraints Consistency respect possible Consistency respect precedence precedence constraints incrementally updates start times unscheduled operation Essentially PERTCPM 14 earliest start time constraints propagated downstream Fig 3 job latest start time constraints propagated upstream The complexity simple propagation mechanism number precedence In absence capacity constraints constraints procedure sufficient Forward consistency checks respect capacity constraints Enforcing consistency respect capacity constraints difficult disjunctive nature constraints Whenever resource operation time interval forward checking mechanism 13 checks set remaining possible reservations operations requiring conflict new assignment proposed shown guarantee decomposability resource removes guarantee backtrackfree 15 Fig 4 reservations allocated linear 5 search 181 Before propagation j 0 3 R ro94 09l r0151 Downstream Propagation j oi3R 09l r7151 Upstream Propagation precedence constraint Fig 3 Consistency respect precedence constraints N Sadeh et al I Artificial Intelligence 76 1995 455480 463 Before propagation 7151 After propagatfon lo15 scheduled start time 6 mw_ _ capacity constraint Fig 4 Forward consistency checks respect capacity constraints operations enforcing mechanism 3 Additional consistency checks respect capacity constraints Addition intervals An Fig 5 operations ally default consistency unscheduled example situation availability requiring respective overlapping latest start times earliest finish times lstfeftf lstjeftj This additional consistency mechanism shown increase search efficiency resulting 0 time intervals O intervals require overlapping illustrated minor computational overheads resource resourcetime rely checks 18 I est I 1st est I 1st J I I efl eft J IftF Ift J c time earliest possible reservation latest possible reservation B time interval absolutely required operation Its start time Fig 5 Detecting situations unscheduled operations conflict requiring resource 464 N Sadeh et al I Artificial Intelligence 76 1995 455480 Variablevalue ordering heuristics The default variablevalue ordering heuristics search procedure Operation Resource Reliance ORR variable ordering heuristic Filtered Ml The ORR Survivable Schedules FSS value ordering heuristic described scheduling variable ordering heuristic aims reducing backtracking difficult operations operations resource requirements expected conflict operations The FSS value ordering heuristic constraining value ordering heuristic tracking selecting reservations number schedules reduce compatible large expected It attempts reported outperform time Nevertheless These default heuristics schemes described literature generic CSP heuristics specialized heuristics designed similar scheduling problems 1823 They provide efforts spent enforcing consistency ordering good compromise variables ranking assignments variable actual savings obtained search efficient procedures search schemes help recover deadend states We default consistency enforcing mechanisms andor variable ordering heuristics sufficient lookback mechanisms devised modify steer clear deadends schemes avoid repeating past mistakes avoid reaching similar deadend states The remainder paper describes new backtracking sufficient guarantee backtrackfree job shop CSP NPcomplete 4 Dynamic Consistency Enforcement DCE Backtracking hand Consequently generally indication deal subproblems default consistency enforcing ordering heuristics search procedure scheme andor variablevalue insufficient search keeps relying default mechanisms reaching deadend state likely start thrashing Experiments search set consistency enforcing procedures variablevalue ordering heuristics clearly illustrated Search experi ments exhibited dual behavior The vast majority problems fell solved backtracking categories category problems whatsoever caused search procedure far largest category category problems phenomenon 1823 thrash reported complete Theoretically thrashing eliminated enforcing search state Clearly approach performing identifying small subproblems conflict 2 determining far backtrack enforcing information involves 1 heuristically likely source consistency conflict consistency impractical possible reuse future backtracking episodes This approach search Instead approach small subproblems 3 recording variables N Sadeh et al I Artificial Intelligence 76 1995 455480 465 dynamically expected context backtracking DCE Given deadend technique source current deadend DCE scheme called Dynamic Consis state history earlier episodes search space working resource chronological order search state operationalized tency Enforcement backtracking problem subproblems backtracks undoing assignments reached consistency fully restored subproblem lems Experimental checking consistency deadends The remainder section describes heuristic critical resource subprob Section 7 suggest selectively small resource subproblems DCE quickly recover mechanics consistency respect capacity constraints results reported small critical identifies 41 Identifying critical resource subproblems PCS episodes current Set operations created maintained provided For capacity constraint violation operations The critical resource subproblems DCE consist groups operations conflict groups critical operations participating resources involving identified earlier backtracking identified default Below refer group unscheduled operations left consistency enforcing mechanism having possible reservations restore Fig 6 In order Partial Conjkting consistency search procedure needs search state PCS operation possible reservationsP DCE attempts identify additional operations maintaining group critical resource identified earlier backtracking episodes Below refer subproblems FDG Details data structure Former Dangerous Groups operations Section 43 data structure PCS DCE checks subproblems A FDG capacity constraint resource violation resource subproblem involved capacity constraint violation resource close end resource conflicts close conflicts considered close distance separating paper twice average operation duration Related critical subproblems greater identified inspecting merged corre PCS form new set critical resource sponding operations subproblems refer Dangerous Group operations subgroups resource conflict hand Like FDG DG resource close subproblems consisting operations contending overlapping subproblem PCS earlier backtracking episode operations time interval A parameter intervals While backtracking FDG data structure determine In experiments data structure retrieves considered organized related operations FDG resource reported related DG time 4 Clearly guaranteed sufficient operations contribute conflict 466 N Sadeh et al I Artificial Intelligence 76 1995 455480 Procodurm DEPTHFIRSTWITRDCR If UNSCRBDOP 0 Then 8olution STOP Let PCS 0 Call CONSTRAINTPROPAGATIOU places oparationm remaining rmservations PCs If PCS 0 Then Bogin Let OP OPBRSBLBCTION Lat RRHRININGRRSRRVOP UNSCERDOP list possible reeorvationa OP orderad according houriatic best roservatioas value ordering Let IuzSERv Pop raaorvation RBMININQRBSz8RVOP Pumh OPRRSRRV SCHlLDuLE Remavo OP UNSCEEDOP Call DEPTHFIRSTWITRDCE 0 End Begin Else Let DO mot conmolidatad resource mbproblama obtained subproblenu PCS related remurce merging mbproblrrrm FDO rmource Call DCEBACATRACX DO End End If Bad Procedure Procedure DCEBJUXTRACX DO If SCRBDDLE 0 Then Lat NOSOLUTION TRUE STOP Remove thm operation romrvation Let OP operation pair Insert OP DNSCRRDOP W Let CONFLICT FALSR For remurea sproblem pair punhod SCRBDULB DO prune set remaining rmsorvations operation mbproblom rampact capacity conmtrainta In procam poamiblo rasorvations left atop anforcing consistency Let CONFLICT TRUE enforcing consistency operation If CONFLICT FALSE Then Begin RRSLRV Pop rosorvation RBMRININGRBSBRVOP Pumh OPRRSERV SCRZDULB Ramova OP UNSCEBDOP UPDATEFWW Call DBPTAFIRSTWITSDCE 0 End Blaa Call DCEBACKTRACK DQ Bad If End Procedure Begin Program Lot scmm 0 Lot FW z Let NOSOLIJTION FUSE Let DNSCRBDOP 000000 Call DEPTHFIRSTWITHDCEO If NOSOLUTION FALSE Than PRINTSOLUTION Else PRINT Infeasible Problem End If End Program Fig 6 DCE procedure N Sadeh et al I Artificial Intelligence 76 1995 455480 467 scheduled subproblems creating new resource subproblems DG added inserted existing resource 42 Backtracking selectively enforcing consistency Once initial DG identified DCE backtracks undoing assignments consistency respect resource subproblems DG capacity DG As long conflicts backtrack unscheduled operations restoring consistent search state sufficient In effectiveness DCE critically depends ability heuristically chronological order reaches search state consistency restored resource subproblems defined operations Fig 6 This enforcing constraints detected inserted subproblems consistency resource subproblems backtrack words focus right resource subproblems procedure continues existing new resource necessary condition DG While enforced DG large kconsistency Because consistency checking expensive large subproblems resource subproblem instead consistency k parameter 9 In experiments reported end paper k set 4 At end backtracking episode DG maximum size DG Assuming procedure contain able backtrack operations origin deadend saved later use FDG data structure Additional details management If related backtracking data structure provided episode later encountered DG retrieved combined PCS new episode expected DG consistent search state DG subsection 43 Storing information past backtracking episodes The purpose Former Dangerous Groups operations FDG main tained help determine efficiently precisely scope deadend focusing critical resource subproblems Each group operations allocation resource Accordingly conflict detected involves operations group backtracking procedure checks consistency operations FDG consists operations high contention group The groups operations obtained end previous backtracking episodes backtracking episode FDG build Dangerous Groups DGs Indeed contain completed DG expected DG Note DCE expected effective recovering complex conflicts involving interactions multiple resource subproblems A heuristic effective complex conflicts described 6 Clearly guaranteed experimental results suggest case Section 6 468 N Sadeh et al I Artificial Intelligence 76 1995 455480 conflicting operations origin episode Generally DG involve resource subproblems requiring resource Each subproblems merged related subproblems currently stored FDG separately added data structure Finally operations scheduled removed If related group FDG new group groups operations FDG 44 An example require Fig 7 illustrates prior backtracking behavior DCE capacity constraints FDG Another conflict detected resource At point DCE enforces initially The procedure unschedules Fig 1 After scheduling operations 0 0 resource R small scheduling problem introduced left Given procedure detects operation 0 possible reservations episode FDG data structure PCS DG 0 recently scheduled operation Oi inserts DG operation 0 operations consistency respect operations7 finds consistency checking operations admit possible reservations This marks end backtracking episode The procedure possible reuse schedules operation 0 saves current DG FDG best available start time start time 6 In process 0 removed new search state marks beginning second backtracking episode This time consistency left enforcing procedure group PCS 0 dangerous schedules operation 0 DCE enforces consistency respect capacity DG Ot Oi O When finds current search state constraints returning inconsistent DCE proceeds unschedules operation 0 In search state root search state DG O Oi O Ol DG consistency respect problem indicates search states problem infeasible In contrast total 50 search small problem relying SIMPLE states BACKTRACK procedure outlined Fig 2 The example shows use Formerly Dangerous Groups FDG operations helps identify procedure critical resource detect inconsistency comes depth 1 second backtracking episode check consistency 0 Oz capacity constraints infeasible finds operation 0 possible reservations operations DG 0 0 A ccordingly In total generates If mechanism adds operation operations Using FDG subproblems time required 0 2consistency arcconsistency given operations This equivalent 9 Actually start time 6 start time picked reservation ordering heuristic The manually forced pick value example interesting 9 This time enforces 3consistency given operations DC N Sadeh et al I Artijkial Intelligence 76 1995 455480 469 Depth 0 Numbor statos vioitodr 0 FDGZI 0 scheduled betweon 14 20 Rp Depth 1 Number stat6 visited 1 FDG0 0 scheduled 9 14 R Depth 2 Number statea visited 2 FDGIZ conflict detected 0 possible reservations left PCSDG O Beginning backtracking episode1 0 unscheduled Depth 1 Number states visited 2 FDG0 3 2 DGl 03021 1 Full consistency checking respect capacity constraints DC Remaining possible start time8 0 3456 0 891011 FDG OO End backtracking eisodl 0 scheduled 6 11 OP R2 Depth 2 Number states visited 3 FDGOi Conflict detected 0 possible reeervations left PCS O DG OO Beginning second backtracking episode 0 uaschoduled Depth 1 Number states visited 3 FDGO DGWOOll Full consistency checking respect capacity constraints DC Conflict detected 0 unscheduled Depth 0 slumber states visited 3 FDGO DGl 020203021 I2 3 4 I pull consistency checking respect capacity constraints DC Conflict detectad Infeasible Problem End second backtracking episode Fig 7 An edited trace illustrating DCE procedure More generally experimental important results computation time increases results presented search efficiency important Section 7 DCE reductions 45 Additional watch dog consistency checks Because groups operations performs simple watch dog checks dynamic groups operations likely deadend candidates FDG 470 N Sadeh et al I Artificial Intelligence 76 1995 455480 More specifically group G operations FDG rough check resource accommodate group This redundant constraints form performs operations Maxlstf f duf Of E G Minestf Of E G 2 2 OfEG duf estf 1st respectively current search state earliest latest possible start times Of Whenever constraint violated inconsistency detected checks enable catch inconsistencies Though simple inexpensive involving immediately detected large groups operations default consistency mechanisms Clearly inconsistencies escape rough checks While backtracking watch dog checks prior consistency respect enforcing resource subproblems second backtracking instance sufficient detect DG Oi Oz O inconsistencies DG This significantly reduce computation capacity constraints critical time For Fig 7 simple checks depth 1 0 For example depth 1 episode Maxlstf duj Of E DG Minestf 0 E DG 14 3 11 duf 12 2 OfEDG 5 Learning Ordering From Failures LOFF Often participating reaching deadend state indication default variable dealing subproblem hand Typically ordering adequate operations schedule ones selected default variable ordering heuristic In words good idea schedule operations participating conflict resolved Learning Ordering From Failure LOFF adaptive procedure presence conflicts default variable ordering difficult deadend overrides turn After recovering deadend backtracking way apparently consistent search state LOFF uses Partial Conflicting Set PCS order operations rescheduled deadend reorganize sure operations This PCS scheduled PCS pushed descending order quasistack Qs operations domain size PCS operations large number remaining pushed quasistack When quasistack uses default variable ordering heuristic described reservations procedure Section 3 However N Sadeh et al I Artificial Intelligence 76 1995 455480 471 Qs contains operations ations ones operations smallest number remaining reservations quasistack procedure starting schedules oper Qs If candidate operation second time pushed Qs smaller domain This orders operations based recency conflict involved based number remaining reservations Qs encountered 6 An Incomplete Backjumping Heuristic focusing reduce identifying shallowdeep complexity Traditional backtrack focus smaller conflicts DCE procedure described search procedures undo decisions inconsistent Proving assignment effort small critical subproblems Because effective way deal complex conflicts learning attempt backtracking simplifying inconsistent proven expensive especially dealing large conflicts Graphbased backjumping Nthorder plexity fullblown dependencydirected process identifying constraint graph restricting Dynamic Consistency Enforcement aims reducing dynamically techniques complex conflicts involving large number variables heuristics simply heuristic described longer complete fail solutions Incomplete Backjumping Heuristic IBH Texture measures ones described com inconsistent decisions based topology size conflicts detected The Section 6 source conflict problems dealing It fact turn undo decisions proven inconsistent taken S estimate tightness different search states instance estimating number global solutions compatible search state Clearly search state loosely partial solution constrained compatible small number global solutions leading tighter search states tightly constrained Assignments prime candidates suspected The IBH study simpler Incomplete Backjumping Heurhtic sufficient Whenever heuristic backjumps way search state simply tries best value operation reservation search selected critical operation variable ordering heuristic compatible large number global solutions appear overly restrictive This approach undone complex conflict resulting search procedure feasible problems starts thrashing section Clearly state IBH considers Clearly illustrated conflicts involving watch dog checks described large numbers Section 4 variables easy catch 472 N Sadeh et al I Artificial Intelligence 76 1995 455480 procedure thrashing facing complex conflict 8 assignments undone time thrashing procedure began thrashing occurred earlier 8 parameter procedure 7 Empirical evaluation This section reports lookback schemes presented results empirical studies conducted performance reports performance suite 60 benchmark problems introduced followed detailed study comparing lookback secondorder compare LOFF incomplete procedure combining lookback schemes presented assess paper The study 18 This performance Finally relying DCE DCE LOFF backtracking performance complete search procedure paper DCE LOFF IBH introduced learning 4 chronological schemes deep paper 71 Performance evaluation suite problems introduced 18 In experiments A set experiments run testsuite 60 job shop scheduling problems 18 default variable value ordering heuristics study ORR FSS heuristics described variety Section 3 shown outperform failed solve 8 variablevalue 60 problems combina DCE LOFF IBH efficiently tion solve 60 problems ordering combinations In contrast results presented indicate testsuite techniques lookback reported Specifically requires scheduling operations testsuite consists groups problems Each jobs resources involves total 50 routing visit resources This number experiments visited number steps The groups problems obtained problem operations specifying sequence sequence varies job predetermined bottleneck varying job linear process parameters job Each resources 1 number priori bottlenecks BTNK BZNK 1 BTNK 2 2 spread SP release dates job The SP parameter utilization scheduled wide SP W narrow SP N null SP 0 operation durations adjusted remains close 100 span In problems operation slightly 100 possible start bottleneck problem N Sadeh et al I Artificial Intelligence 76 1995 455480 413 times values application consistency enforcing initial search state Additional details problems HI techniques Table 1 compares 1 basic depthfirst procedure described performance following procedures relying chronological enforcing Section 3 procedure backtracking variablevalue techniques Fig 2 procedure default consistency ordering heuristics described perform best Ml reported Table 1 Comparison chronological backtracking DCE LOFP IBH sets job shop problems Chronological DCE LOPP IBH SPW BTNK 1 SPW BTNK2 SPN BTNK 1 SPN BTNK2 SPO BTNK 1 SPO BTNK 2 Overall performance Search efficiency experiments solved 10 CPU seconds Search efficiency experiments solved 10 CPU seconds Search efficiency experiments solved 10 CPU seconds Search efficiency experiments solved 10 CPU seconds Search efficiency experiments solved 10 CPU seconds Search efficiency experiments solved 10 CPU seconds Search efficiency experiments solved 60 CPU seconds 096 10 885 099 10 93 078 8 3315 087 9 184 073 7 475 082 8 3005 086 52 2455 096 10 905 099 10 95 091 10 106 093 10 1195 088 10 1345 084 10 2265 092 60 1287 I1 The problems accessible anonymous ftp cimddcimdsricmuedu usrsadehpubliccsp_test_suite directory file details content files A README 474 N Sadeh et al I Artificial Intelligence 76 1995 455480 2 procedure schemes presented enhanced DCE LOFF IBH lookback paper For 60 problems search stopped problem category required 500 reported search states Performance dimensions 1 Search eficiency average ratio number operations scheduled total number search states explored absence backtracking operation search efficiency search state equal 1 generated In 2 Number experiments solved 500 search states 3 CPU seconds time approximated average CPU time required solve problem When solution CPU time taken explore 500 search states approximation chronological backtracking DCE LOFF IBH solved problems All CPU times obtained DECstation 5000 running Knowledge Craft Allegro Common Lisp Experimentation variation written run 30 times faster reimplemented search procedure language 19 C indicates approximately The results indicate scheme average proved DCE LOFF IBH consistently outperformed scheme terms CPU time search efficiency chronological backtracking SP W techniques number problems solved On easier problems time On solved 20 problems SP N SP 0 DCE LOFF IBH clearly dominated difficult problems In particular problems SP 0 BTNK chronological backtracking chronological 1 DCE LOFF IBH solved 40 problems 35 times faster Overall backtracking chronological backtracking failed solve 8 problems 60 DCE LOFF IBH efficiently solved 60 problems average backtracking Had twice fast procedure chronological stopped 500 search states backtracking procedure speedup achieved DCE LOFF IBH significant In chronological procedure fact based couple problems allowed expand larger number search states appears problems solved solved chronological backtracking 500 states require chronological thousands 72 Further evaluation To lookback evaluate testsuite schemes picked category difficult problem category default consistency enforcing procedure ordering heuristics SP 0 generated additional 80 scheduling problems 40 effective BTNK 1 40 BTNK 2 The SP 0 problem category difficult combinations variable value ordering problems heuristics tested study reported 18 It corresponds variablevalue N Sadeh et al I Artificial Intelligence 76 1995 455480 415 jobs released common date need completed common date Among resulting 80 problems report performance problems guarantee search This leaves 16 scheduling problems bottleneck backtrackfree SP 0 BTNK l 15 bottlenecks schemes sufficient SP 0 BTNK 2 default complete backtracking Below successively report results studies The compares performance schemes chronological tracking secondorder deep learning procedure combining DCE complete search LOFF backtracking heuristicsi procedure DCE LOFF incomplete search procedure combining DCE LOFF IBH The second study compares The results study comparing chronological backtracking order deep learning 4 DCE LOFF procedures advocated 5 summarized Tables 2 3 The results reported obtained search limit 500 nodes time limit 1800 seconds deep 36000 seconds14 All CPU learning time limit increased second Sections 4 Table 2 Results onebottleneck 1800sec deep learning node limit 500 experiments S solved F failure S proved infeasible time limit Exp No 1 2 3 4 5 6 I 8 9 10 11 12 13 14 15 16 Chronological DCE LOFF Deep learning No nodes 500 500 74 69 500 500 500 500 53 500 500 500 51 500 500 500 CPU set 1427 1587 148 152 1407 1469 1555 1705 108 1529 1460 1694 109 1762 1798 1584 Result No nodes F F S S F F F F S F F F s F F F 122 500 63 52 65 500 59 41 53 500 85 500 51 63 69 500 CPU set 1232 1212 117 120 134 1486 130 145 102 1536 1800 1131 81 138 142 1183 Result No Nodes S F s s s F s S s F F F s S S F 500 500 25 69 500 500 500 500 53 500 500 500 51 500 500 65 CPU set 5756 5834 36000 391 11762 8789 9681 9560 122 9114 14611 21283 88 18934 9600 36000 Result F F F S F F F F S F F F S F F F require backtracking r Clearly performance problems backtracking schemes invoked CPU time remains unchanged I3 Besides assess benefits DCE LOFF separately These experiments techniques contribute improvements I4 This motivated fact implementation deep learning optimal reported additional experiments performed experiments section reported 476 N Sadeh et al I Artificial Intelligence 76 1995 455480 times reported obtained DECstation 5000 running Knowledge indicated comparison Craft Allegro Common Lisp As C Knowledge Craft implementations similar variable value code run 30 times faster C indicates ordering heuristics 191 problems backtracking chronological On onebottleneck zebra problem chronological backtracking fact constraints solved 4 problems 16 Table 2 Interestingly deep learning showed improvement number problems solved CPU time As matter fact deep learning slow solutions problems solved chronological backtracking This job shop scheduling tightly attributed interacting deep improvement 4 On learning chronological backtracking originally ascertained hand DCE LOFF solved 10 problems 16 2 10 infeasible As expected focusing problems successfully proven able discover small number critical subproblems DCE LOFF larger learning requiring useful conflicts fraction time Another observation fewer chronological search states chronological backtracking took backtracking solved However slightly CPU time higher level consistency enforcement problems DCE LOFF expansions deep DCE LOFF expanded secondorder Results set twobottleneck problems reported results observed deep backtracking chronological Table 3 Similar significantly slower The difference shows improvement learning Table 3 Results twobottleneck 1800 set 36000 set deep learning node limit 500 experiments S solved F failure S proved infeasible time limit Exp No 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Chronological DCE LOFF Deep learning No nodes 500 500 84 56 51 500 500 52 500 500 66 56 54 500 500 CPU set 1139 1444 175 123 101 1531 1775 102 1634 1676 163 139 129 1676 1522 Result No nodes F F s S s F F s F F S s S F F 113 425 109 56 51 321 500 52 247 91 59 58 52 346 324 CPU set 1800 1800 202 112 113 1800 1357 115 974 1800 104 104 91 1800 1800 Result No Nodes F F s s s F F s s F s s s F F 18 115 84 56 13 328 500 33 500 26 66 58 54 500 296 CPU set 36000 36000 811 213 36000 36000 2793 36000 1519 36000 2240 281 28900 9031 36000 Result F F S S F F F F F F S S S F F N Sadeh et al I Artificial Intelligence 76 1995 455480 477 tween chronological backtracking DCE LOFF impressive set experiments As seen Table 3 chronological backtracking solved 7 15 problems DCE LOFF solved 8 On problems DCE LOFF DCE LOFF solved chronological backtracking turned slightly faster overall These impressive results suggest presence multiple bottlenecks introduces complex conflicts following subsection suggest case incomplete Results presented entailed IBH heuristic backtracking procedures effective 73 Complete versus incomplete search procedures Tables 4 5 compare performance complete search procedure combination IBH heuristic described search procedure Section 6 problems 8 problems DCE LOFF combined IBH solved 14 based DCE LOFF incomplete DCE LOFF While DCE LOFF solve 10 16 onebottleneck 15 twobottleneck problems The onebot onebottleneck solved DCE LOFF IBH tleneck problems problems identified infeasible complete procedure DCE LOFF Table 2 This hardly surprise While addition IBH DCE LOFF enables search procedure infeasible problems longer makes solve larger number problems 13 twobottleneck procedure incomplete problems Table 4 Results onebottleneck 1800sec node limit 500 experiments S solved F failure S proved infeasible time limit Exp No 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 DCE LOFF DCE LOFF IBH No nodes 122 500 63 52 65 500 59 41 53 500 85 500 51 63 69 500 CPU sed 1232 1212 117 120 134 1486 130 145 108 1536 1800 1131 81 138 142 1183 Result No nodes S F S S S F S S S F F F S S S F 350 203 63 52 65 127 59 457 53 67 74 164 51 63 69 156 CPU bed 1800 1124 123 116 144 424 125 1800 100 170 170 616 92 149 158 524 Result F S S S S S S F S S S S S S S S 478 N Sadeh et al I Artificial Intelligence 76 1995 455480 Table 5 Results twobottleneck 1800sec node limit 500 experiments S solved F failure S proved infeasible time limit Exp No 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 DCE LOFF DCE LOFF IBH No nodes 113 425 109 56 51 321 500 52 247 91 59 58 52 346 324 CPU set 1800 1800 202 112 113 1800 1357 115 974 1800 104 104 91 1800 1800 Result No nodes F F S S S F F S S F S S S F F 151 371 95 56 51 420 159 52 423 440 59 58 52 239 73 CPU set 456 1780 210 108 97 1800 534 96 1705 1800 113 112 102 512 195 Result S S S S S F S S S F S S S S S identified Additional experiments backtracking DCE LOFF IBH indicating IBH DCE LOFF contribute performance results good obtained combining IBH simple chronological improvement observed Tables 4 5 scheme produced Results twobottleneck problems IBH particularly effective problems This attributed twobottleneck assignments participating difficult assignments effective solving problems Table 5 suggest impact fact complex conflicts simply undo Instead IBH scheme provably wrong simply appear overly restrictive problems rise complex conflicts Identifying exact backtracking 8 Concluding remarks We CSP 1 2 3 presented lookback techniques job shop scheduling DCE heuristic Dynamic Consistency Enforcement focuses restoring consistency small critical subproblems Learning Ordering From Failure LOFF order Incomplete Backjumping Heuristic IBH thrashing occurs undo assignments inconsistent appear overly restrictive variables instantiated based earlier conflicts provably modifies technique dynamically N Sadeh et al I Artificial Intelligence 76 1995 455480 479 The significance research twofold techniques transportation manufacturing 1 Job shop scheduling problems nonrelaxable space time windows multiple applications health care We shown lookback heuristics combined reduce powerful previously developed search ii enable average complexity backtrack search solved procedure requirements While results reported excessive computational finding feasible require study obtained problems paper schedule optimization JustInTime schemes presented job shop scheduling problems described versions scheduling problem efficiently solve problems backtracking 19 2 This research points literature shortcomings dependencydirected com tracking schemes advocated earlier In particular parison secondorder deep learning indicates technique failed improve performance set job shop scheduling problems More techniques appear generally Nthorder deep shallow learning inadequate applied job shop scheduling problems size decide record earlier rely solely constraint failures When smallsize conflicts fail record important constraints consider larger conflicts complexity prohibitive A general weakness traditional backtracking schemes fact undo assignments proven source conflict When dealing large complex conflicts proving suggest thrashing expensive easily avoided idea use incomplete backjumping heuristics undo decisions simply appear overly restrictive Instead experiments better undone computational particular limit assignment techniques References l C Badie G Bel E Bensana G Verfaillie Operations solve scheduling problems research artificial intelligence Proceedings First International Conference cooperation Expert Planning Systems 1990 2 JR Bitner EM Reingold Backtrack programming techniques Commun ACM 18 11 1975 651655 3 P Burke P Prosser A distributed scheduling Technical Report AISL42 Department Strathclyde Glasgow Scotland 1989 asynchronous reactive Computer Science University predictive 41 R Dechter Enhancement schemes constraint processing backjumping learning cutset decomposition Artif Intell 41 1989 273312 5 R Dechter I Meiri Experimental techniques Proceedings ZJCAZ89 Detroit MI 1989 271277 evaluation preprocessing satisfaction problems constraint 6 R Dechter J Pearl Networkbased heuristics constraint satisfaction problems Artif Zntell 34 1 1988 l38 480 N Sadeh et al 1 Artificial Intelligence 76 1995 455480 7 J Doyle A truth maintenance 8 MS Fox N Sadeh C Baykan Constrained heuristic search Artif Zntell 12 3 1979 231272 Proceedings IJCAI89 Detroit MI 1989 309315 9 EC Freuder A sufficient condition backtrackfree search J ACM 29 1 1982 2432 lo MR Garey DS Johnson Computers Intractability A Guide Theory NPCompleteness Freeman San Francisco CA 1979 ll J Gaschnig Performance measurement analysis certain search algorithms Technical Report CMUCS79124 Computer Science Department Carnegie Mellon University Pitts burgh PA 1979 12 SW Golomb LD Baumert Backtrack programming 13 RM Haralick G L Elliott Increasing problems Artif Zntell 14 3 1980 263313 J ACM 12 4 1965 516524 tree search efficiency constraint satisfaction 14 LA Johnson DC Montgomery Operations Research Production Planning Scheduling Inventory Control Wiley New York 1974 15 C Le Pape SF Smith Management temporal constraints factory scheduling Technical Report The Robotics Institute Carnegie Mellon University Pittsburgh PA 1987 Information Systems Paris France Proceedings Working Conference Temporal Aspects 1987 16 AK Mackworth EC Freuder The complexity polynomial network consistency algorithms constraint satisfaction problems Artif Intell 25 1 1985 6574 17 PW Purdom Jr Search rearrangement backtracking polynomial average time Artif Intell 21 1983 117133 18 N Sadeh Lookahead techniques microopportunistic job shop scheduling PhD Thesis School Computer Science Carnegie Mellon University Pittsburgh PA 1991 19 N Sadeh Microopportunistic MS Fox M Zweben eds Intelligent Scheduling Morgan Kaufmann San Mateo CA 1994 Chapter MICROBOSS factory scheduler scheduling 20 k Sadeh MS Fox Preference constraint graphs propagation Technical Report CMUCS88193 Comuter Science Department Carnegie Mellon University Pittsburgh PA 1988 Robotics Institute Technical Report CMURITR892 temporalcapacity 21 N Sadeh MS Fox Focus attention activitybased scheduler Proceedings NASA Conference Space Telerobotics 1989 22 N Sadeh MS Fox Variable value ordering heuristics jobshop Proceedings Fourth International Conference Expert Systems Production scheduling Operations Management Hilton Head Island SC 1990 134144 activitybased 23 N Sadeh MS Fox Variable value ordering heuristics hard constraint satisfaction job shop scheduling Technical Report CMURITR9123 The problems application Robotics Institute Carnegie Mellon University Pittsburgh PA 1992 24 R Stallman G Sussman Forward reasoning dependencydirected circuit analysis Artif Intell 9 1977 135196 computeraided backtracking 25 K Sycara S Roth N Sadeh MS Fox Distributed constrained heuristic search IEEE Trans Syst Man Cybern 21 6 1991 26 RJ Walker An enumerative R Bellman M Hall eds Combinatorial Analysis Proceedings Symposium Applied Mathematics AMS Providence RI 1960 9194 Chapter 7 class combinatorial problems technique