Artiﬁcial Intelligence 175 2011 2548 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint NonMarkovian control Situation Calculus Alfredo Gabaldon Center Artiﬁcial Intelligence New University Lisbon Lisbon Portugal r t c l e n f o b s t r c t Article history Available online 3 April 2010 Keywords Reasoning actions Situation Calculus In reasoning actions commonly assumed dynamics domains satisﬁes Markov Property executability conditions effects actions fully determined present state This true particular In paper generalize Reiters Basic Action Theories Situation Calculus Basic Action Theories removing Markov property restriction making possible directly axiomatize actions effects executability conditions depend past alternative hypothetical situations We generalize Reiters regression operator main computational mechanism reasoning Basic Action Theories nonMarkovian theories 2010 Elsevier BV All rights reserved Since 1960s John McCarthys papers particular 1969 paper Pat Hayes appeared introducing Situation Calculus researchers studying working language reasoning dynamic domains The Situation Calculus Johns great inventions topic paper I delighted opportunity contribution special issue Johns honor 1 Introduction An assumption commonly formalisms reasoning effects actions called Markov property executability action effects entirely determined current state situation In particular Reiters Basic Action Theories 2 Situation Calculus 34 based axiomatization deﬁne value ﬂuent execution action terms formula talk situation action executed The preconditions action speciﬁed formulas restriction In paper generalize Basic Action Theories removing restriction The generalized theories allow executability conditions effects action depend holds action occur certain conditions satisﬁed different points past alternative hypothetical evolutions As example imagine robot works biological research facility different safetylevel areas The dynamics material considered contaminated robot touches robot low safety area directly contact hazardous material disinfection station So effect touching material depends history robot activities We imagine robot execute action openEntrance Lab1 tempLab1 30 true time closedEntrance Lab1 occurred The example action nonMarkovian preconditions In simple scenarios diﬃcult extend theory preserve necessary history means new state variables especially domain ﬁnite But complex domains obvious A preliminary abstract paper appeared Proc AAAI02 A Gabaldon 2002 1 Email address agdifctunlpt 00043702 matter 2010 Elsevier BV All rights reserved doi101016jartint201004012 26 A Gabaldon Artiﬁcial Intelligence 175 2011 2548 resulting theory substantially complex larger number state variables corresponding axioms describing dynamics Our goal paper generalize Reiters Basic Action Theories 52 removing Markov property requirement generalize main reasoning mechanism theories regression operator R nonMarkovian theories applied Situation Calculus formulas refer past alternative evolutions deﬁnite future situations This generalized regression operator useful cases action theory nonMarkovian Even background theory Markovian operator useful answering queries refer past situations quan tiﬁcation subsequence relation cid2 This possible Reiters original regression operator In 2 Section 48 Reiter presents specialized procedures evaluating certain historical queries respect database log se quence ground action terms Markovian action theory Those queries small subset class queries generalized regression operator present handle Our work relevant variety research problems involve formalization dynamic properties 1 Some work database theory concerned semantics dynamic integrity constraints 67 These constraints typically expressed Past Linear Temporal Logic logic temporal connectives Previous Sometime past Always past Since In formalization database Situation Calculus temporal connectives references past situations constraints restrictions sequence actions considered legal database evolution These past temporal logic connectives encoding formulas nonMarkovian Situation Calculus logical framework study speciﬁcation modeling databases dynamic integrity constraints The advantage carrying work framework different aspects problem database dynamics transactions constraints captured Situation Calculus framework 2 Also area databases speciﬁcally work database transaction systems rollback operation reverts database original state long transaction fails canceled clearly nonMarkovian ﬂavor effects depend true state executed state right transaction reversed started Indeed Kiringa 8 Kiringa Gabaldon 910 present logical speciﬁcations database transactions nonMarkovian Situation Calculus 3 In planning domain dependent knowledge search control great success 1112 Bacchus Kabanzas forwardchaining planning TLPlan uses search control knowledge form temporal logic mulas The approach applied Situation Calculus simple planners written Golog 2 The planners perform forward search eliminating partial plans lead bad situations Search control knowledge encoded predicate badSituations deﬁnition restricted properties current situation s The generalization action theories regression operator shall develop allows def inition predicate refer situation precedes s bounded future situations As mention past temporal logic expressions encoded Situation Calculus formulas suitable regression gen eralized operator deﬁnition badSituations In words generalized regression operator allows use temporal search control knowledge similar form expressive power TLPlan directly Golog planners badSituations predicate Search control knowledge context explored recent work 1314 4 Another area nonMarkovian features arise naturally specifying reward functions decision theoretic plan ning There agents rewarded based longterm behavior current state affairs Bacchus Boutilier Grove 1516 developed techniques solving nonMarkovian Decision Processes More recent work nonMarkovian rewards appears 1718 5 Finally time ago John McCarthy 19 described programming language called Elephant 2000 features forget This language allow write programs explicitly directly refer past states programming environment The generalized regression operator present form foundation nonforgetting Golog 20 Such dialect Golog allow test conditions refer past instance statement P Q δ This paper organized follows start Section 2 overview Situation Calculus Reiters Basic Action Theories In Section 3 introduce class Situation Calculus formulas refer past ﬁnite future situations regressed based generalization action theories nonMarkovian control In Section 4 present regression operator works formulas theories prove correctness followed Prolog implementation Section 5 concluding remarks Section 6 2 Overview Situation Calculus Basic Action Theories The Situation Calculus 34 dialect classical logic representing reasoning dynamically changing worlds A theory language consists collection axioms describing world changes actions occur Accordingly ontology Situation Calculus includes main ingredients actions situations ﬂuents Situ A Gabaldon Artiﬁcial Intelligence 175 2011 2548 27 ations refer possible evolutions histories world identiﬁed sequences actions occurred history Fluents properties world change time Since McCarthy introduced Situation Calculus adopted languages differing axiomatizations In paper use version described 5212 formal deﬁnition review 21 Situation Calculus The Situation Calculus refer version denoted Lsitcalc secondorder language equality disjoint sorts called action situation object In addition standard logical symbols vocabulary includes A countably inﬁnite number variable symbols sort predicate variables arities The constant symbol S0 sort situation represent initial situation world action occurs The function symbol sort action situation cid2 situation form sequences actions A term doa s represents situation action executed situation s The binary predicate symbol cid2 represent ordering relation situations Intuitively s cid2 s situation s precedes s terms sequences actions s proper preﬁx sequence actions s The binary predicate symbol Poss action situation The intuitive meaning Possa s situation s cid4 cid4 means cid4 possible execute action For n cid2 0 ﬁnite countably inﬁnite number function symbols sort action objectn cid2 action called action functions For example A B writeagent3 nextChapterThesis s We refer action function action type action function instances For n cid2 0 ﬁnite countably inﬁnite number predicate symbols sort action objectn situation called relational ﬂuents countably inﬁnite number function symbols sort action objectn situation cid2 action object called functional ﬂuents For example cid2 cid2 cid3cid3 A B A B S0 For n cid2 0 ﬁnite countably inﬁnite number nary predicates functions situation argument expressing situation independent relations properties world change result actions For example distancecsDept mathDept The following Foundational Axioms denoted Σ characterize situations precedence relation cid2 doa1 s1 doa2 s2 a1 a2 s1 s2 cid4 P P S0 s s cid2 S0 cid2 s cid2 s cid4 s s P s P s cid2 s doa s cid3cid5 cid3 cid2 cid4 cid4 sP s 1 2 3 4 Axiom 1 unique names axiom function captures intuition different histories sequences actions different situations Axiom 2 deﬁnes situations built function This deﬁnition inductive axiom secondorder Axiom 3 stipulates S0 preceding situations capturing intuition initial situation axiom 4 induction axiom deﬁnes precedence relation cid2 22 Basic Action Theories The foundational axioms Σ domain independent Situation Calculus axiomatization dynamic world The domain dependent consists set axioms describing initial state world set axioms describing conditions actions executable set axioms describing ﬂuents changes actions occur The notion uniform formula useful describing axioms Deﬁnition 1 Uniform formulas Let σ term sort situation The Lsitcalc terms uniform σ inductively deﬁned smallest set terms 1 Any term mention term sort situation uniform σ 2 If g nary nonﬂuent function symbol t1 tn terms uniform σ sorts appro priate g gt1 tn uniform σ 3 If f n 1ary functional ﬂuent symbol t1 tn terms uniform σ sorts appropriate f f t1 tn σ uniform σ 28 A Gabaldon Artiﬁcial Intelligence 175 2011 2548 The formulas Lsitcalc uniform σ inductively deﬁned smallest set formulas 1 Any formula mention term sort situation uniform σ 2 When F n 1ary relational ﬂuent t1 tn terms uniform σ sorts appropriate F F t1 tn σ formula uniform σ 3 If U 1 U 2 formulas uniform σ U 1 U 1 U 2 vU 1 provided v variable sort situation For action type Acid12x1 dynamic world axiomatization includes axiom deﬁning action exe cutable These axioms deﬁne relation Possa s Deﬁnition 2 Action precondition axiom An action precondition axiom sentence form cid2 cid3 Poss Ax1 xn s Π Ax1 xn s A nary action function symbol Π Ax1 xn s formula free variables x1 xn s uniform s For ﬂuent relational functional axiom deﬁning ﬂuents value execution action included dynamic world axiomatization Deﬁnition 3 Successor state axioms A successor state axiom n 1ary relational ﬂuent F sentence form cid2 cid3 x1 xn doa s F ΦF x1 xn s ΦF x1 xn s formula free variables x1 xn s uniform s A successor state axiom n 1ary functional ﬂuent f sentence form cid2 cid3 x1 xn doa s f y φ f x1 xn y s φ f x1 xn y s formula free variables x1 xn y s uniform s The righthand sides action precondition successor state axioms required uniform situation variable s This exactly Markov property enforced theories Intuitively executability conditions action value ﬂuents successor situation deﬁned terms current situation A collection axioms forms known Basic Action Theory Deﬁnition 4 Basic Action Theories An Lsitcalc Basic Action Theory D collection axioms D Σ Dss Dap Duna DS0 Σ foundational axioms 14 Dss set successor state axioms ﬂuent Dap set action precondition axioms action type Duna set unique axioms actions pickupx cid13 putdown y stackx y stackx cid4 y cid4 x cid4 y y x cid4 DS0 set ﬁrst order sentences uniform S0 These axioms initial state world referred initial database 3 NonMarkovian theories In section introduce NonMarkovian Basic Action Theories In Markovian action theories Markov assumption realized requiring formulas action precondition axioms successor state axioms refer sit uation variable s prenex universally quantiﬁed axioms In nonMarkovian action theories situation terms s allowed restriction refer past alternative explicitly bounded evolu tion To formal need introduce notion situationbounded formulas Intuitively Lsitcalc formula bounded situation term σ situation variables mentions restricted equality cid2 predicate range subsequences σ This notion useful order apply regression formula needs know actions situation regression steps apply A formula mentions situation variable regressed provided variable restricted subsequence situation term known number actions This intuitions precise 1 cid12t denotes tuple terms t1 tn A Gabaldon Artiﬁcial Intelligence 175 2011 2548 29 Fig 1 Intuitively formula bounded situation term rooted ρ σ rooted S0 shown solid line tree situations means quantiﬁed situation variable s formula restricted range situations S0 σ fall solid line depicted b successor situation s mentioned formula σ cid4cid4 rooted s The formula turn subformula bounded situation term rooted s σ cid4cid4 quantify variables long fall solid line S0 σ cid4cid4 A formula bounded σ regressed possible determine length situation terms regression For example choose value s know length know length σ know example situation variable ranging situations length σ cid4cid4 dotted branches regressed possible bound length s explicitly enumerate actions occur s σ cid4cid4 On hand formula s σ cid4 cid2 s F s The following notation n cid2 0 write doα1 αn ρ denote term doαn doαn1 doα1 ρ sort situation α1 αn terms sort action ρ stands variable s sort situation constant S0 For situation term refer ρ root term If n 0 doα1 αn ρ stands root ρ Also 1 n term doα1 αi ρ preﬁx doα1 αn ρ If n proper preﬁx For term doα1 αn ρ n cid2 0 n length term Deﬁnition 5 Rooted situation terms For n cid2 0 let α1 αn terms sort action A term doα1 αn s rooted s iff s variable sort situation mentioned α1 αn A term doα1 αn S0 rooted S0 iff α1 αn mention variables sort situation Recall action functions terms sorts object action arguments language includes cid4 s perfectly legal situation term functional ﬂuents appear terms For instance A f doB s Notice according deﬁnition term rooted The reason s variable term cid4 mentions s Next introduce related notion uniformly rooted formulas These formulas situation terms common functional ﬂuent term f B s cid4 root intuitively truth value relativized root Deﬁnition 6 Uniformly rooted formulas Let ρ constant S0 variable sort situation The Lsitcalc formulas uniformly rooted ρ inductively deﬁned follows 1 If σ1 σ2 terms sort situation rooted ρ σ1 cid2 σ2 uniformly rooted ρ 2 If t1 t2 terms sort subterms sort situation rooted ρ t1 t2 uniformly rooted ρ 3 If W formula mention terms sort situation W uniformly rooted ρ 4 If F t1 tn σ relational ﬂuent atom terms sort situation mentioned t1 tn rooted ρ σ rooted ρ F t1 tn σ formula uniformly rooted ρ 5 If W 1 W 2 formulas uniformly rooted ρ W 1 W 1 W 2 vW 1 provided v different ρ 31 Bounded strictly bounded formulas We deﬁne class bounded strictly bounded formulas Lsitcalc NonMarkovian Basic Action Theories based The following abbreviations useful writing kind formulas cid2 cid2 s σ cid4 cid2 σ cid4cid4 cid2 σ s σ cid4 cid2 σ cid4cid4 cid2 σ cid3 cid3 W cid4 def s def s σ cid4 cid2 σ cid4cid4 σ cid4cid4 cid2 σ W cid4cid2 σ cid4 cid2 σ cid4cid4 σ cid4cid4 cid2 σ cid3 W cid5 cid5 W 5 rooted s Any cid2 replaced cid15 We write s σ cid4cid4 cid2 σ W shorthand Here σ cid4cid4 s S0 cid15 σ cid4cid4 cid2 σ W sS0 cid15 s logical consequence foundational axioms Σ The regression operator deﬁned 521 requires terms sort situation form cid12α S0 Intuitively allows determining iterations required order regress formula relative S 0 Our goal generalize regression formulas refer situations quantiﬁed variables Since possible regress formulas variables refer arbitrary situations sF s deﬁne class regressable formulas based notion bounded formulas introduce Quantiﬁed situation variables restricted formulas way number regression steps remains bounded Fig 1 explains intuition 30 A Gabaldon Artiﬁcial Intelligence 175 2011 2548 Fig 2 Situation tree Example 1 The existentially quantiﬁed variable s cid4 equal doget_coffee S0 tree S 0 tree Deﬁnition 7 Bounded formulas Let ρ situation variable constant S 0 The formulas Lsitcalc bounded situation term rooted ρ smallest set formulas 1 If W atom uniformly rooted ρ W bounded situation term rooted ρ 2 If W propositional combination formulas bounded situation term rooted s ρ b σ cid4 mention variable s c σ cid4cid4 rooted s d σ rooted ρ then2 s σ cid4 cid2 σ cid4cid4 cid2 σ W formula bounded situation term rooted ρ 3 If W 1 W 2 formulas bounded situation terms rooted ρ W 1 W 1 W 2 vW 1 v sort action object formulas bounded situation term rooted ρ In deﬁnition bounded formulas particular situation term σ deﬁned bound formula We formula bounded situation term rooted ρ The reason situation terms important root ρ Indeed item deﬁnition W 1 W 2 situation term common ρ But bounded term rooted ρ guarantee combination bounded term rooted ρ Throughout paper talk formula bounded speciﬁc term σ usually occurs formula The following example attempts illustrate deﬁnitions Example 1 Suppose σ denotes following situation term get_coffee deliver_coffee gotoMailRm S0 cid2 cid3 consider sentence cid2 s S0 cid15 doa s cid2 σ cid3 batteryCharged cid2 cid3 dochargeBatt s Intuitively sentence says situation s strictly preceding σ action occurs action chargeBatt successfully charged battery This sentence bounded term rooted S 0 particular σ Indeed situation variables mentioned restricted range subsequences σ The subformula batteryCharged cid2 cid3 dochargeBatt s turn bounded term rooted s dochargeBatt s The existentially quantiﬁed variable s ranges subse quences doget_coffee S0 Notice subformula refers situation dochargeBatt s preﬁx σ See Fig 2 depiction situation tree example In example showed bounded formulas refer situations directly lie bounding sequence actions This allows reasoning held evolution world diverted 2 As cid2 replaced cid15 A Gabaldon Artiﬁcial Intelligence 175 2011 2548 31 Fig 3 In contrast bounded formulas strictly bounded formulas term σ cid4cid4 situations rooted quantiﬁed variable s σ s preceding different direction starting past point Another class formulas restriction useful later deﬁning NonMarkovian Basic Action Theories Formulas class allowed refer situations predecessors bounding situation In terms Fig 1 situation variables restricted situations s σ They allowed deviate line σ cid4cid4 ﬁgure Formally introduce strict version boundedness Deﬁnition 8 Simple situation terms A situation term doα1 αn s simple iff terms sort situation mentioned α1 αn preﬁxes doα1 αn s Clearly simple situation terms rooted The situation term cid2 cid2 A f cid2 doB s cid3cid3 s cid3 rooted simple doB s preﬁx The term cid2 cid2 cid3 f s A s cid3 simple Deﬁnition 9 Strictly bounded formulas Let σ simple situation term The formulas Lsitcalc strictly bounded σ smallest set formulas 1 If W atom terms sort situation preﬁxes σ W strictly bounded σ 2 If simple situation term mention variable s simple situation term rooted s σ cid4 b σ cid4cid4 c W propositional combination formulas strictly bounded σ cid4cid4 then3 s σ cid4 cid2 σ cid4cid4 cid2 σ W formula strictly bounded σ σ 3 If W 1 W 2 formulas strictly bounded σ W 1 W 1 W 2 vW 1 v sort action object formulas strictly bounded σ Clearly formula Example 1 possible situation instances shown Fig 2 strictly bounded formula If replace situation term dochargeBatt s formula doa s obtain following formula strictly bounded cid2 s S0 cid15 doa s cid2 σ batteryCharged cid3 cid2 cid3 doa s The following example shows strictly bounded formulas expressive encode Past Linear Temporal Logic modalities formulas capture intuitive meaning past linear temporal logic connectives S Example 2 In Situation Calculus referring past means referring past situations In sense write cid3 previous follows ϕs denote Situation Calculus formulas single past free variable sort situation suppressed ϕs denotes situation suppressed formula variable s reinstated cid4 past ϕ1 S ϕ2s def cid2 cid4 s cid4 cid2 s s cid3cid6 cid2 ϕ2s cid4 cid4cid4 s cid4 cid2 s cid4cid4 cid15 s s cid3 cid5cid7 cid4 cid4cid4 s ϕ1 3 Any cid2 replaced cid15 32 A Gabaldon Artiﬁcial Intelligence 175 2011 2548 cid4 cid3 cid3 cid2 s s s def cid2 cid3 ϕ cid2 cid4 ϕ s cid3 cid2 cid2 s def ϕ s def s cid2 cid4 s cid4 cid2 s cid4 cid2 s cid4 s ϕ cid2 s cid4 cid3 cid4 ϕ cid3 s cid4 cid4 cid4 cid5 cid5 cid3 cid3 cid4 cid5 cid4 s ϕ s It easy formulas strictly bounded 32 NonMarkovian Basic Action Theories We ready deﬁne action precondition axioms successor state axioms NonMarkovian Basic Action Theories Deﬁnition 10 Action precondition axioms An action precondition axiom sentence form cid2 cid3 Poss Ax1 xn s Π Ax1 xn s A nary action function symbol Π Ax1 xn s ﬁrst order formula free variables x1 xn s bounded situation term rooted s mention predicate symbol Poss Example 3 Suppose robot works lab door opened temperature inside reached dangerous level d closed The robots theory include precondition axiom Poss cid2 cid3 openDoor s cid2 cid2 s1 S0 cid15 cid2 closeDoor s1 s2 s1 cid2 doa s2 cid15 s s2 s1 cid2 s2 cid15 stempDoor s2 d cid3 cid15 s cid3 cid13 openDoor cid3 Using temporal logic abbreviations plus abbreviation occas def s cid4doa s cid4 s formula following readable form cid2 cid2 cid2 cid3 Poss openDoor s occ cid3 openDoor tempDoor d cid3 cid2 cid3 closeDoor s S occ The rhs action precondition axioms required strictly bounded bounded allows referring situations branching away hypothetical futures For instance axiom include condition saying robot openDoor possible human robot human hurt PossopenDoor s ahurtperson doa doopenDoor s Deﬁnition 11 Successor state axioms A successor state axiom n 1ary relational ﬂuent F sentence form cid2 cid3 x1 xn doa s F ΦF x1 xn s ΦF x1 xn s ﬁrst order formula free variables x1 xn s strictly bounded s mention constant S0 predicate symbol Poss A successor state axiom n 1ary functional ﬂuent f sentence form cid2 cid3 x1 xn doa s f y φ f x1 xn y s φ f x1 xn y s ﬁrst order formula free variables x1 xn y s strictly bounded s mention constant S0 predicate symbol Poss The requirement S0 appear rhs successor state axioms technical introduced simplify proofs essential variables S0 cause trouble require restrictions notions like bounded formulas Moreover possible express conditions initial situation referring indirectly For instance condition P hold initially expressed s1 s1 cid2 sP s1 s2 s2 cid2 s1True On hand condition rhs successor state axioms strictly bounded relaxed Bounded strictly bounded formulas cause regression fail Consider following successor state axioms cid3cid3 P cid2 cid3 cid2 cid2 cid4 cid3 doa s cid2 cid3 doa s Q s cid2 s cid4 cid2 s cid4 cid2 s s cid4 s Q cid3 cid2 P cid2 cid2 B1 B2 B3 s cid4 C1 C2 C3 s cid4 cid3cid3 Applying steps regression atom P A1 A2 S0 instance results atom Q doB 1 B2 B3 S0 turn regressed P B1 C1 C2 C3 S0 cid2 cid3cid3 P cid2 cid2 cid2 C1 C2 C3 S0 cid3cid3 Clearly regression working situation terms continue lengthen For action precondition axioms problem occur predicate Poss allowed appear rhs axioms A Gabaldon Artiﬁcial Intelligence 175 2011 2548 33 Example 4 Consider robot works bioresearch lab One successor state axioms theory cid2 polluted cid3 pollutedmat s mat doa s touchmat locsafetyLevelloc Low cid3 cid2 atLocDisinfSt S atLocloc s Deﬁnition 12 NonMarkovian Basic Action Theories A NonMarkovian Basic Action Theory D theory Lsitcalc consisting following set axioms The foundational axioms Σ A set successor state axioms Dss Deﬁnition 10 A set action precondition axioms Dap Deﬁnition 11 A set unique names axioms actions Duna A set ﬁrst order sentences DS0 mention situation terms S0 represent initial state world 33 Two relativity properties Intuitively strictly bounded formula property truth value depends past relative situation bound truth value depends truth value ﬂuents situation history situation independent predicates functions The following theorem conﬁrms intuition cid4 structures Lsitcalc domain Act sort action Obj sort object Sit sort situation Theorem 1 Let S S let v variable assignment ranging domains Furthermore let φ Lsitcalc formula strictly bounded σ mention Poss free variable sort situation root σ If cid4 satisfy foundational axioms Σ 1 S S cid4 2 S 3 interpretation action functions situation independent functions predicates S S cid4 cid15 σ cid4 S v cid17 s 4 relational ﬂuent F cid12x s cid3 cid4 cid4 cid12x s v cid17 F cid4 S v cid17 s cid3cid3 cid2 vcid12x v 5 functional ﬂuent f cid12x s cid4 cid2 vcid12x v cid4 cid15 σ then4 S v cid17 F f S cid12x s f S cid3cid3 iff cid2 cid2 cid2 cid3 cid2 S s s cid4 cid4 cid4 cid4 S v cid17 φ iff cid4 S v cid17 φ Intuitively conditions 13 sure structures S S cid4 situation independent language Then conditions 4 5 require S S ﬂuents situations preceding σ Then according theorem conditions structures S S truth value formula φ strictly bounded σ coincide interpretation tree situations coincide value coincide cid4 cid4 Lemma 1 Let σ simple situation term S S satisﬁed Let t term sort subterms sort situation preﬁxes σ Then v S t v S v statement Theorem 1 suppose conditions 15 t cid4 cid4 Proof If t variable lemma obvious Suppose t variable Suppose v S t cid13 v S t Then subterm gr1 rn t v S ri v S ri 1 n g S v S r1 v S rn cid13 g S r1 v S v S rn If g function contradiction condition 2 If g action situation independent function condition 3 contradiction Finally g functional ﬂuent symbol argument preﬁx σ Then condition 5 contradiction cid4 cid4 cid4 cid4 cid4 cid4 Corollary 1 Let S S cid4 v Lemma 1 let σ cid4 σ simple situation terms Then S v cid17 σ cid4 σ iff S v cid17 σ cid4 cid2 σ iff cid4 cid4 v cid17 σ cid4 σ v cid17 σ cid4 cid2 σ S S 4 vcid12x denotes vx1 vxn xi s variables cid12x vxi value assigned xi variable assignment v 34 A Gabaldon Artiﬁcial Intelligence 175 2011 2548 Proof Since σ cid4 follows condition 1 cid4 σ simple situation terms Lemma 1 v S σ cid4 v S cid4 σ cid4 v S σ v S cid4 σ The corollary Proof Theorem 1 Let structures S S theorem suppose conditions 15 satisﬁed cid4 variable assignment v formula φ described statement The proof induction syntactic structure φ We following cases 1 Suppose φ atom form σ cid4 cid2 σ σ cid4 σ Then deﬁnition strictly bounded formulas terms sort situation σ cid4 preﬁxes σ σ cid4 simple The theorem follows Corollary 1 2 Suppose φ atom form t1 t2 t1 t2 terms sort action object As terms sort situation t1 t2 preﬁxes σ The theorem follows Lemma 1 3 Suppose φ situation independent relational atom P cid12t cid12t terms sort action object Then terms sort situation cid12t preﬁxes σ The theorem follows Lemma 1 condition 3 4 Suppose φ relational ﬂuent atom F cid12t σ cid4 Then terms sort situation cid12t σ cid4 preﬁxes σ The theorem follows Lemma 1 condition 4 5 Suppose φ nonatomic formula form s cid4 sitional combination formulas strictly bounded σ cid4 mapping variable s situation terms Thus Corollary 1 S v s cid17 σ cid4cid4 cid2 σ cid4 σ iff S Suppose S v cid13cid17 s S Suppose S v cid17 s subformula W subformula W cid4 v cid13cid17 φ theorem holds cid4 σ cid4cid4 cid2 σ cid4 σ Then corollary S cid4 cid4 element s Sit By deﬁnition strictly bounded formulas σ cid4cid4 cid4 σ cid4cid4 cid2 σ cid4 σ W s cid4 σ cid4cid4 cid2 σ cid4 cid2 σ W 5 W propo σ Let v s variable assignment identical v simple σ cid4 cid4 v s cid17 σ cid4cid4 cid2 σ cid4 σ s cid4 cid4 v cid13cid17 s σ cid4cid4 cid2 σ cid4 σ It follows S v cid13cid17 φ σ cid4cid4 cid2 σ cid4 σ By induction Similarly induction It follows theorem holds 6 For nonatomic formulas form φ φ1 φ2 uφ item 3 Deﬁnition 9 theorem follows W strictly bounded σ S v cid17 W cid4 W strictly bounded σ cid4 S v cid17 W cid4 cid4 v cid17 s cid4 iff S v cid17 W cid4 iff S v cid17 W σ cid4cid4 cid2 σ cid4 σ Then corollary S cid4 cid4 induction structure φ cid4 An important property Markovian basic action theories called Relative Satisﬁability says initial database DS0 set Duna unique names axioms actions satisﬁable adding foundational axioms Σ set action precondition successor state axioms results satisﬁable theory provided successor state axioms functional ﬂuents satisfy consistency property Eq 6 We prove satisﬁability preserved adding nonMarkovian action precondition successor state axioms satisﬁable initial database unique names axioms Theorem 2 Relative satisﬁability A NonMarkovian Basic Action Theory D satisﬁable iff Duna DS0 satisﬁable Proof Starting model M0 Duna DS0 construct model M D 1 Satisfying Σ Let Act Obj domains sorts action object respectively M0 We deﬁne structure M complete induction Let Act Obj domains sorts action object M We deﬁne domain Sit sort situation set ﬁnite sequences elements Act That α1 αn Act α1 αn Sit b Next deﬁne interpretation S0 M follows S M 0 doM cid2 cid3 α α1 αn α Act α1 αn Sit α1 αn α σ proper preﬁx σ cid4 c Deﬁne interpretation cid2 σ cid2M σ cid4 It easy verify M deﬁned far satisﬁes foundational axioms Σ We continue deﬁning interpretation predicates Poss interpretation deﬁned ward cid2 interpretation deﬁned We deﬁne interpretation functions interpretation given The predicates functions include ﬂuents need provide interpretation respect situations This use deﬁnition complete induction needed We use induction length sequences complete induction required successor state axioms refer past situations After giving interpretation remaining step deﬁne interpretation 5 The proof ﬁrst cid2 replaced cid15 A Gabaldon Artiﬁcial Intelligence 175 2011 2548 35 Poss straight forward action precondition axioms mention Poss predicate rhs Deﬁnition 10 Let proceed deﬁne interpretation M predicate function symbols Poss cid2 2 Interpretation situation independent predicates functions For situation independent predicates functions sort situation domain Sit irrelevant domains Act Obj M M0 Thus let M interpret situation independent predicates functions M0 It follows M0 satisﬁes Duna M 3 Interpretation ﬂuents Let σ sequence Sit assume variable assignment v assigns σ s following holds cid4 assigns value Obj Act functional M v cid17 s ﬂuent f cid12x s Interpretation ﬂuents initial situation cid4 cid15 s M v interprets relational ﬂuent F cid12x s cid4 σ Let F relational ﬂuent f functional ﬂuent v 0 Suppose σ sequence Then S M 0 variable assignment variables sorts object action structure share domains sorts Deﬁne M M v 0 cid17 F cid12x S0 cid12xv 0 S M f M 0 cid2 cid3 iff M0 v 0 cid17 F cid12x S0 cid2 f M0 cid12xv 0 S M0 0 cid3 Recall functional ﬂuents range sorts action object They range sort situation Also sentences DS0 uniform S0 This fact M0 satisﬁes DS0 implies M model DS0 b Interpretation ﬂuents situations S0 Suppose σ sequence α1 αn n cid2 1 Let F relational ﬂuent let successor state axiom cid2 cid3 cid12x doa s F ΦF cid12x s cid4 For variable assignment v assigning σ s induction M v cid17 s relational ﬂuents F cid12x s From Theorem 1 follows M v assign value ΦF cid12x s strictly bounded s mention Poss If M v assign value formula extend M assign value assigns different value ΦF cid12x s contradict construct extended model M theorem Furthermore M satisﬁes foundational axioms Σ M v cid17 s cid2 doa s implies M v cid13cid17 doa s cid15 s axioms Σ Thus M v assign value F cid12x doa s We deﬁne M interpret F cid12x doa s follows cid4 cid15 s M v interprets cid4 M v cid17 F cid2 cid3 cid12x doa s iff M v cid17 ΦF cid12x s The interpretation functional ﬂuents situation doa s deﬁned similarly For functional ﬂuent f successor state axiom cid2 cid3 cid12x doa s f y φ f cid12x y s variable assignment v assigning σ s deﬁne cid3 cid12x doa s y iff M v cid17 φF cid12x y s M v cid17 f cid2 A similar argument shows deﬁned Furthermore functional ﬂuent consistency property states Duna DS0 6 fact M satisﬁes Duna DS0 guarantee value y assigned f cid12x doa s This completes inductive deﬁnition M interprets ﬂuents By construction M satisﬁes successor state axioms cid17 s cid12x yφ f cid12x y s cid3 φ f cid12x y s φ f y y y y cid12x y s cid5 cid4cid2 cid2 cid3 cid4 cid4 cid4 It remains specify M interprets Possa s 4 Interpretation Possa s Consider element α Act There possible cases There variable assignment v v assigns α action function Acid12x M v cid17 Acid12x By deﬁnition Dap includes axiom Poss Acid12x s Π Acid12x s Π Acid12x s mention predicate Poss Hence M assigns value Π Acid12x s We specify cid3 cid2 M v cid17 Poss Acid12x s iff M v cid17 Π Acid12x s Since M satisﬁes unique names axioms actions value assigned Poss unique 36 A Gabaldon Artiﬁcial Intelligence 175 2011 2548 b For variable assignment v assigns α function Acid12x M v cid13cid17 Acid12x In case value assigned Possa s satisfy action precondition axioms By construction M satisﬁes action precondition successor state axioms D This completes proof relative satisﬁability cid4 4 Regression bounded formulas The particular syntactic form action precondition successor state axioms computationally advantageous These axioms deﬁnitions righthand serves deﬁnition predicate lefthand makes exchangeable logically equivalent way Reiters regression operator 521 R exploits property provide specialized theorem proving mechanism Lsitcalc class regressable formulas In section generalizations deﬁne strictly larger class formulas includes Reiters original class regressable formulas deﬁne generalized operator regressing formulas prove sound complete The generalized class regressable formulas based notion bounded formula deﬁned earlier This allow apply regression respect NonMarkovian Action Theories We remark background theory consists standard Markovian axioms generalized operator useful allows regressing formulas regressable original operator In particular allow prove entailment formulas mention cid2 relation possible original regression operator We comments 41 Regressable formulas We start generalizing class formulas regression operator applicable Deﬁnition 13 Regressable formulas A formula W Lsitcalc regressable iff 1 W ﬁrst order 2 W bounded situation term rooted S0 free variables sort situation 3 atom form Possα σ mentioned W α form At1 tn nary action function symbol A Lsitcalc Example 5 The original deﬁnition regressable formulas requires terms sort situation rooted S 0 allow quantifying situations mention predicate cid2 equality situation terms The deﬁnition regressable formulas includes example following Suppose σ ground situation term database transaction log ground plan We use regression answer queries block x block y execution σ s s cid15 σ onx y s action resulted block x block y σ s cid15 σ cid2 cid3 x y doa s previous query requiring action actually executable s cid15 σ Possa s cid2 cid3 x y doa s action shoot possible σ killed turkey s s cid15 σ Possshoot s dead 42 Generalized regression operator cid2 cid3 turkey doshoot s Let proceed generalize Reiters regression operator R class formulas We assume henceforth loss generality formulas quantiﬁed variables renamed distinct free variables We use W t1 t2 denote formula obtained W replacing term t1 t2 Deﬁnition 14 Prime functional ﬂuent term See 21 A functional ﬂuent term prime iff form f cid12t doα1 αn S0 n cid2 1 terms cid12t α1 αn uniform S0 A Gabaldon Artiﬁcial Intelligence 175 2011 2548 37 Situation Calculus terms free variables sort situation property containing prime functional ﬂuent Remark 1 See 21 Let gcid12t doα σ Lsitcalc term free variables sort situation subterms sort situation form doα1 αn S0 n cid2 0 Then gcid12t doα σ mentions prime functional ﬂuent term Deﬁnition 15 Generalized regression operator Let W regressable formula Lsitcalc 1 If W atom deﬁnition regressable bounded situation term rooted S 0 deﬁnition bounded formulas follows W uniformly rooted S 0 Reiters regression operator originally deﬁned6 works formulas For completeness deﬁne operator By virtue regressable atom W following forms An equality atom form cid5 1 αcid4 αcid4 S0 If m n 0 RW true If m cid13 n RW false If m n cid2 1 RW Rαcid4 1 α1 αn S0 α1 αcid4 cid2 αm cid2cid4 m cid3 cid3 m b A cid2atom form cid5 cid2cid4 1 αcid4 αcid4 S0 m cid3 cid2 cid2 α1 αn S0 cid3 If m 0 n cid2 1 RW true If m cid2 n RW false If 1 cid3 m n RW Rαcid4 1 α1 αcid4 m αm c An atom Possα σ α σ terms sort action situation respectively By deﬁnition regress able formulas term α form Acid12t A action function symbol corresponding action precondition axiom Poss Acid12x s Π Acid12x s Dap Then cid5 Π Acid12t σ RW R cid4 The remaining possible cases following d An atom situation term S0 situation independent atom Then RW W e An atom mentions functional ﬂuent term form cid2 cid4 cid12t g cid2 αcid4 σ cid4 cid3cid3 Since atom bounded situation term rooted S0 deﬁnition bounded uniformly rooted S0 Hence atom mention variables sort situation Remark 1 mention prime functional ﬂuent term f cid12t doα σ This ﬂuent term α uniform S0 σ rooted S0 Let f cid12x doa s y φ f cid12x y s functional ﬂuent terms successor state axiom Dss Then cid4 RW R vφ f cid12t v α σ W cid8 cid8 f cid12tdoασ v cid5 v fresh new variable f A relational ﬂuent atom F cid12t doα σ contains functional ﬂuent terms Let F cid12x doa s ΦF cid12x s ﬂuents successor state axiom Dss Then RW RΦF cid12t α σ 2 When W regressable formula form7 s σ cid4 cid2 σ cid4cid4 cid2 σ W cid4 s σ cid4 cid2 σ cid4cid4 σ W cid4 following subcases Suppose W regressable formula form 1 αcid4 αcid4 s σ cid4 cid2 cid2 cid2 cid5 s cid2cid4 m cid3 cid2 α1 αn S0 cid3cid3 cid4 W m cid2 0 If m cid2 n RW false If m n cid4cid2 cid4cid2 RW R R cid2cid4 cid2cid4 s σ cid4 cid2 s σ cid4 cid2 1 αcid4 αcid4 1 αcid4 αcid4 m m cid3 cid3 cid5 s cid5 s cid2cid4 cid2cid4 cid2 α1 αn1 α1 αn1 cid3cid3 cid3cid3 cid5 S0 cid5 S0 cid4 cid4 W W cid5 cid5 6 We referring deﬁnition regression operator appears 21 slightly general deﬁnition given 2 7 The deﬁnition regression corresponding formulas σ cid4 σ cid4cid4 instead σ cid4 cid2 σ cid4cid4 deﬁned way 38 A Gabaldon Artiﬁcial Intelligence 175 2011 2548 cid2 cid2cid4 b Suppose W regressable formula form 1 αcid4 αcid4 s σ cid4 cid2 W m m cid2 1 By argument previous case σ cid4 If m n RW false If m cid3 n α1 αn S0 cid2 cid5 s cid3cid3 cid3 cid4 rooted S0 cid4cid2 cid2cid4 1 αcid4 αcid4 s S0 cid15 m1 cid3 cid2 σ cid4 cid2 α1 αn S0 cid3 cid5 s W cid2 cid5 cid4 α1 αn1 S0 cid3cid3 αcid4cid4 cid2 cid3 RW R αcid4cid4 αn m stands αcid4 m m cid2 cid2 s σ cid4 cid2 s s doα1αnmS08 cid3cid3 α1 αn S0 cid4 W c Suppose W regressable formula form By deﬁnition bounded formulas σ cid4 introduced abbreviations 5 Hence σ cid4 free variable This possible deﬁnition regressable σ cid4 The regression deﬁned follows RW R cid4 cid2 σ cid4 cid2 α1 αn S0 cid3 cid4 W cid8 cid8s doα1αnS0 cid5 mention variable s Moreover quantiﬁers situation variables mention variable variable rooted S0 3 For remaining possibilities regression deﬁned follows RW RW RW 1 W 2 RW 1 RW 2 For variable v sort situation vRW vW R cid5 cid4 Example 6 Consider sentence Gs saying point past relative s action putdownx block x action stack A B possible cid2 Gs def cid4 s S0 cid15 s cid4 cid15 s cid3 xPoss cid2 cid2 stack A B putdownx s cid3cid3 cid4 Suppose want determine G holds executing sequence unstackD B stackD A D cid17 G cid2 cid2 cid2 cid3cid3cid3 stackD A unstackD B S0 It easy check GdostackD A dounstackD B S0 regressable according Deﬁnition 13 Applying gression formula yields following stackD A cid2 unstackD B S0 cid3cid3cid3cid5 cid2 cid2 cid4 G cid4cid2 R R cid4 S0 cid15 s cid4 cid15 cid2 s stackD A cid2 xPoss cid2 cid3cid3cid3 unstackD B S0 cid2 stack A B putdownx s cid3cid3cid5 cid4 cid4cid2 R cid4 s S0 cid15 s cid4cid2 cid4 s S0 cid15 s cid2 cid4 cid2 cid4 cid2 R R R R cid2 cid4 xPoss cid4cid2 cid4 s s cid4cid2 cid4 s s cid3cid3cid3 Case 3 cid2 unstackD B S0 cid2 stack A B cid2 putdownx s cid3cid3cid3 unstackD B S0 cid2 stack A B putdownx s cid3cid3cid5 cid3cid3cid5 cid4 cid4 stackD A cid2 xPoss stackD A cid2 xPoss cid2cid4 stack A B cid5 unstackD B stackD A putdownx Cases 2c 2a S0 cid3cid3cid5 unstackD B S0 cid2 cid4 cid2 unstackD B S0 cid4 cid2 cid3cid3 xPoss cid3cid3 xPoss cid2 cid2 cid2 stack A B putdownx s cid2 stack A B putdownx s cid4 cid4 cid3cid3cid5 cid3cid3cid5 8 Replacing s doα1 αnm S 0 necessary comply deﬁnition bounded formulas In fact replacement place subsequent regression steps A Gabaldon Artiﬁcial Intelligence 175 2011 2548 39 R R R R R R R cid2 cid2 cid4 xPoss cid4 xPoss cid4 cid4 s s cid4cid2 s s cid4 cid4 xPoss cid4 xPoss cid4 xPoss stack A B stack A B cid4 S0xPoss cid3 cid4 cid2 S0 xPoss cid2 cid2 cid2 stack A B stack A B stack A B cid2cid4 cid2cid4 Cases 2c 2a cid5 unstackD B stackD A putdownx cid5 S0 unstackD B putdownx cid3cid3cid5 cid2 cid4 putdownx s cid3cid3cid5 cid2 putdownx s S0 cid3cid3cid5 cid3cid3cid5 cid4 Cases 2c 2a cid5 unstackD B stackD A putdownx cid5 unstackD B putdownx putdownx S0 cid3cid3cid5 S0 S0 cid3cid3cid5 cid3cid3cid5 cid2 stack A B cid2 stack A B cid2cid4 cid2cid4 cid2 The remaining steps Reiters original regression operator 43 Correctness regression Our proof correctness operator R based proof correctness original regression operator 21 The main technical diﬃculty NonMarkovian Action Theories generalized regressable formulas regression situation terms grow longer start shrinking S 0 makes induction bit complicated Theorem 3 Suppose W regressable formula Lsitcalc D basic NonMarkovian Action Theory Then 1 RW formula uniform S0 2 D cid17 W RW Proof The proof induction based ordering relation tuples integers We start deﬁning ordering Let Λ set countably inﬁnite sequences natural numbers ﬁnite number nonzero elements Deﬁne binary relation set reverse lexicographic ordering λ1 λ2 λ cid4 1 λ cid4 2 iff m λm λ cid4 m n m λn λ cid4 n cid2 cid3 The set Λ satisﬁes ordering Next overload deﬁning following lexicographic ordering Λ N cid4 λ λ n n λ n n n cid2 λ n iff cid3 cid4 cid4 cid4 cid4 Clearly subset Λ N minimal element provides wellordering set It worth remarking ordering priority tuple elements increases left right Before deﬁne mapping Lsitcalc regressable formulas tuples Λ N need following notions If gt1 tn Lsitcalc term t1 tn said proper subterms gt1 tn An occurrence situation term Lsitcalc formula W said maximal iff occurrence proper subterm situation term Intuitively occurrence terms doα1 αi σ 0 n 1 term doα1 αn σ maximal proper subterm doα1 αi1 σ For regressable formula W let LW sum length σ occurrence σ W σ term sort situation rooted situation variable occurrence σ W maximal occurrence quantiﬁer expression Q s σ cid4 cid2 σ cid4cid4 cid2 σ length larger length σ cid4cid4 We ready deﬁne mapping Deﬁne indexW indexW def cid2 C E I λ1 λ2 P cid3 1 C number connectives quantiﬁers 2 E number equality atoms situation terms 3 I number cid2atoms 4 m cid2 1 λm number maximal occurrences W situation terms length m LW rooted S 0 5 P number Poss atoms mentioned W Notice λs shifted right number LW places In words maximal term length k occurs W λkLW 1 The reason regression step formula situation variable possible situation term mentions variable replaced longer For instance formula s s A S0P doB s λ1 0 λ11 1 regressed P A B S0 40 A Gabaldon Artiﬁcial Intelligence 175 2011 2548 λ1 0 λ02 1 Without shift λs formula λ1 1 λ2 0 λ1 0 λ02 1 Thus index ﬁrst formula precede index second regressed step With shifted λs precedence case decided based number connectives quantiﬁers Let proceed proof Consider regressable formula W assume theorem regressable formulas index indexW 1 Suppose W regressable atom Then W atom bounded situation term rooted S 0 free variables sort situation By deﬁnition bounded formulas W uniformly rooted S 0 This implies LW 0 We following cases Suppose W equality atom form cid5 cid2 α1 αn S0 S0 This atom regressed true m n 0 false m cid13 n Otherwise αm α1 αcid4 1 αcid4 αcid4 RW R cid4 αcid4 cid5 cid2cid4 m cid3 cid3 1 m m αm α1 αcid4 bounded situation term rooted S0 regressable differs index W λm smaller indexW αi uniformly rooted S0 conjunction W In cases theorem follows immediately Consider case m n cid2 1 let W αcid4 1 Since W regressable atom bounded situation term rooted S 0 uniformly rooted S0 This implies αcid4 uniformly rooted S0 Therefore W The index W ber P λi remain For instance αi s αcid4 indexW Thus indexW Also induction hypothesis D cid17 W ing entailment foundational axioms Σ αm RW num j s mention situation terms indexW Hence induction hypothesis RW RW m 0 0 0 0 indexW 0 1 0 0 2 0 0 Furthermore easy prove follow RW wanted uniform S0 Σ cid17 W αcid4 RW stand α1 αcid4 m Therefore D cid17 W W b Suppose W cid2atom form 1 cid2cid4 1 αcid4 αcid4 m cid3 cid5 S0 cid2 cid2 α1 αn S0 cid3 cid5 When m 0 n cid2 1 RW true m cid2 n RW false In cases theorem follows immediately Σ cid17 W true false respectively In remaining case 1 cid3 m n cid4 αcid4 1 stand αcid4 1 RW R α1 αcid4 α1 αcid4 Let W By argument equality case W λm λn decrease indexW Possatoms P zero cases The number cid2atoms I smaller indexW connectives C increases leftmost element lowest priority Clearly indexW indexW Furthermore easy prove entailment α1 αn S0 αm m αm The proof proceeds similar way case equality atoms differs indexW regressable The indexW Other λ values remain number The number Σ cid17 cid2 cid2 cid5 S0 W cid2cid4 cid3 cid3 m 1 αcid4 αcid4 m As previous case induction D cid17 W entailment RW RW ﬁnally theorem follows c Suppose W regressable atom form Possα σ terms α σ sorts action situation respectively Then α form Acid12t corresponding action precondition axiom Poss Acid12x s Π Acid12x s D After suitably renaming variables necessary D cid17 W Π Acid12t σ 7 By deﬁnition Π Acid12x s mention predicate Poss Therefore indexΠ Acid12t σ indexW Recall deﬁnition indexW number P Possatoms rightmost element ordering priority increases left right Moreover Poss Acid12t σ regressable atom σ terms sort situation mentioned cid12t rooted S0 From fact Π Acid12x s deﬁnition bounded situation term rooted s follows Π Acid12t σ regressable Therefore induction RΠ Acid12t σ uniform S0 cid5 Π Acid12t σ By deﬁnition RW RΠ Acid12t σ The theorem follows 7 8 D cid17 Π Acid12t σ R 8 cid4 A Gabaldon Artiﬁcial Intelligence 175 2011 2548 41 d The remaining cases W atom following Suppose W atom mention terms sort situation term sort S 0 Then W uniform S0 Hence RW W deﬁnition regression theorem immediate Note W indexW 0 0 ii Suppose W atom mentions functional ﬂuent term Since W regressable free variables sort situation Remark 1 mentions prime functional ﬂuent term f cid12t doα σ Let successor state axiom corresponding ﬂuent cid2 cid3 cid12x doa s f y φ f cid12x y s Assuming suitable variable renaming easy cid8 cid8 f cid12tdoασ y D cid17 W yφ f cid12t y α σ W 9 regressable indexW denote rhs equivalence Let W Let W indexW First W atom bounded situation term rooted S 0 σ rooted S0 Since deﬁnition successor state axioms φ f cid12x y s bounded s W bounded situation term rooted S0 regressable Second φ f cid12x y s mention predicate Poss number Possatoms P zero Further f cid12t doα σ prime functional ﬂuent term Deﬁnition 14 term W W sort situation mentioned cid12t α S0 Thus replacing f cid12t doα σ W change λ values λk1LW k 1 length doα σ decreases By deﬁnition successor state axioms φ f cid12x y s strictly bounded s mention constant S0 Then terms sort situation mentioned φ f cid12t y α σ different σ rooted situation variable This means conjunct yφ f cid12t y α σ contributes λ value λkLW lower ordering priority λk1LW Therefore indexW As example consider atom f doB A S0 c successor state axiom cid4 indexW cid3 cid2 cid2 cid3 cid4 cid2 cid3 doa s f y s cid4 cid2 s s P y s In case W cid2 W indexW cid4 s cid3 cid2 index 0 0 0 0 λ1 0 λ2 1 0 0 cid4 cid2 A S0P y s s cid2 1 0 1 0 λ1 1 λ2 0 0 0 cid4 cid3 cid3 W indexW Thus indexW By induction RW 9 RW corresponding ﬂuent cid2 cid3 cid12x doa s F ΦF cid12x s Assuming suitable variable renaming D cid17 W ΦF cid12t α σ uniform S0 D cid17 W RW The theorem follows RW iii Suppose W relational ﬂuent atom form F cid12t doα σ Let successor state axiom denote rhs equivalence We need W Let W indexW Since F cid12t doα σ regressable σ terms sort situation mentioned cid12t α rooted S0 Since deﬁnition ΦF cid12x s bounded s ΦF cid12t α σ bounded σ rooted S0 regressable Now deﬁnition ΦF cid12x s mention predicate Poss constant S0 Since F cid12t doα σ regressable atom subterms sort situation cid12t α σ uniformly rooted S0 Moreover ΦF cid12x s strictly bounded s follows terms sort situation mentioned ΦF cid12t α σ appear cid12t α σ rooted situation variable Therefore indexW As example consider atom regressable indexW indexW 10 cid2 F g cid3 cid2 doC S0 cid2 B A S0 cid3cid3 successor state axiom F x doa s P x s In case W cid2 cid3 indexW 0 0 0 λ1 1 λ2 1 0 0 42 A Gabaldon Artiﬁcial Intelligence 175 2011 2548 W P gdoC S0 A S0 cid2 cid2 cid3 cid3 index W By induction RW RW 10 0 0 0 λ1 2 λ2 0 0 0 uniform S0 D cid17 W RW The theorem follows RW 2 When W regressable nonatomic formula following possible cases Suppose W regressable formula form 1 αcid4 αcid4 s σ cid4 cid2 cid2 cid2 s cid2cid4 m cid3 cid2 cid5 α1 αn S0 cid3cid3 cid4 W If m cid2 n RW false Then theorem follows immediately D cid17 W false If m n easy prove D cid17 W W 1 W 2 11 12 14 def W 1 cid2 cid2 s σ cid4 cid2 s σ cid4 cid2 cid2cid4 cid2cid4 def αcid4 1 αcid4 1 αcid4 αcid4 m cid3 cid3 cid5 s cid5 s cid2 cid2 cid2 α1 αn1 S0 cid3cid3 cid3cid3 cid4 W cid4 m W 2 α1 αn1 S0 13 Clearly W 1 W 2 regressable It clear LW LW 1 LW 2 Since λnLW smaller indexW 1 indexW 2 indexW values λi n LW identical number Poss atoms indexW 1 indexW similarly indexW 2 indexW By induction hypothesis RW 1 RW 2 uniform S0 D cid17 RW 1 W 1 D cid17 RW 2 W 2 The theorem follows RW RW 1 RW 2 11 W b Suppose W regressable formula form cid2 s σ cid4 cid2 s α1 αn S0 cid3cid3 W cid2 cid4 It easy suitable variable renaming cid8 cid8s doα1αnS0 α1 αn S0 cid2 D cid17 W σ cid4 cid2 W cid3 cid4 cid4 regressable indexW Clearly W rooted S0 Moreover W stand rhs equivalence By deﬁnition regression RW RW As propositional combination formulas cid4s doα1αnS0 bounded situation term rooted Let W item 2 Deﬁnition 15 σ cid4 bounded situation term rooted S0 s W S0 Therefore W Let indexW λ values formulas Consider maximal term cid12α1 s W length Let cid12α2 S0 stand doα1 αn S0 W value λ accounts term cid12α2 S0 indexW n m LW accounts cid12α1 cid12α2 S0 Also LW substitution results W λs s indexW indexW From argument follows indexW Therefore indexW smaller indexW Then induction RW 14 RW contains number P Poss atoms W Let let m cid4doα1s doα1doα2S0 Note n LW index cid4cid4 index value λ cid4cid4 This implies λs Since true substitution term rooted differs indexW number equality atoms E indexW The theorem follows RW cid4cid4 LW m n LW n m LW uniform S0 D cid17 W RW W cid4cid4 cid4cid4 cid4 cid2 cid2cid4 s σ cid4 cid2 c Suppose W regressable formula form 1 αcid4 αcid4 m 1 previous case If m n RW false deﬁnition clearly D cid17 W false The theorem immediate For m cid3 n easy prove α1 αn S0 cid2 s cid3cid3 W m cid3 cid5 cid4 cid2 cid3 cid2cid4 D cid17 W cid3 cid5 αcid4 1 αcid4 s s cid3 cid2 σ cid4 cid2 α1 αn S0 s doα1αnmS0 cid2 αcid4cid4 αn m stands αcid4 denote formula By deﬁnition regression RW RW α1 αn1 S0 cid2 cid4 W m1 m m αcid4cid4 Let W rooted S0 Let W conjunct σ cid4 cid2 doα1 αn S0 uniformly rooted S0 Since W bounded situation term rooted S0 doαcid4 m s rooted s This means terms sort situation mentioned αcid4cid4 regressable For reason previous case σ cid4 1 αcid4 m cid3cid3 15 A Gabaldon Artiﬁcial Intelligence 175 2011 2548 43 m Clearly number Poss atoms W W αn uniformly rooted S0 Finally W rooted S0 conjunct αcid4cid4 propositional combination formulas bounded situation term rooted S 0 s Hence formula 15 bounded situation term rooted S0 regressable Consider index W possible cases Suppose terms sort situation mentioned αcid4 LW lengths terms αcid4 term αcid4 length n m m k n k We n LW n LW indexW All λi n LW equal formula Therefore indexW m length smaller m Then deﬁnition LW Let σ doα1αnmS0 αcid4cid4 λnLW smaller indexW indexW m let m k m cid2 k 0 length Then corresponding term σ s m included LW This implies LW n k LW n k LW Based LW m cid4 LW m k The corresponding term σ s m mentions terms sort situation length m For simplicity assume term σ let length mk k cid2 0 Then deﬁnition LW length σ included LW doα1αnmS0 αcid4cid4 m length n m m k n k Hence LW We n k LW λi n LW equal formula It λnLW smaller Since n n m LW LW indexW follows indexW n k LW m k n m LW Then λnmLW larger indexW uniform S0 D cid17 W RW The theorem follows Suppose αcid4 Therefore induction RW RW RW 15 3 The cases W regressable formula forms W 1 W 1 W 2 vW 1 straightforward cid4 Soundness completeness regression operator R follows Theorems 2 3 Theorem 4 Suppose W regressable sentence Lsitcalc D basic nonMarkovian theory actions D cid17 W iff DS0 Duna cid17 RW As case Markovian theories theorem computationally important It tells class regressable formulas prove Basic Action Theory entails formula ﬁrst applying regression purely syntactic procedure proving initial database plus unique names axioms entail regressed formula In particular tells second proving entailment regressed formula second order axiom Basic Action Theory induction axiom longer relevant 5 Implementation In section present implementation Prolog bounded formula evaluator The evaluator course based regression instead computing regressed formula uniform S 0 actually evaluates background action theory initial Prolog database returns answer Bounded formulas encoded Prolog terms following forms somessitvar lowerbnd upperbnd W allssitvar lowerbnd upperbnd W corresponding formulas form s1 s sitvar quantiﬁed variable sort situation s1 The arguments lowerbnd upperbnd correspond s s1 s respectively stands cid2 cid15 The argument subformula W cid4 s1 sW respectively The ﬁrst argument cid4 s1 cid4 s1 sW s1 s Bounded Formula Regression Evaluator Case 1 Equality situations atoms regrs0 s0 regrdoAS doAS regrS1 do_S regrS1 S regrS1 S regrS1 S regrS1 S regrS1 S Poss fluent situation independent atoms regrW isAtomExW W case Sv Prolog variable 44 A Gabaldon Artiﬁcial Intelligence 175 2011 2548 regrsomesSvS1 Sv Sv S2W varSv SvS2 regrS1 S2 W regrsomesSvS1 Sv Sv S2W varSv SvS2 regrS1 S2 W regrsomesSvS1 Sv Sv S2W varSv SvS2 regrS1 S2 W Case 2 2a regrsomesSvLBoundSm SnW regrsomesSvLBound Sm SnW true regrsomesSvLBound Sm SnW regrsomesSvLBoundSm do_SnW regrsomesSvLBound Sm SnW true regrsomesSvLBound Sm SnW 2b regrsomesSv S1 doAS doAS doAS2W regrsomesSvs0 S S S2 S1 doAS2 W regrsomesSvS1 doAS doAS doAS2W regrsomesSvs0 S S S2 S1 doAS2 W regrsomesSvS1 doAS doAS doAS2W regrsomesSvs0 S S S2 S1 doAS2 W 2c Sv constant representing sitcalc variable regrsomesSvS1 Sv Sv S2W subSvSNewWW1 SNew S2 regrS1 S2 W1 regrsomesSvS1 Sv Sv S2W subSvSNewWW1 SNew S2 regrS1 S2 W1 regrsomesSvS1 Sv Sv S2W subSvSNewWW1 SNew S2 regrS1 S2 W1 Case 3 regrS1 S regrS1 S regrS1 S regrS1 S regr somesSvLBound UBoundW regrsomesSvLBoundUBoundW regrallsSvLBound UBound W regrsomesSvLBoundUBoundW regrallsSvLBound UBound W regrsomesSvLBoundUBoundW regrP Q regrP regrQ regrP v Q regrP true regrQ regrP Q regrP regrQ true regrP Q regrP Q Q P regrP regrP regrP Q regrP v Q regrP v Q regrP Q regrP Q regrP v Q regrP Q regrP Q Q P regrallVW regrsomeVW regrsomeVW regrsomeVW regrW isAtomExW regrW regrallVW regrsomeVW regrsomeVW subV_WW1 regrW1 extended atom definition isAtomExA A W A W1 W2 A W1 W2 A W1 W2 A W1 v W2 A someXW A allXW A S1 S2 A S1 S2 A S1 S2 A somes____ A alls____ A Gabaldon Artiﬁcial Intelligence 175 2011 2548 45 We use following simple blocks world implementation Blocks World Basic Action Theory posspickupXS clearXS ontableXS handemptyS possputdownXS holdingXS possstackXYS holdingXS clearYS possunstackXYS handemptyS clearXS onXYS clearXdoAS AputdownX AstackXY AunstackYX clearXS ApickupX AstackYX AunstackXY onXYdoAS AstackXY onXYS AunstackXY ontableXdoAS AputdownX ontableXS ApickupX handemptydoAS AputdownX AstackXY handemptyS ApickupX AunstackXY holdingXdoAS ApickupX AunstackXY holdingXS AputdownX AstackXY Primitive actions primitive_actionpickupX primitive_actionstackXY primitive_actionunstackXY primitive_actionputdownX Restore atoms restoreSitArgclearXSclearXS restoreSitArgonXYSonXYS restoreSitArgontableXSontableXS restoreSitArghandemptyShandemptyS restoreSitArgholdingXSholdingXS Initial Situation ondbs0 onacs0 cleards0 clearas0 ontablebs0 ontablecs0 handemptys0 blocka blockb blockc blockd Consider following query cid2 s1 S0 cid2 s1 cid15 cid2 x ya2 s2 S0 cid2 doa2 s2 cid15 cid2cid4 cid5 unstackD B stackD A cid3cid3 S0 cid2cid4 cid5 putdown y unstack A x stack A B cid3cid3 s1 Possa2 s2 This query says situation s1 history cid2cid4 cid5 unstackD B stackD A cid3 S0 S0 sequence cid2cid4 cid5 putdown y unstack A x stack A B cid3 s1 legal actions executable blocks x y Intuitively chance executing sequence unstackD B stackD A That means block y D x C Any sequence impossible We obtain following results implementation A sample query eclipse 2 regrsomess1s0s1s1dostackdadounstackdbs0 somex somey allact2 allss2s0doact2s2 doact2s2dostackabdounstackaxdoputdownys1 possact2s2 Yes 000s cpu 46 A Gabaldon Artiﬁcial Intelligence 175 2011 2548 Same query requiring s1 dounstackdbs0 eclipse 3 regrsomess1dounstackdbs0s1s1dostackdadounstackdbs0 somex somey allact2 allss2s0doact2s2 doact2s2dostackabdounstackaxdoputdownys1 possact2s2 No 000s cpu Using variables predicate block_ actual blocks eclipse 5 regrsomesS1s0S1S1dostackdadounstackdbs0 someX someY blockX blockY allact2 allss2s0doact2s2 doact2s2dostackabdounstackaXdoputdownYS1 possact2s2 X c Y d S1 dounstackdbs0 Yes 001s cpu As illustration action theory nonMarkovian features consider modifying action precondition axiom stackx y include condition onx y held past holds initial situation This condition form planning search control prevents repeating stack actions cid2 Poss cid3 stackx y s cid2 s1 s1 cid2 s holdingx s clear y s cid3 onx y s1 s2 s2 cid2 s1onx y s2 The corresponding modiﬁed Prolog rule possstackXYS holdingXS clearYS regr somess1 s0s1 s1S onXYs1 somess2 s0s2 s2s1 onXYs2 Here use evaluator regr handle bounded formula In general better option reify ﬂuent formulas refer holds predicate We refrain The following results obtained simple queries blocks world theory modiﬁed precon dition axiom Simple query NonMarkovian APA This possible onac holds s0 eclipse 2 possstackacdounstackacs0 Yes 000s cpu eclipse 3 possstackaddounstackaddostackaddounstackacs0 No 000s cpu 6 Conclusion We presented generalization Reiters Basic Action Theories 521 Markov property assumed allowing representing reasoning nonMarkovian systems The main challenge develop framework supports regression computational device We identiﬁed syntactically restricted class formulas called bounded regression applied form basis generalization Basic Action Theories nonMarkovian control We generalized Reiters regression operator R handle extended class regressable formulas The modiﬁed operator original compute entailment regressable formulas respect background action theory This problem intuitively consists reducing task proving entailment original formula task proving entailment regressed formula respect initial ﬁrstorder database plus unique names axioms actions This especially important makes secondorder axiom theories irrelevant respect solving problem Finally proved generalized regression operator correct shown simple Prolog implementation formula evaluator based operator A Gabaldon Artiﬁcial Intelligence 175 2011 2548 47 Removing Markov assumption Basic Action Theories changes Situation Calculus ontology language possible thanks fact histories ﬁrst class objects theories Considerably effort required remove assumption formalizations case Some recent work considered nonMarkovian features domains described A type languages 22 In 23 Giunchiglia Lifschitz concerned problems actions ramiﬁcations indirect effects In particular concerned ramiﬁcations ﬂuents truth value depends ﬂuents dependency unknown implicit In case knowledge past states useful determine value ﬂuents implicit dependency framework nonMarkovian degree Although malism allow explicitly write nonMarkovian deﬁnitions ﬂuents problem concerned serves motivation formalism handle nonMarkovian systems Mendez et al 24 essentially consider problem reasoning actions dynamics depends past states They extend language A Past Linear Temporal logic connectives previous This language propositional quantifying temporal modalities More recently Gonzalez et al 25 introduced Alike language modeling nonMarkovian domains One motivations practical problem modeling multimedia presentations involve temporal conditions constraining presentation evolves Similar language 24 language allow quantifying temporal modalities propositional Computation language translation logic programming answer set semantics 26 systems Smodels 27 DLV 28 Answer sets domain description contain state set literals goes given set action occurrences disadvantageous large domains In NonMarkovian Action Theories reasoning terms sequence actions initial database size domain big impact An important question addressed paper NonMarkovian Action Theories expressive standard action theories In 13 introduced procedure compiling class nonMarkovian theories refer past situations Past LTLlike formulas Example 2 In 29 procedure larger class action theories conjecture transformation extended general case In developing transformation larger class formulas gain insight transformation general case likely essentially produce formulas axioms simulate steps generalized regression procedure In case reasonable practical simply use generalized regression operator NonMarkovian Action Theories instead applying transformation Acknowledgements I grateful Fahiem Bacchus Gerhard Lakemayer Yves Lespérance Hector Levesque lots comments suggestions helped improve paper We thank anonymous reviewers extremely useful detailed feedback References 1 A Gabaldon NonMarkovian control Situation Calculus Proc 18th National Conference Artiﬁcial Intelligence AAAI02 Edmonton Canada 2002 pp 519524 2 R Reiter Knowledge Action Logical Foundations Describing Implementing Dynamical Systems MIT Press Cambridge MA 2001 3 J McCarthy Situations actions causal laws Tech Rep Stanford University 1963 reprinted M Minsky Ed Semantic Information Processing MIT Press Cambridge MA 1968 pp 410417 4 J McCarthy P Hayes Some philosophical problems standpoint artiﬁcial intelligence B Meltzer D Michie Eds Machine Intelligence vol 4 Edinburgh University Press 1969 pp 463502 appears N Nilsson B Webber Eds Readings Artiﬁcial Intelligence Morgan Kaufmann Edmonton 1987 pp 431450 5 R Reiter The frame problem Situation Calculus A simple solution completeness result goal regression V Lifschitz Ed Artiﬁcial Intelligence Mathematical Theory Computation Academic Press 1991 pp 359380 6 G Saake UW Lipeck Foundations temporal integrity monitoring C Rolland F Bodart M Leonard Eds Proc IFIP Working Conference Temporal Aspects Information Systems NorthHolland Amsterdam 1988 pp 235249 7 J Chomicki Eﬃcient checking temporal integrity constraints bounded history encoding ACM Transactions Database Systems 20 2 1995 148186 8 I Kiringa Simulation advanced transaction models Golog Proc 8th Biennial Workshop Data Bases Programming Languages DB PL01 Rome 2001 9 I Kiringa A Gabaldon Expressing transactions savepoints nonMarkovian theories actions F Bry C Lutz U Sattler M Schoop Eds 10th International Workshop Knowledge Representation Meets Databases CEUR Hamburg Germany 2003 httpceurwsorgVol79 10 I Kiringa A Gabaldon Synthesizing advanced transaction models Situation Calculus Jounal Intelligent Information Systems 2009 11 F Bacchus F Kabanza Using temporal logics express search control knowledge planning Artiﬁcial Intelligence 116 2000 123191 12 J Kvarnström P Doherty TALplanner A temporal logic based forward chaining planner Annals Mathematics Artiﬁcial Intelligence 30 2000 119169 13 A Gabaldon Compiling control knowledge preconditions planning Situation Calculus Proc 18th International Joint Conference Artiﬁcial Intelligence IJCAI03 Acapulco Mexico 2003 14 A Gabaldon Precondition control progression algorithm Proc 9th International Conference Principles Knowledge Representa tion Reasoning KR04 Whistler BC Canada 2004 15 F Bacchus C Boutilier A Grove Rewarding behaviors Proc 13th National Conference Artiﬁcial Intelligence AAAI96 1996 pp 11601167 48 A Gabaldon Artiﬁcial Intelligence 175 2011 2548 16 F Bacchus C Boutilier A Grove Structured solution methods nonMarkovian decision processes Proc 14th National Conference Artiﬁcial Intelligence AAAI97 1997 pp 112117 17 S Thiébaux F Kabanza J Slaney Anytime statebased solution methods decision processes nonMarkovian rewards Proc 18th Conference Uncertainty Artiﬁcial Intelligence UAI02 Morgan Kaufmann Edmonton Canada 2002 pp 501510 18 C Gretton D Price S Thiébaux Implementation comparison solution methods decision processes nonMarkovian rewards Proc 19th Conference Uncertainty Artiﬁcial Intelligence UAI03 Morgan Kaufmann Acapulco Mexico 2003 19 J McCarthy Elephant 2000 A programming language based speech acts available httpwwwformalstanfordedujmc 1992 20 H Levesque R Reiter Y Lespérance F Lin RB Scherl Golog A logic programming language dynamic domains Journal Logic Programming 31 1 3 1997 5983 21 F Pirri R Reiter Some contributions metatheory Situation Calculus Journal ACM 46 3 1999 325364 22 M Gelfond V Lifschitz Action languages Electronic Transactions Artiﬁcial Intelligence 3 1998 195210 httpwwwepliuseeacis1998016 23 E Giunchiglia V Lifschitz Dependent ﬂuents Proc IJCAI95 1995 pp 19641969 24 G Mendez J Lobo J Llopis C Baral Temporal logic reasoning actions Third Symposium Logical Formalizations Commonsense Reasoning Commonsense96 1996 25 G Gonzalez C Baral M Gelfond Alan An action language nonMarkovian domains Proc NonMonotonic Reasoning Action Change Workshop NRAC03 Acapulco Mexico 2003 26 M Gelfond V Lifschitz Representing actions change logic programs Journal Logic Programming 17 1993 301322 27 I Niemelä P Simons SmodelsAn implementation stable models wellfounded semantics normal logic programs Proc 4th Interna tional Conference Logic Programming NonMonotonic Reasoning 1997 28 S Citrigno T Eiter W Faber G Gottlob C Koch N Leone C Mateis G Pfeifer F Scarcello The dlv Model generator application frontends F Bry B Freitag D Seipel Eds Proc 12th Workshop Logic Programming WLP97 LMU München 1997 pp 128137 29 A Gabaldon NonMarkovian control dynamical systems planning PhD thesis University Toronto Toronto Canada 2004