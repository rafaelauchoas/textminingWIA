Artiﬁcial Intelligence 256 2018 105129 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Ewen Maclean d Roberto Confalonieri ec Oliver Kutz e A computational framework conceptual blending Manfred Eppe ab Marco Schorlemmer c Enric Plaza c KaiUwe Kühnberger f University Hamburg Germany b International Computer Science Institute Berkeley USA c IIIACSIC Barcelona Catalonia Spain d University Edinburgh UK e Free University BozenBolzano Italy f University Osnabrück Germany r t c l e n f o b s t r c t Article history Received 1 September 2016 Received revised form 3 November 2017 Accepted 23 November 2017 Available online 2 December 2017 Keywords Computational creativity Conceptual blending Cognitive science Answer set programming We present computational framework conceptual blending concept invention method advocated cognitive science fundamental uniquely human engine creative thinking Our framework treats crucial blending process generalisation input concepts search problem solved means modern answer set programming methods ﬁnd commonalities input concepts We address problem pruning space possible blends introducing metrics capture socalled optimality principles described cognitive science literature guidelines produce meaningful serendipitous blends As proof concept demonstrate invents novel concepts theories domains creativity crucial mathematics music 2017 The Authors Published Elsevier BV This open access article CC BYNCND license httpcreativecommonsorglicensesbyncnd40 1 Introduction Creativity inherent human capability crucial development invention new ideas concepts 3 This paper addresses kind creativity Boden 3 calls combinational studied Fauconnier Turner 27 framework conceptual blending In brief conceptual blending process invents novel concept called blend combining familiar input concepts For illustration consider classical example blending concepts house boat 3427 A possible result invention houseboat concept medium house situated land medium boat situated water inhabitant house passenger boat Another possible blend boathouse boat inhabits house An inherent computational problem conceptual blending ﬁnd common ground called generic space input concepts 27 For example houseboat blend generic space person inside object situated medium situated general medium Once generic space identiﬁed develop possible blends specialising generic space elements input concepts meaningful way However trivial naive union input spaces lead inconsistencies For example medium object situated land water time Hence combining input Corresponding author University Hamburg Germany Email addresses eppeinformatikunihamburgde M Eppe emaclea2infedacuk E Maclean robertoconfalonieriunibzit R Confalonieri httpsdoiorg101016jartint201711005 00043702 2017 The Authors Published Elsevier BV This open access article CC BYNCND license httpcreativecommonsorglicensesbyncnd40 106 M Eppe et al Artiﬁcial Intelligence 256 2018 105129 concepts necessary generalise medium assignment Another problem huge number possible blends meaningful For example blending house boat house passenger boat imagine housetransporting cargo vessel convincing Consequently prune search space ruling lowquality blends Conceptual blending perceived milestone human cultural development 27 The main motivation blend ing AI perspective ﬁnd computational interpretation human blending process equally important milestone development intelligent agents autonomous systems The value conceptual blending development creative systems witnessed works ﬁeld Artiﬁcial Intelligence cognitive science particular implementations cognitive theory proposed 8363643336 As survey Sec 5 existing approaches propose computational characterisations conceptual blending different formal representations input spaces different techniques performing blending oper ation evaluation blends For instance Goguen Harrell 33 logically formalise conceptual blending terms algebraic theories Pereira 64 uses concept maps frames rules constraints implement blend evaluation Veale Donoghue 83 focus use semantic networks The survey shows providing computational account conceptual blending challenging particular following reasons When combining input spaces generic space particular importance steer possible variations blends However computing generic space challenging issue 76 especially expressive representation lan guages Most existing blending frameworks capable computing generic space automatically Having identiﬁed generic space typically remains huge number possible combinations generate blends To prune result space blends need evaluated One way check consistency apply certain quality metrics In paper address issues ask following question How orchestrate blending input concepts computationally eﬃcient feasible way faithful cognitive theory conceptual blending considered computationally creative To answer question build general creative computational framework conceptual blending allows creation evaluation new blended concepts The main contributions paper follows We provide blending framework accepts input concepts form semiotic systems Sec 22 Herein use algebraic speciﬁcations similar proposed Goguen 34 Def 1 difference assign priorities constructors operators sorts predicates axioms This extra level knowledge allows guide generalisation search process create meaningful generalisations input spaces eﬃciently use evaluation blends We automate discovery generic spaces applying amalgams notion known casebased reasoning 61 Sec 23 This process coordinates interleaved generalisation combination input concepts nonmonotonic search problem We solve search problem declarative framework Answer Set Programming ASP 2 described Sec 3 We evaluate blends reinterpreting optimality principles Fauconnier Turner 27 computational account Sec 21 36 This helps prune search space As proof concept implement framework exploratory creative tool create interesting blends domain mathematics music We reproduce blends literature Finally framework ﬁnds blends belong different domains Sec 4 We provide survey characterise existing computational blending systems Sec 5 position work state art 2 Preliminaries Our framework inspired cognitive theory conceptual blending presented Fauconnier Turner 27 underlying principles described Sec 21 To realise principles computationally follow work Goguen 34 provides category theoretical account blending Sec 22 Moreover Goguens work computationally feasible implement blending amalgambased workﬂow 61 notion developed casebased reasoning Sec 23 The implementation framework amalgambased workﬂow Answer Set Program ming ASP provide brief background Sec 24 21 Cognitive principles blending Creativity understood unfamiliar combinations familiar ideas goes notion bisociation idea creativity result intersection selective combination distinct frames reference presented M Eppe et al Artiﬁcial Intelligence 256 2018 105129 107 Fig 1 The houseboat blend adapted 33 Arthur Koestler book The Act Creation 1964 46 Based basic intuitions cognitive sciences ideas developed concrete approaches produce novel ideas concepts theories solutions problems works art One particular approach known theory conceptual blending conceptual integration proposed Fauconnier Turner 26 kind primitive fundamental cognitive operation underlying everyday thought language The process concepts blended novel idea seen complex event particular elements relations pertaining initial concepts combined selectively new understood structurally richer sense precise mere commonalities concepts Fauconniers view concepts prior notion blending Mental Spaces Theory highly inﬂuential cognitive theory meaning construction developed 24 25 According Fauconnier meaning construction involves processes 1 building mental spaces 2 establishment mappings mental spaces Moreover mapping relations guided local discourse context means meaning construction situated contextdependent Fauconnier Turner 27 constitutive elements conceptual blending These input spaces blended ii partial crossspace mapping connects counterparts input mental spaces iii generic space abstraction input spaces common iv blending operation produces blend input spaces structure input spaces selectively projected v emergent structure structure synergistic gain naive sum structure input spaces These constitutive elements organised conceptual integration network network input spaces generic spaces blend spaces selective projections model particular blending process Finally Fauconnier Turner propose certain optimality principles govern blending process taken way assess quality blend Let brieﬂy review constitutive elements optimality principles forth Fauconnier Turners model houseboat blend depicted Fig 1 illustrative example 211 Constitutive elements conceptual blending According cognitive theory conceptual blending process involves following elements Input Spaces Fauconnier Turner 27 consider input spaces blend mental spaces small conceptual packets constructed think talk purposes local understanding action According Fauconnier 24 mental spaces connected longterm schematic knowledge means frames model certain elements relations organised package know Often frames socalled image schemas 52 described Johnson 44 recurring dynamic pattern perceptual interactions motor programs gives coherence structure experience Image schemas critical semantic compositionality language cognitive linguists implement embodied construction grammars 222381 Moreover mental spaces built ondemand particular linguistic situation resulting concrete temporary packets conceptual structure For example contrary naive view meaning ﬁxed understanding concepts house boat mental spaces house boat constructed particular linguistic situations Hence assume input mental spaces possible output blends 108 M Eppe et al Artiﬁcial Intelligence 256 2018 105129 content mental space constant preexisting context For example house poor developing country different properties house rich urban area However computational blending systems 3783 emanate work Fauconnier Turner 27 simplify aspect theory consider blending operation takes input spaces given generates output spaces blends The approach taken paper formalise notion mental spaces built ondemand allowing heuristic generalisation adaptation input spaces computation blend This demonstrated examples shown Sec 42 Sec 43 Crossspace mapping According 27 p 41 partial crossspace mapping connects counterparts input mental spaces As example consider houseboat blend passenger boat mapped resident house ride relation passenger boat mapped livein relation resident house Generic Space The crossspace mapping points constitute generic space essentially contains common shared input mental spaces For example mapping passenger resident houseboat blend suggests generic space concept person generalises concepts passenger resident Blend The precise statement actual blending operation possibly following Fauconnier Turner 27 p 47 In blending structure input mental spaces projected new space blend Generic spaces blended spaces related Blends contain generic structure captured generic space contain speciﬁc structure contain structure impossible inputs The blend intersection union input spaces Parts input spaces selectively projected blend parts blend For example blending house boat houseboat requires select concept water boat input space concept land house input space The close relationship generic blend spaces makes important formal model blending come grips generic space arises blending process role plays Emergent Structure Composition Completion Elaboration The emergent structure refers additional structure blend directly copied inputs Emergent structure built processes composition completion elaboration First composition simply brings elements input spaces effect second completion inference additional information obtained accessing related frames scenarios elaboration intuitively means simulating behaviour elements blend interacting As emphasised Fauconnier Turner 27 p 49 creative possibilities blending stem openended nature completion elaboration From Artiﬁcial Intelligence viewpoint composition combines selective projection inputs Completion adds background knowledge blend completed needed purpose hand Elaboration involves reasoning inference sense background knowledge reason actions ele ments perform actions performed elements order elucidate eventual consequences blended mental space Conceptual Integration Network As stated Fauconnier Turner 27 p 44 Building integration network involves setting mental spaces matching spaces projecting selectively blend locating shared structures projecting backward inputs recruiting new structure inputs blend running operations blend 212 Optimality principles Optimality principles play role assessment measure blends As mention earlier input spaces blended different ways ﬁnding particular blend creative useful trivial The optimality principles Fauconnier Turner 27 mention compete satisfying princi ple dissatisfy In following summarize Fauconnier Turner 2627 deﬁne particular principles consider paper provide examples explaining role houseboat blend Topology Principle For input space element space projected blend optimal relations element blend match relations counterpart 26 In terms houseboat blend elements passenger resident blended passengerresident houseboat livesin relation resident house remains livesin relation passengerresident houseboat Pattern Completion Principle Other things equal complete elements blend existing integrated patterns additional inputs Other things equal use completing frame relations compressed versions important outerspace vital relations inputs 27 p 328 This principle related work image schemas Lakoff 51 Image schemas completing frames abstract versions input spaces For example houseboat blend Container image schema abstraction house container resident boat container passenger The pattern completion principle related emergent structure blend emergent structure arises completion elaboration Integration Principle The blend constitute tightly integrated scene manipulated unit More generally space blend structure integration 26 M Eppe et al Artiﬁcial Intelligence 256 2018 105129 109 For example blend scene house scene boat simple union scenes house resident boat passenger blend However perceived unit A better blend terms integration new concept houseboat treated better unit Maximisation Vital Relations Principle Other things equal maximise vital relations network In particular max imise vital relations blended space reﬂect outerspace vital relations Intensiﬁcation Vital Relations Principle Other things equal intensify vital relations 27 p 3301 According Fauconnier Turner 27 blending happen creatively invent new concepts serves means compress information input spaces socalled vital relations fundamental particular network As examples Fauconnier Turner 27 mention causeeffect time space identity change uniqueness relations If relations exist input spaces blending causes reappear compressed form blend Maximising andor intensifying vital relations blend increases degree compression blend produces This underpins importance blending means creativity eﬃcient cognitive operation Web Principle Other things equal manipulating blend unit maintain web appropriate connections input spaces easily additional surveillance computation 27 p 331 This refers relations spaces network For example placing houseboat new environment river scene maintains connections input spaces house boat relation resident house passengerresident houseboat As example consider case form residential fee paid houseboat If fee raised houseboat able infer raised house Other things equal blend prompt reconstruction entire The Unpacking Principle network 27 p 332 For example focusing concept houseboat access concept house proper ties relationship concepts Similarly access notion boat properties relationship concepts Relevance Principle This called Good Reason Principle Fauconnier Turner 27 p 333 follows Other things equal element blend relevance including relevance establishing links spaces running blend Conversely outerspace relation inputs important purpose network corresponding compression blend What eventually constitutes houseboat concept depend pursuing blending So relation livein relevant included blend But maybe relation numberofrooms relevant considered blend In general optimality principles deﬁned vague cognitive way meant perceived rigid rules However computationalize conceptual blending necessary ﬁnd way formalizing opti mality principles Our attempt results encoding principles quantitative evaluation metric presented Sec 36 22 A categorical view blending Goguen 34 proposes model input concepts blending semiotic systems essentially algebraic speciﬁ cations described logical representation language The main advantage approach able provide general computational feasible representation able resolve inconsistencies We represent semiotic sys tems Common Algebraic Speciﬁcation Language CASL 60 extend considering priority information operators sorts predicates axioms follows Deﬁnition 1 Prioritised CASL speciﬁcation A prioritised CASL speciﬁcation PCS tuple s cid3ST cid2 O P A priocid4 set ST sorts preorder cid2 deﬁnes subsort relationship set O operators o s1 sn cid5 sr map zero objects argument sorts s1 sn range sort sr set P predicates p s1 sn map zero objects argument sorts s1 sn Boolean values set A axioms function prio ST O P A cid5 N0 assigns priority elements speciﬁcation The lower number lower priority We refer listed constituents PCS simply elements PCS denoted e PCS compatible elements priority function equal Some elements PCS marked 1 We merge maximiseintensify vital relations principle distinguished sharply original text 110 M Eppe et al Artiﬁcial Intelligence 256 2018 105129 Fig 2 A diagram amalgam A I1 cid8 I2 inputs I1 I2 The arrows indicate subsumption relation cid9 dataelements represent ﬁxed background vocabulary 34 Def1 The priority data elements 0 0 lowest priority value A good motivation priorities prior work 20 Intuitively instrument express salience level elements concept helps algorithmically prune search space described Sec 3 Goguen 34s algebraic view blending suggests compute blend input speciﬁcations categorical colimit 69 The colimit general uniﬁcation operation categories similar union operation sets In case categories algebraic signatures colimit unify algebraic speciﬁcations described Mossakowski 57 The colimit requires morphisms deﬁned signatures algebraic speciﬁcations particular generic space input concepts Our blending algorithm uses colimit algebraic speciﬁcations basis composing input spaces described Sec 35 We consider priorities computing colimit use instead means reward compression structure blend This supports 27s optimality principles described Sec 35 23 The notion amalgams As shown 4 process conceptual blending characterised amalgams 61 notion devel oped casebased reasoning approach combine solutions coming multiple cases According approach input concepts generalised generic space pairs generalised versions input concepts combined create blends Formally notion amalgams deﬁned representation language L subsumption relation cid9 formulas descriptions L deﬁned We description I1 subsumes description I2 I1 cid9 I2 I1 general equal I2 Next descriptions I1 I2 L deﬁne uniﬁcation I1 cid8 I2 general specialisation given descriptions antiuniﬁcation I1 cid10 I2 deﬁned general generalisation descriptions representing speciﬁc description subsumes Intuitively uniﬁer description information original descriptions The antiuniﬁcation I1 cid10 I2 contains common I1 I2 An amalgam descriptions new description contains parts original descriptions For instance amalgam red French sedan blue German minivan red German sedan clearly multiple possibilities amalgams like blue French minivan An amalgam descriptions deﬁned follows Deﬁnition 2 A description A L amalgam inputs I1 I2 antiuniﬁcation G I1 cid10 I2 exist generalisations I1 I2 1 G cid9 I1 cid9 I1 2 G cid9 I2 cid9 I2 3 A I1 cid8 I2 A consistent This deﬁnition illustrated Fig 2 antiuniﬁcation inputs indicated G amalgam A uniﬁcation concrete generalizations I1 I2 inputs The generalisation description language L usually means generalisation operators 61 Formally generalisation operator deﬁned γ I I L I cid9 I cid2 I cid12 st I cid2 I cid12 cid2 I 1 Intuitively generalisation operator transforms description general equal For instance descrip tion red French sedan generalised red European sedan coloured French sedan red French car typically generalisation possible The antiuniﬁcation input descriptions coloured European car obtained keeping generalising descriptions equal The antiuniﬁcation M Eppe et al Artiﬁcial Intelligence 256 2018 105129 111 serves upper bound generalisation space explored plays role generic space conceptual blending states shared structure concepts2 24 Answer Set Programming Answer Set Programming ASP declarative approach solve NPhard search problems 312 ASP realizing deliberation problem solving skills autonomous systems 1619 forms logical reasoning epistemic abductive inference 1817 decision making uncertainty 8 preference reasoning 7 In work explore use Computational Creativity logical theory generalisation An ASP program similar PROLOG program follows nonmonotonic semantics takes logic programming style Horn clauses input uses negationasfailure NaF However instead Kowalski 47s SLDNF resolution semantics PROLOG employs Gelfond Lifschitz 32s Stable Model semantics makes truly declarative This means order ASP rules appear Logic Program affect solution Furthermore Stable Model Semantics advantage Answer Set Programs terminate PROLOG programs For example given program p q q p asking p holds results inﬁnite loop PROLOG ASP returns stable models solution sets p q An ASP program consists set rules facts constraints Its solutions called Stable Models SM In paper consider socalled normal rules 2 written a0 a1 j j1 2 a1 atoms negationasfailure When n 0 rule a0 called fact omitted A constraint rule form a1 j j1 Constraints rules discard models logic program The stable models ASP program deﬁned terms socalled GelfondLifschitz reduction 32 Let LP set atoms language normal logic program P set M LP GelfondLifschitz reduction P M deﬁnite logic program obtained P deleting rule formula body M ii formulæ form bodies remaining rules M called stable model P M minimal model P M A stable model M ASP program P contains atoms satisfy rules program consequently represents solution problem program P represents ASP interesting capture complex knowledge representation problems eﬃcient ASP implementations clingo 29 exist The clingo solver offers steporiented incremental approach allows control modify ASP program runtime need restarting grounding solving process scratch To end program partitioned base describing static knowledge independent step parameter t cumulative capturing knowledge accumulating increasing t volatile speciﬁc value t The grounding integration subprograms solving process completely modular controllable scripting language Python The ASP implementation paper follows methodology specifying solving problem incrementally For details incremental solving refer 30 examples 3 Blending amalgams We employ interleaved declarativeimperative amalgambased workﬂow search generalisations input spaces produce evaluate consistent blends The blending theory principle allows ﬁnite number S 2 input speciﬁcations implementation use S 2 simplicity The notion consistency work refers logical consistency algebraic speciﬁcations 31 System description The workﬂow depicted Fig 3 Most reasoning Answer Set Programming ASP generating sequence theory transitions The ASP implementation combined Python scripts perform external information processing necessary The main purpose implementation realize theory transitions occur generalisation process A theory transition removal element generalisation 2 From cognitive point view argue generic space plays central marginal role blending From mathematical point view relationship input space speciﬁcations determine generic space By modelling blending amalgams colimits makes sense generic space explicit constituent computational realisation blending 112 M Eppe et al Artiﬁcial Intelligence 256 2018 105129 Fig 3 Amalgambased workﬂow renaming element speciﬁcation Towards input PCS s1 s2 ﬁrst translated ASP facts described Sec 32 Second s1 s2 undergoing sequences theory transitions guided ASP solver generic space Each transition represented fact execγ s t t iterator γ transition operator removes renames elements input speciﬁcations Sec 33 The execution transition operators repeated generalised versions input speciﬁcations compatible sense Deﬁnition 1 We write st denote speciﬁcation results form tth transition s For example ﬁrst theory transition house concept concept house situated medium Note iterative ASPsolving iterator t causes atoms instantiated predeﬁned number steps 2829 In order ﬁnd consistent blends apply categorytheoretical colimit 57 compose transitioned input speci ﬁcations To end use HEterogeneous Tool Set HETS 58 The colimit applied different combinations transitions result query theorem provers eProver darwin embedded HETS order check consistency An example consistent houseboat blend combination generalised boat medium water passenger generalised house resident medium passenger boat renamed resident house To eliminate uninteresting blends search process consider promising blends require generalisations Consequently general generalisations general generalisations stop consistent colimit achieved Thereafter result evaluated certain metrics inspired Fauconnier Turner 27s optimality principles blending assess quality blend Sec 35 Note different stable models different generalisations renamings ASP solver Each combination leads different set blends 32 Modelling algebraic speciﬁcations ASP In order ﬁnd generic space avoid inconsistencies arise naive combination input speciﬁca tions weaken prioritised CASL speciﬁcations transition operators stepwise search process Firstly renaming operators modify speciﬁcations renaming elements Secondly removal operators generalise algebraic speciﬁcations removing operators sorts predicates axioms In following use t denote stepcounter represents number transitions speciﬁcation undergone We assume sorts operators axioms data sense Deﬁnition 1 common input speciﬁcations need consider ASPbased reasoning process With represent prioritised CASL speciﬁcations ASP follows cid3 For sort s speciﬁcation s parent sort s p state facts sorts s t P arents s sp t A fact 3a assigns sort s speciﬁcation s step t 3b assigns parent sort cid3 For operator o s1 sn cid5 sr speciﬁcation s op HasSorts o s1 1 t op HasSorts o sn n t op HasSorts o sr rng t ops o t 3a 3b 4a 4b 4c Facts 4b 4c state argument sorts range sorts operator 1 n determine position argument sort rng simply constant denote sort range sort operator cid3 Similarly predicate p s1 sn s generate LP facts preds p t predHasSorts p s1 1 t predHasSorts p sn n t 5a 5b M Eppe et al Artiﬁcial Intelligence 256 2018 105129 113 cid3 For axiom determine equivalence class axiom denoted eqa passing axiom respective Python function3 All logically equivalent axioms equivalence class b equivalence class b We determine elements sorts operators predicates involved axiom This information preconditions removal operators For example operator removal precondition exists atom involves operator Having computed equivalence class eqa determined ne elements involved axiom generate following facts axiom speciﬁcation s axInvolvesElems e1 t axs t axInvolvesElems ene t axHasEqClasss eqa t 6a 6b 6c We represent priority function prio PCS facts priorit ys e v p element e speciﬁcation s Compat ibility input speciﬁcations deﬁned Deﬁnition 1 represented atoms incompatibles1 s2 t triggered additional LP rules s1 s2 step t sorts subsort relationships equal ii operator predicate names equal iii argument range sorts operators predicates equal iv axioms equivalent 33 Formalising transition operators ASP We consider kinds transition operators PCS The ﬁrst kind involves renaming element element input speciﬁcation Since consider syntactically equal elements conceptually equal implementation seen identifying commonalities input spaces The second kind generalisation involves removal element speciﬁcation Generalisation operators executed renaming actions happened Considering Deﬁnition 1 trivial removal elements PCS generalisation operators sense Eq 1 Each generalisation operator deﬁned precondition rule inertia rule case renaming operations effect rule Preconditions modelled predicate poss states possible execute transition inertia modelled predicate noninertial states element speciﬁcation stays transition Effect rules model transition operator changes input speciﬁcation We represent execution transition operator atoms execγ s t denote generalisation operator γ applied s step t Removal operators A fact execrme s t denotes removal element e speciﬁcation s step t It different precondition rules removing axioms 7a operators 7b predicates 7c sorts 7d possrme s t axs e t exOtherSpecWithoutEqivAxs e t possrme s t ops e t exOtherSpecWithoutElems e t 0axs A t axInvolvesElems A e t0 possrme s t preds e t exOtherSpecWithoutElems e t 0axs A t axInvolvesElems A e t0 possrme s t sorts e t exOtherSpecWithoutElems e t 0axs A t axInvolvesElems A e t0 noOpUsesSorts e t noPredUsesSorts e t isNotParentSorts e t 7a 7b 7c 7d The precondition 7a removing axiom speciﬁcation atom exOtherSpecWithoutEqivAxs e t holds Such atoms produced exists speciﬁcation4 axiom logical equivalence class For removal elements similar precondition exOtherSpecWithoutElems e t denotes element removed involved speciﬁcation Such preconditions required allow generic spaces general input speciﬁcations sense elements removed contained speciﬁcations We require operators predicates sorts involved axiom removed denoted 0axs A t axInvolvesElems A e t0 Precondition 7d removing sorts additional requirement operator predicate argument range sort 3 Ideally check logical equivalence axioms However FOL generally undecidable check syntactic equivalence normalized versions axioms current version framework Logical equivalence diﬃcult solve undecidability FOL 4 We focus speciﬁcations paper approach general applied speciﬁcations 114 M Eppe et al Artiﬁcial Intelligence 256 2018 105129 removed exists speciﬁcation implemented noOpUsesSort noPredUsesSort facts respectively These triggered additional simple LP rules Another condition sort removal sort parent sort sort Consequently sort removal axioms operators predicate involve sort removed ﬁrst child sorts removed ﬁrst The inertia rules removing elements speciﬁcation simple noninertials e t execrme s t 8 All noninertial atoms cause element e remain speciﬁcation rule 12 Renaming operators A fact execrenamee e speciﬁcation scid12 cid12 scid12 s t denotes renaming element e speciﬁcation s element e In contrast removal renaming applied predicates operators sorts Axioms automatically rewritten according renamings involved elements Again different preconditions renaming operators 9a predicates 9b sorts 9c cid12 possrenamee e cid12 cid12 s s t ops e t ops cid12 cid12 e t opSortsNotEquivalents e s cid12 ops e s t preds e t preds t ops cid12 e cid12 t cid12 cid12 e e t s cid17 s t cid12 cid12 predSortsNotEquivalents e s preds e cid12 t preds cid12 cid12 s t sorts e t sorts e t cid12 cid12 e t cid12 e t s cid17 s cid12 possrenamee e cid12 cid12 s possrenamee e cid12 cid12 s 9a 9b 9c sorts e cid12 t sorts cid12 e t Furthermore case e A common precondition renaming operations element e exist speciﬁcation s e exist scid12 In case renaming operators predicates argument range sorts e e equivalent renaming possible For example operator situatedOn Object cid5 Medium mapped operator usedBy Object cid5 Person different range sort s e scid12 cid12 cid12 cid12 The inertia rules renaming elements e speciﬁcation analogous inertial rule removing elements noninertials e t execrenamee e cid12 cid12 s s t For renaming following set effect rules assign new respective element P arents s P arents s s cid12 op HasSorts o s cid12 sorts e cid12 cid12 cid12 s t 1 execrenamee e s t sorts e t cid12 sp t 1 P arents s sp t execrenames s s cid12 cid12 p t 1 P arents s sp t execrenamesp s p s cid12 n t 1 op HasSorts o s n t execrenames s s cid12 n t 1 predHasSorts p s n t execrenames s cid12 cid12 cid12 cid12 s t s t s t cid12 s s t predHasSorts p s cid12 t 1 execrenameo o cid12 cid12 s s t ops o t ops o cid12 preds p cid12 op HasSorts o s n t 1 op HasSorts o s n t execrenameo o cid12 cid12 s s t cid12 t 1 execrenamep p cid12 cid12 s s t preds p t predHasSorts p axInvolvesElems e s n t 1 predHasSorts p s n t execrenamep p cid12 t 1 axInvolvesElems e t execrenamee e cid12 s cid12 s cid12 cid12 s t s t 10 11a 11b 11c 11d 11e 11f 11g 11h 11i 11j cid12 step t 1 element e renamed In general rules state speciﬁcation contain element e step t Rules 11a11e state renaming sorts affects generalization It considers effects parent e child relations predicate operator arguments range Rules 11f 11g 11h 11i effects renaming operators predicates respectively Rule 11j states auxiliary predicate axInvolvesElem affected renaming Inertia In order use inertia rules 8 10 need following rules state elements e remain cid12 speciﬁcation s inertial M Eppe et al Artiﬁcial Intelligence 256 2018 105129 sorts e t 1 noninertials e t sorts e t ops e t 1 noninertials e t ops e t preds e t 1 noninertials e t preds e t axs e t 1 noninertials e t axs e t 115 12a 12b 12c 12d Updating axiom equivalence When operators predicates sorts involved axiom renamed axioms equivalent class changes Determining logical equivalence FOL axioms understood research domain use existing theorem proving tools Towards use external Python function renameEleAndGetNewEqClass rule 13 ASP solving process updates equivalence class querying theorem proving tools determine new equivalence class axiom elements renamed This happens accessing internal dictionary axioms Python built dynamically ASP grounding process axHasEqClasss eqa ne w t 1 axHasEqClasss eqa t 13 execrenames e1 e2 t axInvolvesElems e1 t axs t eqa renameEleAndGetNewEqClasseqa e1 e2 ne w Additional rules update axInvolvesElem atoms elements renamed implementation 34 Transition search process The search process use ASP ﬁnd generic space transitioned versions input speciﬁcations lead consistent blend This successively applying transition operators input speciﬁcations Herein ﬁrst apply renaming operators ﬁnd commonalities input speciﬁcations We cut elements input speciﬁcations common applying removal operators Note simple inter section operation set theory possible preconditions transition operators These impose strong restriction allowed order transition operators occur problem inherently nonmonotonic A sequence transition operators deﬁnes transition path consists commonalisation path followed removal path Deﬁnition 3 Commonalisation removal transition paths Let S s1 sS input speciﬁcations blended Let γ1 γn renaming operators t1 tn steps Then set atoms C execγ1 sx t1 execγn s y tn commonalisation path S sx s y S Let γn1 γm removal operators tn1 tm steps Then set atoms R execγn1 su tn1 execγm sv tm removal path S su sv S We C R transition path S We refer transition paths Section 35 combine different transitioned versions input speciﬁcations generated preﬁxes removal paths Formally preﬁx removal path subse quence ﬁrst l removal operators Deﬁnition 4 Removal path preﬁx Given removal path R execγn1 su tn1 execγm sv tm R pre execγn1 su tn1 execγl sw tl preﬁx R l m su sv sw S A general problem amalgams space possible transition paths space possible blends usually huge To prune search space consider transition paths elements low priority removed elements higher priority elements high priority commonalised elements low priority5 Since separated commonalisation removal process need decide switch The simplest solution switch possible commonalities prevent ﬂexible generate blends possible commonalisations considered As example consider blending house boat obtain boat house concept described Sec 41 In blend commonalities considered concept boathouse deﬁnitely interesting Hence deﬁne predicate ﬁndCrossSpaceMapPhaseFinishedt determines step t search cross space mapping commonalities ﬁnished This following choice rule commonalisation search process 5 To allow consideration semioptimal generalisation paths relax restriction allowing limited number generalisation operators path respect cost order 116 M Eppe et al Artiﬁcial Intelligence 256 2018 105129 1execa s t renameActa s possa s t1 ﬁndCrossSpaceMapPhaseFinishedt 14 The renameAct predicate denotes renaming operator The removal generic space search process choice rule follows 1execa s t removeActa s possa s t1 notGenericReachedt ﬁndCrossSpaceMapPhaseFinishedt 15 The predicate notGenericReached triggered generic space reached search terminates generalised versions input speciﬁcations equal This case axioms logically equiv alent sorts predicates operators syntactically equal The removeAct predicate denotes removal operator 35 Composition transitioned input spaces The transition framework generates stable model combination transition paths leads generic space The step amalgambased workﬂow compose transitioned versions input speciﬁcations generate candidate blend Fig 3 The key component composition process categorical colimit 57 generalised speciﬁcations generic space This requires morphisms generic space input speciﬁcations inherently given commonalisation path Deﬁnition 3 Since colimit algebraic speciﬁcation signatures consider consistency priority information need deﬁne composition operation prioritised CASL speciﬁcation based colimit considers priorities consistency Deﬁnition 5 Composition PCS The composition c n PCS S generic space g total morphisms m g cid5 s s S deﬁned follows Let scolimit colimit PCS priorities colimit algebraic sn cid5 scolimit deﬁned respect CASL speciﬁcations underly PCS Let morphisms mc 1 speciﬁcations Then composition c S PCS constituted colimit scolimit enriched following priority function elements e composed PCS s1 cid5 scolimit mc n prioe ncid2 cid2 i1 esemi prioies 16 Hence assign priorities elements e composition Equation 16 simply adds priorities respective source elements es morphisms The intuition elements blend higher priority represent compressed structure For example operators input spaces point operator blend blend compresses structure imposed operators Similar axioms sorts predicates This supports Fauconnier Turner 27s optimality principles helps evaluate blends explain Sec 36 One argue product maximum priorities input elements instead sum However experiments maximum reward compression product rewards compression The intuition sum add priorities single compressed target element composition exactly important individual input elements For example consider predicate liveIn Person House House speciﬁcation predicate ride Person Boat Boat speciﬁcation shown Fig 4 Both mapped element composition Note categorical approach syntactic label element composition important We use label input speciﬁcations concatenate symbols input speciﬁcations _ character postprocessing step liveIn_ride Person_Passenger House_Boat Since liveIn_ride commonalised carries information input spaces joint priority input elements implemented summing priorities corresponding operators liveIn ride input spaces Deﬁnition 5 36 Evaluating blends The step blending process evaluate composition according factors reﬂect informal optimality principles proposed Fauconnier Turner 27 To end following evaluation metrics account 1 We support blends possible important parts input concepts priority information elements input concepts This supports optimality principles 27 imply possible input spaces projected blend socalled unpacking web integration principles 2 We support blends maximise common relations input concepts means compress structure input spaces Relations common appropriate renamings elements input speciﬁcation This supports vital relations principles 27 M Eppe et al Artiﬁcial Intelligence 256 2018 105129 117 3 We support blends information input speciﬁcations balanced This supports multi scope property blends described Fauconnier Turner 27 typically ﬁnd scientiﬁc artistic literary discoveries inventions The rationale choosing metrics simple effective way evaluate blends perspectives informational content content structure On hand want favour blended concepts maintain information input concepts possible This ﬁrst metric deﬁning information blend sum priorities elements On hand want favour blends maintain structure input concepts possible This metrics blend compression essentially measures morphisms applied different elements blend imbalance penalizes blends created mainly elements input spaces We deﬁne metrics formally The information PCS given cid2 infoValues prioe es 17 Equation 17 deﬁnes information PCS sum priorities elements A measure compression structure composition c n morphisms M m1 s1 cid5 c mn sn cid5 c deﬁned compressionc cid2 eleCompe ec eleCompe prioe m Mes es e m n 18 19 The compression value composition c sum compression values individual elements denoted eleComp The compression value individual element priority element multiplied number morphisms normalised total number input morphisms We account balance information input speciﬁcations That consider blends better information input speciﬁcations similar Towards deﬁne imbalance penalty half difference information input speciﬁcation follows imbalancec absinfoValues1 infoValues2 2 20 Taking half difference imbalance penalty turned useful taking difference encourages blends information total imbalanced The ﬁnal evaluation blend summing evaluation metrics considering logical consistency follows cid3 valuec infoValuec compressionc imbalancec 0 c consistent 21 Note imbalance penalty bigger information value blend value positive An interesting extension computing value parameterise different metrics However far experimented The transition path pruning described Sec 34 supports information value compression value metrics removing lowpriority elements highpriority elements information value commonalising highpriority elements lowpriority elements compression value lowvalue blends generated We imple mented feasible solution consider imbalance penalty pruning mechanism The issue blends evaluated important theory conceptual blending addition evaluation metrics generic kind blends domain speciﬁc criteria eventually added blending framework For reason explored different audiences respective values brought blend evaluation process 12 proposed evaluation techniques draw argumentation theory 9 coherence theory 75 Beyond evaluation blends Computational Creativity com munity extensively studied evaluate creativity computational systems general models proposed 72645 applied models evaluation framework 62 following Section 4 4 Proof concept To demonstrate ﬁrst present use case houseboat primarily serves illustrative purposes Then consider examples realworld domains creativity important mathematics music The examples harmony invention Sec 42 lemma invention Sec 43 crossdomain blending Sec 44 illustrated supplementary video 118 M Eppe et al Artiﬁcial Intelligence 256 2018 105129 spec House sorts Medium spec Boat sorts Medium House Object Person Object house House resident Person land Medium liveIn Person House Object Medium ops preds liveInresidenthouse onhouseland Boat Object Person Object boat Boat passenger Person water Medium ride Person Boat Object Medium ops preds ridepassengerboat onboatwater end end Fig 4 The house boat speciﬁcations CASL spec GenericSpace sorts Medium House Object Person Object house House resident Person liveIn Person House Object Medium ops preds liveInresidenthouse end House House house resident GenericSpace sort containing object containing object contained object Boat Boat boat passenger li veIn relation contained containing object ride Fig 5 The generic space houseboat blend spec House_Boat sorts Medium spec Boat_House sorts Medium Boat Object Person Object boat Boat resident Person landwater Medium liveIn Person Boat Object Medium ops preds liveInresidenthouse onboatwater end end House Object Boat Object house House boat Boat landwater Medium liveIn Boat House Object Medium ops preds liveInboathouse onhouseland onboatwater Fig 6 The houseboat boathouse blends 41 The houseboat blend A classical concept blending example blend concepts house boat 3427 In Fig 4 depict axiomatisation concepts similar proposed 35 Priorities equal elements speciﬁcations omit brevity The CASL theories House Boat introduce sorts operators predicates form mental spaces house boat focusing particular properties concepts The pre cise formalisation critical point different ones exist 3563 provide similar distinctions In principle House Boat speciﬁcations directly blended generate inconsistency blended speciﬁcation considered good blend maximise common relations input speciﬁ cations Instead interesting blends created depending House Boat transitioned A houseboat blend created medium house situated land medium boat situated water resident house passenger boat In achieved generic space depicted Fig 5 This generic space obtained removing onhouse land axiom House speciﬁcation water operator onboat water axiom Boat speciﬁcation renaming operators ride liveIn passenger resident boat house sort Boat House Boat speciﬁcation The morphisms generic space input spaces shown right Fig 5 The colimit results generic space morphisms theory boat house passenger resident houseboat Fig 6 left Our able generate classic blends For instance boathouse created turns boat person renaming resident boat Person Boat minor generalisations Fig 6 right Here colimit expresses blend boat lives house M Eppe et al Artiﬁcial Intelligence 256 2018 105129 119 spec PerfectCad ChordProg c1Perf Chord op c2Perf Chord op succc1Perf c2Perf absNotec1Perf 7 absNotec1Perf 11 absNotec1Perf 2 absNotec1Perf 5 relNotec1Perf 0 relNotec1Perf 4 relNotec1Perf 7 relNotec1Perf 10 rootc2Perf 0 end p10 p10 p5 p2 p3 p1 p2 p3 p3 p2 p3 p1 spec PhrygCad ChordProg c1Phryg Chord c2Phryg Chord op op succc1Phryg c2Phryg absNotec1Phryg 10 absNotec1Phryg 1 absNotec1Phryg 5 relNotec1Phryg 0 relNotec1Phryg 3 relNotec1Phryg 7 rootc2Phryg 0 end p10 p10 p5 p2 p1 p2 p3 p3 p2 p1 Fig 7 The relevant excerpts perfect cadence Phrygian cadence speciﬁcations Only ﬁrst chord fully speciﬁed brevity The second chord plain Cmaj cadences 42 Harmony invention music composition In music domain invent novel chord progressions blending existing ones demonstrate approach extends musicological framework proposed previous work 20 Speciﬁcally blend chords invent novel cadences short chord progressions understood punctuation music piece While depicted 20 limited blending single chords able blend chord progressions example perfect cadence Phrygian cadence We present relevant parts ﬁrst chord cadence algebraic speciﬁcations Fig 7 Both speciﬁcations built background theory ChordProg chord progressions deﬁnes predicate succ denote successor relation chords predicate absNote determine absolute notes chord predicate relNote determine notes chord relative root note indicated root operator Chord Prog contains axiom hasRelNotec n hasAbsNotec plusn rootc deﬁnes relation absolute relative notes background theory states chord dissonant Dissonance captured axioms forbid certain relative note combinations For example express chord major relative note 4 minor relative note 3 time c Chord relNotec 3 relNotec 4 Given C major key Phrygian cadence involves Bcid3min chord followed C chord perfect cadence G7 chord followed C The priorities axioms assign notes chords musicologically justiﬁed described 20 relatives given higher priority absolute notes salient key given higher priority In addition axioms considers priority individual chords represented operators c1Perf G7 chord c2Perf C chord c1Phryg Bcid3min chord c2Phryg C chord Blending cadences produces Tritone substitution cadence result highest value The tritone substitution invented jazz music decades Phrygian perfect cadence It takes Dcid3 note ﬁrst chord Phrygian cadence speciﬁed absNotec1P hr yg 1 root ﬁrst chord novel Tritone cadence The blending adds relative seventh G7 chord perfect cadence relNotec1Perf 10 major relNotec1Perf 4 ﬁfth relNotec1Perf 7 present chords The result Dcid37 chord ﬁrst chord Tritone substitution The allows blend second chord cadence ﬁrst chord novel chord progression notes produced Note renaming operators level cadences chord progressions level single chords 43 Lemma invention theorem proving In mathematics domain present general approach blending exploit existing creative lemmas understood theory automatically generate creative lemmas understood theory For illustration consider prioritised theories natural numbers lists shown Fig 8 An illustration demo blending application provided supplementary video 700 Important elements speciﬁcations constructor operators s successor function cons constructor lists Due importance high priority Of particular theorems NT LT given high priority provide important insights relation tailrecursive functions qrev qsum primitively recursive counterparts rev sum Proving theorems induction hard absence universally quantiﬁed variable second argument tailrecursive version 42 An experts solution use lemma generalises theorem An example generalisation eureka lemma NL naturals assume known scenario Discovering lemmas general challenging wellknown problem 5643 example Our goal use blending discover analogous lemma facilitates inductive proof LT List 120 spec Nat sort Nat ops zero Nat s Nat Nat sum Nat Nat qsum Nat Nat Nat plus Nat Nat Nat x y Nat sumzero zero sumsx plussx sumx qsumsx y 0 1 2 qsumx plussx y qsumzero x x pluszero x x plussx y splusx y 3 4 5 NT sumx qsumx zero NL plussumx y qsumx y end M Eppe et al Artiﬁcial Intelligence 256 2018 105129 spec List p3 p2 p3 p2 p2 p1 p2 p2 p2 p2 p1 p1 p3 p3 ops sorts El L nil L cons El L L app L L L rev L L qrev L L L x y L h El revnil nil revconsh x apprevx consh nil qrevnil x x qrevconsh x y qrevx consh y 6 7 8 9 10 11 appnil x x appconsh x y revx qrevx nil LT end consh appx y p3 p3 p2 p3 p2 p2 p2 p2 p2 p2 p2 p1 p1 p3 Fig 8 Speciﬁcations natural numbers lists The ﬁrst step blending ﬁnd generic space However problematic constructor sn naturals unary constructor consh l lists binary In order resolve problem inspiration classical set theoretic construction naturals cardinality set 1 example That theory naturals theory lists exactly element6 As result generalise theory naturals adding extra argument successor function sn sc n c canonical element canonical sort C The deﬁnition plus example simply plussc n m sc plusn m This way obtain correctly typed generic space interpreting renaming removal operators ASP solver allows associate constructors Nat List following generalisation paths7 P Nat execrenameNat L List Nat 0 execrenamezero nil List Nat 1 execrenameC El List Nat 2 execrenames cons List Nat 3 execrenamesum rev List Nat 4 execrenameqsum qrev List Nat 5 execrenameplus app List Nat 6 execrm4 Nat 7 execrm5 Nat 8 execrm1 Nat 9 execrm2 Nat 10 execrmc Nat 11 execrmN L Nat 12 P List execrm10 List 0 execrm11 List 1 execrm9 List 2 execrm7 List 3 After applying respective renamings removals generic space reached symbols List theory Note symbols lists theory generic space meaning gen eral map List Nat theory represent analogies theories depicted Table 1 That generic space general theory sorts constructed data types elements bi nary constructor terminal element primitively recursive function tailrecursive function deﬁned terms auxiliary function After ﬁnding generic space framework iterates different combinations transitioned input speciﬁcations computes colimit It checks colimits consistency computes blend value In example highest composition value consistent colimit 90 speciﬁcations result 4th transition List 8th transition Nat input The result theory lists newly invented lemma apprevx y qrevx y successfully generalisation lemma prove LT 44 Crossdomain blending So far considered input concepts domains blend chord progressions chord progres sions mathematical theories mathematical theories However biggest challenges creative systems 6 The future work Sec 6 elaborates way recursively construct data structures 7 In expressions rm4 rm5 rm1 natural numbers correspond labels axioms input speciﬁcations Fig 8 M Eppe et al Artiﬁcial Intelligence 256 2018 105129 121 Table 1 The generic space mappings theories List Nat Nat Nat C zero s sum qsum plus Generic Space Constructed datatype Constructed datatype element terminal element constructor recursive function tailrecursive function auxiliary function List L El nil cons rev qrev app ops spec CyclicGroup sorts Nat Ele Group zero Nat s Nat Nat ele Ele group Group binop Ele Ele Ele binops Ele Nat Ele ident Ele inv Ele Ele pred hasElement Group Ele hasElementgroupele binopsg zero ident binopsgsn binopgbinopsgn hasElementgroupbinopselen 1 g Ele n Nat 2 3 4 g Ele n Nat 5 end binopsele n g spec GeneratorChord sorts Chord ops Note chord Chord gennote Note root Chord Note plus Note Note Note nextNote Note NoteNote preds hasRelNote Chord Note hasAbsNote Chord Note hasRelNotechrodgennote c Chord n Note rootc n hasAbsNotecn c Chord n Note hasRelNotecn hasAbsNotecplusrootcn 6 7 8 end Fig 9 Speciﬁcations cyclic groups generator chord theories able deal concepts coming different domains Generally crossdomain blending aims transfer knowledge domains create new possibly adaptation Blending multidomain concepts challenging different domains contain different knowledge different symbols representations need crossmapped order ﬁnd new meaningful blended concepts Our framework general blend concepts different domains example blend chords mathematical theories We refer supplementary video detailed illustration 830 audio samples 1800 In follows construct theories blending specify logical hull This means deﬁnitions theories need evaluated order determine contents theory In particular use recursive functions Evaluating inputs gives facts theories reason 441 Group theory chord construction Consider case blending speciﬁcation cyclic groups elements speciﬁcation chords deﬁned intervals notes shown Fig 9 The general theory group mathematics combination set elements G binary operation A group G following axioms x y G x y G e G x G x e x 1 e 1 G x x x y z G x y z x y z x G x 22 23 24 25 Extending notion group cyclic group involves restricting set elements ﬁnite introduce notion generator element The size set given order o Elements group constructed successive applications binary operation generator element introduce shorthand λx yx y denote successive application example g3 g g g We add following axioms cyclic group g Gx Gn N0 n o x gn 26 122 M Eppe et al Artiﬁcial Intelligence 256 2018 105129 spec CyclicGroupChordBlend sorts Note ops Chord Nat plus Note Note cid5 Note binops Note Nat cid5 Note chord Chord gennote Note ident Note root Chord cid5 Note s Nat cid5 Nat zero Nat preds hasAbsNote Chord Note hasAbsNote Chord Note hasRelNotechordgennote gc Chord en Note n Nat hasRelNotechordbinopsgennoten binopsensn plusen binopsenn hasRelNotegcen hasAbsNotegcplusrootgcen binopsenzero ident gc Chord en Note rootgc en hasAbsNotegcen en Note n Nat binopsgennoten en Fig 10 The blend cyclic groups generator chords Table 2 The generic space mappings theories CyclicGroup GeneratorChord CyclicGroup Generic Space GeneratorChord Group Ele binop group ele hasElement Constructed datatype Constructed datatype element Binary operation elements Instance constructed datatype Generator element Predicate denoting membership Chord Note plus chord gennote hasRelNote This axiom means inverse x identity element e 1 element x constructed generator element In CASL theories shown Fig 9 model axioms speciﬁcation CyclicGroup compute elements cyclic group function binop introduce recursive function binops successive application operator λx y x y We introduce predicate hasElement deﬁnes elements cyclic group In case generator chord speciﬁcation shown Fig 9 extend notion chord previously deﬁned Sec 42 include generator note included relative note chord Thus generator chord generator note 3 contains minor We introduce notion adding interval operator plus In case generic space computed depicted Table 2 During blending priority 1 elements This leads blend speciﬁcation Fig 10 Conceptually blend corresponds speciﬁcation chord notes generated axioms cyclic group order 12 number notes scale The speciﬁcation deﬁne notes chord deﬁnes way calculating speciﬁc notes given generator note interval Calculating logical hull speciﬁcation given particular instantiation gennote gives notes chord Speciﬁcally evaluating func tion binops natural numbers generates notes exist relatively logical hull virtue axiom hasRelNotechord binopsgennote n A theorem cyclic group theory prime factors generator divide cardinality set generate member set In case numbers divide 12 number notes scale set 1 5 7 11 Let ﬁrst discuss signiﬁcance chord speciﬁcations generated generated notes divide 12 form subgroups These itemised axiom added speciﬁcation generate chord calculating logical hull gennote 2 This corresponds adding relative major second speciﬁcation The logical hull adding axiom CyclicGroupChordBlend gives relative notes 0 2 4 6 8 10 chord constructed tone scale This altered chord For example key C gives C D E F Acid3 Bcid3 Generalising chord removing elements allows create potential chords including C 7cid313 C augmented C9 M Eppe et al Artiﬁcial Intelligence 256 2018 105129 123 gennote 3 This corresponds adding relative minor speciﬁcation The logical hull adding axiom CyclicGroupChordBlend gives relative notes 0 3 6 9 speciﬁes diminished chord For example key C C Eb F A diminished chord This interesting forms 4 notes Acid37cid39 chord modiﬁed dominant chord jazz resolve key Dcid3 Because chord naturally cyclic account blend cyclic group theory equally transition keys E G Bcid3 meaning function versatile Bach versatility diminished chord perform seemless unexpected key changes pieces gennote 4 This corresponds adding relative major speciﬁcation The logical hull adding axiom CyclicGroupChordBlend gives relative notes 0 4 8 specify augmented chord In key C C E Acid3 This transition chord This corresponds adding diminished ﬁfth speciﬁcation This produces notes 0 6 particularly interesting provide means dissonance piece gennote 6 gennote 8 gennote 9 gennote 10 This equivalent situation add gennote 4 This equivalent situation add gennote 3 This equivalent situation add gennote 2 Sequences generated remaining numbers involve note scale This simply generate chords consisting 12 notes interesting However slightly extend theory consider order notes produced notice reproduction creative technique modern jazz voicing With speciﬁcations chords feasible As example consider chord speciﬁed note sequence 0 3 7 10 2 minor ninth As notion voicing represents playing notes C D Ecid3 G Bcid3 In reality place D Bcid3 octave second root If consider construction sequences monotonically increasing introduce notion voicing allowing notes higher pitch previous list Let consider construction sequence created adding numbers gennote 1 This conceptually uninteresting chord formed sequentially playing chromatic scale immediately dissonant function gennote 5 gennote 7 gennote 11 This corresponds adding perfect fourth generating sequence relative notes 0 5 10 3 8 2 6 11 4 9 2 7 This corresponds way tetrachords formed For example C play C F Bcid3 Ecid3 speciﬁed initial 4 notes sequence This sort chord McCoy Tyner uses create modern accompanying sound This corresponds adding perfect fourth generating sequence relative notes 0 7 2 9 4 11 6 1 8 3 10 5 This corresponds playing chords constructed incrementing intervals 5ths For example C play C G D A speciﬁed initial 4 notes This constitutes suspended type chord This corresponds adding major 7th incrementally generating sequence notes 0 11 10 9 8 7 6 5 4 3 2 1 Enforcing constraint constructed chord consist increasing intervals makes playable dissonant We know piece type chord employed 442 Progression theory constructing Coltrane changes In similar way chord construction construct chord progressions blends involve cyclical groups The difference number associated chord tonal centre cadence Fig 11 shows cyclic group deﬁned speciﬁcation list given Fig 8 Polymorphism modelled CASL operator elements list list spec deﬁned particular sort spec ListNote List El cid5 Note L cid5 LN end spec ListChord List El cid5 Chord L cid5 LC end In order model cyclic groups computational way introduce function calc_subseq calculates list elements group certain order The binary operation associated group constrained introducing partial minus operation natural numbers The idea list elements cyclic group associated 124 M Eppe et al Artiﬁcial Intelligence 256 2018 105129 Table 3 The generic space mappings theories Cyc12 Progression Cyc12 Generic Space Progression GroupElement subseq Constructed Datatype Input List Chord lin SPEC Progression PerfCadence ListNote ListChord ops op op op op calc_prognil nil h Note t LN calc_progconsh t c1 c2 Chord p Perf lin LN lout LC calc_prog LN LC consprep h conspostp h calc_progt lout calc_proglin end spec Cyc12 op CyclicGroup gen G gen 4 G order 12 G subseq calc_subseqgen end subseq ListG binop G G G ident G inv G G spec CyclicGroup NatSuc sort G Nat List El cid5 G L cid5 ListG op op op op pred gen G op op op x y z G binopx binopy z binopbinopx y z binopx ident x binopx invx ident order plusx y binopx y minusplusx y order x y calc_subseq_rx y nil x y order Nat calc_subseq G ListG calc_subseq_r G G ListG calc_subseq_rx y consbinopx y calc_subseq_rx binopx y calc_subseqx calc_subseq_rx x end Fig 11 Speciﬁcations progression cyclic groups lists theories tonal centres form progression The tonal centre simply chord shown Fig 11 perfect cadence The progression function calc_prog shows compute list chords deﬁning progression The operator lin deﬁnes list input tonal centres This way list tonal centres deﬁned computing different cyclic groups order 12 generate interesting progressions For example Fig 11 shows reﬁned speciﬁcation Cyc12 deﬁnes order 12 generator element 4 The blend produces theory successive perfect cadences tonal centres determined list elements group The Generic space morphisms shown Table 3 Depending choice value gen choice cadence different progressions generated In case Cyc12 speciﬁcation generate progression known jazz Coltrane Changes With generator 4 subseq calculated 084 If interpreted tonal centres progressive perfect cadences speciﬁed blend key B major F7 B D7 G Bcid37 Ecid3 excepting initial dominant F7 exactly iconic John Coltrane tune Giant Steps started Other examples progressions depend choice cadence choice gen include example gen 3 Cadence Perfect gen 2 Cadence Phrygian gen 5 Cadence Tritone An example progression F root C7 F A7 D F7 B Eb7 Ab progression exploited piece maths jazz group Algorhythmical An example progression C root Bb C Acid3 Bb F A f lat E F D E As far authors know existing composition An example progression C root Dcid37 C F7 F B7 Bcid3 E7 Ecid3 A7 Acid3 D7 Dcid3 G7 F C7 B F7 E Bcid37 A Ecid37 D Acid37 G As far authors know existing composition The examples approach recreates existing creative leaps theory composition jazz progressions creates previously unused progressions discovered existing compo sitions The technique employing conceptual blending allows elements music theory exist blend elements mathematical theory cyclic groups Had simply picked notes integer sequence generation constraints music theory exist ListChord theory expressed notions cadences discussed Sec 42 associated constraints rendered entirely unconstrained chord progression theory The restriction resulting blends musically surprising viable progressions attributed directly approach taken paper 5 Related work M Eppe et al Artiﬁcial Intelligence 256 2018 105129 125 Several approaches formal computational models conceptual blending proposed 111312202149 358363643336 Many models inspired work Fauconnier Turner 27 approaches emanating analogical reasoning 76 neuroscience 79 Amalgambased conceptual blending developed blend EL concepts 101113 In works generalisation EL concept achieved means generalisation reﬁnement operator This line work extended general debugging problem ontologies combining ideas social choice theory general isation operators 70 The reﬁnement operator implemented ASP stepwise transition process similar presented paper looks generic space concepts The operator generalises concept taking TBox knowledge terminology account Good blends selected reinterpreting op timality principles Blending ontologies concepts explored ontological blending framework Kutz et al 49 blends computed colimits blending diagrams speciﬁed according Distributed Ontology Language DOL 59 recent OMG international ontology interoperability standard In framework blending pro cess characterised terms amalgams input concepts generalised syntactically Rather generic space assumed given mapped input ontologies theory interpretations Confalonieri et al 12 propose general process model concept invention extends conceptual blending theory Fauconnier Turner 27 Apart blending mechanism modelling creation new concepts authors focus extra dimensions typically addressed computational approaches concept blending On hand Rich Background supports discovery input concepts blended On hand arguments promoting demoting values audience invention headed evaluate candidate blends Besides Schorlemmer et al 75 evaluation new blended concepts achieved taking computational theory conceptual coherence Thagard 78 account In setting newly invented concepts evaluated respect background ontology conceptual knowledge decide accepted familiar concepts A similar approach taken recently 14 determining joint coherence ALC concepts wrt background ontology The Alloy algorithm 35 conceptual blending incorporates ideas algebraic semiotics approach Goguen 34 conceptual blending theory Fauconnier Turner 27 Alloy integrated Griot automated narrative generation 353938 Apart primary conceptual blending approach realised Alloy Griot uses secondary structural blending mechanism blends dynamic elements natural language narratives generate poetry The input spaces Alloy algorithm theories deﬁned algebraic speciﬁcation language BOBJ 53 This allows represent sorts operators constants axioms The blending algorithm generates binary trees based input graph The trees represent space possible mappings relations ii space possible mappings constants respectively The trees combined sense leaves constantstree applied relationstree The resulting combined tree leaves represent possible sortpreserving mappings relations constants possible blends During tree generation certain optimality principles applied prune space The authors explicitly account crossspace mapping How edges relations constants different theories understood weak form crossspace mapping Alloy uses edges potential crossspace mapping determine generic space Sapper originally developed Veale Keane 84 computational model metaphor analogy It com putes mapping separate domains understood graphs concepts respects relational structure concepts domain Strictly speaking Sapper produce blends structural mappings input concepts It seen computational model conceptual blending mappings pairs concepts constitute output manipulated atomic units blended concepts 83 Further Sapper work priori given input spaces It structure mapping algorithm given domains mapped determines set concepts relations concepts constitute spaces blended It searching semantic memory largest substructures bounded previously ﬁxed size root concepts domains isomorphic respect relational structure concepts metaphorically related Semantic memory represented semantic network 71 graph nodes rep resent concepts edges represent binary relations concepts The actual correspondence blend concepts computed applying spreading activation algorithm according Sapper locates pairs paths structurally isomorphic equal length constituted sequence semantic relations terminate concepts Sapper considers semantically bridgeable In Sapper optimality principles captured serve rank ﬁlter correspondences comprise mappings computed algorithm Veale 82 pro poses webbased approach generate loosely deﬁned blends calls conceptual mashups Inconsistencies evaluation metrics addressed work instead author focuses Internet provider massive background information required generate meaningful blends The research 6567 led development Divago 636864 probably ﬁrst complete implementation conceptual blending Pereira draws terminology deﬁnitions formal computational model Wiggins formalisation creative systems 86 The implementation Divago realised Prolog The Divagos architecture includes different modules A knowledge base contains different microtheories instantiations Of selected 126 M Eppe et al Artiﬁcial Intelligence 256 2018 105129 blending user randomly A mapper generates generic space inputs passes blender module generates blendoid projection deﬁnes space possible blends Blending Divago pair concepts taken multidomain8 knowledge base A factory component select best blends blendoid means genetic algorithm A dedicated module implements optimality principles Given blend module computes measure principle These measures yield preference value blend taken ﬁtness value genetic algorithm Recent works 8755 use Divago blending component computational creativity infrastructure discuss relevance optimality principles Divagos architecture Guhe et al 36 present approach use HeuristicDriven Theory Projection HDTP 76 blending concept invention HDTP originally framework analogical reasoning manysorted ﬁrst order language represent conceptual spaces In HDTPbased analogical reasoning knowledge mapped transferred usually wellknown source domain S target domain T This happens phases In mapping phase source target compared ﬁnd commonalities In particular HDTP uses secondorder antiuniﬁcation restricted way renders process decidable In transfer phase unmatched knowledge source mapped target establish new hypothe ses The blending theories happens steps First core blend laws applied second preferred conjectures added extra conjectures added The authors directly account optimality principles Fau connier Turner However preferred extra conjectures seen alternative optimality principles similar structural optimality principles proposed Goguen Harrell 35 guide algorithm select useful blends huge space possible blends A complementary approach syntacticdriven approaches HDTP focus cognitively inspired notion image schemas mentioned Sec 211 The theory image schemas developed cognitive linguistics extremely inﬂuential Lakoff Johnsons work late 1980s In cognitive science image schemas identiﬁed fundamental pattern cognition perceived conceptualised manipulated spatially temporally 54 Examples image schemas proposed literature containment support source_path_goal The core idea image schema formed generalised structure transferred analogical reasoning domains similar characteristics 54 From formal perspective previous research image schemas 488577 provided valuable portfolio approaches build The relation image schemas conceptual blending particularly role computational concept invention explored 404174 In setting image schemas conceived set theories ordered logical entailment guide search generic space heuristics creation new concepts The combinatorial kind creativity 3 interested investigated neurological perspective Thagard Stewart 80 The major motivation approach explain model Aha Eureka effect occurs humans serendipitous discoveries means creative thinking The authors build work ﬁndings neuroscience approaches realise human thinking neural networks 79 The key idea represent mental concepts activity patterns vectors neurons perform convolution operation combine patterns Activity patterns neurons mathematically represented vectors numbers represent ﬁring rate neurons According Thagard Stewart 80 mental concept represented huge ﬁnite vector numbers The blend generated mathematical convolution vectors The underlying mathematical model based socalled LIF model neuronal activity 79 It accounts details neuronal level neuron voltage input current membrane time direction vector neuron patterns synaptic connection weights Thagard Stewart 80 use Fauconnier Turners optimality principles distinguish reasonable blends huge space possible blends Instead combine blend input spaces space representing emotional reaction assess blends However authors provide detailed description model emotional input spaces computationally 6 Conclusion We present computational approach conceptual blending implement generalisation algebraic speci ﬁcations transition semantics preconditions postconditions ASP This allows access generalised commonalised versions input speciﬁcations let ﬁnd useful blends By theorem solvers able generate logically consistent blends To best knowledge exists currently blend ing framework resolve logical inconsistencies Except 13 seen blending framework automatically ﬁnds generic space similarly expressive representation language On ASPbased implementation propose metrics evaluate quality blends based cognitive optimality principles Fau connier Turner 27 As overviewed related work section number researchers ﬁeld computational creativity recognised value conceptual blending particular implementations cognitive theory pro 8 A domain Pereira set concepts relate unique underlying concept M Eppe et al Artiﬁcial Intelligence 256 2018 105129 127 posed 836364333620 The existing approaches investigated lack sophisticated evaluation determine formally good blend exception 6364 use optimality criteria based 27s theory The described amalgambased workﬂow conceptual blending bigger computational framework Cobble system9 implementated COINVENT project 73 A fairly comprehensive overview results COINVENT project 1510 A prototypical implementation accessed online11 While proofofconcept Section 4 demonstrates interesting examples means close solid em pirical evaluation Running multitude concept deﬁnitions ontology databases Ontohub 505 developing evaluation method quantify quality generated blends subject future work Another theoretical branch future work generalise approach discover creative eureka lemmas mathematics elaborated data structures For example general form describing data structure deﬁne constructor c listτ listσ σ This constructor number nonrecursive recursive arguments form version In example naturals constructor s x sx lists consh l consh l For binary trees data nodes constructor th l1 l2 recursive arguments This allows ﬁnd mapping generic space constructors use techniques expressed paper discover eureka lemmas new theories 7 Previous work This work based extends publications 2021 COINVENT project deliverable 4 In Eppe et al 20 published International Joint Conference Artiﬁcial Intelligence IJCAI started exploring blending music domain performed ﬁrst experiments blend single chords This paper shows chord progressions blended In Eppe et al 21 published International Conference Logic Programming Nonmonotonic Reasoning LP NMR presented ﬁrst version amalgambased workﬂow The extended substantially present paper Besides performance improvements evaluation metrics improved Furthermore separate generalisation path amalgambased workﬂow removal path commonalisation path eliminates duplicate generic spaces In Bou et al 4 provide theoretical background demonstrate far amalgambased workﬂow seen blending colimits Goguen 34s approach In paper step implement theory In addition considerations extend previous work presenting crossdomain blending examples Acknowledgements We thank reviewers valuable constructive comments feedback We thank Mihai Codescu Free University BozenBolzano Italy support HETS Maximos Kaliakatsos Emilios Cambouropou los Aristotle University Thessaloniki Greece valuable ideas help music examples The research presented article partially supported COINVENT project FETOpen grant number 611553 Manfred Eppe received support German Academic Exchange Service DAAD participant FITweltweit programme Oliver Kutz Roberto Confalonieri supported unibz CRC project COCO Computational Technologies Con cept Invention The authors thank Department Innovation Research University Autonomous Province BozenBolzano covering Open Access publication costs Appendix A Supplementary material Supplementary material related article online httpsdoiorg101016jartint201711005 References 1 D Anderson E Zalta Frege boolos logical objects J Philos Log 33 2004 126 2 C Baral Knowledge Representation Reasoning Declarative Problem Solving Cambridge University Press 2003 3 MA Boden Creativity MA Boden Ed Artiﬁcial Intelligence Handbook Perception Cognition Academic Press 1996 pp 267291 4 F Bou M Eppe E Plaza M Schorlemmer D21 reasoning Amalgams Technical report COINVENT Project available httpwwwcoinvent projecteuﬁleadminpublicationsD21pdf October 2014 5 M Codescu E Kuksa O Kutz T Mossakowski F Neuhaus Ontohub semantic repository engine heterogeneous ontologies Appl Ontol 2017 httpsdoiorg103233AO170190 9 http servercoinventproject eu accessed June 2016 10 http wwwcoinventproject eu accessed June 2016 11 https github com meppe Amalgamation accessed August 2016 128 M Eppe et al Artiﬁcial Intelligence 256 2018 105129 6 S Colton JW Charnley A Pease Computational creativity theory FACE IDEA descriptive models D Ventura P Gervás DF Harrell ML Maher A Pease GA Wiggins Eds Proceedings Second International Conference Computational Creativity Mexico City Mexico April 2729 2011 2011 pp 9095 7 R Confalonieri JC Nieves Nested preferences answer set programming Fundam Inform 113 1 2011 1939 8 R Confalonieri H Prade Using possibilistic logic modeling qualitative decision answer set programming algorithms Int J Approx Reason 55 2 2014 711738 9 R Confalonieri J Corneli A Pease E Plaza M Schorlemmer Using argumentation evaluate concept blends combinatorial creativity H Toivonen S Colton M Cook D Ventura Eds Proceedings Sixth International Conference Computational Creativity Park City Utah USA June 29July 2 2015 2015 pp 174181 10 R Confalonieri M Schorlemmer E Plaza M Eppe O Kutz R Peñaloza Upward reﬁnement conceptual blending description logic aspbased approach case study EL Proceedings Joint Ontology Workshops 2015 Episode 1 The Argentine Winter Ontology colocated 24th International Joint Conference Artiﬁcial Intelligence 2015 11 R Confalonieri M Eppe M Schorlemmer O Kutz R Peñaloza E Plaza Upward reﬁnement operators conceptual blending description logic EL Ann Math Artif Intell 2016 131 12 R Confalonieri E Plaza M Schorlemmer A process model concept invention International Conference Computational Creativity ICCC 2016 13 R Confalonieri M Schorlemmer O Kutz R Peñaloza E Plaza M Eppe Conceptual blending EL M Lenzerini R Peñaloza Eds Proceedings 29th International Workshop Description Logics Cape Town South Africa April 2225 CEUR Workshop Proc vol 1577 CEURWSorg 2016 14 R Confalonieri O Kutz P Galliani R Peñaloza D Porello M Schorlemmer N Troquard Coherence similarity concept generalisation A Artale B Glimm R Kontchakov Eds Proceedings 30th International Workshop Description Logics Montpellier France July 1821 2017 CEUR Workshop Proc vol 1879 CEURWSorg 2017 15 R Confalonieri A Pease M Schorlemmer T Besold O Kutz E Maclean M KaliakatsosPapakostas Eds Concept Invention Foundations Implemen tation Social Aspects Applications Comput Synth Creat Syst Springer 2018 16 M Eppe M Bhatt Narrative based postdictive reasoning cognitive robotics International Symposium Logical Formalizations Commonsense 17 M Eppe M Bhatt Approximate postdictive reasoning answer set programming J Appl Log 13 4 2015 676719 18 M Eppe M Bhatt F Dylla Approximate epistemic planning postdiction answerset programming Proceedings 12th International Conference Logic Programming Nonmonotonic Reasoning 2013 19 M Eppe M Bhatt J Suchan B Tietzen ExpCog experiments commonsense cognitive robotics International Workshop Cognitive Robotics Reasoning CR 2013 CogRob 2014 20 M Eppe R Confalonieri E Maclean MA KaliakatsosPapakostas E Cambouropoulos WM Schorlemmer M Codescu K Kühnberger Computational invention cadences chord progressions conceptual chordblending Q Yang M Wooldridge Eds Proceedings TwentyFourth International Joint Conference Artiﬁcial Intelligence IJCAI 2015 Buenos Aires Argentina July 2531 2015 AAAI Press 2015 pp 24452451 21 M Eppe E Maclean R Confalonieri O Kutz WM Schorlemmer E Plaza ASP amalgamation conceptual blending workﬂow F Calimeri G Ianni M Truszczynski Eds Logic Programming Nonmonotonic Reasoning 13th International Conference LPNMR 2015 Lexington KY USA September 2730 2015 Proceedings Lect Notes Comput Sci vol 9345 Springer 2015 pp 309316 22 M Eppe S Trott J Feldman Exploiting deep semantics compositionality natural language humanrobotinteraction International Con ference Intelligent Robots Systems IROS 2016 pp 731738 arXiv160406721 23 M Eppe S Trott V Raghuram J Feldman A Janin Applicationindependent integrationfriendly natural language understanding Global Conference Artiﬁcial Intelligence GCAI 2016 pp 340352 24 G Fauconnier Mental Spaces Aspects Meaning Construction Natural Language MIT Press 1985 25 G Fauconnier Mappings Thought Language Cambridge University Press Cambridge England 1997 26 G Fauconnier M Turner Conceptual integration networks Cogn Sci 22 2 1998 133187 reprinted D Geeraerts Ed Cognitive Linguistics 27 G Fauconnier M Turner The Way We Think Conceptual Blending And The Minds Hidden Complexities Basic Books 2002 28 M Gebser R Kaminski B Kaufmann M Ostrowski T Schaub S Thiele Engineering incremental ASP solver International Conference Logic 29 M Gebser R Kaminski B Kaufmann T Schaub Clingo ASP control preliminary report CoRR arXiv14053694 2014 30 M Gebser R Kaminski B Kaufmann M Lindauer M Ostrowski J Romero T Schaub S Thiele Potassco User Guide 20 Technical report University Basic Readings pp 303371 Programming LPNMR 2008 Potsdam May 2015 31 M Gelfond Y Kahl Knowledge Representation Reasoning Design Intelligent Agents The AnswerSet Programming Approach Cambridge 32 M Gelfond V Lifschitz The stable model semantics logic programming Proceedings Fifth International Conference Logic Programming University Press New York NY USA 2014 ICLP The MIT Press 1988 pp 10701080 33 J Goguen DF Harrell Style computational conceptual blendingbased approach S Argamon K Burns S Dubnov Eds The Structure Style Algorithmic Approaches Understanding Manner Meaning Springer 2010 pp 291316 34 JA Goguen An introduction algebraic semiotics application user interface design Computation Metaphors Analogy Agents 35 JA Goguen DF Harrell Foundations active multimedia narrative semiotic spaces structural blending httpscsewebucsdedugoguen 36 M Guhe A Pease A Smaill M Martínez M Schmidt H Gust KU Kühnberger U Krumnack A computational account conceptual blending 37 B Hampe Image schemas cognitive linguistics introduction B Hampe JE Grady Eds From Perception Meaning Image Schemas Cognitive Linguistics Cogn Linguist Res vol 29 Mouton Gruyter 2005 pp 112 38 DF Harrell Shades computational evocation meaning GRIOT improvisational poetry generation 6th Digital Arts Culture 39 DF Harrell Theory Technology Computational Narrative An Approach Generative Interactive Narrative With Bases Algebraic Semiotics Cognitive Linguistics PhD thesis University California San Diego 2007 40 MM Hedblom O Kutz F Neuhaus Choosing right path image schema theory foundation concept invention J Artif Gen Intell 6 1 Conference 2005 2015 2154 41 MM Hedblom O Kutz F Neuhaus Image schemas computational conceptual blending Cogn Syst Res 39 2016 4257 42 A Ireland A Bundy Productive use failure inductive proof J Autom Reason 16 12 1996 79111 43 M Johansson L Dixon A Bundy Conjecture synthesis inductive theories J Autom Reason 47 2011 251289 44 M Johnson The Body Mind The Bodily Basis Meaning Imagination Reasoning The University Chicago Press 1987 1999 pp 139 ppsnarrpdf 2005 Accessed 15 September 2017 basic mathematics Cogn Syst Res 12 34 2011 249265 M Eppe et al Artiﬁcial Intelligence 256 2018 105129 129 45 A Jordanous Stepping progress forwards setting standards metaevaluation computational creativity S Colton D Ventura N Lavrac M Cook Eds Proceedings Fifth International Conference Computational Creativity Ljubljana Slovenia June 1013 2014 2014 pp 129136 computationalcreativitynet 46 A Koestler The Act Creation Hutchinson Co 1964 47 R Kowalski Predicate logic programming language Proceedings International Federation Information Processing 1974 pp 569574 48 W Kuhn An imageschematic account spatial categories S Winter M Duckham L Kulik B Kuipers Eds Spatial Information Theory Lect Notes Comput Sci vol 4736 Springer 2007 pp 152168 49 O Kutz J Bateman F Neuhaus T Mossakowski M Bhatt E pluribus unum formalisation usecases computational support conceptual blending TR Besold M Schorlemmer A Smaill Eds Computational Creativity Research Towards Creative Machines Thinking Machines At lantisSpringer 2014 50 O Kutz T Mossakowski F Neuhaus M Codescu Blending Hub computational concept invention platform International Confer ence Computational Creativity ICCC 2014 51 G Lakoff Women Fire Dangerous Things University Chicago Press 1987 52 G Lakoff M Johnson Philosophy Flesh The Embodied Mind Its Challenge Western Thought Basic Books 1999 53 G Malcolm Software Engineering OBJ Algebraic Speciﬁcation Action Kluwer 2000 54 JM Mandler C Pagán Cánovas On deﬁning image schemas Lang Cogn 6 2014 123 55 P Martins S Pollak T Urbanˆciˆc A Cardoso Optimality principles computational approaches conceptual blending need International Conference Computational Creativity ICCC 2016 56 O MontanoRivas R McCasland L Dixon A Bundy Schemebased synthesis inductive theories MICAI Lect Notes Comput Sci vol 6437 57 T Mossakowski Colimits ordersorted speciﬁcations Recent Trends Algebraic Development Techniques Lect Notes Comput Sci vol 1376 2010 pp 348361 Springer Berlin 1998 pp 316332 58 T Mossakowski C Maeder K Lüttich The heterogeneous tool set Hets International Conference Tools Algorithms Construction Analysis Systems TACAS Springer Berlin Heidelberg 2007 pp 519522 59 T Mossakowski M Codescu F Neuhaus O Kutz The distributed ontology modelling speciﬁcation language DOL The Road Universal Logic Festschrift 50th birthday JeanYves Beziau vol II Stud Univers Log Birkhäuser 2015 60 PD Mosses CASL Reference Manual The Complete Documentation Common Algebraic Speciﬁcation Language Springer 2004 61 S Ontañón E Plaza Amalgams formal approach combining multiple case solutions I Bichindaritz S Montani Eds CaseBased Reasoning Research Development ICCBR Springer 2010 pp 257271 62 A Pease J Corneli Evaluating creativity Concept Invention Foundations Implementation Social Aspects Applications Springer ISBN 9783319656021 httpwwwspringercomdebook9783319656014 press 63 FC Pereira A Computational Model Creativity PhD thesis Universidade Coimbra 2005 64 FC Pereira Creativity Artiﬁcial Intelligence A Conceptual Blending Approach Mouton Gruyter 2007 65 FC Pereira A Cardoso The boathouse visual blending experiment Proceedings 2nd Workshop Creative Systems Approaches Creativity AI Cognitive Science ECAI 2002 Lyon France 2002 66 FC Pereira A Cardoso Optimality principles conceptual blending ﬁrst computational approach AISB J 1 4 2003 351370 67 FC Pereira A Cardoso The horsebirdcreature generationexperiment AISB J 1 3 2003 257280 68 FC Pereira A Cardoso Experiments free concept generation Divago KnowlBased Syst 19 7 2006 459470 69 B Pierce Basic Category Theory Computer Scientists MIT Press 1991 70 D Porello N Troquard R Confalonieri P Galliani O Kutz R Peñaloza Repairing socially aggregated ontologies axiom weakening Proc 20th International Conference Principles Practice MultiAgent Systems PRIMA 2017 October 30November 3 Nice France Springer 2017 71 M Quillian Semantic Memory Semantic Information Processing 1968 72 G Ritchie Assessing creativity G Wiggins Ed Proceedings AISB01 Symposium AI Creativity Arts Science 2001 pp 311 73 M Schorlemmer A Smaill KU Kühnberger O Kutz S Colton E Cambouropoulos A Pease COINVENT computational concept invention theory Fifth International Conference Computational Creativity ICCC 2014 74 M Schorlemmer R Confalonieri E Plaza The Yoneda Path Buddhist Monk Blend First International Workshop Cognition Ontologies CAOS 2016 Annecy France 6th July 2016 75 M Schorlemmer R Confalonieri E Plaza Coherent concept invention TR Besold O Kutz C León Eds Proceedings Workshop Compu tational Creativity Concept Invention General Intelligence C3GI 2016 colocated 28th European Summer School Logic Language Information ESSLLI 2016 BozenBolzano Italy August 2022 2016 CEUR Workshop Proc vol 1767 CEURWSorg 2016 76 A Schwering U Krumnack KU Kühnberger H Gust Syntactic principles heuristicdriven theory projection Cogn Syst Res 10 3 2009 251269 77 RSt Amant CT Morrison YH Chang PR Cohen C Beal An image schema language International Conference Cognitive Modeling ICCM 78 P Thagard Coherence Thought Action The MIT Press 2000 79 P Thagard The Brain Meaning Life Princeton University Press 2010 80 P Thagard TC Stewart The AHA experience creativity emergent binding neural networks Cogn Sci 35 1 2011 133 81 S Trott M Eppe J Feldman Recognizing intention natural language clariﬁcation dialog construction grammar Workshop Communi cating Intentions HumanRobot Interaction 2016 Computational Creativity ICCC 2012 82 T Veale From conceptual mashups badass blends robust computational model conceptual blending International Conference 83 T Veale DO Donoghue Computation blending Cogn Linguist 11 34 2000 253282 84 T Veale M Keane The competence suboptimal theories structure mapping hard analogies IJCAI 1997 pp 232237 85 L Walton M Worboys An algebraic approach image schemas geographic space Proceedings 9th International Conference Spatial Information Theory COSIT France 2009 pp 357370 86 GA Wiggins A preliminary framework description analysis comparison creative systems KnowlBased Syst 19 7 2006 449458 87 M ˆZnidarˆsiˆc A Cardoso P Gervas P Martins R Hervas A Alves H Oliveira P Xiao S Linkola H Toivonen J Kranjc N Lavraˆc Computational creativity infrastructure online software composition conceptual blending use case International Conference Computational Creativity ICCC Paris France 1st July 2016 2006 pp 292297