Artiﬁcial Intelligence 212 2014 116133 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Filtering AtMostNValue difference constraints Application shift minimisation personnel task scheduling problem JeanGuillaume Fages Tanguy Lapègue b École des Mines Nantes LINA UMR CNRS 6241 LUNAM Université 4 rue Alfred Kastler La Chantrerie BP20722 44307 Nantes Cedex 3 France b École des Mines Nantes IRCCyN UMR CNRS 6597 LUNAM Université 4 rue Alfred Kastler La Chantrerie BP20722 44307 Nantes Cedex 3 France r t c l e n f o b s t r c t Article history Received 3 February 2014 Received revised form 31 March 2014 Accepted 4 April 2014 Available online 12 April 2014 Keywords ConstraintProgramming Global constraints AtMostNValue Shift Minimisation Personnel Task Scheduling Problem The problem minimising number distinct values set variables subject difference constraints occurs reallife contexts This case Shift Minimisation Personnel Task Scheduling Problem introduced Krishnamoorthy et al case study paper ConstraintProgramming enables formulate problem easily AllDifferent constraints single AtMostNValue constraint However independence constraints results poor lower bounding diﬃculty prove optimality This paper introduces formalism family propagators AtMostNValue In particular provide simple signiﬁcant improvement stateoftheart AtMostNValue propagator Bessière et al ﬁlter conjunction AtMostNValue constraint disequalities In addition provide original search strategy relies constraint reiﬁcation Extensive experiments contribution signiﬁcantly improves straightforward model competes best known approaches Operational Research 2014 Elsevier BV All rights reserved 1 Introduction The problem minimising number distinct values set variables subject difference constraints occurs reallife contexts assignment resources tasks optimised For instance transports crews assigned trips 42 In schools classes assigned rooms 12 In airports maintenance tasks assigned ground crew employees 1617 In factories ﬁxed jobs assigned machines 232438 In theoretical context need colour graph adjacent vertices distinct colours colour taken node 2830 In order illustrate contribution consider Shift Minimisation Personnel Task Scheduling Problem SMPTSP 36 This problem belongs set personnel scheduling problems 19 57 It arises set tasks ﬁxed time assigned set shifts overlapping tasks This paper invited revision paper ﬁrst published 19th International Conference Principles Practice Constraint Programming CP 2013 recognized best student paper Corresponding author Email addresses jeanguillaumefagesminesnantesfr JG Fages tanguylapegueminesnantesfr T Lapègue httpdxdoiorg101016jartint201404001 00043702 2014 Elsevier BV All rights reserved JG Fages T Lapègue Artiﬁcial Intelligence 212 2014 116133 117 assigned shift Each shift associated given subset assignable tasks The objective minimise number shifts This problem typically occurs second step decomposition methods handle creation shifts ﬁrst step With kind methods constraints related personnel roster design considered ﬁrst step simplicity SMPTSP formulation Nonetheless current exact approaches relying Mixed Integer Programming MIP fail solve large scale instances 3643 This main motivation investigating ConstraintProgramming CP approach CP programming paradigm belongs wide ﬁeld Artiﬁcial Intelligence AI It declarative language enables model satisfaction optimisation problems variables domains constraints 52 Each variable associated domain representing possible values The constraints deﬁned variables model properties hold Therefore solution assignment values variables satisﬁes constraint model From technical point view constraint equipped propagator ﬁlters infeasible values variable domains Each time variable domain reduced propagators associated variable scheduled ﬁltering This leads series ﬁltering steps called propagation 54 A propagator monotonic 55 smaller domains ﬁltering smaller domains ﬁltering inclusion Furthermore idempotent 55 applying ﬁltering algorithm twice row leads inference Overall solving process relies backtrack algorithm alternates ﬁltering steps inference branching decisions perform hypothesis The core idea CP design independent constraints combined shared variables order model constrained problems However case optimisation problem independent constraints lead poor bounding objective function compared MIP approach This restrains deployment CP industrial appli cations 39 Therefore interesting design global constraints 4 These constraints able consider larger problem ﬁltering impact increased For instance AllDifferent global constraint conjunction clique binary difference constraints proved highly relevant CP solvers 50 However developing effective global constraints diﬃcult tends CP solver maintenance expensive greatest concerns CP community 47 Consequently practical point view adapt existing constraints implement brand new ones order capitalise pre vious work In paper investigate considering difference constraints ﬁltering known AtMostNValue constraint 3748 We introduce new propagator implementation based stateoftheart AtMostNValue propagator 7 Furthermore provide bold search strategy relies constraint reiﬁcation attempt strong search space reduction A wide range experiments shows contribution signiﬁcantly improves CP model competes recent SMPTSP dedicated approaches The remainder paper organised follows Section 2 devoted description SMPTSP Section 3 straightforward CP model SMPTSP improved new propagator Then branching scheme suited solve SMPTSP presented Section 4 Our approach validated extensive experimental study Section 5 followed conclusions 2 Description SMPTSP This section ﬁrst introduces notations paper Then simple complexity results mentioned insight case study Finally provides stateoftheart mathematical formulation problem 21 Notations In following T S respectively refer set tasks shifts Note shift seen worker speciﬁc skills potentially working time window 36 Given task t T refer set shifts assigned t St S Therefore SMPTSP consists assigning task t T shift s St minimum total number shifts overlapping tasks different shifts As tasks ﬁxed time ﬁnding maximal sets overlapping tasks referred C polynomial 29 It amounts ﬁnding set maximal cliques interval graph The size largest clique referred LBcid5 provides trivial lower bound required number shifts Fig 1 introduces running example paper The input instance data displayed Fig 1a It includes set 5 tasks T t1 t5 set 5 shifts S s1 s5 Each task represented rectangle associated set compatible shifts St1 s2 s3 s4 Starting ending time tasks C K1 K2 K3 K1 t1 t2 t3 K2 t1 t3 t4 K3 t4 t5 Therefore LBcid5 3 An optimal solution involving shifts s1 s2 s3 given Fig 1b This example article illustrate points 22 Complexity The SMPTSP similar problems Fixed Job Scheduling Problem 2324 Interval Scheduling Problem 3435 ClassRoom Assignment Problem 12 Graph Colouring Problem 28 List Colouring Prob lem 18 Therefore complexity results literature relevant case study For instance shifts 118 JG Fages T Lapègue Artiﬁcial Intelligence 212 2014 116133 Fig 1 A basic example 5 shifts 5 tasks identical t T St S SMPTSP seen Graph Colouring Problem1 vertices correspond tasks shifts correspond colours vertices connected corresponding tasks overlap time While problem NPhard general polynomial interval graphs case graph generated set time intervals task associated ﬁxed time interval 25 Nevertheless SMPTSP generally involves restrictions allowed shifttask assignments shifts identical The previously mentioned colouring problem changed colour taken vertex Instead vertex associated subset feasible colours This problem known List Colouring Problem 18 NPhard interval graphs 25 Therefore complexity SMPTSP stems shift heterogeneity 23 Mathematical formulation The SMPTSP stated Mathematical Programming binary variables xts ys respectively specify task t assigned shift s shift s Based variables number shifts given 1 assignment tasks compatible shifts ensured 2 The purpose constraint 3 twofold First prevents shifts assigned overlapping tasks Second ensures shifts assigned task counted We refer model MIP model minimise subject cid2 sS cid2 sSt cid2 ys xts 1 t T xts ys s S K C tK xts 0 1 ys 0 1 t T s St s S 3 A CP model based AtMostNValue constraint 1 2 3 4 5 This section ﬁrst introduces straightforward CP formulation SMPTSP Next recalls AtMostNValue propagator approach based provides new formalism deﬁne propagators family Then introduces new propagator ﬁlters AtMostNValue considering set difference constraints We improve diversify impact variables Finally discuss case dynamic difference constraints provide implementation guidelines 31 A straightforward CP formulation The SMPTSP formulated CP set T integer variables X objective variable z X represents taskshift assignments More precisely note dx domain variable x X dxi j means task ti assigned shift s j dz gives number shifts assigned task We refer model CP model minimise subject z cid3 AllDifferent xi K cid4 K C AtMostNValueX z 6 7 8 1 We recall Graph Colouring Problem consists assigning minimum number colours vertices graph adjacent vertices distinct colours JG Fages T Lapègue Artiﬁcial Intelligence 212 2014 116133 initial domains dxi j Sti cid6 cid5 LBcid5 S dz xi X 119 9 10 The expressive language offered CP enables model problem global constraints In 7 AllDif ferent constraints 50 forbid assignment overlapping tasks shift In 8 AtMost NValue constraint 7 restrict number shifts involved schedule Then variable initial domain deﬁnitions given 9 10 Trivial lower upper bounds z respectively maximum number overlapping tasks LBcid5 number variables largest AllDifferent constraint number available shifts From sementical point view constraints 7 equivalent single SomeDifferent constraint This constraint introduced 51 model set disequalities order solve workforce management problem 2 A propagator establishing Generalised Arc Consistency GAC SomeDifferent introduced 51 Since worst case runtime complexity O n3βn β 35 Richter et al suggests modiﬁcations improve runtime industrial benchmarks 251 Nevertheless study shows algorithm suited instances disequalities numerous form graph consists big connected components This unfortunately case SMPTSP instances graph overlapping tasks presumably connected Furthermore AllDifferent constraints detected polynomial time CP model good propagation disequalities Therefore use SomeDifferent CP model To higher level abstraction consider SMPTSP problem assigning minimum number values variables subject difference constraints 32 Stateoftheart ﬁltering AtMostNValueconstraint The AtMostNValue constraint belongs Number Distinct Values constraint family 3 It introduced 48 specify music programs ﬁrst ﬁltering algorithm provided 3 Then AtMostNValue constraint widely investigated 7 authors proved enforcing GAC AtMostNValue NPhard provide ﬁltering algorithms According study greedy propagator introduced provides good tradeoff ﬁltering runtime Thus use reference propagator ﬁltering AtMostNValue constraint Before describing propagator need recall deﬁnitions Deﬁnition 1 The intersection graph set variables X GI X V EI deﬁned vertex set V variable xi X associated vertex V edge set EI representing domain intersections For j V 2 edge j EI dxi dx j cid5 Deﬁnition 2 An independent set graph G V E subset A V disjoint vertices j A2 cid5 j j E Deﬁnition 3 A maximum independent set graph G independent set cardinality maximum The indepen dence number graph G noted αG cardinality maximum independent set G The set independent sets graph G referred ISG The ﬁltering algorithm proposed 7 stems search maximum independent set GI X Since problem NPhard 27 actually computes independent set A GI X greedy way selecting nodes minimum degree ﬁrst 31 This heuristic referred MD Then propagator ﬁlters according following rules R1 z maxz A R2 A z V dxi dxi cid7 A dxa Where z z respectively refer lower bound upper bound variable z R1 states cardinality A valid lower bound z R2 states cardinality independent set A equal upper bound z variables X values subset values induced A Indeed variables associated independent set intersection graph different values deﬁnition Thus value outside subset values lead use A 1 values contradiction Regarding time complexity ﬁltering rules R1 clearly runs constant time R2 requires ﬁner study Let number variables number values respectively referred n X l S We assume intersection union variable domains computed O logl worst case time A dxa requires n domain unions As depend bit vector operations The computation computed O n logl worst case time Then n domain intersections performed Thus R2 propagated O n logl worst case time cid7 120 JG Fages T Lapègue Artiﬁcial Intelligence 212 2014 116133 Fig 2 Applying AMNVcid13GI MDR12cid14 example dz 1 Overall greedy propagator AtMostNValue takes graph G input calls function F compute independent sets G ﬁlters variable domains set rules R Therefore introduce notation AMNVcid13GF Rcid14 ﬁne family propagators Consequently greedy propagator introduced 7 referred AMNVcid13GI MDR12cid14 In following suggest improvement G F R leading new propagator ﬁlters AtMostNValue set difference constraints To illustrate stateoftheart propagator apply running example Fig 2 dz 1 This state occur resolution Because variable domain deﬁnitions intersection graph corresponding example complete graph Thus MD selects node x3 instance Next R1 states number values provides information dz 1 Then R2 states values 2 4 5 removed domain variables Fig 2a Consequently edges x1 x5 x5 x4 removed order obtain new intersection graph Based new graph assume x1 x5 new independent set Fig 2b R1 states number values leading fail 33 Embedding difference constraints AtMostNValue As SMPTSP considers kinds constraints AtMostNValue AllDifferent ﬁltering conjunc tion proﬁtable For purpose section introduces implied propagator form AMNVcid13GF Rcid14 considers difference constraints This work stems simple observation disequality states variables xi x j X different values solution edge vertex vertex j GI X However edge exist search If presumably lower propagation strength edges GI X smaller independent sets GI X Hence remove edges soon possible Consequently introduce constrained intersection graph Deﬁnition 4 instead intersection graph variables Deﬁnition 4 Given set variables X set difference constraints D constrained intersection graph GCI X D V ECI X D deﬁned vertex set V variable xi X associated vertex V edge set ECI representing possible classes equivalence For j V 2 edge j ECI dxi dx j cid5 neqxi x j D In paper consider single set variables X single set difference constraints D sake clarity GCI X D GI X respectively noted GCI GI GCI computed removing GI edge associated disequality It worth noticing GCI GI Proposition 1 ISGI ISGCI αGI αGCI Proof Let AI independent set GI Since GCI GI based variable set share vertex set AI subset vertices GCI Since vertices AI pairwise disjoint GI assumption edges GCI belong GI vertices AI pairwise disjoint GCI Consequently AI inde pendent set GCI Thus independent sets GI independent sets GCI maxIISGI I maxIc ISGCI Ic αGI αGCI cid2 Note maximum independent set GI necessarily maximal GCI For instance consider nonempty set variables identical domains difference constraint pair distinct variables Then GI complete graph edges loops GCI Consequently αGI 1 αGCI V It worth noticing context bigger independent set higher chance ﬁlter variable domains Thus GCI presumably better GI ﬁlter AtMostNValue difference constraints ﬁgure model Proposition 2 To illustrate GCI use example dz 1 2 3 Fig 3 Because difference constraints GCI sparser GI Fig 3a Thus MD able compute larger independent set leading ﬁnd JG Fages T Lapègue Artiﬁcial Intelligence 212 2014 116133 121 Fig 3 Use AMNVcid13GCI MDR12cid14 example better lower bound z For instance consider independent set x1 x2 x3 Fig 3b R1 R2 respectively state number values value 5 removed variable domains Following 15 propagator A stronger propagator B propagation value ﬁltered B ﬁltered A Furthermore A strictly stronger B A stronger B exists problem instance value ﬁltered A B propagation step Proposition 2 Given oracle O computes maximum independent sets graph AMNVcid13GCI OR12cid14 strictly stronger AMNVcid13GI OR12cid14 Proof First O able compute maximum independent sets graph lower bound given R1 GCI equal αGCI lower bound given R1 GI equal αGI Since αGI αGCI Propo sition 1 AMNVcid13GCI OR1cid14 stronger AMNVcid13GI OR1cid14 Second O able compute maximum inde pendent sets graph ISGI ISGCI Proposition 1 values ﬁltered AMNVcid13GI OR2cid14 ﬁltered AMNVcid13GCI OR2cid14 Consequently AMNVcid13GCI OR2cid14 stronger AMNVcid13GI OR2cid14 Examples given onFigs 2 3 illustrate case αGCI αGI Therefore AMNVcid13GCI OR12cid14 strictly stronger AMNVcid13GI OR12cid14 cid2 Proposition 3 Given independent set A GCI A z solution conjunction AtMostNValue D satisﬁes following formula V A Ai st xi xa Ai denotes A ECI Proof Given independent set A GCI A z Lets assume exists solution S conjunction AtMostNValue D exists vertex V A Ai xi cid5 xa Thus S solution conjunction AtMostNValue D neqxi xa Ai Consequently A valid independent set GCI Then R1 states z A z z 1 possible Consequently solution S exist Proposition 3 holds cid2 From ﬁltering perspective Proposition 3 leads consider following rule R3 A z V A cid8 cid7 dxi dxi Ai dxadxadxi dxa Ai This rule actually reﬁned variant R2 While change simple signiﬁcant impact practice especially large scale problems V A Ai presumably small compared A Note particular case occurs node V A Ai enables learn valid equality xi xa This way possible ﬁlter domain variable xa independent set From theoretical point view R3 stronger R2 Proposition 4 However ﬁltering comes price As depends dxa computed V A This raises worst case time complexity R3 O n2 logl To illustrate rule apply example dz 1 2 3 Fig 4 If consider independent set x1 x3 x4 R1 deduces dz 3 R2 ﬁlter X domains Fig 4a set values induced independent set 1 2 3 4 5 However R3 Fig 4b enables ﬁlter value 5 included dx1 dx3 1 2 3 4 domain x5 It removes values 1 2 ﬁgure dx4 3 4 5 domain x2 Finally learns valid equality x2 x4 allows remove values 4 5 domain x4 Ai cid7 Proposition 4 Given deterministic heuristic H computes independent set A GCI AMNVcid13GCI HR3cid14 strictly stronger AMNVcid13GCI HR2cid14 Proof Since AMNVcid13GCI HR3cid14 AMNVcid13GCI HR2cid14 use deterministic heuristic H graph GCI ﬁlter independent set A Since node V Ai A ECI Ai A Consequently value ﬁltered R2 ﬁltered R3 The example given Fig 4 illustrates case AMNVcid13GCI HR3cid14 ﬁltrates AMNVcid13GCI HR2cid14 Therefore AMNVcid13GCI HR3cid14 strictly stronger AMNVcid13GCI HR2cid14 cid2 122 JG Fages T Lapègue Artiﬁcial Intelligence 212 2014 116133 Fig 4 AMNVcid13G CI MDR12cid14 versus AMNVcid13G CI MDR13cid14 example 34 Diversifying ﬁltering CP frameworks traditionally perform ﬁx point constraints branching node 54 This implies model compute thousands independent sets search process Thus advised use greedy algorithm MD ﬁlter AtMostNValue constraint 7 This heuristic eﬃcient lacks diversiﬁcation bound resulting ﬁltering depend computed independent set If assume ties equal degree vertices broken lexicographic way MD deterministic This lead unfortunate results considered graph suit heuristic Proposition 5 Given functions F1 F2 compute set independent sets GCI respectively noted A1 A2 If F1 F2 A1 induced F1 A2 induced F2 maxI2A2A1 I1 AMNVcid13GCI F1R13cid14 strictly stronger AMNVcid13GCI F2R13cid14 I2 maxI1A1 I1 I2 maxI1A1 I2 maxI1A1 I1 AMNVcid13GCI F1R1cid14 Proof First maxI2A2A1 implies maxI2A2 stronger AMNVcid13GCI F2R1cid14 Second lets assume value removed domain variable X AMNVcid13GCI F2R3cid14 If ﬁltering occurs considering independent set A1 A2 ﬁltering performed AMNVcid13GCI F1R13cid14 Else ﬁltering occurs considering independent set I2 A2 A1 A necessary condition R3 triggers ﬁltering I2 z As I2 maxI1A1 I1 problem actually infea sible captured AMNVcid13GCI F1R1cid14 Thus AMNVcid13GCI F1R13cid14 stronger AMNVcid13GCI F2R13cid14 Let F1 MD F2 FV respectively denote minimum degree heuristic bad heuristic selects ﬁrst vertex We assume ties broken lexicographic way case complete graph heuristics output sin gleton independent set approaches equivalent If graph complete exists vertex pair u v GCI edge independent set computed MD vertices Thus AMNVcid13GCI MDR13cid14 strictly stronger AMNVcid13GCI FVR13cid14 Therefore F1 F2 A1 induced F1 A2 induced F2 maxI2A2A1 I1 AMNVcid13GCI F1R13cid14 strictly stronger I2 maxI1A1 AMNVcid13GCI F2R13cid14 cid2 As suggested 37 highlighted Proposition 5 interesting obtain independent sets apply ﬁltering rules greater set variables In particular maximal independent sets known R13 optimally values ﬁltered R13 actually ﬁltered One way ﬁnd maximal independent sets adapt algorithm BronKerbosch exact algorithm computes maximal cliques undirected graph 10 However underlying problem NPhard performing BronKerbosch algorithm propagation presumably time consuming On large data turned improved ﬁltering provided algorithm worth overhead Therefore suggest philosophy MD diversiﬁcation fast algorithm The simplest way randomly break ties MD However bring diversiﬁcation improve results Thus introduce Rk algorithm Algorithm 1 The Rk heuristic performs k iterations computes independent set randomly Each independent set com puted successively selecting node randomly removing neighbours nodes removed It provides set k independent sets maximal inclusion However independent sets necessarily distincts random node selections lead results As relies randomness propagator idempotent monotonic From theoretical point view approach presents interesting properties First offers control runtime complexity expected quality Second computing independent sets randomly tends impact variable domains homogeneously Note k method tends enumerate ﬁlter maximum independent sets optimal given ﬁltering rules However practical point view bound number iterations order reasonable runtime We suggest k 20 100 default setting perform better MD average introducing signiﬁcant overhead Regarding probability distribution Rk options considered A uniform distribution weighted distri bution smalldegree vertices likely selected The second option seen random adaptation MD Based practical experiments MD offers good approximation ratio 31 recommend use uniformdistribution Rk MD JG Fages T Lapègue Artiﬁcial Intelligence 212 2014 116133 123 Algorithm 1 Rk algorithm compute independent sets Require G CI constrained intersection graph independent sets computed k number iterations number independent sets compute count count 1 G GCI copy Copies constrained intersection graph A Creates independent set A initially G cid5 1 A Creates set independent sets initially 2 count k 3 count 0 4 5 6 7 8 9 10 11 12 13 end 14 return A returns set independent sets GCI end A A A adds independent set A A x randomNodeG Randomly selects node x G A A x Adds x independent set A G G y x y G Removes xs neighbours G including x 35 The case dynamic difference constraints Our approach focuses SMPTSP considers set tasks ﬁxed time Thus difference constraints given input set AllDifferent constraints However interested ﬁltering AtMostNValue difference constraints appear dynamically search Let consider generalisation SMPTSP tasks longer ﬁxed time time window instead In problem disequalities implic itly appear time variable domain reductions induce task overlaps It worth noticing situation difference constraints longer propagated absence AllDifferent constraints model For tunately AtMostNValue propagator help global view problem powerful ﬁltering thanks Proposition 6 Proposition 6 If A independent set GCI let X A denote xi X A constraint AllDifferentX A holds Proof By deﬁnition constrained intersection graph independent set represents variables different constrained cid2 From Proposition 6 derive new ﬁltering rule AtMostNValue calls ﬁltering algorithm AllDif ferent variables corresponding independent set A computed R4 AllDifferentxi X A Note rule directly ﬁltering algorithm AllDifferent appropriate subset vari ables post dynamically AllDifferent constraint solver The ﬁrst option simplest ﬁlter incrementally boundconsistent BC ﬁltering algorithm AllDifferent presented 44 presumably relevant GAC 50 Note subset variables different lost right ﬁltering propagation involve worse independent set Instead second option involve incremental GAC AllDifferent constraints remain current search branch However independent set post AllDifferent constraint drawback leading potential explosion number constraints Thus needs set constraint pool manage constraints retaining interesting constraints removing dominated ones One parallel Cut pools MIP solvers 1 For solver maintenance simplicity purposes recommend ﬁrst option Note R4 relevant disequalities arise search It useless case SMPTSP maximal AllDifferent constraints preprocessed polynomial time Overall R4 seen dynamic generalisation common good practice consists reformulating set disequalities AllDifferent constraints preprocessing 30 36 Implementation So far seen possible tune original greedy AtMostNValue propagator We suggest simple generic pseudocode Algorithm 2 The constrained intersection graph stored backtrackable structure updated beginning ﬁltering algorithm potentially domain modiﬁcations This turns faster updating GCI incrementally domain modiﬁcation rebuilding entirely scratch Once graph updated 124 JG Fages T Lapègue Artiﬁcial Intelligence 212 2014 116133 Algorithm 2 AMNVcid13GCI F Rcid14 ﬁltering algorithm Require z integer variable X set variables D set difference constraints G CI V ECI backtrackable graph F function computes set independent sets given graph R set ﬁltering rules end ECI ECI j end G CI V ECI dxi dx j cid5 neqxi x j D graph generation V 1 X ECI j V 2 1 ﬁrst propagator 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 end 19 A F G CI computes set A independent sets 20 A A 21 22 end dxi dx j neqxi x j D ﬁlterX z GCI A R rulebased ﬁltering graph lazy update j ECI ECI ECI j end end propagator computes set independent sets function F For independent set propagator ﬁlters lower bound z ﬁlters X set rules R It worth noticing assumption set difference constraints D grow resolution process For instance D modiﬁed user constraints Note long domain union intersection operations deﬁned assumption kind variables X This means Algorithm 2 ﬁlter AtMostNVector constraint 13 variant AtMostNValue holds continuous vector variables instead integer variables Indeed continuous domains represented ﬂoating intervals union intersection operations straightforward Overall propagator ﬂexible easy implement maintain 4 Designing search heuristic SMPTSP This section describes search process CP approach It embeds costbased reasonings bottomup optimisation strategy tailored value selection domain reduction reasonings heuristic symmetry breaking variable selection ﬁnally bit learning throught lastconflict 41 41 Optimisation strategy The classical optimisation strategy CP solver consists enumerating improving solutions If search completes solution proved optimal This process known topdown approach However ﬁltering AMNVcid13GFRcid14 related lower bounding problem Therefore lower objective upper bound stronger ﬁltering Hence naturally employed bottomup minimisation strategy It tries compute solution involving k values k initialised root lower bound z incremented time solver proves unsatisﬁability Thus ﬁrst solution optimal This simply branching objective variable assigning current lower bound The search heuristic X following The variable associated smallest domain selected ﬁrst 32 ﬁxed ﬁrst value domain assigned variable If value exists variable ﬁxed lower bound Thus value selection naturally tends use different values This branching scheme reinforced lastconflict heuristic 41 aims identifying critical variables 42 When search tries luck In 21 employed twostep search strategy ﬁrst ﬁnds subset z allowed values assign value decision variable x X The ﬁrst step requires associate shift s j S new binary variable y j Y tell value j assigned variable X However approach makes model heavier additional variables channelling constraints Moreover branching Y ﬁrst appropriate JG Fages T Lapègue Artiﬁcial Intelligence 212 2014 116133 125 Fig 5 Impact breif reiﬁes constraint maximumX z instance If compelling search follow scheme decrease performances Therefore keeping general idea twostep search strategy suggest lighter ﬂexible branching scheme It worth noticing shifts equivalent values assignment variables interchangeable problem polynomial solve From modelling perspective force use arbitrary set z values More precisely use ﬁrst z values Assuming values consecutive start add constraint maximumX z This symmetry breaking constraint 26 dramatically reduce search space Unfortunately values generally interchangeable post hard constraint directly Nevertheless occur instances values nearly interchangeable sense ﬁnding valid subset values minor issue compared ﬁnding valid variablevalue assignment In words z denotes optimum value problem admits solution numerous value subsets size z For reason introduce binary variable breif reify 5 symmetry breaking constraint The search heuristic ﬁrst ﬁxes breif 1 order propagate constraint reduce search space 20 In case solution exists backtrack ﬁxes 0 turns constraint opposite maximumX cid5 z approach remains exact This reiﬁcation However ﬁltering right branch weak halfreiﬁcation 22 constraint maximumX z suﬃcient reproduce approach Note initial set shifts randomly shuﬄed handle case ordered speciﬁc way One search trick way perform symmetry breaking search However model unlikely contain symmetries heuristic gamble More precisely different value sets size optimal value Let K number different value sets belong optimal belong optimal solution solution We 0 K P breif 1 Kcid3S The probability value set 1 2 z cid3S z cid3S z cid4 cid4 cid4 To illustrate use breif apply running example dz 3 optimum Fig 5 For sake clarity shift set example shuﬄed value 1 5 corresponds shift si However practice randomly shuﬄe initial shift set reduce bias values 1 2 3 refer shifts s2 set 1 constraint maximumX z leads remove values 4 5 X s4 s5 instance When breif domains This lucky guess optimal solutions use value sets 1 2 3 1 3 4 K 2 Therefore constraint maximumX z probability hold optimal solutions cid4 02 This illustrates z 2cid3 5 3 reiﬁed 5 Experimental study In order evaluate contribution perform extensive tests First Section 51 introduces mo tivates new benchmark data set SMPTSP Next Section 52 focus objective lower bound quality root node Section 53 highlights potential beneﬁt strengthening diversifying ﬁltering Section 54 investigates adding reiﬁcation symmetry breaking constraint Section 55 focuses scalability issue evaluates ability approach compute tight bounds large instances Finally Section 56 compare approach best known results stateoftheart SMPTSP instances Our algorithms implemented JAVA Choco 311 14 implement CP model Cplex 124 default settings implement MIP model Note automatic tunning tool Cplex best setting turned default All implementations available online 40 In following respectively note z zr optimal objective objective lower bound root node Finally CP model propagator AMNVcid13GFRcid14 noted AMNVcid13GFRcid14 topdown minimisation strategy AMNVcid13GFRcid14 bottomup minimisation strategy 51 A new set challenging SMPTSP instances Very recently Smet et al shown 56 137 instances provided Krishnamoorthy Ernst 37 admit feasible solution objective value equal LBcid5 Since worker skills taken account 37 result surprising One expect considering worker skills impact optimum actually 126 JG Fages T Lapègue Artiﬁcial Intelligence 212 2014 116133 Fig 6 Comparison instance input output characteristics Fig 7 Homogeneity shifts measured quartiles depending instances sorted increasing number tasks dH normalised Hamming distance makes harder ﬁnd feasible solution Consequently instances provide challenge search interesting lower bounds Therefore propose new set challenging instances maximal number overlapping tasks provide good lower bound In order generate new benchmark use dedicated procedure based empirical results presented 37 56 First speciﬁed 37 average tightness deﬁned sum processing times sum shift lengths close 90 order obtain challenging instances Another hardness analysis 56 shows smaller average task processing time diﬃcult instances solve Based conclusions designed dedicated procedure able generate new set challenging instances The procedure given details 40 generates randomly set tasks ranging 15 minutes 2 hours We consider random skills different time windows generate shifts The ﬁrst aim splitting working day 8 hours time intervals common personnel scheduling 57 The obtained previous ones introducing offset starting time task entirely contained time interval Based simple procedure provide 100 new instances number tasks ranging 70 1600 number available shifts ranging 60 950 These instances generator available online 40 In following refer instances Krishnamoorthy et al Data_137 generated instances Data_100 In order apprehend differences Data_137 Data_100 provide comparisons data sets S T z T instance represented mark Fig 6 Both S T known approximated resolution This enables highlight input input data z output characteristics instances As seen instance sets form disjoint clusters It interesting notice instances data set split subclusters revealing patterns generator The main difference data sets related z T average value 39 83 respectively S T 22 times bigger Data_100 Data_137 Thus Data_100 Data_100 Data_137 Regarding input data instances average available shifts task Data_137 use signiﬁcantly smaller percentage shifts optimal solutions Therefore ﬁnding shift set corresponds optimal solution diﬃcult As ﬁrst step ratios As second step investigate homogeneity shifts In order evaluate characteristic use normalised Hamming distance Given instance distance dHs1 s2 shifts s1 s2 equal number tasks belong shifts divided total number tasks To measure homogeneity shifts compute distance pair shifts instances The analysis data relies use quartiles As illustrated Fig 7 turned median distance shifts average relatively similar Data_137 445 Data_100 466 However ﬁrst quartiles distance average different data set Many shifts Data_100 similar different shifts Data_137 bit different This difference homogeneity mainly comes use 8 hours shifts Data_100 JG Fages T Lapègue Artiﬁcial Intelligence 212 2014 116133 127 Fig 8 Ratio ECI EI instances sorted increasing number tasks Fig 9 Impact GCI zr Instances sorted increasing value LBcid5 Shifts belong time interval relatively close shifts belong different time intervals completely different 52 Impact GCI root node Basically GCI instead GI aims reducing number edges obtain larger independent sets ECI better ﬁltering As ﬁrst step measure GCI evaluate ratio EI On Data_137 ratio ranges 35 85 mean value 65 On Data_ 100 trend different minimum maximum ratio respectively 67 75 mean value 71 Note ratio tends increase Data_137 constant Data_100 These differences surely come strengthened structure Data_100 compared Data_137 Overall GCI signiﬁcantly edges GI See Fig 8 We compare value root lower bound zr obtained AMNVcid13GCI MDR1cid14 AMNVcid13GI MDR1cid14 data sets LBcid5 baseline comparison Results reported Fig 9 The horizontal axis represents instances sorted increasing value LBcid5 On data sets AMNVcid13GCI MDR1cid14 instead AMNVcid13GI MDR1cid14 dramatically improves value zr On Data_137 use GCI allows relative gap LBcid5 zr 6 As LBcid5 On Data_100 use GCI allows equal z values zr twice LBcid5 On data sets approach scales better classical able increase zr size instance More precisely lower bound given AMNVcid13GI MDR1cid14 turns 1 respectively 6 corresponds different time windows Data_137 respectively Data_100 Actually surprising AMNVcid13GI MDR1cid14 blind AllDifferent constraints represent big problem Using GCI instead GI makes AllDifferent constraints visible AtMostNValue increased zr Data_137 means zr close z 53 Managing tradeoff ﬁltering runtime As explained Section 34 algorithm Rk simple effective way obtain diversiﬁcation ﬁltering The parameter k enables manage tradeoff expected ﬁltering power runtime Since Rk suggested complement MD seen improvement opportunity Back case values k ﬁltering rules tested time limit 5 minutes Within experiments search heuristic branch breif evaluated section 128 JG Fages T Lapègue Artiﬁcial Intelligence 212 2014 116133 Fig 10 Number optima proved depending k ﬁltering conﬁgurations time limit 5 minutes Impact AMNVbackpropagation In order evaluate inﬂuence backpropagation AMNV performances compare number optima proved CP model ﬁltering rules R1 R12 R13 Fig 10 R12 introduces slight overhead compared R1 providing domain reductions Thus R1 generally eﬃcient R12 Data_137 Instead R3 strong impact Data_137 It enables solve 26 instances time limit Note minimum number iterations required R3 brings signiﬁcant improvement However results qualiﬁed Data_100 Overall R3 worth overhead Thus Rk lies ﬁnding larger independent sets R1 diversifying ﬁltering R3 Interestingly best setting k changes lot data set automatic algorithm conﬁguration program 33 relevant best results About Data_137 dozens iterations enable enhance performances best value k 120 On contrary hundreds thousands iterations required solve Data_100 instances In particular performing 5000 iterations Data_100 better performing This means beneﬁt Rk absolutely worth induced overhead The optimal setting 2000 Note 5 minutes best conﬁguration CP model able solve 80 Data_137 compared half Data_100 Impact AllDifferentpropagation In section investigate R4 As explained Section 35 rule relevant SMPTSP maximal AllDifferent constraints known Nevertheless worthwhile disequalities appear dynamically To insight behaviour R4 preserving SMPTSP illustration remove AllDifferent constraints CP model replace cliques binary disequalities suﬃxed This enables measure ﬁltering ability stemming R4 makes sense maximal AllDifferent constraints original model Thus semantic problem remains global view AllDifferent constraints lost Note longer use LBcid5 initial lower bound corresponds size largest AllDifferent constraint Given new model compare number optima respectively proved AMNVcid13GCI MDRkR13cid14 AMNVcid13GCI MDRkR134cid14 different values k resolution 5 minutes Fig 11 As justiﬁed Section 35 R4 calls AllDifferent BC ﬁltering algorithm independent set As baseline comparison display results AMNVcid13GCI MDRkR13cid14 includes AllDifferent constraints2 Therefore Fig 11 enables evaluate role R4 AllDifferent constraints given compare good propagation AllDifferent constraints naive propagation binary disequalities Two main observations Data_137 results First good propagation AllDifferent constraints makes difference AMNV ﬁltering strong k 0 For instance k 120 enables ﬁnd 118 optima AMNVcid13GCI MDRkR13cid14 respectively solve 101 99 instances optimality Second R4 low impact results A slight improvement noticed small k values trend reverses k increases This means R4 unfortunately able good tradeoff ﬁltering runtime original model AllDifferent constraints AMNVcid13GCI MDRkR134cid14 Surprisingly k 1000 R4 leads better results original model Data_100 It provides better tradeoff ﬁltering runtime However increasing k introduces strong overhead Interestingly seen AMNVcid13GCI MD RkR13cid14 AMNVcid13GCI MD RkR13cid14 lead similar results This means achieving high level consistency AllDifferent constraints simply propagating binary disequalities 2 The default implementation AllDifferent Choco 311 performs ad hoc compromise BC GAC order provide good tradeoff ﬁltering runtime JG Fages T Lapègue Artiﬁcial Intelligence 212 2014 116133 129 Fig 11 Impact R4 number optima proved depending k Note LBcid5 longer initial lower bound z Fig 12 Number optima proved AMNVcid13GCI MD RkR13cid14 5 minutes time limit k settings breif matter data set The diﬃculty instances mainly stems lower bounding problem Perhaps AMNV propagation improved AllDifferent constraint propagations play key role 54 Impact branching breif We evaluate branching breif Fig 12 suggested Section 4 This binary variable reiﬁes constraint maximumX z breaks symmetries arising case shifts equivalent We mention instance satisﬁes assumption Hence branching breif totally heuristic choice aiming reducing search space Results breif suited Data_137 It enables solve 136 instances 5 minutes k 20 This come z S ratio homogeneous repartition taskshift compatibilities Any set z shifts likely cover tasks Nevertheless worth mentioning data set shifts identical Unfortunately breif help solving Data_100 instances structure design shifts contrary We observe slight performance loss Note possibility use constraint reiﬁcation search powerful feature CP 55 Scalability study We evaluate ability approach provide good bounds large scale instances For evaluate relative gap zzz depending running model Both MIP model CP model run time limit 6 minutes Default values z z respectively 0 S LBcid5 Therefore run times computing bound leads relative gap 100 In order tight bounds CP model ﬁrst run 3 minutes bottomup approach compute good lower bound optimum 3 minutes topdown mode good upper bound Given size instances ﬁnding feasible solution diﬃcult As AtMostNValue propagation relies lower bounding expect strong propagation bottomup step This longer expectable topdown approach faster propagation better Therefore ﬁltering AMNVcid13GCI MDRkR13cid14 lightened setting k 0 Furthermore enforcing maximumX z removes feasible solutions breif set 0 130 JG Fages T Lapègue Artiﬁcial Intelligence 212 2014 116133 Fig 13 Relative gap z z depending running model Data_137 Data_100 6 minutes resolution Instances sorted increasing number tasks Fig 13 gives general trends ability scale MIP model CP model It shows MIP model fails solve half instances data sets It able provide lower bounds upper bounds 100 gap On Data_137 12 instances able compute lower bound upper bound 7095 gap This indicates embedding linear relaxation problem global constraint promising large scale instances Regarding scalability issue topdown bottomup CP approaches perform The relative gap average 01 14 maximum 29 57 respectively Data_137 Data_100 Thus relative gap increase instance size Consequently AMNVcid13GCI MDRkR13cid14 AMNVcid13GCI MDR13cid14 leads ﬁnding tight bounds z large instances This makes CP model reliable approach MIP model bound objective short time 56 A competitive approach In order estimate quality approach compare stateoftheart SMPTSP approaches stances literature Data_137 The ﬁrst SMPTSP approaches given Krishnamoorthy et al introduced MIP model dedicated metaheuristic 36 Next Smet et al provided metaheuristic based local branching improvement heuristic 56 Finally recently Lin Ying proposed threephase exact approach 43 The ﬁrst phase builds initial solution constructive heuristic second improves iterated greedy algorithm solves MIP model initialized best solution We compare performances CP model existing approaches This comparison based ability reach optimal solution short time For CP model AMNVcid13GCI MDR40R13cid14 best conﬁguration Data_137 Regarding results 43 occurs phase times instances input solution computed phases optimal Presumably aware LBcid5 optimal Data_137 ﬁrst pointed Smet et al Therefore fair evaluation method consider stops phases optimal solution This slightly shorten running time 43 As illustrated Fig 14 CP model 56 dominate approaches They comparable sense ﬁnd optimal solutions given time limit Nevertheless 56 focuses ﬁnding good solutions lower bounding procedure LBcid5 Therefore approach able prove optimality general CP model able provide optimality certiﬁcates We point results CP model better presented 21 This comes slight code refactoring use breif Section 4 As SMPTSP occurs subproblem general method critical provide good lower bound short time To evaluate capacity AMNVcid13GCI MDRkR13cid14 provide quickly good value z compare zr required runtime lower bounding procedure given 36 This procedure based Lagrangian relaxation refer lower bound zL For resolution AMNVcid13GCI MDR40R13cid14 gives best results Data_137 However purpose design effective lower bounding procedure interesting use higher value k reduce gap optimality small overhead Consequently compare zL r obtained k 40 zr different settings k 40 1000 To ease reading zr noted z40 obtained k 1000 To fair comparison use LBcid5 model gives z1000 optimal value stateoftheart instances r JG Fages T Lapègue Artiﬁcial Intelligence 212 2014 116133 131 Fig 14 Cumulated number optima depending runtime Data_137 Fig 15 Relative gap z z equal z instance depending running model Data_137 instances sorted increasing task number z1000 r displayed Fig 16 Runtime seconds compute z depending running model r r z1000 closer z As illustrated Fig 15 z40 z40 r 226 better average times closer z zL 1017 Finally illustrated Fig 16 runtime z40 smaller r zL The average runtime z40 turns half second compared seconds zL Note r average runtime z1000 twice big z40 highlights increasing k r searching good lower bound On root node provided AMNVcid13GCI MDRkR13cid14 close optimum computed quickly large scale instances zL Moreover empirical worstcase gap z40 r zL More precisely z1000 equal z z1000 r r r 6 Conclusions In paper introduced CP approach solve SMPTSP new set challenging instances This model outperforms previous exact approaches stateoftheart benchmarks Furthermore provides good lower upper bounds large instances short time Thus CP approach competes exact metaheuristic stateoftheart approaches Furthermore provided notation AMNVcid13GF Rcid14 family AtMostNValue propagators In par ticular introduced new propagator AMNVcid13GCI MDRkR13cid14 ﬁlter conjunction AtMostNValue constraint 132 JG Fages T Lapègue Artiﬁcial Intelligence 212 2014 116133 disequalities This propagator keeps close existing AtMostNValue propagator fast propagate capitalise previous work order reduce implementation maintenance issues AMNVcid13GCI MDRkR13cid14 relies appropriate graph structure GCI reﬁned ﬁltering rules R3 simple way diversify ﬁltering Rk order improve overall approach Moreover propagator gives control tradeoff ﬁltering runtime As simple implement effective relevant applications believe prop agator beneﬁt CP community Nevertheless maximum independent set tight relaxation AtMostNValue leads achieve stronger ﬁltering One Lovász number 45 real number introduced Graph Theory upper bound Shannon capacity graph Lovászs sandwich theorem indicates Lovász number GCI provides valid lower bound number distinct values taken X greater equal maximum independent set relaxation This number approximated Semi Deﬁnite Programming SDP solvers 811 unfortunately fast allow integration global constraint Therefore future improvement SDP positive impact CP applications related SMPTSP Another research perspective investigate application propagator context dynamic difference constraints occurs disjunctive scheduling problems Finally introduced original way enhance search introducing reifying global constraint The success dedicated naive attempt draw new perspectives search heuristics We believe concept generalised new blackbox search strategies 94649 based global constraint reiﬁcation This reduce need designing dedicated search procedures 53 restricts diffusion CP Past work symmetry breaking 26 global constraint learning 6 good lead Acknowledgements The authors thank anonymous referees Samuel Burer Xavier Lorca Thierry Petit Damien Prot Charles PrudHomme useful comments This work funded regional council Pays la Loire CNRS References 1 G Andreello A Caprara M Fischetti Embedding 0 12cuts branchandcut framework computational study INFORMS J Comput 19 2 2007 229238 2 S Asaf H Eran Y Richter DP Connors DL Gresh J Ortega MJ Mcinnis Applying constraint programming identiﬁcation assignment service professionals CP Lecture Notes Computer Science vol 6308 Springer 2010 pp 2437 3 N Beldiceanu Pruning minimum constraint family number distinct values constraint family CP Lecture Notes Computer Science vol 2239 Springer 2001 pp 211224 4 N Beldiceanu M Carlsson S Demassey T Petit Global constraint catalogue past present future Constraints 12 1 2007 2162 5 N Beldiceanu M Carlsson P Flener J Pearson On reiﬁcation global constraints Constraints 18 1 2013 16 6 N Beldiceanu H Simonis A constraint seeker ﬁnding ranking global constraints examples CP Lecture Notes Computer Science vol 6876 Springer 2011 pp 1226 7 C Bessière E Hebrard B Hnich Z Kiziltan T Walsh Filtering algorithms NValue constraint Constraints 11 4 2006 271293 8 B Borchers Csdp c library semideﬁnite programming Optim Methods Softw 11 14 1999 613623 9 F Boussemart F Hemery C Lecoutre L Sais Boosting systematic search weighting constraints European Conference Artiﬁcial Intelligence 2004 pp 146150 10 Bron Coen Kerbosch Joep Algorithm 457 ﬁnding cliques undirected graph Commun ACM 16 9 1973 575577 11 S Burer RDC Monteiro A nonlinear programming algorithm solving semideﬁnite programs lowrank factorization Math Program 95 2 2003 329357 12 MW Carter CA Tovey When classroom assignment problem hard Oper Res 40 1 1992 2839 13 G Chabert L Jaulin X Lorca A constraint number distinct vectors application localization CP Lecture Notes Computer Science vol 5732 Springer 2009 pp 196210 14 CHOCO Team Choco open source Java constraint programming library Tech Rep Ecole des Mines Nantes 2010 httpwwwemnfr zinfochocosolver 15 R Debruyne C Bessière Some practicable ﬁltering techniques constraint satisfaction problem Proceedings 15th International Joint Conference Artiﬁcial Intelligence IJCAI97 Morgan Kaufmann Publishers Inc 1997 pp 412417 16 MC Dijkstra LG Kroon M Salomon JAEE Van Nunen LN van Wassenhove Planning size organization KLMs aircraft maintenance personnel Interfaces 24 6 1994 4758 17 D Dowling M Krishnamoorthy H Mackenzie D Sier Staff rostering large international airport Ann Oper Res 72 1997 125147 18 P Erd os A Rubin H Taylor Choosability graphs Proceedings West Coast Conference Combinatorics Graph Theory Computing Congres vol 26 1979 pp 125157 19 AT Ernst H Jiang M Krishnamoorthy D Sier Staff scheduling rostering review applications methods models Eur J Oper Res 153 1 2004 327 20 F Fages On use constraint reiﬁcation search 2013 personal communication 21 JG Fages T Lapègue Filtering atmostnvalue difference constraints application shift minimisation personnel task scheduling problem CP Lecture Notes Computer Science vol 8124 Springer 2013 pp 6379 22 T Feydy Z Somogyi PJ Stuckey Half reiﬁcation ﬂattening CP Lecture Notes Computer Science vol 6876 Springer 2011 pp 286301 23 M Fischetti S Martello P Toth The ﬁxed job schedule problem spreadtime constraints Oper Res 35 6 1987 849858 24 M Fischetti S Martello P Toth The ﬁxed job schedule problem workingtime constraints Oper Res 37 3 1989 395403 25 B Flavia D Guillermo M Javier Exploring complexity boundary coloring listcoloring Electron Notes Discrete Math 25 2006 4147 JG Fages T Lapègue Artiﬁcial Intelligence 212 2014 116133 133 26 P Flener J Pearson M Sellmann PV Hentenryck M Ågren Dynamic structural symmetry breaking constraint satisfaction problems Constraints 14 4 2009 506538 27 MR Garey DS Johnson Computers Intractability A Guide Theory NPCompleteness WH Freeman 1979 28 MC Golumbic Algorithmic Graph Theory Perfect Graphs 2nd edn Ann Discrete Math vol 57 Elsevier 2004 29 M Gondran M Minoux S Vajda Graphs Algorithms John Wiley Sons Inc New York NY USA 1984 30 S Gualandi F Malucelli Exact solution graph coloring problems constraint programming column generation INFORMS J Comput 24 2012 81100 31 MM Halldórsson J Radhakrishnan Greed good approximating independent sets sparse boundeddegree graphs Algorithmica 18 1 1997 145163 32 RM Haralick GL Elliott Increasing tree search eﬃciency constraint satisfaction problems Proceedings 6th International Joint Conference Artiﬁcial Intelligence IJCAI79 vol 1 Morgan Kaufmann Publishers Inc 1979 pp 356364 33 S Kadioglu Y Malitsky M Sellmann K Tierney Isac instancespeciﬁc algorithm conﬁguration ECAI Frontiers Artiﬁcial Intelligence Applications vol 215 IOS Press 2010 pp 751756 34 AWJ Kolen JK Lenstra CH Papadimitriou FCR Spieksma Interval scheduling survey Nav Res Logist 54 2007 530543 35 MY Kovalyov CT Ng TCE Cheng Fixed interval scheduling models applications computational complexity algorithms Eur J Oper Res 178 2007 331342 36 M Krishnamoorthy A Ernst D Baatar Algorithms large scale shift minimisation personnel task scheduling problems Eur J Oper Res 219 2012 3448 37 M Krishnamoorthy A Ernst The personnel task scheduling problem X Yang K Teo L Caccetta Eds Optimization Methods Applications Applied Optimization vol 52 Springer US 2001 pp 343368 38 LG Kroon M Salomon LNV Wassenhove Exact approximation algorithms tactical ﬁxed interval scheduling problem Oper Res 45 4 1997 39 C Kuip Public remark workshop CP solvers modeling applications integration standartization 19th International Conference Princi ples Practice Constraint Programming 2013 40 T Lapègue JG Fages D Prot O BellenguezMorineau Personnel task scheduling problem library httpssitesgooglecomsiteptsplibsmptsphome 2013 41 C Lecoutre L Sais S Tabary V Vidal Reasoning conﬂicts constraint programming Artif Intell 173 18 2009 15921614 42 R Leone P Festa E Marchitto A bus driver scheduling problem new mathematical model GRASP approximate solution J Heuristics 17 4 2010 441466 43 SW Lin KC Ying Minimizing shifts personnel task scheduling problems threephase algorithm Eur J Oper Res 2014 44 A LópezOrtiz CG Quimper J Tromp P van Beek A fast simple algorithm bounds consistency alldifferent constraint IJCAI Morgan Kaufmann 2003 pp 245250 45 L Lovász On Shannon capacity graph IEEE Trans Inf Theory 25 1 1979 17 46 L Michel P Van Hentenryck Activitybased search blackbox constraint programming solvers CPAIOR 2012 pp 228243 47 JN Monette P Flener J Pearson Towards solverindependent propagators CP Lecture Notes Computer Science vol 7514 Springer 2012 pp 544560 48 F Pachet P Roy Automatic generation music programs CP 1999 pp 331345 49 P Refalo Impactbased search strategies constraint programming Principles Practice Constraint Programming 2004 pp 557571 50 JC Régin A ﬁltering algorithm constraints difference CSPs National Conference Artiﬁcial Intelligence AAAI 1994 pp 362367 51 Y Richter A Freund Y Naveh Generalizing alldifferent somedifferent constraint CP Lecture Notes Computer Science vol 4204 Springer 2006 pp 468483 52 F Rossi P van Beek T Walsh Eds Handbook Constraint Programming Elsevier 2006 53 T Schrijvers G Tack P Wuille H Samulowitz PJ Stuckey Search combinators Principles Practice Constraint Programming 2011 pp 774788 54 C Schulte PJ Stuckey Eﬃcient constraint propagation engines ACM Trans Program Lang Syst 31 1 2008 55 C Schulte G Tack Weakly monotonic propagators Principles Practice Constraint Programming 2009 pp 723730 56 P Smet T Wauters M Mihaylow G Vanden Berghe The shift minimisation personnel task scheduling problem new hybrid approach compu tational insights Technical Report University North Carolina 2013 57 J Van den Bergh J Beliën P De Bruecker E Demeulemeester L De Boeck Personnel scheduling literature review Eur J Oper Res 226 3 2013 367385