Artiﬁcial Intelligence 173 2009 619668 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Deterministic planning ﬁfth international planning competition PDDL3 experimental evaluation planners Alfonso E Gerevini Patrik Haslum b Derek Long c Alessandro Saetti Yannis Dimopoulos d Dipartimento di Elettronica lAutomazione Università degli Studi di Brescia Brescia Italy b NICTA The Australian National University Canberra Australia c Department Computer Information Sciences University Strathclyde Glasgow UK d Department Computer Science University Cyprus Cyprus r t c l e n f o b s t r c t Article history Received 7 November 2007 Received revised form 29 October 2008 Accepted 31 October 2008 Available online 21 November 2008 Keywords Automated planning Planning systems PDDL Planning languages Knowledge representation planning Preferences planning Plan constraints International planning competition Benchmarks planning Experimental evaluation planning systems The international planning competition IPC important driver planning research The general goals IPC include pushing state art planning technology posing new scientiﬁc challenges encouraging direct comparison planning systems techniques developing improving common planning domain deﬁnition language designing new planning domains problems research community This paper focuses deterministic ﬁfth international planning competition IPC5 presenting language benchmark domains developed competition detailed experimental evaluation deterministic planners entered IPC5 helps understand state art ﬁeld We present extension pddl called pddl3 allowing user express strong soft constraints structure desired plans strong soft problem goals We discuss expressive power new language focusing restricted version IPC5 basic results compilability pddl2 Moreover study relative performance IPC5 planners terms solved problems CPU time plan quality analyse behaviour respect winners previous competition evaluate terms capability dealing soft goals constraints ﬁnding good quality plans general Overall results indicate signiﬁcant progress ﬁeld reveal important issues remain open require research dealing strong constraints computing high quality plans metrictime domains domains involving soft goals constraints 2009 Elsevier BV All rights reserved 1 Introduction The international planning competition IPC short important driver research AI planning bien nially held conjunction International Conference Automated Planning Scheduling The general goals IPC include pushing state art planning technology posing new scientiﬁc challenges encouraging conducting direct comparison planning systems techniques developing improving common planning domain deﬁnition language pddl 293641 designing new planning domains problems research community increasingly realistic This paper focuses deterministic ﬁfth international planning competition IPC5 Corresponding author Email addresses gereviniingunibsit AE Gerevini patrikhaslumanueduau P Haslum dereklongcisstrathacuk D Long saettiingunibsit A Saetti yanniscsucyaccy Y Dimopoulos 00043702 matter 2009 Elsevier BV All rights reserved doi101016jartint200810012 620 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 short classical competition addressing planning problems initial state completely speciﬁed relevant effects available actions deterministic We present language benchmark mains developed competition detailed experimental evaluation deterministic planners entered IPC5 While IPC5 shares general goals previous planning competitions important novel features making event signiﬁcantly different previous competitions 1415051 In particular deterministic track IPC5 emphasises importance plan quality crucial applications previously receive suﬃcient attention Motivated desire capture plan quality signiﬁcant new version pddl called pddl3 designed pddl3 includes new constructs better characterise plan quality allowing user express strong soft constraints structure desired plans pddl3 includes soft problem goals express overconstrained planning problems called oversubscription problems 152362 Plan trajectory constraints particular linear temporal logic formulae expressing constraints possible actions plans intermediate states reached plans constraints known temporally extended goals 2 5 Soft goals constraints preferences wish satisfy order generate good plan achieved order plan correct Strong plan constraints contrast express properties acceptable plans satisfy Moreover allow user provide control knowledge domainindependent planners supporting extended pddl language By adding goal conditions prevent planner exploring parts plan space 348 possibly making exploration faster guiding planner better quality solutions This way plan constraints IPC5 possible use motivation introducing pddl Dealing strong soft plan trajectory constraints soft goals poses new challenge fully automated planning While soft constraints extensively studied CSP literature 92460 recently planning community started investigate 141521536263 When soft constraints goals useful different importance For purpose pddl3 allows domain modeler assign different penalties violated constraints unachieved goals In order language extensions accessible competitors IPC5 ﬁrst version pddl3 called pddl30 imposed simplifying restrictions limited form modal operator nesting speciﬁcation trajectory constraints While way specify importance soft constraint goal ﬁrst attempt tackle issue pddl30 chosen simple quantitative approach soft constraint goal associated numerical weight representing cost violation plan relative importance respect speciﬁed soft constraints goals Weighted soft constraints goals plan metric expression best quality plans optimising expression Using approach express certain plans preferred In order evaluate performance competing planners organisers IPC5 developed new planning domains large collection new benchmark problems domains serve reference future research Some new domains inspired new applications planning technology problems molecular biology known problems investigated ﬁelds science travelling purchaser problem studied operations research A total planners entered IPC5 Even attempt problems size result ing data set substantial Given limited time available competition analysing results assigning awards organisers IPC5 informal evaluation method similar previous competition 41 main difference evaluation criteria focused number solved problems plan quality CPU time scalability1 The winners IPC5 MaxPlan SATPLAN version 2006 propositional optimal planning subtrack SGPlan5 satisﬁcing suboptimal planning subtrack 132 In paper analyse performance IPC5 planners rigorously terms relative formance advancement respect stateoftheart fullyautomated deterministic planning systems qualities solutions IPC5 benchmarks In summary main contributions work An extension pddl language supports soft goals soft strong state trajectory constraints representing temporally extended goals Some basic results expressiveness pddl30 compilability previous versions language A detailed evaluation relative performance IPC5 planners domain category involving different fragments pddl30 An evaluation performance IPC5 winners respect winners previous IPC quality solutions computed 1 A detailed description IPC5 evaluation criteria assign IPC5 awards available competition website ipc5ingunibsit 2 The term satisﬁcing introduced planning 41 largely adopted planning community planners offer guarantee quality plans compute While satisﬁcing planners aim ﬁnd plans good quality ignore quality aspect completely aiming ﬁnd solution plan quickly possible AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 621 A collection new benchmarks testing planning algorithms systems problems speciﬁed pddl30 pddl2 The paper organised follows Section 2 introduces pddl3 focusing especially pddl30 gives basic results compilability new features pddl30 In Section 3 present test domains developed IPC5 In Section 4 brief description IPC5 planners analyse performance Finally Section 5 summarise results conclusions 2 The PDDL3 language The planning domain description language pddl ﬁrst proposed Drew McDermott ﬁrst international planning competition 1998 36 The language based Lisp syntax structure based widely variants strips notations Establishing common standard language similar impact planning research introduction standards areas research opens route stronger collaboration exchange tools techniques problems provides platform comparative evaluation approaches The language outset strongly linked competition series developments language seen drivers direction competition challenges pddl extended stages order capture expressive variants The signiﬁcance impact changes described Section 21 There explorations expressive power different variants pddl mainly concentrated notion compilability Recent results include demonstration temporal features compiled away polynomial work subject certain constraints forms concurrency appear problem 59 examined compilability conditional effects timed initial literals domain axioms 285465 For ﬁfth planning competition pddl extended include important new features 3132 The ﬁrst ability express goals apply ﬁnal state trajectory states visited plan intermediate states These goals form trajectory constraints familiar work temporal logics The second extension ability express soft constraints preferences Both extensions language motivated desire planning bridge gap research application Many real problems require speciﬁcation goals complex easily expressed earlier versions pddl These include constraints states plan visits state ﬁnishes It important specify relative beneﬁts different conﬂicting desirable conditions plan satisfy plan constructed evaluate beneﬁts costs achieving 21 A brief review PDDL In order provide background required place discussions follow context section contains short overview pddl The key details syntax semantics pddl 2941 pddl allows actions described terms pre postconditions The expressive levels language associated tags label domain ﬁles addition tag domain ﬁle indicates domain use corresponding syntax layer language Preconditions simple conjunctions atoms literals negative preconditions allowed arbitrary formulae quantiﬁcation ADL allowed Postconditions contain add delete effects use conditional effects allowed quantiﬁcation pddl21 29 extended language include numbervalued ﬂuents corresponding requirements tag A vari ant included original pddl speciﬁcation adopted Two important extensions added pddl21 relying use numbers plan metrics specify way plans evaluated speciﬁc problem instance durative actions Durative actions actions execute interval time These constant duration duration determined state action executed complex variable duration selected planner possibly subject constraints The use durative actions implies plans embedded metric time line plan specify time action executed The structure durative action equivalent standard instantaneous actions start durative action end combined additional constraintthe action invariant The start end durative action pre postconditions semantics standard instantaneous actions The start applied time speciﬁed plan action end applied appropriate interval following The invariant logical condition constrained syntax limitations preconditions remain true interval durative action executing The introduction durative actions pddl required decision structure plans use durative actions It proposed cases plans form timestamped actions Thus strips plans time matters ordering actions represented simply labelling actions position index plan starting 1 The consequence decision pddl plans considered embedded real time line This observation extends plans simple strips problems allows plans parallel actions This semantics achieves effect semantics Graphplan plans 10 622 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 traditional strips plans Graphplan partial order plans generally interpreted terms set possible serialisations partial orders The semantics pddl21 discussed 29 Essentially pddl21 plan describes trajectory states states valuations propositional metric variables problem The initial state speciﬁed planning problem Transitions caused happenings collections instantaneous actions simple actions domain start end points durative actions occur time points It worth emphasising semantics uniform treatment end points durative actions instantaneous actions kinds actions mixed freely single plan considered appropriate model domain way Each happening causes state change according effects actions occur corresponding time point Invariants checked intervals happenings durative actions executing In cases plans strips actions plans durative actions possible happenings contain multiple instantaneous actions occurring In order ensure behaviour welldeﬁned required simultaneous actions noninterfering A simple paradigm deﬁne concept interference based observation action effects seen analogous database updates affecting state mutex locks The idea access particular variable action requires locka readlock simply needs access value variable check satisfaction condition writelock update value effect Writelocks mutually exclusive kinds lock actions multiple readlocks possible inconsistency Two consequences action requires writelock update performs actually change original value corresponding variable actions considering interfering update variable agree new value The exception rule use certain commutative arithmetic effects increase decrease effects particular considered require independent writelocks update metric variable The reason discussed 29 important remainder discussion paper For purposes IPC3 pddl21 considered split levels These deﬁned syntax language essentially identiﬁed certain combinations requirements tags The levels correspond simple strips level 1 domains numeric ﬂuents level 2 durative actions discrete durations level 3 Finally level 4 contains simple continuous process model proposed pddl21 pddl22 26 extended language adding axioms allow derived propositions inferred satisfaction logical formulae state timed initial literals specify effects triggered predetermined times execution plan These allow simple deterministic exogenous events modelled sunrise sunset certain predeﬁned times 22 State trajectory constraints State trajectory constraints assert conditions met entire sequence states visited exe cution plan They expressed temporal modal operators ﬁrst order formulae involving state predicates In section present syntax semantics extensions introduced pddl30 As clear certain constraints placed ways syntax exploited particular nesting modalities Ultimately development PDDL compromise goals convenient expressive power needs competition limits planning technology available time competition One consequences compromise appropriate add constraints limit problems planner contend natural ways allow expressive power extended 221 Syntax intended meaning The basic modal operators IPC5 atmostonce end The identify conditions hold ﬁnal state plan executed making equivalent traditional goal conditions For convenience unadorned goal conditions assumed end conditions This assumption serves preserve standard meaning existing goal speciﬁcations The semantics modalities given Section 222 examples use provide brief illustrations support intuitions use For example clear A expresses condition object A remain clear plan clear A expresses A clear point plan necessarily end atmostonce clear A expresses A clear single unbroken period execution plan The operator included express deadlines For example 10 clear A speciﬁes A clear time 10 In addition allowing arbitrary nesting modal operators competition speciﬁc combinations encoded explicit operators These sometimebefore sometimeafter alwayswithin Other modalities added suﬃciently powerful initial level sub language modelling constraints Examples use sometimebefore clear A clear B speciﬁes A clear execution plan B clear point sometimeafter clear A clear B similar requires B clear point AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 623 A clear Finally alwayswithin 5 clear A clear B speciﬁes time A clear B clear 5 time units point execution plan Modal expressions combined propositional formulae limit combination conjunctions universally quantiﬁed expressions considered equivalent conjunctions models ﬁnite pddl30 support syntactic nesting modal operators Allowing arbitrary nesting depthbounded nesting modalities creates rich collection different constraints unnecessary expression interesting problems However allowing language force designer pddl30 planner consider deal In order arrive appropriate compromise modelling expressiveness competition challenge decided collection additional modalities equivalent speciﬁc nested structures primitive modal operators included pddl30 expressions Thus limitation nesting pragmatic decision intended task competition entrants tightly deﬁned An example expression possible capture nesting modalities sometimeafter p sometimebefore q r asserts p true state q true subsequent state r true state q true This constraint captured existing modalities nesting additional encoding tricks exploited directly modify actions domain The extent restrictions use modalities limit conveniently expressed diﬃcult assess little practical experience use language express plan constraints All design benchmark problems examples considered hindered way constraints impose It noted combining modalities timed initial literals deﬁned pddl22 41 express goal constraints In particular specify interval time goal hold lower bound time hold Since interesting useful constraints introduce modal operators syntactic sugar basic language holdduring holdafter Trajectory constraints speciﬁed planning problem ﬁle new ﬁeld called constraints usually appear goal Constraints speciﬁed action domain ﬁle This convenient expression constraints apply plans produced particular domainperhaps legal safety conditions operating procedures The use trajectory constraints domain ﬁle goal speciﬁcation implies need constraints tag requirements list No temporal modal operator allowed preconditions actions That action preconditions respect state time interval case action conditionsthe action invariants described earlier This decision ensures set actions applicable state determined entirely state course contain record relevant parts history memory affected trajectory states precede succeed state This Markovian requirement consistent view appropriate model way actions constrained causal relationships practice However signiﬁcant beneﬁt simplify task planner determining choice actions open state Without constraint general problem determining action applicable fully speciﬁed state hard planning conditions execution require arbitrary goals achieved past future current state Indeed placing state context trajectory clear question applicability actions modal preconditions makes sense The following fragment grammar describing new modalities pddl30 expressing constraints conGD BNF grammar given 3133 conGD end GD GD GD num GD atmostonce GD sometimeafter GD GD sometimebefore GD GD alwayswithin num GD GD holdduring num num GD holdafter num GD GD goal description ﬁrst order logic formula num numeric literal strips domains restricted integer values In interpretation alwayswithin considering strips plans similarly holdduring holdafter numeric bounds counted terms plan happenings For instance 10 φ means φ hold happenings These happenings action multiple actions depending plan sequential parallel Trajectory constraints allow speciﬁcation problems different character captured simple goal speciﬁcations domain For example Blocks World clear path state state number steps linear size problem speciﬁcation However possible planner faced trajectory constraints prune legal paths way force exponential length plans required pairs states This seen follows suppose n 3 blocks problem instance named A B C b1 bn By adding constraints 624 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 A table B table C table forall x block x A x B x C x table b1 b2 b1 b3 b1 bn b2 b3 b3 b4 Blocks World problem force behave like ndisk Towers Hanoi problem blocks A B C playing roles pegs b1bn disks This problem admits exponential solutions captured collection constraints quadratic size set blocks The semantics modal operator given formally use consistent intuition formula applied hold state order modal formula hold trajectory A brief comment required important decision include modal operator signiﬁcant effect modal logics supported existing planners TALPlanner 48 TLPlan 2 In planners formulae expressed modality trigger conditions point change proposition p p Φ Two problems led avoid adding modality language Firstly fact allow nested modalities severely limits context modality useful example described useful nested inside modality The second problem attempting capture pddl30 consequence necessary separation time point formula evaluated time point modality reference concurrent strands activity affect state time points This means state change following achievement particular condition caused happening entirely irrelevant condition For example consider attempting express constraint truck arrives package destination package state package unloaded On real time line state change following arrival truck destination caused happening affects aircraft entirely different world importantly entirely appropriate state despite having relevance actions involving truck This observation prevent given consistent semantics use modelling intuitive 222 Semantics The semantics goal descriptors pddl22 determines evaluated context single state state application action preconditions conditional effects ﬁnal state level goals In order meaning temporal modalities assert properties trajectories individual states necessary extend semantics support interpretation respect ﬁnite trajectory generated plan The semantics modal operators consistent modal operators LTL treatments modal temporal logic 5256 Recall happening plan pddl domain collection instantaneous start end points actions occur time This time time happening happening applied state simultaneously applying effects happening deﬁned pair effects interfere The association realvalued continuous variable representing time state begins important difference treatments temporal logics The semantics based familiar conditions sequences states modalities depend values times Deﬁnition 1 Given pddl domain D plan π initial state I π generates trajectory cid2 cid3 S0 0 S1 t1 Sn tn iff S0 I happening h generated π h time t ti t S result applying happening h S i1 j 1 n happening π t j Note intentionally happening time 0 The initial state holds time persist nonzero period time ﬁrst happening time t1 0 Deﬁnition 2 Given pddl domain D plan π initial state I goal G π valid iff trajectory generates cid6S0 0 S1 t1 Sn tncid7 S0 I satisﬁes goal cid2 cid3 S0 0 S1 t1 Sn tn cid8 G This deﬁnition contrasts original semantics goal satisfaction 29 requirement Sn cid8 G The contrast reﬂects precisely requirement goals interpreted respect entire trajectory Action preconditions include modal operators interpretation continues relative single state action applied The interpretation simple formulae φ containing modalities single state S unchanged continues denoted S cid8 φ In following deﬁnition rely context clear AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 625 cid6S0 0 S1 t1 Sn tncid7 cid8 end φ cid6S0 0 S1 t1 Sn tncid7 cid8 φ Sn cid8 φ Sn cid8 φ cid6S0 0 S1 t1 Sn tncid7 cid8 φ cid6S0 0 S1 t1 Sn tncid7 cid8 φ 0 cid2 cid2 n S cid8 φ 0 cid2 cid2 n S j cid8 φ cid6S0 0 S1 t1 Sn tncid7 cid8 t φ iff cid6S0 0 S1 t1 Sn tncid7 cid8 holdafter t φ iff 0 cid2 cid2 n S cid8 φ ti cid2 t tn t 0 cid2 cid2 n S cid8 φ ti t cid6S0 0 S1 t1 Sn tncid7 cid8 holdduring u1 u2 φ tn cid2 t Sn cid8 φ iff tn u1 0 cid2 cid2 n u1 cid2 ti u2 S cid8 φ j 0 cid2 j n t j cid2 u1 t j1 S j cid8 φ tn cid2 u1 Sn cid8 φ cid6S0 0 S1 t1 Sn tncid7 cid8 atmostonce φ iff 0 cid2 cid2 n S cid8 φ j j cid3 k cid2 k cid2 j Sk cid8 φ k k j Sk cid8 φ cid6S0 0 S1 t1 Sn tncid7 cid8 sometimeafter φ ψ cid6S0 0 S1 t1 Sn tncid7 cid8 sometimebefore φ ψ 0 cid2 cid2 n S cid8 φ j cid2 j cid2 n S j cid8 ψ 0 cid2 cid2 n S cid8 φ j 0 cid2 j S j cid8 ψ cid6S0 0 S1 t1 Sn tncid7 cid8 alwayswithin t φ ψ 0 cid2 cid2 n S cid8 φ j cid2 j cid2 n S j cid8 ψ t j ti cid2 t iff iff iff iff iff iff iff Fig 1 Semantics basic modal operators pddl30 φ ψ stand arbitrary syntactically valid goal formulae pddl30 t u1 u2 real values interpretation nonmodal formulae single states interpreting modal formulae trajectories Deﬁnition 3 Let φ ψ atomic formulae predicates planning problem plus equality objects numeric terms inequalities numeric terms let t u1 u2 real constant values The interpretation modal operators speciﬁed Fig 1 Note interpretation exploits fact modal operators nested A general semantics nested modalities straightforward extension Note expressions Fig 1 expressible different ways allows nesting modalities use standard LTL modality Taking φ ψ mean state ψ true states φ true The modality weakuntil occasionally weakuntil φ ψ taken mean φ true states state ψ true φ true The following equivalences proved othersindeed suﬃcient capture modalities numeric arguments 19 weakuntil φ ψ φ ψ φ alwayswithin t φ ψ φ t ψ sometimebefore φ ψ weakuntil φ ψ ψ φ atmostonce φ φ weakuntil φ φ sometimeafter φ ψ φ ψ The constraint atmostonce satisﬁed argument true implication equiva lence trivially satisﬁed antecedent holds true remains true state reached proposition remains false That proposition ﬁrst false having true remain false allowing interval plan argument proposition true An example use modality following Each truck visit city constraints forallt truck c city atmostonce t c 626 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 To satisfy constraint truck visit city stay length time leaves return execution plan Of constraints holdduring holdafter holdduring t1 t2 φ states φ true state interval t1 t2 holdafter t φ states φ true state time t The ﬁrst expressed timed initial literals specify dummy timed literal d true time window t1 t2 goal implies d φ A variant holdduring φ hold exactly speciﬁed interval easily obtained similar way The holdafter modality expressed timed initial literals specify d true time t goal d φ The modal operators alwayswithin particular An example constraint alwayswithin following Whenever energy rover 5 recharging location 10 time units constraints forall r rover alwayswithin 10 energy r 5 r rechargingpoint This modality interesting highlights way semantics relies time associated achievement individual states Another example following constraints forall t truck p package l location alwayswithin 10 t l p t destination p l p l This condition requires time truck carrying package arrives location destination package package delivered time units The time limit manipulated ensure behaviour possible immediately unload truck following arrival particular location 23 Soft constraints preferences A soft constraint condition trajectory generated plan user prefer satisﬁed prepared accept satisﬁed cost involved conﬂicts constraints goals While soft constraints extensively studied constraintsatisfaction literature 92460 planning community started consider relatively recently example 8141521536263 There contention best way capture handle preferences advocating rewardbased approach 12 advocating qualitative approach 37 In particular user multiple soft constraints need determine constraints priority conﬂict prove costly satisfy This expressed qualitative approach example describing partial order conditions preferred The advantage approach intuitive consistent demands potential applications Unfortunately highly inconsistent demands straightforward comparative evaluation planner performance use partial order introduces complication incomparable plans maximally preferable To avoid problem particularly acute competition context pddl30 uses quantitative preferences An example expressions wish capture following We prefer fragile package insured loaded vehicle constraints forall p package preference P1 implies fragile p loaded p insured p This example illustrates power combining preferences trajectory constraints 231 Syntax intended meaning The syntax soft constraints falls parts Firstly identiﬁcation soft constraints secondly description satisfaction violation constraints affects quality plan Goal conditions including action preconditions labelled preferences meaning true order achieve corresponding goal precondition Thus semantics conditions simple far correctness plans concerned trivially satisﬁed state The role preferences apparent consider relative quality different plans In general consider plans better satisfy soft constraints worse Complications arise comparing plans satisfy different subsets AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 627 constraints set strictly contains In case rely speciﬁcation violation costs associated preferences The syntax labelling preferences goal descriptors simple preference GD similarly pref erences trajectory constraints The deﬁnition goal description extended include preference expressions However expressions preferences appear nested inside connectives modalities conjunction universal quantiﬁers prohibited pddl30 Preferences appearing condition conditional effect valid Where named preference appears inside universal quantiﬁer considered equivalent conjunction legal instantiations quantiﬁed variable preferences The use preferences domain problem implies need requirements tag preferences Prefer ences state trajectory constraints expressed constraints ﬁeld preferences goals expressed goal ﬁeld If preference involves constraint goal expressed constraints ﬁeld Goal preferences expressed goal ﬁeld implicitly interpreted end modal ity Preference names refer preference construction penalties violated constraint Preferences share penalty Penalties violation preferences calculated expression isviolated associated preferences This expression takes value equal number distinct preferences given satisﬁed plan In pddl30 degrees satisfaction soft constrainta constraint satisﬁed The violation count includes separate instance constraint This means preference VisitParis forall x tourist x Paris yields violation count 1 isviolated VisitParis tourist fails visit Paris plan forall x tourist preference VisitParis x Paris yields violation count equal number people failed visit Paris plan The intention preference considered distinct preference satisﬁed independently preferences The naming preferences convenience allow different penalties associated violation different constraints Plans awarded value plan metric introduced pddl21 The constraints weighted expressions metric For example metric minimize 10 fuelused isviolated VisitParis weight fuel use times signiﬁcant violations VisitParis constraint The violation preference preconditions action counted action occurs plan For instance suppose p preference precondition action occurs times plan π preference unsatisﬁed case If plan metric evaluating π contains term k isviolated p term contribute 3k plan metric instance action considered introduced distinct instance preference Anonymous constraints constraints provided automatically considered weighted 1 included implicit additional additive term metric positively metric minimised negatively maximised This ensures plan satisﬁes constraints better satisﬁes fewer equal The default treatment anonymous constraints avoided simply naming constraints named constraint contributes plan quality value appears explicitly term metric 232 Semantics The expression cid2 cid3 S0 0 S1 t1 Sn tn cid8 preference Φ true allows preference statements combined formulae expressing goals changing states goals true A preference soft constraint failure satisfy considered falsify goal formula In context action preconditions S cid8 preference Φ true reason A preference preference Φ satisﬁed iff cid6S0 0 S1 t1 Sn tncid7 cid8 Φ violated To illustrate interpretation preferences example goal package1 london preference clean truck1 628 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 leads following interpretation lack explicit modality proposition preference means interpreted required condition ﬁnal state cid3 S0 0 S1 t1 Sn tn cid8 package1 london cid2 preference clean truck1 cid2 iff cid3 S0 0 S1 t1 Sn tn cid2 cid8 package1 london cid3 S0 0 S1 t1 Sn tn iff Sn cid8 package1 london iff package1 london Sn cid8 preference clean truck1 preference interpreted true In addition preference satisﬁed cid2 cid3 S0 0 S1 t1 Sn tn iff iff clean truck1 Sn cid8 end clean truck1 Now suppose following preferences plan metric preference p1 clean truck1 preference p2 end package2 paris clean truck1 preference p3 packeage2 truck1 metric minimize 10 isviolated p1 5 isviolated p2 isviolated p3 Suppose plans π1 π2 π1 satisfy preferences p1 p3 satisﬁes preference p2 π2 satisfy preferences p2 p3 satisﬁes preference p1 metric π1 yield value 11 higher π2 6 π2 better π1 The task determining preference violated simpliﬁed restriction language allows pref erences appear conjunctions universally quantiﬁed formulae To constraint necessary consider example formulae Φ preference Ψ preference Φ Ψ Under natural interpretation formulae equivalent terms satisfaction formulae terms preference satisﬁed This happens consider ﬁrst formula mean Φ true failing preferable Ψ true true With interpretation state Φ holds Ψ violation preference irrelevant Φ satisﬁed This interpretation property makes distinct meanings Φ preference Ψ Φ preference Ψ This apparently natural interpreta tion lead situation violation count preference Ψ incremented Φ false Unfortunately opens signiﬁcant complication consistent expression preference p1 Φ preference p2 Ψ mean preference violation counts incremented The problem decide One possibility assign violation costly preference measured ac cording plan metric decidedly natural interpretation require account plan metric order decide preference violated Since disjunctions involving preferences formulae equivalent disjunctions including preferences behave intuitively excluded language The interpretation preferences applied action preconditions include Formally preference pre condition satisﬁed state corresponding action applied satisﬁes preference The restriction preferences appear precondition formulae goals fact excluded conditional effects means deﬁnition suﬃcient context appearance ambiguous necessary determine status preference Similarly goal preference satisﬁed proposition contains satisﬁed ﬁnal state Finally invariant condition durative action satisﬁed correspond ing proposition true duration actiononce invariant violated preference unsatisﬁed regardless resatisﬁed violated multiple disconnected intervals In cases hard combine preferences appropriate weighting achieve intended balance soft constraints factors contribute value plan plan makespan resource sumption For example ensure constraint takes priority plan cost associated resource consumption makespan fuel consumption particularly tricky constraint weighted value higher possible consumption cost possible determine With nonlinear functions possible achieve bounded behaviour costs associated resources For example constraint C considered greater importance makespan plan metric deﬁned follows metric minimize isviolated C 1 1 1 totaltime This metric prefer plan satisﬁes C use makespan break ties AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 629 24 On expressiveness PDDL30 The question extension planning language increases expressive power original language addressed studying compilability extended language original As argued Nebel 45465 compilation scheme preserve solution existence theoretically important increase size problem description polynomially size smallest solution constant compilation scheme satisfying conditions exists theoretical point view new language constructs add expressive power merely syntactic sugar Of course useful example making easier model solve certain kinds problems The question new constructs introduced pddl30 increase theoretical expressiveness lan guage trivial Several methods compiling different forms state trajectory constraints preferences appeared literature 520254558 Indeed planners participating competition took approach handling extended language However compilations preserve existence plans traditional sense ﬁnite sequences actions fact preserve existence forms plans Ad ditionally details complexity different compilation schemes proposed size input planning problem description output solution plans analysed This section contains basic results compilability pddl30 state trajectory constraints preferences For nontemporal domains actions instantaneous time corresponds happenings determined occurrence actions plan fragment pddl30 compiled pddl2 polynomial increase problem size constant increase plan length Thus argued earlier claim nontemporal domains constructs add expressive power pddl language However compilation schemes preserve existence ﬁnite sequential plans exist planning problems state trajectory constraints example plans parallel actions sequential plan Hence particular case pddl30 adds expressive power pddl2 Regarding state trajectory constraints temporal mains outline possible compilation scheme increases plan size linearly In case compilation pddl2 preserving plan size exactly impossible Moreover preferences soft goals soft state tra jectory constraints restated numeric state variables ﬂuents restricted form action costs Finally section discuss practical aspects usefulness compiling pddl30 constraints versus compiling 241 Compiling state trajectory constraints nontemporal domains State trajectory constraints nontemporal domain restated formulae Linear Temporal Logic LTL compiled equivalent Büchi automata 1835 Since pddl30 constraints normally evaluated ﬁnite trajec tories Büchi acceptance condition accepting state visited inﬁnitely reduces standard acceptance condition automaton accepting state end trajectory A straightforward approach compil ing away pddl30 state trajectory constraints compile ﬁnite automata ensure valid plan correctly simulates automata The compilation schemes participants IPC5 525 variants idea The scheme use inspired similar IPC5 planners MIPSXXL 25 HPlanP 5 However purpose study expressiveness pddl30 use different encoding automata enables derive explicit bounds growth size compiled problem solutions In general compilation LTL formulae produce exponentially larger automata However pddl30 allow arbitrary nesting modal operators automata corresponding basic plan constraints ﬁxed forms depend modal operator Fig 2 shows automata pddl30 modal operators nontemporal domains The alwayswithin holdafter holdduring operators special number states transitions corresponding automata grow integer parameter t resp t1 t2 These automata reformulated ﬁnite automata augmented ﬁniterange binary counters 39 size proportional logt resp logt1 logt2 t1 1 constant number distinct transitions Below compilation scheme automata counters encoding ﬁnite integer counters propositions action conditions effects complex Without loss generality assume problem description contains distinguished actions start finish appear ﬁrst respectively valid plan3 The effects start action assert initial facts problem precondition finish action includes problem goal To enforce trajectory constraint planning problem modiﬁed way valid plan simulates execution corresponding automaton state sequence ensures ends accepting state Let A automaton state A represented predicate stateA s argument drawn collection additional constants The start action asserts stateA s0 goal requires A accepting state Since automaton 3 This ensured addition dummy propositions init goal active init holds initial state required deleted start goal added finish required hold goal state active added start deleted finish precondition action start 630 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 Fig 2 Automata corresponding basic pddl30 state trajectory constraints φ ψ arbitrary pddl formula t t1 t2 real values accepting state avoid disjunction goal add predicate acceptingA true A accepting state false To ensure automaton correctly updated plan action original planning problem special finish action equipped set conditional effects nonlooping transition A stateA si TRANSLABEL stateA si stateA sj AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 631 TRANSLABEL formula labelling transition state si state s j automaton For transitions accepting resp nonaccepting state add extra effect acceptingA resp acceptingA Because formula labels transitions state mutually exclusive exhaustive exactly ditional effects place action performed As example consider state trajectory constraint Plane NY wellknown Zenotravel domain 5055 To simulate corresponding automa ton instance Fig 2b actions domain augmented conditional effects stateA S0 Plane NY stateA S0 stateA S1 acceptingA stateA S1 Plane NY stateA S1 stateA S2 acceptingA stateA S0 Plane NY stateA S0 stateA S2 acceptingA In compiled problem state automaton updated reﬂect planning world state action takes place automaton step This automaton transitions simulated execution plan action triggered world state action executed world state modiﬁed effects action4 To ensure complete state sequence accepted automaton updating conditional effects added special finish action condition automaton accepting state placed problem goal precondition action Note conditional effects updating states automata action mutually exclusive action according pddl2 deﬁnition mutex actions 29 force plan sequential Because modalities nested number states transitions automaton corresponding single basic constraint bounded constant assuming automata corresponding constraints involving explicit time steps reformulated binary counters Thus place constraint formula enters automaton transition labels pddl encoding automata outlined grows linearly size formula However pddl encoding automata counters grows linearly number bits required represent counters logarithmically integer parameters t resp t1 t2 To extend construction universally quantiﬁed constraints keeping growth polynomial suﬃcient observations First given universally quantiﬁed basic constraint construction lifted pred icates representing automaton state parameterised quantiﬁed variables updating conditional effects universally quantiﬁed set variables noted Baier McIlraith 5 Second given conjunction possibly quantiﬁed basic constraints updating conditional effects relating different possi bly parameterised automata noninterfering carried parallel adding effects action including special finish action In way ground instances automaton simulated parallel This lifting requires universally quantiﬁed initialisation automata states encoded universally quantiﬁed effect special start action universally quantiﬁed goals compiled problem imposing automaton accepting state Consider Zenotravel example quantiﬁed constraint forall x aircraft x NY Then action fly augmented quantiﬁed conditional effects forall x aircraft stateA x S0 x NY stateA x S0 stateA x S1 acceptingA x forall x aircraft stateA x S1 x NY stateA x S1 stateA x S2 acceptingA x forall x aircraft stateA x S0 x NY stateA x S0 stateA x S2 acceptingA x In summary increase size compiled problem proportional C log2t M N O C constant number transitions largest automaton corresponding basic constraint t maximum integer parameter appearing alwayswithin holdduring holdafter constraint M size largest formula appearing inside basic constraint N number basic constraints conjuncts problem O number operators domain A shortest plan compiled problem exactly 2 actions longer length number actions shortest plan original problem This increase length introduction special start finish actions 4 In context Zenotravel example assume Plane Boston holds problem initial state fly Plane Boston NY ﬁrst plan action action updates state automaton S1 accepting state S2 632 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 242 Two noncompilability results It diﬃcult compilation scheme outlined preceding section preserves existence plans sense exists ﬁnite executable action sequence satisfying constraints goals original planning problem exists valid plan compiled problem However consider slightly wider notion plan ﬁnd temporally extended goals expressible pddl30 stated stripsadl fragment pddl interesting example goals satisﬁed inﬁnite plans relevant example goals satisﬁed plans actions happen parallel The ﬁrst example goal requiring inﬁnite plan wellknown example LTL cid2cid3p cid2cid3p expressed pddl30 sometimeafter p p sometimeafter p p This constraint satisﬁed state sequence state p true eventually followed state p false vice versa Since p true false state inﬁnite sequence states alternating p p satisfy That goal requiring inﬁnite plans expressed stripsadl obvious goal refer ﬁnal state reached plan Nontemporal PDDL domains property linearisation valid parallel plan valid plan This implies problem solution plan plan strictly sequential However true propositional pddl30 state trajectory constraints possible specify problems having plan involves parallel actions sequential plan Intuitively constraints evaluated sequence intermediate states generated plan linearisation parallel plan pass states parallel plan For simple example consider planning problem following actions action a1 precondition p1 effect p1 q1 action a2 precondition p2 effect p2 q2 p1 p2 initially true goal q1 q2 Clearly sequences cid6a1 a2cid7 cid6a2 a1cid7 valid plans plan executes a1 a2 parallel Now consider plan constraint p1 p2 q1 q2 This constraint violated sequential plans problem satisﬁed parallel plan 243 Compiling state trajectory constraints temporal domains In temporal planning domain domain durative actions state trajectory constraints involving explicit time points type sometimeafter sometimebefore atmostonce compiled away scheme shown previous section minor modiﬁcation collection conditional effects added start end effects action As noted prevents pair effects occurring exact time means compiled problem pair actions start end concurrently Note endpoints actions need separated inﬁnitesimal cid7 required pddl21 semantics actions overlap Thus compilation change minimal plan makespan O cid7 Constraints type holdafter holdduring easily encoded pddl22 timed initial literals TILs representing predictable deterministic exogenous events 253141 turn encoded pddl21 compilation scheme described 41 Intuitively holdafter holdduring compiled TILs exact absolute times formula appearing inside constraints true deﬁned semantics independently plan hold However hold constraints type alwayswithin require intricate encoding Intuitively sources diﬃculty encoding verify conditions continuous time pddl admit temporal constraints action conditions In following outline possible compilation scheme alwayswithin constraints context temporal domains Each alwayswithin constraint represented timed automaton Fig 3 As nontemporal domains automata execution simulated execution plan case synchronise execution happenings plan instead plan actions Hence compilation alwayswithin constraint instead augmenting domain actions conditional effects representing transitions timed automaton add new dummy action having conditional effects force action happen immediately happening plan technique based clip actions introduced Fox colleagues 28 Moreover alwayswithin constraint metric time t add special action duration t increasing numerical ﬂuent y initialised zero beginning action decreasing AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 633 Fig 3 Timed automaton representing alwayswithin t φ ψ constraints temporal domains end force action occur plan time automaton transition resets clock zero Essentially special action deal temporal constraints labelling automaton transitions pddl explicitly represented action preconditions state value y number clock resets occurred t time units Thus y 0 time elapsed clock reset equal t condition x cid2 t labelling transitions Fig 3 holds y 0 greater t condition x t Fig 3 holds It shown outlined compilation scheme increases size problem description polynomially How preserve number plan actions exactly Intuitively plan compiled problem reset automaton clock O H times consecutive happenings H number plan happen ings Since plan K actions O K happenings number additional actions solution plan compiled problem proportional C K C number state trajectory constraints original problem This increase constructing plan computationally expensive On hand actions overlap compiled problems makespan unaffected O cid7 quantity noted 244 Compilation soft goals constraints pddl30 preferences allow plan metric expressed terms satisfaction soft goals state trajectory straints action preconditions As described impact violation preference plan metric speciﬁed means expression isviolated p evaluates number violations preferences p Thus plan metric involving preferences restated terms set corresponding numeric ﬂuents making sure perform function counting number preference violations For preference p introduce ﬂuent isviolatedp assigned zero initial state We assume loss generality preferences named introduce new assign anonymous preferences A preference preference p φ appearing action precondition translates conditional effect φ increase isviolatedp 1 added effects action To evaluate preferences problem goal introduce special action finish constrained appear valid plan add corresponding conditional effects action Note problem contains preferences state trajectory constraints need distinct finish actions ﬁrst performs ﬁnal update automata corresponding trajectory constraints described second evaluates preferences compiled problem refer acceptance predicates automata For preferences appearing inside universal quantiﬁer corresponding conditional effects quantiﬁed For instance let forall x aircraft preference P1 x NY quantiﬁed preference Zenotravel example special start action extra numerical effect assign isviolatedP1 0 second ﬁnishing action quantiﬁed conditional effect forall x aircraft acceptingA x increase isviolatedP1 1 Finally note impact preference violation plan metric restricted linear metric sum weighted preference expressions plus possibly term preferences reduced additive action costs 634 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 compiling conditional effects multiple action instances noted Benton Kambhampati 7 Although pddl special construct expressing action costs relying numeric variables specify metric growing number planners focus optimising additive action costs 1330 makes interesting special case 245 Discussion Some practical considerations Even hard soft constraints permitted pddl30 compiled away expressed reduced language pddl2 potential advantages introducing From knowledge engineering point view new language constructs possible formulate aspects domain problem natural easily understandable modular way From computational perspective having trajectory constraints soft goals explicitly identiﬁed simplify implementing eﬃcient strategies dealing The compilation methods far described literature 625 paper based simulating automata track status trajectory constraints These methods obvious weaknesses example dealing large numbers constraints As example following constraint taken domain Storage described Section 3 states crates stored adjacent areas compatible nature forall c1 c2 crate s1 s2 storearea imply c1 s1 c2 s2 c1 c2 connected s1 s2 compatible c1 c2 Using compilation scheme outlined constraint converted quantiﬁed conditional effect attached action For problem 5 crates 10 areas mediumsized benchmark problem domain corresponding ground problem actions conditional effects effects statically false conditions removed That likely render effectively unsolvable best current classical planners In fact conﬁrmed case FF SGplan5 constraints trivially satisﬁable satisﬁed solution generated planner ignoring constraints 33 However trajectory constraint type enforced adding precondition action possibly falsify regression constraint formula action In case constraint amounts adding forall c2 crate s2 storearea imply connected s1 s2 compatible c1 c2 c2 s2 precondition drop action action makes c1 s1 true As connected compatible predicates static resulting addition preconditions corresponding grounded actions conjunction literals albeit fairly large number It likely signiﬁcantly slow planner constraint trivially easily satisﬁed SGplan5 far planner handle problems pddl30 trajectory constraints manner compiling constraints away Among IPC5 benchmark problems solves excess 2000 ground constraints clearly suffer kinds issues current compilation methods However observed SGplan5s mechanism dealing trajectory constraints problems For example SG plan5 solves IPC5 benchmark problem Pipesworld domain constraints described Section 3 observed cases adding single satisﬁable constraint problem causes SGplan5 fail constraint forces solution plan different SGplan5 ﬁnds original problem regardless problem constraints Thus clear effective general handling pddl30 trajectory constraints open research question Ultimately question best compiling constraints away compilation scheme look like constraints better dealt direct way depend particular planner characteristics constraint formulas 3 The benchmark domains The benchmark domains IPC5 derived variety sources inspired potential appli cations planning technology encodings benchmark problems areas science operations research created explicit purpose trying new language features offered pddl30 As previous planning competitions domains designed versions different subset pddl30 features In cases different versions encode radically different problems prop erly considered different domains sharing common theme The domain version indicates AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 635 product sequence order 1 1 2 order 2 1 3 order 3 2 4 order 4 3 5 order 5 4 5 open stacks 2 X X 2 3 X X 4 4 X X 5 5 X X 4 1 X X 2 1 X X 2 X X 2 3 3 X X 3 5 4 X X 3 X X 2 Fig 4 Illustration number open stacks calculated different production sequences An X denotes order includes request corresponding product order open point sequence include request product point For ﬁrst production sequence 2 3 4 5 1 maximum number simultaneously open stacks 5 second sequence 1 2 3 5 4 3 optimal value problem instance language category belongs Propositional domains use constructs level 1 pddl2 2941 MetricTime domains use constructs level 2 3 pddl21 SimplePreferences domains extend propositional metrictime variants preferences problem goals QualitativePreferences domains include preferences action preconditions preferences state trajectory constraints MetricTimeConstraints domains extend metrictime variant strong state trajectory constraints ﬁnally ComplexPreferences domains use power pddl30 Note domains represented language category In line aim emphasise plan quality evaluation competing planners domains encode optimisation problems signiﬁcantly easier cases completely trivial ﬁnd plan satisﬁes hard goals constraints problem instance domains hard goals true diﬃculty lies ﬁnding plan high quality For reason domains designed problem instances carefully Creating problems simply assigning random values costspenalties runs high risk resulting problems simple sense optimal solutions lie extreme point objective ignored favour maximising satisfaction This situation wanted avoid Moreover domains problems instances designed solutions signiﬁcantly different qualities requiring planner ﬁnd good compromise different possibly conﬂicting terms objective function optimise Three domains Rovers strips Pipesworld TankageNontemporal Pipesworld TankageTemporal recy cled previous competitions way measure advancement ﬁeld However new versions domains preferences constraints created In developed 32 new domains new versions existing domains 978 problem instances Most automatically generated5 31 Openstacks The Openstacks domains greater lesser degree based minimum maximum open stacks combina torial optimisation problem stated follows A manufacturer number orders combination different products Only product time total required quantity product time From time ﬁrst product requested order time products included order order said open time requires stack temporary storage space The problem order making different products maximum number stacks use simultaneously number orders simultaneous production minimised Fig 4 illustrates relationship set orders different production sequences number open stacks small example problem This related problems studied operations research Fink Voss 27 It pure optimisation problem instance problem ordering making products solution worst uses simultaneously open stacks orders The problem known NPhard 49 Recently posed challenge problem constraint programming community Smith Gent 61 311 Openstacks Propositional The Openstacks Propositional domain direct encoding openstacks problem There different formu lations domain In plain formulation encoding way length plan equals maximum number open stacks plus problemspeciﬁc constant equal twice number orders plus number products Thus minimising number actions plan minimises objective function maximum number open stacks However plan quality metric speciﬁed propositional stripsadl fragment pddl different formulation competition sequenced formulation additional action preconditions effects ensure actions executed parallel minimising number parallel steps equivalent minimising number actions The constant offset number steps maxi 5 The problem generation tools available IPC5 website httpipc5ingunibsit 636 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 mum number open stacks larger sequenced domain equal twice number orders plus twice number products As result 2005 Constraint Modelling Challenge large library instances openstacks problem data performance number different solution approaches available The instances IPC5 comprise 25 problems set selected mainly variety plus ﬁve extra instances trivially small size 312 Openstacks SimplePreferences The Openstacks SimplePreferences SP domain models problem similar radically different original openstacks problem The main ingredients set products set orders subset products constraint order open requires stack point ﬁrst product requested order point product The difference lies objective function problem number stacks ﬁxed instancedependent constant constraint requested products included order soft satisﬁed plan valid plan given penalty violation The objective minimise total penalty unsatisﬁed product requests Put way given infeasible limited number stacks openstacks problem planner asked ﬁnd maximal weighted subproblem solvable Instances Openstacks SP domain constructed standard openstacks problems selected propositional domain ﬁve trivial ﬁve largest choosing additional parameters 1 penalty function unsatisﬁed product requests 2 limit number stacks available Two different models penalty associated unsatisﬁed product requests roughly half instances objective simply minimise number unsatisﬁed requests products requested order weighted according arbitrarily chosen order importance Most instances suﬃcient number stacks permit solutions zero penalty problems 1518 unintentionally 313 Openstacks QualitativePreferences The Openstacks QualitativePreferences QP domain combines objective functions Openstacks Propositional Openstacks SP problems weighted sum That solution use number stacks drop set product requests minimise sum price stack total penalty unsatisﬁed requests Problem instances domain constructed instances Openstacks SP domain simply assigning price stacks The price stack set total penalty unsatisﬁed product requests divided optimal case problems 1518 best known time number stacks required accommodate requests aim making extreme solutions roughly equal value 314 Openstacks Time MetricTime The Openstacks Time MetricTime MT domains elements original openstacks problem different objective functions In Openstacks Time domain objective minimise plan makespan Making product takes different time number products parallel long orders requesting products simultaneously open In Openstacks Time domain maximum number stacks use ﬁxed MT domain unlimited objective function weighted combination makespan number stacks There soft goals Problem instances created standard openstacks problems set problems Openstacks SP QP domains assigning random action durations attempting ensure scheduling productmaking actions dominates plan makespan The ﬁxed number stacks available instances Openstacks Time domain set close upper bound number orders For MT domain price stack determined comparing makespan best plans different ﬁxed numbers stacks choosing value equal average decrease makespan stack added following principle trying extreme points spectrum tradeoffs roughly equal value 32 Rovers The Rovers domain introduced IPC3 50 models problem planning autonomous rovers forming planetary exploration order obtain samples rocks soils certain waypoints having images objects In IPC5 reused Strips Numeric versions domain Propositional MetricTime respectively6 We created new domains loosely based Rovers domain 321 Rovers MetricSimplePreferences The Rovers MetricSimplePreferences MSP domain models net beneﬁt maximisation problem task planner plan given goals select plan subset goals maximise net beneﬁt 6 The problem set Rovers MetricTime domain extends IPC3 Rovers Time set large instances AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 637 1 sample wp2 2 sample wp5 3 sample wp7 4 image obj7 5 image obj8 1 2 395 237 384 3 5 4 0 269 395 154 237 0 0 0 1162 312 269 395 Fig 5 Example goal cost relations small Rovers problem Entries diagonal goal optimal cost achieving goal offdiagonal entry j shows difference optimal cost achieving goals j sum costs achieving A negative value represents synergy effect goals j values greater zero indicate goals interfering deﬁned sum values goals achieved plan minus sum independent constant costs actions plan In domain competition net beneﬁt maximisation objective reformulated minimisation objective Net beneﬁt maximisation costbeneﬁt tradeoff problems studied OR scheduling attracted planning researchers recently 2262 Instances Rovers MSP domain created general method aimed generating interesting problems having balanced costs values subset goals nonobvious optimal solutions The steps involved 1 Generating random base problem instances random actions costs relatively large number potential goals 2 Finding real cost achieving small sets goals single goals pairs goals optimally solving corresponding planning problems 3 Calculating base values goal pairs goals known costs estimate kind strength interaction goals 4 Randomising goal values adding subtracting random percentage The calculation goal base values aims achievable net beneﬁt goal sets roughly equal base value singleatom goal interactions goals equals optimal cost achieving goal A goal synergy relations goals meaning cost achieving set goals sum cost achieving individually base value reduced half average synergy effect goal opposite interference relations goals increased corresponding Goals mixed relations treated goals synergies conjunction pair goals interference relation given additional value equal interference effect As example Fig 5 shows optimal cost achieving single goal pair goals small Rovers instance The goal obtaining sample waypoint wp5 interference relations goals base value cost achieving goal 384 plus half average interference effect 237 154 23732 The goal image object obj8 synergy relations goals average synergy effect 332 interference relation goal sample wp5 base value goal cost achieving 395 minus half average synergy effect However goal pair sample wp5image obj8 given extra base value 237 interference effect Final values goals goal pairs base value obtained adding subtracting random percentage range 100 100 base value The set instances domain forms groups ﬁrst problems 1 7 goals synergy relations goals second problems 8 13 goals interference relations problems 14 20 mix kinds goal relationships7 The method foolproof ﬁnal test run simple optimal planner net beneﬁt problems ﬁlter problems easy appeared hard 322 Rovers QualitativePreferences The Rovers QP domain based IPC3 Rovers domain models different problem This domain designed explicitly test competing planners ability trade soft state trajectory constraints Constraints Rovers QP domain soft plan satisfy given penalty unsatisﬁed constraint Problems regular hard goals original Rovers domain Plan constraints contradict hard goals optimal solution domain selects jointly achievable set constraints maximum value value constraint penalty avoided satisfying State trajectory constraints Rovers QP domain artiﬁcial sense encode real pref erences plans As case Rovers MSP domain constraints associated penalties problem instances generated general method aim producing problems nonobvious optimal solutions Given base problem set candidate constraints mining set plans problem candidates straints satisﬁed plan The strategy assigning penalties constraints calculate 7 Because actions rovers nonzero cost version domain turned goals problems generated achieved zero cost plans got base value zero This problem ﬁxed assigning goals small value 110 total goal value 638 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 base value manner intended values maximal satisﬁable sets constraints roughly equal determine ﬁnal values randomly adding subtracting percentage base value The joint satisﬁability sets constraints approximated looking set plans The base problems plans create instances Rovers QP domain instances Rovers domain strips version IPC3 plans submitted planners participating competition 33 Pathways The Pathways domains inspired ﬁeld molecular biology speciﬁcally study biochemical pathways A pathway sequence chemical reactions biological organism Such pathways specify mechanisms explain cells carry major functions means molecules reactions produce regular changes Many diseases explained defects pathways new treatments involve ﬁnding drugs correct defects 64 The function pathway abstract level modelled planning problem Actions represent different chemical reactions appear pathway association reactions association reactions requiring catalysts synthesis reactions The problem goal construct sequence reactions produces substances Goals generally disjunctive domain competition disjunctions compiled away The plan choose limited number substances use input sequence reactions aspects initial state problem left planner This feature introduced mainly problems nontrivial solve The Pathways domains created IPC5 based pathways Mammalian Cell Cycle Control described 47 modelled 16 Fig 6 shows example small network reactions 331 Pathways propositional The Pathways Propositional domain uses simple qualitative encoding chemical reactions pres enceabsence substance modelled quantity available The goals conjunctions binary disjunctions compiled actions disjunctive preconditions As example consider network reactions depicted Fig 6 suppose seek pathway producing RAFRAFK MEKp1p2 substances RAF RAFK MEKRAFp1 input Without restriction input substance ﬁnding solution problem trivial task simply triggering possible chains reactions pathway generates producible substances However selecting limited number input substances generate desired output challenging Note network shown Fig 6 producing RAFRAFK single input substance possible forced satisfy disjunct synthe sising MEKp1p2 If hand number input substances limited producing RAFRAFK easier 332 Pathways SimplePreferences This domain basic structure propositional version difference goals products synthesised pathway initial state constraints maximum number input reactants soft The plan metric weighted sum preference violations Problems domain admit solutions satisfy preferences particular order synthesise desired products input reactants Fig 6 An example small biochemical reaction network Ellipses represent substances squares represent reactions edges indicate substances consumedproduced The shaded nodes substances chosen inputs AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 639 The penalties associated preferences desired outputs pathway computed estimates minimum number required initial reactants aim ensuring tradeoff kinds preferences nontrivial preferences kind completely dominate cost function 333 Pathways MetricTime ComplexPreferences The Pathways MetricTime domain models chemical reactions greater level reactions consuming producing certain quantities substances taking certain time Goals expressed sums substance concentrations generated reactions pathway The objective function minimise linear combination number input substances pathway plan makespan The ComplexPreferences domain adds numerous preferences concerning concentration substances path way order substances produced The metric combination penalties violations preferences number substances plan makespan 34 Pipesworld domains The Pipesworld domain introduced IPC4 42 It models problem transporting batches petroleum products network pipelines restrictions tankage space intermediate storage tanks In IPC5 TankageNontemporal Strips TankageTemporal versions domain reused new domain versions created 341 Pipesworld TimeConstraints The Pipesworld TimeConstraints TC domain based IPC4 Pipesworld NotankageTemporal domain Like IPC5 domains adds hard deadlines achievement subgoals In context planning competition main diﬃculty constructing problem instances hard deadlines ensure deadlines fact met One expect determining given deadlines feasible capabilities temporal planners In practice temporal planners In particular temporal planners participating pddl30 subtrack IPC5 Therefore including unsolvable problems competition set served purpose To ensure deadline goals feasible use existing plans speciﬁcally solution plans submitted plan ners competing IPC4 simply selecting problem solution plan preference plans achieving goals quickly extracting deadlines plan A similar approach construction problems timewindows IPC4 42 In addition deadlines achievement goal atoms encoded straints problems domain fairly large number conditional deadlines modelled alwayswithin constraints In retrospect somewhat excessive problems subgoal deadlines hard competing planners 342 Pipesworld ComplexPreferences The Pipesworld ComplexPreferences CP domain similar Pipesworld TC difference domain deadlines soft preferences instead hard constraints Deadlines speciﬁed goal atoms goal increasing deadlines different increasing penalties missing The method selecting deadline goals penalty values instances Pipesworld CP similarities Rovers MSP Rovers QP domains Given base instance Pipesworld NotankageTemporal domain upper lower bounds time required reach subset goal atoms derived upper bounds collection valid solution plans problem instance plans competitors IPC4 lower bounds admissible makespan heuristics The set distinct values appearing lower upper bounds deﬁne set interesting time points8 Each goal atom p interesting time point t t lower bound time required achieve p deﬁnes potential deadline goal t p random subset selected The base value selected deadline goal 1 plus 1 selected deadline goal pair known unachievable Final penalty values chosen randomly adding subtracting percentage base value 35 Storage The Storage domains model transportation problem involving kind spatial reasoning similar kinds puzzle domains Sokoban n2 1Puzzle The goal unload crates containers deposit storage spaces depots hoists Space inside depot divided areas hoists adjacent areas enter leave depot tofrom certain areas Crates deposited area block movement area Thus plan store crate depot leaving ﬁrst crate inside door going work Movement outside depots loading area unrestricted 8 Two time values considered distinct differ given tolerance τ This ﬁltering necessary upper bounds derived plans tend action start times shifted wildly different epsilon values 640 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 Fig 7 Example small Storage problem Fig 7 shows small example Storage instance Note access depot area D32 depositing crate prevents moving crates depot Likewise putting crate area D22 area closest door reachable Thus goal example stow crates depot store ﬁrst placed areas D11 D12 D21 This situation particularly problematic deleterelaxed plan heuristics 11 delete relaxation optimal easiest solution store crates area D32 clearly indicative real plan The different Storage domain versions add action durations preferences trajectory constraints Altogether volve new features pddl30 There numeric version domain 351 Storage Propositional Time The Storage Propositional domain encodes basic problem described In Storage Time domain actions nonunit duration objective minimise plan makespan identical Propositional version 352 Storage SimplePreferences QualitativePreferences The Storage SimplePreferences domain differs Propositional version goals soft Additionally domain crates incompatible preferences specify compatible crates stored depot failing incompatible crates stored depot located nonadjacent areas There preferences keeping certain areas clear having hoists located depots different crates stored end plan The QualitativePreferences version extends Storage SP preferences trajectory constraints concern use available hoists moving crates order crates stored depots In domains plan quality measured sum weighted preference violations In general preferences contradict plan satisfying forcing planner tradeoff 353 Storage TimeConstraints This domain extends Storage Time trajectory constraints imposing crate moved hoist constraints order certain crates stored deadlines storing crates maximum time hoist stay outside depot Besides goal storing crates endstate constraints imposing incompatible crates stored adjacent areas hoists inside depot There groups instances different modal operators state trajectory constraints instances contain constraints type instances contain plus sometimebefore instances extended constraints type atmostonce alwayswithin Plan quality measured makespan Note additional constraints solution optimal corresponding Storage Time instances valid 354 Storage ComplexPreferences This domain extends Storage Time preferences goal state state trajectory constraints Trajectory constraints similar TimeConstraints version version soft straints frequently contradict plan satisfying preferences The plan metric weighted sum preference violations However constraints impose deadlines conditional deadlines alwayswithin modal operators time plays determining plan quality 36 TPP The Travelling Purchaser Problem The TPP domains inspired Travelling Purchaser Problem known generalisation Travelling Salesman Problem The problem deﬁned follows We set products product known AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 641 Fig 8 Example simple TPP world demand We set markets provide known limited product known price The purchaser select subset markets given demand product purchased construct tour starts ﬁnishes distinguished location called depot visits selected markets The objective minimise combination travel cost sum known costs leg tour purchase cost sum products markets quantity product purchased market times price offered The problem NPhard arises applications mainly routing scheduling contexts Computing optimal near optimal solutions TPP topic active research operations research 57 361 TPP Metric The TPP Metric domain encodes original Travelling Purchaser Problem There different purchasing actions buyall buyallneeded ﬁrst buys certain market product sold market second buys market product needed satisfy remaining demand9 Travel locations markets depot incurs travel cost Travel costs symmetric Fig 8 shows example small TPP instance markets types goods available price type good shown table markets travel cost edges graph The purchaser called truck depot The goal instance acquire 10 units goods1 100 units goods2 10 units goods3 return truck depot The optimal plan instance tour passing markets buying goods1 goods3 market1 goods2 market2 Compared simplest plan fewest actions saves 780 units currency Thus likely planner considers distance goal plan metric come poor plan 362 TPP Propositional This domain simpliﬁes original TPP discretising amounts goods levels assuming prices products markets Travel costs coarsely approximated making map connections locations complete graph The goal acquire certain total subset different goods Since propositional domain default objective minimising number parallel steps Because instances domain depot purchaser truck allows number plan steps reduced parallelising operations 363 TPP SimplePreferences This domain similar Propositional domain version difference goals soft preferences Besides general preference maximising goods acquired preferences relative amounts kinds goods acquired For example preference p3A imply stored goods2 l1 stored goods1 l2 indicates 1 unit goods2 purchased 2 units goods1 These preferences conﬂict general preference acquiring possible total amounts available different kinds goods different For example unit available goods1 goods2 buying unit goods2 leads violation preference buying violates general preference buying This forces planners tradeoff satisfaction kinds preferences The plan quality metric composed solely weighted preference violations The relative weights preferences set plans storing certain levels goods better plan There preferences 9 This encoding avoids need purchase action numeric argument purchase permitted pddl reasons detailed 29 It introduce constraint present original problem viz market fraction available good purchased visited This additional coupling problems optimising purchase travel costs means instances TPP optimal solution represented plan 642 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 sensible plans truck leaving market having loaded purchased goods unloading goods truck end plan These preferences conﬂict preferences kinds affect best achievable plan quality To extent substitute action costs modelled pddl fragment 364 TPP QualitativePreferences This domain version extends SP version preferences trajectory constraints These include constraints truck use different kinds goods constraints imposing use truck Plan quality measured weighted violations soft goals soft constraints soft action preconditions Similarly SP version instances domain generally admit solution satisfying preferences 365 TPP MetricTime This domain version extends Metric version action durations It explicit actions loading unloading goods present Metric version duration depend loadedunloaded The objective function linear combination plan makespan sum purchase travel costs Similar propositional version instances truck making possible reduce makespan parallelising operations This domain additional twist action buying entire quantity product sold market gets known rebate rate lower price This rate like ordinary price vary markets markets offer 366 TPP MetricTimeConstraints The TPP MetricTimeConstraints MTC extends MT version hard constraints Domainwide constraints impose ﬁnal state purchased goods stored depot left lying market truck market visited truck time truck loaded point plan Moreover instances domain additional constraints concerning relative amounts different types goods stored depot number times truck visit market order goods stored order type goods stored bought deadlines delivering goods loaded truck Plan quality linear combination makespan total cost travelling purchasing There groups instances different modal operators state trajectory constraints instances contain constraints type instances contain plus atmostonce sometimebefore instances extended constraints type alwayswithin 367 TPP ComplexPreferences This domain extends MT version preferences ﬁnal state state trajectory straints Trajectory constraints similar MTC domain version plan metric weighted sum preference violations However domain hard goals MT version requested type good stored end plan 37 Trucks The Trucks domains singlevehicletype transportation domains additional constraints The ﬁrst cargo space truck limited divided areas similarly space inside depot Storage domain package loaded unloaded area truck areas area truck door unoccupied In words storage space truck functions like stack ﬁrst The second constraint packages delivered deadline 371 Trucks TimeConstraints time The TimeConstraints version Trucks domain additional constraints naturally expressed The goal packages destination certain deadlines Solution quality measured plan makespan However diﬃcult aspect problem meeting deadlines determined valid plan exploit truck capacity necessarily fully The durations actions trucks generally greater actions loading unloading delivering eﬃcient routing primary concern For example consider following simple instance domain There 2 objects package1 package2 need transported initial location L1 L2 truck load areas A1 A2 carry package The travel time locations 100 time units loading unloading takes 1 time unit The optimal plan problem depicted Fig 9 First packages loaded truck location L1 truck moves location L2 packages unloaded delivered The chart Fig 9 depicts plan generated ﬁrst running FF propositional version domain obtained removing action durations scheduling actions taking account actual durations Note plan suboptimal This attributed fact relaxed plan heuristic FF distinguish usage AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 643 Fig 9 Gantt charts optimal plan plan computed FF moving package1 package2 L2 truck1 sketched initial world state load areas accidentally generates plan ﬁrst package loaded area closer door blocking use inner load area If deadline package1 delivered location L2 time 200 upper chart Fig 9 represents valid plan planning diﬃcult In domain version deadlines speciﬁed constraints However created equivalent version constraints compiled timed initial literals The Trucks Time domain TC version deadlines package deliveries 372 Trucks ComplexPreferences domain The Trucks ComplexPreferences domain basic structure TC version deadline constraints soft modelled preferences Eventually delivering packages hard goal In addition preferences state trajectory constraints imposing partial consistent ordering delivery packages constraints use storage areas trucks constraints imposing package loaded Plan quality measured sum weighted preference violations In general preferences concerning delivering packages deadlines highest weighted preferences load areas inside trucks important For instances domain exists plan satisﬁes preferences In example shown Fig 9 following preference forall p package t truck preference p1A forall truckarea imply p t closer a2 indicates desire package truck area nearer truck door loading area a2 example Fig 9 nearest area a1 On hand preferences preference p2A 120 delivered package1 l2 preference p2B 150 delivered package2 l2 express desire particular packages delivered 120 150 time units respectively In order satisfy second set preferences packages loaded truck previous preference violated Which option leads higher quality plan depends precise weights associated preferences 644 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 373 Trucks Propositional The Trucks Propositional domain differs TC version mainly time modelled discrete resource ﬁxed number levels Only actions driving trucks consume time encoding actions executed concurrently The deadlines package delivery mean instances domain tend deadend states states undelivered packages delivered time We observed causes enforced hillclimbing strategy FF fail problem instances 374 Trucks SimplePreferences QualitativePreferences The Trucks SimplePreferences domain basic structure propositional version soft hard deadlines For package hard goal deliver package sequence increasing soft deadlines increasing penalties violating similar Pipesworld CP domain For example suppose deadline delivering package1 3 The set preferences preference p1B exists t time delivered package1 l1 t lessorequal t t4 preference p2B exists t time delivered package1 l1 t lessorequal t t5 preference p3B exists t time delivered package1 l1 t lessorequal t t6 expresses increasing penalties late delivery package1 limit penalty units The plan metric domain number violated preferences delays difference required actual delivery time package minimised This encodes simpliﬁed form sum tardiness optimisation criterion frequently scheduling The QualitativePreferences domain version extends SP version additional preferences state trajectory straints similar CP version Violation preferences combined soft deadlines plan quality metric 4 Experimental analysis performance IPC5 planners In section brief presentation planners entered deterministic IPC5 experimen tally investigate performance We conducted extensive analysis data competition additional results obtained experiments The analysis main related aims comparing relative performance IPC5 planners studying effectiveness generally For ﬁrst aim analyse data competition different ways according domain categories involv ing different fragments pddl3 Propositional MetricTime SimplePreferences QualitativePreferences ComplexPreferences MetricTimeConstraints First consider overall problem solving success ratio number problems solved planner respect increasing CPUtime limit Then domain variant scatterplots showing general comparison planner wrt overall best performing planners benchmarks domains altogether The detailed plots results different domain available IPC5 website The planners compared terms CPU time required generating valid plan quality computed plan measured speciﬁed plan metric expression To better estimate signiﬁcance differences performance observed compared planners use statistical test Wilcoxon signrank test 6710 This test applies set paired observations sample larger population tells plausible assume correlation pairwise observed quantities In case paired observations runtimes planners problem instance correlation means equally likely planner solving problem faster opposite random sample problems The sample set problem instances IPC5 domain category Obviously instances IPC5 problem sets drawn uniformly random set problems corresponding domain domains element randomness problem generation process parameters example problem size selected systematically ﬁxed range However inaccurate problem sets random samples albeit drawn according unknown distribution likely draw problems consider reasonable interesting representative application problems11 In particular construction selection problems knowledge competing planners behave sample distribution 10 This test organisers IPC3 analyse results competition 50 11 For domains criteria selecting benchmark problems coded fullyautomated problem generation tools available IPC5 website AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 645 intentionally skewed favour disfavour planner The Wilcoxon test appropriate require know sample distribution makes assumptions distribution That way know priori hard planning problem distribution performance competing planners problems As consequence critical use nonparameterised test When statistical test indicates signiﬁcant difference means likely seen similar result taken different sample according distribution In context means ﬁnd planner A faster planner B domain category highly likely generate problems domain category following construction method selection criteria generating IPC5 problem set domains category planner A faster planner B problems For second general aim experimental investigation compare IPC5 planners best performing planners previous competition IPC4 Moreover selection benchmark problems compare quality solutions produced IPC5 planners respect corresponding optimal solutions obtain solutions b best suboptimal solutions obtained running planners enter IPC5 ad hoc methods c lower upper bounds quality optimal solutions Finally selection pddl3 domains involving preferences evaluate behaviour IPC5 planners preferences test problems All compared planners run machine The CPUtime limit 30 minutes process 1 Gbytes RAM allowed 41 The IPC5 planners Participating IPC5 optimal planners CPT2 FDP IPPLAN1SC MaxPlan MIPSBDD SATPLAN seven satisﬁcing planners Downward04sa IPPLANG1SC HPlanP MIPSBDD MIPSXXL SGPlan5 YochanPS Table 1 brieﬂy summarises capabilities competitors As seen SGPlan5 MIPSXXL plan ners supporting language features competition domains HPlanP MIPSBDD support soft goals trajectory constraints YochanPS soft goals durative actions CPT2 supports durative actions remaining competitors limited propositional subtrack The table shows plan quality measure optimised competitors Most optimal planners optimal wrt parallel plan length number steps FDP MIPSBDD optimise number actions plan CPT2 able optimise makespan problems durative actions reduces parallel length case plain propositional problems Among satisﬁcing planners try ﬁnd plans good quality according metric function speciﬁed problem deﬁnition aim minimise number actions plan consider plan quality focusing ﬁnding plan quickly For purpose evaluating plans planners propositional domains measure plan quality terms number actions domains satisﬁcing planners use criterion domains followed principle evaluating according problem metric In rest section brief descriptions competing planners More details short papers planners authors collected IPC5 booklet 13 Table 1 Summary capabilities columns 26 measures plan quality columns 78 planners participating IPC5 D means durative actions N numeric ﬂuents SG soft goals preferences atoms goal state C trajectory constraints SC soft trajectory constraints The plan quality measures indicated IPC5 teams planners Planner Planning Capability Optimal CPT2 FDP IPPLAN1SC MaxPlan MIPSBDD SATPLAN Satisﬁcing Downward04sa IPPLANG1SC HPlanP MIPSBDD MIPSXXL SGPlan5 YochanPS D N SG C SC Plan Quality Measure Propositional Others Steps Actions Steps Steps Actions Steps Actions Actions Actions Actions Actions Makespan Problem metric Problem metric Problem metric Problem metric Problem metric 646 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 CPT2 Vincent Vidal Sebastien Tabary CPT2 new version CPT planner participated IPC4 combines partialorder causallink branch ing scheme powerful pruning mechanism based constraint propagation The planner handles durative actions optimal wrt makespan In new version constraint formulation extended new pruning rules underlying CP engine replaced new eﬃcient implementation FDP Stephane Grandcolas Cyril PainBarre Like CPT2 FDP based CP mechanisms designed optimal sequential planning instead temporal plan ning FDP uses planning graphlike structure represent partial plans number ﬁltering rules remove inconsistent possibilities structure branching rule based deletionpreservation atom step compose problem By incrementally extending size plan structure FDP ensures plans ﬁnds optimal wrt number actions IPPLAN Menkes van den Briel Subbarao Kambhampati Thomas Vossen IPPLAN reformulates planning problem integer programming IP problem solves CPLEX solver combining extending ideas previous IP encodings It supports different IP formulations ensure optimality wrt parallel length plan dont Thus IPPLAN participated versions optimal IPPLAN1SC satisﬁcing planner IPPLANG1SC IPPLAN uses stripstosas translator component Fast Downward planner 40 convert problems pddl multivalued state variable representation MAXPLAN Zhao Xing Yixin Chen Weixiong Zhang MaxPlan similarly SATPLAN converts planning problem series propositional satisﬁability problems relies SAT solver answer Like SATPLAN MaxPlan ﬁnds plans optimal wrt parallel length However MaxPlan differs SATPLAN important respects The search shortest plan starts upper bound length works downward solution proven optimal encoding SAT incorporates information learned solving previous SAT problems additional mutex constraints The SAT solver modiﬁed advantage special structure SAT problems result encoding MIPSBDD Stefan Edelkamp MIPSBDD based symbolic exploration state space BDDs compactly represent sets states It handles pddl30 trajectory constraints compiled Büchi automata preferences In propositional problems ﬁnds plans minimal length optimal wrt number actions In problems preferences planner searches plans increasing length records best wrt problem metric plan far ensuring search space completely exhausted value current best plan optimal In competition problems preferences MIPSBDD outputs best plan available CPU time guarantee optimality SATPLAN Henry Kautz Bart Selman Jörg Hoffmann The 2006 version SATPLAN updated version SATbased planner participated IPC4 It optimal wrt parallel plan length The main differences previous version use different SAT encoding variables actions ﬂuents use limited mutex propagation planning graph forms basis encoding Downward04sa Malte Helmert Downward04sa identical Fast Downward planner participated IPC4 It translates pddl problem speciﬁcation multivalued state variable representation SAS searches plan heuristic derived causal graph constructed SAS representation The main improvement compared IPC4 version planner addition safe abstraction form problem simpliﬁcation allows planner solve certain kinds simple problems search MIPSXXL Stefan Edelkamp Shahid Jabbar Mohammed Nazih MIPSXXL uses combination heuristic search methods including extension MetricFFs search bestﬁrst search external memory disk The planner handles pddl30 trajectory constraints preferences compiling Büchi automata numerical ﬂuents respectively problems durative actions timed initial literals Similarly MIPSBDD planner optimal limit exploring complete state space competition conﬁgured output best plan available CPU time guarantee optimality SGPlan5 ChihWei Hsu Benjamin W Wah Ruoyun Huang Yixin Chen SGPlan5 new version SGPlan planner participated IPC4 Features new version include new heuristic similar causal graph heuristic Fast Downward planning subgoal level AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 647 extensions handle new features pddl30 Like planners problems preferences SGPlan5 employs strategy iteratively searching better plans ﬁrst plan Unlike competing planners trajectory constraints compiled away handled directly search HPlanP Jorge Baier Jeremy Hussell Fahiem Bacchus Sheila McIlraith HPlanP heuristic search planner problems preferences built TLPlan It handles subclass trajectory constraints compiling parameterised ﬁnite state automata The heuristic guiding search combines estimates cost reaching goals cost satisfying preferences different estimates ﬁnal plan metric value YochanPS J Benton Subbarao Kambhampati The YochanPS planner translates pddl30 problems preferences called net beneﬁt partial satisfaction prob lems solves SapaPS planner 23 The main difference problems expressed pddl30 net beneﬁt problems objective minimise penalty violated goal precondi tion preferences objective maximise utility achieved goals minimise cost actions plan SapaPS solves net beneﬁt planning problems heuristic search inadmissible heuristic based cost propagation planning graph 42 Summary main results Our experimental analysis contains results At general level derive following ing observations With respect relative performance optimal propositional IPC5 planners note 1 In terms number problems solved competition CPUtime limit considering entire propositional problem set MaxPlan SATPLAN perform similarly SATPLAN general better respect lower CPUtime limits signiﬁcantly better competing optimal planners However domain planners outperformed IPC5 planner With respect relative speed satisﬁcing IPC5 planners note 2 For domain category SGPlan5 performs signiﬁcantly better IPC5 planners terms CPU time number problems solved CPUtime limit 30 minutes With respect plan quality satisﬁcing IPC5 planners note 3 In propositional domain category SGPlan5 produces better quality plans compared planners IPPLANG1SC solves far fewer problems 4 In metrictemporal domain category YochanPS performs better compared planners solves far fewer problems SGPlan5 5 Across simple complex preferences domain categories respect plan quality SGPlan5 performs generally better IPC5 planners MIPSBDD simple preferences domain category solves far fewer problems For qualitative preferences category SGPlan5 performs better HPlanP similarly planners 6 In domains strong state trajectory constraints MIPSXXL slightly better SGPlan5 terms plan quality planners competing domain category However performance planners terms total number problems solved domain category poor Domains kind clearly present open challenge future research Finally concerning performance IPC5 planners general note 7 A comparison IPC5 optimal propositional planners winner propositional optimal track IPC4 2004 version SATPLAN shows 2006 version SATPLAN signiﬁcantly faster previous winner performance MaxPlan CPT2 similar IPC4 winner Moreover CPT2 optimal temporal planner IPC5 performs signiﬁcantly better winner optimal temporal track IPC4 CPT 8 A comparison SGPlan5 winners satisﬁcing propositional metrictemporal tracks IPC4 Fast Downward 40 SGPlan4 17 respectively shows SGPlan5 performs better respect CPU time plan quality 648 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 Table 2 Number solvedattempted benchmark problems propositional IPC5 domains success ratio CPT2 FDP IPPLAN1SC MaxPlan MIPSBDD SATPLAN Problems Solvedattempted Success ratio CPT2 53210 231 FDP 46240 191 IPPLAN1SC 23140 164 MaxPlan 84240 350 MIPSBDD 54240 225 SATPLAN 83210 395 Fig 10 Number problems solved IPC5 optimal planners respect increasing CPUtime limit logarithmic scale propositional domains 9 A study plan quality subset propositional domains problems shows solutions computed problems IPC5 satisﬁcing planners general good12 10 A study quality plans IPC5 satisﬁcing planners large subset metrictemporal domains indicates generally poor quality 11 A study quality plans IPC5 satisﬁcing planners subset problems preferences shows planners general signiﬁcantly better blind luck expected value plans disregarding preferences b planners ﬁnd plans poor quality compared known achievable 43 Relative performance optimal planners Since IPC5 optimal planners CPT2 FDP IPPLAN1SC MaxPlan MIPSBDD SATPLAN produce optimal quality solutions compare terms number solved problems CPU time13 Although planners optimal respect different measures number actions number parallel steps disregard difference treat equally All IPC5 optimal planners attempted seven propositional versions benchmark domains planner CPT2 attempted temporal version For reason focus analysis section propositional domains Number solved problems Table 2 shows number propositional benchmark problems attempted solved IPC5 optimal planners corresponding overall success ratio We consider problem nonattempted planner domain variant belongs attempted planner consider domain variant nonattempted planner contains problem solved planner CPUtime limit competition 30 minutes MaxPlan solves problems compared planner gap respect SATPLAN consists problem SATPLAN planner best success ratio compared In Fig 10 optimal planners compared terms number solved problems CPUtime limit ranging 10 milliseconds 30 minutes When CPUtime limit low half second CPT2 solves problems competitor CPUtime limits higher half second SATPLAN solves problems 12 The subset domains problems considered analysis analysis described items able compute optimal solutions lowerupper bounds optimal solutions 13 During evaluation competition results realised problems MaxPlan produced suboptimal solutions This probably implementation bug In evaluation IPC5 optimal planner problem known suboptimal solution considered unsolved AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 649 Fig 11 Performance optimal planners respect SATPLAN plots MaxPlan plots terms CPU time propositional domains In plots ﬁgure xaxis CPU milliseconds SATPLAN MaxPlan optimal planners highest considered CPU time MaxPlan solves problem SATPLAN planners solve problems compared planner Note number problems solved MaxPlan increases signiﬁcantly CPUtime limits near competition limit experimentally observed 30 additional CPU minutes planner solves additional problems CPUtime performance relative SATPLAN MAXPLAN In order compact graphical representation overall performance IPC5 planners use scatterplots comparing performance results pairs planners For analysing relative CPU time optimal planners satisﬁcing planners sections consider problems attempted compared planners solved The sets scatterplots Fig 11 compare SATPLAN plots ﬁgure MaxPlan plots respectively IPC5 optimal planners On xaxis performance reference planner SATPLAN MaxPlan yaxis performance compared planner For instance consider plot concerning performance CPT2 versus SATPLAN cross symbol indicates CPU time CPT2 solve particular test problem yvalue wrt time SATPLAN xvalue When cross appears main diagonal scatterplot CPT2 slower faster reference planner distance cross main diagonal indicates performance gap greater distance greater gap The scatterplots additional parallel lines dividing picture sectors A cross line labelled 1oF line labelled 1oS corresponds problem CPT2 order magnitude faster slower reference planner Similarly lines labelled 2oF 2oS 3oF 3oS identify sectors scatterplots corresponding problems compared planner respectively orders magnitude faster slower reference planner Crosses U yaxis correspond problems solved CPT2 unsolved reference planner crosses U value xaxis correspond problems solved reference planner unsolved CPT2 In general consistent analysis Fig 10 crosses unsolved value ycoordinate dense crosses unsolved value xcoordinate indicating reference planners solve problems compared planners In plots Fig 11 crosses main diagonal indicating SATPLAN generally faster compared planners The plots ﬁgure clear indication MaxPlan crosses diagonal The scatterplots Fig 11 general visual indication relative performance compared planners sidering test problems cases crosses corresponding different problems distinguished appear overlapped In order somewhat speciﬁc indication counted number crosses region plot For sake brevity omit numerical data available 33 useful present qualitative assessment compared planners based data According analysis respect FDP IPPLAN1SC MIPSBDD MaxPlan faster slower number problems 650 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 Fig 12 Partial order performance optimal IPC5 planners terms CPU time according Wilcoxon test propositional domains A solid arrow indicates planner performs better planner cluster planners conﬁdence level 999 dashed arrow indicates planner performs better conﬁdence level 971 faster greater number problems slower On hand CPT2 faster solves fewer problems MaxPlan Table 2 Statistical analysis Fig 12 shows results Wilcoxon signrank test comparing possible combination pairs optimal IPC5 planners We consider test problems attempted compared planners solved The data carrying Wilcoxon test derived follows For planning problem compute difference CPU times planners compared When planner solve problem corresponding CPU time twice competition CPUtime limit 60 minutes14 This deﬁnes samples test CPU time analysis The absolute values differences ranked increasing numbers starting lowest value The lowest value ranked 1 lowest value ranked 2 Then sum ranks positive differences sum ranks negative differences If performance compared planners signiﬁcantly different number positive differences approximately equal number negative differences sum ranks set positive differences approximately equal sum ranks set Intuitively test considers weighted sum number times planner performs better The sum weighted test uses performance gap assign rank performance difference The Wilcoxon test characterised probability value represents level signiﬁcance performance gap In analysis use default conﬁdence level equal 999 probabilityvalue greater 0001 refuse hypothesis performance compared planners statistically similar accept alterna tive hypothesis performance statistically different Otherwise statistically signiﬁcant evidence perform differently consider evidence perform pretty similarly For sake conciseness paper contains general description statistical results interested reader ﬁnd details 33 Fig 12 contains graphical summary Wilcoxon results relative performance optimal planners terms CPU time A solid arrow planner A planner cluster planners B indicates performance A statistically different performance planner B A performs better planner B A dashed arrow A B indicates A better planner B signiﬁcant number times signiﬁcant Wilcoxon relationship A planner B conﬁdence level equal 999 hand relationship hold conﬁdence level slightly 999 indicated statistical comparison analysis Fig 12 981 When arrow connecting clusters planners consider clusters planners having similar performance According results Wilcoxon test terms CPU time SATPLAN performs statistically better MaxPlan CPT2 FDP MIPSBDD IPPLAN1SC MaxPlan performs better FDP IPPLAN1SC MIPSBDD MaxPlan performs better CPT2 conﬁdence level equal 981 Note result inconsistent results scatterplot Fig 11 indicating CPT2 generally faster MaxPlan problems solved planners This Wilcoxon test consider problems unsolved compared planners twice CPUtime limit unsolved problem Hence number problems solved compared planners signiﬁcantly different like MaxPlan CPT2 Table 2 result Wilcoxon test different observations corresponding scatterplot In fact consider subset problems solved planners results Wilcoxon test CPT2 performs statistically better MaxPlan 14 This minimum value performance gap problem solved planner unsolved compared planner bigger performance gap problem solved compared planners An alternative choice 1 competition limit given importance planner ability solving problem CPUtime limit 2 considering problems solved planners cases signiﬁcantly reduced data performing statistical test AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 651 Table 3 Total number IPC5 benchmark problems column Probs number problems solvedattempted Downward04sa IPPLANG1SC MIPSBDD MIPSXXL SGPlan5 HPlanP YochanPS 3rd9th columns different domain versions names planners abbreviated P indicates propositional domains D domains durative actions N numeric ﬂuents SG soft goals C strong constraints state trajectories SC soft constraints state trajectories indicates corresponding domains attempted planner Category Probs Dow04sa P D N ND SG NSG DC NDC SC NDSC Total Success 240 130 40 130 110 20 50 50 100 108 978 180240 180240 750 IPPG 51240 51240 213 MIPSB 29110 1680 45190 237 MIPSX 68240 39130 840 23130 43110 620 850 6 50 1280 2288 235938 251 SGPlan5 217240 110130 4040 119130 110110 2020 2950 18 30 100100 105108 868958 906 HPlan 70100 70100 700 Yoch 75160 5880 1240 3490 2020 199390 510 44 Relative performance satisﬁcing planners We compare performance IPC5 satisﬁcing planners terms number solved problems CPU time plan quality Table 3 shows number problems solvedattempted compared planners different versions benchmark domains overall success ratio As previously noted planners support planning capabilities competition MIPSXXL SGPlan5 different performance In particular domain version SGPlan5 solves higher number problems satisﬁcing planner success ratio planner highest compared planners In rest section evaluate performance satisﬁcing planners different domain categories 441 Propositional domains Five IPC5 satisﬁcing planners attempted seven propositional versions benchmark domains Down ward04sa IPPLANG1SC MIPSXXL SGPlan5 YochanPS In section analyse relative performance planners Number solved problems Fig 13 shows number propositional benchmark problems solved IPC5 satisﬁcing planners creasing CPUtime limit ranges 10 milliseconds 30 minutes Regardless CPUtime limit SGPlan5 solves problems compared planners For CPUtime limits greater second Downward04sa solves problems IPPLANG1SC MIPSXXL YochanPS CPUlimits 10 100 seconds performs SGPlan5 CPU time plan quality relative SGPLAN5 Fig 14 gives compact representation overall performance IPC5 satisﬁcing planners wrt SGPlan5 terms CPU time plan quality propositional benchmark problems Concerning CPU time general SGPlan5 solves problem quickly compared planner performance gap order magnitude favour planner SGPlan5 faster IPPLANG1SC MIPSXXL Compared Downward04sa YochanPS problems SGPlan5 slower However number problems SGPlan5 faster higher number problems slower especially performance gaps larger order magnitude interested reader ﬁnd exact count 33 The plots Fig 14 compare performance IPC5 satisﬁcing planners propositional problems terms plan quality respect performance SGPlan5 For analysis following plan quality comparisons consider benchmark problems solved compared planners In plots cross main diagonal corresponds problem plan computed compared IPC5 planner worse better plan computed SGPlan5 problem The crosses diagonal labelled 2tW diagonal labelled 2tB correspond problems plans computed compared IPC5 planner times worse better ones computed SGPlan5 corresponding problems The plans computed SGPlan5 generally better computed Downward04sa crosses corresponding plot appear main diagonal However plan quality plots Fig 14 clear indication pairs compared planners The numerical data plot help better understand relative performance number problems SGPlan5 computes plans quality better plans generated MIPSXXL YochanPS crosses W 2tW sectors greater number problems 652 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 Fig 13 Number IPC5 propositional benchmark problems solved IPC5 satisﬁcing planners respect increasing CPUtime limit logarithmic scale Fig 14 Performance IPC5 satisﬁcing planners propositional domains wrt SGPlan5 terms CPU time plots plan quality plots propositional domains In plots ﬁgure xaxis CPU time number actions SGPlan5 yaxis CPU time number actions Downward04sa IPPLANG1SC MIPSXXL YochanPS respectively computes worse plans crosses B 2tB sectors On hand IPPLANG1SC produces better quality plans SGPlan5 Statistical analysis Like optimal planners use Wilcoxon test understand performance gaps IPC5 satisﬁcing planners signiﬁcant For planners test difference CPU time difference quality plans ﬁnd The test procedure plan quality essentially previously described Section 43 main differences First normalise difference dividing value better plan example value plan planner A 200 value plan planner B AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 653 Fig 15 Partial order performance IPC5 satisﬁcing planners terms CPU time plan quality according Wilcoxon test IPC5 propositional domains Dashed arrows indicate corresponding performance relationships hold conﬁdence level 979 220 difference 10 favour planner A objective minimise Second limit comparison set problems solved planners Both modiﬁcations stem cause magnitude value good plan vary greatly domains problems domain unlike CPU time measured scale problem This particularly acute pddl2 metrictemporal pddl30 problems For example Openstacks Time domain quality measured plan makespan values good plans ranging hundreds Openstacks MetricTime measure quality sum makespan cost good plans values thousands larger instances But happens propositional domains measure quality plan length For example longest plan instance Storage Propositional domain contains 80 actions Openstacks Propositional domain half instances minimal plan lengths greater containing 450 actions Since Wilcoxon test uses ranking differences values sample pair compared absolute plan quality values directly normalisation differences magnitude values domains result unintended bias small relative differences domain large values weighted important larger relative differences domain small values15 Normalisation helps avoid problem However fairly simple normalisation scheme apply perfect example account difference plan quality possible difference optimal worst possible plans subject variation domains Results interpreted light Fig 15 gives graphical summary Wilcoxon results relative performance IPC5 satisﬁcing plan ners benchmark propositional problems competition In terms CPU time SGPlan5 performs statistically better compared planner In terms plan quality IPPLANG1SC performs better Downward04sa YochanPS performs better MIPSXXL SGPlan5 conﬁdence level 979 442 Metrictemporal domains The IPC5 metrictemporal domain versions consist domains version TPP involving numerical ﬂuents action durations version Openstacks Storage Trucks Pipesworld involving action durations numerical ﬂuents versions TPP Openstacks Pathways Rovers involving action durations numerical ﬂuents The IPC5 satisﬁcing planners attempted benchmark problems domains MIPSXXL SGPlan5 YochanPS Number solved problems Fig 16 shows number metrictemporal benchmark problems solved IPC5 satisﬁcing planners CPU time limit ranging 10 milliseconds 30 minutes For CPUtime limit considered SGPlan5 solves problems compared planners terms solved problems performance MIPS XXL YochanPS similar Remarkably 30 minutes SGPlan5 solves 269 300 benchmark problems YochanPS MIPSXXL smaller percentage CPU time plan quality relative SGPLAN5 The scatterplots left Fig 17 compact graphical representation performance MIPSXXL YochanPS wrt SGPlan5 terms CPU time metrictemporal benchmark problems Since plot cross appears main diagonal plot easy SGPlan5 outperforms MIPSXXL YochanPS terms CPU time In scatterplots right Fig 17 comparing performance MIPSXXL YochanPS relative SGPlan5 terms plan quality crosses main diagonal As indicated numerical data plots count number crosses different sectors terms plan quality SGPlan5 best IPC5 satisﬁcing planner attempted metrictemporal problems The plans computed SGPlan5 better worse respect plans generated MIPSXXL However SGPlan5 plan times better corresponding MIPSXXL plan MIPSXXL computes 15 We observed happen inﬂuence results statistical tests large number cases 654 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 Fig 16 Number problems solved IPC5 satisﬁcing planners respect increasing CPUtime limit logarithmic scale metrictime domains Fig 17 Performance MIPSXXL YochanPS respect SGPlan5 terms CPU time left plots plan quality right plots metrictime domains In plots left right xaxis CPU time number actions SGPlan5 yaxis CPU time number actions MIPSXXL YochanPS plans signiﬁcantly better computed SGPlan5 Moreover terms plan quality YochanPS tends perform better SGPlan5 plans generated YochanPS better worse large number plans times better Interestingly YochanPS produces plans good quality compared planners known upper lower bounds problems Openstacks Time domain correspond crosses inside dashed region right scatterplot Fig 17 This pure makespan optimisation domain All planners use form postscheduling plans improve makespan appears schedulers SGPlan5 MIPSXXL produce poor results domain recovering partial order SGPlan5s MIPSXXLs plans rescheduling optimally simple critical path algorithm able improve makespan plans signiﬁcantly However rescheduled plans worse produced YochanPS indicating planner better job scheduling sequential plan ﬁnds better ﬁnding plans scheduled low makespan domain Statistical analysis The qualitative results Wilcoxon test comparing performance IPC5 satisﬁcing planners metric temporal benchmark problems given Fig 18 details available 33 This analysis conﬁrms performance gap SGPlan5 compared planners signiﬁcant terms CPU time favour SGPlan5 While terms plan quality YochanPS performs statistically better compared planners 443 Domains SimplePreferences The IPC5 SimplePreference domain category contains domains version TPP Openstacks Pathways Storage Trucks propositional version Rovers uses numeric ﬂuents effects simple manner encode action costs The IPC5 planners attempted category benchmark domains MIPSBDD MIPSXXL SGPlan5 YochanPS For problems computing AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 655 Fig 18 Partial order performance MIPSXXL SGPlan5 YochanPS terms CPU time plan metric value according Wilcoxon test IPC5 benchmark metrictemporal problems Fig 19 Number problems solved IPC5 satisﬁcing planners respect given CPUtime limit logarithmic scale IPC5 benchmark SimplePreferences problems valid plan simple 90 problems 130 soft goals plan solution On hand problems computing plan good quality trivial task Number solved problems Fig 19 shows number problems solved MIPSBDD MIPSXXL SGPlan5 YochanPS CPUtime limit ranging 10 milliseconds 30 minutes For CPUtime limit considered analysis SGPlan5 solves problems compared planners 30 CPU minutes solves problems For CPUtime limits 1 second 30 minutes YochanPS solves problems MIPSXXL MIPSBDD lower limits planners perform similarly16 Within highest CPUtime limit considered 30 minutes SGPlan5 solves 130 benchmark problems SimplePreferences domain versions number problems solved YochanPS MIPSXXL MIPSBDD lower This somewhat surprising plan valid plan 90 benchmark problems Note SGPlan5 computes plan YochanPS MIPSBDD ﬁve MIPSXXL CPU time plan quality relative SGPLAN5 Fig 20 gives representation overall performance MIPSBDD MIPSXXL YochanPS wrt SGPlan5 terms CPU time plan quality IPC5 benchmark problems SimplePreferences domain versions The distribution crosses plots ﬁgure shows SGPlan5 generally faster compared planners Moreover plots ﬁgure indicate SGPlan5 performs better MIPSXXL YochanPS terms plan quality However comparison plans generated SGPlan5 MIPSBDD clearly indicate planner performs better terms plan quality The number problems SGPlan5 computes plans better generated MIPSBDD slightly greater number problems computes worse plans problem SGPlan5 computes signiﬁcantly better plan Statistical analysis The results Wilcoxon test comparing performance IPC5 satisﬁcing planners benchmark Sim plePreferences problems Fig 21 conﬁrm general picture indicated previous analysis Fig 20 SGPlan5 performs 16 It worth noting MIPSXXL solves problems CPUtime limit near limit competition The reason fully clear think plan optimisation phase planner exploits entire available CPU time probably implementation bug terminates slightly competition CPUtime limit However analysis consider plans CPUtime limit IPC5 30 minutes dont data concerning plans produced compared planners additional CPU time 656 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 Fig 20 Performance MIPSBDD MIPSXXL YochanPS respect SGPlan5 terms CPU time plots plan quality plots IPC5 benchmark SimplePreferences problems In plots ﬁgure xaxis CPU time plan metric value SGPlan5 yaxis CPU time plan metric value MIPSBDD MIPSXXL YochanPS Fig 21 Partial order performance MIPSBDD MIPSXXL SGPlan5 YochanPS according Wilcoxon test IPC5 SimplePreferences problems A dashed arrow indicates performance relationship holds conﬁdence level 969 statistically better YochanPS MIPSXXL terms CPU time plan quality performs better MIPS BDD terms CPU time similarly MIPSBDD terms plan quality 444 Domains QualitativePreferences The results experimental comparison concern QualitativePreferences versions ﬁve benchmark domains TPP Openstacks Rovers Storage Trucks propositional domains extended soft state trajectory constraints soft goals Similar problems SimplePreferences versions benchmark domains problems qualitative preferences ﬁnding valid plan simple task particular 40 100 benchmark problems hard goal plan valid plan computing good quality plan diﬃcult The IPC5 planners supporting pddl3 qualitative preferences compare section MIPSBDD MIPSXXL HPlanP SGPlan5 Number solved problems Fig 22 shows number problems preferences action preconditions state trajectory constraints solved compared planners increasing CPUtime limit ranging 10 milliseconds 30 minutes Overall CPUtime limit considered SGPlan5 solves problems planners CPUtime limits higher 100 milliseconds HPlanP solves problems MIPSXXL MIPSBDD MIPSXXL MIPSBDD perform similarly It worth noting 5 CPU minutes SGPlan5 solves IPC5 benchmark problems producing plan By contrast small percentage plans generated planners Most plans computed TPP domain AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 657 Fig 22 Number problems solved IPC5 satisﬁcing planners respect increasing CPUtime limit logarithmic scale IPC5 problems QualitativePreferences domains CPU time plan quality relative SGPLAN5 Fig 23 shows performance HPlanP MIPSBDD MIPSXXL wrt SGPlan5 terms CPU time plan quality As indicated distribution crosses plots ﬁgure SGPlan5 faster MIPSBDD MIPSXXL faster HPlanP exception TPP problems observed HPlanP generates plans The distribution crosses plots ﬁgure shows SGPlan5 computes plans better worse wrt plans generated HPlanP MIPSBDD MIPSXXL It worth noting computed plans worse nonempty plans Statistical analysis Fig 24 shows results Wilcoxon test comparing performance IPC5 planners benchmark problems QualitativePreferences domain versions In terms CPU time required ﬁnding valid plan SGPlan5 performs statistically better compared planners In terms plan quality SGPlan5 performs statistically better HPlanP performs similarly MIPSBDD MIPSXXL 445 Domains ComplexPreferences The results experimental comparison concern ﬁve metrictemporal domains extended soft goals soft state trajectory constraints These ComplexPreferences versions domains TPP Pathways Pipesworld Storage Trucks Only planners attempted category benchmark problems SGPlan5 MIPSXXL Number solved problems Fig 25 shows number problems solved MIPSXXL SGPlan5 increasing CPUtime limit ranging 10 milliseconds 30 minutes For CPUtime limit considered SGPlan5 solves problems MIPS XXL SGPlan5 solves test problems large ones domain Pipesworld ComplexPreferences It worth noting problems solved plan goals soft compared planners generates plans CPU time plan quality direct comparison Fig 26 compares performance MIPSXXL SGPlan5 terms CPU time plan quality Since plot left ﬁgure crosses main diagonal easy SGPlan5 outperforms MIPSXXL terms CPU time In terms plan quality plot right ﬁgure SGPlan5 performs generally better MIPSXXL test problems performs signiﬁcantly worse Note classes test problems depending plan metric expression minimised crosses plot maximised circles plot For maximisation problems circles appear main diagonal means MIPSXXL performs worse SGPlan5 minimisation problems way Statistical analysis The results Wilcoxon test comparing performance MIPSXXL SGPlan5 IPC5 problems complex preferences indicate terms CPU time SGPlan5 performs statistically better MIPSXXL terms plan quality performs better conﬁdence level 981 658 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 Fig 23 Performance MIPSBDD MIPSXXL HPlanP wrt SGPlan5 terms CPU time plots plan quality plots IPC5 benchmark problems QualitativePreferences domains In plots ﬁgure xaxis CPU time plan metric value SGPlan5 yaxis CPU time plan metric value compared planners Fig 24 Partial order performance MIPSBDD MIPSXXL HPlanP SGPlan5 according results Wilcoxon test IPC5 benchmark problems QualitativePreferences domains The dashed arrow indicates performance relationship holds conﬁdence level 989 Fig 25 Number problems solved MIPSXXL SGPlan5 respect increasing CPUtime limit logarithmic scale IPC5 problems ComplexPreferences domains AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 659 Fig 26 Performance MIPSXXL SGPlan5 terms CPU time left plot plan quality right plot IPC5 problems ComplexPreferences domains In plot left right xaxis CPU time plan metric value SGPlan5 yaxis CPU time plan metric value MIPSXXL For plan quality case plan metric maximisation MIPSXXL performs worse SGPlan5 circles appear main diagonal plan metric minimisation problems performs worse crosses main diagonal Fig 27 Number problems solved MIPSXXL SGPlan5 respect increasing CPUtime limit logarithmic scale IPC5 benchmark domains strong plan trajectory constraints 446 Domains MetricTimeConstraints The IPC5 planners support category benchmark problems SGPlan5 MIPSXXL The sults experimental comparison concern MetricTimeConstraint version domains Pipesworld Trucks Storage TPP involving types strong state trajectory constraints Number solved problems Fig 27 shows number problems solved MIPSXXL SGPlan5 increasing CPUtime limit ranging 10 milliseconds 30 minutes For CPUtime limit considered SGPlan5 solves problems MIPS XXL 50 IPC5 problems domain category remain unsolved CPU time plan quality direct comparison Fig 28 shows performance MIPSXXL SGPlan5 terms CPU time plan quality IPC5 problems involving strong state trajectory constraints Since crosses plot left ﬁgure main diagonal SGPlan5 faster MIPSXXL However terms plan quality plot right ﬁgure shows MIPSXXL generates plans better similar corresponding plans computed SGPlan5 Statistical analysis According Wilcoxon test comparing CPU times SGPlan5 MIPSXXL IPC5 problems involving strong state trajectory constraints expected observing plot left Fig 28 SGPlan5 performs better MIPSXXL Concerning plan quality number problems planners compute solution low signiﬁcant statistical analysis results 660 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 Fig 28 Performance MIPSXXL respect SGPlan5 terms CPU time left plot plan quality right plot IPC5 problems strong state trajectory constraints In plot left right xaxis CPU time plan metric value SGPlan5 yaxis CPU time plan metric value MIPSXXL SATPLANipc4 vs 2oS 1oS CPT2 FDP IPPLAN1SC MIPSBDD MaxPlan SATPLAN 2 8 0 8 0 1 9 14 0 14 8 17 S 34 26 0 22 41 65 F 32 49 50 62 59 8 1oF 2oF 9 28 30 45 9 0 2 16 10 14 1 0 CPTipc4 vs 2oS 1oS CPT2 3 7 S 19 F 0 Fig 29 Numbers IPC5 test problems SATPLANipc4 CPTipc4 fasterslower IPC5 optimal propositional temporal planners The table columns distinguish number problems reference planner faster slower FScolumns minimum number problems order magnitude faster slower 1oFScolumns orders magnitude faster 2oFScolumns 45 How good performance IPC5 planners In previous section given comparative evaluation performance IPC5 planners section analyse CPU time plan quality respect winners previous competition b exact estimated lowerupper bounds distance optimal solutions IPC5 plans subset benchmark problems For separately analyse optimal planners satisﬁcing propositional planners satisﬁcing metrictemporal planners b separately analyse subset IPC5 plans pddl2 pddl3 problems 451 Performance relative IPC4winner optimal planner The optimal planners won IPC4 propositional track 2004 version SATPLAN 46 indicated SATPLANipc4 metrictime track CPT 66 indicated CPTipc4 The analysis section shows overall optimal planners won IPC5 improve performance optimal planners won IPC4 The tables Fig 29 compare CPU times SATPLANipc4 CPTipc4 CPU times IPC5 optimal planners IPC5 propositional temporal domains For analysis comparison best IPC4 satisﬁcing planners IPC5 satisﬁcing planners summarise result experiment counting number test problems IPC4 winner planner faster slower order magnitude faster slower orders magnitude faster slower compared IPC5 planner values lower bounds unsolved problems consider exceeded CPUtime limit lower bound actual solution time Bold data emphasise comparisons favour IPC5 planners Overall large number test problems IPC5 version SATPLAN faster IPC4 winner version faster new version problems Moreover test problems 2006 version SATPLAN order magnitude faster case IPC4 version On hand according analysis observe signiﬁcant improvement optimal propositional planners IPC5 The results Wilcoxon test comparing IPC4 version SATPLAN IPC5 optimal propositional planners indicate IPC5 planner performs statistically better SATPLANipc4 IPC5 version SATPLAN Concerning optimal metrictemporal planners plot right Fig 29 indicates CPT2 competing IPC5 planner category signiﬁcantly improves previous IPC4 awarded version CPT The result Wilcoxon test conﬁrms CPT2 statistically faster CPTipc4 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 661 Downwardipc4 vs 2oS 1oS S Downward04sa IPPLANG1SC MIPSXXL SGPlan5 YochanPS 0 0 0 26 0 1 4 2 114 0 83 14 39 165 16 F 51 164 139 54 113 1oF 2 144 111 13 59 2oF 1 111 85 0 35 Downwardipc4 vs 2tW W B 2tB Downward04sa IPPLANG1SC MIPSXXL SGPlan5 YochanPS 0 0 1 0 0 3 29 16 84 14 72 3 13 65 41 17 0 0 0 0 Fig 30 Minimum numbers IPC5 test problems Downwardipc04 performs betterworse IPC5 satisﬁcing propositional planners The table left concerns CPU time meanings column labels Fig 29 table right gives numbers problems Downwardipc4 produces better worse plans BWcolumns times better worse plans 2tBWcolumns SGPlanipc4 vs 2oS 1oS S MIPSXXL SGPlan5 YochanPS 0 48 0 0 70 4 1 132 7 F 128 39 61 1oF 2oF 111 8 53 85 2 14 SGPlanipc4 vs 2tW W MIPSXXL SGPlan5 YochanPS 2 19 36 50 113 50 B 7 1 2 2tB 0 0 0 Fig 31 Numbers IPC5 test problems SGPlanipc4 performs betterworse IPC5 satisﬁcing metrictemporal planners The table left concerns CPU time table right concerns plan quality The meanings column labels Figs 29 30 452 Performance relative IPC4winner satisﬁcing propositional planner The satisﬁcing planners won IPC4 propositional track Fast Downward 40 indicated Down wardipc4 metrictime track SGPlan4 17 indicated SGPlanipc4 The analysis section shows overall winner IPC5 satisﬁcing track improves performance satisﬁcing planners won IPC4 terms CPU time plan quality The tables Fig 30 summarise results experimental comparison performance Downwardipc4 IPC5 satisﬁcing propositional planners IPC5 propositional benchmarks Concerning CPU time SGPlan5 clearly outperforms Downwardipc4 problems In cases SGPlan5 order magnitude faster cases orders magnitude faster On hand cases Downwardipc4 faster IPC5 planners exception IPC5 version Downward04sa Concerning plan quality measured terms number actions plans generated problems solved compared planners planner performs generally better IPC4 winner As table right Fig 30 shows number test problems IPPLANG1SC MIPSXXL SGPlan5 compute better quality plans higher number problems produce worse quality plans On hand test problems Downward04sa YochanPS generate worse quality solutions wrt solutions IPC4 winner test problems produce better solutions The main results Wilcoxon test comparing performance Downwardipc4 IPC5 satisﬁcing planners propositional domains In terms CPU time planners perform statistically better IPC4 winner SGPlan5 Down ward04sa conﬁdence level 995 In terms plan quality SGPlan5 performs better IPC4 winner conﬁdence level 989 Downward04sa performs worse In terms plan quality planner statistically performs better conﬁdence level 999 IPC4 winner IPPLANG1SC seen Table 2 solves small percentage test problems 453 Performance relative IPC4winner satisﬁcing metrictemporal planner We analyse performance satisﬁcing IPC5 planners supporting metrictemporal domains respect SGPlanipc4 best IPC4 metrictemporal planner metrictemporal IPC5 domains Concerning plan generation speed indicated results table left hand Fig 31 SGPlan5 generally faster SGPlanipc4 problems orders magnitude faster On hand cases IPC5 planners considered analysis slower SGPlanipc4 Concerning plan quality interestingly observed compared IPC5 planners perform generally better SGPlanipc4 Finally results Wilcoxon test comparing performance MIPSXXL SGPlan5 YochanPS performance SGPlanipc4 conﬁrm observation derived Fig 31 SGPlan5 IPC5 satisﬁcing metric temporal planner statistically faster SGPlanipc4 terms plan quality IPC5 satisﬁcing metric temporal planner performs statistically better SGPlanipc4 454 Quality solutions PDDL2 problems In order evaluate good plan problem wrt speciﬁed plan metric ﬁrst need know plan metric value optimal plan problem In section compare plans generated IPC5 satisﬁcing 662 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 Fig 32 Plan quality distance solutions computed Downward04sa IPPLANG1SC MIPSXXL SGPlan5 YochanPS optimal plan metric value subset problems IPC5 propositional domain planners plans generated optimal IPC5 planners Obviously satisﬁcing planners solve problems optimal ones analysis subset solved problems considered To extend collection optimal plans wrt number actions propositional domains domainspeciﬁc solver obtain optimal solutions Openstacks propositional problems Since metrictime pddl2 domains number known optimal solutions limited category IPC5 benchmarks compare solutions generated IPC5 planners solutions approximate optimal ones Fig 32 summarises results analysis propositional IPC5 benchmarks know optimal lutions 28 Openstacks 4 Pathways 9 Pipesworld 7 Rovers 14 Storage 6 Trucks 8 TPP The measure plan quality plan length number actions Overall satisﬁc ing IPC5 planners tend perform exception Downward04sa overall worst behaviour terms distance optimal solution quality solutions examined 10 worse optimal plan length small percentage solutions quality 25 worse optimal plan length Interestingly examined plans computed IPPLANG1SC SGPlan5 optimal nearly optimal On hand observe small subset IPC5 benchmark problems considered analysis small instances solved IPC5 optimal planners The behaviour IPC5 satisﬁcing planners different larger instances A comparison solutions generated CPT2 IPC5 optimal temporal planner metrictemporal IPC5 satisﬁcing planners indicates contrary propositional case problems IPC5 satisﬁcing planners produce poor quality solutions Since CPT2 solves 21 temporal problems order general analysis Fig 33 shows evaluation IPC5 plans terms lower bounds distance optimal solution We computed lower bounds running version LPG described 34 CPU hours compared solutions IPC5 planners solutions computed LPG17 For IPC5 solution worse LPG solution distance qualities compared solutions provides lower bound distance optimal solution For evaluated planner analysis consider problems planner computes solution better generated LPG problems small percentage solved planners The analysis conﬁrms generated plans far optimal solutions 65 IPC5 metrictime benchmarks considered analysis solutions computed SGPlan5 MIPSXXL 50 worse optimal solutions distribution solutions lower bounds plan quality distance tends increase size bound The reason low plan qualities SGPlan5 completely clear believe mainly planner optimises plan quality certain particular conditions rarely occur considered test problems 44 During search SGPlan5 optimises makespan runs bestﬁrst search executed main method based enforced hillclimbing fails hillclimbing optimise plan quality If problem serially decomposed stages called subproblem level decomposition 17 SGPlan5 tries different orders stages 17 The CPUtime limit LPG higher competition analysis intended compare LPG IPC5 planners AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 663 Fig 33 Percentage IPC5 solutions satisﬁcing planners large subset problems IPC5 metrictime domain respect increasing lower bounds plan quality distance optimal solution multiple feasible plans different metric values If SGPlan5 employs subproblemlevel decomposition bestﬁrst search considers plan metric search 44 MIPSXXL attempts optimise plan metric search evidently implemented techniques effective 30 CPU minutes competition limit Finally planners schedule plan ac tions postprocessing algorithm techniques derive signiﬁcantly better plans We conjecture main reasons implemented postprocessing step perform optimal action rescheduling original plans allow good scheduling actions In order support ﬁrst conjecture ran simple scheduling al gorithm plans generated MIPSXXL SGPlan5 Openstacks Time benchmarks obtaining considerably better plans Concerning YochanPS planner attempts minimise number actions search performs post processing step improving scheduling Somewhat surprisingly strategy allows YochanPS perform slightly better MIPSXXL SGPlan5 fewer plans having poor quality uniform distribution solutions plan quality distance bounds 455 Quality solutions PDDL3 problems In section study quality solutions computed satisﬁcing IPC5 planners problems involving preferences The main observation derive results analysis cases IPC5 planners produce good quality solutions large number problems solution far optimal In following analyse IPC5 solution plans respect best known solutions optimal solutions worst plan metric values lowerupper bound optimal solutions For minimisation maximisation problem lower bound plan metric value better worse optimal value upper bound plan metric value worse better optimal value Pipesworld ComplexPreferences IPC5 domain encoding maximisation problem The deﬁnition worst plan metric depends speciﬁc domain We derived upper bound values solutions obtained easily meaning sideeffect construction problem instances domainspeciﬁc polynomial procedure Optimal solutions best known solutions lower bounds obtained variety ways domainspeciﬁc methods general planning techniques large CPU time For detailed description 38 We consider domains involving soft goals domains preferences state trajectory constraints Fig 34 shows evaluation plans computed IPC5 planners Openstacks Rovers soft goals In general plans Openstacks SimplePreferences generated SGPlan5 MIPSXXL low qualities The solutions com puted MIPSXXL close worst plans order magnitude worse optimal solutions plans computed SGPlan5 better signiﬁcantly distant optimal plans In domain preference violated exactly worst plan quality sum penalties preferences plan metric The problems Rovers MetricSimplePreferences form groups Fig 34 denoted synergistic interfering mixed differ certain properties penalties associated soft goals Section 3 In domain worst possible solution quality inﬁnity However plan valid plan instance domain consider baseline Almost plan computed IPC5 planners quality better plan The planners behave generally better SGPlan5 YochanPS For problems synergistic group 664 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 Fig 34 Plan quality evaluation MIPSBDD MIPSXXL YochanPS SGPlan5 Openstacks SimplePreferences Rovers MetricSimplePreferences On xaxis problem names simpliﬁed numbers yaxis plan metric value log scale lower better Fig 35 Plan quality evaluation HPlanP MIPSXXL SGPlan5 Rovers QualitativePreferences Pipesworld ComplexPreferences On x axis problem names simpliﬁed numbers On yaxis plan metric value log scale plot left lower better plot right higher better generally compute good quality plans problems interfering group quality plans close quality plan ﬁnally problems mixed group cases SGPlan5 YochanPS compute plans terms plan quality closer optimal solution plan Fig 35 shows evaluation plans computed IPC5 planners domains Rovers Pipesworld preferences state trajectory constraints Concerning Rovers QualitativePreferences problems hard goals baseline analysing plan quality plans generated FF 43 solving problems domain modiﬁed omitting preferences The distances qualities best known solutions plan quality lower bounds identify intervals containing plan metric values unknown optimal solutions Shaded areas indicate problems qualities IPC5 plans close 30 worse qualities corresponding best known solutions b far 30 greater lower bounds cases results experiment informative For considered problems plan quality FF times worse optimal plan quality The worst plan quality given sum preference weights plan metric Interestingly plans computed SGPlan5 HPlanP better computed FF good plans qualities roughly middle quality plan computed FF optimal plan quality The problems Pipesworld ComplexPreferences require satisfaction problem preferences maximised instead violation minimised The plans violating problem preference worst solutions quality zero The lowerupper plan quality bounds identify intervals containing plan metric values unknown optimal solutions Shaded areas indicate problems IPC5 plan qualities far 30 lower corresponding upper bounds b close 30 lower lower bounds cases results experiment informative The planner best behaviour SGPlan5 generates good AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 665 Table 4 Percentages problems solutions computed IPC5 planners worsebetter solutions generated planners problems preferences planmetric times worse column 100W 33 worse column 33W worse column W better column B 33 better column33B times better column 100B Column Probs indicates planner domain category number test problems considered analysis The shaded value indicates case percentage better solutions smaller percentage worse solutions Planner Domain category Probs 100W 33W Worse Better 33B 100B HPlanP QualitativePreferences MIPSXXL SimplePreferences QualitativePreferences ComplexPreferences MIPSBDD SimplePreferences QualitativePreferences SGPlan5 SimplePreferences QualitativePreferences ComplexPreferences YochanPS SimplePreferences 70 49 12 22 29 16 117 85 105 54 0 0 0 40 0 0 0 0 50 10 0 20 0 90 0 0 0 0 110 30 142 20 0 591 0 0 085 117 152 130 750 790 330 360 820 680 970 980 740 790 370 260 330 310 480 500 710 950 530 440 210 180 330 180 440 370 420 770 290 290 quality plans small problems However mediumsize problems computes plans qualities roughly middle worst optimal ones 456 Behaviour IPC5 planners benchmark problems preferences Since valid plan pddl3 problem preferences speciﬁed plan metric necessarily satisﬁed planner simply ignores accidentally produce plan satisfying possibly obtaining goodquality plan In order general experimental evaluation effectiveness methods im plemented IPC5 planners deal preferences conducted following experiment We ran IPC5 planners supporting pddl30 preferences IPC5 benchmarks modiﬁed removing preferences compared quality plans modiﬁed problems plans corresponding original problems containing prefer ences In case modiﬁed test problem contains classical goals tested planner plan The results experimental analysis given Table 4 If consider problems hard goals similar results obtained In cases techniques dealing preferences implemented tested planners allow planners derive plans better qualities Remarkably SGPlan5 achieves highest improvements relative solutions generated considering preferences best results problems involving soft qualitative statetrajectory constraints called qualitative preferences 77 solutions 2 times better solutions generated problems preferences omitted On hand tested planner MIPSBDD problems ignoring preferences leads better quality plans 5 Conclusions Planning tackling increasingly diﬃcult problems greater success recent years An objective community focus research solution problems increasing relevance application In application areas quality plans central usefulness In IPC5 differently previous IPCs plan quality important planning language evaluation competing planners In paper presented new version pddl pddl3 designed deterministic IPC5 pddl3 includes new features allow user specify plan quality terms constraints trajectories terms preferences constraints goals Although concepts constraints hard soft new planning adoption common language basis benchmarks plays central role promoting research areas In order new language accessible IPC5 participants restricted version pddl3 pddl30 competition Several new planners supporting new features pddl30 entered competition Some methods compiling state trajectory constraints preferences recently developed particular competing teams IPC5 25 schemes designed purpose studying language theoretical expressiveness Although detailed study expressiveness pddl3 outside goals paper given new basic results compilability pddl30 state trajectory constraints preferences pddl30 pddl3 extended ways An interesting possibility use alterna tive way deﬁne importance preferences based qualitative priorities numerical weights 666 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 outlined 31 However current version pddl powerful language As demonstrated results IPC5 previous competitions current planners capable dealing features pddl fully satisfactory Another contribution work development large collection new benchmark domains problems speciﬁed pddl30 pddl2 presented paper The new benchmark domains derived variety sources inspired potential applications planning technology encodings benchmark problems areas science operations research created explicit purpose trying new language features offered pddl3 In line aim emphasise plan quality evaluation competing planners IPC5 domains encode optimisation problems signiﬁcantly easier ﬁnd plan satisﬁes hard goals constraints problem instance true diﬃculty lies ﬁnding plan high quality For reason problem instances designed carefully example admit solutions signiﬁcantly different qualities require planner ﬁnd good compromise different possibly conﬂicting terms objective function Although domains problems developed previous IPCs 4150 equipped plan metric function emphasis optimisation emphasis split time plan quality plan way left unclear aspect intended matter Finally presented results large experimental investigation includes detailed analysis data deterministic IPC5 additional experiments conducted better understand effectiveness compared planners The main conclusions draw investigation The detailed analysis conﬁrms SATPLAN MaxPlan best terms ability solve problems quickly propositional optimal planners participating IPC5 consistent preliminary informal evalu ation planners conducted competition However shows SATPLAN generally faster MaxPlan Likewise analysis conﬁrms overall SGPlan5 best satisﬁcing IPC5 planner The 2006 version SATPLAN CPT2 SGPlan5 offers signiﬁcant improvement performance winner corresponding track previous competition In sense advance state art fully automated planning systems An analysis quality plans generated satisﬁcing IPC5 planners subset benchmark problems shows propositional problems tend ﬁnd good solutions measured number actions metrictemporal problems problems preferences quality solutions ﬁnd generally far best known achievable An analysis behaviour IPC5 planners supporting pddl30 preferences shows techniques use deal preferences useful sense ﬁnd plans quality better expected blind luck completely disregarding preferences solving problems Overall observed clear advancement stateoftheart optimal propositional planning satisﬁcing planning terms CPU time plan quality support features language ﬁnding high quality plans metrictemporal domains domains preferences remains important open issue deserving research effort Moreover benchmark problems hard state trajectory constraints unsolved suggesting considerable need improved techniques dealing Acknowledgements We like thank anonymous reviewers useful comments The organisers IPC5 Yannis Dimopoulos Alfonso E Gerevini Patrik Haslum Alessandro Saetti like thank participants IPC5 consulting committee deterministic track IPC5 Alfonso E Gerevini Derek Long like thank Carmel Domshlak Stefan Edelkamp Maria Fox Joerg Hoffmann Ari K Jonsson Drew McDermott Len Schubert Ivan Serina David E Smith Daniel S Weld useful discussions pddl3 NICTA funded Australian Government represented Department Broadband Communications Digital Economy Australian Research Council ICT Centre Excellence program Supplementary material The online version article contains additional supplementary material Please visit DOI 101016jartint200810012 References 1 F Bacchus The AIPS 00 planning competition AI Magazine 22 3 2001 4756 2 F Bacchus F Kabanza Planning temporally extended goals Annals Mathematics Artiﬁcial Intelligence 22 12 1998 527 3 F Bacchus F Kabanza Using temporal logics express search control knowledge planning Artiﬁcial Intelligence 116 2000 123191 4 C Bäckström Expressive equivalence planning formalisms Artiﬁcial Intelligence 76 1995 1734 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 667 5 J Baier S McIlraith Planning ﬁrstorder temporally extended goals heuristic search Proc 21st National Conf Artiﬁcial Intelligence AAAI06 2006 6 J Baier S McIlraith Planning temporally extended goals heuristic search Proc 16th Int Conf Automated Planning Scheduling ICAPS06 2006 7 J Benton S Kambhampati YochanPS PDDL3 simple preferences partial satisfaction planning 5th Int Planning Competition Booklet 2006 8 J Benton M van den Briel S Kambhampati A hybrid linear programming relaxed plan heuristic partial satisfaction planning problems Proc 17th Int Conf Automated Planning Scheduling ICAPS07 2007 9 S Bistarelli U Montanari F Rossi Semiringbased constraint solving optimization Journal ACM 1997 10 A Blum ML Furst Fast planning planning graph analysis Artiﬁcial Intelligence 90 1997 281300 11 B Bonet H Geffner Planning heuristic search Artiﬁcial Intelligence 129 12 2001 533 12 B Bonet H Geffner Heuristics planning penalties rewards compiled knowledge Proc 10th Int Conf Knowledge Repre sentation KR06 2006 13 B Bonet AE Gerevini R Givan Abstract booklet Fifth Int Planning Competition httpipc5ingunibsit 2006 14 R Brafman Y Chernyavsky Planning goal preferences constraints Proc 15th Int Conf Automated Planning Scheduling ICAPS05 2005 15 M Briel R Sanchez M Do S Kambhampati Effective approaches partial satisfaction oversubscription planning Proc 19th National Conf Artiﬁcial Intelligence AAAI04 2004 16 N Chabrier httpcontraintesinriafrBIOCHAMEXAMPLEScell_cyclecell_cyclebc 2003 17 Y Chen BW Wah C Hsu Temporal planning subgoal partitioning resolution SGPlan Journal Artiﬁcial Intelligence Research 26 2006 323369 18 EM Clarke EA Emerson AP Sistla Automatic veriﬁcation ﬁnitestate concurrent systems temporal logic speciﬁcations ACM Transactions Programming Languages Systems 8 2 1986 244263 19 EM Clarke O Grumberg D Peled Model Checking MIT Press 1999 20 S Cresswell A Coddington Compilation LTL goal formulas PDDL Proc 15th European Conf Artiﬁcial Intelligence ECAI04 2004 21 PJ Delgrande T Schaub H Tompits A general framework expressing preferences causal reasoning planning Proc 7th Int Symposium Logical Formalizations Commonsense Reasoning 2005 22 M Do J Benton M van den Briel S Kambhampati Planning goal utility dependencies Proc 20th Int Conf Artiﬁcial Intelligence IJCAI07 2007 23 MB Do S Kambhampati Partial satisfaction oversubscription planning heuristic search Proc 5th Int Conf Knowledge Based Computer Systems KBCS04 2004 24 D Dubois H Fargier H Prade Possibility theory constraint satisfaction problems Handling priority preference uncertainty Applied Intelli gence 6 1996 287309 25 S Edelkamp On compilation plan constraints preferences Proc 16th Int Conf Automated Planning Scheduling ICAPS06 2006 26 S Edelkamp J Hoffmann PDDL22 The language classic 4th International Planning Competition Technical Report 195 Institut für Informatik Freiburg Germany 2004 27 A Fink S Voss Applications modern heuristic search methods pattern sequencing problems Computers Operations Research 26 1999 1734 28 M Fox D Long K Halsey An investigation expressive power PDDL21 Proc 16th European Conf Artiﬁcial Intelligence ECAI04 2004 29 M Fox D Long PDDL21 An extension PDDL expressing temporal planning domains Journal Artiﬁcial Intelligence Research 20 2003 61124 30 H Geffner P Haslum M Helmert J Hoffmann V Vidal B Bonet C Domshlak Proceedings ICAPS07 Workshop Heuristics Domain independent Planning Progress Ideas Limitations Challenges 17th Int Conf Automated Planning Scheduling ICAPS07 2007 31 A Gerevini D Long Plan constraints preferences PDDL3 Technical Report RT20050847 Dipartimento di Elettronica lAutomazione Uni versitá di Brescia 2005 32 A Gerevini D Long Preferences soft constraints PDDL3 Proc ICAPS2006 Workshop Preferences Soft Constraints Planning 2006 33 A Gerevini A Saetti P Haslum D Long Y Dimopoulos Deterministic planning ﬁfth planning competition PDDL3 experimental evaluation planners Technical Report RT20080259 Dipartimento di Elettronica lAutomazione Universitá di Brescia 2008 34 A Gerevini A Saetti I Serina An approach eﬃcient planning numerical ﬂuents multicriteria plan quality Artiﬁcial Intelligence 172 89 2008 899944 35 R Gerth D Peled M Vardi P Wolper Simple ontheﬂy automatic veriﬁcation linear temporal logic Proc 15th Workshop Protocol Speciﬁcation Testing Veriﬁcation 1995 36 M Ghallab A Howe C Knoblock D McDermott A Ram M Veloso D Weld D Wilkins PDDL planning domain deﬁnition language Technical Report CVC TR98003DCS TR1165 Yale Center Computational Vision Control 1998 37 E Giunchiglia M Maratea Planning satisﬁability preferences Proc 22nd Conf Artiﬁcial Intelligence AAAI07 2007 38 P Haslum Quality solutions IPC5 benchmark problems Preliminary results Proc ICAPS07 Workshop Int Planning Competition Past Present Future 2007 39 P Haslum P Jonsson Some results complexity planning incomplete information Proc 5th European Conf Planning ECP99 1999 40 M Helmert The fast downward planning Journal Artiﬁcial Intelligence Research 26 2006 191246 41 J Hoffmann S Edelkamp The deterministic IPC4 An overview Journal Artiﬁcial Intelligence Research 24 2005 519579 42 J Hoffmann S Edelkamp S Thiébaux R Englert F Liporace S Trüg Engineering benchmarks planning The domains deterministic IPC4 Journal Artiﬁcial Intelligence Research 26 2006 453541 43 J Hoffmann B Nebel The FF planning Fast plan generation heuristic search Journal Artiﬁcial Intelligence Research 14 2001 253302 44 C Hsu BW Wah Y Chen Personal communication October 2007 45 F Kabanza S Thiébaux Search control planning temporally extended goals Proc 15th Int Conf Automated Planning Scheduling ICAPS05 2005 46 H Kautz SATPLAN04 Planning satisﬁability 4th Int Planning Competition Booklet 2004 47 K Kohn Molecular interaction map mammalian cell cycle control DNA repair systems Molecular Biology Cell 10 8 1999 48 J Kvarnström P Doherty TALplanner A temporal logic based forward chaining planner Annals Mathematics Artiﬁcial Intelligence 30 14 2000 119169 49 A Linhares HH Yanasse Connection cuttingpattern sequencing VLSI design ﬂexible machines Computers Operations Research 29 2002 17591772 668 AE Gerevini et al Artiﬁcial Intelligence 173 2009 619668 50 D Long M Fox The 3rd international planning competition Results analysis Journal Artiﬁcial Intelligence Research 20 2003 159 51 D Long H Kautz B Selman B Bonet H Geffner J Koehler M Brenner J Hoffmann F Rittinger C Anderson D Weld D Smith M Fox The AIPS98 planning competition AI Magazine 21 2 2000 1333 52 Z Manna A Pnueli The Temporal Logic Reactive AND Concurrent Systems Springer 1992 53 I Miguel P Jarvis Q Shen Eﬃcient ﬂexible planning dynamic ﬂexible constraint satisfaction Engineering Applications Artiﬁcial Intelli gence 14 3 2001 301327 54 B Nebel On compilability expressive power propositional planning formalisms Journal Artiﬁcial Intelligence Research 12 2000 271315 55 JS Penberthy Planning continuous change PhD thesis University Washington 1993 Available technical report UWCSE931201 56 A Pnueli The temporal logic programs Proc 18th IEEE Symposium Foundations Computer Science 1977 57 J RieraLedesma JJ SalazarGonzalez A heuristic approach travelling purchaser problem European Journal Operational Research 160 3 2005 599613 58 J Rintanen Incorporation temporal logic control plan operators Proc 14th European Conf Artiﬁcial Intelligence ECAI00 2000 59 J Rintanen Complexity concurrent temporal planning Proc 17th Int Conf Automated Planning Scheduling 2007 60 F Rossi KB Venable N YorkeSmith Controllability soft temporal constraint problems Proc 10th Int Conf Principles Practice Constraint Programming CP04 2004 61 BM Smith IP Gent Constraint modelling challenge 2005 httpwwwdcsstandacukipgchallenge 2005 62 D Smith Choosing objectives oversubscription planning Proc 14th Int Conf Automated Planning Scheduling ICAPS04 2004 63 TC Son E Pontelli Planning preferences logic programming Proc 7th Int Conf Logic Programming Nonmonotonic Reasoning LPNMR04 2004 64 P Thagard Pathways biomedical discovery Philosophy Science 70 2003 65 S Thiébaux J Hoffmann B Nebel In defense PDDL axioms Artiﬁcial Intelligence 168 2005 3869 66 V Vidal H Geffner Branching pruning An optimal temporal POCL planner based constraint programming Artiﬁcial Intelligence 170 3 2006 298335 67 F Wilcoxon RA Wilcox Some Rapid Approximate Statistical Procedures Lederle Laboratories Pearl River New York USA 1964