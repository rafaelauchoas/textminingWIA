Artiﬁcial Intelligence 171 2007 776804 wwwelseviercomlocateartint An executable speciﬁcation formal argumentation protocol Alexander Artikis Marek Sergot b Jeremy Pitt c Institute Informatics Telecommunications NCSR Demokritos Athens 15310 Greece b Department Computing Imperial College London SW7 2AZ UK c Department Electrical Electronic Engineering Imperial College London SW7 2BT UK Received 8 November 2006 received revised form 3 April 2007 accepted 16 April 2007 Available online 29 April 2007 Abstract We present speciﬁcation action language C Brewkas reconstruction theory formal disputation originally proposed Rescher The focus procedural aspects adequacy particular protocol conduct debate resolution disputes The speciﬁcation structured separate levels covering physical capabilities participant agents ii rules deﬁning protocol specifying actions proper timely according protocol effects protocol state iii permissions prohibitions obligations agents sanctions enforcement strategies deal noncompliance Also included mechanism agent object action participant optional silence implies consent principle Although comparatively simple Brewkas protocol representative wide range complex argumentation dispute resolution procedures proposed Finally Causal Calculator implementation C animate speciﬁcation investigate verify properties protocol 2007 Elsevier BV All rights reserved Keywords Argumentation Disputation Protocol Norm Multiagent Speciﬁcation Action language 1 Introduction One main tasks formal speciﬁcation analysis open multiagent systems MAS represen tation protocols procedures agent interactions norms behaviour govern interactions Examples include protocols exchanging information negotiation resolving disputes It argued speciﬁcation systems type satisfy following requirements ﬁrst interactions members governed formal declarative veriﬁable meaningful seman tics 64 second cater possibility agent behaviour deviate prescribed agent interactions usefully described terms permissions obligations 26 We developing theoretical framework executable speciﬁcation open agent systems addresses aforementioned requirements 35 We adopt perspective external observer taking account externally observable behaviours internal architectures individual agents view Corresponding author Email addresses aartikisacmorg A Artikis mjsdocicacuk M Sergot jpittimperialacuk J Pitt 00043702 matter 2007 Elsevier BV All rights reserved doi101016jartint200704008 A Artikis et al Artiﬁcial Intelligence 171 2007 776804 777 agent systems instances normative systems 26 constraints agents behaviour social constraints speciﬁed terms permissions institutional power effect changes bring certain states affairs rights obligations We employ action formalism specify social constraints governing behaviour members use computational framework animate speciﬁcation investigate properties For action formalism employed Event Calculus 29 action language C 22 extended form C speciﬁcally designed modelling institutional aspects agent systems 5759 In paper demonstrate theoretical computational frameworks language C specify execute argumentation protocol based Brewkas reconstruction 8 Situation Calculus 52 theory formal disputation originally proposed Rescher 53 We presented preliminary formulation earlier paper 4 This present paper reﬁned extended version We focusing procedural aspects protocol underlying logic disputation employed Brewka adequacy particular protocol conduct debate resolution disputes The features Brewkas protocol representative wide range complex argumentation dispute resolution procedures proposed literature methods paper similarly applied The speciﬁcation argumentation protocol structured separate levels covering physical capabilities participant agents present context messagesutterances agent actually capable transmitting ii rules deﬁning protocol specifying actions proper timely according protocol effects protocol state iii permissions prohibitions obligations agents sanctions enforcement strategies deal noncompliance In given implementation protocol permitted agent perform action proper timely conversely protocol actions proper timely permitted certain circumstances instance lead protocol runs undesirable properties The rules comprising level ii speciﬁcation correspond constitutive norms deﬁne meaning protocol actions Levels iii respectively seen representing physical normative environment protocol executed We concerned concept social role Brieﬂy role associated set role preconditions agents satisfy order eligible occupy role set role constraints govern behaviour agents occupy role We discuss role assignment paper For example paper assume simplicity participant agents assigned certain roles roles change execution protocol A note terminology In earlier version paper 4 treatment examples deﬁned protocol specifying conditions action said valid according protocol Here employed ﬁner structure classifying valid actions proper timely line suggestions Prakken et al 4549 A valid action earlier terminology proper timely Other terminology common use employs term successful valid distinguishes action utterance transmission message certain form attempt claim conditions attempt claim successful effective We prefer avoid term successful unsuccessful attempt effects protocol state We avoid use term legal valid successful ambiguous refers constitutive element protocol level ii speciﬁcation normative environment protocol executed level iii Also related concept institutional institutionalised power competence capacity This refers characteristic feature institutionslegal systems formal organisations informal groupingswhereby designated agents acting speciﬁc roles empowered create modify facts special signiﬁcance institutioninstitutional facts terminology Searle 56 See 2735 discussion references literature Thus present example natural certain circumstances agent acting certain role power competence capacity declare dispute resolved favour protagonists certain circumstances agent power 778 A Artikis et al Artiﬁcial Intelligence 171 2007 776804 object action participants generally argumentation protocol deﬁnes conditions agent power perform argumentation actions We refer explicitly power speciﬁcation argumentation protocol presented The classiﬁcation actions proper timely provides detailed speciﬁcation In paper use language C formulate speciﬁcation An advantage C compared action formalisms given explicit semantics terms transition systems This enables analyse prove properties protocol The concluding sections paper present illustrative examples The paper structured follows First brieﬂy C language Second present Causal Cal culator software implementation computational framework executing speciﬁcations formalised C Third summarise Brewkas reconstruction Reschers theory formal disputation Fourth specify prove properties execute form Brewkas argumentation protocol use C Causal Calculator Finally discuss related research summarise presented work point directions investigations 2 The C language C mentioned action language explicit transition systems semantics We version C presented 22 21 Basic deﬁnitions A multivalued propositional signature set σ symbols called constants constant c σ non ﬁnite set domc symbols disjoint σ called domain c For simplicity presentation assume domain contains elements An atom signature σ expression form c u c σ u domc A Boolean constant domain set truth values t f When c Boolean constant write c c t c c f A formula ϕ signature σ propositional combination atoms σ An interpretation I σ function maps constant σ element domain An interpretation I satisﬁes atom c u I c u The satisfaction relation extended atoms formulas according standard truth tables propositional connectives A model set X formulas signature σ interpretation σ satisﬁes formulas X If model set X formulas satisﬁes formula ϕ X entails ϕ written X ϕ 22 Syntax The representation action domain C consists ﬂuent constants action constants Fluent constants symbols characterising state They divided categories simple ﬂuent constants statically determined ﬂuent constants Simple ﬂuent constants related actions dynamic laws laws describing transition si εi si1 state si successor state si1 Statically determined ﬂuent constants characterised static laws laws describing individual state relating ﬂuent constants Static laws express constraints simple ﬂuent constants Static dynamic laws deﬁned Action constants symbols characterising state transitions In transition si εi si1 transition label εi called event represents occurrence actions performed concurrently agents occurring environment Transitions nondeterministic Action constants actions attributes actions properties transitions An action signature σ f σ nonempty set σ f ﬂuent constants nonempty set σ action constants An action description D C nonempty set causal laws deﬁne transition particular type A causal law static law dynamic law A static law expression caused F G 1 A Artikis et al Artiﬁcial Intelligence 171 2007 776804 779 F G formulas ﬂuent constants In static law constants F G evaluated state A dynamic law expression caused F G H 2 F G H formulas constant occurring F simple ﬂuent constant constant occurring G ﬂuent constant H combination ﬂuent constants action constants In transition state si state si1 constants F G evaluated si1 ﬂuent constants H evaluated si action constants H evaluated transition F called head static law 1 dynamic law 2 The C language provides action dynamic laws expressions form caused α H α formula containing action constants H formula action ﬂuent constants We use action dynamic laws paper omit details interests brevity The C language provides abbreviations common forms causal laws For example dynamic law form caused F cid4 H α α formula action constants abbreviated α causes F H In case H cid4 usually written α causes F When presenting argumentation protocol speciﬁcation employ causes abbreviation express effects agents actions We employ C abbreviation default F shorthand static law caused F F expressing F holds absence information contrary When aids readability write F iff G shorthand pair static laws caused F G default F Two abbreviations employ nonexecutable inertial dynamic law form caused cid4 α H α formula containing action constants H formula containing ﬂuent constants abbrevi ated nonexecutable α H In case H cid4 written nonexecutable α The inertia ﬂuent constant c time represented inertial c This abbreviation set dynamic laws form values u domc caused c u c u c u A C action description nonempty set causal laws Of particular subclass deﬁnite action descriptions A C action description D deﬁnite 780 A Artikis et al Artiﬁcial Intelligence 171 2007 776804 head causal law D atom atom head inﬁnitely causal laws D The C action description paper deﬁnite 23 Semantics It possible space available account C language semantics We trust C language especially abbreviations sufﬁciently natural readers follow presentation case study later sections Interested readers referred 2223 technical details For completeness summarise semantics deﬁnite action descriptions ignoring presence action dynamic laws assuming domain constant contains elements We emphasise transition semantics 57 Every action description D C deﬁnes labelled transition follows States transition interpretations ﬂuent constants σ f It convenient identify state s set ﬂuent atoms satisﬁed s words s f v f v s ﬂuent constant f Let Tstatics denote heads static laws D conditions satisﬁed s Tstatics def F static law 1 D s G For deﬁnite action description D interpretation s σ f state transition deﬁned D simply state D short s Tstatics Simples Simples denotes set simple ﬂuent atoms satisﬁed s So s Simples set statically determined ﬂuent atoms satisﬁed s Transition labels transition deﬁned D referred events interpretations action constants σ A transition triple s ε scid8 s initial state scid8 resulting state ε transition label event Since transition labels interpretations σ meaningful transition label ε satisﬁes formula α σ ε α transition s ε scid8 type α Let Es ε scid8 denote heads dynamic laws D conditions satisﬁed transition s ε scid8 Es ε s cid8 def F dynamic law 2 D s cid8 G s ε H For deﬁnite action description D s ε scid8 transition D transition transition deﬁned D s scid8 interpretations set atoms σ f ε interpretation σ s Tstatics Simples s state D scid8 Tstaticscid8 Es ε scid8 For nonnegative integer m path history D length m sequence s0 ε0 s1 sm1 εm1 sm s0 ε0 s1 sm1 εm1 sm transitions D 3 The causal calculator The Causal Calculator CCALC computational framework designed implemented Action Group University Texas representing action change C language performing range com putational tasks resulting formalisations CCALC applied challenge problems example 13334 A Artikis et al Artiﬁcial Intelligence 171 2007 776804 781 Fig 1 Executing speciﬁcation open agent Prediction queries A detailed account CCALCs operation functionality 22 This section describes way use prediction planning postdiction queries execute speciﬁcation social constraints protocol rules open agent In type query CCALC input deﬁnite C action description Dsoc expressing speciﬁcation social constraints We refer states transition deﬁned Dsoc social states protocol states In words social state interpretation properties ﬂuent constants Dsoc These constants express things actions physically possible proper timely permitted obligatory agent sanctioned performing forbidden actions complying obligations Prediction queries The computation answer type query involves initial social state express ing things actions initially physically possible proper timely permitted obligatory initial sanctions agents initial social state partial complete ii narrative description temporallysorted externally observable events narrative expressed sequence transitions The outcome prediction query current social state state resulting events described narrative expressing things actions currently physically possible proper timely permitted obligatory current sanctions agents Fig 1 Computing answers prediction queries performed runtime inform members time execution permissions obligations sanctions Planning queries Agents issue planning queries CCALC designtime order generate plans facilitate avoiding runtime conﬂicts ii runtime order update plans Postdiction queries New members seek determine past states Similar information requested agents crashed resumed operation Such information produced computation answers postdiction queries The computation answers queries additionally prove properties social constraints speciﬁ cation Section 8 employ CCALC prove properties argumentation protocol speciﬁcation 4 Reschers theory formal disputation We specify prove properties animate argumentation protocola procedure resolution disputebased Brewkas reconstruction 8 Reschers Theory Formal Disputation RTFD 53 We picked example deﬁning set repertoire possible moves participant effects typical kind protocols encountered multiagent systems MAS ﬁeld ii provides concrete comparatively simple example formal procedure resolution disputes iii Brewkas 782 A Artikis et al Artiﬁcial Intelligence 171 2007 776804 formalisation Situation Calculus provides natural starting point basis comparison This section brieﬂy presents RTFD Sections 5 6 present Brewkas reconstruction variation RTFD respectively According RTFD argumentation viewed threeplayer game proponent claims particular thesis opponent question thesis The determiner decides proponents thesis successfully fended The main actions participants perform following p q logical formulas Categorical assertions These assertions form p case performed proponent Cautious assertions These assertions form p case shown performed opponent Provisoed assertions These assertions performed proponent opponent expressed follows p generally obtains provided q A provisoed assertion form accompanied categorical assertion cautious assertion q The argumentation commences categorical assertion proponent topic argumentation p The opponent question topic challenge form p case shown provisoed denial form p generally obtains provided q q case shown The argumentation continues manner topic accepted proponent opponent precise meaning accepting formula presented following section case determiner declares proponent winner proponent accept topic case deter miner declares opponent winner If alternatives place participants perform additional reasonable actions deadline occurs determiner decides winner based plausibility proponents claims conceded opponent 8 p 271 Reschers theory exhibits silence implies consent principle According principle agent explicitly challenge claim performed assumed concede claim 5 Brewkas reconstruction RTFD An argumentation according 8 Deﬁnition 49 includes core components logic disputation argumentation context In Brewkas reconstruction logic disputation preferential default logic 9 argumentation context formalised use Situation Calculus dialect 52 The main actions protocol following claiming conceding retracting denying propositions default rules declaring winner argumentation objecting actions performed participants The semantics protocol actions given terms premises1 held proponent opponent The premiseag q s ﬂuent expresses formulas q ag holds explicitly The related ﬂuent acceptsag q s represent formulas ag holds implicitly acceptsag q s expresses q follows logic disputation L premises explicitly held agent ag argumentation record s acceptsag q s iff p premiseag p s cid9L q 3 An argumentation record situation terminology Situation Calculus includes history protocol The semantics claim action example proposition default rule given following Situation Calculus effect axiom premiseag q doclaimag q s 4 Expression 4 states successor situation following performance claim action ag includes premise claimed proposition default In expression 4 q represents proposition default rule form n bc n label associated default rule prerequisite b justiﬁcation c consequent rule 8 1 In work argumentation protocols dialogue games term commitment premise We use term commitment partly link Brewkas account commitment meaning related obligation cause confusion later sections paper A Artikis et al Artiﬁcial Intelligence 171 2007 776804 783 Brewka distinguishes possible legal actions Possible actions speciﬁed means Situation Calculus possibility axioms Consider following possibility axiom retract action possretractag q s premiseag q s 5 The axiom states possible agent retract proposition default q agent premise proposition default The conditions determine action possible speciﬁed protocolindependent manner Legal actions contrast possible actions speciﬁed protocoldependent manner Consider follow ing example legal action legaldeclaredet pro s acceptspro topic s 6 The expression states declaring proponent pro winner legal proponent accepts topic argumentation A point departure Brewkas reconstruction Reschers theory introduction object action The participants argumentation protocol perform illegal actions effects illegal action action legal oneprovided participant objects illegal action If participant objects immediately action takes place illegal action objection effects illegal action cancelled The object mechanism new idea ﬁeld argumentation protocols Prakken points object mechanism type Roberts Rules Order RRO general rule goes member objects RRO strictly applied 45 p 10 One ﬁnd similar mechanisms procedures conduct formal debates disputes Enabling agents object agents actions lead ﬂexible argumentation protocol In Brewkas modiﬁcation RTFD example proponent choose object illegal action performed determiner proponent calculates illegal action serve beneﬁt better having illegal action ruled However argued Brewkas object mechanism simplistic model argumentation processes actually conducted rigid model argumentation processes ought conducted Consider example case agent determiner repeatedly performs illegal actions The proponent opponent object illegal action performed determiner object implicitly accept illegal actions legal ones In formalisation presented following sections propose way address issue Note according Brewkas treatment objection undo effects illegal action objection takes place immediately illegal action If reason agent fails object immediately illegal action action took place illegal action objection considered agent object implicitly agrees treatment illegal action legal One way overcoming limitation specifying effectively object Act latest n timepoints Acts performance Such speciﬁcation raise complications following Assume Act takes place time t agent objects action t cid8 t tcid8 t n The effects objection include undoing effects actions took place t t cid8 necessary track protocol history fragment ii undoing effects Act iii possibly applying effects actions took place t t cid8 We expect object mechanism practical n smallin setting computerised For reason follow Brewka assume objections immediately preceding action We allow possibility participant objects action Further discussion alternative object mechanisms scope paper Finally Brewkas reconstruction formalises Reschers silence implies consent principle follows agent proponent assumed explicit premise proposition opponent explicit premise proposition long proponent deny retract proposition 6 A variation Brewkas reconstruction RTFD Although general aim paper present reconstruction Brewkas account RTFD following adjustments Brewkas version We mind setting autonomous software agents MAS engage argumentation negotiation dispute resolution process In setting protocol actions 784 A Artikis et al Artiﬁcial Intelligence 171 2007 776804 transmissions messages During argumentation proponent opponent determiner perform chosen actions speciﬁed deadlines timeouts Without feature practical way controlling exchanges determining participant spoken wait indeﬁnitely messages arrive communication channels For similar reasons necessary impose limit number exchanges total elapsed time argumentation process Although Brewka states argumentation proposition terminate deadline provides details work deadlines affect argumentation process Having introduced deadlines necessary express conditions action said timely participant spoken speciﬁed deadline We reﬁne Brewkas distinction possible legal actions We consider kinds actions proper possible interpretation Situation Calculus predicate posssee example axiom 5 actions agent practically able perform stage given implementation Moreover express conditions action said permitted possible interpretation Brewkas legal actions obligatory We specify enforcement strategies deal performance forbidden actions noncompliance obligations Finally depart Brewkas reconstruction RTFD aforementioned points maintain form object mechanism Here variant Brewkas reconstruction RTFD We refer RTFD The argumentation commences proponent claims topic argumentationany action count com mencement protocol The protagonists proponent opponent turn perform actions Each turn lasts speciﬁed time period protagonist perform actions send messages speciﬁed limit After action participants given opportunity object speciﬁed time period In words Ags action Act followed time period Ag perform actions participants object Act The determiner declare winner end argumentation speciﬁed period argumentation elapses Other speciﬁcations protocols terminating conditions possiblefor instance argumentation end earlier speciﬁed time period protagonist concedes arguments If end argumentation proponent opponent accepted topic argumentation determiner declare proponent winner If proponent accept topic determiner declare opponent winner Finally proponent accepts topic opponent determiner discretion declare winner It obligation decide way depending version protocol choose adopt 7 Specifying RTFD We present C action description DRTFD expresses speciﬁcation RTFD Table 1 shows subset action signature σ f σ DRTFD Variables written uppercase ﬁrst letter constants start lowercase letter The intended reading constants σ f σ explained presentation RTFD speciﬁcation There roles argumentation protocol proponent opponent determiner Although speciﬁ cation rely assumption agent occupying role given execution protocol concrete example presented deal usual case agents role In protocol presented agents change role We pro agent occupies role proponent opp agent occupies role opponent det agent occupies role determiner Accordingly example action description contains following static laws2 role_of pro proponent cid4 role_of opp opponent cid4 role_of det determiner cid4 2 For brevity omit remaining paper keyword caused appears beginning static dynamic laws original presentation C 22 A Artikis et al Artiﬁcial Intelligence 171 2007 776804 785 Table 1 A subset action signature DRTFD Variables Ag Agcid8 Protag Protagcid8 Det P Q Act Domain pro opp det pro opp det ﬁnite set propositionsdefault rules claimProtag Q concedeProtag Q retractProtag Q denyProtag Q declareDet Protag Rigid Constants role_of Ag topic impliesP Q Domain proponent opponent determiner ﬁnite set propositions Boolean Simple Fluent Constants turn premiseProtag Q initialState sanctionedAg winner Domain proponent opponent determiner t f u Boolean pro opp Statically Determined Fluent Constants properAct timelyAct perAct oblAct objectionableAct acceptsProtag Q fair winning Domain Boolean pro opp Action Constants σ act Boolean claimProtag Q concedeProtag Q retractProtag Q denyProtag Q declareDet Protag Action Constants σ aobj Boolean objectedAg The role_of Ag ﬂuent constants rigid sense values states Ag variable ranges participants pro opp det In versions protocol introduce roles instance observer participate argumentation proper allowed object actions protagonists We variation Other rigid constants topic value proposition expressing topic argumentation Boolean ﬂuent constants impliesP Q represent underlying logic disputation described following section Each simple ﬂuent constant DRTFD inertial value persists default state The constraint ﬂuent constant f inertial expressed C means causal law abbreviation inertial f 7 C abbreviations presented Section 2 The action constants σ DRTFD partitioned sets σ act σ aobj The set σ act includes main actions claim concede retract deny declare argumentation summarised Table 1 For convenience specify exactly action σ act takes place state transition This means following C laws nonexecutable αi αj αi αj σ act αi cid12 αj 8 nonexecutable α1 α2 αn 9 α1 α2 αn action constants σ act The restriction expressed laws 8 9 simpliﬁes RTFD speciﬁcation convenient analysing executions protocol Sections 8 9 786 A Artikis et al Artiﬁcial Intelligence 171 2007 776804 The action constants σ aobj Boolean constants form objectedAg represent objection agent Ag In speciﬁcation presented paper abstracted away details objection transmitted speciﬁed deadline recall action Act followed time period action place apart objection Act Instead transition transition deﬁned DRTFD corresponds claim concede retract deny declare action participants indication action objected For example transition satisfying action formula claimpro Q objectedopp objecteddet represents transition claim Q pro followed objections opp det Similarly transition satisfying claimpro Q objectedopp objecteddet expresses claim objected We produced elaborate C action description expressing objection mechanism associated deadlines details ﬁddly present distract attention main points paper Notice laws 8 9 objectedAg action constants need specify action objected exactly action state transition We ﬁnd useful specify agent objected allow possibility agent objected deadline Other versions speciﬁcation constructed include laws 8 9 representation objections intricate We omit details We begin specifying wellformed actions RTFD protocol A claimAg Q action example wellformed Ag agent occupying role proponent opponent There ways specifying wellformed actions The simpler method choose specify action signature For instance action signature summarised Table 1 contains action constants form claimProtag Q Protag ranges protagonists pro opp The alternative method include illformed actions action signature specify explicitly nonexecutable following example nonexecutable claimAg Q role_of Ag determiner According law transition transition deﬁned DRTFD corresponding claim agent occupying role determiner This way dealing illformed actions results generic ﬂexible speciﬁcation require fewer changes accommodate participants changing roles assuming protocol versions possible new agents participating protocol The way choose results speciﬁcation simpler laws fewer conditions easier follow An objection wellformed agent objects actions Accordingly include laws following form nonexecutable claimProtag Q objectedProtag 10 similarly action constants σ act We support objections objections little practical theoretical We present number causal laws expressing wellformed protocol action RTFD physically practically possible proper timely permitted obligatory effects action 71 Physical capability The events RTFD speciﬁcation timeoutsthese issued global clock To avoid clutter constants action signature DRTFD including representing timeouts presented Table 1 A type timeout event denote turn participant When RTFD commences happens proponent claims topic argumentation global clock starts ticking The ﬁrst timeout signals A Artikis et al Artiﬁcial Intelligence 171 2007 776804 787 end proponents turn beginning opponents turn speak setting turn opponent The timeout signals end opponents turn beginning proponents turn setting turn proponent The remaining actions RTFD speciﬁcation performed protocol participants We chosen specify protagonist capable signalling claim concede retract deny object action determiner capable signalling declare object action agent capable objecting actions The effects actions presented At initial state protocol protagonists premises value premiseProtag Q ﬂuent constant f The variable Q ranges formulas propositions default rules protagonists claim concede retract deny Table 1 We assume ﬁnite number formulas identiﬁed speciﬁed outset This necessary implementation C CCALC necessarily formalisms The protocol commences proponents claim topic The effects claim action expressed follows claimProtag Q causes premiseProtag Q t premiseProtag Q f objectedpro objectedopp objecteddet The expression abbreviation C ﬂuent dynamic law premiseProtag Q t cid4 claimProtag Q premiseProtag Q f objectedpro objectedopp objecteddet 11 Law 11 expresses Protags claim Q leads state Protag explicit premise Q premiseProtag Q f state explicit premise Q premiseProtag Q t condition agent pro opp det objects claim An objection effective blocking effects claim action wellfounded sense speciﬁed If objection wellfounded block effects claim action effects exposing objecting agent sanctions We add law 11 constraint claimProtag Q causes premiseProtag Q t premiseProtag Q f objectionableclaimProtag Q 12 Boolean ﬂuent constants objectionableAct represent objection Act wellfounded When objection action Act wellfounded objectionableAct true In gen eral Act proper timely action protocol However ﬁnd adds ﬂexibility deﬁne objectionable separately Not improper untimely actions need objectionable As explain section improper untimely actions effect state argumentation cir cumstances protocol simpliﬁed ignoring objections Speciﬁcation proper timely objectionable actions RTFD given section For convenience introduce special abbreviation writing Act p_causes F G provisionally causes shorthand pair causal laws form Act causes F G objectedAg1 objectedAgn Act causes F G objectionableAct Ag1 Agn participants argumentation pro opp det present example When G cid4 write Act p_causes F 788 A Artikis et al Artiﬁcial Intelligence 171 2007 776804 The laws 11 12 stating effects claim written succinctly follows claimProtag Q p_causes premiseProtag Q t premiseProtag Q f 13 Suppose protagonist Protag claims proposition Q Opponent Protagcid8 respond Protags claim ceding denying claim If Protagcid8 Protagcid8 unconﬁrmed premise Q denoted premiseProtagcid8 Q u The value premise ﬂuent constant set unconﬁrmed follows pair distinct protagonists Protag Protagcid8 claimProtag Q p_causes premiseProtagcid8 Q u premiseProtag Q f premiseProtagcid8 Q f 14 In words Protags claim Q leads subject possible objections state Protagcid8 conﬁrmed premise Q provided Protagcid8 premise Q provided premiseProtagcid8 Q f If Protagcid8 premise Q premiseProtagcid8 Q t premise unconﬁrmed need respond Protags claim Responding claim conceding denying claim expressed follows concedeProtag Q p_causes premiseProtag Q t premiseProtag Q u denyProtag Q p_causes premiseProtag Q f premiseProtag Q u A claim retracted The effects retraction twofold retractProtag Q p_causes premiseProtag Q f premiseProtag Q t retractProtag Q p_causes premiseProtagcid8 Q f premiseProtag Q t premiseProtagcid8 Q u 15 16 17 18 pair distinct protagonists Protag Protagcid8 According law 17 Protags retraction claim Q results premiseProtag Q f according law 18 retraction removes unconﬁrmed premise held protagonist Protagcid8 If Protagcid8 responded Protags claim Protag retracted value premiseProtagcid8 Q unconﬁrmed case Protags retraction affect premise held Protagcid8 The effects laws 1318 single proposition Q assuming objections summarised Fig 2 Notice premise ﬂuent constants inertial claim concede deny retract actions effect argumentation state preconditions laws 1318 satisﬁed Transitions corresponding actions omitted diagram clarity At end argumentation determiner declare winnerthe effects action expressed follows declareDet Protag p_causes winner Protag 19 Det represents agent occupying role determiner The ﬂuent constant winner Protag expresses winner argumentation Protag The use p_causes deals possibility agent Det objects declaration Laws 1319 express effects main protocol actions Suppose protagonist claims proposition Q premise Q sends retractProtag Q message premise Q Such actions proper according protocol Moreover action untimely instance protagonist speaks turn Some improper untimely actions effects state argumentation Others effectshowever effects blocked objections In section specify protocol action proper timely specify action objectionable A Artikis et al Artiﬁcial Intelligence 171 2007 776804 789 Fig 2 Effects claim concede deny retract actions The proposition Q omitted clarity Pr Prcid8 shorthands Protag Protagcid8 respectively Similarly pPr pPrcid8 shorthands premiseProtag Q premiseProtagcid8 Q Actions change protocol state shown diagram Table 2 Proper timely actions DRTFD Action claimProtag Q concedeProtag Q retractProtag Q denyProtag Q declareDet Protag 72 Proper timely actions proper premiseProtag Q f premiseProtag Q u premiseProtag Q t premiseProtag Q u winner cid12 Protag winning Protag winning timely initialState topic Q turn role_of Protag initialState turn role_of Protag initialState turn role_of Protag initialState turn role_of Protag turn role_of Det The second column Table 2 shows conditions main protocol actions said proper A claimProtag Q action example proper Protag premise Q premiseProtag Q f properclaimProtag Q iff premiseProtag Q f In words claimProtag Q action improper 20 premiseProtag Q t improper repeated claims claim premise premiseProtag Q u signiﬁes protagonist Protagcid8 claimed Q law 14 A proper response claim concession denial Table 2 A retractProtag Q action proper premiseProtag Q t retract 790 A Artikis et al Artiﬁcial Intelligence 171 2007 776804 The reader noticed conditions proper claim concede deny retract actions coincide premiseProtag Q preconditions laws 1318 This feature Brewkas version RTFD chosen formulation details necessarily case examples In argumentation dialogue protocols common example claim Protag proper inconsistent underlying logic disputation premises currently held Protag This easily added formulation feature Brewkas RTFD Other formulations proper actions discussed Section 10 We turn declarations A declaration proper following conditions satisﬁed properdeclareDet Protag iff winner cid12 Protag winning Protag winning 21 In words declaring Protag winner argumentation proper Protag declared winner Protag currently winning conﬂict resolved favour Protag protagonist winning conﬂict unresolved The statically deﬁned ﬂuent constant winning deﬁned follows winning Protag role_of Protag proponent role_of Protagcid8 opponent topic Q acceptsProtag Q acceptsProtagcid8 Q winning Protagcid8 role_of Protag proponent role_of Protagcid8 opponent topic Q acceptsProtag Q default winning 22 23 24 Laws 22 23 express resolved dispute An acceptsProtag Q ﬂuent constant states Q follows logic disputation Protags explicit premises A discussion logic disputation presented Section 75 Law 22 deals case protagonists accept topic Q dispute law 23 deals case proponent longer accepts topic Q Law 24 corresponds unresolved dispute absence information contrary laws 22 23 dispute unresolved Even proper action compliance protocol speciﬁcationfor example timely The column Table 2 shows conditions main protocol actions said timely At initial state protocol expressed simple ﬂuent constant initialState proponents claim argumentation topic timely initial protocol state turn proponent At protocol states protag onists claim concession retraction denial timely protagonists turn speak A timely claim instance expressed C follows timelyclaimProtag Q iff initialState topic Q turn role_of Protag Declarations deﬁned timely follows timelydeclareDet Protag iff turn role_of Det 25 26 A declaration timely determiners turn speakthis happens argumentation time elapses A Artikis et al Artiﬁcial Intelligence 171 2007 776804 791 Table 3 Objectionable actions DRTFD Action claimProtag Q concedeProtag Q retractProtag Q denyProtag Q declareDet Protag objectionable properclaimProtag Q timelyclaimProtag Q properconcedeProtag Q timelyconcedeProtag Q properretractProtag Q timelyretractProtag Q properdenyProtag Q timelydenyProtag Q properdeclareDet Protag timelydeclareDet Protag winner cid12 Protag In version allow early declarations case protagonists accept argumentation topic proponent accept argumentation time elapses easily adjusted What improper declarations Or untimely actions Some actions effects protocol statehowever effects blocked wellfounded objection Table 3 presents conditions objection Act wellfounded Act objectionable In present example claim objectionable untimely proper objectionableclaimProtag Q iff properclaimProtag Q timelyclaimProtag Q 27 According protocol speciﬁed improper claims effects protocol state It necessary object Similarly concession retraction denial objectionable untimely proper A declareDet Protag action objectionable proper timely ii winner cid12 Protag Table 3 Notice winner Protag time declareDet Protag action action effects value winner ﬂuent constant Accordingly choose improper untimely declareDet Protag action objectionable winner cid12 Protag time declaration We presented conditions action considered proper timely consequences performance properimproper timelyuntimely action In following section focus separate issue cir cumstances protocol participant permitted obliged perform particular action In Section 74 discuss potential consequences performance forbidden actions noncompliance obligations 73 Permitted actions In Section 5 identiﬁed sideeffect object mechanism Ags repeated performance objectionable actions requires repeated objections participant Agcid8 effects Ags objectionable actions blocked One way addressing issue performance repeated objectionable actions permitted Consider following example speciﬁcation permission perconcedeProtag Q iff objectionableconcedeProtag Q objActionsProtag 10 28 Here upper limit 10 example total number objectionable actions protagonist Protag permitted The ﬂuent constants express permission simple ﬂuent constants objActionsAg record number objectionable actions issued Ag The formulation C laws maintain objActionsAg ﬂuent constants straightforward omit details Laws similar 28 express permission claim retract deny declare impose lower threshold permitted objectionable declarations In present example objection objectionable objection permitted In formulation objActionsAg express number objectionable actions issued Ag wellfounded successful objections participants In case Ag permitted perform objectionable actions number successful objections issued participants Ags actions reached speciﬁed limit 792 A Artikis et al Artiﬁcial Intelligence 171 2007 776804 We formulate permission laws classify permitted kinds exchanges repeated claims retractions protagonists yes isnt yes isnt Although exchange proper timely according protocol undesirableit progress resolution dispute In cases meaningful determiner permitted obliged declare protagonist winner dispute Such obligation arise following conditions hold obldeclareDet Protag iff turn role_of Det winner cid12 Protag winning Protag 29 The obl ﬂuent constants express obligation According law 29 obligatory declare Protag winner dispute determiners turn speak ii Protag declared winner iii Protag currently winning dispute dispute resolved favour Protag Given expression 29 necessary represent explicitly relationship permission obligation declare winner For instance protocol reach state obldeclareDet Protag perdeclareDet Protagcid8 true Protag cid12 Protagcid8 One way add following laws pair distinct protagonists Protag Protagcid8 perdeclareDet Protag obldeclareDet Protag perdeclareDet Protag obldeclareDet Protagcid8 objectionabledeclareDet Protag perdeclareDet Protag obldeclareDet Protagcid8 objActionsDet 10 default perdeclareDet Protag 30 31 32 33 According laws 3033 determiner obliged declare Protag winner permitted declare Protag Protagcid8 When obligation determiner objectionable declarations permitted permission declare expressed permission perform protocol action It meaningful associate obligations remaining protocol actions need update speciﬁcation permitted claims concessions retractions denials objections Table 4 presents ditions main protocol action permitted obligatory Clearly different speciﬁcations possible One Table 4 Permission obligation DRTFD Action claimProtag Q concedeProtag Q retractProtag Q denyProtag Q declareDet Protag objectionableclaimProtag Q objActionsProtag 10 objectionableconcedeProtag Q objActionsProtag 10 objectionableretractProtag Q objActionsProtag 10 objectionabledenyProtag Q objActionsProtag 10 obldeclareDet Protag obldeclareDet Protagcid8 objectionabledeclareDet Protag objActionsDet 10 obl turn role_of Det winner cid12 Protag winning Protag A Artikis et al Artiﬁcial Intelligence 171 2007 776804 793 forbid instance repetitive improper claims concessions retractions denials illfounded objections objections Act Act objectionable Although actions effects protocol state objectionable forbidden permitted order deter participants forming meaningless actions decrease network trafﬁc In 4 presented RTFD speciﬁcation retractions forbidden properimproper timelyuntimely objectionablenonobjectionable Furthermore obligation declare winner arise case unresolved dispute Note practically possible agent perform forbidden actions comply obligations We introduce enforcement strategies way dealing type behaviour Such strategies presented 74 Enforcement strategies We want reduce eliminate The protagonists performance forbidden actions repeated objectionable actions example The determiners noncompliance obligation declare winner dispute To simplify pre sentation address determiners forbidden declarations We employ simple ﬂuent constants sanctioned identify aforementioned types behaviour Protags forbid den claim example results initiating sanctionedProtag claimProtag Q causes sanctionedProtag perclaimProtag Q 34 One way reducing performance forbidden actions noncompliance obligations penalising behaviour For example close argumentation dispute unresolved declaring Protag winner objectionable Protag performed forbidden actions Protagcid8 In case penalty Protag pays forbidden actions win unresolved dispute Protagcid8 perform forbidden actions ii objects potential declareDet Protag action This necessarily imply Protagcid8 win dispute The speciﬁcation example sanction expressed updating deﬁnition objectionable declarations follows pair distinct protagonists Protag Protagcid8 objectionabledeclareDet Protag properdeclareDet Protag winner cid12 Protag objectionabledeclareDet Protag timelydeclareDet Protag winner cid12 Protag objectionabledeclareDet Protag winning winner cid12 Protag sanctionedProtag sanctionedProtagcid8 default objectionabledeclareDet Protag 35 36 37 38 Laws 35 36 38 express deﬁnition objectionable declarations presented Table 3 law 37 expresses protagonists sanctions When turn determiner argumentation ended winning dispute unresolved winner protagonist declared winner declaring Protag proper timely nonobjectionable If Protag sanctioned Protagcid8 declaring Protag proper timely objectionable If protagonists sanctioned objectionable declarations deﬁned laws 35 36 38 proper timely declarations nonobjectionable Similarly expressed protagonists sanctions terms objectionable claims concessions retractions For example speciﬁed retractions sanctioned protagonist objectionable proper timely effects blocked objections 794 A Artikis et al Artiﬁcial Intelligence 171 2007 776804 In addition dealing protagonists forbidden actions want reduce possibility determiner comply obligation Assuming determiner obliged declare Protag winner dispute law 29 determiner declare Protagcid8 winner precisely declaration protocol timeout concerns Protagcid8 declaration declare Protag winner In case obligation temporarily discharged New evidence arise declaration protocol timeout untimely retraction Protag obliging determiner declare Protagcid8 winner setting winning Protagcid8 obligation discharged Notice employed object mechanism inadequate ensuring fair result aforementioned scenarios A fair result implies Protag declared winner dispute resolved favour In ﬁrst case wellfounded objection action declareDet Protagcid8 block effects declaration force winner Protag In second case declaration object case declaration objectionable time What sanctions enforced cases There number possibilities We specify instance sanctioned determiner disqualiﬁed acting determiner future argumentations speciﬁed time period If argumentation takes place context computational including protocols negotiation deliberative assemblies sanctioned determiner restricted permissions actions objectionable participating remaining protocols possibly occupying roles In addition specify proper timely initiate proceedings sanctioned determiner assuming existence adjudicating authority order enforce compliance determiners obligation punishment determiner way discouraging avoid complying protocol rules ensuring fairness Sanctions means performance forbidden actions noncompliance obligations addressed Another possible strategy devise physical controls force agents comply protocol rules For instance repetitive objectionable actions physically blocked present example forbidden The general strategy designing mechanisms force compliance eliminate nonpermitted behaviour Jones Sergot 26 referred regimentation Regimentation devices employed order eliminate antisocial behaviour computational systems instance 283754 It argued 26 regimentation rarely desirable results rigid discourage agents entering 45 practical In case violations occur regimenting computational consider instance faulty regimentation device For reasons allow sanctioning rely exclusively regimentation mechanisms 75 Additional considerations We presented formalisation RTFD protocol rules In order perform computational experiments presented Section 9 need code fragments logic disputation The following law example states protagonist accepts classical logical implications premises acceptsProtag Q iff premiseProtag P t impliesP Q 39 The implies simply suitably chosen rigid constants In similar manner specify acceptance propositions result conjunctions agents premises premises default rules We formalised small fragment logic disputation conduct simple experiments The focus paper lies protocol rules logic disputation assume necessarily prioritised default logic Brewkas version Moreover complete formalisation logic disputation formalisation protocol rules substantially increase number DRTFD laws signiﬁcantly increasing CCALCs time computing answers queries DRTFD These complications addressed employing alternative action languages We discuss issue Section 11 A Artikis et al Artiﬁcial Intelligence 171 2007 776804 795 Brewka reconstruction RTFD places emphasis formalisation silence implies consent principle protagonist explicitly challenge claim protagonist assumed concede claim We incorporate principle RTFD modifying formalisation logic disputation follows acceptsProtag Q iff premiseProtag P t premiseProtag P u impliesP Q 40 Recall premiseProtag P u expresses Protag unconﬁrmed premise P Protag responded claim P protagonist In protocol adopting silence implies consent principle protagonist accepts logical implications explicit unconﬁrmed premises Note want incorporate silence implies consent principle disregard unconﬁrmed premises logic disputation law 39 instead 40 8 Proving properties RTFD The explicit transition systems semantics C language enables prove properties presented RTFD speciﬁcation expressed means deﬁnite action description DRTFD We prove example long determiner complies obligations protocol result fair Suppose specify fairness follows fair iff winning winner winning 41 The statically determined ﬂuent constant fair holds protocol state dispute unresolved winning dispute resolved favour declared winner winner winning We want ex amine protocol result fair ﬂuent constant fair true ﬁnal state protocol execution Proposition 1 The protocol result fair ﬁnal protocol state obligation determiner declare Proof First prove ﬁnal protocol state obligation determiner protocol result fair Assume ﬁnal protocol state s obligation determiner result fair s cid12 obldeclaredet Protag s winning cid12 winner cid12 winning turn role_of det Protag Recall role_of det determiner rigid Moreover ﬁnal protocol state turn determiner Now s winning cid12 iff s winning Protag protagonist Protag s winning Protag interpretation σ f s Tstatics Simples s G Simples denotes set simple ﬂuent atoms satis winner cid12 Protag Since s state DRTFD Tstatics def F static law F G DRTFD ﬁed s Section 23 From law 29 fact s turn role_of det winning Protag winner cid12 Protag obldeclaredet Protag Tstatics According initial assumption obligation determiner s implies s cid12 Tstatics Simples Therefore s state DRTFD Second prove protocol result fair ﬁnal state obligation determiner declare Assume ﬁnal protocol state s obligation determiner declare result fair If fair true s winning s winner winning s Consider ﬁrst case winning s obldeclaredet Protag winning turn role_of det 796 A Artikis et al Artiﬁcial Intelligence 171 2007 776804 Protag Given law 29 obldeclaredet Protag Tstatics Moreover obl stati cally determined ﬂuent constants obldeclaredet Protag Simples Therefore s cid12 Tstatics Simples s state DRTFD The proof s state DRTFD case winner winning similar cid2 The obligation declare arise protocol execution Proposition 1 shows case result fair If obligation declare arise protocol result guaranteed fair long determiner complies obligation CCALC provides automated means proving properties protocol speciﬁcation We express C action description DRTFD prove properties RTFD speciﬁcation The types query CCALC computes presented Section 3 Details CCALCs input language 132 Consider following example CCALCs input language query CCALC DRTFD Proposition 2 A proper timely concedeProtag Q action leads state Protag explicit premise Q We instruct CCALC compute states scid8 s ε scid8 transition DRTFD s properconcedeProtag Q timelyconcedeProtag Q ε concedeProtag Q For state scid8 computed CCALC obtain scid8 premiseProtag Q t This brieﬂy proper timely concession objectionable presented RTFD Table 3 Therefore effects action expressed law 15 blocked In words ε concedeProtag Q objectedAg resulting state scid8 includes premiseProtag Q t More details computational experiments performed CCALC DRTFD presented follow ing section We prove properties RTFD speciﬁcation manner shown effects nonobjectionable action blocked objection blocks effects objectionable action permitted action participant turn speak performing objectionable actions speciﬁed forbidden sanctioned determiner obliged forbidden declare winner properties viewed discouragement disruption rule consistency 36 In Section 11 discuss alternative techniques proving properties protocol speciﬁcation 9 Executing RTFD Proving properties speciﬁcation seen designtime activity For instance protocol designers wish prove properties protocol speciﬁcation order determine speciﬁcation meets requirements Additionally agents designers wish prove properties protocol speciﬁcation deciding enter deploy agents protocol At runtime execute protocol speciﬁcation provide things information protocol state current time Computation information special case prediction query Section 3 A protocol statewhich actions proper timely objectionable permitted onmay publicised subset protocol participants designers Such runtime services provided central server distributed conﬁgurations Further discussion architectural issues outside scope paper Other runtime services include calculation plans means computing answers planning queries A Artikis et al Artiﬁcial Intelligence 171 2007 776804 797 retrieval past protocol states means computing answers postdiction queries mentioned Section 3 plans additionally computed designtime We section example prediction planning queries RTFD speciﬁcation results obtained To save space details postdiction query examples omitted To execute presented RTFD protocol choose speciﬁc values following parameters Duration timeouts expressed maximum number messages exchanged given communication channel interval deﬁned consecutive timeout events In formalisation timeout duration expressed maximum number transitions place consecutive timeout events speciﬁcation transition labelled main protocol action objected timeout event Number turns protagonist Number permitted objectionable actions Section 73 To conduct computational experiments arbitrary numerical values chosen parameters For concrete illustration present experiments main protocol actions physically possible consecutive timeout events transitions place consecutive timeout events protagonist turns speak objectionable action permitted As mentioned speciﬁed logic disputation simple classical implication allowed Moreover experiments presented silence implies consent incorporated protocol speciﬁcation We mentioned earlier propositions protagonists claim concede retract deny speciﬁed outset As discussed later restriction lifted recompiling DRTFD time protagonist claims new proposition In order sample runs small present queries computed results concerning propositions topic q p The ﬁrst column Table 5 shows sample run RTFD information displayed remaining columns actions proper timely objectionable permitted obligatory state produced computing answers number prediction queries To save space Table 5 claim written cl concede cn retract rtr deny dn declare dcl Terms containing variables Protag Q stand instances Consider following prediction query initial protocol state proponent pro claims topic argumentation q actions proper timely objectionable permitted obligatory resulting state The answer query displayed rows claimpro q action labelled clpro q At state resulting claimpro q proponent pro premise q law 13 Therefore state improper pro claim q law 20 It proper pro claim p state pro premise p The remaining information displayed Table 5 computed similar manner Note state resulting claimpro q timely pro perform action This proponents turn speak Table 2 speciﬁcation timely actions claimopp p concedeopp q denyopp q objectionable state reached performance claimpro q This fact actions untimely proper At state declaring pro opp objectionable case declaration untimely winner Table 3 speciﬁcation objectionable actions All actions permitted resulting state query presented Recall action permitted objectionable speciﬁed limit objectionable actions reached sample run objectionable action participant permitted In state action obligatory obligations associated declarations arise determiners turn speak The speciﬁcations permissions obligations presented Table 4 The action protocol run presented Table 5 timeout sets turn opponent Consequently following state timely opp perform action After timeout opp denies q pro objects opps action The denial objectionable pros objection block effects opps action The action protocol run claimpro p objectionable opps objection blocks effects pros action 798 A Artikis et al Artiﬁcial Intelligence 171 2007 776804 Table 5 A sample run RTFD act clpro q proper timely obj timeout dnopp q objectedpro clpro p objectedopp clProtag p cnopp q rtrpro q dnopp q dcldet pro clProtag p cnopp q rtrpro q dnopp q dcldet pro clpro p clopp Q rtrpro q dcldet Protag clpro p clopp Q rtrpro q dcldet Protag clpro Q cnpro Q rtrpro Q dnpro Q clopp Q cnopp Q rtropp Q dnopp Q clopp Q cnopp Q cnopp Q dnopp Q clopp Q cnopp Q cnopp Q dnopp Q clopp p cnopp q dnopp q dcldet Protag clpro p rtrpro q dcldet Protag clpro p rtrpro q dcldet Protag clpro p rtrpro q dcldet Protag obl clpro q clopp Q cnProtag Q rtrpro p rtropp Q dnProtag Q dcldet Protag After performance pros objectionable claim pro longer permitted perform objectionable action reached speciﬁed limit permitted objectionable actions Nonconformance prohibition sanction pro A ﬁnal remark protocol run presented Table 5 concerns silence implies consent principle Due principle ﬁrst states displayed Table 5 proper declare pro improper declare opp argumentation winner In states pro winning dispute premisepro q t premiseopp q u imply silence implies consent law 40 protagonists accept q topic argumentation winning ﬂuent constant deﬁned laws 2224 If silence implies consent incorporated protocol premiseopp q u imply opp accepts topic law 39 protagonist winning In case proper declare pro opp argumentation winner Table 6 presents sample protocol run RTFD associated information produced computations query answers The timeout sets turn determiner The proponent pro accept argumentation topic determiner obliged declare opponent opp winner Clearly action presented run declaredet pro discharge obligation The obligation discharged declaredet opp pro objects declaration pros objection block effects declaration action objectionable In addition producing protocol state current time compute plans order facilitate agents achieve goals Consider following planning query state determiners turn speak ii dispute unresolved protagonist winning iii declared winner Find paths ﬁnal protocol state state reached ﬁnal timeout proponent declared winner CCALC ﬁnds solutions query All solutions include action declaredet pro ﬁnal timeout Moreover declaration objected proponent protagonist sanctioned If propo A Artikis et al Artiﬁcial Intelligence 171 2007 776804 799 Table 6 A sample run RTFD act timeout dcldet pro dcldet opp objectedpro proper timely obj obl clProtag Q dcldet opp clProtag Q dcldet opp dcldet Protag clProtag Q dcldet pro dcldet Protag clProtag Q clProtag Q dcldet opp clProtag Q dcldet opp dcldet opp dcldet opp clProtag Q dcldet Protag clProtag Q dcldet pro clProtag Q dcldet Protag nent sanctioned opponent declaredet pro action objectionable law 37 objection block effects Here planning query given initial state protocol possible reach state agent exceeded limit permitted objectionable maximum number transitions DRTFD actions ii sanctioned CCALC ﬁnds solution maximum number transitions DRTFD Given chosen values number turns protagonist maximum number transitions place consecutive timeouts calculated maximum number transitions DRTFD twentyone Intuitively longest path DRTFD number transitions longest path DRTFD proponent performs actions timeout takes place signalling opponents turn opponent performs actions followed timeout signalling proponents turn The aforementioned sequence actions repeated times number turns protagonist Finally determiner performs actions timeout takes place Since solution maximum number transitions starting initial protocol state reach state agent exceeded limit permitted objectionable actions sanctioned 10 Related work In Section 6 discussed points departure formalisation Brewkas account Brieﬂy We employed C language specify argumentation protocol instead Situation Calculus Moreover executed protocol speciﬁcation use CCALC providing designtime runtime services protocol designers agent designers agents We introduced deadlines cater realistic multiagent protocols We reﬁned Brewkas distinction possible legal actions In formalisation action classiﬁed physically possible proper timely objectionable permitted obligatory We maintained object mechanism forbid multiple objectionable actions avoid having object action We introduced sanctions order discourage participants performing forbidden actions complying obligations We retained silence implies consent principle optional feature protocol Apart static argument systems Brewka 8 Section 6 formalises dynamic argument systems argument systems participants start metalevel debate arguing protocol rules Dynamic protocol speciﬁcations scope paper Argumentation protocols long studied ﬁelds philosophy sciencesee 48 recent review The focus paper procedural argumentation focused speciﬁcation protocol rules logic disputation This contrast research nonmonotonic uncertain reasoning argument systems Brewka 8 mentions deﬁne inference systems 800 A Artikis et al Artiﬁcial Intelligence 171 2007 776804 existing nonmonotonic logics nonstandard consequence relation logics based notion argument See example 71015314450 Chesñevar et al 11 Prakken Vreeswijk 51 provide surveys Different logics disputation suited different types argument Our protocol formalisation bound speciﬁc logic disputation Like 824254647 adopted public protocol semantics 48 Section 6 assumptions participants internal architectures This contrast approaches allow protocol rules referring participants internal belief base instance 2304043 A line research closely related work Bodenstaff et al 6 These researchers employ Shanahans 60 Event Calculus formalise Prakkens 47 dialogue argumentation Parsons Wooldridge Amgouds 43 persuasion dialogue Bodenstaff et al formalise procedural aspect argumen tation expressing legal protocol moves terms reply structure distinguishing attacking surrendering replies In paper presented ﬁner classiﬁcation protocol actions Bodenstaff col leagues classiﬁcation legalillegal actions Concerning reply structure Prakken 48 notes standard feature dialogue systems example 21 In case possible adjust formalisation order express reply structure paper aim reconstruct Brewkas account RTFD explicitly include structure This adjusting speciﬁcation proper actions Apart research argumentation work similar objectives comes distributed artiﬁcial intelligence literature normgoverned systems speciﬁcation A examples approaches artiﬁcial social systems 203839626365 lawgoverned interaction 37 electronic institutions 161955 Close work Yolum Singhs 6667 work commitment protocols These researchers formalise Shanahans Event Calculus set operations commitments create discharge cancel release Moreover employ Event Calculus planner 61 facilitate planning commitment protocol participants It important note Yolum Singhs work term commitment refers form directed obligation agents alternative term premise It difﬁcult argumentation protocol interaction protocols multiagent systems instance protocols negotiation voting performing transactions electronic marketplaces speciﬁed simply terms commitments sense At speciﬁcation protocols constitutive norms required 11 Conclusion We focused paper formal representation procedural aspects argumentation protocol Brewkas reconstruction Reschers theory formal disputation concrete example We distinguished speciﬁcation constitutive rules deﬁning protocol itselfthe protocol actions effects protocol stateand physical environment protocol executed normative envi ronment place constraints protocol actions permitted obligatory Although simplest cases protocol action permitted proper timely reasons need We presented simple examples way illustration clear possibilities discuss There choice deciding place boundary constitutive normative components For instance chose example presented claim Q protagonist holds Q premise proper effect protocol state permitted We chosen instead claim proper permitted Or proper effect protocol state requires protagonist concede deny permitted One objective present work allow variations speciﬁed examined help evaluate effectiveness proposed sanctioning enforcement mechanisms In earlier formalisation Brewkas protocol 4 speciﬁed constitutive elements protocol deﬁning conditions agent institutional power competence capacity perform particular protocol action said action valid performed empowered agent In paper constructed structured detailed speciﬁcation deﬁning separately conditions action proper timely suggested Prakken et al 4549 One aim paper additional structure reﬂected speciﬁcation concrete example A detailed speciﬁcation deﬁne exact forms message utterance count expressing claim concede deny retract declare object action We deﬁned level It important component runtime A Artikis et al Artiﬁcial Intelligence 171 2007 776804 801 mechanism important primarily interested investigating properties speciﬁed protocol We adds ﬂexibility specify separately actions objectionable difﬁcult demonstrate convincingly comparatively simple protocol Brewkas Finally shown silence implies consent principle included straightforwardly optional component marking unconﬁrmed premises explicitly conceded retracted opponent In principle kind speciﬁcations presented paper expressed temporal reasoning formalisms The C language number important features led choose basis developments First comparatively expressive formalism ﬁne control specifying default persistence ﬂuent constants The availability static laws means things complex speciﬁcations given structure For example rules deﬁning proper timely constants paper expressed static laws simple conjunctions conditions Additional structure provided introducing suitably chosen intermediate concepts ﬂuent winning example deﬁned means static laws This ability important large speciﬁcations undertaken Second semantics translation formalism nonmonotonic causal theories 22 C action description explicit semantics terms transition systems This important provides link wide range formalisms tools based transition systems We able devise example extended form C speciﬁcally designed representing norms institutions 5759 including direct support version counts relation actions 27 treatment permittedforbidden states transitions runs The relationship permitted obligatory actions presented paper instance formulated explicitly C speciﬁcation Section 73 built semantics language extended version The development extended form C took place parallel methods presented paper leave presentation separate paper Moreover relationship obligations noncompliant behaviour sanctions protocol speciﬁcations instance Section 74 notion permission built extended C language needs explored fully The language C derivatives important limitations Most obviously representational point view language inherits limitations transition systems particular executable actions transitions given state s effects depend state s path history state s reached course encode entire history state s The C language underlying formalism causal theories express causes relationships successive states delayed effects expressed directly This makes detailed formulation object mechanism awkward ﬁddly express C chose omit details paper But 14 modiﬁed form C express delayed effects In protocols moves available participant depend entire history protocol far participant restricted number repeated claims instance limitations easily overcome Extensions C capable expressing constraints concise manner direction current research From point view implementation CCALC provides immediate convenient means implement ing C action descriptions The execution RTFD speciﬁcation conﬁrmed previous experience CCALCs efﬁciency particular provide practical means supporting runtime ac tivities Section 9 A major limitation course need encode underlying logic disputation means explicit instances implies ﬂuent constants This clearly works small examples It requires able specify outset complete set propositions default rules claimed argumentation Whilst possible improve efﬁciency CCALC imple mentation precompiling action description implies constants rigid principle recompiling action description time protagonist claims new unanticipated proposition clearly practical way supporting runtime activities It adequate conducting computational experiments speciﬁcation kind discussed Section 9 The logic disputation examples section trivial chosen deliberately sample runs small presented CCALC means C action descriptions executed We versions Event Calculus specify execute earlier version RTFD protocol 3 Sections 610612 Given instance speciﬁcation narrativea record actions performed farthis Prolog implementation allows protocol states including permitted obligatory state queried computed efﬁciently It necessary specify propositions advance comparatively easy 802 A Artikis et al Artiﬁcial Intelligence 171 2007 776804 implement underlying logic disputation Prolog module added protocol speciﬁcation The Event Calculus implementation suited planning postdiction tasks More importantly lose explicit transition semantics single important advantage C formulation A discussion comparing use C Event Calculus developing executable speciﬁcations multiagent protocols including argumentation protocols 5 Recent work Craven 13 investigated relationships Event Calculus C His EC imple mentation provides efﬁcient Event Calculus style computation narratives restricted form C language providing promising means supporting runtime activities He exploited transition semantics connect C model checking software speciﬁcally NuSMV 12 This allows protocol properties expressed Liner Temporal Logic LTL Computation Tree Logic CTL veriﬁed means standard model checking techniques protocol speciﬁcations expressed C language An area future work investigate types property especially types property identiﬁed argumentation protocols exam ple 48 Section 8 36 expressed means LTL CTL proven protocols formalised C Acknowledgements This article updated extended version 4 We grateful reviewers participants ICAIL03 gave useful feedback We like thank Joohyung Lee Vladimir Lifschitz suggestions C language CCALC The authors solely responsible misunderstanding use technologies This work supported partly EU ALFEBIITE Project IST199910298 partly EPSRC project Theory Technology NormGoverned SelfOrganising Networks GR S74911 01 References 1 V Akman S Erdogan J Lee V Lifschitz H Turner Representing zoo world trafﬁc world language Causal Calculator Artiﬁcial Intelligence 153 12 2004 105140 2 L Amgoud N Maudet S Parsons Modelling dialogues argumentation Proceedings International Conference Multiagent Systems ICMAS IEEE Computer Society 2000 pp 3138 3 A Artikis Executable speciﬁcation open normgoverned computational systems PhD thesis University London November 2003 Retrieved March 6 2006 httpwwwiitdemokritosgraartikispublicationsartikisphdpdf available author 4 A Artikis M Sergot J Pitt An executable speciﬁcation argumentation protocol Proceedings Conference Artiﬁcial Intelligence Law ICAIL ACM Press 2003 pp 111 5 A Artikis M Sergot J Pitt Specifying normgoverned computational societies Technical Report 20065 Imperial College London Depart ment Computing 2006 Retrieved March 6 2006 httpwwwdocicacukresearchtechnicalreports2006DTR065pdf 6 L Bodenstaff H Prakken G Vreeswijk On formalising dialogue systems argumentation event calculus Proceedings Work shop NonMonotonic Reasoning 2006 7 A Bondarenko PM Dung R Kowalski F Toni An abstract argumentationtheoretic approach default reasoning Artiﬁcial Intelligence 93 1997 63101 8 G Brewka Dynamic argument systems formal model argumentation processes based situation calculus Journal Logic Com putation 11 2 2001 257282 9 G Brewka T Eiter Prioritizing default logic Festschrift 60th Anniversary W Bibel Kluwer 1998 10 C Cayrol On relation argumentation coherence based entailment Proceedings International Joint Conference Artiﬁcial Intelligence IJCAI 1995 pp 14431448 11 C Chesñevar A Maguitman R Loui Logical models argument ACM Computing Surveys 32 4 2000 337383 12 A Cimatti E Clarke E Giunchiglia F Giunchiglia M Pistore M Roveri R Sebastiani A Tacchella NuSMV version 2 An opensource tool symbolic model checking Proc International Conference ComputerAided Veriﬁcation CAV 2002 Copenhagen July 2002 Lecture Notes Computer Science vol 2404 Springer 2002 httpnusmvirstitcit 13 R Craven Execution mechanisms action language C PhD thesis University London September 2006 14 R Craven M Sergot Distant causation C Studia Logica 79 1 2005 7396 15 PM Dung On acceptability arguments fundamental role nonmonotonic reasoning logic programming nperson games Artiﬁcial Intelligence 77 2 1995 321358 16 M Esteva D la Cruz C Sierra ISLANDER electronic institutions editor C Castelfranchi L Johnson Eds Proceedings Conference Autonomous Agents MultiAgent Systems AAMAS ACM Press 2002 pp 10451052 17 M Esteva J Padget C Sierra Formalizing language institutions norms JJ Meyer M Tambe Eds Intelligent Agents VIII Agent Theories Architectures Languages Lecture Notes Artiﬁcial Intelligence vol 2333 Springer 2002 pp 348366 A Artikis et al Artiﬁcial Intelligence 171 2007 776804 803 18 M Esteva J RodriguezAguilar J Arcos C Sierra P Garcia Institutionalising open multiagent systems E Durfee Ed Proceedings International Conference Multiagent Systems ICMAS IEEE Press 2000 pp 381382 19 M Esteva J RodriguezAguilar C Sierra P Garcia J Arcos On formal speciﬁcations electronic institutions F Dignum C Sierra Eds Agent Mediated Electronic Commerce Lecture Notes Artiﬁcial Intelligence vol 1991 Springer 2001 pp 126147 20 D Fitoussi M Tennenholtz Choosing social laws multiagent systems minimality simplicity Artiﬁcial Intelligence 119 12 2000 61101 21 J Fulda The logic improper cross Artiﬁcial Intelligence Law 8 4 2001 337341 22 E Giunchiglia J Lee V Lifschitz N McCain H Turner Nonmonotonic causal theories Artiﬁcial Intelligence 153 12 2004 49104 23 E Giunchiglia J Lee V Lifschitz H Turner Causal laws multivalued ﬂuents Proceedings Workshop Nonmonotonic Reason ing Action Change NRAC 2001 24 T Gordon The pleadings game exercise computational dialectics Artiﬁcial Intelligence Law 2 1994 239292 25 T Gordon The Pleadings Game An Artiﬁcial Intelligence Model Procedural Justice Kluwer Academic Publishers 1995 26 A Jones M Sergot On characterisation law systems normative systems perspective Deontic Logic Computer Science Normative System Speciﬁcation J Wiley Sons 1993 pp 275307 27 A Jones M Sergot A formal characterisation institutionalised power Journal IGPL 4 3 1996 429445 28 M Klein J RodriguezAguilar C Dellarocas Using domainindependent exception handling services enable robust open multiagent systems case agent death Journal Autonomous Agents MultiAgent Systems 7 12 2003 179189 29 R Kowalski M Sergot A logicbased calculus events New Generation Computing 4 1 1986 6796 30 S Kraus K Sycara A Evenchik Reaching agreements argumentation logical model implementation Artiﬁcial Intelli gence 104 12 1998 169 31 P Krause S Ambler J Fox A logic argumentation uncertain reasoning Computational Intelligence 11 1 1995 113131 32 J Lee V Lifschitz H Turner A representation zoo world language Causal Calculator Proceedings Symposium Formalizations Commonsense Knowledge 2001 33 V Lifschitz Missionaries cannibals Causal Calculator A Cohn F Giunchiglia B Selman Eds Proceedings Conference Principles Knowledge Representation Reasoning KR Morgan Kaufmann 2000 pp 8596 34 V Lifschitz N Mccain E Remolina A Tacchella Getting airport oldest planning problem AI J Minker Ed LogicBased Artiﬁcial Intelligence Kluwer 2000 pp 147168 35 D Makinson On formal representation rights relations Journal Philosophical Logic 15 1986 403425 36 P McBurney S Parsons M Wooldridge Desiderata agent argumentation protocols C Castelfranchi L Johnson Eds Proceedings Conference Autonomous Agents MultiAgent Systems AAMAS ACM Press 2002 pp 402409 37 N Minsky V Ungureanu Lawgoverned interaction coordination control mechanism heterogeneous distributed systems ACM Transactions Software Engineering Methodology TOSEM 9 3 2000 273305 38 Y Moses M Tennenholtz On computational aspects artiﬁcial social systems Proceedings Workshop Distributed Artiﬁcial Intelligence DAI 1992 pp 267284 39 Y Moses M Tennenholtz Artiﬁcial social systems Computers Artiﬁcial Intelligence 14 6 1995 533562 40 S Parsons P McBurney Argumentationbased communication agents Communication Multiagent Systems Lecture Notes Computer Science vol 2650 Springer 2003 pp 164178 41 S Parsons M Wooldridge L Amgoud An analysis formal interagent dialogues Proceedings Conference Autonomous Agents MultiAgent Systems ACM Press 2002 pp 394401 42 S Parsons M Wooldridge L Amgoud On outcomes formal interagent dialogues Proceedings Conference Autonomous Agents MultiAgent Systems ACM Press 2003 pp 616623 43 S Parsons M Wooldridge L Amgoud Properties complexity formal interagent dialogues Journal Logic Computa tion 13 3 2003 347376 44 J Pollock Oscara general purpose defeasible reasoner Journal Applied NonClassical Logics 6 1 1996 89113 45 H Prakken Formalising Roberts rules order Technical Report 12 GMDGerman National Research Center Information Technology 1998 46 H Prakken On dialogue systems speech acts arguments counterarguments Proceedings Workshop Logics Artiﬁcial Intelligence Lecture Notes Artiﬁcial Intelligence vol 1919 Springer 2000 pp 224238 47 H Prakken Coherence ﬂexibility dialogue games argumentation Journal Logic Computation 15 2005 10091040 48 H Prakken Formal systems persuasion dialogue Knowledge Engineering Review 21 2 2006 163188 49 H Prakken T Gordon Rules order electronic group decision makinga formalization methodology J Padget Ed Collaboration Human Artiﬁcial Societies Lecture Notes Computer Science vol 1624 Springer 1999 pp 246263 50 H Prakken G Sartor Argumentbased extended logic programming defeasible priorities Journal Applied NonClassical Logics 7 1 1997 2575 51 H Prakken G Vreeswijk Logics defeasible argumentation D Gabbay F Guenthner Eds Handbook Philosophical Logic vol 4 Kluwer Academic Publishers 2002 pp 218319 52 R Reiter Knowledge Action Logical Foundations Describing Implementing Dynamical Systems The MIT Press 2001 53 N Rescher Dialectics A ControversyOriented Approach Theory Knowledge State University New York Press 1977 54 J RodriguezAguilar F Martin P Noriega P Garcia C Sierra Towards testbed trading agents electronic auction markets AI Communications 11 1 1998 519 55 J RodriguezAguilar C Sierra Enabling open agent institutions K Dautenhahn A Bond L Canamero B Edmonds Eds Socially Intelligent Agents Creating Relationships Computers Robots Kluwer Academic Publishers 2002 pp 259266 804 A Artikis et al Artiﬁcial Intelligence 171 2007 776804 56 J Searle Speech Acts Cambridge University Press 1969 57 M Sergot C An action language modelling norms institutions Technical Report 20048 Department Computing Imperial College London 2004 Retrieved March 6 2006 httpwwwdocicacukresearchtechnicalreports2004DTR048pdf 58 M Sergot Modelling unreliable untrustworthy agent behaviour B DuninKeplicz A Jankowski A Skowron M Szczuka Eds Proceedings Workshop Monitoring Security Rescue Techniques Multiagent Systems MSRAS Advances Soft Computing Springer 2004 pp 161178 59 M Sergot R Craven The deontic component action language nC L Goble JJC Meyer Eds Deontic Logic Artiﬁcial Normative Systems Proc 8th International Workshop Deontic Logic Computer Science DEON06 Utrecht July 2006 Lecture Notes Artiﬁcial Intelligence vol 4048 Springer 2006 pp 222237 60 M Shanahan The event calculus explained M Wooldridge M Veloso Eds Artiﬁcial Intelligence Today Lecture Notes Artiﬁcial Intelligence vol 1600 Springer 1999 pp 409430 61 M Shanahan An abductive event calculus planner Journal Logic Programming 44 2000 207239 62 Y Shoham M Tennenholtz On synthesis useful social laws artiﬁcial agent societies W Swartout Ed Proceedings Confer ence Artiﬁcial Intelligence AAAI The AAAI PressThe MIT Press 1992 pp 276281 63 Y Shoham M Tennenholtz On social laws artiﬁcial agent societies offline design Artiﬁcial Intelligence 73 12 1995 231252 64 M Singh A social semantics agent communication languages F Dignum M Greaves Eds Issues Agent Communication Lecture Notes Computer Science vol 1916 Springer 2000 pp 3145 65 M Tennenholtz On computational social laws dynamic nonhomogeneous social structures Journal Experimental Theoretical Artiﬁcial Intelligence 7 1995 379390 66 P Yolum M Singh Flexible protocol speciﬁcation execution applying event calculus planning commitments C Castelfranchi L Johnson Eds Proceedings Conference Autonomous Agents Multiagent Systems AAMAS ACM Press 2002 pp 527535 67 P Yolum M Singh Reasoning commitments event calculus An approach specifying executing protocols Annals Mathematics Artiﬁcial Intelligence 42 13 2004 227253