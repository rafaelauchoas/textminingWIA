Artiﬁcial Intelligence 174 2010 382409 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint On power structural decompositions graphbased representations constraint problems Gianluigi Greco Francesco Scarcello b Dept Mathematics Università della Calabria I87036 Rende Italy b DEIS Università della Calabria I87036 Rende Italy r t c l e n f o b s t r c t Article history Received 21 January 2009 Received revised form 14 December 2009 Accepted 17 December 2009 Available online 4 January 2010 Keywords Constraint satisfaction Decomposition methods Hypergraphs Dual graphs Incidence graphs Primal graphs Treewidth The Constraint Satisfaction Problem CSP central issue research Artiﬁcial Intelligence Due intractability efforts order identify tractable classes CSP instances fact deep useful results achieved In particular paper focuses structural decomposition methods essentially meant look nearacyclicity properties graphs hypergraphs encode structure constraints interactions In general constraint scopes comprise arbitrary number variables structure naturally encoded hypergraphs However practical applications decomposition methods applied suitable graph representations possibly nonbinary CSP instances hand Despite great binary approaches formal analysis power terms ability identifying islands tractability missing literature The aim paper precisely ﬁll gap studying relationships binary structural methods providing clear picture tractable fragments CSP speciﬁed respect decomposition approaches applied binary representations nonbinary CSP instances In particular longstanding questions primal dual incidence graph encodings answered The picture completed comparing methods binary encodings methods speciﬁcally conceived nonbinary constraints 2009 Elsevier BV All rights reserved 1 Introduction summary results Constraint satisfaction central issue research Artiﬁcial Intelligence areas science fact impressive spectrum applications ranging scheduling preferences deadlines temporal reasoning machine learning plan design cite Formally constraint S R consists constraint scope S list variables associated constraint relation ri containing legal combinations values variables S An instance constraint satisfaction problem CSP called constraint network 6 triple I Var U C Var ﬁnite set variables U ﬁnite domain values C C1 C2 Cq ﬁnite set constraints A solution CSP instance substitution ϑ Var U constraints simultaneously satisﬁed 1 cid2 cid2 q S iϑ ri By solving CSP mean determining problem solution checking constraint satisﬁability computing solution Corresponding author Tel 39 0984 494752 fax 39 0984 494713 Email addresses ggrecomatunicalit G Greco scarcellodeisunicalit F Scarcello 00043702 matter 2009 Elsevier BV All rights reserved doi101016jartint200912004 G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 383 Fig 1 A solution 4queens problem b crossword puzzle Example 11 nqueens Consider problem placing n queens n rows chessboard queen capture queen This problem formalized constraint satisfaction problem follows The set Var contains variable Q queen placed ith row U 1 n represents columns queen placed pair distinct queens Q Q j set C contains constraint Ci j Q Q j cid5pi p jcid6 pi cid7 p j pi p j cid7 j stating intuitively queens placed column diagonal board As example n 3 problem admit solutions Instead n 4 possible solution substitution ϑ Q 1ϑ 3 Q 2ϑ 1 Q 3ϑ 4 Q 4ϑ 2 This solution depicted Fig 1a Note nqueens problem constraint deﬁned variables example binary CSP In scenarios instead natural deﬁne constraints variables leading general case nonbinary CSPs Example 12 Crossword puzzle Fig 1b shows combinatorial crossword puzzle taken 10 typical non binary CSP 6 A set legal words associated horizontal vertical array white boxes delimited black boxes A solution puzzle assignment letter white box white array assigned word set legal words This problem recast CSP follows There variable Xi white box constraint C array D white boxes For simplicity write index variable Xi The scope C list variables corresponding white boxes sequence D relation C contains legal words D For example Fig 1 C1H 1 2 3 4 5 r1H C8H 8 9 10 r8H C11H 11 12 13 r11H C20H 20 21 22 23 24 25 26 r20H C1V 1 7 11 16 20 r1V C5V 5 8 14 18 24 r5V C6V 6 10 15 19 26 r6V C13V 13 17 22 r13V Subscripts H V stand Horizontal Vertical respectively resembling usual nam ing deﬁnitions crossword puzzles A possible instance relation r1H cid5h o u s ecid6 cid5c o n scid6 cid5b l o c kcid6 It known easy constraint satisﬁability NPcomplete problem restricted binary instances encode example graph colouring Hence effort spent identify tractable classes CSPs deep useful results achieved literature In fact successful approaches single tractable CSP classes divided main groups 410 Techniques look tractable classes basis structure constraint scopes S 1 Sq indepen dently actual constraint relations r1 rq ii Techniques exploit peculiar properties combinatorial properties underlying algebras straint relations r1 rq In paper shall deal kind techniques usually called structural decomposition methods 11 Structural decomposition methods Much nature constraint scope interactions captured constraint hypergraph HI V H associated CSP instance I Var U C V Var H varS C S r C varS denotes set variables scope S constraint C following denote set vertices V N H set hyperedges H EH For instance Fig 2 shows hypergraph Hcp associated crossword puzzle Example 12 A fundamental property hypergraphs acyclicity 29 Indeed observed constraint satis ﬁability feasible polynomial time class CSP instances associated hypergraphs acyclic 384 G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 Fig 2 Hypergraph Hcp crossword puzzle Example 12 10 However practice constraint hypergraphs hardly acyclic instance hypergraph Hcp Fig 2 acyclic intricate Therefore great deal literature identifying tractable classes constraint satisfaction problem instances looking nearly acyclic structures characterized structural decomposition methods 561022 These methods aim transforming given cyclic hypergraph acyclic organizing edges nodes polynomial number clusters suitably arranging clusters tree called decomposition tree The original problem instance evaluated decom position tree cost exponential cardinality largest cluster called width decomposition In fact earliest decomposition techniques designed solve binary CSPs nqueens problem Example 11 designed deal scenarios constraint hypergraph actually graph binary graph methods Subsequently methods proposed capable working constraint hypergraph assuming bound number variables involved constraints limiting applicability special case binary CSPs In particular research currently aimed deﬁning completely novel methods exploiting information encoded constraint hypergraph nonbinary hypergraphbased methods However attempts deal general nonbinary constraint problems historically conceived reuse existent methods binary CSPs representing instance I graph hypergraph HI With respect natural idea widely exploited literature use representative graph primal graph HI deﬁned follows Primalgraph representation Given hypergraph H primal graph Gaifman graph denoted GH N E graph set nodes N set variables N H edges connect pair nodes vari ables occurring constraint I E V 1 V 2 V 1 V 2 N H h EH st V 1 V 2 h For example Fig 3a shows primal graph Hcp Clearly evident loss information primal graph instead constraint hypergraph For instance constraint scope I induces clique primal graph If looks graph way understand clique comes single scope actually intricate interactions constraints scopes In fact deep comparison structural decomposition methods applied primal graph carried 10 shown hypertree 12 decomposition method short HYPERTREEwhich instead directly applies constraint hypergraphis powerful known techniques working primal graphs Besides primalgraph representation graphbased representations nonbinary CSP instances described literature instead marginally considered 10 Dualgraph representation 6 Given hypergraph H dual graph denoted dualH N E graph set nodes N set hyperedges EH edges connect pair nodes hyperedges having variable common E h1 h2 h1 h2 EH h1 h2 cid7 For example Fig 3b shows dual graph Hcp Incidencegraph representation1 233 Given hypergraph H deﬁne incidence graph bipartite graph incH N E N EH N H E h h EH h contains edge h node h For example Fig 3c shows incidence graph Hcp 1 Also known hiddenvariable encoding G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 385 Fig 3 Binary representations Hcp primal graph b dual graph c incidence graph A ﬁrst comparison dualgraph incidencegraph encodings carried 1 light assessing performances forward checking maintaining arc consistency algorithms However formal comparison reported literature focused intrinsic power structural decomposition methods based binary encodings In fact longstanding questions relationships methods relationships hypergraphbased techniques In particular dualgraph encodings received attention literature deep understanding properties missing One major diﬃculties precise formal analysis dualgraph based methods important feature encoding Some edges dual graph safely removed making evaluation CSPs easier Indeed dualH appears intricate possible ﬁnd suitable simpliﬁcations useful shall formally discuss Section 3 Such simpliﬁed graphs called reducts dualH For instance H acyclic known polynomial time algorithm builds acyclic reduct dual graph However generalizations acyclicity concerned dealing reducts easy different removal choices lead different performances evaluation algorithms Therefore following challenge comes play analyzing decomposition methods based dualgraph encoding 1 The eﬃciency technique based dual graph crucially depends availability good algo rithmmethodology simpliﬁcation But ﬁnding optimal reduct wrt technique hand diﬃcult task relevant decomposition techniques currently known feasible polynomial time As matter fact results literature provide rough bounds power decomposition methods applied dual graphs pragmatically allowing simpliﬁcation theoretical analysis exploiting heuristic approaches As example Gyssens et al 15 contrasted notion hinge decompositions short HINGE notion biconnected components 8 dual graph short BICOMPd It turned HINGE generalization BICOMPd hinge decomposition technique worse biconnected compo nents technique However precise relationship methods remained open question Indeed observed biconnected componentsand largest cardinalitiesmay differ possible reducts dual graph Similarly results known power decomposition methods applied incidencegraph encodings particular compare binary encodings Indeed 2 It known tree decomposition method 20 applied incidence graph short TREEDECOMPin identifying tractable classes nonbinary CSPs 18 tree decomposition applied primal dual graph short TREEDECOMPp TREEDECOMPd respectively However thorough analysis 386 G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 power methods carried known encodings deﬁnitively better possible applications tree decompositions Finally little known binary methods compare hypergraphbased techniques Indeed 3 While known TREEDECOMPoptd deﬁnitively powerful HYPERTREE cf 10 actual reason big difference wellunderstood ﬁrst glance kind tree labelling methods similar In addition known HYPERTREE compares TREEDECOMPin hypergraphbased methods spread cuts 5 decomposition method short SPREADCUT component hypertree 13 decomposition method short CHYPERTREE compare general binary meth ods 12 Main results In paper embark systematic analysis formal properties decomposition power dual incidencegraph encodings complementing results 10 mainly focused primal graph representation In particular face issue 1 pertaining dualgraph encodings ﬁll gaps discussed 2 3 incidence graphs hypergraphbased methods Moreover investigate decomposition methods earlier introduced literature combination results leads complete clear picture relationships decomposition methods applied binary representations general CSP instances relationships methods hypergraphbased techniques In order carry analysis adopt criteria introduced 10 later papers structural methods 5 pair decomposition methods compared according ability identifying tractable classes CSPs Informally method D2 generalizes method D1 CSP tractable according D1 tractable according D2 D2width smaller D1width instance D2 beats D1 CSPs tractable according D2 according D1 D2 strongly generalizes D1 D2 generalizes beats D1 D1 D2 equivalent D1 generalizes D2 D2 generalizes D1 Note results comparing widths structural methods provide information methods decompose given instancespreparatory solving themrather saying tractable classes speciﬁable Indeed running time algorithm solving CSPs method considered paper exponential corresponding notion width unexpected event occurs theory parameterized complexity 7 This easily seen observing kclique problem graph G V E encoded binary CSP instance IG k variables X1 Xk domain V k k 12 constraints Xi X j E 1 cid2 j cid2 k By exploiting encoding immediately follows kclique fpreducible solving bounded Dwidth CSP instances D method considered paper solving CSPs techniques W1hard2 Therefore collapse occurs weft hierarchy complexity classes 7 algorithm solving instances run time O n f w w Dwidth f w functionthat believed Ω w dualgraph methods Ωw barrier O nΩk broken deeply studied W1 hard problems kclique kindependent set kdominating set Therefore typical dynamic programming approach based Yannakakiss algorithm cost O nw1 log nsee 22 likely optimal algorithmic breakthrough expected improve signiﬁcantly running time In particular complexity assumptions possible ﬁnd algorithm exponential dependency width factor polynomial input size better form O c w 1 nc2 c1 c2 ﬁxed constantssee 14 21 results issues good news classes instances additional parameters ﬁxed Dwidth Thus given class CSP instances meaningful consider D1width instances bounded according structural method D1 large widths especially compared widths method D2 In particular relevant relationship paper following Consider pair structural methods D1 D2 D1 beats D2 D1width exponentially larger D2width CSP instance Therefore D2 beat D1 class CSP instances D2width bounded cid16 cid2 expk Hence class tractable according D2 constant k D1width bounded constant k tractable according D1 However assume know upperbound width strict class C CSP instances D2width bounded k cid3 1 D1width exponentially larger D2width Even C tractable according D1 practice method D2 preferred D1 class Indeed lower bounds expect algorithm based D1 worst case solving CSP instances C perform bad compared algorithms exploiting D2 Interestingly occurrences relationship structural methods come comparing tech niques based different graph encodings To properly deal formally deﬁne notion weak generalization 2 In fact wellknown ﬁxedparameter intractability proof kbounded treewidth instances 14 G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 387 pair D1 D2 D1 weakly generalizes D2 Note term generalization fact class tractable according D1 tractable according D2 term weak recalls D1 useless class instances D2 useful instead Thus theory D1 slightly better D2 practice methods incomparable choice depending speciﬁc kind problems solved Armed notions comparison criteria outline contribution In ﬁrst paper study dualgraph encoding Note method ﬁnding reduct speciﬁed compare decomposition methods loosely To deal issue preliminarily deﬁne method D method Doptd method D applied optimal reduct dual graph respect D reduct dual graph having minimum possible Dwidth We ﬁrst Theorem 33 decomposition method possibly arbitrary reduction algorithm beats andor generalizes relationship true considering optimal reducts Moreover widths decomposition methods applied optimal reducts dual graphs welldeﬁned methods precisely compared methods according criteria Then based notion cid2 We answer question ﬁrstly faced Gyssens et al 15 proving BICOMPoptd equivalent HINGE In fact hinge decomposition corresponds biconnectedcomponents tree reduct dual graph It worthwhile noting corollary result obtain BICOMPoptd method optimal reduct dual graph computed polynomial time hinge decomposition computed polynomial time 15 cid2 We consider tree decomposition method applied optimal reduct dual graph short TREEDECOMPoptd method deﬁnitively better method D applied optimal reduct dual graph wrt D In particular TREEDECOMPoptd strongly generalizes biconnectedcomponents method BICOMPoptd HINGE cid2 We establish precise relationship BICOMPoptd methods applied primal graph analyzed 10 biconnectedcomponents method primal graph short BICOMPp cutset 16 decomposition primal graph short CUTSETp tree decomposition method 20 applied primal graph TREEDECOMPp cid2 We introduce novel decomposition method called weak query decomposition short weakQUERYDECOMP shed light precise decomposition power TREEDECOMPoptd overcome technical diﬃculties comparing notion techniques It deﬁned constraint hypergraph essentially decomposition power TREEDECOMPoptd formally weakQUERYDECOMP 2approximation TREEDECOMPoptd Therefore method require computation reduct place TREEDECOMPoptd equivalent This relationship interesting weakQUERYDECOMP tractable notion ﬁnding appropriate way simplifying dualgraph wrt tree decomposition method known challenging problem cf 18 In second paper turn analysis incidencegraph representation speciﬁcally tree decomposition method applied TREEDECOMPin In particular cid2 We TREEDECOMPin incomparable HINGE HINGE beats TREEDECOMPin TREEDECOMPin beats turn HINGE This result evidences TREEDECOMPin behaves signiﬁcantly different TREEDECOMPoptd given method strongly generalizes HINGE cid2 We compare TREEDECOMPin TREEDECOMPoptd It turns CSP classes tractable according TREEDECOMPoptd tractable according TREEDECOMPin However TREEDECOMPoptd strongly generalize TREEDECOMPin Indeed classes CSPs incidencegraph treewidth bounded constant k width optimal reduct dual graph exponentially larger Thus classes tractable evaluation eﬃcient TREEDECOMPin It follows methods useful kind CSP instances deﬁnitely better choice TREEDECOMPoptd bit powerful cid2 We relationships TREEDECOMPin TREEDECOMPoptd hold pair binary decomposition methods applied dual incidence graph respectively Therefore encodings turn useful kind CSP instance cid2 We exploit connections TREEDECOMPin TREEDECOMPoptd weakQUERYDECOMP order analyze properties tree decomposition method applied dual incidence graphs We widthk decomposition incidence graph transformed weak query decomposition having width 2k1 tree decomposition dual graph width bounded 2 2k1 In fact TREEDECOMPoptd weakly generalizes TREEDECOMPin exactly capturing relationship notions 388 G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 In paper consider primalgraph representation compare methods dual incidence graphs discussed earlier Speciﬁcally cid2 We consider problem comparing tree decomposition method primal graph TREEDECOMPp method incidence graph TREEDECOMPin raised 18 Indeed formalize adapt hints 18 formally TREEDECOMPin strongly generalizes TREEDECOMPp cid2 We method applied dual graph deﬁnitively superior method applied primal graph precisely case comparison dualgraph incidencegraph encodings In particular TREEDECOMPoptd weakly generalizes TREEDECOMPp CUTSETp BICOMPp Finally consider problem deciding binary methods studied paper superior mentioned hypergraphbased decomposition methods With respect cid2 We ﬁrst focus hypergraphbased query decomposition 3 method short QUERYDECOMP QUERYDECOMP strongly generalizes TREEDECOMP method independent applied primal dual incidence graph Then tractable hypergraphbased decomposition methods consider deﬁned generalize QUERYDECOMP conclude turn strongly generalizes TREEDECOMPp TREEDECOMPoptd TREEDECOMPin cid2 Finally shed light big difference TREEDECOMPoptd emerged analysis powerful method binary encodings hypergraphbased methods To end exploit weakQUERYDECOMP method approximates TREEDECOMPoptd special case QUERYDECOMP 13 The overall picture A summary results illustrated Fig 4 QUERYDECOMP depicted gray tractable notion 12 Three kinds arrows dotted dashed solid denote relationships generalization weak generalization strong generalization respectively Note picture complete For instance strong generalization transitive relationship path solid lines D1 D2 implicitly means D2 strongly generalizes D1 Moreover D2 strongly weakly generalizes D1 actually shown paper known literature D2 D1 incomparable arrow connects picture Observe power binary methods essentially bounded weakQUERYDECOMP QUERYDECOMP generalized hypergraphbased methods Moreover picture evidences binary method applied kind encoding strongly generalized QUERYDECOMP Then argued su perior power hypergraphbased methods precisely lies capability jointly sets hyperedges decompose CSP instance hand capability fact missing weakQUERYDECOMP As relationships binary methods emerges TREEDECOMPin better method applied primal graph However note TREEDECOMPoptd weakly generalizes graph methods strongly generalizes BICOMPoptd Organization The rest paper organized follows In Section 2 introduce preliminaries decomposition methods deﬁne criteria according methods formally compared Then Section 3 start investigation dualgraph encoding nonbinary CSPs Section 4 contains comparison method TREEDECOMPin HINGE TREEDECOMPoptd Section 5 complete picture investigating power decomposition methods working primal graphs Section 6 reports formal comparison binary methods hypergraphbased decomposition methods Finally Section 7 draw conclusions 2 Structural decomposition methods In section introduce decomposition methods comparison criteria subject research paper 21 Tractable classes constraint satisfaction problems It known CSPs acyclic constraint hypergraphs polynomially solvable 6 In fact known structural properties lead tractable CSP classes explicitly implicitly based generalization acyclicity In particular structural decomposition method D deﬁnes concept width interpreted measure cyclicity underlying constraint hypergraph ﬁxed width k CSPs width bounded k solvable polynomial time This possibly inﬁnite set CSPs called tractability class D wrt k denoted CD k Actually sake simplicity confusion arises shall use CD k denote class hypergraphs associated instances We recall deﬁnitions relevant concepts widths structural decomposition methods 10further hypergraphbased methods discussed Section 6 G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 389 Fig 4 Summary results 390 G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 CUTSET 6 Let G V E graph A cycle cutset G set S V subgraph G vertexinduced V S acyclic That deleting vertices S graph G acyclic The cutset width G 1 G acyclic minimum cardinality possible cycle cutsets TREEDECOMP 20 A tree decomposition graph G V E pair cid5T χ cid6 T N F tree χ labelling function associating vertex p N set nodes χ p V following conditions satisﬁed 1 vertex b G exists p N b χ p 2 edge b d E exists p N b d χ p 3 vertex b G set p N b χ p induces connected subtree T condition usually known connectedness condition The width tree decomposition cid5T χ cid6 maxpN χ p 1 The treewidth G minimum width tree decompositions BICOMP 8 Let G V E graph A vertex p V separating vertex G removing p G number connected components G increases A biconnected component G maximal set vertices C V subgraph G induced C connected remains connected onevertex removal separating vertices The biconnected width G cardinality largest biconnected component G HINGE 1516 Let H hypergraph For set hyperedges H EH slight abuse notation N H hH h Let H EH F edgesH H Then F called connected denote set nodes respect H edges e f F exists sequence e1 en edges F e1 e cid2 hH h iii en f Let C1 Cm maximal ii 1 n 1 ei ei1 contained connected subsets EH H respect H Then H hinge 1 m exists edge hi H N Ci N H hi A hinge minimal contain hinge The hinge width H deﬁned cardinality largest minimal hinge H cid2 QUERYDECOMP 3 The notion query decomposition originally conceived database context conjunctive query optimization Following 12 actually provide slight variation original deﬁnition query decomposition tree vertices labelled hyperedges Indeed results 12 know simpliﬁed notion equivalent original A query decomposition hypergraph H pair cid5T λcid6 T N E tree λ labelling function associates vertex p N set λp EH following conditions hold 1 hyperedge h H exists v N h λv 2 hyperedge h H set v N h λv T pair hyperedges induces connected subtree T 3 pair vertices v v cid16cid16 The width h λv h T h h path connecting v v query decomposition cid5T λcid6 maxvN λp The query width H minimum width query decompositions cid16 vertex v cid16 N λv cid16 λv cid16cid16 cid16 cid16 We point QUERYDECOMP HINGE decomposition methods deﬁned directly applied constraint hypergraph All methods instead binary shall consider application binary encodings constraint hypergraph In particular ﬁnd literature applications CUTSET primal graph CUTSETp BICOMP primal dual graph BICOMPp BICOMPd TREEDECOMP primal dual incidence graph TREEDECOMPp TREEDECOMPd TREEDECOMPin 22 Comparison criteria Any pair decomposition methods D1 D2 compared according ability identifying tractable classes CSPs This approach ﬁrstly formalized 10 following criteria proposed Generalization D2 generalizes D1 D1 cid17 D2 exists constant δ k 0 CD1 k CD2 k δ In practical terms means class constraints tractable according method D1 tractable according D2 Beating D2 beats D1 denoted D2 cid2 D1 exists integer k 0 set C instances C CD2 k C cid2 CD1 m m 0 Hence classes problems tractable according D2 according D1 For classes D2 better D1 Strong generalization D2 strongly generalizes D1 denoted D1 D2 D2 generalizes D1 D2 beats D1 This means D2 powerful given D1 guarantees polynomial runtime constraint solving D2 guarantees tractable constraint solving classes constraints solved polynomial time D2 tractable according D1 Equivalence D1 D2 equivalent denoted D1 D2 D1 generalizes D2 D2 generalizes D1 Intuitively means methods differ signiﬁcantly Finally decomposition methods D1 D2 strongly incomparable D1 cid2 D2 D2 cid2 D1 G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 391 Next state simple properties notions generalization beating strong generalization exploited paper3 Proposition 21 Let D1 D2 D3 decomposition methods Then 1 If D2 cid2 D1 D2 cid17 D3 D3 cid2 D1 2 If D1 cid17 D2 D2 cid17 D3 D1 cid17 D3 3 If D1 D2 D2 cid17 D3 D1 D3 23 Weak generalization The comparison criteria 10 completely classify power methods CUTSETp BICOMPp TREEDECOMPp HINGE HYPERTREE partially method TREEDECOMPd Some results obtained 10 emerge Fig 4 citations arc labels In fact order extend analysis 10 dual incidencegraph encodings need introduce criterium ﬁner notions generalization beating Indeed criteria appropriate capture scenarios method D2 generalize D1 decomposition width k wrt D1 mapped decomposition width k natural number depends k wrt D2 k cid16 cid16 Formally let f nondecreasing function positive natural numbers positive natural numbers Then D2 f generalizes D1 D1 cid17 f D2 k 1 CD1 k CD2 f k holds Thus given hypergraph H exists decomposition H width k wrt D1 exists decomposition H width f k wrt D24 The following simple relevant properties f generalizations Proposition 22 Let D1 D2 decomposition methods Then 1 D1 cid17 D2 implies function f D1 cid17 f D2 2 D1 cid17 f D2 implies D1 cid2 D2 D2 D1 hold Since mainly interested upper bounds strict deﬁne new notion f beating intuitively means class instances function f provides lower bound relationship widths according given methods Let C countably inﬁnite class hypergraphs hypergraph Hi identiﬁed associated natural C C D width function w number let D decomposition method Deﬁne w D n Dwidth hypergraph Hn C Let D1 D2 decomposition methods We D1 f beats D2 exists countably C inﬁnite class C hypergraphs w D1 n An important case f generalization f beating occurs D2 instead D1 leads exponential blow δ 0 ﬁxed Moreover D1 expgeneralizes resp expbeats D2 width From expδ denote exponential function expδn 2 ncid21 rational number For instance exp 1 2 mean exists ﬁxed rational δ 0 D1 expδ generalizes resp expδ beats D2 C D2 n Ωf w cid20 n 2 cid20nδ cid21 Deﬁnition 23 Weak generalization Let D1 D2 decomposition methods Then D2 weakly generalizes D1 denoted D1 cid3 D2 D2 beats D1 ii D2 expgeneralizes D1 iii D1 expbeats D2 Thus D2 weakly generalizes D1 intuitively means D2 slightly powerful D1 Indeed classes constraints solved polynomial time D2 tractable according D1cf condition And class constraints solvable polynomial time D1 solvable polynomial time applying method D2 possibly exponential blowup wrt widthcf ii Moreover know exponential blowup actually occurs class instancescf iii D1 preferable D2 In practice means case clear winner methods actual choice depend speciﬁc class problems solved Of course weak strong generalizations mutually exclusive expbeating condition Some properties weak generalizations stated 3 Proofs preliminary section simple omitted However reported Appendix A sake completeness 4 Note f relationship required hold k 1 instead k 0 case plain generalization 10 Indeed generic function convenient clear technical reasons avoid value k 1 occurs base possible exponential expressions This substantial change CD1 1 CD1 2 CD2 f 2 holds f 392 G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 Fig 5 A hypergraph b dual graph c reduct having treewidth 2 d reduct having treewidth 3 Proposition 24 Let D1 D2 D3 decomposition methods Then 1 D1 weakly generalize D1 cid3 antireﬂexive 2 If D1 cid3 D2 D2 cid3 D1 hold cid3 antisymmetric 3 If D1 cid3 D2 D2 cid17 D3 D1 cid17 D2 D2 cid3 D3 D3 expgeneralizes D1 3 Dualgraph representation In section formalize notion reduct dual graph deﬁne dual graph dualH hypergraph H simpliﬁed safely removing edges Based notion investigate power binary decomposition techniques deﬁned optimal reduct dual graph 31 Reducts basic properties Deﬁnition 31 Reduct Let dualH N E dual graph hypergraph H A reduct G satisfying following conditions cid16 dualH graph N cid16 E cid16 cid16 N 1 N cid16 E 2 E 3 edge h h cid16 belonging E E cid16 exists G cid16 path h h1 hn h cid16 included hi hi1 1 cid2 n That variables shared h h h h edge connecting deleted dual graph cid16 variables h h occur path cid16 cid16 It observed literature 15 CSP instance solved applying binary methods originally conceived dual graph BICOMPd TREEDECOMPd arbitrary reduct dual graph given instance This great advantage edge deletions signiﬁcantly simplify intricacy dual graph width However different removal choices lead different widths general Consider instance hypergraph shown Fig 5a associated dual graph b Then easy graphs reported c d reducts dual graph reduct c treewidth 2 reduct d treewidth 3 In case use TREEDECOMPd convenient solve CSP instance reduct c Note conclusion depends technique want use graph It possible different dualgraph technique D reduct smaller Dwidth reduct c preferable wrt D Therefore order maximum power binary decomposition method D applied dual graph dualH deﬁne Doptdwidth dualH minimum Dwidth w possible reducts Any reduct dualH Dwidth w said optimal reduct Moreover method D applied optimal reduct dualH denoted Doptd Note applying graph methods D1 D2 respective optimal reducts alter relative power optd D1 preferable D2 This formalized useful construction optd remains preferable D2 D1 irreducible dual graphs Lemma 32 For graph G exists hypergraph HG G isomorphic dualHG dualHG irreducible G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 393 Fig 6 Example construction Lemma 32 graph G b corresponding hypergraph HG Proof Let G graph let HG hypergraph deﬁned follows edge q G HG contains node nq node v G HG contains hyperedge hv consisting nodes nq v q nodes hyperedges HG An example construction illustrated Fig 6 Note dual graph dualHG edge hv 1 hv 2 node nq occurs hv 1 hv 2 v 1 q v 2 q q v 1 v 2 Moreover edge dualHG hv 1 hv 2 removed nq contained hyperedge HG construction cid3 Theorem 33 Let D1 D2 graph decomposition methods Then 1 D2 cid17 D1 implies D2 2 D1 cid2 D2 implies D1 3 D2 D1 implies D1 optd cid17 D1 optd cid2 D2 optd D2 optd optd optd Proof optd k 1 Recall Doptd represents method D given hypergraph H applied reduct dual graph having minimum width wrt D possible reducts dualH We denote optimal reduct optDdH Since D2 cid17 D1 deﬁnition constant δ k CD2 k CD1 k δ We claim optd k δ To claim holds consider optd k CD1 constant δ holds k CD2 instance H width wrt D2 optd k cid16 dH Since D2 cid17 D1 width wrt D1 graph optd k By deﬁnition method D2 width wrt D2 optD2 cid16 δ k δ Thus reduct dualH D1width dH bounded k optD2 k δ It follows k δ upper bound width optimal reducts dualH wrt D1 Then H belongs CD1 cid16 cid2 k H belongs CD2 optd k δ cid16 0 natural number Gmcid16 graph C1 belong CD2 m 2 Since D1 beats D2 exists integer k set graphs C1 CD1 k C1 cid2 CD2 m m 0 cid16 From Lemma 32 Then let m exists hypergraph HGmcid16 Gmcid16 isomorphic dualHGmcid16 dualHGmcid16 best possible reduct Then observe application graph method D1 resp D2 dual graph dualHGmcid16 coincides optd HGmcid16 reduction dual graph possible Since dualHGmcid16 application D1 isomorphic Gmcid16 applying graph techniques dualHGmcid16 clearly working Gmcid16 It follows cid16 Therefore class C2 HG G HGmcid16 belongs CD1 C1 CD1 k included CD2 optd cid2 D2 optd m optd m m 0 Thus D1 optd k HGmcid16 belong CD2 optd resp D2 optd 3 Immediately follows previous points deﬁnition cid3 In light characterizations conclude results proven 10 primal graph encoding implicitly binary CSPs hold fact methods applied optimal reduct dual graph As example given BICOMP TREEDECOMP shown hold following Corollary 34 BICOMPoptd TREEDECOMPoptd In particular TREEDECOMP strongly generalizes decomposition methods tailored binary CSPs 10 TREEDECOMPoptd deﬁnitively best method applied nonbinary CSPs methods work dualgraph encodings However recall known algorithms computing kbounded tree decomposition graph exponential k polynomial ﬁxed constant k computing biconnected components graph linear task independently width 15 This technique useful size structure bound k large powerful methods like TREEDECOMP expensive Yet order practically 394 G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 exploit BICOMP dual graph remains assess optimal reduct wrt method eﬃciently computed question shall face 32 Biconnected components versus hinges In 15 shown HINGE method generalizes BICOMP applied reduct dual graph However paper observed ﬁne comparison methods diﬃcult obvious way ﬁnd suitable reduct dual graph biconnected width small Here solve question showing possible ﬁnd reduct dual graph biconnected width equal hinge width H First recall 5 deﬁnition hingetree decomposition slightly adapted notations paper A hingetree decomposition hypergraph H pair cid5T λcid6 T N E tree λ labelling function associates vertex p N set λp EH following conditions hold 1 hyperedge h H exists v N h λv 2 node b N H set v N h λv b h induces connected subtree T 3 pair vertices v v T edge h λv cid16 h The width hingetree decomposition cid5T λcid6 maxvN λv The hinge width H coincides N λv N λv minimum width hingetree decompositions 5 cid16 In order establish main result section need preliminary state properties hingetree decom positions reduced hypergraphs hypergraphs hyperedge properly contained hyperedge connected hypergraphs thats hypergraphs pair nodes connected path primal graph Lemma 35 Let H hypergraph let cid5T λcid6 hingetree decomposition H let v v cid16 distinct vertices T 1 If H reduced λv λv 2 If H connected λv cid3 2 hyperedge h λv hyperedge h λv h h h cid7 That path connecting T vertices v v cid16cid16 holds vertex v cid16 λv cid16cid16 cid16 isolated hyperedges λ labels Proof cid16 cid16 1 Let v v 1 vn v n 1 path T connecting distinct vertices v v Let h cid16 By condition 2 deﬁnition hingetree decompositions 1 cid2 n hyperedge λv λv h N λv N λv i1 Moreover condition 3 deﬁnition vertices v v i1 T hyperedge hi λv N λv N λv i1 hi Therefore h hi holds In fact H reduced hypergraph entails h hi h occurs λv 1 cid2 cid2 n cid16cid16 In particular note v cid16cid16 belongs path T v v 2 Assume sake contradiction statement hold Let v vertex λv cid3 2 let h λv hyperedge h h h λv h Since H connected hyperedge cid16cid16 EH h cid16cid16 cid16cid16 h cid7 From condition 1 deﬁnition hingetree decompositions vertex v h cid16cid16 cid7 v holds Thus let v cid16cid16 λv T h neighbor v possibly coinciding From condition 2 deﬁnition hingetree decompositions v cid16cid16 h cid7 Moreover condition 3 h h cid16 included hyperedge λv Because h intersection deﬁnition N λvN λv cid16 h cid7 h hyperedge play hyperedge λv given N λv N λv cid16 role We conclude N λv N λv node N λv h contradicts fact H connected cid3 cid16 h It follows path H node N λv cid16 N λvN λv cid16h cid7 holds h cid16cid16 N λvN λv cid16cid16 cid16 We position characterizing power BICOMPoptd We recall notion decomposition based biconnected components given 5 Let G graph A triple cid5T χ λcid6 cid5T χ cid6 treedecomposition G vertex v T χ v N λv said edgedeﬁned decomposition G Then biconnected decomposition graph G edgedeﬁned decomposition cid5T χ λcid6 G following additional condition hold 4 pair cid16 cid2 1 The width decomposition given maximum cardinality vertices v v χ labelling vertices T A graph G widthk biconnected decomposition biconnected width G k 5 T χ v χ v cid16 Lemma 36 HINGE cid17 BICOMPoptd given hypergraph assume loss generality Hcid16 Proof Let Hcid16 connected Let H reduced hypergraph obtained removing Hcid16 It easy HINGEwidthH HINGEwidthHcid16 BICOMPoptdwidthH BICOMPoptdwidthHcid16 nonmaximal hyperedges impact widths according notions For sake completeness observe true notions based edgedeﬁned decompositions HYPERTREE hyperedge h proper subset hyperedge h cid16 G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 395 Fig 7 A hypergraph H b hingetree decomposition T H c graph GT d tree decomposition GT Let cid5T λcid6 widthk hingetree decomposition H Based T build reduct GT dualH having widthk biconnected decomposition GT cid16 cid16 hv1v3 hv2v1 For ordered pair adjacent vertices v v T let hvvcid16 λv denote hyperedge N λv cid16 hvvcid16 note hvvcid16 welldeﬁned condition 3 deﬁnition hingetree decompositions Then cid16 following conditions T cid16 cid7 hvvcid16 hvcid16v As example construction Fig 7 shows hypergraph H hingetree decomposition H S8in c In particular edges N λv let build graph GT removing dual graph dualH edge h h hold 1 vertex v T h h h h b graph GT built hv1v2 dual graph occur GT depicted dotted lines cid16 λv 2 pair adjacent vertices v v S4 hv3v1 We prove GT reduct dualH edge h h GT condition 3 Deﬁnition 31 satisﬁed To end given edge h h inition hingetree decompositions vertices v v point 1 construction GT case v cid7 v GT Let v v 1 vn v deﬁnition hingetree decompositions h h holds 1 cid2 n Therefore h h hv i1v 1 cid2 n By construction GT let observe h hv1v2 GT hv v i1 h hv1v2 hv v i1 hv i1v hvnvn1 h cid16 dualH occur cid16 condition 1 def cid16 λv cid16 Moreover cid16 edge note condition 2 cid16 N λv N λv i1 cid16 hv i1v hold deﬁnition hv v i1 edges h edge GT 1 cid2 n Thus path witnesses condition 3 Deﬁnition 31 satisﬁed h h T h λv h h h cid16 N λv 1 cid2 cid2 n Thus h h n 1 path T connecting v v hv i1v hv v i1 hv i1v Based cid5T λcid6 let build tree decomposition cid5 T χ cid6 GT having width bounded kthis tree decompo sition serve basis computing biconnected decomposition For vertex v T T contains vertex qv cid16 T T contains vertex qvvcid16 χ qvvcid16 hvvcid16 hvcid16v connected χ qv λv edge v v cid16 T T contains edges qv qvvcid16 vertices qv qvcid16 associated endpoints edge v v qvvcid16 qvcid16 No node edge T Note construction T tree obtained tree T breaking edge pair consecutive edges Moreover cid5 T χ cid6 tree decomposition GT following conditions satisﬁed cid16 hv v i1 h h cid16 hvnvn1 cid16 cid16 cid16 cid16 cid16 cid16 1 For node h GT vertex p T h χ p 2 For edge h h Indeed condition 1 deﬁnition hingetree decompositions hyperedge h H vertex v T h λv result follows p qv deﬁnition χ labelling cid16 GT vertex p T h h Indeed case vertex v h h labelling Otherwise construction GT pair adjacent vertices v v cid16 χ qvvcid16 holds hvvcid16 hvcid16v In case h h cid16 χ p cid16 λv result immediate deﬁnition χ cid16 T h h cid16 3 For node h GT set p T h χ p induces connected subtree T cid16 w cid16 λw cid16cid16 corresponding path v v χ Lemma 351 vertex form q w path T qv qvcid16 We start considering pair vertices form qv qvcid16 T h χ qv χ qvcid16 By construction h χ qw Moreover consider vertex form qwcid16wcid16cid16 path By construction associated T Therefore h h wcid16wcid16cid16 h wcid16cid16wcid16 holds h belongs edge w cid16cid16 Lemma 351 implies h h wcid16wcid16cid16 h h wcid16cid16wcid16 containment strict λw H reduced We χ qwcid16wcid16cid16 h wcid16wcid16cid16 h wcid16cid16wcid16 h Consider case qv qvcid16vcid16cid16 vertices T h χ qv χ qvcid16vcid16cid16 h χ qvcid16cid16 qvcid16cid16 qvcid16 vertices connected qvcid16vcid16cid16 Because h χ qvcid16cid16 h hvcid16vcid16cid16 h χ qvcid16 χ qvcid16vcid16cid16 deﬁnition hyperedge hvcid16vcid16cid16 From seen hold construction cid16 396 G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 proof vertices form qv qvcid16 vertex path qv qvcid16 satisﬁes connectedness condition h χ labelling This condition holds path qv qvcid16vcid16cid16 qvcid16vcid16cid16 directly connected qvcid16 To conclude proof observe scenarios cover possible cases h χ qvvcid16 implies construction χ labelling h χ qv χ qvcid16 holds We tree decomposition cid5 T χ cid6 satisﬁes following additional property 4 For pair distinct vertices p q T χ p χ q cid2 1 Consider pair distinct vertices p q T assume contradiction χ p χ q 1 holds Because condition 3 implies existence pair adjacent vertices q w qwwcid16 path p q T χ qwwcid16 χ qw 1 That h wwcid16 h wcid16w χ qw h wwcid16 cid7 h wcid16w hold Moreover h wcid16w χ qwcid16 holds deﬁnition In particular recall cid5 T χ cid6 built cid5T λcid6 relationships entail cid16 N λw h wcid16w h wcid16w λw λw cid16 N λw h wcid16w Since h wcid16w λw λw cid16 N λw h wwcid16 implies h wcid16w h wwcid16 turn entails h wwcid16 h wcid16w H reduced Thus N λw Contradiction cid16 N λw h wwcid16 N λw cid16 converse inclusion holds N λw cid16 By deﬁnition hyperedges N λw As example Fig 7 shows d tree decomposition GT associated hingetree decomposition depicted b The reader check additional condition 4 holds To conclude proof build biconnected decomposition GT based cid5 T χ cid6 To end observe pre liminary vertex p T possible χ p singleton h In case H GT cid16 exists GT covered χ labelling vertex connected edge form h h T condition 2 Therefore condition 3 h occur vertex p cid16 connected p p safely deleted T contracting edge p p cid16 cid16 new tree p connected neighbors p T Let cid5 T cid16 χ cid16cid6 new tree decomposition GT obtained applying simpliﬁcation procedure vertices singleton labels In particular note χ cid16 restriction χ vertices labelling width cid5 T χ cid16cid6 bounded k singleton Hence condition 4 holds vertices T cid16 labelling deﬁned cid5 T let λcid16p contain edges h h Eventually remains λcid16 cid16 χ cid16 λcid16cid6 edgedeﬁned decompo sition For vertex p T cid16 χ cid16p By construction N λcid16p χ cid16p We claim N λcid16p χ cid16p holds Indeed immediate vertex p qwwcid16 χ cid16p h wwcid16 h wcid16w h wwcid16 h wcid16w fact edge GT recall singleton T Consider vertex p qv note Lemma 352 λ label hingetree decomposition cid5T λcid6 contain hyperedges disconnected rest label By deﬁnition GT connection deleted nodes asso ciated hyperedges λ label This property inherited χ cid16 construction vertex qv T cid16 χ cid16qv χ cid16qv cid3 2 It follows h χ cid16qv neighbor h h GT h nodes covered edge h h cid16 GT h h cid16 λcid16qv cid3 cid16 cid16 cid16 cid16 By combining lemma fact BICOMPoptd cid17 HINGE 15 conclude methods single classes tractable CSPs Theorem 37 BICOMPoptd HINGE It worthwhile noting given hingetree decomposition hypergraph H proof Lemma 36 provides algorithm computing optimal reduct dualH respect BICOMP method Since biconnected components computed linear time follows BICOMPoptd decomposition hypergraph H computed time O N HEH2 bestknown upper bound computing hingetree decomposition 15 Eventually leave section noticing Theorem 37 Corollary 34 results 10 stating HINGE strongly incomparable TREEDECOMPp CUTSETp immediately lead establish following relationships Corollary 38 HINGE TREEDECOMPoptd Corollary 39 BICOMPoptd TREEDECOMPp strongly incomparable Corollary 310 BICOMPoptd CUTSETp strongly incomparable 33 A closer look tree decompositions We continue analysis dualgraph encoding looking TREEDECOMPoptd method In fact ﬁnding appropriate reduction wrt biconnected components methods emerged easy task G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 397 ﬁnding appropriate way simplifying dualgraph wrt tree decomposition method wellknown challenging problem cf 18 makes analysis decomposition power TREEDECOMPoptd complex Next problem circumvented introducing novel decomposition method essentially decomposition power TREEDECOMPoptd getting rid need ﬁnding appropriate simpliﬁcation dual graph In particular new notion crucial technical tool paper exploited intricate proofs involving TREEDECOMPoptd Note method deﬁned directly constraint hypergraph seen modiﬁcation QUERYDECOMP Section 2 Deﬁnition 311 weakQUERYDECOMP A weak query decomposition hypergraph H pair cid5T λcid6 T N E tree λ labelling function associates vertex p N set λp EH following conditions hold 1 edge h H exists p N h λp 2 edge h H set p N h λp induces connected subtree T 3 pair vertices v v cid16 λv cid16 T pair edges h λv h cid16cid16 h h cid16cid16 λv cid16 h cid16cid16 connecting v v T h cid16 cid16 vertex v cid16cid16 path The width weak query decomposition cid5T λcid6 maxpN λp The weak querywidth H minimum width weak query decompositions Note particular condition 3 deﬁnition entails condition 3 deﬁnition QUERYDECOMP The impact modiﬁcation decomposition power QUERYDECOMP illustrated Section 6 Here weakQUERYDECOMP decomposition power TREEDECOMPoptd First observe weakQUERYDECOMP generalizes TREEDECOMPoptd Theorem 312 TREEDECOMPoptd cid17 weakQUERYDECOMP Proof Let H hypergraph TD cid5T χ cid6 tree decomposition reduct G dualH We claim TD weak query decomposition H To end consider following conditions Deﬁnition 311 1 For edge h EH exists vertex vh T h χ vh Indeed hyperedge h EH node vh T h χ vh deﬁnition tree decomposition h node dual graph 2 For edge h EH set vertices T χ labelling contains h subtree T cid16 cid16 cid16cid16 cid16 χ v cid16 χ v T h cid16 3 For pair vertices v v cid16cid16 χ v cid16 vertex v path connecting v resp v cid16cid16 path connecting v Indeed connectedness condition trivially holds TD TD tree decomposition T pair edges h χ v h cid16 h cid16cid16 h h vertices T let h χ v h cid16 edge cid16 Moreover connectedness condition vertex cid16cid16 result immediately v Let v v G vertex vhhcid16 χ vhhcid16 h h cid16cid16 v follows Assume h h condition 3 Deﬁnition 31 In particular observe 1 cid2 cid2 n h h Since TD tree decomposition G edge hi hi1 vertex vhi hi1 T χ vhi hi1 hi hi1 The result follows cid16cid16 vertex v vertex v vertex v path vhi hi1 vhi1hi2 hi1 χ v cid16cid16 path v vh1h2 h1 h χ v path vhn1hn v cid16 edge G Then path form h h1 hn h vhhcid16 h χ v cid16 cid7 In case h h cid16 hi holds cid16 h h cid16cid16 resp h χ v hn h cid16 χ v cid16cid16 cid3 satisfying cid16cid16 cid16cid16 cid16cid16 cid16 cid16 cid16 cid16 On hand weakQUERYDECOMP powerful TREEDECOMPoptd Theorem 313 For k 0 CweakQUERYDECOMP k CTREEDECOMPoptd 2 k 1 Proof Let cid5T λcid6 weak query decomposition hypergraph H width bounded k Let arbitrarily root T vertex Then build labelled tree cid5T χ cid6 vertex r T child s r T χ s λs λr s contains labelling λ plus labelling father T Note cardinality χ labels vertices T bounded 2 k width cid5T χ cid6 bounded 2 k 1 recall 1 standard deﬁnition treewidth 398 G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 Then deﬁne graph Gcid5T χ cid6 set nodes dual graph dualH h h cid16 cid16 χ v We claim Gcid5T χ cid6 reduct edge Gcid5T χ cid6 vertex v T h h dualH To prove claim consider edge h h cid16 χ v cid16 cid16 vertices T h χ v h Since h cid7 h condition 3 deﬁnition weak query decompositions 1 cid2 n hyperedge hi λv cid16cid16 vertex h h path v 1 vn Thus hi hi1 edge Gcid5T χ cid6 1 cid2 n It follows h1 hn witness edge h h cid16 dual graph occur Gcid5T χ cid6 Let v v cid16 let v v 1 vn v cid16 hi Hence construction cid5T χ cid6 1 cid2 n case hi hi1 χ v cid16 safely removed according condition 3 Deﬁnition 31 path T v v To conclude proof cid5T λcid6 fact tree decomposition Gcid5T χ cid6 Note node Gcid5T χ cid6 covered vertex cid5T λcid6 node corresponds hyperedge covered cid5T λcid6 deﬁnition weak query decomposition Moreover edge Gcid5T χ cid6 trivially covered vertex cid5T λcid6 construction graph Gcid5T χ cid6 Finally connectedness condition λ note condition holds λ labelling condition 2 Deﬁnition 311 cid3 cid16 cid16 To summarize Corollary 314 For k 1 cid4 C TREEDECOMPoptd k 1 cid5 CweakQUERYDECOMP k C cid4 TREEDECOMPoptd 2 k 1 cid5 Remark 315 Note QUERYDECOMP intractable diﬃcult exploiting techniques discussed 11 ﬁxed k 0 check polynomial time weak querywidth given hypergraph bounded k Thus weakQUERYDECOMP seen polynomial method computing 2approximation TREEDECOMPoptd This interesting light computing reduct dual graph treewidth bounded k known feasible polynomialtime In fact open problem raised Kolaitis Vardi 18 4 Incidencegraph representation In section focus incidencegraph representation studying particular decomposition power TREEDECOMPin First compare notion HINGE prove deﬁnitively best method Then carry comparison TREEDECOMPoptd showing TREEDECOMPoptd slightly powerful TREEDECOMPin 41 Tree decomposition versus hinges We start showing HINGE BICOMPoptd beats TREEDECOMPin Theorem 41 HINGE BICOMPoptd cid2 TREEDECOMPin Proof We class hypergraphs tractable wrt HINGE BICOMPoptd wrt TREEDECOMPin For m 0 let Rosem hypergraph having m edges S1 Sm deﬁned nodes X1 Xm Y 1 Ym S X1 Xm Y 0 cid2 m As example Fig 8 shows hypergraph Rose4 incidence graph b reduct dual graph c Observe The graph incRosem bipartite graph S connected Y nodes X1 Xm Therefore treewidth graph m The graph dualRosem clique size m vertex S connected nodes form S j j cid7 Moreover S S j X1 Xm j cid7 Therefore built reduct dualRosem tree rooted S1 node form S j j cid7 1 connected edge h1 Fig 8 reports c reduct representing edges removed dual graph dotted lines Thus m 0 instance Rosem 1 Rosem 1 CBICOMPoptd 1 Rosem 1 tractable according BICOMPoptd Rosem 1 cid2 CTREEDECOMPin m Rosem 1 tractable according TREEDECOMPin cid3 The picture completed showing TREEDECOMPin better HINGE G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 399 Fig 8 The hypergraph Rose4 b incidence graph c reduct dualRose4 d primal graph Theorem 42 TREEDECOMPin cid2 HINGE BICOMPoptd Fig 9 The hypergraph Circle6 b incidence graph Proof We class hypergraphs tractable wrt TREEDECOMPin wrt HINGE For m 2 let Circlem hypergraph having m hyperedges S1 Sm nodes X1 Xm S X1 Xi1 0 m Sm Xm X1 As example Fig 9 shows hypergraph Circle6 incidence graph b Note graph incCirclem chain treewidth 2 Thus class Circlem m 0 tractable accord ing TREEDECOMPin Instead 15 observed class tractable according HINGE width Circlem wrt HINGE m cid3 Corollary 43 HINGE BICOMPoptd TREEDECOMPin strongly incomparable 42 Comparison dualgraph representation It known dualgraph incidencegraph representations identifying tractable classes nonbinary CSPs according tree decomposition method 18 However clear methods generalizes beats classes CSPs We start analysis showing TREEDECOMPoptd beats TREEDECOMPin Theorem 44 TREEDECOMPoptd cid2 TREEDECOMPin Proof The result immediately follows Theorem 41 BICOMPoptd cid2 TREEDECOMPin Corollary 34 BICOMPoptd TREEDECOMPoptd BICOMPoptd cid17 TREEDECOMPoptd Proposition 211 cid3 Even TREEDECOMPoptd beats TREEDECOMPin method powerful formally TREEDECOMPoptd generalize TREEDECOMPin In fact cases moving dualgraph encoding causes exponential blowup width Theorem 45 TREEDECOMPin expbeats TREEDECOMPoptd Proof Consider countably inﬁnite class C hypergraphs nth element n cid3 2 ManySubsetsn hypergraph 400 G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 Fig 10 A tree decomposition incManySubsets2 having width 9 N ManySubsetsn following set nodes cid6 cid7 Z pq X j X j cid6 1cid2 jcid2n 1cid2pqcid2n X j 0 X j 1 X j 2 cid8 Z pq cid7 Z pq 0 Z pq 1 Z pq 2 cid8 Note N ManySubsetsn 3 n 3 nn1 2 Hyperedges ManySubsetsn built follows For 0 cid2 3 let X ji X j X Then nple 0 cid2 a1 a2 3 EManySubsetsn contains hyperedge Z pq cid4 cid5 cap aq X ja j cid6 cid6 ha1an Z pqi Z pq Z j pq 1cid2 jcid2n 1cid2pqcid2n cap aq cid4 ap aq mod 3 In fact exactly 3n hyperedges EManySubsetsn As example Fig 10 shows tree decomposition incidence graph ManySubsets2 labelling leaf vertex exactly contains node form hab 0 cid2 b 3 nodes ManySubsets2 contained hyperedge hab EManySubsets2 cid2 3 n2 Let ﬁrst focus incidence graph The number nodes ManySubsetsn provides upper bound treewidth incidence graph Therefore width ManySubsetsn wrt TREEDECOMPin bounded 3 n 3 nn1 2 Consider dual graph notice consists clique 3n nodes Indeed pair nodes ha1an cid16 1 cid7 In fact ha ha claim edge simpliﬁed dual graph obtaining width ManySubsetsn wrt TREEDECOMPoptd 3n 1 cid7 instance X 1a1 X 1a dualManySubsetsn holds ha1an cid16 cid16 1a n cid16 cid16 1a n Assume sake contradiction edge ha1an ha ManySubsetsn ha cid16cid16 cid16cid16 1a n cid16 cid16 1a n cid16cid16 cid16cid16 1a n simpliﬁed By condition 3 Deﬁnition 31 cid7 ha1an ha cid16 cid16 1a n ha1an cid16cid16 cid16cid16 1a n cid7 ha holds By construction hyperedges ManySubsetsn inclusion entails exist hyperedge ha ha cid16cid16 cid16cid16 1a n cid16 cid16 1a n ha 1 cid2 j cid2 n X j X j j X 1 cid2 p q cid2 n Z pq Z j cid16 j j X j X pq pq cap aq Z cid16 p ca cid16cid16 j cid16 q Z pq Z pq cid16cid16 p ca cid16cid16 q Z Thus following conditions hold 1 cid2 j cid2 n X pq cap aq Z Since ha1an distinct ha cid16cid16 p entails X pq cid16 p ca cid16 q cid16cid16 cid16cid16 1a n cid7 cid16cid16 p cid16 p Similarly ha cid16 cid16 1a n cid16cid16 q q By condition entails X cid16cid16 q p ap cid7 X cid16 p cid16 index 1 cid2 q cid2 n q p cid16cid16 p holds cid16cid16 q aq cid16 q index 1 cid2 p cid2 n ap cid7 distinct ha X q aq cid16cid16 cid16cid16 1a n cid16cid16 q cid16cid16 p By condition aq In addition p cid7 q j cid16cid16 j X j j X j cid16 j ii 1 cid2 p q cid2 n Z pq cid16cid16 p ca cid16cid16 q Assume loss generality p q swap roles indices Then Z pq Z cid16 p aq ca cid16 aq q In case cid16 case aq q combined condition ii rephrased Z cid16cid16 p aq contradicts fact pq pq cap aq Z cid16 ca p aq cid16 p impossible ap cid7 cid16cid16 cid7 q holds choice index q ap combined pq cid16 p ca Z cid16 q cid16 p cid16cid16 q cid16 q pq cid16cid16 p ca entails coincides ap cid16cid16 p choice index p In cid16cid16 q cid16 p G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 401 Fig 11 Algorithm incidenceToWeakQueryDecomposition In summary class hypergraphs C n 1 w C inn cid2 9n2 w width function wrt TREEDECOMPin width function wrt TREEDECOMPoptd Thus w C optdn 3n 1 denote C optdn δ rational number 0 δ 1 2 means n w C 3 Ω3 TREEDECOMPin expbeats TREEDECOMPoptd cid3 Ω2w C innδ To complete picture relationship TREEDECOMPoptd TREEDECOMPin TREEDECOMPoptd expgeneralizes TREEDECOMPin Technically exploit relationship methods weakQUERYDECOMP method Indeed ﬁrst tree decomposition incidence graph width k transformed weak query decomposition having width 2k1 The algorithm performing construction shown Fig 11 It takes input tree decomposition TD cid5T χ cid6 cid16 cid5T λcid6 H Basically node p T computes incH outputs weak query decomposition TD label χ p given tree decomposition TD labelling λp node weak query decomposition TD follows Let χ p V p E p V p N H E p EH Then λp contains hyperedges E p plus arbitrarily chosen hyperedge hV cid16 covers V cid16 hV cid16 subset V V p cid16 cid16 cid16 V Fig 12 shows example application algorithm Lemma 46 Let H hypergraph cid5T χ cid6 tree decomposition incH Let p vertex T h EH X χ p X h cid16 Then h χ q h χ p Moreover let q ﬁrst vertex path Π T connecting p vertex q X χ q h χ q cid16 cid16 Proof By contradiction assume statement false let q vertex path Π h χ q X χ q node X X Since T tree dropping vertex q gives connected components Cqcid16 C p vertex p Now consider subgraph T X V X E X T induced contains vertex q vertices v X χ v From connectedness condition tree decompositions node X vertices belong component C p V X C p Indeed observe p C p X χ p q V X X χ q Similarly connectedness condition node h subgraph T h V h Eh T induced vertices v cid16 q V X h χ q However X h h χ v V h Cqcid16 holds Indeed q edge X h incidence graph incH vertex p tree decomposition cid5T χ cid6 X h χ p belong V X V h impossible C p Cqcid16 cid3 cid16 Cqcid16 h χ q cid16 Therefore p cid16 cid16 Lemma 47 Let H hypergraph cid5T χ cid6 tree decomposition incH Let p q distinct vertices T Π path connecting T Moreover let h1 h2 EH hyperedges H nonempty intersection X h1 h2 h1 χ p h2 χ q Then vertex p path Π h1 χ p cid16 h2 χ p cid16 X χ p cid16 holds cid16 Proof By contradiction assume statement true let p cid16 node X X h2 χ p cid16 X χ p cid16 vertex path Π h1 χ p cid16 Since X h1 X h2 edges X h1 X h2 incidence graph incH vertices v 1 v 2 necessarily distinct tree decomposition cid5T χ cid6 X h1 χ v 1 X h2 χ v 2 From 402 G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 Fig 12 A hypergraph H b incidence graph c reduct dual graph d tree decomposition incH e weak query decomposition H built algorithm Fig 11 connectedness condition tree decompositions node X possibly path v 1 v 2 T vertices X χ label Similarly connectedness condition tree decompositions node h1 respectively h2 possibly path v 1 p respectively v 2 q vertices h1 respectively h2 χ label Thus path Π cid16 p q possibly consisting single edge connecting vertices v Π cid16 X χ v h1 χ v h2 χ v Since nodes belong label χ p Π p q T distinct impossible T tree cid3 cid16 paths Π cid16 Lemma 48 Let H hypergraph Given tree decomposition cid5T χ cid6 incH width k algorithm Fig 11 outputs weak query decomposition cid5T λcid6 H width 2k1 Proof Let H hypergraph let cid5T χ cid6 tree decomposition graph incH T V E let cid5T λcid6 output algorithm Fig 11 We cid5T λcid6 fulﬁlls conditions Deﬁnition 311 weak query decomposition H 1 For edge h H exists p N h λp This trivial h EH vertex incH connected nodevertex incH Thus h occurs χ label vertex p T λp 2 For edge h H set p N h λp induces connected subtree T cid16 p V h χ p Note subgraph T induced C Consider hyperedge h set nodes C V h occurs λ label Since T tree suﬃces cid16 C set vertices h occurs subgraph T induced C connected Let C χ labels C connected connectedness condition tree decompositions Also note C cid16cid16 V Assume contradiction subgraph induced set C connected let C cid16cid16 C cid16 Then exists nonempty maximal connected component subgraph C cid16 borderline vertex p C Π contain cid16cid16 vertex C Then case h cover X X h Note h λp h χ p p C C X χ p construction Algorithm incidenceToWeakQueryDecomposition However immediately leads contradiction existence vertex q path Π Indeed Lemma 46 h χ q h λq X χ q h λq h cover X Both cases entail q C maximality component C clearly C connected nonempty path Π vertex C In particular q ﬁrst vertex Π vertex adjacent p T q C cid16 cid7 observed point 1 cid16cid16 cid7 C cid16cid16 cid16cid16 cid16cid16 cid16cid16 cid16 cid16 cid16 cid16 λv cid16 vertex v cid16cid16 path connecting v 3 For pair vertices v v cid16 impossible choice p q T pair edges h λv h cid16cid16 cid16cid16 h h cid16cid16 λv cid16 h cid16 cid16 T h cid16 V h λv h Assume X cid7 exists v v Consider pair vertices v v X h h Π h λv cid16 dition 3 trivially holds Since cid5T χ cid6 tree decomposition incH h h edges graph course vertices v 1 v 2 V h χ v 1 h algorithm h λv 1 h condition holds λ labelling cid5T λcid6 It follows v cid16 let Π path connecting T let cid16cid16 h cid16cid16 nodes occurring cid16 χ v 2 Then according cid16 λv 2 Moreover according condition 2 connectedness belongs path connecting v 1 v 2 T From cid16 λv cid16 λv cid16cid16 cid16cid16 G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 403 Lemma 47 X χ v cid16cid16 cover X X h h cid16cid16 h cid16cid16 λv cid16cid16 cid16cid16 according Algorithm incidenceToWeakQueryDecomposition hyperedge In order complete proof observe width decomposition cid5T λcid6 bounded 2k1 k width cid5T χ cid6 Indeed let v vertex T let V p χ p N H E p χ p EH Then λv contains V p E p cid2 2k1 hyperedge subset variables V p plus hyperedges E p That λv cid2 2 χ p cid2 k 1 cid3 Note cases algorithm Fig 11 directly output tree decomposition This instance case example Fig 12 decomposition e produced algorithm actually tree decomposi tion reduct c In case transforming weak query decomposition tree decomposition easily large increase width Indeed Lemma 48 relationship TREEDECOMPoptd weakQUERYDECOMP easily following result Theorem 49 TREEDECOMPoptd expgeneralizes TREEDECOMPin Proof Let H hypergraph cid5T χ cid6 tree decomposition incH width k From Lemma 48 weak query decomposition H having width w 2k1 Therefore Theorem 313 tree decomposition reduct dual graph width bounded 2 w 1 2k2 1 cid3 Putting Theorems 44 49 45 precise relationship TREEDECOMPin TREEDECOMPoptd derives Corollary 410 TREEDECOMPin cid3 TREEDECOMPoptd 43 General relationships incidencegraph dualgraph representations We leave section noticing properties stated Theorems 44 45 TREEDECOMPin TREEDECOMPoptd fact representative relationship pair binary decomposition methods applied incidence dual graph respectively Theorem 411 Let D1 D2 methods TREEDECOMP BICOMP CUTSET Then optd cid2 D2 expbeats D1 optd 1 D1 2 D2 Proof 1 Consider class hypergraphs Rosem m 0 deﬁned Theorem 44 recall treewidth incidence graph m reduct dual graph acyclic Therefore method D1 generalizes acyclicity particular D1 TREEDECOMP BICOMP CUTSET width D1 applied dual graph 1 However width wrt method D2 applied incidence graph m case TREEDECOMP generalizes graph methods 2 Consider class hypergraphs ManySubsetsn n 0 deﬁned Theorem 45 The width wrt method D2 incidence graph bounded 3 n2 upper bound total number nodes Moreover recall proof Theorem 45 n 0 dual graph ManySubsetsn simpliﬁed Thus optd deal dual graph 3n 1 lower bound width method D1 graph TREEDECOMPoptd generalizes graph methods Then expbeating relationship formally proved precisely reasoning proof Theorem 45 cid3 5 Primalgraph representation In section study primalgraph representation ﬁrst focusing decomposition power TREEDECOMPp In particular compare notion tree decomposition method applied incidencegraph representation tree decomposition method applied dualgraph representation Further relationships decomposition methods primal graph discussed complete picture 51 Comparison incidencegraph representation We start analysis showing TREEDECOMPin beats TREEDECOMPp 404 G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 Fig 13 An hypergraph H b incidence graph c primal graph d tree decomposition TD primal graph e corresponding tree cid16 decomposition TD incidence graph according construction Theorem 52 Theorem 51 TREEDECOMPin cid2 TREEDECOMPp Proof We class hypergraphs tractable wrt TREEDECOMPin wrt TREEDECOMPp For n 0 let Singlen hypergraph having hyperedge n different nodes Then primal graph Singlen clique n nodes treewidth n 1 Conversely incidence graph Singlen trivially acyclic treewidth 1 cid3 In fact adapting arguments suggested 18 TREEDECOMPin strongly generalizes TREEDECOMPp Theorem 52 TREEDECOMPp TREEDECOMPin Proof After Theorem 51 remains TREEDECOMPp generalizes TREEDECOMPin To end claim k 0 CTREEDECOMPp k CTREEDECOMPin k 1 Let H hypergraph assume H CTREEDECOMPp k Then consider tree decomposition TD cid5T χ cid6 cid16 χ cid16cid6 followssee primal graph H width bounded k Based TD build labelled tree TD Fig 13 illustration cid16 cid5T cid16 T contains vertices T subgraph T induced nodes T precisely coincides T In particular vertex v T T For hyperedge h EH arbitrary vertex vh T selected χ vh hnote vertex vh exists nodes h form clique primal graph known vertex covering cid16 cid16 h χ vh h tree decomposition Then new vertex v h added T child vh χ cid16v cid16 cid16 χ v χ cid16v cid16 cid16 We TD First note node incH covered χ cid16 tree decomposition incidence graph incH nodes N H covered χ cid16 cid16 construction T cid16 h Second consider edge X h incH Note X h deﬁnition incidence graph Then X h covered h h χ cid16v vertex v cid16 Indeed obvious labelling Moreover hyperedge h property holds labelling vertex T cid16 vertex v cid16 h χ vh actually superset h contains X TD vertex vh added T And note connectedness condition tree decomposition satisﬁed TD satisﬁed χ v χ cid16v nodes H vertex v occurring T T cid16 cid16 child r holds χ cid16v To conclude proof suﬃcient observe width TD cid16 h χ r v cid16 cid16 cid16 h vertex T cid16 bounded k 1 cid3 h covered 52 Comparison dualgraph representation Similarly case relationship dualgraph incidencegraph encodings deﬁnitively best binary representation consider graph methods applied dual graphs primal graphs Theorem 53 Let D1 D2 methods TREEDECOMP BICOMP CUTSET Then G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 405 optd cid2 D2 p expbeats D1 p optd 1 D1 2 D2 Proof 1 Consider class hypergraphs Singlen n 0 deﬁned proof Theorem 51 The result follows primal graph Singlen clique n nodes treewidth n 1 dual graph consists single node trivially acyclic 2 Consider class hypergraphs ManySubsetsn n 0 deﬁned Theorem 45 Even case width wrt method primal graph bounded 3 n2 upper bound total number nodes Then statement follows reasoning Theorem 411 cid3 We state precise relationships TREEDECOMPoptd TREEDECOMPp BICOMPp CUTSETp BICOMPoptd Theorem 54 TREEDECOMPp cid3 TREEDECOMPoptd Proof In light Theorem 53 remains TREEDECOMPoptd expgeneralizes TREEDECOMPp To end observe TREEDECOMPin cid3 TREEDECOMPoptd TREEDECOMPp TREEDECOMPin hold Theorem 410 Theorem 52 respectively In particular TREEDECOMPp cid17 TREEDECOMPin Hence result follows Proposi tion 243 cid3 Theorem 55 CUTSETp cid3 TREEDECOMPoptd Proof In light Theorem 53 remains TREEDECOMPoptd expgeneralizes CUTSETp To end recall CUTSETp TREEDECOMPp CUTSETp cid17 TREEDECOMPp shown 10 TREEDECOMPp cid3 TREEDECOMPoptd holds Theorem 54 Thus result follows applying Proposition 243 cid3 We focus decomposition method based notion biconnected component Recall BICOMPoptd equivalent hyperedgebased method HINGE Theorem 38 Moreover consider binary CSPs known 10 HINGE strongly generalizes BICOMPp This result based observation 15 biconnected component C graph corresponds hinge consisting hyperedges containing variables C What observed 15 10 cardinality hinge general nonbinary case exponentially larger cardinality C Indeed hyperedges contain variables worst case power set C hypergraph ManySubsetsn pathological example In fact general case precise relationship approaches weak generalization Theorem 56 BICOMPp cid3 HINGE BICOMPoptd Proof In light Theorem 53 BICOMPoptd equivalently HINGE Theorem 38 exp generalizes BICOMPp Let H hypergraph G primal graph Let cid5T χ λcid6 biconnected decomposition H let k width decomposition maximum cardinality biconnected components G 5 Recall binary CSPs shown biconnected component C graph hinge 15 precisely set HC h EH h C hinge By applying line reasoning 15 easy property holds general case graph G primal graph hypergraph H Just observe hyperedge h h 2 corresponds clique G included biconnected com ponent variables h disconnected dropping single variable It follows general case cid5T χ λcid6 corresponds hinge decomposition H Let C biconnected component G Then corresponding hinge HC H contain 2 hyperedges Since cardinality largest biconnected component k 2k clearly upper bound width hingetree decomposition H associated cid5T χ λcid6 upper bound HINGE width H cid3 C Eventually conclude relationship BICOMPp TREEDECOMPoptd Theorem 57 BICOMPp cid3 TREEDECOMPoptd Proof In light Theorem 53 remains TREEDECOMPoptd expgeneralizes BICOMPp To end recall BICOMPoptd TREEDECOMPoptd BICOMPoptd cid17 TREEDECOMPoptd follows Theorem 37 406 G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 Theorem 38 Moreover BICOMPp cid3 BICOMPoptd holds Theorem 56 Thus result follows applying Proposi tion 243 cid3 6 Binary versus nonbinary structural methods In previous sections analyzed decomposition power graphbased decomposition methods applied binary representations nonbinary instances In section compare methods hypergraph based methods In particular start showing binary method better QUERYDECOMP Then motivate behavior observing power binary methods basically bounded weakQUERYDECOMP method introduced Section 33 relaxation QUERYDECOMP 61 Binary methods versus QUERYDECOMP The idea common hypergraphbased decomposition methods exploit power hyperedges contain variables fulﬁll connectedness condition keeping width small This instance case QUERYDECOMP method Section 2 Indeed observe deﬁnition QUERYDECOMP width measured terms number hyperedges tree labels terms number variables usual graph methods In fact shown CSP instances having widths bounded constant solved polynomial time exponential dependency width Thus techniques exhibit kind complexity bounds typical graphmethods variablebased widths usually smallermore eﬃcientwidths instances 10 As matter fact QUERYDECOMP hardly practice checking query width hypergraph bounded k NPhard problem ﬁxed k 4 12 Our wrt notion derives fact tractable hypergraphbased decomposition methods proposed literature generalize QUERYDECOMP In particular consider hypertree decomposition method HYPERTREE 12 spreadcuts method SPREADCUT 5 component hypertree decomposition method CHYPERTREE 13 Theorem 61 See 12 QUERYDECOMP cid17 HYPERTREE Theorem 62 See 5 QUERYDECOMP cid17 SPREADCUT Theorem 63 QUERYDECOMP cid17 CHYPERTREE Proof In 13 shown HYPERTREE cid17 CHYPERTREE The result follows Theorem 61 Proposition 212 cid3 Note paper interested graphbased representations relationships suﬃce purpose shall exploit QUERYDECOMP interface graph methods hypergraph methods We omit formal treatment notions HYPERTREE SPREADCUT CHYPERTREE referring reader interested expanding subject 51213 Rather shall focus comparing QUERYDECOMP binary method discussed paper showing strongly generalizes In particular light previous results Fig 4 shall focus methods TREEDECOMPoptd TREEDECOMPin TREEDECOMPp emerged powerful binary methods Note TREEDECOMPoptd HYPERTREE compared 10 TREEDECOMPoptd HYPERTREE Actually inspecting result 10 immediate check proof straight forwardly applies QUERYDECOMP following result holds turned Theorem 64 TREEDECOMPoptd QUERYDECOMP Thus shall consider comparison TREEDECOMPin Theorem 65 TREEDECOMPin QUERYDECOMP Proof Recall TREEDECOMPin cid3 TREEDECOMPoptd TREEDECOMPoptd cid2 TREEDECOMPin TREED ECOMPoptd QUERYDECOMP TREEDECOMPoptd cid17 QUERYDECOMP hold Theorems 410 64 respectively Hence apply Proposition 211 concluding QUERYDECOMP cid2 TREEDECOMPin holds We conclude recalling TREEDECOMPin cid17 QUERYDECOMP class constraints tractable accord ing TREEDECOMPin tractable according QUERYDECOMP Indeed Chekuri Rajaraman 3 proved H G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 407 hypergraph TD cid5T χ cid6 tree decomposition incH width k exists query decomposition Q D H having width k 1 cid3 Armed theorems conclude nonbinary methods deﬁnitively better binary ones far ability identify islands tractability concerned Theorem 66 Let D decomposition method QUERYDECOMP cid17 D Then following relationships hold 1 TREEDECOMPin D 2 TREEDECOMPoptd D 3 TREEDECOMPp D Proof By Theorems 65 64 known TREEDECOMPin QUERYDECOMP TREEDECOMPoptd QUERYDECOMP hold respectively Thus apply Proposition 213 order conclude TREEDECOMPin D TREEDECOMPoptd QUERYDECOMP hold Eventually fact TREEDECOMPp D derives applying Proposition 213 armed facts TREEDECOMPin D TREEDECOMPin cid17 D Theorem 52 TREEDECOMPp TREEDECOMPin cid3 In particular contextualize result HYPERTREE SPREADCUT CHYPERTREE Corollary 67 Let D1 method HYPERTREE SPREADCUT CHYPERTREE D2 method TREEDECOMPin TREEDECOMPoptd TREEDECOMPp Then D2 D1 Proof It suﬃcient apply Theorem 66 observing HYPERTREE SPREADCUT CHYPERTREE generalize QUERYDECOMP Theorems 61 62 63 respectively cid3 62 A note power hypergraphbased methods According Theorem 66 method generalizes QUERYDECOMP powerful arbitrary bi nary method At ﬁrst sight result appear surprising especially comparing QUERYDECOMP TREEDECOMPoptd given kind tree labelling methods hyperedgebased similar Next clarify big difference TREEDECOMPoptd QUERYDECOMP exploiting notion weak query decomposition introduced Section 33 technical tool comparison In fact observed condition 3 deﬁnition weakQUERYDECOMP method Deﬁ nition 311 entails condition 3 deﬁnition QUERYDECOMP method Section 2 Thus weak query decomposition hypergraph query decomposition hypergraph However worthwhile noting weakQUERYDECOMP misses ability jointly sets arbitrary hyperedges maintain connectedness nodes decomposed Indeed standard query decomposition variables covered union hyperedges λ labelling weaker notion hyper edge time role h condition 3 Deﬁnition 311 As matter fact ability crucial deﬁnition hypergraphbased methods given QUERYDECOMP strongly generalizes binary methods weakQUERYDECOMP instead emerged decomposition power TREEDECOMPoptd cf Corollary 314 Therefore observations suggest liberal condition 3 QUERYDECOMP basis superior power hypergraphbased methods nonbinary instances cid16cid16 7 Conclusions In paper outlined complete picture power decomposition approaches applied binary repre sentations nonbinary CSP instances decomposition methods speciﬁcally tailored nonbinary encodings Our research provides clear complete comparison structural decomposition techniques proposed literature far answers longstanding questions pertaining relationships methods For completeness mention recently proposed notion fractional hypertree decomposition 17 reported Fig 4 In fact known notion strongly generalizes HYPERTREE strongly generalizes structural methods considered paper However deciding fractional hypertree decomposition width k computed polynomial time ﬁxed constant k open intriguing problem5 We feel facing problem provide novel insights actual nature hypergraphbased structural decomposition methods 5 An important advance respect O k3 polynomialtime approximation algorithm provided Marx 19 408 G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 Appendix A Proofs Section 2 Proposition 21 Let D1 D2 D3 decomposition methods Then 1 If D2 cid2 D1 D2 cid17 D3 D3 cid2 D1 2 If D1 cid17 D2 D2 cid17 D3 D1 cid17 D3 3 If D1 D2 D2 cid17 D3 D1 D3 Proof 1 D2 cid2 D1 means number k 0 set instances C CD2 k C cid7 CD1 m m 0 Moreover D2 cid17 D3 holds constant δ CD2 k CD3 k δ C CD3 k δ 2 Assume D1 cid17 D2 D2 cid17 D3 hold Since D1 cid17 D2 exists constant δ1 k CD1 k CD2 k δ1 Moreover D2 cid17 D3 holds constant δ2 k By combining relationships conclude constant δ δ1 δ2 k CD1 k CD2 k δ1 CD3 k δ1 δ2 CD3 k δ This means D3 generalizes D1 CD2 k cid16 CD3 k cid16 δ2 3 It immediately follows 1 2 deﬁnition notion strong generalization cid3 cid16 Proposition 22 Let D1 D2 decomposition methods Then 1 D1 cid17 D2 implies function f D1 cid17 f D2 2 D1 cid17 f D2 implies D1 cid2 D2 D2 D1 hold Proof 1 This immediate identity function f x x 2 Let D1 D2 decomposition methods D1 cid17 f D2 Then deﬁnition f generalization k 1 CD1 k contained CD2 f k Assume sake contradiction D1 cid2 D2 holds exists positive integer k set C CD1 k C cid7 CD2 m m 0 Since CD1 1 CD1 2 assume loss generality k 1 H cid7 CD2 m CD2 f k consider value m f k Then instance H C CD1 k Contradiction k 1 CD1 k CD2 f k Eventually fact D1 cid2 D2 hold immediately entail D2 D1 hold cid3 Proposition 24 Let D1 D2 D3 decomposition methods Then 1 D1 weakly generalize D1 cid3 antireﬂexive 2 If D1 cid3 D2 D2 cid3 D1 hold cid3 antisymmetric 3 If D1 cid3 D2 D2 cid17 D3 D1 cid17 D2 D2 cid3 D3 D3 expgeneralizes D1 Proof 1 The result follows observing condition ii deﬁnition weak generalization D1 cid2 D1 satisﬁed cid2 trivially antireﬂexive 2 Let D1 D2 decomposition methods D1 cid3 D2 Then condition Deﬁnition 23 D2 cid2 D1 entails D2 cid3 D1 hold Proposition 222 3 Let ﬁrst consider case D1 cid3 D2 D2 cid17 D3 hold By condition ii Deﬁnition 23 D1 cid3 D2 implies exists constant δ1 k 1 CD1 k CD2 2kδ1 Moreover D2 cid17 D3 holds constant δ2 k 0 CD2 k CD3 k δ2 By combining relationships k 1 CD1 k CD2 2kδ1 CD3 2kδ1 δ2 CD3 2kδ δ δ1 ﬁxed positive rational greater 1 large 22δ cid3 22δ1 δ2 By deﬁnition means D3 expgeneralizes D1 Let consider case D1 cid17 D2 D2 cid3 D3 hold By condition ii Deﬁnition 23 D2 cid3 D3 implies exists constant δ2 k 1 CD2 k CD3 2kδ2 Moreover D1 cid17 D2 holds constant δ1 k 0 CD1 k CD2 k δ1 course relationships holds number greater δ1 We choose δ1 number large kδ11 δ1 k 1 Note particular entails δ1 2 By combining relationships k 1 CD1 k CD2 k δ1 CD3 2kδ1δ2 CD3 2kδ1δ2 CD3 2kδ1δ2 choice δ1 This means D3 exp generalizes D1 cid3 G Greco F Scarcello Artiﬁcial Intelligence 174 2010 382409 409 References 1 F Bacchus X Chen P van Beek T Walsh Binary vs nonbinary constraints Artiﬁcial Intelligence 140 12 2002 137 2 A Bernstein N Goodman The power natural semijoins SIAM Journal Computing 10 4 1981 751771 3 Ch Chekuri A Rajaraman Conjunctive query containment revisited Theoretical Computer Science 239 2 2000 211229 4 D Cohen P Jeavons The complexity constraint languages F Rossi P van Beek T Walsh Eds Handbook Constraint Programming Elsevier 2006 5 D Cohen P Jeavons M Gyssens A uniﬁed theory structural tractability constraint satisfaction problems Journal Computer System Sciences 74 5 2008 721743 6 R Dechter Constraint Networks second edition Encyclopedia Artiﬁcial Intelligence Wiley Sons 1992 pp 276285 7 RG Downey MR Fellows Parameterized Complexity Springer New York 1999 8 EC Freuder A suﬃcient condition backtrackbounded search Journal ACM 32 4 1985 755761 9 N Goodman O Shmueli Syntactic characterization tree database schemas Journal ACM 30 4 1983 767786 10 G Gottlob N Leone F Scarcello A comparison structural CSP decomposition methods Artiﬁcial Intelligence 124 2 2000 243282 11 G Gottlob N Leone F Scarcello Computing LOGCFL certiﬁcates Theoretical Computer Science 270 12 2002 761777 12 G Gottlob N Leone F Scarcello Hypertree decompositions tractable queries Journal Computer System Sciences 64 3 2002 579627 13 G Gottlob Z Miklos T Schwentick Generalized hypertree decompositions NPhardness tractable variants Proc 26th ACM SIGACT SIGMODSIGART Symposium Principles Database Systems PODS07 2007 pp 1322 14 G Gottlob S Szeider Fixedparameter algorithms artiﬁcial intelligence constraint satisfaction database problems The Computer Journal 51 3 2008 303325 15 M Gyssens PG Jeavons DA Cohen Decomposing constraint satisfaction problems database techniques Artiﬁcial Intelligence 66 1994 5789 16 M Gyssens J Paredaens A decomposition methodology cyclic databases Advances Database Theory vol 2 Plenum Press New York NY 1984 pp 85122 17 M Grohe D Marx Constraint solving fractional edge covers Proc 17th Annual ACMSIAM Symposium Discrete Algorithms SODA06 2006 pp 289298 18 PhG Kolaitis MY Vardi Conjunctivequery containment constraint satisfaction Journal Computer System Sciences 61 2 2000 302332 19 D Marx Approximating fractional hypertree width Proc 19th Annual ACMSIAM Symposium Discrete Algorithms SODA09 2009 pp 902911 20 N Robertson PD Seymour Graph minors II Algorithmic aspects tree width Journal Algorithms 7 1986 309322 21 M Samer S Szeider Constraint satisfaction bounded treewidth revisited Journal Computer System Sciences 76 2 2010 103114 22 F Scarcello G Gottlob G Greco Uniform constraint satisfaction problems database theory Complexity Constraints LNCS vol 5250 Springer 2008 pp 156195 23 R Seidel A new method solving constraint satisfaction problems Proc 7th International Joint Conference Artiﬁcial Intelligence IJCAI81 1981 pp 338342