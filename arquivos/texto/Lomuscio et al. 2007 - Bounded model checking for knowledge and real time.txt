Artiﬁcial Intelligence 171 2007 10111038 wwwelseviercomlocateartint Bounded model checking knowledge real time Alessio Lomuscio a1 Wojciech Penczek bc2 Bozena Wozna d3 Department Computing Imperial College London 180 Queens Gate London SW7 2BZ United Kingdom b Institute Computer Science PAS Ordona 21 01237 Warsaw Poland c Institute Informatics Podlasie Academy Sienkiewicza 51 Siedlce Poland d Institute Mathematics Computer Science Jan Dlugosz University Armii Krajowej 1315 42200 Czestochowa Poland Received 23 August 2006 received revised form 2 April 2007 accepted 11 May 2007 Available online 24 May 2007 Abstract We present TECTLK logic specify knowledge real time multiagent systems We TECTLK model checking problem decidable present algorithm bounded model checking based discretisation method We exemplify use technique means Railroad Crossing System popular example multiagent systems literature 2007 Elsevier BV All rights reserved Keywords Temporal epistemic logics Model checking Interpreted systems Real time systems 1 Introduction Reasoning knowledge 9 core concern artiﬁcial intelligence This hardly surprising given knowledge key concept model intelligent rational activities human artiﬁcial A plethora formalisms proposed reﬁned years based formal logic One widely studied based variants modal logics commonly referred temporal epistemic logic 9 Rather providing computational engine artiﬁcial agents reasoning epistemic logic line seen speciﬁcation language modelling reasoning systems common formal methods science Formal properties logics completeness decidability complexity explored 10121320 Speciﬁcation languages useful veriﬁed automatically In effort theorem proving model checking techniques tools epistemic logic developed In model checking approach question agents S satisﬁes property P tackled trying establish Corresponding author Email addresses ALomuscioimperialacuk A Lomuscio penczekipipanwawpl W Penczek bwoznaajdczestpl B Wozna 1 The author acknowledges partial support EPSRC grant GRS49353 2 The author acknowledges partial support Royal Society grant ESEP 2004R3EU 3 The research presented conducted B Wozna supported EPSRC grant GRS49353 The author acknowledges partial support Ministry Science Information Society Technologies grant number 3 T11C 011 28 00043702 matter 2007 Elsevier BV All rights reserved doi101016jartint200705005 1012 A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 MS φP MS suitable model S φP appropriate logical formula representing P refer 8 details In particular concerns temporal epistemic logic model checking techniques based BDD 2629 bounded model checking 23 unbounded model checking 16 developed implementation publicly released 1126 available webinterface 22 While argue veriﬁcation model checking temporal epistemic logic age respects area lacking support essential functionalities One realtime While formalisms deal discrete sequence events theoretical practical refer temporal model assumes dense sequence events uses operators able represent dense temporal intervals The aim work ﬁrst step direction In particular recent contributions focused extending model checking techniques tools 142325262832 adapt needs multiagent systems MAS formalisms 691415 Speciﬁcally contributions ﬁrst present logic TECTLK reason real time knowledge MAS second present bounded model checking technique verifying automatically properties multiagent systems expressed logic The rest paper organised follows The section deﬁnes Real Time Interpreted Systems semantics work paper In Section 3 logic TECTLK introduced Section 4 deals discretisation process necessary bounded model checking algorithm discussed Section 5 Section 6 shows method applied railroad crossing typical multiagent example time dependent systems We conclude Section 7 discussing related work 2 Real Time Interpreted Systems In section brieﬂy recall concept timed automata introduced 2 deﬁne Real Time Interpreted Systems 21 Timed automata Let R 0 set nonnegative real numbers R 0 set positive real numbers N 0 1 set natural numbers X ﬁnite set real variables called clocks x X c N cid2 cid3 The clock constraints X deﬁned following grammar cc true x c cc cc The set clock constraints X denoted CX Note inequalities involving differences clocks CX A clock valuation X tuple v RX The value clock x v denoted vx For valuation v δ R v δ denotes valuation vcid7 x X vcid7x vx δ For subset clocks X X vX 0 denotes valuation vcid7 vcid7x 0 x X vcid7x vx x X X The satisfaction relation clock constraint cc CX v RX deﬁned inductively follows v true v x c iff vx c cid7 v cc cc cid7 iff v cc iff v cc For clock constraint cc CX cid2cccid3 denote set clock valuations satisfying cc cid2cccid3 v RX v cc Deﬁnition 1 Timed automaton A timed automaton tuple T A Z L l0 E X I Z ﬁnite set actions L ﬁnite set locations l0 L initial location X ﬁnite set clocks E LZCX 2X L transition relation I L CX location invariant function assigning location l L clock constraint deﬁning conditions T A stay l Each element e E denoted l accX lcid7 l source location lcid7 target location action cc enabling condition e X X set clocks reset performing e A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 1013 Fig 1 A timed automaton The clocks timed automaton express timing conditions We differentiate enabling conditions invariant conditions An enabling condition temporal constraint satisﬁed transition occur An invariant condition Il speciﬁes temporal constraint satisﬁed automaton remain l inxcid2300 t2 t2 outtrue t3 t3 Example 1 Fig 1 shows timed automaton consisting locations t0 t1 t2 t3 t0 initial loca approachtruex t1 tion clock x set actions Z approach exit following transitions t0 exitxcid3500 t0 The invariant location t0 true t1 locations labelled invariant x cid2 500 Intuitively example models starting t0 moving t1 action approach causing clock reset The automaton execute action clock values 300 500 reaching location t2 From t2 action performed clock reaches value 500 resulting t3 From t3 action exit performed clock reaches value 500 resulting t0 Note enabling condition t3 case redundant We timedautomaton ﬁnegrained model realtime agent A realtime multiagent deﬁned set communicating timed automata combined parallel composition global timed automaton In composition transitions corresponding shared action interleaved transitions labelled shared action synchronised Several deﬁnitions parallel composition exist Here use multiway syn chronisation 27 require component communication transition labelled shared action perform action global transition occurs Formally let T Ai Zi Li l0 Ei Xi Ii timed automaton 1 m Li Lj j 1 m cid12 j let Za 1 cid2 cid2 m Zi denote set indices timed automata sets actions contain action The parallel composition deﬁned follows Deﬁnition 2 Parallel composition A parallel composition m timed automata T Ai timed automaton T A m Z L l0 E X I Z i1 Iili Each global transition Xi Il1 lm m i1 Li l0 l0 m i1 Zi L m X 1 l0 m i1 cid3 cid2 cid4 cid2 l1 lm cc X l cid5 cci X cc cid7 1 l cid6 cid7 m E iff Zali cci Xi l Xi j 1 m Za l cid7 Ei lj cid7 j iZa iZa Note agents communication action available remain location syn chronisation action performed Example 2 As example parallel composition let consider wellknown railroad crossing RCS 17 The consists timed automata Train Gate Controller shown Fig 2 The automaton Train modelled timed automaton considered Example 1 The automaton Gate consists locations g0 g1 g2 g3 initial location g0 clock y set actions Z lower raise following 1014 A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 Fig 2 Timed automata Train Gate Controller Fig 3 The parallel composition Train Gate Controller lowertruey g1 g1 downycid3100 g2 g2 up100cid3ycid3200 g0 The invariant transitions g0 locations g0 g2 true locations g1 g3 labelled invariant y cid2 100 y cid2 200 respectively The automaton Controller consists locations c0 c1 c2 c3 initial location c0 approachtruez clock z set actions Z approach lower exit raise following transitions c0 c1 raisezcid3100 c0 The invariant locations c0 c2 true c1 locations c1 c3 labelled invariant z cid2 100 lowerz100 c2 c2 raisetruey g3 g3 exittruez c3 c3 The automata Train Gate Controller synchronise actions approach exit lower raise parallel composition known RCS shown Fig 3 The locations RCS given triples j k elements represent Train Gate Controller locations ti gj ck j k 0 1 2 3 respectively The initial location RCS represented triple 0 0 0 invariants locations RCS conjunction invariants components A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 1015 22 Timed automata We use timed automata interpret logical language real time knowledge Let T A Z L l0 E X I timed automaton An instantaneous state T A pair l v l L v RX Deﬁnition 3 The dense state space T A tuple LRX q0 LRX set instantaneous states q0 l0 v0 initial state v0x 0 x X v0 cid2Il0cid3 L RX Z R L RX transition relation deﬁned Action transition Z l v lcid7 vcid7 iff cc CX X X l accX lcid7 E v cid2cccid3 vcid7 vX 0 vcid7 cid2Ilcid7cid3 Time transition δ R l v δ l v δ iff v v δ cid2Ilcid3 Intuitively action transition corresponds action performed automaton consideration Follow ing location changes accordingly clocks associated action set zero ones belong set X X Obviously action performed underling enabling condition satisﬁed A time transition involve location change equal increase value clocks provided new clock valuations satisfy location invariants For l v L RX let l v δ denote l v δ A q0run ρ T A ﬁnite inﬁnite sequence instanta neous states δ0 q0 δ0 a0 q1 δ1 q1 δ1 a1 q2 q0 δ2 qi L RX ai Z δ0 cid3 0 δi R N 0 For q0runs require δ0 R In words run ﬁnite inﬁnite path T A action transitions taken inﬁnitely time transitions aggregated Notice semantics permit consecutive action transitions performed action transitions time pass This convenient way representing series events taken continuous time Example 3 Given automaton shown Fig 3 let l v instantaneous state automaton l j k 0 1 2 3 v vx vy vz One possible q0runs following approach 1 0 1 0 50 0 100 1 0 1 100 150 100 lower 0 0 00 0 0 50 0 0 0 50 50 50 1 1 2 100 0 100 305 In line literature area assumption agents run continuously termi nation In realtime context requirement normally expressed distinguishing discrete progress time progress Under discrete progress allow action transitions happen inﬁnitely instanta neous state occurs action successors Under time progress assumes time pass upper bound usually formalised notion nonzeno runs cid7 Formally inﬁnite run ρ said nonzeno iff iN δi unbounded An inﬁnite run ρ said zeno iff iN δi bounded real value As example consider automaton shown Fig 4 Its q0run q0 0 1 q0 1 q0 1 05 q0 15 q0 15 025 q0 175 q0 175 0125 q0 1875 q0 1875 00625 cid7 Fig 4 An example nonzeno zeno runs 1016 A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 zeno On hand following q0run q0 0 1 q0 1 b q1 1 1 q1 2 c q1 0 2 q1 2 c q1 0 2 q1 2 c nonzeno We T A timeprogressive iff q0runs nonzeno For ease presentation consider timeprogressive timed automata 23 Real time interpreted systems We timedautomata ﬁnegrained semantics reason real time multiagent systems Technically construct realtime traces generated communicating automata interpret temporal epistemic language The standard discrete time semantics temporal epistemic languages interpreted systems 9 Here introduce real time version First line 1 partition set clock valuations Let T A timed automaton CT A CX nonempty set containing clock constraints occurring enabling conditions transition relation E state invariants T A Moreover let cmax largest constant appearing CT A let frσ respectively cid16σ cid17 σ R denote fractional respectively integral σ We deﬁne equivalence relation cid18 set clock valuations follows Deﬁnition 4 See 1 For clock valuations v vcid7 RX v cid18 vcid7 following conditions met 1 For x X vx cmax iff vcid7x cmax 2 For x y X vx cid2 cmax vy cid2 cmax cid16vxcid17 cid16vcid7xcid17 b frvx 0 iff frvcid7x 0 c frvx cid2 frvy iff frvcid7x cid2 frvcid7y In words valuations equivalent return values greater cmax x integral x fractional parts nil preserve order clock values Fig 5 example The relation cid18 partitions RX zones denoted Z Zcid7 We denote set zones ZX Let AG set m agents agent modelled timed automaton T Ai Zi Li l0 Ei Xi Ii 1 m T A Z L l0 E X I parallel composition agents li L Li func tion returning location agent global location Moreover PV set propositional variables containing constant true denoted cid19 PV PV j j 1 m PV PV In order reason multiagent systems agent represented timed automa ton assume existence local valuation function VT Ai Li 2PV agent We require cid19 VT Ai l l Li The global valuation function VT A L 2PV parallel composition deﬁned VT Al1 lm VT Ai li Given real time interpreted deﬁned follows m i1 cid2 cid2 m i1 Fig 5 Equivalence clock valuations clocks cmax 1 A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 1017 Deﬁnition 5 Real time interpreted A real time interpreted tuple M Q q0 1 m V Q subset L RX instantaneous states Q reachable4 q0 deﬁned Deﬁnition 3 Q Q equivalence relation deﬁned l v lcid7 vcid7 iff lil lilcid7 v cid18 vcid7 agent V Q 2PV valuation function Vl v VT Al In line 9 related literature epistemic accessibility relation Two states related agent according information agent available states distinguished words states locally identical agent In discrete time interpreted systems deﬁnition based equality local states agent global states The deﬁnition propose extends assuming local locations agents clock valuations zone In words assume zones clock valuations visible agent states location differ clock zone agent able distinguish consequently states equivalence class induced 3 The logic TECTLK To reason MAS introduce TECTLK logic knowledge real time fusion 5 underlying languages existential fragment TCTL branching real time 1 S5n knowledge operators Obviously deﬁning fusion TCTL problematic 31 use fragment suited model checking method deﬁned later paper 31 Syntax Let PV set propositional variables containing symbol cid19 represents constant true AG set m agents I interval R integer bounds form n ncid7 n ncid7 n ncid7 n ncid7 n n n ncid7 N Let p PV AG Γ AG The set TECTLK formulae deﬁned following grammar ϕ p p ϕ ϕ ϕ ϕ EϕUI ϕ EϕRI ϕ Kiϕ DΓ ϕ EΓ ϕ CΓ ϕ As customary formula EϕUI ψ read exists computation ϕ holds interval I ψ holds R operator Release EϕRI ψ represents exists computation ψ holds interval I ψ ϕ hold ψ holds interval I Ki dual standard epistemic modality Kiϕ read agent considers ϕ possible Similarly modalities DΓ EΓ CΓ diamonds DΓ EΓ CΓ representing distributed knowledge group Γ Γ knows common knowledge agents Γ The basic temporal modalities introduced usual EGI ϕ def α β β α def α β α β Moreover def cid19 α β def ERI ϕ EFI ϕ def Ecid19UI ϕ 32 Semantics Let AG set m agents agent modelled timed automaton T Ai Zi Li l0 Ei Xi Ii Further let T A Z L l0 E X I parallel composition agents fT Aq denote set q runs T A set runs T A start state q In order semantics TECTLK a0 q1 a1 δ1 q1 δ1 introduce notion dense path πρ corresponding q0run ρ q0 cid7 i1 i1 j 0 δj 0 So j 0 δj cid2 r Notice 0 let q2 r cid2 δ0 idxρ r 0 A dense path πρ corresponding ρ mapping R set states Q δ2 Let idxρ r greatest N δ0 q0 δ0 cid7 4 An instantaneous state q L RX reachable iff q0run ρ T A exists instantaneous state ρ equal q 1018 A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 Fig 6 Examples TECTLK formulae hold state q real time interpreted cid7 πρr qi r T A contain consecutive action transitions i1 j 0 δj idxρ r This unique way assume runs Moreover group modalities customary deﬁne following If Γ AG E Γ def E Γ transitive closure E Γ D Γ def iΓ cid8 C Γ cid2 def iΓ Deﬁnition 6 Satisfaction Let M Q q0 1 m V real time interpreted M q α denotes α true state q M M omitted implicitly understood The satisfaction relation deﬁned inductively follows q p q p q ϕ ψ q ϕ ψ q EϕUI ψ q EϕRI ψ q Kiα q DΓ α q EΓ α q CΓ α iff p Vq iff p Vq iff iff iff iff iff iff iff iff q ϕ q ψ q ϕ q ψ ρ fT Aqr I πρr ψ r cid7 r πρr cid7 ϕ ρ fT Aqr I πρr ψ r cid7 r πρr cid7 ϕ qcid7 Qq qcid7 qcid7 α Γ qcid7 qcid7 α qcid7 Qq D Γ qcid7and qcid7 α qcid7 Qq E Γ qcid7 qcid7 α qcid7 Qq C Some examples TECTLK formulae holding state q real time interpreted shown Fig 6 A TECTLK formula ϕ satisﬁable iff exists real time interpreted M Q q0 1 m V instantaneous state q M M q ϕ A TECTLK formula ϕ valid M denoted M ϕ iff M q0 ϕ ϕ true initial state M use term model checking problem denote problem checking validity ϕ M given explicitly5 Note logic branching real time TCTL undecidable 1 sense theoremhood problem undecidable Since real time interpreted systems shown expressive TCTL structure time graph 1 fusion 5 TCTL S5 knowledge proper extension TCTL follows problem satisﬁability fusion undecidable Still decidability TECTL known TECTL decidable straightforward TECTLK decidable real time interpreted systems In fact decidability results satisﬁability problem TECTLK 5 Note authors recently term model checking problem refer situations M given implicitly means dedicated programming language A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 1019 application purposes interested model checking problem TECTLK shown decidable Lemma 1 Lemma 1 Given real time interpreted M TECTLK formula ϕ decision procedure checking M satisﬁes ϕ Proof The correctness lemma follows lemma correctness labelling algorithm 1 Proposi tion 321 9 cid2 4 Epistemic region graph discretisation Any real time interpreted dense inﬁnite To perform model checking efﬁciently consider appropriately generated ﬁnite version In particular use epistemic region graph ERG deﬁned extension region graph 1 augmented include relation agent AG Let AG set m agents agent modelled timed automaton T A Z L l0 E X I parallel composition The epistemic region graph timed automaton T A tuple Mrg S ι rg rg 1 rg m Vrg S L ZX set reachable states called regions note element S pair l Z l location Z zone ι l0 Z0 initial region Z0 v0 recall v0x 0 x X rg S Z τ S deﬁned Time transition l Z τrg l Zcid7 iff exist v Z vcid7 Zcid7 l vcid7 l Zcid7cid7 S Zcid7cid7 vcid7cid7 Zcid7cid7 v cid18 vcid7cid7 vcid7cid7 cid18 vcid7 l v δ l vcid7 δ R l vcid7cid7 δcid7cid7 b l v δcid7 c v cid18 vcid7 v cid18 vcid7 δcid7cid7 δcid7cid7 R Action transition For Z l Z arg lcid7 Zcid7 iff following conditions hold l Z boundary6 b exist v Z vcid7 Zcid7 l v lcid7 vcid7 exist Zcid7cid7 vcid7cid7 Zcid7cid7 l Z τrg l Zcid7cid7 l vcid7cid7 lcid7 vcid7 rg S S relation deﬁned l Z lcid7 Zcid7 iff lil lilcid7 Z Zcid7 agent Obviously equivalence relation Vrg S 2PV valuation function extends VT A follows Vrgl Z VT Al An illustration deﬁnition action time transition relation shown Fig 7 The following lemma guarantees epistemic region graph preserves validity TECTLK formulae Lemma 2 Let AG ﬁnite set agents modelled timed automata T A Z L l0 E X I parallel composition VT A valuation function T A M real time interpreted T A Further let l L v vcid7 RX v cid18 vcid7 Then TECTLK formula ϕ M l v ϕ iff M l vcid7 ϕ Proof The proof lemma follows directly lemma equivalence clock valuations 1 deﬁnition accessibility relation agent cid2 In Section 5 deﬁne bounded model checking BMC technique verify TECTLK properties real time interpreted systems The BMC method relies symbolic encoding transition relations real time 6 A region l Z boundary δ R v Z v cid18 v δ 1020 A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 Fig 7 Time action transitions epistemic region graph interpreted consideration Boolean formulae But given Lemma 2 sufﬁcient deﬁne Boolean formulae encode transition relations epistemic region graph To perform task discretise state space discretisation method described 33 shortly reported 41 Discretisation Let T A Z L l0 E X I timed automaton ϕ TECTLK formula cmaxϕ largest constant appearing CT A interval temporal operators ϕ We choose Δ 12cid23log22X cid24 discreti sation step7 deﬁne discretised clock space DX cid9 kΔ 0 cid2 kΔ cid2 2cmaxϕ 2 k N D cid10 Note clocks 2cmaxϕ 2 This evaluating TECTLK formula ϕ timed automata need distinguish clock valuations cmaxϕ 1 Therefore maximal values time delays restricted cmaxϕ 1 set values change valuation zone deﬁned E cid9 kΔ 0 cid2 kΔ cmaxϕ 1 cid10 Next subset UX DX allows preserve time transitions epistemic region graph insisting values clocks v UX odd multiplications Δ UX cid10 cid9 v DX x X k N vx 2kΔ vx 2k 1Δ To preserve action transitions epistemic region graph use called adjust transitions cid15 L DX L UX The aim transitions replace points longer UX executing action time tran sition zoneequivalent points UX Formally adjust transitions deﬁned follows Let l v l vcid7 L DX Then l v cid15 l vcid7 iff vcid7 UX x X vcid7x cid2 cmaxϕ 1 v cid18 vcid7 Example 4 Consider timed automaton T A clocks x y TECTLK formula ϕ Moreover assume 2cid23log222cid24 cmaxϕ 1 Fig 8 shows discretised clock space D2 T A The chosen discretisation step Δ 1 4 Therefore 1 4 3 4 2 D 0 1 D2 0 0 0 1 U2 0 0 0 2 4 2 4 1 4 4 0 2 4 0 1 0 1 2 4 4 3 4 1 2 4 2 2 4 1 4 0 4 1 4 1 4 2 4 1 4 1 4 0 1 4 1 4 3 4 1 4 0 4 1 4 1 1 4 1 4 4 4 4 3 3 4 3 4 3 4 4 4 4 4 1 4 4 3 3 4 1 1 4 3 4 3 7 A different discretisation step possible reported convenient model checking method described later A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 1021 Fig 8 A Discretisation R2 cmaxϕ 1 elements D2 Notice black dots transparent rectangles elements D2 transparent rectangles elements U2 B Zones R2 cmaxϕ 1 elements U2 The represented black rectangles 42 Discretised interpreted In section deﬁne discretised interpreted enjoys property epistemic region graph Mrg preserves validity TECTLK formulae Deﬁnition 7 Discretised interpreted Let E denote set E 0 denote composition relations A discretised interpreted timed automaton T A Z L l0 E X I structure Md Sd s0 d m Vd Sd L UX set reachable states s0 l0 v0 initial state relation d d Sd Z τ Sd deﬁned 1 d Discrete time transition l v τd l vcid7 iff l v δ cid15 l vcid7 δ E δcid7 cid2 δvcid7 δcid7 cid18 v vcid7 δcid7 cid18 vcid7 v cid18 vcid7 v cid18 vcid7 δcid7cid7 δcid7cid7 E Discrete action transition l v ad lcid7 vcid7 iff l v boundary 8 l v cid15 lcid7 vcid7 l v τd cid15 lcid7 vcid7 Z The accessibility relation d tion function Vd Sd 2PV given Vd l v VT Al Sd Sd AG accessibility relation M The valua For intuition consider region pair l Z location l L zone Z A time transition relation represents region passage time sharing location In order sure valuations clocks 2cmaxϕ 2 taking transition value clock exceed cmaxϕ 1 adjust time transition cid15move An action transition represents action adjusted cid15move order stay U taken nonboundary region possibly preceded time transition step Note action transition taken boundary region sure consecutive action transition steps run Lemma 3 Discretisation preserves time successor Let cid11Z Z UX zone Z ZX For region l Z l Zcid7 l Z τrg l Zcid7 exist v cid11Z vcid7 cid11Zcid7 l v τd l vcid7 Proof The proof lemma follows directly Lemmas 4144 33 cid2 8 A state l v boundary δ kΔ 0 kΔ 1 case v cid18 v δ 1022 A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 Lemma 4 Discretisation action successor Let cid11Z Z UX zone Z ZX For Z region l Z l Zcid7 l Z arg l Zcid7 exists v cid11Z exists vcid7 cid11Zcid7 l v ad l vcid7 Proof The proof lemma follows directly Lemma 42 33 cid2 The reverse Lemmas 4 3 holds The following lemma guarantees discretised interpreted preserves validity TECTLK formu lae Lemma 5 Let AG ﬁnite set agents modelled timed automata T A Z L l0 E X I parallel composition VT A valuation function T A M real time interpreted T A l L v RX Then TECTLK formula ϕ M l v ϕ iff exists vcid7 UX v cid18 vcid7 M l vcid7 ϕ Proof The proof lemma follows directly Lemmas 2 3 4 cid2 5 TECTLK bounded model checking Bounded model checking BMC SATbased technique symbolic model checking Compared BDD based model checking offers advantage handling veriﬁcation large state spaces albeit smaller fragment language The main idea BMC avoid state space generation instead look witnesses existential speciﬁcation suitable subsets model Once submodel selected formula checked considered submodel translated propositional formulae propositional satisﬁability problem solved specialised SAT solvers If test positive speciﬁcation holds submodel model given particular existential syntax checked If larger submodel selected procedure run Note times procedure ﬁnd bugs systems attempting ﬁnd counterexamples universal formulas checking negations While approach intrinsically efﬁcient BDDbased approaches applications case faults identiﬁed small fragments model In cases BMC represents extremely appealing alternative standard techniques The efﬁciency approach experimentally demon strated 4182425 For case paper knowledge real time extend technique employed TECTL 25 ECTLK 23 We ﬁrst translate model checking problem TECTLK model checking problem logic called ECTLKy deﬁne BMC ECTLKy Thanks translations model checking problem inﬁnite state space translated bounded model checking ﬁnite state space Soundness completeness translations guaranteed Theorems 1 2 3 presented 51 Translation TECTLK ECTLKy In general model checking problem TECTL translated model checking problem fair version ECTL 1 Since assumed deal timeprogressive timed automata extend procedure 1 TECTLK introduce slightly different logic ECTLKy presented Let AG ﬁnite set agents modelled timed automata T A Z L l0 E X I parallel composi tion VT A valuation function ϕ TECTLK formula First construct new timed automaton T Aϕ Zcid7 L l0 Ecid7 X cid7 I extending T A 1 new clock y corresponds intervals appearing ϕ X cid7 X y9 2 action ay Zcid7 Z ay 3 set Ey l ay true y l l L special transitions 9 One clock sufﬁcient perform bounded model checking algorithm presented section Note model checking methods require clock interval appearing TECTLK formula consideration A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 1023 reset new clock y Ecid7 E Ey These transitions start runs subformulae ϕ checked We extend set propositional variables PV set PV cid7 PV pyI I interval ϕ pb pyI propositional variable true states y I pb proposi tional variable representing fact state region boundary Further construct discretised interpreted T Aϕ augment valuation function set PV cid7 propositional variables Finally translate TECTLK formula ϕ ECTLKy formula ψ crϕ model checking ϕ discretised interpreted T A reduced model checking ψ discretised interpreted T Aϕ In order translate TECTLK formula ϕ corresponding ECTLKy formula ψ map ECTLK language ECTLKy reinterpreting temporal operators denoted EyU EyR This language inter preted discretised interpreted T Aϕ Formally p PV AG Γ AG set WF ECTLKy formulae deﬁned following grammar α p p α α α α EyαUα EyαRα Kiα DΓ α CΓ α EΓ α 1 d Let Md Sd s0 d d m Vd discretised interpreted T Aϕ set Sd contains reachable states s Sd α β formulae ECTLKy T A denote d transitions labelled elements Z τ y denotes transitions reset clock y A path π Md sequence s0 s1 states si T A si1 N The set paths starting s Md denoted def E The satisfaction relation Πs Recall Γ AG E Γ ECTLKy deﬁned inductively follows Γ D C Γ d d def def iΓ iΓ cid2 cid8 Γ Md s p Md s p Md s α β Md s α β Md s EyαUβ iff p Vd s iff p Vd s iff Md s α Md s β iff Md s α Md s β iff Md s EyαRβ iff scid7 Ss y scid7 π Πscid7m cid3 0 Md πm β j mMd πj α scid7 Ss y scid7 π Πscid7m cid3 0 Md πm β j mMd πj α scid7 scid7 α scid7 Ss d Γ scid7 scid7 α scid7 Ss D Γ scid7 scid7 α scid7 Ss E Γ scid7 scid7 α scid7 Ss C Md s Kiα Md s DΓ α Md s EΓ α Md s CΓ α An ECTLKy formula ϕ valid Md denoted Md ϕ iff Md s0 ϕ ϕ true initial state iff iff iff iff model Md Having deﬁned syntax semantics ECTLKy logic introduce translation mentioned A TECTLK formula ϕ translated inductively ECTLKy formula crϕ follows crp p p PV cid7 crp p p PV cid7 crα β crα crβ crα β crα crβ crKiα Ki crα crDΓ α DΓ crα crEΓ α EΓ crα crCΓ α CΓ crα crEαUIi β EycrαUcrβ pyIi crEαRIi β EycrαRcrβ pyIi pb crα pb crα The translation propositional variables negations conjunctions disjunctions intuitive Notice formula EycrαUcrβ pyIi pb crα expresses following conditions 1024 A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 exists path π s0 s1 discretised interpreted T Aϕ starts state value clock y equal zero statement expressed quantiﬁer Ey crEαUI β b exists state si l v π vy I translation β holds state expressed requirement crβ pyI c translation α holds states sj path π j expressed employing standard operator crαUcrβ pyI pb crα Regarding conjunct pb crα notice consideration shape region crβ holds Namely region boundary borders open state belonging region time predecessors belong region Thus require EαUI β holds crα hold continuously crβ crα hold states region crβ holds expressed condition pb crα conjunction crβ pyI Note translation crEαRI β dual crEαUI β The following lemma shows validity TECTLK formula ϕ real time interpreted T A equivalent validity corresponding ECTLKy formula crϕ discretised interpreted T Aϕ Lemma 6 M ϕ iff Md crϕ TECTLK formula ϕ Proof The proof follows directly lemma correctness labelling algorithm 1 Theorem 41 33 TECTL fragment TECTLK deﬁnition relation epistemic fragment TECTLK cid2 In following present BMC method ECTLKy discretised interpreted systems This paired translation shown gives BMC method TECTLK 52 ECTLKy bounded model checking All known BMC techniques based notion satisfaction ﬁnite structures In particular BMC ECTLKy based kbounded satisfaction ECTLKy deﬁnition present 521 Bounded satisfaction We start auxiliary deﬁnitions Let Md Sd s0 d d m Vd discretised interpreted sys tem k N bound As denote T A subset d transitions labelled elements Z τ y set transitions resetting clock y A kpath π Md ﬁnite sequence states s0 sk si T A si1 0 cid2 k We denote set kpaths starting s Md Πks Note set convenient way representing kbounded subtree rooted s tree resulting unwinding discretised interpreted s Fig 9 A kpath π s0 sk loop exists 0 cid2 l cid2 k πk T A πl Fig 10 1 d Deﬁnition 8 kmodel Let Md Sd s0 d d bound A kmodel Md structure Mk Sd s0 Pk Py d Py s scid7 s y scid7 s scid7 Sd 1 d m Vd discretised interpreted k N m Vd Pk Πks 1 d cid2 sSd Satisfaction temporal operator EyR kpath π bounded case depends π loop Therefore introduce function loop Pk 2N allows identiﬁcation kpaths actually loops This function deﬁned loopπ 0 cid2 cid2 k πk T A πi returns set indices states transition state kpath π Note kpath loop represents inﬁnite path Fig 10 Now deﬁne notion bounded satisfaction ECTLKy formulae bounded structures Let k N Md discretised interpreted Mk kmodel α β ECTLKy formulae Mk s α denotes α true state s Mk The satisfaction relation deﬁned inductively follows A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 1025 Fig 9 Unwinding discretised interpreted Md state s Md b Π2s Md Fig 10 Two kinds kpaths Mk s p Mk s p Mk s α β Mk s α β Mk s Kiα Mk s DΓ α Mk s EΓ α Mk s CΓ α Mk s EyαUβ Mk s EyαRβ iff iff p Vd s iff p Vd s iff Mk s α Mk s β iff Mk s α Mk s β iff iff iff iff iff π Πks00 cid2 j cid2 kMk πj α s d π Πks00 cid2 j cid2 kMk πj α s D π Πks00 cid2 j cid2 kMk πj α s E π Πks00 cid2 j cid2 kMk πj α s C scid7 Sd s scid7 Py π Πkscid70 cid2 j cid2 k Mk πj β 0 cid2 j Mk πi α scid7 Sd s scid7 Py π Πkscid70 cid2 j cid2 k Mk πj α 0 cid2 cid2 j Mk πi β 0 cid2 j cid2 kMk πj β loopπ cid12 πj Γ πj Γ πj Γ πj We use deﬁnition interpret ECTLKy ﬁnite structures Pictorial descriptions bounded satisfac tion ECTLKy formulae shown Fig 11 An ECTLKy formula ϕ valid kmodel Mk denoted Md k ϕ iff Mk s0 ϕ ϕ true initial state kmodel Mk Md denotes size Md sum elements set Sd elements d We model checking problem Md ϕ reduced bounded model checking problem Md k ϕ Lemma 7 Let k N Md discretised interpreted Mk kmodel ϕ ECTLKy formula Then s Md Mk s ϕ implies Md s ϕ Proof By straightforward induction length ϕ cid2 Lemma 8 Let Md discretised interpreted Mk kmodel k Md ϕ ECTLKy formula s state Md If Md s ϕ Mk s ϕ 1026 A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 Fig 11 Examples satisfaction ECTLKy formulae bounded models Proof By induction length ϕ The lemma follows directly propositional variables nega tions Next assume hypothesis holds proper subformulae ϕ If ϕ equal α β α β easy check lemma holds Consider ϕ following forms 1 ϕ EyαUβ By deﬁnition unbounded satisfaction state scid7 Md s y scid7 path π Πscid7 exists m 0 Md πm β 0 cid2 m Md πi α Since set states Md ﬁnite m cid2 k m cid2 Md Thus inductive assumption Mk πm β Mk πi α 0 cid2 m Now consider preﬁx πk length k path π We πk Πkscid7 By deﬁnition kmodel s scid7 Py Therefore deﬁnition bounded satisfaction Mk s EyαUβ 2 ϕ EyαRβ By deﬁnition unbounded satisfaction state scid7 Md s y scid7 path π Πscid7 m cid3 0Md πm β 0 cid2 mMd πi α This implies 1 m cid3 0Md πm β 2 cid2 kMd πi α j cid2 iMd πj β Let consider following cases Assume 1 holds Since set state Md ﬁnite path π following form π0 πi 1πi πkω cid2 k Thus loopπ cid12 preﬁx π length k belongs Πkscid7 Further deﬁnition kmodel s scid7 Py inductive assumption Mk πm β 0 cid2 m cid2 k Therefore deﬁnition bounded satisfaction Mk s EyαRβ Assume 2 holds Since set states Md ﬁnite cid2 k cid2 Md Thus inductive assumption Mk πi α Mk πj β 0 cid2 j cid2 Now consider preﬁx πk length k path π It obvious πk Πkscid7 Further deﬁnition kmodel s scid7 Py So deﬁnition bounded satisfaction Mk s EyαRβ 3 ϕ Kiα By deﬁnition unbounded satisfaction state scid7 Md s d scid7 Md scid7 α By inductive assumption Mk scid7 α Since scid7 reachable reachable s0 k Md steps Thus kpath π Pks0 πi scid7 cid2 k So Mk s Kiα 4 ϕ EΓ α ϕ EΓ α iΓ Kiα Therefore result follows case speciﬁc Γ cid12 basic case Boolean connectives 5 ϕ DΓ α Straightforward deﬁnition case ϕ Kiα 6 ϕ CΓ α Note Md s CΓ α iff Md s cid12 icid3Md EΓ iα So induction case Mk s CΓ α cid2 The main theorem section states Md bounded satisfaction equivalent unbounded A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 1027 Theorem 1 Let Md discretised interpreted Mk kmodel k Md ψ ECTLKy formula Then Md ψ iff Md k ψ Proof The proof follows Lemmas 7 8 cid2 522 Submodels kmodels The previous subsection ends following conclusion check ECTLKy formula ψ holds discretised interpreted Md ψ holds kmodel Mk k cid2 Md In subsection stronger property Namely prove ψ holds Md ψ holds submodel Mk Deﬁnition 9 Submodel A submodel kmodel Mk Sd s0 Pk Py d Scid7 s P cid7 s P cid7 y m V cid7 rooted state s Sd P cid7 k P cid7 1 cid7 Py Scid7 Scid7 cid7 Scid7 Scid7 1 m V cid7 Vd cid4 Scid7 Pk Scid7 r Sd π P cid7 1 d y cid7 k m Vd tuple M cid7s ki cid2 kπi r Satisfaction ECTLKy submodel M cid7s deﬁned Mk We introduce deﬁnition function fk gives bound number kpaths submodel M cid7s y submodel M cid7s We function fy gives bound number elements set P cid7 later validity ψ Mk equivalent validity ψ M cid7s provided bound k chosen appropriately considering fk fy given The function fk WF N deﬁned fkp fkp 0 p PV cid7 fkα β maxfkα fkβ fkα β fkα fkβ fkEyαUβ k fkα fkβ 1 fkEyαRβ k 1 fkβ fkα 1 fkY α fkα 1 Y Ki DΓ EΓ fkCΓ α fkα k The function fy WF N deﬁned fyp fyp 0 p PV cid7 fyα β maxfyα fyβ fyα β fyα fyβ fyEyαUβ k fyα fyβ 1 fyEyαRβ k 1 fyβ fyα 1 fyY α fkα Y Ki DΓ EΓ CΓ Lemma 9 Let M cid7s M cid7cid7s submodels Mk P cid7 k M cid7s k ψ M cid7cid7s k ψ Proof By straightforward induction length ψ cid2 P cid7cid7 k P cid7 y P cid7cid7 y ψ ECTLKy formula If The lemma shows validity ψ Mk equivalent validity ψ M cid7s provided bound k chosen means fk fy functions Lemma 10 Mk s ψ iff submodel M cid7s Mk P cid7 k s ψ cid2 fkψ P cid7 y cid2 fyψ M cid7s Proof The implication right left straightforward To prove implication left right use induction length ψ 1028 A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 The lefttoright implication follows directly propositional variables negations Consider following cases y y cid2 fyα submodel M cid7cid7s Mk M cid7cid7s s β P cid7cid7 k Let ψ α β Mk s α β By deﬁnition bounded satisfaction Mk s α Mk s β Hence induction submodel M cid7s Mk M cid7s s α P cid7 cid2 fkα k cid2 fkβ P cid7cid7 P cid7 cid2 fyβ y y Now consider submodel M cid7cid7cid7s Mk P cid7 P cid7cid7cid7 k P cid7cid7cid7 P cid7cid7 k Thus P cid7cid7cid7 k s β Therefore deﬁnition bounded satisfaction M cid7cid7cid7s s α β k P cid7cid7cid7 k P cid7cid7cid7 cid2 maxfkα fkβ P cid7cid7cid7 y cid2 maxfyα fyβ It obvious M cid7cid7cid7s s α M cid7cid7cid7s y M cid7s s α y P cid7 P cid7cid7 Let ψ α β Mk s α β By deﬁnition bounded satisfaction Mk s α Mk s β Hence induction submodel M cid7s Mk M cid7s s α P cid7 cid2 k cid2 fyα submodel M cid7cid7s Mk M cid7cid7s s β P cid7cid7 fkα P cid7 cid2 fkβ y k P cid7cid7 P cid7cid7 P cid7cid7 P cid7 y It easy y y observe P cid7cid7cid7 cid2 fyα fyβ So Lemma 9 M cid7cid7cid7s s α k M cid7cid7cid7s s β Therefore deﬁnition bounded satisfaction M cid7cid7cid7s s α β cid2 fyβ Now consider submodel M cid7cid7cid7s Mk P cid7cid7cid7 k cid2 fkα fkβ P cid7cid7cid7 y Let ψ EyαUβ Mk s EyαUβ By deﬁnition state scid7 Sd s scid7 Py k P cid7cid7cid7 P cid7 k y kpath π Πkscid7 0 cid2 m cid2 kMk πm β 0 cid2 mMk πi α 1 Hence inductive assumption 0 cid2 m submodels M iπi Mk P k cid2 fkα P y cid2 fyα πi α 2 submodel M mπm Mk P m k cid2 fkβ P m y cid2 fyβ M m πm β Consider submodel M cid7s Mk P cid7 k construction M cid7s s scid7 P cid7 deﬁnition bounded satisfaction M cid7 s EyαUβ P cid7 k P cid7 y 3 s scid7 Thus m m i0 P i0 P y k y π P cid7 k Therefore conditions 1 2 3 hold cid2 k fkα fkβ 1 cid2 k fyα fyβ 1 Let ψ EyαRβ Mk s EyαRβ By deﬁnition state scid7 Sd s scid7 Py π P cid7 y cid2 cid2 kpath π Πkscid7 0 cid2 j cid2 kMk πj α 0 cid2 cid2 j Mk πi β 0 cid2 j cid2 kMk πj β loopπ cid12 4 5 Let consider cases First assume condition 4 holds Then inductive assumption 0 cid2 cid2 j submodels M iπi Mk P k cid2 fkβ P y cid2 fyβ cid14 cid13 πi M cid14 cid13 πm cid14 cid13 πi M πi β submodel M cid7cid7 cid14 cid13 πm M πm α cid7cid7 cid7cid7 πm Mk P k cid7cid7 cid2 fkα P y cid2 fyα cid2 Consider submodel M cid7s Mk P cid7 j i0 P k k Thus construction M cid7s s scid7 P cid7 6 7 hold deﬁnition bounded satisfaction M cid7s s EyαRβ P cid7 k fkβ fkα 1 P cid7 y Assume condition 5 holds Then inductive assumption j 0 cid2 j cid2 k submodels M j πj Mk P j k cid2 j s scid7 i0 P y k Therefore conditions 4 cid2 k 1 cid2 k 1 fyβ fyα 1 cid2 fkβ P j π P cid7 y y π P cid7 y cid2 fyβ P cid7cid7 k P cid7cid7 y 6 7 A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 cid13 M j cid14 cid13 πj β πj cid14 1029 8 cid2 cid2 Consider submodel M cid7s Mk P cid7 k construction M cid7s s scid7 P cid7 deﬁnition bounded satisfaction M cid7s s EyαRβ P cid7 k P cid7 y cid2 k 1 fyβ fyα 1 y π P cid7 s scid7 Thus k i0 P y k Therefore conditions 4 8 hold cid2 k 1 fkβ fkα 1 π P cid7 y j 0 P j k k Let ψ Kiα Mk s Kiα By deﬁnition exists π Πks0 cid13 s πj πj α 0 cid2 j cid2 k cid14 9 By inductive assumption submodel M cid7πj Mk P cid7 cid2 fkα P cid7 cid2 fyα y k M cid7πj πj α Consider submodel M cid7cid7s Mk P cid7cid7 y Since π P cid7cid7 P cid7 P cid7 π P cid7cid7 k y k k s Scid7cid7 condition 9 holds construction M cid7cid7s deﬁnition bounded satisfaction M cid7cid7 s Kiα P cid7cid7 k cid2 fkα 1 P cid7cid7 y Let ψ EΓ α Mk s EΓ α By deﬁnition exists π Πks0 cid2 fyα cid13 Mk πj α s E 0 cid2 j cid2 k cid14 Γ πj 10 By inductive assumption submodel M cid7πj Mk P cid7 cid2 fkα P cid7 cid2 fyα y k y Since π P cid7cid7 P cid7 M cid7πj πj α Consider submodel M cid7cid7s Mk P cid7cid7 P cid7 π P cid7cid7 k y k k s Scid7cid7 condition 10 holds construction M cid7cid7s deﬁnition bounded satisfaction M cid7cid7s s EΓ α P cid7cid7 cid2 fyα k cid2 fkα 1 P cid7cid7 y Let ψ DΓ α This case proven similarly Let ψ CΓ α Mk s CΓ α Below prove fkCΓ α fkα k sufﬁcient number paths submodel M cid7s validating ϕ fyCΓ α fyα The actual construction M cid7s given similarly case ψ Kiα ψ α β Note CΓ α 1cid3icid3kEΓ iα fkEΓ 1α fkEΓ α fkα 1 fyEΓ 1α fyEΓ α fyα It easy induction fkEΓ iα fkα fyEΓ iα fyα 1 k Therefore fkψ fk 1cid3icid3kEΓ iα maxfkEΓ 1α fkEΓ kα fkEΓ kα fkα k fyψ fy 1cid3icid3kEΓ iα maxfyEΓ 1α fyEΓ kα fyEΓ kα fyα cid2 cid12 cid12 cid12 From Lemma 10 derive following Corollary 1 Mk s0 ψ iff submodel M cid7s0 Mk P cid7 k M cid7s0 s0 ψ cid2 fkψ P cid7 y cid2 fyψ Proof It follows deﬁnition bounded satisfaction Lemma 10 s s0 cid2 Theorem 2 Let Md discretised interpreted Mk kmodel ψ ECTLKy formula k Md Then Md ψ iff exists submodel M cid7s0 Mk P cid7 k cid2 fyψ M cid7s0 k ψ cid2 fkψ P cid7 y Proof Follows Theorem 1 Corollary 1 cid2 523 Translation Boolean formulae As mentioned main idea BMC ECTLKy consists translating model checking problem ECTLKy problem satisﬁability propositional formula Given ECTLKy formula ψ discretised interpreted Md propositional formula following form cid16 cid15 M ψs0 d ψMk Md ψk k 11 The ﬁrst conjunct Md ψk represents possible submodels Md consist fkψ kpaths Md second conjunct encodes number constraints satisﬁed fkψsubmodels Md ψ satisﬁed Once translation deﬁned checking satisﬁability ECTLKy formula means SATchecker In order deﬁne formula Md ψk proceed follows 1030 A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 Let assume state s discretised interpreted Md encoded bitvector length b depends number locations number clocks discretisation step cmaxϕ So state s Md represented vector w w1 wb called global state variable wi 1 b propositional variable called state variable Notice distinguish states s encoded sequences 0s 1s representations terms propositional variables wi A ﬁnite sequence w0 wk global state variables called symbolic kpath In general need consider number symbolic kpaths This number depends formula ψ investigation returned value fkψ function fk The j th symbolic kpath denoted w0j wkj wij global state variables 1 cid2 j cid2 fkψ 0 cid2 cid2 k For global state variables w wcid7 deﬁne following propositional formulae Isw formula w true valuation sw w iff sw s pw formula w true valuation sw w iff p Vd sw p PV cid7 Hiw wcid7 formula global state variables w l v wcid7 lcid7 vcid7 true valuations sl l slcid7 lcid7 sv v svcid7 vcid7 iff lisl lislcid7 sv cid18 svcid7 encodes equivalence local states agent Rw wcid7 formula w wcid7 true valuations sw w swcid7 wcid7 iff sw T A swcid7 encodes nonresetting transition relation Md Ryw wcid7 formula w wcid7 true valuations sw w swcid7 wcid7 iff sw y swcid7 encodes transitions resetting clock y The propositional formula Md ψk deﬁned state variables w00 wnm 0 cid2 m cid2 k 1 cid2 n cid2 fkψ k constrains fkψ sym We start deﬁnition ﬁrst conjunct deﬁnition M ψs0 bolic kpaths valid kpath Mk Namely d cid15 M ψs0 d cid16 k Is0w00 fkψcid5 k1cid5 n1 m0 Rwmn wm1n The second conjunct formula ψMk ψ00 k inductively deﬁned follows pwmn pmn k pmn k α βmn α βmn k k EyαUβ pwmn αmn k αmn k fkψcid17 cid16mn k βmn k βmn k cid18 cid15 cid15 EyαRβ cid16mn k i1 fkψcid17 cid18 j 0 cid18 kcid17 Rywmn w0i cid18 cid18 kcid17 Rywmn w0i βji k cid19cid19 αli k j 1cid5 l0 cid19 jcid5 l0 βli k αji k cid19cid19 j 0 Rwki wli i1 kcid5 j 0 cid18 βji k kcid17 l0 fkψcid17 Klαmn k DΓ αmn k i1 fkψcid17 cid18 i1 Is0w0i cid13 αji k cid14 Hlwmn wji kcid17 j 0 Is0w0i cid20 kcid17 j 0 αji k cid5 lΓ cid21cid19 Hlwmn wji cid19 A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 1031 EΓ αmn k fkψcid17 cid18 Is0w0i cid20 kcid17 CΓ αmn k i1 cid22 kcid17 j 0 cid23mn EΓ iα i1 k cid21cid19 Hlwmn wji αji k cid17 lΓ This fully deﬁnes encoding formula 11 Now validity ECTLKy formula ψ submodel M cid7s deﬁned functions fk fy equivalent satisﬁability formula 11 Once shown fact conclude validity ψ discretised interpreted Md equivalent satisﬁability formula 11 Theorem 3 Further taking account Lemma 6 claim validity TECTLK formula ϕ real time interpreted T A equivalent satisﬁability formula 11 note propositional formula encodes translation ECTLKy formula crϕ discretised interpreted T Aϕ Lemma 11 Let Md discretised interpreted Mk kmodel ψ ECTLKy formula For state s Md following holds M ψs cid2 fkψ P cid7 y k ψMk satisﬁable iff submodel M cid7s Mk P cid7 cid2 fyψ M cid7s s ψ d k d Proof Let M ψs k ψMk satisﬁable By deﬁnition translation propositional formula ψMk encodes sets kpaths size fkψ satisfy formula ψ sets transitions resetting clock y size fyψ By deﬁnition unfolding transition relation propositional formula M ψsk encodes fkψ symbolic kpaths valid kpaths Mk Hence set kpaths Mk satisﬁes formula ψ size smaller equal fkψ set transitions resetting clock y size fyψ Thus conclude submodel M cid7s Mk P cid7 k The proof induction length ψ The lemma follows directly propositional variables cid2 fyψ M cid7s s ψ cid2 fkψ P cid7 y negations Consider following cases A For ψ α β α β temporal operators proof like 24 B Let ψ Klα Let M cid7s s Klα P cid7 k cid2 fyKlα By deﬁnition bounded satisfaction l πj M cid7s πj α Hence kpath π π0 s0 j cid2 ks d induction obtain j cid2 k propositional formula α00 M απj k satisﬁable Let ii fkα 1 index new symbolic kpath satisﬁes formulae Is0w0ii Hlw00 wjii j 1 k Therefore construction follows propositional formula Is0w0ii cid12 k Hlw00 wjii M Kl αsk satisﬁable Therefore following propositional formula cid2 fkKlα P cid7 y j 0αjii k k satisﬁable cid17 1cid3icid3fkKl α cid18 Is0w0i kcid17 j 0 cid13 αji k cid14 Hlw00 wji cid19 M Kl αsk k Hence deﬁnition translation ECTLKy formula formula equal propositional formula Klα00 M Kl αsk cid2 fkEΓ α P cid7 y C Let ψ EΓ α Let M cid7s s EΓ α P cid7 k cid2 fyEΓ α By deﬁnition bounded satisfac Γ πj M cid7s πj α Hence tion kpath π π0 s0 j cid2 ks E induction obtain j cid2 k propositional formula α00 M απj k satisﬁable Let ii fkα 1 index new symbolic kpath satisﬁes formulae Is0w0ii Hlw00 wjii j 1 k l Γ Therefore construction follows propositional formula j 0αjii Is0w0ii lΓ Hlw00 wjii M EΓ αsk satisﬁable Therefore following proposi tional formula satisﬁable cid18 cid12 cid12 cid19 k k k cid21 cid17 Is0w0i 1cid3icid3fkEΓ α j 0 kcid17 cid20 αji k cid17 lΓ Hlw00 wji M EΓ αsk 1032 A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 k Hence deﬁnition translation ECTLKy formula formula equal propositional formula EΓ α00 M EΓ αsk cid2 fkDΓ α P cid7 y D Let ψ DΓ α Let M cid7s s DΓ α P cid7 k cid2 fyDΓ α By deﬁnition bounded sat Γ πj M cid7s πj α isfaction kpath π π0 s0 j cid2 ks D Hence induction obtain j cid2 k propositional formula α00 M απj k satisﬁ able Let ii fkα 1 index new symbolic kpath satisﬁes formulae Is0w0ii Hlw00 wjii j 1 k l Γ Therefore construction follows j 0αjii propositional formula Is0w0ii lΓ Hlw00 wjii M DΓ αsk satisﬁable Therefore following propositional formula satisﬁable cid12 k cid4 k k cid18 cid17 1cid3icid3fkDΓ α Is0w0i cid20 kcid17 j 0 αji k cid5 lΓ cid21 cid19 Hlw00 wji M DΓ αsk Hence deﬁnition translation ECTLKy formula formula equal propositional formula DΓ α00 M DΓ αsk k cid12 k i1Eiα simple induction E Let ψ CΓ α This shown noting CΓ α case C cid2 Theorem 3 Let Md discretised interpreted ψ ECTLKy formula Then Md ψ iff exists k N ψMk M ψs0 k satisﬁable Proof It follows Theorem 2 Lemma 11 cid2 6 Railroad crossing To exemplify use techniques paper verify extension railroad crossing RCS 17 wellknown example literature real time veriﬁcation In following verify temporal properties customary reactive systems speciﬁcation includes epistemic concepts The sys tem consists agents Train Gate Controller running parallel synchronising events approach exit lower raise Fig 2 When train approaches crossing Train sends approach signal Controller enters crossing 300 500 milliseconds ms event When Train leaves crossing sends exit signal Controller Controller sends signal lower Gate exactly 100 ms approach signal received sends raise signal 100 ms exit Gate performs transition 100 ms receiving request lower responds raise moving 100 ms 200 ms To model scenario assume following set propositions PV p q PV Train p PV Gate q denote L1 L2 L3 sets locations Train Gate Controller respectively The valuation functions Train VTrain Gate VGate Controller VCont shown Fig 2 The valuation function VRCS L1 L2 L3 2PV parallel composition RCS deﬁned VRCSl VTrainl1 VGatel2 VContl3 l l1 l2 l3 L1 L2 L3 In addition verifying standard speciﬁcations based temporal properties check variety temporal epistemic properties For instance check speciﬁcations formalising There exists behaviour RCS agent Train considers possible situation sends approach signal agent Gate send signal 50 milliseconds There exists behaviour RCS agent Controller considers possible situation sends lower signal agent Gate send signal 50 milliseconds There exists behaviour RCS agent Train considers possible situation sends approach signal agent Controller sends lower signal 10 milliseconds agent Gate send signal 50 milliseconds A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 1033 In following example verify ﬁrst property This formalised following TECTLK formula ϕ EF0KTrain cid13 cid14 p EF050q According BMC algorithm TECTLK presented previous section perform BMC RCS property ϕ states discretised interpreted Md RCS additional clock y represented bit vectors ﬁrst To encode possible conﬁgurations terms locations clock valuations RCS Assume following bit representation local locations For Train t0 0 0 t1 0 1 t2 1 0 t3 1 1 Gate g0 0 0 g1 0 1 g2 1 0 g3 1 1 Controller c0 0 0 c1 0 1 c2 1 0 c3 1 1 So global locations RCS following encoding t1 g0 c1 0 1 0 0 0 1 t1 g0 c1 0 1 0 0 0 1 t1 g1 c2 0 1 0 1 1 0 In words need 6 state variables l0 l5 encode possible conﬁguration locations RCS 8 5 8 7 8 3 8 4 8 2 8 6 In order encode clock valuations signiﬁcance RCS encode valuations D k Δ 8 1 1002 clocks x1 x2 x3 y means discretisation 0 cid2 k Δ cid2 1002 0 1 8 cmaxϕ 500 Note sufﬁcient encode integral parts valuations step Δ 1 numerators fractional parts Since largest integral value 1002 largest value numerators 8 10 3 state variables encode values clock 210 1024 23 8 Therefore need 13 state variables encode clock valuations clock respectively 4 13 state variables v0 v51 encode clock valuations 4 clocks So global state variable RCS w l0 l5 v0 v51 w0 w57 To proceed veriﬁcation formula question transition relation Md translated Boolean formula crϕ EyFKTrainp EyFq py050 pb cid19 pb cid19 EyFKTrainp EyFq py050 translated considering possible fkcrϕ 3 submodels Md described previous section To proceed translation transition relation Md ﬁrst consider initial state s0 t0 g0 c0 v0 RCS s0 represented bit vector 58 consecutive 0s With representation encoded following propositional formula Is0w00 57cid5 i0 w00i The step encode transitions Md formula Rwij wi1j j 1 2 3 cid2 k As example encode witness depth k 2 cid21cid25 cid20 cid24 cid15 cid16 t0 g0 c0 0 0 0 0 τ t0 g0 c0 1 4 1 4 1 4 1 4 cid24 cid20 approach t1 g0 c1 0 cid21cid25 1 4 0 1 4 The formula encoding ﬁrst transition witness following form Rrcsw01 w11 5cid5 cid13 cid14 w01i w11i i0 57cid5 i6 w01i 17cid5 w11i w1118 30cid5 w11i w1131 i6 43cid5 i32 i19 56cid5 w11i w1144 i45 w11i w1157 12 The formula encoding second transition witness form Rrcsw11 w21 5cid5 i0 w11i w210 w212 w213 1034 A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 w214 w211 w215 17cid5 i6 w11i w1118 30cid5 i19 w11i w1131 43cid5 i32 w11i w1144 56cid5 i45 w11i w1157 30cid5 i6 w21i w2131 56cid5 i32 w21i w2157 13 Note fact formulae 12 13 fragments formulae Rw01 w11 Rw11 w21 respec tively In order encode example model similar way possible transitions Md encode formulae Rwij wi1j j 1 2 3 cid2 k This process auto mated To encode translation crϕ ﬁrst need encode propositions crϕ For p pw w0 w1 representing fact p holds global states ﬁrst local locations equal 0 1 For q qw w4 w5 representing fact q holds global states local locations equal 1 0 To translation proposition py050w assume following deﬁnition propositional formulae For vectors state variables a1 b b1 bt deﬁne eqa b gea b geqa b lea b cid4 def t i1 ai bi cid12 def t i1ai bi def eqa b gea b def geqa b cid4 t j i1 aj bj Then 0 0 0 0 0 0 0 0 0 0 0 50 0 0 0 0 1 1 0 0 1 0 deﬁne py050w follows py050w def geq cid22 cid13cid13 cid14 w45 w54 0 cid14 cid13cid13 cid14 w45 w54 50 cid14 le cid18 eq cid13cid13 cid14 w45 w54 50 cid14 cid19cid23 wi 57cid5 i55 Further deﬁne formulae Ryw v Hlw v The formula Ryw v deﬁned follows Ryw v 44cid5 j 0 cid14 cid13 wj vj 57cid5 cid13 vj cid14 j 45 14 Let Idxl set indexes bits local states agent l Then formula Hlw v deﬁned follows Hlw v wi vi 15 cid5 iIdxl In sufﬁcient unfold formula crϕ00 k 1 2 according deﬁnition k cid15 cid16 00 crϕ k page 1030 Namely cid15 cid13 EyF KTrain cid15 cid13 EyF KTrain cid13 cid13 cid15 cid19U Ey KTrain 3cid17 cid18 cid14 cid13 q py050 pb cid19 cid13 p EyF cid13 p EyFq py050 00 k cid13 cid14cid14cid14cid16 p EyFq py050 cid14cid14cid16 00 k Ryw00 w0i i1 kcid17 cid15 KTrain j 0 cid13 p EyFq py050 cid14cid16ji k cid19 pb cid19 cid14cid14cid16 00 k A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 1035 cid18 Ryw00 w01 cid18 Ryw00 w02 cid18 Ryw00 w03 j 0 kcid17 j 0 cid18 KTrain cid13 p EyFq py050 cid14cid16j1 k kcid17 cid15 j 0 cid19 kcid17 cid15 KTrain cid13 p EyFq py050 cid14cid16j2 k cid19 cid19 cid15 KTrain cid13 p EyFq py050 cid14cid16j3 k cid18 Ryw00 w01 kcid17 3cid17 cid18 Is0w0t kcid17 cid13cid15 j 0 cid19cid19cid19 cid14 Hlwj1 wlt t1 l0 p EyFq py050 cid16lt k p EyFq py050 cid16lt k cid16lt k cid18 Ryw00 w02 cid18 cid18 3cid17 kcid17 Is0w0t kcid17 cid13cid15 j 0 cid19cid19cid19 cid14 Hlwj2 wlt t1 l0 cid18 Ryw00 w03 cid18 cid18 3cid17 kcid17 Is0w0t kcid17 cid13cid15 j 0 t1 l0 p EyFq py050 cid19cid19cid19 cid14 Hlwj3 wlt cid22 Ryw00 w01 cid18 kcid17 3cid17 cid18 Is0w0t kcid17 cid13 pwlt cid15 EyFq py050 cid16lt k j 0 cid19cid19cid23 cid14 Hlwj1 wlt t1 cid22 l0 Ryw00 w02 cid18 kcid17 3cid17 cid18 Is0w0t cid22 l0 j 0 t1 cid19cid19cid23 kcid17 cid13 pwlt cid15 EyFq py050 cid16lt k cid14 Hlwj2 wlt Ryw00 w03 kcid17 cid13 pwlt l0 cid22 Ryw00 w01 cid15 EyFq py050 cid16lt k cid19cid19cid23 cid14 Hlwj3 wlt cid18 kcid17 3cid17 cid18 Is0w0t cid18 kcid17 j 0 t1 l0 pwlt Hlwj1 wlt cid19cid19cid19cid19cid19cid23 cid18 cid18 3cid17 n1 cid22 cid18 3cid17 n1 Rywlt w0n kcid17 q py050mn m0 cid18 3cid17 k cid18 kcid17 cid18 kcid17 Ryw00 w02 Is0w0t pwlt Hlwj2 wlt Rywlt w0n q py050mn k j 0 t1 kcid17 m0 l0 cid19cid19cid19cid19cid23 cid18 cid18 3cid17 kcid17 j 0 t1 Is0w0t 1036 A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 cid22 Ryw00 w03 cid18 cid18 3cid17 kcid17 j 0 t1 Is0w0t cid18 kcid17 l0 Rywlt w0n q py050mn kcid17 pwlt Hlwj3 wlt cid19cid19cid19cid19cid23 k cid18 kcid17 cid18 kcid17 m0 cid18 3cid17 Is0w0t j 0 t1 l0 Ryw00 w01 pwlt Hlwj1 wlt Rywlt w0n kcid17 cid13 cid14 qwmn py050wmn cid19cid19cid19cid19cid23 m0 cid18 kcid17 3cid17 cid18 Is0w0t j 0 t1 cid18 kcid17 l0 m0 cid18 kcid17 3cid17 cid18 Is0w0t j 0 t1 cid18 kcid17 l0 Ryw00 w02 pwlt Hlwj2 wlt Rywlt w0n kcid17 cid14 cid13 qwmn py050wmn cid19cid19cid19cid19cid23 Ryw00 w03 pwlt Hlwj3 wlt Rywlt w0n kcid17 cid13 cid14 qwmn py050wmn m0 cid19cid19cid19cid19cid23 cid18 3cid17 n1 cid22 cid18 3cid17 n1 cid22 cid18 3cid17 n1 cid22 cid18 3cid17 n1 Checking RCS satisﬁes TECTLK formula checking propositional formula generated method efﬁcient SAT checker This produce solution proving propositional formula satisﬁable It worth noting logic analysis paper provides richer speciﬁcation language veri ﬁcation compared existing approaches For instance RCS specify verify BMC TECTLK speciﬁcation exists behaviour RCS 100 milliseconds agent Train consid ers possible situation sends approach signal agent Gate send signal 50 milliseconds represented formula EF0100KTrain cid13 cid14 p EF050q Other bounded model checking formalisms deﬁned TCTL 25 CTLK 23 With TCTL verify dense time knowledge So check expressive property exists behaviour RCS 100 milliseconds agent Train sends approach signal agent Gate send signal 50 milliseconds expressible TECTL formula cid13 cid14 p EF050q EF0100 Conversely bounded model checking framework CTLK express combinations knowledge time limited discrete model time In weaker language instance verify speciﬁcation exists behaviour RCS agent Train considers possible situation sends approach signal agent Gate send signal expressible CTLK formula EFKTrain cid14 cid13 p EFq Clearly options expressive original speciﬁcation In ﬁrst way referring agent Trains knowledge second explicit temporal interval events referring A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 1037 7 Related work conclusions BMC initially developed veriﬁcation reactive systems extended MultiAgent Systems 182332 In particular BMC extended ACTLcid18 30 TACTL 25 ACTLKD 32 These logics able represent branching time modalities concern Artiﬁcial Intelligence individual group knowledge correctness behaviour respect speciﬁcations In separate developments BMC explored real time temporal logic 32533 In paper tried combine directions developed BMC new logic combines real time knowledge There obstacle extend method presented handle operators representing correct functioning behaviour 19 Combinations real time knowledge deﬁned previously 721 knowledge veriﬁcation mechanism deﬁned To solve difﬁculty dense time use discretisation equal intervals employed 2533 It worth noting intervals explicit length principle To encode information maximum value clock different lengths bitvectors encode integral parts values clock result implementation method suffer terms speed Like SATbased approach size formulae produced translation large example paper demonstrates To evaluate effectiveness practical applications currently implementing method view comparing experimental results We encouraged implementations BMCbased tools 18 2425 showed largely positive results We hopeful technique paper implemented produce comparably fast results References 1 R Alur C Courcoubetis D Dill Model checking dense realtime Information Computation 104 1 1993 234 2 R Alur D Dill Automata modelling realtime systems Proceedings International Colloquium Automata Languages Programming ICALP90 LNCS vol 443 SpringerVerlag 1990 pp 322335 3 G Audemard A Cimatti A Kornilowicz R Sebastiani Bounded model checking timed systems Proceedings 22nd International Conference Formal Techniques Networked Distributed Systems FORTE02 LNCS vol 2529 SpringerVerlag 2002 pp 243 259 4 A Biere A Cimatti E Clarke M Fujita Y Zhu Symbolic model checking SAT procedures instead BDDs Proceedings ACMIEEE Design Automation Conference DAC99 1999 pp 317320 5 P Blackburn M Rijke Y Venema Modal Logic Cambridge Tracts Theoretical Computer Science vol 53 Cambridge University Press 2001 6 RH Bordini M Fisher C Pardavila M Wooldridge Model checking AgentSpeak JS Rosenschein T Sandholm W Michael M Yokoo Eds Proceedings Second International Joint Conference Autonomous Agents Multiagent systems AAMAS03 ACM Press 2003 pp 409416 7 RI Brafman JC Latombe Y Moses Y Shoham Application logic knowledge motion planning uncertainty Journal ACM 44 5 1997 633668 8 EM Clarke O Grumberg DA Peled Model Checking MIT Press Cambridge MA 1999 9 R Fagin JY Halpern Y Moses MY Vardi Reasoning Knowledge MIT Press Cambridge MA 1995 10 R Fagin JY Halpern MY Vardi What machines know On properties knowledge distributed systems Journal ACM 32 2 1992 328376 11 P Gammie R van der Meyden MCK Model checking logic knowledge Proceedings 16th International Conference Computer Aided Veriﬁcation CAV04 LNCS vol 3114 SpringerVerlag 2004 pp 479483 12 J Halpern R van der Meyden MY Vardi Complete axiomatisations reasoning knowledge time SIAM Journal Comput ing 33 3 2003 674703 13 J Halpern Y Moses A guide completeness complexity modal logics knowledge belief Artiﬁcial Intelligence 54 1992 319379 14 W van der Hoek M Wooldridge Model checking knowledge time SPIN 2002Proceedings Ninth International SPIN Work shop Model Checking Software Grenoble France April 2002 15 W van der Hoek M Wooldridge Cooperation knowledge time Alternatingtime temporal epistemic logic applications Studia Logica 75 1 2003 125157 16 M Kacprzak A Lomuscio W Penczek Veriﬁcation multiagent systems unbounded model checking NR Jennings C Sierra L Sonenberg M Tambe Eds Proceedings Third International Conference Autonomous Agents Multiagent Systems AA MAS04 vol II ACM July 2004 pp 638645 17 I Kang I Lee An efﬁcient state space generation analysis realtime systems Proceedings International Symposium Software testing Analysis ISSTA96 ACM Press 1996 pp 413 1038 A Lomuscio et al Artiﬁcial Intelligence 171 2007 10111038 18 A Lomuscio T Łasica W Penczek Bounded model checking interpreted systems preliminary experimental results M Hinchey Ed Proceedings FAABS II LNCS vol 2699 SpringerVerlag 2003 19 A Lomuscio M Sergot Deontic interpreted systems Studia Logica 75 1 2003 6392 20 R van der Meyden K Wong Complete axiomatizations reasoning knowledge branching time Studia Logica 75 1 2003 93123 21 Y Moses B Bloom Knowledge timed precedence clocks Proceedings 13th ACM Symposium Principles Distributed Computing PODC94 ACM Press 1994 pp 274303 22 W Nabialek A Niewiadomski W Penczek A Pólrola M Szreter VerICS 2004 A model checker real time multiagent systems Proceedings International Workshop Concurrency Speciﬁcation Programming CSP04 InformatikBerichte vol 170 Humboldt University 2004 pp 8899 23 W Penczek A Lomuscio Verifying epistemic properties multiagent systems bounded model checking Fundamenta Informati cae 55 2 2003 167185 24 W Penczek B Wozna A Zbrzezny Bounded model checking universal fragment CTL Fundamenta Informaticae 51 12 2002 135156 25 W Penczek B Wozna A Zbrzezny Towards bounded model checking universal fragment TCTL Proceedings 7th International Symposium Formal Techniques RealTime Fault Tolerant Systems FTRTFT02 LNCS vol 2469 Springer Verlag 2002 pp 265288 26 F Raimondi A Lomuscio Automatic veriﬁcation multiagent systems model checking OBDDs Journal Applied Logic 2007 Special issue Logicbased agent veriﬁcation submitted publication 27 S Tripakis S Yovine Analysis timed systems timeabstracting bisimulations Formal Methods System Design 18 1 2001 2568 28 R van der Meyden H Shilov Model checking knowledge time systems perfect recall Proceedings 19th Conference Foundations Software Technology Theoretical Computer Science FSTTCS99 LNCS vol 1738 SpringerVerlag 1999 pp 432445 29 R van der Meyden K Su Symbolic model checking knowledge dining cryptographers Proceedings 17th IEEE Computer Security Foundations Workshop CSFW04 Washington DC USA IEEE Computer Society 2004 pp 280291 30 B Wozna Bounded model checking universal fragment CTL 31 B Wozna A Lomuscio A logic knowledge correctness real time Proceedings 5th International Workshop Computa Fundamenta Informaticae 63 1 2004 6587 tional Logic MultiAgent Systems CLIMA04 LNAI vol 3487 SpringerVerlag 2005 pp 115 32 B Wozna A Lomuscio W Penczek Bounded model checking deontic interpreted systems Proc 2nd Workshop Logic Communication MultiAgent Systems LCMAS04 ENTCS vol 126 Elsevier 2004 pp 93114 33 A Zbrzezny Improvements SATbased reachability analysis timed automata Fundamenta Informaticae 60 14 2004 417434