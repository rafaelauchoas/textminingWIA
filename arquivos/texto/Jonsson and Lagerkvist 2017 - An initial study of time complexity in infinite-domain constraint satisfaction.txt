Artiﬁcial Intelligence 245 2017 115133 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint An initial study time complexity inﬁnitedomain constraint satisfaction Peter Jonsson Victor Lagerkvist b Department Computer Information Science Linköping University SE581 83 Linköping Sweden b Institut für Algebra TU Dresden 01069 Dresden Germany r t c l e n f o b s t r c t Article history Received 6 November 2015 Received revised form 9 January 2017 Accepted 25 January 2017 Available online 27 January 2017 Keywords Constraint satisfaction Inﬁnite domain Time complexity The constraint satisfaction problem CSP widely studied problem numerous applications science artiﬁcial intelligence For inﬁnitedomain CSPs results separating tractable NPhard cases upper lower bounds time complexity hard cases virtually unexplored Hence initiate study worstcase time complexity CSPs We analyze backtracking algorithms determine upper bounds time complexity We present asymptotically faster algorithms based enumeration techniques algorithms applicable wellstudied problems instance temporal reasoning Finally prove nontrivial lower bounds applicable interesting CSPs assumption certain complexitytheoretic assumptions hold The gap upper lower bounds cases surprisingly small suggests upper bounds signiﬁcantly improved 2017 Elsevier BV All rights reserved 1 Introduction This introductory section divided parts begin motivating work continue discussing problems study ﬁnally brieﬂy present results 11 Motivation The constraint satisfaction problem constraint language cid2 CSPcid2 problem ﬁnding variable assignment satisﬁes set constraints constraint constructed relation cid2 This problem widely studied computational problem model classical problems kcoloring Boolean satisﬁability problem natural uniform way In context artiﬁcial intelligence CSPs malizing wide range problems cf Rossi et al 55 Eﬃcient algorithms CSP problems great practical If domain D ﬁnite CSPcid2 instance I variable set V solved O DV polycid3Icid3 time enumerating possible assignments Hence obvious upper bound time complexity This bound cases improved additional information cid2 known cf survey Woeginger 65 textbook Gaspers 29 There growing body literature concerning lower bounds 34394261 Corresponding author Email addresses peterjonssonliuse P Jonsson victorlagerqvisttudresdende V Lagerkvist httpdxdoiorg101016jartint201701005 00043702 2017 Elsevier BV All rights reserved 116 P Jonsson V Lagerkvist Artiﬁcial Intelligence 245 2017 115133 When comes CSPs inﬁnite domains large number results identify polynomialtime solvable cases cf Ligozat 45 Rossi et al 55 However known time complexity solving NPhard CSP problems One conjecture large number practically relevant CSP problems fall tractable cases motivates closer study time complexity hard problems Thus initiate study article 12 Computational problems Assume given instance CSPcid2 cid2 constraint language inﬁnite domain Which upper bounds provide CSPcid2 Clearly method ﬁnitedomain CSPs based enumerating possible variable assignments longer work domain inﬁnite In fact inﬁnitedomain CSPs general undecidable 7 A ﬁrst step consider decidable inﬁnitedomain CSPs However problems recursive function ﬁnd decidable CSP problem solved faster 4 Hence ﬁrst need ﬁx class constraint languages X CSPcid2 included reasonable complexity class cid2 X Througout article exclusively study case CSPcid2 included NP natural wellstudied class problems However considering CSPs inﬁnite domains representational issues highly important A relation ﬁnitedomain CSP problem easy represent simply listing allowed tuples When considering inﬁnitedomain CSPs relations need implicitly represented A natural way consider disjunctive formulas ﬁnite set basic relations Let B denote ﬁnite set basic relations CSPB tractable Let Bω denote closure B ﬁnitary disjunctions let Bk subset Bω containing disjunctions length k We ﬁrst consider ﬁnitedomain example illustrative purposes let D true false let B B 1 B2 B1 true B2 false In words unary constraint form B 1x forces variable x mapped true B2 y forces variable y mapped false It easy CSPBω corresponds Boolean SAT problem CSPBk corresponds kSAT problem Early examples disjunctive constraints inﬁnitedomains instance temporal reasoning 433758 reasoning action change 26 deductive databases 41 More recent examples include interactive graphics 48 rulebased reasoning 46 set constraints applications descriptive logics 10 There works studying disjunctive constraints general point view 1621 concerned separation polynomial cases NPhard cases investigate time complexity hard cases There important connection constraint languages containing ﬁrstorder deﬁnable relations Section 22 details Assume cid2 ﬁnite constraint language containing relations ﬁrstorder deﬁnable B ﬁrst order theory B admits quantiﬁer elimination Then upper bounds CSPcid2 inferred results presented Sections 3 4 This indicates studying time complexity CSPBω worthwhile especially understanding ﬁrstorder deﬁnable constraint languages rapidly increasing 8 CSPs certain AI applications based binary basic relations unions instead free disjunctive formulas This predominant way representing constraints instance spatial reasoning Clearly relations subset relations Bk let B denote set relations We explicitly bound length disjunctions bounded B The literature CSPs voluminous refer reader Renz Nebel 54 introduction We remark exists examples undecidable CSP problems constraint languages form B 32 Hence restricted problems impossible general upper bounds additional restrictions imposed set B basic relations 13 Our results Throughout article primarily measure time complexity number variables Historically common way measuring time complexity vast majority work concerning ﬁnitedomain CSPs concentrates number variables One reason instance massively larger number variables SAT instance I V C V set variables C set clauses contain 22V distinct clauses repeated literals disallowed measuring instance size far optimistic ﬁgures This detrimental naturally appearing test examples tend contain moderate number constraints In light V polycid3Icid3 time cid3Icid3 denotes total informative know SAT solved O 2 cid3Icid3 polycid3Icid3 time number bits needed representing I instead merely knowing solvable O 2 V polycid3Icid3 increasing course true V cid3Icid3 For instance immediately conclude bound O 2 number variables increases run time rapidly increasing number clauses This cid3Icid3 polycid3Icid3 immediately infer bound O 2 Let turn time complexity solving inﬁnitedomain CSPs To solve problems practice backtracking algorithms usually employed The literature heuristically guided backtracking algorithm empirical analyses algorithms huge refer reader good textbook Dechter 24 handbook edited Rossi et al 55 constraint satisfaction information What ﬁnd lacking literature analyses asymptotical performance algorithms worstcase behavior Unfortunately Section 3 highly ineﬃcient worst case Let p denote maximum arity relations set basic P Jonsson V Lagerkvist Artiﬁcial Intelligence 245 2017 115133 117 relations B let m B let V denote number variables given CSP instance We Section 31 time complexity ranges O 22mV p logmV p polycid3Icid3 doubly exponential respect number variables CSPBω O 22mV p log m polycid3Icid3 time B V p log m polycid3Icid3 B consists pairwise disjoint relations The use heuristics probably improve ﬁgures cases able ﬁnd results literature obvious analyze backtracking combined heuristics At stage interested obtaining baseline need know performance simple algorithms start studying sophisticated ones However bounds improved utilizing standard methods described literature demonstrate Section 32 applying highly inﬂuential sparsiﬁcation method Impagliazzo Paturi Zane 36 markedly better bound O 2 In Section 4 switch strategy disjunctive CSP problems solved signiﬁcantly eﬃciently enumerative methods By enumerative method mean method based enumerating kind objects determining given instance solution Let moment simplest possible method solving CSPs ﬁnite domain D enumerate assignments values D variable set V This process yields simple algorithm running O DV polycid3Icid3 time This archetypical example enumerative method However directly applicable inﬁnitedomain CSPs size set D We introduce enumerative methods article structure enumeration domain enumeration Structure enumer ation inspired model checking ﬁnite structure enumerate sequence structures small CSP instances check given instance satisﬁed implicitly represented solutions structures Domain enumeration closely related enumerative approach ﬁnitedomain CSPs In certain cases identify ﬁnite sets canonical domain elements following property exists solution solution uses canonical elements There important differences methods general rule thumb structure enumeration typically easier apply greater range applicability gives worse complexity ﬁgures domain enumeration By structure enumeration obtain upper bound O 2 V p m polycid3Icid3 CSPBω If additionally V p log m polycid3Icid3 sume B jointly exhaustive pairwise disjoint running time improved O 2 This bound beats equals bound presented Section 3 We proceed better bounds certain choices B domain enumeration For instance consider certain temporal CSPs In article Section 5 consider problem determining lower bounds CSPBω identifying functions f algorithm CSPBω better running time O f V We accomplish relating CSP problems certain complexitytheoretical conjectures obtain strong lower bounds majority problems considered Section 4 As example temporal CSP ω problem V log V polycid3Icid3 assuming conjecture known order relations Q solvable time O 2 V time c 1 Hence algorithms strong exponential time hypothesis SETH solvable O c present straightforward cases little room improvement SETH fails It appears diﬃcult obtain lower bounds problems type CSPB However succeed giving 2V Allens interval algebra This bound based strong exponential time hypothesis lower bound O bounds computing chromatic number graphs The upper bound Allens algebra O 22V 1log V plenty room improvements case This article revised extend version earlier conference publication 38 2 Preliminaries In section formally deﬁne constraint satisfaction problem discuss ﬁrstorder deﬁnable relations provide basic deﬁnitions concerning SAT problems exponential time hypothesis 21 Constraint satisfaction We begin providing formal deﬁnition CSP problem parameterized set relations Deﬁnition 1 Let cid2 set ﬁnitary relations set D values The constraint satisfaction problem cid2 CSPcid2 deﬁned follows Instance A set V variables set C constraints form Rv 1 vk k arity R v 1 vk V R cid2 Question Is function f V D f v 1 f vk R Rv 1 vk C The set cid2 referred constraint language Observe require cid2 D ﬁnite Given instance I CSPcid2 write cid3Icid3 number bits required represent I We turn attention constraint languages based disjunctions Let D set values let B B 1 Bm denote ﬁnite set relations D B D j j 1 Let set Bω denote set relations deﬁned ﬁnitary disjunctions B That Bω contains pary relation R Rx1 xp B1x1 Btxt x1 xt sequences variables 118 P Jonsson V Lagerkvist Artiﬁcial Intelligence 245 2017 115133 x1 xp length x j equals arity B j B1 Bt B We refer B1x1 Btxt disjuncts R We assume loss generality disjunct occurs disjunction For k 1 deﬁne Bk subset Bω relation deﬁned disjunction length k Hence allow relations deﬁnable disjunctions length exactly k pointed Section 12 evident Section 23 gives CSPBk natural relationship kSAT It common especially qualitative temporal spatial constraint reasoning study restricted variant Bk relations B arity p Deﬁne B contain pary relation R Rx B 1x Btx x x1 xp We adopt simple representation relations Bω relation R Bω represented deﬁning disjunctive cid11 Bω denote relation Hence Bω constraint language formula Note objects R R sense Deﬁnition 1 We avoid tedious technicalities ignoring issue view constraint languages multisets Given instance I V C CSPBω representation let DisjI B i1 x1 B xt B i1 x1 B xt C denote set disjuncts appearing I We close section introducing notions common qualitative spatial temporal reasoning prob lems Let B B1 Bm set relations domain D B 1 Bm arity p We B B D p B pairwise disjoint PD B B j cid14 j If B JE PD jointly exhaustive JE JEPD mathematical terminology B partitioning set D p Observe B1 Bm different arity properties clearly relevant intersection relations cid2 Let cid2 arbitrary set relations arity p 1 We cid2 closed intersection R 1 R2 cid2 choices R1 R2 cid2 Let R arbitrary binary relation We deﬁne converse Rcid4 R Rcid4 y x x y R If cid2 set binary relations cid2 closed converse Rcid4 cid2 R cid2 22 Firstorder deﬁnable relations Languages form Bω close connection languages deﬁned ﬁrstorder structures admitting quantiﬁer elimination ﬁrstorder deﬁnable relation deﬁned equivalent formula quantiﬁers We following lemma Lemma 2 Let cid2 ﬁnite constraint language ﬁrstorder deﬁnable relational structure D R 1 Rm admitting quantiﬁer elimination R1 Rm JEPD Then exists k 1 CSPcid2 polynomialtime reducible CSPR1 Rmk 2 CSPR1 Rmk solvable O f V polycid3Icid3 time CSPcid2 solvable O f V polycid3Icid3 time Proof Assume relation R cid2 deﬁnable quantiﬁerfree ﬁrstorder formula φi R1 Rm Let ψi φi rewritten conjunctive normal form We need disjunction ψi expressed disjunction R1 Rm Clearly ψi contains positive literals trivial Hence assume negative literal Since R1 Rm JEPD easy negated relation R1 Rm exists cid2 R1 Rm union cid2 equals complemented relation We reduce CSPcid2 CSPR 1 Rmk replacing constraint conjunctive normal formula R1 Rm This reduction polynomial time respect cid3Icid3 deﬁnition stored table ﬁxed size Moreover reduction increase number variables follows CSPcid2 solvable O f V polycid3Icid3 time CSPBk solvable O f V polycid3Icid3 time cid2 As Section 4 result useful use upper bounds CSPBk derive upper bounds CSPcid2 cid2 consists ﬁrstorder deﬁnable relations B There large number structures admitting quantiﬁer elimination interesting examples presented standard textbook model theory cf Hodges 33 A selection problems highly relevant science AI discussed Bodirsky 8 23 SAT exponential time hypothesis The propositional satisﬁability problem SAT important obtaining upper lower bounds later parts article We deﬁne SAT problem usual given set propositional clauses decide satisfying assignment We consider SAT problem restricted clauses length k denote problem kSAT We pointed following fact introduction worth repeating D true f alse B B1 B2 B1 true B2 f alse CSPBω corresponds SAT CSPBk corresponds kSAT Note problem CSPB different respect seen alternative formulation 1SAT SAT restricted unary clauses SAT kSAT NPcomplete problems k 3 2SAT 1SAT solvable polynomial time We use domain 0 1 Boolean values 1 interpreted true 0 false P Jonsson V Lagerkvist Artiﬁcial Intelligence 245 2017 115133 119 NPhardness information concerning running times algorithms solving problems fact superpolynomial condition P cid14 NP For instance sole assump tion P cid14 NP instance rule SAT solved O V log V time The existence eﬃcient algorithms considered unlikely rule algorithms need complexity assumptions stronger P cid14 NP The exponential time hypothesis ETH strong exponential time hypothesis SETH suggested plau sible stronger assumptions These hypotheses intensively study central problems AI planning constraint satisfaction cf Bäckström Jonsson 23 Kanj Szeider 42 Traxler 61 The ETH states exists δ 0 3SAT solvable O 2δV time deterministic algorithm solvable subexponential time 34 If ETH holds increasing sequence δ3 δ4 reals kSAT solved time 2δkcid8V time arbitrary cid8 0 The strong exponentialtime hypothesis SETH conjecture limit sequence δ3 δ4 equals 1 consequence SAT solvable time O 2δV δ 1 34 These conjectures recent years successfully proving lower bounds NPcomplete problems 47 The plausibility SETH debatable reasons plausibility P cid14 NP debatable understanding kind complexity questions suﬃcient One ought note failure hypotheses farreaching surprising consequences connection instance existence subexponential algorithms NPcomplete problems 363956 complexity approximability optimization problems 1849 parameterized complexity theory 1920 solved 2δkcid8V 3 Fundamental algorithms In section investigate complexity algorithms CSPBω CSPBk based branching disjuncts constraints Section 31 sparsiﬁcation method Section 32 Throughout section assume B set basic relations CSPB P The reason assumption algorithms investigate section works repeatedly choosing set disjuncts checks instance CSPB satisﬁable Clearly assumption possible practice great restriction frequently studied problems form CSPBω satisfy condition 31 Branching disjuncts Let B B1 Bm set basic relations maximum arity p 1 Assume instance I CSPBω distinct constraints Each constraint contains variable set V Such instance contains 2mV p m V p disjuncts instance I solved O m V p2mV p polycid3Icid3 O 22mV p logmV p polycid3Icid3 time enumerating possible choices disjunct disjunctive constraint The satisﬁability resulting sets constraints checked polynomial time initial assumptions How enumerative approach compare branching search algorithm In worst case branching algorithm heuristic aid cases bound valid algorithms Analyzing time complexity branching algorithms equipped powerful heuristics different presumably diﬃcult problem Assume instead instance I CSPBk variable set V There m V p different disjuncts i0mV pi k mV pk distinct constraints We solve instances V variables cid3 k leads O kkmV p k polycid3Icid3 O 2klog kmV p k polycid3Icid3 time Finally let I V C instance CSPB variable set V We analyze size C given variable set V V p variable sequences length p 2m different disjunctive relations B Thus 2m V p distinct constraints C constraint length m Nondeterministic guessing gives instances kind solved O m2mV p polycid3Icid3 O 22mV plog m polycid3Icid3 time This appear surprisingly slow mainly fact imposed additional restrictions set B basic relations Hence assume relations B PD Given relations R 1 R2 B clear R1 R2 relation B closed intersection Let I V C instance CSPB For sequence variables x1 xp assume constraint Rx1 xp C This implies solve CSPB O m V p log m polycid3Icid3 time Combining V p polycid3Icid3 O 2 far obtain following upper bounds B Lemma 3 Let B set basic relations maximum arity p let m B Then CSPBω solvable O 22mV p logmV p polycid3Icid3 time CSPBk solvable O 2klog kmV p k polycid3Icid3 time 120 P Jonsson V Lagerkvist Artiﬁcial Intelligence 245 2017 115133 Fig 1 A sunﬂower C1 Cmcid11 Cm heart C m pairwise disjoint petals CSPB solvable O 22mV p log m polycid3Icid3 time CSPB solvable O 2 V p log m polycid3Icid3 time B PD A bit ﬁnetuning needed applying highly general results like Lemma 3 concrete problems For V 2 stance Renz Nebel 54 RCC8 problem solved O c 2 unknown c 1 This problem viewed CSPB B contains JEPD binary relations B 8 Lemma 3 implies CSPB solved O 23V 2 signiﬁcantly slower c 82 However known B closed verse Let I x1 xn C instance CSPB Since B closed converse assume Rxi x j C j Thus solve CSPB O m log m polycid3Icid3 time This ﬁgure matches bound Renz Nebel better c small polycid3Icid3 O 2 V 2 2 V 2 2 32 Sparsiﬁcation The complexity algorithms proposed Section 3 dominated number constraints An idea improving running times reduce number constraints instances One way accomplishing sparsiﬁcation 36 This method originally kSAT problem aim proving kSAT instances linear number V constraints NPcomplete fact ETH true instances Recall Section 23 ETH states 3SAT solvable subexponential time Sparsiﬁcation intuitively described process picking disjunct appears relatively large number constraints create instances I1 I2 corresponding case disjunct true false In I1 safely remove constraints disjunct appears I2 constraints contain disjunct We check satisﬁability I answering yes I1 I2 satisﬁable By repeating process end sequence instances I1 Ik I1 Ik satisﬁable original instance satisﬁable To concretize idea sunﬂower deﬁned set clauses C1 Cm containing number disjuncts C1 Cm cid14 Here tacitly view clause Ci set literals interpretation condition states clauses literal common The clause C1 Cm C heart sunﬂower clauses C1 C Cm C petals sunﬂower This structure visualized Fig 1 By searching sunﬂower C1 Cm m large possible obtain instances I1 I2 corresponding case branch heart petals reducing number constraints number disjuncts constraints Sunﬂowers related structures important combinatorics connections central problems science cf Alon et al 1 Jukna 40 Sec 6 For thorough formal introduction sparsiﬁcation Chapter 163 Flum Grohe 28 Analyzing seemingly simple recursive strategy described means trivial present details The analysis Impagliazzo et al 36 We use sparsiﬁcation solving inﬁnitedomain CSPs We need additional deﬁnitions A family ksets U C consists ﬁnite set U universe collection C S1 Sm S U S k 1 m A hitting set C set C U C S cid14 S C Let σ C set hitting sets C T restriction C S C T T T S If T restriction C σ T σ C We following result1 1 We remark Impagliazzo et al 36 use slightly different terminology P Jonsson V Lagerkvist Artiﬁcial Intelligence 245 2017 115133 121 Theorem 4 Impagliazzo et al 36 For ε 0 positive k constant K algorithm given family ksets U C U n produces list t 2εn restrictions T1 Tt C σ C i1 σ Ti Ti Ti K n Furthermore algorithm runs time polyn 2εn cid2 t Lemma 5 Let B set basic relations maximum arity p let m B Then CSPBk solvable O 2εK log kV p m polycid3Icid3 time ε 0 K constant depending ε k Proof Let I V C instance CSPBk C c1 cm To avoid unnecessary notation view straint c R1x1 Rnxn set R1x1 Rnxn proof Note I solution exists set X DisjI 1 V X satisﬁable 2 X ci cid14 1 m X hitting set C We apply Lemma 5 family ksets U C U DisjI choose ε 0 let T1 Tt resulting set restrictions Note V Ti viewed instance CSPBk convention viewing disjunctions sets We claim following exists 1 t Ti satisﬁable I satisﬁable Assume I satisﬁable Then exists hitting set X DisjI C V X satisﬁable Hence X σ C This implies exists 1 t X σ Ti σ C i1 σ Ti Since V X satisﬁable V Ti satisﬁable Assume instead exists V Ti 1 t V Ti satisﬁable Let s solution Ti Let X Rx DisjI s satisﬁes Rx note V X satisﬁable X hitting set Ti The set Ti restriction C c C exists T Ti T c It follows X hitting set V C implies s solution V C We conclude order prove I satisﬁable suﬃcient ﬁnd satisﬁable instance V Ti Each instance V Ti contains K U K V p m distinct constraints K constant depending ε k solved time O polycid3Icid3 kK V p m exhaustive search Section 31 This gives total running time cid2 t polyV p m 2εV p m 2εV p m kK V p m polycid3Icid3 O 2εV pm 2K V p mlog k polycid3Icid3 O 2εK log kV pm polycid3Icid3 t 2εn cid2 This procedure implemented polynomial space methods presented Section 31 This follows fact restrictions T1 Tt C computed polynomial delay 17 The orem 515 Although running time excessively slow observe signiﬁcantly eﬃcient algorithm CSPBk Lemma 3 However Theorem 6 Theorem 7 Theorem 8 Section 41 2klog kmV p k able improve running time directly enumerating hitting sets corresponding disjuncts instance reverting backtracking algorithms Lemma 5 As demonstrate Theorem 13 bounds strengthened certain CSPBk problems idea inﬂuenced sparsiﬁcation 4 Improved upper bounds In section possible obtain markedly better upper bounds ones presented Sec tion 3 In Section 41 consider algorithms CSPBω based structure enumeration Section 42 consider algorithms CSPBω CSPBk based domain enumeration 41 Structure enumeration We begin presenting general algorithm CSPBω based idea enumerating variable assignments implicitly described instances As case Section 3 assume B set basic relations CSPB solvable O polycid3Icid3 time Theorem 6 Let B set basic relations maximum arity p let m B Then CSPBω solvable O 2mV p polycid3Icid3 time Proof Let I V C instance CSPBω Let S DisjI note S mV p For subset S S ﬁrst determine S satisﬁable Due initial assumption O polycid3Icid3 time set disjuncts viewed instance CSPB Next check S satisﬁes I constraint C determine 122 P Jonsson V Lagerkvist Artiﬁcial Intelligence 245 2017 115133 disjunct included S Each step determined time O polycid3Icid3 time The total running time algorithm O 2mV p polycid3Icid3 cid2 The advantage approach compared branching algorithm Section 3 enumeration variable assign ments sensitive instances large number constraints At point interesting discuss actually meant large number constraints Assume set B B 1 Bm pary basic relations Let consider CSPB2 instances V 2p constraints The number constraints polynomially bounded number variables Theorem 6 shows solve instances O 2mV p polycid3Icid3 time A backtracking algorithm V 2p polycid3Icid3 time reason way Section 31 need choose hand needs O 2 disjunct constraint need try possibilities worst case Obviously 2 small V indicates structure enumeration beats branching algorithms number constraints polynomially bounded number variables 2mV p We speed result making additional assumptions set B This allows enumerate V 2p smaller sets constraints Theorem 6 Theorem 7 Let B set basic relations maximum arity p let m B Then CSPBω solvable O 2 polycid3Icid3 time B JEPD V p log m Proof Let I V C instance CSPBω Observe basic relation arity p B JEPD Let F set functions V p B f F let S f B jx x V p f x B j The set S f contains constraints speciﬁed function f contains constraint tuple V p The size set polynomially bounded V C p ﬁxed constant depends choice basic relations We begin proving claims Claim 1 I satisﬁable exists f F V C S f satisﬁable If I satisﬁable trivially f F V C S f satisﬁable Assume instead I solution s Arbitrarily choose tuple x1 xp V p Since B JEPD tuple sx1 sxp member exactly B B Thus tuple x1 xp V p exists unique B B sx1 sxp B Deﬁne function g V p B returns relation By deﬁnition g member F The function s solution CSP instance V S f choice f implies s solution instance V C S f Claim 2 If V S f satisﬁable f F check polynomial time V C S f satisﬁable Let s solution V S f Arbitrarily choose constraint c c1 ck C Consider c1 B ix1 B B There constraint B jx1 S f construction S f If j s satisﬁes disjunct c1 constraint c If cid14 j s satisfy c1 B PD Otherwise check disjunct If disjunct c1 ck passes test C S f satisﬁable By repeating process constraints C check V C S f satisﬁable This polynomial time size V C size set S f Consider following algorithm solving CSPBω polynomially bounded size V C noted beginning proof 1 ans f alse 2 f F following 3 4 5 6 return ans compute S f V S f satisﬁable V C S f satisﬁable ans true We ﬁrst verify algorithm correct If V C satisﬁable V C S f satisﬁable choice f F algorithm answer f alse If V C satisﬁable exists f F V C S f satisﬁable Claim 1 algorithm answers true Note V S f satisﬁable algorithm perform test Line 5 We continue analyzing time complexity Computing S f takes polynomial time size V C p B ﬁxed constants depends choice B Checking V S f satisﬁable takes polynomial time CSPB polynomialtime solvable problem Finally checking V C S f satisﬁable takes polynomial time Claim 2 The set F contains BV p 2 V p log m functions functions incrementally computed negligible overhead We conclude algorithm runs O 2 V p log m polycid3Icid3 time cid2 Let reconsider RCC8 example Section 31 let B denote corresponding set basic relations We V 2 2 time c 1 obtained concrete polycid3Icid3 time utilizing simple branching algorithm Theorem 71 gives CSPBω solvable know Renz Nebel 54 CSPB solvable O c bound O 2 3V 2 2 P Jonsson V Lagerkvist Artiﬁcial Intelligence 245 2017 115133 123 O 23V 2 polycid3Icid3 time We exploit fact B closed converse instead enumerating functions V 2 B proof Theorem 7 assume V x1 xn merely enumerate polycid3Icid3 solve CSPBω functions xi x j 1 j n B This gives time bound O 2 fast severely restricted problem CSPB This indicates eﬃcient algorithms CSPB 3V 2 2 If set basic relations B PD JE slightly slower algorithm CSPBω Theorem 8 Let B set basic relations arity p let m B Then CSPBω solvable O 2 time B PD V p logm1 polycid3Icid3 cid11 Proof Let I V C instance CSPBω We introduce symbol cid16 indicating care cid11 set functions V p B cid16 exact relation variables variable tuple Let F f F let S f B jx x V p f ix B j cid14 cid16 We function f F begin proving auxiliary result I satisﬁable exists compatible f F satisﬁable Assume exists f F disjunct constraint C satisﬁed s Thus V C satisﬁable compatible f x B cid14 cid16 disjunct Bx constraint C We V S f compatible implies V S f solution s The fact f cid11 cid11 cid11 Assume instead V C solution s Let set S contain disjunct satisﬁed s Also straint C Deﬁne function f V p B cid16 f x B Bx S f x cid16 Note f welldeﬁned function case PD Bx B note f Consider following algorithm solving CSPBω compatible solution s satisﬁes disjunct constraint cid11x simultaneously S B cid14 B cid11 1 ans f alse 2 compatible f F 3 4 5 return ans compute S f V S f satisﬁable ans true cid11 following The correctness algorithm veriﬁed We continue analyzing time complexity Computing S f takes polynomial time size V C p B ﬁxed constants depends choice B Checking V S f satisﬁable takes polynomial time CSPB polynomialtime solvable problem The set F V p logm1 functions functions incrementally computed negligible overhead contains B 1V p 2 Furthermore checking function f F compatible polynomial time We conclude algorithm runs O 2 V p logm1 polycid3Icid3 time cid2 cid11 42 Domain enumeration A fundamental problem structure enumeration number instances enumerated increases rapidly number variables This phenomenon particularly noticeable basic relations high arity arity basic relations B1 Bm p need consider 2mV p instances general case 2log mV p instances JEPD case We suggest alternative enumeration method section domain enumeration offers partial solution problems structure enumeration This section contains parts begin presenting method giving temporal reasoning examples Sections 421 422 respectively We continue elaborating method Sections 423 424 421 Basics A possible solution problem outlined enumerate domain elements instead method analogous basic algorithm solving ﬁnitedomain CSPs This approach presents certain diﬃculties 1 needs exist ﬁnite selection elements guarantees solvable instances solutions restricted elements 2 elements need representable suitable way 3 need eﬃcient method verifying variable assignment elements solution We concretize requirements theorem Theorem 9 Let B set basic relations maximum arity p m B Assume exist functions t u N N arbitrary n 0 124 P Jonsson V Lagerkvist Artiﬁcial Intelligence 245 2017 115133 1 exist ﬁnite sets Sn 1 Sn exists solution f V Sn 1 2 set Sn 3 veriﬁed ucid3Icid3 time function f V S 1 n generated tn time 0 solvable instance I V C CSPB V n V solution given instance I V C CSPBω Let bi maxS 1 S ai Then CSPBω solvable O tV aV 2 V log bV ucid3Icid3 polycid3Icid3 time Proof Let I V C arbitrary instance CSPBω If I solution solution f V S 1 aV condition 1 Condition 2 allows compute set S Sn 1 n For S S generate function V S check solution method condition 3 Generating set S takes tV time 2 Given S S bV V 2 V log bV functions V S size S aV 1 Checking function solution ucid3Icid3 V log bV ucid3Icid3 polycid3Icid3 time cid2 time 3 Taken follows CSPBω solvable O tV aV 2 V A basic requirement structure enumeration CSPB P high time complexity Observe irrelevant domain enumeration suﬃcient check concrete variable assignments solutions 422 Two examples temporal reasoning Let T denote JEPD order relations Q The CSP problem T referred time point algebra intensively studied temporal reasoning community It realized early CSPT tractable 63 soon CSPT tractable 62 It wellknown CSPT ω NPcomplete This follows general results Broxvall et al 16 known earlier instance easily inferred original NPhardness proof Allens algebra 63 We recall Theorem 7 implies CSPT ω solved O 2 V 2log 3 polycid3Icid3 time We improve bound domain enumeration follows Theorem 10 CSPT ω solvable O 2 V log V polycid3Icid3 time Proof Let I V C arbitrary instance CSPT ω If I solution claim solution cid11v v V a1 ap f V 1 V To let f a1 a2 ap Deﬁne f V 1 V f v f solution I cid11 f v f v cid11v f f cid11 V Q arbitrary solution I Assume f cid11v ai We f cid11 f v f v cid11 f cid11 f cid11 f v f v cid11v f cid11v f cid11v cid11v cid11v The set 1 V cardinality V computed O V logV time In words aV 1 cid11 bV V t u polynomials Theorem 9 gives CSPT ω solved O tV aV 2 O polyV 1 2 O 2 V log V polycid3Icid3 V log bV ucid3Icid3 polycid3Icid3 V log V polycid3Icid3 V cid3Icid3 cid2 As second example consider CSPs branching time temporal reasoning Here use domain enumeration substantial way previous example The branching time model instance plan ning 23 analysis veriﬁcation concurrent systems 27 Let F forest containing oriented ﬁnite trees indegree node let D F nodes F We deﬁne following relations F Arbitrarily choose x y D F 1 x F y path x y path y x 2 x F y path x y path y x 3 x F y path y x path x y 4 xcid3F y path x y path y x These basic relations known point algebra branching time We let P F F F cid3F note P JEPD The problem CSPP P 31 problem CSPP ω NPcomplete 15 Example 11 Let I V C instance CSPP ω V x1 x2 x3 x4 x5 C contains constraints x1 F x4 x5cid3F x4 x3 F x5 x5 F x3 x2cid3F x5 x1 F x2 x1 F x5 P Jonsson V Lagerkvist Artiﬁcial Intelligence 245 2017 115133 125 Fig 2 The forest Example 11 xi F x j abbreviation xi F x j xi F x j xi F x j abbreviation xi F x j xi F x j This instance satisﬁable function f x1 f x2 b f x3 d f x4 e f x5 d b d e cid11x f x x x1 x3 x4 x5 f points forest Fig 2 But let f satisfying assignment constraint x1 F x2 satisﬁed partial order Fig 2 cid11x2 g f cid11 From formal viewpoint need work structure F view solutions functions variables D F It impractical work large opaque structure F directly It easier use following observation instance V C CSPP ω solution exist oriented forest T property 1 indegree node T 2 number nodes T equals V relations C satisﬁed T according interpretation basic relations given In particular Theorem 9 applicable explicitly unique names elements D F invent algorithms work representation We know Theorem 7 CSPP ω solved O 2 V 2log 4 polycid3Icid3 O 22V 2 polycid3Icid3 time We improve result Let τ n denote number unlabeled trees n vertices Otter 51 shown exist constants C α limn 1 C 053 α 296 τ n Cαnn52 Theorem 12 CSPP ω solvable O 2 V logτ V V log V polycid3Icid3 time 1 Sn Proof In proof utilize Theorem 9 need deﬁne constants a1 a2 b1 b2 sets Sn 1 Sn arbitrary n functions t u We use alternative representation solutions outlined Example 11 sets Sn concrete forests subsets D F Given n 0 ﬁrst estimate number directed forests n nodes node indegree To enumerate forests instead trees enumerate unlabeled trees n 1 vertices consider trees extra vertex connected vertices By removing vertex obtain forest n vertices implies bn n Hence 2nτ n 1 directed forests n nodes The factor 2n stems observation forest contains n edges edge possible directions We ﬁlter directed forests containing tree indegree vertex let Sn denote forests It follows upper bound 2nτ n 1 1 Sn Next need way compute set directed forests node indegree The non constructive argument generation directed labeled trees n nodes However eﬃciently enumerated polynomial delay demonstrated Wright et al 66 Thus tn 2nτ n 1 polyn Finally need way checking function f V S solution instance V C CSPP ω forest directly use deﬁnitions basic relations P verifying condition This Since S polynomial time function u polynomial V V Putting pieces aid Theorem 9 CSPP ω solvable time O 2 V τ V 1 polyV 2 O 2 V logτ V V log V polycid3Icid3 V log V polycid3Icid3 V τ V 1 2 cid2 A simpler algorithm obtained enumerate labeled trees instance Prüfer sequences 53 instead unlabeled trees However nn2 trees n vertices according Cayleys formula This implies V 2V log V polycid3Icid3 time This substantially slower algorithm Theorem 12 resulting algorithm runs O 2 log τ V 1 cid8V arbitrary cid8 0 V suﬃciently large 423 Bounded disjunctions This section contains eﬃcient method solving CSPBk k ﬁxed constant In particular prob lems interesting studying ﬁnite constraint languages Lemma 2 The idea construct number kSAT 126 P Jonsson V Lagerkvist Artiﬁcial Intelligence 245 2017 115133 instances property satisﬁable original instance solution More similar ideas frequently literature examples include algorithms kSAT 22 algorithms combinatorial optimization 60 Sec 8 derandomization probabilistic CSP algorithms 50 One certain similarities sparsiﬁcation method presented Section 32 sparsiﬁcation based idea trans forming single CSP instance set CSP instances advantageous properties In statement following theorem let ck denote arbitrary real number ck 1 exists deterministic algorithm solving kSAT O 2ckV time Theorem 13 Let B set basic relations maximum arity p m B Assume following holds n 0 1 exist ﬁnite sets Sn 1 2 set Sn 1 n generated time 1 Sn solvable instance I V C CSPB exists solution f V Sn Let bi maxS 1 S ai Then CSPBk solvable O uV aV 2 V log bV 1logckp polycid3Icid3 time V Proof Let I V C arbitrary instance CSPBk Assume V x1 xs If I solution solution f V S 1 n This possible Condition 2 We assume loss generality S S S simplicity additionally assume S 1 2t t 1 For S S construct set kSAT instances F 1 F p exists F satisﬁable solution f V S I We construction 1 aV Condition 1 Thus begin computing set S Sn Arbitrarily choose vector z z1 zV zi 1 3 5 2t 1 1 V We let F z denote kSAT interpret variable xi instance associated vector z The instance F z contains variable set V cid11 false variable xi value zi xi value zi 1 Arbitrarily choose constraint C follows x For simplicity assume constraint maximal arity kp equals Rx1 xkp For tuple cid11 cid11 cid11 x 1 x s r z1 z1 1 z2 z2 1 zkp zkp 1 member set R z1 z1 1 z2 z2 1 zkp zkp 1 add clause forbids assignment variables given interpretation variables described Note clause arity kp Do constraints C It follows F satisﬁable exists satisfying solution f V 1 2t I f x1 z1 z1 1 f x2 z2 z2 1 By choosing possible vectors z end 2t2V bV 2V kpSAT instances satisﬁable I solution We need verify time complexity procedure Note ﬁrst computing F z polynomial time number assignments forbidden constraint 2p p ﬁxed constant Finally time needed verifying satisﬁability F O 2ckp V computing set S takes uV time condition 2 It follows uV bV 2V 2ckpV uV 2 uV 2 V logbV 2 2 V log bV 1logckp V logckp concludes proof cid2 The change time complexity minimal comparison Theorem 9 However note V log bV 2 V 2 2 V log bV 1 exponential speedup negative term log ckp account We remind reader bounded length disjunctions vital method work If length unbounded exponential number assignments excluded adding clauses F z This implies time needed constructing F z adds exponential factor complexity ﬁgure Theorem 13 We turn attention ﬁnite temporal constraint languages Let ﬁrst consider totalordered time The computational complexity CSP problems intensively studied literature In breakthrough result Bodirsky Kára 13 determined complexity CSPcid2 cid2 result shows CSPcid2 tractable NPcomplete It known ﬁrstorder theory Q admits quantiﬁer elimination 1333 Hence exploit Lemma 2 Theorem 13 obtain following corollary Corollary 14 Let cid2 ﬁnite constraint language ﬁrstorder deﬁnable Q If CSPcid2 NPcomplete solvable V log V 1scid2 polycid3Icid3 0 scid2 1 constant depends choice cid2 Otherwise CSPcid2 time O 2 polynomialtime solvable P Jonsson V Lagerkvist Artiﬁcial Intelligence 245 2017 115133 127 Unfortunately similar result branching time branching time admit quantiﬁer elimi nation 8 Section 42 Lemma 2 applicable complexity classiﬁcation available However closely connected constraint languages trees property Examples include triple consistency problem important applications bioinformatics 14 quantiﬁer elimination complexity classiﬁcation 11 424 Improved domain enumeration In proof Theorem 9 compute set S1 Sn ﬁnite variable domains consider possible functions V S1 V S2 V Sn There obviously cases need enumerate functions lead improved complexity ﬁgures We demonstrate considering equality languages An equality language set relations deﬁnable ﬁrstorder formulas structure D Such languages fundamental complexity classiﬁcations inﬁnite domain CSPs classiﬁcation CSP problems based ﬁrstorder deﬁnable relations ﬁxed structure typically includes classiﬁcation equality constraint language CSPs Let E cid14 countably inﬁnite domain D Note E ω sublanguage T ω CSPE ω V log V polycid3Icid3 time Theorem 10 turn based Theorem 9 We improve solved O 2 bound ﬁrst need additional machinery A partition set X n elements pairwise disjoint set X1 Xm m n i1 Xi X A set X n elements Bn partitions Bn nth Bell number Let Ln 0792n lnn1 It known Bn Lnn 5 partitions enumerated O nBn time 2559 cid2 m Theorem 15 CSPE ω solvable O V 2 V log LV polycid3Icid3 time Proof Let I V C instance CSPE ω For partition S1 Sn V interpret variables S equal having value constraint x y holds x y belong set x cid14 y holds x y belong different sets Then check polycid3Icid3 time partition satisﬁes I interpretation The complexity algorithm O V LV polycid3Icid3 O V LV V polycid3Icid3 O V 2 V log LV polycid3Icid3 cid2 The approach taken Theorem 15 viewed opposite extreme Theorem 9 consider function set possible values It known equality constraint languages admit quantiﬁer elimination 12 Hence use Lemma 2 extend Theorem 15 cover arbitrary equality constraint languages Corollary 16 Let cid2 ﬁnite set relations ﬁrstorder deﬁnable D Then CSPcid2 solvable O V 2 polycid3Icid3 time V log LV Recall T k consequently E k solved time O 2 V log V 1sk polycid3Icid3 0 sk 1 This bound beaten Corollary 16 log LV log V 1 sk occurs fairly small V log LV log0792V logln V log V log 126 logln V 5 Lower bounds The algorithms presented Section 4 improved upper bounds compared bounds given Section 3 constraint satisfaction problems It natural ask given reasonable complexity theoretical assumptions room improvement Even providing systematic lower bounds appears challenging problem nontrivial lower bounds given certain cases Such results typically obtained reducing problem believed particular lower bound problem question The reduction needs certain properties order useful basically reduction allowed blow parameter interested Since measure time complexity number variables need reductions introduce small number additional variables This section divided parts Section 51 contains lower bounds CSPBω CSPBk based strong exponential time hypothesis Section 52 obtain lower bounds Allens interval algebra based Chromatic Number problem 51 Lower bounds based SETH We begin providing general lower bound CSPBω Theorem 17 immediately observe Corollary 18 reduction useful analyzing CSPBk k 3 We continue reﬁning results Theorem 19 B JEPD contains equality relation stronger lower bound CSPBω given Theorem 17 This result useful studying CSPBk introduces disjunctive constraints disjuncts 128 P Jonsson V Lagerkvist Artiﬁcial Intelligence 245 2017 115133 Theorem 17 Let B R1 R2 Rm m 1 set nonempty pary basic relations R1 R2 If SETH holds CSPBω solved O 2δV time δ 1 Proof If SETH holds SAT solved O 2δV time δ 1 We provide polynomialtime manyone reduction SAT CSPBω increases number variables constant depends choice B CSPBω solvable O 2δV time δ 1 SAT solvable O 2δV time contradicting original assumption We begin constructing useful gadget Consider following CSP instance I1 R1u1 u p R2v 1 v p This instance satisﬁable R1 R2 nonempty relations Consider instead instance I2 R1z1 u2 u p R2z1 v 2 v p In case instance satisﬁable satisﬁable If satisﬁable note solution f instance I1 property f u1 cid14 f v 1 If I2 satisﬁable continue process identifying variables reach nonsatisﬁable instance I3 R1z1 z1 cid7 cid4 cid5cid6 k times uk1 u p R2z1 z1 cid7 cid5cid6 cid4 vk1 v p k times We following satisﬁable instance I4 R1z1 z1 cid4 cid7 cid5cid6 k1 times uk u p R2z1 z1 cid4 cid7 cid5cid6 k1 times vk v p continue process identifying variables introducing fresh variable z2 arrive instance I5 R1z1 z1 cid4 cid7 cid5cid6 k1 times z2 uk1 u p R2z1 z1 cid4 cid7 cid5cid6 k1 times z2 vk1 v p Just case introduced z1 instance satisﬁable If satisﬁable I4 satisﬁable solution f satisﬁes f uk cid14 f vk Otherwise continue process described In end end satisﬁable instance I R1z1 z1 cid7 cid4 cid5cid6 z2 z2 cid7 cid5cid6 cid4 k1 times k2 times zm zm cid7 cid5cid6 cid4 y uk1km2 u p R2z1 z1 cid7 cid5cid6 cid4 z2 z2 cid7 cid5cid6 cid4 zm zm cid7 cid5cid6 cid4 times y cid11 vk1km2 v p k1 times k2 times times cid11 Note property PD guarantees process stop solution f satisﬁes f y cid14 f y point R1x R2y satisﬁable variable vectors x y identical We abbreviate resulting instance R1z y u R2z y cid11 v let K k1 2 Let f arbitrary solution I We ready present reduction Let I V C instance SAT V set variables C set clauses First observe m 2 B PD B deﬁned domain elements Introduce variables z1 zm v K v p u K u p Given variable x deﬁne φx R1z x u φx R2z x v For clause cid131 cid13k C create constraint φcid131 φcid13k We prove resulting instance J satisﬁable I satisﬁable Assume ﬁrst I solution f V 0 1 We construct solution g V z1 zm v K v p u K u p D J follows First let gzi fzi 1 m gui fui K p gv fv K p Furthermore let gx f y f x 1 let gx f y cid11 f x 0 Arbitrarily choose clause C cid131 cid13m C recall corresponding constraint C cid11 φcid131 φcid13m J Assume loss generality cid131 satisﬁed f If cid131 x1 f x1 1 corresponding satisﬁed g If cid131 x1 relation C f x1 0 corresponding relation C satisﬁable R1z x u Note relation constraint C R2z x v Once constraint C satisﬁed g J cid11 cid11 cid11 cid11 Assume instead J solution f This solution makes disjunct constraint satisﬁed let set S contain exactly satisﬁed disjunct constraint The set S simultaneously contain constraints R1z x u R1z x v variable x V Thus construct solution g I follows R 1z x u S P Jonsson V Lagerkvist Artiﬁcial Intelligence 245 2017 115133 129 gx 1 gx 0 Since onetoone correspondence clauses I disjunctive constraints J follows g satisfying assignment I cid2 If SAT instance I proof Theorem 17 clauses length k resulting CSP instance J instance CSPBk The ETH immediately gives following result Corollary 18 Let B R1 R2 Rm m 1 set nonempty pary basic relations R1 R2 If ETH holds CSPBk k 3 solved O 2δkV time Theorem 17 Corollary 18 wide range applicability restriction set B contains distinct relations R1 R2 R1 R2 There signiﬁcantly better lower bounds impose additional restrictions set B By assuming relations JEPD access usual let denote equality relation given domain view variables single variable obtain stronger lower bounds Similar techniques proving lower bounds instance Traxler 61 Gutin Wahlström 30 Theorem 19 Let B R1 Rm set binary JEPD relations countably inﬁnite domain If SETH holds CSPBω solved O c V time c 1 i1 R B JEPD In proof Proof First observe binary inequality relation cid14 D deﬁned i1 R Let I V C instance SAT variables V x1 xn use cid14 abbreviation m set clauses C Let K integer K log c Assume loss generality n multiple K We construct instance CSPBω n O 1 variables First introduce 2K fresh variables v 1 v 2K K different imposing cid14 constraints Second introduce n impose constraint 1 n K K fresh variables y1 y n 2K n K cid2 m K cid2 yi v 1 yi v 2 yi v 2k K partition V V K We represent set V Boolean variables yi Let V 1 V n variable D To interpret auxiliary variable zi K ary Boolean tuple Let h v 1 v 2K 0 1K injective function assigns Boolean K tuple variable v Let g function 1 K subsets v 1 v 2K v g j jth element hv equal 1 Deﬁne g analogous way Observe g j g j 2K 1 j 1 K For reduction let cid13i1 xi j clause C We assume n xi j cid13i j contains repeated literals For literal cid13i j let V icid11 V set variables xi j replaced cid8 cid13in cid11 cid13i j cid11 n clause V icid11 Each literal cid13i j yicid11 z zgi j cid13i j xi j cid8 zgi j yicid11 z cid13i j constraint n xi j This reduction polynomial time clause n cid11 literals replaced disjunctive cid11 2K 1 disjuncts K constant depending c It follows SAT solved O c n K O 1 polycid3Icid3 O 2 n K O 1log c polycid3Icid3 O 2δn polycid3Icid3 δ 1 K log c Thus SETH hold cid2 As illustrative use theorem temporal problem CSPT ω solvable O 2 V log V polycid3Icid3 V time c 1 SETH holds Lower bounds obtained branching time time O c problem CSPP ω trivial reduction CSPT ω increase number variables simply add constraint x y x y x y pair variables instance Similarly equality constraint satisfaction problem CSPE ω solvable O c V time c 1 SETH fails Hence algorithms presented Section 4 appear simple little room improvement 130 P Jonsson V Lagerkvist Artiﬁcial Intelligence 245 2017 115133 Table 1 The thirteen basic relations Allens interval algebra The endpoint relations xs xe ys ye valid relations omitted Basic relation x precedes y y preceded x x meets y y metby x x overlaps y y overlby x x y y includes x x starts y y started x x ﬁnishes y y ﬁnished x x equals y p p 1 m m 1 o o 1 d d 1 s 1 s f 1 f Example xxx yyy xxxx yyyy xxxx yyyy xxx yyyyyyy xxx yyyyyyy xxx yyyyyyy xxxx yyyy Endpoints xe ys xe ys xs ys xe xe ye xs ys xe ye xs ys xe ye xe ye xs ys xs ys xe ye 52 Lower bounds based Chromatic Number The results Section 51 SETH obtaining lower bounds problems CSPBω CSPBk Unfortunately obvious obtain lower bounds CSPB assumption In section present lower bounds Allens interval algebra conjecture concerning time complexity computing chromatic number graphs The bound strong ones obtained SETH easily generalize CSPB problems We ﬁrst recapitulate basics Allens interval algebra Allens algebra wellknown formalism temporal rea soning considers relations intervals form x y x y R starting ending point respectively Let Allen 213 8192 possible unions set thirteen relations Table 1 For convenience write constraints p mx y xp m y inﬁx notation omitting explicit disjunction signs The problem CSPAllen NPcomplete tractable fragments identiﬁed 44 Given instance I V C CSPAllen ﬁrst create fresh variables xs x V intended represent startpoint endpoint interval x Then observe constraint xr1 rm y C ri basic relation represented disjunction temporal constraints xs xe ys ye deﬁnitions basic relation Table 1 Applying Theorem 10 resulting instance gives following result xe Corollary 20 CSPAllen solvable O 22V 1log V polycid3Icid3 time We relate CSPAllen Chromatic Number problem problem computing number colors needed color given graph Theorem 21 If CSPAllen solved O time arbitrary cid8 0 c V time c 2 Chromatic Number solved O c cid8V Proof We ﬁrst present polynomialtime manyone reduction kColourability CSPAllen introduces k fresh variables Given undirected graph G v 1 vn E introduce variables z1 zk v 1 vn 1 impose constraints z1mz2m mzk 2 v 1 n add constraints v s 3 v v j E add constraint v s 1v j 1z1 v ip m f 1 d 1z j 2 j k 1 v ip m f 1zk Consulting Table 1 v holds right endpoint equal right endpoint zi left endpoint equal left endpoint z1 Thus exactly k possible choices right endpoint 1v j ensures right endpoints v If edge v v j constraint v s corresponding variables differ It follows resulting instance solution G kcolorable Hence polynomialtime Turing reduction Chromatic Number CSPAllen combining binary search evaluate log n Allen instances reduction recall O log n cn O c cid8n cid8 0 Observe k n reduction introduces n fresh variables constant stems cid2 c expression O c V P Jonsson V Lagerkvist Artiﬁcial Intelligence 245 2017 115133 131 The exact complexity Chromatic Number analyzed discussed literature Björklund et al 6 V polycid3Icid3 time Impagliazzo Paturi 35 poses following question c 2 algorithm shown problem solvable 2 Assuming SETH prove 2non lower bound Chromatic Number Hence O CSPAllen major breakthrough Chromatic Number c V 6 Research directions The study inﬁnitedomain CSP time complexity infancy large open questions need addressed We present small selection Analysis algorithms We investigated novel algorithms solving disjunctive CSP problems spect worstcase time complexity eﬃcient backtracking algorithms heuristics These bounds likely improved lower bounds Section 5 probably great degree Despite algorithms solving inﬁnite domain constraint satisfaction problems practice nontrivial applica tions In light following research direction particularly interesting formally analyze time complexity branching algorithms equipped powerful heuristics In case ﬁnitedomain CSPs particular DPLLlike al gorithms kSAT problem numerous results literature cf survey Vsemirnov et al 64 This case inﬁnitedomain CSPs considerable empirical evidence inﬁnitedomain CSPs eﬃciently solved algorithms ought optimistic chances actually obtaining nontrivial bounds Yet sharp formal analyses appear virtually nonexistent literature Quantiﬁed constraint satisfaction In article limited inﬁnitedomain CSP problems included NP A natural generalization CSP problem consider instances allowed contain universally quantiﬁed variables addition existentially quantiﬁed variables This problem general known quantiﬁed constraint satisfaction problem QCSP For ﬁnite domains problem included PSPACE known hold wellstudied languages inﬁnite domains For example QCSP problems equality constraint languages temporal constraint languages general PSPACEcomplete 9 Would possible exploit algorithms CSPE ω CSPT ω order obtain upper bounds QCSP counterparts Upper bounds A natural step obtain upper bounds spatial formalisms RCC5 RCC8 We encountered structure enumeration formalisms binary basic relations B times course article problem CSPBω solved c constant c depends B This bound clearly applicable RCC5 RCC8 raises question domain enumeration lead improved algorithms A starting point analyze complexity point algebra partially ordered time relations algebra expressible RCC5 RCC8 One possibility construct algorithm based algorithm branching time Section 422 It known slightly 2n24 partial orders n nodes 52 Thus approach immediately lead signiﬁcantly faster algorithm c time algorithm based structure enumeration polynomial delay algorithm enumerating partial orders It exist domain enumeration algorithm running c cid11 c Such speedup considered important time c cid11V 2 V 2 V 2 Lower bounds Another obvious research direction strengthen lower bounds Section 5 The probably challenging problem obtain stronger lower bounds CSPB It appears strong exponen tial time hypothesis useful use disjunctions essential We seen conjecture Chromatic Number useful studying Allens algebra achieved bound weaker ob tained expressive disjunctive constraints Unfortunately obvious generalize Allen result problems type CSPB It interesting prove stronger lower bounds CSPBk concrete choices B k As example consider temporal problem CSPT 4 From Corollary 18 CSPT 4 solvable O 2s4V time s4 log 16 assuming ETH holds currently best deterministic algorithm 4SAT runs time c 2 Chromatic Number O 16 solved O c cid8V time arbitrary cid8 0 This proven similar reduction Theorem 21 making use temporal constraints instead interval constraints Hence certain choices B k possible improve general bounds given Section 5 V time 57 On hand CSPT 4 solvable O c V Acknowledgements Peter Jonsson partially supported Swedish Research Council VR Grant 62120123239 Victor Lagerkvist supported National Graduate School Computer Science CUGS Sweden DFGfunded project Homogene Strukturen Bedingungserfüllungsprobleme und topologische Klone Project number 622397 References 1 N Alon A Shpilka C Umans On sunﬂowers matrix multiplication Comput Complex 22 2 2013 219243 132 P Jonsson V Lagerkvist Artiﬁcial Intelligence 245 2017 115133 2 C Bäckström P Jonsson All PSPACEcomplete planning problems equal equal Proceedings 4th Annual Symposium Combinatorial Search SOCS2011 2011 3 C Bäckström P Jonsson A reﬁned view causal graphs component sizes SPclosed graph classes J Artif Intell Res 47 2013 575611 4 B Bauslaugh The complexity inﬁnite H coloring J Comb Theory Ser B 61 2 1994 141154 5 D Berend T Tassa Improved bounds Bell numbers moments sums random variables Probab Math Stat 30 2 2010 185205 6 A Björklund T Husfeldt M Koivisto Set partitioning inclusionexclusion SIAM J Comput 39 2 2009 546563 7 M Bodirsky Constraint satisfaction problems inﬁnite templates N Creignou PG Kolaitis H Vollmer Eds Complexity Constraints Lecture Notes Computer Science vol 5250 Springer Berlin Heidelberg 2008 pp 196228 8 M Bodirsky Complexity classiﬁcation inﬁnitedomain constraint satisfaction Mémoire dhabilitation à diriger des recherches Université Diderot 9 M Bodirsky H Chen Collapsibility inﬁnitedomain quantiﬁed constraint satisfaction Proceedings Computer Science Logic 2006 CSL 2006 Paris 7 2012 Available arXiv12010856 Springer Berlin Heidelberg 2006 pp 197211 10 M Bodirsky M Hils Tractable set constraints J Artif Intell Res 45 2012 731759 11 M Bodirsky P Jonsson TV Pham The complexity phylogeny constraint satisfaction 33rd Symposium Theoretical Aspects Computer Science STACS 2016 February 1720 2016 Orléans France 2016 pp 2012013 12 M Bodirsky J Kára The complexity equality constraint languages Theory Comput Syst 43 2 2008 136158 13 M Bodirsky J Kára The complexity temporal constraint satisfaction problems J ACM 57 2 2010 91941 14 M Bodirsky JK Mueller The complexity rooted phylogeny problems Log Methods Comput Sci 7 4 2011 15 M Broxvall P Jonsson Point algebras temporal reasoning algorithms complexity Artif Intell 149 2 2003 179220 16 M Broxvall P Jonsson J Renz Disjunctions independence reﬁnements Artif Intell 140 12 2002 153173 17 C Calabro The Exponential Complexity Satisﬁability Problems PhD thesis University California San Diego CA USA 2009 18 J Chen B Chor M Fellows X Huang DW Juedes IA Kanj G Xia Tight lower bounds certain parameterized NPhard problems Inf Comput 201 2 2005 216231 19 J Chen X Huang I Kanj G Xia Strong computational lower bounds parameterized complexity J Comput Syst Sci 72 8 2006 13461367 20 Y Chen M Grohe An isomorphism subexponential parameterized complexity theory SIAM J Comput 37 4 2007 12281258 21 D Cohen P Jeavons P Jonsson M Koubarakis Building tractable disjunctive constraints J ACM 47 5 2000 826853 22 E Dantsin A Goerdt E Hirsch R Kannan J Kleinberg C Papadimitriou O Raghavan U Schöning A deterministic 2 2k 1n algorithm kSAT based local search Theor Comput Sci 289 2002 6983 23 TL Dean MS Boddy Reasoning partially ordered events Artif Intell 36 3 1988 375399 24 R Dechter Constraint Processing ElsevierMorgan Kaufmann 2003 25 B Djokic M Miyakawa S Sekiguchi I Semba I Stojmenovic A fast iterative algorithm generating set partitions Comput J 32 3 June 1989 281282 26 T Drakengren M Bjareland Reasoning action polynomial time Artif Intell 115 1 1999 124 27 E Emerson J Srinivasan Branching time temporal logic J Bakker WP Roever G Rozenberg Eds Linear Time Branching Time Partial Order Logics Models Concurrency SpringerVerlag New York 1989 pp 123172 28 J Flum M Grohe Parameterized Complexity Theory Texts Theoretical Computer Science An EATCS Series Springer 2006 29 S Gaspers Exponential Time Algorithms Structures Measures Bounds VDM 2010 30 G Gutin M Wahlström Tight lower bounds workﬂow satisﬁability problem based strong exponential time hypothesis Inf Process Lett 116 3 2016 223226 31 R Hirsch Expressive power complexity algebraic logic J Log Comput 7 3 1997 309351 32 R Hirsch A ﬁnite relation algebra undecidable network satisfaction problem Bull Interest Group Pure Appl Log 7 4 1999 547554 33 W Hodges A Shorter Model Theory Cambridge University Press New York NY USA 1997 34 R Impagliazzo R Paturi On complexity kSAT J Comput Syst Sci 62 2 2001 367375 35 R Impagliazzo R Paturi Exact complexity satisﬁability G Gutin S Szeider Eds Parameterized Exact Computation Lecture Notes Computer Science vol 8246 Springer International Publishing 2013 pp 13 36 R Impagliazzo R Paturi F Zane Which problems strongly exponential complexity J Comput Syst Sci 63 4 2001 512530 37 P Jonsson C Bäckström A unifying approach temporal constraint reasoning Artif Intell 102 1 1998 143155 38 P Jonsson V Lagerkvist Upper lower bounds time complexity inﬁnitedomain CSPs Proceedings 21st International Conference Principles Practice Constraint Programming CP2015 2015 pp 183199 39 P Jonsson V Lagerkvist G Nordh B Zanuttini Complexity SAT problems clone theory exponential time hypothesis Proceedings 24th Annual ACMSIAM Symposium Discrete Algorithms SODA2013 2013 pp 12641277 40 S Jukna Extremal Combinatorics With Applications Computer Science Texts Theoretical Computer Science Springer 2001 41 PC Kanellakis GM Kuper PZ Revesz Constraint query languages J Comput Syst Sci 51 1 1995 2652 42 I Kanj S Szeider On subexponential time complexity CSP Proceedings TwentySeventh AAAI Conference Artiﬁcial Intelligence AAAI2013 2013 2003 591640 43 M Koubarakis Dense time temporal constraints cid14 Proceedings 3rd International Conference Principles Knowledge Repre sentation Reasoning KR92 1992 pp 2435 44 A Krokhin P Jeavons P Jonsson Reasoning temporal relations tractable subalgebras Allens interval algebra J ACM 50 5 September 45 G Ligozat Qualitative Spatial Temporal Reasoning WileyISTE 2011 46 B Liu J Jaffar Using constraints model disjunctions rulebased reasoning Proceedings Thirteenth National Conference Artiﬁcial Intelligence AAAI96 Portland Oregon August 48 1996 vol 2 1996 pp 12481255 47 D Lokshtanov D Marx S Saurabh Lower bounds based exponential time hypothesis Bull Eur Assoc Theor Comput Sci 3 105 2013 48 K Marriott P Moulder PJ Stuckey A Borning Solving disjunctive constraints interactive graphical applications Proc 7th International Confer ence Principles Practice Constraint Programming CP2001 2001 pp 361376 49 D Marx On optimality planar geometric approximation schemes Proceedings 48th Annual IEEE Symposium Foundations 50 RA Moser D Scheder A derandomization Schönings kSAT algorithm Proceedings 43rd ACM Symposium Theory Computing Computer Science FOCS2007 2007 pp 338348 STOC2011 2011 pp 245252 51 R Otter The number trees Ann Math 49 3 1948 583599 52 HJ Prömel Counting unlabeled structures J Comb Theory Ser A 44 1987 8393 53 H Prüfer Neuer beweis eines satzes über permutationen Arch Math Phys 27 1918 742744 54 J Renz B Nebel Eﬃcient methods qualitative spatial reasoning J Artif Intell Res 15 1 2001 289318 P Jonsson V Lagerkvist Artiﬁcial Intelligence 245 2017 115133 133 55 F Rossi P van Beek T Walsh Eds Handbook Constraint Programming Elsevier 2006 56 R Santhanam S Srinivasan On limits sparsiﬁcation Proceeding 39th International Colloquium Automata Languages Program ming ICALP2012 2012 pp 774785 57 U Schöning A probabilistic algorithm kSAT based limited local search restart Algorithmica 32 4 2002 615623 58 K Stergiou M Koubarakis Backtracking algorithms disjunctions temporal constraints Artif Intell 120 1 2000 81117 59 I Stojmenovi c An optimal algorithm generating equivalence relations linear array processors BIT Numer Math 30 3 1990 424436 60 J Thapper Aspects Constraint Optimization Problem PhD thesis Linköping University Linköping Sweden 2010 61 P Traxler The time complexity constraint satisfaction Proceeding Third International Workshop Parameterized Exact Computation 62 P van Beek Approximation algorithms temporal reasoning Proceedings 11th International Joint Conference Artiﬁcial Intelligence 63 MB Vilain HA Kautz Constraint propagation algorithms temporal reasoning Proceedings 5th National Conference Artiﬁcial Intelli 64 M Vsemirnov E Hirsch E Dantsin S Ivanov Algorithms SAT upper bounds complexity J Math Sci 118 2 2003 49484962 65 G Woeginger Exact algorithms NPhard problems survey M Juenger G Reinelt G Rinaldi Eds Combinatorial Optimization Eureka You IWPEC2008 2008 pp 190201 IJCAI1989 1989 pp 12911296 gence AAAI86 1986 pp 377382 Shrink 2000 pp 185207 66 R Alan Wright L Bruce Richmond AM Odlyzko BD McKay Constant time generation free trees J Comput Syst Sci 15 2 1986 540548