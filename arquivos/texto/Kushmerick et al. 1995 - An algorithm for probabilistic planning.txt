ELSEVIER Artificial Intelligence 76 1995 239286 Artificial Intelligence An algorithm probabilistic planning Nicholas Kushmerick Steve Hanks Daniel S Weld Department Computer Science Engineering Box 352350 Universiv Washington Seattle WA 98195 USA Received June 1993 revised March 1994 Abstract We define probabilistic planning problem terms probability distribution initial world states boolean combination propositions representing goal probability threshold actions effects depend executiontime state world random chance Adopting probabilistic model complicates definition plan success instead demanding plan provably achieves goal seek plans probability success exceeds threshold In paper present BURIDAN implemented leastcommitment planner solves problems form We prove algorithm sound complete We explore BURIDANS efficiency contrasting algorithms pIan evaluation combination analytic methods empirical experiments We interplay generating plans evaluating discuss role scarch control probabilistic planning 1 Introduction Classical planning assumes complete deterministic information world domains ignition key usually reasons Even deterministic model possible state effects actions These assumptions turning unknown complex outdoor weather project uncertainty freeways crowded fail useful For example deciding indoor use probabilistic model cloud dynamics The initial world state source inappropriate start ones old car occasionally given domain site wedding likely forecast Corresponding author Email nickcswashingtonedu 0004370295Q950 1995 Elsevier Science BV All rights reserved SSDIOOO4370294000875 240 N Kushmerick et al Artcial Intelligence 76 I 995 239286 This paper presents planning algorithm depend assumptions complete deterministic information We use probability distribution possible world states model imperfect information initial world state model actions conditional probability distribution changes world Adopting probabilistic model complicates definition plan success Instead terminating builds plan provably achieves goal planner terminates builds plan sicientZy likely succeed algorithm produces plan probability plan achieving goal usersupplied probability threshold plan exists The work reported makes contributions First define symbolic action representation provide probabilistic semantics Second implemented algorithm BUFUDAN probabilistic planning Third prove planner sound complete Fourth compare efficiency different probabilistic assessment algorithms analytically empirical experiments Finally explore interface process generating plans process evaluating I I Action representation Following 281 extend standard STRIPS 221 representation allow condi tional probabilistic effects In STRIPS action enabled preconditions satisfied action executed case action deterministic effect If preconditions hold action disabled executing error meaningless This simple model sufficient representing actions multiple possible consequences BIJRIDAN models actions executed world state effect executing action depending executiontime state random chance Consider following simple action robot planning domain Suppose robots grasping operation successful We model actions effects depending state world execution time random chance Specifically model uncertainty pickup action describing terms consequences In consequences robot holding block executing action world state doesnt change To consequence assign probability depends state world action executed For example encode fact gripper dry block successfully grasped 95 time gripper wet block grasped 50 time Fig 1 shows representation pickup action Propositions like GD HB gripper dry holding block characterize relevant worlds state The pL encode conditional probabilities Jean Buridan ba rE diin 1300l 358 French philosopher logician credited originat ing probability theory He toyed idea theory decide alternative courses action parable Buridans Ass attributed ass lacked ability choose starved death placed equidistant piles hay N Kushmerick et al Artcial Intelligence 76 1995 239286 241 Fig 1 The pickup action GD means gripper dry HI3 means holding block corresponding consequence realized action executed For example pa 095 indicates consequence LY realized probability 095 given GD holds action executed As shown Fig 1 actions encoded binary trees The leaves tree actions eflects set changes world state corresponding trigger holds action executed The labels path root encode consequences trigger conjunction expressing conditions consequence occurs For example executing pickup gripper dry GD likely probability 095 cause robot holding block HB Like STEuF5 add deletelists consequences changes world state entire states As shown figure index actions consequences Y p The binary tree representation enforces constraint triggers consequences action mutually exclusive exhaustive exactly realized execution In classical planning world state described set propositions Since BURIDANS domains probabilistic characterize agents knowledge world single state probability distribution possible states In classical paradigm actions cause transition state BURDANS actions induce transition probability distribution Graphical depictions actions like Fig 1 mistaken impression assigning probabilities directly propositions actions consequences regard state world execution time This case assigning probabilities possible world states propositions determinis tically true false Section 2 provides formal semantics action representa tion 12 The planning algorithm The job probabilistic planning algorithm construct sequence actions executing action turn starting initial probability distribution states results final distribution goal expression holds sufficient Since set effects contains simple model robot grippers capture phenomenon dropping held block attempting pickup Of course easy elaborate model account phenomenon introducing HB triggers action effect pickup depends held 242 N Kushmerick et al Artial Intelligence 76 1995 239286 probability sufficiency defined respect usersupplied probability threshold BURIDAN searches space plans finds achieves goal sufficient probability Each plan consists set actions partial temporal ordering relation actions set causal links set subgoals propositionaction pair The items straightforward require explanation A causal link 381 AizAj caches planners reasoning proposition p executed consequence true time action Aj links consumer L action Ai links producer makes true The link said provide cuusul support p To realize support planner try increase probability consequence L Ai realized prevent p false actions BUFUDAN attempts providing additional causal support triggers Ais consequence c set subgoalsis The final component planthe purpose The idea pairs analogous goal agenda classical planner p subgoal action Aj written pAj BURIDAN seeks increase probability p time Aj executed For example way increase probability add plan new action makes p true Whenever BTJRIDAN suppose adds Ai consequence L makes p true records decision BURIDAN makes proposition consequence LS trigger causal link AiJAj subgoal Ai When planning starts set subgoals initialized set goal propositions tagged dummy action denoting end plan In summary subgoals serve focus BURLDANs attention improvements plan tend increase probability goal satisfaction We action Ak threatens causal link AiAj consequence Ak asserts p Ak occur Ai Aj Threatened links signify BURIDANS commitments met planner evasive action For example BURIDAN try constrain threatening action executed Ai Aj eliminating threat Planning starts null plan plan consisting special actions initial goal constraint initial executed goal figures use convention time progresses left right These special actions encode probability distribution initial world states goal expression respectively For example consider world block suppose initially block held gripper dry probability 07 The initial action corresponding distribution shown left Fig 2 Each consequence initial describes possible world states The agents goal encoded distinguished action goal Suppose goal holding block HB right Fig 2 shows goal action goal expression goal single consequence produces SUCCESS triggered goal expression BUFUDAN searches space partial plans performing operations visited node 1 Plan assessment Determine probability current plan achieves goal exceeds probability threshold terminating successfully N Kushmerick et al Artcial Intelligence 76 1995 239286 243 Fig 2 The null plan encodes initial state distribution goal 2 Plan refinement Otherwise try increase probability goal satisfaction refining current plan l nondeterministically choose subgoal pAj add causal link Aj new existing action Ai produce p attempt increase probability p Aj executed l nondeterministically choose existing causal link threatened resolve threat Signal failure possible refinements continue looping new partial plan In Section 14 illustrate operations example described ear lier discuss significant differences BURIDAN planning algorithm leastcommitment planners 13 Discussion Refining plan conditional probabilistic operators differs classical plan refinement SNLP 38 important ways First SNLP establishes single causal link producing action suming action link ensures links literal true consuming action executed Our planner links actions consequences later action An action consequences actually oc cur Furthermore single link AiLSAj ensures p true action Aj trigger tf holds probability Therefore multiple links needed support literal single link makes literal sufficiently likely combination We lose SNLPS clean distinction open condition trigger supported link supported condition guaranteed true Causal support probabilistic plan cumulative concept links supporting literal likely literal true The concept threatened link different actions conditional effects Recall Ak threatens AisAj consequence Ak asserts p Ak ordered Ai Aj BURIDAN resolves threats way classical planners ordering threatening action producer consumer But plan sufficiently likely succeed threat long threat sufficiently unlikely occur We resolve threat additional way confrontation action Ak threatens link AisAj plan occurrence consequence Ak p false 244 N Kushmerick et al Artificial Intelligence 76 1995 239286 A final difference classical planners BUmAN concerns relationship BURIDANS subgoals classical planners goal agenda 44 In classical planner entry agenda true plan consid ered solution case probabilistic planner longer case Thus BURIDAN need consider subgoals devise plan achieves goal sufficient probability Indeed threshold zero need consider 14 Example Recall example robot gripper possibly wet probability 03 needs holding block Alas pickup action unreliable especially gripper wet Suppose dry action usually probability 08 succeeds We illustrate steps planning algorithm example assuming plan constructed works 90 time For expository purposes illustrate BURIDAN making correct nondeterministic choices reality considerable search necessary solution Section 6 141 Plan refinement Plan refinement starts null plan shown Fig 2 Since HB true state initial distribution BCJRIDAN adds instance pickup action plan action HB true BURIDAN creates link pickups cy consequence goal action This link caches planners reasoning HB true pickup makes true long conditions pickup produces HB satisfied intermediate actions produce HB BURIDAN try bring circumstances cause pickup produce HB In general BUFUDAN guarantee action particular consequence planner add refinements desired consequence likely In example means trying gripper dry pickup executed BURIDAN GD true ways GD true initially probability 07 option add causal link initial As shall section simple planconsisting single pickup actionhas probability 0815 probability threshold 09 So BURIDAN adds additional causal support GD inserting linking dry action Fig 3 shows resulting plan This plan achieves HB probability 0923 exceeds threshold 09 BIJRIDAN successfully solution 142 Plan assessment We implemented analyzed algorithms compute probability plan achieves goal Section 5 discusses performance tradeoffs Here illustrate simplest assessment strategy FORWARD directly implements definition plan success implied Recall executing action induces transition probability distribution states FORWARD takes action sequence executes action turn computes probability N Kushmerick et al Artificial Intelligence 76 1995 239286 245 Fig 3 This plan holding block HB works 90 time despite fact gripper dryness GD guaranteed goal expression final distribution3 Recall simple oneaction plan described picking block drying gripper The initial distribution consists states differ GD HB f conciseness write state GD holds GDm set notation The initial probability distribution states PGDm 07 PGD HB 03 The probability distribution resulting executing pickup initial distribution consists states 1 2 3 4 resulting state initial state fact GDm GD HB pickup action successful consequence cy pickup realized The successful consequence y happen initial state triggers GD definitely false The probability new state probability initial state times probability pickup consequence cy given initial state 07 x 095 0665 GDm consequence p state probability 07 x 005 0035 m HB consequence y state probability 03 x 05 015 GD HB consequence 6 state probability 03 x 05 015 realized initial state GD HB pickup results realized initial state GD HB pickup results realized initial state GDHB pickup results Since pickup plans action assess goal HB respect final state distribution HB true states listed probability sum 0815 reported earlier 15 Alternative assessment algorithms The FORWARD assessment strategy simple inefficient For exam ple exist domains number states nonzero probability grows exponentially length plan This inefficiency motivates second focus research investigation alternative assessment algorithms Since general plan assessment problem NPhard 58 hope produce assessment algorithm runs efficiently domain However exploiting structure 3 If partially ordered plan consistent multiple total orders FORWARD performs compu tation total order returns minimum 246 N Kushmerick et alArtcial Intelligence 76 1995 239286 actions goals state space realize tremendous efficiency gains For example number states nonzero probability grow exponen tially size plan general distinctions different states relevant question goal proposition holds So alternative assessment strategy called QUERY limits growth state distribution distinguishing states based value subset propositions relevant goal conjunction Another class algorithms reasons actual state space propositions define space The insight number states grow exponentially number propositions domain constant So assessment algorithm NEWORK maps actions network probabilistic constraints propositions solves constraints directly The resulting networks tend complicated need For example network contains arcs nodes encode fact truth value proposition remains unchanged action affect But note plan contains explicit information persistence causal links essentially cache deductions persistence We define fourth algorithm REVERSE traverses plans causal link structure plan assessment REVERSE QUERY different assessment algorithms important way FORWARD NETWORK explicitly examine totally ordered sequence actions consistent plan resulting large performance penalty REVERSE QUERY directly evaluate partially ordered sequence actions We implemented assessment algorithms Section 5 present analytical empirical study tradeoffs alternatives In Section 6 consider assessment algorithms larger context We demonstrate speed assessment correlate planning speed assessors compute better bounds exact probability Preliminary empirical results improved interface plan assessment plan refinement lead significant speedup 16 Contributions This paper describes implemented provably correct probabilistic planning algo rithm We tested small examples including simple Slippery Gripper example described extension example paper algorithm Bomb Toilet example 401 Section 6 We following advances field planning 1 We define expressive action representation provide probabilistic semantics Section 2 2 We BURDAN Section 3 implemented algorithm probabilistic planning 3 We prove planner sound complete Section 4 4 We compare efficiency different probabilistic assessment algorithms analytically empirically Section 5 explore relationship tween processes plan refinement plan assessment Section 6 N Kushmerick et al Artial Intelligence 76 1995 239286 24l 2 A semantics probabilistic planning The task section define planning problem means solve We begin defining states expressions actions sequences actions finally planning problem solution 21 States expressions A state complete description world single point time A state described set propositions proposition appears exactly possibly negated 4 Uncertainty world represented random variable states An expression set implicit conjunction literals We define probability expression E respect state s pm 1 ifEcs 0 22 Actions action sequences Our model action taken 27291 combines symbolic model changes action makes propositions probabilistic parameters represent chance unmodeled influences Fig 1 representation pickup action gripper dry GD holds execution time makes HB true probability 095 probability 005 makes change world state But GD false execution pickup makes HB true probability 05 Note propositions boxes refer changes action makes world states For example correct HB holds probability 095 executing pickup state gripper dry probability HB pickup executed depends probability H B execution probability GD execution We intuitive definition precise follows Definition 1 Action An action set consequences taPneatge For L t expression called consequences trigger 0 p1 6 1 e set literals called efsects The triggers mutually exclusive exhaustive VLJIS 1 vs L K t t Pt u t 1 S 0 2 3 4 We use representation expository purposes implementation need manipulate states explicitly In fact plan refinement algorithm explicit representation state reasons directly states component propositions Also Section 5 248 N Kushmerick et al Artijicial Intelligence 76 1995 239286 The notation Ai refers consequence L action Ai superscripts refer parts particular action Ai tf Pf ef The representation pickup action GDO95 HB GD005 m05 HB GD05 A consequence defines set effects deterministic transition state state defined function RESULT similar add deletelists STRIPS Definition 2 Change effected consequence Let s state e set literals Then RESULTe s defined follows proposition p l If p E e p E EtESULT e s p 6 RESULT e s l If p E e p E RJSULTe s p RESULTe s l Otherwise p E RESULT e s iff p E s p E RESULT e s iff p E s An action A induces change state s probability distribution states s PsIsA PtLls tpe E A swTes 9 4 Note actions triggers mutually exclusive exhaustive C P s 1 s A 1 states s actions A We define result executing actions sequence The probability state s hold executing sequence actions AJEi given world initially state s defined follows 5 6 AiLj j k Finally define probability expression true action sequence executed beginning state probability expression executing action sequence given initial probability distribution states PEs Ai CPssAiPIs PEZAiLi PCrAiPEJI s 23 Planning problems solutions 7 8 We given semantics actions probabilistic domains So far discussion detached use semantics planning context We N Kushmerick et alArtial Intelligence 76 1995 239286 249 Fig 4 The paint action HB means holding block BP means block painted GC means gripper clean position define inputoutput behavior probabilistic planning algorithm The input planning problem Definition 3 Planning problem A planning problem 4tuple Sl 6 r A 51 random variable states 6 expression 0 r 1 A set actions The intent following 1 knowledge world beginning plan execution characterized Jr goal achieved expression 0 2 3 r probability threshold goal satisfaction 4 A set actions solutions constructed Given inputs algorithm probabilistic planning compute totally ordered sequence actions executing action turn induces probability distribution states goal holds probability threshold Thus final task precise meaning sentence The action sequence AJ solution planning problem 1 E T A Intuitively action sequence successful execution sequence achieves goal probability threshold Definition 4 Solution Let A 1 Q 7 A planning problem Ai possibly sequence actions Ai solution A iff Ai E A 24 Extending example algorithm fully BURIDAN The simple example described Section 14 illustrates aspects planning helpful consider extended version Recall defined actions pickup dry shown Figs 1 3 Fig 4 illustrates action paint paints block BP causes gripper dirty m For problems goal demand addition robot needs painted BP keeping holding block HB gripper clean GC To example probabilistic planning problem proceed follows Suppose initially block held gripper clean block 250 N Kushmerick et al Artificial Intelligence 76 1995 239286 unpainted gripper dry probability 07 Thus initial states nonzero probability For example world initially possible states sl GD HB GCm sz GD HB GCm probability distribution states characterized random variable 51 follows PS SI 07 PS s2 03 The goal straightforward If willing consider plans percent chance D HB BP GC failure set probability threshold 7 08 Finally want solution built actions defined A pickup paint dry These components constitute input planning algorithm 3 The BURIDAN algorithm Given planning problem BAN searches space partial plans terminating finds corresponding solution Each plan consists set actions 5 partial temporal ordering relation I actions set causal finks set subgoals There significant differences items analogous SNLP concepts A causal link caches BURIDANS reasoning particular consequence partic ular action literal true later action plan The link AiSAj records fact literal p member trigger action Ajs conse quences Aj links consumer effect set consequence L action Ai links producer contains p Action Ak threatens link AibAj consequence Ak asserts P Ak ordered Ai Aj A plans set subgoals consists literals plan BuRIDAN try true particular points time A subgoal literal annotated particular action written pAi BIJRIDAN adopts pAi subgoal plan Ai producer link plan p trigger producing consequence More formally BURIDAN adopts pAi subgoal AiAj plans links p E t The set subgoals initialized include toplevel goals In Section notion subgoal 13 discussed important differences BURIDANs set open conditions classical planners SNLP BURIDAN searches solution performing operations node space plans 1 Plan assessment Compute probability current plan achieve goal If probability high plan solution planning terminates successfully 5 The set actually contains action instances plan instance particular action But representation action refer actions instances propositional distinction unimportant use term 6 Subgoals implement confrontation Section 33 N Kushmerick et alArtificial Intelligence 76 1995 239286 251 2 Plan refinement Otherwise probability goal satisfaction current plan Each refinement generates new partial plan Signal choose refinements nondeterministically try increase refining failure possible new partial plan loop We operations details mnun4Ns representations 31 Data structures As mentioned causal link caches planners reasoning proposition action makes true true action consequence particular particular Definition 5 Causal link A causal link 4tuple Consequence proposition supported link L action Ai links producer Aj links consumer p Ai L p Aj written AiSAj Each node space BURIDAN searches plan Definition 6 Plan A plan 4tuple A 0 L S A set actions 0 set temporal ordering constraints form Ai Aj 13 set causal links S set subgoals form pAi A element An action threatens link executing action links producer consumer decrease probability proposition supported link Definition 7 Threat Let A 0 LS plans Ai Ak Aj consistent 0 consequence pc plan links Ak E A plans actions Ak threatens AiJAj E L iff K Ak let AisAj e BURIDAN encodes initial Each consequence initial probability distribution initial associated consequence encodes possible encodes states probability initial states distinguished state initial action probability distribution SI Definition 8 Action corresponding probability distribution states Let sl random variable encoding probability distribution states The action correspond ing 1 INITIALs P1eLsuchthatforeachpPITee It straightforward prove INITIAL 51 satisfies formal definition action The goal encoded special action goal It distinguished consequence marked SUCCESS triggered goal expression 252 N Kushmerick et al Artificial Intelligence 76 I 995 239286 G 0 initial GD HE GC BP s GD HE GC BP 1 Fig 5 initial goal encode initial probability distribution states goal Definition 9 Action corresponding goal Let 6 1 p expression The action corresponding E GOALG g 1 SUCCESS Note definition GOALG satisfy formal definition action straightforward construct complicated definition satisfy definition 7 Recall example Section 24 initially block painted held BP H B gripper certainly clean GC partial information gripper dry state probability 07 GD holds Recall goal block painted gripper clean block held 6 BP GC HB Fig 5 shows initial goal actions planning problem Now root node space plans BUFUDAN starts searching solution Definition 10 Null plan Let 1 Q T A planning problem NULLPLANSGTA dOLS plan constructed 1 0 r A follows 51 A Ao AG A0 initial INITL AG goal GOALG OAo AG L0 S PAG I P E iY A0 action plan Ao ordering constraints null plan enforce invariant To preserve constraint similar ordering constraints added new action introduced refinements plan The set subgoals initialized set goal propositions annotated AG time planned actions executed A formally correct goal action 7 IQ1 1 consequences defined follows probability term 10 trigger negation fust goal literal second trigger goal literal IGlth trigger 191 1 goal literals negation lh negation second 7th trigger entire goal expression N Kushmerick et al Artijicial Intelligence 76 1995 239286 253 r Bm C SI 7 A 1 dOLS NULLPLANsGTA 2 Do forever If ASSESS d 0 L S 3 7 Return TOTALORDER d J Ao 0 b dOLScREFINEdOSn If REFINE signalled failure Signal failure Fig 6 The BURIDAN algorithm toplevel 32 The BWUDAN algorithm toplevel We position BURIDAN algorithm Fig 6 Given planning problem 1 Q T A BURIDAN converts problem corresponding null plan The null plan iteratively refined calling REFINE subroutine REFINE nondeterministically chooses possible refinement available planning problem solution BURIDAN terminates When assessment algorithm determines plans probability success 7 arbitrary totally ordered sequence plans actions returned Section 33 explains plan refinement Section 34 describes assessment ASSESS 33 Plan refinement BWUDANS plan refinement procedure Fig 7 considers possible successors particular plan nondeterministically chooses return There ways refine plan resolving threat causal link adding new increase probability subgoal proposition holds link potentially annotating action executed BURIDAN stores set subgoals S component plan set threatened links easily computed dynamically plans links actions Link creation BURIDAN similar corresponding refinement SNLP UCPOP important differences We remarked desirable add independent actions proposition true result causal links supporting proposition A planner allow actions disjunctive effects need consider multiple causal support choose efficiency reasons 321 The notion causal support complex probabilistic case For example linking new action involve threats increase probability goal satisfaction Suppose consequences different actions support subgoal If triggers supporting consequences identical supported source probabilistically dependent In case support lend additive For example suppose turning ignition key starts car case battery charged agent doesnt know battery 254 N Kushmerick et al Artcial Intelligence 76 1995 239286 FINE dCLCSA 1 Choose FLAW S set threatened links 2 If FLAW oAj add support Nondeterministically add new action Ai n A adding Aa Ai Ao O choose existing Ai A Ai consequence L chosen nondeterministically C ad Ai A 0 b Add Ai_sAj C Add qAi S q E tf d Signal failure options possible current plan asserts p 3 If FLAW threat AizAj Ak nondeterministically choose Demotion constrain Ak Ai b Promotion constrain Aj Ak c Confrontation commit consequences Ak p false Create new safety proposition s ii Modify Ak noninterfering consequences produce s iii Add sAj S d Signal failure options possible current plan 4 Return resulting plan Fig 7 The REFINE algorithm healthy dead In case clearly doesnt help turn key This explains BURIDAN unlike SNLP UCPOP needs separate assessment local computation look causal structure routineno entire plan suffices determine plan success Said way classical paradigm causal links eliminate need dynamically computing Modal Truth Criterion avoided probabilistic case Link promotion demotion identical threat resolution classical planners discuss 8 Confrontation significant departure SNLP deserves additional explanation The probability link AisAj succeeds producing p Aj probability executing action Ai actually results consequence L action Ai Aj makes p false Since BURIDAN need produce plan succeeds probability r acceptable allow threatening action remain links producing consuming actions long makes p false sufficiently low probability Confrontation resolves threat exactly manner Confrontation involves noting consequences threatening action pose threat link non interjering consequences attempting increase probability consequences realized threatening action executed Specifically BURrDAN confronts threat modifying threatening action noninterfering consequence produces newly created proposition s unique threat called We ignore separation addition variablebinding constraints 5 BURIDAN propositional Lifting techniques 38 extend BURIDAN expressive language N Kushmerick et al Artificial Intelligence 76 1995 239286 255 Fig 8 Support holding block safety proposition The safety proposition annotated consumer link adopted additional subgoal Since noninterfering consequences Ak produce s planning safety condition amounts planning noninterfering consequence threatening action occur Of course action IZO noninterfering consequences confrontation inappropriate algorithm case promote demote threat instead Example We demonstrate plan refinement algorithm constructs plan succeed probability 08 satisfying goal holding painted block clean gripper As example Section 1 simplify presentation assuming REFINE makes correct sequence nondeterministic choices discussed Section 6 BURIDAN takes 45 seconds solution bruteforce search Step 1 Planning starts null plan shown Fig 5 The subgoals plan goal propositions annotated goal action S HBAG BP GCAG BURIDAN chooses support subgoal HBAG adding instance pickup action At linking actions consequence link AITAG BUFUDAN supports desired consequence LY At adopting GDAl subgoal Support subgoal provided linking directly initial action Aa link AaAt The resulting plan shown Fig 8 The assessor determines plan inadequate refinement continues Step 2 BURIDAN supports subgoal having block painted BPAG adding new paint action AZ adding link Ao Consequence p adopts iAz paint realized block held The planner te subgoal support added link initial AoA pickup paint unordered pickup threatens new link pickup executed paint block held paint executed violating trigger paints consequence 3 BURlDAN resolves threat promoting pickup constraint AZ At BURIDAN supports goal having clean gripper providing support GCAo link AoAG But paint threatens link paint asserts GC consequence c consequence y realized The option confrontation involves adding new safety proposition s1 ea consequence A cause GC The resulting plan shown Fig 9 The gray circle link indicates threat resolved confrontation 2 256 N Kushmerick et alArtificial Intelligence 76 1995 239286 Fig 9 Support painting block keeping gripper clean Fig 10 Additional support dry gripper Step 3 Fig 9s plan probability 07335 computed Section 34 This value T 08 BURIDAN tries goal probable drying gripper trying pick block This adding new dry action A3 adding link AsAl BURIDAN adds additional su gport goal having gripper clean GCAo linking initial pAo This link threatened A2 AoA threat resolved way confrontation safety proposition threat 2 The resulting plan shown Fig 10 This plan probability 0831 exceeds 7 BUFUDAN succeeded finding solution 34 Plan assessment The plan assessment algorithm decides probability success plan exceeds threshold T Soundness demands assessor incorrectly identify plan solutionthat identify plan solution fact plans success probability T The algorithms implemented somewhat general computing lower bound exact probability success N Kushmerick et al Artijicial Intelligence 76 1995 239286 251 In section FORWARD assessment algorithm straightforward implementation definition solution planning problem Definition 4 Section 5 different algorithms Fig 11 presents FORWARD algorithm To explain algorithm define data structure uses represent probability distribution states Definition 11 State distribution set pairs si state 0 pi 6 1 A state distribution SD 1 PI s pn c Si PiESD P l 10 For example state distribution corresponding probability distribution initial world states example set GDGC07GDHBGC03 Formally action induces transition probability distribution states FORWARD uses EXEC function represent transition terms state distributions Definition 12 Execution action state distribution Let SD Pl 9 wh state distribution Atete action Then execution A SD set ribPiL RESULTesipipPtISi 12 It straightforward prove EXEC A SD state distribution Finally FOR WARD needs evaluate probability expression state distribution PEISD C piPEISi Sir piESD 13 FORWARD uses Eqs 11 12 compute successive state distributions result projecting effects plans actions For efficiency FORWARD prunes zeroprobability states combines members state distribution refer 258 N Kushtnerick et al Articial Intelligence 76 1995 239286 ASSESSP 1 Return FORWARDP FORWARD d 0 J s 1 Let S2 state distribution corresponding Aa E A 2 Let G ty trigger ACS SUCCESS consequence 3 SCENARIOS SETOFALLTOTALORDERS d 4 If SCENARIOS 8 MIN e 0 MIN t 1 5 For sequence Ai E SCENARIOS use Eqs 11 12 calculate IJ AG 0 state distribution resulting executing action turn For effi ciency compress intermediate distributions eliminating states zero probability merging identical states 6 Use Eq 13 compute probability G final state distribution update MIN sum lower 7 Return MIN Fig 11 FORWARD simplest plan assessment algorithms state After actions projected goal expression evaluated Eq 13 Complicating assessment process fact solution defined terms totally ordered sequence actions plans actions partially ordered We compute lower bound plans success consid ering minimum total orders consistent plans orderings This policy conservative computes best probability expected total order 9 Example We illustrate FORWARD plan assessment algorithm computes probability success plan shown Fig 9 This plan involves painting block picking The initial state distribution SVc consists states nonzero probability They differ gripper dry SD GDm GCm07 GD HB GCm03 Projecting effects paint SDa results state distribution elements I EXECpaintSo BP GC HB GD003 BP GC HB GD027 BP GC HB GD007 BP GCi GD 063 I 9 Section 61 considers possibility computing muximum total orders corresponding best probability expected consistent total order N Kushmerick et alArtijcial Intelligence 76 1995 239286 259 We project pickup 2222 ExEc pickup ST GDiGCBP00315 GD HB GC BPO5985 GD HB GC BPOO035 GD HBx BPOO665 GD HB GC BPO135 m HB GC BP0135 GD HB GC BPOO15 m BP0015 HBE c c Finally goal expression evaluated respect state distribution Since goal holds 2 8 states marked previous equation PBP GC HB ISD2 05985 0135 07335 threshold r 08 described previous section planning continues producing plan shown Fig 10 4 Formal properties We prove BURIDAN planning algorithm sound complete We probabilistic planner sound returns action sequence chance success threshold r demands We planner complete finds sequence solution exists Note require planner recognize futility solution exists BURIDAN loop case lo As shall explicit correspondence ASSESS FORWARD algorithms underlying semantics makes proof soundness straight forward difficultwe Proving completeness need establish things action sequence leading solution eventually considered planner ii solution passed assessor recognized solution The key point showing plans set subgoals identifies refinements increase probability achieving goal To establish second point start observing BURIDANS assessor implements Definition 4 directly calculates definition exact probability totally ordered sequence actions The trick establish BURIDAN add ordering constraints raise plans minimum probability taken total orders threshold possible lo It clear point results classical planning infinite state spaces propositional search allow functions problem BURIDAN solves fully decidable On hand 518 apply BURIDANS state space fact BURIDAN finite On hand space probability distributions states infinite complicates problem 260 N Kushmerick et alArtificial Intelligence 76 1995 239286 First need reconcile notation introduced characterized planning problem solution formally data structures manipulated planner particular assessment algorithm The FORWARD assessor manipulates data structure called state distribution set pairs form si pi There obvious equivalence state distribution probability distribution states 5 Si pi E SD equivalent t0 P 3 si pi Similarly formal exposition represented actions conditional probabilities h w ereas FORWARD uses function EXEC A SD produces state formPssA distribution Once equivalence clear SV 5 equivalent sipi E ExEcASD case pi c PsiIsAPS s In following proofs mix notations random variables states state distributions conditional probabilities defining action execution EXEC function 4 I Soundness We define soundness terms Definition 4 A planner sound returns plan solution Theorem 13 Soundness Let A 51 G 7 A Q pfanning problem IBWAN returns action sequence Ai Aii solution A A refinement assessment algorithms proof straightfor Proof BANS ward Note BURIDAN exit infinite loop ways One exits Line 2c Fig 6 signals failure return produce action sequence satisfy antecedent theorem need considered The exit Line 2a returns action sequence consistent plans partial order 0 probability assessment produced FORWARD r Since FORWARD computes minimum probability achieving goal taken guaranteed total orders consistent 0 estimate returned FORWARD higher actual probability Q achieved Ai Transitivity ensures Ait solution BURlDAN sound El 42 Completeness There possible definitions completeness For example require planner return alt action sequences achieve goal probability greater threshold This definition silly requires planner augment solution irrelevant actions Our definition sidesteps problem irrelevant actions plan require planner essential solutions An essential solution action sequence solution fails solution actions removed The fact action sequence essential mean shortest possible solution completely different shorter sequence achieves goal N Kushmerick et alArtijcial Inrelligence 76 1995 239286 261 Theorem 14 Completeness Let A S S r A planning problem let Ai essential solution proper subsequence solution A Then choices BURIDAN A return exists sequence nondeteninistic Ai We prove completeness induction N length essential solution In base case zerolength plan algorithm correctly recognizes case initial state satisfies goal sufficient probability We inductive hypothesis algorithm essential plans length N The difficulty showing ability generate N 1 step plans bears problem A essential solution N steps We constructing modied planning problem solved N 1 steps Since proofs details complex relegate Appendix A 5 Efficient plan assessment Our plan refinement algorithm calls plan assessment algorithm subroutine algorithm compute probability totally ordered completions partially ordered plan achieve goal expression provide lower bound probability This section examines plan assessment isolation Assessing arbitrary partially ordered plan conditional effects NPhard probabilities zero 59 While REFJNE doesnt generate arbitrary partial orders believe additional complexity probabilistic computations 81 assessment totally ordered plan require time exponential length planthe computation require considering combinations consequences action plan So aspirations produce algorithm works efficiently planning problems instead present alternative algorithms demonstrate perform Future work attempt integrate best aspects approaches given expected characteristics domain question Studying assessment isolation gives insight algorithms work dont work study end unto We ultimately interested long takes generate complete solution perplan time refinement assessment As Section 6 fastest assessment algorithm necessarily lead fastest planner By returning better bound plans success probability slower assessor speed overall planning process considerably 51 The FORWARD assessment algorithm We begin describing computational problems FORWARD algorithm described Section 34 FORWARD straightforward implementation action semantics Two features algorithm important discussion First FOR WARD projects action state distribution producing new distribution And second plan success defined totally ordered sequences ac 262 N Kushmerick et alArtcial Intelligence 76 1995 239286 tions FORWARD computes success probability totally ordered sequence consistent input partial order returns minimum Each features lead computational problems First potential explosion size state distributions manipulated original state distribution M members action z7 consequences plan contains N actions assessing single total order generate state distribution containing MvN states The second computational problem concerns partially ordered actions N consistent total orders actions Naction plan basic algorithm applied total order In summary FORWARD distinctions states state space orderings total orders irrelevant goal achieved These inefficiencies lead degraded performance second algorithm QUERY designed overcome problems 52 The QUERY assessment algorithm The QUERY assessor adaptation Hanks 2728 projection algorithm actually applies richer action representation BURIDANs including continu ous quantities sets conditional branching plan execution QUERY goal directedit tries articulate state space necessary decide state query proposition The basic idea divide actions consequences equivalence classes based affect query proposition reason classes instead individual consequences For example consider action A consequences Suppose consequences makes goal proposition G true differ changes proposi tions If G relevant plan success QUERY consider A single consequence class makes G true realized probability We omit details QUERY algorithm paper instead 27281 53 The NETWORK assessment algorithm FORWARD QUERY similar represent world states explicitly manipulate structures represent elements state space An alternative dispense explicit representation state represent component propositions directly Instead reasoning actions transformations state distributions state distributions instead reason circumstances action makes proposition true makes false leaves unchanged This strategy suggests belief network 43 assessment structure similar proposed Dean Kanazawa 1 l Hanks 301 Fig 12 shows I1 Of course D propositions state distribution 2D distinct states However initial distribution small number states nonzero probability executing action lead growth exponential number actions N Kushmerick et al Arttjicial Intelligence 76 1995 239286 263 Fig 12 A probabilistic network plan assessment network domain propositions pr pm plan action sequence Ai l2 The graph consists types nodes First node action node Ai takes value set q Ai 7 consequences value L represents case consequence L Ai realized Second layer binaryvalued nodes representing propositions evaluated executing action The nodes propositions Ai point action node Aii proposition Air s triggers The action node arc proposition nodes affect The state proposition stage affects state proposition stage Finally binary SUCCESS node true exactly propositions goal expression hold We solve network constraints standard propagation techniques 431 provided supply appropriate numeric parameters model conditional probability table link matrix indicating probability node values conditioned states arcs point Specifically NETWORK constructs network l Action Ai realize consequence L probability consequences trigger propositions hold l A proposition p true action Ai realizes consequence L cases p E ef p true Ai executed p Z ei Note node p execution Ai incoming arcs node representing Ai indicating consequence realized indicating ps state immediately prior Ai l The SUCCESS node conjunction propositions E evaluated execu tion action Each boolean functions easily coded appropriate link matrix Section 55 reports implementation NETWORK uses IDEAL 54 influencediagram processor Jensen clustering algorithm We consistently l2 For simplicity Fig 12 assume action potentially affects proposition vice versa goal expression mentions proposition The implementation NETWORK adds arcs nodes influence 264 N Kushmerick et al Artificial Intelligence 76 1995 239286 assessment time growing exponentially size plan l3 One possible reason poor performance causal network associated plan actually contains lot structure irrelevant goal causes propagation algorithm unnecessary work For example suppose goal proposition actually true initial action plan changes proposition circumstances The causal network nonetheless propagate persistence information stage plans execution computing probability trigger action process This analysis suggests causal network built eliminates irrelevant structure REVERSE algorithm 54 The REVERSE assessment algorithm The REVERSE assessment algorithm based insight plans causal link structure captures information needed assessment Consider causal link This link records information consequence L Ai makes p true AizAj intervening action makes p false long confronted threats link actually result interfering consequence Note p true reason example intervening action p true link plan records causal relationship Thus directly examining plans causal structure yields suficient conditions goal satisfaction assessed probability lower bound true probability success Another important feature REVERSE link structure guides reasons directly plans NETWORK explicitly reason assessment plans actions REVERSE partially ordered actions unlike FORWARD consistent total order See Section 61 REVERSE uses plans causal link structure construct assessment expression boolean combination terms refer earlier parts plan I4 The idea trigger true component literal true consequences conjunctive single literal true incoming disjunctive links literal true Initially assessment expression trigger goals SUCCESS consequence The expression incrementally transformed traversing causal link structure according following rules l The assessment expression trigger conjunction assessment ex pressions subgoals corresponding triggers conjuncts l The assessment expression subgoal disjunction assessment ex pressions links supporting subgoal l The assessment expression link assessment expression trigger links producing outcome conjoined conjunction assessment I3 We promoting method best candidate solving networkthat topic future research Dean Kanazawa 111 argue stochastic simulation technique suitable point absence convergence bounds algorithms Without guarantee convergence plan refinement algorithm longer sound complete I4 Note expression sense Section 21 assessment expression arbitrary boolean formula terms formula propositions N Kushmerick et alArtcial Intelligence 76 1995 239286 265 expressions subgoals safety condition associated confronted threats The assessment expression transformed rules transformations applicable The probability expression computed directly See Appendix B complete discussion REVERSE 55 Empirical conjhation So far motivated described plan assessment algorithms We scribed algorithm directly implements definition success probability hinted potential computational problems problems suggest alternative algorithms Now analyze performance differences algorithms We built illustrative domains intended produce different behavior FORWARD QUERY REVERSE Each domain involves initial action goal action template defining additional actions By varying aspect domain goal probability threshold vary number actions required solve problem For domain analyze time taken algorithm assess solution plan function plan length 551 A domain favoring FORWARD One think FORWARD QUERY exploring state spacethe blindly second manner sensitive querythat QUERY outperform FORWARD The domain shown Fig 13a shows requires time linear length plan false domain FORWARD QUERY REVERSE require time exponential plan length NETWORK poorly domains discussed Sections 53 554 performs Action Ai makes goal proposition G true probability 05 makes propo sitions pt pi false probability 10 A successful Naction plan form Ai sequence makes G true probability 1 l2N We vary threshold r change length plan T 0 requires zeroaction plan T 05 requires oneaction plan Fig 13 b shows FORWARD project Naction plan proliferation states FORWARD domain action plan states nonzero probability QUERY trouble domain heuristic uses deciding parts tree explicit considers actions latest earliest deciding consequence classes build Consider case N 2 r 075 successful plan actions At A2 order When QUERY asked assess probability G considers A2 decides split action classes differ effect G The tirst class consists Y consequence second class 3 y At point possible completions plan probability 05 G true value true false second bound Gs probability 05l O ambiguous respect threshold QUERY considers At splits consequences 266 N Kushmerick et al Artijicial Intelligence 76 1995 239286 b IPPPNGL A2 05tppdG 075 AN __ PIPPG IlRN PPPN 10 A c IPPz PNGI 03 A pppo5 AN pppNt lRN cl Fig 13 The domain shown efficient FORWARD projecting action states nonzero probability shown b c illustrates QUERYS tree branches unnecessarily action 025 G true So bound Gs probability QUERY terminates classes Y 3r Now completions probability 07507_5 realized LY branch tree given G tree grow completion matter predefined order chosen splitting pathological consequences heuristic If QUERY divided At classes A2 effect Gs state In case size plan But exist examples new action true plan REVERSES performance degrade additional action plan adds assessment Appendix B REVERSE takes time exponential link goal proposition adds disjunct additional expression number disjuncts Fig 14 shows performance statistics average time perform single assessment domain shown Fig 13 measuring function number actions N Kushmerick et al Artificial Intelligence 76 1995 239286 261 0 1 2 s 4 3 plan length acuons 6 I 8 Fig 14 Average assessment time plans FORWARDS domain plan t5 As expected FORWARDS assessment time grows linearly plan size algorithms required time exponential number actions plan 552 A domain favoring QUERY Fig 15 shows domain favorable QUERY algorithm We vary length solution plan varying number conjuncts goal goal form Ply pi requires plan N actions Each action Ai consequences distinction consequences irrelevant plan satisfies goal None algorithms recognize feature domain state space explodes FORWARD REVERSE explicitly consider disjunction links support goal conjunct Fig 15b shows explosion state space FORWARDS projection The result state distribution size 2N state probability 12N goal true plan successful probability 1 QUERYS projection hand Fig 15c branch Each N actions single relevant consequence class corresponding proposition true REVERSE trouble domain disjunction assessment expression conjunct pi goal expression links pointing e Fig 16 shows average assessment time domain function plan size QUERYS assessment time grows linearly plan size grow exponen tially l5 All experiments performed Sun SPARCIPX Since interrun variation negligible confidence intervals average data small plot 268 N Kushmerick et alArtificial Intelligence 76 1995 239286 b _ _ lPP2vPNJrx XNL 05 PPPNxxzXN 10 A c PI PNjiXZ xt 05 lPPz PNJX2xNL 025 AN lPP PNXXZ I x1 lRN A GPP I pNJi xfq 025 pp2 __ PpJXXZ xtom A2 lPP2 PNXJ xt 025 Cc A __ _ lPP2 1 PpJXX X l2 Fig 15 The domain shown efficient QUERY Although FORWARD doubles size state set action b QUERY makes irrelevant distinctions c I FORWARD QUERY NElWORK B REVERSE 0 I 2 3 5 4 plan length actions 6 7 R Fig 16 Average assessment time plans QUERYS domain N Kushmerick et al Artificial Intelligence 76 1995 239286 269 zyo5 jyog Fig 17 An efficient domain REVERSE 0 1 2 3 4 5 plan length actions 6 7 Fig 18 Assessment time REVERSES domain 553 A domain favoring REVERSE We noted REVERSE problems plans multiple supporting causal links cause long assessment expressions REVERSE works best domains propositions require multiple support proposition supported single causal link Such case domain appearing Fig 17 There single line causal support LY consequence initial action goal Thus assessment expression constant length regardless plans length Both QUERY FORWARD directly consider entire collection states nonzero probability grows exponentially length plan Fig 18 confirms expectations assessment time REVERSE increases linearly plan size QUERY FORWARD exponential QUERY better limit FORWARD ignore distinction consequences generate proposition required actionit produces branches action FORWARD generates threefold increase size state distribution action 554 The NETWORK algorithm We discuss NETWORK algorithm reasons clear performance dominated algorithms performed essentially examples We noted generic clustering algorithm 270 N Kushmerick et al Artificial Intelligence 76 1995 239286 Table 1 Total planning time CPU seconds problems assessors Algorithm FORWARD QUERY NETWORK REVERSE Problem Slippery Gripper BombToilet 45 80 1799 4049 69 649 1520 67360 probably property network inappropriate application exploit Markov 6 The assessrefine interface The experiments reported Section 55 valuable confirming intuition relationship domain characteristics performance assess ment algorithms interpreted narrowly reasons involved small carefully constructed domains measured assessment time isolation regard total time spent generating successful plan As preliminary effort thorough empirical study tested algorithms additional problems The example paper refer Slippery Gripper problem The second extension Moores 40 Bomb Toilet problem A robot given packages told exactly contains bomb It wants defuse bomb way dunk package containing bomb toilet Placing package toilet probability 005 clog toilet avoided Suppose want achieve goalsthe bomb defused toilet unclogged probability 09 The obvious plan dunk packages guaranteeing bomb defused incurring small risk clogging toilet Indeed BURIDAN builds plan shown Fig 19 Table 1 shows total planning time required assessment algorithms BombToilet Slippery Gripper problems The real surprise poor performance REVERSE FORWARD runs 100 times faster REVERSE Slippery Gripper problem 1000 times faster BombToilet problem Was assessment plans generated solving domains pathologically difficult REVERSE Table 2 indicates case REVERSE fastest assessor Slippery Gripper second fastest BombToilet caused additional plans generated assessed resulted significantly slower planning performance In hindsight reason behavior clear Recall fundamental differ ence REVERSE algorithms REVERSEs reliance plans N Kushmerick et al Artificial Intelligence 76 1995 239286 271 Fig 19 BURIDANS package 2 contains bomb TC means toilet clogged D means bomb defused solution BombToilet problem Bl means package 1 contains bomb 82 means Table 2 Average assessment time plan CPU microseconds number plans assessed returning solution Slippery Gripper BombToilet Problem Algorithm Timeassess Number assessed Timeassess Number assessed FORWARD QUERY NETWORK REVERSE 119 4296 15210 106 119 119 119 4756 82 2519 6367 852 239 239 239 24420 consuming propositions REVERSE underestimates happens REVERSE believe structure When plan doesnt contain possible causallink consequences goal achievement FORWARD QUERY NETWORK compute When succeed WARD QUERY NETWORK requires bound exact value In cases FOR REVERSE REFINE add causal links REVERSE compute tight fact plan represent solution terminate planning sooner links producing sufficiently probability plan likely Our hope REVERSE run faster plans link structure speed offset fact planner need iterate times produce complete plan Although hope manifested examples interpreted caution Rvo factors tend REVERSE look worse experiments cached information 272 N Kushmerick et alArtijcial Intelligence 76 1995 239286 l These domains small contain little irrelevant information There operators propositions state space consequences action All factors conspire FORWARD look good QUERY REVERSE spend computational effort trying separate relevant aspects problem irrelevant If irrelevant aspects problem effort obviously wasted l Little attention given searchcontrol issues Our plan refinement algorithm simple searchcontrol policy favoring plans fewer links fewer actions In reality policy amounted breadthfirst search plan space Better search control direct refinement algorithm complete plan quickly We address issue briefly Section 62 61 Reasoning partial orders Recall assessor given partially ordered plan reason totalorder completions plan FORWARD NETWORK deal partial orders obvious way generate completions assess individually minimum REVERSE cope partially ordered actions sense threats eliminated plan action unordered respect link decrease probability proposition supported Since REVERSE computes lower bound safely ignore nonthreatening actions ordered scope link QUERY reasons deeply partial orders order actions partial order affect value query proposition compute propositions truth value exploring completions order But reasoning explicitly partial orders QUERY usurped functionality plan refinement algorithm In particular bound QUERY returns plans success minimum guaranteed completion plan bound REVERSE returns guaranteed completion QUERY tells refinement algorithm completion current plan succeed planner figure l6 Having assessor reason partial orders potentially powerful form search control assessor reason efficiently partial orders notify planner finds successful plan saving planner applying slower general refinement methods task As particularly simple example strategy modified FORWARD return maximum probability possible completions instead minimum NETWORK As Table 3 demonstrates ability assessor hasten recognition tally ordered solution reduce planning time considerably The improvement realized Slippery Gripper order actions domain sig nificant BURIDAN ordering decisions terminat I6 Alternatively extend interface assessor refinement return successful completion N Kushmerick et alArtijicial Intelligence 76 1995 239286 273 Table 3 Total planning time CPU seconds reduced assessor recognizes total orders maximize goal probability enabling early termination Algorithm FORWARD FORWARDMAX NETWORK NETWORKMAX Problem Slippery Gripper BombToilet 45 053 1799 436 69 70 1520 1513 ing order dunk actions BombToilet BURIDAN leave actions unordered significant 62 Search control Although started address question search control clear assessment algorithm able provide information guide process plan refinement We saw example information readily available assessor tells refinement algorithm solution imposing additional order current plan adding new actions In fact powerful way view assessment task discovering flaws plan communicating information planner 262853 Our QUERY algorithm builds structure called scenario basis assessment temporal trace plans execution One identify structure point plans probability success decreased This information exploited deciding refinement apply REVERSE supply similar information assessment expression captures likely propositions true points plan One trace assessment structure propositions unlikely true likely clobbered Once information guide establishment new links confrontation threats 63 Summary This section explored interplay plan assessment plan refinement In hindsight BURIDANS simple architecture problematic In order increase plan ning performance necessary create sophisticated interface plan assessment refinement Many factors influence overall planning performance speed assessment tightness probabilistic bounding calculations type search control guidance assessor provide 274 N Kushmerick et al Artcial Intelligence 76 I 995 239286 7 Related work Related work areas Al approaches probabilistic planning robotic motion planning decision models classical planning plan evaluation techniques 71 Probabilistic planning Several early pieces work 2141 cast planning probabilistic decision theoretic terms provide concrete representations algorithms solve problem More recent work divides according planning problem defined states operators represented Markov decision processes Several research efforts 10331 adopt planning model based fully ob servable Markov processes There main differences work First algorithms operate directly state space com ponent propositions actions represented directly probabilistic mappings states statesthe algorithms manipulate symbolic action descriptions Koenig shows translation sTRIpslike symbolic operators transitionmatrix representation solution algorithm use symbolic representation A important distinction approaches build reaction strategy plan A reaction strategy policy dictates action agent state state space A plan hand sequence actions agent executes regard state The assumption Markov decision process approach observability agent know state executing strategyin words provided accurate immediate information new world state time executes action agent additional A plan embodies opposite assumptionthat plan information world execution timeso ahead time Recent extensions BURIDAN 14151 middle ground information available execution time explicitly gathered potentially inaccurate Symbolic planning approaches Farley 20 proposes similar action representation attaches probabilities directly postconditions sets postconditions His planning algorithm linear progressive starts initial state assumed unique builds linear plan sequences adding steps end plan Manse11 36 proposes strategy planner attacks possible initial world state isolation beginning likely uses deterministic hi erarchical planning algorithm build plan After plans built algorithm tries merge distinct plans This approach similar robustifi cation approach proposed Drummond Bresina 161 BURIDAN forced N Kushmerick et alArhjicial Intelligence 76 1995 239286 215 operate mode allowing link single initial state time advantage postponing merging process end planning episode clear Preliminary work Goldman Boddy 23 attacks similar problem build ing plans likely achieve goal likely defined terms threshold They develop extended action plan representation incorporates observations contingencies comparison CBURIDAN 14151 apt Their approach planning different They use determin istic planner based CNLP 511 manage uncertainty external probabilistic network model assign probabilities propositions unknown truth values Splitting problem deterministic planner external mechanism managing uncertainty similar Mansells approach 72 Robotic motion planning Robotics researchers considered problem planning actions effects uncertain For example LozanoPerez Mason Taylor 35 introduced backward chaining strategy LMT motion planning given sensing control uncer tainty extended Erdmann 171 An interesting connection approaches analogy use compliant motion conditional effects reducing uncertainty differences similarities Most obvious emphasis geometry Second model sensing actions Brost 4 omitted BUFSDAN extensions cited address deficiency Third preimage notion uncertainty bears resemblance possibleworlds model incomplete information probabilistic model Fourth focus planning strategies guaranteed succeed despite uncertainty Markovprocess approaches contrast BIJRIDAN plans need probability success exceeds user specified threshold Donalds work 131 extends basic LMT paradigm handle incomplete knowledge worlds geometry provide error detection recovery 73 Graphical decision models Work graphical probabilistic decision models Howard 3 11 Pearl 431 overview 12 Chapter 71 deals decision making planning problems focused solving given probabilistic decision model algorithm interleaves process constructing evaluating solutions The problem modelled influence diagram involves choosing options fixed set choices constructing course action dynamically goal description Recent work recognized importance interleaving model construction modelsolution problems general 24 applied planning problem particular 501 Also 31 survey work area 276 N Kushmerick et al Artificial Intelligence 76 1995 239286 74 Probabilistic temporal reasoning The representation NETWORK algorithm similar network proposed Dean Kanazawa 111 As discussed Section 5 totally ordered plan formulated probabilis tic network allowing assessment performed standard propagation techniques 1431 Although experiments NETWORK assessment algorithm showed Jensen clustering algorithm probably inappropriate problems type approaches suitable Dean Kanazawa 111 advocate stochastic sim ulation techniques provide approximate assessment totally ordered plan A simulation provide approximate assessment totally ordered plan polynomial time lead approximately sound complete planning algorithm A stochastic simulation technique faces potential combinatorial explosion assessing partially order plan worst case assess consistent total orders 75 Action representation plan evaluation Our action representation comes Hanks work 27291 probabilistic projec tion Chrisman 6 develops action representation projection rule planning uncertainty Martin Allen 37 develop statistical techniques gather probabilities like ones algorithm uses None work directly addresses problem plan generation The QUERY algorithm described 2729 Dnmunond 161 presents alterna tive algorithm similar problem Haddawy Hanks 25 motivate building planner BURIDAN They provide framework constructing restricted class utility functions use decisiontheoretic planner circumstances determining plan dominates reduces establishing bounds probabilities particular propositions particular times precisely plan assessment algorithms compute Doyle Wellman 551 discuss general problem modular specification planners objectives decision theoretic framework They exploit multiattribute utility theory devise techniques composing separate preference specifications 76 Classical planning Dealing statedependent effects essential requirement useful prob abilistic planner In regard BURIDAN seen generalizing work planning deterministic conditional effects 74648 A deterministic form confrontation UCPOP 481 Pednaults ADL language allowed disjunc tive effects solve simple symbolic version Bomb Toilet example 45 extended Section 6 However implementations ADL Pedestal 391 UCPOP 481 implemented functionality disjunctive effects BIJRIDAN N Kushmerick et alArticial Intelligence 76 1995 239286 211 8 Conclusions BLJRIDAN represents significant step development practical algorithms probabilistic planning While work remains BLJRIDAN provides profitable basis future study 81 Implementation BURIDAN fully implemented Common Lisp tested ex amples including ones presented paper The implementation robust successfully searches tens thousands plans Although code optimized speed search control feel solid foundation fu ture research In addition excellent instructional setting Send mail bugburidanQcs code anonymous FIT Washington edu instructions acquiring BURIDAN source 82 Summary In paper weve reported significant advances 1 We extended classical planning representation handle uncertainty initial world state probability distributions world states effects actions mutually exclusive exhaustive triggers paired sTRIpslike effects 2 We provided precise probabilistic semantics representation Execution action causes transition state distribution 3 We described BUFULMN implemented algorithm probabilistic planning proved sound complete 4 We compared efficiency FORWARD RE VERSE probabilistic assessment algorithms analytically empirically We characterized strengths algorithm observe clearly dominant QUERY NETWORK 5 We noted fastest assessor necessarily lead fastest planner explained We argued refineassess architecture im proved allowing plan assessor provide guidance plan refiner As simple example strategy demonstrated considerable speedup possible assessment algorithm returns actionordering information addition probability calculation 83 Future work We hope extend BURIDAN directions From purely practical perspective BURIDANS functionality limited propositional representation plan implement lifted 38521 version codesignation constraint code developed 481 The major challenge endeavor devising efficient means UCPOP 278 N Kushmerick et al Artificial Intelligence 76 1995 239286 handling disjunctive bindings result lifted trigger condition supported multiple causal links different ground consequences Another extension allow BURIDAN handle probabilistic exogenous events incorporate model sensing information advanced UWL language 191 Wed like integrate Peot Smiths 511 algorithm generating conditional plans framework consider interleaved planning execution 23442 Recent work CBURIDAN 14151 addressed issues We hope introduce explicit temporal model ideas ZENO 47491 represent deadline goals This allow consider integrating probabilistic plan refinement algorithm utility model presented 25 On algorithmic begun explore methods controlling search good plans As Section 6 demonstrates number important architectural issues deserve exploration We hope develop sophisti cated refineassess interface computational expense plan assessment pays dividends guiding subsequent refinements We wish evaluate additional sessment methods incremental assessment stochastic simulation relationship plan refinement Acknowledgments We gratefully acknowledge comments suggestions Tony Barrett Tom Dean Denise Draper Mike Erdmann Keith Golden Rex Jacobovits Oren Etzioni Neal Lesh Judea Pearl Mark Peot Mike Wellman Mike Williamson anonymous reviewers This research funded National Science Foundation Grants IRI 9206733 IRI8957302 Office Naval Research Grant 90J1904 Xerox Corporation Appendix A Proof completeness Theorem 14 Completeness Let A I 6 r A planning problem let Ai essential solution proper subsequence solution A Then exists sequence nondeterministic choices BURIDAN A return Ai To finesse issues search control use Ai oracle guide construction partially ordered plan McDermott 391 refers technique clairvoyant algorithm Our implementation uses exhaustive search ensure sequence nondeterministic choices eventually considered We establish useful lemma Recall plan data structures contain set subgoals S pAi e We introduce new piece terminology concisely N Kushmerick et al Artijicial Intelligence 76 1995 239286 219 refer result executing action subsequences let SV state distribution produced executing AJLj SD If k j SD z SD Lemma A1 Let A St 4 r A planning problem suppose BURIDAN A yields values A 0 L S Ai consistent topological sort d excluding initial goal actions Let E expression composed literals subgoals S action A let Ar action A Zf exists 1 m PElS PEIS REFINE sequence nondeterministic choices add At A Proof Our proof induction m Base case m 2 In case 1 1 assume P E 1 EXEC At SD P E 1 SD equivalent P 1 EXEC AI SD P E 1 SD By definition way probability E greater executing Al increases probability associated states containing E But way happen A1 conseQuence containing p p E E But case REFINE line 2a choose add AI plan pA2 E S Inductive step m 2 The inductive hypothesis guarantees exists Al added plan We 1 m 1 P E 1 Stir P I SD need holds 1 m 1 Suppose PE I ST P I ST Three exhaustive nonexclusive cases explain relationship 1 The increase probability I happens A_ executedin But case inductive assumption words P S I SDy2 P E I Sq1 directly indicates At added 2 The increase probability E occurs including Ar causes A_ tr contribute additional probability mass E Specifically A__ contains consequence pr em er makes proposition p true P t I SDf1 PtF I SZ1 But nondeterministic choice REFINE line 2a choose consequence support p So nondeterministic choice REFINE line 2a qA_ 1 q E tr subgoal inductive assumption applies tr At added 3 Finally increase probability E occur including A causes A_ contribute probability mass consequence makes E false Note case nonzero probability A_ executed P E I SDJ1 0 But case proposition p E action Ai consequence L contains p REFINE line 2b add causal links AiAm It case consequence A_1 tends false Al tends consequence likely In words A_ 280 N Kushmerick et al Artijcial Intelligence 76 1995 239286 contain consequence tf furthermore P tc 1 SDD P tf 1 sV pz ef j5 E ec p E E But case FEFJINE recognize K consequence A__ threat line 3c confront threat Confronting threat means literals triggers noninterfering consequences A_ adopted subgoal S line 3ciii Since Definition 1 states actions triggers mutually exclusive exhaustive Ptf 1 ST Pt les probability A_Is non intetfering triggers greuter probability Al executed But inductive assumption satisfied A1 added sequence 0 pl lm We ready tackle main theorem Since proof somewhat complex sketch high level concept delving details The proof method induction unsuprisingly induction step crux We demonstrate sequence nondeterministic choices exists returns N step plan planning problem d constructing modijied problem solved N 1 steps Since induction hypothesis states BURIDAN solve easier problem need choices modified problem lead choices solve A Lemma A 1 makes relatively straightforward Proof Completeness Given planning problem A essential solution Ai need things First REFINE sequence nondeterministic choices resulting plan consistent Ai Second FORWARD assessor recognize plan solution Our proof induction N number actions plan Base case N 0 If N 0 goal sufficiently likely actions added P B I SD 2 7 A BURIDAN create null plan A assessment Since actions A Ao Ao immediately FORWARD line 3 returns probability single total order consistent FORWARD plan assumption exceeds threshold BURIDAN calls TOTALORDER returns sequence Inductive step N 2 1 The inductive assumption ensures clairvoyant BURIDAN correctly generates solutions form Ai m N We BURIJIAN finds solution Naction plans Let A planning problem EXEC A SD 6 T A By Definition 4 length N 1 action sequence Ai essential solution A Clairvoyant BURIDANA generate partially ordered plan P A O _C S Ai consistent topological sort P similar plan seeking initial action double duty providing probability mass propositions SD A1 provided collectively original solution Now consider execution trace nondeterministic choices clairvoyant BURIDAN constructing P A We use trace modifications guide BURIDAN solution original problem A Since difference A A occurs initial state distributions SZ N Kushmerick et alArtijcial Intelligence 76 1995 239286 281 EXECAI SD need guide BURIDANs choice tries create link initial action Aootherwise plan refinement proceed P generated Recall Aa initial action P corresponds state distribution EXECAI CD If P contains link supporting p producing action Ac exists consequence Aa At contains p In case instruct BURIDAN choose consequence create link Note argument guarantees BURIDAN add actions AZ AN plan ordering constraints guarantee BURIDAN add At plan P contain link producer Aa But recall proper subsequence Ai P G 1 P G 1 SD solution Since 0 conjunction propositions adopted subgoals S Lemma A1 guarantees sequence nondeterministic choices REFINE add At At point established BURIDAN add right actions A havent guaranteed add ordering constmints 0 In particular guaranteed A1 constrained occur plan If BUFUDAN fails constrain At action plan FORWARD iterate total orders consistent 0 achieve Q probability 7 meaning BURIDAN fail recognize solution We contradiction assume sequence nondeterministic choices cause At ordered plan Let m 2 2 smallest number executing At A achieves goal probability T executing At immediately A achieves goal probability T If sequence nondeterministic choices REFINEZ lines 2a 3c create causal link producer A threatened At But case REFINE line 3a demote At adding At A 0 In summary AizIt essential solution planning problem sequence nondeterministic decisions cause BURIDAN add actions At AN plan relevant ordering constraints FORWARD return Min 2 7 clairvoyant TOTALORDER return AiZt solution d cid144i Appendix B The reverse assessment algorithm REVERSE uses plans causal links evaluate plan The probability proposition holds particular action executed estimated traversing link structure provides causal support proposition The idea traverse links constructing assessment expression boolean combination causal links triggers subgoals terms Starting trigger goals SUCCESS outcome assessment expression incrementally transformed follows l The assessment expression trigger consequence conjunction assessment expressions subgoals corresponding triggers conjuncts conjoined consequences probabilistic term 282 N Kushmerick et al Artijicial Intelligence 76 I 995 239286 The assessment expression subgoal disjunction assessment ex pressions links supporting subgoal If subgoal causal support transformation The assessment expression link assessment expression trigger links producing outcome conjoined conjunction assessment expressions subgoals safety condition associated confronted threats These transformations applied repeatedly expression boolean combina tion subgoals causal support probabilistic terms consequences constitute plans causal structure This expression evaluated directly Fig Bl precisely specifies REVERSE algorithm REVERSE computes lower bound probability plan success To understand algorithms note main difference REVERSE algorithms account causal relationships implicit plan REVERSE reasons causal relationships explicitly represented plans link structure There ways probability computed causal links differ value returned exact algorithms l There action produces proposition required subsequent action REFINE installed link actions In case REVERSE underestimate propositions probability l There threat existing link resolved refinement algorithm In case REVERSE overestimate probability links supported proposition We force REVERSE produce lower bound probabilities ignoring links threatened PROD function Fig B 1 leaving subgoals causal support untransformed line 2b applies subgoal causal support When plan refined threats resolved subgoals supported possible ways REVERSE computes probability assessment algorithms We fully investigated computational complexity REVERSE clearly algorithm runs time exponential number disjuncts disjunctive normal form assessment expression line 5 computes probability conjunction generated line 4 number conjunctions exponential number disjuncts Example We REVERSE assesses plan shown Fig 9 From line 1 Fig Bl initial assessment expression simply tz This gets transformed applications lines 2a 2b follows tz p A HB A BPAG A GCAG Each links expanded line 2 Expanding AITAG straightforward links expand producing outcomes But AoAG threatened paint AZ threat resolved confrontation So A2 N Kushmerick et al Artijicial Intelligence 76 1995 239286 283 XEVERSE P 1 Initialize assessment expression tz 2 Loop Transform term assessment expression follows tfPtA A QAi pet b QAj V AisAjGPROD QAj AihJAj PRODQAj 8 C AizAj tf A A sESAFEAiJAj S Aj replacements possible assessment expression consists literals causal support terms form pi 3 Convert assessment expression disjunctive normal form 4 Using probabilistic axiom P A V B PA P B P A A B 1 compute set disjuncts DNF expression conjoined compute probability expression 5 Compute probability conjunction follows If conjunction contains terms form pi QAi pAi probability expression 0 b remove duplicate terms substitute probabilities remaining terms value 0 remaining QAi c multiply results 6 Add subtract appropriate probabilities computed line 5 conjunctions generated line 4 ROD Q Ai returns set Ps unthreatened causal links supporting pAi SAFJEAizAj returns set safety propositions corresponding confronted threats AisAj P Fig B 1 REVERSE plan assessment algorithm 284 N Kushmerick et al Artificial Intelligence 76 1995 239286 addition producing outcome AAG slA expands safety proposition subgoal Now applying lines 2a 2b 2c oAtfAtAtOASAG A GDAI A p A AZ A p A pz A AzAG pz A AaGzA1 A p A AAz A pi A p A t pz AtO Apt At A ApOAHBAz A p A P A P A P A 1 A P A 4 A 1 p A P A P A P A P A P A t A P P A P A P A P A P A P A P A P As point termination condition line 2 satisfied line 3 transforms expression disjunctive normal form Since conjunction transformation needed For reason line 4 trivial use line 5 assess probability entire expression The expression contains contradictions line 5a apply Rather line 5b removes duplicates substitutes numbers remaining terms multiples PAPOAPAPAPAPAPAPPAPAPAP 10 x 07 x 095 x 09 05985 This example illustrates probability computed REVERSE lower bound exact probability plan achieves goal algorithms return 07335 assess plan In order REVERSE realize exact probability additional causal links need added plan For example link represents way goal GC achieved REVERSE AAG consider References 1 I J Allen J Hendler A Tate eds Readings Planning Morgan Kaufmann San Mateo CA 1990 21 J Ambroshgerson S Steel Integrating planning execution monitoring Proceedings AAAI 88 St Paul MN 1988 735740 31 J Breese R Goldman aud M Wellman eds Notes Ninth National Conference Artijicial Intelligence AAAI91 Workshop KnowledgeBased Construction Probabilistic Decision Models AAAI 1991 N Kushmerick et alArtificial Intelligence 76 1995 239286 285 4 R Brost Automatic grasp planning presence uncertainty ht J Robotics Research 7 1 1988 317 5 D Chapman Planning conjunctive goals Artif Intell 32 3 1987 333377 6 L Chrisman Abstract probabilistic modeling action Proceedings 1st International Conference AI Planning Sysrems 1992 7 G Collins L Pryor Achieving functionality filter conditions partial order planner Proceedings AAAI92 San Jose CA 1992 8 G Cooper The computational complexity probabilistic inference Bayesian belief networks Artif Intell 42 1990 393405 9 T Dean M Boddy Reasoning partially ordered events Artif Intell 36 3 1988 375W reprinted DS Weld J Kleer eds Readings Qualitative Reasoning Physical Systems Morgan Kaufmann San Mateo CA 1989 lo T Dean LP Kaelbling J Kiian A Nicholson Planning deadlines stochastic domains Proceedings AAAI93 Washington DC 1993 111 T Dean K Kanazawa A model reasoning persistence causation Comput Intell 5 1989 142150 121 T Dean M Wellman Planning Control Morgan Kaufmann San Mateo CA 1991 131 B Donald A geometric approach error detection recovery robot motion planning uncertainty Arttf Intell 37 1988 223271 141 D Draper S Hanks D Weld A probabilistic model action leastcommitment planning information gathering Proceedings 10th Conference Uncertainty Artijical Intelligence 1994 151 D Draper S Hanks D Weld Probabilistic planning information gathering contingent execution Proceedings 2nd International Conference AI Planning Systems 1994 161 M Drummond J Bresina Anytime synthetic projection maximizing probability goal satisfaction Proceedings AAAI90 Boston MA 1990 171 M Erdmann On motion planning uncettainty AITR810 MIT AI Lab Cambridge MA 1984 181 K Erol D Nau V Subrahmanian When planning decidable Proceedings 1st International Conference Al Planning Systems 1992 222227 19 0 Etzioni S Hanks D Weld D Draper N Lesh M Williamson An approach planning incomplete information Proceedings 3rd International Conference Principles Knowledge Representation Reasoning Cambridge MA 1992 available FTP pubai ftpcsuashingtonedu 20 A Farley A probabilistic model uncertain problem solving IEEE Trans Syst Man Cybernet 13 4 1983 2 11 J Feldman R Sproull Decision theory artificial intelligence II hungry monkey Cogn Sci 1 1977 158192 22 RE Fikes NJ Nilsson STRIPS new approach application theorem proving problem solving Artif Intell 2 34 1971 189208 231 RP Goldman MS Boddy Epsilonsafe planning forthcoming 24 RP Goldman JS Breese Integrating model construction evaluation Proceedings 8th Conference Uncertainty Arttal Intelligence Stanford CA 1992 25 P Haddawy S Hanks Utility models goaldirected decisiontheoretic planners Tech Rept 930604 University Washington Department Computer Science Engineering Seattle WA 1993J AI Res submitted available FTP pubai ftpcsuashingtonedu 26 KJ Hammond Explaining repairing plans fail Artif Intell 45 1990 173228 27 S Hanks Practical temporal projection Proceedings AAAI90 Boston MA 1990 28 S Hanks Projecting plans uncertain worlds PhD Thesis Yale University Computer Science Department New Haven CT 1990 291 S Hanks Modeling dynamic uncertain world II action representation plan evaluation Tech Rept University Washington Department Computer Science Engineering Seattle WA 1993 1301 S Hanks D McDermott Modeling dynamic uncertain world I symbolic probabilistic reasoning change Arttf Intell 66 1 1994 l55 3 1 I R Howard J Matheson Influence diagrams The Principles Applications Decision Analysis Strategic Decisions Group 1984 286 N Kushmerick et al Artificial intelligence 76 1995 239286 321 S Kambhampati Characterizing multicontributor causal structures planning Proceedings 1st International Conference AI Planning Systems 1992 116125 33 S Koenig Optimal probabilistic decisiontheoretic planning Markovian decision theory UCBCSD 92685 Berkeley CA 1992 1341 K Krebsbach D Olawsky M Gini An empirical study sensing defaulting planning Proceedings 1st International Conference AI Planning Systems 1992 136144 351 T LozanoPerez M Mason R Taylor Automatic synthesis fine motion strategies robots ht J Robotics Research 3 1 1984 324 36 T Mansell A method planning given uncertain incomplete information Proceedings 9rh Conference Uncertainty ArtijCcal Intelligence Washington DC 1993 1371 N Martin J Allen A language planning statistics Proceedings 7th Conference Uncertainty Artijical Intelligence Los Angeles CA 1991 381 D McAllester D Rosenblitt Systematic nonlinear planning Proceedings AAAI91 Anaheim CA 1991 634639 39 D McDermott Regression planning ht J Intelligent Systems 6 1991 357416 40 R Moore A formal theory knowledge action J Hobbs R Moore eds Formal Theories Commonsense World Ablex Norwood NJ 1985 411 JH Munson Robot planning execution monitoring uncertain environment Proceedings IJCAI71 London 1971 338349 42 D Olawsky M Gini Deferred planning sensor use Proceedings DARPA Workshop Innovative Approaches Planning Scheduling Control Morgan Kaufmann San Mateo CA 1990 43 J Pearl Probablistic Reasoning Intelligent Systems Morgan Kaufmann San Mateo CA 1988 1441 E Pednault Toward mathematical theory plan synthesis PhD Thesis Stanford University 1986 45 E Pednault Synthesizing plans contain actions contextdependent effects Comput Intell 4 4 1988356372 461 E Pednault Generalizing nonlinear planning handle complex goals actions contextdependent effects Proceedings IJCAI91 Detroit Ml 1991 240245 471 J Penberthy Planning continuous change PhD Thesis UW CSE Tech Report 931201 University Washington Seattle WA 1993 48 J Penberthy D Weld UCPOP sound complete partial order planner ADL Proceedings 3rd International Conference Principles Knowledge Representation Reasoning Cambridge MA 1992 103l 14 available FTP pubai f tp cs washington edu 49 JS Penberthy DS Weld A new approach temporal planning preliminary report Proceedings AAAI 1993 Symposium Foundations Automatic Planning The Classical Approach Beyond 1993 112l 16 501 M Peot JS Breese Model construction planning Notes Ninth National Conference Artificial Intelligence AAAI91 Workshop KnowledgeBased Construction Probabilistic Decision Models AAAI 1991 95100 5 1 M Peot D Smith Conditional nonlinear planning Proceedings 1st International Conference AI Planning Systems 1992 189197 521 J Robinson A machineoriented logic based resolution principle J ACM 12 1 1965 53 R Simmons A theory debugging plans interpretations Proceedings AAAI88 St Paul MN 1988 9499 54 S Srinivas J Breese IDEAL influence diagram evaluation analysis LISP documentation users guide Technical Memo 23 Rockwell International Science Center 1990 551 M Wellman J Doyle Modular utility representation decision theoretic planning Proceedings 1st International Conference Al Planning Systems 1992 236242