Artiﬁcial Intelligence 175 2011 236263 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Stable models circumscription Paolo Ferraris Joohyung Lee b Vladimir Lifschitz c Google Inc 1600 Amphitheatre Parkway Mountain View CA 94043 United States b Department Computer Science Engineering Arizona State University 699 South Mill Avenue Tempe AZ 85281 United States c Department Computer Sciences University Texas Austin 1 University Station C0500 Austin TX 78712 United States r t c l e n f o b s t r c t Article history Available online 13 April 2010 Keywords Answer set programming Circumscription Nonmonotonic reasoning Program completion Stable models 1 Introduction The concept stable model provided declarative semantics Prolog programs negation failure starting point development answer set programming In paper propose new deﬁnition concept covers constructs answer set programming unlike original deﬁnition refers grounding ﬁxpoints It based syntactic transformation similar parallel circumscription 2010 Elsevier BV All rights reserved Answer set programming ASP form declarative logic programming oriented knowledgeintensive search problems product conﬁguration planning It identiﬁed new programming paradigm years ago 25 29 number applications An ASP program consists rules syntactically similar Prolog rules computational mechanisms ASP different use ideas led creation fast satisﬁability solvers propositional logic 11 ASP based concept stable model 9 According deﬁnition decide sets ground atoms stable models given set rules ﬁrst replace given rules ground instances Then verify ﬁxpoint condition similar conditions employed semantics default logic 33 autoepistemic logic 28 19 Sections 4 5 details In paper investigate new approach deﬁning concept stable model It based syntactic transformation similar circumscription 2627 The new deﬁnition refers grounding ﬁxpoints It turns general number ways original deﬁnition This treatment stable models reasons First provides new perspective place stable models ﬁeld nonmonotonic reasoning We distinguish ﬁxpoint nonmonotonic formalisms default logic autoepistemic logic translational formalisms program completion 1 circumscription In past stable models seen ﬁxpoint tradition The remarkable similarity new deﬁnition stable model deﬁnition circumscription curious point view Second expect new deﬁnition stable model provide uniﬁed framework useful answer set programming constructs deﬁned implemented different research groups For instance help combine choice rules sense lparse 34 aggregates sense dlv 3 A step direction described 14 Corresponding author Email address vlcsutexasedu V Lifschitz 00043702 matter 2010 Elsevier BV All rights reserved doi101016jartint201004011 P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 237 Third deﬁnition applicable nonHerbrand models In model different ground terms value This useful knowledge representation purposes wish write instance FatherJack FatherJane This possibility related use arithmetic functions ASP different ground terms value 2 2 1 3 The new deﬁnition stable model introduced Section 2 relation original deﬁnition discussed Section 3 Several useful theorems new concept stated Section 4 Then extend idea strong equivalence framework Section 5 relate general stable models program completion Section 6 deﬁne pointwise stable models similar pointwise circumscription Section 7 In Section 8 theory stable models handles strong classical negation Section 9 discusses related work Proofs theorems collected Appendix A To presentation selfcontained include brief reviews parallel pointwise circumscription Sec tions 22 71 approaches stable model semantics proposed earlier Section 31 This article extended version conference paper 6 2 Stable models 21 Logic programs ﬁrstorder sentences The concept stable model deﬁned ﬁrstorder sentences1 possibly containing function constants equality Logic programs viewed paper alternative notation ﬁrstorder sentences special types For instance treat logic program pa pa b qx px y shorthand pa pa b xy cid2 cid3 px y qx The constraint px qx 1 2 3 identiﬁed formula cid2 x cid3 px qx disjunctive rule px q y rx y cid2 rx y cid2 xy cid3cid3 px q y As example choice rule cid4 cid5 px qx It says informally speaking x qx choose arbitrarily include px stable model We treat rule shorthand cid2 cid3cid3 4 cid2 qx x px px This formula logically valid appending conjunctive term sentence F change class models F But class stable models F change appending 4 The example involves aggregate The rule px card cid4 cid5 y qx y 2 means intuitively cardinality set y qx y 2 include px stable model We treat rule abbreviation formula cid2 x y1 y2 cid2 qx y1 qx y2 y1 cid9 y2 cid3 cid3 px 5 1 A sentence formula free variables 238 P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 22 Review circumscription Since new deﬁnition stable model similar deﬁnition parallel circumscription begin brief review Both deﬁnitions use following notation If p q predicate constants arity p cid2 q stands formula cid2 cid3 px qx x x tuple distinct object variables If p q tuples p1 pn q1 qn predicate constants p cid2 q stands conjunction p1 cid2 q1 pn cid2 qn p q stands p cid2 q q cid2 p In secondorder logic apply notation tuples predicate variables Let p list distinct predicate constants2 The circumscription operator minimized predicates p denoted CIRCp deﬁned follows ﬁrstorder formula F CIRCpF secondorder formula cid2 F u cid3 u p F u u list distinct predicate variables length p F u formula obtained F substituting variables u constants p3 If list p understand CIRCpF F We drop subscript symbol CIRCp lead confusion For sentence F pminimal simply minimal model F interpretation underlying signature satisﬁes CIRCpF Since ﬁrst conjunctive term CIRCpF F clear minimal model F model F Example 1 If F formula 2 CIRCpqF cid3cid3 cid2 cid2 xy pa pa b uv cid2cid2 cid3 u v p q px y qx xy cid2 ua ua b cid2 ux y vx cid3cid3cid3 It equivalently rewritten secondorder variables follows cid2 x cid3 px y x y x y b cid2 qx x x Example 2 Let F formula cid2 cid3 px y tx y xy xyz cid2 cid3 tx y t y z tx z p subset t t transitive relation Then CIRCtF cid3 6 7 cid2 xy cid3 px y tx y u t xy cid2 u xyz cid2 cid3 px y ux y cid2 cid3 tx y t y z tx z cid2 xyz ux y u y z ux z cid3cid3 This condition expressed ﬁrstorder formula meaning straightforward says t transitive closure p If conjoin 7 pa b pb c 8 include p t list minimized predicates circumscription formula expressible ﬁrstorder logic cid2 xy cid3 px y x y b x b y c xy cid2 cid3 tx y x y b x b y c x y c 9 2 In paper equality considered predicate constant allowed member p 3 This deﬁnition circumscription operator allows F free variables unlike deﬁnition 17 Similarly deﬁnition stable model operator applicable formulas free variables unlike deﬁnition proposed conference paper 6 P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 239 23 Operator SM We deﬁne stable model operator intensional predicates p denoted SMp Some details deﬁnition depend propositional connectives quantiﬁers treated primitives viewed abbreviations Let decide primitives falsity F abbreviation F cid12 stands F G stands F G G F Let p list distinct predicate constants p1 pn For ﬁrstorder formula F SMpF denote second order formula cid2 F u u p F cid3 u u list n distinct predicate variables u1 F u deﬁned recursively F atomic formula F contain members p 4 pit uit tuple t terms F F G F F G F F G F xF xF xF xF G F G G G If list p understand SMpF F We drop subscript symbol SMp lead confusion For sentence F pstable simply stable model F interpretation underlying signature satisﬁes SMpF 5 Since ﬁrst conjunctive term SMpF F clear stable model F model F Note drop second conjunctive term clause implication deﬁnition F u formula turn F u SMF turn CIRCF It follows sentence F contain implication SMF coincides CIRCF stable models F identical minimal models F In section examples formulas equivalent F contain implication We cases minimal models stable stable models minimal 24 Examples Example 1 continued Let F formula 2 As noted CIRCpqF equivalent 6 Consider result applying SMpq formula Clearly F ua ua b xy cid3 ux y vx px y qx u v cid3cid3 cid2cid2 cid2 SMpqF pa pa b xy cid2cid2 cid3 u v p q uv cid2 cid3 px y qx ua ua b xy cid2cid2 cid3 ux y vx cid2 px y qx cid3cid3cid3 In presence conjunctive term xypx y qx beginning formula conjunctive term px y qx end dropped This simpliﬁcation turns SMpqF CIRCpqF Consequently SMpqF equivalent 6 Remark 1 It easy generally SMF equivalent CIRCF F conjunction conjunctive term contain implication universal closure formula G H G H contain implication Remark 2 The equivalence SMpqF 6 Example 1 established way references circumscription In Sections 62 73 theory tight programs 42 extended 4 This includes case F 5 The deﬁnition stable model conference paper 6 related publications 1316 general treats predicate constants occurring F intensional We additional degree generality convenient Section 32 essential Section 41 240 P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 framework described paper result applying operator SM turned ﬁrstorder formula process program completion This method applied particular formula 2 Remark 3 According original deﬁnition stable model 9 stable model program 1 minimal Herbrand model cid4 10 cid5 pa pa b qa This fact agreement result calculation Example 1 sense 10 Herbrand interpretation satisfying 6 This instance general theorem relationship new general deﬁnition stable model original deﬁnition stated Section 3 Example 2 continued If F 7 SMtF equivalent CIRCtF according Remark 1 Consequently tstable models 7 t transitive closure p Similarly F conjunction 7 8 SMptF equivalent CIRCptF consequently 9 It clear deﬁnition circumscription sentences F G equivalent formulas CIRCF CIRCG equivalent The following example shows hand operator SM applied equivalent formulas produce formulas equivalent Example 3 Let apply SMp pa pa In logic programming notation written constraint pa It clear SMppa equals CIRCppa equivalent cid2 x px x cid3 On hand cid2 pa cid3 cid2cid2 cid2cid2 cid3 cid3 pa cid3 cid3 pa cid3 pa cid2 pa cid2cid2 cid3 ua cid2 cid2cid2 cid3 pa cid3 cid3cid3 pa pa pa consequently cid6 cid7 pa SMp cid2 cid3 u p pa pa u pa uu p pa xpx Thus equivalent transformations preserve class stable models formula We return question Section 51 The following examples SM stronger CIRC weaker Example 4 Let F formula cid3 px qx cid2 x corresponding rule qx px 11 The circumscription formula CIRCpqF equivalent cid2 x cid3 px qx On hand fact formula 11 tight Section 6 SMpqF written cid2 x cid3 px qx 12 Thus SMpqF stronger CIRCpqF In minimal model 11 q negation p stable models formula p identically false q identically true P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 241 Example 5 Let F formula 4 represents choice rule discussed Since formula logically valid pminimal models characterized condition xpx p Using fact formula 4 tight Section 6 pstable models 4 described accordance intuitive meaning choice construct weaker condition cid2 x cid3 px qx 13 p subset q 3 Relation deﬁnitions stable model In section relate deﬁnition stable model terms operator SM original deﬁnition stable model 9 generalization deﬁnition proposed 8 31 Review 1988 2005 deﬁnitions Recall signature set object function predicate constants A term signature σ formed object constants σ object variables function constants σ We distinguish atoms atomic formulas follows atom signature σ nary predicate constant followed list n terms atomic formulas σ atoms σ equalities terms σ 0place connective Firstorder formulas σ built atomic formulas σ binary propositional connectives quantiﬁers listed beginning Section 23 For signature σ containing object constant Herbrand interpretation σ interpretation σ universe set ground terms σ ii ground term σ represents As usual identify Herbrand interpretation set ground atoms satisﬁed A traditional program signature σ set formulas form A1 Am Am1 An An1 14 n cid3 m cid3 0 Ai atom σ If n 0 14 understood A1 For traditional program Π signature σ set X ground atoms σ reduct Π relative X set formulas obtained Π replacing formula Π ground instances followed removing formulas 14 Am1 An X cid9 followed removing conjunctive terms Am1 An antecedents remaining formulas The reduct Π relative X set Horn clauses If Herbrand model equals X X stable model Π sense 1988 deﬁnition 9 The deﬁnition 8 applicable arbitrary sets propositional formulas include grounding step applicable arbitrary sets quantiﬁerfree formulas For set Π quantiﬁerfree formulas signature σ set X ground atoms σ modiﬁed reduct Π relative X set formulas obtained Π replacing formula Π ground instances followed replacing formula F maximal subformulas F satisﬁed X If X minimal relative set inclusion Herbrand model modiﬁed reduct Π relative X X stable model Π sense 2005 deﬁnition 8 As shown paper application traditional program 1988 2005 deﬁnitions equivalent Example 6 Signature σ consists object constants b unary predicate constants p q r Π cid4 cid5 pa pb qa px qx rx X cid4 cid5 pa pb qa rb 15 16 After grounding Π cid4 cid5 pa pb qa pa qa ra pb qb rb 242 P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 The reduct Π relative X cid4 cid5 pa pb qa pb rb The Herbrand model reduct equals X Consequently X stable model Π sense 1988 deﬁnition The modiﬁed reduct Π relative X cid4 cid5 pa pb qa pb rb Since X minimal model modiﬁed reduct X stable model Π sense 2005 deﬁnition 32 Relation new deﬁnition Theorem 1 For signature σ containing object constant ﬁnitely predicate constants ﬁnite set Π quantiﬁerfree formulas σ Herbrand interpretation X σ following conditions equivalent X stable model Π sense 2005 deﬁnition X pstable model conjunction universal closures formulas Π p list predicate constants σ Corollary 1 For signature σ containing object constant ﬁnitely predicate constants ﬁnite traditional program Π σ Herbrand interpretation X σ following conditions equivalent X stable model Π sense 1988 deﬁnition X pstable model conjunction universal closures formulas Π p list predicate constants σ Example 6 continued The result applying operator SMpqr conjunction universal closures formu las 15 rewritten completion method described Section 6 cid2 x cid3 px x x b cid2 qx x x cid2 cid3 rx px qx x cid3 17 The stable model 16 15 Herbrand model sentence In statement Theorem 1 underlying signature assumed contain ﬁnitely predicate constants Π supposed consist ﬁnitely formulas The result grounding Π inﬁnite signature contains function constants The theorem shows conditions new deﬁnition stable model generalization 2005 deﬁnition general ways First general syntactically applicable formulas contain universal existential quantiﬁers aggregate formula 5 formula x px p nonempty The result applying operator SMp result applying corresponding circumscription operator equivalent cid2 cid3 x y p y x y p singleton Second general semantically applicable nonHerbrand interpretations For instance 17 models elements universe represented constants b That formula models b represent element universe In model p q singletons r Third allows distinguish intensional predicates extensional predicate symbols This useful want intuitive meaning group rules precise way For instance claim stable model semantics formula 7 expresses concept transitive closure valid treat p extensional A way express claim use extensional predicates discussed section See 7 uses distinction 4 Properties SM 41 Changing set intensional predicates The theorem shows making set intensional predicates smaller result applying operator SM weaker compensated adding choice rules For predicate constant p Choicep denote formula xpx px x list distinct object variables For list p predicate constants Choicep stands conjunction formulas Choicep members p p P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 243 Theorem 2 For ﬁrstorder formula F disjoint lists p q distinct predicate constants following formulas logically valid SMpqF SMpF cid7 F Choiceq SMpq cid6 SMpF It follows class pstable models sentence F contains class pqstable models F coincides class pqstable models F Choiceq We seen instance condition t transitive closure p expressed applying SMt formula 7 By Theorem 2 follows condition expressed applying SMpt conjunction 7 xpx px Thus possibility distinguishing intensional extensional predicates concept stable model general instead designating group q predicates extensional conjoin formula Choiceq In rest paper assume list p distinct predicate constants chosen members referred intensional predicates The predicate constants belong p called extensional predicates 42 Constraints In answer set programming constraintsrules head 3play important role view fact adding constraint program affects set stable models particularly simple way eliminates stable models violate constraint The following theorem shows sentences beginning negation viewed counterpart constraints new framework Theorem 3 For ﬁrstorder formulas F G SMF G equivalent SMF G It follows stable models sentence form F G characterized stable models F satisfy G For predicate constant p Falsep denote formula xpx x list distinct object variables By Falsep denote conjunction formulas Falsep members p p Corollary 2 For ﬁrstorder formula G SMG equivalent G Falsep Indeed F cid12 SMF G equivalent SMG SMF equivalent Falsep In Section 51 G replaced propositions formulas general syntactic form 43 Trivial predicates In traditional theory stable models predicate constants occur heads rules trivial sense atom containing predicate belong stable model Theorem 4 shows form idea takes new framework Theorem 4 For ﬁrstorder formula F intensional predicate p occurrence p F belongs antecedent implication formula SMF Falsep logically valid Consequently occurrence p sentence F belongs antecedent implication p identically false stable model F For instance occurrence p 7 antecedent implication consequently pstable models 7 p identically false Recall occurrence predicate constant expression formula called positive number implications containing occurrence antecedent strictly positive number 0 The condition occurrence p F belongs antecedent implication statement theorem expressed saying F strictly positive occurrences p 244 P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 5 Logic hereandthere strong equivalence 51 System SQHT As saw Section 24 sentences equivalent different stable models Transfor mations formulas preserve class stable models studied 16 special case predicate constants intensional The results paper imply particular sentences stable models intuitionistically equivalent6 We conclusion holds general framework proposed paper extensional predicates allowed Thus equivalent transformations sanctioned intuitionistic logic play important study stable models In connection Example 3 note instance fact pa constraint pa equivalent classically intuitionistically makes essentially different stable model semantics About formula 4 representing choice rule note provable intuitionistic logic makes nontrivial far stable models concerned The main result 16 actually class equivalent transformations contains intuitionistic logic accepts The logic hereandthere7 studied paper intermediate intuitionistic classical logic denote intuitionistic ﬁrstorder predicate logic usual axioms equality x x schema By INT x y cid2 cid3 F x F y formula F x y substitutable x F x System SQHT equality obtained INT adding axiom schemas static quantiﬁed logic hereandthere F F G G cid2 x cid3 F x xF x axiom x y x cid9 y To illustrate difference intuitionistic logic logic hereandthere note De Morgans law F G F G ﬁrstorder counterpart xF x xF x provable intuitionistically provable SQHT If equivalence sentences proved SQHT stable models We assert Theorem 5 For ﬁrstorder formulas F G formula F G derivable SQHT extensional predicates q SMF equivalent SMG formulas Choiceq For instance easy equivalence 4 formula cid2 x cid3 px px qx 18 intuitionistically derivable Choiceq The pstable models 4 interpretations interpret p subset q Section 24 Example 5 It follows pstable models 18 characterized way Intermediate logics SQHT differ classical logic endorse law double negation F F generality The following theorem identiﬁes class cases double negation elimination admissible stable model semantics Theorem 6 Let F positive occurrences intensional predicates SMF cid15 equivalent SMF cid15 formula obtained ﬁrstorder formula F inserting subformula G If G strictly 6 See httpplatostanfordeduentrieslogicintuitionistic introduction intuitionistic logic 7 This related fact SQHT described Kripke models worlds Appendix A51 called Here There P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 For instance formula form xyH x y 245 19 occurrence predicate constant belongs antecedent implication Consequently inserting double negation 19 sentence affect class stable models matter set intensional predicates chosen In terminology Section 52 strongly equivalent transformation From Theorem 6 conclude Theorem 3 Corollary 2 generalized SMF G equivalent SMF G SMG equivalent G Falsep G strictly positive occurrences intensional predicates For instance SMF xyH x y equivalent SMF xyH x y A generalization Theorem 6 presented 7 Section 5 52 Strong equivalence About ﬁrstorder formulas F G F strongly equivalent G formula H occurrence F H list p distinct predicate constants SMpH equivalent SMpH obtained H replacing occurrence F G In deﬁnition H allowed contain object function predicate constants occur F G Theorem 7 shows essential It shows deﬁnition strong equivalence p taken set pF G predicate constants occur F G arbitrary set predicate constants cid15 H cid15 Theorem 7 Firstorder formulas F G strongly equivalent iff formula H object function cid15 predicate constant occurring H occurs F G occurrence F H SMpF G H equivalent SMpF G H H obtained H replacing occurrence F G cid15 It clear F strongly equivalent G SMpF equivalent SMpG H F In particular F strongly equivalent G F equivalent G p Strong equivalence originally deﬁned somewhat different contexts 15 propositional rules nested expressions extensional atoms assuming F occurs H conjunctive term 16 free variables F G extensional predicates F occurs H conjunctive term Properties relation interesting perspective ASP allow simplify logic program looking parts For instance replacing rule px x program pa affect class stable models formula cid2 x cid3 x px 20 strongly equivalent pa The main result 16 extended new version strong equivalence follows Theorem 8 Firstorder formulas F G strongly equivalent iff formula F G provable SQHT For instance prove 20 strongly equivalent pa need observe formulas intuition istically equivalent The deﬁnition strong equivalence generalized follows For list q predicate constants F strongly equivalent G excluding q F Choiceq strongly equivalent G Choiceq It immediate Theorem 8 F strongly equivalent G excluding q iff F G derivable SQHT formula Choiceq Theorem 8 special case corollary q Furthermore clear Theorem 5 F strongly equivalent G excluding q SMpF equivalent SMpG p disjoint q An alternative characterization strong equivalence similar proposed 22 propositional case refers u Section 23 deﬁne operator SM In statement theorem pF G formula F list predicate constants occur F G q list new distinct predicate constants length pF G Theorem 9 F strongly equivalent G iff formula cid2 cid3 cid2 q cid2 pF G F q G cid3 q logically valid For instance prove 20 strongly equivalent pa showing implication cid2 cid2cid2 cid3 x qx x cid2 x px cid3cid3 cid3 qa q cid2 p logically valid 246 P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 6 Completion As indicated Section 24 process completing logic program invented Keith Clark 1 allows cases rewrite SMF ﬁrstorder formula 61 Clark normal form The completion process involves series preliminary transformations followed main stepreplacing implica tions equivalences For instance completing program 1 described follows Step 1 representation 2 program syntax ﬁrstorder logic rewrite conjunctive term implication consequent canonical forma predicate constant followed list distinct variables cid2 xy cid3 x y px y cid3 px y qx cid2 xy xy cid2 cid3 x y b px y Step 2 combine implications predicate constant consequent cid3 x y x y b cid3 px y xy cid2cid2 xy cid2 cid3 px y qx Step 3 identify implication variables occur antecedent occur consequent minimize scopes corresponding quantiﬁers cid2cid2 cid3 x y x y b cid3 px y xy cid2 x cid3 ypx y qx Step 4 replace implications equivalences xy cid2 cid3 px y x y x y b cid2 cid3 qx y px y x 21 22 Steps 13 intuitionistically equivalent transformations formula 21 stable models mula 2 started Step 4 gives case ﬁrstorder formula equivalent result applying operator SM This idea precise following deﬁnitions About ﬁrstorder formula Clark normal form relative list p intensional predicates conjunction formulas form 23 intensional predicate p x list distinct object variables The completion formula F Clark normal form denoted CompF obtained replacing conjunctive term 23 cid2 cid3 G px x cid2 cid3 x px G For instance 11 written Clark normal form relative pq follows cid3 px qx cid3 px cid2 x cid2 x The completion formula cid2 x cid3 px cid2 cid3 qx px x 24 25 26 Some formulas converted Clark normal form strongly equivalent transformations different described 1 For instance formula 4 strongly equivalent F G equivalent G F SQHT Formula 27 Clark normal form relative p Its completion 27 cid2 cid3 qx px px x cid2 x cid3 px qx px 28 equivalently 13 We interested relationship CompF SMF In traditional theory stable models stable model logic program Herbrand model completion converse asserted syntactic conditions F tightness 42 Here counterpart ﬁrst facts new framework P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 247 Theorem 10 For formula F Clark normal form implication SMF CompF logically valid To illustrate fact CompF weaker SMF consider following formula intuitionistically equivalent 7 cid2 xy px y z cid2 cid3 tx z tz y cid3 tx y 29 It Clark normal form provided t taken intensional predicate Its completion weaker result applying operator SMt 7the know expressible ﬁrstorder logic 62 Tight formulas We deﬁne tightness formulas Clark normal form In Section 73 deﬁnition extended arbitrary ﬁrstorder formulas We occurrence predicate constant formula negated belongs subformula form F F nonnegated For formula F Clark normal form predicate dependency graph F directed graph intensional predicates vertices edge p q antecedent G conjunctive term 23 F p consequent positive nonnegated occurrence q We F tight predicate dependency graph F acyclic For example 21 tight predicate dependency graph edge q p Formulas 25 27 tight predicate dependency graphs edges The antecedent 27 positive occurrence p occurrence negated On hand 29 tight edge predicate dependency graph selfloop Theorem 11 For tight formula F Clark normal form SMF equivalent completion F In particular stable models tight sentence Clark normal form characterized models completion This theorem shows instance result applying operator SMpq 2 equivalent formula 22 Since formula equivalently rewritten 6 justiﬁed claim Example 1 Section 24 Similarly result applying SMpq 11 equivalent 26 Since formula equivalently rewritten 12 justiﬁed claim Example 4 Similarly result applying SMp 4 equivalent 28 Since formula equivalently rewritten 13 justiﬁed claim Example 5 These examples illustrate process allows rewrite SMF ﬁrstorder formula turn F tight formula Clark normal form strongly equivalent transformations form completion simplify result This process generalized ways First translating F tight formula F 1 Clark normal form employ transformations strongly equivalent excluding extensional predicates equivalence F F 1 formulas Choiceq extensional predicates q guarantee SMF derivable SQHT equivalent SMF 1 Theorem 5 Second turned F conjunction form F 1 G F 1 Clark normal form Theorem 3 factor G Finally F turned formula Clark normal form tight cases tightness achieved additional transformation based Theorem 6 For instance predicate dependency graph formula containing conjunctive term cid3 px cid3 px qx cid3 rx cid2cid2cid2 x selfloop p But predicate r extensional term replaced cid3 px cid3 px qx cid3 rx cid2 x cid2cid2 changing class stable models The selfloop eliminated 248 P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 7 Pointwise stable models The pointwise circumscription operator 18 modiﬁcation circumscription reﬂects idea pointwise minimality impossible minimized predicates stronger changing truth value exactly exactly point In section deﬁne similar modiﬁcation operator SM closely related process completion discussed above8 71 Review pointwise circumscription The deﬁnition pointwise circumscription uses following notation If p q predicate constants arity k p x 1 q stands formula cid2 qy x cid9 y py cid2 cid2 qx y cid3cid3cid3 x y disjoint tuples distinct object variables x1 xk y1 yk x cid9 y shorthand x1 y1 xk yk The formula p q tuples p1 pn q1 qn predicate constants p 1 q expresses extent p obtained extent q removing element If p 1 q stands disjunction cid9 cid2 cid8 1cid2icid2n 1 qi pi cid3 cid10 1cid2 jcid2n jcid9i cid11 p j q j similarly tuples predicate variables Let p list distinct predicate constants The pointwise circumscription operator minimized predicates p noted PCIRCp deﬁned follows ﬁrstorder formula F PCIRCpF stands cid2cid2 F u cid3 1 p cid3 F u u u F u deﬁnition circumscription Section 22 For sentence F pointwise pminimal model F interpretation underlying signature satisﬁes PCIRCpF It clear minimal model pointwise minimal But converse true For instance let F pa pb An interpretation makes p true distinct points b false rest universe minimalit improved making p identically false But pointwise minimal changing value p points b produce model F Unlike CIRCF pointwise circumscription formula PCIRCF equivalently rewritten secondorder quantiﬁers We process terms predicate expressions λxF x x list distinct object vari ables F x formula For formula Hu u predicate variable HλxF x denote formula obtained Hu replacing atomic subformula form ut t tuple terms F t For instance Hu ua ub Hλxpx stands pa pb For predicate variable v formula Hv H cid2 x vx H vy x cid9 y cid2 cid2 λy cid3cid3cid3 1 v v denote formula x y disjoint lists distinct variables It easy formula equivalent cid2cid2 1 v u cid3 cid3 Hu u Indeed u cid3 cid2cid2 1 v u cid2 x u cid2 ux x cid2 cid3 Hu cid2 cid2 vx y uy cid2 vx y uy cid2 uy y cid2 vx u cid2 cid2 vy x cid9 y vy x cid9 y cid2 vy x cid9 y cid3cid3 cid3cid3cid3 cid3 Hu cid3 Hu cid3cid3 Hu cid3cid3 H 1 v v To generalize construction tuples distinct predicate variables deﬁne H 1 v1vn shorthand H 1 v1 H 1 vn 8 In propositional case analogy pointwise circumscription completion noted 12 P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 249 The following calculation shows H cid3 cid2cid2 cid3 Hu simplify notation assume n 2 1 v u u 1 v v equivalent cid2 u1 v 1 cid2 1 v 2 u2 cid3cid3cid3 cid3 Hu1 u2 cid2cid2 u1u2 u1 u2 cid2cid2cid2cid2 u1u2 u1u2 cid3 1 v 1 v 2 cid3 Hu1 u2 u1 1 v 1 cid3 1 v 1 cid2cid2cid2 u1 cid2cid2 cid3 cid3 u2 v 2 cid3 u2 v 2 cid2 u1 v 1 u2 1 v 2 cid3 Hu1 v 2 cid3 u2 cid3 Hu1 u2 cid3cid3 cid3 Hu1 u2 cid3 cid2cid2 1 v 2 u2 u1u2 cid2cid2 u1 1 u1 v 1 1 v1 v 1 v 2 H H 1 H v1 v2 v 1 v 2 1 v2 v 1 v 2 cid3 Hv 1 u2 Consequently PCIRCpF equivalent F F 1 u p ﬁrstorder formula For instance translation turns cid6 cid7 pa pb PCIRCp ﬁrstorder formula cid2 cid3 x pa pb cid2 cid2cid2 px pa x cid9 cid2 cid3 pb x cid9 b cid3cid3cid3 rewritten cid2 cid2 cid9 b x px x x b cid3cid3 xpx 72 Operator PSM The pointwise stable model operator intensional predicates p denoted PSMp deﬁned follows ﬁrst order formula F PSMpF stands F u cid2cid2 cid3 1 p cid3 u F u u deﬁnition stable model operator Section 23 For sentence F pointwise u F pstable model F interpretation underlying signature satisﬁes PSMpF Every stable model pointwise stable converse generally true Furthermore PSMF equivalent ﬁrstorder formula cid31 cid2 F u p F We similarity properties PSM properties completion Indeed sentence F Clark normal form stable model F satisﬁes completion F Theorem 10 converse generally true completion F ﬁrstorder formula The difference course deﬁnition PSM generalit limited sentences Clark normal form Theorem 12b shows similarity PSM viewed generalization completion About sentence Clark normal form pure conjunctive terms 23 G strictly positive occurrences p For instance tight sentence pure Any formula Clark normal form pure cid15 auxiliary predicates For instance formula 29 pure pure auxiliary predicate t synonymous t cid2 cid2 cid3 tx z tz y cid15 cid3 x y t xy cid2 t cid15 cid3 x y tx y xy px y z Theorem 12 For formula F Clark normal form implication PSMF CompF logically valid b F pure PSMF equivalent CompF When applied formula Clark normal form pure PSM provides generally better approximation SM completion operator 250 P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 73 Tight formulas revisited As ﬁnal comment concept pointwise stable model extend tightness condi tion formulas Clark normal form arbitrary formulas counterpart Theorem 11 hold tight formula F SMF equivalent PSMF consequently equivalent ﬁrstorder formula A rule ﬁrstorder formula F strictly positive occurrence implication F For instance rule 2 px y qx Note ﬁrst conjunctive terms 2 rules according deﬁnition If F formula Clark normal form rules implications G px conjunctive terms 23 The rules formula cid2 cid3cid3 cid2cid2 px cid2 qx rx cid3 p y q y cid3 r y px cid3 cid2 qx rx qx rx cid2 cid3 p y q y r y For ﬁrstorder formula F predicate dependency graph F relative list p intensional predicates directed graph intensional predicates vertices edge p q rule G H F p strictly positive occurrence H q positive nonnegated occurrence G We F tight relative p predicate dependency graph acyclic In application formulas Clark normal form new deﬁnition tightness equivalent deﬁnition Section 62 But allows talk instance predicate dependency graph formula 2 converting Clark normal form 2 tight Incidentally formula normal form 21 predicate dependency graph general phenomenon strongly equivalent transformations involved converting sentence Clark normal form usually change predicate dependency graph consequently affect tightness Theorem 13 For tight formula F PSMF equivalent SMF Corollary 3 For tight formula F SMF equivalent ﬁrstorder formula 8 Strong negation Some applications answer set programming facilitated use second kind negation called strong classical 10 Strong negation incorporated framework paper follows We distinguish intensional predicates kinds positive negative assume negative intensional predicate form p p positive intensional predicate Under approach strong negation symbol syntactically connective occurs atomic formulas An interpretation underlying signature coherent extent negative predicate p disjoint extent corresponding positive predicate p In words interpretation coherent satisﬁes formula cid2 cid3 px px x 30 x list distinct object variables negative predicate p By Theorem 3 coherent stable models sentence F characterized stable model conjunction F formulas 30 Strong negation allows distinguish kinds exceptions defaults default applicable property asserted default guaranteed hold know property hold For instance formula cid2 x cid3 abx px abc1 abc2 pc2 31 employs abnormality predicate ab express default object presumed property p default applicable c1 c2 c2 property p P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 251 The completion method Section 6 characterize stable models formula predicate stants treated intensional ﬁrstorder formula cid2 x cid2 x cid2 x abx x c1 x c2 cid3 px x cid9 c1 x cid9 c2 px x c2 cid3 cid3 According formula objects c1 c2 property p line 2 c1 c2 known property p certainly doesnt line 3 All stable models 31 coherent But change drop conjunctive term abc2 formula assert pc2 restrict accordingly default leads opposite conclusion The completion formula turn cid2 x cid2 x cid2 x cid3 abx x c1 cid3 px x cid9 c1 px x c2 cid3 This sentence coherent models satisfying c1 cid9 c2 9 Related work Propositional equilibrium logic 32 extends stable model semantics traditional programs propositional mulas deﬁnition stable model ﬁrstorder sentences proposed paper natural step It closely related extension equilibrium logic ﬁrstorder formulas described Appendices A51 A52 Theorem 5 24 relates stable models traditional programs circumscription translation introduces auxiliary predicate constants Our approach stable models closer recent publications 31 shows express semantics propositional equilibrium logic quantiﬁed Boolean formulas 23 translates equilibrium logic logic knowledge justiﬁed assumptions 21 An extended version 23 published issue NonHerbrand stable models traditional programs deﬁned basis characterizations stable model semantics proposed earlier including 243520 Extensional predicates similar input predicates sense 30 10 Conclusion The approach stable models proposed paper general traditional deﬁnition applicable syntactically complex formulas covers nonHerbrand models allows distinguish intensional extensional predicates Syntactically complex formulas useful context stable model semantics view relation aggregates NonHerbrand models related use arithmetic functions logic programs Extensional predicates provide useful technical device discussed 7 Acknowledgements We grateful Pedro Cabalar Martin Gebser Michael Gelfond Fangzhen Lin David Pearce Hudson Turner useful discussions related topic paper This work partially supported National Science Foundation Grants IIS0712113 IIS0839821 IIS0916116 Appendix A Proofs theorems A1 Proof Theorem 1 Given formula F variables set X ground atoms F X denote modiﬁed reduct F relative X Section 31 result replacing maximal subformulas F satisﬁed X Similar notation sets ground formulas Lemma 1 See 5 Lemma 22 X cid17 F X iff X cid17 F Proof Immediate deﬁnition F X cid2 Lemma 2 See 5 Lemma 23 F G X equivalent F X G X b F G X equivalent F X G X 252 P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 Proof If X satisﬁes F G formulas F G X F X G X equal equivalent b Similar cid2 The following lemma key proof Theorem 1 It relates modiﬁed reduct operator operator F cid18 u introduced Section 23 In statement lemma F Hx quantiﬁerfree formula x list variables t list ground terms length x p list predicate constants occurring Hx q list new predicate constants length p X set ground atoms contain predicate constant p Y subset X Y atoms obtained Y substituting members q corresponding members p p q set ground Lemma 3 The Herbrand interpretation Y satisﬁes Ht X iff Herbrand interpretation X Y u x substituting q predicate variables u t object variables x H p q satisﬁes sentence H q t obtained Proof By induction H Case 2 Hx form pt Case 1 Hx form t1x t2x Then H corresponding member p p X Y pt q t t1t t2t X Y On hand Ht X t1t t2t t1t equals t2t cid15x tuple terms Then H cid15x t p q satisﬁes sentence iff pt cid15t atom belongs X Since Y X Y satisﬁes Ht X iff pt Case 3 Hx trivial Case 4 Hx conjunction disjunction use Lemma 2 Case 5 Hx H1x H2x Then H 1q t H cid3 2q t q t Ht H cid2 p q satisﬁes sentence iff t1t equals t2t q t qt cid15t q member q cid15t belongs Y On hand Ht X cid15t belongs Y A1 Case 51 X cid17 Ht Then Herbrand interpretation X Y p q satisﬁes conjunction A1 iff satisﬁes second 2q t On hand Ht X case H1t X H2t X remains apply induction 1q t H term H hypothesis Case 52 X cid9cid17 Ht Then X Y p q satisfy A1 Ht X cid2 Theorem 1 For signature σ containing object constant ﬁnitely predicate constants ﬁnite set Π quantiﬁerfree formulas σ Herbrand interpretation X σ following conditions equivalent X stable model Π sense 2005 deﬁnition X pstable model conjunction universal closures formulas Π p list predicate constants σ Proof Let Πg set ground instances formulas Π let x list variables occurring Π let F x conjunction formulas Π In view Lemma 1 X stable model Π sense 2005 deﬁnition iff X satisﬁes Πg ii proper subset Y X satisﬁes Π X g On hand X pstable model xF x iff cid15 cid15 ii X satisﬁes xF x X satisfy uu p xF u x It clear equivalent satisﬁes formulas F t X arbitrary tuples t ground terms Condition ii tuple new predicate constants q proper subset Y X tuple t ground terms X Y satisﬁes F By Lemma 2a condition ii reformulated follows proper subset Y X reformulated terms p q q t By Lemma 3 follows ii equivalent ii cid2 cid15 cid15 cid15 A2 Proof Theorem 2 Lemma 4 For list p predicate constants Choicepu equivalent p cid2 u Proof xpx px ux x cid2 cid2 ux px cid3cid3 P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 253 p cid2 u x cid2 cid3 px ux cid2 Theorem 2 For ﬁrstorder formula F disjoint lists p q distinct predicate constants following formulas logically valid SMpqF SMpF cid7 F Choiceq SMpq cid6 SMpF The proof long notational diﬃculty need overcome present The notation u introduced Section 23 account fact construction formula depends F choice list p intensional predicates Since dependence p essential proof Theorem 2 use elaborate notation F pu For instance F px qx p u ux qx pq u v ux vx F F It easy verify induction F disjoint lists p q distinct predicate constants p F u F pq u q A2 Proof Theorem 2 In notation introduced SMpF cid3 u cid2 F u u p F p By A2 formula written cid2 F u u p F pq cid3 u q equivalent F u cid2cid2 cid3 u q p q pq F cid3 u q On hand SMpqF cid2cid2 cid3 u v p q F uv pq F cid3 u v To prove ii note A2 Lemma 4 formula pq pq cid2cid2 cid3 uv u v p q F u v Choiceq cid3 u v equivalent cid2cid2 uv u v p q cid3 pq F cid3 u v q v It follows equivalently rewritten u p F pq cid3 u q By A2 formula represented p u p F cid3 u cid2 cid2 u cid2 u A3 Proof Theorem 3 Lemma 5 The formula u cid2 p F u F logically valid Proof By induction F cid2 254 P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 Lemma 6 Formula cid2 u cid2 p F cid3 u F logically valid Proof Immediate Lemma 5 cid2 Theorem 3 For ﬁrstorder formulas F G SMF G equivalent SMF G Proof By Lemma 6 cid2 SMpF G F G u cid2 F G u cid2 F u SMpF G u p F cid2 u p F G u p F cid3 u u G G cid3 u cid3 A4 Proof Theorem 4 Lemma 7 Assume set intensional predicates divided parts p q occurrence predicate constant p F belongs antecedent implication Then formula cid2 F u q F cid3 u cid2 p logically valid Lemma 6 special case assertion F form G q Proof By induction F We consider case F G H cases straightforward Assume u cid2 p By Lemma 5 follows G u q G induction hypothesis H u q H Consequently F u q cid2 cid2 cid2 G G u q H u q H cid3 u q G G H cid3 cid3 u q G H H G G H cid2 F Theorem 4 For ﬁrstorder formula F intensional predicate p occurrence p F belongs antecedent implication formula SMF Falsep logically valid Proof Let q set intensional predicates p The formula proved written F Falsep uv cid2cid2 cid3 u v p q F cid3 u v A3 Assume F Falsep u u p By Lemma 7 follows F cid2 cid3 u q p q F u q u q Hence implies consequent A3 cid2 A5 Proofs Theorems 58 It convenient prove Theorems 7 8 Theorems 5 6 As preliminary step Lemma 9 extend work relationship stable models propositional equilibrium logic described 32 ﬁrstorder case P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 255 A51 Kripke semantics SQHT Notation universe interpretation I denoted I signature σ set U σ U stands called names ξ U object constants We identify deﬁned Iξ ξ By σf denote σ consisting extension σ obtained adding distinct new symbols ξ interpretation I σ extension σ I object function constants An HTinterpretation σ triple I cid23I f I h I tcid24 I f interpretation σf I h I t sets atomic formulas formed predicate constants σ names elements I f I h I t The symbols h t called worlds ordered relation h t The value I f assigns ground term t signature σf The satisfaction relation cid17 ht deﬁned recursively If denoted t I HTinterpretation I world w ﬁrstorder sentence F signature σ If ht ht I w cid17 I w cid17 I w cid9cid17 I w cid17 I w cid17 I w cid17 ht ht ht ht I I 1 t k I w I 1 t pt1 tk pt I t1 t2 t 2 F I w cid17 F G I w cid17 ht F G I w cid17 F I w cid17 G cid15 w cid2 w F G world w G ht ht ht cid15 I w cid15 cid9cid17 ht F I w cid15 cid17 ht G I w cid17 I w cid17 ht ht xF x ξ I f I w cid17 xF x ξ I f I w cid17 ht F ξ F ξ ht We I satisﬁes F write I cid17 I t cid17 F ht ht F I h cid17 ht F It easy check induction F condition implies As shown 16 SQHT tence F derivable Γ SQHT sound complete relative semantics set Γ sentences sen iff F satisﬁed HTinterpretation satisﬁes formulas Γ An interpretation I sense classical logic signature σ represented pair cid23 J Xcid24 J restriction I σ f X set atomic formulas formed predicate constants σ names elements I satisﬁed I The lemma uses notation relationship u introduced Section 23 We assume σ satisﬁability relation HTinterpretations transformation F cid18 F contains ﬁnitely predicate constants list constants denoted p By σ denote signature obtained σ adding new predicate constants q member p About atomic formula formed predicate constant σ names elements I patom predicate constant belongs p q set qatoms p qatom As Appendix A1 set X patoms denote X obtained elements X replacing predicate constants corresponding predicate constants q Lemma 8 For HTinterpretation I ﬁrstorder sentence F signature σ If I t cid17 ii I h cid17 ht F iff cid23I f I tcid24 cid17 F iff cid23I f I hp q q F iff cid23I f I hp q I tcid24 cid17 F ht I tcid24 cid17 F Proof Each easy check induction size F Consider instance proof ii case implication We write I cid23I f I hp q I tcid24 By induction hypothesis I h cid17 I h cid17 ht ht F iff G iff I cid17 F I cid17 G q q By lemma I t cid17 I t cid17 ht ht F iff G iff I cid17 F I cid17 G 256 P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 Consequently cid7 cid7 q cid6 I t cid9cid17 F I t cid17 I cid9cid17 F I cid17 G ht ht cid7 G ht iff iff I h cid17 F G cid6 ht I h cid9cid17 F I h cid17 G cid6 ht I cid9cid17 F q I cid17 G I cid17 F q G cid2 I cid17 q G F I cid17 F G cid3 q q iff iff iff q I cid17 F G F G cid2 A52 Firstorder equilibrium logic stable models An HTinterpretation cid23I f I h I tcid24 total I h I t A total HTinterpretation cid23I X Xcid24 equilibrium model sen tence F signature σ I cid23I X Xcid24 cid17 ii proper subset Y X cid23I Y Xcid24 cid9cid17 F ht ht F It easy check induction F condition equivalent cid23I Xcid24 cid17 F In following lemma σ signature containing ﬁnitely predicate constants Lemma 9 For total HTinterpretation cid23I X Xcid24 σ ﬁrstorder sentence F σ I iff cid23I Xcid24 pstable model F p list predicate constants σ cid23I X Xcid24 equilibrium model F Proof From Lemma 8ii conclude condition ii deﬁnition equilibrium model reformulated follows proper subset Y X I Y p q X cid9cid17 F q cid12 cid12 cid13 cid13 I Y p q X cid17 q p F q This equivalent saying set Y patoms consequently equivalent condition cid2 cid23I Xcid24 cid17 u u p F cid3 u It follows cid23I X Xcid24 equilibrium model F iff cid2 cid23I Xcid24 cid17 F u u p F cid3 u cid2 A53 Proof Theorems 7 8 The assertions Theorems 7 8 Section 52 jointly reformulated follows For ﬁrstorder formulas F G following conditions equivalent F strongly equivalent G ii formula H object function predicate constant occurring H occurs F G occurrence F H SMpF G H equivalent SMpF G H iii formula F G provable SQHT cid15 H cid15 obtained H replacing occurrence F G The proof repeats minor modiﬁcations argument 16 From ii Obvious From ii iii By x denote list variables free F G write F F x G Gx Our goal F x Gx provable SQHT Without loss generality assume predicate constant underlying signature σ belongs pF G Take HTinterpretation I tuple c names length x We need I satisﬁes F c iff I satisﬁes Gc Assume instance I cid17 F c denote formula ChoicepF G C Case 1 I total By ii ht SMpF G F x C equivalent SMpF G cid7 cid6 Gx C cid7 consequently SMpF G F c C cid7 equivalent SMpF G cid6 Gc C cid7 cid6 cid6 By Lemma 9 follows sentences P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 257 F c C Gc C A4 equilibrium models Since I total satisﬁes F c I equilibrium model ﬁrst formu Gc Case 2 I total Let J total las A4 Consequently equilibrium model second I cid17 HTinterpretation cid23I f I t I tcid24 From assumption I cid17 F c Lemma 8i J cid17 ht F c Furthermore reasoning Case 1 J place I conclude J cid17 F c conclude I t cid17 Gc By ii ht ht ht ht cid2 cid3cid7 SMpF G F x Gx C equivalent SMpF G consequently Gx SMpF G F c equivalent SMpF G Gc cid2 Gx C cid3cid7 cid2 Gc C cid2 Gc C cid3cid7 cid3cid7 cid6 cid6 cid6 cid6 By Lemma 9 follows sentences Gc C Gc F c cid2 cid3 cid2 Gc C cid3 A5 equilibrium models The rewritten Gc C A6 Since J total HTinterpretation satisfying Gc equilibrium model A6 Consequently J equilibrium model ﬁrst formulas A5 Hence formula satisﬁed I Since ﬁrst conjunctive term F c satisﬁed I conclude I satisfy second term Gc C Since I t cid17 C possible I h cid17 ht cid15 H cid15x Our goal SMpHx equivalent SMpH obtained H replacing occurrence F G let p list predicate write H constants We denote x list variables free formulas H H cid15x Without loss generality Hx H cid15x set predicate assume predicate constant underlying signature σ occurs Hx H constants σ ﬁnite Let q list predicate constants σ belong p By Theorem 2 suﬃcient cid15x Choiceq equivalent SMpqHx Choiceq Take interpretation cid23I Xcid24 σ prove SMpqH cid15c Choiceq Hc Choiceq tuple c names length x We need H pqstable models By Lemma 9 equivalent saying sentences equilibrium models It consequently sentences remains note equivalence sentences provable SQHT satisﬁed HTinterpretations cid2 cid15 Gc I cid17 From iii Let H Gc cid15 ht ht A54 Proof Theorem 5 Theorem 5 For ﬁrstorder formulas F G formula F G derivable SQHT extensional predicates q SMF equivalent SMG formulas Choiceq Proof Let p list intensional predicates let q list predicate constants occurring F G Since F G derivable SQHT Choiceq formula F Choiceq G Choiceq By Theorem 8 follows lefthand strongly equivalent righthand It follows provable SQHT SMpqF Choiceq equivalent SMpqG Choiceq By Theorem 2 conclude SMpF equivalent SMpG cid2 A55 Proof Theorem 6 Lemma 10 If formula G strictly positive occurrences predicate constants list p G G derivable SQHT formulas Choiceq predicate constants q occur G belong p Proof By induction G fact equivalences F G F G F G F G F G F G provable SQHT cid2 258 P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 Theorem 6 Let F positive occurrences intensional predicates SMF cid15 equivalent SMF cid15 formula obtained ﬁrstorder formula F inserting subformula G If G strictly Proof Immediate Lemma 10 Theorem 5 cid2 A6 Proof Theorem 9 Theorem 9 F strongly equivalent G iff formula cid2 cid3 cid2 q cid2 pF G F q G cid3 q A7 logically valid Proof Without loss generality assume predicate constant underlying signature σ belongs q pF G By x denote list variables free F G write F F x G Gx F F q x pF G p q G q x G By Theorem 8 condition F x strongly equivalent Gx equivalent condition F x Gx provable SQHT It reformulated follows HTinterpretation cid23I Y Xcid24 tuple c names length x cid23I Y Xcid24 cid17 ht F c iff cid23I Y Xcid24 cid17 ht Gc By Lemma 8ii line equivalently rewritten cid12 cid13 cid12 cid13 I Y p q X cid17 F q c iff I Y p q X cid17 G q c Consequently F x strongly equivalent Gx iff interpretation I σ f sets X Y patoms tuple c names length x cid12 cid13 cid12 cid13 cid17 q cid2 p F q c iff I Y p q X I Y p q X cid17 q cid2 p G q c This condition equivalent logical validity A7 cid2 A7 Proof Theorems 10 12 Theorem 10 follows Theorem 12 need prove Let intensional predicates p1 pn By eixi denote tuple p1 pi1 λyi pi yi cid9 xi cid2 cid2 cid3 yi cid3 pi1 pn yi tuple new distinct variables Lemma 11 For formula F implications cid2 cid2 xi ei F cid3cid3 F 1 n logically valid Proof Immediate Lemma 5 cid2 Lemma 12 If formula F contain strictly positive occurrences pi F eixi equivalent F P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 259 Proof Immediate Lemma 7 pi p cid2 Recall formula Clark normal form written cid2 xi ncid10 i1 G pi cid3cid3 cid2 xi xi list distinct variables Lemma 13 If F A8 PSMF equivalent F ncid10 i1 cid3 cid2 cid2 pi xi xi G cid2 cid2 ei xi cid3cid3cid3 Proof As discussed Section 72 PSMF equivalent ﬁrstorder formula cid2 F F cid31 u p Formula F cid8 cid2 1 u p written cid3cid3cid3cid3 cid2 F xi xi ei cid3 cid2 cid2 cid2 xi pi Consequently PSMF equivalently rewritten cid10 F cid3 cid2 cid2 pi xi xi F cid3cid3cid3 cid2 cid2 xi ei To prove assertion lemma remains derive equivalence cid2 cid2 cid3cid3 ei xi F cid3cid3 cid2 cid2 ei xi G assumption F Formula F cid2 y j G u rewritten assumption F conjunction formulas j u u j y j cid3cid3 cid2 A8 A9 A10 j 1 n The jth term tuple eixi λyipiyi yi cid9 xi j p j Consequently jth conjunctive term F cid2 cid2 cid3cid3 cid2 cid2 eixi cid3 cid2 yi G ei xi pi yi yi cid9 xi cid3cid3 j cid2 y j G cid3cid3 cid2 cid2 j ei xi cid3cid3 cid2 y j p j Lemma 11 shows presence conjunctive term cid2 cid2 cid3cid3 y j G j p j y j F conjunctive term A11 F cid2 G cid2 cid2 cid3cid3 ei xi yi cid3 yi cid9 xi eixi rewritten conjunctive terms A12 dropped altogether We conclude formula A9 written yi cid2 G cid2 cid2 cid3cid3 ei xi cid3 yi cid9 xi equivalent cid3cid3 cid2 cid2 cid2 yi G ei xi yi xi cid3 consequently A10 cid2 A11 A12 A13 A14 260 P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 Theorem 12 For formula F Clark normal form implication PSMF CompF logically valid b F pure PSMF equivalent CompF Proof If F A8 CompF equivalent cid3 cid10 cid3 cid2 F xi pi G cid2 xi A15 cid10 On hand Lemma 13 PSMF equivalent F cid2 cid3 cid2 xi pi xi cid2 cid2 cid3cid3cid3 xi ei G Claim follows Lemma 11 To prove claim b note F pure G Lemma 12 cid2 eixi equivalent G A8 Proofs Theorems 11 13 Since tight program pure Theorem 11 follows Theorem 12b Theorem 13 Consequently need prove Theorem 13 In following lemma F ﬁrstorder formula p list intensional predicates p1 pn u tuple distinct predicate variables u1 Lemma 14 Let S set pi strictly positive occurrence F The formula cid9 cid10 u cid2 p ui pi cid11 cid2 F F cid3 u iS logically valid Proof By induction F We consider case F G H cases straightforward It suﬃcient derive implication G H u H cid3 u A16 G cid2 assumption cid10 u cid2 p ui pi iS A17 Since pi strictly positive occurrence H belongs S follows induction hypothesis implication cid9 cid11 cid10 u cid2 p ui pi cid2 H H cid3 u iS logically valid By Lemma 5 implication u G u cid2 p G A18 A19 logically valid It remains observe A16 propositional consequence A17 A18 A19 cid2 Recall occurrence predicate constant formula called positive number implications containing occurrence antecedent Section 43 number odd occurrence negative Negative occurrences distinguished negated occurrencesthose belonging subformula form F Sec tion 62 In following lemmas v tuple distinct predicate variables disjoint u set pi positive nonnegated occurrence F let S set pi Lemma 15 Let S negative nonnegated occurrence F The formulas cid14 cid14 u cid2 v v cid2 p b u cid2 v v cid2 p iS ui pi F iS ui pi F v F u F u v logically valid P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 261 Proof Both parts proved simultaneously induction F We consider proof case F implication G H Case 1 H F G By Lemma 6 formulas u cid2 p v cid2 p cid2 cid2 F F u F cid3 v F cid3 logically valid Consequently formula logically valid Case 2 H different Then pi nonnegated occurrence G H nonnegated occurrence F Denote antecedent Ant written Ant u H v H A20 F F u v cid3cid3cid3 cid3cid3 cid2cid2 G G cid2 cid2 cid2 By b induction hypothesis applied G formula cid2 cid2 Ant G u G Ant H v H cid3 v cid3 u logically valid By induction hypothesis applied H formula logically valid It remains observe A20 propositional consequence A21 A22 cid2 cid9 Lemma 16 Let D set edges predicate dependency graph F The formula cid3 v u cid2 v v cid2 p u j p j v pi u F cid10 cid11 cid2 F logically valid j pi p j D Proof By induction F We consider case F implication G H Let Ant antecedent u cid2 v v cid2 p u j p j v pi cid10 j pi p j D formula question let S set pi strictly positive occurrence F It suﬃcient establish logical validity formulas A21 A22 A23 A24 cid9 cid9 Ant cid10 iS v pi cid2 F u F cid3 v Ant v cid9 pi cid2 F u F cid3 v S From Lemma 14 conclude formula Ant cid10 iS v pi cid2 F F cid3 v cid11 cid11 logically valid A23 propositional consequence formula view fact F conjunctive term u Formula A24 propositional consequence F cid3cid3 cid2cid2 cid2 Ant v cid9 pi G u H G v H v cid3 u A25 proof completed establish logical validity S Note ﬁrst edge dependency graph H edge dependency graph F Consequently induction hypothesis implies formula u H cid3 v Ant H cid2 A26 logically valid Furthermore clear deﬁnition Ant formula tautology Let S predicate dependency graph pi p j D S j S set js p j positive nonnegated occurrence G By deﬁnition Consequently Ant v cid9 pi u j p j cid10 j pi p j D Ant v cid9 pi u j p j cid10 jS 262 P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 tautology In view Lemma 15a follows formula Ant v cid9 pi G v G cid2 cid3 u A27 logically valid It remains observe A25 propositional consequence A26 A27 cid2 Theorem 13 For tight formula F PSMF equivalent SMF cid10 Proof We need prove implication lefttoright Since F tight assume loss generality members p1 pn p ordered way j edges pi p j dependency graph u Let m largest ui cid9 pi Take x F Assume PSMF u p need derive F pmx umx Choose v follows v λypiy x cid9 y m pi Then u cid2 v v cid2 p u j p j v pi A28 j pi p j D Indeed conjunctive terms u cid2 v v cid2 p immediate second disjunctive term u j p j v pi different m Any j pm p j D greater m choice m ﬁrst disjunctive term u j p j From A28 formula Lemma 16 F u F v On hand v 1 p view PSMF conclude F v Consequently F u cid2 References 1 Keith Clark Negation failure Herve Gallaire Jack Minker Eds Logic Data Bases Plenum Press New York 1978 pp 293322 2 Esra Erdem Vladimir Lifschitz Tight logic programs Theory Practice Logic Programming 3 2003 499518 3 Wolfgang Faber Nicola Leone Gerald Pfeifer Recursive aggregates disjunctive logic programs Semantics complexity9 Proceedings Euro pean Conference Logics Artiﬁcial Intelligence JELIA 2004 4 François Fages Consistency Clarks completion existence stable models Journal Methods Logic Computer Science 1 1994 5160 5 Paolo Ferraris Vladimir Lifschitz Mathematical foundations answer set programming We Will Show Them Essays Honour Dov Gabbay Kings College Publications 2005 pp 615664 6 Paolo Ferraris Joohyung Lee Vladimir Lifschitz A new perspective stable models Proceedings International Joint Conference Artiﬁcial Intelligence IJCAI 2007 pp 372379 7 Paolo Ferraris Joohyung Lee Vladimir Lifschitz Ravi Palla Symmetric splitting general theory stable models Proceedings International Joint Conference Artiﬁcial Intelligence IJCAI 2009 pp 797803 8 Paolo Ferraris Answer sets propositional theories Proceedings International Conference Logic Programming Nonmonotonic Reasoning LPNMR 2005 pp 119131 9 Michael Gelfond Vladimir Lifschitz The stable model semantics logic programming Robert Kowalski Kenneth Bowen Eds Proceedings International Logic Programming Conference Symposium MIT Press 1988 pp 10701080 10 Michael Gelfond Vladimir Lifschitz Classical negation logic programs disjunctive databases New Generation Computing 9 1991 365385 11 Carla P Gomes Henry Kautz Ashish Sabharwal Bart Selman Satisﬁability solvers Frank van Harmelen Vladimir Lifschitz Bruce Porter Eds Handbook Knowledge Representation Elsevier 2008 pp 89134 12 Joohyung Lee Fangzhen Lin Loop formulas circumscription Artiﬁcial Intelligence 170 2 2006 160185 13 Joohyung Lee Yunsong Meng On loop formulas variables Proceedings International Conference Knowledge Representation Reasoning KR 2008 pp 444453 14 Joohyung Lee Vladimir Lifschitz Ravi Palla A reductive semantics counting choice answer set programming Proceedings AAAI Conference Artiﬁcial Intelligence AAAI 2008 pp 472479 15 Vladimir Lifschitz David Pearce Agustin Valverde Strongly equivalent logic programs ACM Transactions Computational Logic 2 2001 526541 16 Vladimir Lifschitz David Pearce Agustin Valverde A characterization strong equivalence logic programs variables Proceedings Inter national Conference Logic Programming Nonmonotonic Reasoning LPNMR 2007 17 Vladimir Lifschitz Computing circumscription Proceedings International Joint Conference Artiﬁcial Intelligence IJCAI 1985 pp 121127 18 Vladimir Lifschitz Pointwise circumscription Matthew Ginsberg Ed Readings Nonmonotonic Reasoning Morgan Kaufmann San Mateo CA 1987 pp 179193 19 Vladimir Lifschitz Twelve deﬁnitions stable model Proceedings International Conference Logic Programming ICLP 2008 pp 3751 20 Fangzhen Lin Raymond Reiter Rules actions A situation calculus semantics logic programs Journal Logic Programming 31 1997 299330 21 Fangzhen Lin Shoham Yoav A logic knowledge justiﬁed assumptions Artiﬁcial Intelligence 57 1992 271289 22 Fangzhen Lin Yuting Zhao ASSAT Computing answer sets logic program SAT solvers Proceedings National Conference Artiﬁcial Intelligence AAAI MIT Press 2002 pp 112117 23 Fangzhen Lin Yi Zhou From answer set logic programming circumscription logic GK Proceedings International Joint Conference Artiﬁcial Intelligence IJCAI 2007 24 Fangzhen Lin A study nonmonotonic reasoning PhD thesis Stanford University 1991 25 Victor Marek Mirosław Truszczy nski Stable models alternative logic programming paradigm The Logic Programming Paradigm A 25Year Perspective SpringerVerlag 1999 pp 375398 26 John McCarthy Circumscriptiona form nonmonotonic reasoning Artiﬁcial Intelligence 13 1980 2739 171172 27 John McCarthy Applications circumscription formalizing common sense knowledge Artiﬁcial Intelligence 26 3 1986 89116 9 Revised version httpwwwwfabercomresearchpapersjelia2004pdf P Ferraris et al Artiﬁcial Intelligence 175 2011 236263 263 28 Robert Moore Semantical considerations nonmonotonic logic Artiﬁcial Intelligence 25 1 1985 7594 29 Ilkka Niemelä Logic programs stable model semantics constraint programming paradigm Annals Mathematics Artiﬁcial Intelligence 25 1999 241273 30 Emilia Oikarinen Tomi Janhunen Achieving compositionality stable model semantics Smodels programs Theory Practice Logic Pro gramming 56 2008 717761 31 David Pearce Hans Tompits Stefan Woltran Encodings equilibrium logic logic programs nested expressions Proceedings Portuguese Conference Artiﬁcial Intelligence EPIA 2001 pp 306320 32 David Pearce A new logical characterization stable models answer sets Jürgen Dix Luis Pereira Teodor Przymusinski Eds NonMonotonic Extensions Logic Programming Lecture Notes Artiﬁcial Intelligence vol 1216 SpringerVerlag 1997 pp 5770 33 Raymond Reiter A logic default reasoning Artiﬁcial Intelligence 13 1980 81132 34 Patrik Simons Ilkka Niemelä Timo Soininen Extending implementing stable model semantics Artiﬁcial Intelligence 138 2002 181234 35 Mark Wallace Tight consistent computable completions unrestricted logic programs Journal Logic Programming 15 1993 243273