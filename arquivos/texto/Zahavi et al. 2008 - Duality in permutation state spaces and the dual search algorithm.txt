Artiﬁcial Intelligence 172 2008 514540 wwwelseviercomlocateartint Duality permutation state spaces dual search algorithm Uzi Zahavi Ariel Felner b Robert C Holte c Jonathan Schaeffer c Computer Science Department BarIlan University RamatGan Israel b Department Information Systems Engineering BenGurion University Israel c Computing Science Department University Alberta Edmonton Alberta Canada Received 2 August 2006 received revised form 27 June 2007 accepted 22 October 2007 Available online 6 November 2007 Abstract Geometrical symmetries commonly exploited improve efﬁciency search algorithms A new type symmetry permutation state spaces duality introduced Each state dual state Both states share important attributes distance goal Given state S shown admissible heuristic dual state S admissible heuristic S This provides opportunities additional heuristic evaluations An exact deﬁnition class problems duality exists provided A new search algorithm dual search presented switches original state dual state likely switch improve chance reaching goal faster The decision switch important policies investigated Experimental results signiﬁcant improvements number applications dual states heuristic evaluation andor dual search 2007 Elsevier BV All rights reserved Keywords Heuristics Search Admissibility Duality 1 Introduction overview The states combinatorial problems Rubiks cube 15puzzle deﬁned placements set m objects set n locations n cid2 m All different ways objects locations object location deﬁnes state space called permutation state space paper1 Given states permutation state space start goal set operators transform state search algorithms A 8 IDA 12 ﬁnd shortest sequence operators transform start goal These algorithms use cost function f n gn hn gn cost reach state n start hn admissible lower bound heuristic function estimating cost n goal Corresponding author Email addresses zahaviucsbiuacil U Zahavi felnerbguacil A Felner holtecsualbertaca RC Holte jonathancsualbertaca J Schaeffer 1 Strictly speaking permutation require n number locations exactly m number objects We relaxed requirement demand n cid2 m We use term strict permutation state space refer state spaces states permutations strict sense m n 00043702 matter 2007 Elsevier BV All rights reserved doi101016jartint200710019 U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 515 The effectiveness search greatly inﬂuenced accuracy hn When hn accurate number nodes generated search decreases goal state reached sooner 16 There tradeoff reduction More accurate heuristics usually consume larger time overhead node generated percentage reduction actual time needed solve problem smaller practice percentage reduction total number generated nodes Usually reduction number generated nodes dominates constant time node time reduction seen 417 In paper new type symmetry discussedduality It based observation strict2 permutation state spaces m n roles played objects locations interchangeable By reversing roles state S mapped dual representation Sd Given admissible heuristic h value hSd lower bound distance S goal Taking maximum hS hSd result better heuristic value S search Further hSd hS exploited search algorithm switches representations appears likely beneﬁcial The dual search algorithm searches original dual search space switching representations whichever higher heuristic value The contributions paper follows A formal deﬁnition duality given precise conditions applicable The dual state S state Sd easily computed S shares key searchrelated properties S distance goal Therefore admissible heuristic Sd admissible heuristic S A new type search algorithm dual search introduced It unusual feature necessarily visit states solution path returns Instead constructs solution path path segments ﬁnds disparate regions state space The jumping region region effected choosing expand Sd instead S improves chances achieving cutoff search Using heuristic evaluation dual state hSd search shows signiﬁcant performance improvement number domains Adding dual search algorithm improves results For domains studied results represent best published literature The idea duality constraint satisfaction problems CSP literature ﬂipping roles variables constraints produces dual version problem Independent work Hnich et al discuss methods use duality CSP applications 9 For example exploit duality choosing solve variation problem appears faster solve By contrast paper introduce duality ideas context heuristic statespace search The paper organized follows Sections 2 3 present background material In Section 4 notion simple duality deﬁned Simple duality special case duality applies strict permutation states spaces Section 5 discusses properties dual heuristic Section 6 presents new search algorithm based duality DIDA Dual IDA Section 7 provides experimental evidence beneﬁts heuristic evaluation dual state dual search algorithm Section 8 provides generalization duality notion wider variety permutation state spaces necessarily strict Experimental results general case provided Section 9 A summary suggestions future work provided Section 10 Preliminary versions paper appeared 720 2 Problem domains permutation state spaces This section introduces application domains paper gives formal deﬁnition permutation state spaces Pattern databases heuristic evaluation function application domains described 21 The slidingtile puzzles One classic examples AI literature singleagent pathﬁnding problem slidingtile puzzle Three versions puzzle 3 3 8puzzle 4 4 15puzzle 5 5 24puzzle They consist 2 We provide generalization idea permutation state spaces necessarily strict 516 U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 Fig 1 The 8 15 24puzzle goal states Fig 2 3 3 3 Rubiks cube square frame containing set numbered square tiles position called blank The legal operators slide tile horizontally vertically adjacent blank blank position The problem rearrange tiles random initial conﬁguration particular desired goal conﬁguration The state space grows exponentially size number tiles increases shown 19 ﬁnding optimal solutions sliding tile problem NPcomplete The 8puzzle contains 92 181440 reachable state 15 puzzle contains 1013 reachable states 24puzzle contains 1025 states The goal states puzzles shown Fig 1 The classic heuristic function slidingtile puzzles called Manhattan distance It computed counting number grid units tile displaced goal position summing values tiles excluding blank Since tile Manhattan distance goal position legal moves tile Manhattan distance lower bound minimum number moves needed solve problem instance 22 Rubiks cube Rubiks cube invented 1975 Erno Rubik Hungary It famous combinatorial puzzle time The standard version consists 3 3 3 cube Fig 2 different colored stickers exposed squares subcubes cubies Any 3 3 1 edge plane cube rotated 90 180 270 degrees relative rest cube In goal state squares cube color The puzzle scrambled making number random moves task restore cube original goal state There 4 1019 different reachable states There 20 movable cubies 6 stable cubies center face The movable cubies divided corner cubies faces edge cubies faces Corner cubies corner positions edge cubies edge positions 23 The pancake puzzle The pancake puzzle analogous waiter navigating busy restaurant stack n pancakes 2 To avoid disaster waiter wants sort pancakes ordered size Having free hand available operation lift portion stack reverse In domain state permutation values 0 N 1 A state N 1 successors kth successor formed reversing order ﬁrst k 1 elements U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 517 Fig 3 The 5pancake puzzle permutation 1 cid3 k N For example N 5 successors state cid30 1 2 3 4cid4 cid31 0 2 3 4cid4 cid32 1 0 3 4cid4 cid33 2 1 0 4cid4 cid34 3 2 1 0cid4 shown Fig 3 From state possible reach permutation size state space N In domain operator applicable state Hence branching factor N 1 24 Permutation state spaces A state space set states set operators map states states A speciﬁc problem instance state space particular initial state goal state The task ﬁnd optimal path initial state goal state Permutation state spaces special type combinatorial problems consisting set m objects n locations n cid2 m The states problems different ways placing objects locations object location Strict permutation state spaces special case permutation state spaces number objects exactly number locations n m An operator permutation state spaces changes locations objects This rich interesting class problems including example ﬁnite mathematical groups The puzzles deﬁned permutation state spaces classic benchmark problems planning Blocks World Note general permutation problems solved heuristic search necessarily span permutation state space For example Travailing Salesman Problem TSP task ﬁnd permutation cities optimal cost However problem span permutation state space deﬁned In TSP predeﬁned goal state meaning ﬁnding path given initial state goal state permutation states 3 Heuristics The efﬁciency singleagent search algorithm usually dominated quality heuristic The best known heuristics application domains paper form pattern database deﬁned Pattern databases experimental studies purpose section background details pattern databases However important note papers key ideas duality dual heuristic evaluations dual search depend heuristic pattern database ideas apply heuristics forms 31 Pattern databases A powerful approach obtaining admissible heuristics use pattern databases PDBs 1 The state space permutation state space problem different ways placing given set objects locations A subproblem abstraction original problem deﬁned considering objects treating dont care A pattern abstract state speciﬁc assignment locations objects subproblem The pattern space abstract space set different reachable patterns given abstract problem 518 U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 Fig 4 Example regular lookups Each state original state space abstracted pattern pattern space considering pattern objects ignoring The goal pattern abstraction goal state There edge different patterns p1 p2 pattern space exist states s1 s2 original problem p1 abstraction s1 p2 abstraction s2 operator original problem space connects s1 s2 A pattern database PDB lookup table stores distance pattern goal pattern pattern space A PDB built running breadthﬁrst search3 backwards goal pattern pattern space spanned A state S original space mapped pattern Scid5 ignoring details state description preserved subproblem The value stored PDB Scid5 lower bound serves admissible heuristic distance S goal state original space pattern space abstraction original space Pattern databases proven useful ﬁnding lower bounds combinatorial puzzles 1561415 Furthermore proved useful search problems multiple sequence alignment 1822 plan ning 3 311 Pattern databases example PDBs built slidingtile puzzles illustrated Figs 4a b Assume subproblem includes tiles 2 3 6 7 Patterns created ignoring tiles 2 3 6 7 Each pattern contains tiles 2 3 6 7 unique combination positions The resulting 2367PDB entry pattern containing distance pattern goal pattern shown lower Fig 4b Fig 4b depicts PDB lookup PDB estimating distance given state S goal Fig 4a State S mapped 2367 pattern ignoring tiles 2 3 6 7 Then patterns distance goal pattern looked PDB To speciﬁc PDB represented 4dimensional array PDB array indexes locations tiles 2 3 6 7 respectively lookup state S PDB8121314 tile 2 location 8 tile 3 location 12 The value retrieved PDB lookup state S lower bound serves admissible heuristic distance S goal state original space In paper accessing PDB state S referred regular lookup heuristic value referred regular heuristic 312 Additive pattern databases Additive pattern databases provide current best admissible heuristic slidingtile puzzles 515 The tiles partitioned disjoint sets patterns tiles PDB built set The PDB stores cost moving 3 This description assumes operators cost The techniques easily extend case operators different costs U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 519 Fig 5 Partitionings reﬂections tile puzzles Fig 6 Both S G reﬂected main diagonal possible PDB lookup tiles given subproblem given arrangement goal positions If set tiles moves tiles given set counted values different disjoint PDBs added result admissible An xyz partitioning partition tiles disjoint sets cardinalities x y z Fig 5 presents 78 partitionings 15puzzle 6666 partitionings 24puzzle ﬁrst 515 32 Geometric symmetries It common practice exploit special properties state space enable additional lookups PDB In 1 alternative lookups PDB based physical symmetries 15puzzle described For example symmetry main diagonal PDB built goal pattern Fig 4b estimate number moves required tiles 8 9 12 13 current positions state S goal locations As shown Fig 6 S G reﬂected main diagonal yielding Sr Gr The 2367 PDB lower bound number moves required tiles 8 9 12 13 current positions state Sr locations Gr This identical number moves required current positions state S goal locations G This idea reﬂecting domain main diagonal having set PDBs solve 15puzzle 24puzzle additive PDBs 515 It easy 78 partitionings 15puzzle similarly 24 puzzle Fig 5 reﬂections main diagonal PDB needed practice For example geometric symmetry consider Rubiks cube assume PDB blue face gives values cubies blue colors Reﬂecting rotating puzzle enable similar lookups face different color yellow red faces symmetric Because valid alternative PDB lookups provide lower bounds distance state S G maximum taken value hS Of course tradeoff thiseach PDB lookup increases time takes compute hS Because additional lookups provide diminishing returns terms reduction number nodes generated best use possible PDB lookups 1 A number methods exist reducing time needed compute hS making inferences values actually looking PDB 10 520 U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 4 Simple duality In paper types duality presented This section introduces simple duality applies strict permutation state spaces number objects locations Rubiks cube operators preconditions operator applicable state Section 8 generalizes notion duality state spaces locations objects operators preconditions 41 Assumptions simple duality Before deﬁning dual state ﬁrst present assumptions preconditions simple duality 1 Every state arrangement m objects n locations m n exactly object location In words simple duality require state space strict permutation state space For example natural representation 8puzzle 9 objects representing individual tiles representing blank This assumption relaxed Section 8 allow n cid2 m object location 2 A set operators given change locations objects We assume operators actions locationbased permutations meaning operator rearranges contents certain set locations reference speciﬁc objects For example operator swap contents locations A B 3 The operators invertible operator inverse cost Consequently operator sequence O applied state S1 transform S2 inverse O1 applied state S2 transform S1 cost O 4 Operators preconditions That operator applicable state This assumption assumed simple duality In Section 8 assumption 4 dropped resulting notion general duality operators necessarily applicable state internal preconditions Example domains assumption 4 violated sliding tile puzzle Towers Hanoi In precondition refers location blank In precondition refers topmost discs operators source destination pegs Two deﬁnitions dual state follow proof equivalent 42 Simple duality Deﬁnition 1 For given pair states S1 S2 unique locationbased permutation π transforms S1 S2 For example π Fig 7a describes objects locations 4pancake state S goal locations G The letters b c d denote locations π maps c Fig 7a object 3 location S location c G The permutation π entirely determined state descriptions S G depend operators deﬁne state space In particular π deﬁned exists sequence operators transforms S G Dual state Deﬁnition 1 For state S goal state G let π locationbased permutation πS G Then Sd simple dual S goal G deﬁned πG Fig 7 Locationbased permutation π maps S G G Sd b U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 521 Fig 8 Simple duality G πS Sd πG let G goal state location x let o object located x S let y location o G deﬁne πx y DualState S 1 2 21 22 23 33 endfor 3 4 Sd πG return Sd Algorithm 1 DualCalculating dual state according Deﬁnition 1 This deﬁnition illustrated Fig 8 As shown assumptions cost reaching G S Sd maxhS hSd admissible heuristic S admissible heuristic h For example PDBs hS PDBS given PDB G hSd PDBSd admissible S In practice Sd calculated constructing π descriptions S G applying π G shown Algorithm 1 Therefore Sd calculated description S need know actual path S G illustrated Fig 7b 43 Simple duality Deﬁnition 2 The advantage ﬁrst deﬁnition properly motivates location dual state search space We provide alternative deﬁnition dual state analogous dual concept constraint satisfaction ﬁeld 9 We prove deﬁnitions equivalent In strict permutation state spaces roles played objects locations representing state interchange able Usually vector containing state description locations variables objects values This called regular representation state Flipping roles objects locations vector describes S yields dual representation Here objects variables locations values Given vector size K represents state regular representation treats objects occupy locations 1 K The dual representation treat locations occupied objects 1 K For example rep resentative vector cid33 1 4 2cid4 regular representation refers state S cid33 1 4 2cid4 object 3 location 1 object 1 location 2 The dual representation vector corresponds dual state Sd object 1 location 3 object 2 location 1 The dual state regular representation Sd cid32 4 1 3cid4 In section assume canonical deﬁnition goal state G That given enumeration ob jects locations G object located location For goal state regular dual representation identical Dual state Deﬁnition 2 Given vector representation V state S dual state Sd deﬁned state described V dual representation Algorithm 2 based Deﬁnition 2 calculates regular representation dual state Sd regular representation S 522 U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 DualState S 1 For object x S 11 Let y location object x S 12 In Sd place object y location x 2 Return Sd Algorithm 2 DualCalculating dual state based Deﬁnition 2 Fig 9 The relation state S dual state Sd Given representative vector cid33 1 4 2cid4 regular representation corresponds S dual representation corresponds Sd 44 Analysis A number theorems concerning duality given The following terminology LocSx y indicates object y located location x state S Therefore goal state G LocGi CoptX Y denotes cost optimal path state X state Y Theorem 41 Deﬁnitions 1 2 equivalent Proof Let G canonical goal state S state π permutation πS G Sd dual state S obtained Deﬁnition 1 It needs shown S arbitrary object j located location Sd object located location j Assume π moves content location location j Applying π ﬁrst time S object j location location j home location G Applying π second time G object home location location j cid2 Fig 9 shows relation state vector S Fig 9a dual Sd Fig 9d according deﬁnitions Fig 9ab shows S mapped G permutation π deﬁnition π written beneath arrow 1 3 means object location 1 S mapped location 3 G In lower ﬁgure π applied G produce Sd The vector describes S cid33 1 4 2cid4 means location 1 occupied object 3 2 1 In dual representation objects variables locations values vector means object 1 location 3 object 2 location 1 The state corresponds dual representation Sd Fig 9d Theorem 42 Sd d S Proof Show states objects location We Location y LocSy x cid8 LocSd d y x And Location y LocSy x def 2cid8 LocSd x y def 2cid8 LocSd d y x cid2 Theorem 43 If O o1 o2 legal path S G O1 o1 Sd G cost O n o 1 2 o 1 1 legal path Proof If O o1 o2 legal path S G O legal path G Sd Deﬁnition 1 Because operators reversed Assumption 3 sequence operators O1 o1 legal n o 1 2 o 1 1 U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 523 path Sd G Since operators inverses cost Assumption 3 cost O O1 cid2 Theorem 44 CoptS G CoptSd G Proof There cases consider If exist operator sequence transforming S G exist operator sequence transforming Sd G CoptS G CoptSd G Al ternatively exist operator sequence transforming S G let O minimumcost sequence n operators transforms S G According Theorem 43 O1 legal path Sd G cost CoptS G cid2 CoptSd G Applying reasoning minimumcost path Sd G implies CoptSd G cid2 CoptSd d G Theorem 42 cid8 CoptSd G cid2 CoptS G These inequalities imply CoptS G CoptSd G cid2 As result admissible heuristic state Sd admissible state S vice versa Therefore given heuristic h state S dual heuristic hd S calculated regular heuristic dual state hSd If PDBs PDB lookup dual state Sd heuristic bound S Such PDB lookup Sd called dual PDB lookup S4 5 Attributes dual heuristic In section different attributes dual heuristic discussed 51 When regular dual heuristics provide different values Admissible heuristics permutation problems divided types Let π permutation transforms S G The ﬁrst type heuristic calculates value considering effect π current location objects state For example Manhattan distance provides heuristic bound moving tiles The second type heuristic considers effect π subset objects PDBs example provide solutions relaxed problem contains subset objects For ﬁrst type heuristic Manhattan distance dual regular heuristics equal This states reached goal state applying permutation π reverse directions heuristic considers similar effect π objects state S Sd Consider state S Sd provided Fig 10 For tile S unique tile Sd Manhattan distance effect π For example S tile 1 located location 5 upthe Manhattan distance tile 1 Similarly Sd tile 5 located location 1 step Note true objects state considered Fig 10 15puzzle duality Manhattan distance 4 In 7 idea ﬂipping roles objects locations produce dual patterns dual PDB lookups The dual representation presented paper generalizes principle entire state allows heuristic dual state Sd PDBs S The deﬁnition dual PDB lookups 7 different equivalent regular lookup dual state PDBSd deﬁned 524 U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 For second type regular dual heuristics necessarily equal Using subset objects cause different heuristic result For example assume tile 1 considered Manhattan distance In Fig 10 tile 1s Manhattan distance heuristic S 1 Sd 4 For PDBs subset objects considered heuristic dual state different For example assume Fig 10 PDB based tiles 2 3 6 7 The PDB lookup S tiles locations 8 12 13 14 The PDB lookup Sd tiles locations 9 5 15 12 These tiles travel different paths goal state S Sd completely different entries PDB completely different values 52 Inconsistency dual heuristic A heuristic h consistent states x y hx hy cid3 distx y distx y optimal distance In words difference heuristic values states greater cost path When moving parent node child node heuristic dual state produce inconsistent 21 values heuristic regular form consistent In standard search parent state P children S neighbors deﬁnition Thus consistent heuristic return consistent values applied P S However heuristic values obtained P d Sd consistent P d Sd necessarily neighbors This consequence following corollary Corollary 51 Let P S states let c actual distance The distance P d Sd necessarily c In particular larger Proof An example sufﬁcient Consider 9pancake puzzle states shown Fig 11 State G goal state puzzle State S1 neighbor G obtained reversing tokens locations 13 shown bold frame state S2 obtained reversing tokens locations 16 States Gd Sd 2 dual states G S1 S2 respectively Observe states S1 S2 neighboring states Sd 2 duals 1 arrive node Sd neighbors Reversing consecutive k ﬁrst tokens state Sd 1 Sd 2 5 2 differ 1 Using values S1 S2 inconsistent neighbors This shown following PDB example Suppose patterns 9pancake puzzle deﬁned considering tokens 46 ignoring rest tokens The A consistent heuristic return values Sd 1 Sd 1 Sd Fig 11 9pancake states 5 Note particular example S1 Sd state S1 single away goal 1 identical In domain applying single operator twice row reach state U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 525 Fig 12 Geometrical dual symmetries Fig 13 Propagation values inconsistent heuristics resulting PDB provides distances goal pattern reachable patterns The right column Fig 11 shows corresponding pattern state obtained symbol represent dont care Regular PDB lookups produce consistent heuristic values search 11 Indeed states S1 S2 neighbors PDB heuristic values differ 1 In state S1 tokens 46 goal locations hS1 0 In state S2 tokens 46 goal locations need apply operator reach goal pattern hS2 1 Dual PDB lookups admissible necessarily consistent The dual PDB lookup state S1 PDB lookup state Sd 1 returns 0 tokens 46 goal location state Sd 1 However pattern projected state Sd 2 moves away goal pattern Thus performing dual lookup states S1 S2 PDB lookups states Sd 2 produce heuristics inconsistent 0 2 Thus moving S1 S2 vice versa g changed 1 h changed 2 cid2 1 Sd 53 Geometrical symmetries versus dual symmetries There major difference states obtained dual symmetry states obtained geometrical symmetry This difference illustrated Fig 12 As derived Corollary 51 given state S dual Sd neighbors Sd necessarily dual states neighbors S This shown Fig 12b For geometrically reﬂected states Sg Fig 12a exactly opposite Corollary 51 true That distance states P S c distance P g Sg geometrical reﬂected state P S exactly c Geometrical symmetries transform domain changing internal structure As result neighbors reﬂected state Sg reﬂections neighbors S Therefore heuristics reﬂected states PDB lookup reﬂection goal described Section 32 produce consistent heuristics 54 Bidirectional pathmax In 721 bidirectional pathmax BPMX method propagating inconsistent heuristic values search introduced experiments showed effective pruning subtrees explored The bidirectional pathmax method illustrated Fig 13 The left ﬁgure shows inconsistent heuristic values node children When left child generated heuristic h 5 propagate parent right child To preserve admissibility propagation reduces h cost traversing path 1 example This results h 4 root h 3 right child When IDA bidirectional propagation cause nodes pruned expanded For 526 U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 example suppose current IDA threshold 2 Without propagation h left child root node f g h 0 2 2 right child f g h 1 1 2 expanded Using propagation described left child increase parents h value 4 resulting cutoff generating right child BPMX regarded integral search algorithm heuristic inconsistent operators invertible experiments reported paper 6 Dual search Traditionally heuristic search algorithms ﬁnd optimal solutions starting initial state traversing state space goal state The traditional search algorithms differ decision state expand solution path states path traversed Dual search remarkable property necessarily visiting states solution path Instead constructs solution path path segments ﬁnds disparate regions state space In paper focus DIDA dual version IDA Dual versions algorithms similarly constructed 61 Dual IDA DIDA Recall distance goal G S Sd identical inverse O1 optimal path O Sd G optimal path S G This fact presents choice DIDA exploits continue searching S For state S DIDA computes hS hSd Suppose maxhS hSd exceed current threshold DIDA continue point S IDA switch continue search Sd Switching S Sd called jumping A simple policy making decision jump Sd larger heuristic value Slarger heuristic values suggest dual better chance achieving cutoff sooner locality heuristic values This referred jump larger JIL policy Deciding jump important algorithm alternatives JIL discussed later Of course later search DIDA decide jump regular heuristic value better Once goal state reached optimal solution path reconstructed described sequence dual regular path segments led goal start Fig 14 illustrates difference IDA DIDA In Fig 14a IDA ﬁnds path S0 G In Fig 14b DIDA search starts starting regular state S0 moves 1 2 leading state 1 No switches occur DIDA S1 Then jumping policy DIDA switches dual state Sd continues dual goal G reached In Fig 14c DIDA search starts Fig 14b state Sd 2 jump regular DIDA continues S2 G 62 Constructing solution path The correctness DIDA best seen considering path segments ﬁnds joined create path start goal IDA constructs solution path backtracking goal state start state recovering path reverse order This work DIDA moves regular forward search dual backward search The solution maintain Fig 14 Dual IDA search DIDA U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 527 initial_state S returns optimal solution let threshold maxhS hSd let Path NULL repeat 1 DIDA 2 3 4 41 42 43 GoalFound 5 return Path GoalFound DDFSSNULLNULL0REGULARPaththreshold threshold threshold Algorithm 3 DIDA additional bit state search bit indicating search point regular dual At start search bit set REGULAR A child inherits bit value parent jump occurs value bit ﬂipped To construct solution path DIDA backtracks search tree recover moves reach goal If bit current o value REGULAR o added f ront partially built path usual However bit indicates o dual inverse o1 added end partially built path It important note based Theorem 43 operators taken dual regular The exact states visited path dual necessarily duals states actual solution path In Fig 14a IDA backtracks solution path reconstructed adding moves partially built path resulting path built order 6 5 6 1 2 3 4 5 6 Fig 14b illustrates works DIDA Backtracking G lead following pairs values corresponding bit order 31 D 41 D 51 D 61 D 2 R 1 R Since bit ﬁrst moves indicates belong dual inverses moves added end partially built path yielding partially built paths 3 3 4 3 4 5 3 4 5 6 Now bit indicates search occurred regular Hence moves inserted path obtaining 2 3 4 5 6 1 2 3 4 5 6 The dashed line Fig 14b shows concatenate solution path Sd 1 G correct place Algorithm 3 presents pseudocode DIDA DIDA mirrors IDA iteratively increasing solution cost threshold solution Each iteration calls DDFS dual depthﬁrst search presented Algo rithm 4 DDFS recurses solution cost threshold exceeded DIDA differs standard IDA search respects First DDFS includes extra parameters side_bit indicating search currently REGULAR DUAL regular dual sides operator pruning explained Section 64 Second jump decision included DDFS possibly resulting jump lines 554 Finally goal reconstruction solution path distinguishes regular dual sides lines 631632 63 The beneﬁt jumping The regular dual states different large differences admissible heuristic values states S Sd 6 By highest heuristic value current context increasing chances moving region search space values high create cutoff Of course decision switch sides heuristic guaranteed improve search time jump Consulting heuristic dual state introduces diversity heuristic values obtained search information obtained different area search space DIDA introduces stronger diversity peeking physically jumping area 6 For example experiments 17pancake problem heuristic maximum value 14 difference observed 8 528 U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 64 The penalty jumping Usually depthﬁrst search algorithms avoid generating duplicate nodes disallowing operators shown irrelevant based previous sequence operators The simplest example disallowing inverse previous operator More sophisticated techniques enforce ordering operators disallowing redundant sequences Such mechanisms referred operator pruning paper Operator pruning signiﬁcantly reduce branching factor For example branching factor Rubiks cube root node 18 average branching factor root reduced operator pruning 1334 14 There operator pruning start state search history Let branching factor b Subsequent nodes normal search smaller branching factor b 1 operator pruning By contrast DIDA pays branchingfactor penalty jumping dual state As start state branching factor b subsequent nodes regular lower branching factor However branch search tree jump dual ﬁrst time dual state search history branching factor b On subsequent jumps branch history operator pruning In Algorithm 4 previous moves regular dual sides passed parameters allowing DIDA prune inverse previously applied operator given 2 reached DIDA jumps dual state Sd To illustrate consider Fig 14c DIDA consider operators start state S0 Moves 1 2 regular reaching S1 Here DIDA decides jump Sd 1 completely new state history Thus operator pruning possible operators considered DIDA makes moves 61 51 41 dual state Sd 2 S2 regular Because returning regular history previous moves known operator pruning expanding S2 For example previous operator operator 2 inverse 21 ignored To understand operator pruning applied S1 bears apparent relation S2 recall DIDA constructs ﬁnal solution path If path leading S2 goal ﬁrst operator path placed immediately operator leads S1 ﬁnal solution path Since path optimal possibly contain operator followed immediately inverse The reasoning justiﬁes use sophisticated operator pruning techniques In IDA operator pruning nodes root In DIDA ﬁrst time jump given branch history available operator pruning unavailable For example Rubiks cube performing ﬁrst jump branch DIDA 18 children consider opposed average 1334 seen IDA 1 boolean DDFSstate S previous_move pmr previous_dual_move pmd depth g bool side_bit List Pathint threshold let h maxhS hSd h g threshold return false S goal_state return true should_j umpS Sd S Sd swappmr pmd side_bit side_bit legal_move m 2 3 4 5 51 52 53 54 endif 6 61 62 63 631 632 633 634 64 7 endif endfor return false 1 continue m pmr generate child C applying m S DDFSC m pmd g 1 side_bit Path threshold true operator pruning side_bit REGULAR Path m Path Path Path m1 return true Algorithm 4 DDFS adds element list U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 529 To avoid penalty jumping degenerate jumping policy allows jump root node JOR If hroot hrootd search conducted regular conducted dual No jumps allowed JOR 7 Experimental results simple duality This section provides experimental results beneﬁt performing dual lookups dual search algorithm Pattern databases experimental domains represent stateofthe art heuristics 71 Rubiks cube Korf ﬁrst solved 3 3 3 Rubiks cube PDBs 14 As discussed cubies Rubiks cube divided corner cubies edge cubies As ﬁrst experiment test duality ideas 7edgecubies PDB built largest stored 1 GB memory There 510935040 possible permutations seven edge cubies At bits entry 255 MB needed PDB The heuristics set experiments based 7edges PDB Table 1 presents results set experiments The experiments 100 instances length cid3 14 The table columns follows Heuristic Which heuristic PDB lookups r stands regular state d dual state Similarly 4r 4d means took maximum 4 regular dual heuristics OPoperator pruning means operator leading nodes parent pruned means operators pruned Search Search algorithm IDA DIDA Policy The jumping policy DIDA Nodes Time Average number generated nodes average time needed solve problem 30 GHz Pentium 4 machine 2 GB memory Jumps Average number times DIDA jumped regular dual sides The ﬁrst line table shows results IDA regular PDB lookup These searches generated average 90 million nodes Intuitively think performing dual lookup produce results exact PDB queried Surprisingly line 2 shows dual heuristic number generated nodes decreases 8 million nodes improvement factor 11 The reason dramatic improvement follows While values PDB locally correlated dual lookup frequently looks jumps different areas PDB Thus general ﬂow search beneﬁts large diversity areas PDB bad area quickly escaped Since dual heuristic inconsistent BPMX Table 1 Rubiks cube 7edges PDB results 1 2 3 4 5 6 7 8 9 Heuristic r d maxr d maxr d maxr d maxr d maxr d max4r 4d max24r 24d OP Search IDA IDA IDA DIDA DIDA IDA DIDA IDA IDA Policy Nodes JIL JOR JIL 90930662 8315116 2997539 2697087 2464685 29583452 19022292 615563 362927 Time 2818 324 134 116 102 3027 2044 051 090 Jumps 15013 023 3627504 530 U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 Table 2 Rubiks cube results Heuristics max8 6 6 max8 6 6 6d 6d max8 7 7 7d 7d Nodes 352656042894 253863153493 54979821557 Time 102362 91295 44201 Memory 130757 130757 299757 used7 In line 3 maximum regular dual heuristics This reduced number generated nodes roughly 3 million improvement factor 30 benchmark line 1 Lines 45 shows results DIDA different jumping policies DIDA JIL line 4 yields modest improvement line 3 Applying JOR policy line 5 improves results modest The Jump value reveals 23 cases dual heuristic start state better search performed dual 77 cases ties better regular heuristic To better understand penalty incurred ﬁrst jump DIDA operator pruning disabled results IDA DIDA compared Results provided lines 67 Here operator leads nodes parent pruned In cases maximum PDB lookups regular dual states Disabling operator pruning increases search effort factor 10 compared line 3 operator pruning enabled Results setting DIDA JIL reduced number generated nodes compared IDA The improvement factor DIDA IDA signiﬁcant reported lines 4 5 penalty ﬁrst DIDA jump minor operator pruning disabled Due geometrical symmetries domain multiple possible regular dual lookups Many com binations geometrical reﬂected regular lookups geometrical reﬂected dual lookups tried Since DIDA produce signiﬁcant improvements domain IDA jumping The best results achieved reduced number nodes generated taking 24r 24d factor 250 time 4r 4d factor 55 All possible 7edgecubies PDB stored memory The results obtained set experiments yield following insights First dual lookups effective reduces search effort order magnitude Second results operator pruning important reduced search effort order magnitude Third shows domain penalty DIDA offsets beneﬁts DIDA improves IDA modest Korfs original 1997 Rubiks cube experiments 10 random instances repeated 14 Again DIDA produce signiﬁcant improvement domain IDA dual PDB lookups set experiments Korf PDBs domain PDB corner cubies PDBs sets edge cubies Since legal domain moves cubies way combine PDBs taking maximum Note corner cubies 8corner PDB Thus performing dual lookup particular PDB irrelevant Here entire space corner cubies database lookups result8 Results set 10 random instances 14 obtained provided Table 2 The results Korfs set 8 6 6 PDBs improved modest adding dual lookups 6edge PDBs 353 billion nodes 253 billion Increasing edges PDB seven cubies 8 7r 7r 7d 7d setting reduced search 54 billion nodesan improvement factor 64 Korfs initial setting The improvements adding dual lookups 6 7edges PDBs modest time 8corner PDB maximum value PDB larger contains cubies 6 7edge PDBs This seen following rates measured 10 million random instances For 8 6r 6r 6d 6d setting 8corner PDB maximum value 735 instances lookups 6edges cubies maximum 73 instances rest instances tie These numbers changed 408 213 respectively 8 7r 7r 7d 7d setting 7 In fact observed signiﬁcant 11fold improvement 23fold improvement activating BPMX See 721 deeper treatment BPMX 8 Since corner cubies switch locations corner cubies entire space corner cubies database heuristic returns optimal cost The regular state dual state share optimal distance goal state evaluations return exact value real cost U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 531 72 Pancake puzzle Unlike puzzles discussed paper pancake puzzle geometrical symmetries 2 This consequence special structure problem location different attributes operators applicable location location permuted Therefore dual heuristic important provides additional possibility obtaining heuristic free Table 3 presents results averaged 10 random instances 17pancake puzzle The heuristic PDB based rightmost tokens 10 11 16 gives slightly better average heuristic values PDB based tokens 0 1 6 Here phenomenon observed dual heuristic better regular heuristic improvement factor 238 terms generated nodes9 When taking maximum regular dual heuristic improvement obtained simple case regular heuristic factor 138 nodes generated factor 92 time The line table shows results DIDA DIDA JIL policy produces roughly 10fold performance improvement IDA 2478 million 260 million nodes heuris tic In domain obvious redundant operator sequences depthﬁrst search prune operators based previous operators Only trivial pruning parent possible making branching factor root N 2 When performing ﬁrst jump dual particular branch branching factor increases N 2 N 1 Note exact PDB total improvement DIDA simple case orders magnitude time solve problem reduced days minutes Table 4 compare results averaged 100 random instances pancake puzzle sizes 11 15 For lines 16pancake 17pancake problems demand days computations results 50 10 instances compared respectively The heuristic PDB based seven rightmost tokens The ﬁrst column indicates size pancake puzzle The second column indicates average optimal solution cost set random instances The following columns presents average number generated nodes different heuristics different search methods The table shows larger problem space bigger IDA search needed larger improvement methods duality Fig 15 shows improvement factor different variations basic regular lookup column 3 Table 4 The ﬁgure shows improvement factor DIDA steadily increases size problem For problem size 11 factor 59 An improvement 1314fold seen problems size 17 For smaller Table 3 17pancake puzzle results 10 random instances Heuristic r d maxr d maxr d Algorithm IDA IDA IDA DIDA JIL Nodes 342308368717 14387002121 2478269076 260506693 Time 284054 12485 3086 362 Table 4 Pancake puzzle results different sizes problems Size 11 12 13 14 15 16 17 Ave 983 1050 1188 1267 1378 1472 1560 IDA h r 16407 148380 4268700 66213088 864968140 18184871249 342308368717 IDA h d 867 6414 98605 2143328 38953014 608590928 14387002121 IDA h maxr d 404 2538 29423 474082 6259061 95124495 2478269076 DIDA JIL h maxr d 275 1597 15291 229348 2306745 18469496 260506693 9 Since dual heuristic inconsistent BPMX Again 238fold improvement activating BPMX 532 U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 Fig 15 Improvement IDA regular lookup Fig 16 General duality problems regular lookup 7token PDB accurate provides tighter bounds solution limiting opportunities large performance improvements When problem large PDB accurate enabling search heuristic methods ﬁnd large performance improvements Note variations better simple version regular lookup improvement systems increase dramatically DIDA 8 General duality The simple deﬁnition duality far assumes operator sequence applied given state S applied goal G This applies search spaces operators preconditions assumption 4 Section 41 In slidingtile puzzles example operators preconditions blank adjacent tile moves operator sequence applies S applicable G blank different locations S G A general deﬁnition duality allowing preconditions operators given Assumption 4 dropped assumptions 13 needed assumption 1 relaxed allow n number locations greater m number objects With general deﬁnition dual heuristic evaluations dual search possible wider range state spaces including slidingtile puzzles Blocks World Towers Hanoi Duality general deﬁnition The dual given state S goal state G deﬁned respect state X sequence operators applied state S applied state X vice versa If π locationbased permutation πS G Sd X dual S respect X deﬁned πX This idea illustrated Fig 16 The path transforms S G transforms X Sd X As special case U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 533 Fig 17 General duality Sd X πβS βπS let o object located p S let y location o G deﬁne πp y DualState S Goal G State X location p 1 11 12 13 14 2 3 endfor Sd πX X return Sd X Algorithm 5 Calculation general dual state S respect X X G possible operator sequence applicable S applicable G deﬁnition simple deﬁnition given earlier The 8puzzle state S goal state G Fig 17 applicable operators For example operator tile middle applicable S G A state X needs operator sequences applicable S applicable X This mapping β renames tiles transform S X For given S X state having blank position S Sd X derived ways applying π X shown Algorithm 5 renaming tiles G according β π shown Fig 17 example maps tile upper left location S X lower left location G Sd X respectively By contrast β renames object 6 S G object 1 X Sd X respectively By deﬁnition legal sequence operators produces Sd X applied X legally applied S produce G vice versa Because operator inverse cost duality provides alternative way estimate distance S G admissible estimate distance Sd X X admissible estimate distance S G If PDBs general duality suggests PDB PDBX X goal state addition usual PDB PDBG G goal Given state S addition standard heuristic value PDBGS heuristic value dual state computing π S looking PDBXπX It possible multiple states Xi playing role X deﬁnition In case state S dualit dual respect Xi allimportant property sequence operators applicable S applicable Xi vice versa A PDB PDBXi built Xi Xi goal Lookups dual state S PDBXi Xi dual S deﬁned For slidingtile puzzles deﬁne Xi state blank position build PDB Xi Then given state S blank position dual S respect Xi calculated value lookedup PDBXi For example 8puzzle different locations blank occupy Deﬁne different states X0 X8 Xi having blank position compute PDBs Xi Of course geometric symmetries reduce number distinct PDBs actually created stored For example 7tile PDBs needed cover possible blank locations 15puzzle 534 U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 81 Other domains To convey generality general duality brieﬂy applies additional domains Blocks World Towers Hanoi In Blocks World B objects blocks placed table blockThere block block towers formed heights blocks stacked other10 The size state space approximately pB B pB number ways partitioning integer B The standard Block World operators allow block picked hand holds pickedup block block block held table block Two states set operator sequences applied structure partition B way towers height 3 size B 3 In order state nontrivial dual need Xi different structure words need pB different Xi states This number grows fairly quickly B increases excessively large values B typically experiments For example B 12 blocks number structures p12 77 If practical considerations force 77 Xi PDBs computed duals exist states structure Xi s PDB built The Towers Hanoi Blocks World differences 1 limited number locations table called pegs typically peg identity 2 block called disc distinct size larger disc placed smaller The constraint causes number distinct structures explode exponentiallytwo states set operator sequences applied contain exactly towers discs means differ pegs towers General duality applies case beneﬁt 82 Dual search general case Suppose dual search proceeding regular G goal decides state S jump Sd dual S respect Xi Search proceeds Xi playing role goal respects In particular 1 Xi reached search ﬁnished ﬁnal solution path reconstructed 2 permutation π calculated Xi instead G The point important implication slidingtile puzzles dual state generated search goal Xi blank location 9 Experimental results slidingtile puzzles general duality General duality implemented 15puzzle 24puzzle In section results dual heuristics dual search algorithm given domains 91 15puzzle For 15puzzle 78 PDB partitioning 15 shown Fig 5 As explained Section 8 possible blank location unique PDB built able perform lookup dual state calculate dual heuristic However number unique PDBs built reduced Given location blank horizontal line symmetric vertical line middle puzzle divides regions locations One region A 8 locations occupied real tiles region 8 locations B occupied seven real tiles blank The 8tile group affected blank exactly 8 location exactly tiles regular 8tile PDB dual state This case 7tile PDB affected location blank However shown Fig 18 different unique blank locations 78 partitioning A unique 7tile PDB built 10 Note B different stacks B objects A location possible location stacks Of course locations But notionally number distinct locations OB2 U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 535 Fig 18 Four different dual 7tile pattern databases Table 5 Results 15puzzle 1 2 3 4 5 6 7 8 Heuristic Algorithm Jump Av H Nodes r d maxr r maxr d maxr d maxr d maxr r d d maxr r d d IDA IDA IDA IDA DIDA DIDA IDA DIDA One PDB lookup Two PDB lookups JIL J15 Four PDB lookups J15 4475 4439 4563 4440 4440 4440 4612 4612 136289 247299 36710 65349 51633 36937 18601 13687 Time 0081 0139 0034 0069 0066 0047 0022 0019 cases Any state S 15puzzle mapped cases order calculate relevant PDB dual state Sd The frame left Fig 18 indicates relevant PDB dual lookup possible blank location In locations PDBs given right label indicates PDB use horizontal partition left corresponds vertical partition The memory needed 519 KB 8tile PDB 575 KB 7tile PDB Thus total memory needs 8tile 4 7tile PDBs 749 KB The extra PDBs needed handle dual cases correctly represent small increase memory Table 5 presents results different heuristics averaged 1000 instances 15 The average solution set instances 5252 The ﬁrst column indicates heuristic r d representing reﬂected regular dual PDB lookups Line 1 presents results regular PDB line 2 presents results dual heuristic An interesting phenomenon unlike domains 15puzzle pure dual PDB lookup worse pure regular lookup generated twice nodes The reason location blank Note regular PDB lookup consults 8tile PDB 7tile PDB labeled Fig 18 dual state consult 7tile PDBs labeled b c d The current state S aims region B conﬁguration blank located corner goal state dual state Sd needs consider possibilities region B It turns getting blank corner harder task needs moves While average value entries PDB labeled Fig 18 2091 average values PDBs labeled b c d 2081 2031 2053 respectively Thus values obtained PDBs correspond b c d smaller obtained PDB Historically goal location blank corner However goal state set blank location 4 Fig 18c regular heuristic look weakest PDB dual heuristic consult PDBs Such experiments pure dual PDB lookup generated nearly 40 regular PDB 536 U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 Given PDB lookup performs lookup regular dual PDB state When lookups allowed combinations possible Line 3 Table 5 maximum regular reﬂected PDBs Note lines 1 3 results obtained 15 different faster hardware Line 3 presents best published results puzzle 15 Line 4 uses maximum regular dual heuristic For reason line 2 line 4 worse line 3 PDBs best DIDA experiments included jumping policies JIL J15 J15 works follows The slidingtile puzzle important attributes arise previous domains taken account DIDAs jumping policy First branching factor uniform It varies depending location blank different S Sd Second explained different PDBs based Xi having blank different position The Xi chosen maximally exploit geometrical symmetries puzzle 16 positions blank PDBs needed The average heuristic value PDBs different Note small difference average PDB value dramatic effect PDBs pruning power Because S Sd blank different location draw heuristic values different PDBs important jumping policy average value PDBs account J15 considers attributes It threepart decision process First effective branching factor regular dual states compared This considering blank location history previous moves choosing prefer state smaller effective branching factor11 Second tie quality average value relevant PDB considered Preference given PDB higher average The average values PDBs given Third tie JIL policy The results DIDA JIL J15 presented lines 5 6 DIDA J15 twice efﬁcient IDA maxr d line 4 However explained earlier dual heuristic inferior particular domain regular heuristic PDB higher average values Thus maxr d times slower benchmark results 15 line 3 Using DIDA J15 overcome problem DIDA J15 line 6 generated roughly number nodes benchmark results PDB lookups Finally lines 7 8 perform possible PDB lookups domain This achieved regular dual lookups reﬂections main diagonal Line 7 presents maximum PDB combinations Using lookups reduces number generated nodes factor eliminated execution time compared best results 15 line 3 Table 5 The time improvement smaller new setting PDB lookups performed opposed PDB lookups previous benchmark To best knowledge regulardual normalreﬂected PDB lookups gives best existing heuristic puzzle It important note dual lookups slidingtile puzzles great importance geometrical symmetry available stateoftheart additive heuristicthe reﬂection main diagonal Thus dual idea doubles number possible lookups achieved speedup factor previous benchmarks When performing possible lookups DIDA J15 result new stateoftheart solver The number nodes reduced 13687 average time problem 0019 Of historical note number generated nodes nearly 30000 times smaller IDA ﬁrst solved 15puzzle Manhattan distance 12 Note table constant time node signiﬁcantly increased moving IDA DIDA The reason time consuming stage algorithms overhead PDB lookups 11 The reliance J15 branching factor causes subtle problem Suppose start state S blank location 5 It branching factor dual Sd 5 calculated respect X5 branching factor 2 blank location goal state G upper lefthand corner Dual search J15 jump Sd 5 proceed searching X5 goal The states generated search branching factors 3 duals branching factor 4 They blank location current search goal X5 having history jump root state J15 jump To avoid problem jumps states blank interior locations moves start state permitted U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 537 slow calculations perform queries main memory This overhead depends number PDB lookups similar IDA DIDA The additional overhead DIDA activating jumping policy relatively small 92 24puzzle Similar experiments performed 24puzzle The original 6666 partitioning 15 Fig 5 needed storage 6tile PDBs 3 2 rectangles symmetric As additional PDBs needed handle blank Eight 6tile PDBs 3 2 rectangles duals seven 6tile PDBs irregular shape left corner Fig 5 They numbered 0 1 5 6 10 11 12 Fig 19 number reﬂecting location blank Xi deﬁned PDB Fig 19a indicates PDB possible position blank Fig 19b shows different 6666 additive PDB partitionings PDB12 PDB0 PDB 15 Fig 19c shows average heuristic value PDBs Each 6tile PDB needs 122 MB new needs times memory When DIDA JIL J24 heuristics J24 works exactly way J15 24puzzle In 15 50 random instances optimally solved This data set sorted increasing order optimal lutions Table 6 presents average results ﬁrst 25 random instances different variations Table A3 Appendix A gives results entire set 50 instance best variations DIDA The ﬁrst line presents benchmark results 15 maximum regular PDB r reﬂection main diagonal r taken The second line IDA regular dual PDB lookups Line 3 DIDA JIL Finally line 4 shows DIDA J24 outperforms benchmark results factor 53 Detailed results 50 instances 15 variations PDB lookups provided Appendix A The lines 5 6 present case possible PDB lookups IDA lookups improved benchmark results factor 32 DIDA lookups improved total improvement factor 110 benchmark Furthermore note DIDA lookups r d outperform IDA entire set lookups factor 165 Fig 19 24puzzle heuristic Table 6 DIDA results 24puzzle ﬁrst 25 random instances 1 2 3 4 5 6 Heuristic maxr r maxr d maxr d maxr d maxr r d d maxr r d d Search IDA IDA DIDA DIDA IDA DIDA Policy Nodes Jumps Two PDB lookups JIL J24 Four PDB lookups J24 43454810045 31103112895 16302942680 8248769713 13549943868 3948614947 176075343 23851828 13083286 538 U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 The versions PDB lookups ran 300000 nodes second versions 4 PDB lookups ran 220000 nodes second Thus observed domains improvement total running time little smaller 10 Conclusions future work Duality new form symmetry states permutation state spaces allows usage multiple heuristics given state DIDA novel search algorithm exploits symmetry DIDA switch state representations maximize overall quality heuristic values seen search The algorithm surprising properties including need search frontier data structure solution path construction disparate regions search space Using dual heuristic signiﬁcantly improves heuristic value Adding dual search algorithm provides additional performance gains order magnitude application domains stateoftheart heuristic search algorithm Future work continue following directions Table A1 DIDA results 24puzzle 50 random instances 1 3 5 Heuristic maxr r maxr d maxr r d d Search IDA DIDA DIDA Policy Nodes Jumps Two PDB lookups J24 360892479670 75201250617 147733547 Four PDB lookups J24 37674826649 78134424 Table A2 24puzzle ﬁrst 25 instances DIDA uses J24 jumping policy No 1 25 2 40 3 29 4 36 5 20 6 30 7 47 8 44 9 1 10 22 11 2 12 16 13 38 14 3 15 32 16 4 17 28 18 35 19 27 20 31 21 5 22 37 23 46 24 49 25 6 Average Sol 81 82 88 90 92 92 92 93 95 95 96 96 96 97 97 98 98 98 99 99 100 100 100 100 101 95 Benchmark r r 292174444 65099578 4787505637 2582008940 312016177684 1634941420 30443173162 867106238 2031102635 3592980531 211884984525 3803445934 38173507 21148144928 428222507 10991471966 2258006870 116131234743 53444360033 26200330686 2899007625 1496759944 65675717510 108197305702 103460814368 IDA r d 547754446 78265289 29093280876 3128723824 50287497984 1950647389 18915533169 373833955 815220874 4006328755 149827435325 1829307204 45976055 49550582547 1707750974 14523612651 2106454886 74794747604 34150080391 19627677414 3785640311 1471627382 57066411687 56056805705 201836625690 DIDA J24 r d DIDA J24 r r d d 152941190 13720424 2811214623 1209506402 29036511649 2484991641 6421296555 37432750 114270740 1762446935 22818488960 174895012 8435471 29121290662 1685362622 2480394914 543149059 6553916243 3447475095 20768799210 484549876 1563432726 32733564072 9106414744 30684741238 86623738 8027134 1052360568 569488356 4464625873 1225111000 4151834900 27828310 60208978 814538591 14893883061 125947856 5298259 9394905290 623772078 1500144838 360755098 3763906855 1999173109 14456575816 178355244 1014271808 18191427181 5362475537 14383834203 43454810045 31103112895 8248769713 3948614947 U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 539 Obtaining better understanding jumping policies Given application determin ing best policy Analysis duality concept generalized permutation state spaces encompass wider set application domains forms permutation problems general search problems Integrating idea duality search algorithms A 8 RBFS 13 breadthﬁrst heuristic search 23 Initial results DualA 15pancake puzzle reduce search time roughly 20 Acknowledgements This research supported Israel Science Foundation ISF grant number 72806 Ariel Felner Natural Sciences Engineering Research Council Canada NSERC Albertas Informatics Circle Research Excellence iCORE Appendix A Experimental results 24puzzle In section results entire set 50 random instances 24puzzle given They compared results 15IDA maxr r referred Benchmark following tables Table A1 summarizes results entire set 50 instances The best version outperforms benchmark order magnitude The 50 instances sorted increasing order length optimal solution In Tables A2 A3 instances given according order The number parenthesizes instance number given 15 The Sol column gives length optimal solution path The columns provide number generated nodes different algorithms The Benchmark column corresponds r r 15 The column IDAr d uses IDA takes maximum regular dual heuristic Finally columns present results obtained DIDA J24 jumping policy PDB lookups For Table A3 24puzzle rest 50 instances No 26 13 27 45 28 34 29 15 30 21 31 7 32 23 33 39 34 43 35 26 36 11 37 19 38 33 39 41 40 24 41 48 42 8 43 42 44 12 45 17 46 18 47 14 48 9 49 50 50 10 Average Sol 101 101 102 103 103 104 104 104 104 105 106 106 106 106 107 107 108 108 109 109 110 111 113 113 114 107 Benchmark r r 1959833487 79148491306 481039271661 173999717809 724024589335 106321592792 171498441076 161211472633 55147320204 12397787391 1654042891186 218284544233 1062250612558 26998190480 357290691483 555085543507 116202273788 245852754920 624413663951 367150048758 987725030433 1283051362385 1818005616606 4156099168506 1519052821943 678330149297 DIDA J24 r d DIDA J24 r r d d 2196890327 16455892507 59384485258 104581763680 47574279914 112115069816 25019468325 34094740377 19521199995 4710801259 223800028896 71328672853 697848426065 1831465730 58794690620 102741654326 46087884506 70605794609 33355872842 64989490579 560055473298 531467600978 36575158063 285616821863 343089661403 142153731524 1525086336 8903606545 33346319761 48205749584 23105133315 41489057096 15308110752 21449225377 12031249938 2293128380 81918451417 29200386532 410610357344 866811661 22991124359 45159149715 32266488302 32982573378 14264946735 33540174776 314071218585 220384669296 21812286743 180090018836 137210634028 71401038351 540 U Zahavi et al Artiﬁcial Intelligence 172 2008 514540 instances improved performance new methods Table A3 gives results DIDA J24 PDB lookups rest 50 cases References 1 JC Culberson J Schaeffer Pattern databases Computational Intelligence 14 3 1998 318334 2 H Dweighter Problem e2569 American Mathematical Monthly 82 1975 1010 3 S Edelkamp Planning pattern databases Proceedings 6th European Conference Planning ECP01 2001 pp 1334 4 A Felner Solving graphpartitioning problem heuristic search Annals Mathematics Artiﬁcial Intelligence 67 2006 1939 5 A Felner RE Korf S Hanan Additive pattern database heuristics Journal Artiﬁcial Intelligence Research JAIR 22 2004 279318 6 A Felner R Meshulam RC Holte RE Korf Compressing pattern databases Proceedings National Conference Artiﬁcial Intelligence AAAI04 July 2004 pp 638643 7 A Felner U Zahavi RC Holte J Schaeffer Dual lookups pattern databases Proceedings International Joint Conference Artiﬁcial Intelligence IJCAI05 2005 pp 103108 8 PE Hart NJ Nilsson B Raphael A formal basis heuristic determination minimum cost paths IEEE Transactions Systems Science Cybernetics SCC4 2 1968 100107 9 B Hnich B Smith T Walsh Dual modelling permutation injection problems Journal Artiﬁcial Intelligence Research 21 2004 357391 10 RC Holte J Newton A Felner R Meshulam D Furcy Multiple pattern databases ICAPS 2004 pp 122131 11 RC Holte MB Perez RM Zimmer AJ MacDonald Hierarchical A Searching abstraction hierarchies efﬁciently Proceedings National Conference Artiﬁcial Intelligence AAAI96 1996 pp 530535 12 RE Korf Depthﬁrst iterativedeepening An optimal admissible tree search Artiﬁcial Intelligence 27 1985 97109 13 RE Korf Linearspace bestﬁrst search Artiﬁcial Intelligence 62 1 1993 4178 14 RE Korf Finding optimal solutions Rubiks Cube pattern databases Proceedings National Conference Artiﬁcial Intelligence AAAI97 1997 pp 700705 15 RE Korf A Felner Disjoint pattern database heuristics Artiﬁcial Intelligence 134 2002 922 16 RE Korf M Reid S Edelkamp Time complexity IterativeDeepeningA Artiﬁcial Intelligence 129 12 2001 199218 17 RE Korf L Taylor Finding optimal solutions twentyfour puzzle Proceedings National Conference Artiﬁcial Intelligence AAAI96 1996 pp 12021207 18 M McNaughton P Lu J Schaeffer D Szafron Memory efﬁcient A heuristics multiple sequence alignment Proceedings National Conference Artiﬁcial Intelligence AAAI02 2002 pp 737743 19 D Ratner M Warmuth Finding shortest solution n n extension 15puzzle intractable Proceedings National Conference Artiﬁcial Intelligence AAAI86 Philadelphia PA 1986 pp 168172 20 U Zahavi A Felner RC Holte J Schaeffer Dual search permutation state spaces Proceedings National Conference Artiﬁcial Intelligence AAAI06 2006 pp 10761081 21 U Zahavi A Felner J Schaeffer N Sturtevant Inconsistent heuristics Proceedings National Conference Artiﬁcial Intelligence AAAI07 2007 pp 12111216 22 R Zhou E Hansen Spaceefﬁcient memorybased heuristics Proceedings National Conference Artiﬁcial Intelligence AAAI 07 2004 pp 677682 23 R Zhou E Hansen Breadthﬁrst heuristic search Artiﬁcial Intelligence 170 45 2006 385408