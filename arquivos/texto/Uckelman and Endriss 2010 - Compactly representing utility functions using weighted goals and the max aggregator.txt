Artiﬁcial Intelligence 174 2010 12221246 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Compactly representing utility functions weighted goals max aggregator Joel Uckelman 1 Ulle Endriss Institute Logic Language Computation University Amsterdam Netherlands r t c l e n f o b s t r c t Weighted propositional formulas model preferences combinatorial domains formula represents goal like satisﬁed weight formula represents importance goal question assess desirability given alternative aggregate weights goals satisﬁed alternative One options aggregate maximum weights satisﬁed goals This approach gives rise family preference representation languages range possible restrictions impose formulas weights We analyze properties languages establish results expressivity absolute relative succinctness We study computational complexity problem ﬁnding best worst alternative given set weighted goals ﬁnding alternative optimal group agents range different notions collective optimality proposed social choice theory welfare economics 2010 Elsevier BV All rights reserved Article history Received 11 January 2010 Received revised form 8 July 2010 Accepted 12 July 2010 Available online 17 July 2010 Keywords Preference representation Preference aggregation 1 Introduction 11 Motivation background Preference handling problem central importance Artiﬁcial Intelligence 3 For example recommender systems need elicit maintain representation users preferences multiagent systems modeled col lections decisiontheoretic agents guided preferences Possibly fundamental question context best represent preferences artiﬁcial agent human user Designing suitable languages representing preferences particularly challenging alternatives agent expresses pref erences combinatorial structure For example context combinatorial auctions 4 resource allocation problems 5 number bundles goods agent obtain exponential number goods discussion able express preferences exponentially large space alternatives compact manner crucial In paper study particular family languages representing cardinal preferences combinatorial domains Cartesian products binary domains Expressing cardinal preference means specifying utility valua tion function mapping alternative number reﬂecting degree preference alternative For comparison ordinal preferences relations pairs alternatives specifying preferable The use utility This paper based extends work presented 11th International Conference Principles Knowledge Representation Reasoning KR2008 Uckelman Endriss 2008 1 additionally presents material Uckelman 2009 2 Corresponding author Email addresses jduckelmanuvanl J Uckelman ulleendrissuvanl U Endriss 1 The work Joel Uckelman supported GLoRiClass fellowship funded European Commission Early Stage Research Training MonoHost Fellowship MESTCT2005020841 00043702 matter 2010 Elsevier BV All rights reserved doi101016jartint201007003 J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 1223 functions model preferences appropriate circumstances inappropriate In context com binatorial auctions instance modeling preferences utility functions appropriate auction bidder needs express prepared pay given bundle goods 4 From representational point view amounts specifying function space bundles numbers specifying cardinal preference structure The family preference representation languages study based weighted propositional formulas weighted goals For given set propositional variables alternatives correspond models propositional formulas A utility function mapping alternatives reals represented set weighted goals follows To compute utility given alternative X ﬁrst collect weights goals satisﬁed X aggregate weights obtain single number utility X One natural aggregation function cid2 case utility X sum weights goals satisﬁed X An option use max operator case utility X maximum weights goals satisﬁed X Using weighted formulas preference representation idea originated penalty logic 6 Penalty logic addresses problem inferences inconsistent knowledge base augmenting formulas knowledge base weights indicate cost falsifying associated formula inference problem reduces considering valid minimalcost consistent subsets given knowledge base Here costs summed That cost rejecting ϕ ψ sum weights Lafage Lang 7 generalize penalty logic permit aggregators sum introduce distancebased aggregator CosteMarquis et al 8 different approach Rather goalbases directly representing cardinal preferences use goalbases underpin ordinal preference relations Chevaleyre et al 9 shifted considering weights unsatisﬁed formulas penalties considering weights satisﬁed formulas utilities work contains initial results goalbases aggregated sum later work extends systematically cover naturallydeﬁned sumaggregated goalbase languages 10 Recently framework extended propositional logic description logic 1112 12 Our contribution As mentioned previous work concentrated weights unsatisﬁed goals sum languages weights aggregated cid2 In paper explore depth properties important family languages constructed framework max languages aggregation function max The properties study concern expressivity succinctness complexity max languages Expressivity We establish correspondence results classes utility functions represented natural representatives family max languages For instance logical connective allowed conjunction represent monotone utility functions Succinctness We rank important max languages terms compactly represent utility functions able represent Informally language L succinct Lcid3 increase size translating representations Lcid3 L polynomially bounded For instance conjunctions literals induce strictly succinct language conjunctions atoms positive weights permitted equally succinct language positive negative weights We provide results concerning bounds absolute succinct ness languages study languages unique multiple representations utility function Complexity We ﬁrst address natural problems arise context reasoning preferences single agent represented max language Here study computational complexity decision variants problem ﬁnding highest lowest utility agent experience It turns complexity strongly depends language chosen problems solved linear time coNPcomplete We study complexity collective utility maximization problem ﬁnding best partitioning set propositional variables group agents inducing model There number different ways aggregating utilities members group deﬁne best group We analyze complexity problem standard notions collective utility familiar social choice welfare economics literature utilitarian social welfare egalitarian social welfare Nash product 13 13 Related work Similar questions previously addressed preference representation languages CPnets 14 tool representing conditional ordinal preferences combinatorial domains utility functions focus paper As individual preference representation formalism wish aggregate individual preferences group preferences Various methods aggregating CPnets multiple agents tried Rossi et al 15 Lang Xia 16 analogous problem aggregating goalbases 1224 J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 multiple agents Section 8 The complexity answering ordering dominance queries studied CPnets literature 17 study questions goalbases ﬁnding utility given model agent computationally trivial Generalized additive GA decomposition way representing utility functions sums smaller utility functions domain proper subset domain larger utility function Originally proposed Fishburn 18 GAdecomposition recently Gonzales Perny 19 constructing GAInets Brafman et al 20 eliciting preferences GAdecomposable CP TCPnets Goalbase languages seen particular way GAdecomposing utility functions MCnets 21 method representing utilities accrue coalitions players coalitional games Ieong Shoham 21 consider expressive power succinctness MCnets complexity answering questions core coalitional game represented MCnets goalbase language Lcubes R cid2 language arbitrarilyweighted conjunctions literals aggregated summing weights satisﬁed formulas essentially notational variants applied different problems Elkind et al 22 extend MCnets permit arbitrary formulas prove succinctness complexity results languages Bidding languagescardinal preference representation languages designed expressing values bundles goods popular topic combinatorial auctions literature The expressivity succinctness complexity XOR OR bidding languages studied extensively 23 The XOR language equivalent language Lpcubes R max language positivelyweighted conjunctions atoms aggregated taking maximum weight satisﬁed formulas Boutilier Hoos 24 proposed logicbased bidding languages respects similar sum languages Boutilier 25 experimentally compared languages use affected runtime solving Winner Determination Problem auctions CosteMarquis et al 8 use goalbases induce kinds preference orderings prove expressivity results preorders expressible methods constructing preorders goalbases possible translate underlying goalbases language exponential blowup These results similar concept succinctness results view goalbases cardinally ordinally 14 Overview paper The remainder paper structured follows Basic deﬁnitions concerning framework representing utility functions weighted goals provided Section 2 Section 3 contains expressivity results Following general remarks succinctness Section 4 Section 5 presents results absolute succinctness uniqueness property Section 6 devoted issue relative succinctness Then complexity results reasoning preferences individual agents provided Section 7 results complexity collective utility maximization Section 8 Finally Section 9 concludes brief discussion remaining open problems area 2 Preliminaries In section present deﬁnitions notation paper basic framework representing utility functions First deﬁne structures need propositional logic Deﬁnition 1 Propositional formulas The set PS ﬁxed ﬁnite set propositional variables We write PSn indicate PS n Let LPS language propositional logic PS logical constants cid4 closed Boolean connectives The technical results apply formulas contain connectives We omit implica tion Boolean connective succinctly deﬁnable terms Equivalence XOR consider inclusion result succinct languages2 Deﬁnition 2 Propositional models A model set M PS The satisfaction relation cid10 models formulas deﬁned usual way propositional logic M cid10 cid4 M cid11cid10 M cid10 p iff p M M cid10 ϕ M cid10 ϕ ψ M cid10 ϕ ψ iff M cid11cid10 ϕ iff M cid10 ϕ M cid10 ψ iff M cid10 ϕ M cid10 ψ We names types propositional formulas 2 The XOR refer logical XOR distinct socalled XOR XOR bidding languages 23 valuative XOR 24 behave like max operate weights formulas J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 1225 Deﬁnition 3 Types formulas An atom member PS A literal atom negation A clause disjunction literals A cube conjunction literals A positive X satisﬁable formula type X contains negations A strictly positive X nontautologous positive X A k X X k occurrences atoms We abbreviate class general unrestricted formulas forms When discussing positive clauses positive cubes positive formulas frequently abbreviate pclauses pcubes pforms respectively Additionally strictly positive cubes strictly positive formulas spcubes spforms respectively The term spclauses redundant positive clause falsiﬁable Atoms 1spclauses 1spcubes 1spformulas 1pclauses 1pcubes 1pformulas literals 1clauses 1cubes 1formulas Clauses cubes formulas ωclauses ωcubes cid4 ωformulas respectively formulas ﬁnite length3 Note convention follows cid4 unique 0pcube unique 0clause The notation X cid4 indicates set formulas X cid4 pclauses cid4 set containing pclauses cid4 cid3 cid2 Deﬁnition 4 State formulas If X PS deﬁne X PS X X p p X Then formula corresponding model M cid2 M M state For example PS b c d state formula model b c d b b cid2 c d Notice M cid3 cid10 M M iff M M cid3 We interested utility functions combinatorial domains Cartesian product binary mains A generic representation kind domain set possible models propositional formulas ﬁxed language ﬁnite number propositional variables dimensionality combinatorial domain Utility functions typical method specifying cardinal preferences Deﬁnition 5 Utility functions A utility function mapping u 2 PS R Because utility functions consider sets domain propositional models sets utility functions thought mapping models values We note properties utility functions frequent reference Deﬁnition 6 Properties utility functions Suppose u utility function Then u normalized iff u 0 u nonnegative iff u X cid2 0 X u monotone iff u X cid2 uY X Y u modular iff u X Y u X uY u X Y X Y u unitdemand valuation iff u X maxa X ua u normalized u simple unitdemand valuation iff u X 1 X cid11 u normalized Deﬁnition 7 Weighted goals goalbases A weighted goal pair ϕ w ϕ formula language LPS w R A goalbase ﬁnite multiset G ϕi w ii weighted goals Goals typically required satisﬁable formulas We Section 3 languages studied restriction affect expressive power presence unsatisﬁable formulas affect computational complexity decision problems discussed Section 7 When particular goalbase consideration write wϕ mean weight formula ϕ goalbase ForG set formulas G Varϕ set propositional variables formula ϕ VarG ϕForG Varϕ A formula ϕ wϕ G active model M M cid10 ϕ ψ wψ G M cid10 ψ wψ cid3 wϕ cid4 Given goalbase model easily determine weighted formulas model makes true Now like combine weights satisﬁed formulas ﬁnd value model A function combines weights map multiset reals collected weights satisﬁed formulas real value model We functions aggregation functions aggregate weights satisﬁed formulas single value model4 3 Strictly speaking write ωcubes instead ωcubes abuse notation sake brevity formulas assumed ﬁnite length 4 The deﬁnition aggregation function given differs subtly given 71026 write aggregation function R R practice reader meant understand aggregation function operating multisets In particular authors stuff w We striven avoid ambiguity present work event F 2 write sums weights failed cases read sums weights sums multisets sets weights That w stuff intended 1 1 2 cid11 1 cid5 cid5 cid5 1226 J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 Deﬁnition 8 Generated utility functions A goalbase G aggregation function F NR R generate utility function uGF mapping model M PS uGF M F w ϕ w G M cid10 ϕ Because multisets unordered structures aggregation function necessarily associative commutative weights5 Natural aggregation functions consider include cid2 max In paper restrict aggregation function max maximum function When F max utility function generated goalbase G uGmaxM max ϕwG Mcid10ϕ w In words value model largest weight formula true model For example PS p q r goalbase G cid4 0 p q r 1 generates utility function u X cid17 min1 X This easy observing cid4 true formula model sets value uG cid4 p q r true model p q r higher weight sets value uG models Different aggregation functions produce dramatically different utility functions goalbase Eg G 1 PS uGmax simple unitdemand utility function u X 1 X cid11 0 uGcid2 simple additive utility function u X X We assume max useful include cid4 0 goalbase intended use max obtain utility functions ﬁnite values models Deﬁnition 9 Goalbase equivalence Two goalbases G G G F G iff deﬁne utility function That G F G cid3 cid3 iff uGF uGcid3F equivalent respect aggregation function F writ cid3 Goalbases provide framework deﬁning languages representing utility functions Any restriction impose goals want allow clauses formulas weights want allow negative weights choice aggregator F rise different language An interesting question natural goalbase languages deﬁned terms natural restrictions utility functions generate enjoy simple structural properties This case seen Section 3 Deﬁnition 10 Languages classes utility functions Let Φ LPS set formulas W R set weights F aggregation function Then LΦ W F set goalbases formed formulas Φ weights W aggregated F U Φ W F class utility functions generated goalbases belonging LΦ W F Regarding weights study restriction positive reals R general case R For complexity questions restrict attention rationals Q We restrict formulas structure according types formula deﬁned Deﬁnition 3 For example language Lcubes R max consists goalbases contain positivelyweighted cubes aggregated max Many examples languages seen Section 3 investigate language expressivity Finally note nonbinary domains Due applications mind goalbase languages resource alloca tion auctions votingall binary sense agent item candidate winner notwe restricted variables binary domains Moreover restriction binary domains natural working propositional logic Nonetheless possible simulate framework variables larger ﬁnite set values coding single manyvalued variables multiple binaryvalued ones 3 Expressivity An important feature preference representation language range preferences represented This available range known expressivity language section devoted determining expressivity max goalbase languages From point view theorist want know expressive goalbase languages sake expressivity results necessary proving succinctness results Section 6 As user goalbase languages knowing expressivity goalbase languages help choose language best suited application Can language choice represent functions belonging given class utility functions interests Not languages equally expressive applications require expressivity Excess expressivity undesirable highly expressive languages tend computationally demanding reason We interested correspondence results languages classes utility functions A correspondence result shows utility functions representable particular language exactly comprising particular class 5 If domain arbitrarylength tuples reals instead multisets reals R aggregators sensitive order formula weights aggregated Since goalbases unordered structures compelling reason concerned order weights aggregated limit domains aggregators multisets instead NR J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 1227 utility functions We provide correspondence results max languages partial correspondence results We begin establishing simple results equivalences languages allow narrow range languages considered remainder section We characterize expressivity important distinct languages 31 Goalbase equivalences We interested comparing languages generated different types goalbases particular generated following restrictions formulas literals cubes clauses general formulas conjunction disjunction positive formulas including negation Regarding weights want consider positive general weights This gives rise 4 2 2 16 different languages Here establish equivalences languages actually need consider subset languages deﬁned manner Furthermore interested monotone utility functions reduce range languages consider We ﬁrst disjunction expressively helpful connective max languages Theorem 11 G ϕ1 ϕn w max G ϕi w 1 cid3 cid3 n Proof Fix model X If wϕ1ϕn maximum wψ X cid10 ψ ψ wψ G Since wϕ1ϕn wψ wϕi In case G determines value left right goalbases wϕi If wϕ1ϕn maximum wψ X cid10 ψ ϕi X cid10 ϕi For ϕi wϕ1ϕn goalbase right left right maximum cid2 wϕi This tells max aggregator disjunctions main connectives contribute languages expres sivity In fact formula equivalent representation disjunctive normal form tells disjunction increase expressive power max language In particular Theorem 11 following equivalences languages Corollary 12 Fix W R Then 1 U pclauses W max U atoms W max 2 U clauses W max U literals W max 3 U pforms W max U pcubes W max 4 U forms W max U cubes W max Proof For U forms W max U cubes W max Suppose ϕ w G Without loss generality assume ϕ ψ1 ψn DNF By Theorem 11 replace ψ1 ψn w ψ1 w ψn w preserve goalbase equivalence Repeating original formula G converts G language Lcubes W max ψi cube weights left unchanged We use argument cases noting transformation reduces positive formula DNF set positive cubes clause set literals positive clause set atoms cid2 The true sum languages Eg summation clauses expressive literals For W R clauses express utility functions literals express modular functions 10 Corollary 38 For equivalences Corollary 12 set weights W violates summation Recall utility function u called monotone M M cid3 Monotonicity reasonable assump tion applications particular propositional variables interpreted goods Next negation helpful operation case interested modeling monotone functions implies uM cid3 uM cid3 set positive literals X set negative literals atom appears If Theorem 13 Fix G Let X uG X X wmax monotone cid2 cid6cid7cid8 cid9cid10 G X X w max G cid6cid7cid8 cid9cid10 X w Proof There cases consider models supersets X models Write u uG X X wmax In models M X cid2 u X model M value M w cid2 w u monotone Therefore substituting M cid10 cid2 X cid2 w X It case uM cid2 w w change value X X cid2 1228 J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 In models M cid2 X cid2 w cid2 X function X X false active Thus substituting w change value M inactive formulas affect value utility X X cid2 X cid2 Therefore models M uG cid2 X X wmaxM uG cid2 X wmaxM cid2 The following result shows reduce range languages consider limit cid2 cid4 monotone utility functions It follows immediately Theorem 13 Corollary 12 Recall Corollary 14 Let Mono class monotone utility functions Fix W R Then 1 U clauses W max Mono U atoms cid4 W max Mono 2 U forms W max Mono U pcubes W max Mono 32 Correspondences Corollary 12 tells interesting languages expressivitywise based cubes positive cubes literals atoms We prove cubes expressively complete range utility functions positive cubes correspond class monotone functions Theorem 15 U cubes R max class utility functions Proof Given utility function u deﬁne cid6cid7cid8 cid9 cid11 G X X uX cid11 X PS cid10 Since formulas state formulas mutually exclusive exactly weight active model u X uG X cid2 Theorem 16 U pcubes R max class monotone utility functions Proof Suppose G U pcubes R max uG monotone So models M M uG M Then ϕ uG M G active M M cid10 ϕ M M cid2 cid3 M ϕ cid10 Therefore ϕ positive formula contradicts hypothesis ϕ pcube cid3 uG M cid3 M cid3 cid11cid10 ϕ Since M cid3 If u monotone let G X u X X PS Note Y X uY w u X follows directly monotonicity u In model X uG X maxw cid2 Y Y X w cid2 cid2 Y X Hence uG X u X cid2 cid3 w cid2 X Theorem 17 U atoms R max class unitdemand utility functions Proof Suppose u unitdemand valuation deﬁnition means u X maxa X ua Construct G U atoms R max G w PS ua w Then uX max X u max awG w uGmaxX cid12 cid13 Conversely suppose G U atoms R max note series equivalences holds cid2 We aware property utility functions referred literature characterize U literals R max The desired property generalization unitdemand valuation allows specify value receiving particular item By restricting set weights W capture classes utility functions particular range For stance class U pcubes R max class nonnegative monotone functions This class known equal U pforms R cid2 10 Corollary 3126 This case syntactically simple language expressive max sum On hand simple classes utility functions hard capture structurally simple languages cid3 Modular functions nicely captured U literals R cid2 10 Corollary 38 However natural max aggregation For instance recall utility function u called modular iff uM M M M cid3 uM uM cid3 uM M cid3 2 PS 6 To precise U pcubes R max U pforms R cid2 total functions Because max languages express partially deﬁned functions returning models sum languages expand consideration partiallydeﬁned utility functions U pcubes R max U pforms R cid2 J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 1229 Fig 1 Summary expressivity results restriction formulas allow characterize modular functions max aggregation On contrary max languages considered Lcubes R max express modular functions language powerful actually express utility functions We use fact Lkpcubes R max misses modular utility functions k PS ex pressivity Lkpcubes W max Lkcubes W max strictly increases k Theorem 18 For k j 1 U kpcubes W max U jpcubes W max 2 U kcubes W max U jcubes W max follows inclusion For strict Lk 1pcubes W max Proof 1 The nonstrict U kpcubes W max nonempty includes family modular utility functions Suppose u mod ular nonnegative k 1 singleton models p1 pk1 nonzero value Then G Lkpcubes W max up1 pk1 uG p1 pk1 This case max ag gregator uG p1 pk1 necessarily weight kpcube assumption X p1 pk1 u X up1 pk1 However u gives exactly k 1 singleton models nonzero value u representable Lk 1pcubes W max goalbase cid9 cid11 cid6cid7cid8 X uX cid11 X PS X cid3 k 1 cid10 2 The modular utility functions missing Lkpcubes W max missing Lkcubes W max fact addition negation language helpful representing monotone utility functions Theorem 13 cid2 Our correspondence results summarized Fig 1 In ﬁgure node represents language examined arrow node indicates tail language included head language Within node expressivity language given according key ω ωadditive general nonnegative general unitdemand m monotone u unitdemand proper subset Where indicated language represents proper subset class utility functions given properties In cases language represents exactly class utility functions given properties The xaxis increasing 1230 J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 ϕ wϕ G ψ wψ G wϕ cid2 wψ cid10 ϕ ψ G G ϕ wϕ end end end end Fig 2 An algorithm removing superﬂuous formulas goalbase G right cubes axis allowable cubes grow length 1 ω yaxis decreasing page positivity axis steps positive general Each language lower graph sublanguage corresponding language general weights upper graph omitted arrows clarity Note languages appear ﬁgure expressively equivalent language appear For max languages fact expressed Corollary 12 disjunction contribute expressivity max languages 4 Succinctness Terminological interlude An important criterion selecting language application mentioned previously size representations utility functions language Recall seek avoid explicit representations utility functions In sections following present absolute comparative notions succinct ness precise claims eﬃciency goalbase languages Before require terminology deﬁnitions common types succinctness For max languages weighted goals goalbase contribute utility alternative Recall formula ϕ wϕ G active model M M cid10 ϕ ψ wψ G M cid10 ψ wψ cid3 wϕ Goal bases contain formulas fail contribute value goalbase model We formulas superﬂuous Equivalence preserved superﬂuous formulas removed goalbase time If ϕ w G superﬂuous formula G G ϕ w However removal superﬂuous formulas simultaneously necessarily equivalencepreserving formulas superﬂuous reevaluated single formula removed goalbase For example formulas 1 1 superﬂuous max removing produces goalbase equivalent original For max languages contradictions superﬂuous weighted formula formulas zero weight max goalbase superﬂuous Fact 19 Fix ϕ wϕ G aggregator max Then ϕ wϕ superﬂuous model M ϕ wϕ active set ψ wψ G M cid10 ψ wψ maximal singleton Since superﬂuous formulas useless removed harm We remove superﬂuous formulas G Lforms R max Fig 2 Two aspects algorithm signiﬁcant First remove superﬂuous formulas time Second algorithm eﬃcient requires quadratic number calls unsat oracle like better coNP algorithm In previous section saw max languages expressively interesting based cubes This fact greatly reduces complexity deciding formula superﬂuous deciding cube implies polynomial proof Theorem 60 algorithm Next note useful fact relating superﬂuity activity Fact 20 Under max aggregator G contains superﬂuous formulas ϕ w G model uniquely active Some goalbase languages unique way expressing given utility function allow alter native representations Here notion uniqueness precise Deﬁnition 21 Unique representations A utility function u represented language L exists goalbase G L u uG A utility function u uniquely represented modulo formula equivalence language L given set formulas Φ containing representative formula formula equivalence class L unique goalbase G ForG Φ uG u G contains superﬂuous formulas A language L said unique representations u represented L uniquely represented Any language unique representations thought minimal sense restriction permissible weighted formulas lead reduction expressivity Effectively means set representatives formula equivalence classes forms minimal basis vector space goalbases live J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 1231 Deﬁnition 22 Formula length goalbase size The length formula ϕ number occurrences atoms contains The size weighted goal ϕ w length ϕ plus number bits needed store w cid24log wcid25 bits The size goalbase G written sizeG sum sizes weighted goals G Observe size goalbase differ cardinality If G b 1 sizeG 2 3 neglecting bit storing weight G 1 Deﬁnition 23 A goalbase G LΦ W F minimal G cid3 LΦ W F G cid3 F G sizeG cid3 sizeG cid3 The diﬃculty recognizing G minimal ﬁnding G minimal representative utility function u strongly dependent L u In general case formulas minimal goalbase pairwise nonequivalent suﬃcient condition minimality For languages Latoms R max classes utility functions modular detect minimality generate minimal representations easily richer languages obvious unknown For max languages minimal goalbase formula implied formula smaller equal weight sum languages formulas minimal goalbase pairwise nonequivalent 5 Absolute succinctness uniqueness In section ﬁnd absolute bounds sizes goalbases expressive useful max languages Lpcubes R max Lcubes R max The bounds derive imply bounds sublanguages cluding max languages consider paper For Lpcubes R max sublanguages calculate exact sizes goalbases Lcubes R max upper lower bounds tightthough sublanguages possibility tighter bounds Along way prove Lpcubes R max unique representations The range utility function u ran uthat set values onstrongly inﬂuences size repre sentations utility function max language Theorem 24 For goalbase G G cid2 ran uGmax Proof By deﬁnition uGmax X maxwϕ X cid10 ϕ model X wϕ u X cid2 While size range utility function serves lower bound size representation max language relationship sum languages Eg G ai 2i ai PS uGcid2 large range value 0 2 PS 1 despite G small PS atoms polynomial However converse hold By Theorem 24 Gn polynomial ran uGn cid15 Let cid14cid7cid8 Gn X 1 cid9 cid11 cid11 X n 2 cid12 Here ran uGn 2 Gn n n2 cid16 cid17 cid4 0 cid13 1 superpolynomial Gn minimal Lpcubes R max There clear connection superﬂuity goalbase minimality G minimal goalbase utility function u U Φ W max G contains superﬂuous formulas However converse hold Lforms R max p 1 p 1 cid4 1 represent utility function u X 1 formula larger goalbase superﬂuous Recall Deﬁnition 21 language unique representations meaning suﬃciently restrictive exactly minimal representation representable utility function Several sum languages unique representations discussed 2 Section 342 10 Section 32 This occurs max language Theorem 25 Lpcubes R max unique representations Proof Fix u U pcubes R max Let G 0 While uG max cid11 u Choose model X uG max X cid11 u X By mean X minimal Let G i1 G X u X Call G G algorithm terminates An example run algorithm appears proof cid2 Correctness uGmax u iteration ends model correct previous iteration X disturb value model Y X X ﬁnitely models Setting weight X true prevent correctly setting value model Z X subsequent model iterations Theorem 16 u monotone Note order choice cubes size makes difference outcome cid2 cid2 cid2 Minimality For model X cid2 Y X Y uY dominates X receives weight If X receives weight model X u X A formula ψ wψ G dominates ϕ wϕ G ϕ cid10 ψ cid2 cid2 1232 J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 cid2 wϕ wψ If ψ wψ exists ϕ wϕ dominated Dominated formulas superﬂuous Furthermore model Z X X cid10 X sole way uGmax X u X If hand algorithm produces G X receives weight step construction uG max X correct reached model X If set weight X superﬂuous G minimal In summary Any smaller G incorrect value model different correct G necessarily contain superﬂuous formula cid2 Z Hence algorithm assigns weight cid2 cid2 cid2 We example run algorithm proof Given utility function u 0 cid12 cid13 u 1 cid12 u cid12 cid13 b cid13 c 0 2 cid12 u cid12 cid13 b cid13 c 2 2 cid12 u cid12 cid13 3 cid13 b c b c 10 u u algorithm constructs corresponding goalbase G follows G 0 deﬁnition uG 0max cid11 u 0 unique smallest incorrect model let G 1 G 0 cid4 0 Now c models incorrect uG 1max choose correct ﬁrst Recall order models size corrected affect result Let G 2 G 1 1 Continuing fashion correct models c b b c b c u G 0 G 1 G 0 cid16 cid17 cid4 0 G 2 G 1 G 3 G 2 cid16 cid16 cid17 1 cid17 c 2 G 4 G 3 G 5 G 4 cid16 cid16 cid17 b 2 cid17 b c 3 G 6 G 5 cid16 cid17 b c 10 After constructing G 6 incorrect models uG 6max X u X X PS G G 6 unique representation u Lpcubes R max Note algorithm construct minimal representation representable utility func tion Lpcubes W max eﬃcient algorithm ﬁnding representations requires check exponentially models order set weights Next derive upper lower bounds size representations Lcubes W max ﬁrst prove technical lemmas need For remainder section assume uGmax total First recall active formulas maxaggregated goalbases weight equal value model true Lemma 26 Fix goalbase G Lcubes W max ϕ w G If model X extension Y X uGmaxY uGmax X ϕ w active X ϕ positive cube Proof Suppose Let ϕ w X cid10 ϕ uGmax X w ϕ pcube uGmaxY uGmax X Then Y X follows Y cid10 ϕ ϕ monotone formula So uGmaxY cid2 w uGmax X contrary hypothesis cid2 In words If cube active model decline value extended negative literal cube Here deﬁne X notation denoting set extensions X remainder section Deﬁnition 27 Upsets If X model X Y X Y PS The set models 2 PS thought Boolean lattice X sublattice rooted X Alternatively X thought ways extending X Lemma 28 Suppose w minimum value model X Let ϕ1 w ϕk w G Lcubes W max formulas true model X false outside X weight w Let G X w Then cid3 G ϕi w1cid2icid2k cid2 cid3 max G 1 G 2 sizeG cid3 cid3 sizeG cid2 Proof For 1 changes G G values The formula disturbs models X remaining models X w minimal Every ϕi cid10 models ϕi active X longer ϕ1 ϕk cid2 X true exactly X disturbs models outside X Adding result models disturbed original X w X w inactive Y uY w provides correct value X M cid10 ϕi M cid10 X covers X shortest formula true X Each ϕi true cid5 X strictly larger k 1 cid2 k X sizeϕi cid2 size X i1 sizeϕi cid2 size For 2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid3 J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 1233 This lemma permits reduce iteratively goalbase Lcubes W max Let G G 0 Apply reduction smallest sublattice X G applied let result G i1 Starting smallest sublattice means starting PS root working way downwards At stage reach ﬁxed pointthat G Gwhere applications reduction effect The upper bound reaching ﬁxed point happens 2 require happens ﬁnitely applications reduction Let G cid3 G G pcubesminimal PS cid3 Since reduction sizeincreasing use observe useful fact formulas minimal goalbases Lcubes W max Lemma 29 For G Lcubes W max minimal G uY w Y X cid3 max G cid2 X w G cid3 iff w min Z X uZ cid3cid3 max G G cid3cid3 minimal Let G cid3 cid3cid3 Proof Suppose G G minimal G cid3 Since reduction equivalencepreserving sizereducing G smaller sizeG cid3 cid2 cid2 cid3 sizeG cid3cid3 G cid3 cid3 max G minimal cid3cid3 result exhaustively applying reduction Lemma 28 sizeG cid3cid3 Since G cid3 cid3 sizeG cid3cid3 X w G Suppose cid2 cid2 X positive cube true exactly X If model Y X uY cid2 w reduction Y w instead case uY w Y X For eliminated condition suppose model Z X uZ w Since Z cid10 X max aggregator follows uZ cid2 w contradiction X w eliminated reduction Since X w replaced Then Suppose w min Z X uZ uY w Y X Since w minimal model value X follows model Z X uZ w In order uZ w need formula ϕ w G Z cid10 ϕ Because uY w Y X case Y cid11cid10 ϕ Y X The formula meets requirements survived reduction X w longer formula replaced X w shorter formula true model Y X fail true Z cid2 cid2 cid2 cid2 cid3 cid2 Note w necessarily equal u X fact uG nonmonotone w frequently u X For example cid14 uX 2 X 1 PS p q goalbase cid4 1 p q 2 represents u language Lcubes R max pcubes minimal minimal weight 1 equal u 2 Lemma 29 crucial bounds derive tells exactly positive cubes ﬁnd minimal goalbase pcubesminimal Furthermore Lemma 29 following special case Lemma 30 For G Lcubes W max minimal G cid3 max G cid4 min X2PS u X G cid3 Proof min X2PS u X min Z uZ proper subsets cid2 It case G cid3 results reduction discussion uniquely minimal Eg cid14 uX 1 X 0 represented cid4 0 1 0 1 size Now attempt calculate bounds sizeG G Lcubes W max Lemma 31 Let G Lcubes W max minimal Let G G set pcubes G Then cid12 size G cid13 cid18cid6 max cid12 1 X cid13 cid11 cid11 Y X st uGmaxY cid2 min Z X cid10 uGmaxZ Proof By Lemma 29 loss generality assume cid6cid7cid8 cid9 cid11 G cid11 Y X st uY cid2 min Z X cid10 uZ X w cid18cid6 Therefore cid12 size G cid13 cid12 1 X cid13 cid11 cid11 Y X st uGmaxY cid2 min Z X cid10 uGmaxZ max 1234 J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 Note max1 X instead simply X fact 0 size cid2 sizecid4 1 cid2 Using result Section 3 derive exact size minimal G monotone portion Lcubes W max Theorem 32 If G Lcubes W max G minimal uGmax monotone sizeG cid18cid16 cid12 1 X max cid13 cid11 cid17 cid11 Y X st uGmaxY cid2 uGmaxX Proof Since uGmax monotone know Theorem 13 removal negative literals equivalencepreserving Since G minimal follows negative literals gone formula G positive cube Hence G G Lemma 31 cid18cid6 sizeG max cid12 1 X cid13 cid11 cid11 Y X st uGmaxY cid2 min Z X cid10 uGmaxZ Finally notice uGmax monotone min Z X uGmaxZ uGmax X permits simplify condi tion cid2 Now turn case uGmax nonmonotone For minimal G know Lemma 31 precise subset G containing negative positive subset G remains derive bounds G size G literals First derive bounds size G Lemma 33 Let G Lcubes W max minimal Let G cid11 cid11 uGmaxX uGmax X p p PS cid11 cid16 cid11 cid13cid17cid11 cid12 cid11 cid3 size cid12 set cubes G containing negative literals Then cid10cid11 cid11 cid11 XY X st uY cid2 min Z X cid3 PS uZ cid11 cid11 cid11 cid6 G cid13 Proof By Lemma 26 models X X p uGmax X p uGmax X formula ϕ w active model X contains p These formulas comprise G The best case p appears G cid2 exactly gives lower bound The worst case X X cover pair model X X p decline value write state formula state formula length PS cid2 Now pieces necessary exhibiting upper lower bounds size goalbases Lcubes W max represent nonmonotone utility functions Theorem 34 If G Lcubes W max G minimal uGmax nonmonotone sizeG cid2 cid18cid6 cid12 cid13 cid11 cid11 Y X st uGmaxY cid2 min Z X cid13cid17cid11 cid12 cid11 1 X cid11 cid11 uGmaxX uGmax X max cid11 cid16 cid11 PS cid10 uGmaxZ Proof Recall G G cid2 size G G Lemma 31 gives exact size G Lemma 33 gives lower bound Theorem 35 If G Lcubes W max G minimal uGmax nonmonotone sizeG cid3 cid18cid6 max PS cid11 cid11 cid11 cid12 cid13 cid11 cid11 Y X st uGmaxY cid2 min Z X 1 X cid6 cid11 cid11 Y X st uGmaxY cid2 min Z X X cid10 uGmaxZ cid10cid11 cid11 cid11 uGmaxZ Proof Recall G G cid2 size G G Lemma 31 gives exact size G Lemma 33 gives upper bound Note upper lower bounds given tight general bound example goalbase bounds tight For upper bound consider utility function uX X mod 2 J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 1235 parity function PS When PS b c goalbase cid16 cid17 cid4 0 b c 1 b c 1 b c 1 b c 1 minimal u X The lower bound 7 upper bound 13 actual size 13 For lower bound consider utility function cid14 1 X 0 uX goalbase cid4 0 1 minimal PS b c In case actual size lower bound 2 upper bound 13 Finally utility function u X 3 X represented minimally PS b c goalbase cid4 0 1 b 1 c 1 b c 2 b c 2 b c 2 b c 3 size 16 hits lower upper bound 4 22 respectively Clearly bounds reﬁned analyzing composition G nonmonotone utility functions present exactly differences exampleswhat causes hit lower bound hit upper bound hit neitheris apparent Furthermore bounds easy compute additional insight structure functions use We leave issues future work 6 Relative succinctness Frequently language contains shorter representations utility functions language Here deﬁnition relative succinctness 10 similar given 827 notion precise Because wish compare languages differ expressive power deﬁne succinctness expressive overlap languages compared This leads counterintuitive results languages little expressive overlap makes comparative succinctness relation intransitive permits comparisons expressive overlap substantial total Deﬁnition 36 Relative succinctness Let LΦ W F LΨ W tions member expressible languages Then LΦ W F cid28U LΨ W f LΦ W F LΨ W size f G cid3 psizeG cid3 goalbase languages U class utility func cid3 iff exists function cid3 F cid3 polynomial p G LΦ W F uGF U uGF u f GF cid3 cid3 F cid3 F Lcid3 Read L cid28U Lcid3 write L U Lcid3 succinct L class U When Lcid3 strictly succinct Lthat case representations polynomially worse case superpolynomially better Lcid3 nonstrict succinctness direction incomparability write L U Lcid3 Whenever succinctness relation appears cid3 Lcid3 unsubscripted explicit class comparison implicitly U uGF G L uGcid3F cid3 G expressive intersection L Lcid3 Later Section 62 illustrate circumstances explicit class comparison important When nonstrict succinctness directions write L U Lcid3 Finding succinctness relation pairs goalbase languages trivial language pair sublanguage languages expressive overlap These cases dismissed argument Recall Deﬁnition 21 goalbase language unique representations If utility function representable language exactly representation language If L unique representations L cid3 Lcid3 true L cid3 Lcid3 follows Proof strategy We present family utility functions U construct smallish necessarily optimal repre u U Then construct representation G u L u U G u sentation G cid3 u Because know L unique representations know exponentially larger corresponding G ﬁnd smaller representation u L shown L cid3 Lcid3 cid2 Lcid3 cid3 u This handy proof strategy shall use proofs Theorems 42 50 51 Often consider families utility functions unnN n PS n Suppose corresponding family goalbases GnnN uGn Unless number bits required represent weights Gn grows superexponentially n size contributed weights safely ignored considering 1236 J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 sizeGn grows n Every family utility functions considered weights independent n disregard size weights succinctness results Superexponential growth weights affects languages equally Here state basic properties succinctness relation use frequently proofs reference Fact 37 For languages L1 L2 L3 1 If L1 L2 L1 cid28 L2 2 If L1 cid28 L2 L3 L1 L3 cid28 L2 3 If L1 L2 L3 L1 L2 cid28 L3 L1 L3 Note Fact 372 useful contrapositively deriving cid4 results superlanguages For Fact 373 inadequate require L1 cid28 L2 L3 instead happen L1 small represent utility functions cause L2 L3 For certain languages limited length formulas appear minimal goalbases case need distinguish growth sizeG growth G Lemma 38 Let L goalbase language For n N let ϕn longest formula L n variables shorter equivalent Then polynomial p sizeϕn O pn follows families minimal goalbases GnnN L sizeGn polynomial n iff Gn polynomial n Proof This direction immediate impossible form exponentially formulas polynomiallymany atom instances Suppose Gn pn polynomial The longest formula ϕn L n variables sizeϕn qn polynomial q The worst case pn formulas Gn size qn total size pn qn polynomial n cid2 In particular means sizeG G interchangeable terms growth PS languages Lcubes W F Lclauses W F necessarily languages Lforms W F We use lemma implicitly relative succinctness results Now derive simple succinctness result applies languages permit formulas ﬁxed ﬁnite length Theorem 39 For ﬁxed k N arbitrary set formulas Ψ arbitrary sets weights W W LΦ W F cid31 LΨ W cid3 F cid3 aggregator F If Φ kforms Proof There O nk formulas length k utility function u representable LΦ W F representation polynomially larger best Lforms R F Hence LΦ W F cid31 Lforms R F Furthermore Lforms R F LΨ W cid3 F Fact 372 LΦ W F cid31 LΨ W cid3 F cid2 As consequence languages boundedlength formulas aggregator equally succinct expressive intersection Put way interesting questions involving relative succinctness pairs languages impose ﬁxed bound formula length When comparing succinctness max languages notice available weights play role cid3 max languages comparison utility function u representable come If LΦ W max LΨ W cid3 languages ran u W W Due weighted formula ϕ w w W W superﬂuous occurs representation u language Since minimal representations relevant succinctness disregard representations u use weights outside W W cid3 cid3 Fact 40 For succinctness relations cid28 LΦ W max LΨ W cid3 max LΦ W W cid3 max LΨ W W cid3 max 61 Succinctness max languages Next pcubes cubes languages equally succinct max aggregator J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 1237 Theorem 41 For j k N ω W W cid3 R 1 Ljpcubes W max Lkpcubes W 2 Ljpcubes W max Lkcubes W 3 Ljcubes W max Lkcubes W cid3 max cid3 max cid3 max cid3 max By Fact 40 assume loss generality W W j k N cases follow immediately Theorem 39 We proof Proof When j k ω ﬁrst cases trivialize remains Lpcubes W max Lcubes W Lpcubes W max expresses monotone utility functions Theorem 13 ensures representation containing negative literals reduced shorter equivalent simply deleting negative literals result deletion Lpcubes W max cid3 max Hence minimal representations u representable Lpcubes W max Lcubes W proves Lpcubes W max Lcubes W cid3 max cid2 cid3 Recall Theorem 11 shows disjunctions main connectives affect succinctness translation required eliminate disjunction affect size goalbase However necessarily true disjunctions occur scope connectives Therefore analysis expressivity max languages Section 3 safely ignore disjunction succinctness result demonstrates Theorem 42 Lpcubes R max Lpforms R max Proof We Lpcubes R max cid28 Lpforms R max pcube positive formula For strict suc cinctness The family utility functions represented cid13cid17 cid16cid12 p1 p2 p3 p4 pn1 pn 1 Lpforms R max grows linearly n The family represented Lpcubes R max cid26cid27 n2cid8 k1 pik 1 cid28 cid11 cid11 cid11 cid11 i1 in2 1 2 3 4 n 1 n cid29 size 2n1 n By Theorem 25 Lpcubes R max unique representations establishes minimality representation cid2 More generally argument shows intersecting sets weights W W Lpcubes W max Lpforms W use formula weights instead 1 proofand Lpcubes W max Lforms W max Lcubes W max Lpforms W max virtue Theorem 13 cid3 maxso long w W W cid3 cid3 When dealing negationcontaining goalbases monotone utility functions wish nonpositive formulas standard form order simplify working Negation normal form way A formula ϕ negation normal form NNF occurrences negation apply atoms Any formula rewritten equivalent formula NNF increase size recursive application De Morgans Laws elimination double negation Before proceeding deﬁne notion uniform substitution formulas goalbases Deﬁnition 43 Uniform substitution If ϕ ψ1 ψk formulas p1 pk PS ϕψ1p1 ψkpk result simultaneously substituting ψi occurrence pi ϕ If G goalbase Gψ1p1 ψkpk result applying substitution ϕ w G In following abuse notation writing ϕcid4p perspicuous ϕp Once formulas monotone max goalbase translated NNF apply following equivalence order remove negative literals altogether Lemma 44 If uGmax monotone formula G NNF Gcid4p1 cid4pn max G Proof To Gcid4p1 cid4pn max G ϕcid4p w max G repeat process formula p PS suﬃces single ϕ w G G ϕ w Fix ϕ wϕ G p subformula Suppose model M p M M cid10 ϕ M p cid11cid10 ϕ In case switching p false true ϕ false true safely replace occurrences p cid4 That cid10 ϕcid4p ϕ 1238 J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 Table 1 Summary relative succinctness results Entries read row ﬁrst Otherwise let M model Since ϕ NNF ϕcid4p remain true model ϕ true additionally possibility M p cid10 ϕcid4p M cid11cid10 ϕ However uGmax monotone M cid10 ϕ know uGmaxM p cid2 wϕ ψ wψ G M p cid10 ψ wψ uGmaxM p Therefore making M p cid10 ϕcid4p disturb value utility function model Hence G ϕ w ϕcid4p w max G cid2 With lemma hand improve Theorem 13 succinctness gain negation arbitrary formulas cubes representing monotone utility functions max languages Theorem 45 If Φ closed transformation NNF G LΦ W max NNF exists Gcid4p p PS LΨ W cid3 max LΦ W max cid28 LΨ W cid3 max Proof By Lemma 44 G NNF G max Gcid4p1 cid4pn Since transformation NNF substitution cid4 negative literals sizepreserving sizeG sizeGcid4p1 cid4pn spaceeﬃcient translation LΦ W max LΨ W cid3 max cid2 Note W completely arbitrary The condition requiring Gcid4p p PS LΨ W cid3 max implies W cid3 cid3 W stated theorem Corollary 46 Lforms W max Lpforms W cid3 max W W cid3 R Proof By Fact 40 assume Lforms W max cid31 Lpforms W cid3 max Lforms W max cid28 Lpforms W cid3 max follows Theorem 45 cid2 loss generality W W cid3 Then follows inclusion Our relative succinctness results summarized Table 1 The table contains results proved text cases straightforward consequences results appear The common result overwhelming margin max languages equally succinct consequence Theorem 41 gives equal succinctness pair cubes pcubes languages For example Lcubes R max Lpcubes R max All differences succinctness shown table combination Theorem 42 Fact 40 Theorem 13 See text immediately following Theorem 42 required argument Furthermore list clauses languages Corollary 12 reduces clauses languages simpler cubes languages Because succinctness results max languages powerful comparable results sum languages 10 Table 2 table max languages complete 62 Crossaggregator succinctness Here examine succinctness selected max languages respect selected sum languages For pair 10 max languages 18 sum languages considered 10 Section 4 succinctness result shown J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 1239 We present 180 potential results brevity sum languages unique representations lack tools easily prove succinctness results involving The results present representative results kind The ﬁrst results Theorems 48 49 indicate aggregator favors short representations certain kinds utility functions max sum better particular application depend utility functions agents likely Additionally ﬁnal results section highlight necessary index succinctness relation particular class comparison discussion appears end section n u n useful showing succinctness differences We deﬁne families utility functions u languages Deﬁnition 47 Let u nX u cid14 1 0 n u X PS n utility functions PSn u nX cid14 1 0 X cid11 First use u n utility function maximal range compare Lpcubes R max Lpcubes R cid2 This result highlights difference max sum aggregators Theorem 48 Lpcubes R max Lpcubes R cid2 Proof cid4 The family u Lpcubes R cid2 Lpcubes R cid2 cid5 In Lpcubes R max u n shown proof 10 Theorem 411 exponential representations n represented G p 1 p PS Therefore Lpcubes R max cid4 cid5 Let X ai X 2i Then ran 2n G max represents Theorem 24 G max cid2 2n In Latoms R cid2 Gcid2 ai 2i 0 cid3 n represents Hence Lpcubes R max cid5 Lpcubes R cid2 cid2 We use u n arrive similar result Lpcubes R max Lpclauses R cid2 Theorem 49 Lpcubes R max Lpclauses R cid2 Proof cid4 The family u Lpclauses R cid2 In Lpcubes R max u cid5 n represented PS 1 n shown proof 10 Theorem 410 exponential representations language cid2 cid5 Let X ai X 2i Then ran 2n G max represents Theorem 24 G max cid2 2n In Latoms R cid2 Gcid2 ai 2i 0 cid3 n represents Hence Lpcubes R max cid4 Lpclauses R cid2 cid2 The results examples crossaggregator succinctness surprising The languages question little expressive overlap underlying reason results First austere language Latoms R max strictly succinct seeminglyricher Lpcubes R cid2 Theorem 50 Lpcubes R cid2 Latoms R max Proof U atoms R max corresponds class unitdemand utility functions Every unitdemand utility function u expressible linearly language Latoms R max uaaPS In Lpcubes R cid2 fully expressive uniqueness cf 10 Theorem 32 Corollary 37 u represented X X PS X w cid2 cid2 cid2 w X 1 X1 min X ua For unitdemand u singleminded exactly PS ua cid11 0 case G ua Latoms R max For nonsingleminded u let X PS items u assigns cid2 n family nonzero value Then G contain nonzero weight w simple unitdemand utility functions representations Lpcubes R cid2 exponential PS cid2 Y Y X So family u Next present result similar Theorem 50 aggregators reversed It ﬁrst surprising ﬁnd language natural deﬁnition strictly succinct extremely limited Latoms R cid2 result max languages poor representing modular utility functions Theorem 51 Lcubes R max Latoms R cid2 1240 J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 Proof cid28 From 10 Corollary 38 U atoms R cid2 class normalized nonnegative modular utility functions From Theorem 16 U cubes R max class nonnegative monotone utility functions Latoms R cid2 expressive intersection languages Every representation Latoms R cid2 linear PS If ua cid2 0 atom appear representation u Lcubes R max representations grow logarithmically PS possible cid5 Consider family utility functions u X X In Latoms R cid2 u represented 1 X PS X X X PS exponential linear PS unique representation Lcubes R max PS cid2 cid2 Finally compare Lpclauses R cid2 Latoms R max A feature establish succinctness gap falls discriminating power succinctness relation complex unitdemand valuations linearly representable Latoms R max best representations quadratic Lpclauses R cid2 Theorem 52 Lpclauses R cid2 Latoms R max Proof Recall U atoms R max class unitdemand utility functions Simple unitdemand utility functions expressible linearly Lpclauses R cid2 PS 1 Consider complex unitdemand utility functions u items differ value value bundle value best item contained expressed Lpclauses R cid2 Without loss generality suppose items ordered a1 cid3 cid3 value Then cid3 cid6cid7cid30 cid9cid10 PS a1 ai1 uai uai1 1cid2icid2n unique minimal representative u Lpclauses R cid2 containing nn1 2 atoms cid2 We position demonstrate general deﬁnition succinctness subscripted comparison class needed In Theorem 50 showed Lpcubes R cid2 Latoms R max Theorem 51 showed Lcubes R max Latoms R cid2 Furthermore Lpcubes R cid2 Latoms R cid2 expressive intersection languages representation small Finally Latoms R max Lcubes R max expressive intersection class nonnegative unitdemand utility functions small representations languages We following situation Lpcubes R cid2 Latoms R max Latoms R cid2 Lcubes R max From seen unsubscripted succinctness relation transitive This comes pairs languages expressive intersection Because expressive intersection languages shift comparison comparison explicit class utility functions comparison wish pairwise comparison 7 The complexity individual utility maximization minimization In section analyze effect restrictions goalbases complexity answering questions utility functions represent focusing speciﬁcally decision problems maxutil minutil The problem maxutil asks model producing speciﬁed utility The problem minutil pessimal version maxutil asks agent obtain speciﬁed utility matter model ﬁnds 71 The complexity maxutil The decision problem maxutil problem determining agent given preferences attain speciﬁed utility Deﬁnition 53 The decision problem maxutil The decision problem maxutilΦ W F deﬁned Given goalbase G LΦ W F integer K model M 2 uGF M cid2 K PS Note consider cases set weights W subset Q order avoid issues represent irrational weights Who needs solve maxutil depends context preference representation languages applied Take auctions example The Winner Determination Problem combinatorial auctions 4 problem allocating goods bidders maximizing revenue Whether maxutil needs solved auctioneer order J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 1241 determine bidders win goods depends concrete algorithm auctioneer uses Even cases necessary solve maxutil order solve Winner Determination Problem complexity maxutil provides lower bound complex Winner Determination Problem Observe degenerate singlebidder case problems coincide If bidder shows auction determining items wins precisely ﬁnding optimal model Therefore Winner Determination Problem easier maxutil contains maxutil subproblem Finally agent useful solve maxutil builds bids directly explicitly represented utility function instead constraints elicitation In case agent able ﬁnd optimal model ﬁrst solving maxutil In contrast hardness results maxutil sum languages 2 Section 551 10 solving maxutil max language trivial Theorem 54 maxutilforms Q max TIMEn restricted goalbases containing satisﬁable formulas Proof An algorithm solving maxutil max language simply iterate formulas goalbase answer aﬃrmatively soon encounters ϕ w w cid2 K answer negatively cid2 This result requires complexity discussion formulas maxutilforms Q max NPcomplete lifting restriction imposes additional requirement checking ϕ satisﬁable w cid2 K 7 Second assuming retain satisﬁability condition careful interpret low complexity maxutil Note algorithm compute actual model M yielding desired level utility checks M exists If require M need extract satisfying model M goal ϕ w w cid2 K First restriction satisﬁable The problem ﬁnding satisfying assignment arbitrary formula known satisﬁable probably intractable fsat function problem version sat complete FNP extension NP function problems Given formula ϕ fsat return satisfying model M satisfying model If know ϕ satisﬁable know fsat model instead answering Call subproblem fsat input formulas guaranteed satisﬁable tfsat total fsat tfsat member class TFNP subset FNP problems totalthat problems return answer Clearly FP TFNP FNP known If FP TFNP imply P NP coNP considered unlikely 29 Hence likely polynomial algorithm ﬁnding satisfying assignment arbitrary knownsatisﬁable formula general low complexity maxutil max languages imply low complexity corresponding function problem ﬁnds witness In contrast observation sum languages aware case complexity checking existence alternative giving K utility computing alternative differ long restrict languages closed substitution logical constants8 For languages NPcomplete maxutil nonissue sum languages polynomial maxutil proofs constructive directly computation alternative polynomial Finally stress limitations Theorem 54the assumption goals satisﬁable difference Lforms W max solving maxutil actually computing best alternativevanish certain restricted max languages For cubes clauses sublanguages determining satisﬁability single formulas trivial result maxutilcubes W max maxutilclauses W max unconditionally P Finding model single satisﬁable cube clause trivial makes computing best alternative simple languages 72 The complexity minutil So far section considered optimal models pessimal models Just agent wish know wish know poorly minutil seen pessimistic dual optimistic maxutil sense checks lower bounds instead upper bounds Deﬁnition 55 The decision problem minutil The decision problem minutilΦ W F deﬁned Given goalbase G LΦ W F integer K models M 2 uGF M cid2 K PS Note minutil complement maxutil This easily seen problem instance cid4 1 1 member decision problems different languages choices aggregators We seen 2 Section 55 sum languages minutil behaves similarly maxutil However case max languages 7 By taking satisﬁability precondition maxutilforms Q max promise problem discussed Even et al 28 8 For languages closed substitution logical constants case decision problem solve function problem For discussion 30 2 Section 571 1242 J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 ˆp1 ˆpn 1 ˆw 1 ˆwn cid8 w G cid8 pi w cid3 ˆw cid8 pi w ˆw ˆpi 1 ˆw w ˆpi 0 ˆw w end end M pi PS ˆpi 1 Fig 3 An algorithm ﬁnding maximal optimal models G Lliterals Q max Theorem 56 minutilforms Q max coNPcomplete Proof For coNP membership Any purported counterexample model M polynomially checkable simply evaluating uGmaxM K For coNPhardness Let ϕ instance wellknown coNPhard problem unsat ϕ 1 1 instance minutilforms Q max It easy ϕ satisﬁable uϕ1M 1 models M vice versa Hence unsat reduces minutilforms Q max cid2 If restrict goalbases inputs containing superﬂuous formulas favorable result minutilforms Q max Theorem 57 minutilforms Q max TIMEn restricted goalbases containing superﬂuous formulas Proof Since ϕ w G superﬂuous ϕ determine value uG M model M Hence value worst model simply identifying ϕ w w iterating single time G If w cid2 K minutil instance positive negative cid2 As sum languages sets formulas max languages minutil remains polynomial absence restrictions This seen following theorems Theorem 58 minutilpforms Q max TIMEn Proof For instance G K know uG monotone Hence minimallyvalued model Therefore G K minutilpforms Q max iff uG cid2 K required decide instance reading G comparing rationals cid2 Theorem 59 minutilliterals Q max TIMEn Proof Let G K instance We present Fig 3 lineartime algorithm building maximal optimal model M maximal sense optimal models true atoms For pi PS ˆw tracks value best weighted literal containing pi seen far ˆpi tracks literal positive negative Because M maximal optimal model follows PS M minimal pessimal model values items mutually independent uG Finally check uG PS M cid2 K cid2 Theorem 60 minutilcubes Q max TIMEn2 Proof We argue quadratic identify remove superﬂuous formulas goalbases Lcubes Q max G contains superﬂuous formulas invoke Theorem 57 ﬁnish deciding reduced instance First observe X Y X cid7cid8 cid8 cid7cid8 cid9 cid10 X Y cid3 Y cid3 PS cid8 cid3 X cid9 cid3 X cid3 X Y cid3 Y X Y cid11 Y That testing cube implies involves checking sets intersect supersets sets O n log n operations This means ﬁnd remove superﬂuous cubes G Lcubes Q max follows X For pair cubes cid2 cid3 Y X Y cid11 cid3 w X cid3 X Y cid3 G w Y w cid3 w Y cid3 cid2 cid2 cid2 cid2 cid2 X X Y w superﬂuous remove G J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 1243 Table 2 Summary complexity results maxutil minutil Decision problem forms Q max maxutil minutil pforms Q max literals Q max minutil cubes Q max minutil forms Q max minutil Complexity TIMEn TIMEn TIMEn TIMEn2 coNPcomplete This algorithm quadratic G Once G contains superﬂuous formulas remaining weight w checked w cid2 K cid2 It worth noting dramatic difference choice aggregator makes minutil cubes languages From 2 Theorem 5521 minutil coNPcomplete positivelyweighted 2cubes summation shown minutil arbitrarilyweighted cubes length remains polynomial aggregating max Theorem 54 shows maxutil linear max languages satisﬁable formulas given input The general case minutil surprisingly hard coNPcomplete The language Lforms Q max suitable optimists interested utility hope achieve pessimists interested utility guaranteed On hand difference expressivity Lcubes Q max Lforms Q max Corollary 12 compels use additional formulas gain permitting disjunction fact punished additional complexity disjunction case See Table 2 summary results maxutil minutil 8 The complexity collective utility maximization Collective utility maximization central problem face attempting allocate indivisible goods group agents The goal range maximizing revenue auctions minimizing cost reverse auctions maximizing overall satisfaction task allocation Determining use limited capabilities satellite satisfy space agency contributed cost 3132 selling ﬂowers bonds bidders auction assigning radio spectra communications operators routes bus operators 33 takeoff landing slots airlines 34all resource allocation problems want maximize collective utility according measure When agents utility function encoded language collective utility maximization problem maxcuf problem ﬁnding solution maximizing collective utility By solution mean partition set propositional variables agents ﬁxing model This deﬁnition natural instance think variables goods9 For example goods b c agents 1 2 possible allocation assign goods b agent 1 good c agent 2 In section focus complexity maxcuf max languages notions collective utility Now introduce deﬁnitions need discussing collective utility maximization A collective utility function CUF 13 fulﬁlls role groups agents aggregation function individuals viz mapping multiple utilities single aggregated value Deﬁnition 61 Collective utility functions A collective utility function CUF mapping σ R R Since function tuples reals reals CUF great diversity CUFs choose 13 In practice CUFs frequently encountered egalitarian utilitarian elitist Nash product collective utility functions Deﬁnition 62 Common collective utility functions σ max elitist collective utility function σ min egalitarian collective utility function σ cid2 utilitarian collective utility function σ cid10 Nash product collective utility function The utilitarian collective utility alternative sum individual utilities Optimizing respect utilitar ian collective utility equivalent Winner Determination Problem combinatorial auctions interpreted 9 Other types solutions ﬁnding single model maximizes collective utility shall considered The combinatorial vote problem Lang 26 exactly problem context voting 1244 J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 ﬁnding allocation goods bidders maximize sum prices offered 35 The elitist egalitarian CUFs similar focus different individuals salient collective utility The egalitarian collective utility utility agent worst elitist collective utility utility agent best A ﬁnergrained version egalitarian collective utility leximin ordering advocated Rawls 36 possibility focus utility agent best worst example median agent medianrank dictator CUF Finally Nash product product individual utilities attempts strike balance fairness total utility10 Now formal deﬁnition maxcuf similar deﬁnition maxutil lifted individual agent group agents Deﬁnition 63 The decision problem maxcuf The decision problem maxcufΦ W F σ n agents deﬁned Given goalbases G 1 Gn LΦ W F collective utility function σ integer K partition M1 Mn PS σ uG 1F M1 uGnF Mn cid2 K First state lemmas bounding complexity maxcuf Lemma 64 maxcufΦ W F σ NP F σ polynomiallycomputable functions This holds F σ polynomiallycomputable functions cases easily check given allocation fact produce K utility Before proceeding lemma need deﬁne reasonableness notion individual collective utility functions Deﬁnition 65 Singleton consistency A function f R R ﬁxed arity singleton consistent α R f α α Any reasonable individual aggregator collective utility function singleton consistent For individual aggregators singleton consistency means agent having exactly satisﬁed weighted formula ϕ w utility w For collective utility functions singleton consistency means singleagent society utility sole member Singleton consistent functions intuitively right answers utility single agents stranded desert islands All functions consider heremin max sum productare singleton consistent Lemma 66 maxcufΦ W F σ hard maxutilΦ W F singletonconsistent σ Here singleton consistency ensures σ behaves identity function single agent involved σ maxcuf maxutil coincide maxcuf easy max languages elitist collective utility function reasons stated support Theorem 54 Fact 67 maxcufforms Q max max TIMEn long goalbases contain satisﬁable formulas However switch common CUFs maxcuf hard severely restricted languages Theorem 68 maxcuf2pcubes 0 1 max σ NPcomplete σ cid2 cid10 min Proof For ﬁrst case σ cid2 follow van Hoesel Müller 37 Theorem 2 reducing known NPcomplete problem tripartite matching 38 maxcuf2pcubes 0 1 max cid2 Instances tripartite matching X Y Z T sets X Y Z X Y Z T X Y Z An instance X Y Z T member iff M T perfect matching x X y Y z Z appears exactly triple M For reduction interpret set X agents sets Y Z items appearing 2pcubes For x y z T y z 1 G x Also cid4 0 G x Let K X The way achieve K utility allocating Y Z agents X ensure noncid4 goal satisﬁed G x conversely satisfying noncid4 goal G x increase collective utility individual aggregator max Hence X Y Z T tripartite matching iff G xx X X maxcuf2spcubes 0 1 max cid2 For cases use reduction tripartite matching let K 1 cid2 10 Note collective utility functions consider associative commutative aggregating tuple individual utilities aggregating multiset individual utilities Functions nonassociative noncommutative tend interesting CUFs fail treat agents equally J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 1245 Table 3 Summary complexity results maxcuf Decision problem maxcuf maxcuf 2spcubes maxcuf 2spcubes maxcuf 2pcubes satisﬁable ϕ Q 1 1 0 1 max cid10 max max max cid2 max min Complexity TIMEn NPcomplete NPcomplete NPcomplete This result subsumes parts NPcompleteness results Bouveret et al 39 Fig 1 Bouveret 40 Propo sition 422 σ min As consider negation results reduction set packing apply maxcufpforms Q max min contains problem maxcuf2spcubes 0 1 max min proved NPcomplete Notice presence cid4 0 goalbase necessary σ cid10 case11 For cases including cid4 0 safe unnecessary cid2 min state slightly stronger result 2spcubes W 1 leaving proof unchanged maxcuf signiﬁcantly harder maxutil There numerous languages maxutil polynomial maxcuf NPcomplete collective utility function For example Theorem 68 shows tiny fragment language positive formulas positive weights NPcomplete maxcuf problem despite maxutil trivial languages See Table 3 summary results maxcuf 9 Conclusions future work We analyzed expressivity succinctness complexity languages representing utility functions based weighted propositional formulas aggregated max operator Our results substantial differences categories comparison languages sum aggregating weights 10 For expressivity able complete picture important languages inclusion disjunction max languages effect expressivity cuts number languages consider More ﬁnegrained results probably obtained considering languages generated speciﬁc weight sets looking formulas limited length cases results direct consequences known Concerning relative succinctness established relationships max languages consider given results relate selected sum languages Additionally exhibited bounds absolute succinctness maxaggregated goalbases formed cubes positive cubes Lastly concerning complexity We observed ﬁnding alternative maximizing individual utility maxutil computationally easy max languages practical purposes ﬁnding alternative minimizing individual utility minutil ranges linear coNPcomplete depending formulas language allows We discussed extent known results apply framework analyzing complexity problem maximizing collective utility group agents maxcuf proved NPcompleteness results collective utility maximization restrictive languages Some problems remain open As mentioned know exact expressivity max languages bounded formula length Lkcubes R max positive sublanguages 1 k ω crossaggregator suc cinctness results unresolved The bounds goalbase size Lcubes R max tight cases improved Also sharpening boundary languages maxcuf NPcomplete polynomialfor example Nash product collective utility function little expressive power remove L2spcubes 0 1 max maxcuf problem easier add Latoms 0 1 max maxcuf harder Finally looms larger question properties goalbase languages virtue aggregators tackled general way aggregator painstaking classiﬁcation work max 10 cid2 Unfortunately max cid2 differ generalize easier generalize max min cid2 cid10 pairs aggregators common max cid2 References 1 J Uckelman U Endriss Preference modeling weighted goals max aggregation G Brewka J Lang Eds Proceedings 11th Interna tional Conference Principles Knowledge Representation Reasoning KR2008 2008 pp 579587 2 J Uckelman More sum parts Compact preference representation combinatorial domains PhD thesis University Amsterdam ILLC Publication DS200912 2009 3 J Goldsmith U Junker Preference handling artiﬁcial intelligence editorial AI Magazine 29 4 2008 912 4 P Cramton Y Shoham R Steinberg Eds Combinatorial Auctions MIT Press 2006 11 Suppose cid4 left unweighted Because max agent satisﬁed formulas goalbase utility If number agents σ cid10 collective utility isnt desired result 1246 J Uckelman U Endriss Artiﬁcial Intelligence 174 2010 12221246 5 Y Chevaleyre PE Dunne U Endriss J Lang M Lemaître N Maudet J Padget S Phelps JA RodríguezAguilar P Sousa Issues multiagent resource allocation Informatica 30 2006 331 6 G Pinkas Propositional nonmonotonic reasoning inconsistency symmetric neural networks J Mylopoulos R Reiter Eds Proceedings 12th International Joint Conference Artiﬁcial Intelligence IJCAI1991 Morgan Kaufmann 1991 pp 525531 7 C Lafage J Lang Logical representation preferences group decision making AG Cohn F Giunchiglia B Selman Eds Proceedings 7th International Conference Principles Knowledge Representation Reasoning KR2000 Morgan Kaufmann 2000 pp 457468 8 S CosteMarquis J Lang P Liberatore P Marquis Expressive power succinctness propositional languages preference representation D Dubois CA Welty MA Williams Eds Principles Knowledge Representation Reasoning Proceedings Ninth International Conference KR2004 Whistler Canada June 25 2004 AAAI Press 2004 pp 203212 9 Y Chevaleyre U Endriss J Lang Expressive power weighted propositional formulas cardinal preference modelling P Doherty J Mylopoulos CA Welty Eds Proceedings Tenth International Conference Principles Knowledge Representation Reasoning KR2006 AAAI Press 2006 pp 145152 10 J Uckelman Y Chevaleyre U Endriss J Lang Representing utility functions weighted goals Mathematical Logic Quarterly 55 4 2009 341361 11 A Ragone TD Noia FM Donini ED Sciascio MP Wellman Computing utility weighted description logic preference formulas Declarative Agent Languages Technologies VII DALT2009 Lecture Notes Computer Science vol 5948 Springer 2009 pp 158173 12 A Ragone TD Noia FM Donini ED Sciascio MP Wellman Weighted description logics preference formulas multiattribute negotiation Scalable Uncertainty Management Third International Conference SUM 2009 Proceedings Washington DC USA September 2830 2009 Lecture Notes Computer Science vol 5785 Springer 2009 pp 193205 13 H Moulin Axioms Cooperative Decision Making Econometric Society Monographs vol 15 Cambridge University Press 1988 14 C Boutilier RI Brafman C Domshlak HH Hoos D Poole CPnets A tool representing reasoning conditional ceteris paribus preference statements Journal Artiﬁcial Intelligence Research JAIR 21 2004 135191 15 F Rossi KB Venable T Walsh mCP nets Representing reasoning preferences multiple agents DL McGuinness G Ferguson Eds Proceedings Nineteenth National Conference Artiﬁcial Intelligence Sixteenth Conference Innovative Applications Artiﬁcial Intelligence San Jose California USA July 2529 2004 AAAI PressThe MIT Press 2004 pp 729734 16 J Lang L Xia Sequential composition voting rules multiissue domains Mathematical Social Sciences 57 3 2009 304324 17 J Goldsmith J Lang M Truszczy nski N Wilson The computational complexity dominance consistency CPnets Journal Artiﬁcial Intelli gence Research JAIR 33 2008 403432 18 PC Fishburn Utility Theory Decision Making John Wiley Sons 1970 19 C Gonzales P Perny GAI networks utility elicitation D Dubois CA Welty MA Williams Eds Principles Knowledge Representation Reasoning Proceedings Ninth International Conference KR2004 Whistler Canada June 25 2004 AAAI Press 2004 pp 224234 20 RI Brafman C Domshlak T Kogan Compact valuefunction representations qualitative preferences DM Chickering JY Halpern Eds UAI 04 Proceedings 20th Conference Uncertainty Artiﬁcial Intelligence Banff Canada July 711 2004 AUAI Press 2004 pp 5159 21 S Ieong Y Shoham Marginal contribution nets A compact representation scheme coalitional games J Riedl MJ Kearns MK Reiter Eds Proceedings 6th ACM Conference Electronic Commerce EC2005 ACM Press 2005 pp 193202 22 E Elkind LA Goldberg PW Goldberg M Wooldridge A tractable expressive class marginal contribution nets applications Mathematical Logic Quarterly 55 4 2009 362376 23 N Nisan Bidding languages combinatorial auctions P Cramton Y Shoham R Steinberg Eds Combinatorial Auctions MIT Press 2006 pp 215 232 24 C Boutilier HH Hoos Bidding languages combinatorial auctions B Nebel Ed Proceedings Seventeenth International Joint Conference Artiﬁcial Intelligence IJCAI 2001 Seattle Washington USA August 410 2001 Morgan Kaufmann 2001 pp 12111217 25 C Boutilier Solving concisely expressed combinatorial auction problems Proceedings Eighteenth National Conference Artiﬁcial Intelligence Fourteenth Conference Innovative Applications Artiﬁcial Intelligence AAAIIAAI 2002 AAAI Press 2002 26 J Lang Logical preference representation combinatorial vote Annals Mathematics Artiﬁcial Intelligence 42 13 2004 3771 27 M Cadoli FM Donini P Liberatore M Schaerf Space eﬃciency propositional knowledge representation formalisms Journal Artiﬁcial Intelligence Research JAIR 13 2000 131 28 S Even AL Selman Y Yacobi The complexity promise problems applications publickey cryptography Information Control 61 1984 159173 29 CH Papadimitriou On complexity parity argument ineﬃcient proofs existence Journal Computer System Sciences 48 3 1994 498532 30 J Uckelman A Witzel Logicbased preference languages intermediate complexity J Chomicki V Conitzer U Junker P Perny Eds Proceed ings 4th Multidisciplinary Workshop Advances Preference Handling MPREF2008 AAAI Press Chicago 2008 pp 123127 31 M Lemaître G Verfaillie N Bataille Exploiting common property resource fairness constraint case study T Dean Ed Proceedings Sixteenth International Joint Conference Artiﬁcial Intelligence IJCAI 99 Morgan Kaufmann 1999 pp 206211 32 S Bouveret J Lang Eﬃciency envyfreeness fair division indivisible goods logical representation complexity Journal Artiﬁcial Intelli gence Research JAIR 32 2008 525564 33 E Cantillon M Pesendorfer Auctioning bus routes The London experience P Cramton Y Shoham R Steinberg Eds Combinatorial Auctions MIT Press 2006 pp 573591 34 MO Ball GL Donohue K Hoffman Auctions safe eﬃcient equitable allocation airspace resources P Cramton Y Shoham R Steinberg Eds Combinatorial Auctions MIT Press 2006 pp 507538 35 D Lehmann R Müller T Sandholm The winner determination problem P Cramton Y Shoham R Steinberg Eds Combinatorial Auctions MIT Press 2006 pp 288317 36 J Rawls A Theory Justice Harvard University Press 1971 37 S van Hoesel R Müller Optimization electronic markets examples combinatorial auctions Netnomics 3 1 2001 2333 38 RM Karp Reducibility combinatorial problems RE Miller JW Thatcher Eds Complexity Computer Computations Plenum Press 1972 39 S Bouveret H Fargier J Lang M Lemaître Allocation indivisible goods general model complexity results F Dignum V Dignum S Koenig S Kraus MP Singh M Wooldridge Eds 4th International Joint Conference Autonomous Agents Multiagent Systems AAMAS 2005 Utrecht The Netherlands July 2529 2005 ACM 2005 pp 13091310 40 S Bouveret Allocation et partage équitables ressources indivisibles modélisation complexité et algorithmique PhD thesis SupaéroUniversity Toulouse 2007