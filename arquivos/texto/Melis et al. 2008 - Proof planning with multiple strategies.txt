Artiﬁcial Intelligence 172 2008 656684 wwwelseviercomlocateartint Proof planning multiple strategies Erica Melis Andreas Meier Jörg Siekmann Universität des Saarlandes German Research Center Artiﬁcial Intelligence DFKI Saarbrücken Germany Received 2 May 2006 received revised form 13 November 2007 accepted 16 November 2007 Available online 22 November 2007 Abstract Proof planning technique theorem proving replaces ultraefﬁcient blind search classical theorem proving systems informed knowledgebased planning process employs mathematical knowledge humanoriented level abstraction Standard proof planning uses methods operators control rules ﬁnd abstract proof plan expanded tactics level underlying logic calculus In paper propose ﬂexible reﬁnements modiﬁcation proof planner additional strategic level control previous proof planning control This strategic control guides cooperation problem solving strategies metareasoning We present general framework proof planning multiple strategies implementation MULTI The beneﬁts illustrated large case studies signiﬁcantly push limits achieved machine today 2007 Elsevier BV All rights reserved Keywords Theorem proving Proof planning Blackboard architecture Planning Metareasoning 1 Introduction The control problem choose potential actions intelligent agentman machine alikehas disposal fundamental problem solving processes It stimulated development software architectures artiﬁcial intelligence including blackboard architectures 181924 multi agent sys tems 54 In spite increasing sophistication systems inﬂexible employ pre determined ﬁxed control schema In particular true classical automated theorem proving systems expand efﬁciently search large search spaces guided preﬁxed generalpurpose ﬁlters heuristics A modiﬁcation ﬂy ﬂexible combination different heuristics tackle subproblems general possible As result systems recognize mathematically promising search paths deﬁciency sophisticated representational techniques Chapter VIII 45 Corresponding author Email addresses melisdfkide E Melis meierdacoscom A Meier siekmanndfkide J Siekmann URLs httpwwwagsunisbdemelis E Melis httpwwwagsdfkiunisbdeJSindexhtml J Siekmann 00043702 matter 2007 Elsevier BV All rights reserved doi101016jartint200711004 E Melis et al Artiﬁcial Intelligence 172 2008 656684 657 general search heuristics blindly examine space billion nodes The ﬁnal performance depends preselected search heuristic appropriate particular problem hand1 As reaction problems remedies tried 1 Different systems competitively combined machine resources allocated promising time 2475159 Typical metaheuristics selection resource allocation evaluate char acteristics problem hand compare past experience For instance past S heuristics H best suited problems following number type clauses andor equations 2 Cooperation different systems exchange intermediate results 15 metaheuristics decide results exchange For example The derived clause C unit clause useful exported Proof planning 7 technique theorem proving proofs planned higher level abstraction individual choices mathematically motivated semantics domain Thus proof planning swings pendulum desert blind ultraefﬁcient searchbased paradigm classical automated theorem proving green grass knowledge based systems In particular proof planning tackles theorems general logic based methods domainspeciﬁc general mathematical knowledge encoded explicitly methods control 3941 Essentially proof planners like CLAM cid2MEGA monolithic sense planning algorithm predeﬁned advantage runtime knowledge available problem solving process Our experiments proof planning past decade indicate search process beneﬁt substantially ﬂexibility choice usage runtime knowledge instead mere competitive application systems simple exchange intermediate results This situation recognized realworld applications planning 56 In following report results proof planning multiple strategies built general principles 1 decomposition monolithic search process independent processes 2 structuring set methods corresponding control knowledge strategies 3 metareasoning explicitly represented control knowledge strategic level After decade development experimentation article presents current ﬁnal stable solu tion introducing conceptually clean notions notation ﬁnally backs large case studies Most case studies published conferences workshops automated theorem proving step ping presentation time particular achievements like present summarize current general view journal paper The remainder paper organized follows After brief introduction proof planning motivat ing examples principles implemented MULTI 3235 The results discussed evaluated case studies illustrate potential explicitly represented strategic knowledge control demonstrate achieved automated reasoning today 2 Preliminaries cid2MEGA theorem proving environment developed University Saarbrücken based proof planning techniques MULTI proof planner current The cid2MEGA project 48 represents major attempts build encompassing assistant tool working mathematician software engineer combines interactive automated proof construction domains rich wellstructured mathematical knowledge The inference mechanism lowest level abstraction based higher order natural deduction ND variant softsorted version Churchs simply typed λcalculus 10 While represents machine code user seldom want search proof conducted higher level abstraction proof planning process 1 The general wisdom single theorem prover heuristic best problems contest httpwwwcsmiamiedutptpCASC 658 E Melis et al Artiﬁcial Intelligence 172 2008 656684 Proof planning differs traditional searchbased techniques automated theorem proving proof theorem planned abstract level outline proof constructed ﬁrst This outline abstract proof plan recursively expanded methods tactics eventually logical calculus proof Most plan operators called methods reason represent mathematical techniques familiar working mathematician Knowledgebased proof planning 41 employs techniques artiﬁcial intelligence hierar chical planning constraint solving control rules encode solve knowledge guiding search abstract level While knowledge mathematical domain represented operators control rules speciﬁc mathematical ﬁeld hand representational techniques reasoning procedures generalpurpose The plan operators mathematical proof planning called methods They partially changes proof states pre postconditions called premises conclusions following The premises conclusions method formulae precisely sequents higherorder language conclusions considered logically inferable premises Hence mathematical theorem proving problem expressed planning problem initial state consists proof assumptions goal description conjecture shown Proof planning searches sequence hierarchy instantiated methods solution plan transforms initial state assumptions state containing conjecture A proof planner realized following search procedure As long goals select goal try apply method If goal method applicable backtrack method application introduced goal When goals closed employ constraint solver instantiate variables methods The reason late variable instantiation ﬁrst collect individual constraints possible long goals instantiate variables satisfy collected constraints end As opposed precondition achievement planning 55 effects methods proof planning usually cancel proof planning For instance method applied open node effect F threaten effect F introduced method open node Dependencies open nodes result shared variables terms constraints Constraints range mathematical domain form x c y b d The constraints created proof planning process collected constraint store Methods control rules strategies In order ingredients proof planning explicit let repeat methods control rules contribute proof planning extend discussion new notions Methods perceived Alan Bundy tactics augmented preconditions effects In termi nology method represents inference conclusion premises Backward methods reduce goal conclusion new goals premises Forward methods contrast derive new conclusions given premises Control rules represent mathematical knowledge proceed particular mathematical situation guide proof planning process They inﬂuence planners behavior choice points goal tackle method apply preferring certain members list possible goals list possible methods This way promising search paths preferred general search space pruned substantially Methods control rules main ingredients current proof planning systems provide structure ﬂexibility problem solving process past decade experimentation revealed First problem planning algorithm decomposed main functionalities new techniques easily added This discussed Section 4 Secondly structuring knowledge reduce huge search space For instance want prove continuity theorem theory analysis makes difference prove limit theorems epsilondelta technique converging sequences Similarly human expertshere mathematicianhas variety different strategies E Melis et al Artiﬁcial Intelligence 172 2008 656684 659 disposal tackle speciﬁc problems This structuring functionality addressed certain strategies deﬁne context Some strategies apply speciﬁc mathematical ﬁeld general purpose A strategy multistrategy proof planning employs speciﬁc reﬁnement modiﬁcation algorithm subset methods control rules This subset typical particular mathematical proof technique want simulate For instance strategy use external algebra computation attack problem completely different set methods epsilondelta techniques methods control rules pertain proof induction Furthermore strategy cooperate strategy different theory use completely different backtracking technique Metareasoning strategy employ given problem introduces additional explicit choice point different current control searches level strategies subject paper Finally proof planning takes place particular context mathematically theory discussed Section 8 3 Motivating examples Our ﬁrst example shows proof theorem stating sum limits functions equals limit sums referred Lim follows solved earlier proof planning systems It presented motivation order understand problems proof plans domain epsilon delta proofsThis introductory example followed examples solved previous systems They demonstrate need decomposition proof planning process runtime information 31 The Lim problem The theorem claims limit point x sum functions f g equals sum limits Hence assumptions deﬁne limit f g This deﬁnition usual form limit saying arbitrarily small values cid4 exists δenvironment xargument functionvalues cid4environment limit l Hence proofs called cid4δproofs typical structure familiar ﬁrst year students maths f x cid41 lim xa cid2 0 cid41 δ1 cid2 0 δ1 x1 cid2 0 x1 δ1 cid3 cid3f x1 l1 cid3 cid3 cid41 cid4cid4cid4 gx cid42 lim xa cid2 0 cid42 δ2 cid2 0 δ2 x2 cid2 0 x2 δ2 cid3 cid3gx2 l2 cid3 cid3 cid42 cid4cid4cid4 The conjecture Lim cid2 0 cid4 δ cid2 0 δ x cid2 0 x δ cid4cid4cid4 cid4 1 2 3 A typical proof similar conjunctures requires appropriate expressions δ How invent maths student learns usually ﬁrst semester analysis Here standard proofs taken R Bartle D Sherbert Introduction Real Analysis 1982 taken cid4δ theorems proved This standard proof presuppose extra lemmata Triangle Inequality b cid2 b The Limtheorem Theorem 424 4 Theorem 424 Let limxa f x l1 limxa gx l2 limxaf x gx l1 l2 Proof In order theorem need estimate magnitude lim xa f x lim xa gx l1 l2 Using Triangle Inequality obtain E Melis et al Artiﬁcial Intelligence 172 2008 656684 660 cid2 cid3 cid3 cid4 gx cid4 cid3 cid3 l1 l2 cid2 cid4 gx f x lim lim xa xa cid3 cid2 cid3 f x l1 lim xa cid3 cid3 cid3 lim cid3 xa f x l1 cid2 lim xa cid3 cid3 lim xa Now deﬁnitions lim functions f g cid4 x δ1 x δ2 gx l2 cid3 cid3 l2 cid3 cid3 4 5 6 2 exists δ1 cid4 2 exists δ2 cid3 cid3 cid3 cid3lim f x l1 cid3 cid3 cid3lim gx l2 cid3 cid4 2 cid4 2 cid3 cid3lim f x l1 cid3 cid3 cid3 cid3lim gx l2 cid3 cid3 cid4 Thus δ minδ1 δ2 x δ lim f x gx l1 l2 cid4 deﬁnition cid4 cid2 f x gx lim xa l1 l2 lim xa f x lim xa gx cid2 It proof MULTI COMPLEXESTIMATE essentially captures kind recipe Actually recipe general includes application Triangle Inequality We shall discuss machine generated proof This general recipe decompose inequality goals order end simple inequalities determine restrictions δ depending cid4 encapsulated method COMPLEXESTIMATE It shown frame representation usual slots slot ﬁllers method COMPLEXESTIMATEa b e1 cid4 premises conclusions application condition proof schema cid7 cid11 e1 0 1 2 3 4 cid10 L12 uniﬁer σ terms b k lcasextractaσ b k l b k aσ l 0 1 2 3 4 L0 L1 L12 OPEN OPEN OPEN OPEN Axiom CASL0 inferredL101234 cid7 cid11 k cid2 V cid11 0 V cid7 cid11 l cid42 cid11 b b cid11 b k aσ l cid11 cid7 cid11 b cid4 cid11 aσ cid42 V Let explain methods representation order provide ﬂavor methods generally method COMPLEXESTIMATE parameters b e1 cid4 The slot premises slot ﬁllers line 0 formula sequence calculus cid7 cid11 e1 lines 1 2 3 4 proof schema The indicates lines added proof state The conclusion line L12 cid7 cid11 b cid4 slot ﬁller cid10 indicates line removed state There slot metalevel application condition ﬁnally operationalization method partial proof captured proof schema The application condition COMPLEXESTIMATE requires b uniﬁed substitution σ decomposition b k aσ l help algebra The terms k l resulting algebra computation subgoals 2 4 produced application COMPLEXESTIMATE The proof schema contains proof lines The lines justiﬁcation OPEN new subgoals In COMPLEXESTIMATE lines 1 2 3 4 The goal closed method L12 inferred subgoals axioms theorems indicated justiﬁcation Other lines justiﬁcations pointing computation L1 refers computation algebra CAS axioms theorems line L0 When proof plan expanded proof schema inserted ﬁnal proof E Melis et al Artiﬁcial Intelligence 172 2008 656684 661 This recipe essentially replaces goal cid7 cid11 b cid4 line L12 frame simpler subgoals lines 1 2 3 4 case assumption cid7 cid11 e1 line 0 state These new goals simpler inequalities contain constants terms k l result decomposition original complex term b variable V later replaced term Now proof planning applied limit conjecture assumptions proof planner general methods disposal applied In case methods ﬁrst decompose conjecture assumptions Among yields new assumptions2 f vx1 l1 vcid41 gvx2 l2 vcid42 new goals 0 vδ f cx gcx l1 l2 ccid4 3 The ﬁrst goal 0 vδ taken care method TELLCS closes goal adds constraint store constraint solver COSIE 62 The second goal f cx gcx l1 l2 ccid4 requires decomposition method COMPLEXESTIMATE The actual application COMPLEXESTIMATE goal matches methods parameters b e1 cid4 follows cid4 cid12 ccid4 b cid12 cid4 cid2 f cx gcx l1 l2 cid12 f vx1 l1 s1 cid12 vcid41 goal f x gx l1 l2 ccid4 instantiated b cid4 assumption f vx1 e1 l1 vcid41 This concrete application COMPLEXESTIMATE computes values k 1 l gcx l2 deletes goal f cx gcx l1 l2 ccid4 yields new goals cid41 ccid4 2 V 1 cid2 V 0 V cid3 cid3gcx l2 cid3 cid3 ccid4 2 7 8 9 10 Lines 7 8 9 closed TELLCS form constraint Goal 10 reduced method called SOLVE uses derived assumption gvx2 l2 vcid42 The method SOLVE exploits transitivity relation cid2 cid3 reduces goal form a1 b1 a1 b1 new goal σ b2 cid2 σ b1 σ b2 cid3 σ b1 case assumption form a2 b2 a2 b2 proof state a1 a2 uniﬁed substitution σ The resulting goals vcid42 cid2 ccid4 2 vx2 cx closed TELLCS The decomposition assumptions f g lead goals solved subsequent proof planning process When goals closed constraint solver COSIE computes appropriate instances variables consistent collected constraints far In case generates following instantiation vδ cid12 mincδ1 cδ2 vcid41 cid12 ccid4 2 vcid42 cid12 ccid4 2 An interesting point note happen values human proof Lim textbook Bartle Sherbert 4 proof presentation technique based proof plans 40 present proof showing collection restrictions δ enter constraint store Now contrast Lim theorem search proof cid4δproofs previous proof planning systems fundamentally fail Both examples taken textbook analysis 2 Notation proof planning replaces quantiﬁed variables constants placeholder variables The placeholder variable substitutes quantiﬁed variable x denoted vx The constant substituted quantiﬁed variable x denoted cx 3 During decomposition assumptions goals created decomposition conjecture yields assumptions In order illustrate basic proof planning approach ignore details 662 E Melis et al Artiﬁcial Intelligence 172 2008 656684 32 The ContIfDerivative problem The ContIfDerivative theorem states function f derivative f cid13 point f continuous Theorem 612 4 The proof planning problem consists assumption says f derivative f cid13 point cid5 cid5 cid5 cid41 0 cid41 δ1 0 δ1 x1 0 x1 δ1 cid3 cid3 cid3 cid3 f x1 f x1 cid13 f cid6cid6cid6 cid3 cid3 cid3 cid3 cid41 actual conjecture deﬁnition continuity f cid3 cid3 cid2 cid3 cid4 cid3f x f x δ cid2 0 δ x 0 cid4 δ cid4 cid2 cid4cid4cid4 Standard proof planning ContIfDerivative fails goal resulting condition provedalthough true contextand backtracking ﬁnd solution plan This technical weakness principle failure use runtime knowledge We shall drive directly weak spot details necessary understand proof planning process The decomposition conjecture assumption works Lim results goal cid3 cid3 cid3f cx f cid3 ccid4 new assumption f vx1 f 11 cid13 12 cid3 cid3 cid3 cid3 vx1 cid3 cid3 cid3 cid3 vcid41 f Using assumption goal 11 shown steps That method COMPLEXESTIMATE applied goal 11 proof Lim resulting goals closed Unfortunately goal cx 0 generated condition decomposition initial assumption This subgoal proved true general An analysis situation reveals introduce case split cases cx 0 cx cid2 0 f cx f ccid4 proven conditions cx 0 cx cid2 0 But case split introduced An priori introduction case split feasible need cases known Only impasse provides information need subsequent analysis shows modify overall proof plan order circumvent problem Such knowledgebased analysis runtime information impasse ﬂexible modiﬁcation proof plan possible standard proof planning This problem noticed Alan Bundy students developed approach kind impasse driven analysis discuss technique based critics Section 72 33 The LimPlusConst problem The theorem LimPlusConst states limit function f x c x 0 equals l limit function f x x c equals l Exercise 413 4 The problem consists assumption limxc f x l cid2 0 cid41 δ1 cid2 0 δ1 x1 cid2 0 x1 c δ1 cid41 cid3 cid3f x1 l cid4cid4cid4 cid3 cid3 cid41 conjecture limx0 f x c l cid2 cid4 0 cid4 δ cid2 0 δ x cid2 0 x 0 δ cid3 cid3f x c l cid3 cid3 cid4 cid4cid4cid4 The proof planner ﬁrst decomposes conjecture assumption proof This yields new assumption f vx1 l vcid41 new goals 0 vδ f cx c l ccid4 conjecture The ﬁrst goal directly closed TELLCS constraint vσ The second goal tackled method SOLVE uses new assumption f vx1 l vcid41 Hence results new goals E Melis et al Artiﬁcial Intelligence 172 2008 656684 vcid41 vx1 cid2 ccid4 cx c 663 13 14 Now TELLCS applicable sends inequalities constraint solver Continuing planning process decomposition initial assumption yields goals 15 vx1 vx1 c 0 c cδ1 16 decomposition initial conjecture yields assumptions cx 0 cx vδ Now goals 15 16 follow mathematically assumptions unfortunately SOLVE applied goals inequality assumptions terms vx1 c cx uniﬁed A intelligent instantiation eager4 instantiation variable vx1 cx c unblock planning process goals 15 16 instantiated cx c c 0 cx c c cδ1 simpliﬁed cx 0 cx cδ1 closed SOLVE assumptions cx 0 cx vδ Thus need variable instantiation ondemand usual schedule end proof planning process In summary hardwired planning algorithm method application backtracking variable instantiation impedes mathematically motivated proof constructions ﬂexible combination For reason propose ﬁrst decompose proof planner operations independent Secondly shall introduce new notion strategy mentioned Section 2 preliminaries Apart considerations led new abstract level control control application components method application backtracking variable instantiation 4 Proof planning multiple strategies Our monolithic proof planner cid2MEGA decomposed problem solving process ﬂexible com bination cooperation problem solving operations guided explicit strategic control knowledge respective mathematical domains This achieved decomposition planner independent algorithms making strategies ﬁrst class citizens use algorithms speciﬁc methods control rules adding new algorithms external systems related strategies metareasoning application strategic level control Decomposition The decomposition functionalities original planner gives separate independent algorithms different plan reﬁnements modiﬁcations combined ways These new algorithms generalized extended original functionality Moreover additional algorithms introduced belong original core functionalities proof planner More concretely decomposed original planner following procedures PPlanner reﬁnes proof plan applying methods InstVar reﬁnes proof plan instantiating variables BackTrack modiﬁes plan backtracking previous choice point The following algorithms new added framework 4 Before goals closed 664 Exp ATP E Melis et al Artiﬁcial Intelligence 172 2008 656684 reﬁnes proof plan expanding complex steps reﬁnes proof plan calling external theorem proving solve subproblem described case studies Section 62 CPlanner reﬁnes proof plan transferring steps source proof plan target proof plan To simplify matters shall focus PPlanner InstVar BackTrack remainder article relevant case studies Section 6 Strategies A strategy deﬁned algorithm parameter instantiations It determines particular search behavior active Each strategy speciﬁc type present description type BackTrack InstVar ATP PPlanner The procedure backtracking instantiated different techniques backtracking Different strategies type BackTrack realize different kinds backtracking chronological backtracking different kinds intelligent goaldirected backtracking Different InstVar strategies employ constraint solvers algebra systems external reasoning systems compute suitable instantiation variable The generalized InstVar algorithm employs means instantiate variables controlled par ticular InstVar strategies PPlanner strategies insert methods proof plan For instance examples mentioned Sec tion 61 typical cid4δproofs involve reasoning inequalities Hence PPlanner strategies called SolveInequality deﬁned Section 51 illustration Metareasoning control A set different strategies ingredient sophisticated overall problem solving behavior Another ingredient important ﬂexible control guides application combination strategies The ﬂow control predeﬁned computed This difﬁcult task shall use blackboard architecture implement metareasoning choice right strategy For human mathematical problem solving Schoenfeld 46 makes similar observation As person begins work problem case heuristic techniques appear appropriate In consequence having mastery individual heuristic strategies component successful problem solving Selecting pursuing right approaches recovering inappropriate choices equally important pp 9899 5 Implementation We shall present technical realization proof planning multiple strategies MULTI planner new cid2MEGA First discuss strategies strategic control reasoning explain architecture implementation 51 Strategies As mentioned strategy encapsulates certain problem solving behavior context particular way prove theorem Technically strategy conditionaction pair The condition describes legal conditions applicability action includes algorithms strategy employs values parameters Strategies represented frame like datastructures Figs 14 examples The overall theorem proving job driven dynamic listing tasks Strategies respond tasks include open goals closed variable instantiations computed lemmas proven demands This elaborated discussion architecture Section 531 E Melis et al Artiﬁcial Intelligence 172 2008 656684 665 Fig 1 The SolveInequality strategy Fig 2 The InstVar strategy InstIfDetermined PPlanner strategies A PPlanner strategy consists set methods list control rules termination condition When PPlanner strategy invoked PPlanner algorithm works methods speciﬁed strategy Similarly evaluates speciﬁc control rules Hence PPlanner strategies provide means structure set methods control A strategy terminates operation termination condition satisﬁed The control strategy determined control rules usual choice points goal method selected However PPlanner algorithm sets choice point modiﬁed control rules order interrupt processing termination condition satisﬁed This important feature cooperation strategies strategy suspended inner choice point strategy As example PPlanner strategy consider SolveInequality Fig 1 SolveInequality employs methods control rules proof planning cid4δproofs That captures common proof patterns heuristics cid4δproofs problems involve manipulationreduction inequalities real numbers This application situation expressed condition inequalitytask Its termination condition holds soon equalities inequalities goals left InstVar strategies The application method PPlanner strategy leads partial instantiation variables result matching parameters method current open goal assumptions Now InstVar strategies provide additional means instantiate variables constraint solver algebra oracle compute proper instantiation The algorithm InstVar parameter function computes instantiation variable For instance variables occur constraints collected constraint solver COSIE instantiated InstIfDetermined ComputeInstFromCS Figs 2 3 respectively The instantiation differs respect current state constraint solver InstIfDetermined applicable instantiation variable uniquely determined constraints collected far unique instantiation carried Compute InstFromCS applicable instantiation task variables constraints collected Its computation function requests constraint solver return instantiation consistent constraints collected far 666 E Melis et al Artiﬁcial Intelligence 172 2008 656684 Fig 3 The InstVar strategy ComputeInstFromCS Fig 4 The BackTrackStepToTask strategy Fig 5 The strategic control rule delayComputeInstCosie Other possible function parameters InstVar algebra mathematical calcula tion package compute value variable BackTrack strategies The parameter strategy function computes set steps deleted strategy removes steps computed function steps depend For instance strategy BackTrackStepToTask Fig 4 instantiates BackTrack algorithm function stepbacktotask When BackTrackStepToTask applied deletes steps computed far takes task current task The applicability condition BackTrackStepToTask requests current task initial conjecture 52 Metareasoning strategic control rules Explicit control rules successfully PRODIGY 52 important ingredient knowledgebased proof planning They context code procedural mathematically knowl edge sense solve Technically control rule consists IF THENpart IFpart proposition describes features proof plan states planning history current theory The THENpart modiﬁes restricts list alternatives choice point goals methods These control rules marked tactic Strategic control rules marked strategic control choice strategy An example delay ComputeInstCosie declarative representation given Fig 5 The IFpart checks open goals expressed predicate goaltasks potential applications strategy ComputeInstFromCS Fig 3 expressed condition joboffer If case THENpart rejects applications ComputeInstFromCS Intuitively strategic control rule means long E Melis et al Artiﬁcial Intelligence 172 2008 656684 667 open goals apply strategy ComputeInstFromCS lead instantiations search space bushy An advantage kind explicit strategic control rules easily modiﬁable For instance control rule delayComputeInstCosie removed replaced control rule By contrast hardcoded case planner extension change requires reimplementation main control procedure Moreover strategic control rules MULTI ordered currently user potentially knowledge sources agents evaluated order A rule thumb rules ordered generality speciﬁc strategic control rules listed ﬁrst general ones later Blackboard systems separate control knowledge source algorithm control algorithm independent reasoning task This led hierarchical blackboards layers control layer deals control layer There metameta level appeared need case studies However easily extended direction need arises How sensitive MULTI respect strategic rule ordering Indeed order matters In case studies reported worked ﬁxed ordering theorems domain ordering speciﬁcally tuned followed general principle speciﬁc rules general ones This worked far case studies subject research 53 The MULTI The cooperation components MULTI proof plan reﬁnement modiﬁcation handled blackboard architecture 18 In order solve problem components called knowledge sources literature blackboard systems place current solution state blackboard knowledge sources access The activation knowledge source determined data blackboard created knowledge sources extra control knowledge In sophisticated blackboard systems control ﬁrstclass citizen For instance HEARSAYIII 19 BB1 24 architectures employ separate blackboards blackboard reason problem blackboard reason control decision applicable knowledge sources apply So MULTI control ﬁxed priori The application knowledge sources triggered events controlled metareasoning Fig 6 MULTIs blackboard architecture 668 E Melis et al Artiﬁcial Intelligence 172 2008 656684 Fig 7 MULTIs main stages 531 The architecture The architecture shown Fig 6 Dashed arrows indicate control ﬂow solid arrows indicate data ﬂow changes content repository blackboard The architecture consists blackboards current state proof proof blackboard control problem control blackboard The proof blackboard contains current proof plan planning history strategies knowledge sources working proof blackboard The control blackboard contains repositories store organize job offers demands memory entries explained The MetaReasoner knowledge sources working control blackboard It evaluates strategic control rules order rank job offers A Scheduler checks control blackboard highest ranked job offer executes corresponding strategy A strategy posts applicability job offer control blackboard current situation satisﬁes strategys condition A job offer pair consisting strategy task task goal strategy supposed work Whereas job offers standard concepts blackboard systems5 use additional repositories called mands memory support interrupt A strategy interrupt processing gets stuck needs strategy run continue If case strategy interrupts algorithm places appropriate mands control blackboard stores execution status memory later continuation The demand include prove lemma compute additional value Typically strategic control prefers job fers responding demand The strategy posts job offer later reinvocation control blackboard When job offer scheduled later interrupted strategy continues continuation information memory The overall mechanism follows cycle Fig 7 Job Offers Applicable strategies post applicability job offer control blackboard Guidance The MetaReasoner evaluates strategic control rules ranks job offers Invocation The scheduler calls strategy highest ranked job offer Execution The strategy executed places results proof blackboard An interrupt termination result new demands new memory entry control blackboard This cycle wellknown control loop expert systems blackboard architectures 532 Default strategic control The actual sequence reﬁnements modiﬁcations proof plan determined MetaReasoner evaluates strategic control rules While predeﬁned problem solving behavior general turned useful default control regime The default control operationalized strategic control rules manage demands memory preferdemandsatisfyingoffers prefer memoryoffers defermemoryoffers strategic control rules preferbacktrackif failure rejectappliedoffers 5 Job offers called knowledgesource activation records KSAR systems E Melis et al Artiﬁcial Intelligence 172 2008 656684 669 The rule preferdemandsatisfyingoffers suggests prefer job offer job satisﬁes demand control blackboard Similarly prefermemoryoffers suggests prefer job offer job offer interrupted strategy memory demands strategy execution satisﬁed defermemoryoffers defers job offers interrupted strategy memory unsatisﬁed demands The purpose preferbacktrackiffailure rule combine goaldirected backtracking strategies PPlanner When PPlanner strategy fails interrupts stores status current ex ecution memory The strategic control rule preferbacktrackiffailure suggests backtrack assigning high priority job offer BackTrackStepToTask strategy failing goal The idea control rule rejectappliedoffers strategy failed task tried task Hence rule rejects job offers strategies unsuccessfully applied task As shall case studies speciﬁc strategic control rules overwrite default rules necessary 533 Discussion architecture A blackboard architecture far simple architectures current automated reasoning systems use ﬂexible sophisticated control regime example multiagent Since strategy proactive easily encapsulated agent overall search behavior result structure negotiation strategy agents This particularly appropriate control knowledge local strategies In case mathematical problem solving theorem proving caseat general While plenty local knowledge pertains highly specialized tricks trade mathematical subﬁeld great deal general knowledge ﬁnd proof general proof techniques guide search Hence Alan Schoenfeld suggests 46 pp 134135 useful think resources6 control qualitatively different deeply intertwined aspects mathematical behavior Therefore decided blackboard architecture separate boards reﬂects distinction domain reasoning control reasoning The specialized knowledge rearrange brackets deal inequalities stored local methods tactic control rules Of course unstructured negotiation large set agents hardly practice multi agent systems structuring devices holonic multiagent systems institutions invented overcome problems In case architectural borderline blackboard multiagent systems hazy seen way 6 Evaluation For evaluation taken problems mathematical domains including cid4δproblems residues classes permutation groups homomorphism text books mathematics Some cid4δproblems posed challenges Woody Bledsoe late 1980s 5 challenge theorems solved current automated theorem proving systems And Lim require extensive use userprovided lemmata control settings order come proof We solved Woodys challenges able prove cid4δtheorems taken 4 cid4δproofs standard text book fact reach technology Another large class problems taken 6 Schoenfeld views resources particular domain 1 informal intuitive knowledge domain 2 facts deﬁnitions like 3 algorithmic procedures 4 routine procedures 5 relevant competencies 6 knowledge rules discourse domain 46 pp 5455 670 E Melis et al Artiﬁcial Intelligence 172 2008 656684 domain residue classes Further experiments reported include permutation group problems 11 homomorphism problems 42 theorem 2 irrational 49 At end section compare standard proof planning old cid2MEGA proof planner multi strategy approach 61 Proof planning cid4δtheorems The domainspeciﬁc strategies tackle cid4δproblems PPlanner strategy SolveInequality InstVar strategy ComputeInstFromCS Section 2 complemented domainindependent BackTrack strategy BackTrackStepToTask Using default strategic control described Section 532 strate gic control rule delayComputeInstCosie Section 52 MULTI proceeds follows default All goals inequalities goals decomposed inequalities handled method SolveInequality When goals closed ComputeInstFromCS calls constraint solver COSIE instantiates vari ables If method applicable goal BackTrackStepToTask invokes backtracking Essentially default approach corresponds old proof planning sufﬁces solve problems Lim LIM theorem limit product functions equals product limits solved classical proof planners reach classical searchbased systems Proof planning multiple strategies solve harder challenges remainder section shall discuss default approach modiﬁed 611 Eager instantiation The theorem LimPlusConst introduced Section 3 shows usual delay variable instantiation end appropriate A suitable control instantiate variable soon sufﬁcient knowledge instantiate available This expressed general metareasoning rule instantiated concrete situation hand EagerVariableInstantiation IF THEN instantiate variable knowledge instantiate variable How rule technical There different sources suitable instantiation different proof plan situations require different actions ﬁnd good instance For example external systems algebra constraint solver classical search based prover called demand provide value variable In order solve cid4δproblems exploits constraint solver COSIE handles restrictions variables reals In case InstVar strategy InstIfDetermined encapsulates necessary functionality COSIE EagerVariable Instantiation rule IF value variable uniquely determined currently collected constraints COSIE THEN instantiate variable More concretely process works follows cooperation InstIfDetermined SolveInequality controlled rule eagerinstantiate SolveInequality It guides interrupt choice point PPlanner algorithm ﬁres COSIE sends trigger variable unique value This interrupts SolveInequality triggers strategy place demand InstIfDetermined demand repository control blackboard After instantiation variable InstIfDetermined reinvokes SolveInequality Proof planning theorem LimPlusConst illustrates cooperation strategies As described Sec tion 3 standard proof planning fails prove goals vx1 vx1 c 0 c cδ1 17 18 E Melis et al Artiﬁcial Intelligence 172 2008 656684 671 When goals tackled SolveInequality constraints COSIE uniquely determine value variable vx1 cx c Hence strategic control eagerinstantiate ﬁres interrupts SolveInequality triggers placing demand control board InstIfDetermined After application InstIfDetermined reinvokes interrupted application SolveInequality memory With instantiation vx1 goals 17 18 cid3 cid3cx c c cid3 cid3cx c c cid3 cid3 0 cid3 cid3 cδ1 Now method calls arithmetic simpliﬁer simpliﬁes goals cx 0 cx cδ1 19 20 21 22 follow immediately given assumptions Other cid4δproblems similar solved way Section 613 Some residue class conjectures Section 62 require eager variable instantiation value computed external systems 612 Failure reasoning The failure prove ContIfDerivative theorem Section 3 shows proof planning process blocked impasse occur inside strategy choosing strategy In ﬁrst case goal closed PPlanner strategy method applicable failure recorded strategy interrupted discussed In second case strategy applicable failure recorded cases strategic control rules invoked reason failure Some automated reasoning systems default behavior example critics called impasse So MULTI Its default behavior encoded strategic control rule preferbacktrackiffailure guides application strategy BackTrackStepToTask However default reaction variety possible reaction Failure reasoning hard wired ﬁxed coded strategic control rules analysis frequent failures possible reactions led number strategic rules triggered failure situation suggest suitable proof plan modiﬁcations reﬁnements The following failurerelated metareasoning rules cid4δproofs For failure reasoning 34 Case split introduction Some methods introduce goals called conditions If conditions proved main goal solved impasse resolved case split failed condition main goal shown cases ﬁrst assumption condition holds second negation true It appropriate introduce case split unconditionally open goal C blow search space Hence modiﬁcation controlled metareasoning rule captures intuition CaseSplitIntroduction IF THEN introduce case split C C assumed failing condition C method M solve main goal application M The proof theorem ContIfDerivative provides example strategic control rule As described Section 3 proof planning initially fails prove condition cx 0 This failure triggers case split method SolveInequality reduces main goal f cx f ccid4 Now SolveInequality prove goal f cx f ccid4 twice ﬁrst case assuming cx 0 second case assuming cx 0 In ﬁrst case SolveInequality proceeds previously described Section 3 derives condition cx 0 assumption The second case proved differently ﬁrst SolveInequality simpliﬁes hypothesis cx 0 cx cid2 0 cx Now equation simplify goal f cx f ccid4 0 ccid4 follows assumption 672 E Melis et al Artiﬁcial Intelligence 172 2008 656684 This pattern failure reasoning mathematical domains general pattern actual case split depends mathematical domain Typical examples domaindependent case splits general case split C C C case split real numbers 0 0 0 case split natural numbers n 1 n 1 case split set theory x S x S Unblock desirable steps More proofs exhibit common pattern particular combination proof steps If steps blocked pattern proof search able analyze unblock This formulated follows UnblockDesirableSteps IF THEN perform steps enable S strategy method S desirable blocked How know step desirable And steps enable S The following elaborates example S strategy ComputeInstFromCS Consider theorem LimDiv states limit function 1 x point x c 1 c c cid16 0 More formally cid5 cid5 cid5 cid4 0 cid4 δ 0 δ x x cid16 0 δ x c 0 cid3 cid3 cid3 cid3 1 x 1 c cid3 cid3 cid3 cid3 cid4 cid6cid6cid6 LimDiv particularly hard problem automated theorem proving far solved An important method tackle problem FACTORIALESTIMATE It applied inequality goals form t t cid13 e The method postulates existence positive real number v creates simpler goals 0 v t cid13 cid3 v t e v Proof planning LimDiv theorem works follows SolveInequality applied theorem composition initial goal results new goals 0 vδ 1 ccid4 SolveInequality closes ﬁrst cx goal TELLCS simpliﬁes second goal ccx ccid4 Now continues application cx c FACTORIALESTIMATE reduces goal simpler subgoals 0 v cx c cid3 v c cx v ccid4 new auxiliary variable v These goals closed constraint solver TELLCS Since goals closed strategy ComputeInstFromCS highly desirable provide instances variables vδ v These computed constraint solver COSIE fails compute unique value vδ v far collected constraints 1 c cx c ccid4 0 vδ v 0 v c cid16 0 v cid2 cx c 0 ccid4 Hence application ComputeInstFromCS blocked To overcome problem tighten constraints proof planning unique value derived constraint store This technique implemented strategic control rule unblock constraints works follows If goals closed unique value current constraint store unblockconstraints invoked analyze current proof plan constraints This tracking previous applications TELLCS order derive tighter constraints More concretely LimDiv theorem strategy unblockconstraints traces applications TELLCS closed goals c cx v ccid4 cx c cid3 v The strategy SolveInequality reduces reopened goals method COMPLEXESTIMATE passes resulting constraints straint solver COSIE This leads constraint store variables v1 v2 introduced application COMPLEXESTIMATE E Melis et al Artiﬁcial Intelligence 172 2008 656684 673 ccid4 0 v 0 vδ cid2 ccid4 v 2 v2 c cid16 0 v2 1 v 2 cid2 c2 v cid3 v1 vδ ccid4 v 2 0 v1 c vδ 0 Now following instantiations computed set constraints v2 cid12 2 v1 cid12 c 1 v cid12 c2 vδ cid12 min ccid4 c2 8 2c1 solves problem c2 This isolated example cid4δproofs require kind failure reasoning Moreover 2 control rule unblockconstraints applicable domains constraint solvers These cases basically cover essence proof planning cid4δtheorems reader wonder tricks trade collected In words mathematical knowledge acquisition required cover small mathematical subﬁeld All isolated formulated thirty methods including basic ones half dozen strategies domain cid4δproofs A core set theorems proven strategies SolveInequality UnwrapAss However methods insufﬁcient solve theorems involving limits fractions special cases required methods ﬁnally prove large class cid4δtheorems 4 The main en gineering effort detect general pattern capture appropriate data structures method strategy Once work subclasses theorems provable problems We estimate effort operationalizing mathematical thought methods twice time resources takes human novice understand master mathematical subﬁeld 613 Empirical results Our strategies methods general generic possible theorems given theory context cid4δtheorems run setting methods strategies The control rules ordered general speciﬁc domains remained ﬁxed encountered problem solve Then new method new control rule possibly new strategy implemented tested This mirrors situation maths student improves skills learnsin case acquire new methods strategies However set ﬁxed problems rerun proved new setting The proved large number cid4δtheorems seventy main source textbook analysis 4 similar problems formulated proven In fact claim theorems routinely reach automated proof planning current set methods strategies control rules essentially sufﬁcient domain This achievement appeared horizon decade ago Now empirically test evaluate ﬁnal results A comparison traditional automated theorem proving systems possible relatively simple cid4δtheorems let difﬁcult theorems able solved systems Hence comparison previous monolithic proof planning appears illuminating Table 1 presents examples cid4δproofs solution requires ﬂexible instantiation variables explicit failure reasoning The columns ii iii iv denote case split introduction ii unblock constraint solving iii lemma speculation variable dependencies analysis iv ﬂexible variable instantiation A discussion case split introduction constraint solving ii ﬂexible variable instantiation iv presented previous paragraphs Lemma speculation iii wellknown technique inductive theorem proving speculated lemma ensures applicability induction hypothesis We technique overcome failure desirable method application speculation lemma enables application desired method 674 E Melis et al Artiﬁcial Intelligence 172 2008 656684 Table 1 Typical cid4δproofs solution require ﬂexible variable instantiation metareasoning failures The column records case split ii unblock constraint solving iii lemma speculation variable analysis iv records ﬂexible variable instantiation 1 1x 1 Conjecture limx0f x f 0 cont f limxa f x l limxa f x l limxa f x l limxa f x f limxa f x f cont f limx2 limxc f x lf limxc gx lg x gx cid16 0 limxc f x limx f x l limx 0 x limx0 f x l limxa f x l limx0 f 1 x l limx f x l limx0 f x l 0 limx0 f x l limxc f x l limx0 f x c l x x x ii x x x f x gx lf lg iii x x x x iv x x x Another technique analyzes variable dependencies focuses variables occur subgoals If goal proved caused constraints shared variables Hence instead backtracking pattern suggests solve closed goal different manner Actually 30 70 theorems involve ﬂexible instantiation variables failure reasoning previous proof planning systems solve Also high percentage problems require strategic reasoning demonstrates crucial role strategic knowledge domain When MULTI previous proof planning old cid2MEGA λclam solve problem approaches differ respect runtime wrt traversed search space The reason strategic reasoning overhead proof planning multiple strategies minimal class problems The situation different nontheorems failure reasoning produce substantial overhead For instance consider nontheorem lim xa f x l lim xa f x l similar second problem Table 1 When guided failure reasoning introduces case split nontheorem case split necessary actually solve second problem Table 1 This considerably enlarges search space failure point backtrack explores far alternatives 62 Proof planning residue class theorems This case study illustrates mathematically motivated proof techniques coded strategies ﬂexible combination cooperation strategies knowledgebased orchestration services external systems metareasoning appropriate choice strategy exploits knowledge performance reliability strategy knowledge failure analysis statistical knowledge There PPlanner strategies large case study TryAndError EquSolve Re duceToSpecial The strategy TryAndError makes exhaustive case analysis possible residue class theorems ﬁnite domains In contrast strategy EquSolve avoids exhaustive case analysis reducing assumptions conclusion equations proves goals equational reasoning ReduceToSpe cial uses wellknown simpler theorems special cases database Two structures different cardinality isomorphic Further strategies model typical human strategies proving theorems residue classes discrimi nant technique shown And ﬁnally strategies external systems cooperation E Melis et al Artiﬁcial Intelligence 172 2008 656684 675 InstVar strategy ComputeInstbyCasAndMG calls algebra systems MAPLE GAP 21 model generator SEM 60 compute suitable values variables InstVar strategy ComputeDiscriminantbyHR calls HR provide instantiation metavariable sat isﬁes required properties7 strategy NotInjNotIso models human mathematical technique infer contradiction assuming exists isomorphism structures shows mapping injective ATP strategy CallTramp calls appropriate external automated theorem prover More technically ATP strategy calls external prover mathbus MathServe 61 details MathServe The ATP strategy CallTramp calls Tramp mediator 31 runs provers Otter 29 Bliksem 14 SPASS 53 concurrently 621 Residue classes To refresh maths congruence Take number 3 observe following 5 divided 3 1 remainder 2 Now number 8 divide 3 2 remainder 2 We write 8 2 mod 3 8 congruent 2 modulo 3 The interesting thing numbers yield remainder modulo n partition called residue class compute classes single numbers The congruence class 2 mod 3 denoted 23 Typical binary operations residue classes denote addition multiplication subtraction residue classes For example 23 13 33 03 These observations centuries old number theory students learn basic algebraic properties residue classes residue class structure semigroup ring group This number theory recently new intensive relevance cryptography properties particular group property crucial cracking better able crack code A set residue classes integers set congruence classes modulo integer n Zn subset Zn instance Z313 16 36 56 Z313 denotes set Z3 residue class 13 IsoX Y means X Y isomorphic HomX Y means homomorphism X Y Injh X Y means mapping h X Y injective Surjh X Y means mapping h X Y surjective The ﬁrst kind problems looked conjectures basic algebraic properties classify given residue class structure For instance consider set Z5 multiplication Z5 In order classify structure Z5 monoid Z5 closed multiplication associative unit element e The property element inverse hold structure group These conjectures formalized closedZ5 xZ5yZ5x y Z5 assocZ5 xZ5yZ5zZ5x y z x yz unitZ5 e eZ5yZ5y e y e y y inverseZ5 e5 xZ5yZ5x y e5 y x e5 Other theorems concerned isomorphism properties given residue class structures prove refute exists bijective homomorphism h For instance structures Z5 Z5 x y 15 isomorphic operation op x y 15 second structure denotes operation adds residue classes x y x y adds 15 By contrast structures Z5 Z5 isomorphic A formalization ﬁrst conjecture Z5 x y 15 Iso cid4cid4 cid2 cid2 Z5 restated hF Z5Z5Inj cid4 cid2 h Z5 op Surj cid4 cid2 h Z5 Z5 op cid4 cid2 h Z5 Z5 op Hom 7 HR spirit Doug Lenats AM conjectures mathematical theories given empirical data It developed Simon Colton 12 supervision Alan Bundy won BCSCPHC distinguished dissertation award best paper award AAAI 2000 676 E Melis et al Artiﬁcial Intelligence 172 2008 656684 The second conjecture formalized cid4 cid2 Z5 Z5 Iso restated cid4 cid2 h Z5 Z5 hF Z5Z5Injh Z5 Surjh Z5 Z5 Hom 622 Proving basic algebraic properties residue classes The PPlanner strategies mirror general mathematical proof techniques context 1 exhaustive case analysis TryAndError 2 equational reasoning EquSolve 3 application special theorems stored mathematical database retrieved applied strategy ReduceToSpecial Both TryAndError EquSolve cooperate InstVar strategy ComputeInstbyCasAndMG computes value instantiation variable calling algebra CAS model generator MG Once value instantiation eager discussed cid4δproofs Section 611 TryAndError reliable albeit obvious slowest strategy It creates large proof plans size depends cardinality residue class The proof plans EquSolve independent size residue class general smaller proof plans TryAndError However strategy EquSolve fails problems reduced equations result equations solved algebra systems ReduceToSpecial independent size residue class set If succeeds provides compact proof plans success dependsas expectedon suitable theorems database Therefore MULTI ﬁrst employs fast successful strategies fail plan ner employs slower reliable strategies This general principle implemented strategic control rule fastbeforereliable orders strategies far order ReduceToSpecial EquSolve TryAndError 623 Isomorphism theorems The theorems class state given residue classes isomorphic They proof planned strategies TryAndError EquSolve ReduceToSpecial First strategies sequen tially If succeeds Otherwise strategies cooperate shall works The general idea cooperation switch PPlanner strategies backtrack case failure This makes sense backtracking erase valuable progress promising strategies avail able use information continue problematic goal Technically idea encoded strategic control rule preferotherjobiffailure It ﬁres important goals major subproblems injectivity surjectivity homomorphism deﬁnition case deﬁnition isomorphism The proof planning process generates compact interesting proof plan results following cooperation strategies First EquSolve applied theorem calls ComputeInstbyCasAndMG eager instantiation variable Then EquSolve solves homomorphism surjectivity subproblems The resulting subproblem injectivity proved EquSolve Thus guided strategic control rule preferotherjobiffailure applies strategy ReduceToSpecial This strategy solves injectivity goal applying theorem example following A surjective mapping ﬁnite sets cardinality injective proved stored database 624 Nonisomorphism problems Nonisomorphism problems solved strategies TryAndError EquSolve ReduceToSpe cial However interesting mathematically motivated proof techniques nonisomorphism theo rems 1 If structures isomorphic share algebraic properties Thus order structures isomorphic sufﬁces ﬁnd property holds structure Such E Melis et al Artiﬁcial Intelligence 172 2008 656684 677 property called discriminant This general mathematical technique realized combination PPlanner strategy EquSolve HR strategy ﬁnd discriminants ATP strategy InstVar 2 Proof contradiction assume exists isomorphism structures injective This technique modeled strategy NotInjNotIso The strategic control rule fastbeforereliable ranks NotInjNotIso EquSolve TryAndError usually efﬁcient application EquSolve efﬁcient TryAndError In following outline techniques application residue class problems Discriminants This technique proving structures S1 S2 isomorphic consists following steps ﬁrst general theorem 1 XY P X P Y X cid16 Y X Y variables structures P property store database Then 2 ﬁnd discriminant P 3 P S1 holds 4 P S2 holds The strategy EquSolve introduces goals 3 4 metavariable discriminant P Next EquSolve interrupts waits instantiation P computed strategy ComputeDiscriminantbyHR The InstVar strategy ComputeDiscriminantbyHR calls HR succeeds general theorem 1 proven In order ﬁrstorder automated theorem provers concurrently run ATP strategy CallTramp All domainindependent proof plans 3 4 P S1 P S2 domainspeciﬁc generated PPlanner strategies TryAndError EquSolve ReduceToSpecial The orchestration services works demanddriven prove 3 4 ﬁrst strategy EquSolve applied interrupts triggers demand This demand satisﬁed InstVar strategy ComputeDiscrimi nantbyHR ATP strategy CallTramp prove goal generated HR When strategies succeed EquSolve reinvoked tackles goals 3 4 respect discriminant If EquSolve fails prove subgoals ReduceToSpecial TryAndError applied guided strategic control rule preferotherjobiffailure More applications discrimination technique discussed 37 Proof contradiction Given structures S1 S2 NotInjNotIso constructs proof contradiction First strategy assumes exists isomorphism h S1 S2 tries ﬁnd elements c1 c2 S1 c1 cid16 c2 hc1 hc2 This contradicts postulated injectivity h hc1 cid16 hc2 follow c1 cid16 c2 In order hc1 hc2 NotInjNotIso starts goal computes equality substitutions obtains equational goal solved algebra systemMAPLE The strategy NotInjNotIso produce short proofs structures large sets However choosing c1 c2 constructing appropriate sequence equality substitutions hard terminate To overcome dilemma experimented randomization restart techniques known 22 The basic idea cutoff restart randomized algorithm possibly times given problem let run long time How cutoff restart derived statistical knowledge extracted previous experiments 30 To exploit technique multistrategy proof planning added control rules NotInjNotIso randomly select c1 c2 equational substitutions The cutoff restart option captured control rules interruptifcutoff interrupts NotInjNotIso run time exceeds predeﬁned cutoff poses demand backtrack BackTrack strategy BackTrackPPlannerStrategy The strategic control rule reject appliedoffers described Section 532 prevents NotInjNotIso applied initial goal However rejectappliedoffers overwritten speciﬁc strategic control rule restart NotInjNotIso allows application NotInjNotIso times More examples empirical results 33 678 E Melis et al Artiﬁcial Intelligence 172 2008 656684 Table 2 Results experiments residue class problems Simple properties Magmas Abelian magmas Semigroups Abelian semigroups Quasigroups Abelian quasigroups Abelian monoids Abelian groups Total All 8567 244 2102 2100 1891 536 211 1001 18963 Z5 3049 53 161 592 971 207 97 276 5406 Z6 4152 73 1114 1025 738 257 50 419 8128 Z10 743 24 35 62 70 11 6 49 1000 Isoclasses Z5 36 26 3 1 9 3 1 1 80 Z6 7 5 8 12 2 2 1 1 38 Z10 14 6 1 2 10 1 1 1 36 625 Empirical results We constructed testbed large number residue classes 20000 Their cardinality range 2 10 binary operations systematically constructed basic operations These structures classiﬁed terms algebraic categories theorems proved order identify different iso morphism classes Table 2 presents results classiﬁcation Altogether classiﬁed 18963 structures respect algebraic properties required proof plan 60000 theorems To test validity techniques isomorphism nonisomorphism Sections 623 624 proved properties structures Z5 Z6 Z10 We identiﬁed 160 isomorphism classes required proof plan 1300 nonisomorphism theorems 2000 isomorphism theorems The successfully employed ReduceToSpecial 20 EquSolve 23 proofs remaining 57 theorems solved TryAndError strategy 88 isomorphism proof plans constructed cooperation EquSolve ReduceToSpecial TryAndError 12 isomorphic theorems shown TryAndError For nonisomorphism problems 18 proof plans discriminant remaining 82 NotInjNotIso strategy There single case combined proof techniques realized PPlanner strategies failed This success entirely proof planning multiple strategies cooperation Many theorems class range traditional automated theorem proving systems Thus challenge motivation experiments difﬁcultyalthough examples pretty hardbut mathematically interesting different proofs generated Our tested ﬁrstorder prover WALDMEISTER 25 particularly welltuned equational theorem proving Moreover WALDMEISTER settings formalization theorems highly tuned WALDMEISTER expert basis systemspeciﬁc mathematical knowledge Two different control settings suitable nonisomorphism problems problems Under highly speciﬁc circumstances allowed special tuning theorem given WALDMEISTER MULTI performed comparably The proof planner apart general course produced proofs mathematically better structured closer human representation In particular prove hard problems WALDMEISTER WALDMEISTER clear advantage proof planning respect runtime behavior succeeds typically second problems 20 seconds MULTI independently cardinality residue class set A disadvantage WALDMEISTER output format employs extra component structuring presenting proofs usually long structure proof mathematically counterintuitive There usually 150 300 equational reasoning steps structured 10 30 lemmas lemmas sense mathematically necessary succeed In contrast proof planning produces short comprehensible proof plans plans generated ReduceToSpecial EquSolve 1020 steps Proof plans generated TryAndError considerably longer proof plans clearly structured case splits E Melis et al Artiﬁcial Intelligence 172 2008 656684 679 This case study shows theorems range traditional searchbased automated theorem provers8albeit highly tuned special purpose equational reasoningthe difference proof planning striking planned proofs natural mathematically easy read comprehend signiﬁcantly order magnitude shorter Summary The case studies experience empirical work far shows everyday mathematical theorem proving provided common sense mathematical knowledge coded Proof planning signiﬁcantly pushes limit respect naturalness human oriented nature generated proofs ii overall strength terms difﬁculty successfully proven theorems 63 Extensibility ﬂexibility maintenance architecture Other dimensions evaluate multistrategy proof planning versus standard proof planning systems extensibil ity ﬂexibility maintenance When proof planner prove theorem X inappropriate instantiation variables ﬁx extend current instantiation mechanism metavariables change algorithm reﬁnement modiﬁcation functionality proof planner prove X previously proven theorems For new theorem shown code needs changed After ﬁxing proof planner X soon face problematic theorem X 1 code baroque possibly interferes components This evolutionary approach typical knowledge based systems This happened old cid2MEGA The modularity major advantage usage updating maintenance greatly improved 64 Lessons learned Automated theorem proving beautiful process know mathematics This cover eyes blinders hunt cornﬁeld diamondshaped grain corn Mathematicians given great deal direction millennia Let pay attention W Bledsoe 1986 While results recorded paper signiﬁcantly push limits achieved machine today doubt remain How tricks trade highly specialized knowledge coded For classical search based automated theorem prover frozen intellectually time warp 1960s early 70s AI technology representing special tricks mathematical trade considered vice help way wonder prove theorem 23 kind discussion For knowledgebased important virtue provide general means representation reasoning domainspeciﬁc knowledge But general knowledge coded The basic methodology strategic proof planning general purpose planner methods operators control rules strategic control rules guide search classical automated theorem provers algebra sys tems service providers constraint solver mathematical theory invention ﬁnally blackboard architecture orchestrate overall reasoningall general standard technology artiﬁcial intel ligence 8 This reasons chosen data set theorems comparison possible 680 E Melis et al Artiﬁcial Intelligence 172 2008 656684 The domain knowledge represents mathematical techniques heuristic guidance isas suggestsspeciﬁc ﬁeld scrutiny But speciﬁc problems Instead general solve class problems 8 general discussion issue So convinced coded speciﬁc tricks strategies methods control rules After solved problem matter hard solved automated given time tune dials replay A viable criterion coverage range theorems mathematical ﬁeld In particular routine proofs similar proof ideas provable strategies We claim extensive experimentation coded knowledge general sufﬁcient proving class theorems investigated ﬁelds Consider SolveInequality strategy encodes mathemat ical knowledge solve inequality problems cid4δtheorems The SolveInequality strategy instance general heuristic problem solving strategy described Alan Schoenfeld In problem ﬁnd construct useful assume solution given problem With solution hypothetically hand determine properties Once know properties ﬁnd object seek 46 p 23 Could encode general version strategy assume collect properties compute subsumes SolveInequality Well best knowledge Even human mathematical problem solving Schoenfeld points general heuristic strategy provide information solving concrete problem typical heuristic strategy broadly deﬁnedtoo broadly fact description strategy serve useful guide implementation 46 p 70 Rather general strategies ﬁlledin domainspeciﬁc knowledge general strategy summary label class strategies suitable different domains successful implementation heuristic strategies particular domain depends heavily possession speciﬁc subject matter knowledge 46 p 92 Thus SolveInequality seen instantiation assume collect properties compute domain inequality problems real numbers SolveInequality methods control rules turned sufﬁcient class cid4δproofs class theorems ﬁrst year maths students spend months learn In summary development test large sets typical theorems particular mathemat ical ﬁeld demonstrate knowledgebased automated reasoning systemas envisaged Woody Bledsoe 1980s 6can fact built general purpose techniques Once accumulated domain speciﬁc knowledge perform par human expert particular domain But know professional mathematician deﬁnitively prove theorems established mathematical ﬁeld run research problems soon 7 Related work The cid2MEGA MULTI planner characteristics common blackboard systems discussed Sections 53 64 In particular unblocking desirable steps general pattern control reasoning blackboard systems 1317 highly desirable knowledge source applicable reasoning failure suggest invocation knowledge sources unblock desired knowledge source Despite general reasoning pattern concrete implementation strategic control rules rely domain speciﬁc knowledge E Melis et al Artiﬁcial Intelligence 172 2008 656684 681 71 Combination algorithms systems Competitive combinations planning systems 2026 systems automated theorem proving 4751 59 motivated fact single outperforms systems problems Hence combined applies systems parameterizations problem terminates soon succeeds Although multistrategy proof planning competitive combination strategies solve residue class problems calls PPlanner strategies interesting feature cooperation strategies The MULTI planner shares kind cooperation multiagent approach TECHS 15 planning architecture MPA 57 TECHS realizes cooperation automated theorem proving systems wrapping communication facilities agent Each agent uses socalled referees decide information search state communicated agents information received agents integrated search state In MPA planningrelated technologies management functionalities wrapped communica tion facilities For instance MPA 58 plan expansion agents plan critics agents causal link protection constraint consistency A scheduler agent provides services handles allocation resources 72 Proof planning Proof planning CLAM The proof planner CLAM 9 successor λCLAM 44 developed Alan Bundys group Edinburgh Both systems specialize mainly proofs mathematical induction preconditions methods include legal heuristic conditions Control knowledge separated methods In λCLAM proof method atomic compound similar tactics LCF A compound method called strategy structed simpler methods predeﬁned constructors called methodicals similar tacticals 43 For instance compound method THEN M1 M2 ﬁrst applies method M1 M2 Andrew Ireland Alan Bundy extend proof planning CLAM socalled critics means patch failed proof attempts proof planning inductive proofs 2728 Critics CLAM method like entities triggered method failure global effects proof tree More speciﬁcally critic associated method captures patchable exception application method A critic introduce lemma needed wave method In contrast failure reasoning MULTI represented control rules associated particular method Rather reason current proof plan proof planning history The patch failure implemented special procedures methods strategies application invoked general control rules MULTI solves job lemma speculation case analysis way independent hard wired particular methodcritic The need ﬂexibility recognized CLAM For instance ﬁxed order compound meth ods generalization simpliﬁcation induction disable proofs Therefore scoring mechanism developed determine promising expansion proof plan9 In contrast MULTIs control knowledge describes situations choices declaratively selecting small number alternative orderings strategies notion strategy general In systems control heuristic fail failure analysis remains necessity Proof planning IsaPlanner The IsaPlanner 16 recent proof planner developed Edinburgh It linked interactive proof development Isabelle IsaPlanner functional approach proof planning functions applied proof state consisting proof plan continuation IsaPlanner rely predeﬁned declarative methodicals evaluated interpreter Similar MULTI IsaPlanner introduces ﬂexibility proof planning process Moreover IsaPlanner critic time methodical 9 Unpublished work 682 E Melis et al Artiﬁcial Intelligence 172 2008 656684 8 Conclusion future work Proof planning multiple strategies generalizes previous monolithic proof planning process cid2MEGA Different services encapsulated strategies ﬂexibly combined controlled metareasoning Strategies control constitute new hierarchical level problem solving process general current search proof plan This allows separate code mathematical knowledge methods control rules strategies strategic control Proof planning multiple strategies provides convenient framework integrate user First results mixedinitiative proof planning reported 36 island planning 38 initial islands important Heureka Steps provided user works tedious rest proof These techniques successfully challenge theorem stating 2 irrational 49 Future work One difference current cid2mega systemas compared state reported paperconcerns logical representation proofs The enjoys highlevel logical representation assertionlevel makes lowlevel reasoning obsolete 1 One future direction extension proof planning new classes theorems A ﬁrst step direction colleagues Volker Sorge Martin Pollet mathematician Arjeh Cohen applied described techniques Permutation Group problems 11 Another direction current future work accumulate standard proof techniques implement appropriate strategies Proofs induction highly mechanized today systems need Another standard technique diagonalization developed proof plan ning cid2MEGA years ago reimplementing new framework Proofs analogy worked implemented notion context An interesting source book Daniel Solow How Read Proofs collects dozen proof techniques teaching currently implementing proof planning Current proof planning domainspeciﬁc contextual strategies control stark contrast situation mathematician operates speciﬁc context includes current theory development preferences knowledge representation techniques tailored speciﬁc context deﬁnitions formulated way serve current purpose typical techniques prove particular theorem tricks trade typical ﬁeld theorem stated For example theorem continuous function requires certain strategies tackle proof student learns calculus courses theorem group theory requires different set strategies usually taught algebra class The choice prior strategic reasoning determined current context Of course deep human spark mathematical insight creativity correspond switch context happens mathematics proof Fermats theorem But alas computersupported mathematics Another goal nontheorems tried fully implemented The idea strategic control rules model generator ﬁnd counterexample open goal If counterexample strategic control rule interrupt current strategy cause backtracking open goal The strategic control rules use data base typical counter examples typical nontheorems domain check systematically open goal Acknowledgement The work reported paper time span years paper reports state devel opment including year 2004 Many members cid2MEGAgroup contributed directly indirectly ways possibly remember This lively environment work possible like thank More speciﬁcally like thank Chris Benzmüller Serge Autexier particular Martin Pollet Volker Sorge Jürgen Zimmer help case studies E Melis et al Artiﬁcial Intelligence 172 2008 656684 683 The work funded DFGproject MIPPA Me 113621 collaborative research center Sonder forschungsbereich 378 Resource Adaptive Cognitive Processes German National Science Foundation DFG We grateful substantial funding work possible References 1 S Autexier Hierarchical contextual reasoning Computer Science Department Saarland University Saarbrücken Germany PhD thesis 2003 2 O Gandalf CASC14 httpwwwcsjcueduautptpcasc14 1997 3 F Baader Ed Proceedings 19th International Conference Automated Deduction CADE19 Miami Beach FL LNAI vol 2741 SpringerVerlag Germany 2003 4 R Bartle D Sherbert Introduction Real Analysis John Wiley Sons New York 1982 5 W Bledsoe Challenge problems elementary analysis Journal Automated Reasoning 6 1990 341359 6 W Bledsoe I dream AAAI presidential address AI Magazine August 1985 5761 7 A Bundy The use explicit plans guide inductive proofs E Lusk R Overbeek Eds Proceedings 9th International Conference Automated Deduction CADE9 Argonne IL LNCS vol 310 Springer Verlag Germany 1988 pp 111120 8 A Bundy A critique proof planning Festschrift Honour Robert Kowalski 2002 9 A Bundy F van Harmelen J Hesketh A Smaill Experiments proof plans induction Journal Automated Reasoning 7 1991 303324 10 A Church A formulation simple theory types Journal Symbolic Logic 5 1940 5668 11 A Cohen S Murray M Pollet V Sorge Certifying solutions permutation group problems 3 2003 12 S Colton Automated Theory Formation Pure Mathematics SpringerVerlag London 2002 13 D Corkill V Lesser Hudlicka Unifying datadirected goaldirected control D Waltz Ed Proceedings Second National Conference Artiﬁcial Intelligence AAAI82 CarnegieMellon UniversityUniversity Pittsburgh Pittsburgh PA AAAI Press Menlo Park CA 1982 pp 143147 14 H De Nivelle Bliksem User Manual Delft University Technology 1998 15 J Denzinger D Fuchs Cooperation heterogeneous provers T Dean Ed Proceedings 16th International Joint Conference Artiﬁcial Intelligence IJCAI Stockholm Sweden Morgan Kaufmann San Mateo CA 1999 pp 1015 16 L Dixon J Fleuriot IsaPlanner A prototype proof planner Isabelle 3 2003 pp 279283 17 E Durfee V Lesser Incremental planning control blackboardbased problem solver T Kehler S Rosenschein Eds Proceedings Fifth National Conference Artiﬁcial Intelligence AAAI86 Philadelphia PA AAAI Press Menlo Park CA 1986 pp 5864 18 R Engelmore T Morgan Eds Blackboard Systems AddisonWesley 1988 19 L Erman P London S Fickas The design example use HEARSAYIII B Buchanan Ed Proceedings 6th International Joint Conference Artiﬁcial Intelligence ICJAI Morgan Kaufmann Tokyo Japan 1979 pp 409415 20 E Fink How solve automatically Selection problemsolving methods 50 1998 pp 128136 21 GAP GAPGroups Algorithms Programming Version 4 The GAP Group 1998 22 C Gomes B Selman H Kautz J Mostow Eds Proceedings Fifteenth National Conference Artiﬁcial Intelligence AAAI98 Tenth Conference Innovative Application Artiﬁcial Intelligence IAAI98 Madison WI AAAI Press Menlo Park CA 1998 pp 431437 23 P Hayes DB Anderson An arraignment theoremproving logicians folly Memo 54 Dept Computational Logic Edinburgh University 1972 24 B HayesRoth P Hayes A blackboard architecture control Artiﬁcial Intelligence 25 1985 251321 25 T Hillenbrand A Jaeger B Löchner System description WALDMEISTER improvements performance ease use H Ganzinger Ed Proceedings 16th International Conference Automated Deduction CADE16 Trento Italy LNAI vol 1632 Springer Verlag Germany 1999 pp 232236 26 A Howe E Dahlman C Hansen M Scheetz A von Mayrhauser Exploiting competitive planner performance S Biundo M Fox Eds Recent Advances AI Planning Proceedings 5th European Conference Planning ECP99 Durham UK LNCS vol 1809 Springer Verlag Germany 1999 pp 6272 27 A Ireland The use planning critics mechanizing inductive proofs A Voronkov Ed Proceedings 3rd International Conference Logic Programming Automated Reasoning LPAR92 St Petersburg Russia LNAI vol 624 SpringerVerlag Germany 1992 pp 178189 28 A Ireland A Bundy Productive use failure inductive proof Journal Automated Reasoning 16 12 1996 79111 29 WW McCune Otter 20 users guide Argonne National Laboratory ANL909 1990 30 A Meier Randomization heavytailed behavior proof planning Seki Report SR0003 Fachbereich Informatik Universität des Saar landes Saarbrücken Germany 2000 31 A Meier TRAMP Transformation machinefound proofs natural deduction proofs assertion level D McAllester Ed Proceedings 17th Conference Automated Deduction CADE17 LNAI vol 1831 SpringerVerlag Germany 2000 pp 460 464 32 A Meier Proof planning multiple strategies PhD thesis University Saarland FB Informatik Saarbrücken Germany 2004 33 A Meier C Gomes E Melis Randomization restarts proof planning A Cesta D Borrajo Eds 6th European Conference Planning ECP01 LNCS Springer 2001 34 A Meier E Melis Impassedriven reasoning proof planning Proceedings Fourth International Conference Mathematical Knowl edge Management MKM2005 M Kohlhase Ed LNAI vol 3863 SpringerVerlag 2005 pp 143158 684 E Melis et al Artiﬁcial Intelligence 172 2008 656684 35 A Meier E Melis MULTI A multistrategy proof planner R Nieuwenhuis Ed Automated Deduction 20th International Conference Automated Deduction CADE20 Tallinn Estonia LNAI vol 3632 SpringerVerlag 2005 pp 250254 36 A Meier E Melis M Pollet Adaptable mixedinitiative proof planning educational interaction Electronic Notes Theoretical Computer Science 103 C 2004 105120 37 A Meier V Sorge S Colton Employing theory formation guide proof planning J Calmet B Benhamou O Caprotti L Henocque V Sorge Eds Proceedings Joint International Conferences AISC 2002 Calculemus 2002 Marseille France SpringerVerlag Ger 2002 pp 275289 38 E Melis Island planning reﬁnement Seki Report SR9610 Universität des Saarlandes FB Informatik 1996 39 E Melis AItechniques proof planning H Prade Ed Proceedings 13th European Conference Artiﬁcial Intelligence John Wiley Sons Brighton UK 1998 pp 494498 40 E Melis U Leron A proof presentation suitable teaching proofs SP Lajoie M Vivet Eds 9th International Conference Artiﬁcial Intelligence Education IOS Press 1999 pp 483490 41 E Melis J Siekmann Knowledgebased proof planning Artiﬁcial Intelligence 115 1 1999 65105 42 M Pollet E Melis A Meier User interface adaptive suggestions interactive proof Proceedings International Workshop User Interfaces Theorem Provers UITP 2003 Rome Italy 2003 43 J Richardson A Smaill Continuations proof strategies R Gore A Leitsch T Nipkov Eds Short Papers International Joint Conference Automated Reasoning 2001 44 J Richardson A Smaill I Green System description Proof planning higherorder logic λClam C Kirchner H Kirchner Eds Proceedings 15th International Conference Automated Deduction CADE15 Lindau Germany LNAI vol 1421 Springer Verlag Germany 1998 pp 129133 45 A Robinson A Voronkov Handbook Automated Reasoning vol 1 Elsevier 2001 46 A Schoenfeld Mathematical Problem Solving Academic Press New York 1985 47 J Schumann SiCoTHEOsimple competitive parallel theorem provers based SETHEO Proceedings PPAI95 Montreal Canada 1995 48 J Siekmann C Benzmüller S Autexier Computer supported mathematics cid2MEGA Journal Applied Logic 2006 49 J Siekmann C Benzmüller A Fiedler A Meier I Normann M Pollet Proof development OMEGA The irrationality square root 2 F Kamareddine Ed Thirty Five Years Automating Mathematics Kluwer Applied Logic series Kluwer Academic Publishers 2003 50 R Simmons M Veloso S Smith Eds Proceedings Fourth International Conference Artiﬁcial Intelligence Planning Systems AIPS98 Pittsburgh PEN AAAI Press Menlo Park CA 1998 51 G Sutcliffe D Seyfang Smart selective competition parallelism ATP A Kumar I Russell Eds Proceedings 12th International Florida Artiﬁcial Intelligence Research Symposium FLAIRS99 Orlando Florida USA 1999 pp 341345 52 M Veloso J Carbonell M Perez D Borrajo E Fink J Blythe Integrating planning learning The prodigy architecture Journal Experimental Theoretical Artiﬁcial Intelligence 7 1 1995 81120 53 Ch Weidenbach SPASS Version 049 Special Issue CADE13 Automated Theorem Proving System Competition Journal Automated Reasoning 18 2 1997 247252 54 G Weiss Ed Multiagent Systems A Modern Approach Distributed Artiﬁcial Intelligence MIT Press Cambridge MA 1999 55 D Weld An introduction commitment planning AI Magazine 15 4 1994 2761 56 D Wilkins M desJardins A knowledgebased planning Artiﬁcial Intelligence 22 2001 57 D Wilkins K Myers A multiagent planning architecture 50 1998 pp 154162 58 D Wilkins K Myers M desJardins P Berry Multiagent planning architecture Tech rep Stanford Research Institute SRI 1997 59 A Wolf Strategy selection automated theorem proving F Giunchiglia Ed Artiﬁcial Intelligence Methodology Systems Ap plications Proceedings 8th International Conference AIMSA98 Sozopol Bulgaria LNAI vol 1480 SpringerVerlag Germany 1998 pp 452465 60 J Zhang H Zhang SEM A enumerating models C Mellish Ed Proceedings 14th International Joint Conference Artiﬁcial Intelligence IJCAI Montreal Canada Morgan Kaufmann San Mateo CA 1995 pp 298303 61 J Zimmer S Autexier The mathserve semantic reasoning web services IJCAR 2006 62 J Zimmer E Melis Constraint solving proof planning Journal Automated Reasoning 33 1 2004 5188