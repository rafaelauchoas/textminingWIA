Artiﬁcial Intelligence 132 2001 39103 Computer Go An AI oriented survey Bruno Bouzy Tristan Cazenave b Université René Descartes Paris V UFR mathématiques et dinformatique CRIP5 45 rue des SaintsPères 75270 Paris Cedex 06 France b Université Paris 8 Département Informatique Laboratoire IA 2 rue la Liberté 93526 SaintDenis Cedex France Received 4 May 2000 received revised form 21 November 2000 Abstract Since beginning AI mind games studied relevant application ﬁelds Nowadays programs better human players classical games Their results highlight efﬁciency AI methods standard Such methods useful Go programs enable strong Go program built The problems related Computer Go require new AI problem solving methods Given great number problems diversity possible solutions Computer Go attractive research domain AI Prospective methods programming game Go probably domains The goal paper present Computer Go showing links existing studies Computer Go different AI related domains evaluation function heuristic search machine learning automatic knowledge generation mathematical morphology cognitive science In addition paper describes practical aspects Go programming program optimization theoretical aspects combinatorial game theory mathematical morphology Monte Carlo methods 2001 Elsevier Science BV All rights reserved Keywords Computer Go survey Artiﬁcial intelligence methods Evaluation function Heuristic search Combinatorial game theory Automatic knowledge acquisition Cognitive science Mathematical morphology Monte Carlo methods 1 Introduction Since beginning AI mind games Checkers 114115 Chess 121 studied application ﬁelds AI Nowadays programs better Corresponding author Email addresses bouzymathinfounivparis5fr B Bouzy cazenaveaiunivparis8fr T Cazenave 0004370201 matter 2001 Elsevier Science BV All rights reserved PII S 0 0 0 4 3 7 0 2 0 1 0 0 1 2 7 8 40 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 human players classical games Deep Blue Chess 467 Chinook Checkers 117118 Logistello Othello 25 Victoria Gomoku 3 These results highlight efﬁciency AI methods standard These methods useful Go programs However enable AI community build strong Go program The problems related Computer Go require new AI problem solving methods Given abundance problems diversity possible solutions Computer Go attractive research domain AI Prospective methods programming game Go probably domainsfor example tree search classical games related ANDOR tree solving theorem proving constraint satisfaction The current cornerstone game programming AlphaBeta algorithm It discovered early stages AI research regularly improved Computer Go programmers looking cornerstone certainly complex games The Computer Go community reached agreement unavoidable low level modules tactical modules specialists disagree important points Future programs probably use best current possibilities link harmonious way The goal paper present Computer Go showing links existing studies Computer Go different AI related domains evaluation function heuristic search machine learning automatic knowledge generation mathematical morphology cognitive science To difﬁculty Go programming lies ﬁrst necessary compare game Go classical games conventional way In Section 2 combinatorial complexity higher Go twoplayer complete information games We point evaluation position complex Therefore unlike games Section 3 shows Go programs poor rankings human ranking deals results obtained computers compete human players computers play computers As usual games introduce architecture Go program We examine evaluation function Section 4 generation Section 5 tree search Section 6 After expounding key concepts evaluation function based numerous concepts viewpoints focus relationships tree search evaluation function Tree search ﬁnd good evaluation function perform tactical computations useful calculate evaluation function However architecture Go program composed parts The notion abstraction plays important role Go Go programs exhibit structure different levels highest level strategic level lowest level tactical level In order competitive level Go program optimized Therefore Go programmers spend time optimizations In Section 7 present examples possible optimizations different levels abstraction In Section 8 closely related mathematics examine combinatorial game theory 43 deals games sum independent subgames The game Go global game broken local subgames Although local subgames generally dependent theory offers appropriate model game B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 41 Go More precisely strategic level program represent tactical game combinatorial game This theory better applied end game local subgames independent enables calculation value moves endgame greater accuracy In positions devised illustrate theory programs play better best professional players The major current difﬁculty applying theory subgames Go arises high dependence local subgames A problem inherent Computer Go models best results use lot knowledge This need knowledge makes machine learning automatic generation knowledge attractive The best method obtain average Go program rapidly undoubtedly temporal difference method Some symbolic approaches tried attempt automatically generate tactical knowledge The symbolic methods yield good results retrograde analysis small patterns logic metaprogramming By large number tactical rules generated tactical levels Go program We present different methods automatically generate Go knowledge Section 9 In Section 10 present surprisingly effective technique works Go Monte Carlo Go This technique uses hardly Go knowledge However simple program technique beats classical complex programs small boards 9 9 The game Go visual game Since beginning Computer Go models inﬂuence set We provide formalization models classical operators mathematical morphology Section 11 Go complex perform interesting cognitive experiments formal setting imposed rules game Section 12 centers studies carried Go cognitive approach The material survey based existing Computer Go publications authors experience writing Go programs Unfortunately programs authors algorithms furthermore secret explicitly appear survey Nevertheless strongest commercial programs category tried gather personal communications sent Computer Go mailing list We mention programs short descriptions We base descriptions main components survey experience writing Go programs Indigo 1517182021 Gogol 2830 Golois 3234 We think Computer Go remains new domain science far clear theoretical model emerged The domain greatly beneﬁts studies based practical experiments For instance Evaluation Function section mainly refers Indigo program Automatic Knowledge Generation section Golois Nevertheless limit descriptions programs enlarge relevant Computer Go publications We choose include rules game Go paper If reader wishes know refer httpwwwusgoorgresourceswhatisgohtml ﬁnd deﬁnitions intersection stone string liberty atari ko group eye tsumego life death territory inﬂuence handicap kyu dan Go concepts paper 42 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 2 Other games 21 Introduction This section centers current achievements implementations twoplayer complete information zerosum games games Our aim game Go complex games First focus detailed results game Secondly review theoretical complexity games Then study space states game tree complexity 1 games correlate level reached human scale Lastly outline complexity Go 22 Results achieved games In paragraph choose games class games Gomoku Othello Checkers Draughts Chess Shogi Although belong class add Backgammon study Gomoku Gomoku game ﬁve beads roweither horizontally vertically diagonally Several variants exist depending size board optional use capture rules The simplest variant capture worth considering implementation Computer Game example solved game 3 exhibited winning strategy Victoria best Gomoku program Backgammon Backgammon complete information game players throw dice techniques program Backgammon interesting include set games The best Backgammon program TDGammon Neural Net program learned game playing This program par best human players It developed IBM Tesauro 127128130 It clearly stronger Backgammon programs uses Temporal Difference algorithm 125 As early 1980 thanks lucky throws dice program 11 beat human world champion Luigi Villa Othello Logistello 25 far best Othello program It based welltuned evaluation function built examplelearning techniques opening book selective search It won numerous tournaments In August 1997 beat world champion Mr Murakami straight win 60 But January 1998 Michael Buro author decided work different challenges Checkers Computer Checkers met early success As early 1959 Samuel developed Checkers program won strong Checkers player 114 This B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 43 program learning program However hard assess result strength strong player debatable This program described 115 Since 1988 Jonathan Schaeffer researchers Alberta University developing Chinook program 117 This program Computer Checkers World champion played match human world champion Marion Tinsley 1992 4 defeats 2 wins 33 draws Marion Tinsley world champion 1954 fond Checkers programs After 6 draws 1994 series interrupted Marion Tinsley seriously ill Then Chinook competed Don Lafferty 1994 1 victory 1 defeat 18 draws 1995 1 victory 31 draws Ever Chinook considered world champion human machine categories Chinook uses endgame database positions containing fewer 8 pieces Chinook uses parallelism opening book extended Checkers knowledge base A complete history development 118 Draughts The best Draughts program Dutch Its Truus ranked national level New programs Flits 95 Dios 97 threatening Truus Flits 95 won latest Dutch Computer Draughts championships Truus participate recent tournament Chess Shannon 121 showed Chess good problem AI solve cleverness rules simplicity winning goal For Shannon problem simple difﬁcult Since intensive research paradigm clearly tree search AlphaBeta 4 In 1988 Gary Kasparov world champion claimed chance beating year 2000 At time Deep ThoughtIBM hardware softwarehad fact international Grandmaster rating Deep Thought tree search AlphaBeta It exploring 500000 positions second 67 In May 1997 Deep Bluethe massively parallel descendant Deep Thoughtbeat Kasparov score 3525 It AlphaBeta exploring billion positions second Given popularity Chess increasing use computers everyday life success strong impression everybody Moreover experiments Chess established correlation tree search depth level resulting program Shogi After success obtained Chess game Shogi Japanese Chess target Computer Games 84 Its complexity greater complexity Chess possible reintroduction board previously captured pieces The branching factor 100 Shogi 35 Chess The position difﬁcult evaluate The best program 143 uses variant iterative deepening tree search ranked average level human scale 44 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 23 Theoretical complexity When discussing complexity games necessary mention published results theoretical complexity games Checkers 109 Go 110 exponential time complete function size board Fraenkel Lichtenstein 54 shown playing perfect strategy n n Chess requires exponential time Lichtenstein Sipser 82 shown Go polynomialspace hard These theoretical results Go complex Checkers Chess games proved polynomialspace hard 24 Space states game tree complexity games By taking complexity games account good classiﬁcation twoplayer complete information zerosum games established Allis 1 van den Herik et al 63 This section brieﬂy sums classiﬁcation Allis 1 deﬁned space states complexity E number positions reach starting position game tree complexity A number nodes smallest tree necessary solve game For given game possible compute numbers accurately approximations provide useful information Allis gave rough estimations E A game shown Table 1 In table respectively mean stronger respectively stronger equal clearly weaker H represents best human player At ﬁrst glance Table 1 shows correlation game complexity results obtained computers human scale Chinook Logistello clearly better best human player Checkers Othello respectively Deep Blue rank similar best Chess player Handtalk clearly weaker best human Go players All games increasing complexity The classical model said consist set evaluation function generation tree search This successfully Chess Othello Checkers Its relative success depends complexity game applied One observe correlation games complexity programs results human scale This correlation explained fact model applied similar games different complexities Table 1 Game Checkers Othello Chess Go log10E log10A Computerhuman results 17 30 50 160 32 58 123 400 Chinook H Logistello H Deep Blue H Handtalk H B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 45 Table 2 Game Checkers Othello 9 9 Go Chess 15 15 Gomoku 19 19 Go 25 Complexity Go log10E log10A Computerhuman results 17 30 40 50 100 160 32 58 85 123 80 400 Chinook H Logistello H Strongest Go program H Deep Blue H The game solved Strongest Go program H It important previous correlation reevaluated respect Go First classical model work Go major adaptations Moreover add games9 9 Go 15 15 Gomokuto elaborate Table 2 We hand 15 15 Gomoku complex Allis standards Allis program succeeded solving game On hand 9 9 Go complex Chess Allis standards 9 9 programs weak compared human players 1 The complexityresult correlation vanished difﬁcult explain Of course argue Computer 9 9 Go studied limited 9 9 Go enjoys compared Chess We share viewpoint9 9 Go obstacle complexity inherent Evaluation Function For games like Othello Checkers Chess good solutions classical model To program games reason change model consists effective tree search simple generation heuristic simple evaluation function With Go researchers look new model enables programs overcome complexity game They reverse model focus complexity evaluation function generation use tree search veriﬁcation 3 Results This section contains results achieved Computer Go 1960 It ﬁrst traces history Computer Go deals current competitions programs In confrontations man machine examined lastly focus results obtained subproblems game Go TsumeGo late endgames 1 It difﬁcult determine program best 99 boards lack 99 competitions Nevertheless Go4 9 9 Computer Go ladder Internet 46 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 31 History Computer Go It ﬁrst Go program written D Lefkovitz 81 The ﬁrst scientiﬁc paper Computer Go published 1963 106 considered possibility applying machine learning game Go The ﬁrst Go program beat human player absolute beginner time program created Zobrist 147149 It mainly based computation potential function approximated inﬂuence stones Zobrist major contribution games devising general efﬁcient method hashing position It consists associating random hash code possible game hash position XOR moves reach position 148 The second thesis Computer Go Ryders 111 The ﬁrst Go programs exclusively based inﬂuence function stone radiates inﬂu ence surrounding intersections black stones radiate opposite values white stones radiation decreases distance These functions Go programs For example Go Intellect 3638 inﬂuence propor tional 12distance proportional 1distance Many Faces Go 5051 Since early studies ﬁeld people worked subproblems game Goeither small boards 133134 localized problems like life death groups 7 The ﬁrst Go program play better absolute beginner program designed Bruce Wilcox It illustrates subsequent generation Go programs abstract representations board reasoned groups He developed theory sector lines dividing board zones reason zones 105137 The use abstractions studied Friedenbach 55 The breakthrough intensive use patterns recognize typical situations suggest moves Goliath exempliﬁes approach 13 Stateoftheart programs use techniques rely rapid tactical searches slower searches groups eventually global searches They use patterns abstract data structures Current studies focus combinatorial game theory 7090 learning 3048 abstrac tion planiﬁcation 65107108 cognitive modeling 15 The eighties saw Computer Go ﬁeld research international competitions programs They saw ﬁrst issue journal devoted Computer Go release ﬁrst versions commercial programs In nineties programs developed competitions programs ﬂourished regularly attended 40 participants nationalities 53 An analysis current state Computer Go community published Martin Müller 93 32 Computer Go competitions The oldest international Computer Go competition Ing cup It organized year 1987 2000 The winner Ing cup plays young talented Go players Section 33 Year 2000 unfortunately year Ing competition A lot programs attracted recent competition FOST cup takes place year Tokyo 1997 Nagoya B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 47 Table 3 Winners Ing cups Table 4 Winners FOST cups Year 1995 1996 1997 1998 1999 Winner Handtalk Handtalk Handtalk Handtalk KCC Igo Year 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 Winner Friday Codan Goliath Goliath Goliath Go Intellect Handtalk Go Intellect Handtalk Handtalk Handtalk Many Faces Go Go4 Wulu Other competitions like Mind Sport Olympiad European American championships organized regular basis The winners Ing cups FOST cups shown Tables 3 4 respectively As competitions permanent Internet Computer Go tournament Computer Go ladder httpwwwcglucsfedugoladderhtml It handicap ladder number handicap stones participant immediate lower program explicitly tracked Whenever author program feels program improved issue challenge program increase number handicap stones program decrease number handicap stones New programs join ladder challenging program rung handicap If new program wins challenge successively challenge higher programs loses It start playing handicap challenges determine exact ranking Challenges normally played IGS Internet Go Server httpigsjoyjoynet NNGS No Name Go Server httpnngscosmicorg IGS NNGS provide Go player world opponent play games opportunity watch games comment time They similar world wide Go clubs Of course Go programs account Many Faces Go GnuGo connected servers 33 Programs versus human players In addition confrontations organized year Ing cup confrontations organized attempt understand better strengths weak nesses programs For example FOST cup best programs play human players Handtalk received Japanese 3rd Kyu diploma winning 48 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 games However opponent knows weaknesses program use knowl edge win easily For example AAAI98 Janice Kim beat Handtalk despite enormous handicap stones Recently Martin Müller beat Many Faces Go despite huge handicap twentynine stones Although Go programs improved years weaker human players 34 TsumeGo Most Go programs TsumeGo problem solvers Some programs entirely dedicated TsumeGo The best TsumeGo problem solver Thomas Wolfs GoTools 140142 GoTools strong TsumeGo problem solver It solve 5dan problems amateur 5dan roughly equivalent professional 1dan Go player It spotted error dictionary TsumeGo problems It analyze complex situations completely ﬁnd unique winning moves Go players ﬁnd great difﬁculty The problem solver generate thousands TsumeGo problems GoTools relies AlphaBeta searching search heuristics numerous handcoded tuned patterns directing search evaluating positions Many heuristics GoTools including forward pruning described 142 However GoTools restricted completely enclosed problems contain thirteen fewer intersec tions 141 This restriction makes GoTools little use programs play entire game TsumeGo problems solved real games 35 Combinatorial game theory In late endgame positions game Go combinatorial game theory applies Wolfes program ﬁnds sequence point better sequence professional players 89 Müllers 94 demonstration power com binatorial game theory applied Go endgames It shows Decomposition Search tree search algorithm based combinatorial game theory gives clearly better results AlphaBeta applied speciﬁc endgame positions Combinatorial game theory Howard Landman ﬁnd number eyes group 79 en abling program break life death problem sum games reduce complexity Furthermore Müller 95 described method modeling ﬁghts Go computing game values 4 Evaluation 41 Introduction This section deals major difﬁculty Computer Gobuilding Evaluation Function EF The evaluation position necessary program wants associate score game Finding good EF hard undoubtedly biggest obstacle Computer Go Whenever Chess programmersvery conﬁdent power generality tree search methods willing try chance B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 49 gameask Go programmers innocently EF Go surprised Go programmers provide simple clear efﬁcient EF case Chess Instead tree search optimizations discovery EF game Go main task Go programmers Of course Go programmer EF Every EF results intensive modeling programming testing activities Consequently EF different agreed model clearly emerged community Therefore task presenting Go EF far easy To clear possible choose proceed steps First focus idea comes naturally new Go programmers mindthe concrete EF It simple quick inefﬁcient integrated tree search algorithms Then conceptual EF Go program More precisely choose present conceptual EF program Indigo 1517 This advantages First clearbecause programmers EF Secondly workssince actually integrated playing program regularly attends current Computer Go tournaments To simplify readers task focus main features EF We intentionally hidden parts needed EF work practice required overall understanding We mention formal descriptions best programs ones 143639 published Given program mers wish algorithms secret descriptions best commercial programs scarce They personal communications 4152103138139 42 Concrete evaluation The ﬁrst idea consists deﬁning concrete EF giving value intersection board 1 black intersections intersections black neighboring intersections 1 white intersections intersections white neighboring intersections 0 Obviously EF simpler Explicitcontrol implicitcontrol endgame positions In Fig 1 intersections explicitly controlled intersection controlled color property having stone color impossibility putting color stone Such position reached large number moves players agreed control board long time Fig 2 shows board game stops earlier In position control implicit Human players stop playing kind implicitcontrol position When considering positions belong set explicitcontrol endgame positions concrete EF gives correct results quickly computed Unfortunately EF relevant positions set When considering implicitcontrol endgame positions concrete EF gives erroneous results human players use large knowledge recognize controlled The knowledge contained concrete evaluation sufﬁcient recognize terminal positions For example intersections right Fig 2 isolated white stone ﬁgure considered belonging Black Go players Clearly concrete EF gives false evaluation 50 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 Fig 1 Fig 2 Table 5 Implicitcontrol endgame depth Explicitcontrol endgame depth 9 9 60 160 Board size 13 13 19 19 120 340 250 720 knowledge necessary explain intersections belong Black long explain But concrete EF tree search algorithm EF invoked explicitcontrol endgame positions Let deﬁne depth position distance root node game tree node position Because human players stop games reaching agreement implicit control length games human players gives rough estimate depth implicitcontrol endgame positions different board sizes In addition program concrete EF playing enables estimate depth explicitcontrol endgame positions Computer experiments average depth explicitcontrol endgame positions twice board size These estimates summarized Table 5 Although concrete EF computed quickly modern computers complete searches depth branching factor Go As confronted combinatorial obstacle approach Then step try tree search conceptual EF This EF enable program evaluate positions stage game particular set implicitcontrol endgame positions Of course numerous possibilities obstacle deﬁnition EF Anyway approach best current Go programs B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 51 Fig 3 43 Conceptual evaluation A worthwhile approach ﬁnding conceptual EF observe human players cap ture useful concepts transform computational ones Some impor tant human concepts equated expressions inside game commentaries Go books The main Go terms group inside outside territory interaction life death Other important concepts inversion aggregation corre spond computational tasks present To illustrate description use Fig 3 We present useful concepts bottomup fashion We start small shapes enable program build abstract groups end EF First topological concepts connected group morphological concepts territory inﬂuence morphological group inside outside Finally concepts interaction life death inversion aggregation These concepts allow ﬁnish presentation conceptual EF Fig 3 reference point examples different concepts presented section Connected group In paragraph goal deﬁne connected group The rules game deﬁne strings stones samecolored 4connex sets intersection 4 neighbors fact connected groups players reason Let consider neighboring strings color Two tree searches performed search Black playing ﬁrst search White playing ﬁrstsee Tree Search Combinatorial Game Theory sections paper 52 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 Fig 4 Fig 5 Fig 6 Fig 7 Fig 8 Fig 9 Fig 10 determine strings virtually connected When strings virtually connected belong connected group In Fig 4 black strings virtually connected Even White plays ﬁrst Black able connect Fig 5 If Black plays ﬁrst strings obviously connected Fig 4 called connector Its notation indicate outcome elementary game effective connection plays ﬁrst More generally strings sharing liberties connected group 36 38 player plays player plays The black strings Fig 6 virtually connected proved sequence Fig 7 White 3 forced White 1 atari Black 2 Fig 6 example connector Fig 8 connector previously described If White plays ﬁrst Fig 9 black strings actually disconnected White 1 White 3 If Black plays ﬁrst Fig 10 black strings connected Fig 10 equals Fig 4 In case Fig 8 ﬁnal state connector depends moves ﬁrst value connector Then connected groups deﬁned groups strings linked connectors In example program recognizes connected group Fig 11 A important point underline fact construction connected groups implies use results local tree searches having goal connection We point Tree Search section paper speciﬁc game Go EF uses Tree Search This important aspect EF Go B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 53 Fig 11 Fig 12 Inside outside morphological group The concepts group territory inﬂuence closely linked mathe matical morphology We warmly invite reader refer Mathematical morphol ogy section paper familiar mathematical morphology opera tors 120 operators X Y paragraph Let B respectively W set black respectively white intersections Go board The morphological groups connected sets XB XW Let G given morphological group First SG skeleton G subset G intersections color G Then deﬁne inside G InG set G SG Lastly OutG outside G deﬁne set Y SG G All operations lead morphological view positions Fig 12 shows morphological view example Fig 3 The big dark respectively light grey squares correspond insides black respectively white morphological groups small dark respectively light grey squares correspond outsides black respectively white morphological groups The stones correspond skeletons 54 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 The building groups The notion group paramount importance modeling Go position For human players notion group corresponds connected group notion morphological group notion certain extent notions For programs question knowing notion better remains open problem Besides deciding better notion matter integration program 143650 51 The connected group notion connection patterns stones demonstrated tree searches But notion raises diverse questions First programs response time excessive number local tree searches completed determine existence connectors Nevertheless speeded patterns problem handle patterns database Some learning techniques foster expansion patterns database We shall discuss point Automatic knowledge generation section paper Furthermore problem linked connected group notion fact connection concept given undue value Thus obtain program systematically connects groups However morphological group notion chosen intuitive quicker compute remote connection notion Unfortunately accurate quiet positions Therefore tree searches notion reach quiet positions provide signiﬁcant results The powerful successful reaching quiet positions Go4 uses idea building groups instead connection values gamelike values uses probability value connection builds connection map Number eyes The inside given group crucial life group Its vital contribution assessed counting number eyes inside The number eyes depends plays ﬁrst When inside eyes alive For connected set inside vital contribution depends possibility split connected sets On sizeonetwoorthree connected sets number eyes depends boundary opponent stones For sizes depends shape shape prisoners For example Go players straight 4 alive square 4 dead For size bigger number eyes greater Each Go program contain expertise counting eyes connected set It difﬁcult deﬁne complete adequate rules determining number eyes groups Most current Go programs use heuristic rules The complete recent description rules described reference paper 39 Chen Chen authors best Go programs Handtalk Go Intellect Landmans 79 combinatorial game approach study eyes Bensons 7 mathematical study real life alternating play Furthermore heuristic rules computed quickly Therefore Go programs use tricks For example heuristic rule says connected set exterior length smaller 6 zero eye greater 10 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 55 Fig 13 Fig 14 Fig 15 eyes 1439 After assessing number eyes connected set problem count number eyes group When connected sets inside dependent Chen Chen 39 provide clever method binary trees Each connected set inside binary tree leaves contain number eyes depending plays ﬁrst The group selects binary tree replaces left subtree The opponent selects binary tree replaces right subtree The group wants maximize number eyes opponent wants minimize This abstract minimax search simpler faster regular concrete board Interaction A group friendly opposing neighbors For couple opposing groups interaction expresses possibility group dominate The evaluation interaction opposing groups determined set rules expression complicated domaindependent Therefore shall limit presentation interaction single example simple possible Let examine black group middle righthand example Fig 3 group corresponds Fig 13 white group located Fig 14 These groups opposing number eyes size outside sufﬁcient Therefore consider groups weak It important program compare number liberties weak group In example white group liberties black group The player plays ﬁrst delete opponents liberties liberties group The difference number liberties groups crucial deciding group dominates When value relative zero interaction depends plays ﬁrst value designated Such case example When group dominates plays ﬁrst interaction dominating color For example interaction black group corresponding Fig 15 located right position Fig 3 big white group encircling White In paragraph shall fact contribute death black group Death inversion aggregation The important point consists detecting dead groupsthis constitutes main difference concrete EF conceptual EF An error judgement life death group brings tremendous consequences calculating value EF Exact conditions death group given impossible restrictive conditions given program In conditions 56 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 Fig 16 program conclude group dead A death happens group answers following conditions number eyes big outside big friendly group connect interaction opponent group value different In example group Fig 15 fulﬁls conditions Therefore dead On contrary weak groups Figs 13 14 interaction value They dead Once group dead inversion happens dead group changes color merges neighbors Fig 16 shows conceptual description following inversion consequent death black group right corner Here black group disappeared big new white group located edge After inversion program performs aggregation cluster dead group opponent groups bigger group Summary Having identiﬁed basic tools able general form Go EF While dead groups detected perform inversion aggregation processes Return sum value intersection board 1 Black 1 White At end loop death detected program inverts aggregates dead group birth new group If death detected loop ends program computes addition value intersection board 1 intersection B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 57 black group 1 intersection white group 0 cases Each loop gives rise zero dead groups Successive loops necessary detect dead groups The evaluation process alter life death status groups previously examined response new information determined later cycles evaluation process Life death groups tsumego We seen building process EF However human players use terms life death Furthermore question determining group dead alive tsumego problem It time link human terms previous discussion concepts EF Let ﬁrst provide precise deﬁnitions On hand general tsumego problem arises group weak standards This means number eyes outside group sufﬁcient group interaction value equal Such problems consist ﬁnding solution following varying parameters number eyes inside outside interactions On hand basic tsumegos problems outside interactions attached insufﬁcient values basic tsumego problem consists ﬁnding solution parameter vary inside group Consequently easily understood considerable gap categories tsumego General tsumego problems far complex basic ones Nowadays GoTools solves basic tsumego problems dan level smartly quickly Here basic necessarily mean simple lot basic tsumego problems situated professional level Chen Chen 39 set heuristic rules count number eyes inside group However Go playing programs efﬁcient solve general tsumego problems unfortunately problems ones frequently met actual games The inability Go programs solve general tsumego problems constitutes major obstacle Computer Go 44 Conclusion In section dwelt simple case concrete EF This EF tree search small subset positions gives correct answers explicitcontrol endgame positions subset Then presented conceptual EF We highlighted main features EF Go group inside eye outside interaction life death In spite effort function simply possible remains complex The ﬁrst reason concept group crucial Go variants The Computer Go community holds different views deﬁnition The second reason lies difﬁculty deﬁning intuitive visual concepts inside outside Another explanation marked importance interaction groups It difﬁcult determine state group considering surroundings Lastly regards tree search unique feature EF Go uses local tree searches This aspect new considering twoplayer zerosum complete information games tree 58 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 search simply uses EF The setting efﬁcient correct complete EF major difﬁculty inherent Computer Go 5 Move generation 51 Introduction Section 2 showed global search possible Go Section 4 pointed complexity EF However aim game playing program search trees evaluate boardsthese activities means The aim generate moves select Therefore leaving tree search EF aside ﬁrst trend Computer Go generate moves giving priority urgency select highest priority The ﬁrst Go programs looked like expert systems evaluation tree search That right approach try time complex domain 81105 Section 52 shows Move Generation MG occupies special place current Go programs In Section 53 relevance Goal Generation GG Then present examples MG associated speciﬁc goals Section 54 illustrate global MG help example Section 55 52 The speciﬁc position MG current Go programs To help MG ﬁrst Go programs components necessary EF stop playing end game correctly tree search module check tactical status local subpositions ﬁnd biggest global Therefore crucial question know position MG connection EF tree search The EF position complex uses lot knowledge abstract objects board It appropriate try extending knowledge descriptions objects description actions moves performed objects In case evaluation helps MG applies positions moves This approach contemporary Go programsfor example Go Intellect 37 Shogi programs 60 In case MG Go programs important 53 Goal Generation Moreover programmer makes extensive use knowledge moves naturally enters domain Goal Generation Instead generating moves program ﬁrst generates goals prove useful winning game Once goal selected speciﬁc evaluation function adapted goal chosen speciﬁc generator associated goal A goaloriented approach advantage reducing complexity problem solved drawback lack global balance goal relevant winning game Current programs Go Intellect 3738 Goliath 14 Many Faces Go use goaloriented approach Other explicit goaloriented studies Go 556566 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 59 108 Decisive goals generated position occupy big points kill live attack defend groups 38 expand reduce invade territories Furthermore subgoals eyes destroy eyes connect cut groups capture save strings 52 proposes hierarchy goals build Go program For goal subgoal program generates special moves performs goaloriented tree search 54 Goaloriented MG This subsection provides example moves generated according context goaloriented MG Let consider position Fig 3 evaluation shown Fig 16 The evaluation identiﬁes weak groups middle left white group right black group right white group It identiﬁes territories expanded reduced white territory middle left black territory black territory Each weak group territory generates goals pursued attack defend weak group expand reduce territory Expandingreducing territories MG simple case A program pattern database suggesting moves according goal Let assume database patterns shown Figs 1720 Let X good Y bad Then MG generates moves Fig 21 expanding reducing territories Fig 17 Fig 18 Fig 19 Fig 20 When generated moves tree search allows select best expandingreducing In case territory assuming depthone positions quiet tree search selects best expandingreducing However actual cases depthone positions necessarily quiet Therefore evaluations territory signiﬁcant quiescence search performed 40 Instead performing tree search select possibility reﬁne patterns expandingreducing territory specializing possible associate value selector In cases program selects generated best value The approach knowledge reﬁnement performed manually Go programs authors strong Go players like introspection However difﬁcult reﬁnement task achieved This aspect discussed Automatic Knowledge Generation section 60 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 Fig 21 Fig 22 Attackingdefending groups The relevant goaloriented MG attack defense groups A program contains pattern database suggesting moves relevant goal Let database contain patterns Figs 1720 plus rule advising capturedefend strings belong group Conways state Combinatorial Game Theory section The generated moves Fig 22 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 61 Move C generated rule advising save white string state belonging middle left white group Other moves generated pattern database Beyond simple example Go programs contain complex patterns For instance generation symmetrical pattern specify stones pattern belong weak group A good description attack defense Go Intellect 38 In section presented simple rules In fact rules complex current Go programs rules advise set moves contain information number liberties string use logical expressions 55 Global MG This subsection illustrates example moves generated global level We example Fig 16 We assume global level considers kinds goals described previous subsection expandingreducing territories attackingdefending groups First Go program speed performance avoids tree search previous MG simply provide priority goal For goal priority proportional size size variation case territory object associated goal factor speciﬁc goal class Therefore rough simple method consists selecting highest priority associated goal highest priority This decision process suffers lack coherence program verify selected actually achieves goal In example assume priority group signiﬁcantly higher priority territory In case program decides attackdefend middle left white group Then assuming rule advises saving string state higher priority patterns priority program chooses play C This method sharper help goaloriented Tree Search eliminate ineffective moves For example C work White TS select A D TS eliminate moves goaloriented MG In case goal unreachable For instance program strong want defend white group check moves A C D reach goal Therefore program switch right ﬁght try moves E F G Another TS conclude E G good moves select global level 56 Conclusion The previous description MG similar plausible heuristic known games selective search It early days Computer Chess 58 It currently Computer Shogi 6069144 long time Computer Go An explicit contribution MG Go reference paper 37 describes decision process Go Intellect ﬁts description Like programs Go Intellect contains 20 generators Most goaloriented heuristic A coordinator combines 62 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 values linear combinations dynamically determined status game A checker provided avoid obvious errors choice candidate moves If candidate signiﬁcantly higher value ones passes checker selected lookahead But highly recommended candidate moves Go Intellect uses global lookahead candidate moves selects best Once example Go Intellect shows important static MG In cases MG sufﬁcient select global tree search cases sufﬁcient order moves tree search 6 Tree search 61 Introduction This section describes link Computer Go Tree Search TS In classical games like Chess goal TS ﬁnd moves EF black box Numerous publications deal problem study wellknown minimax AlphaBeta algorithms variants 10267376124 A recent trend favored new approaches conspiracy numbers approach 83116 proofnumber search 2 Computer Go follows trend But Go TS completely different importance locality Until methods emerged The fundamental issue Computer Go TS selectivity Section 62 deals different TS methods current programs Section 63 focuses new parameters TS Go 62 Current use tree search To begin let relevant information related TS current Go programs Handtalk Many Faces Go Go4 Go Intellect GoAhead Handtalk generates 4 moves global level performs little tree search Handtalks author believes important things TS 42 The author Many Faces Go underlines program multiple TS engines 52 capturing string connecting strings making eye making group dead alive performing global quiescence search An important feature TS gives degree reliability concerning result search Michael Reiss says Go4 tries 40 candidate moves evaluates score plays highest value 103 Ken Chen 40 recently given heuristics enable program Go Intellect perform efﬁcient global selective search His ﬁrst heuristic consists cutting search quiescence returning value evaluation function stable positions global game tree The second cut search target value reached The heuristic associate urgency value value account evaluating position The author concludes balanced combination global selective search decomposition search 94 best approach Computer Go B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 63 Peter Woitke 138 says program calculate variations string captures life death endgame positions 63 Main features In section depict main features TS Go concentrating features TS Go different TS games To important element locality moves Go played precise location boardin words intersection We shall later examine features goal TS deﬁnition terminal positions initiative abstraction dependency local situations ﬁnally uncertainty All features linked TS Locality Given size board searching selecting moves localized board called local TS It similar human players examine different sequences moves different places board separate independent way Local TS kind selective search It approximation usual TS called global TS In practice owing current power global TS unlike local TS completed local TS mandatory Even greater power bruteforce global search efﬁcient approach There clearly suboptimal bad moves Go position A detailed analysis position eliminate useless moves A goaloriented global search splitting search different local searches options worth considering Splitting game subgames proved useful endgame decomposition search 94 Applying technique middle game promising difﬁcult research area However obstacles arise local TS First locality criterion deﬁned The problem deﬁning distance discriminates near far open Each Go program employs distance It depends data structures chosen program Apart problem deﬁning distance second obstacle know stop local TS Unfortunately local TS goes departure point This happens local moves played local situation uncertain impossible evaluate In practice search stopped Consequently result local TS contains uncertainty The problem local TS reconstruction global result given results local TS To address issue program simpliﬁes problem assuming relatively independent Although hypothesis wrong theory essential assumption results Assuming independence local situations game Go considered sum independent subgames It makes global TS look like set local TS Conways combinatorial game theory gives clues dealing local results One popular strategies programs based thermographs section combinatorial game theory It consists playing hottest local game This particularity Go decomposition search 94 drastically reduces size global search 64 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 In short locality allows TS obtain result impossible unique global TS Current difﬁculties linked locality criterion relate deﬁnition good distance criterion stopping search speciﬁcation measure uncertainty result search evaluation global result results local search obtained To circumvent obstacles formulating hypothesis independence local games makes possible use Conways combinatorial game theory Use goal tree search In classical game programs TS calls EF terminal nodes tree In Go EF complex value relies state boards abstract elements Moreover knowledge state elements relies results local abstract TS So EF uses results yielded TS The usual orderwhereby TS calls EF Chessis reversed Go TS user Chess supplier Go Unlike Chess precision result EF Go makes necessary perform tactical TS ﬁnd state elements evaluation connections eyes life death groups Here goal TS Go Chess select prove value situation Problems speciﬁc Minimax search Go Müller 96 identiﬁes difﬁculties speciﬁc Minimax search Go recognizing terminal positions pass moves local position repetitions ko In Go position terminal points contested points classiﬁed black white neutral Such classiﬁcation hard complexity evaluation A terminal position nonterminal position similar In Go passing legal pass moves generated search In positions good players allowed pass instead damaging position Adding pass moves tree search increases size search space Global position repetitions forbidden rules local tree search cope local position repetitions ko A local repetition produced possibility playing outside local position time search Ignoring possibility ko gives misleading results Initiative Given multiplicity local situations player play ﬁrst given local situation To cope property current programs required perform TS given local situation initiative taken time different player We indicate local situation described TS notation B W B respectively W situation Black respectively White plays ﬁrst When opponent answer local situation plays different local situation player play second row ﬁrst local situation There possibility player play multiple moves row local situation So theoretically multiple TS performed In practice current Go programs consider possibilities increase computation time The combinatorial game theory takes problems account reference Recently progress safe cutting combinatorial B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 65 game trees 71 This improvement comparable improvement AlphaBeta Minimax breakthrough computation mean temperature combinatorial games dominant stage Abstraction local tree search goal We shown locality criterion reduces global evaluation sum local evaluations greatly reducing complexity corresponding TS But avoid combinatorial explosion Computer Go programmer use abstraction addition locality Rather locally evaluating position program ﬁrst identify typed local goalfor example connection strings life groupand perform TS goal It reduces complexity EF takes values 0 goal achieved 1 goal achieved cases The EF rapidly computed For lot typed local goalssuch connection eyes life death completely encircled groupsthe corresponding TS achieved short time program certainties better nontermination local evaluation TS Moreover threevalue EF enables program use ProofNumber Search algorithm generally obtains better results AlphaBeta However impossible obtain abstract results inherent counterpart abstraction simpliﬁcation consequently inaccuracy Fig 23 gives example proof tree goal connect Black friendly color goal connect black stones The ﬁrst works leftmost arrow OR node branches cut The moves OR nodes given rules terminating moves achieve goal moves played row friendly color This heuristic moves lead positions containing threats winning friendly player forced moves player The rules Fig 24 indicate moves try OR levels proof trees This visually explained ﬁrst diagram Fig 24 tree represented color moves associated branches The available information Black reach goal plays moves row state W ﬁrst diagram Otherwise Fig 23 66 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 Fig 24 Fig 25 combinations lead unknown situations state U When Black plays moves advised rule switches threatening situation represented tree right ﬁrst diagram Black win goal plays White play prevent Black The ﬁrst rule Fig 24 ﬁnd upper left proof tree Fig 23 Black plays liberty right black string liberty neighboring liberty left Black string So Black plays liberty left Black string left right Black strings connected The second rule Fig 24 advises threaten eye Black plays lower right intersection eye Fig 25 gives second proof tree developed Go program White plays ﬁrst searches goal Disconnect black stones In order save space numbered sequences moves leaves tree odd numbered moves black moves numbered moves white single forced moves The forced white movesat root proof treeare refuted Black As result proof trees Black connect stones White plays ﬁrst black stones virtually connected B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 67 Fig 26 The rule Fig 26 ﬁnd forced lowest AND node Fig 25 The ﬁrst rule Fig 26 ﬁnd forced moves root proof tree Fig 25 moves ones considered possible moves The second rule ﬁnd possible forced prevent eye The visual deﬁnition forced given ﬁrst diagram White leads unknown state state U Black leads lost state White lost state L White winning state W Black White loses Black connected example Dependencyindependence local situations Some local situations highly dependent anothera inﬂuence local situations simultaneously A local TS reduced ﬁnding good account answers ﬁrst Otherwise global choice rely incomplete information At local TS moves played The dependency neighboring local situations implies existence moves work situation threats These moves enable player change situations proved efﬁcient A good program able ﬁnd Uncertainty Given complexity local situations numerous local TS terminate ﬁnding good proving goal The results local TS remain uncertain The global level program handle uncertainty nonterminated TS There ways represent use uncertainty Go programs For example Gogol 30 represents uncertainty result game taxonomy games The general game Uits value unknown plays ﬁrst A WU game game player win game plays ﬁrst result unknown plays ﬁrst A WU game subclass U games UL games deﬁned similarly Other subclasses games deﬁned WUUU WL This representation uncertainty games useful elementary subgames 68 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 game Go game capturing string game making eye game connecting strings Indigo 18 represents uncertainty evaluation function local uncertainties identiﬁed local ﬁghts Many Faces Go uses conﬁdence degree result evaluation TS 64 Which algorithms To perform searches existing techniques offering advantages drawbacks depending context TS For connection TsumeGo problems threevalue evaluation function Proof Number Search PNSearch 2 The drawback PNSearch time copy positions memory required store For problems uncertainties quiescence search algorithms 6 recommended Other TS use AlphaBeta Depth First search offers advantage looking positions order results evaluation position reused order evaluate current position rapidly The incrementality principle optimization section At depth zero local TS consider moves global TS detect moves help achieve goals simultaneously The game Go sum games shows programs need perform efﬁcient TS know use results Combinatorial game theory solves problems arise combining results multiple TS Combinatorial Game Theory section Many heuristics developing search trees Thomas Wolf 142 gives heuristic search techniques GoTools For example node search tree relevant moves tried usefulness evaluated Other heuristics consist giving low priorities moves forbidden opponent trying second opponent refuted ﬁrst Some heuristics improve global search given Ken Chen 40 65 Conclusion In section shown speciﬁcity tree search Go We identiﬁed important features tree search locality strong links evaluation function initiative abstraction dependency uncertainty Computer Go enriches classical paradigm tree search new viewpoints Moreover large branching factor Go calls clever selective search techniques tactical search GoTools global search Go Intellect An increase power allow efﬁcient brute force global search The special properties game Go selective 40 decomposition search 94 efﬁcient brute force global search 7 Optimization 71 Introduction As games speed program paramount importance game Go Even current problems mainly linked good modeling Go player B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 69 important fast tactical search use knowledge efﬁciently competitive Go program Computer Go optimization techniques range low level considerations like raw representation board high level considerations like use abstract strategic representations choose search trees develop Some midlevel optimizations usedfor example calculations search dependencies indicate recalculate search tree played modify result Optimizations timeconsuming programmer Section 72 presents possible optimization pattern matching Section 73 gives hints stop tactical search early Section 74 deals ordering different loops tests occurs manually automatically generated Go programs Section 75 choice search algorithms Section 76 explains optimize operators mathematical morphology Section 77 sheds light optimization string capture Section 78 details use incrementality ﬁnally Section 79 says word high level optimizations 72 Pattern matching The representation patterns board match patterns problem Go programmer face The patterns represent small parts board One essential property string stones lies number liberties patterns associated conditions liberties strings Fig 27 gives examples patterns associated set conditions These patterns represent eye Boon described optimized pattern matcher program Goliath 13 He represented 5 5 patterns 5 5 parts board 32 bit strings enabled program perform fast logical operations integers match patterns parts board Other algorithms optimize pattern matching For example Explorer program uses Patricia trees match patterns 90 Gogol 34 represents patterns 32bit integer performs binary search sorted patterns list match rapidly 73 Stopping search early The patterns rules select possibly interesting moves stop search early The following trees developed prove black stones connected The left tree developed simple rules ﬁnd interesting moves right tree developed clever rules patterns Fig 27 70 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 Fig 28 Fig 29 The left tree Fig 28 31 nodes right tree 7 nodes In game Go overhead matching simple patterns largely compensated time gained thanks search savings Fig 29 gives patterns cut right tree The ﬁrst pattern shows moves try root tree second shows Black connect stones plays ﬁrst 74 Ordering conditions rules Another approach speed use rulebased knowledge program transforma tion A metaprogram program faster automatically ordering conditions rules partially evaluating rules 2833 While reordering conditions important performance rules generated metaprogram im portant handwriting rules Go program The following rules simple examples important good order conditions connectS1 S2 I1 color_intersectionI1 color_stringS1 C color_stringS2 C libertyI1 S1 libertyI1 S2 connectS1 S2 I1 color_stringS1 C color_stringS2 C libertyI1 S1 libertyI1 S2 color_intersectionI1 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 71 The rules results efﬁciency I1 unknown intersections liberties string S1 When based number free variables condition reordering work Conditions variables ordered dynamically match saves time Reordering conditions given rule optimally NPcomplete problem To reorder conditions generated rules simple efﬁcient algorithm It based estimated number subsequent nodes ﬁring condition create semiuniﬁcation tree Here metarule reorder conditions generated rules branching ListAtoms ListBindVariables neighborX Y 376 memberneighborX Y ListAtoms member_termX ListBindVariables non_member_termY ListBindVariables A metarule evaluates branching factor condition based estimated mean number facts match condition working memory Metarules ﬁred time branching estimation conditions left ordered When reordering rule containing N conditions metarules ﬁred N times ﬁrst time choose ﬁrst condition T time choose T th condition In ﬁrst reordering metarule variable X present conditions preceding condition chosen The variable Y present preceding conditions The condition neighborXY estimated branching factor 376 mean number bindings Y mean number neighboring intersections intersection 1919 gridthis number vary 2 4 The branching factors conditions reordered compared condition lowest branching factor chosen The algorithm efﬁcient orders rules better programmers runs fast rules containing numerous conditions 75 AlphaBeta PNSearch difﬁcult choice Another practical problem lies use appropriate search algorithm problem hand For example tactical search AlphaBeta enables program reuse abstract information parent node numbers liberties list adjacent strings order incrementally calculate information current node occupying memory On contrary BestFirst algorithm like ProofNumber Search uses lot memory incremental information kept Moreover takes time copy information node However trees developed PNSearch smaller trees developed AlphaBeta sub games game Go variable number moves node The choice algorithms depends data structures subgames hand For example Many Faces Go uses AlphaBeta incrementally updates 72 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 liberties strings On contrary Gogol uses PNSearch copies raw board recalculates useful sets liberties node 76 Dilation erosion Dilation erosion crucial operations Go program They calculate liberties inﬂuence territories generally neighborhood object Howard Landman uses optimization calculate dilatation erosion operations mathematical morphology These operations useful calculating inﬂuence stones associated territories To assess dilatations erosions rapidly board represented bit stringan erosion corresponds standard bitstring operations SHIFT OR 77 String capture An optimization Goliath 14 moves simultaneously tactical search When given program calculates ladder play moves repeatedly Goliath plays moves time For example left position Fig 30 calculate white stonemarked trianglein lower left captured program tries ﬁrst play liberty stone greatest number second order liberties secondly play liberty avoid capture These moves played repeatedly board position second diagram Fig 30 reached Instead analyzing position ply playing moves plies program optimized directly position second diagram Fig 30 This optimization enables program save time 80 percent ladders calculated Goliath Instead analyzing position ladder Goliath analyzes position Another optimization speciﬁc string capture consists ordering moves tactical search For example trying save string playing liberties Fig 30 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 73 usually better try ﬁrst moves intersections likely string liberties possible 78 Incrementality Bouzy 20 introduces concept incrementality tactical search Incrementality example midlevel optimization aims associating tactical search track represents parts board involved result search If played track object object deleted If played outside track object object remains unmodiﬁed Whenever played program knows search remains unchanged saves time In practice incrementality tactical search enables program play twice fast 19 19 board With track mechanism programming task nicely simpliﬁed incrementality problem deﬁnition problem If programmer deﬁnes track bigger optimal behavior program remains correct slower If programmer deﬁnes smaller track optimal program forgets destroy objects program quickly adopts erratic behavior The problem correctly specifying tracks objects difﬁcult solve 79 Highlevel optimizations An example high level optimization use abstract strategic representation board allows program focus important tactical computations neglect useless ones timeconsuming 3166107108 8 Combinatorial game theory 81 Introduction This section deals basic features combinatorial game theory far useful Computer Go The reader refer 43 64 mathematical overview 44 recreational presentation 8 89 practical applications theory Computer Go These different viewpoints allow novice understand surprising differences theory classical games theory 136 Combinatorial game theory called Conways game theory 82 The results combinatorial game theory applied Computer Go The results applying theory problem playing game limited However speciﬁc subproblems like late endgame positions theory highly successful This section deals excellent results points difﬁculties extending wellidentiﬁed concepts Goeyes ko ﬁghtsand complete games 74 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 Late endgame positions yose During endgame phase partly possible model position sum games We list key features model The ﬁrst feature corresponds identiﬁcation groups territories As game nears end identiﬁcation groups territories easier transformation position list subgames possible In addition moves played identiﬁcation groups territories stable Stability second feature It fundamental veriﬁed local tree searches subgame pointless Furthermore game nears end moves played sub game inﬂuence subgames Therefore near end game subgames independent Independence subgames constitutes feature Besides game nears end local searches shorter Therefore local searches fully completed subgames described Completion tree searches fourth feature Thereby positions criteria use features fulﬁlled Berlekamp Wolfe obtained outstanding results When abstract description positions terms groups territories given Berlekamps model ﬁnds moves result point professional players moves 89 This result tremendous impact Go community everybody thought professional players playing endgame optimally Berlekamps model lucidly demonstrated contrary It long dwell mathematical details explaining result good In outline simply combinatorial game theory employs inﬁnitesimal numbers like subgames They transform point number subgames odd The proof test positions 9 This result correct course sets criteria fulﬁlled capable extended endgame help robust tools Berlekamps model Martin Müller working applying theory Go endgames years 8992 Müllers 94 describes Decomposition Search algorithm identiﬁes safe groups territories position ﬁnds subgames computes value selects subgame In test positions Decomposition Search performs better classical alphabeta This paper nice demonstration power combinatorial game theory applied endgame Go Recently Kao 71 described method computing mean temperature combinatorial games player option local non terminal position This method based stable theorem algorithm MTSearch MeanTemperature Search Although method applied games Go endgames MTSearch works endgame positions The improvements computation mean temperature method comparable improvement AlphaBeta Minimax Eyes After success endgame mathematicians investigated subproblems actual games Eyes useful life death problems B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 75 Landmans 79 reference paper shows link Conways theory eye concept game Go Ko Game theory far complex loopy games A loopy game game graph contains loops In game Go loops forbidden rules model game sum subgames subgames loopy For given subgame containing ko ﬁrst player takes ko rules allow second player ko plays elsewherein subgame If ﬁrst player plays following global position changed second player allowed ko given subgame subposition moves Therefore given subgame considered loopy modeling Not Berlekamps model encompass ko studies ko combinatorial game theory classify different contexts ko 92 Spight 122 extended thermograph theory process multipleko positions Fights Müller 95 described method modeling ﬁghts Go computing game values In order test validity approach method integrated program Explorer tested speciﬁc ﬁght positions The results impressive outperformed current best programs Go4 Many Faces Go This illustrates power describing Go local situations game values The game Unfortunately conditions applying Conways theory game fulﬁlled In brief subgames model global game sub games greatly dependent Each model global position sub games contains approximation Nevertheless Conways theory source inspiration model game Go This paragraph shows work accomplished perspective Goliath 14three times world champion 1989 1990 1991modeled local searches switches Explorer 8990 far program uses theory efﬁcient way For example Explorer contains tools compute thermographs games In addition Indigo 15 uses Conways classiﬁcation positive negative fuzzy zero Unfortunately local searches subgames completed subgames placed unknown category Furthermore Gogol 30 strictly follow classiﬁcation It deﬁnes taxonomy games U games correspond games searches unknown completed W games correspond won games L games lost games Then U games classiﬁed WU WL UL games A WU game game left outcome W right outcome U This classiﬁcation justiﬁed theoretical viewpoint preferable Conways practice takes unknown sub games account gives results local search fully completed 76 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 83 Conclusion Until classical game theory 136 adapted Chess Checkers Othello lacked power sufﬁcient model game Go Combinatorial game theory partly makes weak point giving optimal strategies playing speciﬁc endgame positions 9 It gives ideas deﬁning suboptimal strategies playing game Before theory game extensive research Future researches focus splitting global game dependent subgames independent ones In addition experiments carried relate searches end Needless theory remains practice adapted phases game 9 Automatic generation knowledge Writing Go program difﬁcult efﬁcient programs use lot knowledge Consequently methods generate Go knowledge automatically offer great advantages Research automatic generation knowledge mind games mainly concentrated generation evaluation function However evaluation position game Go requires speciﬁc concepts extensive reasoning As game Go divided subgames reasonable goal knowledge generating systems generate knowledge subgames game Go Knowledge generated techniques Neural networks learning learn select good tactical moves backpropagation shown Section 91 With help temporal difference methods learn evaluate probability intersection territory In Section 92 neural networks learned Go knowledge enable neuralnetwork based programs competitive Knowledge key component Go programsin Section 93 kind knowledge Go programs insist difﬁculty acquiring maintaining The problems related knowledge maintenance knowledge acquisition partially solved declarative learning techniques presented Sections 94 retrograde analysis 95 logic metaprogramming These techniques proved useful generating useful tactical rules increase tactical problemsolving abilities Go programs Some techniques pattern generation tried ecological algorithm Kojima 75 discussed Section 96 91 Backpropagation Golem 47 program learns select tactical moves neural networks Golem starts tactical search ﬁnd status strings having liberties fewerthe goal search ﬁnd string captured Golem uses neural network discard moves numerous The inputs neural network correspond abstract concepts game Go likely inﬂuence capture strings B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 77 The results tactical searches abstract concepts inputs neural network This network trained games professional players For position goal Golem rank professional chosen randomly After 2000 attempts ranks moves test database correctly 87 percent times Golem learnt beat Many Faces Go latters low level 92 Temporal Differences TD learning TD learning successfully applied Backgammon Tesauro 129 It applied successfully games Two fundamentally different abilities deﬁned games The ﬁrst foresee likely continuation game tree search reasoning The second ability assess position accurately patterns features position calculating explicit Backgammon suitable game TD learning positional judgements important Unlike Chess require ability moves ahead The game Go played lot positional judgement knowledge shape stones The application TD methods game Go yielded reasonable results Go programs based TD learning play best Go programs However TD method great potential improve programs lot knowledge Two programs far method game Go Chronologically ﬁrst program designed Schraudolph Dayan Sejnowski second onethat plays better relies Go knowledgeis NeuroGo Markus Enzenberger The program Schraudolph Dayan Sejnowski Schraudolph Dayan Sejnowski applied TD learning Go way Tesauro applied Backgammon 119 Their ﬁrst experiment train completely connected 82401 network letting play stochastically As game Go deterministic moves chosen stochastically explore state space The best moves exponentially higher probability chosen worse ones The output network learned forecast number points Black White win This network play 659000 games beating Wally worst public domain Go program The direct application TD Go yields disappointing results comparison Backgammon However improvements enable TD learn better These improvements concern architecture inputs output network The ﬁrst improvement consists changing output The goal game Go occupy territory possible Each intersection occupied color end game counts point It worthwhile network learn ﬁnal destiny intersection It easier ﬁnd destiny intersection ﬁnal score Moreover game Go properties possible constrain architecture network For example colors reversed reﬂection rotation board performed properties shape stones remain unchanged Color symmetry taken account giving opposite values inputs Black White 1 Black 1 White putting bias 78 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 neuron 1 White play ﬁrst Weight adjustments account rotations symmetries sharing equivalent weights adding errors resulting different equivalent intersections The improved network trained opponents random generator Wally program weak simple public domain Go program Many Faces Go The program learned beat Wally 2000 games Many Faces Go weak level playing 1000 games Another network playing learned beat Wally 3000 games To date programs participated Computer Go competitions The NeuroGo program NeuroGo program uses elaborate inputs program 48 In NeuroGo goal learning foresee intersection friendly territory end game The input network constituted units One unit intersection string stones The architecture network dependent position considered Each unit properties Each string possesses properties having 1 2 3 4 cid1 5 liberties having 1 2 3 cid1 4 stones possibility captured color string moves ﬁrst possibility captured color string plays second The properties intersections Black 1 2 3 4 cid1 5 liberties plays intersection White 1 2 3 4 cid1 5 liberties plays intersection Black captured plays intersection White captured plays intersection eye Black 0 1 2 cid1 3 unanswered moves eye White 0 1 2 cid1 3 moves In addition calculating properties units NeuroGo detects groups stones sets connected strings distances strings connectable moves It uses information link units weights corresponding relations units The set units position converted graph This graph enables program build relations neural network There relation units If NeuroGo decides important selects Two neurons adjacent layers correspond units linked weight corresponding relation Neurogo learned beat Many Faces Go average level 820 4500 games program Schraudolph al beat weak level 320 NeuroGo participates Internet Computer Go ladder It plays small 9 9 boards 19 19 boards It currently situated ladder Computer Go programs Conclusion future work To learn play program TD based programs play thousands games considerable advantage require work programmer NeuroGo 5000 lines C As type learning facilitated quality inputs neural network Such case NeuroGo learns better program physical description board An interesting study use elaborate knowledge best B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 79 programs input networks trained TD methods This greatly upgrade level programs A problem arise learning time longer simple representation However approach offers advantage having highest ratio Level programTime develop 93 Knowledge Go programs Knowledge Go programs constituted specialized procedures compute speciﬁc Go concepts pattern databases The Go knowledge contained procedures ranges simple concepts number liberties string high level ones safety group Ken Chen author Go Intellect best Go programs provides good description knowledge contained competitive Go program 38 Go Intellect 3 types frames Blocks strings terminology Chains sets strongly connected strings Groups loosely connected strings 30 10 50 slots respectively The knowledge Go Intellect frame updating procedures goaloriented generators pattern libraries A good example heuristic rules evaluate life death group 39 The rules combine patterns conditions intersections exceptions Approximately rules described paper They rely knowledge knowledge possibility connecting string intersection A typical Go program contains approximately 3000 patterns The number patterns program highly dependent design architecture program For example Goemate 40 patterns Golois millions patterns Acquiring specialized knowledge difﬁcult The traditional way programmer add knowledge The difﬁculty lies performing introspection New knowledge interacts existing knowledge unpredictable ways Whenever programmer tries improve program adding knowledge relating particular subproblem new knowledge interacts knowledge program ﬁnally produces bad results Furthermore programmer good Go player difﬁculties ﬁnding rules exceptions He inserts new rules forgetting exceptions produces bad results A potential solution knowledge acquisition problem declarative knowledge learning Some Go knowledge formalized considered independently knowledge The insertion new rule declarative setting interfere previous knowledge Moreover use automatic generating techniques produces large knowledge long write programmer The following subsections highlight techniques 94 Generation rules retrograde analysis Retrograde analysis Retrograde analysis oneandtwoplayer games Given ﬁnal positions retrograde analysis enumerates positions associates value Won Lost Drawn players games 80 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 minimal distance ﬁnal position Wellknown results retrograde analysis Chess endgame databases 123131132 Checkers endgame databases Chinook The Chess endgame databases enabled Chess community discover new Chess knowledge 98 enable programs play perfectly endgames hard human players The endgame databases Chinook Checkers contributed world champion title 78118 For single agent problems retrograde analysis reduce number necessary nodes solve standard 15Puzzle problems The generated database enables program divide number explored nodes 1000 45 Retrograde analysis ﬁnd optimal solutions Rubiks Cube 77 The dynamic creation pattern databases real time learning accelerate Sokoban problem solving 68 Generation tactical Go rules retrograde analysis The generation simple patterns retrograde analysis performed game Go life eyes connection 2729 The work extended tactical rulesin words patterns associated external conditions 34 The generated patterns associated rules ﬁt small rectangular shapes 2 2 6 3 represent parts board The external conditions correspond constraints relations objects outside rectangle The possible objects friendly strings enemy strings intersections Each intersection pattern different values black white An intersection associated different external conditions minimum number liberties friendly played intersection maximum number liberties enemy played intersection Each string pattern associated condition minimum number liberties friendly string maximum number liberties enemy string Each external conditions different values The possible conditions associated enemy strings 0 external liberties 1 external liberties 1 external liberties The possible conditions associated friendly strings 0 external liberties 1 external liberties 2 external liberties Therefore possibilities string possibilities intersection A pattern contains intersections edge pattern strings generates 9 9 3 3 729 different rules One compare number rules covered representation number endgame positions Checkers 78 There 406309208481 endgame positions 8 pieces Checkers number possible rules 53 rectangle center Go board 59241069331995 The number possible patterns lower possible values intersection pattern Friend Enemy Empty Therefore 315 possible patterns 5 3 rectangle pattern center Table 6 provides total number possible patterns rules corresponding size pattern location The algorithms generate rules slightly different generate endgame databases Usually generates pattern database endgame database bits code element bits code B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 81 Table 6 Size pattern Location Total number possible patterns Total number possible rules 2 2 3 2 4 2 3 3 5 2 4 3 6 2 5 3 3 2 4 2 3 3 5 2 4 3 6 2 3 4 5 3 3 3 4 3 5 3 Corner Corner Corner Corner Corner Corner Corner Corner Side Side Side Side Side Side Side Side Center Center Center 81 729 6561 19683 59049 531441 531441 5133 184137 6498165 23719791 228469857 3238523049 8023996893 14348907 464991949659 729 6561 19683 59049 531441 531441 531441 541101 18513177 191890599 631651053 20752761345 21555306681 68094804369 14348907 2353796975871 19683 531441 663693159 239111765601 14348907 59241069331995 values Won Lost Drawn 45687778 The bit arrays compressed standard compressing methods RunLength Encoding Chinook The positions associated byte stores minimal number moves winning maximal number moves losing 118131132 Given large number possible rules representation databases rules Instead pattern represented 32bit unsigned integer associated set conditions The rules kept rules won winning states represent small proportion possible rules This allows store generated rules reasonable space Table 7 provides number generated rules eyes A simple algorithm generate pattern databases consists going possible rules rule testing Won state given goal After traverse possible rules new rules discovered rules So discover possible rules algorithm traverse possible rules times long new rules discovered previous crossing This algorithm suited Go rules databases number possible 82 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 Table 7 Size pattern 3 2 4 2 3 3 5 2 4 3 3 4 6 2 Location Number won rules Number winning rules Side Side Side Side Side Side Side 11 171 727 1661 38909 14966 18194 108 1081 5570 5952 146272 62329 31500 Fig 31 rules high A appropriate algorithm starts generated rules undoes previous rules ﬁnd new rules directly looking possible rules ﬁnd Fig 31 shows generated rules aim black group live corner The use generated rules greatly enhances life death problem solving abilities Golois open groups 34 95 Explanationbased generalization metaprogramming For domainslike game Gothat strong underlying theory deductive learning method developed It called ExplanationBased Generalization EBG 88 ExplanationBased Learning EBL 46 Many studies focused application method planning 8687 This type learning particularly useful games Many programs deductive learning games described 85100 work Pitrat Chess 101 marking onset studies The application EBG game Go partially formalized Kojima 74 developed efﬁciently applied subproblems game Go Introspect 30 Explanationbased generalization The use EBG game Go attempted Kojima 74 capture stones As shown Fig 32 program starts positions stones captured undoes moves ﬁnd positions stones captured moves ahead B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 83 Fig 32 The information generated rules concerns colors stones positions There abstract potentially useful information generate interesting rules number liberties strings number shared liberties strings The ﬁnd forced moves On contrary given Despite limits approach offers advantage uncovering way apply EBG game Go Introspect Introspect metaprogramming EBG creates tactical rules multiple games particularly game Go It uses predicate logicfor example rule connect strings represented connectS1 S2 I Color color_stringS1 Color color_stringS2 Color libertyI S1 libertyI S2 This rule shows strings stones S1 S2 connected color Color intersection I S1 S2 color Color intersection I liberty S1 liberty S2 The generated rules deal tactical subgoals game Go capturing string making string live connecting strings disconnecting strings making eye removing eye They develop tactical tree searches stop search earlier stage reduce number moves examined Their originality comes fact theorems game Go Thanks characteristic set forced moves conclude complete In way prove limited number forced moves works proved works Similarly node rule concludes goal achieved search stopped certainty goal effectively achieved surrounding situation The rules develop OR nodes search trees created unfolding rules concluding won goal winning goal 556126 EBG 30 466288101 As classical operations logic programs enable Introspect generate rules OR nodes Introspect uses metaprograms speciﬁc games generate rules forced moves AND nodes search trees 32 These speciﬁc metaprograms analyze winning rule ﬁnd moves invalidate condition rule All invalidating moves constitute complete set forced moves prevent opponent achieving goal winning rule concludes 84 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 But EBG systems create knowledge useless rules slow To avoid phenomenon called utility problem enable limit Introspect generates rules contain fewer 200 conditions conclude sets 5 forced moves Unlike domains utility problem major obstacle good results obtained game Go simple utility knowledge The following rule generated Introspect capture string It concludes capture string represented variable S The color capture represented variable C intersection played capture string represented variable I move_to_captureC S I opposite_colorC1 C color_stringS C1 number_of_liberties_of_stringS 2 minimum_number_of_liberties_of_adjacent_stringsS 2 liberty_stringI S minimum_number_of_liberties_if_moveI C 2 liberty_stringI1 S I I1 number_of_liberties_of_string_if_moveS I C I1 C1 1 The condition minimum_number_of_liberties_of_adjacent_stringsS 2 veriﬁes strings adjacent string S liberties The condition minimum_number_of_liberties_if_moveIC2 checks color C intersection I liberties The condition number_of_liberties_of_string_if_moveSICI1C11 veri ﬁes color C intersection I followed color C1 tersection I1 liberty An illustration rule Fig 33 Black capture White string playing liberties The tactical programs generated Introspect Go program Gogol They enabled obtain decent results Computer Go competitions 53 Once generated rules gathered tree conditions compiled C When integrated Gogol million lines C Introspect general game metaprogramming 100102 generated knowledge domains game Go 30 Fig 33 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 85 96 Pattern generation ecological algorithm Kojima ecological algorithm discover patterns game Go 75 He uses games professional players examples The rules contain conditions relative positions stones friendly enemy stones relative coordinates location board edge Each rule considered individual activation value A learning example considered food eaten rules match example If rule matches new rule matches example created When rule activation value given threshold gives birth speciﬁc rule Each rule eats step algorithm activation value decreases The rules activation value 0 die This approach pattern generation generated competitive Go program 97 Conclusion Many learning methods tried game Go So far given astonishing results However temporal differences method program specialization method retrograde analysis metaprogramming interesting results compared classical methods game programming undoubtedly promising learning methods game Go The automatic generation knowledge needs investigated game Go domain par excellence learning program specialization methods useful One principal difﬁculties programming game Go lies ﬁnding knowledge writing relevant program represents knowledge Such current task learning Go programs 10 Monte Carlo Go 101 Monte Carlo methods physics The variation principle lies heart theoretical physics The path taken state space extremum The mechanisms ﬁnd extrema fundamental classical physics relativistic physics quantum physics Monte Carlo methods 7299 derived statistical physics A statistical composed large number particles The problem know speed position particles evolve time A feature evolution quantity energy activity minimized For example high temperatures metal liquid atoms randomly metal cooled atoms conﬁguration minimizes energya crystalline structure This process called annealing The longer cooling closer minimum energy cooled structure To Monte Carlo simulations choose representation possible states Then deﬁne set ergodic elementary moves allows state space conﬁgurations step step For given conﬁguration moves 86 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 generated randomly The evolution approximately assessed choosing probability depends growth activity resulting For example probability pE particle energy E temperature T pE expEkT k Boltzmann constant The increases energy cid19E accepted probability p expcid19EkT 102 Simulated annealing For function variables algorithms follow gradient ﬁnd lower values function enable ﬁnd local minimum function However look global minimum complex possibly nondifferentiable function little chance ﬁnding method Simulated annealing appropriate ﬁnd global minima complex functions contain variables generates moves increase value function To ﬁnd global minimum simulated annealing plays moves randomly state space If value function decreases accepted If increases value function accepted probability decreases exponentially increase value function temperature The temperature decreases time depending time given algorithm ﬁnd solution Simulated annealing applied combinatorial optimization problems like traveling salesman problem There N different paths N cities Simulated annealing ﬁnds solution close optimal solution polynomial time The algorithm begins random ordering cities There types possible moves The ﬁrst type reverse order cities path The type neighboring cities path Simulated annealing ﬁnd arrangement 25 cards 5 5 table values rows columns diagonals interpreted hands Poker maximized Simulated annealing successful faster simpler methods 103 The Gobble program The Gobble program 22 uses simulated annealing ﬁnd approximation best 9 9 board The principle Gomoku program designed Grigoriev 59 It consists randomly developing different possible games calculating statistics based results sequences moves possible The goal program ﬁnd approximation value different possible moves To end plays sequence moves moves ﬁll eyes In case captures moves played intersection At end sequence moves counts number points Black White The ﬁnal values associated intersection mean results corresponding sequences moves Black ﬁrst play intersection The problem consists ﬁnding order play possible moves different sequences The order moves different bring information B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 87 sequence Therefore Gobble uses different vector moves sequence The ﬁrst legal sequence moves chosen continue sequence vector moves corresponds sequence For sequences initial order vector moves sorting moves according approximate values calculated sequences This initial order modiﬁed going vector moves swapping neighboring moves probability depends temperature As sequences played temperature decreases probability moves swapped decreases The moves sorted according values The value initialized 0 ﬁrst iteration updated sequence moves Then program goes list moves swaps neighboring moves probability pswap The probability pn moved n steps pn pswapn expnT T 1 lnpswap pswap decreases linearly 0 depending number sequences Then sequences pswap remains 0 order ﬁnd nearest local extremum The useful information obtained random sequences proportionate number sequences played The mean error cid19v proportional square root number sequences cid19v 1 n Therefore calculate value precision onepoint given possible values results sequences vary 100 points approximately 10000 sequences played Gobble uses strategies strategy A play 500 1000 sequences ﬁnd moves strategy B play 400 sequences retain 4 best moves play 400 sequences 4 moves Using strategy A despite givingreceiving handicap stones Gobble plays equal games Many Faces Go Using strategy B despite givingreceiving handicap stones Gobble plays correctly Many Faces Go A speciﬁc property game Go taken account Gobble evaluate moves lies localization moves Locally game Go stable Chess example However results approximation real result localization moves veriﬁed state space Go regular The Gobble approach original relies limited knowledge Go ﬁll eyesand results average Go program Given simplicity program performances amazing This approach undoubtedly improved conclusions drawn experiments game programming problems 88 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 11 Mathematical morphology 111 Introduction This section highlights link image processing Computer Go The size board 19 19 game played smaller size pictures 1000 1000 processed pattern recognition domain Therefore complexity game Go situated far complexity image processing Nevertheless domains common efﬁcient tool mathematical morphology 120 Hence section shows use mathematical morphology Computer Go speciﬁcally EF Go program 112 Mathematical morphology game Go Mathematical morphology useful technique ﬁeld image processing For example operators enable systems delete details size ranks given scale Fuzzy mathematical morphology 12 reﬁnement gives good results Besides Go programmers use program At beginning Computer Go Zobrist model 147 explicitly performed mathematical morphology This model composed iterative dilations It enabled programs recognize inﬂuence human players This model ancestor reﬁnements today Go programs For example Indigo program makes explicit use mathematical morphology 1516 territory inﬂuencemodeling GnuGo 57 uses model This section focuses territories inﬂuence recognition provides information help understand Evaluation Function section First let mention basic operators mathematical morphology Let A set elements let DA morphological dilation Acomposed A plus neighboring elements A EA morphological erosion A It composed A minus elements neighbors complement A ExtBoundA morphological external boundary A given ExtBoundA DA A IntBoundA morphological internal boundary A given IntBoundA A EA ClosingA morphological closing A ClosingA EDA OpeningA morphological opening A given OpeningA DEA The opening closing operators helpful image processing We adapt operators adding reﬁnements numerical inputs outputs colors Black White We start assigning values 64 respectively 64 black respectively white intersections 0 The D operator consists adding absolute value intersection color number neighboring intersections color provided neighboring intersections color For intersection neighboring intersections color D adds number neighboring intersections color absolute value intersection D numerical reﬁnement classical dilation operator mentioned Similarly E operator consists subtracting absolute value intersection color number neighboring intersections value zero value corresponds B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 89 Fig 34 Fig 35 opposite color intersection E makes sure sign value changeotherwise value zero E numerical reﬁnement classical morphological erosion Once reﬁnements added use operators X E E E D D D Y D D D E composed e times D d times So result identity operator positions territory recognized link e d established For example trivial position stone located middle board X result identity operator Bouzy 16 shown e d d 1 1 d scaling factor The bigger d larger scale recognized territories 90 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 Fig 36 Fig 34 illustrates example position applied operators X Y Fig 35 shows result Y d 5 e 0 Fig 36 shows result X d 5 e 21 Fig 35 shows Go players inﬂuence Fig 36 shows territories accurately These points explain success mathematical morphology game Go 15 This technique EF Indigo program 1516 integrated GnuGo program 57 12 Cognitive science 121 Introduction This section deals studies carried Cognitive Science use game Go investigation aid After showing game Go appropriate domain cognitive science studies section investigates different studies conducted far 122 The game Go appropriate carrying cognitive science studies Cognitive science experiments aiming exploring human cognitive interacts real world set inside sufﬁciently complex domains Thus subjects able use cognitive faculties studied experiment So effective practice experiments complex Therefore domains complexity low high perfectly adapted Furthermore knowledge subjects experiments representative common sense knowledge human beings real world Therefore domain studied real world features To sum Cognitive Science requires domains representative real world B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 91 complexity lies complexity recreational experiments complexity realworld technically ineffective experiments Langston 80 defends idea game Go simpliﬁcation real world keeping main features following arguments The Go universe spatial dimensions temporal dimension real world spatial dimensions temporal dimension In addition Go universe ﬁnitethere 361 intersections Go board endowed color discrete value black white However real world inﬁnity points Furthermore inﬁnity viewpoints describes point viewpoint takes value belonging inﬁnite set Unlike real world Go universe formal rules game deﬁne characteristics game great accuracy Actually main advantage game Go compared games visual position black white intersections perceived simply abstract way In conditions player identify complex objects The strength player relies skill recognizing complex objects concrete information black white intersections This aspect exist markedly games Chess Checkers Othello objects reasoning process similarly deﬁned rules game Therefore justiﬁable choose game Go domain perform cognitive experiments 15112 We shall studies game Go far cognitive science community 123 Related works The different studies cognitive science carried game Go classiﬁed according chosen method hand measuring response times rebuilding observed hidden positionson hand analyzing verbal reports Measuring response times In Chess Chase Simon 35 measured time intervals separating actions subjects reconstructing positions seen later hidden They showed expert players use information organized chunks A chunk deﬁned cluster information The authors observed Chess experts build actual Chess positions quickly greater memory capacity non experts However random positions authors observed experts nonexperts performances equal The explanation given authors number memorized chunks equal experts nonexperts experts memorize specialized chunks This argument explain time differences building actual Chess positions In Go experiment 104 As Chess experiment shows experts use specialized chunks nonexperts Nevertheless conclusions difﬁcult reach Go Unlike Chess chunks Go complex linearly structured chosen differently according different viewpoints 92 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 Burmeister Wiles 23 experiments use inferential information build Go positions This contrasts perceptual information previous experiments 3561 A detailed study strong Japanese players 6 8 dan conducted 24 The authors conclude explanation moves important factor memorizing positions sequences moves Thus strong players clearly remember games strong players difﬁculty remembering games weak players weak moves meaning Consequently strong player use representation familiar withthis reduces memorizing capacities Analyzing verbal reports Scores cognitive studies rely natural language production First let sum arguments use study types information irrespective domain On methodological Ericsson Simon 49 propose method set cognitive models relying verbal reports The success method simply lies verbal production model included cognitive model Thus validation cognitive model simply performed comparing verbal production cognitive model subjects Concerning results obtained analyzing verbal reports Vermersch 135 defends idea possible extract knowledge everyday life experiments driving car baking cake The author thinks extraction precision accurate cognitive models built On contrary Nisbett Wilson 97 argue psychological experiments general verbal reports particular strongly distorted experimenters For authors experimenters uncover looking experimenters experiments aiming proving contrary As result divergent opinions effectiveness experiments based verbal reports In Go Saito Yoshikawa 112113115 showed human players use natural language terms play games The authors recorded players voices playing games solving Go problems They specialized hardware record subjects eye movements looked Go board The authors observed friendly opposing moves named Small tree searches appear verbal expressions proverbs The authors conclude natural language plays important role playing Go They use terms depends players rankings 145 So demonstrate developed iceberg model 146 shows knowledge implicit conscious little information explicitly present verbal reports Bouzy 15 presents cognitive model Go player It designed following steps First cognitive model based strong players verbal reports The cognitive model validated construction computational model But unfortunately results computational model conclusive Therefore cognitive model simpliﬁed second stage novice players verbalizations Surprisingly level computational model based verbal reports novice players higher level program based experts verbal reports This obvious paradox explained fact expert verbalizationbased model B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 93 high level knowledge referring lowlevel knowledge Therefore modelwith high level knowledgewas grounded solid foundations corresponding program poor results The lowlevel knowledge program enabled play novice level better results Nevertheless signiﬁcant conclusion work Of course programs implementation required use concepts explicitly expressed reports required use concepts called hidden concepts explicitly identiﬁed reports Thereby assumed correspondence existed hidden concepts hand implicit knowledge human players hand This hypothesis bears great similarity iceberg model 146 This correspondence hypothesis assumed Bouzy 1519 shown existence human players implicit knowledge group concept insideoutside concept Evaluation Function section incrementality concept 20 Optimization section Incidentally concepts intuitive useful helping play Go They appear clearly Go players verbal reports making difﬁcult set correct model Go Nevertheless approach let researchers obtain insights way humans use implicit knowledge In 19 author argues tries implementation complex domain Go uncovers concepts easier model domain These concepts correspond verbal reports natural language terms domain As concepts correspond explicit knowledge hypothesis correspond implicit knowledge 124 Conclusion The game Go real world simpliﬁcation keeps essential features appropriate domain conduct cognitive studies 80 Reitman 104 reproduced Chess experiment 35 Go conclusions far obvious chunks linearly organized corresponded different viewpoints difﬁcult classify Bouzy 15 shown bulk Go players knowledge conscious extracting knowledge implementation Yoshikawa et al 146 argue natural language plays important role Go maintain Go players knowledge implicit large extent 13 Conclusion 131 Summary In paper presented Computer Go numerous links AI First shown Section 2 complexity Go higher complexity twoplayer complete information games This complexity number possible moves given position cost evaluation position In Section 3 mentioned best Go programs obtain average results took years develop programs The best current programs Goemate 94 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 In contrast Go4 Many Faces Go Wulu Go Intellect However subproblems Go life death problems endgame problems results excellent GoTools 140 142 solves life death problems level corresponds best amateur players Berlekamp Wolfe 9 mathematical model ﬁnds sequences better professional players sequences speciﬁc late endgame positions excellent results obtained subproblems weak performance programs complete game explained difﬁculty extending problem solving tools general tools It vital Go programs ﬁnd good solutions cases occur actual games For example difﬁcult solve life death problems groups completely surrounded GoTools solves completely surrounded groups 142 Section 4 described Go evaluation function complexity interdependent concepts grouping inside outside interaction territory inﬂuence life death Numerous deﬁnitions concepts possible The choices design program bring loss information Moreover choices implemented efﬁcient fashion making design evaluation function difﬁcult As described Section 4 characteristic evaluation function use local tree searches simple goals To build EF TS tactical goals string capture connection strings eye veriﬁcation commonly performed The results tactical goals build groups upper abstraction level Other TSon abstract goals life death groups interactions groups performed second stage All results processed build EF global abstraction level The EF calculation slow prevent classical TS Contrary games TS uses EF Go EF uses TS Section 5 mentioned ﬁrst Go programs expert systems single Move Generation module Evaluation Function Tree Search So far Evaluation Function Tree Search modules necessary write current Go programs Move Generation module occupied occupies special position Instead Tree Search select directly Because TS performed locally goaloriented way performed computation static strategic position evaluation requires important knowledge Therefore worth keeping knowledge method having static goal andor evaluations position evaluation This time saving approach far simple Move selection undoubtedly remains complex needs accurate domaindependent knowledge Global generation multiple facets supplemented tree search module check goals achieved Section 6 considered characteristics TS First local situations position viewed independent global TS approximated local TSthat local TS selective TS moves sufﬁciently far away preceding ones discarded Another important feature game Go local situation player ﬁrst play necessitates computation TS local situation The evaluation function result local TS simple goals contain uncertainty A quiet position B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 95 deﬁned position uncertainty Quiescence search algorithms appropriate approach The programmer choose search algorithms For goals use data structures incrementally updated AlphaBeta algorithm choice When number moves position varies lot better use PNSearch For given subproblem search algorithm chosen according characteristics Given computational complexity Go playing programs important perform computations fast possible It possible compute longer sequences moves obtain information position accurate evaluation Section 7 listed numerous possible optimizations level abstraction program For example incrementally calculating liberties strings widely accepted technique lowest level program When computing tactical search sequences moves repeated An interesting optimization consists playing sequences moves playing time reanalyzing position Another example low level optimization centers use bitstring operations calculate dilation erosion operators mathematical morphology Other optimizations useful abstract levels The objects related results local TS memorized local TS computed ones contain objects modiﬁed At highest level program optimized eliminating computations lower levels leaving choice unchanged As presented Section 8 possibility splitting global position subpositions enables programmers apply sum game theory Berlekamp achieved excellent results applying theory late endgame This result explained speciﬁcity test positions local situations totally independent In real game positions local situations independent sum game theory apply directly attempts performed far Explorer undoubtedly program uses theory best way thanks thermograph calculations Other studies eyes 79 ﬁghts groups 95 temperature calculations 71 performed Neural network learning methods described Section 9 speciﬁcally temporal difference method allow program automate creation evaluation function replace strategic level Go program low cost NeuroGo uses quickly deﬁned quickly computed inputs successfully competes programs based elaborate methods concepts An interesting attempt consist elaborate inputs learning time prohibitive So far programs EF based TD method reached level best programs However good results comparing design complexity classical programs low complexity programs based method Other approaches aim transfer work knowledge generation programmer logical metaprogramming retrograde analysis applied tactical patterns These approaches generate millions rules enable tactical problems solved quickly accurately In welldeﬁned subproblems like life death groups Golois uses automatically generated knowledge ranks similar better level programs 96 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 Very different problem solving methods adapted game Go In Section 10 Monte Carlo methods surprisingly provides average level Go programs 9 9 boards Based method Gobble designed simple way like NeuroGo competes effectively far complex programs Since game Go visual normal explore usual techniques image processing useful Computer Go This examined Section 11 Although 19 19 boards smaller images processed Computer Vision mathematical morphology enables Go programs like Indigo GnuGo recognize territories inﬂuence dilation erosion closing operators Section 12 showed Go domain wellsuited performance cognitive experiments In order obtain signiﬁcant results confused complexity real world cognitive science requires clearly formalized domains like games So extract intuitive nonconscious knowledge human beings domain sufﬁciently complex The game Go intermediate complexity good domain experiments The Indigo program devised validate cognitive model based verbal reports novice players Saito Yoshikawa 112 shown hand Go players use natural language guide thinking process hand use implicit knowledge way similar iceberg model Some experiments Chess repeated Go Reitman 104 As Chess expert players recognize real game positions better novice players obtaining comparable results random positions 132 Future work Given present state Computer Go programming wonder Computer Go likely evolve years We mentioned different studies try ﬁgure paradigm result studies Computer Go programmers currently agree concepts tools All programs modules compute capture strings They modules connecting strings killing groups making groups live But relatively low level abstraction underlying concepts modules differ program For example Many Faces Go uses incremental Alpha Beta compute strong connections Go4 uses connectivity probability map Since Go program interconnected difﬁcult argue best way compute connection The choice method solving subproblem depends global architecture program choices modules The problem comparing pros cons different architectures currently use remains unsolved The EF computation complex interacting concepts An attractive approach design multivalued EF value corresponding concept A bivalued EF applied ﬁghts groups 95 multivalued EF applied subproblems game Go One problem use multivalued EF TS We shown automatic knowledge generator successfully applied tactical levels program We ask technique B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 97 good results abstract levels TD learning techniques simulated annealing techniques programs simple data structures reach global goal Some parts best programs improved tools First low abstraction levels instance estimate connectivity Second global levels abstract information Third Monte Carlo methods applied subproblems life death In 1995 Handtalkthe Computer Go world championplayed moves instantly The speed assembly coding limited tree search associated good heuristics ﬁnding good moves The goal program select TS way ﬁnd Unlike Chess TS game Go partly replaced tools select good moves positions In quiet positions tree search useful method based abstract description board good results After obtaining results relating late endgame eyes ﬁghts combinatorial game theory probably successfully applied Go subproblems Concerning game local computations reach end global level program needs tools represent uncertainty A good program use uncertainty description Conways theory In addition local games actual game independent On contrary dependent At moment programs use simple idea increasing priority moves contribute local dependent games But far study performed idea formalization different independence classes set An interesting idea formalize use goal interaction games The problem performing TS conjunctions disjunctions goals remains solved The promising results GoTools life death problems containing completely surrounded groups offer attractive prospects developing life death problem solver partially surrounded groups This kind problem arises actual games problem solver useful The number possible moves increase search deepens constitutes major obstacle building solver Search life death completely surrounded groups easier number possible moves decreases depth increases Another obstacle taken account dynamic deﬁnition goal reached making eyes escaping ﬁghting Another possibility evolution programs use parallelism The distributed nature game Go makes idea appealing At present program uses parallelism Lastly mention likely evolution level Go programs years come In late 1980s Mr Ing decided award prizes programs beat professional player series games year 2000 Today young professional players 9 handicap stones best programs players playing programs able 29 handicap stones programs This difference terms number handicap stones explained follows During ﬁrst gameswhen human opponent confronts strengths computerthe program illusion stronger actually 98 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 plays high level Some games later human opponent discovers weaknesses later human opponent identiﬁes weaknesses level generally drops low level Nowadays high level best programs assessed 5th kyuthis corresponds average player Go club However low level ranks 15th kyu beginner level As long gap low high levels reduced risky prediction evolution level Go programs References 1 LV Allis Searching solutions games artiﬁcial intelligence PhD Thesis Vrije Universitat Amsterdam 1994 httpwwwcsvuvictorthesishtml 2 LV Allis M van der Meulen HJ van den Herik Proofnumber search Artiﬁcial Intelligence 66 1994 91124 3 LV Allis HJ van den Herik M Huntjens Gomoku solved new search techniques Comput Intelligence 11 4 1995 4 TS Anantharaman M Campbell FH Hsu Singular extensions Adding selectivity brute force searching Artiﬁcial Intelligence 43 1 1989 99109 5 J Barklund Metaprogramming logic UPMAIL Technical Report 80 Uppsala Sweden 1994 6 D Beal A generalised quiescence search algorithm Artiﬁcial Intelligence 43 1 1989 8598 7 D Benson Life game Go Inform Sci 10 1976 1729 Reprinted DNL Levy Ed Computer Games Vols 1 2 Springer New York 1988 8 E Berlekamp Introductory overview mathematical Go endgames Proceedings Symposia Applied Mathematics 43 1991 9 E Berlekamp D Wolfe Mathematical Go Endgames Nightmares Professional Go Player Ishi Press International San Jose CA 1994 10 HJ Berliner The B tree search algorithm A bestﬁrst proof procedure Artiﬁcial Intelligence 12 1979 2340 11 HJ Berliner Backgammon program beats world champion Artiﬁcial Intelligence 14 1980 205220 12 I Bloch H Maître Ensembles ﬂous et morphologie mathématique Télécom Paris 92 D007 Département Images Groupe Image 1992 13 M Boon A pattern matcher Goliath Computer Go 13 1990 1323 14 M Boon Overzicht van ontwikkeling van een Go spelend programma Afstudeer Scriptie Informatica onder begeleiding van Prof J Bergstra Amsterdam 1991 15 B Bouzy Modélisation cognitive du joueur Go PhD Thesis University Paris 6 1995 httpwwwmathinfounivparis5frbouzy 16 B Bouzy Les ensembles ﬂous au jeu Go Actes des Rencontres Françaises sur la Logique Floue et ses Applications LFA95 Paris France 1995 pp 334340 17 B Bouzy The Indigo program Proceedings Second Game Programming Workshop Japan Hakone 1995 pp 197206 18 B Bouzy There winning moves Proceedings IPMU96 Granada Spain 1996 pp 197202 19 B Bouzy Explicitation connaissances non conscientes par modélisation computationnelle dans domaine complexe le jeu Go Actes du 2eme Colloque Jeunes Chercheurs en Sciences Cognitives Giens France 1996 pp 276279 20 B Bouzy Incremental updating objects Indigo Proceedings fourth Game Programming Workshop Japan Hakone 1997 pp 179188 21 B Bouzy Complex games practice Proceedings Fifth Game Programming Workshop Japan Hakone 1999 pp 5360 22 B Brugmann Monte Carlo Go ftpwwwjoynejpwelcomeigsGocomputermcgotexZ B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 99 23 J Burmeister J Wiles The use inferential information remembering Go positions Proceedings Third Game Programming Workshop Japan Hakone 1996 pp 5665 24 J Burmeister Y Saito A Yoshikawa J Wiles Memory performance master Go players Proceedings IJCAI Workshop Using Games Experimental Testbed AI Research Nagoya Japan 1997 25 M Buro Methods evaluation game positions examples PhD Thesis University Paderborn Germany 1994 26 M Campbell T Marsland A comparison minimax tree search algorithms Artiﬁcial Intelligence 20 4 1983 347367 27 T Cazenave Apprentissage la résolution problèmes vie et mort au jeu Go Rapport du DEA dIntelligence Artiﬁcelle lUniversité Paris 6 1993 28 T Cazenave Automatic ordering predicates metarules Proceedings 5th International Workshop Metareasoning Metaprogramming Logic Bonn Germany 1996 29 T Cazenave Automatic acquisition tactical Go rules Proceedings Third Game Programming Workshop Japan Hakone 1996 pp 1019 30 T Cazenave Système dApprentissage par AutoObservation Application au Jeu Go PhD Thesis University Paris 6 1996 httpwwwaiunivparis8frcazenave 31 T Cazenave R Moneret Development evaluation strategic plans Proceedings Fourth Game Programming Workshop Japan Hakone 1997 pp 7579 32 T Cazenave Metaprogramming forced moves Proc ECAI98 Brighton England 1998 pp 645649 33 T Cazenave Metaprogramming domain speciﬁc metaprograms Proceedings MetaLevel Architec tures Reﬂection Reﬂection99 Lecture Notes Computer Science Vol 1616 Springer Berlin 1999 pp 235249 34 T Cazenave Generation patterns external conditions game Go HJ van den Herik B Monien Eds Advances Computer Games Vol 9 Univ Limburg Maastricht 2001 35 W Chase H Simon Perception chess Cognitive Psychology 4 1973 81 36 K Chen Group identiﬁcation Go DN Levy DF Beal Eds Heuristic Programming Artiﬁcial Intelligence The First Computer Olympiad Ellis Horwood Chichester 1989 pp 195210 37 K Chen The decision process Go intellect Computer Go 14 1990 917 38 K Chen Attack defense HJ van den Herik LV Allis Eds Heuristic Programming Artiﬁcial Intelligence Vol 3 The Third Computer Olympiad Ellis Horwood Chichester 1992 pp 146156 39 K Chen Z Chen Static analysis life death game Go Inform Sci 121 12 1999 113134 40 K Chen Some practical techniques global search Go ICGA J 23 2 2000 6774 41 Z Chen Email sent 5th January 1997 Computer Go mailing list httpwwwcsuoregon edurichardcomputergo 42 Z Chen Email sent 11th May 1997 Computer Go mailing list httpwwwcsuoregon edurichardcomputergo 43 JH Conway On Numbers Games Academic Press New York 1976 44 JH Conway ER Berlekamp RK Guy Winning Ways Academic Press New York 1982 45 JC Culberson J Schaeffer Pattern databases Computational Intelligence 14 3 1998 318334 46 G Dejong R Mooney Explanation based learning An alternative view Machine Learning 2 1986 47 H Enderton The Golem Go program Carnegie Mellon University CMUCS92101 Pittsburgh PA 1992 Technical Report available ftpwwwjoynejpwelcomeigsGocomputergolemshZ 48 M Enzenberger The integration priori knowledge Go playing neural network 1996 httpwwwmarkusenzenbergerdecompgo_bibliohtml 49 KA Ericsson H Simon Protocol Analysis Verbal Reports Data MIT Press Cambridge MA 1980 50 D Fotland The program G2 Computer Go 1 1986 1016 51 D Fotland Knowledge representation The Many Faces Go 2nd CannesSophiaAntipolis Go Workshop February 1993 ftpwwwjoynejpwelcomeigsGocomputermfgZ 52 D Fotland Computer Go Design Issues Email sent 1st October 1996 Computer Go mailing list httpwwwcsuoregonedurichardcomputergo 53 D Fotland A Yoshikawa The 3rd FOST cup worldopen computergo championship ICCA J 20 4 1997 276278 100 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 54 A Fraenkel D Lichtenstein Computing perfect strategy n n Chess requires time exponential J Combin Theory Serie A 31 2 1981 199214 55 KJ Friedenbach Abstraction hierarchies A model perception cognition game Go PhD Thesis University California Santa Cruz CA 1980 56 J Gallagher Specialization logic programs D Schmidt Ed Proceedings ACM SIGPLAN Symposium PEPM93 ACM Press Copenhagen 1993 57 Gnu Go home page httpwwwgnuorgsoftwaregnugodevelhtml 1999 58 R Greenblatt D Eastlake S Croker The Greenblatt chess program Proceedings Fall Joint Computer Conference 1967 pp 801810 59 A Grigoriev Artiﬁcial Intelligence stochastic relaxation Simulated annealing challenge DNL Levy DF Beal Eds Heuristic Programming Artiﬁcial Intelligence Vol 2 Ellis Horwood Chichester 1991 pp 210216 60 R Grimbergen A plausible generator Shogi static evaluation Proceedings Fifth Game Programming Workshop Japan Hakone 1999 pp 915 61 A Groot Psychological Studies T4 Thought Choice Chess Mouton La Hague 1965 62 F van Harmelen A Bundy Explanation based generalisation partial evaluation Artiﬁcial Intelli gence 36 1988 401412 63 HJ van den Herik LV Allis IS Herschberg Which games survive DNL Levy DF Beal Eds Heuristic Programming Artiﬁcial Intelligence Vol 2 The Second Computer Olympiad Ellis Horwood Chichester 1991 pp 232243 64 R High Mathematical Go Computer Go 1990 1424 65 S Hu Multipurpose adversary planning game Go PhD Thesis George Mason University Fairfax VA 1995 66 S Hu P Lehner Multipurpose strategic planning game Go IEEE Transactions Pattern Analysis Machine Intelligence 19 3 1997 10481051 67 FH Hsu TS Anantharaman M Campbell A Nowatzyk A grandmaster chess machine Scientiﬁc American 263 4 1990 68 A Junghanns J Schaeffer Singleagent search presence deadlocks Proc AAAI98 Madison WI 1998 69 G Kakinoki The search algorithm Shogi program K30 H Matsubara Ed Computer Shogi Progress Kyoritsu Shuppan Co Tokyo 1996 pp 123 Japanese 70 YK Kao Sum hot tepid combinatorial games PhD Thesis University North Carolina Charlotte NC 1997 71 YK Kao Mean temperature search Go endgames Inform Sci 122 2000 7790 72 S Kirkpatrick C Gelatt M Vecchi Optimisation simulated annealing Science 220 1983 671680 73 DE Knuth An analysis alphabeta pruning Artiﬁcial Intelligence 6 4 1975 293326 74 T Kojima K Ueda S Nagano A case study acquisition reﬁnement deductive rules based EBG adversary game How capture stones Go Proceedings Game Programming Workshop Japan 1994 pp 3443 75 T Kojima K Ueda S Nagano An evolutionary algorithm extended ecological analogy application game Go Proc IJCAI97 Nagoya Japan 1997 pp 684689 76 R Korf Depthﬁrst iterative deepening An optimal admissible tree search Artiﬁcial Intelligence 27 1985 97109 77 R Korf Finding optimal solutions Rubiks Cube pattern databases Proc AAAI97 Providence RI 1997 pp 700705 78 R Lake J Schaeffer P Lu Solving large retrogradeanalysis problems network workstations HJ van der Herik IS Herschberg JWHM Uiterwyk Eds Advances Computer Chess Vol 7 University Limburg Maastricht Netherlands 1994 pp 135162 79 H Landman Eyespace values Go RJ Nowakowski Ed Games No Chance Cambridge University Press Cambridge 1996 pp 227257 80 R Langston Perception Go problem AI Computer Go 6 1988 81 D Lefkovitz A strategic pattern recognition program game Go University Pennsylvania The Moore School Electrical Engineering Wright Air Development Division Technical Note 60243 192 1960 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 101 82 D Lichtenstein M Sipser Go polynomialspace hard J ACM 27 2 1980 393401 83 D McAllester Conspiracy numbers minmax search Artiﬁcial Intelligence 35 1988 287310 84 H Matsubara Shogi Japanese chess AI research target chess Technical Report Electrotechnical Laboratories 9323 Japan September 1993 85 S Minton Constraintbased generalization learning gameplaying plans single examples Proceedings AAAI84 Austin TX William Kaufmann Los Altos CA 1984 pp 251254 86 S Minton J Carbonell C Knoblock D Kuokka O Etzioni Y Gil Explanationbased learning A problem solving perspective Artiﬁcial Intelligence 40 1989 63118 87 S Minton Quantitative results concerning utility explanationbased learning Artiﬁcial Intelli gence 42 23 1990 363391 88 TM Mitchell RM Keller ST KedarKabelli Explanationbased generalization A unifying view Machine Learning 1 1 1986 89 M Müller Games Theories Computer Go Computer Go Workshop Cannes 1993 90 M Müller Computer Go sum local games An application combinatorial game theory PhD Thesis Swiss Federal Institute Technology Zürich 1995 httpwebcsualbertacammueller 91 M Müller L Gasser Experiments Go endgames RJ Nowakowski Ed Games No Chance Cambridge University Press Cambridge 1996 pp 273284 92 M Müller E Berlekamp W Spight Generalized thermography Algorithms implementation application Go endgames TR96030 Berkeley CA 1996 93 M Müller Computer Go A research agenda HJ van den Herik H Iida Eds Proc CG98 Lecture Notes Computer Science Vol 1558 Springer Heidelberg 1998 pp 252264 94 M Müller Decomposition search A combinatorial games approach game tree search applications solving Go endgames Proc IJCAI99 Stockholm Sweden 1999 pp 578583 95 M Müller Race capture Analyzing Semeai Go Proceedings Fifth Game Programming Workshop Japan Hakone 1999 pp 6168 96 M Müller Not like gamesWhy tree search Go different Proceedings 5th Joint Conference Information Sciences 2000 97 RE Nisbett TD Wilson Telling know Verbal reports mental processes Psychological Review 84 1977 231259 98 J Nunn Extracting information endgame databases ICCA J 1993 191200 99 R Otten L van Ginneken The Simulated Annealing Algorithm Kluwer Academic Dordrecht 1989 100 B Pell Metagame A new challenge games learning HJ van den Herik LV Allis Eds Heuristic Programming Artiﬁcial Intelligence Vol 3 The Third Computer Olympiad University Limburg Maastricht 1992 pp 237251 101 J Pitrat A program learning play chess Chen Ed Pattern Recognition Artiﬁcial Intelligence Academic Press 1976 pp 399419 102 J Pitrat Games The challenge ICCA J 21 3 1998 147156 103 M Reiss Email sent January 1995 Computer Go mailing list httpwwwcsuoregon edurichardcomputergo 104 J Reitman Skilled perception Go Deducing memory structures interresponse times Cognitive Psychology 8 3 1976 336356 105 W Reitman B Wilcox The structure performance INTERIM2 Go program Proc IJCAI 79 Tokyo Japan 1979 pp 711719 Reprinted DNL Levy Ed Computer Games Vols 1 2 Springer New York 1988 106 H Remus Simulation learning machine playing Go CM Popplewell Ed Proceedings IFIP Congress NorthHolland Amsterdam 1963 Also Information Processing 1962 428432 107 P Ricaud Gobelin Une approche pragmatique labstraction appliquée à la modélisation la stratégie elémentaire au jeu Go PhD Thesis Paris 6 University 1995 108 P Ricaud A model strategy game Go abstraction mechanisms Proceedings IJCAI 97 Nagoya Japan 1997 pp 678683 109 JM Robson N N checkers exptime complete TRCS8212 Australian National University Department Computer Science 1982 110 JM Robson The Complexity Go TRCS8214 Australian National University Department Computer Science 1982 Also Proceedings IFIP 1983 pp 413417 102 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 111 J Ryder Heuristic analysis large trees generated game Go PhD Thesis Department Computer Science Stanford University 1971 112 Y Saito A Yoshikawa Do Go players think words Interim report analysis Go players protocol Proceedings Second Game Programming Workshop Japan Hakone 1995 pp 118 127 113 Y Saito A Yoshikawa An analysis strong Goplayers protocols Proceedings Third Game Programming Workshop Japan Hakone 1996 pp 6675 114 AL Samuel Some studies machine learning game checkers IBM J Res Develop 3 3 1959 115 AL Samuel Some studies machine learning game checkers II IBM J Res Develop 11 6 1967 116 J Schaeffer Conspiracy numbers Artiﬁcial Intelligence 33 1 1990 6784 117 J Schaeffer J Culberson N Treloar B Knight P Lu D Szafron A world championship caliber checkers program Artiﬁcial Intelligence 53 1992 273289 118 J Schaeffer One Jump AheadChallenging Human Supremacy Checkers Springer Berlin 1997 119 N Schraudolph P Dayan T Sejnowski Temporal difference learning position evaluation game Go Neural Information Processing Systems Vol 6 Morgan Kaufmann San Mateo CA 1994 120 J Serra Image Analysis Mathematical Morphology Academic Press London 1982 121 CE Shannon Programming play chess Philosoph Magazine 41 1950 256275 122 W Spight Extended thermography multiple Kos Go HJ van den Herik H Iida Eds First International Conference Computer Games 98 Lecture Notes Computer Science Vol 1558 Springer Berlin 1998 pp 232251 123 L Stiller Multilinear algebra chess endgames RJ Nowakowski Ed Games No Chance MSRI Publication Vol 29 Cambridge University Press Cambridge 1996 124 G Stockman A minimax algorithm better alphabeta Artiﬁcial Intelligence 12 1979 179196 125 R Sutton Learning predict method temporal differences Machine Learning 3 1988 944 126 H Tamaki T Sato Unfoldfold transformations logic programs Proceedings 2nd Internat Logic Programming Conference Uppsala University 1984 127 G Tesauro TJ Sejnowski A parallel network learns play Backgammon Artiﬁcial Intelligence 39 1989 357390 128 G Tesauro Practical issues temporal difference learning Machine Learning 8 1992 257277 129 G Tesauro TDGammon self teaching backgammon program achieves masterlevel play Neural Comput 6 2 1994 215219 130 G Tesauro Temporal difference learning TDGammon Comm ACM 38 1995 5868 131 K Thompson Retrograde analysis certain endgames ICCA J 9 3 1986 131139 132 K Thompson 6piece endgames ICCA J 1996 215226 133 E Thorpe W Walden A partial analysis Go Computer J 7 3 1964 203207 134 E Thorpe W Walden A assisted study Go M N boards Inform Sci 4 1972 133 135 P Vermersch Les connaissances non conscientes lhomme au travail Le Journal des Psychologues 84 1991 136 J von Neumann O Morgenstern Theory Games Economic Behavior Princeton Univ Press Princeton NJ 1944 137 B Wilcox Computer Go American Go J 13 456 1978 14 156 1979 19 1984 Reprinted DNL Levy Ed Computer Games Vols 1 2 Springer New York 1988 138 P Woitke New ladder participant Email sent 11th March 1996 Computer Go mailing list httpwwwcsuoregonedurichardcomputergo 139 P Woitke Computer Go summary Email sent 5th October 1996 Computer Go mailing list httpwwwcsuoregonedurichardcomputergo 140 T Wolf The program GoTools computergenerated tsumego database Proceedings First Game Programming Workshop Japan Hakone 1994 p 84 141 T Wolf About problems generalizing tsumego program open positions Proceedings Third Game Programming Workshop Japan Hakone 1996 pp 2026 142 T Wolf Forward pruning heuristic search techniques tsume Inform Sci 122 2000 5976 B Bouzy T Cazenave Artiﬁcial Intelligence 132 2001 39103 103 143 H Yamashita Half extension algorithm Proceedings Fourth Game Programming Workshop Japan Hakone 1997 pp 4654 144 H Yamashita YSS About datastructures algorithm H Matsubara Ed Computer Shogi Progress 2 Kyoritsu Shuppan Co Tokyo 1998 pp 112142 Japanese 145 A Yoshikawa Y Saito The difference knowledge solving TsumeGo problem according skill Proceedings Fourth Game Programming Workshop Japan Hakone 1997 pp 8795 146 A Yoshikawa T Kojima Y Saito Relations skill use termsAn analysis protocols game Go HJ van den Herik H Iida Eds Proceedings First International Conference Computer Games 98 Lecture Notes Computer Science Vol 1558 Springer Berlin 1998 pp 282299 147 A Zobrist A model visual organization game Go Proc AFIPS Spring Joint Computer Conference Boston AFIPS Press Montvale NJ 1969 pp 103111 148 A Zobrist A new hashing method application game playing Technical Report 88 University Wisconsin April 1970 Reprinted ICCA J 13 2 1990 6973 149 A Zobrist Feature extractions representation pattern recognition game Go PhD Thesis Graduate School University Wisconsin Madison WI 1970