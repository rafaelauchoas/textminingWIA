Artiﬁcial Intelligence 175 2011 4978 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint ModularE role elaboration tolerance solving qualiﬁcation problem Antonis Kakas Loizos Michael b Rob Miller c University Cyprus PO Box 20537 CY1678 Cyprus b Harvard University Cambridge MA 02138 USA c University College London London WC1E 6BT UK r t c l e n f o b s t r c t Article history Available online 3 April 2010 Keywords Reasoning actions Elaboration tolerance Qualiﬁcation problem Default reasoning We ModularE ME specialized modeltheoretic logic reasoning actions ME able represent nondeterministic domains involving concurrency static laws constraints indirect effects ramiﬁcations narrative information form action occurrences observations time line We formal results characterize MEs high degree modularity elaboration tolerance properties help separate provide principled solutions different aspects qualiﬁcation problem In particular identify endogenous qualiﬁcation problem problem properly accounting highly distributed potentially conﬂicting causal knowledge reasoning effects actions We comprehensive solution endogenous qualiﬁcation problem helps simplify exogenous qualiﬁcation problem problem reconciling conﬂicts predictions true particular times actual observations More precisely ME able use straightforward default reasoning techniques solve exogenous qualiﬁcation problem largely robust treatments frame ramiﬁcation endogenous qualiﬁcation problems combine particular characteristic elaboration tolerance formally encapsulate notion free 2010 Elsevier BV All rights reserved 1 Introduction For half century seminal work John McCarthy instrumental identifying major areas issues directions progress Knowledge Representation logicbased AI In particular research reasoning action change RAC originally initiated McCarthy collaborators continues central topic ﬁeld Classical RAC formalisms Situation Event Fluent Calculi 26283236 semantically specialized counterparts TAL Dynamic Logic Languages A E C 58101215 increasingly proving worth traditionally related areas planning cognitive robotics ﬁelds diverse computational biology semantic web software engineering 273338 Irrespective particular logic formalism developed certain issues long time considered fundamental RAC Foremost course frame problem succinctly ﬂexibly represent reason noneffects actions avoiding pitfalls infamous Hanks McDermott problem 11 More recently focus ramiﬁcation problem accommodate knowledge inferences Corresponding author Email addresses antonisucyaccy A Kakas loizoseecsharvardedu L Michael rsmuclacuk R Miller URLs httpwww2csucyaccyantonis A Kakas httpwwweecsharvardeduloizos L Michael httpwwwuclacukslaisrobmiller R Miller 00043702 matter 2010 Elsevier BV All rights reserved doi101016jartint201004008 50 A Kakas et al Artiﬁcial Intelligence 175 2011 4978 indirect knockon effects actions Largely result growing consensus RAC formalisms need explicitly incorporate notion causality However fundamental issue identiﬁed McCarthy generally perceived important received relatively little attention date This qualiﬁcation problem 2237 relates diﬃculties adequately qualifying statements executability effects direct indirect actions One fact naturally cast qualiﬁcation problem terms McCarthys Appearance Reality phenomenon 25 The reality domain captured context RAC formalisms effect laws directly observable laws necessity incomplete This incompleteness leads cases inconsistency rendering reasoning process incapable drawing conclusion The qualiﬁcation problem viewed problem let appearances domain captured observations qualify beliefs reality inconsistency lifted meaningful conclusions drawn The qualiﬁcation problem main focus paper But ramiﬁcation problem proved timately related frame problem qualiﬁcation problem inextricably linked frame ramiﬁcation problems development solution inevitably leads reexamination solutions Hence necessary preliminary main aim present exceptionally robust complete solution frame ramiﬁcation problems combined We illustrate McCarthys notion elaboration tolerance 24 long considered desirable RAC frameworks plays key role combined solution problems 11 Some terminology In order aspects qualiﬁcation problem approach solving convenient ﬁrst summarize terminology commonly research area Timevarying properties world potentially affected actions usually referred ﬂuents The terms action event synonymously A state assignment truth value ﬂuent Narrativebased formalisms TAL Event Calculus Language E employ structure timepoints time intervals deﬁned independently actions ﬂuents One way explicitly implicitly frameworks associate unique state timepoint model In formalisms ﬂuent holds timepoint true associated state On hand nonnarrativebased formalisms Situation Fluent Calculi Language A avoid use independent time structure reasoning directly sequences actions Such formalisms way explicitly implicitly associate unique state allowed action sequence model The term situation refer sequence actions refer state associated sequence actions There common terminology regards different types statements sentences RAC formalisms The terms effect law effect axiom causal law characterize sentence describing speciﬁc causal effect For example effect turning ignition key car write syntax Situation Calculus Event Calculus Language C respectively HoldsEngineRunning DoTurnKey s HoldsBatteryCharged s InitiatesTurnKey EngineRunning t HoldsAtBatteryCharged t TurnKey causes EngineRunning BatteryCharged The qualiﬁcation BatteryCharged effect law example ﬂuent precondition necessary BatteryCharged hold order TurnKey action successfully executed BatteryCharged necessary TurnKey action particular effect EngineRunning In contrast effect laws executability laws specify conditions action successfully executed Situation Calculus Event Calculus Language C syntax respectively PossTurnKey s HoldsHasKey s ImpossibleTurnKey t HoldsAtHasKey t nonexecutable TurnKey HasKey In statement qualiﬁcation HasKey executability action precondition sentences referred action precondition axioms Most formalisms allow actionindependent relationships ﬂuents sets ﬂuents described Domain constraints state constraints simply constraints set allowed states taken account way constructing state transition rules domain description For example broken cars engines run write Situation Calculus HoldsEngineRunning s HoldsEngineBroken s A Kakas et al Artiﬁcial Intelligence 175 2011 4978 51 Exactly formalism statements account course debatable central issue result change In particular example argue action causes EngineBroken cause EngineRunning But unlikely argue action causes EngineRunning cause EngineBroken EngineBroken act extra ﬂuent precondition effect laws initiate EngineRunning In formalisms ambiguity statements avoided reexpressing unidirectional ramiﬁcation laws indirect effect laws For example Language E write EngineRunning EngineBroken express causing EngineBroken knockon effect causing EngineRunning Observation statements simply observations assertions particular ﬂuents hold hold particular timepoints particular states For example narrativebased Event Calculus assert cars engine observed running time 3 HoldsAtEngineRunning 3 The nearest assertions nonnarrative formalisms sentences HoldsEngineRunning DoTurnKey S0 SituationFluent Calculus syntax If regarded observation implication statement roughly world point past state S0 state TurnKey action performed immediately EngineRunning seen true The type statement useful identify action event occurrence statement Occurrence statements assert particular action performed attempted speciﬁc timepoint speciﬁc time interval Language E proposition TurnKey happensat 2 Obviously assertions possible narrativebased formalisms In follows refer collection observations occurrence statements theory narrative 12 Aspects qualiﬁcation problem McCarthy 23 describes qualiﬁcation problem follows In order fully represent conditions suc cessful performance action impractical implausible number qualiﬁcations included sentences expressing In section disambiguate provide terminology aspects problem The analysis offered inspired borrows vocabulary Thielscher 37 We ﬁrst note McCarthys assertion applies equally ﬂuent action preconditions One consequence need large number conditions successful performance effect action need distribute information sentences For example illustrated previous section ﬂuent pre conditions contained explicitly effect laws implicitly domain constraints turning ignition key causes cars engine run battery charged broken engines run Therefore computing rea soning effects success particular action attempt distributed information relevant qualiﬁcations identiﬁed combined principled way We refer endogenous qualiﬁcation problem endogenous concerns interpretation information contained given representation domain The endogenous qualiﬁcation problem closely related issue elaboration tolerance 2124 good solution likely allow new information qualiﬁcations added theory new sentences need alter existing theory In turn elaboration tolerance strongly linked need modular semantics RAC frameworks properly separates different aspects domain knowledge argued 131 But McCarthys description qualiﬁcation problem principally relates fundamental issue modelling real world Any model representation kind logical mathematical analogical necessarily incomplete approximate respects arguably deﬁnition model representation In sense impossible fully represent In particular logicbased representation predictions real world predictions occasionally contradicted direct experience More particularly logicbased agent makes predictions effects attempted action subsequent observations occasionally reveal attempt failed produce expected effects factors qualiﬁcations outside scope represen tation No reﬁning representation stop happening albeit occasionally We refer exogenous qualiﬁcation problem problem engineering representation ﬂexible able recover occasional mismatches predictions actions effects actual observations robust useful predictive tool Exogenous partially concerns factors outside scope language representation Note exogenous qualiﬁcation problem involves notions observation action occur rence solution require narrativebased formalism formalism enhanced narrative reasoning capabilities McCarthy notably Thielscher illustrated default nonmonotonic reasoning signiﬁcant role play dealing aspects qualiﬁcation problem 2337 Indeed weak version exogenous qualiﬁcation 1 In paper Herzig Varzinczak nonmodularized theories pairs action laws rise unintended domain constraints turn prevent domain elaborated conﬂicting domain constraints 52 A Kakas et al Artiﬁcial Intelligence 175 2011 4978 problem problem representing ﬂuents negations hold normal circumstances assumed default inferring effects actions However points noted First solution problem help abnormal factors unrepresentable combination ﬂuents language interfere attempted action Second ﬂuent default truth value manifest reasoning process ﬂuent appears precondition effect executability law For example told car engines normally broken able infer default given car engine broken given time irrespective car ignition key turned So problem dealing default ﬂuent values separate strongly related exogenous qualiﬁcation problem How endogenous exogenous qualiﬁcation problems interact In paper argue endogenous ex planations particular observations preferable exogenous ones complete solution endogenous qualiﬁcation problem necessary clean solution exogenous problem For example suppose simple represen tation includes effect law TurnKey causes EngineRunning domain constraint Broken EngineRunning semantics fails recognize Broken implicit precondition effect law A narrative TurnKey action followed observation EngineRunning introduces potential inconsistency The formalism tempted resolve apparent conﬂict information prematurely appealing general solution exogenous qualiﬁcation problem offering mysterious unrepresentable explanation failure TurnKey instead obvious possibility Broken A solution exogenous qualiﬁcation problem necessitates view occurrence statements identifying attempts execute actions choose build formalism default principle attempts assumed result actual action executions evidence contrary If view occurrence statements way overly limit options regards recovery unexpected observations For example suppose effect laws stating PushButton causes IndicatorLightOn PushButton causes LifeSupportOn Suppose narrative records occurrence PushButton subsequent observation IndicatorLightOn Clearly consider possibility unrepresented ﬂuent precondition prevented triggering IndicatorLightOn effect law conﬁdently maintain belief LifeSupportOn We need entertain possibility unrepresented action precondition stopped PushButton executing correctly instance PushButton represents failed execution attempt view effects suspicion The treatment occurrence statements execution attempts certainties important beneﬁt concerning modularity action theories Recent commentary need modularity RAC formalisms concerned nonnarrative aspects theories example need avoid generation implicit domain constraints collections effect laws 13 In paper illustrate importance adhering complimentary temporally directed principle modularity speciﬁcally concerning narratives action occurrences future implicitly force past necessarily certain property As modeltheoretic analysis requirement shows equivalent principle agent attempt execute action circumstance albeit entirely ineffectively actions executability conditions satisﬁed We refer principle free property This free crucial decoupling exogenous endogenous qualiﬁcation problems helps avoid problems anomalous plans abductive planning systems Conceptually helps underline ontological difference actions ﬂuents It makes good engineering sense cognitive robotics terms example mirrors proper differentiation effectors sensors environment actions internal signals robots reasoning engine effectors observations signals environment reasoning engine sensors 13 Structure paper The remainder paper organized follows In Section 2 discuss shortcomings existing RAC malisms respect analysis qualiﬁcation problem related issues In Section 3 introduce action description language ModularE ME engineered overcome limitations identiﬁed Section 31 scribes syntax language gives informal insight modeltheoretic semantics series examples Sections 32 33 formal deﬁnition semantics In Section 4 prove ME necessary characteristics free property identiﬁed important In Section 5 ME extended deal default ﬂuent values Section 6 extension results Section 4 lays groundwork principled solution exogenous qualiﬁcation problem We conclude Section 7 summary results implications RAC formalisms general directions future study 2 Some shortcomings existing approaches 21 Incomplete solutions frame problem To knowledge complete recent discussion qualiﬁcation problem sense Section 12 given Thielscher 37 He ﬁrst demonstrates failure causality proper account engineering nonmonotonic A Kakas et al Artiﬁcial Intelligence 175 2011 4978 53 solution qualiﬁcation problem rise anomalous models He proposes framework based monotonic Fluent Calculus embedded straightforward default theory overcome problems The resulting formalism able cope broad range phenomena relating qualiﬁcation problem example covering accidents failures actions persistent failures offering possibility prioritizing alternative explanations action failure However Thielschers approach limitation renders inappropriate candidate solution narrative centered exogenous qualiﬁcation problem described Section 12 This solution frame problem employs cover case failed actions action attempts argued This illustrated variation life support domain mentioned previous section In Fluent Calculus basic knowledge effect PushButton action ﬂuents IndicatorLightOn LifeSupportOn described state update axiom FC1 We suppose PushButton unconditionally executable FC2 motivate need push button assert FC3 patient ill initial situation S0 PossPushButton s StateDoPushButton s States IndicatorLightOn LifeSupportOn PossPushButton s HoldsPatientVeryIll S0 FC1 FC2 FC3 Axioms FC1FC3 standard ﬂuent calculus domain independent theory correctly entail following facts situation PushButton action HoldsPatientVeryIll DoPushButton S0 HoldsIndicatorLightOn DoPushButton S0 HoldsLifeSupportOn DoPushButton S0 Conclusion 1 Conclusion 2 Conclusion 3 As discussed exogenous qualiﬁcation problem problem modify theories accommodate unexpected observations HoldsIndicatorLightOn DoPushButton S0 Thielscher accom plishes augmenting ﬂuent calculus abnormality ﬂuents AbIndicatorLightable BulbBroken second argument cause abnormality indicated ﬁrst argument For convenience ﬁnes macro Abx s yHoldsAbx y States For abnormality ﬂuent Ab X Y default rule establishes HoldsAb X Y S0 The domain description transformed like PossPushButton s AbIndicatorLightable s StateDoPushButton s States IndicatorLightOn LifeSupportOn AbIndicatorLightable s StateDoPushButton s States LifeSupportOn PossPushButton s AbButtonPushable s HoldsPatientVeryIll S0 FC1 cid9 FC2 FC3 cid9 cid9 cid9 cid9 FC3 Because associated default rules FC1 Conclusion 1Conclusion 3 But add axiomatization observation HoldsIndicatorLightOn DoPushButton S0 underlying default theory gives classes extensions AbIndicatorLightable S0 AbButtonPushable S0 respectively Although gives sired uncertainty LifeSupportOn DoPushButton S0 allows extensions negation Conclusion 1 In words admits possibility failed PushButton action cured patient The essence prob lem solution frame problem encapsulated state update axioms general form Poss Acid11x s Γ StateDo Acid11x s States covers successful actions failed action attempts The true Reiters Situation Calculus 32 Agents employing formalisms required detect action failures instant attempted execution 54 A Kakas et al Artiﬁcial Intelligence 175 2011 4978 22 Action preconditions narrative constraints In formalisms able represent action occurrences syntactic level version Event Calculus 30 semantic level Language C action preconditions expressed constraints conditions actions occur For example framework 30 Language C fact ButtonStuck action precondition PushButton written respectively HappensPushButton t HoldsAtButtonStuck t nonexecutable PushButton ButtonStuck second expressions translates collection causal rules t PushButton ButtonStuck timepoint t In cases semantics ensures models PushButton occurs timepoint ButtonStuck true Clearly style representing action preconditions renders formalisms appropriate foundation solution exogenous qualiﬁcation problem excludes possibility explaining unexpected observations occurrence actions terms unusual values actions pre conditions explanations indicator failed light button stuck attempt push Other limitations type approach action preconditions diﬃculties poses straightforward logical characterization planning discussed 28 But general point militates modularization domain descriptions narrative nonnarrative components action preconditions strain classes narratives considered 3 ModularE We opted investigate qualiﬁcation problem development action description language ModularE ME following methodology ﬁrst proposed 8 ME intended expressive successor Lan guage E turn developed closely related Event Calculus 28 overview Event Calculus relationship Language E There course pros cons action description lan guages ADLs opposed general purpose logic In case ADL methodology useful level abstraction provides helped expose key characteristics problem little previous work The resulting constraints expressivity ME lack quantiﬁcation nested sentence structures stage investigation small price pay insights gained Furthermore shall ME employs standard modeltheoretic notion entailment approach principle adapted classical logicbased frameworks Event Calculus later date2 In section ME s syntax sketch important characteristics series examples We modeltheoretic semantics ME s models like Language E s designations truth values ﬂuent point timeline meet certain criteria including Event Calculuslike notion default persistence solve frame problem As Language E ME s ﬂuents change truth value timepoints events action laws ramiﬁcation statements justify change ME uses notion quasiinstantaneous processes compute ramiﬁcations allowing identify possible chains quasiinstantaneous causation complex cases ramiﬁcations loop race andor compete 31 ModularE syntax examples Deﬁnition 1 Domain language An ME domain language tuple cid14Π cid2 cid4 Φcid15 cid2 total ordering deﬁned nonempty set Π timepoints cid4 nonempty set action constants Φ nonempty set ﬂuent constants Deﬁnition 2 Formula literal conjunction A ﬂuent formula propositional formula containing ﬂuent constants extralogical symbols standard connectives truth value constants cid17 A ﬂuent literal ﬂuent constant negation An action literal action constant negation A ﬂuent conjunction conjunction ﬂuent literals Deﬁnition 3 Converse Let E action ﬂuent constant The converse E written E E converse E written E E Deﬁnition 4 Domain description theory A domain description theory ME collection following types statements φ ﬂuent formula T timepoint A action constant C possibly ﬁnite set ﬂuent action literals L ﬂuent literal E nonempty ﬁnite set action constants ﬂuent literals 2 An alternative methodology use Event Calculus directly substrate investigation attempt express deﬁni tions Sections 32 33 classical logic axioms However little experimentation lines shows lead axiomatization dense hard follow A Kakas et al Artiﬁcial Intelligence 175 2011 4978 55 hpropositions form φ holdsat T opropositions form A occursat T cpropositions form C causes L ppropositions form φ prevents E apropositions form φ A domain description ﬁnite contains ﬁnite number propositions Singleton sets ﬂuent action literals cpropositions form P written enclosing braces P The intended meaning hpropositions straightforward record observations domain time line The oproposition A occursat T means attempt execute A occurs T Together h opropositions narrative component domain description C causes L means timepoint combination actions inactions preconditions described C provisionally cause L hold immediately As shall provisos automatically accompanying causal rule crucial model potential effect L competes potential effects overridden example result morethaninstantaneous violation domain constraint described proposition The rule C causes L qualiﬁed locally C globally total set c p propositions φ prevents E means circumstances described φ prevent simultaneous causationexecution effectsactions listed E φ means φ hold temporary instantaneous transition states form instantaneous chain indirect effects In words φ describes domain constraint static law granularity observable time In remainder section ﬂavor ME s semantics discussing models series examples gives rise As seen Section 33 model ME simply assignment truth value ﬂuent action timepoint meets certain criteria domain description consistent model These examples opposed standard examples literature chosen illustrate role type proposition Deﬁnition 4 demonstrate ME deals phenomena nondeterminism conﬂicting effects simultaneously executed actions looping chains ramiﬁcations race conditions competing series indirect effects For examples remainder paper assume stated Π Deﬁnition 1 set integers real numbers cid4 Φ exactly action ﬂuent constants mentioned examples propositions Example 1 Lift door A lift door opened closed pressing open close buttons respectively The door initially open buttons pressed simultaneously This scenario described single ﬂuent DoorOpen actions PressOpen PressClose PressOpen causes DoorOpen PressClose causes DoorOpen DoorOpen holdsat 1 PressOpen occursat 2 PressClose occursat 2 LD1 LD2 LD3 LD4 LD5 Example 1 results models door open times 2 door closed Note conﬂicting actions prevented executing pproposition cid17 prevents PressOpen PressClose rise inconsistency This manifestation ME s free property formally deﬁned Section 4 consistent initial state given collection c ppropositions series actions attempted giving rise inconsistency Corollary 2 Section 4 Put way ﬁnite collection o c ppropositions consistent internally consistent collection apropositions Consequently way engineer inconsistent ME domain description inclusion inconsistent apropositions include observations hpropositions time line contradict predic tions given ME s semantics In Section 6 remaining type inconsistency overcome attributing unknown exogenous reasons applying simple minimization Example 2 Alternative lift door The lift redesigned physically impossible press buttons But passenger lift attempts press simultaneously time 2 PressOpen causes DoorOpen PressClose causes DoorOpen ALD1 ALD2 56 A Kakas et al Artiﬁcial Intelligence 175 2011 4978 cid17 prevents PressOpen PressClose DoorOpen holdsat 1 PressOpen occursat 2 PressClose occursat 2 ALD3 ALD4 ALD5 ALD6 Again Example 2 results models door open times 2 door closed ALD3 ensures exactly actions fails execute successfully fails effects The following series broken car examples illustrate modularity elaboration tolerance ME linked way cpropositions interact Example 3 Broken car A Turning key car causes engine start running The key turned time 1 TurnKey causes Running TurnKey occursat 1 BC1 BC2 In models domain car engine running times 1 A complete description typically include local qualiﬁcations BC1 TurnKey BatteryOK causes Running turning key starts engine battery OK case models arise BatteryOK Running time points Example 4 Broken car B We elaborate previous description stating BC3 broken cars engines run TurnKey causes Running TurnKey occursat 1 Broken Running BC1 BC2 BC3 There classes models elaborated domain BC1BC3 car broken running times 1 car broken running The occurrence TurnKey 1 eliminate model car broken semantics ME allows BC3 act global qualiﬁcation particular BC1 The TurnKey action force Broken earlier times addition car known broken theory remains consistent elaboration Without characteristic alter BC1 TurnKey Broken causes Running accommodate BC3 words explicitly encode local qualiﬁcation global qualiﬁcation effect BC3 BC1 In ME local qualiﬁcation redundant illustrating modular nature aproposition BC3 simply added ado Example 5 Broken car C We elaborate Example 4 causal rules extra action occurrence TurnKey causes Running TurnKey occursat 1 Broken Running Break causes Broken Broken causes Running Break occursat 1 BC1 BC2 BC3 BC4 BC5 BC6 In models domain BC1BC6 car broken running times 1 BC5 describes indirect effect ramiﬁcation It introduces asymmetry Running Broken ﬂuents relationship BC3 preventing BC3 acting qualiﬁcation BC4 way BC1 Translating global lo calexplicit qualiﬁcations complex requires consideration interactions cpropositions ME deals indirect effects considering chains instantaneous temporary transition states nodes Within causal chains processes introduced initiation termination ﬂuents These processes stretch links given chain complete allowing possible microorderings effects considered Because potential coarseness domain description respect granularity time important proper treatment collections instantaneous effects compete race Further granularity time chains operate ﬁner observable time intermediate states A Kakas et al Artiﬁcial Intelligence 175 2011 4978 57 temporarily violate static laws described apropositions In Example 5 chains allowed semantics completes process initiating Running process initiating Broken At point state BC3 violated BC5 generates new process terminating Running completion results consistent state chain We elaborate previous examples observation BCobs1 car running time 2 Example 6 Broken car D TurnKey causes Running TurnKey occursat 1 Broken Running Running holdsat 2 Example 7 Broken car E TurnKey causes Running TurnKey occursat 1 Broken Running Break causes Broken Broken causes Running Break occursat 1 Running holdsat 2 BC1 BC2 BC3 BCobs1 BC1 BC2 BC3 BC4 BC5 BC6 BCobs1 Adding BCobs1 Example 6 result inconsistency allows infer car broken particular earlier times Note ME facilitate opposite conclusion Broken exactly way observation Running holdsat 2 This accords exactly status globally derived qual iﬁcations case BC3 qualiﬁcations localized particular cpropositions However adding BCobs1 Example 7 rise inconsistency level ME s base semantics local globally derived qualiﬁcations BC4 BC5 theory entail Running An intuitive explanation BCobs1 context effects BC4 BC5 failed exogenous circumstances factors included representation implicitly qualifying causal rules This type reasoning captured ME use simple default minimization exogenous qualiﬁcations Section 6 The minimization policy straightforward robust base semantics fully accounts endogenous qualiﬁcations expressed domain virtue modularity encapsulation global local qualiﬁcations described Example 8 Broken car F We elaborate Example 5 knowledge car parked time 0 antitheft mode ATM causing engine run instant trigger alarm TurnKey causes Running TurnKey occursat 1 Broken Running Break causes Broken Broken causes Running Break occursat 1 Broken Running Alarm ATM holdsat 0 Running ATM causes Alarm BC1 BC2 BC3 BC4 BC5 BC6 BC7 BC8 Intuitively times 1 car broken running alarm triggered narrative depending indirect effect Break action takes effect effect TurnKey action This example race condition competing instantaneous effects ME able deal correctly representations processbased semantics It gives models domain models Broken Running true times 1 model Alarm true false The example 58 A Kakas et al Artiﬁcial Intelligence 175 2011 4978 illustrates ME s processes operate ﬁner level temporal granularity observable time order deal instantaneous indirect effects3 Example 9 Oscillator On causes On On causes On OSC1 OSC2 This example represent internal mechanism electric buzzer inﬁnite number models truth value On arbitrarily assigned timepoint It illustrates ME able deal loops indirect effects overconstraining models It important example restrict set models truth value On alternates successive timepoint This change domain happening instantaneously altogether ﬁner granularity time observable time Therefore observable timepoints best considered arbitrarily spaced snapshots ﬁnergrained time continuum A treatment loops lines treatment concurrency nondeterminism necessary ME exhibit free property resulting modularity elaboration tolerance described 32 ME base semantics states processes causal change In section formal account ME s semantics starting straightforward deﬁnitions concerning states processes Deﬁnition 5 States satisfaction A state set S ﬂuent literals ﬂuent constant F F S F S A formula φ satisﬁed state S iff interpretation corresponding S classical model φ Deﬁnition 6 Aconsistency Let D domain description S state S aconsistent respect D iff aproposition φ D φ satisﬁed S D aconsistent iff exists state aconsistent respect D Let Da denote set apropositions D Then given ﬂuent formula ψ Da cid19a ψ iff ψ entailed classically theory T φ φ D Deﬁnition 7 Process A process expression form F F F ﬂuent constant language F called initiating process F F called terminating process F The associated processes cpropositions C causes F C causes F respectively F F F F written procF procF respectively An active process log set processes Deﬁnitions 815 concern identiﬁcation ﬂuent changes following instantaneously given state set actions A causal chain represents possible instantaneous series knockon effects ramiﬁcations implied causal laws There repeated twophase mechanism constructing nodes causal chains triggering phase new processes generated cpropositions applicable point immediately followed resolution phase alreadyactive processes complete resulting update corresponding ﬂuents truth values The process triggering appropriately limited ppropositions The triggering completion particular process separated steps chain consideration chains gives adequate treatment race conditions competing instantaneous effects Chains terminate reach state change possible static node loop We working retractable assumption actions trigger processes beginning chains point actions consumed Deﬁnition 8 Causal node A causal node node tuple cid14S B P cid15 S state B set action constants P active process log cid14S B P cid15 fully resolved iff P aconsistent wrt domain description D iff S aconsistent wrt D For example causal node intuitively associated time 2 Examples 1 2 cid14DoorOpen PressOpen PressClose cid15 3 An interesting contentious variation Example 8 delete BC4 BC6 replace BC7 Broken Running Alarm ATM holdsat 0 car broken 1 ME s semantics gives models Alarm true false This treats BC3 stability constraint temporal granularity observable time deﬁnitional constraint transcend levels temporal granularity Note eliminate model Alarm true adding pproposition Broken prevents Running meaning Broken prevents Running caused instantaneously A Kakas et al Artiﬁcial Intelligence 175 2011 4978 59 Deﬁnition 9 Triggering Let D domain description N cid14S B P cid15 node Lt set ﬂuent literals P t procL L Lt Bt set action constants The set Bt P t triggered N respect D iff 1 Bt B 2 For pproposition φ prevents E D φ satisﬁed S E cid2 Bt Lt 3 For L Lt cproposition C causes L D action constant A C A Bt ii action literal A C A Bt iii ﬂuent literal L cid9 C L cid9 S Bt P t maximally triggered N respect D iff set B cid9 D Bt P t strict subset B t cid9 t Bt strict subset B P cid9 t cid9 t P cid9 t triggered N respect For example N cid14DoorOpen PressOpen PressClose cid15 D domain Example 2 PressClose deﬁnition DoorOpen For Example 1 DoorOpen maximally triggered N wrt D Lt PressOpen PressClose DoorOpen DoorOpen maximally triggered set N wrt D Deﬁnition 10 Process successor Let D domain description N cid14S B P cid15 node A process successor N wrt D node form cid14S Bt P P tcid15 Bt P t maximally triggered N respect D The node cid14DoorOpen PressOpen PressClose cid15 unique process successor cid14DoorOpen PressOpen PressClose DoorOpen DoorOpencid15 context Example 1 Deﬁnition 11 Resolvant Let N cid14S B P cid15 N P P cid9 exists nonempty subset R P following conditions hold cid9cid15 causal nodes N cid9 P cid9 cid14S cid9 resolvant N iff S cid9 S cid9 P R 1 P 2 For ﬂuent constant F F F P F F R 3 For ﬂuent constant F cid9 F R F R F S ii F R F R F S cid9 iii F R F R F S cid9 iff F S cid9 N resolvant N iff P cid9 The node cid14DoorOpen PressOpen PressClose DoorOpen DoorOpencid15 resolvants context Exam Condition 3 ple 1 cid14DoorOpen cid15 cid14DoorOpen cid15 This constraints S deﬁnition applicable cid9 Deﬁnition 12 Stationarystatic nodes Let D domain description N cid14S B P cid15 causal node N stationary iff resolvant cid14S cid9 S N static wrt D iff process successor N wrt D stationary cid9cid15 N S cid9 P The central deﬁnition causal chains follows Each nonterminating resolvant node chain represents instan taneous intermediary state middle sequence ramiﬁcations unresolved processes contribute continuation sequence The deﬁnition slightly complicated need deal loops Conditions 2 3 4 ensure chains end ﬁrst static repeated node encountered Deﬁnition 13 Causal chain Let D domain description let N0 node A causal chain rooted N0 respect D ﬁnite sequence N0 N1 N2n nodes k 0 cid3 k cid3 n 1 N2k1 process successor N2k wrt D N2k2 resolvant N2k1 following conditions hold 1 N2n fully resolved 2 N2n static exists k n st N2n N2k 3 If exists j k cid3 n st N2 j N2k k n 4 There exist k n st N2k static In context Example 1 Fig 1 shows tree possible causal chains starting node cid14DoorOpen cid9 PressClose PressOpen cid15 N1 unique process successor N0 nodes N2 N 2 static resolvants N1 Fig 2 shows corresponding tree Example 2 N0 process successors PressClose succeeds DoorOpen triggered PressOpen succeeds DoorOpen triggered 60 A Kakas et al Artiﬁcial Intelligence 175 2011 4978 N0 cid14DoorOpen PressClose PressOpen cid15 N1 cid14DoorOpen PressClose PressOpen DoorOpen DoorOpencid15 N2 cid14DoorOpen cid15 N cid9 2 cid14DoorOpen cid15 Fig 1 A tree causal chains Example 1 N0 cid14DoorOpen PressClose PressOpen cid15 cid25 cid25 cid26 cid26 N1 cid14DoorOpen PressOpen DoorOpencid15 N2 cid14DoorOpen cid15 N cid9 1 cid14DoorOpen PressClose DoorOpencid15 cid9 2 cid14DoorOpen cid15 N Fig 2 A tree causal chains Example 2 N0 cid14On cid15 N1 cid14On Oncid15 N2 cid14On cid15 N3 cid14On Oncid15 N4 cid14On cid15 N cid9 0 cid14On cid15 cid9 1 cid14On Oncid15 N N N cid9 2 cid14On cid15 cid9 3 cid14On Oncid15 cid9 4 cid14On cid15 N Fig 3 Causal chains Example 9 Example 9 shows necessary loops consideration deﬁning causal chains Fig 3 shows possible causal chains domain In chains Condition 2 Deﬁnition 13 satisﬁed k 0 n 2 As regards Example 8 form causal chains starting node corresponding time 1 Here chain terminating state Alarm holds Br Broken Ru Running Al Alarm N0 cid14Br Ru Al ATM Break TurnKey cid15 N1 cid14Br Ru Al ATM Break TurnKey Br Rucid15 N2 cid14Br Ru Al ATM cid15 N3 cid14Br Ru Al ATM Ru Alcid15 N4 cid14Br Ru Al ATM cid15 Here chain terminating state Alarm holds N0 cid14Br Ru Al ATM Break TurnKey cid15 N1 cid14Br Ru Al ATM Break TurnKey Br Rucid15 cid9 2 cid14Br Ru Al ATM Rucid15 cid9 3 cid14Br Ru Al ATM Ru Rucid15 cid9 4 cid14Br Ru Al ATM cid15 N N N Nodes particular nodes terminate causal chains necessarily contain aconsistent states But causal chains terminate aconsistently discarded computing direct indirect instantaneous effects Rather semantics identiﬁes proper causal descendants tree possible causal chains starting given root node4 These aconsistent nodes terminating loop chain Condition 1 Deﬁnition 14 aconsistent nodes root tree Condition 2 Deﬁnition 14 For cid9 2 proper causal descendants N0 Condition 1 j k n 1 In Fig 3 N0 example Fig 1 N2 N N2 N4 proper causal descendants N0 j 0 n 2 Deﬁnition 14 Proper causal descendant Let D domain description let N0 N nodes N proper causal descendant N0 wrt D iff N aconsistent wrt D exists causal chain N0 N1 N2n wrt D N N2k 0 cid3 k cid3 n following conditions holds 1 There exists j cid3 k N2 j N2n 4 Note contrast traditional tree terminology root improper descendant root potentially proper causal descendant A Kakas et al Artiﬁcial Intelligence 175 2011 4978 61 cid14LO BS OC Promote cid15 cid14LO BS OC Promote LO BScid15 cid26 cid25 cid14LO BS OC cid15 cid14LO BS OC BScid15 cid14LO BS OC BScid15 cid14LO BS OC cid15 cid14LO BS OC LOcid15 cid14LO BS OC LOcid15 cid14LO BS OC cid15 Fig 4 A tree causal chains Example 10 2 There exist causal chain N0 N1 N2k N cid9 2k1 N cid9 2m wrt D j k j cid3 m N cid9 2 j aconsistent wrt D It useful deﬁne stable state state immediately cause termination note stable states loops aconsistent Deﬁnition 15 Stable state Let D domain description let S state S stable wrt D exists node cid14S P cid15 proper causal descendant cid14S cid15 Example 10 Promotion An employee gets promoted time 1 Promotion results large oﬃce LO big salary BS But gets large oﬃce building overcrowded OC time 1 OC LO Promote causes LO Promote causes BS Promote occursat 1 LO BS OC holdsat 1 PR1 PR2 PR3 PR4 PR5 The tree possible causal chains arise time 1 example single proper causal descendant root node underlined given Fig 4 This example illustrates role apropositions deﬁning possible change In contrast ppropositions apriori block processes starting triggered Rather microcosmos causal change single timepoint allow instantaneous change occur violate provided terminating nodes consistent If terminating nodes consistent example possible change deepest nodes consistent sense node node branch emanating aconsistent Hence apropositions properties macrocosmos observed states constrain triggered process allowed complete 33 ME base semantics time temporal change If causal node corresponds particular timepoint narrative given domain description Fig 1 N0 corresponds time 2 Deﬁnitions 1622 ensure states proper causal descendants indicate possible choices ﬂuents change values time period immediately These deﬁnitions largely modiﬁcations 16 notion change set replacing initiationtermination points Deﬁnition 16 Interpretationevent matching An interpretation ME mapping H Φ cid4 Π true false H event matches domain description D iff cid14 A T cid15 H A T true cid14 A T cid15 A occursat T D Deﬁnition 17 Timepoint satisfaction Given ﬂuent formula φ ME timepoint T interpretation H satisﬁes φ T iff mapping M T deﬁned F M T F HF T model φ Given set Z ﬂuent formulae H satisﬁes Z T iff H satisﬁes φ T φ Z Deﬁnition 18 Stateevent base timepoint Let D domain description H interpretation T timepoint The state T wrt H denoted SH T state F HF T true F HF T false The event base T wrt H denoted BH T set A H A T true 62 A Kakas et al Artiﬁcial Intelligence 175 2011 4978 The deﬁnitions causal frontier change set follow A causal frontier particular timepoint represents state terminating node causal chain triggered timepoint The associated change set represents difference terms ﬂuent literals state state start causal chain Deﬁnition 19 Causal frontier Let D domain description T timepoint H interpretation S causal frontier H T wrt D iff exists node N cid14S cid14SH T BH T cid15 wrt D cid9 B P cid15 N proper causal descendant state S cid9 cid9 Deﬁnition 20 Change set Let D domain description H interpretation T timepoint C set ﬂuent literals C change set T wrt H iff exists causal frontier S H T wrt D C S SH T Deﬁnition 21 Change mapping Let Φ language A change mapping mapping c Π 2Φ set ﬂuent literals ﬂuent constants negations Deﬁnition 22 Model Let D domain description let H interpretation event matches D Then H model D iff exists change mapping c T cT change set T wrt H following conditions hold ﬂuent literal L timepoints T 1 T 3 1 If H satisﬁes L T 1 timepoint T 2 st T 1 cid2 T 2 T 3 L cT 2 H satisﬁes L T 3 2 If L cT 1 timepoint T 2 st T 1 T 2 T 3 L cT 2 H satisﬁes L T 3 3 H satisﬁes following constraints For hpropositions φ holdsat T D H satisﬁes φ T For timepoints T SH T stable state Intuitively Condition 1 states ﬂuents change truth values successful effects cpropositions 2 states successfully initiating literal establishes truth value true Note Condition 3s require ment stability ensures SH T aconsistent Deﬁnition 23 Consistency entailment A domain description D consistent model D entails hproposi tion φ holdsat T written D cid19 φ holdsat T iff model M D M satisﬁes φ T Example 11 Faulty electric circuit The current faulty circuit switched causing broken fuse turn terminates current SwitchOn causes ElectricCurrent ElectricCurrent causes BrokenFuse BrokenFuse causes ElectricCurrent ElectricCurrent BrokenFuse SwitchOn occursat 1 EC1 EC2 EC3 EC4 EC5 One causal chain triggered time 1 nonaconsistent nodes N4 N5 N0 cid14ElectricCurrent BrokenFuse SwitchOn cid15 N1 cid14ElectricCurrent BrokenFuse SwitchOn ElectricCurrentcid15 N2 cid14ElectricCurrent BrokenFuse cid15 N3 cid14ElectricCurrent BrokenFuse BrokenFusecid15 N4 cid14ElectricCurrent BrokenFuse cid15 N5 cid14ElectricCurrent BrokenFuse ElectricCurrentcid15 N6 cid14ElectricCurrent BrokenFuse cid15 This chain wellformed N6 ﬁrst static resolvant node fully resolved Deﬁnition 13 N6 aconsistent proper causal descendant N0 Deﬁnition 14 So ElectricCurrent BrokenFuse causal frontier 1 interpretation satisﬁes ElectricCurrent BrokenFuse 1 Deﬁnition 19 providing change set BrokenFuse Deﬁnition 20 Note temporal granularity level representation example granularity models hpropositions ElectricCurrent cause BrokenFuse true ElectricCurrent true ﬁner granularity granularity inside causal chains A Kakas et al Artiﬁcial Intelligence 175 2011 4978 63 4 Properties characteristics ME 41 Results concerning elaboration tolerance As seen ME provides principled general mechanisms causal laws qualiﬁed static laws integrating endogenous qualiﬁcations baselevel semantic framework We hinted ME provides high degree modularity separation information causality c p apropositions narrative information attempted actions opropositions narrative information form observations ﬂuents hpropositions qualities ME domain descriptions particularly elaboration tolerant We substantiate claims formal results Theorem 1 corollaries effectively action occurrence oproposition kind observation holds associated timepoint We label results free properties effectively state agent attempt action circumstance This important principle modularity helps separate narrative information actions narrative information ﬂuents important principle elaboration tolerance allows add arbitrary opropositions theory refer current future timepoints irrespective observations hpropositions referring past timepoints Theorem 2 focuses elaboration tolerance causal knowledge showing particular add arbitrary c ppropositions previously consistent collection causal statements This completeness solution endogenous qualiﬁcation problem ME guaranteed automatically qualify new existing causal knowledge mutually compatible Deﬁnition 24 Pre postobservationaction points Given domain description D postobservation point D timepoint T p hproposition form φ holdsat T D T cid2 T p A preaction point respectively postaction point timepoint Ta oproposition A occursat T D Ta cid2 T respectively Ta cid29 T Deﬁnition 25 Projection domain description The domain description D projection domain description exists timepoint postobservation point preaction point D Lemma 1 Existence proper causal descendant Let D ﬁnite domain description let N0 cid14S0 B0 cid15 node S0 aconsistent wrt D Then exists node N cid14S B P cid15 N proper causal descendant N0 Furthermore S0 stable wrt D S Proof It suﬃcient exist nonzero ﬁnite number causal chains rooted N0 wrt D The lemma follows consideration ﬁnite tree causal chains rooted N0 noting Deﬁnition 14 proper causal descendants N0 aconsistent node tree descendant node aconsistent Given N0 aconsistent tree ﬁnite lead contradiction To exists causal chain rooted N0 wrt D argue follows First notice node exists possibly maximally triggered set wrt D exists process successor By deﬁnition exists resolvant node Therefore set inﬁnite sequences form N0 N1 N2m k N2k1 process successor N2k wrt D N2k2 resolvant N2k1 nonempty Consider set ﬁnite subsequences set start N0 node ﬁrst N2k appears earlier subsequence static wrt D Such node exists sequence ﬁniteness D By construction subsequences satisfy Conditions 1 4 Deﬁnition 13 causal chains rooted N0 respect D For ﬁnite domain D ﬁnite number causal chains repetition restriction Condi tion 3 Deﬁnition 13 cid2 Lemma 2 Existence change set Let D ﬁnite domain description let H interpretation D T timepoint SH T aconsistent wrt D Then exists change set T wrt H Proof This follows directly Lemma 1 cid2 Lemma 3 Existence change set Let D domain description T postobservation postaction point D Let cid9 cid29 T Then change S state stable wrt D let H interpretation D S SH T set T cid9 T wrt H cid9 Proof This follows directly Deﬁnition 15 cid2 64 A Kakas et al Artiﬁcial Intelligence 175 2011 4978 Theorem 1 Free theorem Let M model ﬁnite domain description D let O ﬁnite set opropositions let Tn timepoint postobservation point D preaction point O Then model M O D O ﬂuent F timepoint T cid2 Tn M O F T MF T Proof By induction number k opropositions O The base case k 0 trivial Suppose result holds O contains k opropositions consider set O k 1 opropositions Choose oproposition cid9 cid29 T g A occurs T g O exists oproposition A denote set O minus element A occurs T g opropositions greatest timepoint Let O ﬂuent F timepoint T cid2 Tn By inductive hypothesis O M O cid9 F T MF T exists model M O cid9 D O We build required model M O D O follows For ﬂuent F timepoint T cid9 cid9 T g equal change mapping model M O cid9 For Choose change mapping c time T timepoint T g consider state SM O cid9 T g T g wrt M O cid9 By Lemma 2 exists change set C T g wrt M O cid9 We let cT g C cid9 occurs T cid9 cid2 T g M O F T cid9 M O cid9 F T O T We complete model M O change mapping c timepoints T g follows For ﬂuent F F F C cid9cid9 true F C cid9cid9 cid29 T g M O F T cid9 cid9 cid9 cid9 cid9cid9 cid29 T g M O F T cid9cid9 cid29 T g M O F T cid9cid9 M O cid9 F T g Otherwise F C T cid9cid9 false For timepoint T cid9cid9 cid29 T g cT cid9cid9 T T By construction Lemma 3 c change mapping wrt M O The interpretation M O satisﬁes axioms cid9 cid2 T g Condition 3ii model Conditions 1 2 follow directly construction Condition 3i trivial For T cid9cid9 cid29 T g model M O constructed directly change set C follows stability SM O cid9 T stability Condition 3ii follows observation Deﬁnitions 14 15 state component node proper causal descendant necessarily stable cid2 cid9 For T Corollary 1 Free corollary Let D D D D model M Let differ opropositions referring timepoints greater equal Tn let M model D Then D cid9F T ﬂuent constants F timepoints T T cid2 Tn domain descriptions let Tn postobservation point D D MF T M cid9 cid9 cid9 cid9 cid9 constructed D ﬁrst remov Proof This follows directly Lemma 3 Theorem 1 observing D ing opropositions D refer timepoints greater equal Tn adding required opropositions D cid2 cid9 cid9 Corollary 2 Action elaboration tolerance corollary Let D consistent domain description let O ﬁnite set opropositions If exists timepoint Tn postobservation point D preaction point O D O consistent Proof This follows directly Theorem 1 cid2 Theorem 2 demonstrates robustness elaboration tolerance ME theories showing consistency contingent internal consistency static laws observations match predicted effects Theorem 2 Theorem causal elaboration tolerance Let Da consistent domain description consisting apropositions let E ﬁnite set o c ppropositions Then Da E consistent domain description Proof Consider domain D obtained Da E deleting opropositions Let val Φ true false truth assignment set ﬂuents Φ Da E model apropositions Da D Let H interpretation D given HF T valF timepoints T ﬂuent F By Lemma 3 set change set timepoint T wrt H It easy H model D change sets By Theorem 1 domain Da E obtained D adding opropositions E model agrees H timepoints smaller equal earliest timepoint referred ﬁnite opropositions E cid2 42 The qualifying role apropositions As seen ME s semantics allows apropositions domain description implicitly qualify causal effect laws It natural ask principle qualifying role apropositions course need employ mechanism constraining example initial state In words causal knowledge contained arbitrary domain description rewritten apropositions including instead extra explicit qualiﬁcations possibly additional c ppropositions And formal correctness general transformation method ascertained result reasonablysized elaboration tolerant domain descriptions general case computed reasonable timeframe It outside main focus paper study questions answer deﬁnitively domains Example 8 effects particular remarks associated footnote indication A Kakas et al Artiﬁcial Intelligence 175 2011 4978 65 cid14AliceIn BobIn AliceEnters BobEnters cid15 cid14AliceIn BobIn AliceEnters BobEnters AliceIn BobIncid15 cid14AliceIn BobIn cid15 cid25 cid26 cid14AliceIn BobIn BobIncid15 cid14AliceIn BobIn AliceIncid15 cid14AliceIn BobIn BobIncid15 cid14AliceIn BobIn cid15 cid14AliceIn BobIn AliceIncid15 cid14AliceIn BobIn cid15 Fig 5 Causal chains Example 12 proof way other5 transformation technically involved However worth touching surface issues involved question considering example Example 12 Full lift A certain lift hold person Two people attempt enter lift time AliceEnters causes AliceIn BobEnters causes BobIn AliceIn BobIn AliceIn BobIn holdsat 0 AliceEnters occursat 1 BobEnters occursat 1 FL1 FL2 FL3 FL4 FL5 FL6 The tree causal chains domain time 1 shown Fig 5 The proper causal descendants lined ME s semantics causal laws FL1 FL2 nondeterministically qualiﬁed aproposition domain cid9 cid9 FL2 Can qualifying effect aproposition obtained way Let ﬁrst consider naive approach simulating implicit qualiﬁcation effect aproposition FL3 adding extra explicit qualifying conditions respectively We consider tree causal chains new domain time 1 FL1 FL2 form FL1 starting state AliceIn BobIn false There cases consider First suppose satisﬁed initial node In case end tree extra conditions FL1 causal chains original domain end nodes rise model AliceIn BobIn satisﬁed initial node In true Second suppose extra conditions FL1 case corresponding effect triggered This implies new domain models ME gives original domain FL2 FL2 cid9 cid9 cid9 cid9 An equivalent domain extra c ppropositions impossible case Intuitively role aproposition FL3 best captured explicitly extra ppropositions cid17 prevents AliceIn BobIn AliceIn prevents BobIn BobIn prevents AliceIn It easy replacing FL3 propositions rise models ﬂuent literals FL4 negative replacements course independently constrain initial state way FL3 But practical point view apropositions unnec essary examples For similar example lift contain n people equivalent transformation exclude apropositions rise domain size exponentially larger n origi nal So clear apropositions useful addition language Moreover Theorem 1 corollaries apropositions especially useful thinking ME terms state transition systems A collection c pprop ositions effectively deﬁnes state transition graph complete sense arbitrary ﬁnite collection actions gives rise directed edge vertex graph The results previous subsection guarantee addition aproposition theory ﬁlters vertices graph compromising 5 To prove example apropositions necessary particular collection T c p apropositions cid9 N set c ppropositions collection N o hpropositions T N T exist collection T models provided hpropositions N ensure satisfaction apropositions T initial timepoint cid9 66 A Kakas et al Artiﬁcial Intelligence 175 2011 4978 completeness6 In turn means ME guarantee static constraint properties problem speciﬁcation require simply adding associated apropositions domain description affecting completeness consistency speciﬁcation We studied question explicating implicit qualiﬁcations aprop ositions technical annex7 paper 14 5 Fluents default values In domains useful able specify ﬂuents normally true normally false For example cars normally broken In section extend syntax ModularE npropositions facilitate expression information As Section 6 extension helps address exogenous qualiﬁcation problem natural way Deﬁnition 26 Ntheory ndomain description An ntheory ndomain description ME domain description additionally contain npropositions form normally L L ﬂuent literal An interpretation base model bmodel ntheory iff model ntheory npropositions We taken view npropositions play relatively weak role domain description compared explicit causal information speciﬁc observations Hence intended meaning normally L evidence cause L assume L default To illustrate helpful consider combinations following n c hpropositions normally Broken VeryColdWeather causes Broken normally VeryColdWeather Broken holdsat 1 N1 N2 N3 N4 N1 D2 n N1 N2 D3 n N1 N2 N3 D4 n N1 N2 N3 N4 Since npropositions Let D1 n fault statements ME provides semantics deﬁne preference relation bmodels models equivalent domain description npropositions As deﬁne nmodels n nmodel Broken preferred bmodels relation We view D1 holds timepoints assuming Broken ﬂuent language D2 n nmodels VeryColdWeather Broken true false In context D2 n N1 elimi nate combination VeryColdWeather Broken N2 eliminate combination VeryColdWeather Broken But note N1 eliminate combination VeryColdWeather Broken nmodel D 2 n N2 gives cause Broken context As regards D3 n addition N3 eliminate combi nation VeryColdWeather Broken identiﬁable cause VeryColdWeather leaving nmodel VeryColdWeather Broken As N1 case eliminate remaining model N2 gives Broken identiﬁable cause Finally context D4 n addition N4 override default N3 nmodel VeryColdWeather Broken model domain description npropositions For domains timepoint time 0 case naturals necessary compare bmodels initial timepoint ME models ﬂuent truth values default persist converse caused But ME accommodate time structures reals integers point maximum generality compare bmodels timepoints initial interval timeline To identify ﬂuents cause timepoints build notion stability Deﬁnition 15 provide pointwise constraint models Deﬁnition 22 Stability ensures timepoint processes triggered associated state disregarding actions result directly indirectly return state We examine 6 State transition graphs widely Computer Science model specify behavior desirable prove certain properties graphs For example safetycritical eventdriven necessary demonstrate possible combination inputs events lead unsafe output state Using ME requirements speciﬁcation language possible guarantee safety constraint simply adding associated aproposition compromising completeness consistency speciﬁcation 7 In argue attempt rely solely explicit qualiﬁcations representing domain impossible different nature apropositions cpropositions ppropositions Under severe restrictions domain description translation possible require exponential growth domain size exponentialtime reasoning order identify appropriate qualiﬁcations Furthermore translated domains compromise elaboration tolerance sense translation modular adding new information domain require retranslation domain newly added statements A Kakas et al Artiﬁcial Intelligence 175 2011 4978 67 processes identify instantaneous causes ﬂuent literals state Condition 2 deﬁnition Because causal chains terminate static nodes need identify step instantaneous causes separately Condition 1 deﬁnition Deﬁnition 27 Instantaneous cause Let D ndomain description T timepoint L ﬂuent literal M bmodel D L instantaneous cause T wrt D M iff following conditions holds 1 cid14SM T cid15 static stationary process successor wrt D contains procL 2 There exists k n 0 cid3 k cid3 n set P processes causal chain N0 N1 N2k N2n N0 cid14SM T cid15 ii N2k cid14SM T P cid15 iii N2k proper causal descendant N0 iv procL appears N0 N2k Continuing example note D3 n bmodels M1 satisfying VeryColdWeather Broken timepoints M2 satisfying VeryColdWeather Broken M3 satisfying VeryColdWeather Broken At timepoint bmodels singlenode causal chain8 need refer Condi tion 1 Deﬁnition 27 searching instantaneous causes In fact given timepoint T identify instantaneous cause model Broken instantaneous cause T wrt D3 n M1 We deﬁne means ﬂuent abnormal truth value ndomain description Deﬁnition 28 Fluent abnormality Let D ndomain description T timepoint D L ﬂuent literal M bmodel D L ﬂuent abnormality T wrt D M iff 1 M satisﬁes L T 2 normally L D 3 L instantaneous cause T wrt D M The set ﬂuent abnormalities T respect D M written FluentAbsD M T As regards example ndomain description D3 n ﬂuent abnormalities timepoint T Π respect D3 n bmodel follows FluentAbsD3 FluentAbsD3 FluentAbsD3 n M1 T n M2 T VeryColdWeather Broken n M3 T VeryColdWeather cid9 Deﬁnition 29 Nentailment Let D ndomain description let M M M FluentAbsD M hproposition φ holdsat T written D cid19n φ holdsat T iff nmodel Mn D Mn satisﬁes φ T bmodels D M npreferable cid9 cid9cid9 D M D nentails cid9 M nmodel D iff model M iff exists timepoint T 0 timepoint T wrt D written M D M cid9 T cid9 cid2 T 0 FluentAbsD M T D M cid9cid9 cid9 cid9 In terms example Deﬁnition 29 gives M1 M3 D3 n D3 n M2 M1 nmodel example D3 n cid19n VeryColdWeather Broken holdsat 0 We identify wide class ntheories semantics npropositions simpliﬁes considerably necessary check instantaneous causes Deﬁnition 30 Nsimple domain description Let D ndomain description D nsimple iff pair propositions normally L C causes L D C contain nonnegated action constant L cid31 L L cid31 Lcid9 cid9 cid9 8 The cid14VeryColdWeather Broken cid15 cid14VeryColdWeather Broken cid15 respectively nodes successors comprise process single causal chains cid14VeryColdWeather Broken Brokencid15 68 A Kakas et al Artiﬁcial Intelligence 175 2011 4978 Fig 6 Circuit light bulbs For nsimple theories follows directly Deﬁnition 27 necessary check Conditions 1 2 Deﬁnition 28 identifying ﬂuent abnormalities necessary compare sets ﬂuent abnormalities arbitrary preaction point identifying nmodels Deﬁnition 29 As illustration domain Fig 6 represented following example Example 13 nsimple theory Example 13 Light bulbs Pressing switch causes light bulbs connected parallel light long bulbs faulty switch stuck normally SwitchStuck normally FaultyBulbA normally FaultyBulbB PressDownSwitch causes ElectricCurrent ElectricCurrent FaultyBulbA causes LightA ElectricCurrent FaultyBulbB causes LightB SwitchStuck prevents PressDownSwitch ElectricCurrent LightA LightB ElectricCurrent holdsat 0 PressDownSwitch occursat 0 LB1 LB2 LB3 LB4 LB5 LB6 LB7 LB8 LB9 LB10 Let Dlb nsimple theory LB1 LB10 Assuming time represented naturals Dlb bmodels corresponding possible combinations truth values time 0 ﬂuents SwitchStuck FaultyBulbA FaultyBulbB But bmodel false ﬂuent abnormalities bmodel nmodel example Dlb cid19n LightA LightB holdsat 1 Now consider following unexpected observation LightA holdsat 1 Dlb LB11 D Let D lb bmodels LB11 eliminates interpretations SwitchStuck lb FaultyBulbA false Just nmodels bmodel SwitchStuck true FaultyBulbA FaultyBulbB false single ﬂuent abnormality SwitchStuck 0 bmodel FaultyBulbA true SwitchStuck FaultyBulbB false contains single ﬂuent abnormality FaultyBulbA 0 Hence infer LightB holdsat 1 LightB holdsat 1 D lb However nmodels differ truth value ElectricCurrent times 0 adding observation ElectricCurrent holdsat 1 verse ElectricCurrent holdsat 1 case eliminate nmodels allowing infer respectively LightB holdsat 1 LightB holdsat 1 LB11 Note similarity Example 13 life support example Section 21 substitute lights A B indicator light life support machine respectively gives rise anomalous models approach 37 It clear ME solves problems identiﬁed Section 21 ﬂuents default values explicitly identiﬁed representation The extended semantics language ME deﬁned order incorporate default static knowledge formalism given simple minimization abnormality base language semantics This linked freewill property ME sense lack property interfere default minimization static knowledge causing simple minimization policy anomalous models Consider following example illustrates normally VeryColdWeather Water causes NewShoots9 VeryColdWeather NewShoots N1 N2 N3 A Kakas et al Artiﬁcial Intelligence 175 2011 4978 69 This domain classes bmodels VeryColdWeather true false The default knowl edge given nproposition gives ﬁrst class preferred default class minimal abnormality Consider action Water occurs time 1 If base framework freewill property particular failed regard N3 providing extra qualiﬁcation N2 bmodels lost With addition action time 1 bmodels VeryColdWeather inconsistent As result left class bmodels VeryColdWeather false simple minimization abnormality retain conclusion VeryColdWeather true These anomalous models attempted execution action cannotshould change default state affairs past Furthermore subsequently observed time 2 NewShoots false frameworks models default state affairs models VeryColdWeather true lost observation accounted We end section extension Theorem 1 Corollary 1 covers nmodels nentailment Theorem 3 Free theorem ndomains Let D1 D2 ndomain descriptions let Tn postobservation point D1 D2 Let D1 D2 differ opropositions referring timepoints greater equal Tn let M1 nmodel D1 Then nmodel M2 D2 M1F T M2F T ﬂuent constants F timepoints T T cid2 Tn In particular ﬂuent formulae φ timepoints T T cid2 Tn D1 nentails φ holdsat T iff D2 nentails φ holdsat T cid9 M cid9 1 D cid9 1 D cid9 1 D Proof Consider domains D Tn postobservation timepoint D points greater equal Tn Partition models D M Corollary 1 twice follows bijection classes models D cid9 b class ﬂuent F timepoint T cid2 Tn holds M cid9 2 obtained removing npropositions D1 D2 respectively Clearly cid9 2 domains differ opropositions referring time cid9 2 classes pair models cid9 cid9 aF T M bF T Applying cid9 2 cid9 1 M1 belongs Consider correspond cid9 2 class cid9 cid2 Tn cid9 D1 D2 differ opropositions referring timepoints greater ing class models D models Then ﬂuent F timepoint T cid2 Tn M2F T M1F T This implies T FluentAbsD2 M2 T equal Tn cid9 2 according bijection discussed let M2 model D Consider nmodel M1 D1 class models D cid9 1 classes models D cid9 FluentAbsD1 M1 T Assume way contradiction M2 nmodel D2 Then exists model M cid9 2 n cid9 preferable M2 wrt D2 Thus exists T 0 T cid9 1 accord Consider class models D cid9 ing bijection discussed let M 1 class models Then ﬂuent F cid9 cid9 timepoint T cid2 Tn M 1 T D1 D2 differ opropositions referring timepoints greater equal Tn Overall exists cid9 contradiction fact T min minT 0 Tn T M1 nmodel D1 This proves ﬁrst claim cid9 cid2 T 0 FluentAbsD2 M cid9 2 belongs Consider corresponding class models D cid9 2 D cid9 FluentAbsD2 M2 T cid9 2F T This implies T cid9 cid2 T min FluentAbsD1 M cid9 FluentAbsD1 M1 T cid9 cid2 Tn FluentAbsD1 M cid9 1 model D cid9 FluentAbsD2 M cid9 2 M cid9 1F T M For second claim consider timepoint T cid2 Tn Note D1 nentails φ holdsat T iff nmodel D1 satisﬁes φ T From ﬁrst claim holds iff nmodel D2 satisﬁes φ T holds iff D2 nentails φ holdsat T required cid2 cid9 2 T cid9 2 T cid9 1 T 6 Exogenous qualiﬁcations As seen ME s base semantics offers elaboration tolerant solution endogenous qualiﬁcation problem general properties domain implicitly qualify effect laws It nonetheless possible domain lose meaning expected effect effect belongs change set model time point observed materialize The causal laws unexpectedly failed To illustrate scenario let elaborate Example 3 adding observation car running time 2 Example 14 Extended broken car A The key turned time 1 subsequently observe car running TurnKey causes Running TurnKey occursat 1 Running holdsat 2 BC1 BC2 BCobs2 No known reason explicit implicit account unexpected observation domain fact inconsis tent The failure effect law BC1 needs attributed exogenous reason 9 Shoots gardening sense 70 A Kakas et al Artiﬁcial Intelligence 175 2011 4978 Similarly observation contrary expect certain effect law lead consider effects failed produced action failed executed properly unknown reason The life support example discussed Section 21 illustrates Example 15 Life support The life support button pushed time 1 subsequently observe indicator light PushButton causes IndicatorLightOn PushButton causes LifeSupportOn PatientVeryIll holdsat 0 PushButton occursat 1 IndicatorLightOn holdsat 2 LS1 LS2 LS3 LS4 LS5 The failure ﬁrst causal law LS1 isolated failure PushButton action execution LS4 failed resulting absence effects associated A way reconcile conﬂicts restore elaboration tolerance framework assume effect law domain description additionally qualiﬁed set extra preconditions encapsulate normal conditions law operates successfully 9 These preconditions outside base logics language exogenous 37 symbolically package unknown conditions necessary effect law successfully generate effect In follows working retractable assumption preconditions unique independent cproposition domain We write form NormExoLaw_Id Law_Id unique identiﬁer cproposition Similarly action executions exogenously qualiﬁed assuming action constant A domain contains pproposition AbExo A prevents A unique new ﬂuent AbExo A encapsulates unknown conditions outside base logics language prevent proper execution action A The exogenous qualiﬁcations NormExoLaw_Id assumed hold true default observations given narrative domain description inconsistent Similarly exogenous qualiﬁcations form AbExo A assumed default false To formalize simply add npropositions normally NormExoLaw_Id normally AbExo A NormExoLaw_Id AbExo A nentailment semantics given Deﬁnition 29 previous section The examples understood following transformed ndomain descriptions Example 16 Extended broken car A exogenous ﬂuents A car key turned time 1 subsequently observe car running TurnKey NormExoBC1 causes Running TurnKey occursat 1 Running holdsat 2 AbExoTurnKey prevents TurnKey normally NormExoBC1 normally AbExoTurnKey BC1 cid9 BC2 BCobs2 BCab1 BCN1 BCN2 This extended transformed ndomain description models nmodels according semantics given Sec tion 5 Running false NormExoBC1 false AbExoTurnKey true The exogenous qualiﬁcations allow recover apparent inconsistency introduced observation BCobs2 Example 17 Life support exogenous ﬂuents The life support button pushed time 1 subsequently observe indicator light PushButton NormExoLS1 causes IndicatorLightOn PushButton NormExoLS2 causes LifeSupportOn PatientVeryIll holdsat 0 LS1 cid9 LS2 LS3 A Kakas et al Artiﬁcial Intelligence 175 2011 4978 PushButton occursat 1 IndicatorLightOn holdsat 2 AbExoPushButton prevents PushButton normally NormExoLS1 normally NormExoLS2 normally AbExoPushButton 71 LS4 LS5 LSab1 LSN1 LSN2 LSN3 The failure IndicatorLightOn true action execution time 1 attributed abnormal falsity NormExoLS1 abnormal truth AbExoPushButton In case mean LifeSupportOn fail true But note domain nentails PatientVeryIll holdsat 2 illustrating approach avoids anomalous model problem exempliﬁed domain Section 21 To illustrate problem exogenous qualiﬁcation interact ramiﬁcation problem constraints imposed apropositions consider following transformation Example 7 domain extended exogenous qualiﬁcations manner discussed Example 18 Broken car E exogenous ﬂuents TurnKey NormExoBC1 causes Running TurnKey occursat 1 Broken Running Break NormExoBC4 causes Broken Broken NormExoBC5 causes Running Break occursat 1 Running holdsat 2 AbExoTurnKey prevents TurnKey AbExoBreak prevents Break normally NormExoBC1 normally AbExoTurnKey normally NormExoBC4 normally NormExoBC5 normally AbExoBreak BC1 cid9 BC2 BC3 cid9 BC4 BC5 cid9 BC6 BC7 BCab1 BCab2 BCN1 BCN2 BCN3 BCN4 BCN5 As explained Section 31 original Example 7 models This extended ndomain models nmodels A preliminary inspection suggest attribute unexpected observation Running time 2 abnormal truth values exogenous ﬂuents AbExoBreak NormExoBC4 NormExoBC5 But fact aproposition BC3 ensures Running true Broken false cuts possibility NormExoBC5 abnormal truth value Hence extended ndomain nmodels car broken time NormExoBC5 true NormExoBC4 false AbExoBreak true The examples informal indication approach exogenous qualiﬁcation illustrating exogenous factors introduced automatic transformation domain extended language hidden user However introduced exogenous factors faced problem reason effect reason unexpected failure actions Of course direct causal information exogenous factors interesting question ask extent persist Are conditions NormExo AbExo ordinary ﬂuents examples persist time existence limited instant rise unexpected noneffect In ﬁrst case persistence example falsity NormExo mean subsequent application associated effect law rise effect terminology 37 failure law But exogenous conditions persist isolated unexpected noneffect accident In cases accidents possible explanation observations For instance Example 14 extended oproposition TurnKey occursat 3 hproposition Running holdsat 4 account assuming exogenous factor prevented expected application BC1 time 1 factor longer present time 3 72 A Kakas et al Artiﬁcial Intelligence 175 2011 4978 We capture isolated exogenous conditions language representing abnormal exogenous events actions occur speciﬁc time expected effect generated Hence introducing exogenous ﬂuents form NormExo AbExo introduce exogenous unknown actions form ExoAct We qualify effect laws negation absence actions meaning normal assumption exogenous blocking event occurs time effect law successful For example exogenously qualiﬁed cproposition TurnKey ExoActBC1 causes Running represents action TurnKey causes Running assumption exogenous blocking action occurs time We exogenously qualify action executability ppropositions analogous way cid17 prevents PushButton ExoActPushButton means execution PushButton successful time successful occurrence associated exogenous blocking action Finally wish consider possibility unexpected observation converse particular ﬂuent literal L indicates exogenous factors prevented caused way whatsoever Once indicate persistent exogenous factors extra ppropositions AbExoL prevents L nonpersistent exogenous factors extra ppropositions cid17 prevents L ExoActL The choice types exogenous qualiﬁcation consider extent domain dependent For example domains appropriate explain observations unexpected noneffects terms nonpersisting accidents For domains wish regard effect laws exogenously qualiﬁed defaults unbreakable rules In section formally deﬁne general transformation domain descriptions encom passes types exogenous qualiﬁcation described effect laws actions ﬂuents But obvious reader deﬁnitions straightforwardly simpliﬁed restrict attention certain types exogenous qualiﬁcation 61 Extended semantics exogenous qualiﬁcation We begin deﬁning syntactic transformation domain description D extended form10 Deﬁnition 31 Default domain description Let D ndomain description The default domain description Dd associated D ndomain obtained replacing cproposition C causes L D cproposition C NormExoid ExoActid causes L id unique identiﬁer cproposition extending underlying language action constant ExoActid ﬂuent constant NormExoid ii extending underlying language action constant ExoAct A ﬂuent constant AbExo A action constant A adding ppropositions AbExo A prevents A cid17 prevents A ExoAct A iii extending underlying language action constant ExoActL ﬂuent constant AbExoL ﬂuent literal L adding ppropositions AbExoL prevents L cid17 prevents L ExoActL iv adding npropositions normally NormExoid ﬂuent constant NormExoid introduced step normally AbExo A ﬂuent constant AbExo A introduced step ii normally AbExoL ﬂuent constant AbExoL introduced step iii We refer extra ﬂuents actions introduced steps iiv Deﬁnition 31 exogenous ﬂuents actions D Dd As example default domain description associated domain Example 14 follows Example 19 Extended broken car A default domain description TurnKey NormExoBC1 ExoActBC1 causes Running TurnKey occursat 1 Running holdsat 2 AbExoTurnKey prevents TurnKey BC1d BC2 BCobs2 BCp1 10 A possibility exogenous qualiﬁcation introduce ﬂuent literal L new aproposition form L AbnL normally AbnL Then unknown exogenous condition AbnL ﬂuent L true state unlike case ppropositions allowed transiently true process generating change set We discuss paper A Kakas et al Artiﬁcial Intelligence 175 2011 4978 cid17 prevents TurnKey ExoActTurnKey AbExoRunning prevents Running cid17 prevents Running ExoActRunning AbExoRunning prevents Running cid17 prevents Running ExoActRunning normally NormExoBC1 normally AbExoTurnKey normally AbExoRunning normally AbExoRunning 73 BCp2 BCp3 BCp4 BCp5 BCp6 BCn1 BCn2 BCn3 BCn4 The semantics domain description D deﬁned terms models associated ndomain Dd formalized default interpretation extra exogenous action occurrences For introduce notion emodel follows Deﬁnition 32 Exogenous action occurrence Let D ndomain description An exogenous action occurrence D oproposition form A occursat T A exogenous action D Deﬁnition 33 Emodel Let D ndomain description let Dd default domain associated D let H interpretation Dd Then H emodel D iff exists set O exogenous action occurrences D H nmodel Dd O Deﬁnition 34 Event abnormality Let D ndomain description Dd default domain associated D T timepoint A exogenous action constant Dd M emodel D cid14 A T cid15 event abnormality wrt D M iff M A T true The set event abnormalities wrt D M written EventAbsD M Deﬁnition 35 Exogenous abnormalities Let D Dd ndomain associated default domain let M emodel D let O unique set exogenous action occurrences M nmodel Dd O let T timepoint The set ExoFluAbsD M T deﬁned set exogenous ﬂuent literals FluentAbsDd O M T The set ExogAbsD M T deﬁned ExoFluAbsD M T EventAbsD M The extended semantics ME given terms default models A default model domain description D given ﬁrst minimizing ﬂuent abnormalities nentailment Section 5 implicitly deﬁnition emodels terms nmodels From set minimization selects emodels D fewest event exogenous ﬂuent abnormalities In way semantics gives preference explanations unexpected observations involve abnormal truth values known ﬂuents opposed explanations involving abnormal exogenous factors The formal deﬁnition follows Note nconsistent domains dentailment equivalent nentailment cid9 wrt D written M d cid9 T Deﬁnition 36 Dentailment Let D ndomain description let M M M ExogAbsD M φ holdsat T written D cid19d φ holdsat T iff dmodel Md D Md satisﬁes φ T cid9 M dmodel D iff model M iff exists timepoint T 0 timepoint T emodels D M dpreferable cid9 D M D dentails hproposition cid9 cid2 T 0 ExogAbsD M T M cid9cid9 d D M cid9cid9 cid9 cid9 As regards Example 14 transformation Example 19 Deﬁnition 36 gives rise types dmodels In dmodels ﬁrst type exogenous action occurrences exactly exogenous ﬂuents NormExoBC1 AbExoRunning AbExoTurnKey abnormal truth value time 1 times persistence For dmodels adding later occurrence TurnKey TurnKey occursat 3 difference truth Running time 4 persisting exogenous factor reprevent Running initiated In dmodels second type exogenous ﬂuents normal truth values exactly exogenous actions ExoActBC1 ExoActRunning ExoActTurnKey true occurs time 1 For dmodels adding TurnKey occursat 3 Running true times 3 So way implicitly qualifying exogenous ﬂuents exogenous actions able represent domains observing unexpected noneffect unable decide subsequent identical attempts produce effect actually produce effect Deﬁnition 31 associated default domain results ﬂuent literal independently exogenously qualiﬁed pair ppropositions This allows capture possibility observed apparent failure effect law literal reasons linked speciﬁcally law subsequent attempts generate literal causal laws produce normal effect To illustrate consider following example 74 A Kakas et al Artiﬁcial Intelligence 175 2011 4978 Example 20 Jump start car TurnKey causes Running JumpStart causes Running TurnKey occursat 1 Running holdsat 2 JumpStart occursat 3 JS1 JS2 JS3 JS4 JS5 The associated default domain example introduces exogenous ﬂuents including NormExoJS1 AbExoTurnKey AbExoRunning exogenous actions including ExoActJS1 ExoActTurnKey ExoActRunning The unexpected obser vation JS4 ensures dmodels domain exactly exogenous factors abnormal truth value time 1 In ﬁve dmodels Running true times 3 virtue combina tion JS2 JS5 But dmodel AbExoRunning true time 1 pproposition AbExoRunning prevents Running included associated default domain blocks normal initiating effect JS2 time 3 AbExoRunning persists 1 3 Default models allow sense wider class domain descriptions maintaining elaboration tolerance modularity They essentially weakening effect laws reducing change bring But kind domain descriptions default model Apart obvious cases observations single timepoint inconsistent apropositions inconsistent domain descriptions observed change ﬂuent accounted terms known action occurrences following example illustrates Example 21 Engine noise TurnKey causes Running Running causes EngineNoise Running holdsat 0 EngineNoise holdsat 0 EngineNoise holdsat 2 EN1 EN2 EN3 EN4 EN5 For timepoint 0 2 initial state time 0 change set interpretation satisﬁes observations time 0 condition persistence Running Hence observed change truth value EngineNoise accounted In fact EngineNoise persist incompatible observation EngineNoise true time 2 Note change sets employing dmodels seen essentially reduce change sets help example Now suppose add TurnKey occursat 1 Example 21 The extended domain nmodel dmodel But suppose add Running holdsat 2 This domain dmodel This exogenous qualiﬁcation introduced explain absence initiating cause Running blocks initiation EngineNoise This elaborated example shows intricate link ramiﬁcation qualiﬁcation problems exogenous qualiﬁcations forced unexpected observations break causality chain associated effect laws Clearly domains need allow models event match domain description Deﬁnition 16 instead indicate additional event occurrences The standard example type domain Kautzs Stolen Car Prob lem 18 The problem assuming abducing new event occurrences course extensively studied especially context planning 7182934 In particular recent study 1 investigated reason domains existentially quantiﬁed partially ordered events added We end section extension Theorem 1 Corollary 1 covers dmodels dentailment Theorem 4 Free theorem Dentailment Let D 1 D2 ndomain descriptions underlying language let Tn postobservation point D1 D2 Let D1 D2 differ opropositions referring timepoints greater equal Tn let M1 dmodel D1 Then dmodel M2 D2 M1F T M2F T ﬂuent constants F timepoints T T cid2 Tn In particular ﬂuent formulae φ timepoints T T cid2 Tn D1 dentails φ holdsat T iff D2 dentails φ holdsat T Proof Consider default domain descriptions D1d D2d associated D1 D2 respectively Consider set O exogenous action occurrences D1 D2 domains underlying language A Kakas et al Artiﬁcial Intelligence 175 2011 4978 75 possible exogenous action occurrences Clearly Tn postobservation timepoint D1d O D2d O ndomains differ opropositions referring timepoints greater equal Tn Partition nmodels D1d O D2d O classes pair nmodels Ma Mb class ﬂuent F timepoint T cid2 Tn holds MaF T MbF T Applying Theorem 3 twice follows bijection classes nmodels D1d O classes nmodels D2d O cid9 cid2 Tn ExoFluAbsD2 M2 T Consider dmodel M1 D1 class nmodels D1d O unique set O implied M1 M1 belongs Consider corresponding class nmodels D2d O according bijection discussed let M2 nmodel D2d O class nmodels Then ﬂuent F timepoint cid9 T cid2 Tn M2F T M1F T This implies T D1 D2 differ opropositions referring timepoints greater equal Tn Since holds EventAbsD2 M2 EventAbsD1 M1 follows T Assume way contradiction M2 dmodel D2 Then exists set O cid9 2 D2d O cid9 ExogAbsD2 M2 T occurrences D1 D2 nmodel M T belongs Consider corresponding class models D1d O model D1d O implies T referring timepoints greater equal Tn Since holds EventAbsD1 M T T proves ﬁrst claim cid9 exogenous action dpreferable M2 wrt D2 Thus exists T 0 cid9 M 2 cid9 according bijection discussed let M 1 cid9 cid9 1F T M 2F T This cid9 D1 D2 differ opropositions cid9 cid9 1 EventAbsD2 M 2 follows cid9 Overall exists T min minT 0 Tn cid9 contradiction fact M1 dmodel D1 This class models Then ﬂuent F timepoint T cid2 Tn M cid9 ExoFluAbsD2 M cid9 cid2 Tn ExoFluAbsD1 M cid9 Consider class models D2d O cid9 ExogAbsD1 M1 T cid9 cid9 cid2 Tn ExogAbsD2 M2 T cid9 cid2 T min ExogAbsD1 M cid9 ExoFluAbsD1 M1 T cid9 ExogAbsD1 M1 T cid9 cid2 Tn ExogAbsD1 M cid9 cid2 T 0 ExogAbsD2 M cid9 ExogAbsD2 M cid9 2 T cid9 2 T cid9 1 T cid9 1 T cid9 1 T cid9 2 T For second claim consider timepoint T cid2 Tn Note D1 dentails φ holdsat T iff dmodel D1 satisﬁes φ T From ﬁrst claim holds iff dmodel D2 satisﬁes φ T holds iff D2 dentails φ holdsat T required cid2 cid9 cid9 cid9 cid9 62 Failure associations Reasoning failure actions effect laws involve problems orthogonal issue persistence failure One problem failure associations possibility failures effects linked We example know effect law fails associated effect law fail generally effect laws sharing set preconditions fail We seen examples failure associations previous section For instance association failure possible effects action A provided pproposition AbExo A prevents A But knowledge failure associations domain dependent highly speciﬁc In section brieﬂy informally explore information expressed domain description modular way For brevity minimize introduction new syntax assume purposes discussion user able refer exogenous ﬂuents directly We capture domain speciﬁc failure associations enriching language ndomains associated default domains allow npropositions link exogenous qualiﬁcation conditions effect laws These new npropositions form normally φ φ propositional formula ﬂuent language extended exogenous ﬂuents11 In addition φ formula expressing certain conditions ﬂuent literal L1 priority L2 special binary predicate L1 L2 The following example illustrates enrichment language Example 22 Broken car failure associations TurnKey causes Running TurnKey causes DashBoardLights Running causes EngineNoise normally NormExoFA2 NormExoFA1 normally PetrolCar NormExoFA1 NormExoFA3 normally PetrolCar TurnKey occursat 1 Running holdsat 0 11 Here simplicity assume effect laws exogenously qualiﬁed exogenous ﬂuents FA1 FA2 FA3 FA4 FA5 FA6 FA7 FA8 76 A Kakas et al Artiﬁcial Intelligence 175 2011 4978 Here FA4 expresses domain dependent knowledge normally failure FA2 means failure FA1 Hence subsequently observe DashBoardLights false time 1 FA4 lead conclude Running false This captured preference models satisfy association rule NormExoFA2 false bmodel models NormExoFA1 false default models Similarly FA5 states petrol cars likely FA1 fail FA3 If observe EngineNoise 2 cars domain normally petrol cars FA6 priority effect bmodels NormExoFA1 false default models preferred bmodels NormExoFA3 false capturing preference failure FA1 FA3 Failure associations expressed n apropositions want capture default nature failure links defeasible observations present evidence contrary associations In example observe DashBoardLights false Running true time 1 b models possible NormExoFA2 false NormExoFA1 true default models theory failure association rule FA4 satisﬁed The semantics npropositions extended capture intended meaning reinterpreting default se mantics ndomains presented previous sections terms argumentation example nproposition normally L understood stronger argument L converse L We employ known methods 21731 formalizing preference reasoning argumentation comparison arguments suitably extend notion default model domains npropositions The formal details scope paper important note semantics developed modular way default reasoning persistence separated domain dependent default reasoning npropositions failure association rules separated default rules known particular domain hand 7 Summary related future work We shown ME represent nondeterministic narrative domains involving concurrency static laws indirect effects We formally characterized ME s high degree modularity elaboration tolerance enabled exceptionally solution ramiﬁcation problem able deal looping systems indirect effects race conditions competing causal laws These properties help separate provide principled solutions endogenous exogenous qualiﬁcation problems Endogenous qualiﬁcations locally speciﬁed globally derived base semantics exogenous qualiﬁcations provided use default minimization Our approach qualiﬁcation problem links ramiﬁcations partly follows 37 But ME s fuller solution frame problem covers successful failed action attempts enables use default reasoning mechanism deal weak strong qualiﬁcation problem described 37 Two important aspects ME differs 37 complete treatment ramiﬁcations concurrent effects b notion global qualiﬁcation gives ME higher degree modularity These results line recent study modularity 13 highlights link modularity freewill properties Kvarnström Doherty provide detailed discussion solution 20 moreorless termed endogenous qualiﬁcation problem Comparison ME somewhat diﬃcult authors speciﬁcally restrict solution offline planning prediction problems state formalism necessarily able clude action qualiﬁed successful execution contradicted later observation primary concern Nevertheless Kvarnström Doherty like argue need modular elaboration tolerant approach formalism able model wide range phenomena including actions duration nonboolean valued ﬂuents ME currently lacks necessary expressivity The paper includes ing collection benchmark problems comprehensive analysis related work Our solution qualiﬁcation problem translatable action calculus expressive represent narrative events observations real time exhibits equivalent Free Will property described Section 4 The nondeterministic version Event Calculus 28 example expressive ME respects equivalent apropositions indirect effects ramiﬁcations To useful predictive tools action calculi need adhere augmented principle failed action attempts ineffectual solution frame problem covers scenarios discussed Section 21 The solution ramiﬁcation problem proposed related 3 indirect effects actions deﬁned constructively causal laws But ME s processbased semantics differs embraces nondeterminism resulting possible orderings effects realized b attributes meaning domains Example 11 deemed illformed 3 Irrespective qualiﬁcation problem free property Theorem 1 important avoid anomalous planning unintended plans abduced deduced converse precondition effect law virtue lack model successful application law See 28 example Although lack space prevents illustration anomalous plans easy construct formalisms Language C 10 express action A Kakas et al Artiﬁcial Intelligence 175 2011 4978 77 nonexecutability terms inconsistency But arise framework 16 unable provide models combinations causal laws We currently prototype implementation ME s base semantics Prolog The declarative programming style facilitate easy proof soundness completeness implementation wrt ME s semantics On hand different techniques needed address computational qualiﬁcation problem 6 avoiding considering majority qualiﬁcations computation ME sound basis eﬃcient reasoning techniques built freewill property When seen context prediction task freewill property amounts sort memory An action execution affect actions past need consider current state affairs computing effects action This allows prediction engine cachein knowledge reasons forward time action execution obviating need recompute scratch Similar techniques prove useful computing default models explanation tasks want consider possible ways causal laws fail deduce ones fail Things clear setting freewill property longer holds stated An action attempt observed fail necessitate reconsideration assumptions values certain default ﬂuents turn affect execution past actions Thus unexpected observations encountered elaborate reasoning required To end building eﬃcient computational model ME currently considering use satisﬁability methods Answer Set Programming lines 41935 argumentation abduction based computational methods We aim study subclasses 4 ME computational complexity reasoning decreases There aspects ME deserve study One extent static laws regarded speciﬁc temporal granularity representation reﬁne role apropositions play computing indirect effects Another discussed Section 62 extend syntax semantics allow succinct expression domain dependent failure associations causal laws This requires study integrate ME default static information general simply positive negative facts problem great accord proposing address argumentation A issue lift approach ﬁrstorder case preserving properties Free Will Theorem Section 4 This entirely straightforward example nonﬁnite case necessarily case causal chains terminate loop earlier state However introduction nonboolean ﬂuents limited form quantiﬁcation ﬁnite value sets manner 10 unproblematic ME Acknowledgements Many thanks anonymous reviewers giving originally submitted version paper careful detailed reading helpful insightful suggestions helped improve This work partially sup ported IST program EC FET IST200132530 SOCS project Global Computing proactive initiative References 1 A Bracciali AC Kakas Frame consistency Computing causal explanations Proceedings 10th International Workshop NonMonotonic Reasoning NMR04 2004 pp 7987 2 G Brewka T Eiter Preferred answer sets extended logic programs Artiﬁcial Intelligence 109 12 1999 297356 3 M Denecker D TheseiderDupré K Van Belleghem An inductive deﬁnition approach ramiﬁcations Electronic Transactions Artiﬁcial Intelli gence 2 12 1998 2567 4 Y Dimopoulos A Kakas L Michael Reasoning actions change answer set programming Proceedings 7th International Confer ence Logic Programming Nonmonotonic Reasoning LPNMR04 2004 pp 6173 5 P Doherty J Gustafsson L Karlsson J Kvarnström TAL Temporal action logics language speciﬁcation tutorial Electronic Transactions Artiﬁcial Intelligence 2 34 1998 273306 6 C Elkan On solving qualiﬁcation problem Working Notes AAAI Spring Symposium Extending Theories Actions Formal Theory Practical Applications 1995 pp 7779 7 K Eshghi Abductive planning event calculus Proceedings 5th International Conference Symposium Logic Programming ICLPSLP88 1988 pp 562579 8 M Gelfond V Lifschitz Representing actions extended logic programming Proceedings Joint International Conference Symposium Logic Programming JICSLP92 1992 pp 559573 9 M Ginsberg D Smith Reasoning action II The qualiﬁcation problem Artiﬁcial Intelligence 35 3 1988 311342 10 E Giunchiglia J Lee V Lifschitz N McCain H Turner Nonmonotonic causal theories Artiﬁcial Intelligence 153 12 2004 49104 11 S Hanks D McDermott Nonmonotonic logic temporal projection Artiﬁcial Intelligence 33 3 1987 379412 12 D Harel Dynamic logic D Gabbay F Guenther Eds Handbook Philosophical Logic vol II Extensions Classical Logic D Reidel Publishing Company Dordrecht The Netherlands 1984 pp 497604 13 A Herzig I Varzinczak Domain descriptions modular Proceedings 16th European Conference Artiﬁcial Intelligence ECAI04 2004 pp 348352 14 A Kakas L Michael R Miller ModularE role elaboration tolerance solving qualiﬁcation problem Technical annex httpwwwuclacukslaisresearchmodulare 2006 15 A Kakas R Miller A simple declarative language describing narratives actions Journal Logic Programming 31 13 1997 157200 16 A Kakas R Miller Reasoning actions narratives ramiﬁcation Electronic Transactions Artiﬁcial Intelligence 1 4 1998 3972 17 AC Kakas P Mancarella PM Dung The acceptability semantics logic programs Proceedings 11th International Conference Logic Programming ICLP94 1994 pp 504519 78 A Kakas et al Artiﬁcial Intelligence 175 2011 4978 18 H Kautz The logic persistence Proceedings 5th National Conference Artiﬁcial Intelligence AAAI86 1986 pp 401405 19 H Kautz B Selman Pushing envelope Planning propositional logic stochastic search Proceedings 13th National Conference Artiﬁcial Intelligence AAAI96 1996 pp 11941201 20 J Kvarnström P Doherty Tackling qualiﬁcation problem ﬂuent dependency constraints Computational Intelligence 16 2 2000 169209 21 V Lifschitz Missionaries cannibals Causal Calculator Proceedings 7th International Conference Principles Knowledge Repre sentation Reasoning KR00 2000 pp 8596 22 J McCarthy Epistemological problems Artiﬁcial Intelligence Proceedings 5th International Joint Conference Artiﬁcial Intelligence IJCAI77 1977 pp 10381044 23 J McCarthy Circumscription A form nonmonotonic reasoning Artiﬁcial Intelligence 13 12 1980 2739 24 J McCarthy Elaboration tolerance httpwwwformalstanfordedujmcelaboration 1999 25 J McCarthy Appearance reality httpwwwformalstanfordedujmcappearancehtml 2006 26 J McCarthy P Hayes Some philosophical problems standpoint Artiﬁcial Intelligence Machine Intelligence 4 1969 463502 27 S McIlraith T Son H Zeng Semantic web services IEEE Intelligent Systems Special Issue Semantic Web 16 2 2001 4653 28 R Miller M Shanahan Some alternative formulations Event Calculus Lecture Notes Artiﬁcial Intelligence vol 2408 2002 pp 452490 29 L Missiaen M Bruynooghe M Denecker CHICA planning based Event Calculus Journal Logic Computation 5 5 1995 579602 30 E Mueller Commonsense Reasoning Morgan Kaufmann 2006 31 H Prakken G Sartor A defeasible argumentation defeasible priorities Proceedings International Conference Formal Applied Practical Reasoning FAPR96 1996 pp 510524 32 R Reiter The frame problem Situation Calculus A simple solution completeness result goal regression Vladimir Lifschitz Ed Artiﬁcial Intelligence Mathematical Theory Computation Papers Honor John McCarthy Academic Press San Diego CA 1991 pp 359380 33 A Russo R Miller B Nuseibeh J Kramer An abductive approach analysing eventbased requirements speciﬁcations Proceedings 18th International Conference Logic Programming ICLP02 2002 pp 2237 34 M Shanahan An abductive Event Calculus planner Journal Logic Programming 44 13 2000 207240 35 M Shanahan M Witkowski Event Calculus planning satisﬁability Journal Logic Computation 14 5 2004 731745 36 M Thielscher Introduction ﬂuent calculus Electronic Transactions Artiﬁcial Intelligence 2 34 1998 179192 37 M Thielscher The qualiﬁcation problem A solution problem anomalous models Artiﬁcial Intelligence 131 12 2001 137 38 N Tran C Baral C Shankland Issues reasoning interaction networks cells Necessity event ordering knowledge Proceedings 20th National Conference Artiﬁcial Intelligence AAAI05 2005 pp 676681