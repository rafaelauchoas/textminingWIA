Artiﬁcial Intelligence 170 2006 187231 wwwelseviercomlocateartint Constraint partitioning penalty formulations solving temporal planning problems Benjamin W Wah Yixin Chen b Department Electrical Computer Engineering Coordinated Science Laboratory University Illinois UrbanaChampaign Urbana IL 61801 USA b Department Computer Science Washington University St Louis MO 63130 USA Received 25 August 2003 accepted 7 July 2005 Available online 24 August 2005 Abstract In paper study partitioning constraints temporal planning problems formulated mixedinteger nonlinear programming MINLP problems Constraint partitioning attractive leads easier subproblems signiﬁcant relaxation original problem Moreover subproblem similar original problem solved existing solver little modiﬁcation Constraint partitioning introduces global constraints violated subproblems evaluated independently To reduce head resolving global constraints develop paper new conditions algorithms limiting search space backtracked subproblem Using penalty formulation MINLP constraint functions MINLP transformed nonnegative functions present necessary sufﬁcient extended saddlepoint condition ESPC constrained lo cal minimization When penalties larger thresholds theory shows onetoone correspondence constrained local minimum MINLP extended saddle point penalty function Hence way ﬁnd constrained local minimum increase gradually penalties violated constraints look local minimum penalty function existing algorithm solution constrained model Next extend ESPC constraintpartitioned MINLPs propose partitionandresolve strategy resolving violated Research supported National Science Foundation Grant IIS 0312084 National Aeronautics Space Administration Grant NCC 21230 Corresponding author Email address wahuiucedu BW Wah URL httpmanipcrhcuiucedu 00043702 matter 2005 Elsevier BV All rights reserved doi101016jartint200507001 188 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 global constraints subproblems Using discretespace ASPEN mixedspace MIPS planners solve subproblems signiﬁcant improvements planning benchmarks terms quality plans generated execution times ﬁnd 2005 Elsevier BV All rights reserved Keywords Constraint partitioning Extended saddlepoint condition Penalty function Local search Mixed space planning Nonlinear constraints Temporal planning 1 Introduction A temporal planning problem involves arranging actions assigning resources order accomplish given tasks objectives period time It deﬁned state space discrete continuous mixed variables discrete continuous time horizon set actions deﬁning valid state transitions set effects associated action set constraints satisﬁed state action set goals achieved In paper formulate planning problem mixedinteger nonlinear program ming MINLP problem Such formulation allows develop formal mathematical foundation partitioning large planning problem constraints subproblems stages The MINLP formulation problem partitioned N 1 subproblems follows J z cid2 cid1 zt Pt min z subject ht H z 0 Gz cid1 0 global constraints cid2 cid1 zt 0 gt cid1 0 t 0 N local constraints 1 1 ht 1 gt Here Stage t t 0 N local state vector zt z1t zut tT ut mixed variables ht ht mt T vector mt local equalityconstraint functions involve zt gt gt rt T vector rt local inequalityconstraint functions zt H H1 HpT vector p global equalityconstraint functions cid3 N volve z i0 zi G G1 Gq T vector q global inequalityconstraint functions z Note zt includes variables appear lo cal constraints Stage t z0 zN overlap partitioning constraints We assume J continuous differentiable respect continuous vari ables lower bounded Further g h unbounded discontinuous non differentiable closed form These assumptions reasonable AI planning problems constraint functions discontinuous closed form objective functions continuous differentiable continuous subspace A solution Pt plan involves assignment z satisﬁes straints To illustrate constrained formulation planning problem consider toy prob lem Fig 1 solved ASPEN 9 The problem involves scheduling activities act_1 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 189 Fig 1 A toy example ASPEN 9 goal ﬁnd valid schedule completes 4 activities act_1 act_2 instances type A1 act_3 act_4 instances type A2 minimizing total power_resource Based initial infeasible schedule 19 constraints partitioned 3 stages E1 E5 E9 E11 E2 E3 E6 E7 E10 E12 E13 E15 E4 E8 E14 4 global constraints E16 E17 E18 E19 A local constraint remains associated stage activities rescheduled The number iterations solve problem reduced 16 taken ASPEN 12 partitioning act_2 type A1 act_3 act_4 type A2 discrete horizon 60 seconds Its goal satisfy nineteen constraints E1 E19 positive negative facts preconditions effects actions minimizing total power_resource Among 19 constraints initial schedule Fig 1 E1 E2 E3 E4 E6 E15 satisﬁed In MINLP formulation toy example nineteen constraints Fig 1 transformed equivalent constraints We use variables sa ea denote respectively starting ending times activity For state assign vector state variables denote values indexed time For example use ct denote color_state time t set 0 red 1 blue 2 green ct 2 means color_state time t green pt denote power_supply t wt denote power_usage t The following illustrates small portion resulting constraints encoded c1 wt cid1 pt cid1 25 t 0 60 power_resource capacity constraint c2 0 cid1 sact_3 eact_1 cid1 30 act_1 ends_before start act_3 0 30 c3 sact_1 t cid3 ct 2 t 0 60 color_state constraint act_1 c4 scc_b t cid3 ct 1 t 0 60 color_changer cc_b effect constraint The constraints equality inequality constraints c1 c2 deduction constraints c3 c4 A deduction constraint A B A 190 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 Fig 2 An illustration constraint partitioning decomposes P conjunction subproblems set global constraints resolved complexity subproblem substantially smaller P The set global constraints G includes constraints P span variables multi ple subproblems new constraints added maintain consistency shared entities variables subproblems B equality inequality constraints encoded equivalent equality constraint H A B 0 cid4 H A B 0 numerical violation B A true B false A false A B true For example equivalent equality constraint encoding c3 returns 0 sact_1 t false returns value ct 2 A general approach solving large constrained optimization problem se lect iteratively set variables values assigned according structural characteristics domain partition problem subspaces setting variables selected speciﬁc values Systematicsearch methods set values variables predeﬁned order order independent interactions variables By considering variable interactions intelligent backtracking employs variablevalue ordering order subproblems generated preﬁlters partial inconsistent assignments eliminate infeasible subproblems prunes subproblems inferior bounds computed relaxation approximation Alternatively iterativerepair methods operate dimensionality starting problem consider interaction assignment variables In general difﬁcult use teractions variables subproblems selection assignment variables In paper propose new approach called constraint partitioning decomposes constraints problem conjunction subproblems local straints related global constraints Fig 2 Constraints relate variables subproblem local constraints constraints relate local variables shared entities variables subproblems global constraints Since shared entities subproblems consistent additional global constraints added enforce consistency This approach attractive solving temporal planning problems constraints objectives related activities temporal locality constraints partitioned independent subproblems related small number global constraints BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 191 b Fig 3 Two extreme conﬁgurations partitioning constraints problem Totally overlapped variable sets b Totally disjoint variable sets A constraintpartitioned problem solved ﬁrst evaluating subproblems dependently possibly existing methods disregarding global constraints resolving violated global constraints systematic backtrack ing subproblem evaluations The advantage evaluating subproblems independently relaxed original problem requires signiﬁcantly time solve The difﬁculty lies resolution violated global straints deﬁned exponentially large space subproblems Even subproblems organized stages dynamic programming Principle Optimality 3 applied partial feasible plan dom inates partial feasible plan stage fail hold dominating plan violates global constraint later stage Without dominance resolving violated global constraint invalidate solutions subproblems require tracking evaluations The complexity backtracking hard characterize precisely depends aggregate search space stages global constraints satisﬁed In following illustrate complexity extreme cases Fig 3 illustrates extreme conﬁgurations partitioning constraints prob lem stages totally overlapped variable sets totally 192 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 Fig 4 The 3687 constraints initial infeasible schedule generated ASPEN solving CX1PREF 16 orbits Each constraint shown line relates activities labeled yaxis scheduled time instances horizon xaxis The partitioning constraints stages separated bold vertical lines leads 3580 local constraints 107 global constraints A local constraint remains associated stage activities rescheduled The number iterations ﬁnd better solution problem reduced 12043 taken ASPEN 1102 partitioning disjoint variable sets In stage outermost box denotes search space stage ﬁrst inner box denotes feasible solutions satisfy local constraints stage innermost shaded box denotes points satisfy proposed ESPC satisfy local constraints In paper ESPC necessary sufﬁcient constrained local minima means points satisfy ESPC stage considered resolving violated global constraints Let si set points satisfy ESPC stage 0 N In Fig 3a stages totally overlapped variable sets constraint original problem assigned exactly stage Because variable shared stages new global constraints introduced maintain consis tency subproblems These global constraints deﬁned search space worstcase complexity bounded s0 s1 sN Since number global constraints si 1 N large complexity resolving global constraints high In contrast Fig 3b stages totally disjoint variable sets likely constraints assigned local constraints remain global These global constraints need resolved search space worstcase complexity bounded s0 s1 sN Due large number global constraints overhead resolving likely high In short minimization overhead resolving violated global constraints entails tradeoffs number shared entities variables subproblems number global constraints involved search space global constraints deﬁned In paper analyze constraints temporal planning problems order par tition small number simpler subproblems stages In general hard develop good partitioning algorithm minimizes time solve planning problem relation time solve subproblem resolve violated global constraints complex unknown In paper exploit temporal locality constraints planning problems partitioning stages Starting initial possibly infeasible schedule partition constraints horizon small number stages approximately equal number constraints For ex ample Fig 1 respectively Fig 4 shows nineteen respectively 3687 constraints initial infeasible schedule generated ASPEN 9 solving toy example respectively BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 193 CX1PREF sixteen orbits After partitioning constraints respectively stages resulting problem ﬁfteen respectively 3580 local constraints respectively 107 global constraints Since violated global constraints come satisﬁed new constraints corresponding new actions added planning progresses study algorithms determine suitable number stages repar tition constraints periodically order balance number violated constraints stage Our major goal paper develop theory corresponding algorithms resolving violated global constraints temporal planning problems partitioned constraints stages Speciﬁcally contributions paper We Section 3 necessary sufﬁcient extended saddlepoint condition ESPC governs constrained local minima MINLP problem formulated penalty function nonnegative transformed constraint functions This paper ﬁrst constrained local minimum MINLP onetoone correspondence extended saddle point penalty function penalties sufﬁciently large Using result way look constrained local minimum MINLP increase gradually penalties violated constraints penalty function search repeatedly local minima penalty function existing algorithm feasible solution constrained model b We present Section 4 ESPC decomposed constraintpartitioned MINLPs Each decomposed ESPC deﬁned respect subproblem consisting local constraints objective function objective original problem biased weighted sum violated global constraints As subproblem similar original problem solved planner little modiﬁcation c We partitionandresolve procedure Section 42 The procedure iter ates calling planner solve constraintpartitioned subproblems constraintreweighting strategy resolve violated global constraints sub problems In Section 5 demonstrate signiﬁcant improvements discrete space ASPEN mixedspace MIPS basic planners solve largescale benchmarks For example problem Fig 1 respectively 4 solved AS PEN 16 respectively 12043 iterations implementation 12 respectively 1102 iterations respectively better quality 2 Previous work In section summarize existing work related AI planning nonlinear optimization Our survey shows existing approaches solve problem directly taking constraints consideration 21 Existing temporal planning methods Fig 5 classiﬁes existing AI planning scheduling methods based state temporal representations search techniques 194 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 Fig 5 A classiﬁcation existing planning scheduling approaches Discretetime discretestate methods consist systematic searches heuristic searches local searches transformation methods Systematic searches explore entire state space complete solvers After decomposing search space subspaces evaluate complete planning problem Examples include generic A algorithm UCPOP 32 Graphplan 5 STAN 28 PropPLAN 13 System R 27 Heuristic solvers explore search space tree search guided heuristics der estimate distance state goal state They means resolve violated global constraints original planning problem partitioned constraints subproblems They guaranteed ﬁnd feasible plans success depends guidance heuristics Examples include HSP 6 FF 18 AltAlt 31 GRT 37 extension MOGRT 38 ASPEN 9 Last transfor mation methods convert problem constrained optimization satisfaction problem solving existing solver Examples class include SATPLAN 22 Blackbox 23 ILPPLAN 24 Discretetime mixedstate methods consist systematic searches heuristic searches transformation methods Similar discretetime discretestate methods methods class partition constraints planning problem Examples include SIPE 2 52 OPlan2 46 MetricFF 18 GRTR 37 LPSAT 54 Continuoustime mixedstate methods classiﬁed systematic heuristic local searches Again constraints partitioned methods Examples include LPG 16 MIPS 12 Sapa 45 ZENO 33 SHOP2 30 TALplanner 10 Eu ropa 21 In summary existing planners solve problem partitioning straints transform form solving existing methods In paper propose augment existing approaches constraint partitioning decom pose constraints large problem subproblems similar form solving existing planners Instead developing new planner based ESPC solve small subproblems existing planner effective performs solving small problems saving lot development efforts We demon strate approach Section 5 formulating objectives constraints subproblems solved ASPEN MIPS BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 195 22 Existing mathematical programming methods In section survey existing methods continuous mixedinteger optimiza tion Although methods applied solve planning problems requirements continuity differentiability convexity satisﬁed planning problems necessary understand limitations The concepts saddle points penalty formulations important form basis theory presented Section 3 Continuous nonlinear programming CNLP methods Consider following CNLP Pc min x subject hx f x x x1 xvT Rv 2 cid1 cid2 T 0 gx h1x hmx cid2 cid1 g1x gr x T cid1 0 f continuous differentiable g h discontinuous non differentiable closed form The goal solving Pc ﬁnd constrained local minimum x respect Ncx xcid8 cid9xcid8 xcid9 cid1 ε ε 0 continuous neighborhood x ε 0 means ε arbitrarily close 0 Deﬁnition 1 Point x CLMc constrained local minimum Pc respect points Ncx x feasible f x cid1 f x feasible x Ncx Traditional Lagrangian theory continuous optimization works Pc continu ous differentiable constraint functions g h The Lagrangian function Pc Lagrangemultiplier vectors λ λ1 λmT Rm µ µ1 µr T Rr ﬁned Lx λ µ f x λThx µTgx 3 Under continuity differentiability assumptions CLMc satisﬁes following necessary KKT condition sufﬁcient saddlepoint condition Necessary KarushKuhnTucker KKT condition 4 Assuming x CLMc regular point1 exist unique λ Rm µ Rr xLx 0 λ µ 4 µj 0 j Ax gix 0 set active constraints µj 0 The unique x λ µ satisfy 4 solving 4 nonlinear equations For instance Pc equality constraints KKT condition 4 expressed v m equations v m unknowns cid5 cid6 F x λ xf x λTxhx hx 0 5 1 Point x regular point 29 gradient vectors equality constraints x h1x x hmx active inequality constraints x ga1 x x gal x ai Ax set active inequality constraints linearly independent An inequality constraint gi x cid1 0 active gi x 0 It affect search direction active ignored 196 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 xhxT xh1x xhmx Jacobian constraints The v m unknowns solvable matrix 5 nonsingular Iterative procedures developed ﬁnd unique λ µ x sat isfy 4 For example existing sequential quadraticprogramming solvers like SNOPT LANCELOT solve 4 iteratively forming quadratic approximation evaluating quadratic model updating estimates x λ µ solution 4 In short existing CNLP solvers continuity differentiability requirements applied solve type planning problems studied paper2 b Sufﬁcient saddlepoint condition 226 The concept saddle points stud ied extensively past For continuous differentiable constraint functions x CLMc Pc exist unique λ Rm µ Rr satisfy following saddle point condition x µ 6 x Ncx λ Rm µ Rr This condition sufﬁcient necessary exist λ µ satisfy 6 CLMc x Pc λ µ cid1 Lx cid1 Lx λ Lx µ λ To illustrate concept consider following CNLP CLMc x 5 f x x2 subject hx x 5 0 min x 7 By applying KKT condition differentiate Lagrangian function Lx λ x2 λx 5 respect x evaluate x 5 We xLx λx 10 λ 0 implies λ 10 However 2 x Lx λxλ 2 0 know Lx λ local maximum respect x x λ instead local minimum Hence exists λ allow second inequality 6 satisﬁed x 5 In practice difﬁcult use 6 ﬁnding unique x λ µ satisfy 4 expressed nonlinear inequalities difﬁcult solve nonlinear equalities It mainly verifying solutions solving 4 A recent local optimal method solving Pc continuous differentiable straint functions interiorpoint cid31penalty method based following cid31penalty function 17 cid1 cid31z c f z c max 0 cid7 cid7 cid7 cid7h1z cid7 cid7 cid2 cid7hmz cid7 g1z gq z 8 Its theory shows onetoone correspondence CLMc constrained local minimum 8 c larger ﬁnite threshold c Although appears c unique proved c maximum Lagrange multipliers corresponding Lagrangian formulation satisﬁes KKT condition The approach support constraint partitioning difﬁcult partition 8 2 Constraint partitioning studied paper applied solve problems solvable existing CNLP MINLP solvers This decomposing constraints large CNLP MINLP problem subproblems calling existing CNLP MINLP solver solve subproblems applying constraint reweighting resolve violated global constraints Results approach scope reported 49 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 197 constraints reach consistent value single penalty term c subproblems Another partitioning approach called separable partitioning 4 similar advantages proposed constraint partitioning By exploiting separable properties original problem methods decompose dual problem Pc continuous differentiable constraint functions multiple simpler subproblems involving subset constraints variables They limited applications restricted assumptions linearity convexity functions Mixedinteger NLP MINLP methods generally solve MINLP problem partition ing search space subspaces subproblems way ﬁxing subset variables subproblem convex easily solvable relaxed approximated There approaches Generalized Benders decomposition GBD 15 computes iteration upper bound solution sought solving primal problem lower bound master problem Here primal problem corresponds original problem ﬁxed discrete variables master problem derived nonlinear duality theory It generally requires original problem special decomposable structures subproblems special properties nonempty continuous subspaces convex objective constraint functions b Outer approximation OA 11 similar GBD master problem formulated primal information outer linearization It requires continuous sub space nonempty compact convex set objective constraint functions convex c Generalized cross decomposition GCD 192039 iterates phase solving primal dual subproblems phase solving master problem Similar OA GBD GCD requires objective constraint functions subproblems proper convex functions d Branch reduce methods 4041 solve MINLPs CNLPs branchand bound algorithm exploit factorable programming construct relaxed problems range reduction improve performance bounding procedures Many rangereduction techniques applicable relaxed problems convex e Directsolution methods attack problem transformation They limited handling problems nonlinear constraints disconnected feasible regions In summary existing MINLP methods solve problem partition ing variables subspaces They applicable solve planning problems convexity factorability requirement decomposed subproblems Penalty methods A penalty function constrained optimization problem sum mation objective function constraint functions weighted penalties Using penalty vectors α Rm β Rr general penalty function Pc Lpx α β f x αTP cid2 cid1 hx cid2 cid1 βTQ gx 9 P Q possible transformation functions The goal penalty method ﬁnd suitable α β way x minimizes 9 corresponds CLMc Pc Penalty methods belong general approach solve continuous discrete mixed constrained optimization problems including planning problems continu 198 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 ity differentiability convexity requirements The Lagrangian function 3 KKT condition special case 9 gx hx continuous differentiable functions satisfy regularity condition transformed P Q When P gx Qhx general functions positive negative values local minimum 9 x require ﬁnding unique values α β proof shown However unique penalty vectors exist x exist 9 local minimum x For instance problem 7 ﬁnite α lead local minimum penalty function Lpx α f x α hx x 5 Hence possible ﬁnd x minimizing Lpx α respect x given α Next survey general results penalty methods associate constrained global minimum constrained minimization problem global minimum 9 sufﬁciently large penalties Although results respect continuous problems apply discrete mixed problems A staticpenalty method 2936 formulates Pc minimization 9 constraints Pc transformed nonnegative functions satisfy following properties P hx cid2 0 Qgx cid2 0 b P hx 0 hx 0 Qgx 0 gx cid1 0 For ﬁnite penalty vectors α β larger thresholds α α3 β β global minimum x Lpx α β onetoone correspondence constrained global minimum CGMc Pc To result know α β 9 greater zero order penalize violated constraints P hx Qgx nonnegative minimum zero Since 9 minimized respect x increasing penalty violated constraint large value force corresponding transformed constraint function achieve minimum zero penalties exist feasible solution Pc exists At points constraints satisﬁed term right 9 ﬁrst zero global minimum 9 corresponds CGMc Pc Continuing example 7 use penalty function takes absolute value constraint function Lpx α f x α hx assume 100 cid1 x cid1 100 global minimum Lpx α x 5 α α 105 It interesting note α depends range x For example Fig 6 1000 cid1 x cid1 1000 global minimum Lpx α x 5 α α 1005 This example shows α exceedingly large order ensure global optimality given range x One difﬁculties staticpenalty method penalties trial error Moreover trial computationally expensive impossible involves ﬁnding global minimum nonlinear function Techniques like simulated annealing 25 achieve global optimality asymptotic convergence 3 α α means element α means element α larger equal corresponding element α larger corresponding element α Further α cid2 α BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 199 Fig 6 An illustration global minimum Lpx α x 5 α α 1005 α cid1 α CNLP problem 7 1000 cid1 x cid1 1000 Instead ﬁnding α β trial error dynamicpenalty method 2936 increases penalties 9 gradually ﬁnds global minimum x 9 respect x unconstrained problem sequence stops x feasible solution Pc To x CGMc algorithm stops know penalties need increased x global minimum 9 feasible solution Pc The ﬁrst time x feasible solution Pc solution CGMc Hence method leads smallest α β allows CGMc However limitation staticpenalty method requires ﬁnding global minima nonlinear functions The practice reweighting violated constraints local search penalty func tions popular highly successful AI community For example planners SATPLAN 22 Blackbox 23 ILPPLAN 24 ﬁrst transform planning problem SAT ILP integer linear programming formulation They ﬁnd solution SAT ILP problem existing solver minimizes penalty func tion form 9 dynamically adjusted penalties 244244 The key feature applications deal discrete constraint functions nonnegative start number violated clauses problem binary constraints clause violated Hence work need transform constraint functions Moreover objective function usually chosen way ﬁnding constrained local minimum amounts ﬁnding constrained global minimum constrained SAT model As result theory existing static dynamic penalty methods applies In short 9 P hx Qgx positive negative values CLMc x Pc imply local minimum 9 x exist feasible penalties This means CLMc penalties exist 9 looking local minimum 9 On hand 9 P hx Qgx nonnegative functions CGMc Pc corresponds unconstrained global minimum 9 penalties larger thresholds Unfortunately result impractical ﬁnding global minimum uncon strained nonlinear function computationally expensive A similar observation discrete mixed optimization problems To cope shortcomings prove section onetoone corre spondence constrained local minimum MINLP extended saddle point penalty function nonnegative transformed constraint functions 200 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 penalties larger thresholds This result extends previous work proves specialcase condition discrete optimization problems 51 A constrained local min imum MINLP increasing gradually penalties violated constraints looking local minimum penalty function existing algorithm solution constrained model By showing general theory covers continuous discrete mixedinteger optimization paper provides complete foundation penalty methods 3 The theory extended saddle points We section necessary sufﬁcient saddlepoint condition ESPC mixed space based penalty function nonnegative transformed constraint functions relaxed range penalties 31 ESPC continuous discrete mixed optimization We ﬁrst state necessary sufﬁcient ESPC CLMc Pc based following penalty function Deﬁnition 2 The penalty function Pc 2 deﬁned 9 transforming constraint functions Pc nonnegative functions cid7 cid7 cid2 cid1 cid7 βT max cid7hx 0 gx Lcx α β f x αT 10 max0 gx max0 g1x max0 gr xT α Rm β Rr penalty vectors Note 10 special case penalty function staticpenalty method hx h1x hmxT In continuous space need following constraintqualiﬁcation condition order establish existence local minimum 10 x Deﬁnition 3 The subdifferential Dxφxcid8 cid12p function φ xcid8 X direction cid12p X represents rate change φxcid8 inﬁnitely small perturbation cid12p That cid1 φx cid8 cid12p cid2 Dx lim ε0 φxcid8 ε cid12p φxcid8 ε 11 Note function subdifferential exists cid12p xcid8 imply φx differentiable xcid8 respect cid12p Deﬁnition 4 Constraintqualiﬁcation condition The solution x X Pc meets condition exists direction cid12p X subdifferentials continuous equality active continuous inequality constraints zero That cid2 cid13 cid12p X Dx cid12p Dx cid1 hix 0 Ch j Cg cid1 gj x cid12p cid2 0 12 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 201 Ch Cg respectively sets indexes continuous equality active continuous inequality constraints Constraint qualiﬁcation satisﬁed Ch Cg sets Our constraintqualiﬁcation condition requires subdifferential tinuous equality constraint active continuous inequality constraint x nonzero direction cid12p It rules case direction cid12p x equality constraints active inequality constraints zero subdiffer entials Intuitively constraint qualiﬁcation x ensures existence ﬁnite α β lead local minimum 10 x Consider neighboring point x cid12p inﬁnitely close x objective function f x decreases cid12p active constraints x zero subdifferentials cid12p In case active constraints x cid12p satisﬁed impossible ﬁnd ﬁnite α β order establish local minimum 10 x respect x cid12p To ensure local minimum 10 x scenario true cid12p x Note condition restricted regularity condition KKT requires linear independence gradients equality active inequality straint functions The following theorem states ESPC constraint qualiﬁcation satisﬁed Theorem 1 Necessary sufﬁcient ESPC CLMc Pc Suppose x Rv point continuous search space Pc satisﬁes constraintqualiﬁcation condition 12 x CLMc Pc exist ﬁnite α cid2 0 β cid2 0 following satisﬁed Lcx α β cid1 Lcx α β cid1 Lcx α β 13 α α β β x Ncx α Rm β Rr The proof theorem shown Appendix A Theorem 1 shows x local minimum 10 respect x corresponds CLMc Pc second inequality 13 α α β β constraints Pc forced satisﬁed ﬁrst inequality 13 Hence instead looking CLMcs directly sufﬁces look extended saddle points penalty formulation According 13 extended saddle point local minimum Lc respect x local maximum Lc respect α β One approach look extended saddle point Lc increase gradually α β minimizing Lc respect x existing localsearch method α α β β Because existing localsearch algorithms approach improves staticpenalty approach deﬁned respect difﬁculttoﬁnd global minima 9 However presented Theorem 4 later approach generates ﬁxed points necessary sufﬁcient CLMc Additional steps presented Section 32 needed allow approach ﬁnd CLMc It interesting note α β satisfy Theorem 1 smaller corresponding α β dynamicpenalty method Section 22 202 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 Fig 7 An illustration 13 satisﬁed α α 10 CNLP problem 7 Lcx α strict local minimum x 5 α α α α Continuing example 7 instead α α 1005 order global minimum Lpx α x 5 1000 cid1 x cid1 1000 dynamicpenalty method Fig 6 sufﬁces α α 10 applying Theorem 1 order local minimum Lcx α x2 αx 5 x 5 irrespective range x Fig 7 illustrates Lcx α local minimum x 5 α 20 α 10 A small α leads rugged Lcx α function makes easier globalsearch algorithms locate local minima Next present ESPC discrete nonlinear programming DNLP problems Con sider DNLP f g h necessarily continuous differentiable respect y Pd min y f y y y1 ywT Dw subject hy 0 gy cid1 0 14 The goal solving Pd ﬁnd constrained local minimum y respect Nd y discrete neighborhood y Since discrete neighborhood point deﬁned literature user deﬁne concept Intuitively Nd y represents points perturbed y requirement valid state transitions y Deﬁnition 5 Nd y 1 discrete neighborhood y Dw discrete space ﬁnite userdeﬁned set points ycid8 Dw ycid8 reachable y step ycid8 Nd y y Nd ycid8 possible reach ycid8cid8 y steps neighboring points Deﬁnition 6 Point y CLMd constrained local minimum Pd respect points Nd y y feasible f y cid1 f y feasible y Nd y There distinct features CLMd First set CLMd Pd neighborhood dependent point CLMd deﬁnition neighborhood However CLMd s guaranteed feasible extreme case neighborhood point includes The fact CLMd s neighborhood dependent critical constrained searches BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 203 goal ﬁnd feasible solutions better neighboring points As long consistent neighborhood search CLMd local mini mum respect neighborhood Second discrete neighborhood ﬁnite number points Hence veriﬁcation point CLMd comparing objective value ﬁnite number neighbors This feature allows search descent direction discrete space enumeration greedy search Deﬁnition 7 The penalty function Pd deﬁned 9 transforming constraint functions Pd nonnegative functions Ld y α β f y αT cid7 cid7 cid2 cid1 cid7 βT max cid7hy 0 gy α Rm β Rr 15 Theorem 2 Necessary sufﬁcient ESPC CLMd Pd 5155 Suppose y Dw point discrete search space Pd Then y CLMd Pd exist ﬁnite α cid2 0 β cid2 0 following condition satisﬁed Ld y α β cid1 Ld y α β cid1 Ld y α β 16 α α β β y Nd y α Rm β Rr The proof theorem shown Appendix B Note constraintqualiﬁcation condition Theorem 1 needed Theorem 2 constraint functions changing continuously discrete problems Last present ESPC MINLP problems Consider MINLP problem objective function f continuous differentiable respect continuous sub space x Pm min xy f x y x x1 xvT Rv 17 y y1 xwT Dw subject hx y 0 gx y cid1 0 The goal solving Pm ﬁnd constrained local minimum x y respect Nmx y mixed neighborhood x y In paper construct mixed neighborhood union points perturbed discrete continuous subspace Such deﬁnition allows ESPC subspaces decomposable subspace Note mixed neighborhood user deﬁned concept discrete neighborhood userdeﬁned mixed neighborhood union discrete continuous neighborhoods Deﬁnition 8 Nmx y mixed neighborhood x y Rv Dw mixed space union continuous neighborhood userdeﬁned discrete neighborhood Nmx y Ncxy Nd yx cid9 cid8 Ncx cid8 x y x cid8 cid8 x y cid8 y cid8 Nd y cid9 18 204 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 Deﬁnition 9 Point x y CLMm constrained local minimum Pm respect points Nmx y x y feasible f x y cid1 f x y feasible x y Nmx y Deﬁnition 10 The penalty function Pm deﬁned 9 transforming straint functions Pm nonnegative functions Lmx y α β f x y αT α Rm β Rr cid7 cid7 cid2 cid1 cid7 βT max cid7hx y 0 gx y 19 Theorem 3 Necessary sufﬁcient ESPC CLMm Pm Suppose x y Rv Dw point mixed search space Pm x satisﬁes constraint qualiﬁcation condition 12 given y x y CLMm Pm exist ﬁnite α cid2 0 β cid2 0 following condition satisﬁed y Lmx β α α β β x y Nmx y α Rm β Rr α β y α β cid1 Lmx cid1 Lmx y α 20 The proof theorem shown Appendix C The following corollary facilitates search points satisfy 20 decompos ing condition independent necessary conditions It follows directly 18 deﬁnes Nmx y union points perturbed discrete tinuous subspace Such decomposition accomplished mixed neighborhood like Ncx Nd y Corollary 1 Given deﬁnition Nmx y 18 ESPC 20 rewritten necessary conditions collectively sufﬁcient Lmx y α β cid1 Lmx x cid1 Lmx y y Nd y β α y y α Lmx β cid1 Lmx y α β α β x Ncx y 21 22 In summary presented section set necessary sufﬁcient condi tions govern constrained local minima nonlinear continuous discrete mixed optimization problems In contrast general penalty approaches α β ex ist ESPC constrained local minimum provided constraint qualiﬁcation condition satisﬁed continuous subspace The similarity conditions allows problems classes solved uniﬁed fashion 32 Search procedures ﬁnding extended saddle points As discussed section CLMc Pc gradually increasing α β minimizing Lcx α β α α β β This obser vation allows solve Pc iterative search Fig 8a The algorithm solving BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 205 procedure ESP_search_continuousPc x αmax βmax α 0 β 0 repeat 1 m hi x cid13 0 αi αmax j 1 r gj x cid1 0 βj βmax repeat j increase αi δ increase βj δ perform descent Lcx α β respect x local minimum Lcx α β hi x cid13 0 βj βmax αi αmax j gj x cid1 0 CLMc Pc return CLMc end_procedure procedure ESP_search_mixedPm z αmax βmax α 0 β 0 repeat 1 m hi z cid13 0 αi αmax j 1 r gj z cid1 0 βj βmax repeat j increase αi δ increase βj δ perform descent Lmz α β respect x given y local minimum Lmz α β respect x given y repeat perform descent Lmz α β respect y given x local minimum Lmz α β respect y given x αi αmax hi z cid13 0 βj βmax gj z cid1 0 j CLMm Pm return CLMm end_procedure b Fig 8 Iterative procedures look CLMc Pc CLMm Pm The bounds α β αmax βmax userprovided Direct implementation 13 look CLMc Pc given starting point x b Direct implementation 21 22 look CLMm Pm given starting point z x y Pd similar shown Assuming α β outer loop according second inequality 13 inner loop looks local minimum Lcx α β order ﬁnd x If feasible solution Pc local minimum x Lcx α β penalties corresponding violated constraints increased The process repeated CLMc α respectively β larger userprovided maximum bound αmax respectively βmax αmax respectively βmax chosen large exceeds α respectively β Fig 8b shows pseudo code solves Pm looking x y α β satisfy Corollary 1 By performing descents Lmx y α β continuous discrete neighborhoods inner loops looks local minimum x y Lmx y α β respect points Nmx y The outer loop increases penalties violated constraints stops CLMm α respectively β exceeds maximum bound αmax respectively βmax 206 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 Because Lcx α β Lmx y α β local minima correspond constrained local minima α α β β possible iterative procedures Fig 8 terminate ﬁnding constrained local minimum The following theorem summarizes observation Theorem 4 When αmax α βmax β iterative procedure Fig 8a spectively 8b generates ﬁxed points necessary sufﬁcient satisfy 13 respectively 21 22 To cope issue discuss additional strategies augment procedure Fig 8b These strategies general applicable looking CLMc CLMd First α β reach upper bounds search local minimum Lmx y α β correspond CLMm Pm different local min imum function need Instead restarting search new starting point reducing α β change terrain lower barrier penalty function allowing local search continue trajectory local minimum penalty function By repeatedly increasing α β upper bounds reducing lower bounds local search algo rithm able visit multiple local minima penalty function Alternatively possible escape local minimum penalty function globalsearch algorithm inner loops Since strategies offset effects need applied Second ease ﬁnding CLMm depends number CLMms search space Pm turn depends neighborhood function chosen If neighbor hood point entire search space ﬁnding CLMm amounts ﬁnding constrained global minimum On hand neighborhood point point feasible point search space CLMm In case neighborhood limited random probing applied ﬁnding CLMm amounts feasibility search In practice choose neighborhood point rich order achieve balance number neighbors point number CLMms search space Last functions planning problems closed form gra dients unavailable hard locate local minima penalty function case One way address issue generate probes based deterministic proba bilistic genetic mechanisms accept based deterministic stochastic criteria For example experiments Section 51 ASPEN solve sub problems new probes generated ASPENs builtin mechanism descent penalty function accepted based Metropolis probability Ld increases This mechanism allows descents occasional ascents penalty function In general cases illustrated stochastic constrained simulated annealing algo rithm 50 new probes generated accepted based Metropolis probability Lm increases x y dimension decreases α β dimension BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 207 4 Partitioning ESPC temporal planning problems In section solve Pt 1 ﬁnding plan z CLMm respect feasible plans mixed neighborhood Nmz After showing z satisﬁes ESPC 20 decompose ESPC set necessary conditions collectively sufﬁcient Problem Pt solved iteratively ﬁnding extended saddle point stage resolving violated global constraints appropriate penalties 41 Necessary sufﬁcient ESPC partitioned subproblems To simplify discussion partition plan z discrete continuous parts following derivation understood partition need decomposed way Corollary 1 To enable partitioning ESPC independent necessary conditions deﬁne mixed neighborhood plan z follows Deﬁnition 11 Npz mixed neighborhood z partitioned problem Pt deﬁned Npz Ncid10 t0 N t p z Ncid10 cid8 z t0 cid8 cid8 z t Nm cid1 zt cid2 z zis zt s cid13 t 1 cid8 zis cid9 Nmzt mixedspace neighborhood zt Stage t Intuitively Npz decomposed N 1 neighborhoods perturbing z stages Pt keeping overlapped variables consistent stages The size Npz deﬁned 23 smaller Cartesian product neighborhoods stages By considering Pt MINLP deﬁning corresponding penalty function apply Theorem 3 follows Deﬁnition 12 Let Φz γ η γ TH z ηT max0 Gz sum trans formed global constraint functions weighted penalties γ γ1 γpT Rp penalty vectors global constraints Then penalty function Pt corresponding penalty function Stage t deﬁned 9 transforming constraint functions Pt nonnegative functions η η1 ηq T Rq Lmz α β γ η J z Ncid11 cid8 αtT cid7 cid7ht cid1 zt cid2cid7 cid1 cid7 βtT max 0 gt cid1 zt cid12 cid2cid2 t0 Φz γ η cid1 z αt βt γ η cid2 Γm cid7 cid7ht J z αtT cid1 0 gt βtT max cid1 zt cid1 zt cid2cid7 cid7 cid2cid2 23 24 Φz γ η 208 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 αt α1t αmt tT Rmt βt β1t βrt tT Rrt penalty vectors local constraints Stage t Lemma 1 Plan z CLMm Pt respect Npz exist ﬁnite α cid2 0 β cid2 0 γ cid2 0 η cid2 0 following ESPC satisﬁed Lmz α β γ η cid1 Lmz α β γ η cid1 Lmz α γ β α α β β γ γ η η α R R cid13 z Npz i0 ri γ Rp η Rq N η cid13 25 N i0 mi β Based Lemma 1 partitioning 25 multiple conditions Theorem 5 Partitioned necessary sufﬁcient ESPC CLMm Pt Given Npz ESPC 25 rewritten N 2 necessary conditions collectively sufﬁcient cid1 z αt βt γ η cid2 cid2 Γm αt cid1 Γm cid1 Γm α α p z αt Rmt βt Rrt t 0 N γ η cid1 Lmz βt βt β β η γ γ γ cid1 z cid1 z αt η cid2 η Lmz z N t 26 27 The proof shown Appendix D Theorem 5 shows ESPC 25 partitioned N 1 necessary ditions 26 local constraints overall necessary condition 27 global constraints subproblems A close examination shows local ex tended saddle points Stage t satisfy 26 local minima 24 respect z second inequality 26 αt βt larger thresholds αt βt constraints Stage t forced satisﬁed ﬁrst inequality 26 In essence point satisﬁes 26 Stage t solution fol lowing MINLP P t original objective function J z biased violated t global constraints P t t min zt subject ht cid7 cid7 cid2 cid1 cid7 ηT max cid7H z J tz J z γ T 0 Gz cid2 cid1 cid2 cid1 zt zt 0 gt cid1 0 28 The bias violated global constraints solving P t important leads search points minimize bias When penalties violated global constraints large solving P t t lead points exist satisfy global constraints t In short ﬁnding points satisfy 25 reduced solving multiple MINLPs 28 reweighting violated global constraints deﬁned 27 deﬁned P t t BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 209 procedure ESP_partitioned_search_mixedPt z αmax βmax γ max ηmax γ 0 η 0 repeat increase penalties violated global constraints 1 p Hi z cid13 0 γi γ max j 1 q Gj z cid1 0 ηj ηmax t 0 N iterate N 1 stages solve P t apply existing solver ESP_search_ mixedP t j t increase γi δ increase ηj δ stage z αmax βmax solve P t t t end_for γi γ max return CLMm Hi z cid13 0 ηj ηmax Gj z cid1 0 CLMm Pt j end_procedure b Fig 9 The partitionandresolve procedure look CLMm Pt The bounds αmax βmax γ max ηmax userprovided Partitioned search look points satisfy 26 27 b Implementation ﬁnding CLMm Pt satisﬁes 26 27 given starting point z 42 The partitionandresolve procedure t Fig 9 presents partitionandresolve procedure looks points satisfy conditions Theorem 5 The inner loop Stage t Fig 9b solves P t look ing extended saddle point satisﬁes 26 This procedure Fig 8b ﬁxed γ η speciﬁed outer loop existing solver The possible P t welldeﬁned MINLP This illustrated Section 5 use ASPEN MIPS planners solve partitioned planning sub problems After solving subproblems penalties violated global constraints increased outer loop The process repeated CLMm Pt γ η exceed maximum bounds Similar result Theorem 4 procedure Fig 9 generates ﬁxed points necessary sufﬁcient satisfy 26 27 Hence additional steps described Section 32 needed help escape local minima penalty function feasible points Pt t 5 Experimental results In section experimental results discretespace AS PEN 9 mixedspace MIPS 12 planners solve partitioned planning bench marks We signiﬁcant improvements solutions terms quality plans generated execution times ﬁnd 210 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 51 SGPlantASPEN A planner ASPEN solve partitioned problems We ASPEN Automated Scheduling Planning Environment 9 developed Jet Propulsion Laboratory available benchmarks spacecraft operation planning We present prototype planner SGPlantt ASPEN N reparti tioning_strategy partitions problem temporal horizon N subproblems form P t calls ASPEN solve subproblems resolves violated global constraints repartitions problem necessary Finally compare performance ASPEN SGPlantASPEN N repartitioning_strategy t ASPEN 9 objectivebased planning automated planning scheduling complex spacecraft operations It involves generating sequence parallel lowlevel spacecraft commands set highlevel science engineering goals Using discrete time horizon discrete state space ASPEN model encodes spacecraft operability constraints ﬂight rules spacecraft hardware models science exper iment goals operations procedures It deﬁnes types schedule constraints procedural form parallel activities scheduled Such constraints include temporal decomposition resource statedependency goal constraints In addition quality schedule deﬁned preference score weighted sum multiple preferences procedural optimized planner Preferences related number conﬂicts number actions value resource state value activity parameter Since ASPEN search feasible plans optimize plan quality time alternates repair phase optimization phase In repair phase 35 ASPEN generates initial schedule conﬂicts searches feasible plan initial plan iterative repairs resolve conﬂicts indi vidually In repair iteration planner decide choice point conﬂict resolved conﬂictresolution method rich collection repair heuristics In optimization phase ASPEN uses preferencedriven incremental localoptimization method optimize plan quality deﬁned preference score It decides best search direction choice point based information multiple choice points In ex periments allow ASPEN alternate repair phase unlimited number iterations optimization phase 200 iterations defaults ASPEN The ASPEN software tested publicly available benchmarks scheduling parallel spacecraft operations In paper tested available benchmarks public domain The CX1PREF benchmark 53 models planning operations Citizen Explorer1 CX1 satellite involve taking data related ozone downloading data ground scientiﬁc analysis Its problem generator generate problem instances userspeciﬁed number satellite orbits In ex periments studied CX1PREF 8 16 orbits respectively b The DCAPS benchmark 34 models operation DATACHASER shuttle payload managed University Colorado Boulder c OPTIMIZE PREF benchmarks developed JPL come licensed release ASPEN Implementation partitionandresolve search Based Fig 9 imple mented SGPlantASPEN N repartitioning_strategy 8 In implementation set BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 211 k 1 num_descents ASPEN solve P t evaluate Γmz αt βt γ η Metropolis probability controlled T Γmz αt βt γ η accepted child process generate new schedule t ASPEN apply action main process update penalties αt βt violated local constraints num_descents 1 t 1 N 1 procedure SGPlantASPEN N repartitioning_strategy generate initial plan set initial temperature T 2 partition time horizon N stages 3 4 repeat 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 end_procedure change z α β γ η iteration return best plan end_if end_for end_for update penalties γ η violated global constraints num_descents min100 num_descents2 reduce temperature T T c c 0 1 repartitioning_strategy DYNP repartition stages end_if Fig 10 SGPlantASPEN N repartitioning_strategy The partitionandresolve procedure SGPlan partitions planning problem temporal horizon N subproblems calls ASPEN solve sub problems resolves violated global constraints repartitions problem necessary Annealing lines 910 probabilistically accept probe worse penaltyfunction value descents Γm weight J z P t 100 preference score 0 1 initial ize penalties zeros increase penalties violated global constraints iteration 01 t In generating new schedule current schedule descents Γm line 8 Fig 10 ASPEN chooses probabilistically repair optimization actions selects random feasible action choice point applies selected actions current schedule Since objectives constraints complex space craft applications differentiable new schedule generated likely fol low descent directions local search stuck easily local minima penalty function feasible solutions original problem To end SGPlantASPEN N repartitioning_strategy employs annealing determine accept new schedule lines 910 Using parameter called temperature accepts new schedule larger Γm based Metropolis probability acceptance probability decreasing temperature decreases c 0 1 In implementation ﬁx initial temperature 1000 reduce iteration factor c 08 Two important issues addressed partitionandresolve imple mentation number stages duration In ASPEN conﬂict active window bounded start time end time called time points Adjacent time points collapsed stage ASPEN discrete time horizons We studied static dynamic partitioning stages In static parti tioning SGPlantASPEN N STATICP partitions horizon statically evenly N 212 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 Fig 11 Number iterations taken static dynamic partitioning ﬁnd feasible plan 8orbit CX1PREF problem stages This simple strategy leads unbalanced number time points different stages During search stages contain conﬂicts resolved contain lot conﬂicts Such imbalance leads search spaces different sizes different stages search times dominated stages To achieve better balance activities stages SGPlantASPEN N DYNP ad justs boundary stages dynamically This accomplished ﬁnding M number time points horizon related conﬂicts end outer loop line 15 partitioning horizon N stages way stage contains approx imately number MN time points line 19 To determine best N Fig 11 plots number iterations taken static dynamic partitioning ﬁnding feasible schedule 8orbit CX1PREF problem The results N 100 good choice Since benchmarks lead similar conclusions set N 100 experiments Note N relatively large stages local constraints satisﬁed planning progresses To avoid managing defunct stages implementation collapses automatically adjacent defunct stages way resulting stage contains unsatisﬁed local constraint Consequently actual number stages planning smaller value N shown Experimental results Fig 12 compares performance ASPEN SGPlanttASPEN 100 STATICP SGPlantASPEN 1 STATICP version planner parti tioning SGPlantASPEN 100 DYNP benchmarks described earlier section In graph plot quality best feasible schedule respect number search iterations Although SGPlant guaranteed ﬁnd optimal schedules generate multiple locally optimal feasible schedules improving best schedule In experiments maintain best sched ule search time spent The results descents annealing SGPlantASPEN 1 STATICP little improvements original ASPEN lead better solutions PREF worse solutions CX1PREF 16 orbits DCAPS OPTIMIZE Our results SGPlantASPEN 100 STATICP able ﬁnd schedules quality orders magnitude faster ASPEN SGPlantASPEN 1 STATICP better schedules converge BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 213 c b d e Fig 12 Qualitytime comparisons SGPlantASPEN 1 STATICP SGPlantASPEN 100 STATICP AS PEN SGPlantASPEN 100 DYNP All runs involving SGPlant terminated 24000 iterations CX1PREF 8 orbits b CX1PREF 16 orbits c DCAPS d PREF e OPTIMIZE Further dynamic partitioning lead better schedules shorter times static partitioning Hence conclude improvements SGPlant mainly partitioning annealing 52 SGPlantMIPS A planner MIPS solve partitioned problems In section results partitioning PDDL21 benchmarks temporal horizons mixedspace MIPS planner 12 solve partitioned subproblems 214 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 MIPS 12 heuristic planner performs static analysis problem instance mixed space continuous time searches optimized sequential plan performs critical path analysis called PERT generate optimal parallel plans sequence operators precedence relations Using weighted A algorithm ﬁnds optimal G state space propositional facts feasible path initial state sI goal state sG numeric variables It optimize arbitrary objective incorporating objective heuristic function By generating approximate relaxed plans encountered state MIPS uses laxed planning heuristic RPH 18 guidance RPH builds relaxed plan wellknown planning graph proposed Graphplan 5 ignoring delete effects actions It extracts relaxed plan planning graph computes estimated distance current state goal state MIPS extends RPH numeric infor mation combined propositional numeric forwardbackward approximation scheme It integrate PERT scheduling heuristic estimate order favor states smaller parallel plan length MIPS handle STRIPS subset PDDL language cope numeric quantities durations PDDL 21 level 23 PDDL 14 In PDDL21 actions represented parameters durations conditions effects A condition deﬁned terms logical functional expressions ground atoms conditional effect evaluated start end interval action MIPS handle additional features ADL negative preconditions universal conditional effects MIPS competed second International Planning Competitions awarded Distinguished Performance fully automated track We use MIPS experiments performs source code readily available Implementation partitionandresolve search Fig 13 shows pseudo code SGPlantMIPS N It generates initial possibly infeasible plan planning prob lem formulates problem penalty function decomposes states N 1 stages solves subproblem independently resolves violated global constraints creasing penalties MIPS speciﬁes state problem s sf sr sf contains set nf true facts s sr nr vector instantiated values numeric variables s It partitions set grounded facts symmetry groups 12 staticanalysis phase way element sf fact unique symmetry group For example small problem symmetry groups Group 1 person1 city0 person1 city1 person1 city2 person1 plane1 Group 2 person2 city0 person2 city1 person2 city2 person2 plane1 Group 3 plane1 city0 plane1 city1 plane1 city2 A valid state sf person1 city0 person2 city1 plane1 city2 Based deﬁnition symmetry groups deﬁne neighborhood Nms s include s states scid8 differ s exactly fact facts differ BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 215 procedure SGPlantMIPS N generate initial plan relaxed operators repeat iter 0 t 0 N initial state si t Stage t initial plan num_trials 0 repeat num_trials num_trials 1 generate new initial state Nmsi t Stage t MIPS solve P t evaluate J tz 28 solution plan generated MIPS Stage t t J tz improved num_trials max_trials end_for update penalty vector γ violated global constraints iter iter 1 iter mod τ 0 repartition stages end_if change z γ iteration return best plan 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 end_procedure Fig 13 SGPlantMIPS N The partitionandresolve procedure SGPlan partitions PDDL21 planning problem temporal horizon N 1 subproblems calls MIPS solve subproblems resolves violated global constraints s scid8 symmetry group That s scid8 neighboring states s scid8 differ facts f s f cid8 scid8 symmetry group To generate neighboring state scid8 s randomly pick fact s perturb different fact symmetry group Note sr numeric s changed process exist action valid transition s scid8 To quantify notion valid transition measure distance Ds q states s sf sr q qf qr number different facts s q plus normalized difference numerical parts s cid13 q Ds q number different facts s q nrcid11 qri sri maxsri qri scid13q cid7 cid7 cid7 cid7 i1 29 Hence Ds q 0 s q identical states We deﬁne Ss set successor different neighborhood states s way exists valid action brings s q q Ss Last deﬁne transition distance T s q minimum distance s q successors s T s q min vSs Dv q 30 According deﬁnition T s q 0 exists valid action bring s q Based concepts neighborhood state transition transition distance specify local planning subproblem P t initial state sit goal state sit 1 See Fig 14 states deﬁned Stage t Since initial local plan infeasible need formulate P t solved Stage t After partitioning P t t t t 216 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 Fig 14 Formulation planning subproblem P t t Stage t solved MIPS hopefully overall planning problem feasible line 10 Fig 13 This subproblem domain speciﬁcation original problem initial state scid8 Nmsit goal state sit 1 In addition global constraints boundaries Stage t predecessor successor stages cid2 cid1 sgt sit 1 cid1 sgt 1 s Ht1z T Ht z T 0 0 31 cid2 cid8 Hence Ht1z 0 respectively Ht z 0 satisﬁed valid action bring sgt 1 respectively sgt sit respectively sit 1 These global constraints added biases objective P t follows t J tz J z γt1Ht1z γt Ht z 32 γt1 γt ﬁxed penalties associated global constraints P t solved The constraints subproblem Stage t remain unchanged t After solving P t MIPS returns locally optimal feasible plan scid8 sit 1 exists returns feasible plan scid8 sgt minimizes 32 We accept plan improves J tz repeat process new initial state Nmsit ﬁnd better plan maximum number trials exceeded line 12 Fig 13 In experiments set max_trials 5 t After completing N 1 subproblems iteration line 14 update penal ties violated global constraints ω 0 control rate increase γt γt ω Ht z t 0 1 N 33 We set heuristically ω 001Ja Ja average value J z iterations Similar partitionandresolve implementation ASPEN repartition stages dynamically adjusting boundary stages certain number τ Fig 13 iterations This accomplished counting number state transitions sI sG end outer loop line 16 redeﬁning stage boundaries order stage approximately number state transitions After repartitioning number violated global constraints stage different In experiments set N 20 τ 5 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 217 Experimental results We SGPlantMIPS 20 improves signiﬁcantly original MIPS planner set PDDL21 planning benchmarks Third In ternational Planning Competition The problems studied belong number domains including DepotNumeric DepotSim DepotTime DriveLogNumeric DriveLogSim Drive LogTime ZenoTravelNumeric ZenoTravelSim ZenoTravelTime As reference performance LPG best automated planner competition Because access source code LPG time experiments able report performance LPG basic solver SGPlant4 We conducted experiments AMD Athlon MP2000 PC Redhat Linux 72 In experiments MIPS LPG August2003 version executables default parameters downloaded Web sites In accordance way planners run International Planning Competitions ﬁxed random seed 1000 LPG MIPS SGPlantMIPS 20 making behave like deterministic planners We parameters speciﬁed original MIPS version MIPS embedded SGPlantMIPS 20 We ran planner problem instance maximum time limit 1000 sec For 120 total 160 instances solvable MIPS Fig 15a compares quality solution instance MIPS SGPlantMIPS 20 given time taken MIPS solve instance It measures fraction instances SGPlantMIPS 20 better solution time taken MIPS In contrast Fig 15b compares time taken MIPS solve instance SGPlantMIPS 20 solution better qual ity MIPS instance It measures fraction instances SGPlantMIPS 20 solution faster better quality MIPS The graphs include results 30 instances SGPlantMIPS 20 solve MIPS ﬁnd feasible plan 1000 sec The results SGPlantMIPS 20 able improve MIPS 817 cases quality 832 cases time PDDL21 instances solvable MIPS In comparison implementation SGPlangMIPS partitions problem subgoals leads comparable performance able improve MIPS 805 cases quality 801 cases time PDDL21 instances solvable MIPS 48 Of 150 160 instances solvable SGPlantMIPS 20 SGPlantMIPS 20 ﬁnd feasible solution better time respectively quality MIPS 944 respectively 938 As reference Fig 16 shows SGPlantMIPS 20 comparable normalized formance respect LPG The results SGPlantMIPS 20 able improve LPG 496 cases quality 542 cases time The 4 At time revision ﬁnished implementing SGPlangFFLPG N planner partitions constraints problem instance according subgoals N 1 subproblems calls FF LPG solve subproblems 7 SGPlangFFLPG N participated Fourth International Planning Competition won ﬁrst prize suboptimal temporal metric track second prize suboptimal propositional track It ranked better new version LPG tracks Due extensive redesign involved plan report features performance future paper 218 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 b Fig 15 Normalized time quality SGPlantMIPS 20 respect MIPS 120 instances solvable MIPS total 160 instances The time quality MIPS normalized 1 1 Distribution quality solutions SGPlantMIPS 20 normalized respect corresponding solutions MIPS time taken MIPS ﬁnd solution b Distribution times taken SGPlantMIPS 20 ﬁnd solution better quality MIPS normalized respect time taken MIPS ﬁnd solution improvements LPG substantial SGPlantMIPS 20 inherits MIPS limitations performance able improve LPG MIPS forms worse LPG start Table 1 presents complete results 160 instances tested Since MIPS designed work anytime mode ﬁnd solution SGPlantMIPS 20 LPG generate multiple solutions improving quality list instance solution time quality MIPS ﬁrst ﬁnal solutions SGPlantMIPS 20 LPG The results SGPlantMIPS 20 outperforms MIPS instances tested SGPlantMIPS 20 comparable performance LPG 6 Conclusions In paper presented new theory penalty methods continuous dis crete mixedinteger optimization application solving temporal planning problems partitioned constraints Our theory shows constrained local minimum general MINLP problem onetoone correspondence extended saddle point BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 219 b Fig 16 Normalized time quality SGPlantMIPS 20 respect LPG 154 instances solvable LPG 160 The time quality LPG normalized 1 1 Distribution quality solutions SGPlantMIPS 20 normalized respect corresponding solutions LPG time taken LPG ﬁnd solution b Distribution times taken SGPlantMIPS 20 ﬁnd solution better quality LPG normalized respect time taken LPG ﬁnd solution penalty function nonnegative transformed constraint functions penalties larger thresholds Hence way ﬁnd constrained local minimum MINLP increase gradually penalties violated constraints look local minimum penalty function existing algorithm solution constrained model Next deﬁning proper neighborhood MINLPs extension method constraintpartitioned MINLPs Finally partition ing time horizon discretespace ASPEN mixedspace MIPS planners solve partitioned planning subproblems demonstrated signiﬁ improvements benchmark problems terms quality plans generated execution times ﬁnd Results partitioning planning problems subgoal dimension MIPS planner reported 4748 Our constraintpartitioning approach important reducing complexity non linear constrained planning problems It leads subproblems easier solve signiﬁcantly smaller number constraints It results subprob lems similar original problem evaluated existing planners little modiﬁcation Partitioning introduces violated global constraints resolved solving subproblems To reduce Table 1 Results MIPS SGPlantMIPS 20 LPG solving PDDL21 benchmark instances All timing results milliseconds solvers run maximum time limit 1000 sec means solution time limit For MIPS Time Sol list solution time quality lower better For SGPlantMIPS 20 LPG Time1 Sol1 list time quality ﬁrst solution Timef Solf list time quality solution time limit For instance boxed number indicates best quality MIPS SGPlantMIPS 20 solution time limit result LPG underlined LPG better quality SGPlantMIPS 20 irrespective time solution time limit ﬁnal quality LPG requires smaller CPU time 2 2 0 Problem ID DepotNumericl DepotNumeric2 DepotNumericS DepotNumeric4 DepotNumeric5 DepotNumeric6 DepotNumeric7 DepotNumeric8 DepotNumeric9 DepotNumeric10 DepotSim1 DepotSim2 DepotSim3 DepotSim4 DepotSim5 DepotSim6 DepotSim7 DepotSim8 DepotSim9 DepotSim10 DepotSim11 DepotSim12 DepotSim13 DepotSim14 MIPS Time 149 398 2543 1522 1605 107850 38 51 476 135485 169 302327 164389 450 Sol 32 43 31 38 28 16 4612 732 10339 13003 6727 111039 9104 84025 SGPlantMIPS 20 Sol1 Time1 226 20 374 40 23 100 546 1930 1295 30340 961 160 35 2180 15 140 30 30 620 290 24400 1080 530 39680 130 2780 350 470 45 52 129 67 157 46 70 254 82 194 175 56 Timef 20 90 10080 37540 144300 380 390350 77660 40020 1040 278960 15070 24400 62450 190010 384400 67520 259880 1820 76550 Solf 226 339 11 30 752 363 14 10 24 31 40 28 157 27 43 139 38 84 42 43 LPG Time1 30 40 370 1080 7310 250 410 264980 250 40 50 1850 1480 1270 33010 100 870 32970 160 6790 425800 190 530 Sol1 326 539 41 2148 331401 1862 25 4137 19 28 48 110 153 192 292 63 93 203 71 267 280 82 114 Timef 40 250 76820 32980 239360 3190 36460 264980 178740 70 850 317880 63630 567290 177590 26130 402240 349010 113620 228010 425800 27510 90190 Solf 226 339 12 30 946 363 14 4137 10 24 31 40 28 142 225 29 46 172 38 97 280 41 42 continued page B W W h Y C h e n A r t ﬁ c l I n t e l l g e n c e 1 7 0 2 0 0 6 1 8 7 2 3 1 Table 1 continued Problem ID DepotSim15 DepotSim16 DepotTime1 DepotTime2 DepotTime3 DepotTime4 DepotTime5 DepotTime6 DepotTime7 DepotTime8 DepotTime9 DepotTime10 DepotTime11 DepotTime12 DepotTime13 DepotTime14 DepotTime15 DepotTime16 DepotTime17 DepotTime18 DepotTime19 DepotTime20 DriveLogNumeric1 DriveLogNumeric2 DriveLogNumeric3 DriveLogNumeric4 DriveLogNumeric5 DriveLogNumeric6 DriveLogNumeric7 DriveLogNumeric8 MIPS Time 439830 40 54 623 143242 134 754 172322 1203 429824 90 89 92 112 124 1301 1231 19680 Sol 73032 594811 923111 255082 199456 149791 136313 24557 104526 848653 1099 1497 907 715 878 1667 866 3273 SGPlantMIPS 20 Sol1 Time1 262 159490 59 200 40 40 2120 180 58520 280 3300 11371 130 31090 334500 430 870 242110 230 1720 74090 580 175940 20 30 20 30 30 30 30 30 45625 50 548908 78 556905 95714 76286 108333 159416 535334 194096 19055 370199 268596 44889 9705 320292 330286 814294 7772 20065 12136 10389 13355 9684 9787 21356 Timef 576510 5950 40 12210 548910 93210 58520 280 505390 292220 437720 432840 334500 32460 330520 242110 55870 608270 289510 172440 261470 42920 324250 6340 4590 247570 52150 131630 31380 Solf 198 29 45625 36667 56508 7425 556905 95714 37709 10385 109749 437443 194096 50042 122 268596 12001 39125 244276 152867 50768 777198 979998 6419 7069 5813 968396 870698 14302 LPG Time1 200370 240 30 100 230 1920 150720 600 620 47390 140 7600 210 640 153770 310 2030 15470 500 96160 20 40 40 40 30 30 40 40 Sol1 346 71 44635 63667 1569 147499 2049384 691577 73905 1294999 207417 630139 88095 297032 76095 55501 1412 379016 240838 682233 7772 14722 11757 933 7971 10005 1191 34935 Timef 359850 3060 40 590 174260 384170 204330 13610 372910 591380 241320 575110 567390 263450 153770 67850 273450 15470 398940 310060 42730 3980 133780 15210 63640 37960 88960 176900 Solf 170 28 44635 37667 59683 74 677595 94714 35905 914001 111 447028 47961 1222 76095 13555 36125 379016 1504 424705 777199 979999 637998 704 5818 965498 866799 1430299 continued page B W W h Y C h e n A r t ﬁ c l I n t e l l g e n c e 1 7 0 2 0 0 6 1 8 7 2 3 1 2 2 1 Table 1 continued Problem ID DriveLogNumeric9 DriveLogNumeric10 DriveLogNumeric11 DriveLogNumeric12 DriveLogNumeric13 DriveLogNumeric14 DriveLogNumeric15 DriveLogNumeric16 DriveLogNumeric17 DriveLogNumeric18 DriveLogNumeric19 DriveLogNumeric20 DriveLogSim1 DriveLogSim2 DriveLogSim3 DriveLogSim4 DriveLogSim5 DriveLogSim6 DriveLogSim7 DriveLogSim8 DriveLogSim9 DriveLogSim10 DriveLogSim11 DriveLogSim12 DriveLogSim13 DriveLogSim14 DriveLogSim15 DriveLogSim16 DriveLogSim17 DriveLogSim18 MIPS Time 629 278 7250 14320 2521 344331 12421 90 90 98 99 112 117 122 2791 202 2691 351 1772 1734 2403 13620 549119 Sol 3002 402 616 3227 2148 3347 1753 9207 9221 4007 8916 5119 6413 4009 11126 26431 6121 9921 25241 10429 22644 26543 22394 SGPlantMIPS 20 Sol1 Time1 3239 40 3463 50 5732 60 49726 230 19694 160 106925 1230 1568 570 143983 74893 205834 19510 124801 11160 252196 605000 193232 484120 30 30 20 30 30 30 30 40 40 40 50 400 130 1910 700 4350 65920 92 103 47 98 119 94 51 134 192 50 85 578 258 1562 311 867 672 Timef 383640 346800 151870 7430 500690 89360 489580 74893 580450 250850 605000 564590 10030 40 40 2180 10740 31030 70 239310 81840 680 442350 477470 62250 315350 333100 346820 208150 Solf 18165 1443 3405 20336 11613 17524 11571 143983 73847 9055 252196 15084 91 92 401 52 51 52 40 52 92 38 67 168 102 106 125 245 327 LPG Time1 50 50 90 280 170 300 720 109730 4440 7980 204360 86530 20 30 30 30 30 40 30 40 40 60 50 410 140 170 610 8270 4330 Sol1 23764 4034 12341 5067401 25753 5092502 32542 15932389 11671297 11240894 27835066 15059186 91 130 47 98 101 101 113 130 222 113 105 748 462 290 665 389 747 Timef 80510 182240 528370 496720 148980 575720 239360 109730 146520 387730 535560 547320 20 80 50 490 70 70 330 17240 65760 3390 433490 228440 70980 130570 422000 384210 308990 Solf 18342 1434 3544 21196 12233 16779 12271 15932389 8816497 8402803 24096869 13163992 91 92 40 52 51 52 40 52 92 38 65 156 102 109 113 238 327 continued page 2 2 2 B W W h Y C h e n A r t ﬁ c l I n t e l l g e n c e 1 7 0 2 0 0 6 1 8 7 2 3 1 Table 1 continued Problem ID DriveLogSim19 DriveLogSim20 DriveLogTime1 DriveLogTime2 DriveLogTime3 DriveLogTime4 DriveLogTime5 DriveLogTime6 DriveLogTime7 DriveLogTime8 DriveLogTime9 DriveLogTime10 DriveLogTime11 DriveLogTime12 DriveLogTime13 DriveLogTime14 DriveLogTime15 DriveLogTime16 DriveLogTime17 DriveLogTime18 DriveLogTime19 DriveLogTime20 ZenoTravelNumeric1 ZenoTravelNumeric2 ZenoTravelNumeric3 ZenoTravelNumeric4 ZenoTravelNumeric5 ZenoTravelNumeric6 ZenoTravelNumeric7 ZenoTravelNumeric8 MIPS Time 65 80 75 75 103 124 123 235 233 287 343 1530 1256 2303 9853 236244 72 70 92 91 100 112 1031 183 Sol 303 310 173 392 112 260 268 313 980 340 391 611 558 1049 893 95494 13564 6786 7505 16964 19916 35282 16472 33543 SGPlantMIPS 20 Sol1 Time1 1030 58080 771 178550 30 30 30 30 30 40 30 50 40 50 50 260 120 260 970 3590 32470 94730 16 50 30 30 30 40 30 50 303 321 213 339 330 242 321 346 695 442 501 2072 651 1066 671 2508 1752 1721 13564 181307 110146 199685 130139 122595 14435 535779 Timef 58080 311250 10020 66340 40 7170 14570 31050 219520 9200 13150 62070 21060 32970 22410 286970 153350 247890 540870 442220 124 5100 110050 295510 342970 107230 471810 433040 Solf 1030 293 302 245 173 230 102 168 200 206 320 93 232 319 388 287 242 983 1026 1528 135639 678619 450538 169605 397479 15206 82579 186829 LPG Time1 599250 73400 20 40 30 30 30 30 40 40 40 50 50 250 140 260 420 1940 15050 135920 35590 20 30 30 30 30 40 40 40 Sol1 3460 713 303 409 173 498 268 168 421 261 714 193 271 1555 1052 564 661 875 3613 4705 3264 13564 9770399 67565 37037805 26043695 30475098 14434998 33613 Timef 599250 522800 40 97700 30 60480 2790 30 170860 54940 42940 4240 210 463590 5460 7800 486120 496970 322340 439960 445890 150 306840 438010 136020 523460 482710 590740 103100 Solf 3460 375 302 246 173 230 102 168 200 202 318 93 232 327 388 328 265 563 1061 1888 1436 13563957 6786283 4505479 16960553 3973879 15204996 7276897 18682852 continued page B W W h Y C h e n A r t ﬁ c l I n t e l l g e n c e 1 7 0 2 0 0 6 1 8 7 2 3 1 2 2 3 Table 1 continued Problem ID ZenoTravelNumeric9 ZenoTravelNumeric10 ZenoTravelNumeric11 ZenoTravelNumeric12 ZenoTravelNumeric13 ZenoTravelNumeric14 ZenoTravelNumeric15 ZenoTravelNumeric16 ZenoTravelNumeric17 ZenoTravelNumeric18 ZenoTravelNumeric19 ZenoTravelNumeric20 ZenoTravelSim1 ZenoTravelSim2 ZenoTravelSim3 ZenoTravelSim4 ZenoTravelSim5 ZenoTravelSim6 ZenoTravelSim7 ZenoTravelSim8 ZenoTravelSim9 ZenoTravelSim10 ZenoTravelSim11 ZenoTravelSim12 ZenoTravelSim13 ZenoTravelSim14 ZenoTravelSim15 ZenoTravelSim16 ZenoTravelSim17 ZenoTravelSim18 MIPS Time 192 2141 252 306 413 6247 15890 31652 64438 1235434 135935 245335 80 78 1431 124 234 3301 213 1243 1376 1523 37341 3551 3603 1245184 233530 Sol 28047 79564 55480 41310 82230 233381 147618 143282 182558 70794 212997 89937 18001 64306 68309 93611 69013 48012 71616 84613 125624 143229 121919 117929 91331 109936 17584 SGPlantMIPS 20 Sol1 Time1 208061 70 100002 70 134844 250 656784 120 132594 140 230617 1200 152790 3090 129253 12920 213325 302440 161821 498710 328254 594600 602522 1054220 1 20 30 30 80 40 90 130 260 260 240 410 300 5790 29730 22870 772460 103426 18008 998 1052 1272 2686 826 1501 939 2005 2253 1768 2834 2510 1722 1898 2207 5330 34014 Timef 376820 532000 248740 240580 532050 224180 160850 227350 582570 498710 717330 1054220 10 174720 30340 78640 14210 8440 208670 475840 9880 313860 68030 523970 174150 52140 400300 284310 874770 103426 Solf 47878 403418 166949 217936 204353 147478 682649 803136 204608 161821 205481 602522 173 592 280 622 400 323 692 549 556 643 430 643 643 883 989 1476 4801 34014 LPG Time1 70 100 330 110 140 1250 5110 9720 27490 54010 70660 214660 20 40 40 50 50 50 80 160 270 150 200 380 1590 3280 11680 29170 126230 198170 Sol1 14469096 146918594 137610 72017117 91871719 273628688 216508531 146591344 250293875 148765719 185678062 612788875 180 643 649 882 656 935 1482 1173 2486 882 1039 1442 5565 1535 2108 3067 3874 5693 Timef 324990 293390 232520 175780 569060 256040 554260 164940 78670 485910 107460 434000 260 9970 180 98140 610 144160 71550 541200 77490 548370 130330 133280 110650 511800 390190 679820 253060 675610 Solf 4743602 40337891 13389096 20665695 23555893 136158406 79056133 67332422 18690775 8315925 168739938 410776656 173 592 280 522 400 323 679 529 536 490 423 576 636 756 1042 1233 3843 4544 continued page 2 2 4 B W W h Y C h e n A r t ﬁ c l I n t e l l g e n c e 1 7 0 2 0 0 6 1 8 7 2 3 1 Table 1 continued Problem ID ZenoTravelSim19 ZenoTravelSim20 ZenoTravelTime1 ZenoTravelTime2 ZenoTravelTimeS ZenoTravelTime4 ZenoTravelTimeS ZenoTravelTime6 ZenoTravelTime7 ZenoTravelTime8 ZenoTravelTime9 ZenoTravelTime10 ZenoTravelTime11 ZenoTravelTime12 ZenoTravelTime13 ZenoTravelTime14 MIPS Time 50 50 78 82 99 93 112 201 223 221 276 353 455 7823 Sol 27257 302104 181527 153294 377473 517826 142179 160639 11982 18168 155308 126007 9028 375056 SGPlantMIPS 20 Time1 Sol1 10 20 30 40 30 40 40 110 90 90 110 130 110 1880 27256 304096 324213 23033 21864 65982 114203 237676 113862 24451 171481 218589 128758 739127 Timef 10 20 21030 21090 40 8080 159410 441350 264220 490090 69320 545780 245110 412240 Solf 27256 304096 1756 743 18271 405 86695 132738 54887 126756 111517 75895 569374 39488 LPG Time1 270380 20 20 20 30 30 40 30 50 80 70 90 80 110 1290 Sol1 4055 27256 3051 25080 162096 24291 8084 17896 167735 126458 426288 172094 189528 153593 588987 Timef 270380 20 20 9780 2640 60 174070 157260 16180 455660 510560 445880 182900 81300 112650 Solf 4055 27256 3051 17443 75 19071 41173 85295 125317 58089 121712 10687 84895 56994 342651 B W W h Y C h e n A r t ﬁ c l I n t e l l g e n c e 1 7 0 2 0 0 6 1 8 7 2 3 1 2 2 5 226 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 backtracking resolving global constraints developed new nec essary conditions stronger local constraints limiting search space backtracked subproblem The results presented generalized solve nonlinear constrained optimization problems engineering applications 49 Our new theory allow nonlinear problems continuous discrete mixed spaces solved uniﬁed efﬁcient fashion Acknowledgements The authors like thank reviewers provided comprehensive detailed comments help improve paper Appendix A Proof Theorem 1 The proof consists parts Given x need prove exist ﬁnite α α cid2 0 β β cid2 0 satisfy 13 The ﬁrst inequality 13 true α β x CLMc implies hx 0 max0 gx 0 To prove second inequality 13 prove x Ncx exist ﬁnite α cid2 0 β cid2 0 inequality satisﬁed α α β β Let x x ε cid12p cid9 cid12pcid9 1 unit directional vector ε inﬁnitely small positive scalar We consider following cases 1 If constraints inactive inequality constraints x Ncx feasible point Hence 13 implies f x cid2 f x regardless choice penal ties β Lcx α A1 2 If exists equality constraint function hk discontinuous cid12p α β f x cid2 f x Lcx small ε exists ﬁnite positive ξ cid7 cid7 cid7hkx cid7 ξ 0 hkx A2 The true hkx continuous cid12p A2 false If set α k α k 1 ε small A2 Lcx α β f x mcid11 α cid7 cid7 cid7 cid7hix cid7 cid7 cid7 f x cid7hkx β α i1 cid2 f x α k Lcx f x rcid11 cid2 cid1 0 gj x β j max j 1 εxf x T cid12p oε2 α k ξ A3 3 If exists active inequality constraint function gk discontinuous cid12p small ε exists ﬁnite positive ξ max0 gkx ξ 0 If set β 1 ε small condition implies k β k BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 227 Lcx α β f x cid2 cid1 0 gj x β j max rcid11 mcid11 α cid7 cid7 cid7 cid7hix i1 j 1 cid2 cid1 0 gkx k max T cid12p oε2 β εxf x Lcx α β cid2 f x β f x f x k ξ A4 4 Other inactive inequality constraints equality active inequal ity constraint functions continuous cid12p according constraint qualiﬁcation condition exist equality active inequality constraint function nonzero subdifferential cid12p Suppose exists equality straint function hk nonzero subdifferential cid12p case active inequality constraint function similar means Dxhkx cid12p 0 If set α k x f xT cid12p Dx hkx cid12p ε small rcid11 mcid11 cid2 cid1 0 gj x β j max Lcx α β j 1 f x α cid7 cid7 cid7 cid7hix i1 cid7 cid7 cid7 cid7hkx cid2 f x α k cid2 f x εxf x cid7 cid1 cid7Dx cid2 f x ε α k Lcx α f x β T cid12p oε2 α k ε cid7 cid2cid7 cid1 cid7xf x cid7 cid12p hkx cid7 cid7Dxhkx cid7 cid2 cid7 T cid12p cid7 cid7 cid12p oε2 A5 The second inequality 13 proved combining cases 1 4 Assuming 13 satisﬁed need prove x CLMc Point x feasible ﬁrst inequality 13 satisﬁed hx 0 gx cid1 0 Since hx 0 max0 gx 0 second inequality 13 ensures x local minimum compared feasible points Ncx Therefore x CLMc Appendix B Proof Theorem 2 An earlier proof 5155 rewritten terms penalty formulation It consists parts Given y need prove exist ﬁnite α α cid2 0 β β cid2 0 satisfy 16 In order α β exist CLMd y α β bounded ﬁnite time Given y consider y Nd y let initial α β 0 For y hy 0 respectively max0 gy 0 constraint satisﬁed For constraint update penalty follows cid14 cid12 α max α f y f y hiy cid7 cid7 cid7hiy cid7 0 B1 228 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 cid14 β j max j β cid12 f y f y max0 gj y cid1 cid2 0 gj y 0 max B2 This update repeated violated constraint Pd y Nd y update possible The key proof Nd y ﬁnite number elements discrete space update terminate ﬁnite time result ﬁnite α β values Next prove y α β satisﬁes 16 The proof ﬁrst equality 16 trivial Ld y α β f y Ld y α β For second inequality 16 y CLMd clear y Nd y hy 0 gy cid1 0 β α Ld y f y B3 For y Nd y hy cid13 0 respectively gy cid1 0 exist constraint satisﬁed From B1 B2 know constraint cid1 f y Ld y α β α α Ld y β j β j f y cid2 f y f y hiy α β cid2 f y f y max0 gj y f y α cid1 cid2 0 gj y max cid13 k1kcid13i α 0 β m k Ld y Further clear f y α cid7 cid7 cid7 cid7hiy cid7 cid7 cid7hiy cid7 0 B4 f y β cid2 cid1 0 gj y j max hky cid2 0 respectively cid13 r k1kcid13j β B5 k max0 gj y cid2 0 Ld y α β f y cid1 f y cid7 cid7 cid7 cid7hiy α mcid11 i1 rcid11 j 1 cid2 cid1 0 gj y β max Ld y α β Hence y α β satisﬁes 16 Assuming 16 satisﬁed need prove y CLMd The proof straightforward similar Theorem 1 Appendix C Proof Theorem 3 The proof consists parts Given x y need prove exist ﬁnite α cid2 0 β cid2 0 x y α β satisﬁes 20 The ﬁrst inequality 20 true α β x y CLMm hx y max0 gx y 0 To prove second inequality 20 know ﬁxing y y converts Pm Pc Further Theorem 1 exist ﬁnite α c β c BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 229 Lmx y α x Ncx β y α cid1 Lmx y α c α β cid2 0 β β c cid2 0 Lmx d β α y y Nd y C1 Similarly ﬁxing x x converts Pm Pd Hence Theorem 2 know exist ﬁnite α d α β C1 β x α β y α cid2 0 β Since x y Nmx y perturb x y setting d1 d1 maxα maxβ cid1 maxα cid1 maxβ cid1 Lmx α d cm α dm cr β dr cid2 T cid2 T d d C3 C4 c α c β maxα maxβ β d c1 c1 cid2 0 C2 α β α β conclude based C1 C2 second inequality 20 satisﬁed x y Nmx y α α cid2 0 β β cid2 0 Assuming 20 satisﬁed need prove x y CLMm The proof straightforward similar Theorem 1 Appendix D Proof Theorem 5 We prove theorem showing equivalence 25 combined 26 27 Given z satisﬁes 25 satisﬁes 26 27 p z point Npz second Since t 0 N z N t inequality 26 implied second inequality 25 The ﬁrst inequality 26 inequality 27 obvious constraints satisﬁed z We prove contradiction Assuming z satisﬁes 26 27 25 ﬁrst inequality 25 violated ﬁrst inequality 26 inequality 27 imply local global constraints satisﬁed Therefore second inequality 25 satisﬁed z That exist z Npz unique t cid8 z N t cid8 z according deﬁnition Npz 23 b cid2 Lmz α γ η β α Lmz D1 This implies second inequality 26 satisﬁed t t cid8 contradicts assumption z satisﬁes 26 27 Our argument proves z satisﬁes 26 27 satisfy 25 β η γ References 1 E Aarts J Korst Simulated Annealing Boltzmann Machines J Wiley Sons New York 1989 2 M Avriel Nonlinear Programming Analysis Methods PrenticeHall Englewood Cliffs NJ 1976 3 R Bellman S Dreyfus Applied Dynamic Programming Princeton Univ Press Princeton NJ 1962 230 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 4 DP Bertsekas Nonlinear Programming Athena Scientiﬁc Belmont MA 1999 5 AL Blum ML Furst Fast planning planning graph analysis Artiﬁcial Intelligence 90 1997 281300 6 B Bonet H Geffner Planning heuristic search Artiﬁcial Intelligence 129 1 2001 7 YX Chen CW Hsu BW Wah SGPlan Subgoal partitioning resolution planning Proc Fourth Internat Planning Competition Internat Conf Automated Planning Scheduling 2004 8 YX Chen BW Wah Automated planning scheduling calculus variations discrete space Proc Internat Conf Automated Planning Scheduling 2003 pp 211 9 S Chien et al ASPENAutomating space mission operations automated planning scheduling Proc SpaceOps Space Operations Organization 2000 10 P Doherty J Kvarnstrom TALplanner An empirical investigation temporal logicbased forward chain ing planner Proc Sixth Internat Workshop Temporal Logicbased Forward Chaining Planner AIPS 1999 pp 4754 11 MA Duran IE Grossmann An outer approximation algorithm class mixedinteger nonlinear programs Math Programming 36 1986 306307 12 S Edelkamp Mixed propositional numerical planning model checking integrated planning sys tem Proc Workshop Planning Temporal Domains AIPS 2002 pp 4755 13 MP Fourman Propositional planning Proc Workshop Model Theoretic Approaches Planning AIPS 2000 14 M Fox D Long PDDL21 An extension PDDL expressing temporal planning domains J Artiﬁcial Intelligence Res 20 2003 61124 15 AM Geoffrion Generalized Benders decomposition J Optim Theory Appl 10 4 1972 237241 16 A Gerevini I Serina LPG A planner based local search planning graphs action costs Proc Sixth Internat Conf AI Planning Scheduling Morgan Kaufman Santa Mateo CA 2002 pp 1222 17 NIM Gould D Orban PhL Toint An interiorpoint L1penalty method nonlinear optimization Tech nical Report RALTR2003022 Rutherford Appleton Laboratory Chilton Oxfordshire UK 2003 18 J Hoffmann B Nebel The FF planning Fast plan generation heuristic search J Artiﬁcial Intelligence Res 14 2001 253302 19 K Holmberg On convergence cross decomposition Math Programming 47 1990 269316 20 K Holmberg Generalized cross decomposition applied nonlinear integer programming problems duality gaps convexiﬁcation parts Optimization 23 1992 341364 21 AK Jónsson PH Morris N Muscettola K Rajan Planning interplanetary space Theory practice Proc 2nd Internat NASA Workshop Planning Scheduling Space NASA 2000 22 H Kautz B Selman Pushing envelope planning propositional logic stochastic search Proc 13th National Conference Artiﬁcial Intelligence AAAI 1996 pp 11941201 23 H Kautz B Selman Unifying SATbased graphbased planning Proc Internat Joint Conf Artiﬁcial Intelligence IJCAI 1999 24 H Kautz JP Walser Integer optimization models AI planning problems Knowledge Engrg Rev 15 1 2000 101117 25 S Kirkpatrick CD Gelatt Jr MP Vecchi Optimization simulated annealing Science 220 4598 1983 671680 26 HW Kuhn AW Tucker Nonlinear programming Proc Second Berkeley Symp Math Stat Prob University California Press 1951 pp 481492 27 F Lin A planner called R AI Magazine 2001 7376 28 D Long M Fox Efﬁcient implementation plan graph STAN J Artiﬁcial Intelligence Res 10 1999 87115 29 DG Luenberger Linear Nonlinear Programming AddisonWesley Reading MA 1984 30 D Nau H MuozAvila Y Cao A Lotem S Mitchell Totalorder planning partially ordered subtasks Proc Internat Joint Conf Artiﬁcial Intelligence IJCAI 2001 pp 425430 31 RS Nigenda X Nguyen S Kambhampati AltAlt Combining advantages Graphplan heuristic state search Technical Report Arizona State University 2000 32 J Penberethy D Weld UCPOP A sound complete partial order planner ADL Proc 3rd Internat Conf Principles Knowledge Representation Reasoning KR Inc 1992 pp 103114 BW Wah Y Chen Artiﬁcial Intelligence 170 2006 187231 231 33 J Penberethy D Weld Temporal planning continuous change Proc 12th National Conf AI AAAI 1994 pp 10101015 34 G Rabideau S Chien C Eggemeyer T Mann J Willis S Siewert P Stone Interactive repairbased planning scheduling shuttle payload operations Proc Aerospace Conf IEEE 1997 pp 325 341 35 G Rabideau R Knight S Chien A Fukunaga A Govindjee Iterative repair planning spacecraft op erations ASPEN Proc Internat Symp Artiﬁcial Intelligence Robotics Automation Space European Space Agency 1999 36 RL Rardin Optimization Operations Research PrenticeHall Englewood Cliffs NJ 1998 37 I Refanidis I Vlahavas The GRT planner AI Magazine 2001 6366 38 I Refanidis I Vlahavas The MOGRT Heuristic planning multiple criteria Proc Workshop Planning Scheduling Multiple Criteria AIPS 2002 39 TJ Van Roy Cross decomposition mixed integer programming Math Programming 25 1983 4663 40 HS Ryoo NV Sahinidis A branchandreduce approach global optimization J Global Optim 8 2 1996 107139 41 NV Sahinidis BARON A general purpose global optimization software package J Global Optim 8 2 1996 201205 42 D Schuurmans F Southey Local search characteristics incomplete sat procedures Artiﬁcial Intelli gence 132 2 2001 121150 43 B Selman HA Kautz An empirical study greedy local search satisﬁability testing Proc 11th National Conf Artiﬁcial Intelligence AAAI 1993 pp 4651 44 Y Shang BW Wah A discrete Lagrangian based global search method solving satisﬁability problems J Global Optim 12 1 1998 6199 45 MBD Subbarao S Kambhampati Sapa A domainindependent heuristic metric temporal planner Tech nical Report Arizona State University 2002 46 A Tate B Drabble R Kirby OPlan2 open architecture command planning control Intel ligent Scheduling Morgan Kaufmann 1994 pp 213239 47 BW Wah YX Chen Partitioning temporal planning problems mixed space theory ex tended saddle points Proc IEEE Internat Conf Tools Artiﬁcial Intelligence 2003 pp 266273 48 BW Wah YX Chen Subgoal partitioning global search solving temporal planning problems mixed space Internat J Artiﬁcial Intelligence Tools 13 4 2004 767790 49 BW Wah YX Chen Solving largescale nonlinear programming problems constraint partitioning Proc Principles Practice Constraint Programming SpringerVerlag Berlin 2005 50 BW Wah T Wang Simulated annealing asymptotic convergence nonlinear constrained global optimization Proc Principles Practice Constraint Programming SpringerVerlag Berlin 1999 pp 461475 51 BW Wah Z Wu The theory discrete Lagrange multipliers nonlinear discrete optimization Proc Principles Practice Constraint Programming SpringerVerlag Berlin 1999 pp 2842 52 D Wilkins Can AI planners solve practical problems Computational Intelligence 1990 232246 53 J Willis G Rabideau C Wilklow The citizen explorer scheduling Proc Aerospace Conf IEEE 1999 54 S Wolfman D Weld Combining linear programming satisﬁability solving resource planning Knowledge Engrg Rev 15 1 2000 55 Z Wu The theory applications nonlinear constrained optimization Lagrange multipliers PhD Thesis Department Computer Science Univ Illinois Urbana IL 2001