Artiﬁcial Intelligence 134 2002 922 Disjoint pattern database heuristics Richard E Korf Ariel Felner b Computer Science Department University California Los Angeles Los Angeles CA 90095 USA b Department Mathematics Computer Science BarIlan University RamatGan 52900 Israel Abstract We new technique designing accurate admissible heuristic evaluation functions based pattern databases J Culberson J Schaeffer Comput Intelligence 14 3 1998 318334 While heuristics Manhattan distance compute cost solving individual subgoals independently pattern databases consider cost solving multiple subgoals simultaneously Existing work pattern databases allows combining values different pattern databases taking maximum If subgoals divided disjoint subsets operator affects subgoals subset add patterndatabase values subset resulting accurate admissible heuristic function We technique improve performance Fifteen Puzzle factor 2000 ﬁnd optimal solutions 50 random instances TwentyFour Puzzle 2002 Elsevier Science BV All rights reserved Keywords Problem solving Singleagent search Heuristic search Heuristic evaluation functions Pattern databases Slidingtile puzzles Fifteen Puzzle TwentyFour Puzzle Rubiks Cube 1 Introduction overview The slidingtile puzzles classic challenge search algorithms AI The key ﬁnding optimal solutions problems accurate admissible heuristic function We generalization Manhattan distance heuristic considers interactions multiple tiles allowing moves different groups tiles added violating admissibility This results accurate admissible heuristic Corresponding author Email addresses korfcsuclaedu RE Korf felnermacsbiuacil A Felner 0004370202 matter 2002 Elsevier Science BV All rights reserved PII S 0 0 0 4 3 7 0 2 0 1 0 0 0 9 2 3 10 RE Korf A Felner Artiﬁcial Intelligence 134 2002 922 Fig 1 The Fifteen TwentyFour Puzzles goal states 11 Slidingtile puzzles The 4 4 Fifteen 5 5 TwentyFour Puzzles shown Fig 1 A square frame ﬁlled tiles blank position Any tile horizontally vertically adjacent blank slid position The task rearrange tiles given initial conﬁguration particular goal conﬁguration ideally optimally minimum number moves The state space Fifteen Puzzle space contains 1013 states TwentyFour Puzzle contains 1025 states The Fifteen Puzzle invented Sam Loyd 1870s 13 appeared scientiﬁc literature shortly 7 The editor journal added following comment paper The 15 puzzle weeks prominently American public safely said engaged attention persons sexes ages conditions community The reason Fifteen Puzzle craze Loyd offered 1000 cash prize transform particular initial state particular goal state Johnson Story proved wasnt possible state space divided odd permutations way transform legal moves 12 Search algorithms The 3 3 Eight puzzle 181440 reachable states solved optimally bruteforce breadthﬁrst search fraction second To address Fifteen Puzzle requires heuristic search algorithm A 6 A bestﬁrst search cost node n computed f n gn hn gn length path start node n hn heuristic estimate length shortest path node n goal If hn admissible overes timates distance goal A guaranteed ﬁnd shortest solution exists The classic heuristic function slidingtile puzzles Manhattan distance For tile count number grid units current goal locations sum values tiles Manhattan distance lower bound actual solution length tile Manhattan distance moves tile square Unfortunately A solve random instances Fifteen Puzzle stores node generated exhausts available memory minutes problems IterativeDeepeningA IDA 8 linearspace version A It performs series depthﬁrst searches pruning path cost f n gn hn node n RE Korf A Felner Artiﬁcial Intelligence 134 2002 922 11 path exceeds threshold iteration The threshold initially set heuristic estimate initial state increases iteration lowest cost nodes pruned iteration goal node expanded IDA guarantees optimal solution heuristic function admissible Unlike A IDA requires memory linear maximum search depth IDA Manhattan distance heuristic ﬁrst algorithm ﬁnd optimal solutions random instances Fifteen Puzzle 8 An average 400 million nodes generated problem instance requiring ﬁve hours DEC 2060 1984 13 Overview On larger problems IDA Manhattan distance takes long accurate heuristic functions needed While Manhattan distance sums cost solving tile independently consider costs solving tiles simultaneously taking account interactions Our main contribution heuristic values different groups tiles added taking maximum We ﬁrst present existing heuristics including nonadditive pattern databases example Rubiks Cube Next disjoint pattern databases showing precomputed combined admissible heuristic We present exper imental results Fifteen TwentyFour puzzles ﬁnding optimal solutions Fifteen Puzzle 2000 times faster Manhattan distance ﬁnding optimal solu tions 50 random TwentyFour Puzzles Initial results work ﬁrst appeared 11 2 Existing heuristics 21 Manhattan distance Where Manhattan distance heuristic come In addition standard answer question present alternative suggests disjoint pattern database extension The standard explanation origin admissible heuristic functions represent cost exact solutions simpliﬁed versions original problem 15 For example slidingtile puzzle tile position x position y x y adjacent position y If ignore constraint simpliﬁed problem tile adjacent position multiple tiles occupy position In new problem tiles independent solve instance optimally moving tile shortest path goal position counting number moves The cost optimal solution simpliﬁed problem exactly Manhattan distance initial goal state Since removed constraint moves solution original problem solution simpliﬁed problem cost optimal solution simpliﬁed problem lower bound cost optimal solution original problem Thus heuristic derived way admissible Alternatively derive Manhattan distance observing slidingtile puzzle contains subproblems getting tile goal location This suggests considering cost solving subproblem independently assuming interactions 12 RE Korf A Felner Artiﬁcial Intelligence 134 2002 922 In words search minimum number moves needed tile goal location ignoring tiles Manhattan distance tile Since moves tile add individual distances admissible heuristic problem While ﬁrst derivation requires problem description terms constraints legal moves second requires recognizing single tile subproblem The key idea makes possible efﬁciently compute Manhattan distance assumption individual tiles interact The reason problem difﬁcult Manhattan distance lower bound actual solution cost tiles way By taking account interactions compute accurate admissible heuristic functions 22 Nonadditive pattern databases Pattern databases 1 originally applied Fifteen Puzzle way Fig 2 shows subset Fifteen Puzzle tiles called fringe tiles For given state minimum number moves needed fringe tiles goal positions including required moves tiles lower bound number moves needed solve entire puzzle This number depends current positions fringe tiles blank independent positions tiles Thus precompute values store memory look needed search Since seven fringe tiles blank sixteen different locations total number possible permutations fringe tiles blank 1616 8 518918400 For permutation store number moves needed fringe tiles blank goal locations takes byte Thus store pattern database table 495 megabytes memory We compute entire table single breadthﬁrst search backward goal state shown Fig 2 The unlabelled tiles equivalent state uniquely determined positions fringe tiles blank As conﬁguration tiles encountered ﬁrst time number moves reach stored corresponding entry table entries ﬁlled Note table computed given goal state cost amortized solution multiple problem instances goal state Once table stored use IDA search optimal solution particular problem instance As state generated positions fringe tiles blank Fig 2 The fringe pattern Fifteen Puzzle RE Korf A Felner Artiﬁcial Intelligence 134 2002 922 13 compute index pattern database corresponding entry number moves needed solve fringe tiles blank heuristic value state Using pattern database Culberson Schaeffer reduced number nodes generated solve random Fifteen Puzzles factor 346 reduced running time factor compared Manhattan distance 1 Combining pattern database taking maximum database values overall heuristic value reduced nodes generated thousand running time factor 221 Rubiks Cube Nonadditive pattern databases ﬁnd ﬁrst optimal solutions Rubiks Cube 10 Fig 3 Rubiks Cube invented 1974 Erno Rubik Hungary like Fifteen Puzzle years earlier worldwide sensation More 100 million Rubiks Cubes sold making bestknown combinatorial puzzle time Each 3 3 plane cube rotated independently task rearrange individual pieces shows color The 3 3 3 Rubiks Cube contains 43252 1019 different reachable states There 20 movable subcubes cubies divided corner cubies faces edge cubies faces There 88179840 different positions orientations corner cubies number moves needed solve corner cubies ranges zero At bits entry pattern database corner cubies stored 42 megabytes memory Six edge cubies generate 42577920 different possibilities corresponding pattern database occupies 20 megabytes memory The remaining edge cubies generate database size Given state IDA search use conﬁguration corner cubies compute index cornercubie pattern database value tells number moves needed solve corner cubies We use sets edge cubies compute indices corresponding edgecubie databases yielding number moves needed solve set edge cubies Given different heuristic values best way combine overestimating actual solution cost maximum cubie belongs database The reason twist cube moves edge cubies corner cubies moves contribute solution cubies pattern database Fig 3 3 3 3 Rubiks Cube 14 RE Korf A Felner Artiﬁcial Intelligence 134 2002 922 contribute solution IDA maximum pattern database heuristic values described ﬁnd optimal solutions random instances Rubiks Cube 10 The median optimal solution length 18 moves One problem instance generated trillion nodes required couple weeks run With improvements Herbert Kociemba Michael Reid larger pattern databases faster computers states solved optimally hour 222 Limitations nonadditive pattern databases The main limitation nonadditive pattern databases solve larger problems For example TwentyFour puzzle contains 25 different positions pattern database covering n tiles blank requires 2525 n 1 entries A database tiles blank require 24 billion entries Furthermore values database tiles smaller Manhattan distance tiles With multiple databases best way combine admissibly maximum values sets tiles disjoint The reason nonadditive pattern database values include moves needed solve pattern tiles including moves tiles Instead taking maximum different pattern database values like able sum values accurate heuristic violating admissibility This main idea disjoint pattern databases 3 Disjoint pattern databases To construct disjoint pattern database slidingtile puzzles partition tiles disjoint groups tile belongs group We precompute tables minimum number moves tiles group required tiles goal positions We set tables group tiles disjoint pattern database disjoint database short Then given particular state search group tiles use positions tiles compute index corresponding table retrieve number moves required solve tiles group add values group compute overall heuristic given state This value large Manhattan distance usually larger accounts interactions tiles group The key difference disjoint databases nonadditive databases described nonadditive databases include moves required solve pattern tiles including moves tiles pattern set As result given databases overlap tiles maximum values admissible heuristic moves counted database tiles database moves counted twice In disjoint database count moves tiles group While idea simple eluded groups researchers worked problem 19 A second difference types databases disjoint databases dont consider blank position decreasing size A disjoint database contains minimum number moves needed solve group tiles possible blank positions RE Korf A Felner Artiﬁcial Intelligence 134 2002 922 15 Fig 4 Disjoint database Fifteen Puzzle reﬂection Manhattan distance trivial example disjoint database group contains single tile While Manhattan distance initially discovered hand discovered automatically follows For tile position perform search reaches goal location tiles indistinguishable A state search uniquely determined position tile question position blank moves tile counted Since operators slidingtile puzzle invertible perform single search tile starting goal position record moves tile required position Doing tiles results set tables possible position tile Manhattan distance goal position Since counted moves tile moves single tile sum Manhattan distances admissible heuristic Two nontrivial examples disjoint databases Fifteen Puzzle shown Fig 4 divided tiles group seven group The seven tile database contains 57657600 entries range 0 33 moves The eighttile database contains 518918400 entries range 0 38 moves In case blank position index database As general rule partitioning tiles want group tiles near goal state tiles interact 4 Experimental results 41 Fifteen Puzzle We optimal solutions 1000 random Fifteen Puzzle problem instances IDA variety heuristics The average optimal solution length instances 52522 moves average number optimal solutions 159 Table 1 shows results The ﬁrst data column shows average value heuristic function 1000 initial states The second column gives average number nodes generated problem instance ﬁnd ﬁrst optimal solution The column displays average speed algorithm nodes second 440 MegaHertz Sun Ultra10 workstation The fourth column indicates average running time seconds ﬁnd ﬁrst optimal solution The column gives average number nodes generated ﬁnd optimal solutions problem instance The ﬁrst row gives results Manhattan distance heuristic The second row Manhattan distance enhanced linear conﬂicts Historically linearconﬂict heuristic ﬁrst signiﬁcant improvement Manhattan distance 5 It applies tiles goal row column reversed relative For example assume row given state contains tiles 2 1 order goal state appear 16 RE Korf A Felner Artiﬁcial Intelligence 134 2002 922 Table 1 Experimental results Fifteen Puzzle Heuristic function Value Nodes Nodessec Seconds All solutions Manhattan distance 36940 401189630 7269026 55192 1178106819 Linear conﬂicts Disjoint database Disjoint reﬂected 38788 44752 45630 40224625 4142193 136289 2174362 36710 1377630 9710 0063 0027 144965491 472595 130367 order 1 2 To reverse tiles row allow tile pass row Since moves counted Manhattan distance tile moves added sum Manhattan distances tiles violating admissibility The idea applied tiles goal column In fact tile goal position participate row column conﬂict simultaneously Since extra moves required resolve row conﬂict vertical moves required resolve column conﬂict horizontal moves sets moves added Manhattan distance violating admissibility The linearconﬂict heuristic reduces number nodes generated order magnitude cost factor speed overall speedup factor ﬁve compared Manhattan distance The rows disjoint pattern database heuristics The row represents heuristic sum seven eighttile database values depicted left Fig 4 We byte entry efﬁciency occupying total 550 megabytes databases compressed For example store additional moves exceeding Manhattan distances pattern tiles separately compute Manhattan distances search Furthermore parity additional moves Manhattan distance store half number additional moves multiply The fourth row represents heuristic computed starting heuristic row We compute sum seven eighttile database values shown right Fig 4 Finally overall heuristic maximum sums Since different partitions reﬂections use pair tables databases simply reﬂect tiles positions main diagonal obtain reﬂected values This heuristic reduces number node generations orders magnitude running time factor thousand compared Manhattan distance This comes cost 550 megabytes memory By contrast best non additive pattern database heuristic Culberson Schaeffer 1 similar memory generated times nodes best disjoint database ran times faster simple Manhattan distance 42 TwentyFour Puzzle Finding optimal solutions TwentyFour Puzzle practical powerful heuristics We optimally solved ﬁfty random problem instances IDA RE Korf A Felner Artiﬁcial Intelligence 134 2002 922 17 Fig 5 Disjoint databases TwentyFour Puzzle disjoint pattern database heuristic reﬂection main diagonal shown Fig 5 Each group consists tiles requiring 127512000 entries For given state value database sum number moves needed solve groups tiles state The overall heuristic maximum values original reﬂected databases Since differentshaped groups 2 3 block tiles irregular block surrounding blank store different tables remaining values obtained mapping tiles positions tables The heuristic values 2 3 group range 0 35 moves irregular group range 0 34 moves At byte entry total memory tables 243 megabytes tables compressed Table 2 shows initial state length optimal solution number nodes generated IDA ﬁnd ﬁrst solution problem instance The initial state represented listing tiles left right zero representing blank In notation tiles goal state Fig 1 listed numerical order The average optimal solution length 50 problems 10078 moves The average number nodes generated 360892479671 The program written C generates 2110000 nodes second 440 MegaHertz Sun Ultra10 workstation The running times individual problems range 18 seconds 23 days average days problem Using analytic results developed 12 predict solving TwentyFour Puzzle Manhattan distance average 50000 years problem The average Manhattan distance random sample 10000 initial states 76078 moves disjoint database heuristic 81607 moves 421 Comparison previous results Previously program ﬁnd optimal solutions TwentyFour Puzzle solved ﬁrst problems Table 2 9 differed important respects First heuristic 9 complex Secondly 9 technique based ﬁnitestate machines FSMs prune duplicate nodes representing state arrived different paths graph 16 FSM pruning reduced number nodes generated IDA ﬁve problems factor ranged 24 36 For work use FSM pruning technique complex results depend particular FSM making difﬁcult researchers reproduce results Thus solved 50 problems duplicate pruning eliminating parent node children Table 3 shows comparative results ﬁve easiest problems solved 9 solved heuristic 9 duplicate pruning The ﬁrst 18 RE Korf A Felner Artiﬁcial Intelligence 134 2002 922 Table 2 TwentyFour Puzzle data No Initial state Length Nodes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 14 5 9 2 18 8 23 19 12 17 15 0 10 20 4 6 11 21 1 7 24 3 16 22 13 16 5 1 12 6 24 17 9 2 22 4 10 13 18 19 20 0 23 7 21 15 11 8 3 14 6 0 24 14 8 5 21 19 9 17 16 20 10 13 2 15 11 22 1 3 7 23 4 18 12 18 14 0 9 8 3 7 19 2 15 5 12 1 13 24 23 4 21 10 20 16 22 11 6 17 17 1 20 9 16 2 22 19 14 5 15 21 0 3 24 23 18 13 12 7 10 8 6 4 11 2 0 10 19 1 4 16 3 15 20 22 9 6 18 5 13 12 21 8 17 23 11 24 7 14 21 22 15 9 24 12 16 23 2 8 5 18 17 7 10 14 13 4 0 6 20 11 3 1 19 7 13 11 22 12 20 1 18 21 5 0 8 14 24 19 9 4 17 16 10 23 15 3 2 6 3 2 17 0 14 18 22 19 15 20 9 7 10 21 16 6 24 23 8 5 1 4 11 12 13 23 14 0 24 17 9 20 21 2 18 10 13 22 1 3 11 4 16 6 5 7 12 8 15 19 15 11 8 18 14 3 19 16 20 5 24 2 17 4 22 10 1 13 9 21 23 7 6 12 0 12 23 9 18 24 22 4 0 16 13 20 3 15 6 17 8 7 11 19 1 10 2 14 5 21 21 24 8 1 19 22 12 9 7 18 4 0 23 14 10 6 3 11 16 5 15 2 20 13 17 24 1 17 10 15 14 3 13 8 0 22 16 20 7 21 4 12 9 2 11 5 23 6 18 19 24 10 15 9 16 6 3 22 17 13 19 23 21 11 18 0 1 2 7 8 20 5 12 4 14 18 24 17 11 12 10 19 15 6 1 5 21 22 9 7 3 2 16 14 4 20 23 0 8 13 23 16 13 24 5 18 22 11 17 0 6 9 20 7 3 2 10 14 12 21 1 19 15 8 4 0 12 24 10 13 5 2 4 19 21 23 18 8 17 9 22 16 11 6 15 7 3 14 1 20 16 13 6 23 9 8 3 5 24 15 22 12 21 17 1 19 10 7 11 4 18 2 14 20 0 4 5 1 23 21 13 2 10 18 17 15 7 0 9 3 14 11 12 19 8 6 20 24 22 16 24 8 14 5 16 4 13 6 22 19 1 10 9 12 3 0 18 21 20 23 15 17 11 7 2 7 6 3 22 15 19 21 2 13 0 8 10 9 4 18 16 11 24 5 12 17 1 23 14 20 24 11 18 7 3 17 5 1 23 15 21 8 2 4 19 14 0 16 22 6 9 13 20 12 10 14 24 18 12 22 15 5 1 23 11 6 19 10 13 7 0 3 9 4 17 2 21 16 20 8 3 17 9 8 24 1 11 12 14 0 5 4 22 13 16 21 15 6 7 10 20 23 2 18 19 22 21 15 3 14 13 9 19 24 23 16 0 7 10 18 4 11 20 8 2 1 6 5 17 12 9 19 8 20 2 3 14 1 24 6 13 18 7 10 17 5 22 12 21 16 15 0 23 11 4 17 15 7 12 8 3 4 9 21 5 16 6 19 20 1 22 24 18 11 14 23 10 2 13 0 10 3 6 13 1 2 20 14 18 11 15 7 5 12 9 24 17 22 4 8 21 23 19 16 0 8 19 7 16 12 2 13 22 14 9 11 5 6 3 18 24 0 15 10 23 1 20 4 17 21 19 20 12 21 7 0 16 10 5 9 14 23 3 11 4 2 6 1 8 15 17 13 22 24 18 1 12 18 13 17 15 3 7 20 0 19 24 6 5 21 11 2 8 9 16 22 10 4 23 14 95 96 97 98 100 101 104 108 113 114 106 109 101 111 103 96 109 110 106 92 103 95 104 107 81 105 99 98 88 92 99 97 2031102635 211884984525 21148144928 10991471966 2899007625 103460814368 106321592792 116202273788 1818005616606 1519052821943 1654042891186 624413663951 1959833487 1283051362385 173999717809 3803445934 367150048758 987725030433 218284544233 312016177684 724024589335 3592980531 171498441076 357290691483 292174444 12397787391 53444360033 2258006870 4787505637 1634941420 26200330686 428222507 11 22 6 21 8 13 20 23 0 2 15 7 12 18 16 3 1 17 5 4 9 14 24 10 19 106 1062250612558 RE Korf A Felner Artiﬁcial Intelligence 134 2002 922 19 Table 2 continued No 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 Initial state Length Nodes 5 18 3 21 22 17 13 24 0 7 15 14 11 2 9 10 1 8 6 16 19 4 20 23 12 102 481039271661 2 10 24 11 22 19 0 3 8 17 15 16 6 4 23 20 18 7 9 14 13 5 12 1 21 2 10 1 7 16 9 0 6 12 11 3 18 22 4 13 24 20 15 8 14 21 23 17 19 5 23 22 5 3 9 6 18 15 10 2 21 13 19 12 20 7 0 1 16 24 17 4 14 8 11 10 3 24 12 0 7 8 11 14 21 22 23 2 1 9 17 18 6 20 4 13 15 5 19 16 16 24 3 14 5 18 7 6 4 2 0 15 8 10 20 13 19 9 21 11 17 12 22 23 1 2 17 4 13 7 12 10 3 0 16 21 24 8 5 18 20 15 19 14 9 22 11 6 1 23 13 19 9 10 14 15 23 21 24 16 12 11 0 5 22 20 4 18 3 1 6 2 7 17 8 16 6 20 18 23 19 7 11 13 17 12 9 1 24 3 22 2 21 10 4 8 15 14 5 0 7 4 19 12 16 20 15 23 8 10 1 18 2 17 14 24 9 5 0 21 6 3 11 13 22 8 12 18 3 2 11 10 22 24 17 1 13 23 4 20 16 6 15 9 21 19 5 14 0 7 9 7 16 18 12 1 23 8 22 0 6 19 4 13 2 24 11 15 21 17 20 3 10 14 5 1 16 10 14 17 13 0 3 5 7 4 15 19 2 21 9 23 8 12 6 11 24 22 20 18 21 11 10 4 16 6 13 24 7 14 1 20 9 17 0 15 2 5 8 22 3 12 18 19 23 2 22 21 0 23 8 14 20 12 7 16 11 3 5 1 15 4 9 24 10 13 6 19 17 18 2 21 3 7 0 8 5 14 18 6 12 11 23 20 10 15 17 4 9 16 13 19 24 22 1 23 1 12 6 16 2 20 10 21 18 14 13 17 19 22 0 15 24 3 7 4 8 5 9 11 98 90 100 96 104 82 106 108 104 93 101 100 92 107 100 113 116131234743 2582008940 1496759944 38173507 161211472633 65099578 26998190480 245852754920 55147320204 867106238 79148491306 65675717510 30443173162 555085543507 108197305702 4156099168506 column gives corresponding problem number Table 2 second length optimal solution number node generations 9 FSM pruning fourth column number nodes generated heuristic FSM pruning ﬁfth column gives number nodes generated disjoint pattern database heuristic FSM pruning The program 9 generates 3207000 nodes second FSM pruning compared 2110000 nodes second disjoint database program machine Taking speed difference account column gives speedup factor program 9 FSM pruning ranges factor 12 factor 218 Since comparisons based easiest problems program 9 signiﬁcantly underestimate average speedup On hand program 9 uses little memory main reason runs faster better cache performance 5 Pairwise higherorder distances The main drawback disjoint database heuristics dont capture interactions tiles different groups partition This requires different approach developed independently Gasser 4 Korf Taylor 9 Consider table 20 RE Korf A Felner Artiﬁcial Intelligence 134 2002 922 Table 3 Comparison previous results No Length FSM pruning No FSM pruning Disjoint database Speedup 1 4 5 6 8 95 98 100 101 108 18771430922 67189320726 2031102635 21764 83573198724 234662490010 10991471966 14046 8110532608 19865967282 2899007625 221769436018 745218119072 103460814368 82203971683 211917514087 116202273788 4508 4739 1199 slidingtile puzzle contains pair tiles possible pair positions occupy number moves required tiles goal positions Gasser refers table 2tile pattern database values pairwise distances For pairs tiles positions pairwise distance equal sum Manhattan distances For tiles positions tiles linear conﬂict pairwise distance exceed sum Manhattan distances Given n tiles On4 entries complete 2tile database pairwise distances exceed sum Manhattan distances tiles need stored This table computed given goal state Given 2tile database state puzzle simply sum database values pair tiles compute heuristic tile participates pairs sum grossly overestimate optimal solution length Rather partition n tiles n2 nonoverlapping pairs sum pairwise distances chosen pairs To accurate admissible heuristic want partition maximizes sum pairwise distances For state search corresponding partition different requiring computation performed heuristic evaluation For given state deﬁne graph tile represented node edge pair nodes labelled pairwise distance corresponding tiles state The task choose set edges graph chosen edges incident node sum labels chosen edges maximized This called maximal weighted matching problem solved On3 time 15 n number nodes tiles case This technique obviously extended triples tiles generating 3tile database higherorder distances Unfortunately tiles corresponding dimensional matching problem NPComplete 3 higherorder matching For tile puzzles include tiles pairwise triple distances exceed sum Manhattan distances graph sparse corresponding matching problem solved relatively efﬁciently The main advantage approach potentially capture tile interactions compared disjoint database captures interactions tiles group Another advantage approach modest memory requirements The 2 3tile databases required megabytes memory compared 500 megabytes disjoint databases The disadvantage approach RE Korf A Felner Artiﬁcial Intelligence 134 2002 922 21 computing heuristic value given state requires solving matching problem expensive simply adding values group disjoint database Gasser implemented 2tile 3tile pattern database heuristics Fifteen Puzzle reported node expansions actual running times We performed similar experiments Fifteen TwentyFour Puzzles With 2 3tile databases took average ﬁve seconds solve random Fifteen Puzzle problem instance generated average 700000 nodes This compares 53 seconds Manhattan distance 27 milliseconds disjoint databases generated fewer nodes incurred overhead node For TwentyFour Puzzle 2 3tile databases usually generated fewer nodes disjoint database Again heuristic complex compute incurred larger constant time node actual running time greater disjoint databases Since disjoint database heuristics simpler perform better details experiments 2 3tile databases omitted 2 The performance difference disjoint databases 2 3tile databases greater Fifteen Puzzle TwentyFour Puzzle probably store half Fifteen Puzzle tiles single database quarter TwentyFour Puzzle tiles For problems disjoint database heuristics simpler effective larger versions problem domains 6 Summary conclusions work We optimal solutions ﬁfty random instances TwentyFour Puzzle problem 1025 states The branching factor problem 23676 12 optimal solutions average 100 moves We ﬁnd optimal solutions Fifteen Puzzle 27 milliseconds average This far best performance problems date To achieve implemented IDA new admissible heuristic functions based pattern databases 1 Rather computing costs solving individual subgoals independently pattern database heuristic considers costs solving subgoals simultaneously taking account interactions Culberson Schaeffer 1 combined heuristics different pattern databases taking maximum values This general approach maximum admissible heuristics admissible heuristic We introduced disjoint pattern databases permit values different databases added resulting accurate heuristic values A disjoint pattern database partitions set subgoals disjoint groups adds costs solving subgoals group This requires groups disjoint single operator affect subgoals single group For example slidingtile puzzle operator moves tile This efﬁcient taking maximum different values accurate admissible 22 RE Korf A Felner Artiﬁcial Intelligence 134 2002 922 Pattern database heuristics expensive evaluate search latency randomly accessing large database memory This overhead compensated decrease number nodes generated solve problem It remains seen general approach discovery implementation admissible heuristic functions The obvious step apply problems All combinatorial problems involve solving multiple subgoals This work suggests heuristics based simultaneous consideration multiple subgoals way values added create accurate admissible heuristic Acknowledgements This work supported NSF Grant IRI9619447 Thanks Eitan Yarden Moshe Malin work pairwise triple distances References 1 J Culberson J Schaeffer Pattern databases Computational Intelligence 14 3 1998 318334 2 A Felner Improving search techniques different environments PhD Thesis Dept Mathematics Computer Science BarIlan University RamatGan Israel 2001 Available httpwww csbiuacilfelner 3 MR Garey DS Johnson Computers Intractability A Guide Theory NPCompleteness WH Freeman San Francisco CA 1979 4 R Gasser Harnessing computational resources efﬁcient exhaustive search PhD Thesis Swiss Federal Institute Technology Zurich Switzerland 1995 5 O Hansson A Mayer M Yung Criticizing solutions relaxed models yields powerful admissible heuristics Information Sci 63 3 1992 207227 6 PE Hart NJ Nilsson B Raphael A formal basis heuristic determination minimum cost paths IEEE Trans Systems Science Cybernetics 4 2 1968 100107 7 WW Johnson WE Storey Notes 15 puzzle Amer J Math 2 1879 397404 8 RE Korf Depthﬁrst iterativedeepening An optimal admissible tree search Artiﬁcial Intelligence 27 1 1985 97109 9 RE Korf LA Taylor Finding optimal solutions twentyfour puzzle Proc AAAI96 Portland OR 1996 pp 12021207 10 RE Korf Finding optimal solutions Rubiks Cube pattern databases Proc AAAI97 Providence RI 1997 pp 700705 11 RE Korf Recent progress design analysis admissible heuristic functions Proc AAAI 2000 Austin TX 2000 pp 11651170 12 RE Korf M Reid S Edelkamp Time complexity iterative deepeningA Artiﬁcial Intelligence 129 2001 199218 13 S Loyd Mathematical Puzzles Sam Loyd selected edited Martin Gardner Dover New York 1959 14 CH Papadimitriou K Steiglitz Combinatorial Optimization Algorithms Complexity PrenticeHall Englewood Cliffs NJ 1982 15 J Pearl Heuristics AddisonWesley Reading MA 1984 16 L Taylor RE Korf Pruning duplicate nodes depthﬁrst search Proc AAAI93 Washington DC 1993 pp 756761