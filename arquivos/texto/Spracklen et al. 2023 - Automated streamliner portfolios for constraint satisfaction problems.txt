Artiﬁcial Intelligence 319 2023 103915 Contents lists available ScienceDirect Artiﬁcial Intelligence journal homepage wwwelseviercomlocateartint Automated streamliner portfolios constraint satisfaction problems Patrick Spracklen Nguyen Dang Özgür Akgün Ian Miguel School Computer Science University St Andrews St Andrews Fife KY16 9SX UK r t c l e n f o b s t r c t Article history Received 22 January 2022 Received revised form 20 March 2023 Accepted 24 March 2023 Available online 29 March 2023 Keywords Constraint programming Constraint modelling Constraint satisfaction problem Algorithm selection Constraint Programming CP powerful technique solving largescale combinatorial problems Solving problem proceeds distinct phases modelling solving Effec tive modelling huge impact performance solving process Even advance modern automated modelling tools search spaces involved vast problems diﬃcult solve To constrain model aggressive step taken addition streamliner constraints guaranteed sound designed focus effort highly restricted promising portion search space Previously producing effective streamlined models manual diﬃcult timeconsuming task This paper presents completely automated process gen eration search selection streamliner portfolios produce substantial reduction search effort diverse range problems The results demonstrate marked im provement performance Chuffed CP solver clause learning lingeling modern SAT solver 2023 The Authors Published Elsevier BV This open access article CC BY license httpcreativecommons org licenses 4 0 1 Introduction Challenging combinatorial problems domains planning scheduling packing conﬁguration form problem classes families problem instances related shared highlevel speciﬁcation common set free pa rameters Constraint Programming CP Propositional Satisﬁability solving SAT offer powerful complementary means solve problem classes For formalism model formulated describes problem class format suitable input intended solver Since search spaces involved vast model initially formulated problem class instances diﬃcult solver ﬁnd solution timely manner In response natural step constrain model order strengthen inferences solver detecting dead ends search earlier reducing overall search effort One approach add im plied constraints inferred initial model guaranteed sound Manual 12 automated 35 approaches generating implied constraints successful Other approaches include adding symmetrybreaking 69 dominancebreaking constraints 1012 rule members equivalence classes solutions preserving member class Corresponding author Email addresses jlpsstandrewsacuk P Spracklen nttdstandrewsacuk N Dang ozgurakgunstandrewsacuk Ö Akgün ijmstandrewsacuk I Miguel httpsdoiorg101016jartint2023103915 00043702 2023 The Authors Published Elsevier BV This open access article CC BY license http creativecommons org licenses 4 0 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 Fig 1 Essence speciﬁcation Car Sequencing Problem 14 shown NPcomplete 15 A number cars n_cars produced identical different classes n_classes available quantity variants basic model The assembly line different stations install options n_options air conditioning sun roof class cars requires certain options represented usage A maximum number cars maxcars requiring certain option sequenced consecutive subsequence block blksize station able cope If techniques inapplicable improve performance insuﬃciently satisﬁable problems aggressive step add streamliner constraints 13 guaranteed sound designed focus effort highly restricted promising portion search space Streamliners trade completeness failing ﬁnd solution offered implied symmetrybreaking dominancebreaking constraints potentially greater search reduction Previously producing effective streamlined models diﬃcult timeconsuming task It involved manually specting solutions small instances problem class question identify patterns use basis streamliners 131618 For example Gomes Sellmann 13 added streamliner requiring Latin Square structure searching diagonally ordered magic squares The principal contribution paper demonstrate powerful range streamliners generated applied automatically Our approach situated automated constraint modelling Conjure 1921 This takes input speciﬁcation abstract constraint speciﬁcation language Essence 2223 Fig 1 presents example speciﬁ cation asks sequence cars production line exceed capacity station line installs option sun roof Essence supports powerful set type constructors set multi set function relation Essence speciﬁcations concise highly structured Existing constraint solvers support abstract decision variables directly Therefore use Conjure reﬁne abstract constraint speciﬁcations concrete constraint models constrained collections primitive variables integer boolean represent abstract structure The constraint modelling assistant tool Savile Row 2425 producing solver dependent input Savile Row supports solving paradigms including CP SAT SMT satisﬁability modulo theories Our method exploits structure Essence speciﬁcation produce streamlined models automatically example imposing streamlining constraints function present speciﬁcation Fig 1 The modiﬁed speciﬁcation reﬁned automatically streamlined constraint model Conjure Identifying adding streamlining constraints level abstraction considerably easier working directly constraint model involve ﬁrst recognising example certain collection primitive variables constraints represent function potentially costly process Moreover recovering highlevel information lowlevel model expressed lower level constraint modelling language like OPL 26 MiniZinc 27 Essence Prime 28 brittle respect exact heuristics modelling reformulations inside Conjure Savile Row As automated symmetry breaking modelling 2920 automated streamlining motivates adoption higher level language Essence letting automated tools work best compilation happened general programming languages Our streamlining completely automates original manual process deﬁned Gomes Sellmann 13 As method require initial investment generating testing streamliners problem class hand effort repaid ways First assume context common automated algorithm selection 30 machine learning general expect solve large number instances problem class effort formulate best model amortised substantial solving effort Second successful streamlining result vast reduction search effort allowing solve harder instances practically feasible Our work signiﬁcantly expands previous work automated streamliner generation highlevel problem speciﬁcations 31 automatic selection streamlining constraints 32 2 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 Fig 2 Solving problem instance streamlined Essence speciﬁcation Conjure run streamlined model Savile Row selected solver run instance The streamliner provided input Conjure generated separate Conjure Phase 1 Candidate Streamliner Generation We demonstrate effectiveness approach CP SAT solving paradigms choosing representa tive solvers For CP use learning solver chuffed 33 SAT use lingeling 34 As presented Section 8 method produce substantial reduction search effort diverse range problems The automated streamlining Essence problem speciﬁcations data work computational evaluation available httpswwwgithub com stacs cp automated streamlinerportfolios 35 2 Architecture overview We begin overview architecture explaining components subsequent sections Given problem class streamlining approach proceeds main phases Firstly candidate streamliners generated Essence speciﬁcation Section 21 Secondly streamliners combined portfolio streamliner combinations complementary strengths Section 22 Finally given unseen instance problem class streamliner combinations selected portfolio scheduled use solving Section 23 21 Phase 1 candidate streamliner generation Given Essence speciﬁcation problem class candidate streamliners automatically derived set prebuilt rules encoded inside Conjure Those rules deﬁne patterns match types decision variables Essence speciﬁcation As example candidate streamliner Car Sequencing problem Fig 1 enforce approximatelyHalf range car function odd values reducing search space A description rules streamliner generation process presented Section 3 The performance streamlined model given problem instance evaluated procedure described Fig 2 22 Phase 2 portfolio construction The generated candidate streamliners combined form stronger streamliners 36 multiple streamliners added original problem speciﬁcation time form streamlined model This results potentially large number possible combined streamliners given problem class Each streamliners drastically reduce search space lead large speed solving time However contrast spacepruning techniques symmetrybreaking implied constraints expect streamliners universally applicable As illustrated Section 521 effectiveness streamliner vary widely instances problem class For example streamliner useful solving instances impair performance render unsatis ﬁable Therefore need effective mechanism search large space streamliner combinations identify effective sound ones 3 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 Given problem class aims constructing portfolio streamliners complementary strengths streamliner specialised region instance space highdimensional space deﬁned instance features 37 Our portfolio construction method consists stages Firstly set training instances repre sentative instance space given problem automatically built Section 5 Secondly Monte Carlo Tree Search method searching space candidate streamliner combinations Section 61 Section 62 Finally portfolio builder approach applied search process enhance complementary strength constructed portfolio Section 63 23 Phase 3 streamliner selection application Once streamliner portfolio constructed solving unseen instance problem class In Section 7 discuss methods select apply streamliner portfolio new problem instance We start simplest approaches streamliners selected based average performance training instance set We investigate learningbased approach 38 prediction model deciding best streamliner based features given instance Even training learningbased approach computationally expensive approach offers signiﬁcant improvement performance compared ones cases shown Section 8 3 From streamlining constraints streamlined speciﬁcations This section presents methods generate streamlined models automatically The process driven decision variables Essence speciﬁcation function Fig 1 The highly structured description problem Essence speciﬁcation provides better suited streamliner generation lower level representation constraint modelling languages like OPL MiniZinc Essence Prime This nested types like multiset sets represented constrained collection primitive variables obscuring structure useful drive streamliner generation For variable generates streamlining constraints capture possible regularities impose additional restrictions values variables domain Since domains Essence decision variables complex nested types restrictions farreaching consequences constraint models reﬁned modiﬁed speciﬁcation The intention search space reduced considerably retaining solution Candidate streamliners generated applying streamlining rules A streamlining rule takes input domain existing Essence term reference decision variable parts produces constraint posted term Abstract domains Essence arbitrarily nested streamlining rules advantage nested structure A rule deﬁned work domain D lifted work domain form set D abstract domain constructors mset function sequence relation partition tuple highorder rules We identify groups streamlining rules tag appropriately multiple streamlining constraints group combined For example rule enforces integer variable uses tag rule enforces integer odd This simple way identifying conﬂicting streamlining constraints allows streamliner selection search prune combinations wasting computational effort Section 61 31 Streamlining rules Domain attributes added Essence domains annotated restrict set acceptable values For example function variable domain restricted injective functions decision variable domain partition restricted regular partitions Hence simplest source streamliners systematic annotation decision variables input speciﬁcation This retains solutions original problem improving solver performance The existing Essence domain attributes limited value They strong restrictions remove solutions original problem added speciﬁcation In order generate large variety useful streamliners employ small set rules categorised classes 1 Firstorder rules add constraints reduce domain decision variable directly 2 Highorder rules rule argument lift operation decision variable nested domain complex set functions presented Fixed Length Error Correcting Codes Fig 5 This allows generation rule enforcing approximately half softness parameter functions set monotonically increasing Imposing extra structure manner reduce search considerably A selection ﬁrstorder rules given Fig 3 selection higherorder rules given Fig 4 These rules cover domain constructors Essence applied recursively nested domains Some rules approximately half softness argument control strict generated streamliner constraint going As convention smaller values softness parameters produce comparatively strict streamliners potentially 4 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 Fig 3 The ﬁrstorder streamlining rules For rule present rule rules input output tag The tags ﬁlter trivially contradicting streamliners streamliner selection We choose 1 streamliner tag causing greater reductions search larger values produce applicable streamliners The reduction power applicability criteria use searching effective streamliners Section 62 The ﬁrst set rules Fig 3 operate decision variable integer domain They work adding unary constraint limit values odd values values values lower half domain upper half original domain The ﬁve sets rules operate decision variables function domains Monotonically increasing decreasing enforce entries function monotonically increasing decreasing The smallest ﬁrst rule subset monotonically increasing enforces smallest value functions deﬁned set mapped smallest value range set similarly largest ﬁrst Commutative noncommutative associative rules enforce corresponding property function variable All streamlining rules work partial total functions The quasiregular rule takes softness parameter enforces partition decision variable regular A regular partition parts partition equal cardinality On binary relations Essence contains common binary relation properties listed ﬁgure These attributes simply turned adding domain declaration The set streamlining rules generate attributes decision variables binary relation domain The tags given Fig 3 ﬁlter trivially contradicting streamliner rules For example share tag generate commutative noncommutative streamliners simultaneously However generate commutative noncommutative associative 5 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 Fig 4 The higherorder streamlining rules These rules lift existing ﬁrstorder higherorder streamlining rules work nested domain constructors Essence They introduce additional tags propagate tags introduced rule parameterised Fig 4 lists higherorder streamlining rules implemented Conjure These rules apply ﬁrstorder streamlining rules decision variables nested domains The ﬁrst set rules half work sets multisets sequences relations They streamlining rule argument apply relevant members domain The second set rules applies given streamlining rule approximately half members decision variables domain The set rules applies given streamlining rule deﬁned set range set function variable Finally rule applies given streamlining rule set parts partition returned parts function The streamlining rule R given parameter rules ﬁrstorder higherorder rule Moreover nested arbitrarily match nested domains deﬁned Essence problem speciﬁcation See Fig 1 Fig 5 domains decision variables problem classes use paper Although rich set Essence type constructors exhaustive Graph types example work progress 39 At present specify problem terms set pairs relation domain The streamliner generator constraints produce candidate streamliners based representation As type constructors added Essence straightforward extend streamlining rules accommodate 4 Problem classes We introduce problem classes studied paper addition Car Sequencing Problem presented Fig 1 There 10 problem classes total They illustrate remainder method empirical evaluation We selected problems presented Fig 5 good coverage abstract domains available Essence including matrices sets partitions relations functions They cover types problems practice fundamental combinatorial design problems Balanced Incomplete Block Design Social Golfers scheduling manufacturing problems Car Sequencing Vessel Loading timetabling problems Balanced Academic Curriculum Problem transportation problems Transshipment Tail Assignment Such problems considered prior works Constraint Programming Operation Research The Balanced Academic Curriculum Problem BACP 40 decision version design balanced academic curricu lum assigning periods courses The constraints include minimum maximum academic load period minimum maximum number courses period prerequisite relationships courses This problem speciﬁed ﬁnding function courses periods The Balanced Incomplete Block Design problem BIBD 41 standard problem design theory design experiments It asks ﬁnd arrangement v distinct objects b blocks block contains exactly k distinct objects object occurs exactly r different blocks distinct objects occur exactly λ blocks This problem naturally speciﬁed ﬁnding relation objects blocks 6 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 Fig 5 Essence problem speciﬁcation fragments problem classes evaluation addition Fig 1 Here list decision variable declara tion statements problems govern generation candidate streamlining constraints The models use accompanied github repo The Covering Array problem 42 requires ﬁnding matrix integer values indexed k b subset t rows encode numbers 0 gt1 In addition covering constraint row column symmetries broken lexicographic ordering constraints 43 The Equidistant Frequency Permutation Arrays problem EFPA 4445 ﬁnd set optionally maximal size codewords pair codewords certain Hamming distance apart The decision version consider works given number codewords In comparison Fixed Length Error Correction Codes problem minimum distance requirement problem requires distances equal exact value In addition codeword include symbol certain number times The Fixed Length Error Correction Codes problem FLECC 4647 asks ﬁnd set code words uniform length pair code words speciﬁed minimum distance computed given distance metric hamming distance The Transshipment problem 48 considers design distribution network includes number warehouses transshipment points serve number customers The cost delivering items warehouse trans shipment point transshipment point customer stock available warehouse given We asked ﬁnd delivery plan meets customer demand cost budget This speciﬁed pair functions describing demand supplied warehouse transshipment point transshipment point customer The Tail Assignment problem 49 problem deciding individual aircraft identiﬁed tail number cover ﬂight The problem represented nested function variable outer function total inner potentially partial There constraints nested function variable ensuring sensible sequence ﬂights frequent visits maintenance depot The Social Golfers problem 50 concerned ﬁnding schedule number golfers w weeks The schedule week partitioning golfers course entire schedule golfer plays group golfer occasion The Vessel Loading decision problem 51 determine given set containers positioned given deck overlapping violating separation constraints The problem modelled Essence total functions capturing location container 7 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 Fig 6 A snippet instance generator model Transshipment problem For brevity omit speciﬁcation n_customer costTC stock demand maxCost rewritten exactly way parameters types 5 Generating selecting training instances The core idea methodology build portfolio streamliners training set employ portfolio solve unseen instances problem class substantially effort unstreamlined model This method relies automatic evaluation model candidates order construct high quality portfolio streamlined models In section set training instances representative problem instance space generated automatically 51 Generating candidate training instances As ﬁrst step generate large number candidate training instances pair problem class solver AutoIG1 525455 constraintbased automated instance generation tool AutoIG allows users generation instances given problem class declarative way constraint model supports automated generation new instances certain properties required users Fig 6 shows example generator model Transshipment problem For work use AutoIG ﬁnd satisﬁable instances solvable chosen solver solving time range 10 300 seconds The lower bound 10 seconds imposed avoid trivially solvable instances gain applying streamliners instances negligible The internal working mechanism AutoIG follows Starting description problem instance generation model created users generated automated generator approach 5254 AutoIG generates new instances searching parameter conﬁguration space generator automated algorithm conﬁguration tool irace 56 sampling new instance solving instance generator model provided irace constraint solver Minion 53 Every time new instance generated evaluated chosen solver quality term satisfying properties speciﬁed users given irace feedback update sampling model The instance generation process stops given tuning budget exhausted instances satisfying required properties returned 52 Training set construction For problems number instances automated instance generation process large For example got 4647 instances FLECC problem chuffed target solver Table 1 Using instances streamliner portfolio construction phase require signiﬁcant computation In section propose method select small representative subset training instances ones obtained previous step 1 httpsgithub com stacs cp AutoIG 8 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 Table 1 For problem class table shows following ﬁelds number candidate streamliners au tomatically generated Conjure total number training instances generated automated instance generation procedure number clusters detected GMeans The instancerelated ﬁelds different solver instance generation separatedly solver Problem BACP BIBD CoveringArray Car Sequencing EFPA FLECC Transshipment Tail Assignment Social Golfers Vessel Loading Candidate Streamliners 108 200 64 36 312 144 68 336 260 208 Instances Clusters Chuffed Lingeling 235 427 4301 4376 1233 4647 1534 1515 709 2764 133 272 1641 5651 1215 6930 3889 1627 340 3430 Chuffed 50 50 153 171 57 128 50 90 50 65 Lingeling 50 50 54 149 62 162 96 96 50 80 Fig 7 Performance example streamliners training set 4647 instances generated Fixed Length Error Correcting Code problem chuffed Each dimensional plot projection original multidimensional instance feature space Principal Component Analysis For interpretation colours ﬁgures reader referred web version article 521 Streamliner performance footprint analysis The aim instance selection process reduce size training instance set sure selected instances diverse possible The motivation objective ensure generalisation ability constructed portfolio We illustrate motivation visualisation analysis streamliner performance instance space The visu alisation similar algorithm footprint analysis method 57 An algorithm footprint simply instance space algorithm performs In context streamliner algorithm We footprints different streamliners cover different parts instance space suggests necessity selecting training instances good coverage space To visualise instance space extract FlatZinc instance features fzn2feat tool mzn2feat 58 There 95 features grouped 6 categories variables constraints domains global constraints objective solving features 58 The feature space projected 2D space Principal Component Analysis 59 For streamliner mark performance generated instances different colours For simplicity performance divided categories UNSAT streamliner eliminates solutions instance ii streamliner offers 50 reduction solving time given instance iii streamliner achieve 50 reduction solving time Fig 7 shows performance example streamliners FLECC problem chuffed Looking group instances plot performance achieved different streamliners varies drastically Streamliner 2 satisﬁable group generally achieves reduction 50 Streamliner 121 hand occasionally achieves good reductions general strict renders instances infeasible Note vastly modify footprint achieved applying combination 2 8 For instances group effective combination general reduction drastically increased 50 However parts combination makes resulting instance tight negatively affects feasibility Therefore training set construction important diversity 9 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 Fig 8 GMeans clustering results instance feature space projected 2dimensional space PCA Fixed Length Error Correcting Codes problem chuffed Each colour represents cluster account If training set include instances particular group directly limit ability streamliner portfolios generalize problem class 522 Building compressed training instance set clustering To select diverse subset instances training phase GMeans 60 clustering method instance feature space detect number instance clusters column 4 Table 1 An example clustering results FLECC problem chuffed shown Fig 8 With clusters build compressed version original training set selecting subset instances cluster To sure suﬃcient number representative training instances deﬁne minimum number 50 instances comprise compressed training set This value chosen based computational resources available experiments If number clusters detected GMeans larger minimum size representative instance cluster selected In scenarios number detected clusters 50 instances chosen cluster minimum number 50 met number instances selected cluster proportional size cluster In order account information instance diﬃculty selection representative instances cluster instead purely random selection selection instances closest centroid perform sampling replacement median instance terms corresponding solving time unstreamlined model 6 Identifying effective combinations streamliners It previously observed applying streamlining constraints model simultaneously result larger performance gains constraints isolation 17 example behaviour FLECC problem Fig 7 In order ﬁnd combinations constraints consider power set candidate streamliners form lattice root original Essence speciﬁcation edge represents addition streamliner combination associated parent node Finding effective streamliner combinations involves search lattice evaluating combinations node search arrives In order size set streamliners search manageable small number softness parameter values rule requires softness parameter 61 Pruning streamliner lattice For problems considered large number singleton streamliners generated Table 1 resulting space streamliner combinations large explored exhaustively practice Two forms pruning reduce number combinations considered 1 If set streamliners fails supersets excluded consideration To considered failed streamliner zero applicability instance space removes solutions instances The effectiveness pruning strategy largely dependent ordering traversal streamliner conﬁgurations For instance example Fig 9 seen streamliner CD unsatisﬁable allows supersets conﬁguration ABCD BCD immediately pruned However pruning occur fact CD unsatisﬁable discovered BCD ABCD evaluated Thus different traversal orderings impact pruning performed 2 Trivially conﬂicting streamliners combined streamliners A B ﬁgure For example avoid forcing set simultaneously contain odd numbers contain numbers We associate set tags rules order implement pruning Rules applied variable share tags combined This removes possibility combining different streamliners differ values softness parameters 10 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 Fig 9 The power set singleton candidate streamliners explored identify combinations result powerful streamlined speciﬁcations Starting set streamliners unstreamlined model new streamliners gradually added If small sets streamliners fail retain solutions identiﬁed CD supersets pruned search vastly reducing number vertices explored Streamliners A B tagged Section 3 mutually exclusive streamliner combinations containing evaluated 62 Searching streamliner portfolio The pruning rules described remove combinations sure fail equivalent smaller set streamliners Therefore pruning number combinations consider typically large allow exhaustive enumeration A traversal lattice allowing good combinations identiﬁed rapidly desirable In reality streamliner generation conﬂicting goals uncover constraints steer search small highly struc tured area search space yields solution versus identifying streamliner constraints training generalise instances possible These goals conﬂict generally search reduction streamliner achieves related tightness The tighter streamliner constraint propagation achieve node search resulting restricted search space reason combining different candidate streamliners provide superior results addition streamliner search space restricted With competing objectives longer feasible ﬁnd single best streamlined speciﬁcation streamliner combination optimal relation objective expense compromising To address problems adopt multiobjective optimisation approach point x search space X associated 2dimensional following number objectives reward vector rx R2 Our objectives 1 Applicability The proportion training instances streamlined model admits solution 2 Search Reduction The mean search reduction solving time achieved streamliner satisﬁable instances With objectives streamliner combination deﬁne partial ordering R 2 X Pareto dominance deﬁnition multiobjective optimisation Given x xcid4 X vectorial rewards rx cid6r1 r2cid7 rxcid4 cid6r1cid4 r2cid4cid7 rx dominates rxcid4 1 2 ri ricid4 j 1 2 r j r jcid4 1 To search lattice structure portfolio Pareto optimal streamlined models adapted Dominancebased MultiObjective Monte Carlo Tree Search MOMCTSDOM algorithm 61 The algorithm phases summarised An illustration example phases presented Fig 10 1 Selection Starting root node Upper Conﬁdence Bound applied Trees UCT 62 policy applied traverse explored lattice unexpanded node reached 2 Expansion Uniformly select random admissible child expand simulation step 3 Simulation The collection streamliners associated expanded node evaluated The vectorial reward cid6Ap plicability Search Reductioncid7 set training instances calculated returned Simulation expensive phase To constrain computational cost improve iteration speed perform instance ﬁltering avoid wasting time evaluating runs known UNSAT More speciﬁcally streamliner com bination proved UNSAT instance know descendants UNSAT instance having evaluate We use knowledge reduce number instances 11 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 Fig 10 MOMCTSDOM operating streamliner lattice A B C refer single candidate streamliners generated original Essence speciﬁca tion As MOMCTSDOM descends lattice streamliners combined conjunction individual streamliners AB ABC The nodes labelled CDD reward value divided number times visited unnecessarily evaluated lattice node When arrive given node lattice intersection sets satisﬁable instances available parents lattice construct evaluation set For example given streamliners A B C set ﬁve instances If know AB satisﬁable instances 1 2 3 AC satisﬁable instances 2 3 ABC need evaluate streamliner combination instances 2 3 This reduces computation current node 60 4 Back Propagation The current portfolio nondominated streamliner combinations compute Pareto dominance test The reward values Pareto dominance test non stationary depend portfolio evolves search Hence use cumulative discounted dominance CDD 61 reward mechanism reward update If current vectorial reward dominated streamliner combination portfolio evaluated streamliner combination added portfolio CDD reward 1 given 0 Dominated streamliner combinations removed portfolio The result evaluation propagated paths lattice update CDD reward values shown Fig 10 63 Improving portfolio complementary strength In initial implementation multiobjective search lattice performed computational bud reached lattice fully explored During time portfolio nondominated streamliners built domination deﬁned objectives deﬁned Section 62 There deﬁciencies method highlighted example Consider setting instances ABC singleton streamliners S1 S2 S1 retains satisﬁability instances AC 50 25 reduction percentage respectively renders instance B unsatisﬁable yielding AvgReduction375 AvgApplicability 666 terms objectives S2 renders instance A unsatisﬁable retains satisﬁability instances BC 30 35 reduction respectively resulting AvgReduc tion325 AvgApplicability 666 The resulting portfolio end search contain S1 S2 Pareto dominated disregarded However S2 actually possesses interesting qualities want overlook Firstly manages cover instance B covered current portfolio manages achieve higher reduction instance C Given ideal setting like retain streamliner S2 portfolio By averaging performance streamliner maintaining Pareto makes diﬃcult distinguish cases like mean resultant portfolio suboptimal An alternative create objective instance records performance streamliner individual instance This retain information allow distinguish situation streamliner works complementary set instances manages attain higher reduction particular instance The diﬃculty approach objectives size portfolio grow exponentially result impractical schedule streamliners portfolio meaningful way The diﬃculty streamliner produces small improvements instances path traversed lattice produce reward diﬃcult best ﬁrst search procedure focus essentially degrade random search In order solve issue adapted search incorporate elements Hydra 63 portfolio builder approach automatically builds set solvers parameter conﬁgurations solvers complementary strengths iteratively conﬁguring set algorithms Instead performing lattice search building portfolio perform multiple rounds search In round portfolio built complements strengths combined portfolios built prior rounds More speciﬁcally ﬁrst round MOMCTS search original performance metric tries optimise applicability solvingtime reduction training set portfolio streamliners constructed In subsequent round new MOMCTS search started modiﬁed performance metric For instance 12 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 best streamliner p highest solvingtime reduction combined portfolios previous rounds identiﬁed existed For new streamliner q evaluated search current round better reduction p solved streamliner current combined portfolio performance q reduction value p instead This means new streamliner q penalised poor performance instance instance eﬃciently solved combined portfolio previous rounds Therefore MOMCTS focus trying improve performance regions instance space current portfolio weak The ﬁnal result combined portfolio complementary strengths perform parts training instance set Performance evaluated streamliners cached reused rounds In round M iterations including iterations cached results completed After round stopped spends N consecutive iterations ﬁnding add current portfolio indication reached point diminishing returns current round The Hydra search terminated current combined portfolio remains unchanged round In experiments M N set 10 5 respectively The values chosen based small manual tuning experiment aims having good balance number rounds resources given round available computational budget 64 Independent solver search For problem class perform streamliner search solver chuffed lingeling It expected unnecessary streamliners work chuffed work lingeling viceversa generating streamliners Essence speciﬁcation problem class solver independent However intricacies solvers heuristics propagation mechanisms restarts different performance constraint vary wildly Also streamliners deﬁned Essence represented constraint SAT model different One streamliner eﬃciently represented constraint model verbose SAT encoding result substantial overhead search affect performance We illustrate Fig 11 The performance streamliner tested instance sets drastically differ CP SAT In Transshipment streamliners comprise portfolio chuffed search elicit reductions lingeling albeit strong chuffed counterpart In CarSequencing chuffed portfolio produces negative reduction solving time applied lingeling 7 Applying streamliner portfolio unseen instances Having constructed streamliner portfolio particular problem class streamliner search training instance set question apply given portfolio unseen instance problem class In section different streamliner portfolio application methods work ranging simple instance oblivious approaches Section 71 Section 72 instancespeciﬁc methods taken literature automated algorithm selection 6430 Section 73 71 Single best streamliner SBS The basic streamliner application approach Single Best Streamliner SBS choose portfolio streamliner results lowest average solving time training instances applying chosen unseen future instance The deﬁciency approach streamliners perform average instance space neglected exhibit good performance subset instances 72 Lexicographic selection methods It possible order streamlined models portfolio lexicographically example prioritising Applicability Search Reduction Given objectives orderings consider Thus lexicographic selection methods AppFirst prioritises applicability search reduction ReducFirst verse priority The selection process involves traversing portfolio deﬁned ordering given time period applying streamliner turn given instance The schedule static moves streamlined model search space current exhausted When traversing schedule possible dynamically ﬁlter streamliners based prior results If given instance evaluating schedule containing streamliners S1 S3 S12 respective ordering When evaluating given instance ﬁrst streamliner S1 renders test instance unsatisﬁable proven given time limit allows ﬁlter rest schedule remove S12 superset S1 guaranteed render test instance unsatisﬁable 13 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 Fig 11 For Transshipment CarSequencing portfolios generated chuffed streamliner search tested lingeling set test instances The Average Reduction portfolios represented paradigms The set test instances variation reductions streamliners purely different setting 73 Automated algorithm selection methods In paradigms solving combinatorial problems SAT CP ASP Answer Set Programming multiple available algorithms search strategies complementary solving strengths Automated Algorithm Selection AS techniques 656430 aim exploit fact utilising instance characteristics select set algorithms ones expected solve given problem instance eﬃciently Algorithm selectors great success shown empirically improve state art solving heterogeneous instance sets 3866 This similar setting portfolio streamliners complementary solving strengths single dom inating streamliner In work employ algorithm selection AutoFolio 38 Given particular problem instance goal AutoFolio based features instance predict streamliner gener ated portfolio eﬃciently solve instance When applying algorithm selection new domain number questions arise First multiple different algorithm selection techniques question particular AS technique best current domain Second AS approaches generally contain parameters need set effectively obtain good performance The AS framework AutoFolio 38 addresses questions integrating AS techniques automat ically choosing best conﬁguring hyperparameters automatic algorithm conﬁguration tool SMAC 67 AutoFolio supports presolving schedule static schedule built small subset streamlined models This schedule run small time If fails solve instance model chosen prediction model applied AutoFolio chooses use presolving schedule conﬁguration phase SMAC 8 Experimental results In preceding sections presented completely automated approach generation selection stream liner constraints hitherto laborious manual task In section present experiments evaluate eﬃcacy approach The ﬁrst designed measure frequency streamlining results reduction search 14 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 Table 2 Performance comparison ApplicFirst ReducFirst AutoFolio Oracle SBS overall speedup Distribution A containing instances unstreamlined solving times 10 300 seconds Solver Chuffed Lingeling Problem Instances Oracle BACP BIBD CarSequencing CoveringArray EFPA FLECC SocialGolfersProblem TailAssignment Transshipment VesselLoading GeometricMean Speedup BACP BIBD CarSequencing CoveringArray EFPA FLECC SocialGolfersProblem TailAssignment Transshipment VesselLoading 100 98 100 100 98 100 100 35 100 100 82 99 100 100 98 100 91 100 99 100 GeometricMean Speedup 2561 163 1121 173 321 242 112 320 919 592 406 322 103 104 373 132 406 110 247 613 224 219 SBS 284 105 377 145 202 190 102 320 244 356 211 132 101 101 160 116 272 105 247 184 103 142 ApplicFirst ReducFirst Autofolio 201 105 335 105 202 188 107 320 258 151 181 132 101 101 101 105 279 101 247 195 103 135 281 103 366 105 186 171 107 121 263 109 163 116 101 100 101 103 240 101 104 320 144 131 248 115 446 157 199 190 109 320 217 189 201 119 101 100 146 105 308 104 247 415 149 157 magnitude reduction Section 82 The second situates approach simplest practical setting unstreamlined model solved parallel streamlined model order measure overall speedup obtained solving given set instances Section 83 81 Experimental setup The effectiveness streamliner approach demonstrated wide range 10 different problem classes described Section 4 solving paradigms chuffed CP lingeling SAT All experiments run compute nodes 21 GHz 18core Intel Xeon E52695 processors The streamliner portfolio construction phase run single core maximum time budget 4 CPU days pair problem class solver The generated streamliner portfolios evaluated different instance distributions distinguished com prising instance diﬃculty The ﬁrst denoted Distribution A consists instances similar diﬃculty portfolio construction phase Section 6 satisﬁable instances solving time 10 300 seconds unstreamlined model We use analyse generalisation performance streamliner portfolios similarly diﬃcult instances unseen portfolio construction The second test set denoted Distribution B includes instances gen erated method Section 51 drawn different distribution solving time limit 300 3600 seconds unstreamlined model Distribution B allows study ability portfolio generalise instances greater diﬃculty Similar generation training instances automated instance generation tool AutoIG 55 generating instances distributions Each AutoIG run given walltime limit 24 CPU hours The number instances generated problem class listed Table 2 Table 3 Our makes use Conjure2 generating streamliners producing streamlined models Savile Row3 producing solverspeciﬁc inputs including FlatZinc input fzn2feat4 feature extraction tool solvers chuffed5 lingeling6 evaluation All softwares run default parameter settings We report performance streamliner schedulingselection approaches described Section 7 including Sin gle Best Streamliner SBS simple streamliner scheduling methods ApplicFirst ReducFirst automated algorithm selection approach AutoFolio7 38 A training AutoFolio pair problem class solver given tuning budget CPU day We report reference point theoretically best performance Oracle 2 httpsgithub com conjure cp conjure 3 httpssavilerowcs st andrews ac uk 4 httpsgithub com CPUnibo mzn2feat 5 httpsgithub com chuffed chuffed 6 httpsgithub com arminbiere lingeling 7 httpsgithub com automl AutoFolio 15 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 Table 3 Performance comparison ApplicFirst ReducFirst AutoFolio Oracle SBS overall speedup Distribution B containing instances unstreamlined solving times 300 3600 seconds Solver Chuffed Lingeling Problem Instances Oracle BACP BIBD CarSequencing CoveringArray EFPA FLECC SocialGolfersProblem TailAssignment Transshipment VesselLoading GeometricMean Speedup BACP BIBD CarSequencing CoveringArray EFPA FLECC SocialGolfersProblem TailAssignment Transshipment VesselLoading GeometricMean Speedup 16 59 52 46 121 192 19 35 216 322 15 25 69 34 158 166 17 36 68 78 5347 225 877 336 486 395 253 320 1621 472 559 592 226 332 1665 139 589 223 297 1242 251 407 SBS 147 113 191 220 102 218 128 320 277 164 180 220 125 106 219 100 162 114 295 359 129 166 ApplicFirst ReducFirst Autofolio 248 115 188 126 193 202 100 320 289 121 179 220 139 134 163 118 179 109 295 355 111 168 471 104 219 126 179 168 100 121 293 102 165 188 104 119 163 103 142 109 118 360 180 147 4656 171 677 320 253 224 253 320 539 212 374 491 130 295 1081 120 339 189 295 525 234 299 assume best solving model unstreamlined streamlined ones constructed portfolio instance The construction streamliner portfolios similar previous works manual streamlining 1317 streamliners small instances highly effective solving larger diﬃcult instances As described Section 51 Section 6 pair problem class solver lattice search instances solving times similar distribution A By limiting search small nontrivial instances examine large streamliners reasonable time budget evaluating streamliner instances allows search identify regularities structures common instances The training cost building streamliner selection model constructed streamliner portfolio AutoFolio generally lower focuses limited number streamliner combinations Therefore ensure selection effective larger diﬃcult instances add small number instances drawn distribution B separated test instances evaluation training AutoFolio8 This AutoFolio model evaluation distribution B Note evaluating distribution A need add extra instances AutoFolio model trained instances distribution A separated test instances evaluation As shown subsequent section AutoFolio achieves best overall performance cases especially larger diﬃcult instances Table 3 demonstrates importance effective portfolio based streamliner selection 82 Frequency magnitude search reduction The effectiveness streamliner method term improvement frequency selected streamlined models wins original model magnitude improvement term search reduction presented Fig 12 Fig 13 We begin considering setting instances solved CP solver chuffed The high improvement frequency Oracle problem classes demonstrates streamliner portfolio reduce search given unseen instance As expected magnitude search reduction vary problem class On Distribution A BACP Car Sequencing Transshipment pronounced approaching percent indicate solution obtained little search efforts problems BIBD CoveringArray Social Golfers reduction generally smaller Performance problem classes signiﬁcantly improves Distribution B suggesting impact streamlin ing grows diﬃculty problem instance This expected size search space typically increases 8 In preliminary experiments tried training AutoFolio instances distribution A evaluating trained selection model diﬃcult instances We achieve good results suggested lack necessary information selection model work properly instance type saw training 16 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 Fig 12 Results chuffed lingeling Distribution A The pair charts shows frequently associated approach produces im provement improved indicates reason failure improve remainder instances instance rendered unsatisﬁable UNSAT search completed slowly unstreamlined model nonimproved The pair charts shows magnitude solving time reduction instances improvement obtained reduction Hence care taken comparing approaches infrequently applicable approach instances improve lexicographic scheduling approaches Social Golfers Problem The best approaches frequently applicable result large search reduction Fig 13 Results chuffed lingeling Distribution B Detailed meaning plots described Fig 12 instance providing opportunity selected streamliner prune larger parts search space reduce search In cases automated streamliner selection approaches able deliver substantial fraction perfor mance oracle terms percentage instances improved The simple scheduling approaches perform problem classes BIBD CoveringArray instance distributions SocialGolfers distribution B performance relatively weak The Single Best Streamliner approach requires train ing following streamliner search offers fairly good compromise performance cost solving unseen instances especially easy instances distribution A However robust performance comes AutoFolio Performance SAT domain generally strong Constraint Programming Although performance oracle indicates streamliner portfolio improve search Distribution A 4 10 problem classes BIBD CarSequencing EFPA SocialGolfers magnitude reduction small On remaining problem classes performance stronger cases CoveringArray FLECC exceeds 17 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 Fig 14 Distribution speedup values base 10 logarithmic scale Oracle AutoFolio SingleBestSolver Distribution B improvement delivered corresponding CP setting Once performance clearly improves Distribution B relative Distribution A suggesting SAT impact streamlining grows diﬃculty 83 A practical setting By employing algorithm selection techniques described Section 7 aim maximise occasions streamlining produces reduction search effort However expect aggressive technique streamlining universally applicable particular selected streamliner render instance consideration unsat isﬁable Therefore envisage practical setting streamliner portfolio constituent wider portfolio containing conservative approaches The simplest setting employ run stream liner portfolio parallel unstreamlined model produce solution selected streamliner renders satisﬁable instance unsatisﬁable We evaluated parallel conﬁguration Distribution A B Our results summarised Table 2 Table 3 present Overall Speedup approach different problem classes solving paradigms CP SAT Overall Speedup represents total time original model divided total streamlined time instances This metric gives indication overall reduction search effort instance distribution Across distributions AutoFolio clearly best performing different streamliner selection approaches It achieves geometric mean speedups 201 157 Distribution A 374 299 Distribution B maximum speedups Distribution A 4 CP SAT Distribution B 40 CP 10 SAT As results presented Section 82 pronounced increase speedups achieved diﬃcult Distribution B instances Savile Row introduces cost translating models solver input increase presence streamlining constraints Since instances Distribution A relatively easy solve limits speedup obtainable streamlining As diﬃculty increases Distribution B beneﬁts streamlining clear Overall Speedup aggregation metric obscure individual instance speedups obtained For ex ample streamliner evaluated 10 instances half application makes trivial reducing solving time near zero half unsatisﬁable Overall Speedup 2 This provide good indication half instance distribution streamliner decimating search space high degree In order better visualize Fig 14 shows distribution speedup values instance distribution B Oracle SingleBestSolver AutoFolio methods The minimum speedup obtained streamliner setup 1 log100 cases chosen streamliner satisﬁable solved original model providing speedup If restrict scope individual problem classes seen application streamliners provide substantial speedups Using chuffed CP solver BACP Transshipment problem classes AutoFolio able obtain large speedups majority instance distribution In case BACP speedups range 8 2568 1st 3rd quartiles having values q1 103 q3 1458 For Transshipment speedups range 1 1120 1st 3rd quartiles having values q1 6 q3 120 These large speedups restricted 18 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 CP SAT paradigm CoveringArray Transshipment examples search space decimation occur For Transshipment speedups range 1 141 1st 3rd quartiles having values q1 25 q3 35 For CoveringArray speedups range 1 244 1st 3rd quartiles having values q1 6 q3 25 84 Cumulative CPU consumption We mindful results presented far section terms reductionspeedup time portfolio approach versus original model Since portfolio method utilises cores original model portfolio consumes resources arrive solution We present analysis Fig 15 illustrate cumulative time spent scheduling methods instances comprising Distribution B Here cumulative time portfolio approach solve instances taking account cores compared original model For chuffed solver 9 10 problems BIBD exception AutoFolio able reduce cumulative time cases substantial reduction Speedups BACP 4298x CarSequencing 310x TailAssignment 159x Transshipment 388x attained For lingeling problem BIBD EFPA positive speedups cumulative time achieved substantial results problems Speedups BACP 237x CarSequencing 166x CoveringArray 596x FixedLengthErrorCorrectingCodes 213x TailAssignment 147x Transshipment 27x attained It useful note cumulative time speedup portfolio approach half elapsed time speedup The reason portfolio approach use twice time original model Let use example illustrate point We instance takes 100 s original model If evaluation selected streamliner proven unsatisﬁable T 50 s T 50 s T 100 s core utilised running original model The cumulative time speedup portfolio approach 2 3 compared speedup 1 elapsed time 9 Related work Improving solving performance major research goal Constraint Programming Streamlining powerful method goal methods like adding implied constraints symmetry breaking constraints dominance constraints Typically methods initially explored small number problem classes man ually experts Once eﬃcacy shown research moved automating application Symmetry breaking successfully automated methods implied constraints dominance breaking constraints compar atively Streamlining successfully applied manually prior work present ﬁrst substantial step automating application streamlining paper This section provides necessary context prior work streamlining related research areas 91 Manual streamlining Gomes Sellmann introductory work Streamlining worked problems ﬁeld Combinatorial Design 13 One problems looked construction Diagonally Ordered Magic Squares DOMS They note small sizes ﬁnding solutions problem diﬃcult base model ﬁnd solutions size 9 They noticed regularity solutions small instances numbers magic square evenly distributed Intuitively makes sense numbers row column diagonal sum number placing large numbers row unlikely lead solution Once identiﬁed regularity posted streamliner constraint disallows similar numbers appearing near The streamlined model able solve instances size 18 Using similar methodology Gomes Sellmann 13 Kouril et al applied streamlining constraints Van der Waerden numbers problem 68 After observing patterns solutions small instances added simple constraints force disallow certain sequences values occur solutions Again led dramatic improvement run time solver allowing tighter bounds computed Le Bras et al streamlining help construct graceful double wheel graphs 17 Constraints forcing certain parts colouring form arithmetic sequences allow construction colourings larger graphs These constraints led discovery polynomial time construction algorithms colourings eventually proof double wheel graphs graceful Finally Le Bras et al use streamlining constraints compute new bounds Erd os discrepancy prob lem 18 Here streamlining constraints enforce periodicity solution improved Walters sequence occur solution partially multiplicative property Thanks streamlining constraints new bounds discovered problem 19 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 Fig 15 The cumulative CPU time AutoFolio comparison Oracle Original model totalling test instances Distribution B The xaxis shows total number instances sorted descending order instance diﬃculty solving time according original model The yaxis shows corresponding total cumulative CPU Streamlining proved valuable cases Despite success application limited mathe matical combinatorial design problems The main reason preventing widespread adoption need laborious manual component requires domain expertise analyse solution patterns derive common patterns This motivated automation streamlining paper 20 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 Streamlining related implied constraints symmetry breaking constraints dominance breaking constraints All methods applied manually semiautomatically given base model Streamlining orthogonal methods fruitfully coexist model 92 Relation model counting XOR constraints Gomes et al 69 employ XOR constraints order obtain good quality lower bounds model meaning solution context counting SAT problems Their approach involves repeatedly adding randomly chosen XOR constraints problem variables The central idea approach random XOR constraint cuts search space approximately half means approximately half solutions remain satisﬁable addition XOR constraint By adding XOR constraints aim bring SAT problem boundary unsatisﬁable They provide formal proof high probability number XOR constraints required process determines solution count They empirically study relationship number XOR constraints solution count They report promising results including good bound number solutions The randomly chosen XOR constraints work streamlining constraints aim remove solutions However focus different speciﬁcally focus counting solutions eﬃciency ﬁnding ﬁrst solution In empirical analysis compare XORbased approximation method exact solution counting methods Exact solution counting methods require repeatedly solving problem typically adding solution blocking clauses avoid enumerating solution twice The XORbased method computationally faster exact solution counting overall unlikely faster ﬁnding single solution Indeed authors note adding large XORs SAT solver ineﬃcient Nonetheless scheme work option current framework need consider future work best integrate method generating streamliners structure present Essence speciﬁcation 93 Relation implied constraints Streamlining constraints closely related implied constraints An implied constraint additional constraint added model increase solving performance They called redundant constraints cor rectness model depend There key difference implied constraints streamlining constraints implied constraints sound change set solutions Some previous work focuses manually adding implied constraints model increase solving performance 12 The scope adding implied constraints narrower soundness requirement Automated approaches 35 focus deriving simple facts model constraints forwardchaining generate complex constraints hold set instances Automatically proving soundness implied constraints challenging task general limits impact approaches 94 Relation symmetry breaking constraints Breaking modelling symmetry shown substantial impact improving solving performance There main approaches dynamic approaches generate symmetry breaking constraints search 70 static approaches work adding constraints model break symmetries 7143 Static symmetry breaking constraints allow derivation additional implied constraints 1 Symmetry breaking constraints detected data structures model 72 detected automatically applying graph automorphism detection methods constraint graph 73 Conjure generates static symmetry breaking constraints thanks highlevel variable domains 7475 streamlining approach works conjunction symmetry breaking constraints 95 Relation dominance breaking constraints A generalisation symmetry dominance solutions In context optimisation problems dominance break ing constraints result dramatic speed ups 1012 A dominance breaking constraint disallows solutions known suboptimal optimal solutions long optimal solution remains This achieved identifying mapping solutions condition mapping improve solution Preliminary work automating parts derivation dominance constraints shows promising results 76 96 Portfolio approaches In contexts single algorithm seen dominate instances computational problem Algorithms complementary strengths ideas making use algorithm portfolios investi gated ﬁelds great success 30 For SAT successful examples portfolio approaches SATzilla 777866 ﬁrst portfolio approach shown outperform standalone SAT solvers exhibited strong performance SAT competitions For CP portfolio approaches CPHydra 79 SUNNYCP 8081 won 21 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 Second International Constraint Solver Competition 82 MiniZinc challenges 20152017 open track respectively We refer 6430 overview portfolio approaches achievements To best knowledge work ﬁrst applies portfolio approaches context streamliners constraint modelling 10 Conclusions future work Streamliner generation exclusive province human experts requiring substantial effort examining solutions instances problem class manually forming candidate streamliners testing eﬃcacy prac tice In work presented ﬁrst completely automated method generating effective streamliners achieved exploitation structure present abstract constraint speciﬁcations written Essence bestﬁrst search streamliner candidates procedure select apply streamliners faced unseen problem stance Our empirical results demonstrate success approach Streamlining constraints typically constraint satisfaction problems Streamlining context optimisa tion challenge rendering instance unsatisﬁable overaggressive streamliner disallow best solutions Recently effective use streamlining constraints optimisation problems investigated preliminary study 83 In work authors present way producing automatically portfolio streamliners optimisation problems Each streamlined model portfolio represents different balance criteria aggressively search space reduced proportion training instances streamliner admitted solution average reduction quality objective value versus unstreamlined model This criteria important optimization problems goal ﬁnd solution optimal objective value solution satisfaction problems In support new method present automated approach training test instance generation provide approaches selection application streamliners portfolio Empirical results demonstrate drastic improvements time required ﬁnd good solutions early prove optimality problem classes A important item future work exploit ability Conjure reﬁne alternative models Essence speciﬁcation Herein employed default heuristic Conjure order reﬁne single model streamlined speciﬁcation known generally select effective models 19 necessarily best model set Conjure produce We add extra degree ﬂexibility search effective candidate streamliners measuring performance models streamlined speciﬁcation Selecting best model streamlined speciﬁcation available lead greater performance gains For SAT approach extended searching possible SAT encodings Essence Prime models reﬁned Conjure Preliminary results single problem class promising 84 Declaration competing The authors declare following ﬁnancial interestspersonal relationships considered potential com peting interests Ozgur Akgun reports ﬁnancial support provided Engineering Physical Sciences Research Council Nguyen Dang reports ﬁnancial support provided Leverhulme Trust Ian Miguel reports ﬁnancial support provided Engineering Physical Sciences Research Council Data availability We shared link code data paper Acknowledgements This work supported EPSRC grants EPP0156381 EPP0268421 Nguyen Dang Leverhulme Early Career Fellow We Cirrus UK National Tier2 HPC Service EPCC httpwwwcirrus ac uk funded University Edinburgh EPSRC EPP0202671 References 1 AM Frisch C Jefferson I Miguel Symmetry breaking prelude implied constraints constraint modelling pattern ECAI vol 16 2004 2 AM Frisch I Miguel T Walsh Symmetry implied constraints steel slab design problem Proc CP01 Workshop Modelling 3 J Charnley S Colton I Miguel Automatic generation implied constraints ECAI vol 141 2006 pp 7377 4 S Colton I Miguel Constraint generation automated theory formation International Conference Principles Practice Constraint Pro p 171 Problem Formulation 2001 gramming Springer 2001 pp 575579 5 AM Frisch I Miguel T Walsh CGRASS transforming constraint satisfaction problems Recent Advances Constraints Springer 2003 pp 1530 22 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 6 P Flener A Frisch B Hnich Z Kiziltan I Miguel J Pearson T Walsh Symmetry matrix models Proceedings SymCon vol 1 Citeseer 2001 7 AM Frisch B Hnich Z Kiziltan I Miguel T Walsh Propagation algorithms lexicographic ordering constraints Artif Intell 170 10 2006 803834 8 AM Frisch C Jefferson B MartinezHernandez I Miguel Symmetry generation constraint models Proceedings International Symmetry Conference 2007 Problems Citeseer 2004 pp 6370 9 AM Frisch B Hnich Z Kiziltan I Miguel T Walsh Filtering algorithms multiset ordering constraint Artif Intell 173 2 2009 299328 10 S Prestwich JC Beck Exploiting dominance symmetric problems Fourth International Workshop Symmetry Constraint Satisfaction 2014 pp 38 11 G Chu PJ Stuckey Dominance breaking constraints Constraints 20 2 2015 155182 12 JH Lee AZ Zhong Exploiting functional constraints automatic dominance breaking constraint optimization 28th International Conference Principles Practice Constraint Programming CP 2022 Schloss DagstuhlLeibnizZentrum für Informatik 2022 13 C Gomes M Sellmann Streamlined constraint reasoning Principles Practice Constraint Programming CP 2004 Springer 2004 pp 274289 14 B Smith CSPLib problem 001 car sequencing httpwwwcsplib org Problems prob001 15 IP Gent Two results carsequencing problems Report University Strathclyde APES0298 7 1998 16 M Kouril J Franco Resolution tunnels improved sat solver performance Theory Applications Satisﬁability Testing Springer 2005 pp 143157 Intelligence AAAI Press 2013 pp 587593 17 R Le Bras CP Gomes B Selman Doublewheel graphs graceful Proceedings TwentyThird International Joint Conference Artiﬁcial 18 R Le Bras CP Gomes B Selman On Erdos discrepancy problem Principles Practice Constraint Programming 20th International Con ference Proceedings CP 2014 Lyon France September 812 2014 vol 8656 Springer 2014 p 440 19 Ö Akgün Extensible automated constraint modelling reﬁnement abstract problem speciﬁcations PhD thesis University St Andrews 2014 20 Ö Akgün IP Gent C Jefferson I Miguel P Nightingale Breaking conditional symmetry automated constraint modelling Conjure ECAI 21 Özgür Akgün AM Frisch IP Gent C Jefferson I Miguel P Nightingale Conjure automatic generation constraint models prob lem speciﬁcations Artif Intell 310 2022 103751 httpsdoi org 10 1016 j artint 2022 103751 httpswwwsciencedirect com science article pii S0004370222000911 22 AM Frisch C Jefferson BM Hernandez I Miguel The rules constraint modelling Proc IJCAI 2005 2005 pp 109116 23 AM Frisch W Harvey C Jefferson B MartínezHernández I Miguel Essence constraint language specifying combinatorial problems Constraints 13 3 2008 268306 httpsdoi org 10 1007 s10601 008 9047 y 24 P Nightingale Özgür Akgün IP Gent C Jefferson I Miguel Automatically improving constraint models Savile row associativecommutative common subexpression elimination Principles Practice Constraint Programming CP 2014 Springer 2014 25 P Nightingale Ö Akgün IP Gent C Jefferson I Miguel P Spracklen Automatically improving constraint models Savile row Artif Intell 251 2017 3561 26 P Van Hentenryck The OPL Optimization Programming Language MIT Press 1999 27 N Nethercote PJ Stuckey R Becket S Brand GJ Duck G Tack Minizinc standard CP modelling language International Conference Principles Practice Constraint Programming Springer 2007 pp 529543 28 P Nightingale A Rendl Essence description arXiv preprint arXiv160102865 2016 29 Ö Akgün AM Frisch IP Gent BS Hussain C Jefferson L Kotthoff I Miguel P Nightingale Automated symmetry breaking model selection Conjure International Conference Principles Practice Constraint Programming Springer 2013 pp 107116 30 P Kerschke HH Hoos F Neumann H Trautmann Automated algorithm selection survey perspectives Evol Comput 27 1 2019 345 31 J Wetter Ö Akgün I Miguel Automatically generating streamlined constraint models Essence Conjure International Conference Principles Practice Constraint Programming Springer 2015 pp 480496 32 P Spracklen Ö Akgün I Miguel Automatic generation selection streamlined constraint models Monte Carlo search model lattice International Conference Principles Practice Constraint Programming Springer 2018 pp 362372 33 G Chu M la Banda P Stuckey Exploiting subproblem dominance constraint programming Constraints 17 1 2012 138 httpsdoi org 10 1007 s10601 011 9112 9 code available httpsgithub com chuffed chuffed 34 A Biere Lingeling essentials tutorial design implementation aspects sat solver lingeling POSSAT vol 27 2014 p 88 35 P Spracklen N Dang Özgür Akgün I Miguel Stacscpautomatedstreamlinerportfolios httpsdoi org 10 5281 zenodo 7747141 Mar 2023 36 R Le Bras CP Gomes B Selman Doublewheel graphs graceful Proceedings TwentyThird International Joint Conference Artiﬁcial Intelligence IJCAI 13 AAAI Press 2013 pp 587593 httpdl acm org citation cfm id 2540128 2540214 37 K SmithMiles TT Tan Measuring algorithm footprints instance space 2012 IEEE Congress Evolutionary Computation IEEE 2012 pp 18 38 M Lindauer HH Hoos F Hutter T Schaub Autofolio automatically conﬁgured algorithm selector J Artif Intell Res 53 2015 745778 39 F Dunlop J Enright C Jefferson C McCreesh P Prosser J Trimble Expression graph problems high level modelling language Proceedings International Workshop Graphs Constraints 2018 40 B Hnich Z Kiziltan T Walsh CSPLib problem 030 balanced academic curriculum problem BACP httpwwwcsplib org Problems prob030 41 S Prestwich CSPLib problem 028 balanced incomplete block designs httpwwwcsplib org Problems prob028 42 E Selensky CSPLib problem 045 covering array problem httpwwwcsplib org Problems prob045 43 P Flener AM Frisch B Hnich Z Kiziltan I Miguel J Pearson T Walsh Breaking row column symmetries matrix models International Conference Principles Practice Constraint Programming Springer 2002 pp 462477 44 P Nightingale CSPLib problem 055 equidistant frequency permutation arrays httpwwwcsplib org Problems prob055 45 S Huczynska P McKay I Miguel P Nightingale Modelling equidistant frequency permutation arrays application constraints mathematics International Conference Principles Practice Constraint Programming Springer 2009 pp 5064 46 A Frisch C Jefferson I Miguel CSPLib problem 036 ﬁxed length error correcting codes httpwwwcsplib org Problems prob036 47 AM Frisch C Jefferson I Miguel Constraints breaking row column symmetries Principles Practice Constraint Programming CP 2003 9th International Conference Proceedings CP 2003 Kinsale Ireland September 29October 3 2003 vol 9 Springer 2003 pp 318332 48 Özgür Akgün CSPLib problem 83 transshipment problem httpwwwcsplib org Problems prob083 49 Özgür Akgün CSPLib problem 115 tail assignment httpwwwcsplib org Problems prob115 50 W Harvey CSPLib problem 010 social golfers problem httpwwwcsplib org Problems prob010 51 K Brown CSPLib problem 008 Vessel loading httpwwwcsplib org Problems prob008 52 Ö Akgün N Dang I Miguel AZ Salamon C Stone Instance generation generator instances International Conference Principles Practice Constraint Programming Springer 2019 pp 319 53 IP Gent C Jefferson I Miguel Minion A fast scalable constraint solver ECAI vol 141 2006 pp 98102 54 Ö Akgün N Dang I Miguel AZ Salamon P Spracklen C Stone Discriminating instance generation abstract speciﬁcations case study CP MIP International Conference Integration Constraint Programming Artiﬁcial Intelligence Operations Research Springer 2020 pp 4151 23 P Spracklen N Dang Ö Akgün et al Artiﬁcial Intelligence 319 2023 103915 55 N Dang O Akgün J Espasa I Miguel P Nightingale A framework generating informative benchmark instances C Solnon Ed 28th In ternational Conference Principles Practice Constraint Programming CP 2022 Leibniz International Proceedings Informatics LIPIcs vol 235 Schloss Dagstuhl LeibnizZentrum für Informatik Dagstuhl Germany 2022 18 httpsdrops dagstuhl opus volltexte 2022 16647 56 M LópezIbáñez J DuboisLacoste LP Cáceres M Birattari T Stützle The irace package iterated racing automatic algorithm conﬁguration Oper 57 K SmithMiles D Baatar B Wreford R Lewis Towards objective measures algorithm performance instance space Comput Oper Res 45 Res Perspect 3 2016 4358 2014 1224 58 R Amadini M Gabbrielli J Mauro An enhanced features extractor portfolio constraint solvers SAC 2014 Proceedings 29th Annual ACM Symposium Applied Computing ACM 2014 pp 13571359 code available httpsgithub com CPUnibo mzn2feat 59 K Pearson Principal components analysis Lond Edinb Dubl Philos Mag J Sci 6 2 1901 559 60 G Hamerly C Elkan Learning k kmeans Advances Neural Information Processing Systems 2004 pp 281288 61 W Wang M Sebag Hypervolume indicator dominance reward based multiobjective MonteCarlo tree search Mach Learn 92 23 2013 62 C Browne E Powley D Whitehouse S Lucas PI Cowling S Tavener D Perez S Samothrakis S Colton et al A survey Monte Carlo tree search 63 L Xu H Hoos K LeytonBrown Hydra automatically conﬁguring algorithms portfoliobased selection TwentyFourth AAAI Conference 64 L Kotthoff Algorithm selection combinatorial search problems survey Data Mining Constraint Programming Springer 2016 pp 149190 65 JR Rice et al The algorithm selection problem Adv Comput 15 1976 65118 66 L Xu F Hutter J Shen HH Hoos K LeytonBrown Satzilla2012 improved algorithm selection based costsensitive classiﬁcation models 403429 methods IEEE Trans Comput Intell AI Games 2012 Artiﬁcial Intelligence 2010 Proceedings SAT Challenge 2012 pp 5758 ing Intelligent Optimization Springer 2011 pp 507523 Testing Springer 2005 pp 143157 67 F Hutter HH Hoos K LeytonBrown Sequential modelbased optimization general algorithm conﬁguration International Conference Learn Artiﬁcial Intelligence AAAI Press 2011 pp 411 Conjure Lect Notes Comput Sci vol 8124 2013 pp 107116 ference Artiﬁcial Intelligence 2015 68 M Kouril J Franco Resolution tunnels improved SAT solver performance International Conference Theory Applications Satisﬁability 69 CP Gomes Sabharwal B Selman Model counting new strategy obtaining good bounds 2006 70 IP Gent B Smith Symmetry Breaking During Search Constraint Programming Citeseer 1999 71 IP Gent KE Petrie JF Puget Symmetry Constraint Programming Foundations Artiﬁcial Intelligence vol 2 Elsevier 2006 pp 329376 72 P Flener A Frisch B Hnich Z Kiziltan I Miguel T Walsh Matrix modelling Proc CP01 Workshop Modelling Problem Formulation 2001 p 223 Springer 2005 pp 475489 73 JF Puget Automatic detection variable value symmetries International Conference Principles Practice Constraint Programming 74 Ö Akgün I Miguel C Jefferson AM Frisch B Hnich Extensible automated constraint modelling Proceedings TwentyFifth AAAI Conference 75 O Akgün AM Frisch IP Gent BS Hussain C Jefferson L Kotthoff I Miguel P Nightingale Automated Symmetry Breaking Model Selection 76 C Mears MG De La Banda Towards automatic dominance breaking constraint optimization problems TwentyFourth International Joint Con 77 E Nudelman K LeytonBrown A Devkar Y Shoham H Hoos Satzilla algorithm portfolio sat solver description SAT competition 2004 2004 78 L Xu F Hutter HH Hoos K LeytonBrown Satzilla portfoliobased algorithm selection sat J Artif Intell Res 32 2008 565606 79 E OMahony E Hebrard A Holland C Nugent B OSullivan Using casebased reasoning algorithm portfolio constraint solving Irish Conference Artiﬁcial Intelligence Cognitive Science 2008 pp 210216 80 R Amadini M Gabbrielli J Mauro Sunnycp sequential cp portfolio solver Proceedings 30th Annual ACM Symposium Applied Computing 2015 pp 18611867 81 R Amadini M Gabbrielli J Mauro A multicore tool constraint solving arXiv preprint arXiv1502 03986 2015 82 MR Van Dongen C Lecoutre O Roussel Proceedings 2nd international constraint solver competition 2008 83 P Spracklen N Dang Ö Akgün I Miguel Automatic streamlining constrained optimisation International Conference Principles Practice 84 P Spracklen N Dang Ö Akgün I Miguel Towards portfolios streamlined constraint models case study balanced academic curriculum Constraint Programming Springer 2019 pp 366383 problem arXiv preprint arXiv2009 10152 2020 24