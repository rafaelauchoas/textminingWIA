Artiﬁcial Intelligence 166 2005 194253 wwwelseviercomlocateartint Processes continuous change SATbased planner JiAe Shin Ernest Davis Courant Institute New York University New York NY 10012 USA Received 27 September 2004 accepted 6 April 2005 Available online 10 May 2005 Abstract The TMLPSAT planner construct plans domains containing atomic actions durative actions events processes discrete realvalued intervalvalued ﬂuents reusable resources numeric intervalvalued continuous linear change quantities It works stages In ﬁrst stage representation domain problem extended version PDDL compiled Boolean combinations propositional atoms linear constraints numeric variables In second stage SATbased arithmetic constraint solver LPSAT MathSAT ﬁnd solution constraints In stage correct plan extracted solution We discuss structure planner planning time metric quantities compiled constraints The proofs soundness completeness substantial subset extended version PDDL presented 2005 Elsevier BV All rights reserved Keywords SATbased planning LPSAT Continuous time Metric quantities Processes 1 Introduction Numeric geometric entities change continuously time central features domains especially physical domains position object space gasoline tank temperature water pot Early generations Corresponding author Email addresses jiaecsnyuedu J Shin davisecsnyuedu E Davis 00043702 matter 2005 Elsevier BV All rights reserved doi101016jartint200504001 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 195 domainindependent planners deal numeric quantities planners deal continuous change The TMLPSAT described paper ﬁrst planner uses SATbased planning methodology deal continuous change aspects numeric quantities Over past decade dozens new powerful engines propositional satisﬁability available 55 broad range applications One successful application development SATbased propositional planning planning problem compiled set propositional constraints way solution constraints demarcates valid plan 323435 Recently new class inference engines1 based propositional satisﬁability solvers developed systems Boolean combinations propositional atoms linear constraints realvalued quantities 3553 In paper SATbased planning framework extended SATbased arithmetic constraint solvers deal domains involve continuous time resources realvalued quantities The TMLPSAT planner constructs plans domains following features The effects preconditions actions involve discrete realvalued interval valued ﬂuents An action change value realvalued ﬂuent continuously linear function time discretely An action atomic durative taking place extended time inter val An action real intervalvalued parameters Actions concurrent Exogenous events occur Autonomous processes deﬁned language Processes continuous change ﬂuent concurrent Reusable resources numeric intervalvalued deﬁned language Fig 1 shows architecture TMLPSAT The input TMLPSAT consists domain description problem speciﬁcation represented PDDL 2425 pre cisely version PDDL certain restrictions extensions described Section 3 The compiler compiles planning problem set constraints disjunction propositional atoms linear inequalities numeric variables The set constraints passed SATbased arithmetic constraint solver ﬁnds solution exists From solution decoder extracts valid plan The overall powerful elegant planner wide range prob lems Our main contribution TMLPSAT development compiler From point view constraint solver viewed black box takes input set 1 We SATbased Arithmetic Constraint Solver paper They called SATbased Decision Procedure Theorem Prover literature 196 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 Fig 1 Architecture TMLPSAT constraints form described outputs solution exists ﬂag solution exists A number different architectures constraint solver possible principle complete heuristic deterministic probabilistic In developing testing TMLPSAT preexisting SATbased constraint solvers LPSAT 53 MathSAT 39 In Section 22 discuss architecture In Section 8 sketch branchandbound architecture enable solver solve optimization problems Two sample problems illustrate power TMLPSAT planner help introduce sample domains discuss Section 5 Problem 11 An agent deliver 5 gallons water location LD Currently agent location LS 100 feet away fourgallon buckets At LS tap pours water rate 01 gallons second The agent 5 feet second The following plan enable agent achieve goal total 70 seconds He turns tap let pours bucket 1 10 seconds Bucket 1 holds 1 gallon The agent turns tap puts bucket 2 tap turns tap Then carries bucket 1 LD empties bucket 1 LD returns LS The round trip takes 40 seconds bucket 2 holds 4 gallons He picks bucket 2 carries LD empties If agent carry buckets simpler solution possible He pours 3 gallons bucket 1 2 gallons bucket 2 carries LD empties completing task 70 seconds Problem 12 A architecture uses variablelength partitions memory model job occupies consecutive segment RAM ﬁxed lifetime job The machine 128M RAM The operating needs sched ule jobs following characteristics J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 197 Job Time Space A B C D E F 100 50 120 40 100 40 80M 15M 20M 65M 20M 40M Assume jobs IO bound time requirement independent jobs currently active The following plan completes jobs time 160 Job Start End Segment A C B E F D 0 0 0 50 100 120 100 120 50 150 140 160 080 80100 100115 108128 040 40105 This paper organized follows Section 2 reviews previous related work cluding work SATbased planning SATbased arithmetic constraint solvers PDDL draw construction TMLPSAT Section 3 discusses extensions restrictions PDDL Section 4 discusses temporal tology Section 5 presents sample domains planning problems TMLPSAT handle Section 6 core research enumerates rules translating prob lem PDDL constraints Table 1 page 210 contains summary constraints Section 7 discusses soundness completeness Sec tion 8 presents conclusions discusses future work Appendix A gives complete listing PDDL deﬁnition Bucket domain problem described Problem 11 Appendix B gives proof TMLPSAT sound complete substantial subset extended version PDDL Level 5 2 Previous related work The TMLPSAT planner builds foundations SATbased planning In planning paradigm planning problem represented highlevel planning language compiled corresponding set propositional formulas Solving planning problem corresponds solving propositional satisﬁability problem SAT formulas SATbased arithmetic constraint solvers constraint satisfaction engines ﬁnd solu tions Boolean combinations propositional atoms linear inequalities The PDDL speciﬁcation language planning domains problems 198 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 Also related directly TMLPSAT Other planning paradigms dealing metric time numeric quantities Other automated reasoning applications deal continuous change We discuss turn categories previous work relation TMLPSAT 21 Planning propositional satisﬁability The architecture SATbased propositional planner shown Fig 2 The idea SATbased propositional planning 323435 convert planning problem domain discrete actions ﬂuents2 discrete values set propositional constraints This follows An upper bound N guessed3 number steps needed plan Time points labeled 0 N The following propositional atoms deﬁned time point I A For ﬂuent F possible value V F statement value F time I V B For action A statement A executed time I Fig 2 Architecture SATbased propositional planner 2 Throughout paper use word ﬂuent temporal logic sense entity takes different values different times meaning particular PDDL construct Temporal logic ﬂuents include PDDL predicates 3 Rather guess systematically search smallest possible value N ways 1 Begin random guess length plan If plan binary search length plan If plan guess plan length higher current iterate 2 Use Graphplan like search 7 ﬁnd lower bound length shortest possible plan initialize N value iteratively increase N solution J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 199 The laws governing domain imposed asserting instance law moment time In classical planning domains major categories laws causal laws domain constraints frame axioms The paradigm support essentially computable constraint number times action A executed prime number ﬂuent change ﬁve time units particular action The main limiting factor incorpo rating constraints ﬁnding systematic ways express general domain deﬁnition language PDDL The problem instance asserted stating starting conditions hold time 0 goal conditions hold time N The constraints fed propositional satisﬁability solver If solution constraints set actions marked occurring solution constitutes valid plan SATbased propositional planners implemented easily current gen eration satisﬁability solvers 55 effectively The planners additional difﬁculty dealing ADL features conditional effects quantiﬁcations The major drawback SATbased planning large domains lead enormously large systems constraints Particularly dangerous functions arguments ﬂu ent function action function k arguments generates collection atoms size exponential k Since introduction SATPLAN 3234 number SATbased planners developed including BLACKBOX 35 MEDIC 21 Building SATbased planner involves main types choices The ﬁrst representational issue choos ing encoding What propositional atoms domain constraints encoded axioms The effectiveness different encoding schemes studied extensively 2133 The second choice technique solve satisﬁa bility problem probabilistic methods like GSAT 32 deterministic methods like extensions 55 DPLL algorithm 14 studied Temporal planning integer time involving constraints Action A requires 3 units time complete easily handed framework long inte gers involved small One deﬁnes time point integer encodes constraints formulas If A starts T0 ends T3 If A starts T1 ends T4 40 The LPSAT planner 5354 developed LPSAT engine extend approach solve problems metric planning planning realvalued quantities quantity gasoline tank However LPSAT planner handle problems involving durative actions continuous change Indeed claims SATbased planning paradigm ex tended deal continuous time inﬁnite number ground actions corresponding inﬁnite set choices execute action long continue 3749 The construction TMLPSAT disproved claims The way issue resolved TMLPSAT encode history terms ﬁnite set interesting time points changes trying encode time 200 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 points time line The clock time interesting time point numeric variable assigned value constraint solver Many rules TMLPSAT generating constraints come directly previous systems The rules deal effects preconditions connecting atomic actions discrete ﬂuents SATbased propositional planners The rules deal discrete discontinuous effects actions numerical ﬂuent numerical preconditions actions LPSAT planner 22 SATbased arithmetic constraint solver As shown Fig 1 SATbased arithmetic constraint solver consists primarily coupled modules 1 A DPLLbased systematic SAT solver 55 RelSAT 6 MiniSAT 20 incremental linear programming LP solver Cassowary 8 A DPLLbased SAT solver depthﬁrst search backtracking space partial truth assignments At deduction phase unit resolution propagation ap plied Modern highpowered SAT solvers enhance basic backtracking search techniques conﬂictdriven learning random restarts nonchronological backtrack ing branching heuristics The modules combined follows The input constraint solver set generalized clauses Each clause disjunction disjunct propositional literal linear equality inequality numeric variables The SAT solver ﬁrst looks propositional partial solution treating linear equation propositional atom called trigger LP solver tries solve set inequalities marked TRUE partial solution If set inconsistent SAT solver utilizes information inconsistency detected backjumping learning adding clause stating linear inequalities TRUE looks new propositional solution It continues going forth propositional nu meric mode ﬁnding solution establishing solution exists reaching given time limit Since introduction LPSAT architecture Wolfman Weld 53 Math SAT 39 general theorem provers CVC Lite 5 developed veriﬁcation community These solvers vary SAT solving techniques incor porate search heuristics special cases easy LP categories identify 23 PDDL PDDL Planning Domain Deﬁnition Language declarative language deﬁn ition causal domains planning problems The basis work PDDL recent extension4 PDDL began work TMLPSAT PDDL comprises ﬁve levels Level 1 contains discrete actions ﬂuents Level 2 adds features 4 Since PDDL22 19 extended IPC4 released The features PDDL remain intact additional features included PDDL22 derived predicates timed initial literals sort deterministic events These features easily incorporated TMLPSAT J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 201 numeric quantities Level 3 allows durative actions cause discrete changes occur ring beginning end action Level 4 allows durative actions cause continuous changes occurrence action Levels 1 4 collectively comprise PDDL21 25 Level 5 24 proposed approved IPC International Planning Committee deterministic realtime temporal model ex ogenous events autonomous processes McDermott 42 proposes alternative incorporating processes events Thus PDDL continuous time modeled ways durative actions discrete effects durative actions discretecontinuous effects atomic ac tions processes events atomic actions These mixed 24 Planners dealing time metric quantities The stateoftheart domain independent planners competed IPC3 39 IPC45 heuristicbased display impressive performance handling numeric andor temporal domains However limited range tem poral metric constraints deal typically require actions ﬁxed constant duration use ﬁxed quantity resources By contrast dealing expressive temporal metric constraints unknown durations uncertain usages resource imposes additional difﬁculties compilation phase TM LPSAT presumably solving phase takes longer solve numeric constraints None planners deal realtime temporal model involving autonomous processes LPG 27 SAPA 17 claim handle durative actions contin uous change The Sekitei program 36 metric planner uses modiﬁed Graphplan search numeric resources solve problem placing software components network In principle planning technique accommodates nonlinear constraints current imple mentation deals linear constraints It deal continuous change The plan graph generated Graphplan 7 representation essentially plan space SATbased planners It possible use plan graphs basis compilation phase SATbased planner BLACKBOX 35 Graphplanbased temporal planners include TGP 50 MILP 16 LPGP 38 LPGP models handles temporal constraints durative actions way similar TMLPSAT projecting time plan graph TGP tem poral constraints imposed actions partial plan checked consistency LP solver extracting plan The difference LPGP plan searched ward TMLPSAT search satisfying solution nondirectional Consequently TMLPSAT suffer difﬁculty caused backward search dealing durative action ending action included plan starting action needs included plan MILP builds plan graph logical constraints 5 httpls5wwwcsunidortmunddeedelkampipc4 202 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 way LPGP converts graph temporal constraints actions integer linear programming problem A number partialorder planners dealt greater lesser extent prob lems involving continuous change including Processes 29 DEVISER 51 SPIE 52 GORDIUS 48 FORBIN 15 Excalibur 18 ZENO 4445 Most ad dressed continuous change substantially restricted setting TMLPSAT ZENO contrast permitted general plan speciﬁcation language mod els concurrency processes general TMLPSATZENO handle concurrent continuous change quantities Like TMLPSAT ZENO restricted piecewise linear function called LP solver plan reﬁnement loop It extremely slow Wolfman Weld 54 report ZENO unable solve simplest logistic problems test LPSAT McDermott 4243 extended estimatedregression planner deal processes continuous change Unlike TMLPSAT planner complete arguably ad vantage course It ﬁnds zero crossings binary search presumably easily extended nonlinear functions current implementation restriction TMLPSAT linear functions constant coefﬁcients 25 Formalisms modeling continuous change The best known study processes AI literature QP theory 22 initi ated large body research physical reasoning processes This extreme opposite end terms language quantities effects processes charac terized purely qualitative terms A number important ideas developed line research incorporated planning literature indirect inﬂuences Davis 13 gives logical analysis QP theory Another formalism closely related work theory hybrid 30 A hy brid automaton combines ﬁnite state machine undergoing series discrete change realvalued variables undergoing continuous change A hybrid collection teracting hybrid automata Fox Long 24 deﬁned semantics PDDL terms hybrid systems The planning problem corresponds reachability problem theory hybrid A bounded reachability problem linear hybrid formulated satisﬁability problem 4 Their encoding based state tran sitions absolute time clocks hand encoding based constraints imposed operators happening time points 3 Extensions restrictions PDDL The input speciﬁcation language TMLPSAT extends PDDL ways The ﬁrst extension actions TMLPSAT numeric parameters For instance actions pourN BS BD pouring N gallons bucket BS bucket BD setovenT setting thermostat oven temperature T play_keyK V playing piano key K volume V PDDL21 25 excludes fea ture existed original version 41 arguments strike cogent J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 203 Numeric parameters obviously greatly increase expressive power language TMLPSAT approach impose additional computational burden One restriction imposed actions numeric terval parameters There concurrent actions6 identical nonnumeric parameters For instance actions pour5 b1 b2 pour2 b1 b2 executed concurrently pour5 b1 b2 pour2 b3 b4 concurrent The restriction necessary entire SATbased methodology rests assumption guessed number signiﬁcant time points number possible entities propositions numeric parameters bounded unbounded collection simultaneous actions form pourN c1 b1 generated problem The restriction reasonable numeric parameters typically ways If value parameter assigned ﬂuenteg setdialN D results dial D set value N actions different numeric parameters mutually exclusive If value parame ter increment ﬂuenteg pourN BS BD increases quantity liquid BD N increases quantity BS N concurrent actions pour5 b1 b2 pour2 b1 b2 combined single action pour7 b1 b2 There exceptions instance action soundF V sounding tone frequency F volume V executed robot electronic speakers It possible robot execute soundF1 V1 soundF2 V2 concurrently different frequencies Our representation handle case By virtue restriction action type identiﬁed func tor nonnumeric parameters For example speak action type pour b1 b2 pouring b1 b2 sure occurs time The second extension PDDL speciﬁcation language supports reusable metric resources including numeric intervalvalued resources held action action lasts released action complete We denote use statement form use resource The motivation extension follows PDDL explicit provision resources It treats numeric resources like numeric quantities Thus concurrent shared uses reusable resource atomic actions modeled PDDL For example suppose agent K identical effectors collection atomic actions ﬂipping switch requires use effector Then clearly possible agent execute K actions concurrently However represented PDDL representing effector separately The result different assignment actions individual effectors considered separately multiplying branching factor K factorial The use interval resources actions atomic durative expressed PDDL inﬁnitely choices lower upper bounds interval allocated action 6 The axioms 46 allow durative actions continue concurrently start simultane ously This requires complex representation identiﬁes durative actions starting time 204 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 RAM memory Problem 12 represented reusable interval resource concurrent uses disjoint subintervals resource Other kinds domains interval resources useful include placing books shelf assignment frequency ranges broadcasters The extension PDDL language supports intervalvalued ﬂuents quantities We incorporated language includes Allens 13 binary interval relations 2 basic useful functions intervals The fourth extension distinguish numeric functions values constant time given problem statement numeric functions values vary time The marked type ﬂoat type ﬂuent For example Bucket domain capacity b bucket sort ﬂoat level b bucket sort ﬂuent This distinction original PDDL 41 removed PDDL21 This feature particularly important TMLPSAT reasons First entity changes value time necessary create separate variable value entity time point Thus N time points ﬂuent F generates N numeric variables ﬂoat F generates numeric variables Second X Y variables equation X AY linear equation value A known compilation time nonlinear equation value A known Since TMLPSAT deal linear equations quantities like ﬂowrate tap ﬂoats equations like changeinquantity ﬂowrate durationofﬂow linear equation variables changeinquantity durationofﬂow A features PDDL handled current version TMLPSAT First TMLPSAT optimize speciﬁed plan metric limitation inherited architecture arithmetic constraint solvers use Second language restricted multiplication terms statically evaluated division denominator statically evaluated Otherwise result nonlinear equation existing SATbased arithmetic constraint solvers deal certainly difﬁcult possible constraint solver All features PDDL included 4 Temporal ontology We use linear realvalued time line The representation constraint lan guage output TMLPSAT characterizes time line terms states world collection signiﬁcant time points A signiﬁcant time point thing changes roughly speaking action event process occurs starts ends In intervals signiﬁcant time points ﬂuents constant numeric undergo continuous change linear function time Every discon tinuous change change derivative numeric ﬂuent occurs signiﬁcant time point Thus states associated time point T The state T consists values ﬂuents activity levels immediately changes place T state T consists values changes place T J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 205 Each time point clock time nonnegative real value These clock times numeric variables constraints set compiler One tricky point arises theory includes realvalued time atomic events actions How deal atomic eventsactions intuitively occur immediately Suppose instance action A precondi tion P effect Q event E triggering condition Q effects P Q It possible A executed E triggered The problem occur If gap A E doesnt E occur sooner If A E occur time sure A occurring E possible way impossi ble The semantics deﬁned Fox Long 24 PDDL Level 5 involves unusual model time line7 An event triggered action event occurs immediately time gap To deal need distinct time points equal clock times Thus represent situation saying A occurs time point T5 E occurs time point T6 different time points clockT5 clockT6 1728 sec We impose order time points time gap Fox Longs semantics Level 4 Level 5 requires time point action occurs separated previous time point ﬁxed positive stant ε corresponding reaction time agent precision agents clock This dependence theory arbitrary quantity ε ugly implementa tion TMLPSAT eliminated Level 5 If idealize events occurring immediate succession actions We maintained ε gap implementation Level 4 applies time points atomic events Level 48 Note event E disable triggering condition additional occurrences E Ti2 Ti3 result constraints solution ﬁnitely time points An atomic action occurs instantaneously An action characterized preconditions hold action effects hold action For example action turn faucet precondition faucet effect faucet In PDDL durative action conceptualized consisting epochs initial ization continuation termination The initialization termination resemble atomic actions instantaneous characterized preconditions discrete effects 7 Actually paper Fox Long clear point Our interpretation best guess intended If isnt right easily changed advantages SATbased planner making kind change generally affects speciﬁc axioms 8 One problematic situation invariant conditions durative action FALSE time ε previous time point TMLPSAT considers case impossible epsilon gap axiom 61 Section 6 requires signiﬁcant time points separated ε zerocrossing axiom 1011 requires signiﬁcant time point exactly invariant condition ceases hold Hence plan gives rise situation considered invalid 206 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 The continuation length time greater ε Its invariants satisﬁed long continues Its effects effect continuously entire duration like effects process discretely end A durative action feasible carried termination begun abandoned For example deﬁne ﬁlling bucket B tap T durative action following properties The initialization preconditions tap T bucket agent location tap bucket effect tap T The continuation precondition tap turned tap bucket location It continuous effect level bucket rises ﬂowrateT The termination precondition tap effect tap An event like atomic action atomic action occur preconditions hold actor chooses atomic event occur precondition hold For example suppose buckets fragile weight limit volumetric capacity If quantity liquid inside exceeds weight limit falls This characterized terms atomic event break BucketB The preconditions B unbroken levelB cid1 weightLimitB The effects B broken levelB 0 A process active extended interval It characterized preconditions effects The preconditions hold interval preconditions cease hold process stops The effects process language Forbus 22 direct inﬂuences numeric ﬂuents Speciﬁcally process ﬁxed inﬂuence collection realvalued ﬂuents derivative ﬂuent given time sum inﬂuences active processes actions inﬂuence For example process ﬁllingBucketB bucket T tap L location pre condition tap T currently pouring B bucket Of course tap continue pour bucket cease ﬁll bucket The process effect increasing levelB rate ﬂowT We allow taps fully There colocated taps pouring simultane ously bucket rate increase level bucket sum ﬂowrates individual taps PDDL permits concurrent actions fairly restrictive conditions designed en sure result concurrent actions meaningful b actions interact destructively synergistically However actions effect increase decrease given numeric ﬂuent executed concurrently net effect welldeﬁned sum separate effects For example pour bucket b1 bucket b2 bucket b3 simultaneously Essentially ditions requiring actions commutative executed order result executing orderings The actual condition imposed sufﬁcient necessary ensure commuta tivity order conditions concurrency computed easily statically J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 207 5 Sample domains Let illustrate PDDL constructs TMLPSAT deal Example 51 The atomic action pouring quantity Q water bucket encoded follows action pour parameters precondition l carrying bs bd l agent bs bucket bd bucket q real l location q 0 q level bs q capacity bd level bd increase level bd q decrease level bs q effect Note realvalued parameter q planner choose pour positive q long q water source room destination Example 52 PDDL Level 3 The action ﬁlling bucket characterized durative action discrete effect follows durativeaction ﬁllBucket1 parameters agent b bucket t tap l location duration condition end duration capacity b level b ﬂowrate t start t start l start b l start t l t b l end t start t end t end increase level b duration ﬂowrate t effect The value duration set planner determines water ﬁll bucket It critical Examples 53 54 quantity ﬂowrate t evaluated statically If quantity variable equation nonlinear existing SATbased arithmetic constraint solvers deal The PDDL semantics allow ﬂuent value changes effect durative action referable updatable actions course action Thus possible bucket ﬁlled different taps concurrently For instance ﬁll Bucket1a1b1t1sl1 ﬁllBucket1a2b1t3sl1 concurrent However mutex rule called moving target level b actions ﬁnish time 208 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 In model durative action makes change numeric ﬂuent change occurs instantaneously end points action However cases actual change ﬂuent occurs gradually course action Therefore middle occurrence durative action value given model correct The model durative actions given Example 53 overcomes limitations Example 53 PDDL Level 4 The action ﬁlling bucket characterized durative action causing continuous change follows durativeaction ﬁllBucket2 parameters agent b bucket t tap l location duration condition start t start l start b l start t l b l t level b capacity b end t start t end t increase level b t ﬂowrate t effect In line t special variable instant exe cution durative action denotes length time elapsed action started Unlike model Example 52 representation allows actions access correct value continuously changing ﬂuent time point period action Example 54 PDDL Level 5 The action ﬁlling bucket characterized atomic action turning tap followed process ﬂow tap bucket followed atomic action turning tap action turnOnTap parameters precondition effect agent t tap b bucket l location l b l t l t t ﬁlling t b process ﬁllingBucket parameters precondition b bucket t tap l location ﬁlling t b level b capacity b b l effect increase level b t ﬂowrate t action turnOffTap parameters precondition agent t tap b bucket l location l t l t ﬁlling t b J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 209 effect t ﬁlling t b Example 55 Reusable metric resources We model domain ﬁlling bucket different way Assume taps classiﬁed small capacity big capacity A number taps capacity location Let ﬂow rate tot ﬂowrate tap type tot let nooftaps tot l number taps type tot location l Then ﬁllBucket2 shown Example 53 represented follows durativeaction ModiﬁedﬁllBucket2 parameters agent b bucket tot TypeOfTap l location duration condition start l start b l b l level b capacity b effect increase level b t ﬂowrate tot use nooftaps tot l 1 If large number taps type given location representation reduces symmetry search space previous repre sentation taps represented individually In individualistic representation search space include possible set taps representing collec tion type taps multiplecapacity resource set summarized numeric ﬂuents Also representing resource numeric ﬂuent suggests way deal dynami cally creating destroying objects Example 56 Partitioned interval resource As described Problem 12 operating uses variablelength partitions memory model job occupies secutive segment RAM ﬁxed ﬁnishes RAMspace deﬁned resource type interval extended PDDL The consecutive segments allocated jobs running concurrently disjoint subintervals RAM space durativeaction executeJob parameters j job duration condition start active j duration timefor j active j end active j start active j end active j use RAMspace memoryfor j effect 210 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 6 Compilation constraints In section domain deﬁnition problem speciﬁcation given PDDL translated collection constraints constraint Boolean combination propositional atoms linear inequalities numeric variables The constraints9 presented section summarized Table 1 The examples seen section Bucket domain deﬁned Appendix A speciﬁed We deﬁne following propositional atoms numeric variables Deﬁnition Propositional atoms For time Ti Boolean ﬂuent F assertion F holds Ti We notate F Ti Table 1 Summary constraints Category Atomic action Event Process Zero crossings events processes Durative action Frame axiom Time points Reusable metric resources Reusable interval resources Intervals Constraints Section Page Effects Preconditions Mutual exclusion Effects Preconditions Immediate triggering discrete change Mutual exclusion Effects Preconditions Triggeringterminating continuous change Precondition effects Constraint duration Coherence Invariant conditions Continuous effects Propositional interval ﬂuents Numeric ﬂuents Gap time points Allocation deallocation Propagation Constraint capacity Segment allocation Frame axiom Nonoverlap Interval ﬂuents 611 612 613 621 622 623 624 631 632 6101 641 642 643 644 645 651 652 66 671 672 673 691 692 693 68 212 214 214 214 214 215 215 215 216 220 216 217 217 218 218 218 218 218 219 219 219 219 220 220 219 9 The corresponding axioms numbered based subsection number preﬁx constraints dealt J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 211 For time Ti nonBoolean discrete ﬂuent F value V asser tion F value V Ti We notate F Ti V For time Ti atomic actionevent E assertion E occurs Ti We denote activeETi For time Ti process P assertion activeP Ti assert P active open interval Ti Ti1 For time Ti durative action A assertions A starts Ti A continuing Ti A ends Ti We denote startsATi continuesATi endsATi respectively Deﬁnition Numeric variables QT The clock time signiﬁcant time point Ti denoted cTi For time Ti numeric ﬂuent Q value Q Ti respectively These equal We notate QT atomic action event discretely changes value Q time Ti Note equal QT domains change discrete QT i1 theories change continuous QT The need equal QT values time point arises theories combine discrete continuous change PDDL Levels 4 5 For time Ti interval ﬂuent Z lower upper bound Z Ti noted leftZ Ti rightZ Ti Note continuously changing intervals For numeric ﬂuent Q action event A changes Q incrementally executes discrete increase decrease increase decrease occurrence A makes Q time Ti This denoted cid2A Q Ti This enables add concurrent actionsevents For numeric ﬂuent Q durative action process A changes Q continuously time Ti net change Q A Ti Ti1 This denoted Γ A Q Ti Ti1 For durative action A DurationA Ti numeric variable duration instance A starts Ti Let AP1 Pk Q1 Qm Z1 Zp action P1 Pk discrete pa rameters Q1 Qm numeric parameters Z1 Zp interval parameters Then restriction mentioned Section 323 particular time Ti particular values V1 Vk discrete parameters valuation Qi Zi action form AP1 Pk Q1 Qm Z1 Zp begins time Ti The value Qj values lower upper bound Zj numeric variables appear term right hand assignment statement condition For example pourabsbdql action realvalued parameter q There numeric variable pourq a1b3b4l3T5 meaning a1 pour b3 b4 l3 time T5 For resource R durative action A time Ti R A uses time Ti This denoted UR A Ti 212 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 For durative action A uses interval resource R time Ti numeric vari ables representing lower upper bounds segment R allocated A Ti We denote lowerA R Ti upperA R Ti Notational convention We use following convention labeling timedependent terms If complex term α ﬂuents evaluated values discrete change time Ti denote evaluation αT That evaluated values propositional ﬂuents Ti1 values numeric ﬂuents Ti QT If complex term α ﬂuents evaluated discrete change time That evaluated values Ti denote evaluation αT propositional ﬂuents Ti values numeric ﬂuents Ti QT We begin guessing upper bound N number signiﬁcant time points needed solve problem The signiﬁcant time points T0 TN As discussed Section 4 assume actions events processes executing concurrently numerical parameters10 For example actions poura1b2b32l1 poura1b2b35l1 executed concurrently concurrent processes form ﬁllingBucketb1t2l3 61 Atomic actions 611 Effects A If effect action A assign term α discrete interval ﬂuent F add constraint 11 activeATi F Ti αT For example constraint generated action turnOnTap activeturnOnTapa1t1b2l3T5 ont1T5 Here term α implicit Boolean value TRUE B If effect action A assign term α numeric ﬂuent F add straint 12 activeATi F T αT 10 This slightly variance PDDL semantics allow durative actions For exam ple possible bucket domain given Example 55 ModiﬁedﬁllBucket2a1b1STsl1 starting T2 ModiﬁedﬁllBucket2a1b1STsl1 starting T4 continue concurrently T6 long bucket b1 T6 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 213 For example walking locations represented walking process triggered action arrive event The goasldl action sets distance agent walk follows assign distancetowalk dl distance dl sl The constraint associated activegoa1sl1dl1T5 5 distancedl1sl1 distancetowalka1dl1T C If effect action A increase numeric ﬂuent Q term α add constraints activeATi cid2A Q Ti αT 13 14 activeATi cid2A Q Ti 0 For example constraints associated pour action activepoura2b2b3l1T5 cid2poura2b2b3l1levelb3T5 pourq a2b2b3l1T5 activepoura2b2b3l1T5 cid2poura2b2b3l1 levelb3T5 0 The ﬁrst constraint read If agent a2 pours water bucket b2 bucket b3 location l1 time T5 increase level water b3 action equal poured D Let A1 Ak actionevents change numeric ﬂuent Q incrementally Let E1 Ep actionevents assign Q Add constraint 15 activeE1Ti activeEpTi cid1 QT cid2 QT cid3 cid2Aj Q Ti j For example suppose buckets b1 b2 b3 agent a1 loca tions l1 l2 Then level b1 changed pouring b1 b2 b3 pouring b1 b2 b3 We following constraint levelb1T 5 5 levelb1T cid2poura1b1b2l1levelb1T5 cid2poura1b1b2l2levelb1T5 cid2poura1b1b3l1levelb1T5 cid2poura1b1b3l2levelb1T5 cid2poura1b2b1l1levelb1T5 cid2poura1b2b1l2levelb1T5 cid2poura1b3b1l1levelb1T5 cid2poura1b3b1l2levelb1T5 214 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 Of course speciﬁc scenario 0 events occur concurrently In instances constraints terms end 0 For reason actual process solving constraints nearly difﬁcult guess looking number size constraints E Conditional effects If effect types conditional expression conjunct left implication β add βT 612 Preconditions If action A precondition β add constraint 16 For example constraint generated action turnOnTap activeATi βT activeturnOnTapa1t2b1l3T5 ont2T4 ata1l3T4 att2l3T4 atb1l3T4 613 Mutual exclusion If action A mutually exclusive mutex action event E add constraint 17 activeATi activeETi As mentioned Section 4 PDDL rules 25 mutual exclusion complex statically determined 62 Events 621 Effects The axioms effects event exactly form effects action Section 611 622 Preconditions We assume numeric precondition event nonstrict inequality form τ cid1 0 τ term Otherwise precondition τ 0 τ term involving continuously changing ﬂuents ﬁrst instant precondition TRUE way event triggered exact moment change The applies preconditions processes Let β precondition event E Add constraint 21 activeETi βT For example suppose deﬁne event breakBucket Bucket domain follows event breakBucket parameters precondition broken b b bucket J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 215 effect level b weightlimit b broken b assign level b 0 This gives constraint activebreakBucketb2T5 brokenb2T4 levelb2T 5 weightlimitb2 623 Immediate triggering events discrete change Let β preconditions event E Add constraint cTi1 cTi 22 βT This constraint ensures event E triggered Ti1 discrete change actions events Ti happens immediately ﬁnite time duration change event For example suppose weightlimit b1 55 gallon level b1 50 gallon Ti1 atomic action pour a1 b2 b1 10 l1 occurs Ti Then event breakBucket occur Ti1 Ti1 Ti equal clock times Note zero crossing axiom 107 Section 6101 assumes event triggered numeric precondition attains threshold value correctly handle discrete change discontinuously pushes precondition past threshold value example 624 Mutual exclusion Any interference action event resolved way gives priority event action This enforced axiom 21 axiom 16 axiom 21 asserts event occur preconditions hold axiom 16 asserts action carried preconditions hold Therefore preconditions event E action A satisﬁed logically inconsistent event action occur logical consequence event occur action It domain designers responsibility sure events happening time point interfere theory inconsistent 63 Processes 631 Effects A For process P quantity Q inﬂuenced P let Φ inﬂuence P derivative Q For time Ti add constraints activeP Ti Γ P Q Ti Ti1 Φ cTi1 cTi 31 32 activeP Ti Γ P Q Ti Ti1 0 Note Φ constant statically evaluable non linear For example process ﬁllingBucketb2t3l2 generates constraints 216 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 activefillingBucketb2t3l2T5 Γ fillingBucketb2t3l2levelb2T5 T6 flowratet3 cT6 cT5 activefillingBucketb2t3l2T5 Γ fillingBucketb2t3l2levelb2T5 T6 0 B For quantity Q let P1 Pm processes potentially affect Q Add constraint 33 QT i1 QT cid2 j Γ Pj Q Ti Ti1 For example suppose taps t1 t2 locations l1 l2 Then processes affect levelb1 ﬁllingBucketb1t1l1 ﬁlling Bucketb1t1l2 ﬁllingBucketb1t2l1 ﬁllingBucketb1t2l2 Thus constraint levelb1T 6 levelb1T 5 Γ fillingBucketb1t1l1levelb1T5 T6 Γ fillingBucketb1t1l2levelb1T5 T6 Γ fillingBucketb1t2l1levelb1T5 T6 Γ fillingBucketb1t2l2levelb1T5 T6 632 Preconditions Let β precondition process P Add constraint11 34 activeP Ti βT i1 The atom activePTi means P active interval starting Ti The condition β continue hold entire interval The time point P termi nates signiﬁcant time point Hence β holds Ti Ti1 βT If process triggered terminated discrete change change occur signiﬁcant time point axiom sufﬁce P triggered terminated If process triggered continuous change zero crossing axioms given Section 610 sufﬁce ensure exact moment change constructed signiﬁcant time point For example process ﬁllingBucketb2t3l2 generates constraint activefillingBucketb2t3l2T5 fillingt3b2T5 atb2l2T5 att3l2T5 levelb2T levelb2T 5 cid2 capacityb2 6 cid2 capacityb2 64 Durative actions 641 Conditions effects start end The axioms exactly analogous atomic actions 11 The formulation axioms 47 correct J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 217 642 Constraints duration In PDDL possible specify duration durative action equal speciﬁed term bounded speciﬁed terms One specify terms evaluated beginning action timeannotated start end action timeannotated end Each constraint translated directly corresponding constraint DurationA Ti If duration constraint given form start βduration corresponding axioms form 41 startsATi βDurationA TiT That instance action A starts Ti duration constrained β β evaluated values T Similarly duration constraint given form end βduration corre sponding axioms form 42 startsATi continuesATi1 continuesATj 1 endATj βDurationA TiT j Here axiom 43 j 1 continues literals lefthand implication For example durative action ﬁllBucket1 given Example 52 constraint duration encoded following constraint startsfillBucket1a1b1t1l2T2 continuesfillBucket1a1b1t1l2T3 endsfillBucket1a1b1t1l2T4 DurationfillBucket1a1b1t1l2T2 capacityb1 levelb1T 4 flowratet1 643 Coherence j j cid2 N For durative action A time Ti 1 cid2 N add following constraints A Elapsed time starting action ending action Add constraint 43 startsATi continuesATi1 continuesATj 1 endsATj cTj cTi DurationA Ti B A durative action continue beginning end plan Add constraint 44 continuesAT1 continuesATN C For continuity add constraint 218 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 45 46 47 48 startsATi continuesATi1 endsATi1 endsATi continuesATi1 startsATi1 continuesATi endsATi1 continuesATi1 continuesATi startsATi1 continuesATi1 644 Invariant conditions Let β invariant conditions durative action A Add constraint 49 410 continuesATi βT startsATi βT Termination TRUE FALSE invariant conditions continues point continuously changing quantities handled axiom zero crossing TRUE FALSE axiom 1011 Section 6101 645 Continuous effects period durative action The axiom continuous effects durative action exactly analogous ax ioms given Section 631 continuous effects process startsATi continuesATi initiate continuous change Ti Ti1 65 Frame axioms 651 Propositional interval ﬂuents For ﬂuent F let A1 Ak actions events potentially change F For time Ti value V F add constraint 51 activeA1Ti activeAkTi F Ti F Ti1 652 Numeric ﬂuents No additional frame axioms needed If atomic actions events change quantity F active time Ti terms sum equation axiom 15 0 equation state F change If processes durative actions change F continuing Ti Ti1 terms sum Eq 33 0 equation state F change 66 Gap signiﬁcant time points In Level 4 constraint Ti 61 cTi1 cTi cid1 ε In Level 5 constraint12 Ti 62 cTi1 cid1 cTi 12 See Section 4 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 219 67 Reusable metric resources The encoding ﬁnite resource shared durative actions The encoding sharing resources atomic actions mixed collection atomic ac tions durative actions given 46 uses variables resource level time point An example robot multiple identical manipula tors use durative actions carrying tray concurrently use atomic actions ﬂipping light switch Recall U R A Ti denotes R A uses time Ti 671 Resource allocation deallocation For numeric resource R durative action A let β expression describing R A use period Add constraints startsATi U R A Ti βT 71 72 startsATi U R A Ti 0 73 74 endsATj U R A Tj 0 endsATj startsATi U R A Tj βT 672 Propagation For resource R let A1 Ak actions use R let LR Ti level resource R Ti Add constraint 75 LR Ti LR Ti1 cid2 U R Aj Ti j 673 Capacity constraint For time Ti add constraint 76 0 cid2 LR Ti cid2 capacityR 68 Intervals Predicates functions intervals translated standard way inequalities functions endpoints 1246 69 Reusable interval resources Recall lowerA R Ti upperA R Ti lower upper bounds segment R allocated A Ti Let leftR rightR lower upper bounds interval resource R 691 Segment allocation 91 startsATi upperA R Ti lowerA R Ti βT 220 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 92 93 lowerA R Ti cid1 leftR upperA R Ti cid2 rightR 692 Frame axiom Segments dont 94 95 96 continuesATi lowerA R Ti1 lowerA R Ti continuesATi upperA R Ti1 upperA R Ti startsATi lowerA R Ti1 lowerA R Ti 693 Nonoverlap Let A1 A2 distinct durative actions use R 97 continuesA1Ti continuesA2Ti lowerA2 R Ti cid1 upperA1 R Ti lowerA1 R Ti cid1 upperA2 R Ti 610 Zero crossings 6101 Triggeringterminating continuous change One ﬁnal type constraint trickier This event process triggered terminated continuously changing numerical ﬂuent attaining par ticular value13 Suppose process P1 active times Ta Tb steadily increasing value ﬂuent Q process P2 triggered Q reaches value V transition occur time Tx Ta Tb Suppose absence P2 signiﬁcant change occur Ta Tb consecutive signiﬁcant time points The problem force constraints recognize time point Tx That prevent accepting solution Ta Tb consecutive time points process P2 starts time Tb Worse consider case P2 triggered Q V1 V2 Q V1 time Ta Q greater V2 time Tb Then constraints discover P2 triggered time Ta triggered time Tb conclude occurs The thing happen reverse direction numeric conditions processes conditions durative actions We check tinue hold interval hold endpoints The solution rests fact numeric conditions Boolean combinations linear constraints domains numeric ﬂuent changes continu ously linear function time A simple solution follows Assume numerical constraint appears kind precondition events processes form Qt cid1 0 Qt linear function numerical variables 13 It appear point entirely clear deﬁnition PDDL Level 5 process directly trigger process terminate interaction medi ated event We purpose restriction serves required J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 221 time t We track constraint Qt sure notice constraint TRUE FALSE asserting change positive negative vice versa intermediate signiﬁcant time point zero This gives following constraints 101 QT 102 QT 0 QT 0 QT i1 i1 0 0 These respectively equivalent 103 QT 104 QT 0 QT 0 QT i1 i1 cid1 0 cid2 0 This continuity constraint Q form familiar qualitative process theory 22 The problem constraints generate lots spurious time points constraint form TRUE FALSE actual event process triggered constraint set preconditions preconditions TRUE Generating spurious time points extremely undesirable course number propositional atoms size constraint set proportional number time points We need rephrase constraints way gen erate signiﬁcant time point numerical constraint changes truth value causes entire set preconditions changes truth value We ﬁrst deal case truth value changes FALSE TRUE case changes TRUE FALSE First precondition event process disjunctive normal form express disjunction collection conjuncts This fairly complex manipulation PDDL especially case conditional expression Now consider conjunct F1 Fk Q1 cid1 0 Qm cid1 0 Fi literals Qi linear functions What wish assert condition satisﬁed Ti remains unsatisﬁed Ti1 equivalently satisﬁed time T Ti Ti1 satisﬁed T cid1 Symbolically cid3 105 FpT p QpT cid1 0 cid4 T Ti Ti1 cid4 p FpT p QpT cid1 0 p We convert quantiﬁed formula left hand implication evaluable expression This follows The values Fp change consecutive signiﬁcant time points That FpT FpTi 222 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 Since signiﬁcant time points Qp linear 0 monotonic functions time know QpT cid1 0 QpT QpT i1 0 QpT QpT 0 i1 Hence following axiom sufﬁcient achieve condition 106 cid1cid4 p FpTi cid4 QpT 0 QpT i1 0 QpT i1 QpT cid3 0 p cid4 p QpT cid1 0 The following set axioms14 slightly stronger substantially simpler Qj assert cid1cid4 107 FpTi Qj T 0 p Qj T i1 cid2 0 QpT cid1 0 QpT i1 cid3 cid1 0 cid4 pcid8j The logical relations axioms conjunction ax ioms 103 implies conjunction j axioms 107 implies axiom 106 Since axiom 106 implies 105 conjunction 107 implies 105 That means enforce 107 enforce 105 ensure signiﬁcant zero crossing missed On hand 103 implies 107 means 107 satisﬁed time points satisfy 103ie time point zero crossing constraints That worstcase upper bound practice 107 generates time points signiﬁcant The proof implications follows That axiom 103 implies axiom 107 trivial axiom 107 differs axiom 103 having additional ditions left implication That axiom 106 implies axiom 105 discussed That axiom 107 implies axiom 106 justiﬁed follows Ax iom 107 form 108 β Qj T 0 Qj T i1 cid2 0 Taking contrapositive conditions Qj 109 β Qj T i1 0 Qj T cid1 0 Now trivially Qj T Qj T i1 0 Qj T cid1 0 Qj T 0 Qj T cid1 0 14 The formulation axioms 47 right J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 223 axiom 109 equivalent 1010 β Qj T Qj T i1 0 Qj T cid1 0 0 Qj T Qj T i1 0 Now β conjunction cid4 cid4 FpTi p pcid8j QpT cid1 0 QpT i1 cid1 0 We weaken axiom 1010 strengthening condition β lefthand implication Speciﬁcally replace QpT QpT i1 cid1 0 QpT 0 QpT i1 cid1 0 0 QpT QpT i1 0 Substituting forms left hand axiom 1010 combining straint Qj constraints Qp p cid8 j gives axiom 106 End proof The case change TRUE FALSE applies somewhat different cases On hand preconditions events checked As soon pre condition event TRUE executed necessarily turns precondition FALSE virtue change continuous ﬂuent On hand invariant conditions durative actions checked We detect zero crossings durative actions FALSE TRUE durative action optional planner decided execute time variable starting time generated On hand invariant conditions durative action change TRUE FALSE TRUE Ti Ti1 detected marked impossible15 To construct axiom checking changes TRUE FALSE simply run time backward precondition changes TRUE FALSE time run positive direction changes FALSE TRUE time run backward It sufﬁces exchange T numerical terms axiom 107 cid1cid4 i1 T cid4 1011 FpTi Qj T i1 0 QpT cid1 0 QpT i1 cid3 cid1 0 p Qj T cid2 0 pcid8j The effect constraints essentially generate necessary intermediate time points sort proof contradiction logicbased TMLPSAT trouble proof contradiction For example The process ﬁllingBucketb1t2l2 propositional conditions ﬁllingt2b1 att2l2 atb1l2 numeric condition capacityb1 15 This happen disjunctive precondition depends continuously increasing ﬂuent cid1 2Q cid2 Q 4 224 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 levelb1 cid1 0 These conditions generates constraints fillingt2b1T5 att2l2T5 atb1l2T5 capacityb1levelb1T 5 0 capacityb1levelb1T 6 cid2 0 fillingt2b1T5 att2l2T5 atb1l2T5 capacityb1levelb1T 6 0 capacityb1levelb1T 5 cid2 0 Putting constraints categories like lot constraints cases But things bad look For given plan numerical variables form cid2A Q Ti A inactive Ti Γ P Q Ti Ti1 P inactive Ti Ti1 equal 0 Many constraints turn equations variables variable constant eliminated variable renaming constant folding Others difference constraints form Vi Vj cid1 C Vi Vj variables C constant easy deal 3 6102 Extended example zero crossing Let artiﬁcial example illustrate zero crossing constraints work Suppose following world There numeric ﬂuent N Boolean ﬂuents P Q Process R active causes N grow rate 1 unit second Event E triggered 1 cid2 N cid2 2 P TRUE causes P FALSE Event F triggered N cid1 3 P TRUE causes Q TRUE P FALSE Action A precondition causes P TRUE Initially N 0 P TRUE Q FALSE The goal Q TRUE Note event F bring Q F occurs P TRUE time 3 Any time 1 2 P TRUE immediately cause P FALSE Therefore correct plan wait time 2 execute A P TRUE F occur time 3 immediately A A executed later time 3 The PDDL representation world shown Table 2 The corresponding set axioms shown Table 3 Note omit zero crossing axioms 17 18 Table 3 solution time points16 T1 clock time 0 T2 clock time 3 The remaining axioms notice E triggered At clock time 3 P TRUE F triggered cause Q TRUE Table 4 shows solution symbolically However zero crossing axiom 17 excludes solution left hand implication TRUE right hand FALSE Indeed easily shown solution axioms time 2 cid1 3 points Since QT1 QT2 14 activeF T2 By 6 NT 16 T0 denotes initial state A plan starts T1 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 225 Table 2 PDDL representation extended example define domain ExtendedExample requirements time predicates P Q functions N fluent action A parameters precondition effect P event E parameters precondition 1 N N 2 P effect P event F parameters precondition 3 N P effect Q P process R parameters precondition effect increase N t 1 define problem EEproblem domain ExtendedExample requirements time inits N 0 P goal Q By 4 activeET1 Using 15 1 20 PT2 But contradiction 17 Similarly solution time points There solution time points shown symbolically Table 5 corresponding plan described 7 Soundness completeness We proven soundness completeness proof TMLPSAT restricted class problems extended version PDDL Stating proof involves fol lowing steps First suitable deﬁnition semantics PDDL Level 5 To allow possibility multiple time points clock time described Section 4 use following nonstandard temporal model A time point pair cid9X Ncid10 X positive real number clock time N positive integer N th time points 226 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 Table 3 Axioms extended example 1 activeATi PTi 2 activeATi TRUE 3 activeETi PTi 4 activeETi PTi1 1 cid2 N T Precondition E Axiom 21 5 activeF Ti QTi PTi 6 activeF Ti PTi1 3 cid2 N T 7 activeATi activeETi 8 activeATi activeF Ti 9 NT NT 0 Effect A Axiom 11 Precondition A vacuous Axiom 12 Effect E Section 621 N T cid2 2 Effect F Section Section 621 Precondition F Axiom 21 7 8 mutex conditions In case redundant Section 624 Frame axioms N signiﬁcant time points Axiom 15 Since actions events affect N sum right taken null set 10 activeRTi Γ RNTi Ti1 1 cTi1 cTi Direct inﬂuence process R N Axiom 31 11 activeRTi Γ RNTi Ti1 0 Inﬂuence process R ﬂuent N Axiom 32 12 NT i1 NT Γ RNTi Ti1 Net effect processes N Axiom 33 13 activeRTi TRUE Precondition R Axiom 34 14 activeF Ti QTi QTi1 Frame axiom Q Axiom 51 15 activeATi activeETi activeF Ti PTi PTi1 Frame axiom P Axiom 51 16 cTi1 cid1 cTi 17 PTi NT 1 0 2NT First zero crossing rules precondition E Axiom 107 0 NT 1 cid1 0 NT cid1 0 2NT 18 PTi 2NT i11 cid1 0 2NT i11 cid2 0 i1 cid2 0 Sequence time points Axiom 62 i1 cid1 0 NT Second zero crossing rules precondition E Axiom 107 i13 cid2 0 19 PTi NT 3 0 NT Zero crossing rule precondition F Axiom 107 0 20 PT0 QT0 NT 0 21 QTK Initial state Goal Table 4 Solution constraints zero crossing axiom Time 0 1 2 cTi 0 0 3 Table 5 Correct solution Time 0 1 2 3 4 cTi 0 0 1 3 3 activeA activeE activeF activeR F F F F F F F F T F T T NT NT 0 0 3 0 0 3 activeA activeE activeF activeR NT NT F F F T F F F T F F F F F F T F T T T T 0 0 1 3 3 0 0 1 3 3 P T T F P T T F T F Q F F T Q F F F F T J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 227 clock time Time points ordered lexicographically cid9X1 N1cid10 cid9X2 N2cid10 iff X1 X2 X1 X2 N1 N 2 A history mapping maps time point bounded interval values ﬂuents point sets actions events processes active point A history consistent PDDL domain description obeys rules set forth description A plan mapping maps time point set actions executed point History H projection plan P starting situation S0 relative domain description D H P specify actions times H consistent D S0 starting state H A goal property histories A planning problem speciﬁcation starting state goal domain description A plan correct solution planning problem projection plan starting state relative domain description satisﬁes goal Note constraintbased planning techniques correct results source uncertainty actions carried actions speciﬁed possible projection If possible projection unspeciﬁed starting state constraintbased planner optimistic assumptions set uncontrolled parameters way sets actions carried Second properly delimit class problems A problem candidate TMLPSAT following conditions satisﬁed Let H history We time point T signiﬁcant H action executed HT event occurs HT process begins ends HT A planning problem ﬁnitely solvable exists history satisﬁes problem ﬁnitely signiﬁcant time points Every arithmetic function appears PDDL domain description linear function numeric ﬂuents nonconstant numeric parameters involved constant coefﬁcients Note ﬁrst condition semantic constraint class histories considered second condition syntactic constraint form PDDL scription Moreover general semidecidable semantic constraint holds That inelegant way Third use right notion completeness There different possible notions means planner complete TMLPSAT complete following sense Let G planning problem candidate TMLPSAT Then TMLPSAT executed sufﬁcient number time points return plan valid solution problem 228 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 In Appendix B extensive fully formal account semantic deﬁnition precise statement theorem proof 8 Conclusions future work There exist domainindependent planners handle problems involv ing continuous change numeric quantities The TMLPSAT planner demonstrates SATbased planning framework extended deal problems Other features incorporated TMLPSAT include realvalued intervalvalued ﬂuents ex ogenous events processes atomic durative actions numeric parameters reusable metric interval resources To permit representation fea tures introduced number extensions PDDL description language We tested encoding generated TMLPSAT compiler different SAT based arithmetic constraint solvers number problems varying complexity characteristics We proven TMLPSAT sound complete signiﬁcant subset extended description language The contributions work We shown SATbased planning framework reasoning continuous change This disproves previous claims cited Section 21 impossible The capability TMLPSAT dealing issues typical scheduling prob lems metric quantities reusable resources suggests SATandLP based planning techniques offer bridge spanning divide domain independent planning scheduling Our approach dealing continuous change continuous timespeciﬁcally characterization overall behavior terms values ﬂuents signiﬁ time pointsmay applicable planning methodologies Graphplan 7 The current version TMLPSAT following limitations The existing SATbased arithmetic constraint solvers deal Boolean com binations linear inequalities propositional atoms This makes necessary require numeric terms preconditions effects linear functions ﬂuents continuous effect processes durative actions constant inﬂuence derivative affected ﬂuent It possible TMLPSAT specify given plan metric optimized This limitation inherited architecture constraint solvers LPSAT 53 MathSAT 39 The search strategy TMLPSAT return plan minimum number signiﬁcant time points plan minimum number actions let metric Neither compilation process encoding optimized current version TMLPSAT J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 229 Scalability certainly concern SATbased planners The question far optimized encodings heuristics constraint solvers based domain characteristics running intractable combinatorial explo sion Some thoughts overcoming limitations As regards nonlinear constraints It certainly possible current tech nology develop powerful arithmetic constraint solver solve Boolean combinations nonlinear constraints How effective solver guess If engine constructed allow easy extensions TMLPSAT First obviously possible use nonlinear arithmetic terms preconditions righthand assignment increment effects Second little subtly allow processes continuous effect output ﬂuent constant depends numeric ﬂuent set atomic action event For example Bucket domain modiﬁed allow agent turn tap desired level ﬂowrate In Zeno domain 53 possible set desired constant speed airplane affect rate motion rate fuel sumption Since domains numeric ﬂuents piecewise linear functions time breaks signiﬁcant time points TMLPSAT compilation rules cluding zero crossing rules valid proof soundness completeness essentially unchanged Extensions involve substantially greater difﬁculties If effect process depends ﬂuent value changes continuously differ ential equation solved particularly dependencies cycle If numeric ﬂuents nonlinear functions time hard guarantee monotonic functions time monotonic zero crossing rules Section 6101 insufﬁcient The constraint solver need incorporate zero crossing detector We think couple approaches adapt TMLPSAT plan optimization17 If upper bound placed N number time points objective function M optimized adding constraint form M cid2 B B constant binary search ﬁnd smallest possible value B However strategy ﬁnd overall optimal plan N bounded In principle course dovetail search B N dovetailing surely suited proofs computation theory practical programming A promising approach modify interaction SAT solver LP solver arithmetic constraint solver use branch bound 31 The problem space consists collection states Each state represented sets 17 One difﬁculty plan optimization domains rich exist optimal plan easy construct problems plans better better number actions increases number signiﬁcant time points increases duration plan goes inﬁnity ﬁnite limit value numeric action parameter goes inﬁnity ﬁnite limit Moreover optimal solution known existeg metric positive integer searching minimumproving particular solution optimal undecidable 230 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 constraints logical constraints mixed logical linear constraints sets share action variables appearing mixed constraints The relaxed version mixed constraints solved set logical constraints satisﬁable optimal value relaxed constraints gives lower bound minimization problem mixed constraints bound optimal value problem values action variables solution satisfy set logical constraints prune search space branch current state This approach believe prune search space quickly action variables shared sets constraints The major challenge derive heuristics decide branching variable pick state solve Currently working approach incremental SAT solver LP solver Optimization techniques known propositional domains extended tem poral metric domains adding domain axioms state constraints inferred domain analysis 26 preprocessing step reducing encoding size removing unnecessary action instantiations type analysis 23 compilation stage simplify ing binary clauses encoding produced compiler generally numerous SAT encoding planning 10 In SATbased arithmetic constraint solver known running time dom inated time consumed LP solver 154 In order reduce calls LP solver optimization technique encoding compiling phase lift arithmetic constraints mutually exclusive Boolean level In example Sec tion 6102 inequalities NTi cid2 2 axiom 4 Table 3 3 cid2 NTi axiom 6 mutually exclusive If add mutual exclusion clause SAT solver assign precisely Boolean triggers TRUE partial propositional solution Thus necessary pass LP solver ﬁnd inconsistency The detection arithmetic constraints mutually exclusive encoding generally preprocessing step constraint solver called static learning It certainly expensive encoding phase The layered structure adopted MathSAT 39 effective approach reduce unnecessary calls LP solver generally computationally expensive routines It known branching heuristic utilizing characteristics speciﬁc encoding planning domains nondeterminism choices actions drastically reduce run ning times 28 Our preliminary experiments different branching heuristics big difference running time planning problem temporal metric domains We know SAT solver SATbased arithmetic constraint solver specially tailored planning domains Our ongoing work branchandbound architecture built LP SAT solvers combine completeness heuristics coming planning domains We preliminary experiments18 IPC3 problem domains 39 Bucket domain number SATbased arithmetic solvers based different algo rithms The intention experiments observe feasibility encoding 18 The report available httpcsnyuedujiaepapersexperimentspdf J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 231 scalability approach temporal metric domains features different straint solvers react characteristics constraints speciﬁc different kinds planning metric planning discrete time temporal planning durative actions temporal metric planning realtime model The difﬁculty solving constraint set generally grows rapidly size shows striking difference performance different constraint solvers This particularly apparent problems Bucket domain constrained intertwine metric constraints temporal constraints For temporal planning problems arithmetic constraint set consists equality equations solver specialized routine equality equation variant BellmanFord algorithm layered delayed architecture 39 performs considerably better Currently constraint solver black box advanced analysis left future work Finally plan explore applications type planning It possible implement kinds spatial reasoning allowing regionvalued ﬂuents motion process If regions restricted polygons polyhedra fully speciﬁed speciﬁed maximum complexity motions constantvelocity translations possible compile domains systems linear constraints Acknowledgements Our special thanks Steven Wolfman Daniel Weld making LPSAT program available research The MathSAT group kindly allowed access versions MathSAT We like thank anonymous reviewers valuable suggestions comments The research reported paper supported NSF grant IIS0097537 Appendix A The bucket domain problem extended PDDL A1 The bucket domain Deliver specified water specified locations specified deadline Bucket Domain Assumptions location time allowing concurrent continuous change level bucket Zero tap location Each tap fills bucket time Each bucket filled tap 232 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 define domain Buckets requirements time continuouseffects types predicates agent bucket tap location o agent bucket tap l location t tap filling t tap b bucket carrying agent b bucket is_walking agent d location connected s location d location functions capacity b bucket float flow_rate t tap float walking_speed agent float distance s location d location float amount_of_water l location fluent distance_to_walk agent d location fluent level b bucket fluent Filling buckets taps action parameters precondition turnOnTap agent t tap b bucket l location l b l t l t t filling t b l t l t filling t b t filling t b turnOffTap agent t tap b bucket l location fillingBucket b bucket t tap l location b l t l filling t l level b capacity b increase level b t flow_rate t effect action parameters precondition effect process parameters precondition effect J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 233 Moving buckets locations pickUp agent b bucket l location l b l b l carrying b putDown agent b bucket l location l carrying b b l carrying b action parameters precondition effect action parameters precondition effect action parameters precondition effect agent s location d location s connected s d connected d s is_walking d s is_walking d assign distance_to_walk d distance d s process parameters precondition walking agent d location is_walking d distance_to_walk d 0 effect decrease distance_to_walk d t walking_speed event effect parameters precondition arrive agent d location is_walking d distancetowalk d 0 is_walking d d Filling buckets location action pour 234 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 parameters agent s bucket d bucket q real l location precondition effect l carrying s d l q 0 q level s q capacity d level d decrease level s q increase level d q action parameters precondition effect A2 A bucket problem deliver agent b bucket l location q real l carrying b q 0 q level b increase amount_of_water l q decrease level b q 1 turnOnTapERNIETAP1BUCKET1SL fillingBucketBUCKET1TAP1SL fillingBucketBUCKET2TAP1SL 2 turnOffTAPERNIETAP1BUCKET1SL 3 turnOnTapERNIETAP1BUCKET2SL The Problem 11 Section1 A possible solution 4 pickUpERNIEBUCKET1SL 5 goERNIESLDL walkingERNIEDL 6 arriveERNIEDL 7 deliverERNIEBUCKET1DL1 8 goERNIEDLSL walkingERNIESL 9 arriveERNIESL 10 turnOffTAPERNIETAP1BUCKET2SL 11 pickUpERNIEBUCKET2SL 12 goERNIESLDL walkingERNIEDL 13 arriveERNIEDL 14 deliverERNIEBUCKET2DL4 define domain requirements time continuouseffects objects problem problem11 Buckets DL location SL location TAP1 tap BUCKET1 bucket BUCKET2 bucket J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 235 ERNIE agent ERNIE SL BUCKET1 SL BUCKET2 SL TAP1 SL flow_rate TAP1 01 walking_speed ERNIE 5 capacity BUCKET1 4 capacity BUCKET2 4 distance SL DL 100 distance DL SL 100 amount_of_water SL 0 amount_of_water DL 0 distance_to_walk ERNIE SL 0 distance_to_walk ERNIE DL 0 level BUCKET1 0 level BUCKET2 0 connected SL DL connected DL SL amount_of_water DL 5 totaltime 70 init goal Appendix B Proof soundness completeness In appendix present proof TMLPSAT sound complete substantial subset extended version PDDL Level 5 We carry analysis point formal semantics sense fully speciﬁed mapping symbolic form PDDL description ontological model rely informal reading PDDL description We conﬁdent aspects formal semantics dealt involve issues established theory formal semantics representations essentially orthogonal issues deal Our focus deﬁning valuation discrete numeric variables characterizes behavior realvalued time establishing formal constraints generated TMLPSAT correspond meaning PDDL representation The subset PDDL Level 5 deal includes atomic actions events discrete numeric ﬂuents processes It include intervalvalued ﬂuents resources conﬁdent extending proof cover straightfor ward uninteresting For remainder appendix use PDDL mean subset PDDL dealing To simplify exposition section ignore issue actions numerical parameters deﬁnitions complex present substantive difﬁculty At end sketch incorporated Formulating proving theorems involves following steps 236 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 1 Deﬁning ontology microworld PDDL plans executed 2 Deﬁning semantics PDDL problem statement terms ontology 3 Deﬁning relation valuation variables TMLPSAT microworld entities 4 Identifying rare circumstances physical projection processes underdetermined 5 Formalizing proving sense TMLPSAT sound complete In particular different senses planner complete applies TMLPSAT B1 Ontology We assume disjoint ﬁnite sets actions events processes ﬂuents Each ﬂuent F associated set possible values denoted valsF If F discrete valsF ﬁnite set nonnumeric values If F numeric valsF set real numbers Deﬁnition B1 A situation fourtuple cid9A E P Mcid10 A set actions E set events P set processes M mapping set ﬂuents ﬂuent F MF valsF We use Pascalstyle dot notation denote ﬁelds tuple example S situation SA set actions S SP set processes To allow possibility multiple time points clock time discussed Section 4 use following nonstandard temporal model Deﬁnition B2 A time point pair cid9X Ncid10 X real number N positive integer Intuitively cid9X Ncid10 N th time point counting 0 clock time X Time points ordered lexicographically cid9X1 N1cid10 cid9X2 N2cid10 iff X1 X2 X1 X2 N1 N2 Deﬁnition B3 A time interval I nonempty set time points T 1 I T 2 I T 1 T T 2 T I If T 1 T 2 time points T 1 T 2 closed interval T 1 T 2 usual set time points T T 1 cid2 T cid2 T 2 Deﬁnition B4 For time point T cid9X Ncid10 N 0 time point preceding T point cid9X N 1cid10 If N 0 time point preceding T Deﬁnition B5 Let I cid9X1 0cid10 cid9X2 Ncid10 closed time interval A history H I mapping I situations The following abbreviations convenient Let H history time interval I cid9X1 0cid10 cid9X2 Ncid10 We write I domH read domain H J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 237 real interval X1 X2 domXH read Xdomain H For time point T domH ﬂuent F write H T F abbreviation H T MF write ΦHF X function domXH deﬁned ΦHF X H cid9X 0cid10 F Note H T A H T E H T P respectively set actions events processes active H time point T Deﬁnition B6 A history H T 0 T 1 compact following holds For TA TB TA cid8 T 0 TAX TBX TAN TBN H TAA H TAE H TBA H TBE That looking sequence time points cid9X 0cid10 cid9X 1cid10 time points action event happens compacted beginning se quence exception starting time point history Deﬁnition B7 Let H history let X domXH We processes H constant X exists neighborhood XA XB X active processes change That TC TD XA TCX XB XA TDX XB H TCP H TDP If processes H constant X X time process change H Deﬁnition B8 Let H history let T time point domH T signiﬁcant time point H T starting time point H T ending time point H H T A cid8 H T E cid8 T X time process change T N 0 Deﬁnition B9 A history H ﬁnite complexity ﬁnitely signiﬁcant time points H monotonous real interval XA XB signiﬁcant time point T T X XA XB In follows write history mean compact history ﬁnite complex ity Deﬁnition B10 Let H history T time point domain H F ﬂuent Assume T starting time point H Value V value F T following conditions satisﬁed If T N 0 V H T 1 F T 1 point preceding T If T N 0 F discrete exists T 0 T T 1 T 0 T 1 T V H T 1 F If T N 0 F numeric V limit ΦHF X X approaches T X 238 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 If α term computed ﬂuents value α T α computed values ﬂuents T If α Boolean expression value α T TRUE sense α holds T Deﬁnition B11 A plan P mapping bounded time interval I For T I P T ﬁnite set actions P T ﬁnitely T We write I domP domain P Intuitively P T set actions plan says executed time T B2 Semantics PDDL Deﬁnition B12 A PDDL planning problem triple cid9D S Gcid10 D PDDL domain representation S PDDL representation starting situation G PDDL representation goal In Section 6 PDDL representations starting situation goal compiled axioms obvious b SATbased planner We similarly discuss issue We assume PDDL representation starting situation uniquely determines situation If S PDDL representation starting situation write SitS denote actual situation As goals purposes goal essen tially property history assume translation PDDL goal corresponding property correctly The following long deﬁnition contains details meaning constructs PDDL terms properties history As common kind semantic deﬁnition lefthand deﬁnition tautological rewording righthand Likewise notable strong resemblance deﬁnition description constraint compiler Section 6 This resemblance expected b means large parts proof correctness trivial c limits substantially degree exhibition soundness correctness proof kind ac tually increases readers conﬁdence compiler augments understanding Deﬁnition B13 Let H history let D PDDL domain representation H forms D following conditions hold 1 If action Z H T A event Z H T E D speciﬁes Z assigns term τ ﬂuent F H T F equal value τ T 2 If F numeric ﬂuent action Z H T A event Z H T E D speciﬁes Z assigns value ﬂuent F H T F equal J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 239 value F T plus sum actionsevents Z H T A H T E increasedecrease Z causes F 3 Frame property Let F discrete ﬂuent let T 1 T 2 time points T 1 T 2 Then H T 2 F H T 1 F exists time T T 1 T cid2 T 2 action Z H T A event Z H T E D speciﬁes Z assigns value ﬂuent F 4 If action Z H T A precondition Z holds T H sense Deﬁnition B10 5 Event E H T E precondition E holds T H 6 Process P H T P precondition P holds T H 7 Suppose H monotonous real interval X1 X2 Let F numeric ﬂuent Then 71 The function ΦHF continuous differentiable X1 X2 72 For x X1 X2 derivative d dX ΦHF X time x equal sum processes P H cid9x 0cid10P inﬂuence P F time cid9x 0cid10 73 For sufﬁciently large N H cid9X1 Ncid10 F equal limit ΦHF x x approaches X1 Deﬁnition B14 Let P plan let H history let S PDDL representation starting situation let D PDDL domain description H projection plan P starting S following D following conditions hold domP domH For T domH H T A P T A SitS starting situation H H conforms D As shall Lemma B1 P S D exists projection rare exceptions discussed Deﬁnition B15 Let R cid9D S Gcid10 PDDL problem History H historical solu tion R H starts SitS conforms D achieves G A ﬁnite plan P planning solution R projection P starting S following D historical solution R Note constraintbased planning techniques correct results source uncertainty actions carried actions speciﬁed possible projection If possible projection unspeciﬁed starting situation constraintbased planner optimistic assumptions set uncontrolled parameters way sets actions carried Note deﬁnition correctness plan works complete plan representations partial plan rep resentations returned TWEAK 11 require complex deﬁnition correctness 240 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 B3 Valuations interpretations Deﬁnition B16 Let R PDDL problem representation Let T0 Tk sequence k 1 distinct symbols called time point variables We deﬁne set ATOMSR k set following atoms For time point variable Ti The atom cTi For action event process Z R atom activeZTi For discrete ﬂuent F R atom F Ti For numeric ﬂuent F R atoms F T For numeric ﬂuent F action event Z potentially changes F F T incrementally atom cid2F ZTi For numeric ﬂuent F process P potentially inﬂuences F atom Γ F P Ti Ti1 Deﬁnition B17 A Tvaluation V assignment atom ATOMSR k value appropriate sort j VcTi cid2 VcTj Deﬁnition B18 Let V Tvaluation ATOMSR k The time point mapping V function τ Ti time points deﬁned follows τ Ti cid9X J cid10 X VcTi Ti J th time point variable X VcTi That VcTi VcTi1 VcTiJ cid8 VcTiJ 1 Deﬁnition B19 Let V Tvaluation ATOMSR k Let τ time point map ping V Plan P indicated V For Ti Pτ Ti set actions A VactiveATi TRUE For T T cid8 τ Ti P T Deﬁnition B20 Let D domain description let V Tvaluation let H history Let τ time point mapping V H corresponds V 1 domH τ T0 τ Tk 2 If j τ Ti τ Tj 3 For Ti H τ Ti A A V activeATi TRUE 4 For Ti H τ Ti E E V activeETi TRUE 5 For discrete ﬂuent F H τ Ti F V F Ti 6 For numeric ﬂuent F H τ Ti F V F T 7 Let T time point domH Let Ti greatest time variable τ Ti cid2 T 71 If T cid8 τ Ti H T A H T E 72 For discrete ﬂuent F H T F V F Ti 73 If T X τ TiX J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 241 731 For numeric ﬂuent F H T F V F T 732 For process P P H T P preconditions P deﬁned D satisﬁed T H 74 If T X τ TiX 741 For numeric ﬂuent F let cid5 T X τ T q X cid5 cid6 τ Ti1X τ TiX cid6 Then H T F 1 qV F T Linear interpolation signiﬁcant points 742 H T P P V activeP Ti TRUE qV F T i1 Note signiﬁcant time Ti subsequent nonsigniﬁcant times clock time activity process H awkwardly deﬁned terms preconditions speciﬁed domain description D reason including D parameter deﬁnition The reason follows Recall discussion axiom 34 deﬁned activeP Ti mean P active interval starting Ti Therefore P comes end Ti V activeP Ti FALSE However H P active T τ Ti preconditions satisﬁed Ti P active T H preconditions FALSE zero crossing come negative T inactive T H preconditions FALSE T discrete change The valuation V distinguish cases needs know domain deﬁnition Of course effect process differential process active instant actually makes difference B4 Indeterminate projections As discussed constraintbased approach planning relies assumption plan unique projection ﬁx actions termines happen Unfortunately theory include processes kind PDDL rare cases assumption false The problem arises following reason A processes effect imposes set ordinary differential equations ODEs numerical ﬂuents involved In standard applications ODEs rely standard existence uniqueness result initial value problems guarantee having set starting condition differential equation history develop way However result holds driving function ODE continuous PDDL processes deﬁne dis continuous driving function existence uniqueness guaranteed cases history develop way Consider following example There numeric ﬂuent F processes P 1 P 2 P 1 precondition TRUE increases F rate 1 unit second P 2 precondition F cid2 0 decreases F rate 1 unit second Suppose F 0 time T 0 Then T 1 cid1 0 following consistent behavior 242 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 For time T If 0 cid2 T cid2 T 1 P 1 P 2 active T F 0 If T 1 T P 1 active T F T T 1 This corresponds fact differential equation cid7 F 0 F cid2 0 1 F 0 inﬁnitely solutions allows solution ﬁnitely points continuous differentiable However history H encounters problem time T following condition met necessary condition problem sufﬁcient condition Indeterminacy condition There dependency cycle processes numeric ﬂu ents preconditions P1 F1 Φ1 P2 Φk P1 process Pi active T inﬂuences ﬂuent Fi Fi involved precondition Φi Φi precondition process Pi1 satisﬁed borderline time T A history H satisﬁes Unique Projection Condition UPC satisﬁes indeterminacy condition In principle possible add unique projection condition TMLPSAT constraint The theoretical advantage slightly improved pair soundness completeness results discussed We implemented In actual domains PDDL representation reasonable approximation possible determine compilation time circularity arise ﬂuents processes UPC axioms formulated If domain kind circular dependence ﬂuents processes unlikely adequately modeled constantrate inﬂuences The theoretical improve ment algorithm rare cases UPC axioms effect worth programming effort B5 Constraints theorems Finally introduce notation set constraints generated TMLPSAT state soundness completeness theorems prove theorems Deﬁnition B21 Let R planning problem let k positive integer We deﬁne TMLPSATk R set constraints constructed R ATOMSR k deﬁned Sections 61 62 63 65 66 610 versions 107 1011 zero crossing axioms excluding mutex axioms Sections 613 624 The mutex axioms useful enforcing certain regularity conditions important contexts standard semantics PDDL context proof way J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 243 Let Λ algorithm constraint solver achieves following Λ takes input set constraints C form produced TMLPSAT If constraints C solution Λ returns Tvaluation solution C If constraints C solution Λ returns ﬂag indicating solution Theorem B1 Soundness Let R planning problem If ΛTMLPSATk R returns Tvaluation V V satisﬁes UPC plan indicated V planning solution R Theorem B2 Completeness Let R planning problem If exists planning solution R value k ΛTMLPSATk R returns Tvaluation V By Theorem B1 V satisﬁes UPC V indicates planning solution R The pair theorems close tight following reason One construct problem R correct plan P 1 satisﬁes UPC plan P 2 satisfy UPC projections P 2 satisfy goal Such plan P 2 correct solution problem execute sure accomplishing goal In case things ΛTMLPSATR It return valuation indicates P 1 In case check P 1 satisﬁes UPC certain correct plan It return valuation indicates P 2 In case detect P 2 violates UPC If accept P 2 accepting incorrect plan If reject P 2 failed ﬁnd plan exists plan satisﬁes UPC We tighten principle adding UPC constraints generated TMLPSAT Let TMLPSATU k R TMLPSATk R UPC Thus TMLPSATU applied problem return P 1 P 2 Theorem B3 Let R planning problem For k ΛTMLPSATU R k returns Tvaluation V V indicates plan ning solution R satisfying UPC If exists planning solution R satisfying UPC exists k ΛTMLPSATU R k returns Tvaluation V indicates planning solution R satisfying UPC B6 Proofs The proofs theorems follow series lemmas Lemma B1 Let D PDDL domain description let S PDDL representa tion starting situation Let P ﬁnite plan Then exists history H 244 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 ﬁnite complexity projection P starts S conforms D satisﬁes UPC Proof By contradiction Suppose exist histories H 1 cid8 H 2 Note TS starting time point domP SitS H 1TS H 2TS Note domP domH 1 domH 2 Let interval I maximal initial segment domP T I H 1T H 2T I constructed union initial segments I 1 domP T I 1 H 1T H 2T There cases considered Case 1 I form TS TE ending point TE Let TE1 time point following TE Then P determines actions TE1 Deﬁnition B13 parts 5 6 deter events processes TE1 Deﬁnition B13 parts 1 2 3 determine value ﬂuents TE1 Hence H 1TE1 H 2TE1 Case 2 I form T TS cid2 T T X XE upper bound XE Let TE1 cid9XE 0cid10 Then situation TE1 determined argument 1 Case 3 I form T TS cid2 T T X cid2 XE upper bound XE In case situation I arguments cases 1 2 ap ply Rather proceed follows Since H 1 H 2 ﬁnite complexity exists XF XE NE events actions cid9XE NEcid10 cid9XF 0cid10 H 1 H 2 That actions events occur interval values discrete ﬂuents change interval class active processes change interval T cid9XE NEcid10 cid2 T cid9XF 0cid10 Let TE cid9XE NEcid10 By virtue UPC topological sorting numerical ﬂuents processes active TE numerical preconditions processes active TE borderline process comes preconditions ﬂuent comes af ter processes inﬂuence precondition comes ﬂuents references Since numerical ﬂuents continuous absence actions events exists XG XE time points T XE T X XG numeri cal preconditions borderline TE remain truth value TE Going topological sorting order predict interval TE TH THX XE value numeric ﬂuent determined value TE processes preceding list truth borderline precondition determined numerical ﬂuents preceding list activities processes determined preconditions preced ing list Thus history determined time I contrary assumption cid1 Lemma B2 For Tvaluation V domain description D exists unique tory H corresponds V relative D Proof Deﬁnition B20 gives explicit fully determined construction H V D cid1 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 245 In following deﬁnitions let R planning problem let D domain scription R let V Tvaluation let H history let τ time point mapping V Deﬁnition B22 A valuation V covers time point T exists time point variable Ti T τ Ti Lemma B3 If H corresponds V relative D action event A occurs T H V covers T Proof Contrapositive 71 Deﬁnition B20 cid1 Deﬁnition B23 Let T time point domH T signiﬁcant1 precondition Φ event TRUE T T signiﬁcant2 precondition Φ process Φ FALSE H T Φ TRUE H T T signiﬁcant3 precondition Φ process follow ing holds Φ TRUE H T FALSE H T Φ TRUE H T T N 0 exists X2 T X X1 N1 T X X1 X2 Φ FALSE H cid9X1 Ncid10 Lemma B4 Let I initial segment domH Let Ti time variable τ Ti I τ TiX τ Ti1X Let time interval I 1 T I τ Ti T τ Ti1 Let T 1 time point I 1 Let T 2 time point I 1 T 2X τ TiX If V satisﬁes TMLPSATk R H corresponds V A τ Ti1N 0 B If τ TiX T X τ Ti1X P active T V activeP Ti TRUE C H monotonous real interval τ TiX T 2X D If F discrete ﬂuent H T 1 F H τ Ti F E Let PP H T 2P Let F numeric ﬂuent Let Γ sum P PP inﬂuence P F Then H T 1 F H τ Ti F Γ T 1X τ TiX i1 F For numerical ﬂuent F value F Ti1 equal V F T Proof A Immediate Deﬁnition B18 time point mapping B From Deﬁnition B20 742 T active processes V activeP Ti TRUE C By Lemma B3 actions events occur H uncovered points By B set processes remains constant times process change Hence T 2XT 3X monotonous 246 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 D Immediate Deﬁnition B20 72 E There cases consider E1 T 1X τ TiX In case result immediate Deﬁnition B20 731 E2 T 1X τ TiX By axioms 31 32 33 difference V F T V F T equal sum processes P V activeP Ti TRUE inﬂuence P F times V cTi1 V cTi By B set PP sum Γ By Deﬁnition B20 2 VcTi τ TiX i1 cid5 F T V cid6 i1 V cid5 F T cid6 Γ cid5 τ Ti1X τ TiX cid6 By Deﬁnition B20 741 cid5 cid5 F T qV F T H T F 1 qV i1 cid6 cid5 cid6 cid5 τ Ti1X τ TiX T X τ TiX q cid6 cid6 By Deﬁnition B20 731 H τ Ti F V F T algebraic manipulation gives desired result Combining F Again cases F1 τ Ti1N 0 In case value F τ Ti1 value H T 1 F T 1 situation precedes τ Ti1 Since history H compact action event occur T 1 Hence Lemma B3 T 1 τ Ti By Def By axioms 31 32 33 inition B20 6 H T 1 F V F T V F T V F T F2 τ Ti1N 0 In case value F τ Ti limit ΦHF X i1 X approaches τ TiX By E ΦHF H τ Ti F Γ τ Ti1X τ TiX Using E axioms 31 32 33 equal V F T i1 cid1 Lemma B5 If H corresponds V ﬁnitely points signiﬁcant1 signiﬁcant2 signiﬁcant3 Proof By Deﬁnition B20 points τ Ti τ Ti1 discrete ﬂuent constant numeric ﬂuent linear function time Any numeric precondi tions linear inequality numeric ﬂuents linear inequality time time interval A time point signiﬁcant1 2 3 involve change discrete ﬂuent occur uncovered points zero crossing numeric constraint occur constraint τ Ti τ Ti1 cid1 Lemma B6 If H corresponds V V satisﬁes axiom 106 V covers time point signiﬁcant1 signiﬁcant2 Proof By contradiction This proof essentially discussion Sec tion 610 set speciﬁc formal context Let T time point signiﬁcant1 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 247 cid8 signiﬁcant2 covered Let Ti greatest time point variable τ Ti T T τ Ti1 Let T 1 τ Ti T 2 τ Ti1 Let precondition event process involved DNF Θ1 Θz Then Θi FALSE T TRUE T Let ΘT constraint comes TRUE T Let TF time T 1 cid2 TF T ΘTF FALSE p QpT cid1 0 F p discrete constraints p FpT ΘT form cid8 By Deﬁnition B20 FpT FpT 1 ΘT TRUE p FpT 1 TRUE p QpTF cid1 0 Since Qp linear Thus function time QpT cid1 0 QpTF 0 QpT 1 0 Also Qp linear function time QpT cid1 0 QpT 1 0 QpT 2 0 QpT 1 QpT 2 0 QpT 2 limit QpT T approaches T 2 But QpT 1 V QpT i1 pos sibility excluded axiom 106 cid1 QpT 2 V QpT p QpT cid1 0 cid8 cid8 cid8 Let deﬁne additional axiom zero crossings TRUE FALSE analogous axiom 106 cid1cid4 1012 p FpTi cid4 QpT p cid1cid4 p QpT i1 cid1 0 0 QpT QpT i1 cid3 0 i1 0 QpT cid3 As axiom 1011 constructed axiom starting axiom 106 inter changing FT FT i1 Lemma B7 If H corresponds V V satisﬁes axiom 1012 V covers time point signiﬁcant3 Proof Exactly analogous proof Lemma B6 following changes Since Θ changes TRUE FALSE choose TF T TF cid2 Ti1 ΘTF FALSE Since Qp linear function time QpT cid1 0 QpTF 0 follows QpT 2 0 cid1 Lemma B8 Suppose V satisﬁes TMLPSATk R axiom 106 H corre sponds V If preconditions event E satisﬁed T H E occurs H time T Proof By contradiction Suppose time T precondition Θ event E holds T event E active Since E active T signiﬁcant time point We following case analysis T N 0 In case Θ holds T 1 T 1 situation preceding T This violate axioms 21 22 248 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 T equal V βT T N 0 T τ Ti covered time point By Lemma B4 value β Thus violates axiom 21 T N 0 T covered time point Let T 1 greatest covered time point T 1 T Let TS smallest value TS cid1 T 1 ΘTX holds TX TS T Since H ﬁnite complexity numer ical preconditions nonstrict inequalities easily shown smallest value exists If TS T 1 TS covered If ΘT comes TRUE TS result discrete change discontinuous change numeric variable TS covered If ΘT comes TRUE TS result continuous change numeric variable TS signiﬁcant1 H covered There fore TS covered axioms 21 22 E occurs successor TS successor TS covered But contradicts deﬁnition T 1 cid1 Lemma B9 Suppose V satisﬁes TMLPSATk R axioms 106 1012 H corresponds V P active H time T preconditions process P satisﬁed T H Proof Let Ti maximum time point τ Ti cid2 T If τ TiX T X result immediate Deﬁnition B20 732 Otherwise note τ Ti τ Ti1 actions events time points signiﬁcant2 signiﬁcant3 Since numerical precondition nonstrict inequalities following possible cases Some precondition β P satisﬁed T 1 τ Ti cid2 T 1 τ Ti1 Then TRUE Hence axiom 34 βT V activeP Ti TRUE Hence Deﬁnition B20 P active H T TRUE Lemma B4 F βT Some precondition β P satisﬁed τ Ti depends numerical constraint borderline FALSE precondition P satisﬁed T 1 τ TiX T 1X τ Ti1X In case βT FALSE axiom 34 V activeP Ti FALSE Hence Deﬁnition B20 P active H T i1 i1 No precondition β P satisﬁed τ Ti In case precondition β satisﬁed T 1 τ Ti cid2 T 1 τ Ti1 Therefore βT FALSE axiom 34 V activeP Ti FALSE Hence Deﬁnition B20 P active H T cid1 Lemma B10 If V satisﬁes TMLPSATk R axioms 106 1012 H corresponds V H conforms domain description D R Proof If action event Z occurs H time T Deﬁnition B20 Ti V τ Ti T VactiveZTi By axioms 1115 actions corresponding axioms events Section 621 effects actions reﬂected value ﬂuents Ti way exactly matches J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 249 constraints 1 2 3 Deﬁnition B13 Thus Deﬁnition B13 constraints 1 2 3 satisﬁed By axioms 16 21 VactiveZTi βT hold By Lemma B4 F equivalent condition β hold Ti So constraint 4 left right implication constraint 5 Deﬁnition B13 hold The right left implication constraint 5 Lemma B6 Constraint 6 Lemma B7 Constraint 7 follows immediately Lemma B4 cid1 Corollary B11 Lemma B10 continues hold axioms 106 1012 replaced axioms 103 104 axioms 107 1011 Proof As discussed Section 610 new axioms stronger 106 1012 Tvaluation satisﬁes conditions Corollary B11 fortiori sat isﬁes conditions Lemma B10 cid1 Lemma B12 Let R planning problem let V Tvaluation satisﬁes TM LPSATk R let H history corresponds V Then H historical solution R Proof Immediate Corollary B11 Deﬁnition B15 cid1 Let Λ constraint solver properties deﬁned p 243 Theorem B1 Soundness Let R planning problem If ΛTMLPSATk R returns Tvaluation V V satisﬁes UPC plan P indicated V planning solution R Proof By Lemma B2 exists unique history H corresponding V relative domain description R By Corollary B11 H historical solution R By Deﬁni tion B15 P planning solution R cid1 Deﬁnition B24 Let H history conforms domain description D A real value XZ zero crossing H respect D numerical precondition β cid1 0 event process D There exists X1 XZ X1 X XZ ΦHβ X 0 limXXZ ΦHβ X 0 There exists X1 XZ XZ X X1 ΦHβ X 0 limXXZ ΦHβ X 0 Lemma B13 If history H conforms domain description D H ﬁnitely zero crossings relative D Proof Using Deﬁnition B20 fact H ﬁnite complexity fact precondition β linear function numeric ﬂuents follows β piecewise linear cid1 250 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 Deﬁnition B25 Let H history conforms D A time point Y signiﬁcant4 Y signiﬁcant Y cid9X 0cid10 X zero crossing Deﬁnition B26 Let H history conforms domain description D The trace H relative D Tvaluation V constructed follows Let Y0 Yk signiﬁcant4 time points H sequential order Let T0 Tk time point variables Then V cTi Yi X For action A V activeATi TRUE iff A H T A For event E V activeETi TRUE iff E H T E For process P V activeP Ti TRUE iff P H T P For discrete ﬂuent F V F Ti H T F For numeric ﬂuent F V F T For numeric ﬂuent F V F T For numeric ﬂuent F action event Z potentially changes F H T F value F T H incrementally Vcid2F ZTi change Z makes F time Yi For numeric ﬂuent F process P potentially inﬂuences F atom Γ F Z Ti Ti1 change P makes F Yi Yi1 Lemma B14 Let R planning problem Let H historical solution R Let V trace H Then V satisﬁes TMLPSATk R H corresponds V Proof We establish H domain description R satisfy conditions Deﬁnition B13 conform V satisﬁes conditions Deﬁnition B25 trace V satisﬁes axioms TMLPSATk R H V satisfy conditions Deﬁnition B20 correspond However straightforward repetition argumentation given Section 6 paper proof Theorem B1 cid1 Note trace V H satisfy strongest version 103 104 zero crossing axioms satisfy weaker forms 106 107 1011 1012 Theorem B2 Completeness Let Λ constraint solver Theorem B1 Let R planning problem If exists planning solution R value k ΛTMLPSATk R returns Tvaluation V By Theorem B1 V satisﬁes UPC V indicates planning solution R Proof Let P 1 planning solution R Let H 1 projection P 1 relative R Let k number signiﬁcant4 time points R Let V 1 trace H 1 By Lemma B14 V 1 satisﬁes TMLPSATk R deﬁnition Λ ΛTMLPSATk R returns valuation V satisﬁes TMLPSATk R By Theorem B1 V indicates planning solution R cid1 Theorem B3 Let R planning problem J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 251 For k ΛTMLPSATUR k returns Tvaluation V V indicates plan ning solution R satisfying UPC If exists planning solution R satisfying UPC exists k ΛTMLPSATUR k returns Tvaluation V indicates planning solution R satisfying UPC Proof Immediate Theorems B1 B2 cid1 B7 Actions numerical parameters Finally let sketch actions numerical parameters ﬁt frame work Deﬁne symbolic action atom intuitively corresponds action functor nonnumeric parameters Deﬁne action tuple cid9SA P1 Pkcid10 S symbolic action P1 Pk values numerical parameters Thus bucket domain tuple cid9POURA1B1B2L3 5cid10 correspond action pour a1 b1 b2 5 l3 Modify deﬁnitions appendix follows In Deﬁnition B1 add constraint situation S differ ent actions symbolic action In Deﬁnition B16 delete word actions speciﬁcation second cat egory atoms In Deﬁnition B16 add following categories atoms For symbolic action SA atom activeSATi For symbolic action SA numerical parameter P atom SAP Ti Add following deﬁnition Deﬁnitions B17 B18 For action A cid9SA X1 Xkcid10 deﬁne V activeATi TRUE V activeSATi TRUE V SAPj Ti Xj j 1 k The remainder deﬁnitions proofs lemmas remain unchanged Nothing deﬁnitions proofs depends class actions ﬁnite The new atoms enter preconditions effect constraints symbolic action SA obvious way References 1 A Armando C Castellini E Giunchiglia F Giunchiglia A Tacchella SATbased decision procedures automated reasoning A unifying perspective Lecture Notes Computer Science vol 2605 2003 2 JF Allen Maintaining knowledge temporal intervals Comm ACM 26 11 1983 832843 3 G Audemard P Bertoli A Cimatti R Kornilowicz R Sebastiani A SAT based approach solving formulas Boolean linear mathematical propositions Proceedings International Conference Automated Deduction Lecture Notes Artiﬁcial Intelligence vol 2392 2002 pp 193208 4 G Audemard M Bozzano A Cimatti R Sebastiani Verifying industrial hybrid systems MathSAT Electronic Notes Theoret Comput Sci 89 4 2004 5 C Barrett S Berezin CVC Lite A new implementation cooperating validity checker Proceedings International Conference Computer Aided Veriﬁcation CAV04 2004 pp 515518 252 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 6 R Bayardo R Schrag Using CSP Lookback techniques solve realworld SAT instances Proceedings 14th National Conference Artiﬁcial Intelligence AAAI97 Providence RI 1997 pp 203208 7 A Blum M Furst Fast planning planning graph analysis Artiﬁcial Intelligence 90 1997 281300 8 A Borning G Badros The cassowary linear arithmetic constraint solving algorithm Interface imple mentation Technical Report UWCSE980604 University Washington WA 1998 9 M Bozzano R Bruttomesso A Cimatti T Junttila P Rossum S Schults R Sebastiani MATHSAT Tight integration SAT mathematical decision procedures J Automat Reason Special Issue SAT 2005 10 R Brafman A simpliﬁer propositional formulas binary clauses Proceedings 19th International Joint Conference Artiﬁcial Intelligence IJCAI01 Seattle WA 2001 pp 515522 11 D Chapman Planning conjunctive goals Artiﬁcial Intelligence 32 3 1987 333377 12 E Davis Representations Common Sense Knowledge Morgan Kaufmann San Fransisco CA 1990 13 E Davis Axiomatizing qualitative process theory Proceedings 3rd International Conference Principles Knowledge Representation Reasoning KR92 1992 pp 177188 14 M Davis G Logemann D Loveland A machine program theorem proving Comm ACM 5 1962 394397 15 T Dean J Firby D Miller Hierarchical planning involving deadlines travel times resources Comput Intelligence 4 4 1988 381398 16 Y Dimopoulos A Gerevini Temporal planning mixed integer programming A preliminary report Proceedings 8th Conference Principle Practice Constraint Programming CP02 2002 pp 4762 17 MB Do S Kambhampati Sapa A scalable multiobjective metric temporal planner J Artiﬁcial Intelli gence Res 20 2003 155194 18 B Drabble EXCALIBUR A program planning reasoning processes Artiﬁcial Intelligence 62 1993 140 19 S Edelkamp J Hoffman PDDL22 The languages classical 4th International Planning Competition Available httpipcicapsconferenceorg 2004 20 N Een N Sorensson An extensible SATsolver Proceedings Conference Theory Applications Satisﬁability Testing SAT03 2003 pp 502518 21 M Ernst T Millstein D Weld Automatic SATcompilation planning problems Proceedings 15th International Joint Conference Artiﬁcial Intelligence IJCAI97 Nagoya Japan 1997 pp 1169 1176 22 K Forbus Qualitative process theory Artiﬁcial Intelligence 24 1984 85168 23 M Fox D Long The automatic inference state invariants TIM J Artiﬁcial Intelligence Res 9 1998 367421 24 M Fox D Long PDDL Level 5 An extension PDDL21 modelling planning domains continuous timedependent effects Available httpwwwduracukdplongcompetitionhtml 2001 25 M Fox D Long PDDL21 An extension PDDL expressing temporal planning domains J Artiﬁcial Intelligence Res 20 2003 61124 26 A Gerevini L Schubert Inferring state constraints domain independent planning Proceedings 15th National Conference Artiﬁcial Intelligence AAAI98 St Paul MN 1998 pp 905912 27 A Gerevini A Saetti I Serina Planning stochastic local search temporal action J Artiﬁcial Intelligence Res 20 2003 239290 28 E Giunchiglia A Massarotto R Sebastiani Act rest follow Exploiting determinism plan ning satisﬁability Proceedings 15th National Conference Artiﬁcial Intelligence AAAI98 St Paul MN 1998 pp 948953 29 G Hendrix Modeling simultaneous actions continuous changes Artiﬁcial Intelligence 4 1973 145 180 30 T Henzinger The theory hybrid automata Proceedings 11th Annual Symposium Logic Computer Science 1996 pp 278292 31 J Hooker LogicBased Methods Optimization Wiley New York 2000 32 H Kautz B Selman Planning satisﬁability Proceedings 10th European Conference Artiﬁ cial Intelligence ECAI92 1992 pp 359363 J Shin E Davis Artiﬁcial Intelligence 166 2005 194253 253 33 H Kautz D McAllester B Selman Encoding plans propositional logic Proceedings 5th In ternational Conference Principles Knowledge Representation Reasoning KR96 1996 pp 374 384 34 H Kautz B Selman Pushing envelope Planning propositional logic stochastic search Proceed ings 13th National Conference Artiﬁcial Intelligence AAAI96 Portland OR 1996 pp 1194 1201 35 H Kautz B Selman Unifying SATbased graphbased planning Proceedings 17th Interna tional Joint Conference Artiﬁcial Intelligence IJCAI99 Stockholm Sweden 1999 pp 318325 36 K Kichkaylo A Ivan V Karamcheti Constrained component deployment widearea networks AI planning techniques Proceedings International Parallel Distributed Symposium IPDPS03 2003 pp 38 37 D Long M Fox I Sebastia A Coddington An examination resources planning Proceedings UK Planning Scheduling SIG Workshop 2000 38 D Long M Fox Exploiting Graphplan framework temporal planning Proceedings International Conference Automated Planning Scheduling ICAPS03 2003 pp 5162 39 D Long M Fox The 3rd international planning competition Results analysis J Artiﬁcial Intelligence Res 20 2003 159 40 A Mali Encoding temporal planning CSP Proceedings IEEE International Conference Tools Artiﬁcial Intelligence 2002 pp 7592 41 D McDermott The AIPS98 planning competition committee PDDLthe planning domain deﬁnition lan guage Version 12 Available httpwwwcsyaleeduhomesdvm 1998 42 D McDermott The formal semantics processes PDDL Proceedings Workshop PDDL International Conference Automated Planning Scheduling 2003 43 D McDermott Reasoning autonomous processes estimatedregression planner Proceedings International Conference Automated Planning Scheduling ICAPS03 2003 pp 143152 44 J Penberthy Planning continuous change PhD Dissertation Department Computer Science Engineering University Washington WA USA 1993 45 J Penberthy D Weld Temporal planning continuous change Proceedings 12th National Conference Artiﬁcial Intelligence AAAI94 Seattle WA 1994 pp 10101015 46 J Shin TMLPSAT Encoding temporal metric planning continuous time PhD Dissertation Department Computer Science New York University NY USA 2004 47 J Shin E Davis Continuous time SATbased planner Proceedings 22th National Conference Artiﬁcial Intelligence AAAI04 San Jase CA 2004 pp 531536 48 R Simmons Combining associational causal reasoning solve interpretation planning problems Technical Report AITR1048 MIT AI Lab MA USA 1988 49 D Smith J Frank A Jonsson Bridging gap planning scheduling Knowledge Engrg Rev 15 1 2000 6194 50 D Smith D Weld Temporal planning mutual exclusion reasoning Proceedings 16th Inter national Joint Conference Artiﬁcial Intelligence IJCAI99 Stockholm Sweden 1999 pp 326333 51 S Vere Planning time Windows durations activities goals Pattern Anal Machine Intelli gence 5 1983 246267 52 D Wilkins Can AI planners solve practical problems Comput Intelligence 6 4 1990 232246 53 S Wolfman D Weld The LPSAT engine application resource planning Proceedings 16th International Joint Conference Artiﬁcial Intelligence IJCAI99 Stockholm Sweden 1999 pp 310316 54 S Wolfman D Weld Combining linear programming satisﬁability solving resource planning Knowledge Engrg Rev 16 1 2000 8599 55 L Zhang S Malik The quest efﬁcient boolean satisﬁability solvers Proceedings International Conference Computer Aided Veriﬁcation CAV02 2002 pp 1736