Artificial Intelligence 103 1998 273294 Artificial Intelligence Applications situation calculus formalizing control strategic information Prolog cut operator Department Computer Science The Hong Kong University Science Technology Clear Water Bq Kowloon Hong Kong Fangzhen Lin Abstract natural formalism We argue situation calculus reasoning information As case study paper provide situation calculus control strategic Prolog We semantics semantics semantics operator cut provably correct respect stable model semantics 0 1998 Elsevier Science BV All rights reserved wellbehaved programs properly stratified according implementation negationasfailure central search control operator Prolog cut operator conventional representing 1 Introduction The situation calculus reasoning actions reserved predicate function block A initially clear write McCarthy Hayes Sl formalism dynamic domains It manysorted predicate calculus blocks world symbols For example representing HclearA So H reserved binary predicate symbol denoting causes onx y true write initial situation As example stands holds SO reserved constant action stuckx y Hofix Y MWx 1 s Email flincsusthk 2 In paper free variables displayed formula assumed universally quantified 0004370298 PII SOOO437029800054X matter 0 1998 Elsevier Science BV All rights reserved 214 E Lin Artijcinl Intdlimcr 103 IWX 271294 reserved function dou s denotes situation s This example effects action represented situation calculus Generally resulting situation action situation calculus l situations firstorder objects quantified l situation carries information history sequence actions performed far For example history situation dostackA B dostuckB C SO stuckB C stuckA B sequence actions initial situation enforce onetoone correspondence reach As shall later foundational performed axioms situations sequences actions information AI planning isomorphic sequences actions according situations So control knowledge plan planning reasoning control knowledge For example Although long term goal develop general We believe features situation calculus natural formalism representing sequence actions constraints desirable plans constraints situations Similarly talk control constraints derivations Lin 6 logic programming referring Lin Reiter 7 representing reasoning situation calculus focus paper Prolog cut operator central search control operator Prolog logic programs cut semantics We shall provide situation calculus stratified We wellbehaved programs properly semantics according negationas implementation conventional semantics failure operator cut provably correct respect stable model semantics Gelfond Lifschitz shown declarative semantics negation cut 3 To best knowledge time connection problem solving control knowledge framework This paper organized follows Section 2 briefly reviews Section 3 reviews basic concepts situation calculus logic programming situation calculus semantics Lin Reiter 7 cutfree logic programs For purpose paper key property semantics identified situations Section 4 extends semantics logic programs cut This axiom accessible situations cut cut Section 5 shows semantics stratified programs Section 6 shows conventional failure cut provably correct Finally Section 7 concludes situations corresponding derivations class logic programming derivations wellbehaved implementation negationas paper 2 Logical preliminaries 21 The situation calculus The language situation calculus manysorted We assume propositional following sorts situation situations action fluents clear truth values depend situations As mentioned assume secondorder equality fluent actions object Se reserved constant E Lin Artcial lntelligenre IO3 1998 273294 21s c dolabclSO d doabcdlSO f 0 SO doaSO dolaclSO Fig 1 A function f required axiom 6 denoting situation reserved binary function denoting addition assume following initial situation H reserved predicate expressing properties fluents result performing action In partial orders situations l C following convention write c infix form By s c s mean s s sequence actions As usual s C s shorthand obtained s c s v s s l C write c infix form By s c s mean s obtained deleting actions Similarly s C s stands s c s v s s s We shall consider discrete situation calculus following foundational axioms So s doul sl doa2 2 al a2 A s1 s2 WPPSo A Vu sPs fdoa s 3 VsCl 7s c s c doa s 3 s c s s c s s s A 3fVq 1 SZSl E 2 3 fl c fs2 A da slkW sI E s 3 doa fl C yl 1 2 3 4 5 6 It amounts initial repeatedly applying The axioms unique names assumptions situations The axiom second order induction domain closure axiom situation obtained function In words says situation sequence actions initial situation exactly isomorphism situations sequences actions mentioned earlier As expected induction play important Axioms initial situation So result performing 4 5 define C inductively The partial order c role paper prefix SO S S iff 0 k II relation 3 Given situation S doal 5 doal ak SO In particular VsSo E s Axiom 6 defines C Informally s C s iff s obtained actions More precisely suppose S doal s deleting So Then S C S iff 3 Given sequence actions al use S denote resulting situation performing sequence actions S Inductively I s s doaJL S dL s 216 E Lin Artificial Intelligence 103 1998 273294 integers 1 il illustrates function ik n 0 6 k n 5 dOoi ai SO Fig 1 f required axiom 6 proving following relation Ma cl So c doGa 6 c 4 So Notice c special case C s c s s c s As shall partial order c play crucial role paper In following shall denote C set axioms l6 22 Logic programs We consider definite logic programs cut An atom p fluent term Ftl tn F fluent arity objectn tl t terms sort object A goal G expression form 11 I n 3 0 1 n li atom equality atom form ttor Without loss generality assume clause rule expression form Fxlx G F fluent arity objecf x1 x distinct variables sort object G goal Notice common form clause Ftlt G taken shorthand following clause Fxlx xl tl xn tn G wherext xn fresh variables G tl t Finally definite program finite set clauses The dejinition fluent symbol F program P set clauses P F heads Since goal situation calculus values Given goal G 11 In situation truth value G situation S situation calculus formula formulas need way refer truth term S define HG S HllSrr HlS 1 6 n 1 If li t t H li S li 2 If li H 1 S tautology For example H x parentx y SO true x A H arentx y SO A true 3 A logical semantics The cut operator Prolog plays search control operator prevents Prolog roles As goal succeeds interpreter backtracking immediately As past F Lin Arrcial Intelligence 103 1998 273294 211 program The rest section semantics programs cut come stages First Consequently pure logical semantics programs cut taken goal consider immediately For purpose shall use situation calculus semantics succeeds 7 For purpose logic programs cut proposed Lin Reiter key semantics situation calculus effect cut search tree isomorphically modeled restrictions situations So second step formalizing cut operator define relation Act situations Acts holds respect logic program successful derivation according program clauses identified effects actions branch search tree sequence actions situation This important sequence actions s corresponds basically review 7 minor notational difference reify fluents use special predicate H Lin Reiter 7 treat fluents predicate symbols For example Hbroken s written brokens 7 According 7 clauses treated rules application rule process answering query like performing action Formally given clause form Fxlx G Lin Reiter 7 introduce unique action A arity jecP action clause The effect action following HG s 3 HFx MAi s x xl x tuple variables example suppose gpx y action names following clause G 2 For gparentxy parentxz parentzy following effect axiom Harerztx z s A Harentz y sl Hgparentn y dogpx y s Now suppose P program F fluent Suppose definition F P A Fx Cl Akx Fx Gk A 1 Ak action names corresponding following corresponding effect axioms fluent F clauses Then YflVffG 1 1 HFGh doA s HGk s 3 HFi doAki s yi 1 k tuple variables following successor state axiom Reiter IO F Gi x We generate 278 E Lin ArtiJiciul Intelligmc 101 1998 27j294 HFdoas aAl3yHGs vv Aki A YoHGk s v HFi sl 7 axiom says F true successor situation Intuitively action corresponds clause satisfied initially 7 HFZ doa s HFx In particular s iff true initially clause definition F body definition F program P In following 7 successor state axiom F respect P Given logic program P set successor state axioms respect P domain independent axioms pure logical meaning P Definition 1 The basic action theory V P 2 c u Dss u 2 u 2s0 l C set foundational l DD set successor state axioms fluents according l Vu following set unique names axioms axioms given Section 21 P f2 g3 pair f g distinct function symbols fx f_ 3 x _ 8 9 function actions 0 Vs symbol f Notice D includes unique names axioms HF So false 1 F fluent Definition 2 Let P program D corresponding basic action theory A situation term S called plan goal G iff V VHG S x variables G S Given query G look tuple terms z plan S G ii Deductively s constructive proof entailment V sHG literally style Green 4 situation calculus This semantics nice Clark completion amounts x variables planning properties For example G Therefore query answering logic programs generalizes semantics Theorem 1 Lin Reiter 7 Let P program V action theory F afluent Suppose successor state axiom F 2 7 Gi li 1 liki 1 n Then V entails Clark completion F E Lin Artial Intelligencr 103 1998 273294 27 This semantics closely related recent proposal Wallace Gelfond Lifschitzs stable model semantics 121 3 For propositional details Lin Reiter 7 case equivalent Example 1 Consider X y 4 following program maxx y z maximum Axyz maxxyz leqxy SC zy A2x y z maxxyz 2x RI 6 J leqxy x1 y2 B2X y leqxy x1 yl x Y leqxy x2 y2 Here leqx y means x equal y 1 2 constants We following successor state axioms max leq Hmuxx y z dz s u Alx y z A Hleqx y s A z y v u A2x y z A z x v Hmuxx J z s Hleqx y s E uBlxyAxlAy2v uBxyAxlnylv u B3X y AX 2 A y 2 v Heqx y s From successor state axioms A1 I 22 SO result following desirable conclusion easy performing satisfying ml Bt 12 22 Thus situation D 3sHmux 122 s On hand clear action Azx y X muxx y X true 2 I Vx y3sffma4x Y xl s reason effects search space According theory D desirable Of course account Prologs search strategy attempts rules order given second rule AZ mux rule max succeeds attempted leqx y Therefore derivation leqx y case x 1 y 2 Azx y x So considered basic action subgoal derivation corresponding 4 Thk typical example improper uses cut Well return point later 280 E Lin Artcial Intelligence 103 1998 273294 Let situation accessible derivation corresponding legal ruled cut Our goal defining semantics characterize section cut operator set accessible situations This going situation5 4 A semantics cut A clause containing cut cutx F2 Gt G2 means G 1 succeeds derivation F use 1 rule 2 rule derivation G 1 We proceed formalize informal reading First notice need precedence rules situations ordering relations rules defining derivation deciding In following shall assume given ordering x actions rules o 3 process j3 For instance according define ordering situations Intuitively search action considered action Prologs ordering rule max example 2 x AZ Vi A Given partial order actions ways situations actions ordered depending particular problem query answered goaldirected returned If read s 4 s sequence actions following definition case decided search strategy plan doot solving strategies sequences In Prolog So on_ 1 finally 1 s considered s Definition 3 Given partial order actions situations defined following axiom derived partial order s s E 6 SI s2s SI A s dob 2 A 4 b v b A sl s2 10 With partial order situations roughly situation derivation goal G derivation G minimal according precise need space derivations We want set plans G according 2 basic action theory logic program However define notion minimality definition D Vu sHG S HG s So s plan G action S plan G This means plan G smaller according irrelevant actions To avoid problem define notion minimal plans appending In following terms situations derivations interchangeably E Lin Artijcial Intelligence 103 1998 273294 281 Definition 4 For situation following formula term S goal G denote minimalG S HG S A Ess c S A HG s Intuitively minimalG S holds actions deleted continue plan G For mux program Section 3 easy Dminimalleql2doBr12Su But 2 minimalleql2doB112 A11221So I Bt 12 So c B1 12 A I 122 So It seen goal G plan minimal plan C VsHG s 3ss C s rminimalG s We ready formalize beginning section For purpose introduce new predicate Acts meaning s cut cut reading clause containing informal If program contains hold case minimal plan st F s uses rule cut rule uses cut rule derivation G 1 cut rule cut goal G 1 succeeds Acts Acts V3sAccs A HG s Vslsl csrminimalF_sl 3as2q doas2Aa c cutv II 3s2 SSSl docutxt s2 A sj C s2 A firstderGlss tupleofthe stands following freevariables Gt f irstderGt sg formula minimalGt 3 A s sg rAccs A minimalGl si tuple variables 11 l The formula Gr x We remark axiom sAccs A HGt s corresponds l The disjunct G 1 succeeds s2st 2 A cutx corresponds derivation st F2 uses rule cut rule 282 F Lin Artciul Intelligence 103 1998 273294 l The disjunct 32 Qs docuti 2 A 3 C sz A f irstderGI 3 corresponds replace formula following straightforward uses rule derivation G I Notice 3s2sl docutz 2 A f irstderGI 2 2 minimal plan G 1 In following sentence occurrence clause cuti occurrences generate accessibility subgoal G 1 Notice clause constraint corresponding 11 uccessibility constraints Now given program P suppose Acts s accessibility P constraints We following sentence accessibility axiom Acts s A A ks 12 Notice axiom attempts predicate occurs define Act recursively right hand equivalence This surprising For example logical fixedpoint constructions logic programs normally negation usually implemented cut negation formalization requires Definition 5 Extended Action Theory Let P program A given set axioms actions The extended action theory I P following set EDUAUAcclO D basic action theory P Act form 12 accessibility axiom P Definition 6 Let P program E extended action theory G goal A situation term S uccessible plan G iff I V ActS A H G S variables G S Now given query G answer looking constructive proof following entailment E 3i sAccs A HG s method x variables It known answering presence cut according program answer query like Fu positively fail return x u possible answer presented queries exactly agree Prologs G contains variables Prolog implementations G Notice F Lin ArtiJcial Intelligence 103 1998 273294 283 query Fx However returned answer according constructive proof 3x s Acts A HFu oddity Prolog x construction accessible plan Fa s We illustrate definitions max example Suppose use Prologs search strategy order actions A b A1 2 A 3jb AZ care rules Notice occurrence A 1 accessibility axiom leq ordered Since Acts Vx y z3sAccs A Hleqx y s Vslsl 2 s Aminimalmuxx y z sj 3 3a szsl s A C Al y z v 13 32 SSI doAx y z 32 A sg C s2 A f irstderkqx y Q Now let E extended action theory program First E t Vx y z sminimalleqx y s ACS A Hmaxx y z s I Vx y3yHleqx Y 8 3sAccs A Hleqx y sl This intuitively presence effect leq right appearance definition mux Now let SI doBll 2 SO S2 doA1122 SI Clearly E Hleql2 Sl Aminimalmuxl22 We claim E AccS2 S2 accessible plan mux I 22 Notice E k sAccs A Hleql2s I t Vx y z Hmuxx y z S2 3 x 1 A y 2 A z 2 sdoUsAaA122 Therefore 13 E Acc 3s3s3 C St A firstderleql2 3 Let s3 SI b AccS2 I I first_derleql2 Sl E kminimalleql 2 sl A 3sAccs Am imalleql2sAsS This follows Vsminimalleql 2 s ES SI 284 F Lin Artificial Intelligence 103 1998 273294 So proved F AccS2 On hand accessible plans max 12 1 The proof follows case term S I maxl2 situation 1 S Then Suppose doA212 l So 5 S Since E lsAccs A Hleql2 s I Vsminimalmaxl 2 l s 3 s doAz12 l SO follows 13 ActS hold case 3asdoA21 2 l So doas AU x Al12 l v 3ssdoA212 l So doAll2 ls AS cs A first_derleql2 s obviously Generalizing impossible reasoning I I Vx Y k Y s AX Y 3 3sAccs A ffmaxx Y Y s A 3sAccs A Hmaxx y x s So max program defines max correctly However E F Vx y z3sNmaxx y z s 3sA A Hmaxx Y z sl use cut ideal sense search control red cut 5 Stratified programs As noticed accessibility axiom attempts define Act recursively A natural question recursion yield unique solution predicate In general answer negative However program properly stratified axiom yield unique solution To present simple lemmas axiomatization cut The following lemma says ifs rules F derivation F s accessible Lemma 1 Let P program extended action theory Suppose accessibility axiom P 12 Acts s A A js Let F fluent Without loss generality let VsAccs I VsAccs Jk I Lin Arrijicial Intelligence 103 1998 273294 285 accessibility constraints form 11 f occurrences dejinition sf F Under E xHF s Acts pkl A A I 14 Proof Under E situation derivation derivation atom HF s AS s s 3 HF s Therefore ly s right hand 1 l XHF s 3 Ps From 14 follows q The following lemma says accessible plan G accessible minimal plan G Lemma 2 Let P program E extended action theory For goal G 3sAccs A HG s E sAccs A minimalG s Proof By induction situations plan G minimal plan C VsHGs ssCs rminimalGs From fact Vs sAccs A s E s Accs lemma follows o Let P program F fluent We definition F P cutfree F clauses inductively definition F relevant fluent appears definition F For example cutfree For cutfree fluents Act play role definition leq max example relevant F contains Here clause relevant Proposition 1 Let P program extended action theory For goal G definition fluent F mentioned G cutfree minimalG s Acts 3sHG s 3sAccs A HG s If minimalG s s derivation fluent relevant Proof means s derivation fluent G Since fluent G cutfree fluent definition contains rule mentions cut From desired result follows directly Lemma 1 III Cutfree fluents ground case stratified programs Definition 7 A program P stratied function numbers 1 If F cutfree P fF 0 f fluents P natural 286 El Lin Artificial Intellipxce 103 1998 273294 2 If F cutfree fF 1 max f F F appears definition F It clear P stratified fluent F P fF uniquely determined rules In case shall uniquely determined number rank F P maximum ranks fluents P rank program rank leq 0 rank mux 1 So P For instance rank program max example 1 recursionfree We P stratified alently Acco Acct Accn Intuitively Accn s holds s accessible rules mention fluent rank n deleted P Formally follows axiom written equiv form To end introduce new set unary predicates reachable defined accessibility Accos z frue For 12 0 suppose CUtlx Flx GlG 15 A Fkx Gk G occurrences definitions fluents rank rz Then Accn defined following axiom Acts rAcc_ls A ls A A ks 16 1 k obtained follows suppose VsAccs pis accessibility result replacing occurrence Act pis Accn_l constraint form 11 occurrence rule CUQ X Now axiom 16 defines Accn inductively right hand mentions Act 1 We Theorem 2 Let P strutijed program M rank E corresponding extended action theory We E b Acts AccM s Proof We prove induction goal G mentions fluents rank 3sAccs A HG s sAccis A HG s 17 For 0 follows Proposition holds 1 1 Inductively suppose holds We E Lin Artcial Intelligence 103 1998 273294 287 By Lemma 2 3sAccs A HG s 3sAccs rminimalG s Let VsAccs PIS VsAccs Ps accessibility constraints rank IZ 1 By Lemma 1 fact minimalG fluents rank n 1 derivation occurrences definitions fluents s s 3sAccs rminimalG s z Llls A A qms rminimalGs According tively inductive assumption way IS n s obtained Ps Wys respec sPs A A Pms rminimalGs F A A QrTl s A minimalG s But definition Accl s Acc s ls A A s Therefore proof 17 holds From 17 theorem follows immediately 17 holds 1 This completes inductive proof q 6 Negationasfailure cut In section showed stratified programs axiom Act yields unique solution As expected program hold general Consider following t1 Y2 4 rd r6 p q q P P p fail P q q fail CT Notice definition stratified Its accessibility axiom VslH fail s This program clearly 288 F Lin Arrijicial Intelligence 103 1998 273294 Acts c 3sAccs A Hp s Vslsl Cs Aminimalpsl 3as2sl doas2 Aa c 3 V 32 sgsl dor3 2 As3 C s2 A f irstderp sg A bAccs A Hq s Vslsl C s Aminimalqsl 3as2sl doa2Au x rs V 32 s3s1 dors 2 A s3 C s2 A f irstderq sg Since r4 rule p established minimalps 3 s dor4So Similarly Vsminimalqs s dOrg Thus assume ordering rules following A Va ba c b z tg A b r4 v rg A b rg Acts Hp s 3 3sAccs A Hp s A Hq s 3sAccs A Hq s Let extended action theory program E 3sAccs A ffp s A sAccs A ffq s V 3sAccs A ffq 1 A sccs A ffp s accessible plan p iff accessible plan q way Notice program rendition following logic program p notq notp 9 withnegationimplementedby cut F F fail notF If identify answer set Gelfond Lifschitz accessible derivations following 3 set atoms program semantics agrees 3 Our theorem shows equivalence holds arbitrary normal programs fluent F P F new fluent arity Let P logic program obtained Let P logic program negation cut Suppose F Lin Articial Intelligence 103 1998 273294 289 replacing literal form Fz P Ff adding new fluent F following clauses AF AX F2 Fi fail Fg Suppose fluent F action AF ordered action A Theorem 3 Let extended action theory PI V action theory P defined Lin Reiter 7 For anyuent F P tuple terms 1 If M model D model M M 3s H Fy s ifsM b SAccs A HFi s 2 If M model E model M 2 M 3s HFi s ifsM 3sAccs A HFi s Proof The proof theorem given Appendix A relatively needs results 7 q long usual implementation From theorem conclude negation cut correct respect semantics given Lin Reiter 7 As noted Lin Reiter 7 semantics given results given Wallace 3 Herbrand models stable model semantics Gelfond Lifschitz considered Therefore conclude logic programs terms cut correct respect stable model semantics case negation logic programs negation yields 12 shown equivalent usual implementation propositional negation Corollary 4 Let P propositional logic program negation cut Let P logic program obtained P described For set W atoms W answer set P according ifs model M extended action theory P Gelfond Lifschitz W p M bAccs A Hp s 7 Concluding remarks We applied situation calculus programs cut We shown semantics desirable properties wellbehaved program stratified according implementation Gelfond Lifschitzs stable model semantics usual operator cut provably correct respect giving semantics logic programming negationasfailure semantics There relatively formal work cut compared negation Previous work semantics cut includes operational programming Podelski dynamic algebra semantics Borger 2 paralogical simple completionstyle semantics Stroetmann 9 denotational Smolka semantics Jones Mycroft 5 l Glal3 111 special class semantics Andrews logic semantics 290 E Lin Artificial Intelligence 103 1998 273294 clarify use considered special class programs study possibility better control mechanism proper roles cut logic different semantics semantics programs Comparisons reasons semantics difficult mathematically involved formalisms different However future work shall attempt semantics given Stroetmann Glal3 equivalent More importantly shall try use semantics logic programming programming term goal long Our representing reasoning control strategic information regard preliminary progress applying formalizing control knowledge plan sequence actions planning constraints desirable plans constraints situations Based idea Lin 6 formulate precisely subgoal ordering planning situation calculus information subgoal ordering deduced background action theory linear nonlinear planners knowledge ordering provably correct way avoid unnecessary backtracking We believe control knowledge planning similarly axiomatized good use problem solving situation calculus situations So control knowledge planning As mentioned Section 1 AI planning isomorphic general situation In framework calculus Acknowledgement Much work I Cognitive Robotics Group Department Computer Science University Toronto I thank Ray Reiter Hector Levesque making possible This work supported Kong Direct Allocation Grant DAG9697EG34 Research Grant HKUST609197E Research Grants Council Hong Competitive Earmarked I like thank Eyal Amir Yves Lesperance Hector Levesque especially Ray Reiter helpful discussions earlier versions paper relating subject paper andor comments Appendix A This appendix proves Theorem 3 Recall theorem P logic program negation cut P logic program obtained replacing literal form Ff P FT adding new fluent F following clauses A A Fi Fi SC fail Fi We assume fluent F action A G ordered action A F Lin Artcial Intelligencr 103 1998 273294 291 In Section 3 review action theory semantics 7 logic programs programs negation form s Notice Hnot p s negation Action following semantics fact independent situation argument For example given following clauses negation Hnot p s 3sHp theories rtx px notqx r2x px xu successor state axiom F Hx dou s rx A Hnot qx s V qx Ax u v Hpx s Theorem 3 Let E extended action theory P 2 action theoryfor P defined Lin Reiter 7 For fluent F P tuple terms sort object 1 IfMisamodelofD ifsM SAccs thenthereisamodelMofsuchthatM3sHFis A HF s 2 If M model I model M V M b 3s H F ii s ifsM sAccs A HFi s Proof Suppose example Section 6 F FL new fluents P Observe I k Acts A VxHFxs AccsA HFxsrr VaHF s LAccs A HFkx s Suppose M model V Construct interpretation M follows 1 2 The domain M sort object M The domain M sort action union action domain M following set A r d A 2 1 1 k d tuple elements object domain 3 4 The truth values fluents false SO computed according successor state axioms E successor situations The interpretation Act defined follows For s situation domain I 6 M iff I k tuple ii elements object domain M HFtTi s 6 To simplify presentation u element domain model M qx formula use M qu stand M o qn o variable assignment TX u 292 E Lin Artificial Intelligence 103 IWK 273294 M 13SfiLZi S We need M model E fluent F tuple ii objects M I HF s M 3sAccs A HF s A2 By construction M fact M model follows directly A 1 equivalence A2 We prove equivalence Suppose M I bHF s actions Then s situation domain M M k minimal situations SO Because s fluents true initial situation SO form successor state axioms 27 ai action rules P 1 II Furthermore Jn minimal plan Fi body ai satisfied situation doal ai_t So Now suppose FG F By induction 4 7 fi6 negative situation literals rules s literals appearing rules corresponding uses rules A new fluents corresponding I Then let s s doAk 7 An 71 al anl So A3 By construction M verified s situation domain M M Acci A HF Conversely suppose M bAccs A HFLi s Then al action domain M M bAccdoaI So A minimalFG So Because dont rules fail means 1 1 k If ai A FG true doalalSo ais AqU Since accessible situation This means form Ad c M construction al al list resulted SO situation M M bHF deleting s actions domain M M HF theorem doc SO This proves equivalence A2 half To prove second half theorem suppose M model E Construct interpretation M follows 1 M M share domains sorts F Lin Artificial Intelligence 103 1998 273294 293 2 The truth values fluents defined follows Initially fluents false M b VF2 So fluent F Inductively action domain tuple ii objects truth value Fa doi defined following s situation domain action ri cases Case 1 6 action corresponds P In case clauses definition F M HFii duii iff M HFi Case 2 6 action corresponds P To simplify presentation clauses suppose instantiation definition F clause Fii G Fif G contain Then M b HFii I iff M b HG St M I 3sAccs A HFi s Again need equivalence satisfies successor state axioms V A2 holds M model D The proof equivalence 1 M b 3sHF A2 similar given s situation s M minimalFct Let situation obtained s way described A3 Then construction M Al verified M bAcc A HFii 2 M 3sAccs A HFii s s situation domain s actions P Then M F H F ii I M Accs A minimalF Let s situation obtained eliminating actions correspond From equivalence A2 fluent F M bAccs A HFi s iff A4 b sHFii s From easy M satisfies successor state axioms 2 q 294 15 Lin Artificial Intelligence 103 1998 273294 References I1 J Andrews A paralogical semantics prolog cut Proc Internat Logic Programming Symposium 1995 pp 591605 121 E Borger A logical operational semantics Prolog Cotnputer Science Logic CSL89 Lecture Notes Computer Science Vol 440 Springer Berlin 1989 pp 3664 131 M Gelfond V Lifschitz The stable model semantics Conference Symposium Logic Programming logic programming Proc Fifth International 1988 pp 10701080 141 CC Green Application theorem proving problem solving Proc International Joint Conference Artificial Intelligence IJCAI69 Washington DC 1969 pp 219239 51 ND Jones A Mycroft Stepwise development operational Proc 1984 International Symposium Logic Programming denotational 1984 pp 28 I288 semantics Prolog 161 F Lin An ordering subgoals planning Annals Mathematics Artificial Intelligence 2 1 1997 321342 7 E Lin R Reiter Rules actions A situation calculus 3 1 13 I 997 2999330 Programming semantics logic programs Journal Logic 181 J McCarthy P Hayes Some philosophical B Meltzer D Michie Eds Machine 4633502 problems standpoint artificial intelligence Intelligence 4 Edinburgh University Press Edinburgh 1969 pp 9 A Podelski G Smolka Operational semantics constraint 1995 International Conference Logic Programming Kanagawa Cambridge MA 1995 pp 449463 logic programs cocoutining Proc Japan 1318 June 1995 MIT Press IO R Reiter The frame problem result Computation Papers Honor OF John McCarthy Academic Press San Diego CA 199 1 pp 4 18420 situation calculus simple solution completeness Intelligence Mathematical V Lifschitz Ed Artificial regression goal Theory Ill K Stroetmann T GlaR A declarative semantics Prolog cut operator Proc 5th Internat Workshop Extensions Logic Programming 1996 pp 25527 1 121 MG Wallace Tight consistent computable completions unrestricted logic programs Journal Logic Programming 15 1993 243273