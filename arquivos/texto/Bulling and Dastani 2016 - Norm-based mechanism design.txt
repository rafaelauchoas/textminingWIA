Artiﬁcial Intelligence 239 2016 97142 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Normbased mechanism design Nils Bulling Department Intelligent Systems Delft University Technology Delft The Netherlands b Intelligent Systems Group Utrecht University Utrecht The Netherlands Mehdi Dastani b r t c l e n f o b s t r c t Article history Received 21 September 2015 Received revised form 4 July 2016 Accepted 7 July 2016 Available online 14 July 2016 Keywords Norms Multiagent systems Mechanism design The increasing presence autonomous software systems open environments general complex interactions taking place particular require ﬂexible control coordination mechanisms guarantee desirable overall level properties limiting autonomy involved systems In artiﬁcial intelligence particular multiagent systems research ﬁeld social laws norms sanctions widely proposed ﬂexible means coordinating behaviour autonomous agents multiagent settings Recently languages proposed specify implement normbased environments behaviour autonomous agents monitored evaluated based norms possibly sanctioned norms violated In paper ﬁrst introduce formal setting multiagent environments based concurrent game structures abstracts concrete speciﬁcation languages We extend formal setting norms sanctions concepts mechanism design formally analyse verify speciﬁc behaviour enforced implemented agents follow subjective preferences We relate concepts mechanism design setting agents preferences modelled linear time temporal logic LTL formulae This proposal bridges gap norms mechanism design allowing formally study analyse effect norms sanctions behaviour rational agents The proposed machinery check speciﬁc norms sanctions designers expected effect rational agents behaviour set norms sanctions realise effect exists We investigate computational complexity framework focusing implementation Nash equilibria located second level polynomial hierarchy Despite high complexity positive results line existing complexity results related problems Finally propose concrete executable speciﬁcation language implement multi agent environments We proposed speciﬁcation language generates speciﬁc concurrent game structures abstract multiagent environment setting applied study analyse behaviour multiagent programs norms 2016 Elsevier BV All rights reserved Corresponding author Email addresses nbullingtudelftnl N Bulling MMDastaniuunl M Dastani httpdxdoiorg101016jartint201607001 00043702 2016 Elsevier BV All rights reserved 98 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 1 Introduction The emergence autonomous software systems increasing number interactions open environments Internet ﬁnancial markets large ICT systems sociotechnical systems industrial platforms urgently quires ﬂexible control coordination mechanisms order guarantee desirable overall level properties This urgency painfully clear 2010 socalled Flash Crash uncontrolled uncoordinated interac tions high frequency algorithmic trading systems ﬁnancial environments led extraordinary upheaval US equity markets 63 Similar urgency experienced large ICT systems organisations banks insurance companies competition innovation business processes modiﬁed rapid tempo Such contin uous changes constitute potential threat business processes noncompliant companies business rules policies There increasing need ﬂexible control supervision mechanisms ensure compliance business processes dynamic environments limiting functionality performance business processes 472549 In addition existing cases rapid development autonomous cars strongly suggests future traﬃc populated intelligent autonomous cars interact shared physical environments called smart roads In order guarantee safety throughput smart road environments behaviour autonomous cars regulated intelligent monitoring coordination mechanisms directly steering behaviour 4038 These applications urgency tools techniques design develop analyse intelligent ﬂexible control coordination mechanisms These applications best modelled multiagent systems A multiagent consists inter acting systems situated environment capable autonomous actions environment order meet delegated objectives 68 The individual agents generally assumed heterogeneous sense designed developed parties different technologies pursuing different ob jectives It exactly autonomous heterogeneous character agents multiagent applications require intelligent ﬂexible control coordination mechanisms In general control coordination mechanism multiagent application strike balance autonomy agents hand desirable global properties multiagent hand autonomy agents respected global properties multiagent systems ensured Existing coordination techniques science synchronization techniques interaction protocols ensure overall desirable properties interacting systems However techniques severely limit autonomy intelligence involved systems 29 In artiﬁcial intelligence norms norm enforcement widely proposed ﬂexible effective means coordinating behaviour autonomous agents multiagent systems 504514 Singh et al 62 provide overview uses applications norms multiagent systems Criado et al 26 discuss challenges open issues concerning representation reasoning creation imple mentation norms multiagent systems A multiagent uses norms coordinate behaviour agents called normbased multiagent normative multiagent In general approaches exploit norms coordination purposes multiagent systems Norms endogenous agents sense form integral agents speciﬁcations 5960 exogenous agents sense enforced external regulatory mechanism 227 Each approach comes speciﬁc assumptions applications For example endogenous approach assumes norms internalised agents sense agents decision making mechanisms designed developed based given set norms This assumption implies norms available design time enforced agents agents developers design time The endogenous approach example examine emergent effects norms agentbased simulations 5960486 In contrast exogenous approach agnostic norm internalisation assumes authority monitors agents behaviour enforces norms means preventing norm violations imposing sanctions violating behaviour 6524457 Following exogenous approach autonomous systems respect norms decide violate case incur sanctions It exactly incursion sanctions incentivize restrict agents behave particular way The exogenous approach conceived way engineering multiagent systems easier manage supports general principle separation concerns supports encapsulation coordination control concerns entity separable agents internals 101770 In addition external authority conceived mechanism designed implement norms norm enforcement process This perspective norms norm enforcement allows apply formal tools game theory study analyse norms norm enforcement mechanism design perspective 18193069 This paper follows exogenous approach provides mechanism design perspective norms norm enforce ment A multiagent environment modelled concurrent game structure possible paths game structure denote possible execution traces corresponding multiagent By considering states game structure states environment agents operate concurrent game structure representation mechanism game form speciﬁes effect agents actions multiagent environment The enforcement norms multiagent change effect agents actions environment derlying concurrent game structure set possible execution traces We modiﬁcation concurrent game structure norm enforcement normbased update Clearly sets norms update concurrent game structure The decision set norms use depends behaviour agents turn N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 99 result agents preferences course intended objective multiagent We introduce normbased mechanism design formal methodology analyse norms normbased updates ﬁnd suitable norms taking consideration agents rational behaviour We aim bridging gap norms mechanism design focusing relation multiagent systems norm enforcement concurrent game structures This relation sets stage studying formal properties norm enforcement enforcing set norms implements speciﬁc social choice function describes desired executions relation agents preferences speciﬁc equilibria This allows exam ple analyse group agents willing obey norms The formal analysis closely related work presented 1 65 enforcement norms modelled deactivation transitions Adding norms environments model deactivate transitions case regimenting norms change effect actions case sanctioning norms The achieved relabelling states new propositions encode example sanctions incentives affect behaviour agents Our work motivated 59 60 social laws proposed science control agents behaviour The proposed normbased mechanism design abstract methodology assumes concurrent game structures models multiagent environments In order ground methodology design executable speciﬁcation language support development normbased multiagent systems The aim executable speciﬁcation language facilitate implementation multiagent environments governed norms Multiagent environments norms implemented computational speciﬁcation language provides constructs specify initial environment states actions The execution environment speciﬁcation process continuously observes agents actions updates environment state based speciﬁcation observed actions The implementation multiagent environments norms requires additional constructs specify norms sanctions The execution environment speciﬁcation norms includes additional steps observed agents actions evaluated based given set speciﬁed norms norm violations prevented sanctioned Our abstract normbased mechanism design methodology applied normbased multiagent environment programs order analyse enforcement set norms normbased environment program implement speciﬁc social choice function We investigate complexity verifying given normbased multiagent implements given speciﬁcation Besides veriﬁcation problem analyse decision problem normbased multiagent desirable properties exists In terms complexity results negative sense problems intractable On positive results line existing complexity results related problems The novel contribution work formal methodology analysing norms norm enforcement coordi nating behaviour rational agents This realised applying game theorymechanism design techniques study effects logicbased norms multiagent systems We ground theoretical analysis executable multiagent setting allow development normbased coordination mechanisms multiagent systems This paper extends revises work presented 19 The idea normbased mechanism design ﬁrst proposed extended abstract 18 In comparison 19 signiﬁcantly revise formal setting add new complexity results new decision problems weak strong implementability proofs In addition executable speciﬁcation language related work section running example new The design executable speciﬁcation language inspired programming languages proposed 28 27 interpreter called 2OPL OrganisationOriented Program ming Language developed1 One main differences languages proposed executable speciﬁcation language representation norms While norms 28 27 statebased norms represent prohibited states proposed speciﬁcation language paper considers conditional actionbased norms norms represent prohibited actions speciﬁc states The structure paper follows First Section 2 presents concurrent game structures models multiagent environments connects game theory Section 3 introduces speciﬁcation language normbased multiagent en vironments extends formal setting environments norms sanctions introduces concept normbased mechanism design Section 4 investigates complexity implementation problems Section 5 grounds proposed approach linking normbased multiagent environment programming language Finally related work discussed conclusions drawn The formal proofs computational complexity appendix 2 Multiagent environment model In order illustrate proposal shall use following example paper The example closely related wellknown traingate controller example presented 9 Though slightly modify highlight rational decentralized decision making aspect car drivers Example 1 Narrow road example The scenario consists narrowed road cars opposite ends road The cars simultaneously pass narrowed road In scenario cars wait forever 1 http oopluu sourceforge net 100 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 Fig 1 Road scenario simultaneously causing congestioncrash middle road waiting There alternatives case ﬁrst car moves second waiting vice versa The designer prefers alternatives In order realise behaviour designer aims synthesizing set norms corresponding sanctions enforced behaviour cars satisﬁes given preference assuming drivers behaviours driven individual preferences indicates car position x s m e s start position This scenario illustrated Fig 1 proposition px m middle position e end position We assume following states scenario q0 cars starting positions ps 1 q1 car 1 ending car 2 starting position pe ps 1 q2 car 1 starting car 2 ending position ps pe 1 q3 cars congested middle road pm pm 2 holds 1 q4 cars ending positions pe 2 holds 1 2 holds pe ps 2 holds 2 holds 21 Concurrent structures strategies In following introduce concurrent game structures CGSs 9 modulo minor modiﬁcations They serve models formal analysis environment multiagent systems An environment multiagent assumed speciﬁed terms set states possibly including initial state set synchronized concurrent transitions Informally speaking CGS given labelled transition transitions activated action proﬁles Deﬁnition 1 CGS pointed A concurrent game structure CGS tuple M Agt Q cid2 π Act d o comprising nonempty ﬁnite set agents Agt 1 k nonempty ﬁnite set states Q nonempty ﬁnite set atomic propositions cid2 called propositional symbols valuation π Q Pcid2 nonempty ﬁnite set atomic actions Act Function d Agt Q P Act deﬁnes nonempty sets actions available agents state o cid7 oq α1 αk state q tuple actions deterministic transition function assigns outcome state q α1 αk αi di q 1 k executed Agt q A pointed CGS given M q M CGS q state In following write diq instead di q oq cid9α instead oq α1 αk cid9α α1 αk In CGSs assumed agents execute actions synchronously2 The combination actions current state determines transition Example 2 CGS Our scenario Example 1 formally modelled CGS M1 Agt Q cid2 π Act d o shown Fig 2 Agt 1 2 Q q0 q4 cid2 px Act M W function d deﬁned 1 2 x s m e 2 We note framework allows model turnbased games special case N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 101 Fig 2 The CGS M1 modelling scenario Example 1 Nodes represent states bold symbols qi assigned nodes state names elements px node atomic propositions hold state d1q0 W M d2q0 W M d1q1 W d2q1 W M d1q2 W M d2q2 W d2q3 W d1q3 W d2q4 W d1q4 W π o deﬁned illustrated Fig 2 oq0 M M q3 We note agent 1 2 choice wait W states q1 q3 q4 states q2 q3 q4 respectively In following assume CGS M Agt Q cid2 π Act d o given said A strategy agent conditional plan speciﬁes going situation It makes sense conceptual computational point view distinguish types situations strategies agent base decision current state history events happened In paper consider type strategies called memoryless positional In general memoryless strategies enjoy better computational properties second type strategies called perfectrecall strategies Note memoryless sounds severe actually agent able base decisions current state ﬁnite histories arbitrary ﬁxed length encoded states Deﬁnition 2 Strategy A memoryless strategy agent function si Q Act siq diq The set strategies denoted cid5i A collective strategy group agents A i1 ir Agt tuple3 s A si1 sir si j 1 j r strategy agent j The set As collective strategies given cid5 A A cid5i The set complete strategy proﬁles deﬁned cid5 cid5Agt cid2 Given notation s1 s2 collective strategy agents 1 2 A path λ q0q1 Qω inﬁnite sequence states j 0 1 action tuple cid9α dAgtq j oq j cid9α q j1 The set paths starting state q denoted cid8Mq We write λ j refer jth state path λ λ j refer subpath q jq j1 λ Function outMq s returns unique path occurs agents execute complete strategy proﬁle s state q onward Deﬁnition 3 Outcome The outcome outMq s complete strategy proﬁle s s1 sk state q model M path λ q0q1q2 q0 q j 0 1 2 action tuple cid9α j α j siq j Agt oq j cid9α j q j1 Often omit subscript M outMq s clear context k α j 1 α j The following example illustrates strategies example scenario represented 3 We assume implicit ordering agents obtain unique representative strategy proﬁle 102 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 Example 3 Strategies In CGS Example 2 encode individual strategies 5tuple prescribing action state However agent 1 resp agent 2 choice wait W states q1 q3 q4 resp q2 q3 q4 encode strategies tuple xy indicating agent 1 resp agent 2 executes actions x q0 y q2 resp x q0 y q1 The strategy M W agent 1 selects M state q0 W state q2 W states q1 q3 q4 Each agent 4 strategies resulting total 16 different strategy proﬁles Note strategy deﬁnes action possible states reachable current strategy implemented Therefore strategy proﬁles identical outcome paths For example strategies proﬁles set Mcid91 Mcid92 cid91 cid92 W M result path q0qω 3 22 Agents preferences In behavioural analysis multiagent systems preferences agents utmost importance They driving force agents behaviour In models considering agents preferences deﬁned executions environment paths corresponding CGS Hence assume agents prefer executions Therefore use temporal formulae sets paths This idea followed pieces work similar purposes 1 CTL represent agents preferences 2321 ATL purpose 65 ATL representation objective social law In paper use linear temporal logic LTL ﬁrst proposed 56 veriﬁcation programs modelling preferences agents The logic extends propositional logic operators allow express temporal patterns inﬁnite sequences sets propositions It allows ex press natural properties related safety liveness fairness properties combinations thereof As aim evaluating paths inﬁnite sequences states need logic allows compare paths logic formulae evaluated states This makes LTL natural choice CTL ATL The basic temporal operators U cid2 cid3 eventually cid12 state As propositions drawn ﬁnite nonempty set cid2 properties states Deﬁnition 4 Language LTL Let cid2 ﬁnite nonempty set propositions The formulae LTLcid2 generated following grammar p cid2 proposition ϕ p ϕ ϕ ϕ ϕUϕ cid12ϕ For convenience deﬁne temporal operators cid3ϕ cid2ϕ macros cid13Uϕ cid3ϕ respectively cid13 p p denotes universal truth We omit set propositions cid2 subscript LTLcid2 clear context LTLformulae interpreted ωsequences4 inﬁnite words w sets propositions w Pcid2ω We use notation words w introduced paths λ wi wi We note model M path λ Mmore precisely valuation function included modelinduce ωsequence However semantics general terms shall later prove convenient relating setting mechanism design Deﬁnition 5 Semantics LTL Let cid2 ﬁnite nonempty set propositions w Pcid2ω The semantics LTLcid2formulae given satisfaction relation LTL deﬁned following cases w LTL p iff p w0 p cid2 w LTL ϕ iff w LTL ϕ write w cid16LTL ϕ w LTL ϕ ψ iff w LTL ϕ w LTL ψ w LTL cid12ϕ iff w1 LTL ϕ w LTL ϕU ψ iff N0 wi ψ w j LTL ϕ 0 j Given path λ valuation π write π λ π λ0π λ1 Moreover write λ ϕ model valuation function clear context Similarly usually omit LTL LTL Example 4 Preference In scenario assume car 1 preference ps 1 state ending state prefers pass narrow passage ﬁrst car The path q0qω preference π q0qω 1 π valuation function M1 Example 2 1 modelling wants 2 violates cid12pe 2 cid16 ps ps 2 1 cid12pe ps 2 We use preference lists deﬁne preferences agents 23 Such list consists sequence LTLformulae coupled natural number The formula binary classiﬁer paths modelconsidering induced ωwords propositions The natural number assigns utility paths satisfy respective formula Thus preference list assigns utility value paths model 4 We semantics paths given model We use ωsequences sets propositions makes semantics independent structure speciﬁc model shall prove useful relating setting mechanism design Section 3 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 103 Deﬁnition 6 Preference list preference proﬁle A preference list set propositions cid2 agent Agt 1 k given ﬁnite sequence γi ϕ1 u1 ϕl1 ul1 ϕl ul ϕ j LTLcid2 u j N j 1 l 1 ϕl cid13 ul 0 A preference proﬁle cid2 Agt given cid9γ γ1 γk containing preference list cid2 agent Agt We typically use Prefs denote nonempty set preference proﬁles We omit mentioning set propositions cid2 set agents Agt respectively clear context A preference list agent interpreted agents goals denoting behaviours agent wants realise Given agent Agt preference list γ ϕ1 u1 ϕl ul word w assigned utility u j denote utility outcome path λ π λ w agent ϕ j formula smallest index j γ satisﬁed w w ϕ j l j w cid16 ϕl Note formula γ satisﬁed w formula preference list required cid13 Example 5 Preference proﬁles In scenario consider following preference proﬁles cid9γ1 cid9γ2 cars proposition ﬁnei read agent received ﬁne cid9γ1 cid12pe cid2ﬁne1 3 cid3pe cid2ﬁne1 2 cid2ﬁne1 1 cid13 0 1 1 cid2ﬁne2 2 cid2ﬁne2 1 cid13 0 cid2ﬁne2 3 cid3pe cid12pe 2 2 cid9γ2 cid12pe pe 1 pe cid12pe 1 2 cid2ﬁne1 3 cid12pe 2 cid2ﬁne2 3 cid12pe 2 cid2ﬁne1 2 cid2ﬁne1 1 cid13 0 1 cid2ﬁne2 2 cid2ﬁne2 1 cid13 0 The ﬁrst preference proﬁle egoistic sense cars ﬁrst prefer reach end positions directly sanction eventually end positions sanction ﬁnally sanction The second preference proﬁle social cars ﬁrst prefer end positions directly We note technically ﬁne1 ﬁne2 simply fresh propositional symbols As states model labelled Thus intuitive preferences classify paths according preferences Later Section 314 formally introduce formal machinery update model new propositional symbols particular Example 11 shall return formal treatment context example 23 From CGS game theory In order analyse behaviour agents emerging behaviour use machinery game theory cf 54 A strategic game form tuple ˆG Agt AciiAgt O g Agt set agents Aci set actions available agent Agt O set outcomes g Ac O Ac iAgt Aci outcome function associates outcome action proﬁle For sake readability use notation agents strategic game forms CGSs A strategic game G ˆG cid17iiAgt extends strategic game form preference relation cid17i O agent Agt The preference relation agent induces preference relation action proﬁles a1 cid17i a2 iff ga1 cid17i ga2 a1 a2 Ac We use payoff functions μi O R represent preference relations higher payoff values correspond preferred outcomes It known extensive form game transformed strategic game changing speciﬁc sets strategy proﬁles set Nash equilibria The deﬁnition connects CGSs strategic games following notation 23 The actions strategic game correspond memoryless strategies CGS A payoff function obtained preference proﬁles outcome paths resulting strategy proﬁles Deﬁnition 7 CGS cid4 strategic game form strategic game Let M q pointed CGS Agt 1 k cid9γ γ1 γk Prefs preference proﬁle We deﬁne cid13M q strategic game form Agt cid5iiAgt cid8Mq g sociated M q Agt set agents M cid5i set strategies agent cf Deﬁnition 2 cid8Mq set paths M starting state q gs outMq s s cid5Agt Moreover deﬁne cid13M q cid9γ strategic game cid13M q μiiAgt associated M q cid9γ s cid5Agt payoff function μi deﬁned follows μis u j γi ϕ1 u1 ϕl1 ul1 ϕl ul j minimal index π outMq s LTL ϕ j In general paths CGS obtained memoryless strategies outMq s cid16 cid8Mq As mentioned use memoryless strategies better computational properties Note obtained strategic game form ﬁnite set strategies agent ﬁnite Note deﬁned strategic game welldeﬁned especially entry ϕ u preference list ϕ cid13 scid5Agt cid3 Example 6 Strategic game form For car scenario strategic game form cid13M1 q0 associated M1 q0 illus trated Fig 3 Strategies represented according conventions Example 3 104 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 12 Mcid91 W M W W Mcid92 q0qω 3 q0q2qω 4 q0qω 2 W M q0q1qω 4 qω 0 qω 0 W W q0qω 1 qω 0 qω 0 Fig 3 The strategic game form cid13M1 q0 associated pointed CGS M1 q0 Example 2 We cid91 cid92 M W cid13M1 q0 cid9γ1 12 Mcid91 W M W W Mcid92 W M W W 31 32 11 11 11 23 11 11 13 cid13M1 q0 cid9γ2 12 Mcid91 W M W W Mcid92 W M W W 21 21 11 11 11 12 11 11 12 Fig 4 The strategic games cid13M1 q0 cid9γ1 cid13M1 q0 cid9γ2 Again cid91 cid92 M W Payoff proﬁles given bold indicate Nash equilibria We use x y denote payoff x y agent 1 2 respectively A game theoretic solution concept Nash equilibria dominant strategy equilibrium considered function S domain set strategic games image set strategy proﬁles 54 That strategic game G strategy proﬁles cid5 SG cid5 We assume reader familiar notion solution concept refer 54 details In present work mainly concerned concept Nash equilibrium discuss dominant strategy equilibrium Therefore basic deﬁnitions An action proﬁle a1 ak containing action agent Nash equilibrium agent unilaterally deviate cid7 agent holds better payoff agent case actions cid7 ai1 ak We use N EG refer Nash equilibria given game G A dominant a1 ak cid17i a1 ai1 strategy equilibrium stronger notion Formally proﬁle a1 ak weakly dominant strategy equilibrium agent action ai called weakly dominant strategy5 We refer 58 details Furthermore use DOEG refer set dominant strategy equilibria given game G We lift notion tuples consisting CGS M preference proﬁle cid9γ SM q cid9γ Scid13M q cid9γ best action independent choices opponents Such action ai Example 7 Example 6 contd strategic games We include preference proﬁles cid9γ1 cid9γ1 respectively Exam ple 5 strategic game form Example 6 We obtain strategic games cid13M1 q0 cid9γ1 cid13M1 q0 cid9γ2 shown Fig 4 Bold entries identify Nash equilibria For example N EM1 q0 cid9γ1 W M Mcid92 cid92 M W Mcid91 W M cid91 M W The game cid13M1 q0 cid9γ1 dominant strategy equilibria DOEM1 q0 cid9γ2 Mcid91 Mcid92 cid91 cid92 M W It worth note pure Nash equilibria dominant strategy equilibria exist The matching pennies game6 classical strictlycompetitive game Nash equilibria 54 Concluding remarks In section introduced formal setting shall study effects imposing norms multiagent We LTL deﬁne agents preferences In combination concurrent game structures allow relate multiagent setting normal form games wellstudied mathematical model investigate outcome interactions rational agents We presented concept Nash equilibrium dominant strategy equilibrium examples capture agents rational behaviour The general idea normative mechanism design introduced section depend speciﬁc solution concept 3 Normbased mechanism design So far considered concurrent game structure formal tool model multiagent We assumed agents preferences behaviour As actual agents preferences known advance assume set possible preference proﬁles behaviour givencontaining preferences sensible designer In previous section explained ingredients set stage analyse optimal behaviours multiagent systems considering equilibria game constructed concurrent game structure preference proﬁles With optimal refer behaviours correspond 5 We note weak deﬁnition dominance deﬁnitions use strict preference relation cid19i 6 Each agents shows coin One agent wins coins The wins case The matching pennies game 54 deﬁned cid17i cid7 cid17i cid7 cid7 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 105 Notation Agt Act αi Q q M cid5 cid8 s γi Prefs μi O cid17i ai G ˆG G S P f cid2 cid2h cid2s A N Ncid14 RN SN I N Acti Description DeﬁnedUsed Page set players set actions action player multiagent setting set states state concurrent game structure set memoryless strategies set paths outcome strategy memoryless strategy preference list player set preference lists utility function player outcomes preference relation player action player game theoretical setting strategic game strategic game formmechanism set strategic game forms solution concept players normative behaviour function propositions hard soft facts hard facts soft facts subset action proﬁles normative normative set regimentation norms set sanctioning norms implementation setting set normative systems set actions player Deﬁnition 1 Deﬁnition 1 Deﬁnition 1 Deﬁnition 1 Deﬁnition 1 Deﬁnition 1 Deﬁnition 2 Section 21 Deﬁnition 3 Deﬁnitions 2 Deﬁnition 6 Deﬁnition 6 Deﬁnition 7 Section 23 Section 23 Section 23 Section 23 Section 311 Section 311 Section 311 Deﬁnition 8 Section 313 Section 313 Section 313 Deﬁnition 9 Deﬁnition 9 Deﬁnition 9 Deﬁnition 9 Deﬁnition 9 Deﬁnition 12 Deﬁnition 12 Deﬁnition 15 100 100 100 100 100 100 99 100 101 101 103 103 103 103 103 103 103 105 105 105 106 106 106 106 107 107 107 107 107 112 112 117 Fig 5 Overview commonly notation outcome Nash equilibria In section assume social choice function given models multiagent designers preferred behaviour called social perspective A social choice function indicates behaviour socially preferred preferred designer agents act according speciﬁc preference proﬁle The problem consider section implementation problem formulated follows Suppose given set agents preference proﬁles socially preferred behaviour aligned agents preferred behaviour given agents preference proﬁles optimal behaviour agents perspective represented Nash equilibria alignedcontradicts optimal behaviour designers perspective represented social choice function The question enforcement norms means regimentation sanctions agents behaviour align preferred behaviour perspectives enforcement norms agents behaviour change agents behaviour socially preferred behaviour A second elaborate question existence set norms enforcement aligns preferred behaviour agents designers perspectives We coin design set norms change agents behaviour inspired mechanism design normbased mechanism design In order ease reading rest paper list concepts formalisation notation Fig 5 31 Preliminaries We start reviewing concepts classical mechanism design introducing corresponding concepts norm based mechanism design In particular deﬁne concept normative behaviour function counterpart concept social choice function classical mechanism design We introduce concept norms normbased multiagent explain inﬂuence agents behaviour We deﬁne notion norm enforcement formally update function changes speciﬁcation multiagent based given set norms These concepts set stage normbased mechanism design 311 Classical mechanism design In exposition classical mechanism design follow presentation 54 particular use notation allows clearly relate classical concepts corresponding ones normbased mecha nism design In social choice theory social choice rule f P PO assigns subset outcomes set outcomes 106 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 1 1 cid17 f ast 2 O preference proﬁle cid17 cid17iiAgt P consisting preference relation cid17i O agent Agt Here consider P set preference proﬁles In contrast social choice function picks exactly element outcome set outcomes For example proﬁle cid17 f ast express agents pref erence driving fast In case social choice function map preference proﬁle outcome oh representing build highway f cid17 f ast cid17 f ast 2 oh In following discussion focus social choice rules The outcome f cid17 social outcome deﬁned social choice rule f Mechanism design concerned problem constructing mechanisma strategic game formwhich implements social choice rule assuming speciﬁc rational behaviour agents The mechanism constructed structure ﬁxing set agents Agt set possible outcomes O set possible preference proﬁles P outcomes O set strategic game forms G outcomes O The mechanism drawn G This ﬁxed structure different names literature Osborne Rubinstein 54 refer environment Shoham LeytonBrown 58 use related formalisation terms Bayesian game settings We follow 54 order avoid confusion notation refer structure implementation setting Now strategic game form G G preference proﬁle cid17 P deﬁnes strategic game G cid17 Given solution concept S Nash equilibrium strategic games mapping G cid17 set action proﬁles formulate Simplementation problem implementation setting follows A game form G G Simplements social choice rule f P preference proﬁles cid17 P equilibria a1 aAgt SG cid17 outcome obtained a1 aAgt contained7 f cid17 We emphasize SG cid17 contains strategy proﬁles game G cid17 satisfy solution concept S 312 Normative behaviour function As discussed social choice theory social choice rule assigns outcomes given proﬁles preferences In setting social choice rule represents preference designer deﬁned function8 assigns LTLformuladescribing set pathsto preference proﬁle sequence sequences LTLformulae agents From considering normbased mechanism design concepts use notation introduced previous sections Deﬁnition 8 Normative behaviour function Let Prefs set preference proﬁles cid2 A normative behaviour function8 f mapping f Prefs LTLcid2 Similar classical mechanism design preference designer describes designers desired outcome agents given preference proﬁle true proﬁle Thus representing preference designer normative behaviour function allows model designers uncertainty true preferences agents The following simple example preference designer independent agents preferences maps possible preference proﬁles LTLformula We choose deliberately example simple clear preference designer single formula depends agents preferences Example 8 Normative behaviour function We assume preference designer represented following normative behaviour function indicates cases ﬁrst car reach end position directly f cid9γi cid12pe 1 We refer outcome normative outcome wrt given preference proﬁle In view aim normbased mechanism design come normbased mechanism environment speciﬁed terms actions norms sanctions agentsagain following rationality criterion according preferencesbehave way possible environment executions stay normative outcome The idea norms sanctions demotivate agents perform speciﬁc actions Example 9 Nonaligned preferences Following Example 7 cid9γ1 path q0q2qω Nash equilibrium M1 satisfy preference f cid9γ1 designer 4 yielded strategy proﬁle W M M W 313 Normative hard soft facts In remainder section let cid2 ﬁnite nonempty set propositions We assume cid2 partitioned types propositions set cid2h denotes hard facts cid2s soft facts Hard facts physicalbrute properties multiagent environment turn deﬁne action structure CGS 7 Sometimes assumed outcomes speciﬁed f cid17 obtained equilibrium It common consider social choice function maps single outcomes social choice rule 8 We emphasize deﬁnition function When considering set paths satisfying LTLformula formula shows characteristics social choice rule N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 107 For example typical hard facts car certain position traﬃc light red Soft facts model properties affect action structure affect agents preferences For example model car violated traﬃc norm car received ﬁne car arrived late destination use car shorthand driver car In words modiﬁcation soft facts change available actions executability affect evaluation agents preferences The classiﬁcation hard soft facts depends speciﬁc modelling In following assume given set hard facts cid2h set soft facts cid2s sets ﬁnite nonempty disjoint Therefore assume CGS M Agt Q cid2 π Act d o given cid2 cid2h cid2s In paper distinguish types norms Sanctioning norms enforced sanctions imposed execution actions speciﬁc states Regi menting norms enforced modifying effect execution actions speciﬁc state actions effectless 27 In following use PL X set X propositional atoms refer propositional formulae X denote PL satisfaction relation propositional logic P Actk Pcid2s Deﬁnition 9 Norms normative A norm M element PLcid2h A norm type ϕ A regimenting norm type ϕ A S nonempty S cid2s sanctioning norm A set norms N called normative M typical norm denoted η Ncid14 normative Nrs N1 N2 set normative systems We deﬁne Ns Nr set normative systems consisting sanctioning regimenting norms respectively We write ϕ A refer sanctioning regimenting norm A norm ϕ A read forbidden perform action proﬁles A ϕstates states ϕ holds enforcement norm prevents action proﬁles A performed A norm ϕ A S read forbidden perform action proﬁles A ϕstates enforcement norm imposes sanctions S states resulting performing action proﬁle A ϕstate The basic idea sanctioning norms enforced model change valuation states soft facts underlying physical structure represented hard facts remains intact action structure model remains intact As later paper agents preferences deﬁned soft facts changes valuations states soft facts affect agents rational behaviour Regimenting norms affect physical structure directly affect action structure model We note norm ϕ A seen prohibition prohibited action proﬁle A executed states satisfying ϕ obligation perform action proﬁle A state satisfying ϕ This corresponds duality obligations prohibitions prohibition action obliged action Example 10 Norms In order avoid cars congest narrow road introduce sanctioning norms The ﬁrst norm prohibits ﬁrst car wait start position ps 2 second car waits The violation 1 2 W W ﬁne1 The ps norm imposes sanction ﬁne1 car 1 sanctioned This norm represented ps 1 2 cid9 M cid9 second norm prohibits second car start position This norm represented ps 1 M W ﬁne2 Note norms implement priority passage narrowed road obliging car 1 car 2 wait ps ps It important note sanctioning norms directly inﬂuence quantitative utility agent obtains speciﬁc elements preference list longer satisﬁable To illustrate consider preference proﬁle cid9γ1 introduced Example 5 cid9γ1 cid12pe 1 cid12pe 2 cid2ﬁne1 3 cid3pe 1 cid2ﬁne2 3 cid3pe 2 cid2ﬁne1 2 cid2ﬁne1 1 cid13 0 cid2ﬁne2 2 cid2ﬁne2 1 cid13 0 In general outcome ensures agent 1 payoff 3 outcome satisﬁes cid2ﬁne1 The enforcement norm sanctioning norms type ϕ A ﬁne1 appropriate formula ϕ cid12pe 1 set action proﬁles A impossible yield outcomes cid2ﬁne1 holds In case impossible agent obtain utility 3 The technical details procedure introduced section 314 Normbased update In order examine impact enforcement set norms multiagent systems need determine applicable norms sanctions Therefore need decide norms applicable concurrent game structure sanctions imposed concurrent game structure A norm η ϕ A applicable state satisﬁes ϕ action tuple A performed 108 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 Deﬁnition 10 Applicable norms sanctions Let N Nrs normative X cid2 set facts cid9α action proﬁle The set norms N applicable wrt X cid9α denoted AppN X cid9α deﬁned follows AppNX cid9α η N η ϕ A X PL ϕ cid9α A The set sanctions N imposed based X cid9α denoted SanN X cid9α computed follows SanNX cid9α cid4 cid3 S ϕ A S AppNX cid9α AppNX cid9α contains regimenting norm We note evaluation X PL ϕ polynomial time corresponds evaluating propositional formula respect given truth assignment represented set X Note use set facts X cid2 state q Q triggers norms sanctions We order reuse deﬁnition later paper In following use SanNπ q cid9α determine sanctions wrt N q cid9α We emphasize computed sanctions state q meant imposed state reached executing cid9α computed sanctions imposed state oq cid9α The enforcement set norms multiagent modelled updating concurrent game structure multiagent normative regimenting sanctioning behaviour depending type norm Deﬁnition 11 Update norms Let M Agt Q cid2 π Act d o concurrent game structure N Nrs norma tive M The update M N denoted M cid2 N CGS Agt Q cid7 cid2 π cid7 Act d cid7 cid7 o cid7 cid9α q S SanNπ q cid7 cid9α cid16 S cid16 1 Q 2 π cid7x cid5 cid7 Q q S q π x π q S cid7 Q cid9α Actk oq x Q x q S cid7 ix diq x q x q S Agt 3 d 4 o cid7x cid9α oq cid9α S oq cid9α x S SanNπ q cid9α cid16 S cid16 SanNπ q cid9α SanNπ q cid9α x q S cid7 S cid7 cid2s x q The ﬁrst item shows duplicate states Q sanctioned regimented The second item deﬁnes updated evaluation sanctioned states The item ensures new duplicated states options original counterparts This fact sanctions solely deﬁned soft propositions affecting transition structure Finally fourth item ensures outcome actions states Q new duplicates accordance original model actions states regimented regimented actions effect loop state It important notice looping regimented action state models situation action performed interpreted nonperformance action In case remains state The following example illustrates effect actions determined updated model Example 11 Normbased update The normbased update environment model M1 illustrated Fig 2 based 2 cid9 M cid9 M W ﬁne2 denoted M2 M1 cid2 normative N1 ps 1 1 N1 results new CGS shown Fig 6 In particular effects action proﬁles M M M W W W duplicated state q0 ﬁne1 M1 cid2 N1 deﬁned follows 2 W W ﬁne1 ps ps ps cid7 o cid7 q0 ﬁne1 M M oq0 M M ﬁne2 q0 ﬁne1 M W oq0 M W cid7 q0 ﬁne1 W W q0 ﬁne1 o o ps 2 M M ps A different normbased update environment model M1 normative consists regimenting norms N2 ps 2 W M illustrated Fig 7 It observed regimen 1 tation norms allow car 2 starting position Note action proﬁles subject norm regimentation However mean individual agents subject norm regimentation For example resulting transition Fig 7 allows car 1 action starting position prevents action car 2 ps 1 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 109 Fig 6 The CGS M2 models M1 cid2 N1 normbased update M1 based N1 It important notice sanctions accumulate state transitions This reﬂected following proposition expresses states carry sanctions caused recent action recent action regimented Proposition 1 Nonaccumulation sanctions Let M Agt Q cid2 π Act d o M cid2 N Agt Q x q x q S cid7 cid2s We cid7 S cid5 cid7 cid2 π cid7 Act d cid7 o cid7 q Q cid7 π cid7 o x cid9α cid2s SanNπ q cid9α π cid7x cid2s SanNπ q cid9α cid16 Proof Directly follows Deﬁnition 11 o cid7 ensures S cid7 ignored cid9α cid2 The nonaccumulation sanctions holds state transitions place based nonregimented actions A reg imented action loops state sanctions causes state transitions sanctions removed consecutive states regimentation actions identical Although suggest sanctions accumulated consecutive states persistence sanctions state transitions caused regimented actions interpreted receiving sanctions repeatedly Note consistent interpretation regimented actions performed consecutive states regimented actions considered remaining state However agree alternative solution regimented norm causes state transition fresh copy current state sanctions removed This design choice We note previous version work 19 completely removed speciﬁc transitions As result selection individual actions agents yield invalid action proﬁles The selection invalid action proﬁles essentially avoided assigning negative utility We observe updating CGS regimenting norms duplicate state modify accessibility relation state However updating CGS sanctioning norms duplicate introduce new states This update essentially different norm update introduced 1 In case regimentation remove accessibility relation states enforcing looping transition case sanctioning add new copies states extend accessibility relation In 1 update results restricting accessibility relation removing transitions model Another characteristic model update different orders updates regimenting norms result outcome turn single update union regimenting norms That M cid2 RN cid2 RN cid7 M cid2 RN cid7 cid2 RN M cid2 RN RN cid7 110 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 Fig 7 Normbased update M1 based N2 Observe true sanctioning norms different orders updates sanctioning norms necessarily result CGS This means CGS M nonempty sets SN1 SN2 M cid2 SN1 cid2 SN2 cid16 M cid2 SN2 cid2 SN1 cid16 M cid2 SN1 SN2 This fact updates sanctioning norms duplicate states subsequent updates generate different states One obvious reason different orders updates sanctioning norms result different models syntactic nature interpreting strictsyntactic equality We illustrate small example Suppose new state q S1 result norm update Now model updated normative yield states type q S1 S2 Clearly reversing order update performed yields states type q S 2 S1 different previous types states S 1 cid16 S2 Next consider example shows subsequent updates sanctioning norms generate states updating union sanctioning norms illustrated example Conceptually norm violations occurring time sanctioned immediately This reﬂected deﬁnition norm update illustrated Example 12 Fig 8 Example 12 Update order sanctioning norms We consider CSG M shown Fig 8 update SN1 ˆq s1 SN2 ˆq s2 different orders ˆq propositional formula true state q respectively The example showed models different Interestingly Example 12 models M cid2 SN1 cid2 SN2 M cid2 SN2 cid2 SN1 M cid2 SN1 SN2 restricted states reachable q models identical apart names states Essentially given pointed CGS different orders updates sanctioning norms result similar CGSs consider parts updated CGSs reachable initial state Indeed shown models M cid2 SN1 cid2 SN2 M cid2 SN2 cid2 SN1 identical apart names states9 restricted reachable given state One tempted conclude sense models similar M cid2 SN1 SN2 case reachable model strictly states previous models It conjecture reachable models bisimilar As results directly relevant exposition paper omit formal treatment matter The order updates nonempty sets sanctioning regimenting norms important updating ﬁrst sanctioning norms regimenting norms result different outcomes updating ﬁrst regimenting norms sanctioning norms Moreover subsequent updates regimenting sanctioning norms necessarily result outcome single update union regimentation sanctioning norms The reason consecutive updates RN SN result different outcomes single update RN SN The basic intuition regimenting norms priority action regimented sense sanction action nature regimentation longer executed This means CGS M nonempty sets SN RN 9 More formally isomorphic sense Deﬁnition 24 Reachability formally introduced Deﬁnition 23 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 111 Fig 8 Updating CGS M sanctioning norms different orders results different models Fig 9 Updating CGS M sanctioning regimenting norms different orders results different models M cid2 RN cid2 SN cid16 M cid2 SN cid2 RN cid16 M cid2 RN SN These observations illustrated Example 13 Fig 9 M cid2 SN cid2 RN different M cid2 RN cid2 SN different M cid2 RN particular case M cid2 RN SN Example 13 Update order sanctioning regimenting norms We consider CGS M shown Fig 9 update SN ˆq s RN ˆq different orders ˆq propositional formula true state q respectively We summarize results following proposition Proposition 2 Properties norm update Let M Agt Q cid2 π Act d o CGS RN RN SN Ns set sanctioning norms M Also let N RN SN Then cid7 Nr sets regimenting norms 1 M cid2 Ncid14 M 2 M cid2 RN cid2 RN 3 In general M cid2 SN cid2 RN cid16 M cid2 N M cid2 RN SN cid16 M cid2 RN cid2 SN 4 If forall q Q cid9α dAgtq AppRNπ q cid9α AppSNπ q cid9α M cid2 N M cid2 RN cid2 SN cid7 cid2 RN M cid2 RN RN cid7 M cid2 RN cid7 112 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 classical mechanism design setting agents Agt outcomes O preference relation cid17i set preference proﬁles P mechanism G G set mechanismsstrategic game forms G implementation setting Agt O P G social choice rule f P PO normbased mechanism design setting agents Agt ωwords Pcid2s cid2hω preference list γi LTLformulae set preference proﬁle lists Prefs normative mechanism M N set normbased mechanisms N N1 N2 wrt M normbased implementation setting M Prefs N normative behaviour function f Prefs LTL Fig 10 Correspondence mechanism design normbased mechanism design Proof 1 Obvious 2 Regimenting norms introduce loops Applying regimenting norm regimented action effect 3 Follows Example 13 4 If state regimenting norm sanctioning norm applicable updates interfere The result follows trivially cid2 The properties concern iterated applications update operation In rest paper focus single updates 32 Implementation setting In section introduce normbased mechanism design considering mechanism norms inﬂuence agents behaviour We use normative behaviour function assign set desired environment executions desired designers perspective represented LTLformula preference proﬁle agents Thus based preferences agents designer prefers speciﬁc outcomes The aim normbased mechanism design yield normative set regimenting sanctioning norms given environment enforcement normative environment motivates agents behave way outcomes preferred designer realised The idea enforcement norms demotivates prevents agents perform speciﬁc actions In order predict agents act assume act rationally What playing rationally means shall speciﬁed game theoretic solution concepts Below introduce normbased implementation setting mechanism design interpreted terms norms The basic structure consists CGS set preference proﬁles set normative systems applied CGS change underlying CGS A tuple consisting CGS normative called normbased mechanism In sense normbased mechanism relates game forms mechanisms classical mechanism design Outcomes deﬁned paths preferences paths speciﬁed preference proﬁles based LTLformulae In Fig 10 summarize correspondence classical mechanism design normbased mechanism design Deﬁnition 12 Normbased implementation setting A normbased implementation setting NIS given tuple I M Prefs N M Agt Q cid2 π Act d o CGS cid2 cid2h cid2s partitioned hard soft facts Prefs set preference proﬁles Agt cid2 N N1 N2 set normative systems cid2 Ni SNi RNi SNi Ns RNi Nr The tuple I q q state M called pointed normbased implementation setting For remainder section assume I M Prefs N ﬁxed implementation setting M Agt Q cid2 π Act d o q state M Deﬁnition 13 Normbased mechanism Let N Nrs normative M The tuple M N called normbased mechanism A normbased mechanism M N gives rise CGS updating M N introduced Deﬁnition 11 Example 14 Normbased mechanism The environment model M1 illustrated Fig 2 normative N1 deﬁned Example 11 constitute normbased mechanism M1 N1 gives rise CGS M2 Example 11 Fig 6 The CGS M2 yields turn strategic game form cid13M1 cid2 N1 q0 illustrated Fig 11 For simplicity reasons encode strategies triples x y z For agent 1 resp agent 2 triple encodes agent executes action x q0 y q cid7 2 resp x q0 y q cid7 0 z q1 cid7 0 z q A normbased mechanism deﬁnes regimenting sanctioning norms inﬂuence agents behaviour certain direc tions Agents assumed act rationally particular accordance preferences We use concept Nash N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 113 12 M cid91 cid9cid7 1 W W W W W M W M W W M M M cid92 cid9cid7 2 cid7 ω q0q 3 cid7 ω q0q 2 cid7 2qω q0q 4 cid7 ω q0q 2 cid7 2qω q0q 4 W W W q0qω 1 cid7 ω q0q 0 cid7 ω q0q 0 cid7 0qω q0q cid7 0qω q0q 1 1 W W M q0q1qω 4 cid7 ω q0q 0 cid7 ω q0q 0 cid7 0q1qω cid7 0q1qω 4 4 q0q q0q W M W q0qω 1 cid7 ω cid7 0q q0q 2 cid7 cid7 2qω 0q q0q 4 cid7 ω cid7 0q q0q 3 cid7 ω cid7 0q q0q 3 W M M q0q1qω 4 cid7 ω cid7 0q q0q 2 cid7 cid7 2qω 0q q0q 4 cid7 ω cid7 0q q0q 3 cid7 ω cid7 0q q0q 3 Fig 11 The game form associated M1 cid2 N1 cid91 cid9cid7 1 cid92 cid9cid7 2 M W cid13M1 cid2 N1 q0 cid9γ1 2 M cid92 cid9cid7 10 10 20 10 20 2 M cid92 cid9cid7 10 10 20 10 20 W W W W W M W M W W M M 31 01 01 01 01 32 01 01 02 02 31 01 00 00 00 32 00 00 00 00 cid13M1 cid2 N1 q0 cid9γ2 W W W W W M W M W W M M 21 01 01 01 01 22 01 01 02 02 21 01 00 00 00 22 00 00 00 00 12 M cid91 cid9cid7 1 W W W W W M W M W W M M 12 M cid91 cid9cid7 1 W W W W W M W M W W M M Fig 12 Strategic games cid13M1 cid2 N1 q0 cid9γ1 cid13M1 cid2 N1 q0 cid9γ2 bold entries mark Nash equilibria cid91 cid9cid7 1 cid92 cid9cid7 2 M W equilibrium rationality criterion As fulﬁlment agents preferences depends valuation states path agents behaviour affected imposing norms sanctions cause modiﬁcation states valuations Thus norms provide incentive case sanctioning norms agents change behaviour Therefore key question engineer good incentives In 19 required successful implementation normative behaviour function resulting Nash equilibria agree behaviour speciﬁed normative behaviour function essentially case classical game theoretic implementation setting given 54 Following 69 30 introduce weaker notion implementation existence good behaviour suﬃcient We use notation 69 30 introduce weak strong implementation Deﬁnition 14 Simplementation Let I M Prefs N N N We normbased mechanism M N strongly Simplements normative behaviour function f I q iff cid9γ Prefs Scid13M cid2 N q cid9γ cid16 s Scid13M cid2 N q cid9γ outMcid2Nq s LTL f cid9γ We M N weakly Simplements normative behaviour function f I q iff cid9γ Prefs s Scid13M cid2 N q cid9γ outMcid2Nq s LTL f cid9γ We deﬁne following corresponding sets SIS I q f N N M N strongly Simplements f I q WIS I q f N N M N weakly Simplements f I q If SIS I q cid16 resp WIS I q cid16 f strongly resp weakly Simplementable I q The example gives normbased mechanism strongly N E implements normative behaviour function Example 15 Norm implementation Adding preference proﬁles cid9γ1 cid9γ2 game form cid13M1 cid2 N1 q0 Example 14 results strategic games shown Fig 12 Bold payoffs indicate Nash equilibria The equilibria paths satisfy designers preference Concluding remarks This concludes formal model normbased mechanism design The complexity results following section based Nash equilibrium implementability In general solution concepts like dominant strategy equilibria considered depending problem stake A natural question interested strong weak implementability The short answer obtain stable desired behaviour For illustration let consider 114 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 smart energy grids involving actors producers consumers regulation authorities For sake argument simply assume producers consumers act rationally according concept Nash equilibrium Clearly idealised abstracted view10 believe delivers main ideas framework The regulation authority information producers consumers preferences The information obtained based common knowledge power available previous behaviour producers consumers market research techniques The regulation authority objectives ﬂattening peak energy demand consumers eﬃcient energy production producers wants met As actors self interested 1 stable behaviour sense optimal social solution 2 satisfy objectives regulation authority In order overcome problems authority introduce enforce norms order restrict incentivize consumers producers change behaviour For example additional fees11 charged consumers energy speciﬁc hours ﬁnes imposed producers overproduction In context strong implementability means stable behaviours satisfy authoritys objectives actors act rationally play equilibrium strategies objectives regulation authority guaranteed On hand weak implementability indicates stable behaviour satisfy objectives regulation authority additional means needed coordinate behaviour Weak implementability seen ﬁrst step Obviously applications formal methodology analyse improve overall behaviour transportation systems traﬃc ﬁnancial markets business processes In general formal methodology applied applications behaviour involved actorsprocesses need monitored controlled In paragraph shall investigate complexity weak strong implementation 4 Veriﬁcation complexity issues In section consider complexity problem normative implements normative behaviour function normative exists We focus implementation Nash equilibria These results important order check normgoverned environment ensures agents rational behaviour satisﬁes speciﬁcation We present proofs main results moved technical details appendix For complexity results ﬁrst need clear size input measured The size CGS deﬁned product number states number transitions denoted M The size ﬁnite normative N given number norms comprised times maximal length propositional formula contained norm N norm measured terms size precondition assumed elements bound size model agents preferences The size set normative systems measured N Nmax Nmax N normative maximal size contained N Moreover assume considered normative behaviour function f polynomialtime computable The ﬁrst result investigates complexity performing normbased update Proposition 3 Let I M Prefs N given For N N M cid2 N computed polynomial time wrt size M N The size M cid2 N bounded O M4 Proof Let Mcid7 M cid2 N n t denote number states transitions M respectively The set AppNπ q cid9α computed polynomial time size N η ϕ A N checked π q PL ϕ To determine size Mcid7 bounded n n n t O n2t cid7 cid9α bounded n t Proposition 1 sanctions accumulated number tuples π q n2 t new states form q S In new state q S choices q number outgoing transitions The number transitions Mcid7 bounded O n4 t3 O M4 cid2 bounded O n2t t O n2t2 Thus size Mcid7 inspect Deﬁnition 11 The number states Mcid7 The result concerned special case weak implementation problem We investigate complexity verifying given normative weakly implements given normative behaviour function Hardness shown reduction QSAT2 refers satisﬁability problem Quantiﬁed Boolean Formulae cf Appendix A In appendix construct model Mφ preference proﬁle QSAT2formula φ Nash equilibrium iff φ satisﬁable The construction Mφ based construction proposed 22 10 In particular assume energy demanded supplied measured qualitatively expressing low medium high demand 11 We note ﬁnes incentives measured quantitatively assuming set possible numerical values ﬁnite ﬁxed advance We stress purpose example illustrate conceptual idea approach giving fullﬂedged realworld modelling smart grids N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 115 Theorem 4 Weak implementation veriﬁcation Let I q pointed NIS I M Prefs N N N normative Let f normative behaviour function The problem N WIN E I q f cid2P 2 complete size M N Prefs cid7 cid7 cid7 Proof Membership We construct nondeterministic polynomial time oracle Turing machine M calls It takes input strategy proﬁle nondeterministic polynomial time Turing machine M s returns true proﬁle Nash equilibrium Therefore agent oracle machine M guesses cid7 yields better payoff s If proﬁle yields better payoff individual strategy s machine returns true The machine M works follows Firstly M computes M cid2 N Then proﬁle cid9γ Prefs machine guesses strategy proﬁle s checks π outq s LTL f cid9γ The check polynomial deterministic time s determines cyclic path M truth lineartime temporal formula easily determined If successful machine checks s Nash equilibrium cid13M q cid9γ calling M reverting answer This shows problem N WIN E I q f cid2P 2 cid7 checks si s We ﬁrst machine M Sketch hardness The hardness result proven Theorem 18 appendix Here high level idea reduction QSAT2 weak implementability problem Given QSAT2 formula φ construct player CGS Mφ consisting refuter player r veriﬁer player v Essentially players decide value universally existentially controlled variables respectively Once decide truth assignment play game evaluate Boolean formula contained φ following game theoretical semantics propositional logic That refuter player r veriﬁer player v control conjunctions disjunctions respectively Using result construct preference proﬁle γv γr φ satisﬁable iff s N EMφ q0 γv γr outq0 s satisﬁes constructed formula f γv γr state q0 distinguished initial state Mφ Now case normative systems Ncid14 WIN E I q0 f cid2 NPNP cid7 2 Analogously previous result investigate given normative strongly implements norma tive behaviour function In following veriﬁcation version strong implementation problem This complexity class consists problems solved polynomialtime deterministic oracle Turing 2 cf 67 Nonadaptive means queries cid2P 2 P cid23 machine nonadaptive queries problem cid2P independent words possible perform parallel Theorem 5 Strong implementation veriﬁcation Let I q pointed NIS I M Prefs N N N normative Let f normative behaviour function The problem N SIN E I q f P 2 hard cid3P 2 hard size M N Prefs The problem cid2P cid2P 2 cid23 2 Proof Membership We construct deterministic polynomial time Turing machine TM N cid2P 2 oracle implemented twice nondeterministic TM N check N Ecid13M cid2 N q cid9γ cid16 s N Ecid13M cid2 N q cid9γ holds π outMcid2Nq s LTL f cid9γ The ﬁrst proof Theorem 4 For second N calls N additional input f cid9γ reverts answer N works similar TM M Theorem 4 N uses N This shows problem P NPoracle The TM N 2 cid7 cid7 cid7 cid7 cid7 cid2P 2 cid23 Sketch hardness The hardness results proven Theorem 21 The intuition similar given Theo rem 4 twoplayer model Mφ preference proﬁles players changed This case technically diﬃcult veriﬁcation problem consists parts ensuring set Nash equilibria nonempty ii ensuring Nash equilibria satisfy outcome normative behavior function For cid3P 2 hardness need slightly modify model Mφ updating roles veriﬁer refuter cid2 The lemma shows normative systems enjoy small representation property update model normative systems obtained small normative polynomial size model Lemma 6 Let I M Prefs N given N Nr Ns Nrs For N N N cid7 M cid2 N M cid2 N k number agents M cid7 N N cid7 2 Q Actk cid10 Proof Let N given comprised sanctioning norms SN regimenting norms RN For q Q cid9α Actk p We add sanctioning norm π q cid9α Sq cid9α ﬁne Sq cid9α SanNπ q cid9α π q formula cid7 cid7 Q Actk It remains M cid2 N M cid2 N cid7 N cid7 By Proposition 24 properties N Thus consider sanctioning regimenting norms separately Sq cid9α π q cid9α We observe N M cid2 N cid7 M cid2 RN cid7 Firstly M cid2 RN M cid2 RN AppRNπ q cid9α iff AppRN cid7 π q ϕ cid9α A This implies π q cid9α RN Let q cid9α state action proﬁle M respectively It suﬃces cid7 π q cid9α AppRNπ q cid9α cid16 implies η ϕ A RN cid7 π q cid9α cid16 cid7 π q cid9α cid16 AppRN implies AppRN pπ q p cid7 cid7 cid2 SN p π q cid10 116 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 implies η π q π q π q cid7 cid7 cid9α RN π q ϕ implies AppRNπ q cid9α cid16 cid7 This implies ηcid7 ϕ A RN cid9a A π q cid7 ϕ But Secondly SanSN cid7 π q cid9α SanSNπ q cid9α q cid9α M AppRNπ q cid9α SanSN cid7 π q cid9α cid11 cid11 cid11 cid11 cid7 cid7 q q cid9α Sqcid7 cid9α AppSN cid9α Sqcid7 cid9α AppSN Sqcid7 cid9α π Sqcid7 cid9α π S ϕ A S AppSNπ q S ϕ A S AppSNπ q cid9α cid7 cid7 π q cid9α cid7 π q cid9α π q π q cid7 cid7 cid9α π q π q SanSNπ q cid9α This implies updates yield identical models cid2 Now consider problem normative systems weakly implements normative behaviour function Theorem 7 Weak implementation existence Let I q pointed NIS N Nrs Nr Ns N N f normative behaviour function The problem WIN E I q f cid16 cid2P 2 complete cid7 WIN E I q f We Proof Membership By Lemma 6 N WIN E I q f small normative N extend algorithm described proof Theorem 4 way TM M guesses addition strategy proﬁle small normative N works Hardness follows Theorem 4 cid2 For strong implementation longer possible guess strategy proﬁle normative behaviour function satisﬁed Nash equilibria Thus use result Theorem 5 ﬁrst small normative guessed Theorem 8 Strong implementation existence Let I q pointed NIS N Nrs Ns Nr N N f normative behaviour function The problem SIN E I q f cid16 cid2P 3 complete Proof Membership By Lemma 6 N SIN E I q f small normative N cid7 construct nondeterministic TM M uses N additionally guesses small normative N works N This shows problem NPcid4P cid7 SIN E I q f We Theorem 5 oracle TM M works N Theorem 5 Sketch hardness The hardness proof sanctioning norms regimentation norms given Theorems 25 29 respectively basic intuition similar given Theorems 4 5 construction slightly sophisticated As reduce QSAT3 strong implementation problem need include additional existential quantiﬁcation QSAT3 construction For purpose encode truth assignment variables normative Guessing normative corresponds guessing truth assignment newly existentially quantiﬁed variables The diﬃculty construction ensure guessed normative affect good parts model construction previous hardness results Theorems 4 5 normative guessed players essentially simulate semantics φ guessing truth assignments variables scope quantiﬁers given QSAT3formula followed playing game theoretic game evaluate resulting propositional formula cid2 3 cid2P 3 Concluding remarks In section analysed complexity weak strong implementation problem The computational com plexity membership problems given normative weakly strongly implements normative behaviour function respectively shown essentially located second level polynomial hierarchy 55 In 37 shown checking existence pure Nash equilibrium NPcomplete strategy proﬁle guessed veriﬁed polynomial time Nash equilibrium The check poly nomial time setting considered number strategies player exponential size model ActQ NPNP intuitive weak implementation existential problem guess strategy proﬁle speciﬁc properties verify deviations coNPNP strong implementation universal problem Our results complex lower bound cid3P 2 ities decision problems considered line intuitive bounds Theorem 5 cid2P 2 cid3P upper bound Moreover weak implementation problem diﬃcult veriﬁcation checking given normative weakly implements normative behaviour function The complexity strong implementation problem located level polynomial hierarchy The results Given observation lower bound cid2P 2 2 hardness prove P cid2P 2 cid23 2 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 117 appear bad compared complexity results 69 context Boolean games The authors problem taxation scheme ensures existence pure Nash equilibrium desirable properties cid2P 2 complete pure setting Boolean games Thus hope better results weak implementation problem That strong implementation problem diﬃcult weak ver sion cid2P 3 complete stems fact additional normative guessed Nash equilibria satisfy speciﬁc property 5 Multiagent environment programs The model multiagent environment proposed Section 2 abstract sense assumes set states state transitions internal structure In section propose speciﬁcation language program multiagent environments The introduction speciﬁcation language allows program mechanisms apply formal methodology proposed Section 3 analyse behaviour programs In way check environment program ensure designers objectives given participating agents behave according preferences The proposed language allows speciﬁcation initial environment state set synchronized actions In environment programming agnostic individual agents programmed We assume set agents performing synchronized actions environment given These actions form input environment program The structural operational semantics language speciﬁes execution programs We proposed language program broad class multiagent environments deﬁned Section 2 We extend speciﬁcation language norms deﬁned Section 3 present operational semantics We extended language expressive program normgoverned multiagent environments In particular adding set norms program given multiagent environment speciﬁes multiagent environment updated set norms In rest section follow abstract model normbased multiagent systems distinguish hard soft facts We assume states normbased environment programs represented hard soft facts We use cid2 cid2h cid2s denote union disjoint ﬁnite sets hard soft facts cid2h cid2s cid2l p p p cid2h h set hard literals cid2l s p p p cid2s set soft literals cid2l cid2l h cid2l s 51 Programming multiagent environments A multiagent environment programmed specifying initial state set action proﬁles The initial state environment program speciﬁed set atomic propositions action proﬁles speciﬁed terms pre postconditions The precondition action proﬁle set literals specify states environment programs performance action proﬁle results state transition The resulting state determined adding positive atoms actions postcondition state action performed removing negative atoms postcondition The pre postconditions action proﬁles assumed consist hard facts action proﬁles activated hard facts change facts program states The performance action proﬁle individual agents state satisfy precondition assumed effect state considered looping state Please note environment programming agnostic individual agents internals We assume agents decide perform synchronized actions environment program realises effect actions according speciﬁed pre postconditions So possible performance actions individual agents change environment state This case performance action proﬁle speciﬁed environment program Deﬁnition 15 Multiagent environment program Let Agt 1 k set agents A multiagent environment program ﬁnite set propositional symbols cid2 introduced tuple F 0 Act1 Actk Aspec F 0 cid2 initial state environment program Acti set actions agent Agt Aspec Pre cid9α Post cid9α Act1 Actk Pre Post cid2l h assume action tuple cid9α included action proﬁle speciﬁcation subset action proﬁle speciﬁcations We assume k agents operate multiagent environment cid9α action proﬁle form α1 αk αi Acti action performed agent 1 k It important note pre postconditions assigned actions individual agents action proﬁles This implies possible action proﬁles Act1 Actk speciﬁed Aspec case assume executions change state multiagent environment program loop states Finally follow convention similar programming language Prolog 13 use _ placeholder action action proﬁle speciﬁcation12 For 12 Thus _ plays role cid9 context CGS We use Prologs notation emphasize working program setting 118 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 example use Pre M _ Post indicate performance action proﬁles M M M W states satisfy precondition Pre results states satisﬁes postcondition Post Example 16 Environment program narrowed road Let Agt 1 2 Acti M W 1 2 actions performed cars running example propositional symbol p X interpreted The run Act1 Act2 a1 a5 ning example implemented multiagent environment program ps 1 ps 2 a1 a2 a3 a4 a5 2 2 ps ps ps ps pe 1 ps 1 ps 1 ps 1 pe 1 ps 2 2 2 W M M W M M M _ _ M pm 1 2 2 ps pe 1 ps pe 2 ps 1 pm 1 ps pe 2 ps pe 1 ps 1 2 1 Note ai denote action proﬁle speciﬁcation cid9αi denotes action proﬁle Starting initial state multiagent environment program execution program changes program state depending agents actions input environment program An arbitrary state environment program speciﬁed set atomic propositions F cid2 The structural operational semantics multiagent environment programs speciﬁed set transition rules speciﬁes environment program state changes agents perform actions Therefore sequel use F Act1 Actk Aspec denote environment program state F Since agents action repertoire action speciﬁcations change execution program use state environment program F instead F Act1 Actk Aspec transition rules We note state F necessarily reachable initial state Deﬁnition 16 Structural operational semantics Let F Act1 Actk Aspec environment program state F cid2 cid9α Act1 Actk For Pre Post cid2l h write F cid27 Pre iff Pre cid2 F Pre cid2 F precondition Pre derivable facts F iff positive atoms Pre F negative atoms Pre F Further deﬁne F Post F p p Post p p Post updating F postcondition Post removes negative atoms Post F adds positive atoms Post F The following transition rules specify possible execution steps environment program state F Pre cid9α Post Aspec F cid27 Pre F cid7 F Post F cid9α F cid7 Pre cid9α Post Aspec F cid2 Pre cid9α F F Pre cid9α Post Aspec cid9α F Pre Post cid2l h F The ﬁrst transition rule speciﬁes execution step environment program based action proﬁle cid9α precondition satisﬁed Such execution step updates set facts F postcondition action proﬁle cid9α The second transition rule applies precondition cid9α satisﬁed Such execution step change state environment program Finally rule speciﬁes execution step environment program based unspeciﬁed action proﬁle cid9α Such execution step change state environment program In following use Tbasic denote set transition rules Deﬁnition 16 transF Act1 Actk Aspec Tbasic denote set transitions derivable transition rules Tbasic based environment program F Act1 Actk Aspec trans Act1 Actk Aspec Tbasic denote set transitions derivable transition rules Tbasic based environment programs F Act1 Actk Aspec F cid2 The set possible transitions based transition rules Tbasic actions Act1 Actk action speciﬁcations Aspec sets facts F cid2 An execution environment program consists subsequent execution steps resulting sequence program states In order deﬁne set possible executions environment program ﬁrst deﬁne set possible states generated reached arbitrary state applying subsequent transitions Deﬁnition 17 Program states Let F cid2 set facts τ set transitions The set states reached F subsequent transitions τ denoted genτ F deﬁned follows genτ F F cid11 i1 suci τ F N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 119 X X Pcid2 suci τ X sucτ sucτ cid15 cid12 cid13cid14 times sucτ X F 2 F 1 cid9α F 2 τ F 1 X Observe genτ F ﬁnite τ ﬁnite Given environment program set transition rules Tbasic set possible executions environment program generates concurrent game structure speciﬁed Section 2 Deﬁnition 18 Programs cid4 CGS Let F 0 Act1 Actk Aspec environment program Tbasic set transition rules deﬁned Deﬁnition 16 τb trans Act1 Actk Aspec Tbasic The environment program Tbasicgenerates pointed CGS M F 0 M Agt Q cid2 π Act d o follows Agt 1 k Q genτb F 0 cid2 F 0 p Pre cid9α Post Aspec p Post π F F Act Act1 Actk diF Acti cid7 oF cid9α F Agt F Q F F F Q cid7 Q cid9α d1F dkF F cid9α F cid7 τb The translation environment programs concurrent game structures restricted speciﬁc classes current game structures speciﬁed deﬁnition In following use variables q0 q1 range set states Q Deﬁnition 19 Finite distinguished generated CGS Let M Agt Q cid2 π Act d o concurrent game structure We introduce following notation M called ﬁnite Q ﬁnite M called distinguished states differ valuations q q cid7 Q q cid16 q cid7 π q cid16 π q cid7 M called uniform Agt q q cid7 Q di q di q cid7 agents options state The following proposition formulates relation environment programs corresponding CGSs Proposition 9 Let cid2 set propositional symbols F 0 Act1 Actk Aspec environment program M F 0 pointed CGS Tbasicgenerated environment program If cid2 ﬁnite M ﬁnite Moreover M distinguished uniform Proof The sets atoms gentrans Act1 Actk Aspec Tbasic F 0 determine set states Q subsets cid2 ﬁnite number cid2 ﬁnite Moreover M distinguished follows directly fact sets gentrans Act1 Actk Aspec Tbasic F 0 different Finally M uniform follows directly fact Agt holds di q Acti states q Q agent set options state cid2 52 Multiagent environment programs norms The environment programs deﬁned previous subsection account norms norm enforcement In order add norms multiagent environment programs enforce program executions use sanctioning regimenting norms introduced Deﬁnition 9 A norm represented triple ϕ A S ϕ propositional formula A set action proﬁles S cid2s sanctioning norm S regimenting norm In rest paper use term norm distinction sanctioning regimenting norms relevant Like pre postconditions action proﬁles assumed consist hard facts adding norms change activation effect action proﬁles As explained section assume cid2 cid2h cid2s ﬁnite set propositional symbols Deﬁnition 20 Normbased multiagent environment program Let Agt 1 k set agents A normbased multi agent environment program tuple F 0 Act1 Actk Aspec N 120 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 F 0 cid2 Acti Aspec introduced Deﬁnition 15 N set sanctioning regimenting norms introduced Deﬁnition 9 Following narrowed road environment program speciﬁed Example 16 behaviour cars regulated adding norms environment program Example 17 Normbased environment program narrowed road Let ps ment program speciﬁed Example 16 N ps 1 norms explained Example 10 The normbased environment program ps ments narrowed road example norms N enforced 2 W W ﬁne1 ps 1 ps 1 ps ps 2 2 Act1 Act2 a1 a5 environ 2 _ M ﬁne2 set 1 Act1 Act2 a1 a5 N imple ps The executions normbased multiagent environment programs similar executions multiagent envi ronment programs norms sense update program states effects action proﬁles However execution steps normbased multiagent environment program proceed enforcing norms result ing program states The enforcement norms program state consists updating state consequences applicable norms So order deﬁne execution steps normbased multiagent environment programs need determine norms applicable program state consequences For purpose use function SanN X cid9α deﬁned Deﬁnition 10 determine sanction set imposed agents perform ac tion proﬁle cid9α state X Note sanction set means regimenting norm enforced In case ensure performance cid9α effect state X We distinguish general cases depending sanction set When applicable norms sanctioning norms resulting set soft facts update resulting program state sanctions We deﬁne update program state sanctions noncumulative sense previous sanctions removed new sanctions added We use update function update state sanctions Note Deﬁnition 21 removes sanctions soft facts adding new ones This ensures sanctions noncumulative transitions This update function confused update program states postcondition action proﬁles The effect action proﬁle environment program state context existing norms speciﬁed distinguishing cases 1 action speciﬁcation given precondition satisﬁed 2 action speciﬁcation given precondition satisﬁed 3 action speciﬁcation given 4 action proﬁle regimented norms In ﬁrst case update program state postcondition action proﬁle possible sanctions second case program state updated possible sanctions These cases indicate performance action proﬁle program state sanctioned sanctioning norms applicable speciﬁcation precondition satisﬁed action proﬁle speciﬁcation These cases capture intuition unsuccessful attempt violate norms sanctioned Note sanction set ﬁrst cases set norm applicable Finally fourth case action regimented norms action effect environment state Deﬁnition 21 Structural operational semantics Let F Act1 Actk Aspec N normbased environment program arbitrary state F cid2 cid9α Act1 Actk N set norms deﬁned Deﬁnition 9 Let cid27 deﬁned Deﬁnition 16 Finally let F S F cid2s S S cid2s The following transition rules specify possible execution steps normbased environment program Pre cid9α Post Aspec F cid27 Pre F cid7 F Post SanNF cid9α SanNF cid9α cid16 F Pre cid9α Post Aspec F cid2 Pre F cid9α F cid7 cid7 F SanNF cid9α SanNF cid9α cid16 cid9α F cid7 F Pre Post cid2l h Pre cid9α Post Aspec F cid7 F SanNF cid9α SanNF cid9α cid16 F cid9α F cid7 SanNF cid9α cid9α F F The ﬁrst transition rule applies action proﬁle cid9α performed precondition holds regimenting norms triggered The second transition rule precondition cid9α satisﬁed In case applicable sanctioning norms enforced realising effect postcondition cid9α The transition rule applies unspeciﬁed action proﬁle cid9α performed regimenting norms triggered In case applicable sanctioning norms enforced Note environment assumed exogenous agents sense agents decide N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 121 actions perform independently environment speciﬁcation This allows agents decide perform actions environment speciﬁcation It important note norm speciﬁes performance action proﬁle state sanctioned regardless speciﬁcation action proﬁle Thus agents perform unspeciﬁed action proﬁle sanction occur The ﬁrst transition rules ensure sanctioning norms enforced regardless speciﬁcation action proﬁles These transition rules capture idea successful unsuccessful attempt violate norms sanctioned Note ﬁrst transition rules sanctioning norm needs applicable state X SanN X cid9α set indicating action proﬁle α violate norm state X Finally fourth transition rule applies performance action proﬁle triggers regimenting norms regardless speciﬁcation action proﬁles It important notice sanctions accumulate consecutive states The following proposition shows sanctions imposed state propositional symbols cid2s caused action performed previous state In following use Tnorm set transition rules Deﬁnition 21 transF Act1 Actk Aspec N Tnorm denote set transitions derivable transition rules Tnorm based normbased environment program F Act1 Actk Aspec N trans Act1 Actk Aspec N Tnorm denote set transitions derivable transition rules Tnorm based normbased environment programs F Act1 Actk Aspec N F cid2 Proposition 10 Let F Act1 Actk Aspec N normbased environment program arbitrary program state F F cid7 trans Act1 Actk Aspec N Tnorm S SanNF cid9α Then F cid9α cid5 cid7 cid2s F S F cid2s S cid16 Proof Directly follows deﬁnition transition rules Deﬁnition 21 cid2 For given normbased environment program set transition rules Tnorm generates concurrent game structure We use Deﬁnition 18 deﬁne concurrent game structure said generated normbased environment program Note Deﬁnition 18 applied normbased environment programs required ingredients initial state F 0 sets actions agent set action proﬁle speciﬁcations There difference environment programs normbased environment programs requires slight modiﬁcation Deﬁnition 18 The difference assume set transitions trans Act1 Actk Aspec N Tnorm instead trans Act1 Actk Aspec Tbasic This means use gentrans Act1 Actk Aspec N Tnorm F 0 generate set reachable states F derivable based Tnorm The formal deﬁnitions cid7 trans Act1 Actk Aspec N Tnorm indicate transition F cid9α F cid9α F cid7 Deﬁnition 22 Normbased programs cid4 CGS Let F 0 Act1 Actk Aspec N normbased environment program τn trans Act1 Actk Aspec N Tnorm The program said Tnormgenerate pointed CGS M F 0 M Agt Q cid2 π Act d o deﬁned follows Agt cid2 π Act d speciﬁed Deﬁnition 18 Q genτn F 0 oF cid9α F F F cid7 Q cid9α d1F dkF F cid7 cid9α F cid7 τn The class concurrent game structures generated normbased environment programs characterized follow ing proposition Proposition 11 Let cid2 set propositional symbols F 0 Act1 Actk Aspec N normbased environment program M F 0 pointed CGS Tnormgenerated If cid2 ﬁnite M ﬁnite Moreover M distinguished uniform Proof Similar proof Proposition 9 Observe elements Q gentrans Act1 Actk Aspec N Tnorm F 0 subsets cid2 ﬁnitely cid2 ﬁnite Observe M distinguished elements Q distinct M uniform diq Acti Agt q Q cid2 The generated CGS accumulate sanctions consecutive states Proposition 12 Let F 0 Act1 Actk Aspec N normbased environment program Tnormgenerates M F 0 M Agt Q cid2 π Act d o For F Q cid9α Act1 Actk S SanNF cid9α 122 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 π oF cid9α cid2s cid5 S π F cid2s S cid16 Proof From Deﬁnition 22 oF cid9α F know sanctions accumulated transitions cid2 iff F cid7 cid9α F cid7 trans Act1 Actk Aspec N Tnorm Proposition 10 Note correspondence Proposition 12 Proposition 1 page 109 The execution normbased environment program generate different set states execution corresponding environment program norms This fact performance unspeciﬁed action proﬁles performance speciﬁed action proﬁles precondition hold sanctioned resulting new states Note performance action proﬁle environment program norms results state Also application regimenting norms prevents reaching new states These observations formulated following proposition Proposition 13 Let F 0 Act1 Actk Aspec environment program F 0 Act1 Actk Aspec RN SN en vironment program regimenting norms RN sanctioning norms SN Let τb trans Act1 Actk Aspec Tbasic τn trans Act1 Actk Aspec RN SN Tnorm Then When sets regimentation sanctioning norms RN SN genτn F 0 genτb F 0 When regimentation norms sanctioning norms RN cid16 SN genτn F 0 genτb F 0 When sanctioning norms regimentation norms RN SN cid16 genτn F 0 genτb F 0 Proof Since RN SN F cid2 cid9α Act1 Actk SanNF cid9α This makes transition rules Tbasic Tnorm identical cid3 l i1 suci τn cid7 Let RN cid16 SN Following Deﬁnition 17 genτ F F cid9α F τn If transition obtained regimentation cid9α F F F 0 F 0 F F 0 cid3 Suppose claim holds l 1 Let F F 0 F hypothesis obtain F F 0 F τb F sucτb F l1 F F 0 i1 suci τb cid9α F τb cid9α Act1 Actk SanSNF cid9α cid16 note SanSNF cid9α Then Let F cid2 F τ F We i1 suci cid3 F 0 induction l The base case l 1 trivial l i1 suci τb l1 F 0 F 0 Then F i1 suci τn induction cid9α F 0 obtain F 0 If action regimented F cid3 l i1 suci τb cid7 Then induction hypothesis F F 0 The claim follows cid3 l i1 suci τn l1 i1 suci τb F F cid7 F 0 cid7 F 0 cid3 cid3 cid7 cid7 cid7 cid9α F SanSNF cid9α τn This implies F SanSNF cid9α genτn F 0 F SanSNF cid9α genτb F 0 cid2 F cid3 53 Relation normbased update normbased environment We investigate relation concurrent game structure Mn generated normbased environ ment program concurrent game structure Mcid7 generated corresponding environment program norms initial state actions action speciﬁcations updated norms We ﬁrst states qn q respectively valuation states reached qn cid7 q action proﬁle valuation This formulated following lemma Mn Mcid7 cid7 Lemma 14 Let F 0 Act1 Actk Aspec environment program Tbasicgenerates concurrent game structure M F 0 M Agt Q cid2 π Act d o Let F 0 Act1 Actk Aspec N normbased environment program Tnormgenerates concurrent game structure Mn F 0 Mn Agt Qn cid2 π n Act dn Let Mcid7 M cid2 N Mcid7 Agt Q cid7 π nonF n cid9α π cid7o cid9α Act1 Actk π nF n π cid7F cid7 For F n Qn F cid7 cid2 π cid7 Act d cid7 o cid7 cid9α cid7 Q cid7F cid7 Proof First note Proposition 11 M Mn uniform Therefore deﬁnition norm update given Deﬁnition 11 model Mcid7 uniform As consequence states models action cid7 F n cid2 F n cid2 tuples Act1 Actk available Let F n Qn F F cid7 π cid7F S F S Therefore deﬁne cid7 F S F cid2h S cid2s π cid7F π nF n π cid7F cid7 We note F cid7 Q cid7 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 123 Fig 13 Diagram showing relation norm update generated CGS norm generated CGS cid5 G F F cid7 F cid7 F S F cid7 cid2h Furthermore note cid9α Act1 Actk S cid7 cid9α action proﬁles enabled We claim considering cases transition SanNπ nF n cid9α SanNπ cid7F cid7 F n F occur according Deﬁnition 11 Case S In case o cid7 cid9α τb As precondition cid9α independent soft facts ﬁrst transition rules Deﬁnitions 16 21 identical S cid7 cid9α cid2h generated G obtain onF n cid9α o cid7 cid9α oG cid9α o cid7F cid7F cid7F cid7F cid9α o Case S In case F n cid9α F n τn onF n cid9α F n o The claim follows π cid7F cid7 cid7 cid9α The claim follows cid7F cid7 cid9α F cid7 π nF n Case cid16 S cid16 We divide case according ﬁrst transition rules Deﬁnitions 16 21 First suppose Pre cid9α Post Aspec F n cid27 Pre G cid27 Pre We onF n cid9α F n We obtain π nonF n cid9α π nF n Post π nG Postcid2s S cid7 cid9α G Post S π nF n Postcid2s S Analogously o π nG Post S cid7F Post S π nF n Postcid2s S S π cid7G Post S π cid7o cid7F cid7 cid9α The second case F n cid2 Pre follows analogously Also ﬁnal case Pre cid9α Post Aspec Pre Post cid2h follows analogously cid2 As ﬁnal result section concurrent game structures generated environment program norms closely related In particular concurrent game structure generated normbased environment program isomorphic reachable concurrent game structure generated corresponding environment program norm updated set norms We formally introduce notions reachable states isomorphism showing correspondence result Deﬁnition 23 Reachable states reachable CGS Let M Agt Q cid2 π Act d o CGS q0 Q A state q Q said reachable q0 path starting q0 contains q The set states reachable q0 M cid7 cid7 o denoted ReachableM q0 The reachable M q0 denoted Mq0 CGS Agt Q Q cid7 ReachableM q0 π cid7q π q d cid7 cid2 π cid7 Act d Agt cid7q cid9α oq cid9α cid9α d cid7 iq diq o cid7 Agtq q Q cid7 A model updated sanctioning norms yield states type q S States norm generated CGSs hand internal structure plain sets propositional symbols We interested purely syntactic differences need way compare models semantic perspective Therefore models M1 M2 isomorphic identical names states The deﬁnition captures formally Deﬁnition 24 Isomorphic models Let Mi Agti Qi cid2i πi Acti di oi 1 2 CGSs M1 M2 isomor Agt2 cid21 cid22 Act1 Act2 bijection phic written M1 f Q1 Q2 M2 following conditions hold Agt1 1 π1q π2 f q q Q1 2 d1q d2 f q q Q1 3 f o1q cid9α o2 f q cid9α q Q1 cid9α d1q Note focus generated CGS reachable initial state application regimenting norms operational semantics normbased environment programs blocks transitions causes states unreachable Thus having environment program F 0 Act1 Actk Aspec set norms N concurrent game structure Mn generated F 0 Act1 Actk Aspec N isomorphic M cid2 NF 0 concurrent game structure generated F 0 Act1 Actk Aspec environment program norms updated N reachable F 0 This relation illustrated diagram shown Fig 13 formulated following theorem 124 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 Theorem 15 Let F 0 Act1 Actk Aspec environment program Tbasicgenerates pointed concurrent game struc ture M F 0 M Agt Q cid2 π Act d o F 0 Act1 Actk Aspec N normbased environment program Tnormgenerates pointed concurrent game structure Mn F 0 Mn Agt Qn cid2 π n Act dn We deﬁne Mcid7 M cid2 N Mcid7 Agt Q cid7 Then Mn M cid2 NF 0 cid7 cid2 π cid7 Act d cid7 o cid7 cid7 cid7 f F n F π nF n π cid7F Proof We deﬁne partial function f Qn Q deﬁned π cid7F 1 cid16 π cid7F 2 F 1 cid16 F 2 This norm follows fact F 1 F 2 Q update performed causing states form F cid2h F S F cid2h cid16 S cid2s We f constitutes isomorphism according Deﬁnition 24 Mn M cid2 NF 0 Therefore bijection total conditions Deﬁnition 24 satisﬁed Condition 1 true deﬁnition f f Condition 2 true models uniform Proposition 9 Deﬁnition 11 Proposition 11 cid7 f q cid9α q Qn cid9α dnq respectively Thus conditions f onq cid9α o Q n consist states reachable remains shown By deﬁnition sets states Q sequence actions F 0 Therefore claim holds induction length action sequence cid7 That f cid7 Base case We F 0 Q n Q cid7 sequence By Lemma 14 f F 0 F 0 obtain π cid7o implies f onF 0 cid9α o cid7F 0 cid9α f onF 0 cid9α o f F 0 F 0 deﬁned Moreover F 0 reached action cid7F 0 cid9α π nonF 0 cid9α cid9α Act1 Actk This cid7 f F 0 cid9α desired Induction step We assume claim holds action sequences length Thus let F n Q n F states reached action sequence length By induction f F n F Condition 3 satisﬁed cid7 cid9α states Let cid9α Act1 Actk arbitrary action proﬁle Again Lemma 14 obtain π cid7o cid7 cid9α deﬁned To establish Condition 3 consider arbitrary π nonF n cid9α Consequently f onF n cid9α o action proﬁle cid9β Act1 Actk Because states relation f apply Lemma 14 obtain cid7 f onF n cid9α cid9β cid7 cid9α cid9β implies f ononF n cid9α cid9β o π nononF n cid9α cid9β π cid7o Which shows Condition 3 satisﬁed cid7 cid9α cid9β o cid7F cid7F cid7F cid7F cid7o cid7o cid7 cid7 Q cid7 In inductive step showed f deﬁned total This implies f bijection considered arbitrary action sequences sure state Q cid7 reached cid2 This theorem shows operational semantics proposed executable speciﬁcation languages environments norms aligned semantics norms norm update presented ﬁrst paper This result allows apply proposed abstract mechanism design methodology analyse enforcement effect norms executable environment programs Concluding remarks In section executable speciﬁcation language implementation multiagent environments presented The language includes constructs specify initial state multiagent environments speciﬁcation action proﬁles terms pre postconditions The operational semantics proposed speciﬁcation language presented relation concurrent game structures established An execution environment speciﬁcation initializes multiagent environment subsequently modiﬁed performance agents actions according action speciﬁcations Subsequently speciﬁcation language extended norms sanctions operational semantics presented relation concurrent game structures updated norms established The operational semantics ensures norms enforced means regimentation sanctions An execution normbased environment speciﬁcation initializes multiagent environment effectuates agents actions environment based action speciﬁcations norms corresponding sanctions The agents assumed aware norms enforcement They assumed autonomously decide comply norms violate accept consequences The presented executable speciﬁcation language norms application domains traﬃc business process management behaviour autonomous agents externally controlled coordinated aligned laws rules policies requirements The section reports application extended speciﬁcation language traﬃc simulation traﬃc laws norms enforced reduce traﬃc congestion ramp merging scenario We argue executable speciﬁcation language useful implementation traﬃc simulations speciﬁc issues resolved apply proposed normbased mechanism design methodology applications 6 Applying normbased speciﬁcation language traﬃc simulation A characteristic feature proposed speciﬁcation language normbased multiagent environments modu larity norms sense norms programmed separate module isolated speciﬁcation actions initial states multiagent environments This feature allows implement different sets norms compare enforcement effects multiagent environment The use proposed speciﬁcation language illustrated running example presented previous sections Example 17 In section present complex realistic application proposed speciﬁcation language N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 125 Fig 14 Ramp merging traﬃc scenario This application concerns development normbased traﬃc environments SUMO Simulation Urban MObil ity 12 SUMO 46 traﬃc simulation platform supports modelling traﬃc including cars public transport pedestrians In application SUMO extended simulate traﬃc scenarios norms traﬃc laws ex plicitly speciﬁed input enforced simulation runs In particular SUMO extended normbased traﬃc controller module monitors simulated traﬃc continuously extracting relevant traﬃc information position speed simulated cars SUMO platform instantiates given input set traﬃc norms generate traﬃc directives observed cars communicates traﬃc directives cars imposes payment sanctions cars violate traﬃc directives In addition traﬃc controller module standard SUMO car model responsible actual behaviour individual cars extended allow individual cars incorporate norms driving behaviour The SUMO extension 12 simulate ramp merging traﬃc scenario A schematic representation ramp merging scenario illustrated Fig 14 In ﬁgure triangles represent cars drive left right rectangles s1 s5 sensors observe position speed cars points roads There important points road m point roads merge e ending point traﬃc scenario In order manage traﬃc merging point m observed cars sensor s1 s2 s3 receive traﬃc directives traﬃc controller The directive car generated based given set traﬃc norms consists velocity ﬁne imposed directive followed car In ﬁgure white cars received directives traﬃc controller grey cars received directives An example traﬃc norm scenario x y Av xv y ﬁnez read cars x y observed simultaneously sensor s2 s3 prohibited velocities respectively v x v y merging point m avoid ﬁne z Euro For traﬃc norm set prohibited velocities Av xv y v 1 v 2 v 1 cid16 v x v 2 cid16 v y13 represents obligation cars x y velocities v x v y respectively merging point m The traﬃc controller instantiates input norm determining x y v x v y ﬁnez based observed cars properties current traﬃc state traﬃc density roads The velocities observed cars determined way cars arrives m safe distance dsafe given current traﬃc density The ﬁne z Euro imposed car x respectively y velocity v x respectively v y m realised Based instantiated norm traﬃc controller sends observed cars corresponding directive For example traﬃc controller sends observed car x directive v x ﬁnez read car x velocity v x merge point m avoid ﬁne z Euro For simulation scenario traﬃc controller generates directives cars observed sensors s2 s3 car simultaneously observed sensor In traﬃc simulation car decides action velocity lane perform follow ignore received directives based information preferences In particular car model designed means action selection function selects action maximizes cars utility The action selection function deﬁned terms cars internal state including current velocity position received directive expected arrival time function given current traﬃc situation determines impact velocity action arrival time cars destination simplicity assumed cars destination action effect function determines expected consequence velocity action internal state sanction grading function mapping ﬁnes real values reﬂecting utility ﬁne arrival grading function mapping arrival time real values reﬂecting utility given arrival time cars destination The internal state car expected arrival time function action effect function constitute agents information traﬃc situation 13 We assume v 1 v 2 taken sensible ﬁnite set velocity values 126 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 including cars The sanction grading function arrival grading function constitute preference cars The details car model 12 The objective simulation investigate impact enforcement norm sets traﬃc situation ramp merging scenario different population cars Two types cars distinguished leisure business cars These types implemented sanction arrival time grading functions The sanction grading function leisure car evaluates sanction having higher impact cars utility compared function business car Conversely arrival time grading function leisure car evaluates late arrival time having impact cars utility compared function business car The simulation results number norm violations traﬃc congestion decreases severity ﬁnes increases In particular norm violations occur proper ﬁnes ﬁnes match cars preferences imposed The formal connection proposed abstract mechanism design methodology speciﬁcation language established Proposition 14 suggest results mechanism design analysis norms related results implementation norms multiagent simulations Such relation justify simulation results means mechanism design explanations vice versa verify results mechanism design analysis means simulations For example mechanism design analysis ramp merging scenario shows set traﬃc norms implements designers objective avoid traﬃc congestion avoid simultaneous arrival cars merging point m assuming cars follow Nash equilibrium strategies use speciﬁcation language simulate scenario order verify enforcement traﬃc norms avoids traﬃc congestion However connecting theoretical results obtained mechanism design analyses experimental results obtained running agentbased simulations straightforward requires considerations For example argue reported experimental results traﬃc simulation SUMO claim observed reduction traﬃc congestion optimality norms sense norms implement objective avoiding traﬃc congestion Nash equilibrium However claims justiﬁed simulated cars capable strategic reasoning case reported traﬃc simulation experiment The ability strategic reasoning cars supported extension SUMO platform requires extensions This fact preferences cars accessible cars share structure game unable reason strategically This implies simulations setting SUMO rich establish connection mechanism design setting It noted formal mechanism design methodology applied analyse snapshot traﬃc simulation analyse behaviour cars arrive simultaneously sensor positions Such snapshot ramp merging scenario constitutes game setting comparable setting running example narrow road running example merging point ramp merging scenario In order connect mechanism design methodology experimental results simulations consists continuous stream cars model simulation sequence games Although reasonable suggestion needs investigate model analyse change development traﬃc state consecutive game settings For example high stream cars necessarily cause creation traﬃc congestion merging point changes state traﬃc structure consecutive games We believe profound connection mechanism design simulation settings challenging future research direction 7 Related work There proposals abstract executable models norms norm enforcement multiagent systems However unlike work proposals focus abstract models norm enforcement executable models ignoring connection Despite key difference abstract executable model differ existing abstract executable models respectively In following ﬁrst compare abstract model norm norm enforcement existing abstract models compare executable speciﬁcation language existing exe cutable models norms norm enforcement Our abstract model norms norm enforcement closely related 1 65 consider norm semantic perspective set transitions instead syntactic expression case In particular use labelled Kripke structures multiagent models supposing agent controls speciﬁc number transitions The enforcement norm considered deactivation speciﬁc transitions In proposal distinguish regimenting sanctioning norms main conceptual differences mechanism design perspective follow The enforcement regimenting norms similar deactivation transitions 165 enforcement sanctioning norms create new states resulting relabelling soft facts new transitions In sense approach different enforcement norms change underlying multiagent model new states transitions From conceptual point view agent perform action physical structure encoded means hard facts remains intact bear imposed sanctions depending agents preferences Note change underlying transition affect agents use relevant soft facts preferences Another difference work outcome norm enforcement assumed independent preferences consider general setting captured terms normative behaviour functions It important recall focus practical nature We try implement N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 127 analyse mechanisms practical point view implement verify normbased multiagent environment means executable speciﬁcations The work presented 3 assumes designer multiple objectives value determined deactivated transitions transition The authors compactly represent designers objectives set CTL formulae assigned feature value Then utility social law sum feature values satisﬁed CTL formulae minus costs implement social law The authors algorithm compute optimal social laws complexity results The focus work computing good social law designers perspective considering agents objectives ﬁrst place key concern setting Fitoussi Tennenholtz 34 forward formal framework engineer study social laws multiagent systems A social law restricts set agents actions The authors investigate properties social laws minimality simplicity Minimality refers number restrictions imposed simplicity refers capabilities agents Simpler laws followed easily simpler agents The authors consider complexity issues existence appropriate norms study properties The setting abstract strategies similar known normal form games start transition usually requiring multiple step strategies Also authors consider speciﬁc types goals liveness safety goals allow arbitrary LTLformulae specify agents preferences Endriss et al 30 Wooldridge et al 69 propose taxation schemes incentivize agents change behaviour emerging behaviour stable shows desirable properties line speciﬁcation In particular computational complexity weak strong implementation problems investigated We drawn inspiration problems present article A difference work study problems context Boolean games consider strategic setting agents act temporal setting Instead taxation schemes follow normbased approach use techniques mechanisms design specify designers objectives analyse implementability We believe approach ﬂexible allows model realistic settings designer know agents preferences consider set possible preferences A different avenue work area focuses norm monitoring context imperfect monitors 208 In present paper assumed monitors perfect sense norm enforcement mechanism detect respond norm violating behaviours It clear work norm enforcement implicitly explicitly assumes behaviour agents monitored evaluated respect given set norms Our assumption monitors perfect reﬂected fact updating multiagent model CGS set norms covers possible violating behaviour Moreover 20 8 consider norms syntactically like use LTLformulae norm representation refer goodbad behaviour We considered expressive norms order complicate main message approach unnecessarily We believe general approach instantiated expressive norms Another line related research concerns issue norm synthesis Shoham Tennenholtz 5960 discussed problem offline design set norms order constrain behaviour agents ensure overall objectives multiagent In work similar approach structure multiagent systems required norms generated design time In line tradition Morales et al 5352 consider problem online design set norms constrain steer behaviour agents In offline online approaches overall objectives multiagent systems guaranteed assuming agents normaware comply generated norms In sense norms considered regimented multiagent systems Moreover contrast work approaches provide game theoretic analysis norms consider generation norms sanctions context agents preferences However believe concepts effective necessary concise norms introduced 5352 offline norm synthesis approaches Following tradition Shoham Tennenholtz Boella van der Torre 15 consider problem norm enforcement distinguishing choice offline designed stable social laws choice control systems A control explained responsible monitoring sanctioning norm violations Although functionality proposed notion control similar functionality notion normbased mechanism fundamental differences approaches For example approach behaviour multiagent modelled concurrent game structure consider multiagent abstract way oneshot game norms approach explicit enforced update mechanism consider norms integrated structure games enforced special agent called normative selects game going played ﬁnally consider notion quasistable social laws consider norms mechanism design perspective implementing social choice function Nash equilibria Our work differs veriﬁcation approaches normbased systems protocols 337275 Of course consider exploit work approach verify impact norm enforcement agents behaviour sense approach check inﬂuence norm enforcement agents behaviour However contrast approach mentioned work focuses different types norms norm enforcement mechanisms provide game theoretic tool analyse impact norms behaviour rational agents In particular 33 norms deﬁned terms communication actions enforced means regimentation 7 27 consider norms statebased obligationsprohibitions enforced means regimentation sanctions The approach pre 128 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 sented 5 focuses mainly protocol veriﬁcation aims providing mechanism example agents decide following protocol guarantees objectives norm violation In literature multiagent systems proposals focus issue practical implementation norms norm enforcement They consider norms norm enforcement mechanisms broader contexts institutions organisations coordination environments Examples electronic institutions ISLANDERAMELI 3332 organ isational models MOISE 4243 OperettA 4 coordination models ORG4MAS 41 normbased framework proposed 24 lawgoverned interaction proposed 51 norm enforcement mech anism proposed 35 The focus proposals primarily development normbased multiagent devising special purpose programming languages implement norms norm enforcement Moreover lack explicit formal syntax operational semantics normrelated concepts approaches makes diﬃcult impossible relate existing abstract models norms norm enforcement These approaches concerned agents interaction use different norm types focus norm regimentation In following discuss details approaches SMOISE Another related approach MOISE ISLANDER 31 early modelling languages specifying institutions terms institutional rules norms In order interpret institution speciﬁcations execution platform called AMELI developed 32 This platform implements infrastructure hand facilitates agent participation institutional environ ment supporting communication hand enforces institutional rules norms The distinguishing feature ISLANDERAMELI allow agent violate norms norms regimenting Moreover norms 32 36 61 actionbased prescribe actions performed agents 43 modelling language proposed specify multiagent systems organisational dimensions structural functional deontic The relevant dimension work deontic dimension concerns concepts obligations prohibitions Different computational frameworks proposed implement execute MOISE 42 artifactbased ver sion ORG4MAS 41 These frameworks concerned norms prescribing states achievedavoided SMOISE organisational middleware provides agents access communication layer current state organisation This middleware allows agents change organisation speciﬁcation long changes violate organisational constraints In sense norms SMOISE considered regimenting norms ORG4MAS uses organisational artifacts implement speciﬁc components organisation group goal schema In framework special artifact called reputation artifact introduced manage enforcement norms speciﬁcations SMOISE There proposals speciﬁcally aim implementing norms norm enforcement The ﬁrst proposal pre sented 64 27 normbased executable speciﬁcation language designed facilitate implementation software entities exogenously control coordinate behaviour agents means norms Similar ap proach norms proposal sanctioning regimenting norms Also similar approach come operational semantics executable speciﬁcations formally analysed means veriﬁcation tech niques 11 However contrast approach presented present paper consider statebased norms obligation prohibition states ignore actionbased norms This proposal comes interpreter called 2OPL initiates process continuously monitors agents actions communication environment actions deter mines effect observed actions based action speciﬁcations enforces norms necessary We plan extend 2OPL interpret execute actionbased norms presented present paper The second pro posal called JaCaMo 16 aims supporting implementation organisational artifacts responsible management enactment organisation An organisational artifact implemented program implements MOISE speciﬁcations normbased programs described 44 In contrast approach sanctions JaCaMo actions delegated agents guarantee agents eventually perform actions In particular violation norms detected organisational artifacts organisational agents deal violations speciﬁcation A translation MOISE We conclude section following observation We assumed agents norm aware sense agents follow preferences choose optimal behaviours order maximize utilities The norm awareness reﬂected approach 1 deﬁning agents preferences terms speciﬁc behaviour agents incur sanctions 2 applying equilibrium analysis characterize behaviour rational agents norm enforcement However focus individual agents reason choose optimal behaviours studied example 66 6 In contrast 66 6 abstract speciﬁc reasoning schemes individual agents assume reasoning schemes individual agents use act rationally according game theoretic concepts precisely according Nash equilibria 8 Conclusions discussion future work Our work focuses norms norm enforcement multiagent systems We proposed formal methodology allows analysing norms norm enforcement mechanism design perspective programming model imple menting Using game theoretic tools showed enforcement norms change behaviour rational agents regimentation sanctions It shown presented programming model aligned ab stract model developed game theoretical tools applied analyse normbased environment programs N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 129 Speciﬁcally proposed normbased mechanism design formal methodology analysing normbased environment programs We showed abstract particular environment speciﬁcation language apply methods mechanism design verify enforcement set norms multiagent environment agrees behaviour rational agents designer expects More precisely introduced normative behaviour functions representing ideal behaviour multiagent environments respect different sets agents preferences The enabled apply concepts game theory identify agents rational behaviour These formal ideas verify enforcement set norms suﬃcient motivate rational agents act way behaviour aligned described normative behaviour function We deﬁned normative way modify soft facts environment states As language modelling agents preferences facts normative systems based set propositional symbols normbased mechanism steer behaviour agent ﬂexible ways This notion mechanism powerful A ﬁrst reﬁnement identify subset cid2M cid2 soft facts assume normative modify state valuations respect set Such mechanism weaker natural Another direction future research consider robustness group deviation Our approach extended agent set cid2a propositional symbols specify preference If want agents sensitive norms sanctions simply deﬁne set cid2N F facts normative cid2N F cid2a Another alternative game theoretic point view line 1 23 For example consider partial strategies assume subgroups agents play rationally Then outcome usually single path set paths This gives rise notion S Aimplementability We investigated problem given CGS M set agents preferences Prefs normative behaviour function f normative N N E implements f M q Prefs In future work interesting identify settings normative systems constructed eﬃciently We plan extend analysis implementability notions apart Nash equilibria dominant strategy equilibrium implementability Finally interesting direction future research investigate core properties classical mechanism design normbased setting including budget balanced individual rational mechanisms We note interpretation properties setting interesting For example case individual rationality clear means agent mechanismin multiagent systems This require shift open MAS agents leave join Acknowledgement We thank anonymous reviewers extensive valuable comments signiﬁcantly improved paper Appendix A Quantiﬁed Boolean satisﬁability problem Our hardness proofs reduce validity Boolean quantiﬁed formulae implementation problems We consider fragments Quantiﬁed Boolean Satisﬁability problem QSAT canonical PSPACEcomplete problem Restricting number quantiﬁer alternations QSAT yields subproblems complete different levels polynomial hierarchy The problem class QSATi starts existential quantiﬁer allows 1 quantiﬁer alternations sim ilarly QSATiformulae begin universal quantiﬁer 1 2 The previous problems cid2P complete respectively In formal deﬁnition write Q X Q x1 Q xn set X x1 xn propositional variables Q cid3P Deﬁnition 25 QSATi 55 The QSATi problem deﬁned follows Input A quantiﬁed Boolean formula QBF φ X1 X2 Q Xi ϕ ϕ Boolean formula negation normal form nnf negations occur propositional level disjoint sets propositional variables X1 Xi 1 Q Q odd φ contain free variables Output True X1 X2 Q Xi ϕ valid false The problem QSATi deﬁned analogously formulae φ start universal quantiﬁer alternate quantiﬁer types By abuse notation refer QBF φ satisﬁes structural properties required problem class QSATi QSATi simply QSATiformula QSATi formula respectively A truth assignment valuation set variables X mapping v X t f Given Boolean formula ϕ variables X truth assignment v Y X denote ϕv formula obtained ϕ y Y replaced falsum cid13 verum v y f v y t respectively For truth assignments v 1 v 2 X Y respectively X Y use notation v 1 v 2 refer induced truth assignment X Y analogously truth assignments Using notation formula X1 X2 Q Xi ϕ true iff 130 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 Fig B15 Construction concurrent game structure QSAT value choice section truth assignment v 1 X1 truth assignments v 2 X2 Boolean formula ϕv 1 v valid For details refer 55 Appendix B Proofs implementation problems veriﬁcation B1 Hardness weak implementation problem Proposition 4 We membership problem N WIN E I q f cid2P 2 hard reducing QSAT2 In following consider instance QSAT2 form φ x1 xmxm1 xnϕx1 xn X1 x1 xm X2 xm1 xn The reduction consists main steps 1 We encode φ twoplayer CGS Mφ φ satisﬁable player winning strategy Mφ achieve given property Lemma 16 We use results 22 shown satisﬁability QBF φ reduced model checking twoplayer CGS players veriﬁer v winning strategy enforce ﬁxed formula constructed φ strategies player refuter r φ holds 2 We construct preference proﬁle cid9γ γv γr winning strategy veriﬁer Mφ Nash equilibria cid13Mφ q γv γr φ satisﬁable 3 We existence speciﬁc Nash equilibria answered testing membership weak implementation problem In following assume QSAT2formula φ given ﬁxed including indexes m n negated normal form Moreover following important X1 X2 nonempty This assumed loss generality B11 The model Mφ We construction CGS Mφ formula φ The idea construction 22 veriﬁer v controlling existential variables disjunctions refuter r controlling existential variables conjunctions ﬁrstly choose truth values variables control This illustrated Fig B15 For example v plays cid13 q2 state labelled x2 reached state labelled notx2 This represents variable x2 assigned true false respectively This model called value choice section consists states Q1 qi 1 n qi v 1 n v cid13 States qi 1 m controlled v states m 1 n controlled r Afterwards agents simulate game theoretic semantics propositional logic Player v tries formula true controls disjunctions r tries falsify formula controls conjunctions This model corresponds parse tree formula Fig B16 For formal deﬁnition need additional notation First use sfφ denote set subformulae φ For formula ψ ψ1 ψ2 use Lψ ψ1 Rψ ψ2 refer left right subformula φ respectively If ψ ψ cid7 This allows use sequence Ls Rs element L R uniquely refer subformula cid14 refers φ We refer sequence index For formula φ use indφ L R denote set possible indexes wrt φ By slight abuse notation denote subformula referred index sfi L R Note different indexes refer subformula For example given formula x1 x2 x2 x1 sfL R sfR L x2 Note stop literal level indexes R R L R R R contained indx1 x2 x2 x1 ψ literal14 deﬁne Lψ Rψ ψ cid7 14 We stop literal level simpliﬁes construction N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 131 Fig B16 CGS QSAT formula structure section sfι1 sfιl literals Fig B17 CGS QSAT sections literals sfι xi sfιcid7 xi Fig B18 Small gadget players strategy inconsistent Given notation formula structure section model consists states Q2 qι ι indφ sfι literal For index ι sfι ψ ψ1 ψ2 players chooses Lψ ψ1 Rψ ψ2 If veriﬁer v chooses subformulae refuter The semantic game players ends literal modelled literal state The section literals built states Q3 qι ι indφ sfι literal index ι corresponding literal l cid20 state qι controlled owner Boolean variable xi l l xi l xi As value choice section owner state chooses value cid13 underlying variable literal leads new state evaluation section These states denoted Q 4 qιv ι indφ sfι literal v cid13 Q 5 qcid13 q A state qιv sfι xi labelled proposition xi v cid13 notxi v similarly qιv sfι xi labelled proposition xi v notxi v cid13 That label v cid13 models evaluation literal underlying variable These states shall ensure strategy induces truth assignment explained Then proceeds winning state qcid13 labelled proposition winv valuation xi makes literal sfι true losing state q labelled proposition winr Fig B17 details Finally need special gadgets ensure reduction works First connect state qd initial state q0 This state ensure existence Nash equilibrium Secondly need players possibility mark speciﬁc strategies inconsistent reasons clear Therefore insert small substructure shown Fig B18 inbetween start state q0 q1 beginning valuechoice section The construction illustrated Fig B19 We refer CGS constructed Mφ The formal deﬁnition given Deﬁnition 26 Model Mφ Let QSAT2formula φ x1 xmxm1 xnϕ given negated normal form We deﬁne Xv x1 xm Xr xm1 xn The CGS Mφ Agt Q cid2 Act π d o deﬁned follows 132 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 Fig B19 Concurrent game structure QSAT2 instance cid201 x1x2x1 x2 x2 x1 We indφ1 cid14 L R LL L R R L R R In particular sfcid14 x1 x2 x2 x1 sfL x1 x2 sfR x2 x1 sfLL x1 sfR R x1 Light gray states owned veriﬁer dark grey states owned refuter White states belong player A transition outgoing state controlled v resp r labelled action α corresponds action proﬁle α resp α Transitions label correspond action proﬁle Agt v r Q q0 q cid2 xi 1 n notxi 1 n winv winr start d ir iv cid7 0 π q π q0 start π q Q1 Q2 Q3 Q4 Q5 cid7 0 qd qv q cid7 v qr q cid7 r cid7 r ir π qicid13 xi qicid13 Q1 π qi notxi qicid13 Q1 π qxi cid13 xi qxi cid13 Q4 π qxi notxi qxi cid13 Q5 π qxi xi qxi cid13 Q4 π qxi cid13 notxi qxi cid13 Q5 π qcid13 winv π qd d π q winr cid7 v iv π q Act L R cid13 function d deﬁned dvq0 drq0 cid13 dvqi cid13 drqi xi Xv qv drqi cid13 dvqi xi Xr qr dvqι L R drqi ι indφ sfι ψ1 ψ2 sfι literal drqι L R dvqi ι indφ sfι ψ1 ψ2 sfι literal dvq drq states q cid7 0 oq0 α1 α2 qv α1 α2 cid13 oq cid7 0 qv o deﬁned oq0 cid13 cid13 qd oq0 cid13 q cid7 cid7 oqv cid13 q v qr v oqv qr oq cid7 cid7 r q1 r oqr q1 oq oqr cid13 q oq q q qd qcid13 q oqi v qi v v cid13 xi Xv oqi v qi v v cid13 xi Xr oqι x qιx x L R ι indφ sfι ψ1 ψ2 oqι x qιx x L R ι indφ sfι ψ1 ψ2 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 133 oqι y qι y y cid13 sfι x Xv oqι y qιz y z cid13 y cid16 z sfι x x Xv oqι y qι y y cid13 sfι x Xr oqι y qιz y z cid13 y cid16 z sfι x x Xr oqi v qi1 1 n 1 v cid13 oqnv qφ v cid13 oqιcid13 qcid13 sfι literal oqι q sfι literal Each state Mφ outgoing transitions exception state q0 Hence number transitions polynomial number states In section ensure strategies players taken consideration correspond truth assignments B12 Strategies assignments If path model goes state labelled xi notxi interpreted setting variable xi true false respectively We observe states children xistate notxistate transitions successor determined single player Thus strategy player completely determines xistates notxistates xi variable player visited It happen path contains xistate notxistate performing contrary actions state qi valuechoice section qι sfι xi literal section If happens responsible strategy player inconsistent encode truth assignment variables player controls Thus ensured choices consistently variable x assigned true assigned false For purpose following consistency constraintstemporal formulaeare introduced 1 n Ti cid2xi cid2notxi It easy Ti true path pathor associated strategy player controls xi represents truth assignment xi We set mcid16 Tv cid2iv Tr cid2ir Ti i1 ncid16 Ti im1 propositions ir iv indicate current strategy refuter veriﬁer respectively invalid The needed prevent speciﬁc strategy proﬁles constitute Nash equilibrium We strategy veriﬁer v resp refuter r consistent strategies refuter resp veriﬁer induced outcome path satisﬁes Tv resp Tr In case consistent choices observe formula structure section sections literals implement game theoretical semantics Boolean formula 39 Next recall 22 small modiﬁcations following lemma says φ satisﬁable iff consistent strategy player v consistent strategies player ragain consistent means truth values assigned consistently variables invalidsuch eventually winv holds We emphasize construction assume perfectrecall strategies fact considering quantiﬁer alternation Also note q qcid13 reached agent switch consistent strategy inconsistent changing outcome paths possible exception transitions qv q1 Lemma 16 Let QSAT2formula φ x1 xmxm1 xnϕx1 xn negated normal form given The model Mφ constructed polynomial time We φ satisﬁable iff strategy sv veriﬁer v svq0 strategies sr refuter r holds outMφ q0 sv sr LTL Tv Tr cid3winv Proof Suppose φ true let sv strategy induced truth assignment v x1 xm witnessing truth φ ϕv valid simulation game theoretic semantics witnesses truth ϕv Moreover let svq0 needed avoid refuter reach state qd let sr consistent strategy r Note strategy sv sr induces truth assignment v 1 v 2 Xv Xr Then cid3winv true outMφ q0 sv sr refuter strategy sr induces truth assignment v ϕv 1 v false Which yield contradiction Let sv strategy veriﬁer v svq0 strategies sr refuter r holds outMφ q0 sv sr LTL Tv Tr cid3winv sv induces truth assignment v For consistent strategy sr cid3winv true It straightforward check truth assignment v induced sv encodes truth assignment witnessing truth φ encoded game theoretic semantics model That ϕv valid φ true cid2 134 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 B13 Preferences Nash equilibria Lemma 16 showed satisﬁability problem given QSAT2formula φ reduced strategy ex istence model checking problem simple formula Mφ What need reduction weak implementability problem winning strategy veriﬁer Nash equilibrium iff mula φ satisﬁable For purpose deﬁne following preference lists player v r respectively γv cid12d 4 γr cid12d 4 cid3winv Tv 3 cid3winv Tr Tv 2 cid3winv Tr Tv 1 cid13 0 cid3winv Tr Tv 3 cid3winv Tr Tv 2 cid3winv Tr 1 cid13 0 Now relate satisﬁability φ existence Nash equilibria contains winning strategy veriﬁer according Lemma 16 Proposition 17 Nash equilibria Mφ Let φ QSAT2formula nnf γv γr preference proﬁle deﬁned We sd s b φ satisﬁable iff s N EMφ q0 γv γr outMφ q0 s LTL cid3winv c Let γ cid7 cid7 d N EMφ q0 γv γr strategies sd s cid7 d sdq0 s r equal γv γr ﬁrst list entry cid12d 4 removed respectively Then holds φ satisﬁable cid7 dq0 cid13 v γ cid7 iff N EMφ q0 γ cid7 v γ cid7 r cid16 Proof The strategy proﬁle sd s d yields path q0qω improve payoff It Nash equilibrium cid7 d For path payoff players No player deviate b If φ holds according Lemma 16 strategy sv svq0 strategies sr cid7 holds outMφ q0 sv sr Tv Tr cid3winv cid9 We claim proﬁle sv s r refuter Nash equilibrium First observe srq0 Tr true outcome path cid7 Second note strategy s r exist r consistent strategy Given strategies players v r payoff 3 1 respectively As srq0 svq0 player deviate reach state qd Moreover player r deviate consistent strategy making cid3winv true Lemma 16 This shows player unilaterally deviate increase payoff Suppose φ false That cid7 r consistent strategy s cid9 truth assignment v 1 x1 xm truth assignment v 2 xm1 xn ϕv 1 v 2 false We consider strategy proﬁle s sv sr outMφ q1 s LTL cid3winv Nash equilibrium For sake contradiction suppose s Nash equilibrium Then ﬁrst case Tv true path player v increase utility deviating consistent strategy satisﬁes cid3winv note strategy r ﬁxed memoryless Second player r deviate increase payoff If Tr holds r gets payoff 1 However cid9 refuter deviate consistent strategy resulting path satisﬁes cid3winv By increase payoff 3 On hand Tr hold refuter gets payoff 0 deviate increase payoff cid9 deviating consistent strategy satisﬁes cid3winv c We consider modiﬁed preference list If φ satisﬁable N EMφ q0 γ cid7 r cid16 b Now suppose φ false That cid9 holds We consider strategy proﬁle s sv sr Nash equilibrium Firstly suppose outMφ q0 sv sr cid3winv Then shown b s Nash equilibrium Thus consider case λ outMφ q0 sv sr cid3winv We distinguish cases result players playing consistent inconsistent strategies Suppose Tv Tr holds path λ Then v better playing inconsistent strategy resulting payoff 1 0 ii If Tv Tr true r better playing consistent strategy remains satisfy cid3winv This possible cid9 iii Tv Tr true λ Then player r deviate inconsistent strategy makes cid3winv true achieved playing cid13 state q0 This increases players payoff 0 2 iv Suppose path satisﬁes Tv Tr Then player v better deviate consistent strategy This shows Nash equilibrium cid2 v γ cid7 Theorem 18 Hardness weak implementation veriﬁcation Let I q pointed NIS N normative included I The problem N WIN E I q f cid2P 2 hard size M N Prefs N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 135 2 hardness shown reduction weak implementability problem f γv γr cid3winv Given Proof cid2P QSAT2formula φ nnf construct model Mφ polynomial time according Lemma 16 deﬁne I Mφ γv γr Ncid14 Now Proposition 17b φ satisﬁable iff s N EMφ q0 γv γr outq0 s cid3winv This equivalence equivalent Ncid14 WIN E I q0 f cid2 B2 Hardness strong implementability Theorem 5 The strong implementation problem requires checking parts set Nash equilibria nonempty Nash equilibria satisfy speciﬁc properties We gives rise cid3P 2 hardness In order able use model Mφ reduction QSAT2 need switch roles veriﬁer refuter That refuter controls variables x1 xm veriﬁer xm1 xn This revised model denoted cid17Mφ later problem existence appropriate normative This reduction requires additional labelling states modelling guessing normative Deﬁnition 27 The model cid17Mφ Given QSAT2formula φ x1 xmxm1 xnϕx1 xn nnf deﬁne CGS cid17Mφ analogously Mφ Xr x1 xm Xv xm1 xn We label q0 state reachable number transitions q0 new proposition t The labelling t later ensuring structure cid17Mφ affected normbased update precisely transitions regimented making instance winning state veriﬁer unreachable The proof following lemma analogously Lemma 16 Lemma 19 Given QSAT2formula φ x1 xmxm1 xnϕx1 xn nnf φ satisﬁable iff strategies sr refuter r srq0 strategy sv veriﬁer v cid18Mφ q0 sv sr LTL Tr Tv cid3winv Proof Sketch Suppose φ true For truth assignment v Xr let w v denote truth assignment Xv ϕv w v valid Let sr denote strategy induced v let ssr v consistent strategy induced w v witnesses truth φ Thus cid3winv true cid18Mφ q0 ssr v sr refuter consistent strategy consistent strategy ssr v cid18Mφ q0 ssr v sr cid16LTL cid3winv This imply v w v ϕv w v false Contradiction Let ssr v consistent strategy veriﬁer v witnesses truth formulae refuter v sr LTL cid3winv The strategies induce truth assignments v w v plays consistent strategy sr cid18Mφ q0 ssr respectively notation It straightforward check ϕv w v true cid2 The lemma shows use previous result reduce truth QSAT2 instance property Nash equilibria cid17Mφ slightly modiﬁed variant preference lists player v We deﬁne cid17γv cid12d 5 cid3winv Tv 4 cid3winv Tr Tv 3 cid3winv Tr Tv 2 cid3winv Tr Tv 1 cid13 0 cid17γr γr Proposition 20 Nash equilibria cid17Mφ Let φ QSAT2formula nnf d N E cid17Mφ q0 cid17γv cid17γr strategies sd s We sd s b φ satisﬁable iff s N E cid17Mφ q0 cid17γv cid17γr holds outq0 s LTL cid3winv cid12d cid7 d sdq0 s cid7 cid7 dq0 cid13 Proof Analogously Proposition 17a b If φ holds according Lemma 19 strategies sr srq0 strategy sv cid18Mφ q0 sv sr Tr Tv cid3winv cid9 Now suppose Nash equilibrium s sv sr outcid18Mφ q0 sv sr cid3winv cid12 d We consider following cases First assume cid18Mφ q0 sv sr Tr 136 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 Then cid9 veriﬁer deviate sv obtain path satisfying Tv cid3winv This shows sv sr Nash equilibrium Second assume cid18Mφ q0 sv sr Tr Tv In case refuter better playing consistent strategy Thirdly assume cid18Mφ q0 sv sr Tr Tv In case veriﬁer better switching consistent strategy Also note players play cid13 q0 cid12 d holds This shows s N E cid17Mφ q0 cid17γv cid17γr cid18Mφ q0 s LTL cid3winv cid12d Suppose φ false We need Nash equilibrium s cid18Mφ q0 s LTL cid3winv cid12d By Lemma 19 strategy sr srq0 strategies sv cid18Mφ q0 sv sr LTL cid7 cid7 v sr LTL Tv Tr Tv cid3winv contraposition Now let s v strategy cid18Mφ q0 s v N E cid17Mφ q0 cid17γv cid17γr By Lemma 19 veriﬁer change strategy cid7 vq0 We sr s s cid7 ensure cid3winv Moreover srq0 veriﬁer v deviate increase payoff Analogously s vq0 cid7 v Nash equilibrium Thus refuter deviate sr increase payoff This shows sr s s N E cid17Mφ q0 cid17γv cid17γr cid18Mφ q0 s LTL cid3winv cid12 d cid2 cid7 Theorem 21 Hardness strong implementation veriﬁcation Let I q pointed NIS N normative included I The problem N SIN E I q f cid2P 2 hard size M N Prefs 2 hard cid3P Proof cid2P polynomial time φ satisﬁable iff N EMφ q0 cid17γv cid17γr cid16 This equivalent 2 hardness By Lemma 16 Proposition 17c construct model Mφ QSAT2formula φ nnf N EMφ q0 cid17γv cid17γr cid16 s N EMφ q0 cid17γv cid17γr outMφ q0 s LTL cid13 iff Ncid14 SIN E I q0 f f cid17γv cid17γr cid13 cid3P 2 hardness We reduce QSAT2 strong implementation problem f cid17γv cid17γr cid3winv cid12d By Lemma 19 Proposition 20 construct model cid17Mφ QSAT2formula φ polynomial time φ satisﬁable iff s N E cid17Mφ q0 cid17γv cid17γr outcid18Mφ q0 s LTL cid3winv cid12d Proposition 20b iff s N E cid17Mφ q0 cid17γv cid17γr outcid18Mφ q0 s LTL cid3winv cid12d N E cid17Mφ q0 cid17γv cid17γr cid16 Proposition 20a iff Ncid14 SIN E I q0 f cid2 Appendix C Proofs implementation problems existence In following consider hardness proof existence problem stated Proposition 8 The proof problem cid2P 3 hard requires technical sophistication The basic idea normative sim ulate ﬁrst existential quantiﬁcation QSAT3formula Firstly achieved sanctioning norms regimenting norms C1 Sanctioning regimentation norms For hardness reduce QSAT3 Therefore consider QSAT3formula φ x1 xrxr1 xrmxrm1 xnϕx1 xn nnf φ true iff SIN E I q f appropriate I q f The idea reduction extends cid17φ previous section cid17φ reduction given previous section Essentially use construction cid17M modiﬁed version QSAT3formula φ The refuter r additionally controls literal states referring new variables x1 xr In order use previous construction deﬁne cid17φ formula obtained φ follows cid17φ x1 xr xr1 xrmxrm1 xnϕx1 xn That ﬁrst existentially quantiﬁed variable moved universal controlled refuter A sanctioning cid7 norm deﬁne truth assignment variables x1 xr For purpose sanctioning norm labels states q 0 qv new propositions representing truth assignment For illustration assume sanctioning norm encode truth assignment assigns true x1 xg false xg1 xr 1 g r This modelled normative N start cid91 cid92 cid91 cid92 cid13 cid91 cid92 cid13 x1 xg notxg1 notxr Then model cid17M consider cid17φ consistency constraint Tr r cid17M cid17φ cid2 N states q cid17φ form cid7 0 qv additionally labelled x1 xg notxg1 notxr Given N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 137 Tr cid2ir rmcid16 Ti rcid16 cid2xi cid2notxi ir1 i1 We deﬁne formula cid19 asgn cid12 cid21 xi notxi xi notxi rcid16 cid20 i1 cid22 cid12d cid7 expressing state qd q 0 qv labelled representation truth assignment variables x1 xr assuming current state q0 These formulae suﬃce given sanc tioning norms In presence regimenting norms ensured regimenting norms regiment transitions invalidating structure model For example transitions leading state qcid13 simply regimented makes impossible veriﬁer win The idea introduce formula forbids undesirable normative systems Therefore deﬁne formula cid21 t cid12t t cid12t cid12d winv winr tick cid2 cid20 It describes path loop states looping states qd qcid13 q Now prove following result Lemma 22 Let N Nrs normative paths λ cid8cid18M regimentation norm applicable state Qqd q qcid13 cid17φ cid2Nq0 holds λ tick Then N contain Proof Suppose outgoing transition state q Qqd q qcid13 regimented Then loop q q Let λ denote path q0 q followed qω Clearly formula tick violated path contradicts assumption cid2 Lemma 23 Given QSAT3formula φ x1 xrxr1 xrmxrm1 xnϕx1 xn nnf φ satisﬁable iff N Nrs strategies sr r srq0 strategy sv v cid17φ cid2Nq0 λ ass tick Moreover outcid18M direction ﬁnd normative Ns cid17φ cid2Nq0 sv sr LTL Tr Tv cid3winv paths λ cid8cid18M Proof Suppose φ holds Let v witnessing truth assignment variables x1 xr Then φcid7 xr1 xrmxrm1 xnϕx1 xnv satisﬁable By Lemma 19 sr srq0 sv cid9 outcid18Mφcid7 q0 sv sr LTL Tr Tv cid3winv Now let N start cid13 cid13 xi1 xig notxig1 notxir v ir v g t v g1 f i1 ir permutation 1 r Then v i1 paths λ cid8cid18M cid17φ cid2Nq0 π λ LTL ass tick The claim follows cid9 applied ϕv normative essentially ﬁxes choices refuter variables x1 xr deviation induced truth values refuter result inconsistent strategy cid17φ cid2Nq0 sv sr LTL Tr Tv cid3winv paths λ cid8cid18M Let N Nrs strategies sr srq0 r strategy sv v cid17φ cid2Nq0 λ ass tick By Lemma 22 outcid18M cid7 transitions regimented apart starting qd q qcid13 The valuation q 0 qv induce truth assignments v 1 v 2 x1 xr respectively We choose N way v 1 v 2 This case strategies sr r srq0 strategies sv v cid18M cid17φ cid2Nq0 sv sr LTL Tr Tv cid3winv xr1 xrmxrm1 xnϕv true 1 2 cf Lemma 19 The claim follows cid2 Now present reduction implementation problem Again need slightly modify players preference lists cid17cid17γ v cid12d tick ass 5 cid3winv Tv 4 cid3winv Tr Tv 3 cid3winv Tr Tv 2 138 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 cid17cid17γ r cid3winv Tr Tv 1 cid13 0 cid12d tick ass 4 cid3winv Tr Tv 3 cid3winv Tr Tv 2 cid3winv Tr 1 cid13 0 Proposition 24 Let φ QSAT3formula nnf For N Nrs sd s b φ satisﬁable iff N Nrs s N E cid17M d N E cid17M cid7 c φ satisﬁable iff N Ns s N E cid17M cid17φ cid2 N q0 cid17cid17γ v cid17cid17γ r strategy sd sdcid7 sdq0 s cid17φ cid2 N q0 cid17cid17γ v cid17cid17γ r cid18M cid17φ cid2 N q0 cid17cid17γ v cid17cid17γ r cid18M cid17φ cid2Nq0 s LTL cid3winv cid12d cid17φ cid2Nq0 s LTL cid3winv cid12d cid7 dq0 cid13 ass tick ass tick Proof The action proﬁle sd s d satisﬁes cid12d transition cid13 cid13 regimented 0 satisﬁes tick regimented On paths payoff players maximal No player d yields path q0qω cid7 path qω improve payoff cid17φ cid2Nq0 s LTL ass tick cid3winv cid12 d cid17φ cid2Nq0 sv sr LTL Tr Tv cid3winv paths λ cid8cid18M b Suppose φ holds By Lemma 23 N Ns strategies sr r srq0 cid17φ cid2Nq0 strategy sv v cid18M cid17φ cid2Nq0 s LTL ass tick λ ass tick Now suppose Nash equilibrium sv sr cid18M cid3winv cid12 d As ass tick true paths means cid18M cid17φ cid2Nq0 s LTL cid3winv cid12 d Nash equilibrium We use reasoning proof Proposition 20b obtain contradiction Hence Nash equilibrium exist Suppose φ hold We N Nrs s N E cid17M cid9 outcid18M Firstly suppose cid17M cid17φ cid2Nq0 λ tick This path generated strategy proﬁle s satisﬁes cid9 antecedent cid9 false As strategy proﬁle gives maximal utility Nash equilibrium Thus assume paths norm updated model satisfy tick Completely analogous assume ass satisﬁed updated models cid17φ cid2 N paths λ cid8cid18M Secondly consider cid17M cid17φ cid2Nq0 satisfy tick ass As φ hold Lemma 23 assumption updated models N Nrs strategy sr r srq0 cid17φ cid2Nq0 sv sr LTL Tr Tv cid3winv The rest proof follows analogously strategies sv v cid18M cid7 cid7 vq0 By Lemma 23 v sr LTL Tv s Proposition 20b let s veriﬁer change strategy ensure cid3winv Moreover srq0 veriﬁer v deviate increase cid7 payoff Analogously s v Nash equilibrium Thus s N E cid17M cid17φ cid2Nq0 s LTL cid3winv cid12 d cid7 vq0 refuter deviate sr increase payoff This shows sr s cid7 v strategy cid18M cid17φ cid2 N q0 cid17cid17γ v cid17cid17γ r cid18M cid17φ cid2 N contains path λ cid8cid18M cid17φ cid2 N q0 cid17cid17γ v cid17cid17γ r cid17φ cid2Nq0 s c Follows immediately b Lemma 23 cid2 Theorem 25 Hardness strong implementation existence sanctioning Let I q pointed NIS N Nrs Ns The problem SIN E I q f cid16 cid2P 3 hard Proof First let N Nrs φ QSAT3 formula nnf We f cid17cid17γ v cid17cid17γ r cid3winv cid12d ass tick φ satisﬁable iff N N s N E cid17M iff N N s N E cid17M cid17φ cid2 N q0 cid17cid17γ v cid17cid17γ r outcid18M cid17φ cid2 N q0 cid17cid17γ v cid17cid17γ r outcid18M cid17φ cid2Nq0 s LTL cid3winv cid12d ass tick cid17φ cid2Nq0 s LTL cid3winv cid12d ass tick Proposition 24 b N E cid17M cid17φ cid2 N q0 cid17cid17γ v cid17cid17γ r cid16 Proposition 24a N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 139 iff SIN E I q0 f cid16 The case N Ns follows analogously Proposition 24c ﬁrst step cid2 C2 Regimentation norms Finally consider case N Nr We seen ensure regimenting norms regiment speciﬁc transitions means formula tick However longer use previous construction based sanctioning norms encode truth assignment We ﬁnd way achieve regimenting norms The idea construction consists parts 1 Use regimenting norms simulate truth assignments variables x1 xr removing outgoing transitions states q1 qr 2 Ensure transition regimented formula characterizes structure cid17M cid17φ Deﬁnition 28 The model cid17M ﬁne cid17M cid17φ r cid17M cid17φ r Let φ x1 xrxr1 xrmxrm1 xnϕx1 xn nnf given We cid17φ state q1 q1 q1cid13 qr qr qrcid13 additionally labelled fresh proposition rr For 1 observe model contains looping states qd qcid13 q We introduce formulae tickr cid2t rr cid12t t rr cid12t cid12d winv winr validr cid2t rr cid12t t rr cid12t tick tickr validr As use tickr ensure regimentation norm imposed state possibly q1 qr The idea transitions set regimented A second formula validr true path transition states q1 qr contained path regimented Finally tick represents transition path regimented Lemma 26 Let N Nrs normative paths λ cid8cid18M regimentation norm applicable state Qqd q qcid13 q1 q1 q1cid13 qr qr qrcid13 cid17φ cid2Nq0 holds λ tickr Then N contain Lemma 27 Given QSAT3formula φ x1 xrxr1 xrmxrm1 xnϕx1 xn nnf φ satisﬁable iff N Nr cid17M cid2 N path q0 qr1 qcid14 r n strategies sr r srq0 strategy sv v cid18M q0 sv sr LTL Tr validr Tv cid3winv paths λ cid8cid18M q0 λ tickr cid17φ cid2N r cid17φ r cid17φ cid2N r Proof Sketch Suppose φ satisﬁable Let v witnessing valuation variables x1 xr We consider normative N regiments qi 1 r transition cid13 resp vxi f resp vxi t Now truth assignment xr1 xrm xn induces witnessing strategies following reasoning Lemma 19 It case tickr true paths starting q0 Suppose N Nr strategies sr r srq0 strategy sv v q0 λ tickr q0 sv sr LTL Tr validr Tv cid3winv paths λ cid8cid18M cid17φ cid2N r cid17φ cid2N r outcid18M path q0 qr1 qcid14 r n By Lemma 26 transitions states rr hold affected update normative We assume wlog N regiments exactly outgoing transition states q1 qr regiment transitions connectivity property This variable xi 1 r transition regimented universally quantiﬁed φ Thus normative N induces truth assignment v variables x1 xr follows vxi t resp vxi f iff transition resp cid13 regimented qi Now apply reasoning similar Lemma 19 wrt cid17φv model cid17M cid2 N We cid17φv satisﬁable The normative systems gives witnessing truth assignment v variables x1 xr showing φ satisﬁable cid2 cid17φv r In previous result crucial assume normative regiment transitions outgoing state q1 qr In following ensure normative systems respect condition yield bad Nash equilibrium Therefore deﬁne following preference lists 140 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 γ v cid12d tick 5 cid3winv Tv 4 cid3winv Tr Tv 3 cid3winv Tr Tv 2 cid3winv Tr Tv 1 cid13 0 γ r cid12d tickr 4 validr cid3winv Tr Tv 3 validr cid3winv Tr Tv 2 validr cid3winv Tr 1 cid13 0 Now able following result Proposition 28 Let φ QSAT3formula nnf N Nr We sd s b φ satisﬁable iff N Nr s N E cid17M r strategy sd s cid2 N q0 γ cid2 N q0 γ v γ d N E cid17M cid7 cid17φ r cid17φ r cid7 d sdq0 s v γ cid7 dq0 cid13 r cid18M cid17φ cid2N r cid12d tick Proof q0 s LTL cid3winv Either end path q0qω 0 The satisﬁes tick cid12d satisfying tick b Suppose φ satisﬁable Then apply Lemma 27 That let N Nr cid17M d qω cid17φ r cid7 cid17φ cid2N r cid17φ cid2N r cid17φ cid2N r cid17φ cid2N r cid17φ cid2N r q0 sv s q0 s LTL tick Then cid18M q0 s cid16LTL tick Then cid18M r Tr validr Second assume cid18M cid17φ cid2N r q0 s LTL tick cid3winv cid12 d q0 sv sr LTL Tr validr Tv cid3winv paths λ cid8cid18M cid2 N path q0 qr1 qcid14 r n strategies sr r srq0 strategy sv v q0 λ tickr Now outcid18M suppose Nash equilibrium s sv sr cid18M q0 s cid16LTL tickr Lemma 27 fact First assume cid18M cid7 validr tickr tick holds path Thus refuter better deviate strategy s r q0 s LTL validr outcid18M If svq0 cid13 refuter increase payoff deviating srq0 cid13 let suppose svq0 We assume veriﬁer plays consistent strategy deviate In case assume sr consistent refuter deviate consistent strategy increase payoff Then Lemma 27 veriﬁer deviate better strategy satisﬁes cid3winv If srq0 cid13 assume svq0 cid13 veriﬁer deviate strategy This contradicts existence Nash equilibrium stated properties Suppose φ hold We N Nr outcid18M cid9 s N E cid17M v γ As φ hold according Lemma 27 N Nr holds path q0 qr1 qcid14 r n cid17M ii path λ cid8cid18M cid17φ cid2N r iii strategy sr r srq0 strategies sv v holds cid9 cid18M r q0 s LTL tick cid3winv cid12 d We suppose sake contradiction case q0 s LTL cid3winv cid12d tick r cid18M s N E cid17M q0 λ cid16 tickr cid2 N q0 γ cid2 N q0 γ v γ cid2 N cid17φ cid2N r cid17φ cid2N r cid17φ cid2N r cid17φ cid2N r q0 cid17φ r cid17φ r cid17φ r cid17φ cid2N r sv sr LTL Tr validr Tv cid3winv First suppose holds Consider strategies sr sv srq0 svq0 end looping q0 s LTL state inbetween q0 qr1 qcid14 r n exist assumption We cid18M tick validr Thus sv sr Nash equilibrium contradicts cid9 Secondly suppose ii As suppose players play sr sv srq0 svq0 yield path λ λ cid16 tickr On path holds tick tickr player incentive deviate Thirdly suppose iii holds Let sr strategy deﬁned sv consistent svq0 By Lemma 27 veriﬁer change strategy consistent ensures cid3winv The player cid17φ cid2N r N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 141 deviate inconsistent Moreover player deviate ensure path cid12d We assume ii hold Thus veriﬁer refuter deviate strategy outcome path satisﬁes tick tickr respectively Thus strategy proﬁle Nash equilibrium contradicting cid9 cid2 Theorem 29 Hardness strong implementation existence regimentation norms Let I q pointed NIS N Nr The problem SIN E I q f cid16 cid2P 3 hard Proof Let φ QSAT3 formula nnf We f γ v γ r cid3winv cid12d tick φ satisﬁable iff N N s N E cid17M iff N N s N E cid17M cid17φ r cid17φ r cid2 N q0 γ cid2 N q0 γ v γ v γ r outcid18M r outcid18M q0 s LTL cid3winv cid12d tick Proposition 28 b q0 s LTL cid3winv cid12d tick cid17φ cid2N r cid17φ cid2N r N E cid17M iff SIN E I q0 f cid16 cid2 N q0 γ v γ cid2 cid17φ r r cid16 Proposition 28 References 2009 26292652 1 T Ågotnes W van der Hoek M Wooldridge Normative games Proceedings 6th International Joint Conference Autonomous Agents Multiagent Systems AAMAS 07 ACM New York NY USA 2007 pp 18 2 T Ågotnes W van der Hoek M Woolridge Robust normative systems logic norm compliance Log J IGPL 18 2010 430 3 T Ågotnes M Wooldridge Optimal social laws Proceedings 9th International Conference Autonomous Agents Multiagent Systems Volume 1 AAMAS 10 International Foundation Autonomous Agents Multiagent Systems Richland SC 2010 pp 667674 httpdlacmorg citationcfmid18382061838294 4 H Aldewereld V Dignum Operetta organizationoriented development environment Languages Methodologies Development Tools Multi Agent Systems Third International Workshop LADS 2010 Lyon France August 30September 1 2010 pp 118 revised selected papers 5 H Aldewereld J VázquezSalceda F Dignum JC Meyer Verifying norm compliancy protocols O Boissier JA Padget V Dignum G Lindemann ET Matson S Ossowski JS Sichman J VázquezSalceda Eds Coordination Organizations Institutions Norms MultiAgent Systems Lecture Notes Computer Science vol 3913 Springer 2006 pp 231245 6 N Alechina M Dastani B Logan Programming normaware agents Proceedings 11th International Conference Autonomous Agents 7 N Alechina M Dastani B Logan Reasoning normative update Proceedings Twenty Third International Joint Conference Artiﬁcial 8 N Alechina M Dastani B Logan Norm approximation imperfect monitors Proceedings 13th International Conference Autonomous Multiagent Systems AAMAS 12 vol 2 2012 pp 10571064 Intelligence IJCAI 2013 AAAI Press 2013 pp 2026 Agents Multiagent Systems AAMAS 2014 2014 9 R Alur TA Henzinger O Kupferman Alternatingtime temporal logic J ACM 49 2002 672713 10 F Arbab Abstract behavior types foundation model components composition F Boer M Bonsangue S Graf WP Roever Eds Formal Methods Components Objects LNCS vol 2852 SpringerVerlag 2003 pp 3370 11 L Astefanoaei M Dastani JJC Meyer F Boer On semantics veriﬁcation normative multiagent systems Int J Univers Comput Sci 15 13 12 J Baumfalk B Poot B Testerink M Dastani A sumo extension norm based traﬃc control systems Proceedings SUMO2015 Intermodal Simulation Intermodal Transport DLR Berlin Adlershof 2015 pp 6383 13 P Blackburn J Bos K Striegnitz Learn Prolog Now Texts Computing vol 7 College Publications 2006 14 G Boella L van der Torre Regulative constitutive norms normative multiagent systems Proceedings Ninth International Conference Principles Knowledge Representation Reasoning KR04 2004 pp 255266 15 G Boella LWN van der Torre Enforceable social laws The Fourth International Joint Conference Autonomous Agents Multiagent Systems AMAAS 2005 2005 pp 682689 16 O Boissier R Bordini J Hübner A Ricci A Santi Multiagent oriented programming jacamo Sci Comput Program 78 6 2011 747761 17 F Brazier C Jonker J Treur Compositional design reuse generic agent model Appl Artif Intell J 14 2000 491538 18 N Bulling M Dastani Normative mechanism design extended abstract Proceedings 10th International Conference Autonomous Agents MultiAgent Systems AAMAS 2011 ACM Press Taipei Taiwan May 2011 pp 11871188 19 N Bulling M Dastani Veriﬁcation implementation normative behaviours multiagent systems Proc 22nd Int Joint Conf 20 N Bulling M Dastani M Knobbout Monitoring norm violations multiagent systems Twelfth International Conference Autonomous Agents Artiﬁcial Intelligence IJCAI Barcelona Spain July 2011 pp 103108 MultiAgent Systems AAMAS13 2013 pp 491498 21 N Bulling J Dix Modelling verifying coalitions argumentation ATL Intel Artif 14 46 March 2010 4573 22 N Bulling W Jamroga Verifying agents memory harder AI Commun 23 4 December 2010 389403 23 N Bulling W Jamroga J Dix Reasoning temporal properties rational play Ann Math Artif Intell 53 14 2009 51114 24 HL Cardoso E Oliveira Electronic institutions b2b dynamic normative environments Artif Intell Law 16 1 2008 107128 25 M Comuzzi I Vanderfeesten T Wang Optimized crossorganizational business process monitoring design enactment Inf Sci 244 2013 107118 26 N Criado E Argente V Botti Open issues normative multiagent systems AI Commun 24 3 2011 233264 27 M Dastani JJC Meyer D Grossi A logic normative multiagent programs J Log Comput 23 2 2013 335354 28 M Dastani N Tinnemeier JC Meyer A programming language normative multiagent systems V Dignum Ed MultiAgent Systems Seman tics Dynamics Organizational Models Information Science Reference 2009 29 F Dignum Autonomous agents norms Artif Intell Law 7 1 1999 6979 httpdxdoiorg101023A3A1008315530323 30 U Endriss S Kraus J Lang M Wooldridge Designing incentives boolean games AAMAS 2011 pp 7986 142 N Bulling M Dastani Artiﬁcial Intelligence 239 2016 97142 5 34 2012 31 M Esteva D la Cruz C Sierra ISLANDER electronic institutions editor Proceedings First International Joint Conference Autonomous Agents MultiAgent Systems AAMAS 2002 Bologna Italy 2002 pp 10451052 32 M Esteva J RodríguezAguilar B Rosell J Arcos AMELI agentbased middleware electronic institutions Proceedings AAMAS 2004 New York US July 2004 pp 236243 33 M Esteva J RodriguezAguilar C Sierra W Vasconcelos Verifying norm consistency electronic institutions V Dignum D Corkill C Jonker F Dignum Eds Proceedings AAAI04 Workshop Agent Organizations Theory Practice AAAI AAAI Press San Jose July 2004 Technical Report WS0402 34 D Fitoussi M Tennenholtz Choosing social laws multiagent systems minimality simplicity Artif Intell 119 1 2000 61101 35 N Fornara M Colombetti Specifying enforcing norms artiﬁcial institutions Proc DALT08 2009 36 A GarciaCamino P Noriega JA RodriguezAguilar Implementing norms electronic institutions Proceedings Fourth International Joint Conference Autonomous Agents MultiAgent Systems AAMAS05 New York NY USA 2005 pp 667673 37 G Gottlob G Greco F Scarcello Pure Nash equilibria hard easy games J Artif Intell Res 2003 215230 38 H Guo Automotive Informatics Communicative Systems Principles Vehicular Networks Data Exchange Information Science Reference Imprint IGI Publishing Hershey PA 2009 39 J Hintikka Logic Language Games Information Clarendon Press Oxford 1973 40 R Horowitz P Varaiya Control design automated highway Special Issue Hybrid Systems Proc IEEE 88 7 2000 913925 41 J Hübner O Boissier R Kitio A Ricci Instrumenting multiagent organisations organisational artifacts agents giving organisational power agents Int J Auton Agents MultiAgent Syst 20 2010 369400 42 J Hübner J Sichman O Boissier SMOISE middleware developing organised multiagent systems Proceedings International Workshop Coordination Organizations Institutions Norms MultiAgent Systems LNCS vol 3913 Springer 2006 pp 6478 43 J Hübner J Sichman O Boissier Developing organised multiagent systems MOISE model programming issues agent levels Int J AgentOriented Softw Eng 1 34 2007 370395 44 JF Hübner O Boissier RH Bordini From organisation speciﬁcation normative programming multiagent organisations J Dix J Leite G Governatori W Jamroga Eds Proceedings 11th International Workshop Computational Logic MultiAgent Systems CLIMA XI Lisbon Portugal August 1617 2010 Lecture Notes Computer Science vol 6245 Springer 2010 pp 117134 45 AJI Jones M Sergot On characterization law systems JJC Meyer R Wieringa Eds Deontic Logic Computer Science Normative System Speciﬁcation John Wiley Sons 1993 pp 275307 46 D Krajzewicz J Erdmann M Behrisch L Bieker Recent development applications sumosimulation urban mobility Int J Adv Syst Meas 47 K Mahbub G Spanoudakis A framework requirements monitoring service based systems Proceedings 2nd International Conference Service Oriented Computing ICSOC 04 ACM New York NY USA 2004 pp 8493 48 FR Meneguzzi M Luck Normbased behaviour modiﬁcation BDI agents C Sierra C Castelfranchi KS Decker JS Sichman Eds 8th Interna tional Joint Conference Autonomous Agents Multiagent Systems AAMAS 2009 IFAAMAS 2009 pp 177184 49 A Metzger P Leitner D Ivanovic E Schmieders R Franklin M Carro S Dustdar K Pohl Comparing combining predictive business process monitoring techniques IEEE Trans Syst Man Cybern 45 2 2014 276290 50 J Meyer R Wieringa Deontic Logic Computer Science Normative System Speciﬁcation Wiley Professional Computing J Wiley 1993 51 NH Minsky V Ungureanu Lawgoverned interaction coordination control mechanism heterogeneous distributed systems ACM Trans Softw Eng Methodol 9 3 2000 52 J Morales M LopezSanchez JA RodriguezAguilar M Wooldridge W Vasconcelos Minimality simplicity online automated synthesis normative systems Proceedings 2014 International Conference Autonomous Agents Multiagent Systems AAMAS 14 International Foundation Autonomous Agents Multiagent Systems Richland SC 2014 pp 109116 53 J Morales M LópezSánchez JA RodríguezAguilar M Wooldridge WW Vasconcelos Automated synthesis normative systems International Conference Autonomous Agents MultiAgent Systems AAMAS 13 Saint Paul MN USA May 610 2013 pp 483490 54 M Osborne A Rubinstein A Course Game Theory MIT Press 1994 55 C Papadimitriou Computational Complexity Addison Wesley Reading 1994 56 A Pnueli The temporal logic programs Proceedings Foundations Computer Science FOCS 1977 pp 4657 57 A Ricci M Viroli A Omicini Give agents artifacts AA approach engineering working environments MAS EH Durfee M Yokoo MN Huhns O Shehory Eds 6th International Joint Conference Autonomous Agents Multiagent Systems AAMAS 2007 IFAAMAS 2007 58 Y Shoham K LeytonBrown Multiagent Systems Algorithmic GameTheoretic Logical Foundations Cambridge University Press 2009 59 Y Shoham M Tennenholtz On synthesis useful social laws artiﬁcial agent societies Proceedings Tenth National Conference Artiﬁcial Intelligence AAAI92 San Diego CA 1992 60 Y Shoham M Tennenholtz On social laws artiﬁcial agent societies offline design Artif Intell 73 12 1995 231252 61 VT Silva From speciﬁcation implementation norms automatic approach generate rules norms govern behavior agents Int J Auton Agents Multiagent Syst 17 1 2008 113155 62 MP Singh M Arrott T Balke AK Chopra R Christiaanse S Craneﬁeld F Dignum D Eynard E Farcas N Fornara F Gandon G Governatori HK Dam J Hulstijn I Krueger HP Lam M Meisinger P Noriega BTR Savarimuthu K Tadanki H Verhagen S Villata The uses norms G Andrighetto G Governatori P Noriega LWN van der Torre Eds Normative MultiAgent Systems Dagstuhl FollowUps vol 4 Schloss DagstuhlLeibnizZentrum fuer Informatik Dagstuhl Germany 2013 pp 191229 63 I Sommerville D Cliff R Calinescu J Keen T Kelly M Kwiatkowska J Mcdermid R Paige Largescale complex systems Commun ACM 55 7 2012 7177 httpdoiacmorg10114522092492209268 64 N Tinnemeier M Dastani JJC Meyer L van der Torre Programming normative artifacts declarative obligations prohibitions Proceedings IEEEWICACM International Joint Conference Web Intelligence Intelligent Agent Technology IEEE Computer Society 2009 pp 145152 65 W van der Hoek M Roberts M Wooldridge Social laws alternating time effectiveness feasibility synthesis Synthese 156 1 2007 119 66 MB van Riemsdijk KV Hindriks CM Jonker Programming organizationaware agents research agenda Proceedings Tenth International Workshop Engineering Societies Agents World ESAW09 LNAI vol 5881 Springer 2009 pp 98112 67 KW Wagner Bounded query classes SIAM J Comput 19 5 1990 833846 68 M Wooldridge An Introduction Multiagent Systems 2nd edition Wiley Chichester UK 2009 69 M Wooldridge U Endriss S Kraus J Lang Incentive engineering boolean games Artif Intell 195 2013 418439 httpwwwsciencedirectcom 70 F Zambonelli N Jennings M Wooldridge Organizational abstractions analysis design multiagent systems First International Work sciencearticlepiiS0004370212001518 shop AgentOriented Software Engineering ICSE 2000