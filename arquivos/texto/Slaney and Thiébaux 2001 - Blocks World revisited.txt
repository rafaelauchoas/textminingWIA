Artiﬁcial Intelligence 125 2001 119153 Blocks World revisited John Slaney acid31 Sylvie Thiébaux b2 Computer Sciences Lab Australian National University Canberra Australia b CSIRO Mathematical Information Sciences PO Box 664 Canberra Australia Received 15 August 1999 received revised form 14 June 2000 Abstract Contemporary AI shows healthy trend away artiﬁcial problems realworld applications Less healthy fashionable disparagement toy domains properly approached domains support meaningful systematic experiments allow features relevant kinds reasoning abstracted studied A major reason fallen disrepute superﬁcial understanding resulted poor experimental methodology consequent failure extract useful information This paper presents sustained investigation toy infamous Blocks World planning problem provides level understanding required effective use benchmark Our results include methods generating random problems systematic experimentation best domainspeciﬁc planning algorithms AI planners compared observations establishing average plan quality nearoptimal methods We study distribution hardeasy instances identify structure AI planners able exploit order approach Blocks World successfully cid211 2001 Elsevier Science BV All rights reserved Keywords Blocks World Planning benchmarks Randomhard problems Approximation algorithms 1 Introduction 11 Blocks World The Blocks World BW consists ﬁnite number blocks stacked towers table large hold The positioning towers table irrelevant Corresponding author Email addresses JohnSlaneyarpanueduau J Slaney SylvieThiebauxcmiscsiroau S Thiébaux 1 Some work author visiting IMAG Grenoble France 2 This work partly author IRISA Rennes France 0004370201 matter cid211 PII S 0 0 0 4 3 7 0 2 0 0 0 0 0 7 9 5 2001 Elsevier Science BV All rights reserved 120 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 Fig 1 BW planning problem optimal plan The BW planning problem turn initial state blocks goal state moving block time tower tower table Fig 1 The optimal BW planning problem minimal number moves BW planning turns tractable optimal BW planning NPhard 61314 Further optimal BW planning MaxSNP hard meaning exists ﬁxed performance ratio approximated tractably 26 Nearoptimal planning ratio 2 tractable 14 question better ratio achievable polynomial time remains open 26 For number extensions basic BW table limited capacity blocks identical names similar complexity results shown 14 approximation constant ratio tractable 26 12 Motivations paper Artiﬁcial domains Blocks World Traveling Salesman Queens little practical Despite remained staples AI literature 30 years hard general purpose AI systems principle support meaningful systematic affordable experiments More recently BW fallen disrepute In efforts AI planning community address domains practical relevance More importantly superﬁcial understanding domain leading poor experimental methodology consequent failure extract useful results Three major gaps existing knowledge BW prevent effectively benchmark The ﬁrst lack knowledge construct problem instances suitable systematic experimentation example hard instances uniformly distributed random ones This seriously lowers value experiments Results commonly obtained isolated BW instances unspeciﬁed number blocks involved presumably handcrafted good points particular refrain pointing ﬁnger particular example literature Matters started improve attempts create benchmarks planning 3 In particular Kautz Selman introduced series BW problems called bw_largea bw_larged attained status 1718 This 3 The AIPS planning competition httpwwwcsyaleeducid24mcdermotthtml httpwwwcstoronto eduaips2000 symptom perceived need standards J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 121 good everyones solving problem shall problems atypical respects abnormally short plans easy solve optimally The alternative experimenting particular instances use random problems usually poorly BW optimisation problems given size vary difﬁculty ﬁve random problems hardly statistically adequate base strong conclusions Moreover attention paid distribution random instances greatly affects results Even AIPS 2000 competition carefully constructed testbed planners largest BW problems atypical easy solve optimally We believe problem selection improve features making instances hard easy average identiﬁed software generating random instances meaningful distributions The second important gap lies lack knowledge performance time solution quality BWspeciﬁc planning methods It 1990s worstcase complexity optimal BW planning studied Chenoweth 6 Gupta Nau 1314 Selman 26 remains Very little known average time complexity optimal BW planning No results available average performance ratios nearoptimal planning Also exact time complexity near optimal BW planning carefully analysed 14 16 reporting respectively cubictime quadratictime upper bounds number blocks As consequence proper BW gold standard exists makes hard assess effectiveness approaches planning basis results reported literature For instance 12718 speciﬁc methods nearoptimal BW planning fruitfully encoded general 17 exhibits domainindependent techniques dramatically improve performance BW planning These facts interpreted showing systems effective domains like BW match best domainspeciﬁc ones time complexity solution quality As long little known behaviour BWspeciﬁc methods misinterpretation easy Only recently planning systems able deal blocks fact hardly enhanced reputation ﬁeld wider research community This largely gap ignorance BWspeciﬁc features general systems able exploit domain The papers Bacchus Kabanza 12 clearly attempting bridge gap greatly improves planner performance ability interpret experimental results Indeed precise understanding information relevant domain reasons given general technique performs domain adequately analysed possible know domain suitable testbed analysing merits technique Recent improvements notwithstanding performance general planners especially optimal BW problems remains far comparable domainspeciﬁc ones This indicates detailed examination structure BW problems likely reveal features improve planner performance experimental methodology 122 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 13 Contributions paper In paper undertake sustained investigation BW view ﬁlling gaps Much material presented compiled series conference papers 3132 technical reports 2730 written number years In Section 2 look BW giving expressions number BW states function number blocks showing use function generate random states uniform distribution A supply states essential experiments averagecase behaviour problem generating trivial previously addressed In Section 3 consider algorithms optimal nearoptimal BW planning We methods ﬁnding nearoptimal plans linear time closing complexity question problem We outline optimal solver capable dealing arbitrary problems 150 blocks The resulting programs offered reference point assessing effectiveness planning systems domain In Section 4 ﬁrst examine average performance algorithms terms speed importantly solution quality Having lineartime implementations means ﬁnd nearoptimal BW plans problems order million blocks matter seconds enabling consider larger problems previously possible We present evidence average performance ratios algorithms better worst case 2 approach 1 limit Since difference plans produced crudest algorithm optimal plans small claims produces suboptimal plans high quality interpreted carefully Using optimal algorithm turn discovering optimisation problems hard easy It emerges hard problems critically constrained range number towers initial goal states reasonably good predictor We conclude Section 4 reconsidering structure BW planning problems light experiments view determining approached domainindependent planning systems Finally discuss future BW testbed comparing planners object study relevance generalpurpose planning Naturally study artiﬁcial domains blocks present paper evidence learn 2 The states Blocks World 21 Deﬁnitions We shall ﬁrst enter deﬁnitions We assume ﬁnite set B blocks TABLE special member B Our favourite presentation BW takes primitive binary relation ON unary support function S picks block x block x Thus S partial function B nfTABLEg B injective possibly TABLE transitive closure irreﬂexive We J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 123 refer pair hB Si partstate identify state BW partstate S total function Clearly case speciﬁcation support function completely determines disposition blocks For partstate cid27 D hB Si b B deﬁne ONcid27 b iff Sa D b CLEARcid27 iff D TABLE 9b ONcid27 b ABOVEcid27 transitive closure ONcid27 ﬁnally POSITIONcid27 sequence ha VV POSITIONcid27 Sai Sa exists hai That position block sequence blocks We refer position clear block tower A tower grounded iff ends table Note state opposed mere partstate tower grounded 22 Number Blocks World states One ﬁrst questions encountering BW different states function number blocks Answering question turns useful appear ﬁrst glance For instance Schoppers uses estimate number states argue compactness universal BW plans 25 As example shall later derivation provides important insight generation random BW states At judge number people asked magic formula analytical deﬁnition published literature To knowledge algorithmic descriptions computation number states exact approximate ﬁgures small number blocks reported 1825 Instead merely counting number BW states given size shall fact consider slightly general problem We count number states extend partstate k grounded towers n ungrounded ones Let gn k As special case number BW states size n f n D gn 0 We deﬁnitions g recursive iterative uses The recursive deﬁnition g simple gives insight generation random states First g0 k D 1 k n D 0 tower grounded partstate state Now consider gn C 1 k To extend partstate ﬁrst ungrounded tower table n C k towers If goes table gives partstate n ungrounded towers k C1 grounded ones gn k C1 possible extensions Otherwise n C k ways placing n C k towers leaves partstate n ungrounded towers k grounded ones gn k possible extensions In sum g0 k D 1 gn C 1 k D gn k C 1 C n C kgn k Table 1 gives value gn k small n k Since value gn k produced values gx y hx yi triangle bounded vertical column hn ki diagonal going right hn ki Table 1 reminiscent Pascals triangle multiplication thrown It worth noting numbers rapidly big For instance f 30 D 197987401295571718915006598239796851 124 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 Table 1 The function g triangle g3 1 k n 0 1 2 3 4 5 6 7 8 9 0 1 1 3 13 73 501 4051 1 1 2 7 34 209 1546 13327 2 1 3 13 73 501 4051 3 1 4 21 136 1045 9276 4 1 5 31 229 1961 19081 5 1 6 43 358 3393 36046 37633 93289 207775 424051 37633 130922 394353 1047376 2501801 5470158 394353 1441729 4596553 12975561 32989969 76751233 4596553 17572114 58941091 175721140 472630861 1163391958 The iterative deﬁnition g intuitive forms better basis derive averagecase ﬁgures BW states Let decide going extend partstate putting n ungrounded towers table remaining n cid0 ways choosing towers For ﬁrst remaining towers There n cid0 towers n C k cid0 1 ways choosing tower going For second n C k cid0 2 ways C k ways So altogether n C k cid0 1Wi C k cid0 1W ways placing n cid0 towers Summing yields cid0 n cid1 gn k D nX iD0 cid18 cid19 n n C k cid0 1W C k cid0 1W Naturally deﬁnitions g proven equivalent 28 pp 56 The proof resembles derivation combinatorial interpretation binomial coefﬁcients binomial addition formula In fact legitimate ask values g correspond wellknown sequences numbers binomial coefﬁcients Stirling numbers like The answer nearly There exists simple expression g terms Laguerre polynomial 4 gn k D nWLkcid01 n cid01 advantage help known mathematics polynomials In 29 pp 2326 average number towers BW state size n tends p n 4 For overview polynomials 21 pp 7697 The Laguerre polynomial Lk P n iD0 nCkW nWiCkW cid0xi n cid1 cid0 nx deﬁned J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 125 The iterative version g suited derive simple expression number states exactly t towers generally number states exactly t towers extending state k grounded towers n ungrounded ones Let hn k t If k towers grounded exactly D t cid0 k towers table rest towers So sufﬁces omit sum iterative deﬁnition g replace t cid0 k hn k t D cid19 cid18 n t cid0 k n C k cid0 1W t cid0 1W t k 0 We indebted anonymous reviewer paper deﬁnition number states f require generalisation binary function g lends efﬁcient algorithms generating states Let cn number states n blocks given block nth clear Obviously c1 D 1 Now recursive deﬁnition suppose know f n cn consider adding block The states n C 1 blocks comprise extra block blocks state n blocks n cid1 f n extra block clear table f n extra block placed clear block state n blocks In case note n blocks extra clear cn states The extra block clear states ﬁrst n cid1 f n In sum f n C 1 D f n C n cid1 cn C n cid1 f n cn C 1 D f n C n cid1 cn Again difﬁcult generalise deﬁnition states states exactly t towers providing alternative h refrain going details generalisation follows 23 Random Blocks World states Armed g function f c generate uniformly distributed random BW states problems pairs random states h generate random states given number towers The particularly useful shall Section 4 difﬁculty optimal BW planning varies number towers Surprisingly papers mention experiments random BW problems underlying distribution left obscure 22 p 180 191523 Perhaps reason generating uniformly distributed random BW problems trivial appear Naïvely incorporating random number generator algorithm producing states work typically makes states probable factor exponential number blocks As result sample skewed experiments average case biased We invite skeptical reader try hand case n D 2 view generating possible states 126 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 probability 13 Most methods including random BW states generator included distribution UCPOP 5 probabilities 12 14 14 The UCPOP generator instance uses following method produce BW state size n 1 start table n blocks placed 2 repeat n blocks placed 2a select probability 1cid30 cid30 blocks placed 2b select probability 1cid28 C 1 table cid28 towers grounded stage place selected block So blocks example probability blocks single tower ascending order 14 blocks table 12 With n blocks probability blocks table 1nW blocks tower ascending order 12ncid01nW exponentially smaller It shown n average number towers state generated way tends So number towers affects difﬁculty problems averagecase experiments performance algorithms biased 2n p p The skew method comes fact placement table probability placement block That states extending given partstate proportion selected block table proportion given block Therefore key getting probabilities right use g function counting possible extensions partstate We build BW state size n follows 1 start table n ungrounded towers consisting single block 2 repeat towers grounded 2a arbitrarily select cid30 ungrounded towers 2b select table probability gcid30 cid0 1 cid28 C 1gcid30 cid28 towers grounded probability gcid30 cid0 1 cid28 gcid30 cid28 place selected ungrounded tower In fact hard work g directly numbers rapidly large It better work ratio Rcid30 cid28 D gcid30 cid0 1 cid28 C 1gcid30 cid0 1 cid28 probabilities types placements This fairly small real number cid30U 6 Elementary calculation shows R1 cid28 D 1 lying roughly range T1 cid28 p Rcid30 C 1 cid28 D Rcid30 cid28 cid30 C cid28 C Rcid30 cid28 C 1 cid30 cid0 1 C cid28 C Rcid30 cid28 value g need computed This method implemented BWSTATES program 7 27 BWSTATES ﬁrst calculates quadratic time values R relevant size problems generated stores quadratic space Once generating random state lineartime problem However space requirements impose limit order 5 httpwwwcswashingtoneduresearchprojectsaiwwwucpophtml 6 In limit cid30 larger cid28 converges p cid30 On hand cid28 larger cid30 limiting value 1 29 pp 2325 7 BWSTATES available httparpanueduaucid24jksbwstateshtml J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 127 Begin n ungrounded blocks cid30 D n table Repeat towers grounded Arbitrarily select ungrounded tower With probability ccid30f cid30 tower constitutes grounded tower Repeat given tower grounded Select table probability f cid30f cid30 C cid30ccid30 ungrounded towers equal probability given tower Decrement cid30 probability 1 cid0 ccid30f cid30 tower goes tower Select ungrounded towers equal probability given tower Decrement cid30 Fig 2 Algorithm generate random states c f functions 10000 blocks The alternative generating states precomputing storing R values limiting require time cubic number blocks The principles applied generate uniformly distributed states exactly t towers h function place g So step 2b reads select table probability hcid30 cid0 1 cid28 C 1 t hcid30 cid28 t towers probability hcid30 cid0 1 cid28 t hcid30 cid28 t place selected ungrounded tower Here calculations easier probability placement table simpliﬁes t cid0 cid28 cid30 placements cid30 C cid28 cid0 tcid30cid30 C cid28 cid0 1 So computed directly going ratio R generation state takes linear time number blocks Although g function makes easy explain skew random generators UCPOP 1995 release BWSTATES efﬁcient basis producing random states uniform distribution For certain experiments reported required supply uniformly distributed states million blocks g Fortunately c f functions lead naturally lineartime algorithm shown Fig 2 As case algorithm based g function pays precompute store ratios required case P cid30 D ccid30f cid30 cid30 n In fact P cid30 close p cid30 convenientsized real numbers easier work 1 f c directly The recursive calculation P easy P 1 D 1 P cid30 C 1 D cid30P cid30 C 1 cid30P cid30 C 1 C 1 What makes algorithm efﬁcient based g computing storing P takes linear resources instead quadratic ones required R 128 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 We leave topic random BW states We shall return Section 4 making empirical observations averagecase behaviour planning algorithms shall focus BW planning 3 Blocks World planning 31 Deﬁnitions We ﬁrst deﬁne classical notions problems 8 moves plans A BW planning problem B pair states hhB S1i hB S2ii In problem hI Gi I initial state G goal state Here consider problems completely speciﬁed goal states A state cid27 D hB Si pair blocks m D ha bi 2 BnfTABLEg b 2 B nfag CLEARcid27 CLEARcid27 b ONcid27 b The result m cid27 state RESm cid27 D hB S0i S0a D b S0x D Sx x 2 B nfTABLE ag A plan BW problem hI Gi ﬁnite sequence hm1 mpi moves I D G p D 0 m1 I hm2 mpi plan h RESm1 I G virtue deﬁnition A plan given problem optimal iff shorter plan problem In order discuss particular BW planning algorithms remainder paper need notions We block position I deﬁned earlier different position G misplaced hI Gi misplaced position Only misplaced blocks moved order solve problem Next ha bi constructive hI Gi iff position hRESha bi I Gi That iff position moved b Once block moved constructively need course solving problem If constructive possible given problem problem deadlocked In case misplaced block b1 block b2 moved constructive b1 possible Since number blocks ﬁnite sequence hb1 b2 eventually loop The concept deadlock adapted given 14 makes idea precise A deadlock BW problem hI Gi B nonempty subset B ordered hd1 dki way cid26 1 6 k NhIGidi diC1 NhIGidk d1 NhIGia b cid17 POSITIONI 6D POSITIONGa POSITIONI b 6D POSITIONGb 9x 6D TABLE ABOVEI b x ABOVEGa x Note possible single block constitute deadlock For instance problem Fig 1 deadlocked deadlocks fag fa dg To note NhIGia d taking block deﬁnition x D e NhIGid taking x D c NhIGia taking x D b 8 We follow 14 expression problem authors problem instance This cause confusion J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 129 It easy NhIGia b plan hI Gi ﬁrst time b moved precede time moved 9 A deadlock loop NhIGi relation block deadlock moved twice The ﬁrst block table break deadlocks risking introducing new ones This sets constraints sort plans need consider They consist exactly constructive nonconstructive table misplaced block There type break deadlocks In terms set blocks moved way hitting set deadlocks intersect deadlocks 10 In order produce optimal plan hitting set minimal size turns ﬁnding minimalsize hitting set notoriously NPhard 10 p 222 This subproblem makes optimal BW planning difﬁcult 14 32 Strategies nearoptimal BW planning On hand merely ﬁnding plan easy Unless start moving blocks position choose deliberately introduce new deadlocks easily produce plans twice long optimal Various strategies nearoptimal BW planning factor 2 described literature shall papers Gupta Nau sources 1314 However ﬁnd methods need clariﬁed time complexity carefully analysed We shall reformulate implemented run time linear number blocks US The ﬁrst simplest strategy shall consider dubbed US Unstack Stack 13 p 630 It amounts putting misplaced blocks table unstack phase building goal state constructive moves stack phase No block moved US misplaced block moved twice Every misplaced block moved optimal plan Hence total number moves US plan worst twice optimal GN1 Another algorithm usually better terms plan length US worse given pp 229230 14 We GN1 Gupta Nau It amounts loop executed broken entering case 1 1 If blocks position stop 2 Else constructive ha bi exists b 3 Else arbitrarily choose misplaced clear block table table 9 The case D b trivial If 6D b state immediately following clear tower containing x If b moved x initially x moved order clear b contradicting supposition 10 For problem example Fig 1 blocks g misplaced moved constructively In addition deadlocks fa dg fag broken achieved moving table 130 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 Compared US GN1 nonconstructively moves block table moved constructively This avoids moving twice GN2 Some remarks 1314 suggest reading details achieved This uses concept deadlock We GN2 GN1 misplaced clear block moved table chosen completely arbitrarily way break deadlock That clause 3 reads 3 Else arbitrarily choose clear block deadlock table Gupta Nau 14 p 229 step 7 algorithm deadlocked problem misplaced clear block deadlock If true GN1 GN2 identical It false seen example Fig 1 Block f deadlock chosen table GN1 GN2 It possible GN1 produce shorter plan GN2 produce optimal plan given case average GN2 performs better completely wastes nonconstructive failing break deadlock In order GN2 complete deadlocked problem clear block deadlock In fact prove stronger result deadlocked problem exists deadlock consisting entirely clear blocks We sketch proof makes use notion cid1 sequence needed implementing GN2 Let cid27 D hB Si state occurs attempt solve problem goal state G D hB SGi suppose problem cid25 D hcid27 Gi deadlocked Let b misplaced clear cid27 Consider POSITIONGb sequence blocks G lead b table Let c ﬁrst highest block sequence position cid27 c table SGb In goal state b block b c Let block d What need order advance constructive b d c This immediately possible constructive cid27 c clear d clear If c clear blocks starting tower contains c cid27 If c clear clear block d cid27 This function cid14cid25 deﬁned cid14cid25 b D x cid26 CLEARcid27 x ABOVEcid27 x d ABOVEcid27 x c CLEARcid27 c CLEARcid27 c If b position clear SGb position clear let cid14cid25 b undeﬁned Now let cid1cid25 b sequence blocks obtained b chasing function cid14cid25 cid26 cid1cid25 b D hb VV cid1cid25 cid14cid25 bi hbi cid14cid25 b exists The point construction cid14cid25 b exists CLEARcid27 cid14cid25 b Ncid25 b cid14cid25 b To holds note c d cid14cid25 b cid27 b goal Now misplaced clear b cid1cid25 b ﬁnite constructive cid27 block cid1cid25 b inﬁnite loops loop J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 131 deadlock consisting clear blocks This loop need contain b course Fig 1 shows example cid1cid25 d hd Our suggestion way implementing GN2 replace original clause 3 3 Else arbitrarily choose misplaced clear block table compute cid1 sequence loops detect loop x cid1cid25 cid14cid25 x occurs earlier cid1cid25 x table It worth noting GN2 pure GN2 given break cid1 sequence deadlock arbitrary deadlock So deadlocked blocks d Fig 1 chosen table loop cid1 sequence This appears improve averagecase behaviour investigated matter We implement US GN1 GN2 run time linear number n blocks This improves known complexity algorithms The original 14 mention bound better On3 nearoptimal BW planning On2 implementations described authors 16 33 Lineartime algorithm US The key making US lineartime algorithm ﬁnd way compute blocks position On execute computation course problem solution We means combination recursion iteration Fig 3 The US algorithm 132 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 shown Fig 3 The algorithm makes use variables associated block b Clearb InPositionb Examinedb Sib Sgb True iff b clear current state True iff b position True iff InPositionb determined Block currently b Block b goal INPOS called twice particular block During initialization b parameter iteration blocks recursively block b Hence number calls INPOS bounded 2n Similar considerations apply recursive STACK UNSTACK procedures The stored information updated constant time MOVE 34 Lineartime algorithm GN1 For GN1 need recognise constructive moves tower tower table To achieve add structure problem representation At given time block status It 1 ready constructively That misplaced clear target position clear 2 stuck tower That misplaced clear table unable constructively target misplaced clear 3 More variables associated block b Statusb records status READY STUCK OTHER block Pib Pgb denote blocks currently goal Evidently initialising setting updating upset On running time To possible select moves constant time blocks status READY STUCK organised doubly linked lists ReadyList StuckList list containing blocks status Inserting block list deleting list constanttime operations familiar The block head ReadyList list case block head StuckList If lists goal reached When block moves changes status position Certain blocks change status result When exist block currently Sia block goal Pga block goal block currently PgSia Those possible changes constant number 4 Therefore number deleteinsert list operations blocks worst linear number moves plan Nothing stands way lineartime implementation GN1 shown Fig 4 11 11 The function INPOS US implementation repeated Fig 4 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 133 Fig 4 The GN1 algorithm 35 Lineartime algorithm GN2 GN2 different matter To implement GN2 cid1 sequences necessary compute cid14cid25 b blocks b achieve linear time way constant time way limit number cid14 calculations constant number block On face easy To ﬁnd cid14cid25 b necessary know highest block position goal tower b know clear block given These items information change moves time item changes block changes On blocks tower changes propagated constant time Moreover deadlock 134 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 Fig 5 Asking concierge Who lives tower broken new cid1 sequence computed blocks moved computed changing cid14 Computing cid1 sequence appears irreducibly On problem On sequences needed appears require GN2 On2 cid14cid25 b constant time The ﬁrst trick begins address difﬁculties note changes tower blocks thing change block table tower If block moves tower longer exists We block tower concierge tower Now want know lives tower ask concierge When block comes goes tower concierge need informed constant time block knows concierge constanttime route given block information block clear Fig 5 Not towers initial current state concierges towers goal state These track block tower highest position Additional variables associated block b denote initial goal concierges Cib Cgb In case b concierge variables denoting clear block Topb highest block Hinb position goal tower Through concierges constanttime route b c d required deﬁne cid14cid25 b The procedure initialising additional variables closely analogous determining blocks position executed linear time reason Updating takes constant time Next key managing cid1 sequences cid14 change Ncid25 relation indestructible moving blocks involved That Nhcid27Gix y Fig 6 How break deadlock J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 135 Fig 7 The GN2 algorithm 136 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 relationship persists sense future states cid18 Nhcid18Gix y x y moved getting cid27 cid18 Moreover noted Ncid25 x y x constructively y moved Now let cid12 D hb1 bki non looping sequence clear blocks stuck towers linked successor relation Ncid25 At point bk cease stuck ready block cid12 change status bk actually moves Thus cid12 sequence dwindle null moves remains single sequenceit falls pieces happen block middle changed statusand Ncid25 indestructible cid12 remains linked Ncid25 For algorithm maintain sequence cid12 constructed parts cid1 sequences follows Initially cid12 null If problem deadlocked ﬁrst cid12 null set consist block head StuckList extended adding cid14cid25 bk end This repeatedly sequence threatens loop cid14cid25 block bm cid12 At point bm chosen break deadlock It important choose cid14cid25 bm purpose result breaking cid12 pieces Fig 6 Each addition cid12 takes constant time given block added sequence Therefore maintenance cid12 sequence requires linear time This completes description principles underlying algorithm shown Fig 7 12 36 Algorithm optimal BlocksWorld planning Some experiments Section 4 require ability generate optimal BW plans For instance order gather experimental results concerning average performance ratios nearoptimal algorithms need know optimal plan lengths A good BWspeciﬁc optimal planning method needed determine hard optimal BW planning idea size average BW problems regarded truly challenging Moreover prerequisite study distribution hard easy instances problems given size identiﬁcation pattern distribution investigation relationship hard problems average ones Unfortunately literature lack algorithm suitable purposes The nondeterministic algorithm given 14 useful complexity analyses practical method papers reporting experiments BW use domain independent planner generating optimal plans drastically limit size problems considered We shall method Recall Section 31 key optimal BW planning ﬁnding hitting set minimal cardinality set deadlocks problem At heart algorithm backtracking search hitting set One complication know outset sets blocks constitute deadlocks know efﬁcient method enumerating deadlocks fact know hit ﬁnally produce plan 12 The functions INPOS STATUS STAT implementation GN1 repeated Fig 7 The cid12 sequence implemented stack J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 137 Our algorithm PERFECT overcomes problem follows It constructs set K known deadlocks Initially singleton deadlocks known deadlocks computed needed At iteration ﬁnds minimal size hitting set H deadlocks currently K tests discover hits deadlocks problem If constitutes solution algorithm halts If deadlock disjoint H added K initialisation K ffbg V fbg deadlockg main loop Repeat plan returned Generate H minimal size hitting set K TESTH H solves problem ﬁnd deadlock D D H D return PLANH K K fDg This requires ﬁve procedures solve subproblems 1 The set singleton deadlocks initialise K 2 A minimal size hitting set H K generated 3 H tested hits deadlocks problem 4 A deadlock D disjoint H 5 H produce plan Of 2 NPcomplete subproblem detailed note solved backtracking search requiring exponential time worst case It speeded somewhat incorporating search heuristics especially germane present paper The sub problems tractable corresponding procedures use lineartime implementation nearoptimal BW planner GN1 It easy modify GN1 giving set H blocks parameter requiring clause 3 GN1 algorithm blocks H break deadlocks This results plan H hitting set deadlocks problem failure ﬁnd plan That yields lineartime decision procedure H hitting set We GN1 modiﬁed GN1H Evidently GN1H sufﬁces 3 5 GN1H achieve 1 It clear GN1HB n fbg results plan fbg singleton deadlock Therefore running GN1HB n fbg block b 2 B turn obtain quadratic time set singleton deadlocks 13 13 This efﬁcient way detecting singleton deadlocksthe experiments singleton deadlocks reported Appendix A use better onebut small problems optimal planning feasible adequate 138 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 A similar technique sufﬁces 4 Suppose H hitting set deadlocks problem Then proceed follows b 2 B n TABLE TESTH fbg H fbg hitting set H H fbg Obviously end quadratictime procedure H nonhitting set maximal sense proper superset hitting set Let D complement respect B n fTABLEg D deadlock contains deadlock H hitting set contains H maximal Our lineartime implementation GN1 serves decision procedure potential hitting sets plan generator hitting set It enables optimal procedure cope 100 blocks reasonable time seen Fig 9 4 Experimental observations Using random BW problem generator algorithms able number interesting observations structure large BW problems performance time average solution quality BWspeciﬁc planning methods Unsurprisingly nearoptimal planners fast They solve problems million blocks matter seconds More interestingly ﬁnd plans produce closer optimal expected On basis experimental results conjectured average performance ratios tend limit 1 case despite NPhardness optimal planning possible linear time ﬁnd plans average proportion unnecessary moves vanishingly small By close examination random BW problems identify structural features planning systems use domain Proving optimality plans course complicated Our experiments clear easyhardeasy distribution optimisation problems numbers towers initial goal states order parameter This related tradeoff number deadlocks size In readability details data experiments relegated Appendix A 41 Time performances We start average runtimes nearoptimal algorithms function number n blocks As clear experiments Section 42 signiﬁcant difference average worst cases runtimes algorithms As shown Fig 8 time programs linear number blocks There little difference GN1 US Since aspects computation closely related plan length GN1 outperforms US produces J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 139 Fig 8 Average runtimes secs function n nearoptimal algorithms Fig 9 Median runtime secs function n optimal algorithm shorter plans Naturally wants convert BW state program speeds important The point experiment conﬁrm empirically theoretical claims linear execution time attained domainindependent planners orders magnitude away BWspeciﬁc methods 14 In Fig 9 measured runtime optimal algorithm As apparent experiments Subsection 432 average case similar worst case exponential n The main purpose experiment decide number blocks expect use experiments completed time available sacriﬁcing information gleaned relatively large examples We ﬁnd reasonable n D 150 14 To best knowledge current state art represented TALPLANNER 719 variant TLPLAN 2 solves BW problems nearoptimally quadratic time 500 blocks problems second 140 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 Fig 10 Problem leading worst optimal plan length Fig 11 Average plan length function n number movesn size average problem orders magnitude harder considered domainindependent setting 15 42 Plan length solution quality After performance time algorithms look performance solution quality The length plan produced nearoptimal algorithms optimal plan length 2n cid0 2 worst case As seen Fig 10 possible block table constitute singleton deadlock twice The average length plan produced nearoptimal algorithms approaches worst case closely observed graph Fig 11 As expected US gives longest plans average GN2 shortest large numbers blocks makes little difference algorithm In particular evident graphs algorithms close average plan lengths limit The immediate questions raised present results algorithms converge average plan length proportion n 15 Neither TLPLAN 2 SATPLAN 18 copes random optimisation problems 20 blocks J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 141 limiting ﬁgure 2n Positive answers questions strongly suggested dataindeed obviousbut obviousness proof The theoretical average length investigation appear easy prove p plans produced baby algorithm converges 2n cid0 n needed nontrivial mathematics involving complex analysis theory Laguerre polynomials 29 pp 2326 This algorithm nearoptimal simply puts blocks misplaced table building goal position The absolute performance ratio nearoptimal algorithms 2 limit The worstcase problem shown Fig 12 The deadlocks pairs fa cig 1 6 6 k optimal plan length k C 2 consists breaking deadlocks moving table moving ci constructively US ﬁrst ci table In worst case GN1 GN2 ci table moving constructively giving plan length 2k C 1 performance ratio 2k C 1k C 2 tends quickly 2 Fig 13 shows average performance ratios This graph contains real surprise average performance US degrade monotonically turns n D 50 begins improve The explanation plan lengths US quickly approach ceiling 2n point optimal plan lengths increasing Fig 12 Problem leading performance ratios 2 Fig 13 Average performance ratio function n plan lengthoptimal plan length 142 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 quickly US ones nearly bad It clear ﬁgure Fig 11 nearoptimal algorithms exhibit similar curves possible observe length optimal plans high values n One result readily available graphs upper bound 123 average performance ratios However Figs 11 13 suggest limiting value rough upper bound Our open question following experiment optimal plans tend length 2n limit If nearoptimal algorithms baby algorithm perfect average performance ratio 1 limit A positive answer implied number singleton deadlocks tended n investigating ﬁgure experimentally appears 04n experiments Section 431 43 The structure Blocks World planning problems According experiments gap time performance domain speciﬁc domainindependent methods huge optimal nearoptimal cases Moreover domainspeciﬁc methods achieve higher solution quality Why What structural properties domain speciﬁc solvers generic planners missing 431 Composition average BW problem As preliminary step examine composition average BW problem Some blocks misplaced Then misplaced blocks occur deadlocks Finally deadlocked blocks constitute singleton deadlocks obviously twice We blocks category live blocks The nontrivial BW planning problem decide live blocks twice This demonstrated Fig 14 represents average hardness optimal BW planning problems n D 100 blocks function number live blocks problems The positive correlation obvious Quantitatively proportion blocks category The ﬁrst observation n blocks misplaced Fig 15 shows distribution problems given number misplaced blocks This obtained random problems n D 1000 blocks ﬁnd distribution vary signiﬁcantly n similar results obtained 20 blocks In particular probability blocks misplaced converge quickly ecid01 16 Instances 5 blocks position extremely rare problems 10000 blocks Except pathological cases imposes lower bound roughly n plan length Clearly block starts ﬁnishes table involved n blocks table average state n deadlockfree blocks average This gives upper bound deadlock As noted 2 p p 16 An analytical expression probability function n given 28 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 143 Fig 14 Median hardness function number live blocks Fig 15 Probability exactly m blocks misplaced m D n n cid0 6 p 2n cid0 n average plan length Experimentally Fig 16 ﬁnd blocks table deadlockfree ones average 2 deadlockfree It follows upper bound signiﬁcantly improved reasoning blocks deadlocks need planner spend lot time reasoning On hand reasoning special kinds deadlocks valuable instance GN2 gains concentrating cid1 sequence deadlocks Most importantly observe Fig 17 average nearly 40 blocks singleton deadlocks This limiting ﬁgure approached closely problems n D 100 blocks In sum optimal plan length 14n 2n cid0 n average 30 moves nontrivial p 144 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 Fig 16 Average number deadlockfree blocks table function n Fig 17 Proportion blocks constituting singleton deadlocks function n 432 Hard easy BW problems The question conditions difﬁcult plan nontrivial moves optimal waythat hard ﬁnd minimal size hitting set deadlocks Well easy deadlocks easy deadlocks small Unfortunately conditions tend work For deadlocks exist N relation sparse typically occurs short towers Small deadlocks occur N relation loops easily happens blocks tall towers The hard problems squeezed underconstrained area towers overconstrained area This analysis conﬁrmed Fig 18 represents median hardness number times PERFECT backtracks random problems 100 blocks parameters number towers initially goal It seen optimal J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 145 Fig 18 Median hardness number towers initial goal states planning easy wide range parameters problems size hard region conﬁned 8 18 towers However important note random problems fall hard region random problems size cluster strongly 100 D 10 towers So average BW problems reasonably hard Random problems hardest For instance problems size produced UCPOP generator cluster 200 D 14 towers harder p p 433 What relevant features In light begin answer questions head section At observe 1 As noted example 1 crucial planners classify blocks position misplaced attempting carry long chains reasoning purely terms ON CLEAR Being able recognise constructive moves opportunity exists sufﬁces half average plan 2 More half remainder moves break singleton deadlocks Being able recognise moves sufﬁcient allow planner come close completing plans search backtracking 3 The fact nonconstructive moves table easily coded noted Kautz Selman 18 greatly reduces set possible plans search In Kautz Selmans terminology safe simplifying assumption based completeness theorem principle automatically 146 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 Once constructive moves identiﬁed blocks singleton deadlocks removed consideration remains problem ﬁnding hitting set remaining deadlocks For nearoptimal BW planning reasoning required choice worst yields plan close optimal average For optimal BW planning necessary generate minimal size hitting set problem speciﬁc ﬁeld planning best approached techniques available shelf In case features constitute structure expect domainindependent planners exploit deal adequately domain 434 Existing benchmark instances Another question addressed following observations representativity existing benchmark instances bw_largea bw_larged commonly discussing effectiveness SATbased planners 81112 1618 As seen Fig 19 ﬁrst obvious feature problems larger ones built smallest progressively adding blocks In bw_largea deadlocks GN1 solves optimally In deadlocks case obvious putting block 11 table sufﬁcient break constructive moves sufﬁce Hence reasoning cases essentially hardly challenging Fig 19 Problems bw_largea bw_larged 17 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 147 Blocks Number Singleton Optimal Time solve Problem position towers deadlocks planlength optimally sec 1000 1001 2000 2001 3000 3001 4000 4001 5000 5001 1 1 1 2 1 2 1 2 1 1 3 C 5 2 C 5 10 C 9 9 C 6 5 C 2 5 C 6 4 C 4 8 C 5 5 C 6 4 C 5 79 79 129 135 278 264 368 325 462 461 182 182 348 346 577 567 773 740 963 969 004 005 292 059 021 047 094 521 083 184 Fig 20 Problems probblocks100 probblocks500 AIPS2000 A obvious important feature unlike average problem size nondeadlocked blocks singleton deadlocks This gives unusually short plans average plan length 19block problems 245 bw_larged requires 18 moves Comparisons based problems tend favour planners prefer short plans SATbased planners instance This feature highly relevant use benchmark Another benchmark set calling comment planning competition AIPS2000 particular additional problems hand tailored systems track Fig 20 These 100 500 blocks For size small numbers towers initial goal states leading abnormally large proportions selfdeadlocked blocks 90 cases As consequence optimal plans long extremely easy ﬁnd PERFECT ﬁnds random problems 160 blocks challenging solves instantly shown column Fig 20 Problem 3000 solved backtracking In AIPS competition optimality required extreme skew sample invalidate results However noted easy solve optimally optimal plans long problems reveal little quality solutions produced competing suboptimal planners 5 Conclusion What future Blocks World BW traditionally Hello World planning trivial instance illustrate action notation represents postconditions execution failures handled To practice objection save example boring eventually However pains point use benchmark satisfactory We believe 148 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 future great improvement past Following investigations reported paper conclude expectations future recommendations achieved 51 Comparing planners It clear planning systems worth comparing domain soon achieve quadratictime performancesome 17or linear time compared basis speed efﬁciency coding So think comparing time performances solving BW problems nearoptimally particularly useful This probably according reports AIPS 2000 competition comment heard conference Blocks World longer interesting problem benchmark 17 We expect worthwhile comparisons basis plan length anytime planners basis rate improvement It important bear mind difference poor plans produced US reasonably good ones GN2 large proportion moves apparently small improvements solution quality represent signiﬁcant advances planning technology Hence agree nonoptimal BW planning interesting benchmark regards solution time strongly disagree view longer worthwhile benchmark We believe important facet planning BW prove suitable testbed ease formalisms systems allow domainspeciﬁc control knowledge speciﬁed automatically learned For example effect TLPLANs goal control rule 3 2 p 11 disallow plan good US plan moves produced subset US moves This trigger rule noted 1 p 165 yields implementation GN1 The obvious step easily restrictive conditions encoded instance disallow nonGN2 moves recognise singleton deadlocks 52 Using right problem instances In making comparisons care taken choice problem instances For experiments optimal plans sought best use instances likely hard average region peak Fig 18 example However important careful tested The difﬁculty hardest instances dominated ﬁnding minimal cardinality hitting sets planners ability seen important thing assess Hence example 100 block problems compare optimal planners valuable concentrate moderately hard instances initial goal states 10 towers 20 hardest ones 14 This weight aspects reasoning 17 httpwwwidaliuscextwitasachievaipscompagehtml J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 149 For experiments optimality issue clearly good use uniformly distributed random instances order obtain meaningful results average behaviour In case point seeking especially hard instances purpose signiﬁcant difference difﬁculty plan length average problems hardest 53 Beyond experiments BWs place experimentation benchmark need exhaust future contribution Like Traveling Salesman 20 constitute basis investigating problems practical The abstract problem BW instance following sets actions producing goal conditions constructive actions consistently ordered meet preconditions deadlocks occur To resolve deadlock number additional actions introduced nonconstructive actions Since deadlocks independent need reason resolve additional actions possible This core problem present realistic situations For instance moving blocks different moving exciting objects packages trucks planes Again version BW table limited capacity captures essence container loading problem problem crucial efﬁciency freight operations 2433 18 Therefore ﬁnding right generalisations strategies effective BW appears promising approach sophisticated problems There Existing classes tractable planning problems capture CUS 4 restriction STRIPS ground properties domains like BW In SAS literals operators positive preconditions postcondition 5 planning tractable optimal planning nearoptimal planning 26 19 Yet near optimal planning tractable certain domains like BW sophisticated encoded classes 20 The fact identiﬁcation tractable subclasses C planning originated careful examination toy problem sequential control SAS 3 p 29 suggests BW good candidate identifying similar way new class planning problems nearoptimal planning tractable 54 Summary We present paper cleared way effective use BW benchmark Firstly methods generating random instances meaningful distributions enable systematic experiments performed Secondly presenting 18 At minimum classical version considered paper table capacity unlimited useful relaxation limitedcapacity version An optimal plan yields underestimate plan length admissible heuristic C 19 The intractability nearoptimal planning SAS ity result mentioned subclass STRIPS 26 inclusion subclass SAS 20 BW planning approximable constant 1 constant number nonconstructive actions sufﬁces resolve deadlocks involving given constructive action 2 nonconstructive actions introduced way create new deadlocks US follows directly corresponding intractabil US C 150 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 lineartime algorithms nearoptimal BW planning factor 2 closed question time complexity These algorithms optimal solver provide reference point future experiments Thirdly empirically established average plan quality nearoptimal solution methods setting parameters evaluation suboptimal BW planners Finally careful experimentation identiﬁed distribution hard easy instances isolated features relevant efﬁcient planning domain While observations results aimed enhancing understanding BW needed assessment purposes understanding prerequisite larger project extending insights gained BW wider class domains We expect investigations contribute project hope paper seen merely report stack blocks fast Acknowledgements This paper beneﬁted discussions number years people including Philippe Chartier Joachim Herztberg Eric Jacopin René Quiniou Bart Selman Kerry Taylor Toby Walsh We thankful anonymous reviewers papers topic especially reviewer present paper alternative deﬁnition number states Section 22 Appendix A Experimental data This appendix details setup experiments Section 4 Note 2dimensional graphs section series lines joining data points Time Performances Figs 8 9 The programs written C compiled gcc optimisation level O2 Times obtained C library function times The experiments run Sun Enterprise 450 Solaris The processors 2Gb memory For nearoptimal algorithms 100 random problems generated size n multiple 10000 n 1 million For optimal algorithm 100 random problems size n multiple 5 n D 150 In optimal case median mean plotted distribution times expected heavytailed observed mean depends sample size Plan Length Plan Quality Figs 11 13 For experiments plan length 100 10000 random BW problems 55 sizes considered n 1 million blocks forming test set 250000 problems More speciﬁcally generated 10000 problems size n D 10 size multiple 10 n D 100 5000 problems size n multiple 100 n D 200 n D 1000 1000 problems size n multiple 1000 n D 2000 n D 10000 500 problems size n multiple 10000 n D 20000 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 151 n D 100000 100 problems size n multiple 100000 n D 200000 n D 1000000 For experiments plan quality 10000 problems size n D 50 3000 problems size n multiple 10 n D 60 n D 140 Hardness Live Blocks Fig 14 The ﬁgure produced solving optimally 50000 random problems n D 100 blocks recording number times PERFECT backtracks number live blocks The curve shows median hardness cases number live blocks The live blocks involved deadlocks singletons A block x involved deadlock iff N cid3x x N cid3 transitive closure N relation So set deadlocked blocks computed On3 worst time taken calculate N transitive closure The singleton deadlocks computed On2 procedure described Section 36 removed set Misplaced Blocks Fig 15 The ﬁgure produced analysing 10000 random problems size n D 1000 blocks We conducted experiment 1000 problems sizes n D20 100 10000 respectively obtained similar ﬁgures DeadlockFree Blocks Fig 16 The ﬁgure produced 10000 random problems size n D 50 We conducted experiment 100 problems size n multiple 50 n D 50 n D 400 This conﬁrmed average number deadlockfree blocks table exceed 2 tends decrease slowly n 187 n D 400 The deadlockfree blocks computed On3 indicated live blocks Singleton Deadlocks Fig 17 The data set experiment consisted 1000 random problems n blocks n 6 10 following values n 15 20 25 30 35 40 50 60 70 80 90 100 150 200 250 300 350 400 500 600 700 800 900 1000 1500 2000 2500 3000 3500 4000 5000 6000 7000 8000 9000 10000 15000 20000 25000 30000 35000 40000 50000 60000 70000 80000 90000 100000 For problem set n 2000 blocks selected 1000 blocks selected random Each selected block tested block initially goal For block selected computation takes time linear number blocks initially afford consider problems size n D 105 blocks instead n D 106 experiment plan length Hardness Towers Fig 18 For conﬁguration number towers initially goal 1 50 1000 random problems n D 100 blocks Since graph symmetric diagonal half cases needed considered Even altogether million problems 100 blocks solved optimally PERFECT number backtracks recorded Experiments smaller n showed easyhardeasy pattern location peak increasing n 30 152 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 References 1 F Bacchus F Kabanza Using temporal logic control search forward chaining planner Proc EWSP95 Assisi Italy 1995 pp 157169 2 F Bacchus F Kabanza Using temporal logic express search control knowledge planning Artiﬁcial Intelligence 116 12 2000 123191 3 C Bäckström Five years tractable planning Proc EWSP95 Assisi Italy 1995 pp 1933 4 C Bäckström B Nebel Complexity results SAS planning Computational Intelligence 11 4 1995 5 T Bylander The computational complexity propositional STRIPS planning Artiﬁcial Intelligence 69 C 1994 165204 6 SV Chenoweth On NPhardness Blocks World Proc AAAI91 Anaheim CA 1991 pp 623 628 7 P Doherty J Kvarnström TALplanner An empirical investigation temporal logicbased forward chaining planner Proc 6th International Workshop Temporal Representation Reasoning TIME 99 1999 8 MD Ernst TD Millstein DS Weld Automatic SATcompilation planning problems Proc IJCAI 99 Stockholm Sweden 1999 pp 11691176 9 TA Estlin RJ Mooney Hybrid learning search control rules planspace planners Proc EWSP 95 Assisi Italy 1995 pp 145156 10 MR Garey DS Johnson Computers Intractability A Guide Theory NPCompleteness Freeman San Francisco CA 1979 11 A Gerevini L Schubert Inferring state constraints domainindependent planning Proc AAAI98 Madison WI 1998 pp 905912 12 E Giunchiglia A Massarotto R Sebastiani Act rest follow Exploiting determinism planning satisﬁability Proc AAAI98 Madison WI 1998 pp 948953 13 N Gupta DS Nau Complexity results Blocks World planning Proc AAAI91 Anaheim CA 1991 pp 629633 14 N Gupta DS Nau On complexity Blocks World planning Artiﬁcial Intelligence 56 1992 223254 15 S Kambhampati B Srivastava Universal classical planner An algorithm unifying statespace plan space planning Proc EWSP95 Assisi Italy 1995 pp 8194 16 H Kautz B Selman Planning satisﬁability Proc ECAI92 Vienna Austria 1992 pp 359363 17 H Kautz B Selman Pushing envelope Planning propositional logic stochastic search Proc AAAI96 Portland OR 1996 pp 11941201 18 H Kautz B Selman The role domainspeciﬁc knowledge planning satisﬁability framework Proc AIPS98 1998 pp 181189 19 J Kvarnström P Doherty P Haslum Extending TALplanner concurrency resources Proc ECAI2000 2000 pp 501505 20 EL Lawler JK Lenstra AHG Rinnooy Kan DB Shmoys The Traveling Salesman Problem Wiley Chichester 1992 21 NN Lebedev Special Functions Their Applications Dover Publications New York 1972 22 S Minton Learning effective search control knowledge An explanationbased approach PhD Thesis CarnegieMellon University Pittsburgh PA 1988 23 Y Qu S Kambhampati Learning search control rules planspace planners Factors affecting performance Proc EWSP95 Assisi Italy 1995 pp 133144 24 AE Rizzoli LM Gambardella M Zaffalon M Mastrolilli Simulation evaluation optimised operations policies container terminal Proc HMS99 Maritime Industrial Logistics Modelling Simulation Genoa Italy 1999 25 MJ Schoppers Estimating reaction plan size Proc AAAI94 Seattle WA 1994 pp 12381244 26 B Selman Nearoptimal plans tractability reactivity Proc Internat Conference Principles Knowledge Representation Reasoning KR94 Bonn Germany 1994 pp 521529 27 J Slaney Generating random states blocks world Technical Report TRARP1895 Automated Reasoning Project Australian National University Canberra 1995 28 J Slaney S Thiébaux Adventures blocks world Technical Report TRARP794 Australian National University Canberra 1994 J Slaney S Thiébaux Artiﬁcial Intelligence 125 2001 119153 153 29 J Slaney S Thiébaux Blocks World tamed Ten thousand blocks second Technical Report TRARP1795 Automated Reasoning Project Australian National University Canberra 1995 30 J Slaney S Thiébaux How best things things Technical Report TRARP696 Automated Reasoning Project Australian National University Canberra 1996 31 J Slaney S Thiébaux Linear time nearoptimal planning Blocks World Proc AAAI96 Portland OR 1996 pp 12081214 32 J Slaney S Thiébaux On hardness decision optimisation problems Proc ECAI98 Brighton England 1998 pp 244248 33 T Slavin Virtual port New Scientist June 1996 pp 4043