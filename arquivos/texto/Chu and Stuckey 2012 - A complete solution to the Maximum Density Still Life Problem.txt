Artiﬁcial Intelligence 184185 2012 116 Contents lists available SciVerse ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint A complete solution Maximum Density Still Life Problem Geoffrey Chu Peter J Stuckey NICTA Victoria Laboratory Department Computing Information Systems University Melbourne Australia r t c l e n f o b s t r c t Article history Received 17 August 2011 Received revised form 8 November 2011 Accepted 8 February 2012 Available online 10 February 2012 Keywords Combinatorial optimization Search Constraint programming Dynamic programming 1 Introduction The Maximum Density Still Life Problem CSPLib prob032 ﬁnd maximum number live cells ﬁt n n region inﬁnite board board stable rules Conways Game Life It considered diﬃcult problem raw search space O 2n2 Previous state art methods solve n 20 We powerful reformulation problem minimizing wastage instead maximizing number live cells This reformulation allows compute strong upper bounds number live cells dramatically reduces search space It gives signiﬁcant insights nature problem By combining insights powerful techniques remodeling lazy clause generation bounded dynamic programming relaxations custom search able solve Maximum Density Still Life Problem n This possible Maximum Density Still Life Problem fact behaved mathematically suﬃciently large n n 200 large instances solved exist ways construct provably optimal solutions n ﬁnite set base solutions Thus Maximum Density Still Life Problem closed form solution require exponential time solve 2012 Elsevier BV All rights reserved The Game Life invented John Horton Conway played inﬁnite board square cells The game takes place discrete time steps Each cell c board alive dead time period The livedead state cell c time t 1 denoted statec t 1 obtained number l live neighbors c time t statec t follows statec t 1 l 2 dead Death isolation l 2 statec t Stable condition l 3 alive Birth condition l 3 dead Death overcrowding The board said life time t stable rules identical t 1 For example board life Given ﬁnite n n region cells outside dead Maximum Density Still Life Problem compute maximum density live cells appear n n region life equivalently maximum number live cells appear n n region This paper includes signiﬁcantly extends earlier work Chu et al 2009 1 Corresponding author Email address peterstuckeynictacomau PJ Stuckey 00043702 matter 2012 Elsevier BV All rights reserved doi101016jartint201202001 2 G Chu PJ Stuckey Artiﬁcial Intelligence 184185 2012 116 The raw search space Still Life Problem size O 2n2 extremely diﬃcult small values n Previous search methods integer programming IP 2 constraint programming CP 3 solve n 9 CPIP hybrid method symmetry breaking 3 solve n 15 An attempt bucket elimination 4 reduced time complexity O n223n increased space complexity O n22n This method solve n 14 ran memory A subsequent improvement combined bucket elimination search 5 memory able solve n 20 In paper combine mathematical insights Still Life Problem powerful search techniques completely solve problem n This possible Still Life Problem behaved mathemat ically suﬃciently large n n 200 The overall solution plan parts 1 use complete search model propagates strongly solve problem small n n cid2 50 2 use bounded dynamic programming relaxation problem prove closed form upper bound live cells medium large n n 50 3 use custom search look special form solutions prove lower bounds live cells medium n 50 n cid2 200 4 look special form periodic solutions tiled construct arbitrarily large solutions prove lower bounds live cells large n n 200 The lower upper bounds proved parts 2 3 4 coincide optimums n Each parts require mathematical insights problem appropriate application search techniques We brief overview Part 1 In Section 2 new insightful proof maximum density live cells inﬁnite case n 2 The proof based counting wastage Wastage calculated looking 3 3 pattern seeing 1 space wasted ﬁtting live cells local area This proof allows reformulate Maximum Density Still Life Problem minimizing wastage maximizing number live cells The new model gives tight lower bounds wastage dramatically increases pruning strength model In Section 3 model coupled simple lookahead allows Lazy Clause Generation 6 solver solve problem n 50 complete search Part 2 In Section 4 conjecture suﬃciently large n wastage forced occur life straints forced constraints near edge n n region That boundary conditions cause suboptimality compared optimal density 1 2 inﬁnite case If conjecture holds possible good optimal lower bound wastage upper bound live cells simply relaxing Still Life Problem boundary solving ignore constraints ﬁrst k rows edge n n region small k This relaxed problem interesting property pathwidth constraint graph O k instead O n original There exist techniques solving low pathwidth problems reduce complexity O 2nk O n22k caching 7 nogood learning 68 dynamic programming 9 variable elimination 4 In Section 5 use bounded dynamic programming 10 solve boundary relaxation For ﬁxed small k relaxed problems solved O n time Furthermore translational symmetry problem solve boundary relaxation n induction examining ﬁnite number base cases Thus derive closed form expression gives tight upper bound number live cells Part 3 In Section 6 conjecture suﬃciently large n exist optimal solutions following form wastage exists 4 4 corners board row edge board Based conjecture search special form solutions variant limited discrepancy search dynamic relaxations lookahead Such search ﬁnd optimal solutions n 200 We know solution optimal number live cells solution coincides upper bound live cells proved 2 Part 4 The Still Life Problem mathematically behaved suﬃciently large n This raises possibility optimal solutions constructed systematic way In Section 7 ﬁnd optimal solutions n 200 periodic satisfy certain constraints If solutions tiled indeﬁnitely produce arbitrarily large provably optimal solutions We conclude paper Section 8 2 Wastage reformulation The maximum density live cells life inﬁnite board known 1 2 11 However proof complex applies inﬁnite case In section provide simpler proof easily extended ﬁnite case gives better insight possible subpatterns occur optimal solution Theorem 1 The maximum density live cells life inﬁnite board 1 2 Proof Consider conﬁguration board life We density live cells conﬁgura tion cid2 1 2 We initially assign 2 tokens cell board We exists way redistribute G Chu PJ Stuckey Artiﬁcial Intelligence 184185 2012 116 3 Table 1 Possible patterns dead cells showing donate tokens wastage Table 2 Contributions tokens live cell South neighbor tokens 1 live cell ends cid3 4 tokens 2 token remains original cell assigned redistributed 4 orthogonal neighbors If redistribution exists n n region inﬁnite board L number live cells 2n2 4n cid3 4L This 2n2 4n tokens ended n n region redistribution live cell cid3 4 Rearranging Ln2 cid2 1 2 2 result follows 2n LHS density live cells As n approaches inﬁnity RHS approaches 1 We redistribution tokens satisfying properties 1 live cell ends cid3 4 tokens 2 token remains original cell redistributed 4 neighbors The redistribution occurs phases In ﬁrst phase tokens dead cell redistributed orthogonal neighboring live cells share edge dead cell Table 1 shows possible patterns orthogonal neighbors symmetries dead cell Live cells marked black dot dead cells unmarked cells state irrelevant purposes marked Each pattern indicates beneﬁciaries North East South West neighbors receive 1 token center dead cell number indicating wastage discuss later As seen Table 1 dead cell gives 1 token live orthogonal neighbors cid2 2 live orthogonal neighbors 1 token opposing live orthogonal neighbors 3 gives tokens 0 4 orthogonal neighbors Given set redistribution rules suﬃcient examine 3 bordering cells live cell determine tokens obtained orthogonal neighbor For example token obtained central live cell South neighbor illustrated Table 2 The tokens obtained live cell computed simply adding tokens obtained orthogonal neighbors Since live cell starts 2 tokens receive 2 extra tokens end cid3 4 tokens Let look possible patterns live cell cell receive tokens Table 3 shows possible neighborhoods live cell symmetries For pattern shows benefactors North East South West neighbors 1 token live cell number indicating wastage discuss later As seen table ﬁrst redistribution phase live cell required 4 tokens The exceptions live cells center pattern Table 3 received 1 extra token currently 3 tokens In second phase redistribution ﬁx remaining cases Note life constraints patterns Table 3 occur unique pairs pattern cell second To suppose second pattern occurs The middle live cell second pattern live neighbors The life constraints says 3 live neighbors row second pattern dead cells forms pattern cell claimed Similarly suppose pattern occurs The middle live cell pattern live neighbors The life constraints says 3 live neighbors row pattern dead cells forms second pattern cell claimed Also note second pattern extra unneeded token received 3 neighbors ﬁrst redistribution phase Thus second phase redistribution live cell center second pattern 1 2 original tokens redistribute live cell middle pattern center live cell pattern After live cells cid3 4 tokens token remained 4 G Chu PJ Stuckey Artiﬁcial Intelligence 184185 2012 116 Table 3 Possible patterns live cell showing token benefactors wastage originally redistributed orthogonal neighbors Thus redistribution properties claimed proof complete cid2 The proof simpler 11 provides good insight compute useful bounds case board ﬁnite In particular tells 3 3 patterns optimal suboptimal respect maximizing number live cells Let deﬁne wastage follows For dead cell let wastage cell number tokens given adjacent live cells redistribution shown Table 1 For live cell let wastage cell number excess tokens 4 redistri bution shown Table 3 Every live cell end cid3 4 tokens redistribution Thus 4 tokens satisfy cid3 4 token requirement live cell reduces number live cell region 1 In words 3 3 patterns 0 wastage precisely ones packing live cells optimally ones 0 wastage precisely ones suboptimal avoided Since number live cells wastage inversely related reformulate objective function Maximum Density Still Life Problem follows For cell c let P c 3 3 pattern cell Note c edge n n region dead cells edge included pattern Let qP wastage 3 3 pattern listed Tables 1 3 Deﬁne wc cell c follows If c n n region wc qP c If c row immediately n n region shares edge 4n cells wc 1 cell n n region shares edge dead wc 0 For c let wc 0 Let W wc cells cid6 Theorem 2 Wastage live cells related live_cells n2 2 n W 4 1 Proof We adapt proof inﬁnite board ﬁnite n n region Let assign 2 tokens cell n n region 1 token 4n cell row immediately edge n n region 0 tokens cells In ﬁrst redistribution phase dead cell n n region redistribute token live orthogonal neighbors exactly For dead cell row immediately n n region redistribute 1 token cell n n region shares edge live cell Once life constraints force 3 3 patterns listed Table 3 occur unique pairs Note impossible exist boundary n n region violates life constraints In second phase redistribution live cell center second pattern 1 2 original tokens redistribute live cell middle pattern center live cell pattern After live cells cid3 4 tokens The undistributed tokens dead cell n n region exactly given wastage count shown Table 1 The excess tokens 4 live cell n n region exactly given G Chu PJ Stuckey Artiﬁcial Intelligence 184185 2012 116 5 wastage count shown Table 3 The undistributed tokens dead cell row n n region 1 cell n n region shares edge dead 0 As seen wastage numbers correspond exactly wc deﬁned Now 4 times number live cells equal total number tokens minus total wastage Hence end Eq 1 cid2 We trivially derive upper bounds number live cells equation Clearly W cid3 0 live cells cid2 cid5 n2 ncid6 Also life constraints consecutive live cells edge 2 n n region Hence 1 wastage 3 cells edge improve bound live cells cid2 cid5 n2 3 ncid6cid6 While bound close optimal value small n differs true optimum 2 O n diverge optimum large n n cid5 1 3 Solving small n complete search The power branch bound algorithm hugely dependent strong bound prove objective node search tree The stronger bound prove earlier prune failed subtrees The naive Still Life model based counting number live cells weak upper bound number live cells propagation prove usually weak search generally fail board half ﬁlled Remodeling Still Life Problem terms minimizing wastage instead maximizing live cells allows propagate stronger bounds objective easy tell space wasted parts board labeled Let sl_waste width 10 table speciﬁes wastage value 3 3 pattern satisfying life constraints For example entries corresponding ﬁrst second patterns Table 3 0 1 0 0 1 0 0 1 0 0 0 1 0 0 1 0 1 0 0 1 A single table constraint sl_waste suﬃcient enforce life constraints set value wastage variable We propose following simple MiniZinc 12 model int n instance parameter array 0n10n1 var 01 x cell livedead status array 0n10n1 var 02 w cell wastage var 02nn4n total_wastage var 0nn live_cells life wastage constraints n n region constraint forall ij 1n tablesl_waste xi1j1 xij1 xi1j1 xi1j xij xi1j xi1j1 xij1 xi1j1 wij boundary conditions constraint forall 0n1 xi0 0 x0i 0 xin1 0 xn1i 0 constraint forall 1n2 sum j ii2 x1j 2 sum j ii2 xnj 2 sum j ii2 xj1 2 sum j ii2 xjn 2 wastage constraints boundary constraint forall 1n wi0 1 xi1 constraint forall 1n w0i 1 x1i constraint forall 1n win1 1 xin constraint forall 1n wn1i 1 xni objective function constraint total_wastage sum ij 0n1 wij constraint live_cells 2nn4n total_wastage4 solve maximize live_cells 6 G Chu PJ Stuckey Artiﬁcial Intelligence 184185 2012 116 Table 4 Optimum number live cells Maximum Density Still Life Problem complete search time seconds ﬁnd prove n 21 22 23 24 25 26 27 28 29 30 Opt 232 253 276 302 326 353 379 407 437 467 Time 70 824 51 354 04 1163 989 488 766 2408 n 31 32 33 34 35 36 37 38 39 40 Opt 497 531 563 598 633 668 706 744 782 824 Time 1213 869 542 20 1552 1651 1612 1930 3122 176 n 41 42 43 44 45 46 47 48 49 50 Opt 864 907 949 993 1039 1085 1132 1181 1229 1280 Time 892 25 696 4023 1033 2184 4032 2002 653 4569 5851 This basic model capable counting wastage labeled parts board enforce upper bound number live cells However important good lower bound wastage occur parts board labeled The simplest bound 1 wastage 3 cells unlabeled edge We implement adding lines modifying constraint total wastage wastage 3 edge cells edge array 141n3 var 13 ew constraint forall 1n3 ew1i sum j 3i23i w0j ew2i sum j 3i23i wj0 ew3i sum j 3i23i wn1j ew4i sum j 3i23i wjn1 constraint total_wastage sum ij 1n wij sum 14 j 1 n3 ewij sum n331n w0i wi0 wn1i win1 In modiﬁed model wastage groups consecutive edge cells summed variables ewij added objective Since ewij variable lower bound 1 facilitates 1 wastage 3 edge cells lookahead rule However model bit weak bigger instances use advanced lookahead based relaxations We defer detailed discussion Section 4 The search strategy important We use labeling strategy label boundary board inwards We ﬁrst label ﬁrst 3 rows edge 8 8 corner Thereafter label row time concentric squares The reason labeling strategy clearer view insights discussed Section 4 Basically wastage forced occur constraints occurs boundary n n region labeling cells ﬁrst increases bound objective quickest allowing detect suboptimal assignments earlier Finally note certain feature solver critical solving problem effectively One major problem search strategy Still Life Problem possible mistake labeling makes subtree unsatisﬁable propagation able notice decision levels later A normal constraint programming solver exponential nodes backtrack mistake ﬁx The solver use Lazy Clause Generation 6 solver Chuffed supports conﬂict analysis backjumping Thus Chuffed analyze conﬂicts immediately backjump mistake ﬁx having waste exponential time searching failed subtree If conﬂict analysis turned Chuffed behaves normal CP solver optimal solution 21 n cid2 30 1 hour timeout try larger n presumably continues hold In Table 4 results 21 cid2 n cid2 50 n cid2 20 previously solved Clearly able solve instances larger previous state art methods Optimal solutions n 21 n 22 shown Fig 1 We solve instances somewhat larger n 50 complete search run time grows quickly Instead use better methods tackle larger n sections 4 Upper bounds large n To solve problem larger n need mathematical insight problem We following conjecture G Chu PJ Stuckey Artiﬁcial Intelligence 184185 2012 116 7 Fig 1 Optimal solutions n 21 n 22 Conjecture 1 For suﬃciently large n forced wastage occurring optimal solution caused life constraints k rows edge n n region k small ﬁxed constant cid2 By forced wastage mean wastage unavoidable constraints problem opposed forced wastage occur simply picked suboptimal labeling board In later sections paper prove experimentally Conjecture 1 hold requires solving Still Life Problem n For treat conjecture Conjecture 1 inspired following facts Firstly optimal solutions n cid2 20 previous methods case wastage appeared corners ﬁrst 3 rows edge Secondly know exist wastage free labellings inﬁnite case inherent life constraints force wastage Instead appear boundary conditions ﬁnite case forcing extra wastage occur If conjecture holds possible relax Still Life Problem boundary variables vari ables k rows edge derive wastage lower bound This advantage 1 relaxed problem far fewer variables O nk instead O n2 smaller search space 2 relaxed problem low pathwidth O k instead O n exist techniques advantage reduce search space O n22k caching nogood learning dynamic programming variable elimination It known lower bound prove objective function relaxed problem valid lower bound original problem However bound optimal bound original problem If relaxed problem bound derive relaxed problem weaker optimal bound original problem Now Conjecture 1 holds exist small k bound relaxing problem width k boundary optimal original problem We need ﬁnd k The complexity solving relaxation O n22k choosing k large problem intractable We wish ﬁnd smallest k relaxation suﬃcient prove optimal bounds original problem We performed series experiments try guess minimal k We deﬁne edge life problem edgen k MiniZinc follows int n k instance parameters array 0n10k1 var 01 x cell livedead status array 1n0k var 02 w cell wastage life wastage constraints n k region constraint forall 1n j 1k tablewastage xi1j1 xij1 xi1j1 xi1j xij xi1j xi1j1 xij1 xi1j1 wij boundary conditions constraint forall 0n1 xi0 0 constraint forall 1n2 sum j ii2x1j 2 wastage constraints boundary constraint forall 1n wi0 1 xi1 objective function solve minimize sum 1n j 0k wij 8 G Chu PJ Stuckey Artiﬁcial Intelligence 184185 2012 116 Table 5 Ratio wastage edge cells optimal edge different edge width number patterns appear ﬁrst rows k 12 311 12 cid2 13 rk exact rk decimal Castles Blocks 13 411 719 1027 0333 0364 0368 0370 0 1 2 3 1 1 1 1 Fig 2 Optimal edge patterns width 2 width 3 boundary relaxation Wastage highlighted star Let mn k minimum wastage problem edgen k For k calculate edge wastage ratio rk rk limn mn kn These limits exist calculated combination dynamic programming math ematical induction ﬁnite time This optimal edge patterns periodic suﬃciently large n k We discuss See Table 5 values rk Fig 2 sample optimal edge patterns First note r1 r2 13 0333 gives trivial edge wastage bound discussed Section 2 The optimal edge pattern k 2 unique periodic shown Fig 2a However optimal width 2 edge extended width 3 edge introducing additional wastage For width 3 edge r3 411 0364 optimal edge pattern unique periodic shown Fig 2b We refer pattern shown ﬁrst 8 columns Fig 2b castle pattern 3 columns Fig 2b block pattern The castle pattern length 8 3 wastage block pattern length 3 1 wastage As k increases rk continues increase slightly At k 13 r13 1027 0370 The optimal edge longer unique periodic identical ﬁrst 3 rows translational symmetry composed castle patterns followed block pattern gives 3 3 1 10 wastage 3 8 3 27 cells All optimal edge patterns wastage row edge interesting fact note Beyond k 13 value rk plateaus stopped experimentation k 20 We later Section 7 exist arbitrarily edge patterns achieve exactly edge wastage ratio r13 1027 So fact rk 1027 k cid3 13 What edge wastage ratio results life constraints depth 13 capable forcing wastage occur We relax constraints away degrade bound prove relaxed problem Thus need look edge relaxation width 13 However fact rk plateaus k 13 suggests width 13 suﬃcient life constraints depth 13 effect forcing edge wastage relax away changing bound This turns correct results later 5 Solving boundary relaxation We wish solve relaxed form Still Life Problem consider width 13 boundary The technique choose use bounded dynamic programming 10 We discuss choice technique applied First necessary choose methods exploit low pathwidth relaxed problem Of dynamic programming far easiest implement However use variant dynamic programming called bounded dynamic programming 10 For kinds dynamic programs instead calculating exact value subproblem actually suﬃcient prove bound value subproblems Example 1 Consider recursion cid7 1 1 bn 1 2 min cid7 1 3 bn 1 1 bn min cid8 cid8 Suppose want calculate value Suppose calculated 1 6 Now need ﬁnd information bn 1 However note terms min 1 1 7 known known bn 1 cid3 5 exact value irrelevant far value concerned We want know bn 1 cid3 5 5 exact value Thus wish answer bounded query value bn 1 care exact value certain range On certain types problems bounded dynamic programming exponentially faster normal dynamic pro gramming lot subproblems exact values irrelevant need prove certain G Chu PJ Stuckey Artiﬁcial Intelligence 184185 2012 116 9 bound value Proving weak bound exponentially faster ﬁnding exact value In case Still Life Problem ways label cells lead large amounts wastage Therefore need prove subproblem suﬃciently bad certain wastage calculate exactly bad Bounded dynamic programming rigorous way We illustrate dynamic programming applied simpliﬁed example Consider constrained version edgen k additional boundary conditions ﬁx ﬁrst 2 2 columns We denote problem edgen k s1 s2 e1 e2 model additional lines instance parameters int s1 s2 e1 e2 additional boundary conditions constraint s1 sum 0k1 x1i 2i constraint s2 sum 0k1 x2i 2i constraint e1 sum 0k1 xni 2i constraint e2 sum 0k1 xn1i 2i As seen denoting value column k cells single number 0 2k 1 value cells interpreted binary digits number We deﬁne Boolean function sa b c b c 0 2k 1 true consecutive columns labeled b c order violate life constraints false We deﬁne integer function wa b c b c 0 2k 1 wastage central column b consecutive columns labeled b c order Let mn k s1 s2 e1 e2 minimum wastage problem edgen k s1 s2 e1 e2 Then following recursive mulas hold n cid3 3 s1 s2 e1 e2 0 2k 1 cid7 mn 1 k s1 s2 e2 e3 we1 e2 e3 mn k s1 s2 e1 e2 min cid7 cid9 cid9 e3 0 2k 1 cid8 cid8 se1 e2 e3 Lets consider Firstly consider solution edgen k s1 s2 e1 e2 We ﬁxed n 3th column Let denoted e3 To satisfy life constraints se1 e2 e3 true For solution we1 e2 e3 gives wastage n 2th column If project solution ﬁrst n 1 columns clearly solution edgen 1 k s1 s2 e2 e3 Hence minimum wastage solutions mn 1 k s1 s2 e2 e3 we1 e2 e3 Taking minimum possible e3 gives mn k s1 s2 e1 e2 recursive formula Such set recursive formulas solved dynamic programming O n We use precalculated values mn k s1 s2 e1 e2 wastage lookahead complete search method described Section 3 Given partially ﬁlled edge columns given s1 s2 look mini j mn k s1 s2 j lower bound wastage remaining cells edge This bound approximately 1027 wastage remaining edge cell instead trivial 13 wastage remaining edge cell Although difference small crucial solving larger n complete search Now turns k suﬃciently large n values mn k s1 s2 e1 e2 periodic This formalized following theorem Theorem 3 If constants M p q s1 s2 e1 e2 mM p k s1 s2 e1 e2 mM k s1 s2 e1 e2 q n cid3 M s1 s2 e1 e2 mn p k s1 s2 e1 e2 mn k s1 s2 e1 e2 q That n cid3 M values m simply increase q p cells Proof The proof induction The base case n M true assumption Suppose true n t Consider n t 1 We mt 1 p k s1 s2 e1 e2 cid7 mt p k s1 s2 e2 e3 we1 e2 e3 cid7 mt k s1 s2 e2 e3 we1 e2 e3 min q min q mt 1 k s1 s2 e1 e2 cid2 cid9 cid9 e3 cid9 cid9 e3 cid7 cid7 0 2k 1 cid8 0 2k 1 cid8 cid8 se1 e2 e3 cid8 se1 e2 e3 Theorem 3 tells reach n m values periodic remains periodic larger n This happens translational symmetry Still Life Problem For k 13 values typically periodic time reach n 200 Once happens derive closed form equations mn k s1 s2 e1 e2 larger n Thus calculate values mn k s1 s2 e1 e2 n constant number mathematical operations 10 G Chu PJ Stuckey Artiﬁcial Intelligence 184185 2012 116 Fig 3 Boundary relaxation calculating wastage lower bounds Table 6 Lower bounds wastage corresponding upper bounds live cells calculated bounded dynamic programming problem relaxation Instances bound relaxed problem differed original problem indicated asterisk n 20 21 22 23 24 25 26 27 28 29 30 31 32 33 Waste lb Live ub 40 36 42 43 40 46 44 48 51 48 53 55 53 56 210 232 253 276 302 326 353 379 407 437 466 497 530 563 n 34 35 36 37 38 39 40 41 42 43 44 45 46 47 Waste lb Live ub 56 59 62 60 64 67 64 68 68 71 73 72 76 78 598 632 668 706 744 782 824 864 907 949 993 1039 1085 1132 n 48 49 50 51 52 53 54 55 56 57 58 59 60 61 Waste lb Live ub 76 80 80 80 85 84 87 89 88 91 92 92 97 96 1181 1229 1280 1331 1382 1436 1490 1545 1602 1658 1717 1776 1835 1897 We relaxed problem use derive bounds We begin basic model described Section 3 We relax problem steps In ﬁrst step eliminate depth 14 cells leave width 13 boundary That xi j 13 j cid2 n 13 eliminate xi j problem existentially quantifying constraint appears Existential quantiﬁcation variable constraint weakens constraint valid relaxation In second step cut slit width 13 boundary order reduce pathwidth The slit goes 1st 13th columns 13th 14th row For constraint c includes variables sides slit variables cid2 13 variables cid3 14 1 cid2 j cid2 13 create copies c In copy existentially quantify variables slit In existentially quantify variables slit Once valid relaxation The resulting relaxed problem shown graphically Fig 3 The reason ﬁrst relaxation rid variables constraints conjecture irrelevant forcing lower bound The reason second relaxation lower pathwidth problem tractable Recall complexity solving problem pathwidth w O 2w Without slit pathwidth relaxed problem 5 13 65 high solved With slit drops 3 13 39 solvable Once relaxation performed simplify objective function resulting relaxed problem Consider wi j 14 j cid2 n 14 These variables occur exactly table constraint involving 3 3 pattern centered coordinate positive term objective function For wi j variables 9 xi j variables corresponding table constraint existentially quantiﬁed wi j free value allowed table constraint In particular optimal solution set lower bound 0 Thus simplify objective function relaxed problem removing wi j terms Similarly columns xi j 3 3 pattern existentially quantiﬁed wi j set 0 So remove xi j 14 n 13 14 j cid2 n 14 j 14 n 13 14 cid2 n 14 The resulting problem form simpliﬁed problem showed corners multiple edges It easy kind recursive formulation dynamic program possible Thus relaxed problem completely solved n bounded dynamic programming eﬃciently Table 6 shows wastage lower bounds corresponding live cell upper bounds derive 21 cid2 n cid2 56 We note things Firstly bounds calculated bounded dynamic programming relaxed problem G Chu PJ Stuckey Artiﬁcial Intelligence 184185 2012 116 11 wastage cid2 cid54027 n 5cid6 n 5 13 21 24 32 35 40 43 48 51 cid54027 n 6cid6 n 0 2 7 8 10 14 15 16 18 22 23 26 mod 54 cid54027 n 7cid6 n 1 3 4 9 11 12 17 19 20 25 27 28 29 30 34 37 38 42 45 46 50 53 mod 54 cid54027 n 8cid6 n 6 33 31 36 39 41 44 47 49 52 mod 54 mod 54 Fig 4 Closed form equations wastage lower bound n cid2 61 livecells cid3 cid5n22 1727 n 2cid6 n 0 1 3 8 9 11 16 17 19 25 27 31 33 39 41 47 49 mod 54 cid5n22 1727 n 1cid6 n 2 4 5 6 7 10 12 13 14 15 18 20 21 22 23 24 26 28 29 30 32 34 35 36 37 38 40 42 43 44 45 46 48 50 51 52 53 mod 54 Fig 5 Closed form equations live cell upper bound n cid2 61 Fig 6 The best ways ﬁll corner symmetry Wastage highlighted star Note units wastage cell 4th column 4th row second pattern sistent optimal live cell values calculated complete search Section 3 Secondly bounds relaxed problem optimal bounds original problem exceptions n 24 26 28 38 This consis tent Conjecture 1 stated suﬃciently large n relaxed problem bound original It appear suﬃciently large n conjecture n 38 Of course fully prove Conjecture 1 prove n 38 We Section 7 For n cid3 61 wastage lower bounds periodic given equations Fig 4 The corresponding live cell upper bound given equations Fig 5 We shall sections live cell upper bounds fact achievable equations Fig 5 actually optimal number live cells n cid3 61 6 Lower bounds large n Lower bounds live cells proved ﬁnding actual solutions problem If number live cells solution coincides upper bound proved Section 5 know optimal solution solved problem n However ﬁnding optimal solutions hard default search space Still Life Problem extremely large The model given Section 3 good solve n 50 complete search However size need reduces search space We following conjecture Conjecture 2 For suﬃciently large n exist optimal solutions following form wastage exists 4 4 corners board row edge board cid2 Conjecture 2 supported experiments described Section 4 We reasoned suﬃciently large n edges follow optimal edge patterns know wastage row edge board Similarly ways label corner minimum wastage Fig 6 wastage 4 4 corners And ﬁnally center board wastage free Conjecture 1 constraints center board force wastage wastage simply solution suboptimal Assuming Conjecture 2 holds look solutions special form Note searching solutions special form gives incomplete search Still Life Problem However incomplete search perfectly suﬃcient proving lower bounds number live cells solution proof To solve n able ﬁnd optimal solution single n We use techniques reduce search space 1 dynamic relaxations lookahead 2 customized limited discrepancy search In Section 4 described perform relaxation boundary board order derive lower bound wastage We thing search Our search strategy label board 8 rows time 12 G Chu PJ Stuckey Artiﬁcial Intelligence 184185 2012 116 Fig 7 Dynamic relaxation lookahead life search Conjecture 1 tells suﬃciently large n wastage forced boundary constraints In subproblem boundary includes values cells labeled If relax subproblem boundary unlabeled region able derive strong lower bound wastage unlabeled region board Thus search node relax remaining problem unlabeled parts width 13 boundary 8 unlabeled rows row labeled Fig 7 We note things Firstly set variables involved relaxation different search depth Secondly boundary conditions relaxation different nodes search depth cells rows labeled differently Thus relaxed subproblems different solved separately derive wastage lower bound Now solve O n dynamic programming However better noting relaxed problem node similar relaxed problem parent node differing column 8 variables By appropriately caching solutions relaxed subproblem parent node solve relaxed problem node O 1 The cost nontrivial wastage lower bounds derived relaxations strong provide large pruning worth One wonder use different search order described Section 3 label board outside This relaxation lookahead tells wastage unlabeled parts boundary unnecessary actually label force wastage lower bound It better label boundary exponentially ways probably bad It better ﬁx variables close variables ﬁxed detect inconsistencies earlier strategy We use relaxation lookahead branching heuristic When faced choice labeling column 8 variables 256 possible values relaxation lookahead able tell wastage lower bound increase given choices We order choices according low wastage lower bound given lookahead This far superior naive greedy branching heuristic orders choices based wastage labeled board case greedily minimizing wastage locally cause wastage Our lookahead capable seeing wastage caused pick locally optimal globally suboptimal choices We use modiﬁed version limited discrepancy search 13 Firstly deﬁning discrepancy choice ﬁrst choice given branching heuristic deﬁne wastage lower bound given relaxation lookahead increase decision This means ties multiple choices equally good according lookahead In cases randomly tiebreak Secondly add randomized restarts search At randomized points time search backtrack random number rows This important despite lookahead exist vast subtrees optimal solutions complete search exponential number nodes backtrack The combination random restarts plus random tiebreaking equally good choices effective Using techniques able ﬁnd optimal solutions instances large n 200 hours average An optimal solution n 100 shown Fig 8 7 Constructing optimal solutions arbitrarily large n Through experimentation analysis clear Still Life Problem actually fairly behaved suﬃciently large n We following properties 1 wastage lower bound periodic n 2 exist optimal periodic edge patterns achieve wastage lower bound 3 easy ﬁll center board wastage Combining facts possible bit work construct closed form optimal solutions arbitrarily large n G Chu PJ Stuckey Artiﬁcial Intelligence 184185 2012 116 13 Fig 8 Optimal solution n 100 In Section 5 worked wastage lower bounds n If construct solutions achieve wastage lower bounds n This solving instances Still Life Problem additional periodic constraints parts solution tiled indeﬁnitely produce arbitrarily large optimal solutions Fig 9 The initial solution broken horizontal vertical cuts 4 corner pieces 4 edge pieces 1 center piece The edge pieces center pieces satisfy periodic constraints tiled satisfy life constraints Furthermore strong restrictions wastage occur tiled pieces We know suﬃciently large n wastage lower bounds Section 4 wastage edge cell ratio exactly 1027 Thus hit lower bound 4 periodic edge pieces precisely wastage ratio Also periodic center piece completely wastage free Now periodic edge pieces precisely wastage edge cell ratio 1027 period multiple 27 Unfortunately center piece 27 27 impossible wastage free odd cid11 number cells Thus minimum period use 2 27 54 The aim solve instance n n additional period 54 constraints wastage constraints edge center pieces If optimal solution cid11 k 54 k N Clearly solve n tiled create optimal solutions n n 150 higher value n Still Life Problem suﬃciently behaved periodic version solvable So solve 54 instances size 150 modulus class mod 54 additional periodic constraints wastage constraints mod 54 54 cases We n cid11 cid11 Rather directly solving problems scratch decided utilize solutions try extend periodic solutions splicing periodic section We ﬁrst optimal solution cid11 54 We cut pieces vertically point We pieces apart 54 cells try n n ﬁll gap periodic 54 section satisﬁes additional wastage constraints This periodic 54 section end periodic edge pieces Secondly new solution cut horizontally point We pieces apart 54 cells This new section end periodic edge pieces plus center piece Now end optimal solution n n satisﬁes periodic constraints wastage constraints Here MiniZinc model ﬁrst step The second step analogous cid11 int n instance parameter columns covering splice point sol n n 54 array 141n 01 s array 1540n1 var 01 x cell livedead status life wastage constraints 54 n region 14 G Chu PJ Stuckey Artiﬁcial Intelligence 184185 2012 116 Fig 9 A periodic optimal solution center sections tiled indeﬁnitely produce optimal solutions n 100 k 54 constraint forall 253 j 1n tablesl_waste xi1j1 xij1 xi1j1 xi1j xij xi1j xi1j1 xij1 xi1j1 0 boundary conditions constraint forall 0n1 xi0 0 xin1 0 constraint forall 152 sum j ii2 xj1 2 sum j ii2 xjn 2 constraint forall 1n x1i s3i x2i s4i xn1i s1i xni s2i wastage constraints boundary constraint sum 154 xi1 34 constraint sum 154 xin 34 solve maximize satisfy This splicing succeed constraints strong Whether satisﬁable depends initial solution point cut In particular cuts point edges transitioned optimal edge pattern 3 castles 1 block periodic pattern If solve particular instance reasonable time tried different cut point tried different solution cid11 54 The success rate 80 succeeded ﬁrst try After approximately 3000 hours n n computation able ﬁnd periodic solutions 54 cases Still Life Problem solved large n The Still Life shown Fig 9 periodic solution center sections tiled indeﬁnitely produce optimal solutions n 100 k 54 These results prove Conjecture 1 Conjecture 2 closes Maximum Density Still Life Problem n We restate results clarity G Chu PJ Stuckey Artiﬁcial Intelligence 184185 2012 116 15 Table 7 Maximum number live cells n n life n cid3 60 n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Live cells 0 4 6 8 16 18 28 36 43 54 64 76 90 104 119 n 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 Live cells 136 152 171 190 210 232 253 276 302 326 353 379 407 437 467 n 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 Live cells 497 531 563 598 633 668 706 744 782 824 864 907 949 993 1039 n 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 Live cells 1085 1132 1181 1229 1280 1331 1382 1436 1490 1545 1602 1658 1717 1776 1835 Theorem 4 For n 39 forced wastage caused life constraints 13 rows edge n n region Theorem 5 For n 50 exist optimal solutions following form wastage exists 4 4 corners board row edge board Theorem 6 For n cid2 60 maximum number live cells appear n n life given Table 7 For n cid3 61 maximum number live cells appear n n life given cid10 n22 1727 n 2 cid10 n22 1727 n 1 cid11 cid11 n 0 1 3 8 9 11 16 17 19 25 27 31 33 39 41 47 49 mod 54 n 2 4 5 6 7 10 12 13 14 15 18 20 21 22 23 24 26 28 29 30 32 34 35 36 37 38 40 42 43 44 45 46 48 50 51 52 53 mod 54 8 Conclusion We solved Maximum Density Still Life Problem n combining mathematical insights prob lem appropriate applications remodeling lazy clause generation bounded dynamic programming relaxations custom search The complete solution consists parts 1 complete search solve n cid2 50 2 bounded dy namic programming relaxation prove optimal live cell upper bounds n 50 3 incomplete search special form solutions prove optimal live cell lower bounds 50 n cid2 200 4 incomplete search ﬁnd optimal periodic solutions tiled construct arbitrarily large solutions prove optimal live cell lower bounds n 200 The optimal values n given Theorem 6 Optimal solutions small medium n periodic optimal solutions large n wwwcsseunimelbeduaupjsstilllife The total time taken completely solve Maximum Density Still Life Problem n approximately 3000 hours Acknowledgements NICTA funded Australian Government represented Department Broadband Communications Digital Economy Australian Research Council ICT Centre Excellence program References 1 G Chu P Stuckey M Garcia la Banda Using relaxations maximum density life I Gent Ed Proceedings 15th International Confer ence Principles Practice Constraint Programming LNCS vol 5732 SpringerVerlag 2009 pp 258273 2 R Bosch Integer programming Conways game life SIAM Review 41 3 1999 596604 3 R Bosch M Trick Constraint programming hybrid formulations life designs Annals OR 130 14 2004 4156 4 J Larrosa R Dechter Boosting search variable elimination constraint optimization constraint satisfaction problems Constraints 8 3 2003 303326 5 J Larrosa E Morancho D Niso On practical use variable elimination constraint optimization problems Stilllife case study Journal Artiﬁcial Intelligence Research 23 2005 421440 6 O Ohrimenko P Stuckey M Codish Propagation lazy clause generation Constraints 14 3 2009 357391 7 BM Smith Caching search states permutation problems P van Beek Ed Proceedings 11th International Conference Principles Practice Constraint Programming Lecture Notes Computer Science vol 3709 Springer 2005 pp 637651 16 G Chu PJ Stuckey Artiﬁcial Intelligence 184185 2012 116 8 T Feydy PJ Stuckey Lazy clause generation reengineered IP Gent Ed Proceedings 15th International Conference Principles Practice Constraint Programming Lecture Notes Computer Science vol 5732 Springer 2009 pp 352366 9 R Bellman Dynamic Programming Princeton University Press 1957 10 J Puchinger P Stuckey Automating branchandbound dynamic programs R Glück O Moor Eds Proceedings ACM SIGPLAN 2008 Workshop Partial Evaluation Program Manipulation PEPM 08 ACM 2008 pp 8189 11 N Elkies The stilllife density problem generalizations Voronois Impact Modern Science Book I 1998 228253 arXivmath9905194v1 12 N Nethercote P Stuckey R Becket S Brand G Duck G Tack Minizinc Towards standard CP modelling language C Bessiere Ed Proceedings 13th International Conference Principles Practice Constraint Programming LNCS vol 4741 SpringerVerlag 2007 pp 529543 13 WD Harvey ML Ginsberg Limited discrepancy search Proceedings 14th International Joint Conference Artiﬁcial Intelligence Morgan Kaufmann 1995 pp 607615