Artiﬁcial Intelligence 173 2009 437465 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Computing fault tolerance multiagent deployment Yingqian Zhang Efrat Manisterski b Sarit Kraus bc VS Subrahmanian c David Peleg d Faculty Electrical Engineering Mathematics Computer Science Delft University Technology 2628 CD Delft The Netherlands b Department Computer Science BarIlan University Ramat Gan 52900 Israel c Department Computer Science UMIACS University Maryland College Park MD 20742 USA d Department Computer Science Applied Mathematics Weizmann Institute Science Rehovot 76100 Israel r t c l e n f o b s t r c t Article history Received 11 June 2007 Received revised form 12 November 2008 Accepted 14 November 2008 Available online 25 November 2008 Keywords Multiagent deployment Fault tolerance Algorithms Replication A deployment multiagent network refers placement copies agent network hosts manner memory constraints node satisﬁed Finding deployment likely tolerate faults copy agent functioning communication agents challenge In paper address problem ﬁnding probability survival deployment probability deployment tolerate faults assumption node failures independent We problem computing survival probability deployment NPhard Moreover hard approximate We produce algorithms accurately compute probability survival deploymentthese algorithms expectedly exponential We produce ﬁve heuristic algorithms estimate survival probabilitiesthese algorithms work acceptable time frames We report detailed set experiments determine conditions algorithms perform better 2008 Elsevier BV All rights reserved 1 Introduction There tremendous advances decade theory implementation massive multiagent sys tems However major obstacle wider deployment multiagent systems MASs capability tolerating failures MASs deployed network quickly external factors power failures network outages malicious attacks issues Protection unexpected failures disable node critical agents backbone real world applications Clearly ensuring MASs safe protected involves vast range technologies authenticate users agents ensure secure communications identify vulnerabilities identify quarantine attacks Our goal paper far modest concerns way replication form basis tool needed prevent MAS succumbing failure By replicating agents hope improve fault tolerance multiagent The faults considered paper cause disconnection crash nodes network This article extended version paper appeared Second IEEE Symposium MultiAgent Security Survivability Y Zhang E Manister S Kraus VS Subrahmanian Approximation results probabilistic survivability Second IEEE Symposium MultiAgent Security Survivability Philadelphia USA 2005 pp 110 This research supported Technology Foundation STW applied science division NWO Ministry Economic Affairs Netherlands grant N6133906C0149 ARO grant DAAD190310202 AFOSR grants FA95500610405 FA95500510298 NSF grant 0540216 NSF grant 0705587 ISF grant 168507 Corresponding author Email addresses yingqianzhangtudelftnl Y Zhang manistermacsbiuacil E Manisterski saritmacsbiuacil S Kraus vscsumdedu VS Subrahmanian davidpelegweizmannacil D Peleg 00043702 matter 2008 Elsevier BV All rights reserved doi101016jartint200811007 438 Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 MAS application resides The fault model consider failure node network represented probability Given fault model agents locate nodes different probabilities unavailable multiagent probability function The idea replication fault tolerance method work facing failures copy agent continue reside connected working host node MAS function uniﬁed application Furthermore paper focus problem measuring probability multiagent tolerate node failure We probability survivability1 MAS For example consider CoAX 235 Coalition Agent Experiment large multinational team2 universities companies government labs pieced experimental multiagent application set sensory agents deployed ocean tracked enemy submarines These sensory agents fed data prediction agents predicted probability submarine given location Thereafter set decision making visualization agents assisted decision maker determining best proceed All agents supported turn agents agents assessing trustworthiness source database agents resource discovery agents like In applications CoAX likely nodes disconnected network Any enemy sophisticated use jamming technology efforts jam network effectively causing agents connectivity Thus critical agents prediction agents decision making agents need appropriately located replicated multiagent high probability functioning Of course assumed physical hardware sensors replicated support sensor failuresthis paper address replicate physical devices Likewise consider exhaustive set deployed multiagent applications listed 36 According description Skodaa branch Volkswagendeployed agent based production planning tool manufacturing car engines Their multiagent solution looked low level planning high level planning High levels plans examined set low level planning agents try achieve high level plan ﬂag conﬂicts inconsistencies high level plan A forth process ensures consensus achieved production plans sent higher level agents use resource allocation mechanisms execute plans production line It clear critical applications node going reason potential cause production line come grinding halt leading loss revenue company Tichy et al 42 multiagent control components ship reduce man power requirements ensuring highly reliable survivable operation ship They develop hierarchical multiagent architecture agents embedded hardware controllers higher level agents coordinate monitor activities groups agentenhanced hardware controllers The agents continuously engaged plan creation plan commitment plan execution cycle Here clear agents control physical environment ship case high potential overall environment controlled MAS adversely affected agent goes In situation hardware components exist certainly ships possibility hardware components failfor simple reasons complex reasons actual physical movement ship andor oceanographic climactic conditions ship forced contend Thus mechanisms needed MASs deployed survivable manner agents Furthermore important calculate guaranteed probability survive Fault tolerance replication techniques extensively studied distributed computing systems 410203143 multiagent systems domain 5162933 Building fault tolerant distributed notoriously hard The autonomy agents multiagent systems CoAX makes task diﬃcult In paper build framework 27 deﬁned probability given deployment MAS3 survive considered basic problem deployment survivability proposed methods ﬁnding survival deployments Zhang et al 45 consider complexity problem ﬁnding survivable deployment That complexity ﬁnding deployment highest survival probability given MAS deployment The model 27 assumes ignorance dependencies node failures However assumption valid For example attack Cornells web site isin likelihoodindependent Israeli Defence Ministrys web site going The framework proposed 27 handle The algorithm developed 27 ﬁnding survivable deployment agents network works ignorance assumption components The ﬁrst component algorithm solving deployment survivability problem computing survival probability given deployment MAS second component uses ﬁrst component ﬁnd survivable deployment The algorithm provided 27 ﬁrst problem exponential second doubly exponential In paper focus ﬁrst problem deployment survivability algorithm second component 27 directly Moreover instead studying problem assumption ignorance assume independence node failures 1 A formal deﬁnition survivability given Deﬁnition 4 See Section 62 discussion different notations survivability 2 The team included companies Lockheed Martin BBN Qinetiq universities Univ Maryland Univ Texas Univ Edin burgh 3 We deﬁne deployment formally later Deﬁnition 1 For deployment simply function associates node network set agents placed node Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 439 The following contributions included paper 1 In Section 2 provide abstract formal model study survival probability given deployment assumption independence node failures We assuming independence deployment surviv V ability problem NPhard Moreover hard approximate factor 2 number nodes network V 1cid2 2 We complexity ﬁnding survivable deployment problem assuming independence NPhard We polynomial approximation ﬁnd suboptimal deployment instances survival probability survival deployment 1 algorithm returns deployment survival probability 0 Thus polynomial approximation algorithm guaranteed ﬁnd terrible solution 3 In Section 3 introduce centralized algorithms accurately compute probability given deployment survive Both algorithms exponential time 4 In Section 4 develop ﬁve different approximation algorithms compute probability survival given deployment 5 About half paper Section 5 devoted detailed comparison performance different algorithms proposed paper These experiments try identify conditions algorithm preferable MAS applications foundation base decision algorithm use 6 Section 6 compares algorithms related work We conclude discussing main strengths weaknesses paper Section 7 This paper related prior papers authors Kraus et al 27 mentioned develop basic MAS survivability paper based setting relationship failure nodes com pletely unknown It provides centralized algorithm ﬁnd optimal deployment maximizes probability survival Our subsequent paper 41 provides protocol multiple agents dynamically redeploy network information received nodes gone Both papers provide algorithms ac tually ﬁnd optimal complexity allow suboptimal deployment statically centralized manner ﬁrst case dynamically distributed manner second However ﬁnding optimal deployment common problem cases ﬁnd probability survival deployment This precursor ﬁnding deployment highest survival probability It necessary MAS applied mission critical domains The computed survival probability example deciding safe add resources necessary look new deployment dynamic environment Zhang et al 45 takes ﬁrst step addressing problem The problem presented work far detailed extended version problem described 45 2 An abstract probabilistic fault tolerance framework 21 Survivability functions Consider multiagent M consisting ﬁnite set agents providing services We cerned framework agents M encoded For example implemented BDI framework IMPACT 40 framework mix frameworks case CoAX 235 We assumptions services provided agents communication language provide We assume M deployed fully connected overlay network4 N V V V V set nodes network Since N fully connected network simplicity denote sets vertices V Each node n V ﬁxed resources denoted spacen makes available hosting agents given multiagent Let spacea denote resource requirements agent let spaceM aM spacea We deﬁne deployment wrt M V follows cid2 Deﬁnition 1 Deployment μ A deployment μ wrt M V mapping V 2 μn set agents M deployed node n network The deployment μ satisfy resource constraint cid2 aμn spacea cid2 spacen n V We μ valid deployment wrt M V M node n V μn M Throughout rest paper assume M arbitrary ﬁxed MAS V arbitrary ﬁxed set nodes As consequence simply deployment μ instead deployment μ wrt M V 4 This reasonable assumption require connectivity underlying physical network merely nodes physical network need reachableperhaps multiple physical linksfrom nodes 440 Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 Example 1 Consider fully connected network V n1 n2 n3 spacen1 6 spacen2 spacen3 3 MAS M a1 a2 a3 spaceai 4 1 2 3 A possible valid deployment μ given μn1 a1 a2 a3 μn2 a1 μn3 a2 a3 In network V node V disconnected network In paper details example causes failures failure detection method failure rate5 Instead adopt abstract representation fault model multiagent tolerant assume node probability unavailable function disconnection crash network We deﬁne probability unavailable node disconnect probability function Deﬁnition 2 disconnect probability function dp A disconnect probability function dp short mapping dp V 0 1 assigns probability disconnected node n V In context CoAX application 235 disconnect probability function speciﬁes probability node fall networksuch disconnect probability function assign high disconnect probability sensory nodes deployed ocean lower disconnect probability nodes secure locations area lower disconnect probability highly secure nodes US Europe In case Tichys 42 application disconnect probabilities agents embedded controller higher higher level agents frequent failures hardware components The case Skoda application 36 It important note failure node permanent temporary Moreover disconnect probability dpn deﬁned terms time For example family auxiliary functions dptn assesses probability node n disconnected exactly t units time One derive dpn ways dptn functions For instance dpn assumed average dptns t ranging 0 ﬁxed upper bound It important note disconnect probabilities computed standard ways networking One way use round trip times RTTs frequently networking RTTs time required packet node An RTT graph looks exactly like network edge labeled round trip time nodes question RTT0 initialized number ways setting nodes ﬁxed probability disconnect assigning probabilities based priori knowledge network If RTTt depicts RTT graph given network time t compute disconnect probabilities identifying RTTt differ RTTt 1 RTTt 2 If large proportion edges associated node n increased RTT RTTt compared RTTt 1 disconnect probability node n increases cid5 A future failure event F cause disconnection set nodes V F Such failure event rise partial possibly disconnected The denoted cid5 V V F Clearly given possibility node disconnections partial network V cid5 V case failure event F nodes V F V V materialize referred occurrence probability network V cid5 cid5 cid5 cid5 V network V materialize future V probability future network V poccurV V cid5 dp6 Consider failure event F consider deployment μ restricted future network V μ satisﬁes resource constraint However deployment μ longer valid wrt V M deployed node V following deﬁnition We future network V cid5 V V F Clearly agents valid happen Formally V cid5 cid5 cid5 cid5 Deﬁnition 3 Valid future network Given deployment μ network V possible future network V valid μ valid deployment wrt V agent μ n μn V cid8 The set possible valid future networks network V deﬁned ValidV μ V V V μ valid We M V dp μ survives failure event F set nodes V F gets disconnected respect V remaining V cid5 V V F valid network We ready deﬁne abstract notion survivability function given Deﬁnition 4 Survivability function Consider ﬁxed multiagent M network V A survivability function SFM V dp μ maps deployment μ disconnect probability function dp probability M V dp μ survive When M V dp clear context denote survivability simply SFμ 5 See Section 64 detailed discussion failure mode 6 Whenever V dp clear context denote occurrence probability V cid5 simply poccurV cid5 The survival probability μ obtained summing occurrence probabilities possible valid future Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 441 networks SFM V dp μ cid3 V ValidV μ poccurV V dp We survival probability given deployment μ SFμ survivability deployment μ 1 cid5 Kraus et al 27 use linear programming model deﬁne survival probability MAS ignorance sumption assuming completely ignorant node failure dependencies However assumption valid multiagent applications hosts geographically distributed simple complex dependencies independence failures different hosts For example failure node Australia likely independent failure node Maryland case independence assumption appropri ate ignorance assumption In case CoAX application example node n goes probability node n area underwater sensor array failure n likely positively correlated failure n However n region underwater sensor array n UK failures nodes probably independent It ap parent wide array possible ways failure node related failure node Likewise case Skoda multiagent application case failure agents associated planning independent failures agents associated monitoring execution process likely directly control sense physical devices The case Tichys ship control 42 application depends factors For instance n n cid5 cid5 cid5 Kraus et al 27 study extremewhere complete ignorance relationship node failures This ignorance assumption causes survival probabilities extraordinarily pessimistic low In addition 27 survivable deployment problem ﬁnding deployment μ maximizes SFM V dp μ given M V dp intractable ignorance assumption Since cases independence assumption valid example mentioned paper develop survivability algorithms following independent assumption Assumption 1 Failure independence assumption Given network V node failures independent Later paper discuss techniques paper extended order remove indepen dence assumption Example 2 Consider network deployment given Example 1 suppose disconnect probability function dp given dpn1 07 dpn2 06 dpn3 04 The possible valid future networks V 1 n1 V 2 n2 n3 V 3 n1 n2 n3 V 4 n1 n2 V 5 n1 n3 The occurrence probability V 1 poccurV 1 03 06 04 0072 similarly poccurV 2 0168 poccurV 3 0072 poccurV 4 0048 poccurV 5 0108 The survivability deployment given SFM V dp μ 0072 0168 0072 0048 0108 0468 22 Complexity results survivability In section investigate complexity deployment survivability problem compute surviv ability given MAS deployment replacing ignorance assumption 27 failure independent Assumption 1 Given network V multiagent application M disconnect probability dp deployment μ occurrence probability network V cid5 poccurV V cid5 dp cid6 cid5 1 dpnp dpnq independence assumption calculated following equation cid4 cid4 np V cid5 nqV V cid5 One expect deployment survivability problem easier assumption independence However following result shows problem NPhard independence assumption V 1cid2 hard approximate factor 2 Theorem 5 Computing survivability SFM V dp μ given deployment μ NPhard hard approxi mate factor 2 V 1cid2 Proof By reduction problem ﬁnding number satisfying truth assignments given monotone CNF formula ϕ An instance problem formula ϕ monotone CNF form K Boolean variables x1 xK conjunction M clauses ϕ C1 C M clause Ci xi1 xil disjunction literals literals nonnegated Given instance ϕ create instance deployment survivability problem follows For clause C j create agent j For logical variable xi create node ni An agent j deployed nodes 442 Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 corresponding literals occur C j j μni xi appears C j The disconnect probability node n V set dpn 05 Z truth assignments monotone CNF It easy survivability μ Z 2 formula ϕ V It wellknown counting number satisfying truth assignments given monotone CNF formula NPhard It NPhard approximate number factor 2K 1cid2 K number variables This true clause formula contains variables 38 Consequently deployment survivability problem NPhard cid2 hard approximate factor 2 V 1cid2 Next survivable deployment problem ﬁnding deployment μ maximizes SFM V dp μ given M V dp NPhard Consequently interesting look polynomial time heuristic algorithm guaranteed output deployment survival probability cid2 optimal deploy ment μ cid2 0 Unfortunately following theorem states best cid2 1 assumption P cid8 NP Theorem 6 1 Finding optimal survival deployment μ dence assumption given M V dp NPhard indepen 2 If P cid8 NP polynomial approximation ﬁnd suboptimal deployment instances survival probability μ 1 algorithm returns deployment survival probability 0 Proof It suﬃce prove claim 2 claim 1 follows immediately Suppose claim 2 false Then polynomial algorithm AL exists returns deployment survival probability larger 0 survival probability optimal deployment 1 We use AL order obtain polynomial time algorithm solving NPcomplete subset sum problem This problem requires decide given ﬁnite set S N target integer K N exists subset S cid5 S elements sum K 9 Given set S s1 sn target K construct following 2node network NSK Each member set s S represented agent space requirement s spaceas s The nodes n1 n2 spacen1 K spacen2 sS s K Assume network reliable disconnect probabilities dpni 0 1 2 It easy survivability optimal deployment μ cid7 cid2 SFM NSK dp μ 1 subset S 0 cid5 S st cid2 scid5Scid5 s cid5 K Therefore following algorithm solves subset sum problem For given S K build network NSK described Run algorithm AL NSK If AL returns deployment survival probability greater 0 return Yes return No cid2 3 Algorithms computing exact deployment survivability This section describes algorithms computing survivability given deployment Algorithm SF1n naive algorithm exponential number nodes suitable use V small Algorithm SF1a exponential number agents suitable M small 31 The naive Algorithm SF1n This algorithm uses deﬁnition Eq 1 directly order calculate survivability μ More explicitly enumerates possible valid future networks V computes occurrence probabilities Finally returns survival probability μ sum occurrence probabilities possible valid future networks 32 The agentbased Algorithm SF1a Given deployment μ let Aai event nodes agent ai deployed disconnected Let Ad event Aai events occurs The probability event Aai occur given Pr Aai ai μn dpn In order μ survive Aai events occur Unfortunately Aai events mutually exclusive Thus order compute survivability μ Aai need calculate probability disjunction nonmutually exclusive events inclusionexclusion formula presented cid8 Deﬁnition 7 Suppose μ deployment wrt overlay network V suppose node disconnect probabilities independent Then SF1aM V dp μ 1 Pr Ad 2 Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 Pr Ad Pr Aa1 cid3 Aa2 Pr Aai AaM cid3 Pr Aai Aa j 1 M1Pr Aa1 AaM 443 3 ai M ai cid8a j ai j M Algorithm SF1a calculates probabilities Aai events computes formula returns result Example 3 Consider network deployment given Example 1 consider disconnect probability function given Example 2 Agent a1 located nodes n1 n2 probability disconnected Pr Aa1 dpn1dpn2 07 06 042 Similarly Pr Aa2 Pr Aa3 dpn1dpn3 028 Pr Aa1 Aa3 028 Pr Aa1 Aa3 dpn1dpn2dpn3 0168 Pr Aa2 Aa2 Pr Aa1 Aa3 0168 Aa2 Thus survivability deployment given SF1aM V dp μ 1 cid6 cid5 Pr Aa1 Pr Aa2 Pr Aa3 Aa3 0468 Aa2 Pr Aa1 cid5 Pr Aa1 Aa2 Pr Aa1 Aa3 Pr Aa2 cid6 Aa3 Eﬃciency improved idea presented 27 reduce number agents nodes loss accuracy For purpose denote nodes agent ai located Locai In 27 Kraus et al prove survivability deployment unaffected eliminate irrelevant agentsan agent irrelevant cid5 Loca Throughout agent paper computing survivability algorithm apply method ﬁrst eliminate irrelevant agents carry computation simpliﬁed deployments7 The following example gives reader quick idea elimination idea works exists deployed subset nodes deployed Loca cid5 Example 4 Consider network deployment disconnect probability function given Example 3 We Loca1 n1 n2 Loca2 n1 n3 Loca3 n1 n3 As Loca3 Loca2 remove a3 deploy ment μ update μ follows μcid5n1 a1 a2 μcid5n2 a1 μcid5n3 a2 We compute survivability μcid5 Algorithm SF1a SF1a cid5 M a3 V dp μcid5 cid6 cid5 Pr Aa1 Pr Aa2 Clearly SF1aM a3 V dp μcid5 SF1aM V dp μ 1 cid6 Pr Aa1 Aa2 1 042 028 0168 0468 33 An upper bound survivability As Algorithms SF1a SF1n exponential time establish upper bound survivability μ based Algorithm SF1a This upper bound evaluate heuristics proposed later paper As mentioned Ad event nodes agent located disconnected We interested complement event Ad Finding lower bound Pr Ad subtracting 1 yields upper bound survivability μ Given Eq 3 Bonferroni inequalities 18 state sum right truncated k terms k M truncated sum upper bound Pr Ad k odd lower bound Pr Ad k cid2 Aa j M cid3 2 lower bound For example easy Pr Ad This lower bound calculated incrementally run predeﬁned maximal running time difference add expression odd term subtract expression term small We maximum lower bounds computed Subtracting value 1 upper bound survivability μ The following algorithm8 explains way ﬁnd upper bound survivability μ ai cid8a j ai j M Pr Aai ai M Pr Aai cid2 Algorithm 1 UBM V dp μ D TM Input predeﬁned value D maximum running time TM 7 Another simpliﬁcation deployments presented paper assume number copies agent node Note model survivability deployment copy agents exist nodes equal survivability simpliﬁed deployment 8 All algorithms receive set agents M set nodes V disconnect probability function dp MAS deployment μ input For convenience input algorithm additional input parameters 444 Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 Output upper bound survivability μ 1 start timer T k 1 k speciﬁes number elements subsets 2 value 0 valueo 1 3 p 0 minub 1 maxlb 0 4 value valueo cid3 D T MT valueo value b value ksubsetμ k returns sum probability ksubsets c k odd sign 1 sign 1 d p p sign value e sign 1 p minub minub p f p maxlb maxlb p g k k 1 5 return 1 maxlb Proposition 8 Given deployment μ network V Algorithm UB yields upper bound survivability μ Proof Since Algorithm SF1aM V dp μ returns exact survivability μ need UBM V dp μ D TM cid3 SF1aM V dp μ Deﬁne S1 j Pr Aai inequalities 18 SF1aM V dp μ 1 Aaik Pr 2 k cid2 M Based Eqs 2 3 Bonferroni cid9M i1 Aai cid2 1 j11 j1 S j k cid3 2 cid2 1 maxlb UBM V dp μ D TM cid2 i1 Pr Aai S2 Aa j Sk i1i2ik Pr Aai1 cid2M cid2 k cid2 cid2 4 Heuristic algorithms computing survivability As Algorithms SF1n SF1a expensive realworld applications propose heuristics compute survivabilities deployments We interested ﬁnding lower bounds SFμ allow guarantee given deployment μ survival probability exceeds threshold 41 An anytime Algorithm SF2 cid2 Algorithm SF1a turned anytime algorithm idea compute upper bound If ﬁnd upper bound Pr Ad subtract 1 attain lower bound survivability μ Again ai M Pr Aai upper bound Pr Ad Any odd number terms Eq 3 provides upper looking Eq 3 bound An anytime algorithm iteratively add terms exceed time deadline ratio maximum lower bounds minimum upper bounds smaller speciﬁed ratio r The algorithm similar Algorithm 1 anytime algorithm returns 1 minub lower bound survivability deployment Algorithm 2 Algorithm SF2M V dp μ R TM Input predeﬁned ratio R maximum running time TM Output lower bound SFμ 1 start timer T k 1 k speciﬁes number elements subsets 2 p 0 minub 1 maxlb 0 3 maxlb minub cid3 R t M T value ksubsetμ k returns sum probability ksubsets b k odd sign 1 sign 1 c p p sign value d sign 1 p minub minub p e p maxlb maxlb p f k k 1 4 return 1 minub Proposition 9 Given deployment μ network V anytime Algorithm SF2 returns lower bound SFμ Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 445 Proof The proof similar Proposition 8 need SF2M V dp μ R TM cid2 2 k cid2 M Based Eqs 2 3 Bonfer SF1aM V dp μ Again deﬁne Sk Pr Aai 1 j11 j1 S j odd k cid3 1 cid3 1 minub roni inequalities 18 SF1aM V dp μ 1 Pr SF2M V dp μ R TM cid2 Aaik cid9M i1 Aai cid3 1 i1i2ik cid2 k cid2 42 A treebased Algorithm SF3 Algorithm SF3 heuristic provides lower bound SFμ Algorithm SF1n computes survivability μ summing occurrence probabilities possible valid future networks V The high complexity Algorithm SF1n caused fact enumerates checks exponential number possible future networks In contrast Algorithm SF3 attempts check bounded number V s This immediately implies SF3M V dp μ cid2 SFM V dp μ Algorithm SF3 yields lower bound SFμ Obviously order lower bound close possible SFμ selection process try pick future networks V occurrence probability large possible Algorithm SF3 tree search vertex labeled subset V The algorithm starts root tree labels V computes V s occurrence probability For n V vertex labeled V n second level tree For label V valid computes occurrence probability However α vertices highest occurrence probabilities second level tree expanded way If vertex labeled V expanded children labeled V n n V Again α vertices tree level expanded The algorithm stops vertices expand returns sum occurrence probabilities valid future networks occurring labels search tree vertex algorithm checks V cid5 cid5 If α polynomial size input Algorithm SF3 considers polynomial number future networks Therefore return poor results large number nodes For example assume disconnect probability nodes distributed uniformly 0 05 The output Algorithm SF3 bounded number subsets considered multiplied largest occurrence probability The largest occurrence probability case bounded cid8 nV 1 dpn Therefore survivability estimate given Algorithm SF3 usually greater α09 V smaller 10 V 22 Since performance Algorithm SF3 poor propose heuristics improve value Disjoint removal heuristic The ﬁrst heuristic prior running Algorithm SF3 check agent M denote set agents aMcid5 1 aμnnV dpn At end algorithm multiply returned nodes Loca disjoint Loca disjoint sets We compute survivability Mcid5 cid5 We apply Algorithm SF3 remaining agents M Mcid5 value SFMcid5 V dp μ SF3M V dp μ SFMcid5 V dp μ SF3M Mcid5 V dp μ cid5 agent Let Mcid5 directly SFMcid5 V dp μ cid8 cid8 cid5 Node removal heuristic The second heuristic based idea number nodes involved Algorithm SF3 larger predeﬁned constant Kb V Kb reduce removing nodes contribute cid10 1 dpn ρ denotes number agents survival μ We sort nodes ascending order ρ node n The ﬁrst Kr nodes deleted deployment The intuition formula remove nodes disconnect probability relatively higher occurrence probabilities networks include nodes relatively low In addition want remove nodes deployed relatively small number agents disconnection nodes inﬂuences fewer agents compared nodes deployed larger number cid10 1 dpn increases 1 dpn agents Note dpn increases ρ fraction The ﬁrst Kr nodes deleted deployment Note removal action possible eliminate irrelevant agents applying idea presented 27 Example 4 order simplify computation cid10 1 dpn decreases In addition ρ increases ρ Algorithm SF3 presented Algorithm 3 Algorithm SF3M V dp μ α Kb Kr Input 1 predeﬁned number selected vertices α 2 3 predeﬁned constants Kb Kr Output lower bound SFμ 1 disjointsur v rmvdisjointμ V M dp 2 V Kb V rmvnodesμ V M dp Kr remove agents disjoint locations return survivability removed agent set described remove Kr nodes update network described 446 Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 3 bestval cid8 nV 1 dpn compute occurrence probability network V 4 temp V false ﬂag false 5 cid5 X b temp cid8 X headof temp temp temp X cid5 X xi xi X cid5 X ii X c Svalid d X V ii V cid5 X cid5 Svalid V cid5 Svalid Svalid V e ﬂag true cid5 X cid5 cid5 ValidV μ ﬂag true cid5 headof X cid5 V cid5 cid8 remove invalid sets repetitive sets X cid5 V Svalid cid8 poccur V nV bestval bestval poccur V ii Svalid sortSvalid poccur V 1 dpn cid8 nV V dpn sort sets Svalid descending order according occurrence probabilities iii j 0 j α j ﬁrst α sets temp temp headof Svalid Svalid Svalid headof Svalid iv ﬂag false 6 return bestval disjointsurv In algorithm function rmvdisjointμ V M dp implements disjoint removal heuristic described earlier removes agents set locations disjoint set locations agent The function rmvnodesμ V M dp Kr implements node removal heuristic reduces number nodes removing Kr nodes contribute survival deployment The following proposition states Algorithm SF3 correct polynomial time approximation SFμ Proposition 10 1 For α 0 value returned Algorithm SF3 lower bound SFμ 2 Suppose α ﬁxed Then time complexity Algorithm SF3 OαV 2 logαV αV 2M algorithm poly nomial α polynomial size input A sketch proof proposition given cid5 size V cid5 V In level tree level 1 z V Proof Suppose search starts root level 0 tree labeled set nodes V Consider vertex z cid5 children level tree labeled set V Only α valid sets highest occurrence labels generated removing exactly node V probabilities level generate level Thus total number vertices level 1 αV For generated set nodes occurrence probability set computed O19 time checking set valid contains agents OM time In addition level sorting sets nodes takes OαV logαV As maximum depth generated tree V time complexity Algorithm SF3 cid5 αV cid5 cid5 αV M V αV log αV cid5 αV 2 log O αV 2M cid5 V cid6 cid6cid6cid6 O cid6 cid5 Since survivability μ sum occurrence probabilities valid subsets Algorithm SF3 considers subset valid subsets clearly SF3M V dp μ α Kb Kr cid2 SFM V dp μ value α Kb Kr cid2 Example 5 Consider network updated deployment Example 4 μn1 a1 a2 μn2 a1 μn3 a2 Suppose α 1 Kb 20 Kr 3 The root V n1 n2 n3 Thus Xs0 n1 n2 n3 poccur Xs0 1 dpn11 dpn21 dpn3 0072 In level graph subsets generated removing node V 9 This occurrence probability parents vertex This fact difference vertex tree labeled V n parents vertex tree labeled network V V n node n doesnt survive V node n survives Therefore poccurV n poccur V 1dpn dpn Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 447 Xs11 n2 n3 Xs12 n1 n3 Xs13 n1 n2 poccur Xs11 1 061 0407 0168 poccur Xs12 1 071 0406 0108 poccur Xs13 1 071 0604 0048 As α 1 use set Xs11 generate subsets level Xs21 n2 Xs22 n3 removed invalid The search terminates valid subsets created The survivability estimate computed Algorithm SF3 deployment SF3M V dp μ α Kb Kr 0396 Hence Algorithm SF3 lower bounds SFμ 0468 shown Example 4 43 A disjoint based Algorithm SF4 Algorithm SF4 calculates survival probabilities relying requirement agent survive network information locations agent For agent ai M multiagent application let Locai ni set nodes ai located Let E j survive Then event copy ai functioning denoted E E k The probability 1 event E computed j event node ni E 1 ni k cid5 cid6 P E 1 dp cid5 ni 1 cid6 dp cid5 ni 2 cid6 cid5 ni dp k cid6 We deﬁne event MAS deployment μ survive EM V dp μ cid5 E 1 1 E 1 k1 cid6 cid5 M 1 E E cid6 M kM The probability event EM V dp μ represents survivability deployment μ Unfortunately E s mutually exclusive However Algorithm SF4 computes lower bound Eμ assuming events E 1 E 2 E pairwise disjoint The SF4 algorithm deﬁned following formula M SF4M V dp μ P cid5 cid6 cid5 P E 1 E 2 cid6 P cid6 M cid5 E cid5 cid5 1 dp n1 1 cid6 cid5 dp n1 k cid6cid6 cid5 cid5 1 dp n cid6 cid5 dp n cid6cid6 M r M 1 Proposition 11 Algorithm SF4 provides lower bound SFμ The following example illustrates operation Algorithm SF4 Example 6 Consider updated deployment μcid5 V cid5 n1 n3 respectively Thus cid6 cid6 cid5 cid5 P P E 1 E 2 1 dpn1dpn2 1 042 058 1 dpn1dpn3 1 028 072 Example 4 Agents a1 a2 located nodes V n1 n2 So survivability μ computed SF4M V dp μ P E 1P E 2 04176 Algorithm SF4 returns lower bound SFμ 0468 In example compared value returned Algorithm SF3 0396 Example 5 Algorithm SF4 provides better solution However shown later section experiments cases Algorithm SF4 returns lower survivabilities Algorithm SF3 44 A group based Algorithm SF4g Algorithm SF4 computes agents survival probability returns product survival probabilities If node contains agent Algorithm SF4 returns exact answer However general number agents large large number nodes agents located Algorithm SF4 return low approximation ratio To improve agents deployment coexist nodes consider agents group compute groups survivability We divide agents groups product survival probabilities groups survivability deployment An intuitive way group agents consider agent lowest survivability We group agents common nodes When compute survivability agent group use Algorithm SF1a As Algorithm SF1a takes exponential time number agents limit size group Algorithm 4 Algorithm SF4gM V dp μ s Input number agents group s Output lower bound SFμ 448 Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 1 agents M surv 1 2 agent ai agents cid8 P E 1 3 agents cid8 NULL nLocai dpn ai arg minai M P E choose agent lowest survivability A cid5 groupai s μ V agents group s 1 agents common locations ai group A cid5 V dp μ use Algorithm SF1a compute survivability A cid5 cid5 value SF1a A surv surv value cid5 agents agents A 4 return surv In algorithm function groupa s μ V agents takes input agent predeﬁned number members group s deployment μ set agents denoted agents set nodes V For agent computes number common locations agent selects ﬁrst s 1 agents common nodes agents number common nodes chooses arbitrarily groups s 1 agents agent group A returns A cid5 cid5 The following example demonstrates grouping idea applied Algorithm SF4g Example 7 Consider network nodes V n1 n2 n3 n4 n5 n6 multiagent application M a1 a2 a3 a4 Suppose disconnect probabilities dpn1 07 dpn2 06 dpn3 04 dpn4 03 dpn5 02 dpn6 01 Consider current deployment μ μn1 a1 a2 μn2 a1 μn3 a2 μn4 a3 μn5 a3 a4 μn6 a4 We set number agents group 2 Algorithm SF4g ﬁrst computes survivability agent based nodes agent located cid6 cid6 cid5 cid5 P P E 1 E 3 1 dpn1dpn2 058 1 dpn4dpn5 094 cid6 cid6 cid5 cid5 P P E 2 E 4 1 dpn1dpn3 072 1 dpn5dpn6 098 Since agent a1 likely fail select a1 form ﬁrst group g1 We group agent a2 a1 a2 number common nodes agent a1 Thus g1 a1 a2 Algorithm SF1a applied group g1 compute survivability SFg1 V dp μ SF1ag1 V dp μ 1 cid6 cid5 Pr Aa1 Pr Aa2 cid6 cid5 dpn1dpn2 dpn1dpn3 Pr Aa1 dpn1dpn2dpn3 0468 Aa2 1 Similarly remaining agents a3 a4 form second group g2 a3 a4 SFg2 V dp μ SF1ag2 V dp μ 1 cid6 cid5 Pr Aa3 Pr Aa4 cid6 cid5 dpn4dpn5 dpn5dpn6 Pr Aa3 dpn4dpn5dpn6 0914 Aa4 1 Thus estimated survivability given algorithm SF4gμ V dp μ 2 SFg1 V dp μSFg2 V dp μ 042775 Using Algorithm SF1a M know survivability μ SFμ 042775 Clearly case Algorithm SF4g returns actual survivability overlap whatsoever locations groups g1 a1 a2 g2 a3 a4 However necessarily happen deployments 45 A split Algorithm SF5 Given speciﬁc node n V consider possible disjoint events The ﬁrst E 1 event network survives given node n remains connected Alternatively E 2 event network survives given node n disconnected If n remains connected agents deployed survive Thus survivability network case depends survivability rest agents located n If n disconnected survivability network depends rest nodes V n The survivability original network 1 dpnPrE1 dpnPrE2 In cases problem computing survival probability smaller original problem This leads recursive approach solving problem The subproblems usually smaller remove irrelevant agents according idea presented 27 There stopping rules speciﬁed ﬁrst lines pseudocode shown The ﬁrst rules refer situations possible Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 449 compute exact survival probability future network The stopping rule future networks small survival probability computing recursion p p 1 ﬁrst time Algorithm SF5 called For low probability future networks Algorithm SF4 applied obtain lower bound survivability Algorithm 5 Algorithm SF5M V dp μ p cid2 Input 1 survivability known nodes split p initially p 1 Output 2 predeﬁned threshold cid2 lower bound SFμ 1 M return 1 cid8 return p cid2 agents M located disjoint sets nodes cid8 aM1 aμn dpn return SF4M V dp μ cid5cid5 V cid5 V n choose node n V largest set agents V b μcid5 μ Mcid5 M μn c rid irrelevant agents M Mcid5 cid5cid5 d adjust μ V e return dpn SF5M V wrt M μcid5 according idea 27 wrt Mcid5 cid5 dp μ dpnp cid2 1 dpn SF5Mcid5 V V cid5 cid5cid5 dp μcid5 1 dpnp cid2 Proposition 12 Algorithm SF5 yields lower bound SFμ Proof Algorithm SF5 recursive termination conditions If termination conditions met algo rithm generates smaller subproblem algorithm terminates possible cases follows If algorithm terminates ﬁrst termination condition M line 1 pseudocode Algorithm 5 subnetwork subproblem contain agents Thus simplify problem The result returned algorithm exact solution original problem cid8 If second termination condition applies agents M located disjoint sets nodes return aM1 aμn dpn lines 2 3 pseudocode Algorithm 5 subproblem easily computed multiplying agents survivability Since agents condition located disjointed nodes solution exact solution original problem Finally Algorithm SF5 terminates condition p cid2 return SF4M V dp μ lines 4 5 pseudocode Algorithm 5 Since Algorithm SF4 provides lower bound SFμ result returned Algorithm SF4 lower bound subproblem Algorithm SF5 cid8 In conclusion Algorithm SF5 provides lower bound SFμ cid2 The following example illustrates Algorithm SF5 works Example 8 Consider network updated deployment Example 4 μn1 a1 a2 μn2 a1 μn3 a2 cid2 0001 The heuristics use choose node split number agents deployed node Since node n1 largest number agents nodes n1 selected There cases refer splitting operation wrt n1 The ﬁrst event E1 network survive given node n1 remain connected In case V 1 n2 n3 M1 n V 1 μ1n p1 1 dpn1 03 The second event E2 network survive given node n1 disconnected In case V 2 n2 n3 M2 a1 a2 μ2n2 a1 μ2n3 a2 p2 dpn1 07 We Algorithm SF5 updated parameters As M1 PrE1 1 In M2 agents a1 a2 located disjoint nodes return PrE2 cid5 1 dpn1 cid6cid5 cid6 1 dpn2 1 041 06 024 Therefore stop split operation return survivability original deployment SF5M V dp μ 1 0001 p1 PrE1 p2 PrE2 0468 Note case Algorithm SF5 outputs exact survivability 0468 shown Example 4 However necessarily true cases 450 Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 5 Experiments The survivability algorithms shall compare section anytime algorithm SF2 threshold approximation ratio set 09 time limit main algorithm set 5 seconds treebased algorithm SF3 constant α set number nodes network constants Kb Kr set 20 6 respectively disjoint based algorithm SF4 group algorithm SF4g number agents group set 4 split algorithm SF5 threshold cid2 stopping rules predeﬁned 0005 The performance measures 1 computation time 2 solution quality We evaluate solution quality follows Exact optimal solutions For small cases number nodes number agents small 16 obtain exact survivability S E naive algorithm SF1n agents nodes SF1a nodes agents The solutions provided heuristic algorithms S H compared The solution quality approximation ratio computed S H S E Upper bounds optimal solutions For large cases computing optimal solutions feasible compute upper bounds exact survivabilities UB upper bound algorithm compare values S H returned heuristics Thus solution quality approximation ratio evaluated S H UB We considered experimental settings In paper consider instances taken ﬁctitious company uses local servers personal computers web servers locate run multiagent applications As know web servers personal computers high probabilities going local servers usually lower disconnect probabilities In section variations settings experiments We use term number ratio refer ratio number agents number nodes Space ratio describes ratio total resources available nodes total resource requirements agents In addition problem size sum number agents nodes settings 51 Environmental settings We environmental settings experiments Suppose multiagent application M includes agents relatively small number servers nodes available We set number ratio agents nodes 53 We considered following environments s1 A network consisting small number web servers N w constitute 30 involved servers local servers Nl constitute 70 involved servers The disconnect probabilities web servers highabove 09 dpn cid3 09 n N w disconnect probabilities local servers lowbelow 01 dpn cid2 01 n Nl The space ratio nodes agents 2 3 s3 A network consisting local servers Suppose servers new old The disconnect probabilities servers 0 04 higher disconnect probabilities higher probability appear older computers new ones The space ratio nodes agents 4 Consider multiagent application Mcid5 consists small number agents The company intends deploy personal computers local servers available resources server PC limited We set Mcid5 number ratio agents nodes 35 The following environments speciﬁed s2 Personal computers 30 employed disconnect probabilities 09 use local servers 70 low disconnect probabilities 01 The space ratio nodes agents 23 s4 Only local servers different agents host Mcid5 The disconnect probability servers distributed setting s3 The space ratio nodes agents 4 We apply existing MAS application IMPACT 40 31 agents determine resource distribution agents range 0 250 KB experiments10 We use environments s1s4 described test survivability algorithms 10 We distinguish criticality agents multiagent computing survivability Therefore factor roles workloads different agents play role experiments reported Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 451 Table 1 Experiment 1 Upper bounds approximation ratios different algorithms setting s1 Problem size n18 a30 n24 a40 n30 a50 Deploy method nodebased agentbased randombased nodebased agentbased randombased nodebased agentbased randombased Upper bound 0435412 0349391 0002281 0355659 0306698 0000166 0429062 0331821 0000006 Anytime SF2 0951475 0930565 085197 0861461 0899324 0811792 Treebased SF3 0998919 0972725 0964037 0881713 0937145 0851059 Disjoint SF4 0879377 0879446 0836856 0796948 0775934 0731787 Split SF5 0999515 0973295 0965813 0889531 0939865 0852492 Groupbased SF4g 0948644 0947005 0923682 0859259 0893412 0827303 52 Agent deployment methods The method generate deployment important different survivability algorithms work different types deployments In paper generate deployments heuristics proposed 27 node based agentbased heuristics In addition use randombased method represent possible deployments The deployment methods work follows Nodebased This heuristic based knapsack problem We ﬁrst sort nodes ascending order according disconnect probabilities We place agents starting smallest ID implementation sorted nodes starting node lowest dp We agents possible node nodes second lowest dp Agentbased This based idea ﬁrst deal agents high resource requirements We sort agents ascending order according resource requirements deploy ﬁrst agent choose agent second highest resource requirement space left placing agents When deploy agent choose node lowest dp nodes capable storing said agent Randombased First randomly choose node randomly select place agents subject space constraints We sure deployment uses available resources nodes In experiments wanted investigate performance survivability algorithms different ployments returned deployment methods check algorithms preferences particular deployments 53 Experimental results We ready present experimental results All algorithms paper implemented Linux PC running 1000 MHz CPU machine 512 MB RAM Running times algorithms reported microseconds Every recorded observation averaged 50 runs The algorithms compared deployments nodebased agentbased randombased different environment settings s1s4 In experiments varied problem size total number agents nodes We present results following experiments Experiment 1 carried setting s1 Experiment 2 setting s2 Experiment 3 setting s3 Experiment 4 setting s4 Experiment 5 compared different algorithms setting s1 larger space ratio In order ensure survivability computed upper bound algorithm close actual value deployment estimated survivability simulating node failures network thousand times The results upper bounds pretty close simulation survivabilities The average relative error upper boundsimulation result simulation result 05 The approximation ratio algorithm reported experimental result solution quality described page 450 computed S H S E S H U B depending problem size Experiment 1 In Experiment 1 ran compared ﬁve algorithms setting s1 space ratio nodes agents 2 3 disconnect probabilities distributed 001 091 The problem size varied 48 64 80 Table 1 illustrates results upper bounds survivability approximation ratios different algorithms n18 a30 refers MAS 30 agents deployed 18 nodes As seen upper bounds Table 1 deployments achieved nodebased deployment method higher survivability agentbased deployments Undoubtedly disconnect probabilities nodes vary dramatically MAS better highly surviving nodes considered ﬁrst deploying agents Therefore surprising nodebased deployments result best survivabilities methods random based deployment method returns poor survivabilities 0005 according upper bounds table 452 Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 Table 2 Experiment 1 Computation time microseconds different algorithms setting s1 Problem size n18 a30 n24 a40 n30 a50 Deploy method nodebased agentbased nodebased agentbased nodebased agentbased Anytime SF2 65179 75635 1237829 1237632 5105916 4302199 Treebased SF3 Disjointbased SF4 5999 3874 2877 975 10156 5039 7 5 9 7 11 9 Split SF5 26094 22075 55172 51954 73187 71481 Groupbased SF4g 927 710 1527 1066 2231 1707 Table 3 ANOVA results ﬁve algorithms Experiment 1 agentbased deployments problem size 64 The level signiﬁcance required set 005 Between algorithms Residual Total Sum squares SS 016483 036275 052758 Degrees freedom df 4 95 99 Mean square MS 004121 000382 F value pvalue F crit 1079146 29689E07 246749 Table 4 ANOVA results SF3 SF5 Experiment 1 agentbased deployments problem size 64 The level signiﬁcance required set 005 Between algorithms Residual Total Sum squares SS 10266E06 13158E05 14185E05 Degrees freedom df 1 38 39 Mean square MS 10266E06 34627E07 F value pvalue F crit 29647 009323 409817 In Table 1 exclude random based deployments low survivabilities discuss approxima tion ratios returned algorithms agentbased nodebased deployments Of heuristics tree based algorithm SF3 split algorithm SF5 return best solutions SF5 attains best result difference results SF3 small SF3 achieves higher accuracy disjoint based algorithm SF4 anytime algorithm SF2 group algorithm SF4g The reason twofold 1 First searching valid future networks level tree SF3 keeps networks higher survivabilities removes likely fail Thus s1 setting disconnect probabilities high low SF3 select valid future networks nodes low disconnect probabilities dp 01 Since valid future networks low survival nodes dp 09 greatly contribute survivability deployment SF3 good approximations 2 Second space ratio nodes agents small 23 s1 setting implies nodes accommodate agents resource constraints number valid future networks limited relatively small number As SF3 keeps ﬁxed α best networks level tree search likely SF3 important valid future networks relatively high survivability Thus SF3 works setting s1 Statistical signiﬁcance In order discover signiﬁcant differences performances algo rithms performed Oneway Analysis Variance oneway ANOVA11 12 solution round returned different algorithms Table 3 shows results ANOVA applied data achieved setting s1 agent based deployments problem size 64 The level signiﬁcance required ANOVA set 005 In table calculated F value F 1079146 exceeds critical value F 246749 probability pvalue calculated F value obtained change nearly zero Therefore difference performance ﬁve algorithms signiﬁ We performed ANOVA tree based algorithm SF3 split algorithm SF5 Since computed F value F 29647 smaller critical value F 409817 shown Table 4 conclude signiﬁcant difference performance SF3 SF5 11 In oneway ANOVA number degrees freedom df associated algorithms number algorithms df residual total number samples algorithms minus total number algorithms The F value simply ratio variance estimates algorithms residual The critical values F crit presented F table Using F compute pvalue probability obtained result occurring chance For detailed discussion oneway ANOVA 12 Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 453 Table 5 Experiment 2 Upper bounds approximation ratios different algorithms setting s2 Problem size n30 a18 n40 a24 n50 a30 Deploy method nodebased agentbased randombased nodebased agentbased randombased nodebased agentbased randombased Upper bound 0520557 0410592 0001406 0436522 0342072 0001808 0398411 0317906 0001918 Anytime SF2 0928353 0939275 0880772 0907723 0923707 0910653 Treebased SF3 0990334 0996562 0980832 0968986 0981228 0972855 Disjoint SF4 0974706 0973966 0952544 0941974 0958711 0900914 Table 6 Experiment 2 Computation time microseconds different algorithms setting s2 Problem size n30 a18 n40 a24 n50 a30 Deploy method nodebased agentbased nodebased agentbased nodebased agentbased Anytime SF2 5904 29781 55806 225411 364816 1822433 Treebased SF3 26546 1325 176935 1183 1109754 11842 Disjointbased SF4 8 7 11 8 15 11 Split SF5 099961 0999569 098856 0991491 0973521 0976648 Split SF5 19842 14043 39496 32944 86811 74323 Groupbased SF4g 0989189 0998401 0979202 0988068 096628 0967943 Groupbased SF4g 1361 586 2111 998 3096 1676 Table 7 ANOVA results SF3 SF5 Experiment 2 agentbased deployments problem size 64 The level signiﬁcance required set 005 Between algorithms Residual Total Sum squares SS 000048 000265 000313 Degrees freedom df 1 64 65 Mean square MS 000048 41477E05 F value pvalue F crit 1154003 00012 399092 Computation time Table 2 shows computation time taken different algorithms From results SF3 needs computation time split algorithm anytime algorithm node agentbased deployments The disjoint based algorithm fastest taking microseconds compute survivability given deployment The time needed group algorithm SF4g close tree based algorithm SF3 Conclusion Overall experimental setting s1 taking approximation ratio computation time account tree based algorithm SF3 outperforms algorithms Experiment 2 Tables 5 6 present results performances different algorithms experimental setting s2 nodes agents ratio 53 space ratio nodes agents 23 dps distributed dramatically Concerning upper bounds deployments returned different types methods node based method results highest survivability Again random based method work setting dramatically varying dps network In terms solution quality split algorithm SF5 best followed tree based algorithm SF3 performs group algorithm SF4g nodebased deployments problem sizes 48 64 80 agentbased deployments size 80 The disjoint algorithm SF4 gives pretty good approximation ratio 09 regardless fact returns poorest measurements algorithms The performance SF4 SF4g signiﬁcantly better Experiment 1 In deployments achieved setting s2 average number agents located node smaller compared setting s1 nodes agents s2 space ratio s1 As overlap locations agents SF4 SF4g work better experiment Experiment 1 Statistical signiﬁcance In addition performed statistical signiﬁcance test algorithms SF3 SF5 Table 7 shows calculated F value F 1154003 greater critical value F 399092 small p value p 00012 Hence conclude setting performance algorithms SF3 SF5 terms solution quality signiﬁcantly different 454 Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 Table 8 Experiment 3 Upper bounds actual survivability different deployments setting s3 nodebased agentbased randombased n12 a20 0928231 0935944 0657132 n18 a30 0889023 0867488 0474367 n24 a40 0876090 0836907 0349565 n30 a50 0858844 0831710 0302506 n36 a60 0813199 0803683 0186378 Computation time In terms computation time taken different heuristics agentbased deployments results similar Experiment 1 split algorithm SF5 anytime algorithm SF2 time heuristics If look time taken computing nodebased deployments clear tree based heuristic SF3 needs longest time As shown Section 42 complexity compute SF3 dependent αV 2 logαV Therefore problem size remains setting s2 s1 SF3 needs longer time terminate compared s1 ratio nodes agents higher However note case SF3 agentbased deployments SF3 completes search fast survivabilities returns comparable nodebased deployments depicted Tables 5 6 Apparently setting s2 applying SF3 agentbased deployments number valid future networks level converges fast tree search Consequently SF3 terminate early Thus results suggest settings like s2 tree based algorithm SF3 leads better performance terms computation time agentbased deployments compared nodebased ones Conclusion Overall experimental setting s2 split algorithm SF5 preferred algorithm solution quality running time taken account Experiment 3 Experiment 3 performed setting s3 disconnect probability nodes distributed 004 higher disconnect probabilities higher probability appear From results Table 8 notice type disconnect probability distribution immediately increases survivability deployments compared upper bounds shown Experiments 1 2 Even randomly deploying agents result better deployments higher survivability Experiments 1 2 The nodebased method ﬁnd better surviving deployments methods Figs 1 2 present approximation ratios computation time algorithms respectively In ﬁgures xaxis represents problem size varying 32 98 steps 16 Note include results tree based algorithm SF3 approximation ratio lower 08 setting s3 Since s3 disconnect probabilities nodes vary dramatically values valid future networks greatly vary Therefore bad approximation SF3 fact excludes survivabilities networks signiﬁcantly contribute overall survivability Fig 1 demonstrates advantage split heuristic SF5 gives best approximation ratio matter kind deployments employs As described Section 45 SF5 recursive algorithm recursion sub problem smaller Moreover node chosen computation network updated removing irrelevant agents reduces size subproblems The algorithm terminates future subnetwork subproblem accurately computed survivability future sub network small roughly estimatedthe threshold set 0005 experiments Thus surprising SF5 yields good approximation According experiments paper split algorithm SF5 provides good approximation ratio regardless environment settings Furthermore algorithms achieve high approximation ratios 096 nodebased deployments As agentbased deployments algorithms return approximation ratios 090 problem size larger 80 Only ratio SF4 drops 086 problem size rises 96 All algorithms excluding anytime algorithm reach 95 accuracy randombased deployments Seemingly SF4 SF4g signiﬁcantly better nodebased deployments agentbased ones Statistical signiﬁcance Table 9 shows ANOVA test result algorithms SF2 SF4g SF5 The calculated F value 2017751 greater critical value F 396347 Thus performances algorithms signiﬁcantly different However Table 10 implies great difference SF2 SF5 calculated F value 245835 smaller critical value 396347 Computation time As far computation time concerned shown Fig 2 logarithmic scale anytime algorithm time consuming The disjointbased SF4 fastest algorithm algorithms The graphs computation times disjoint based group based split algorithms barely affected deployment methods employ However anytime algorithm converges faster nodebased deployments agentbased deploymentsthe computation time taken approximately 100 times problem size 48 Conclusion In setting s3 split algorithm SF5 anytime algorithm SF2 outperform algorithms terms solution quality However SF5 preferable SF2 SF5 converges solution faster SF2 Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 455 Fig 1 Experiment 3 Approximation ratios different algorithms setting s3 The xaxis represents problem size yaxis represents approximation ratio Experiment 4 Experiment 4 carried environment setting s4 nodes agents ratio 53 dps distributed s3 Table 11 contains results upper bounds approximation ratios algorithms With setting random based deployments achieve survivabilities 05 problem sizes 80 Using agent nodebased methods deploy agents result deployments upper survivability bounds exceeding 097 Moreover ﬁrst time agentbased method result better deployments nodebased method differences small 001 Since upper bounds high assume real survivability deployments highwhich suggests deployments agent deployed nodes network andor valid future networks high survivability As far accuracy algorithms concerned algorithms exhibited excellent accuracies exceed 097 In particular disjointbased algorithm SF4 split group algorithms SF5 SF4g able achieve approximation ratios 0998 This fact nodes agents resources available node decreases compared Experiment 3 Thus agents disjoint wrt locations enables algorithms especially disjoint group algorithms perform Statistical signiﬁcance Since algorithms displayed good solution quality performed ANOVA test order assess statistical signiﬁcance The test revealed signiﬁcant difference depicted results reported Table 12 calculated F value 109514 greater critical value F 26625 We test data anytime algorithm SF2 groupbased algorithm SF4g split algorithm SF5 In Table 13 notice signiﬁcant difference performances 3 algorithms calculated F value 216635 smaller critical value 307376 456 Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 Fig 2 Experiment 3 Computation time different algorithms setting s3 The xaxis represents problem size yaxis computation time logarithmic scale Table 9 ANOVA results 3 algorithms SF2 SF5 SF4g Experiment 3 agentbased deployments problem size 64 The level signiﬁcance required set 005 Between algorithms Residual Total Sum squares SS 002316 008953 011269 Degrees freedom df 1 78 79 Mean square MS 002316 000115 F value pvalue F crit 2017751 2412E05 396347 Table 10 ANOVA results 2 algorithms SF2 SF5 Experiment 3 agentbased deployments problem size 64 The level signiﬁcance required set 005 Between algorithms Residual Total Sum squares SS 000189 005998 006187 Degrees freedom df 1 78 79 Mean square MS 000189 000077 F value pvalue F crit 245835 012095 396347 Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 457 Fig 3 Experiment 4 computation time different algorithms setting s4 The xaxis represents problem size yaxis computation time logarithmic scale Table 11 Experiment 4 Upper bounds approximation ratios different algorithms setting s4 Problem size n20 a12 n30 a18 n40 a24 n50 a30 n60 a36 Deploy method nodebased agentbased randombased nodebased agentbased randombased nodebased agentbased randombased nodebased agentbased randombased nodebased agentbased randombased Upper bound 0972045 0980811 0774173 0973543 0987256 0753271 0979059 0989146 0609391 0971718 0988569 0535532 0978591 0983952 0427743 Anytime SF2 099988 0999845 0991724 0999922 099979 0991622 0999723 0999588 0991255 0999661 0999398 0990589 0999681 0999217 0976279 Disjoint SF4 0999971 099981 0999837 0999965 0999535 0999918 0999969 0999269 0999639 0999968 0999136 0999655 0999923 0998105 0998948 Split SF5 0999996 099996 0999998 0999983 0999852 0999985 0999985 0999729 0999895 099989 0999649 0999775 0999957 0999344 0999663 Groupbased SF4g 0999996 099994 0999999 0999988 0999823 0999983 0999983 0999681 0999889 0999895 0999638 0999787 0999971 0999097 0999713 458 Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 Table 12 ANOVA results 4 algorithms SF2 SF4 SF5 SF4g Experiment 4 agentbased deployments problem size 64 The level signiﬁcance required set 005 Between algorithms Residual Total Sum squares SS 515015E06 244542E05 296043E05 Degrees freedom df 3 156 159 Mean square MS 171672E06 156758E07 F value pvalue F crit 109514 14427E06 26625 Table 13 ANOVA results 3 algorithms SF2 SF5 SF4g Experiment 4 agentbased deployments problem size 64 The level signiﬁcance required set 005 Between algorithms Residual Total Sum squares SS 409349E07 110541E05 114634E05 Degrees freedom df 2 117 119 Mean square MS 204675E07 944791E08 F value pvalue F crit 216635 011917 307376 Table 14 Experiment 5 Upper bounds approximation ratios different algorithms setting s1 larger space ratio 34 Problem size n18 a30 n24 a40 n30 a50 Deploy method nodebased agentbased randombased nodebased agentbased randombased nodebased agentbased randombased Upper bound 0973211 0976032 0094253 0980687 0980855 0042501 0983294 0982777 0070558 Anytime SF2 0981061 0973769 0979052 0980291 098326 0981894 Treebased SF3 098647 0986316 0991792 0992817 0975502 0975746 Disjoint SF4 096855 0964855 0978524 0976784 0982723 0978989 Split SF5 0998956 0999059 099866 0998752 0998131 0997898 Groupbased SF4g 098707 0988083 0994861 099174 0994358 0994035 Computation time We computation times Fig 3 unlike shown Experiment 3 anytime algorithm SF2 Experiment 4 converges pretty fast matter type deployment employed As explained resulting deployments Experiment 4 locations agents network independent Consequently suppose Eq 2 importance sum term k k 1 M value Eq 2 quickly decreases increase k Therefore anytime algorithm converge faster Experiment 4 Experiment 3 Again disjoint based algorithm SF4 eﬃcient Conclusion We conclude settings like s4 relatively little overlap agents loca tions deployments disjointbased algorithm SF4 best algorithm approximation returns solutions fast Experiment 5 Experiment 5 repeats Experiment 1 setting s1 increased space ratio nodes agents 23 34 We report survivability results Table 14 Compared results Experiment 1 Table 1 ﬁrst noticeable difference results agentbased nodebased deployments In particular large increase upper bounds actual survivabilities 03044 Table 1 097 Table 14 Again include survivabilities returned random based deployments table relatively low Another noticeable change current setting tree based algorithm SF3 longer favoriteit returns lower survivabilities split group algorithms Moreover accuracy lower disjoint based algorithm SF4 problem size 80 When resources accommodate agents nodes valid future networks deployments compared Experiment 1 Consequently valid future networks high survivabilities included computation SF3 Thus SF3 set experiments perform Experiment 1 Statistical signiﬁcance Again performed ANOVA results round different algorithms Table 15 suggests differences performances wrt solution qualities different algorithms signiﬁcant F value 469782 greater critical F value 241796 Computation Time Table 16 shows SF3 timeconsuming algorithm problem size 80 needs 100 times computation time split group algorithms Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 459 Table 15 ANOVA results ﬁve algorithms Experiment 5 agentbased deployments problem size 64 The level signiﬁcance required set 005 Between algorithms Residual Total Sum squares SS 000325 000337 000662 Degrees freedom df 4 195 199 Mean square MS 000081 1730E05 F value pvalue F crit 469782 1303E27 241796 Table 16 Experiment 5 Computation time microseconds different algorithms setting s1 larger space ratio 34 Problem size n18 a30 n24 a40 n30 a50 Deploy method nodebased agentbased nodebased agentbased nodebased agentbased Anytime SF2 33674 33253 117114 224809 284858 143220 Treebased SF3 Disjointbased SF4 19510 19460 146123 148476 838123 839241 17 15 24 20 30 24 Split SF5 2372 2224 4844 4576 9177 8744 Groupbased SF4g 1734 1516 2800 2476 4299 3481 Table 17 Recommendations selection algorithms different settings different criteria Setting s1 s4 s2 s3 s5 s2 s3 s4 s5 Resulting deployment overlaps agents locations overlaps agents locations overlaps agents locations overlaps agents locations Solution requirement Recommended algorithm quality time quality time quality time time critical important quality SF3 SF4 SF5 SF4 Conclusion Compared results Experiment 1 Experiment 5 tree based algorithm SF3 longer favorite algorithm Instead split algorithm SF5 outperforms returns high quality solutions relatively short computation time 54 Summary discussion We provide recommendations choice algorithms Table 1712 assuming nodebased agentbased deployment methods applied We settings like s1 node failures distributed dramatically resources available network limited tree based algorithm SF3 performs extremely However case setting s4 node failures distributed dramatically deployments agents disjoint locations wrt agents disjoint based algorithm SF4 best algorithm Moreover SF4 recommended applications fast computation time critical requirement long deployments result overlaps agents locations generated setting s1 The group based algorithm SF4g improvement SF4 As result SF4g returns higher survivability SF4 takes longer time As case SF4 algorithm applied environments agents disjoint locations nodes The anytime algorithm SF2 applied applications require ﬂexible adjustments solution quality computation timethe solution returned SF2 accurate possible long time affordable The split algorithm SF5 general heuristic algorithm provides good approximations However time critical preferable use faster heuristic algorithm like SF4 12 We recommendations based observations experimental results It possible inaccurate deploy ments 460 Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 6 Related work We introduced probabilistic survivability model algorithms based idea replication In section ﬁrst brieﬂy review work fault tolerance particularly replication distributed systems multiagent survivability We discuss replication based approaches multiagent systems 61 Fault tolerance distributed systems Fault tolerance ability behave correctly presence faults It aims increase dependability ability perform service justiﬁably trusted 4 3 detailed comparison Fault tolerance extensively studied distributed systems usually considered property Research faulttolerant distributed computing aims making distributed systems reliable handling faults complex computing environments 19 In order build fault tolerant ﬁrst step specify faults subject tolerant Fault detection techniques identify presence error Fault handling methods diagnosing faults eliminating state The choice different techniques strongly dependent underlying fault assumption We refer 1019 detailed introductions fault tolerance techniques distributed systems An important characteristic distinguishes multiagent systems traditional distributed systems autonomy Autonomy makes MASs robust Consequently fault tolerance techniques designed distributed systems diﬃcult directly apply multiagent systems Furthermore notoriously diﬃcult design fault tolerant systems 10 mention fault tolerant multiagent systems autonomy Replication wellknown fault tolerance method distributed systems Wiesmann et al 43 review replica tion approaches distributed systems according 1 failure transparency clients 2 server determinism Services implemented multiple replicas multiple servers There mainly types replication protocols active replication passive replication semiactive replication The key concept active replication replicas receive process incoming request client concurrently The replicas deterministic Therefore failures trans parent clients replica fails process requests In contrast active replication passive replication replica called primary replica contacted clients The primary replica processes requests clients sends update messages replicas The passive replication able tolerate nondeterministic servers And requires computation resources active approach However suffers longer recovery delays primary replica fails Semiactive replication involve determinism problem time replicas need nondeterministic decision leader replica makes choice sends The selection replication protocol dependent environment failure rate application requirements We refer 2043 details replication distributed systems The traditional replication based fault tolerant approaches distributed systems usually deﬁne replication protocols explicitly statically design time Recently dynamic data replication techniques investigated Lin et al 31 propose centralized dynamic object replication algorithm guarantees t copies objects exist distributed Their goal minimize total service cost incoming requests The tavailability guaranteed time instant reported Wolfson et al 44 The focus replication techniques distributed computing mainly replication protocols algorithms Our work differs theirs mainly 1 develop replication protocol introduce method measure quality replications 2 require measure entire set agents survive consider individually approaches fault tolerant distributed systems 62 Multiagent survivability The concept survivability introduced means protecting critical systems In earlier work Ellison et al 13 deﬁne survivability capability fulﬁll mission timely manner presence attacks failures accidents Knight et al 2526 precise deﬁnition survivability based speciﬁcation survivable complies survivability speciﬁcation Their deﬁnition requires complete designed survivability speciﬁcation contains elements However major open challenges applying deﬁnition multiagent systems diﬃcult deﬁne elements speciﬁcation enumerating states multiagent encounter open Internet style environment Survivability investigated context multiagent systems recently UltraLog project 16722 Ul traLog aims ensuring survivability military logistics applications deployed largescale distributed multiagent dynamic hostile environments In approach set measures performance determine overall success include instance performance availability integrity They apply hierarchy control loops guide survivability Their efforts focus architectural issues As survivability solutions built Cougaar Cognitive Agent Architecture framework order apply approach survivability develop multiagent applications Cougaar UltraLog extensions tools Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 461 As emerging discipline survivability builds related topics fault tolerance security reliability performance veriﬁcation testing There multiple dimensions survivability different systems applications Thus precise deﬁnition goals measurements application success survivable highly depends applications Our approach multiagent survivability distinguished theirs follows We study survivability context multiagent systems We propose general intuitive way deﬁne survivability multiagent application We developed survivability algorithms able provide precise measurements multiagent applications survive different environments In contrast UltraLog approach applicability limited speciﬁc agent platform survivability model widely easily applied multiagent applications independently agents development plat form 63 Agent replication approaches Introducing redundant agents multiagent eﬃcient way improve survivability MAS Kumar et al 29 propose adaptive multibrokered agent applies replication broker agent middle agent As reduced number brokers degrade systems performance hypothesize broker team commits maintain speciﬁed minimum number brokers Thus robust broker unavailability However number brokers predeﬁned broker teams guidance algorithms In addition consider potential failures brokers ignore possible faults regular agents Cloning merging agents support load balancing discussed 1139 Fan 14 furnishes local agent capability loadbalancing He proposes BDI mechanism formally model agent cloning balancing agent workloads These agentcloning approaches mainly target agents overload problem aim optimally deploy agents survivability multiagent maximized In context mobile agent systems survivability focuses avoid loss agents execution Mishra Huang 34 introduce Dependable Mobile Agent System recover node communication failures Middle agents distributed node network monitor movement agents ensure agents arrive destinations reliably Their approach deploys agent replica node network However replication expensive Furthermore account resource availability network We propose survivability algorithms measure quality deployments Thus possible guide agent replication based probabilistic notions node failuressomething consider Marin et al 3233 develop Dynamic Agent Replication framework design reliable distributed applications Every agent MAS group replicas replication scheme applied agent At runtime agent tune internal parameters number replicas In framework replication costs assessed simulations Fedoruk Deters 1617 hide agent replication methods inside agent They propose transparent replication technique makes group proxy act interface replicas rest multiagent In manner proxies group appear single entity control execution state management replicate group In 33 1617 importance replicating agents optimally realized intend minimize additional complexity loads introduced use replication However lack quality measurement replication approaches MAS designers responsibility decide advance agent deploy The automatic adaptive replication methods addressed 5821 Briot et al 821 propose replication framework allows adaptive control replication method copies agent replicate based criticality agent In order measure criticality agent authors propose strategies agents degree dependence agents roles organization plan After estimating criticality agents number replicas agent computed taking account criticality agents minimum required replicas current available resources Similarly Bora et al 5 decide number replicas measuring agents importance The feedback control theory dynamically evaluate criticality agents based information failure rates agents roles After receiving criticality value feedback control mechanism agent organization calculates desired number replicas starts clone kill replicas subject available resources The approaches 5821 identify criticality single agent order deploy agent replicas However lack quality measurement resulting deployments team agents Our approach focuses application level given task MAS measure survivability team agents work cooperatively perform task based information possible failures hosting nodes It interesting integrate information agents criticality MAS approach computing survivability In peertopeer applications order maintain desired availability Ranganathan et al 37 deal issues determining number replicas ﬁle location new replicas Similar model express average probability node remaining operative stability includes node failures communication failures disconnection node network They compute probability replicas ﬁle unavailable 462 Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 manner calculate single agents survivability Such computation problem polynomial solvable They study availability unavailability application consists multiple agents ﬁles 64 Discussion In paper introduced abstract probabilistic failure model disconnect probability function represent probability physical failure node result malfunction deployed multiagent application Our assumptions failure model 1 independence failures nodes 2 fully connected network We assumptions cause failures failure detection method failure rate calculation disconnection probability These detailed failure model ap plied speciﬁc applications For instance disconnect probability node estimated statistical data measured round trip time node It account time probabilistic failure model 23 We shown Section 21 possible ways specify disconnection probability context CoAX application Skoda application Tichys ship control application Furthermore second sumption fully connected networks assumed paper relaxed way For example given partially connected agent disconnection node considered event node unreachable In way model represent different environments MAS application deployed works Our goal paper develop replication scheme multiagent systems Instead assume deployment replicas given introduce algorithms measure survival level deploy ment Hence approach hypotheses replication protocol implementation active passive replication deployment methods However select use existing replication protocols deployment methods described related work speciﬁc applications For instance disaster management mili tary applications fast recovery delay critical active replication protocol chosen fast survivability algorithm estimate current deployment meets minimal survival requirement Another ex ample multiagent application consisting highly heterogeneous agents apply methods 58 deploy replicas subject importance agents By selecting proper survivability algorithm deployment methods able ﬁnd high quality multiagent deployment Therefore contribution work ability guide replication assessing resulting deployments associated current condition failure model Likewise different ways maintaining consistency multiple replicas piece data software In databases long history methods 4344 maintain consistency multiple replicas These primarily use checkpointing methodstimestamps adorn changes data consistency maintained timestamps update replicas maintain consistency Many papers MASs distinguish state agent given point time behavior agent encoded certain types rules 40 In cases state stored relational database The rules change agent operates need ensure states different agents synchronized The numerous techniques synchronize replicated relational databases applied Another relevant problem extensively studied understanding nodes network 1528 Our framework conjunction existing method determine network node goes 7 Conclusion Kraus et al 27 ﬁrst propose probabilistic notion fault tolerance multiagent based replication principles Their algorithms solving survivable deployment problem ﬁnding deployment highest survival probability include elements 1 An algorithm solve deployment survivability problem measuring survival probability given deploy ment assumption ignorant relationships node failures network 2 An algorithm uses previous algorithm ﬁnd deployment highest probability survival In paper focused deployment survivability problem studied problem assumption independence node failures We following contributions 1 We proven deployment survivability problem NPhard independence assumption hard approximate factor 2 V 1cid2 2 We proven survivable deployment problem NPhard independence assump tion Moreover proven polynomialtime approximation algorithm bound provide maximally bad answers cases P NP Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 463 3 We presented algorithms accurately compute probability survival given deployment One algorithms exponential number agents exponential number nodes network Thus quantities small use algorithm accurately compute survival probability deployment 4 We presented set ﬁve different heuristic algorithms compute survival probability deployment 5 Finally compared performance algorithms according quality solution close solution heuristic correct solution bound solution cases solution accurately computed terms computation time In cases tried use statistical signiﬁcance tests determine inferences statistical signiﬁcance We ﬁve different environmental settings Our results performance algorithms tree based algorithm SF3 disjoint based algorithm SF4 group based algorithm SF4g anytime algorithm SF2 vary greatly environment settingsthat algorithms appropriate certain settings In contrast split algorithm SF5 demonstrated relatively stable performance terms quality Nonetheless running time dependent setting problem size In addition believe existing MAS replication frameworks beneﬁt proposed algorithms order compute survival level resulting deployments result better fault tolerant multiagent systems Integrating proposed method existing replication frameworks interesting address future work One problem approach described paper static sense adapt changes affect survivability MAS However provides basis development adaptive approach An adaptive approach built learning compute survival probability candidate deployment For instance change failure network algorithms proposed paper ﬁrst quickly check survivability current deployment low invalid If case algorithms calculate better new deployment according new environment parameters agents redeployed new locations accordingly In manner able ensure maximal survivability agent application dynamic changing environments A second problem developed survivability algorithms centralized So agents distributed network survivability algorithm resides single node One solution problem distributed algorithms built centralized survivability algorithm We currently working extended distributed adaptive approach based previous work 41 A major topic future work use mixture assumptions computing probability sur vival MAS As paper shows CoAX example Skoda example ship onboard control example applications mixture assumptions node failures For example CoAX example node failures UK US independent node failures sensor nodes However dependencies failures sensor nodes One way adapt probabilistic conjunction strategies PCSs proposed 30 extension notion triangular norm 24 PCSs functions satisfying certain axioms provide methods compute tightest probability interval event e1 e2 given probability interval e1 e2 Lakshmanan et al 30 propose set axioms PCSs obey They ignorance node fail ures assumption 27 independence assumption paper special cases PCSs Future work examine replace disconnect probability functions proposed paper extended disconnect probability function epd expresses statements edpn1 03 denoting n1s disconnect probability 03 epdn1 n2 epdn1 epdn2 conjunction strategy Thus syntax represent epds allow joint probabilities speciﬁed A disconnect probability speciﬁcation set equations form men tioned A major challenge extend methods results paper disconnect probability speciﬁcation type There interesting directions future work related topic In realworld applica tions essential maintain minimal level survival Thus variant current approach develop algorithms deployments meet minimal survival requirements Another topic study survivabil ity dynamically changing multiagent instead ﬁxed This useful multiagent applications agents connected intermittently Another issue tradeoff survivability multiagent performance Ensuring survivability costly example state synchronization replicas computing survivability Consequently comes cost actually providing services multiagent supposed provide Such problems signiﬁcant multiagent applications scarce resources Thus worthwhile study concerns balanced Yet important issue gaming For example suppose methods described paper implement MAS security application A user knows techniques paper try utilize knowledge order break security This leads game theoretic framework need reason adversary use knowledge order break The root node game tree consists state The children node refer possible states resulting action adversary The needs order determine best respond users action This important area plan study future 464 Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 References 1 Ultralog program site httpwwwultralognet 2 D Allsop P Beautement M Kirton J Bradshaw N Suri E Durfee C Knoblock A Tate CW Thompson Coalitions agent experiment Multiagent cooperation International Coalitions IEEE Intelligent Systems 17 3 2002 2635 3 A Avizienis J Laprie B Randell Fundamental concepts dependability Proceedings Third International Workshop Information Security ISW 2000 4 A Avizienis JC Laprie B Randell C Landwehr Basic concepts taxonomy dependable secure computing IEEE Transactions Dependable Secure Computing 01 1 2004 1133 5 S Bora O Dikenelli Applying feedback control adaptive replication mechanisms fault tolerant multiagent organizations SELMAS 06 Pro ceedings 2006 International Workshop Software Engineering LargeScale MultiAgent Systems New York NY USA ACM 2006 pp 512 6 M Brinn J Berliner A Helsinger T Wright M Dyson S Rho D Wells Extending limits DMAS survivability The ultralog project IEEE Intelligent Systems 19 5 2004 5361 7 M Brinn M Greaves Leveraging agent properties assure survivability distributed multiagent systems AAMAS 03 Proceedings Second International Joint Conference Autonomous Agents Multiagent Systems New York NY USA ACM 2003 pp 946947 8 JP Briot Z Guessoum S Aknine AL Almeida J Malenfant O Marin P Sens N Faci M Gatti C Lucena Experience prospects control strategies selfreplicating multiagent systems SEAMS 06 Proceedings 2006 International Workshop SelfAdaptation SelfManaging Systems New York NY USA ACM 2006 pp 3743 9 TH Cormen CE Leiserson RL Rivest Introduction Algorithms MIT Press New York 1990 10 F Cristian Understanding faulttolerant distributed systems Communications ACM 34 2 1991 5678 11 K Decker KP Sycara M Williamson Cloning intelligent adaptive information agents C Zhang D Lukose Eds MultiAgent Systems Method ologies Applications SpringerVerlag 1997 pp 6375 12 JL Devore Probability Statistics Engineering Sciences 4th edition Wadsworth Publishing 1995 13 RJ Ellison DA Fisher RC Linger HF Lipson TA Longstaff NR Mead Survivability Protecting critical systems IEEE Internet Computing 3 6 1999 5563 14 X Fan On splitting cloning agents Technical Report 407 Turku Center Computer Science Turku Finland 2001 15 F Feather D Siewiorek R Maxion Fault detection Ethernet network anomaly signature matching Proceedings International Conference Communications architectures protocols applications September 1317 1993 San Francisco CA USA pp 279288 16 A Fedoruk R Deters Improving faulttolerance replicating agents C Castelfranchi WL Johnson Eds Proceedings First International Joint Conference Autonomous Agents MultiAgent Systems Bologna Italy ACM Press 2002 pp 737744 17 A Fedoruk R Deters Using dynamic proxy agent replicate groups improve faulttolerance multiagent systems AAMAS 03 Proceedings Second International Joint Conference Autonomous Agents Multiagent Systems New York NY USA ACM 2003 pp 990991 18 J Galambos I Simonelli Bonferronitype Inequalities Applications Probability Applications SpringerVerlag 1996 19 FC Gartner Fundamentals faulttolerant distributed computing asynchronous environments ACM Computing Surveys 31 1 1999 126 20 R Guerraoui A Schiper Softwarebased replication fault tolerance IEEE Computer 30 4 April 1997 6874 21 Z Guessoum N Faci JP Briot Adaptive replication largescale multiagent systems faulttolerant multiagent platform SIGSOFT Softw Eng Notes 30 4 2005 16 22 A Helsinger K Kleinmann M Brinn Framework control emergent survivability multiagent systems AAMAS 04 Proceedings Third International Joint Conference Autonomous Agents Multiagent Systems Washington DC USA IEEE Computer Society 2004 pp 2835 23 F Klein M Tichy Building reliable systems based selforganizing multiagent systems SELMAS 06 Proceedings 2006 International Workshop Software Engineering LargeScale MultiAgent Systems Shanghai China ACM 2006 pp 5158 24 EP Klement R Mesiar E Pap Triangular Norms Kluwer Academic Publishers ISBN 0792364163 2000 25 JC Knight EA Strunk Achieving critical survivability software architectures Architecting Dependable Systems II Lecture Notes Computer Science vol 3069 Springer 2004 pp 5178 26 JC Knight KJ Sullivan MC Elder C Wang Survivability architectures Issues approaches DARPA Information Survivability Conference Exposition Los Alamitos CA IEEE Computer Society Press 2000 pp 157171 27 S Kraus VS Subrahmanian NC Tacs Probabilistically survivable MASs G Gottlob T Walsh Eds IJCAI03 Proceedings Eighteenth Inter national Joint Conference Artiﬁcial Intelligence Acapulco Mexico August 915 2003 Morgan Kaufmann 2003 pp 789795 28 B Krishnamurthy S Sen Y Zhang Y Chen Sketch based change detection Methods evaluation application Proc 3rd ACM SIGCOMM Confer ence Internet Measurement Miami Beach FL 2003 pp 233247 29 S Kumar PR Cohen HJ Levesque The adaptive agent architecture Achieving faulttolerance persistent broker teams E Durfee Ed The Fourth International Conference MultiAgent Systems ICMAS 2000 IEEE Press 2000 pp 159166 30 VS Lakshmanan N Leone R Ross VS Subrahmanian Probview A ﬂexible probabilistic database ACM Transactions Database Sys tems 22 3 1997 419469 31 WJ Lin B Veeravalli A dynamic object allocation replication algorithm distributed systems centralized control Int J Comput Appl 28 1 2006 2634 32 O Marin M Bertier P Sens DARXa framework faulttolerant support agent software ISSRE 03 Proceedings 14th International Symposium Software Reliability Engineering Washington DC USA IEEE Computer Society 2003 pp 406418 33 O Marin P Sens JP Briot Z Guessoum Towards adaptive fault tolerance distributed multiagent systems Proceedings 3rd European Research Seminar Advanced Distributed Systems ERSADS2001 2001 pp 195201 34 S Mishra Y Huang Fault tolerance agentbased computing systems Proceedings 13th ISCA International Conference Parallel Distributed Computing Systems 2000 pp 413426 35 R Mittu R Ross Building coalitions agent experiment coaxintegration multimedia information gccsm impact Proceedings 9th International Workshop Multimedia Information Systems Ischia Italy pp 3544 36 M Pechoucek V Marik Review industrial deployment multiagent systems Technical Report Gerstner Laboratory Agent Technology Group Department Cybernetics Czech Technical University Prague Czech Republic Rockwell Automation Research Center Prague Czech Republic httpagentsfelkcvutczteaching33ui2onapplicationspdf 37 K Ranganathan A Iamnitchi I Foster Improving data availability dynamic modeldriven replication large peertopeer communities CCGRID 02 Proceedings 2nd IEEEACM International Symposium Cluster Computing Grid Washington DC USA IEEE Computer Society 2002 p 376 38 D Roth On hardness approximate reasoning Artiﬁcial Intelligence 82 12 1996 273302 39 O Shehory KP Sycara P Chalasani S Jha Increasing resource utilization task performance agent cloning ATAL 98 Proceedings 5th International Workshop Intelligent Agents V Agent Theories Architectures Languages London UK SpringerVerlag 1999 pp 413426 40 VS Subrahmanian P Bonatti J Dix T Eiter S Kraus F Ozcan R Ross Heterogeneous Agent Systems MIT Press Cambridge MA 2000 Y Zhang et al Artiﬁcial Intelligence 173 2009 437465 465 41 VS Subrahmanian S Kraus Y Zhang Distributed algorithms dynamic survivability multiagent systems Proc Computational Logic Multi Agent Systems 4th International Workshop CLIMA IV Lecture Notes Computer Science vol 3259 SpringerVerlag 2004 pp 115 42 P Tichy P Slechta F Maturana S Balasubramanian Industrial MAS Planning Control Lecture Notes Computer Science vol 2322 Springer Verlag 43 M Wiesmann F Pedone A Schiper B Kemme G Alonso Understanding replication databases distributed systems TH Lai Ed Proceed ings 20th International Conference Distributed Computing Systems ICDCS2000 IEEE Computer Society Technical Committee Distributed Processing 2000 pp 264274 44 O Wolfson S Jajodia An algorithm dynamic data distribution Workshop Management Replicated Data 1992 pp 6265 45 Y Zhang E Manister S Kraus VS Subrahmanian Approximation results probabilistic survivability Second IEEE Symposium MultiAgent Security Survivability Philadelphia USA 2005 pp 110