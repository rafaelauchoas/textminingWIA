Artificial Intelligence 85 1996 344 Artificial Intelligence A systematic methodology cognitive modelling R Cooper J Fox b J Farringdon T ShalliceC Department Psychology Birkbeck College Malet Street London UK WC 1E 7HX h Advanced Computation Laboratory Imperial Cancer Research Fund London UK Department Psychology University College London London UK Received January 1995 revised August 1995 Abstract implementation The development typically ad hoc theories considerably justified mechanisms pragmatic principles guide process Consequently testing computational models cognition computational mod details aspects theories frequently hard identify We argue attempts assisted availability appropriate specifying cognitive models Such languages 1 syntactically clear 3 executable 4 explicitly support divi 2 operationally defined In support arguments introduce Sceptic theory implementation requirements specification generally agreed methodological els conflate empirically essential theoretical construct cognitive languages succinct sion executable including Soar Sceptic successfully technical appendix The sim details Sceptic specification seen plicity Sceptic Soar permits aids investigation alternative computational functioning working memory Soar Although focus Soar thrust work concerned general methodological essentials underlying cognitive assumptions We demonstrate theoretical language goes way satisfying theory reporting issues cognitive modelling number cognitive models involving modifications Soar included implement experiments 1 Introduction The natural complexity considerable methodological experimental design data analysis Notwithstanding cognitive variability ordinary human behaviour creates need students experimental research Consequently routinely sophistication cognitive rigorous psychology trained ambiguities cognitive theory Corresponding author Email rcooperpsycbbkacuk QOO43702961500 SSDIOOO4370295001123 Copyright 1996 Elsevier Science BV All rights reserved research arc judged public largely uncontroversial situation informal Theories presented criteria experimental On theoretical psychology 329421 1 draw natural boxarrow notation underlyin g assumptions argued attractive metaphors 39 p 4021 This informal approach restricts statements satisfactory Most theoretical discussion language metaphors terms box arrow diagrams 4 I 1 generally poorly specified resolve clear theoretical raise obscurities fields ability In response cognitive scientists looked connectionist theories Frequently formulating niques Such techniques aspects essential overlooked Computational drawn theories simulation theorys symbolic turned computational modelling developing presenting satisfactory ways tech proposals detailed specification including aspects allow predictions implementation techniques lead precise statements theory forcing lcad techniques programming predictions delivered Sound methodological principles necessary cognitive potential com principles exploration foundation Such exper empirical data theory science Without allows programs direct conflict standard scientific method evaluating computational mechanisms little theoretical replicate putational clear dangers Firstly unconstrained alternative imental programming strategy testing phenomena derive implementation asserted putational theoretically motivated Without appropriate methodological distinction implementation results supposedly theory The abstract nature psychological details ensured Moreover form reverse engineering program explanation behaviour Secondly com theory include aspects principles theoretically motivated aspects theory lead situations program details obscure programs understanding implementation computational unconstrained independence simulation completeness In addition question instantiation required order theorising irrelevant requires implementation The utility sound systematic methodologies formal science successfully software development methodologies example developed specifying program designs linguistics 121 uncertainty AI technical discipline applied Computer duction systematic languages ily interested furthermore tional 451 There general consensus tematic programming methods yields deeper understanding software grams underlying engineers ical investigation better principles While central techniques frameworks leads clearer communication decision making 5 191 reasoning necessarily facilitates details determined seen rapidly number fields recent years intro formal 1441 AI technologists primar natural science areas computa representation 152 I knowledge 3747 I expert systems increased use formal design sys assessment pro greater predictability independent methods tools mathematicians natural sciences core empir presenting formulating computational R Cooper et alArtijicial Intelligence 85 1996 344 5 developing testing cognitive science computational In particular Newell argued time going producing advocated improved modelling methodologies comes theories stronger methodology likely empirical theories cognitionbefore advance certainly development goals methods currently Further motivation examination psychology unified number theoretical clashes increases square cube 233 1401 seen culmination theorists aim cumulative fashions represents programme details advances hard core In case Soar programs predecessors development 31 argues tradition Imre Lakatos progression provide adequate 301 In vein Newell research programme incarnation understanding longargued position theory prove aiming embodied database doubles 3 1 p 251 Soar psychological transitory avoid paradigmrelated work Soar community 25 In incorrect peripheral series related account theoretical possible building progressively implementing documenting like psychological available methodolo theories match At point question currently computational gies designing Newells challenge Take Soar From point view theoretical methodology current cognitive psychological modelling Soar sophisticated infor Statements Soar theory cognition mal set claims assumptions ordinary cognitive processing 3 1401 As argue substantial gap English realisation theory LISP informal statements C program This gap important cognitive question theory degree realisa lo This criticism Soar Soar community tions theory general methodological weakness undermines need able express theories ambiguously generally ways open detailed scrutiny Soar truly said wellarticulated technologies easily evaluated evaluating Soar It brings said accurate computational implementations research We computational consequences particular degree expressed enmeshed theories This paper describes attempt accepted criteria adequacy easily compared problems applying specification address executable science Our goal theoretical proposals avoids far possible lessons language diffi putative provide way executing animating explic properties interdependencies provide notation succinctly language In addition determine truly behave Finally earlier Such language proposals formulating AI language expressing culties mentioned clearly cognitive mechanisms theory itly support details distinction theoretically motivated aspects implementation We begin essentially theory articulation arguing theoryimplementation highlighting utility executable requirements analysis We survey existing forms failings variety current methods necessity specification languages distinction In Section 3 introduce Sceptic executable theories language specification chological issues detailed tive modelling reconstruction number extensive tational experimentation reconstruction We conclude discussion Sceptic annotated details Sceptic specification work reported developed methodological wider methodology theories including implement Soar discuss number current psy Section 2 Section 4 relates experience Sceptic cogni language Specifically consider largescale evidenced implementation Soar generality Sceptic use Sceptic addresses extent utility Sceptic facilitating evidenced experimental modifications compu Soar language For completeness role modelling cognitive modelling Soar given appendix While context symbolic modelling points apply equally connectionist modelling 2 Issues theory specification Central systematic methodology cognitive modelling techniques currently including natural description specitication theories Within cognitive psychology number techniques processing diagrams programs rarely approaches advantages problems examine addressed formal specifications Each In section consider failings forms theory articulation language descriptions information 21 Current forms theory cwticulutiott CL critique The relative merits approaches concrete example techniques theory specification clearly In following discussion Soar description described 233140 natural language Soar discussion procedural formal specification terms LISP C programs exist versions language Z 27 However whilst section current forms articulation methods description Soar comments relatively theories ACT 21 Mental Models 201 illustrated respect focus use appropriate program theory concentrate apply equally developed cognitive approach adaptively Soar information 341 Soar implements processing mechanism specialised body knowledge The Soar architecture resolve goals exploiting wellestablished space current goal elaboration decision phase Speaking goals resolving Soar sufficient knowledge knowledge embody solution impasse recursively resolve raise based modelling problem solving search problem use carry If If generate new goal making decisions data actions solve If subgoal succeeds goal solved directly loosely decisions assign particular context search cyclically retrieving knowledge automatically interpretations knowledge results relevant attempt phase R Cooper et alArtijcial Inrelligence 85 1996 344 7 impasse problem data learn resolved result available solving subgoal architecture parent goal context While able identify critical contextual new knowledge future use 211 Natural language diagrammatic descriptions language descriptions Soar literature processing psychological diagrams Such descriptions language techniques field The advantage descriptions There natural 3 1401 accompanied tend present Soar information employ allow force theorists preference existence rules essential Soar theory noncommittal precise mechanism position research principle undecidable 23 generally abstract They theory level abstraction details Soar example embodies set rules making certain choices decision making regard acceptable future perfectly regarded questions theory describing unnecessary details mechanism stated appropriate rules applied This Natural language descriptions severe disadvantages They poten derivation unequivocal limited precision This hinder abstract natural tially ambiguous predictions Furthermore tails theory affect Hunt Lute point reference detailed natural Soar detailed produce computationally allow filled indefinite number ways If variation concern longest presumably Soar Newells description having read book languagediagrammatic ensure programmers properties theory equivalent programs language descriptions higherlevel 18 p 4481 description 212 Procedural descriptions Many current psychological theories highly complex explanations interaction components functional modules As result theorys predic instantiations draws heavily theory theoretical theories vital establishing regard Soar community viewed unitary demonstrate attempting program components processes In case Soar status This unsatisfactory features program offer involving computational tions Soar different behaviour Soar implementation accounts statement treated having equal theoretical example theoretical results However way presumably force empirical 1 The particular algorithms rules remov ing working memory elements processing These designed primarily efficient operation correct neural If Soar architecture algorithms firing production conventional implementation matching embody computers 2 The choice preference different ways formulations theory somewhat semantics different operator selection fleshed 22243 1 I It clear implementations superior clearly aspect fluid Little hang details different Indeed choices different possible particular preference preference semantics 3 The generalised production semantics unclear sort evidence distinguish It hasty possibly unnecessary semantics claim Soar theory necessary simulation purposes language allows complex operations triggered directly productions input output governed specialised sensoreffecter product primitive processing input output arithmetic example mechanisms apparently arithmetic required cognitive These points highlight important difficulty equating program implementation details required solely achieve complete executable theory theory details unpredictable intentions essential claims theory compromise behaviour obscure theorist Given claimed predictions theory basis implementation open debate claim implementation makes point touched Hunt Lute want theory embody know psychological IX p 4481 simulation achieved parts program theory parts regarded choices convenience influences implementations programming testable Again theory 3 I 1 A concern procedural descriptions theories complex Soar directly theory modify difficult contemplate correspond specific theoretical assumptions runs Megabytes C code possible underlying isolating assumptions systematically modifying assumptions theoretical involved theorys design implementation isolate parts cf lo In case Soar outsiders accept theories particular investigate Soarlike computational realisation 213 Declarative specijications independent formal verification A description method language Z This mathematical Soar community program logic designed formal language based provide clear descriptions program details decomposed terms conditions specification firstorder circumstances permit hierarchy operations hold operation executed conditions hold program execution A Z specification specific clear statement description theory implementation reason worrying LISP C piece hardware nervous required behaviour program In principle technologyspecific 441 Roughly program described procedural program executable correctness implemented separate tissue The purpose Z specification Soar 271 primarily engineering The Z formalisation Soar It description Soar qua program specifies level abstraction necessary Soar qua psychological provide sound basis theory executable version stating clearly appropriate R Cooper et al Artificial Intelligence 85 1996 344 9 theory Consequently cognitive underlying Z specification makes distinction processes appear noted psychological provide explicit support If Z specification theory possible essential matters implementation Soar developed attempted distinction theoretical elements features capture Z procedural implementations 22 Requirements theory specification technique surveyed allow theories fail different ways Natural stated appropriate imprecise Procedural descriptions precise details conflating theory implementation languages better existing distinction specification From languages failings theory specification technique clarity succinctness separation The methods theory description support descriptions specification requirements diagrammatic theoryimplementation theoryimplementation required theorists language level abstraction abstract away implementation Formal explicitly distill executability Clarity language isolate aids isolation theoretical assumptions obscure notation The case executability current derive predictions general assumptions correctly attributed We refer separation theoretically motivated aspects line located simulation determined theories difficulties specification required directly order avoid interpretationambiguity theoretical excessive verbosity assumptions Succinctness problems natural clarity harmful established complexity complexity present attempting theory As noted complex behaviour number interacting separation theory implementation Finally complex behaviour displayed executable theory theoretical implementational aspects specification abovethelinebelowtheline located line implementation AIB division details 23 Executable specication languages cognitive modelling executable specification appropriate failings current articulation methods addressed We believe development language By mean language specify theory sense elaborated animated specified Such language precise behaviour specification specifying process allow mechanical distinction formal specification details Critically theory implementation language Z inappropriate claimed tolerate ambiguity reason model executed language support necessary algorithmic escape check language details Given current usage formal specification languages use phrase executable specification language requires science elaboration Van Harmelen Balder 45 summarise purposes forma1 specification languages l removal ambiguity l facilitation communication l ability discussion derive properties design absence implementation intended While claim work presented demonstrates specification language employed considerable points construct computational models include We view executable behave prescribing greater relevance support respect verification software theory behave As argued properties executability particular executable virtues cognitive scientist clarity succinctness address The aims psychologists describing cognitive mathematical theoretical ought specification abstraction attempting languages 24 A lB decompositiorl theories theories cognitive essential Executability implement implementation relevant requires overspecification behaviour complex helpful executability determined price As noted Section 212 typically aspects cognitive theory As theory precise way In brief claimed specification details argument scope theory According precise specification irrelevant details conflate obscure theoretically core theory intuitively However careful examination specifying keeping aspects Once qualified predictions clear distinction predictions requires theoretically motivated theory draw allowing important makes formal predictions Typically predictions point issue reveals kept distinct idea AIB decomposition irrelevant details theory executability aspects The problem argument course theory implementation theory implementation properly drawn drawn This details admitted essential argument details distinct implementation implementation details Now implementation details truly irrelevant adequate Thus theorist inputoutput implementation specification details functional mechanisms compute subcomponent finiteness considerations More commonly outputs given certain output inputs subcomponent specifying details algorithms function From point view implementation implemented theorist merely state constraints unique constraints necessarily determining lookup subject table reasoning JohnsonLaird logistic propositions tokens arbitrary illustrates 20 According second approach context theory syl mental models theory people construct beekeepers chemists These models consist number tokens proposition 20 p 971 crucial point mental models terms representing R Cooper et al Artificial Intelligence 85 1996 344 II embody knowledge inference drawn interpreting proposes constructing depicted irrelevant JohnsonLaird totally specified model This style theorising articulated sufficient precision It specify valid provided number entities 20 p 981 So tokens present particular constraints irrelevant details constrained constructing mental models testable yields procedure implementation The AB distinction testing variation matter implementation behaviour sensitivity aspects claimed aspects behaviour range alternate described implementation related models share A component explored Such investigations lowlevel behaviour implementations investigation B assumptions details AIB decomposition reveal degree line degree truly irrelevant Only behaviour invariant assumptions truly effectively delineates space shown allows space systematically highlevel assumptions dictate 38 explicitly neuropsychological syndrome space systems inputoutput deep space damaged number properties It postulated simulation 171 Plaut Shallice connectionist characterisation Shallice terms general conditions Hinton approach dyslexia This work involved representations haviour specific systems different erally exhibited details Hinton Plaut Shallice demonstrated justifiably empirically algorithms regions space implemented fact correspond learning classified implementation hypothesised inputoutput details properties damaged syndrome A number representations gen Thus varying certain aspects model shown declare A implementation imposed implementation aspects implementa details theories vary theory evolution realised implementation aspects previously It clear AIB distinction A B different involve incorporation theoretician priori The onus tion theoretically motivated B The proportion details tinction requires regarded hypothesis testable Thus aspects implementation theoretically motivated strategy generating justify embedded A component Nevertheless proper application AIB dis philosophy science endorses principle undecidable In sense AIB distinction falsification embodies aspects A component empirically A component aspect critical generally predicted property model defined occur result certain belowthe frequency socalled higher mixed errorsrrors similar expect given frequencies errors corresponded stimulus single dimension Thus basic assumptions implementations t One behaviours initially assumed basic assumptions actually line stimulus dimensionis resemble abovetheline 2 Applying assumptions logic It global behaviours model variations semantics Soar outlined preference suggests details Soars preference evaluation arc matter implementation Section 212 theory behaviour The AIB decomposition behaviour model variation aspect yielding measurable differences explore supposedly nonsignificant single abovetheline straints related abovetheline approach empirically allows constraints Section 43 gives example technique theories theory theories specifications explore related variant We summarise Abovetheline criticality properties abovethelinebelowtheline following way theoretically motivated They following distinction assumptions I falsifiability indicate 2 uniqueness failure program predict falsity A assumptions observed behaviour distinct A assumptions predict distinct behaviours In contrast belowtheline haviour subject changes I invariance program details theoretically motivated Their effect following sensitivity properties B details effect behaviour 2 noncompensatability A assumptions possible adjustment B details compensate failures In words behaviour brittle respect variation A assumptions bc robust respect variation B details In practice quantify The properties criticality idealisations develop A B components sensitivity bc appropriate categorical sensitivity contribution program Such approach advantages Firstly sufficiency competing itysensitivity theories address gramme criticalitysensitivity behaviour allow theory higher critical lower ratio given allow progress research pro terms increases quantified theoretical advances measured reality indices criticality ratio regarded superior data Secondly compareda theories ratio 3 Sceptic example executable specification language The particular Sceptic specification simulation cognitive modelling work production required modelling It plex timeevolving logical tems solving 461 executable specitication 9 161 Sceptic designed language capabilities language working executable combine implementation capabilities practical facilitate AI applications Though explicitly designed language design loosely It considered infuenced earlier modelling approximation rule systems tool reasons properties appropriate implementation including biological process simulations systems reasoning mechanisms 161 autonomous systems 36 control processes image interpretation com 481 sys medical problem 141 planning R Cooper et al Artcial Intelligence 85 1996 344 13 theories retrievalupdate interpreter cognitive b The language assumed dressable memory agation modes It simple expressive tation data structures easily described c supports number mechanisms including patterndirected sequential processing commonly processing content ad parallel data prop syntax assists clear succinct processes execution model represen simple 31 The Sceptic language Sceptic originally formulated extension The primary additional device rule Crucially rewrite control aspects program allows procedural 6 Prolog forward chaining control structure perspective cognitive modelling expressed purely declarative aspects expressed implemented conditional control terms rewrite rules distinguished standard Prolog structure Sceptic program execution Central modified gram consists specification state evolves events tests modify databasethe progresses Rewrite state trigger initial rules queried systems statewhich test state basis rules A Sceptic pro state set rules specify particular response rewrite time state changes 311 Syntax Sceptic inherits syntax Prolog All data represented Prolog terms consist relation zero parameters block1 augmentationblock1 colourred productionpq r The example productionpq arguments pq representing r representing r represent production antecedent matches working memory creation working memory element consequent rule p q Conditional rewrite rules following syntax InTrigger Conditionl ConditionM OutTriggerl OutTriggerN InTrigger parameters augmentation Conditions Obj ect AttributeValue types condition distinguished OutTriggers Prolog variables form Prolog indicated terms possibly containing strings variables capitalised example contains Two test condition holds current program state We refer state testers Secondly variables types trigger querying output primi atomic information We distinguish builtin operations triggers nondecomposable generatorsconditions state generating instantiate Firstly tives database modihcation terms conditional rewrite rules primitives compound triggers defined pushed processed The execution Sceptic program cg primitive database modification governed stack holds unprocessed issued Sceptic prompt item item As primitive executed directly Otherwise If conditions Sccptic rule lefthand rewrite elements expansion trigger pushed consists indefinite number trigger event check conditions process actions continues stack initiated trigger pattern triggers Execution This pattern stack item taken stack generates trigger event If trigger event operation expanded symbol satisfied moment Trigger righthand stack Execution Sccptic program cycles generated event occurs triggering Sccptic variables case variables arc hound ussignin g values step Ic0hand conditions Such conditions match explicitly stored left rewrite symbol conditions multiple copies actions checking term position matching variables Variables Sceptic multiple solutions bc pushed slack appropriate variable bindings conditions rewrite rules arc universally quantified term generate values program state Righthand values variables values constants simply To illustrate following Sceptic rule timeClime input_bufferObject add_wmTimeObject AttValue AttValue timestamped clock buffer time Sceptics stack data item added ticks data input channel working memory time event occurs If II items input II add_wm items created pushed trigger occurs As noted Sceptic originally developed check update employs builtin Prolog operations inputoutput However operations operations implemented general programming hardware aspects Sceptic conditional actions conditions distributed considered rewrite rule division extension program Prolog state carry fundamental These language specialised The essential engenders subsymbolic mechanism Imagine constructing theory simple theories years ago Cool captures motif common described real psychological English follows cognitive theory Cocl COG1 R Cooper et al Artificial Intelligence US 1996 344 15 Perceptual Mechanism Central Planning Motor System Fig I A box arrow diagram COG 1 Information passed central processing executed Since certain kinds sensory link fast execution mechanism operates channel enters central cognitive perceptual mechanism channel actions planned information processed urgently action perceptual mechanism parallel limited capacity central box arrow notation functional modules links Cool presented theorist Fig 1 In box arrow notation boxes typically represent hypothesised flow data box arrow notation control detailed represent mechanisms channels disregarded They considered intended modules communication theory level description modules Of course theory abstraction boxes represent information Cocl specified Sceptic following conditional rewrite rules perceptual_eventEvent direct_actionEvent Action execute_motor_commandAction perceptualevent Event notdirect_actionEvent Action construct_and_execute_planEvent construct_and_execute_planEvent central_planningEvent Action execute_motor_commandAction points structure Sceptic specification Firstly arrow box arrow specification The arrow perceptual mechanism illustrates Secondly The example rewrite rule corresponds rewrite rule example corresponds central planning constructandexecuteplan boxes With regard processing triggering event occurs parallel consequent processing Consequent state events generated triggers modify executemotorplan triggers employed If conditions perceptual conditions series triggering event corresponding resulting systems state evaluate Cocl rules evaluated true burst perceptual_event correspond Not shown details antecedent conditions These specified instance box arrow diagram standard Prolog simply listed Note conditions detailed animated necessary domain In particular theory restricted valid This example shows expressive power rewrite demonstrate _ structure represented All standard obvious conditional recursive immediately rewrite standard control structures The rules perceptualevent dard structures implemented appears righthand variables instantiations rules embody form parallelism given event These executed sequentially stack evaluation actions parallel sides conditions conditions centralplanning rewrite rules perform arc implicitly universally rules Although rules directly encode stan loop control trigger Further quantified state yield multiple actions order pushed effectively performed rewrite rules rewrite rules trigger trigger evaluated constant It noted structure Sceptic specitication internal COCJ mirrored boxes supplied theory level original theory box arrow statement accurately details specification details specified captures box arrow diagram Given Sceptic level psychological perceptualevent executed arc psychological support structures terms conditional Prolog predicate definitions theoryimplementation CentralPlanning language rewrite rules belowtheline theorising Details generating conditions necessary specification able distinct abovetheline mechanisms naturally expressed terms theory In way Sceptic division syntactically expressed semantically specify The USC Prolog predicate definitions rewrite rules triggered Prolog interpreted logic programming apt allows purely declarative particularly belowtheline set algorithms This avoids possibility attributing implementation belowtheline conditions Sceptic noted essential Sceptic Neverthe strongest sense hold algorithmic properties terms aspects stated terms constraints mirroring aspects fact implementation statement implementation definition bounds theory algorithmic language 4 An assessment Sceptic Our goal develop specification language readable succinct modular appropriately evaluate Sceptic respects present definitions models In order abstract executable complete reconstruction R Cooper et alArtcial Intelligence 85 1996 344 11 Soar 4 demonstrating specifications c details computational Soar 4 demonstrating Sceptic expressive power Sceptic number theories demonstrating b overview Sceptic generality Sceptic experiments performed Sceptic specification empirical methodology based AB distinction 41 The Sceptic reconstruction Soar illustrates theory development challenging The toy psychological model cognitive modelling methodology addresses technical complexity symbolic paradigm Secondly Soar represents purpose time established example reconstructed Soar chosen respects Soar present basic concepts Sceptic ver evaluate language reasons sion Soar architecture mature Firstly major computational challenge range phenomena program Soar product century research beginning narrow focus problem 231 unified distributed Soar theory deeper understanding computational models Version 4 Soar chosen version addressed existing verbal descriptions sufficiently lo Shallice deep psychological motivation use Sceptic argued Cooper later versions 3 11 Finally research groups investigating Soar program contributing theory widely disseminated complex clear 233 l In addition 331 progressing theory cognition architecture additional complexities intelligence illustrate general present solving Irrespective Sceptics precise status general executable specification language relating theories capabilities phase reasons Firstly effectively evaluated Soar similar cognitive Soar current language language implicated involves functionally Soar Sceptics conditional parallel This particularly useful specifying parallel activities Thirdly rewrite rules bear close suitable implementation incorporates Prologs pattern matching independent capabilities Analogous theo ries cognitive processes A second feature Sceptic functional parallelism The division conditions expansion actions allows conditions trigger Soars elaboration appropriately resemblance Within terms set Sceptic rules The decision Appendix A The trigger rule complete represent rules test state Soar notable working memory preference memory hold actions rules executed These forth When certain states state additions actions modules means working memory sending messages steps triggers Where literature Soar warrants Soar components productions form basis Soars elaboration Soar main components Sceptic specification subgoaling set rules contained clear internal components The conditions psychological cycle elaboration direct alterations communication theory embodied chunking specified implement operation internal collection Sceptic appears decomposition structure component rules specify theoretical justification implemented line introducing internal details component When elaborating operations attemptedthey left line Our aim focusing Soar simply This successful reimplement trace functions duplicate rationally Of Secondly highlights examples differences identical impasse architectural decomposed implementations reconstruction types In view differences behaviour Sceptic version reconstruction reimplementations decision phase original certain aspects corresponding form original Soars output able demonstrate reconstruct surface published However emphasis rational Sceptic version merely aspects LISP Firstly separate processes deciding certain context element bookkeeping classification clarity theorys structure whilst preserving methodological LISP Sceptic versions Soar 3 shows B components code This difference Scepticthe RETE algorithm interface friendly We attempted include belowtheline mechanisms implemented size demonstrate reduction ccutable Nevertheless sary executable statement theory given terms A lines capabilities algorithms include LISP implementations user program ex neces reduced point view comparison Sceptic Soar including 10 size LISP version measured theoretically firing productions expressive irrelevant features goal Sceptic version features program entirely facilities designed substantially efficiently behaviour duplicate theoretically significant attributed increase actually include program Although complete implementation substantial difficulty understanding implications AIB distinction substantially reduced It hardly succinct code Soar theory obvious authors However consists 28 Sceptic essential Soar 4 theory represents dramatic relative ease understanding arbitrary programs underlying model program written size 2000 lines representation serves The A code rewrite rules minor differences important The rules compared view easier understand criticise assess modify reduction programs noted consider rules If accept AIB decomposition 32 p 4671 abovetheline clarity The Sceptic program complexity Notwithstanding programming language conventional contributes conditionaction reduction triggered equate Sceptic specification Furthermore paralleling Individual Sceptic modularity Soar architecture The rules modified requiring arbitrary care attention parts program rules capture changes Cool individual significant components yield different behaviour course changes data control structure functionality R Cooper et al Articial Intelligence 85 1996 344 19 global program The extent modularity Soar specification consequent benefits illustrated computational Section 43 experiments discussed 42 The generality Sceptic Even conclusions optimistic based reconstruction benefits reflect merely good match capabilities Sceptic Other work suggests theories implemented Soar justified ask extent Sceptic embodies general method needs Soar case Johnson theory 43 4 Norman Shallices Sceptic 201 Morton et als Headed Records 28 Slomans model motives emotions reasonably extent architecture A variety cognitive Lairds theory modelbased memory Barnards model automatic theory Interacting Cognitive Subsystems structure recall action control reasoning including 351 JohnsonLairds modelbased theory human syllogistic reasoning These processes model inspecting specifying manipulating LISP abstract Sceptic tially algorithmic syllogistic pair premises conclusion mented aim sion theory separated This achieved associating JohnsonLaird model cated premises directly Prolog generators behaviour LISP specification translating number processes include building putative conclusion reasoning claimed 20 essen involved specified attempting provide theory previously model satisfies refute imple literature The ver statements details implementation trigger process described repli syllogism executable 64 configurations remainder implementation LISP implementation state testers The resulting implementation model The level 7 primarily theoretical Sceptic structured memory developed A processing terms set discrete theory memory structure recall theory Sceptic specification set access cues body containing 281 This theory records record record involve sequence recall accessed content construct new key recall cycle This theory directly recall cycle coded create cue set search record extend cue set Morton et als Headed Records claims consisting heading consisting content memory Recall particular cycles inappropriate external cues previously implementable record heading Eight conditions necessary Sceptic The A component complete implemented described principal processes literature proved triggers corresponding retrieve matching record evaluate encode record A different style theory 43 This theory concerns ing possibly cesses Such rules single global database conflicting interacting processes retrieved B component represented Slomans scheduling attempted modelled Sceptic database elements theory motive process satisfaction multiple pro terms transition represent data goals consists number parallel communicating reasoning style adopted Soar syllogistic control terms Sceptic X This dataflow style specification specified dataflow style purely declarative closely approximating interacting processes operate different controlflow mem ory recall rewrite rules In particular formal specification The specification Slomans motive processing architecture rewrite rules add new database elements transform current database elements instantiations Thus suspended motive active reverse actual specification scores terms clarity succinctness separation tion manifest conditions AIB distinc rewrite rules Prolog delete database elements Each rule numerous rule states conditions instantiation fully declarative Prolog This specification The rules viewed engine modularity instantiations specifies executing example instantiation transform transformation In addition given includes A second dataflow draw theory explored 4 Again Barnards cognitive architecture theory models Sceptic specification interacting processes rewrite terms based Interacting Cognitive Subsystems cognition driven harness Slomans motive processing Subsystems Full details instantiations developed exploratory work suggests Slomans motive processing model generalises asynchronous communicating processes rules In fact rewrite rules theory Barnards Interacting Cognitive rules Barnards specification style applied class theories based concurrent Lastly Sceptic applied Norman Shallices Contention sequencing Scheduling interacting preparing actions se breakfast driving car familiar 351 This concerns actions segments automatic welllearnt theory action selection involved lection objects route The behaviour activation network schemata action segments heart theory valued The theory differs substantially levels schemata Nevertheless Sceptic representing variables 111 The style proved capable accommodating specifying specification database elements elements The tinuous valued variables treated component database elements updated values calculated standard interacting theories Sloman Barnard rules generatingupdatingdeleting theory clearly succinctly current values according includes continuous activation follows theories activation difference equations implementation Table complexity The size Sceptic shown guide arc concise ing approximate implementations Interacting Cognitive Subsystems ecuted I Whilst Soar figures taken giv implementations clear Motive Processing Contention Scheduling require domainspecific code ex One obvious class theories distributed connectionist propriate implementing theories A highly symbolic approach approach directly useful inap theory Sceptic utility obviously subsymbolic R Cooper et al Arcial Intellijience 85 1996 344 21 Table I The size Sceptic implementations Soar Version 4 Mental Models Headed Record Recall Motive Processing Interacting Cognitive Subsystems Contention Scheduling A rewrite rules B conditions 28 8 5 20 3 11 109 50 8 15 4 46 symbolic Sceptic components components belowtheline study medical diagnosis procedures This exploring hybrid models implementing rules subsymbolic network trained exploratory collection records patients different diseases presenting different sets symptoms The net learned discriminating usual way Another belowtheline behaviour net generated rules stored Sceptic program As new cases led weight symbolic revisions new different consistent rules generated The Sceptic component maintained set rules simple 131 A backpropagation procedure monitored set weights 161 truth maintenance mechanism theories encompass wide range theoret approach suggests Our conclusion implemented ical traditions considerable relative ease implementation generality 43 Sceptic experimental tool analyses criticality In Section 24 argued utility sensitivity implementational aspects model The clarity theoretical Sceptic specification specific demonstrate Soar opens possibility conducting effect theoretical assumptions behaviour theory prove evaluating succinctness analyses Soar In particular regard criticality consider modifying In order utility computational experiments consider experiments working memory component implementation Soar 4 Each experiment conducted modifying effects Soar 4 performing principle modifications different report standard experiments number simulations In order emphasise experiments computational style similar methodology reported Sceptic experiments evaluate 431 Experiment 1 single state principle In 1990 Soar community moved version 4 version 5 Rationale architecture The unrealistic states relevant goal requirement traversed transition Soar 5 motivated primarily Soar 4 placed working memory problem space maintained achieved This aspect Soar 4 meant psychologically sequence working memory space problem requirement maintained state Newell 311 introduced working memory space single state traversed To counter problem Soar 5 effected destructive current modification designed spaces states operators superseded This destructive destructively modifiedbut demonstrate complications destructively modified enormous results single state principle yield new state This destructive complications Soar Experiment operator increased virtually constant rate SSP working memory time In applied state I Soar 4 problem working memory old state deleted state modificationthe version SSP idea old context elements The simply deleted version SSP incorporated state modification rules effected Method The Sceptic specification rewrite elements new context element installed This situation fact working memory justified instantiations working memory element removed instantiation memory The Sceptic rules follows Soar 4 given Appendix A augmented deletion superseded working memory complicated form truth maintenance elements productions led creation Therefore justification removed install_context_objectGoal Attribute NewValue parametersingle_state_principle true wm_matchaugmentationgoal Goal AttributeCurrentValue remove_superseded_wmesCurrentValue Goal Attribute remove_superseded_wmesIdentifier Goal Class wme_to_be_removed_after_installationIdentifier Goal wm_removeWME remove_superseded_wmesIdentifier Goal Class wme_to_be_removed_after_installationIdentifier Goal Class WME generating_instantiationWME Instantiation FiringGoal instantiation_not_supportedInstantiation im_removeInstantiation FiringGoal Class WME The rules It finds triggered context object current context element matching working memory removes elements context stack For working connected memory element elements presence working memory connected production responsible removed longer applicable replaced instantiation Simulations run monkeys bananas task satisfied A trace decisions productions kept conditions task standard task released CMU Soar 45 modified version monkey considers operators preconditions fired working memory size SSP tasks R Cooper et alArttjicial Intelligence 85 1996 344 2_1 Standard Monkeys Banaoas Task b Modified Monkeys Bananas Task 300 150 I I 0 0 20 40 60 80 Cycle Number O 0 I 10 I 20 Cycle Number 30 Fig 2 The effect single state principle Soar 4 size working memory Results The graphs Fig 2 size working memory versus decision number tasks In case higher curve corresponds original Soar 4 The lower curves obtained Sceptic specification A comparison decisions productions revealed tasks fired versions Soar 4 version SSP incorporated difference behaviour results irrespective working memory little difference subgoal requires approximately version SSP The difference requirements task This Discussion There versions Soar standard monkeys bananas task problem impasse elements size shown clearly problem solving space decisions operator At times increases memory seen clearly bananas Soar 5 overcomes substantially solving behaviour consists primarily succession impasses Each 30 working memory working memory progressing single problem selection new state application theory working constant This exists modified theory remains approximately cycles 10 16 17 24 modified monkeys rationale problems increasing working memory task The results experiment number decisions approximately requirement requirement standard viable alternative working memory size employed state modification linearly question destructive original Soar 5 appears involve simpler That difference SSP assumption It theline size criticality memory sure implementation executable requirements specification Soar 5 widened behaviour SSP critical sequence decisions Soar 4 indicate include working memory working SSP Soar 5 absence necessary SSP Soar 5 equivalent implementing establish seen Given Soar 4 additional details We unable complications 432 Experiment 2 rcwrkitzg tttetnory ca Kutionale A common assumption cognitive psychology subject time Soar tolerate designed decay interference 131 Even human problem interference reasonable spontaneous robust Can loss working memory Experiment 2 relatively solving explore Soars behaviour conditions working memory decay working memory loss information disconnected Method The elements Soars working memory arranged nected directed graph A pilot experiment graph irrecoverable terminal working memory elements This restriction decay justified nature elements peripheral memory hencc liable decay form lead terms working unconstrained working memory decay experiment decay restricted integrated possibility problems Thus frequently revealed The Sceptic specification 01 Soar 4 augmented rewrite effected random decay working memory elements A parameter specified follows degree decay The rule triggered end decision cycle rule memorydecay parameterworking_memory_decay wm_matchWME wme_is_terminalWME randomZ ZD wm_removeWME D This rule specifies element pseudorandom memory element decay parameter working memory element deleted number 0 1 generated terminal working The simulation run 20 times different random seeds tasks 0000 0010 intervals working memory half life 693 cycles 42 working memory experiment 1 values decay parameter 0001 A decay 0001 amounts seconds 60 msec cycle cf 3 1 1 A decay 0010 amounts half life 69 cycles 41 seconds 60 msec cycle Execution terminated goal achieved 100 decisions A trace decisions productions fired working memory elements decayed kept run ranging solving tracts ol run broad sorts behaviour Kesults On analysing task seemingly perfect distinguished Either Soar successfully problem spaces states operators running working memory decay Soar subgoal apparently aimlessly element In Fig 3 shows number eventually decay resulting instances sort behaviour second case critical working memory complete problem complete breakdown choosing exactly The results trends Firstly decay rate increases rate success drops gradually Soar simply collapse working memory decay R Cooper et al Artificial Intelligence 85 I 996 344 25 Standard Monkeys Bananas Task b Modified Monkeys Bananas Task working Memory Decay Fig 3 Behaviour Soar decay working memory leaf elements short tasks working memory decay task involves half life 46 seconds The effect introduced Soar succeed This clear case modified monkeys bananas 24 decisions This task correctly decay rate 0009 cycle corresponding decay pronounced Soar attempting bananas tolerated The second tasks The standard monkeys decay task requires 67 successive correct decisions Here substantially solved trial trend concerns element decays task Though shown graphs experiment number decisions critical working revealed clearly standard monkeys number decisions element memory bananas working memory decay rate increases decays decreases 2 confirms longer Soar withstand working memory decay Discussion It shown sense entirely brittle However intermediate decay rate 0002 giving working memory half life 21 seconds Soar generally unable 67 decisions 4 seconds behaviour required standard string monkeys task Soars behaviour bananas average human However optimal They perform error checking actions Given analysis working memory elementsif working memory tasks designed criticality alternate way looking experiment little decay tolerated appears far brittle elements critical employed ideal problem solving behaviour redundancy productions 3 This reasoning halt terms mean experiments extracting fact according cognitive completes task suggests results appropriately theory Soar continuously making decisions presented difficulty prescriptions methodological length sequences correct decisions We attempted intended demonstration information hand justified results concerning assumptions implementation possible dependencies case Built results measuring production However building increase details Could details taken redundancy productions line modified Unfortunately details decision error detection recovery required working memory raise general question imple influence ap cycle structure working memory One work interpret redundancy capacity These mentation Soars behaviour abovetheline pears assumptions ing memory connectedness terminal elements A second assumption violated goal problem space state operator Because implementation dependencies cedure fails problem desirable importance explicit assumptions assumptions belowtheline decision pro details Such forcing unique leads complete breakdown space state operator decays Presumably satisfied restriction decay experiment built implementation line redecide missing elements This demonstrates decay elements Soar attempt details This assumption constraints specification concerning 433 Experiment 2 instantiatiorl memo deca Rationale Soars production duction originally replacing production conditions firings decay It argued previous experiment correctly working memory element decays base element decayed element Experiment 3 designed instantiation memory allowing working memory simply account pro test Soar robust memory records Method The Sceptic specification effected random decay instantiation memory elements memory elements created A parameter specified specifies number 0 decay elements created instantiation follows instantiation memory element instantiation memory rate If I generated element Soar 4 augmented rewrite rule working rate decay The rule deleted pseudorandom instantiation memory element deleted working memory rewrite rule deleted The conditional memorydecay parameterinstantiation_memory_decay im_matchInstantiation randomZ ZD FiringGoal im_removeInstantiation FiringGoal remove_dependentsInstantiation D This rewrite rule triggered end decision cycle We thank Richard Young pointing R Cooper et al Artcial Intelligence 85 1996 344 27 Standard Monkeys Baoanas Task b Modified Monkeys Bananas Task Instantiation Memory Decay m kss nonllalj Success delayed Instantiation Memory Decay Fig 4 Behaviour Soar instantiation memory decay The simulation run 20 times different random seeds tasks 2 value decay parameter varied 0000 goal achieved fired working memory experiment 0010 intervals 0001 Execution terminated 100 decisions A trace decisions productions elements decayed kept run instantiation possibility substantial perfect behaviour interestingly resulting 0010 cycle As expected perfect behaviour Fig 4 Once performance memory classes resulting working memory decay Results The results summarised decay falls number broad classes instantiation memory decay differ Again memory decay frequent decay parameter increased However unlike working memory decay instantiation memory decay lead delayed success Soar completes task In effect Soar sidetracked forget requires decisions shown information substantial delay relatively task order 20 case decay normally task solving 0010 showed delay 170 eventually 65 decisions Closer examination Soar repeatedly results subgoal results repeatedly results small requiring 5 decisions complete correctly case revealed later recover This sort behaviour modified monkeys bananas forgot recalculate requires 24 decisions degrees decay frequently task In general 24 decision complete Frequently Soar appeared Discussion Where Soar failed In cases Soar forgot distinguished goal settled waiting mode requiring new input trigger problem solving given time Soar revert waiting mode succeed In case aimless subgoaling post hoc probabilistic task sorts breakdown subgoal aimlessly analysis suggests The differences behaviour Soar 4 instantiation mem ory decay shows form decay like working memory decay experiment 2 critical assumption As general memory decay option instantiation mem far resulting ory decay appears psychologically success result robust type performance form behaviour having repeat stepsis solving repeated expected appears goal shown It protocols models suggests mechanism behaviour experiment behaviour perseverative computational knowledge suggested possible explanation instantiation memory decay production investigation plausible degradationdelayed solving This novel result generated Newel1 Simons cryptarithmetic accord perseveration possible explanation intuitively plausible warrants problem Indeed 34 5 Executable specification languages modelling methodology The work described represents step computational support aspects theory evolution The environment general methodology One possible engine software development like developed form component ology language language vironment designed support computational Sceptic guages emerge investigated provide analysing data generated experiments allow criticalitysensitivity future The language anticipate tools designing documenting experiments cognitive rigorous modelling method science modelling role en lan permit variations model analyses environment model collecting language specification executable variations carried means modelling sophisticated Preliminary analysis suggests environment incorporate Lakatosian sort Newell advocates philosophy hard core theory auxiliary hypotheses Within environment development concerned adjusting belowtheline hard core corresponds auxiliary hypotheses corresponding incorporating assumptions aspects model 311 clear division aspects model abovetheline theory framework Such proposed main exposition cumulative methodology later took weaker position arguing theory development constraining Although Soar psychological mode1 311 Newell advocated spirit Lakatos 25 pressure critics There theory concepts transformation viable As evolution essential Soar ii change longer Soar I It evolve successful As long incremental theory existing Soar theory Soar taking But time theory moment eliminating lead change produces evolution connection historical 32 p 467 Newells emphasis R Cooper et alArtificial Intelligence 85 1996 344 29 Even case extreme position appropriate public criteria scientific theory change required credibility Three criteria proposed Anderson context theory ACT research programme computational 2 pp 42431 1 There broad range evidence numerous empirical domains sup ports change 2 There obvious way incorporate empirical phenomena existing mechanisms 3 There good argument adaptive value proposed mechanisms We advocate fourth result danger 4 The alterations Without criteria unprincipled frivolous way 2 p 421 increase theorys criticalitysensitivity ratio assumptions spun totally The methodology developing sense criticised earlierit models rigorously represents advance experimental program publicly computational based welldefined conducted replicable specifications ming reviewable experiments 6 Conclusions laboratory laboratory evaluating constructing gap entering testing computational computational models cognition investigation need matched equally theories Current inadequate period theoretical unification As step theory computational languages One specification language devel Mature methodologies conceived methodologies methods building particularly bridging argued language oped test case Soar complex challenging models reconstructing separating rules abstract description Soar approaches conventional computational practical Soar model models clarified clearly details At 28 smaller investigation develop executable important Sceptic Techniques literature The results suggest elements theories orders magnitude specifying models specification implementation approach essential implementation A great deal work needed realise comprehensive methodology testing computational tools software main sets requirements including theories Sceptic A paradigm provision appropriate experiments techniques supporting number experiments progressive development In paper addressed results focusing use improved model specification scope improvement substantial development cognitive modelling tools individ research programmes theories set tools We shown current modelling specifying phisticated address ual modelling subsume account quirements minimum techniques Appendix A A rational reconstruction Soar 4 To illustrate use Sceptic appendix provides details Sceptic specification context precede brief divided sections decision phase chunkingand features published principle theory given consists 28 rewrite rules A set behaviour Prolog specification loop elaboration phase sufficient capture Soar 4 In order place summary Soar architecture The specification toplevel developed The complete A specification belowtheline resulting program corresponding published A listing program implemented examples functions available request LISP version Soar 4 running monkey bananas problem puzzle exactly A 1 A summaty Sour architecture A 11 Overview qf processiq Soar architecture fixed information processing structure specialised raise resolve goals exploiting variable body knowledge 341 Soar implements approach modelling problem search cyclically solving search retrieving knowledge It elaboration phase making decisions decision phase Loosely decisions space employ actions space interpretations carry operator If Soar sufficient knowledge If knowledge embody solution automatically solve If subgoal succeeds generate new impassespecific impasse particular context knowledge assign use data apply goal architecture goal resolved parent goal context During processing impasse able identify critical contextual data chunk new fragments space wellestablished current goal adaptively based problem relevant results resolving goals problem state problem current state solved directly impasse recursively result available architecture knowledge means attempt future use A 12 Memories structures The Soar architecture makes traditional distinction working memory permanent transitory short long term memory traditional difficult referred recognition memory Though term memory referred distinction equate memory instances similar concepts Working memory psychological example bears little relation The contents working memory literature psychological literature currently concept 3 represent known aspects current problem solving context problem solving text operators example form augmentations attributevalue pairs Augmentations spaces effect representation carried states features current problem external internal actions modify current problem space attribute goal Gl4 P2 value problem solving state For repre R Cooper et al Artificial Intelligence 85 1996 344 31 structure goal G14 problemspace P2 If space P2 eightpuzzle represented augmentation sented augmentation problem problemspace Also contained P2 eightpuzzle working memory absolute worth current potential selecting competing problem indicate operator working memory In Soar 4 preferences example Recognition memory closely related consist set matches cooccurrence term knowledge architectures long Productions elements indicate Variables shared consistently amounts working memory working memory elements retrieval information bound application Preferences relative preferences These encode augmentations spaces states operators A preference single better stored primarily augmentations current goal operator consists unstructured relations working memory rule memory earlier production set productions These represent elements templates matched applies case production production Applying applicable makes created production template matches makes production long term memory A13 The processing cycle The Soar architecture operates phase followed decision phase cyclic elaboration fashion cycle consisting The elaboration phase designated motor augmentations The perceptual cyclic Each cycle consists input cycle checked results added working memory fired The elaboration phase channels productions working memory cycle added inputperceptual elaboration poductions generated output cycles theoretically advanced It primarily differences later versions fold elaborate objects create preferences operators The basic mechanism purposes representation versions output cycle righthand sides applicable output shall consider input motor cycle differentiate Soar 4 cycle purpose elaboration elaboration objects working memory augmenting future possible problem firing productions spaces states achieves A production fired mapping existing working memory variables consistently mapped Each consistent mapping yields elements elements lefthand productions instantiation conditions production production One elaboration cycle Soar 4 consists firing production parallel licensed contents working memory previously added subsequent identical augmentations recorded preferences prevent working memory The results instantiation fired This generally instantiations firings The alterations working memory caused elaboration new production input cycle result tiations fired elaboration continues elaboration phase terminates instantiations instantiations cycle Cycling licensed At point licensed These elaboration cycle subsequent instan phase termed quiescence The decisiotl phase The decision phase results selection context object problem space If context state operator creation subgoal object selected based preferences available beginning relevant decision previous value object selected value If object selected creates subgoal set default productions resolving problem solving impasse Soar general default knowledge encoded impasses permitting modified replacing Soar automatically working memory impasse response proceed resolve cycle solve problem possible states arise solving problem Once goal raised problem space selected The choice problem In principle number representations Corre operators apply states state selected operator space initial state selected sub space determines possible spondingly selected operators selected applied current goal achieved At point Soar terminates goals achieved goal irrelevant restoring goal originally successive decision cycles Soar detects outstanding context In general problem arose A 14 Leartiitlg Soar includes experiencebased learning mechanism chunking fires context elements created augment triggered firing production Each production supergoals particular goal When productions firing goal detected These elements construct new productions chunks added recognition memory Once chunk created behaves production solve goal chunk possibly avoiding similar built need subgoaling elements IO creation subgoal results supergoal possibly higher goals contributed built directly new situation The lefthand previously results The righthand chunk chunk Soar finds lead chunk attempting relating A2 A Sceptic speciatiotz Soar 4 A21 The Soar decisiotl cycle Ovenierv decision cycle As described toplevel processing comprises repeated decision decision cycle consists elaboration phase long term knowledge cycles Each brought R Cooper et al Arrijicial Intelligence 85 1996 344 33 bear followed decision phase decision based current preferences effected Abovetheline specification decision cycle The Soar toplevel cycle captured rules effects single decision elaboration phase followed decision phase triggering rule division distinguishes rules merged triggering decisioncycle single cycles cycle consisting effects repeated decision These cycling processing cycle soar true decision_cycle soar decision_cycle true elaborationphase decisionphase On occurrence trigger soar Sceptic checks conditions relevant conditions defined unconditionally cycle recursively rule triggers righthand triggers righthand rules There true gering single decision cycle elaboration initiated tween interrupted Whilst clear differences theory phase decision phase described soar process cycles Sceptic specification obviously indefinitely There rule issued second rule corresponding triggering sequence trig soar On decision sequence Once obvious difference allow processing called LISP implementations useful feature implementations implementation cognitive Belowtheline processes decision cycle The state employed The decisionPhase functions That extremely decisionphase tester righthand specification true No generators triggers defined elaborationphase specification highly abstract level classed primitive updating level Soar viewed entire architecture elaborationphase coarse specification interpreted primitive actions Summary discussion decision cycle specification Although Soar processing main subprocesses fit processes consists It specifies rules substantive language formal structure involved Soar architecture way summary executable 34 K Cooper rt ul Arfificul Intellrgence 85 1996 344 description elaborationphase descriptions different lies primitives Newell Section 21 It abstracts away massive appendix essential interrupt theory Of course discussed theory defined line It purpose remaining way specify details For example trace problem important process providing systems behaviour way theorists perspective specifying include details matter obvious sure implementation implementational substantively decisionphase specifications mechanisms LISP implementations specification solving From cognitive theory purposes influence interpret A22 Elaboratiorl phase processes OlervieM elaborution phase The Soar architecture takes information environment ing memory Relevant knowledge elements added working memory working memory elements interpreted motor commands This process quiescence elaboration cycle Finally distinguished repeated retrieved firing productions This results stores work Aborletheline specification cf elaboration phase The elaboration phase consists rules The effects initialisation initial input cycle triggering cycling phase elaborationphase true initialise_elaboration_phase inputcycle cycle_if_not_quiescent Initialisation consists marking currently This necessary created recent elaboration phase older working memory elements Soar decision procedure distinguishes existing working memory elements elements initialise_elaboration_phase wm_match WME wm_markWME notquiescent tests effects cycling elaboration phase The architecture quiescent If Soar trigger rewrite sequence actions rule phase returning toplevel control terminating triggers decision phase If quiescence reached cycle triggered followed output cycle The rule cycleif condition antecedent quiescent elaboration toplevel phase elaboration cycle The rule trigger input quiescence recursively effecting elaboration reached rules condition fails input output R Cooper et al Artificial Intelligence 85 1996 344 35 cycle_if_not_quiescent quiescent elaboration_cycle output_cycle inputcycle cycle_if_not_quiescent Neither input cycle output cycle described input cycle adds elements clear output cycle effects motor commands specification given assumes working memory commands carried Soar literature working memory It based contents working memory The output cycle removes output commands inputcycle generate_input_wmeWME wm_makeWME Justification Justification outputcycle match_output_wmeWME Command effect_motor_commandCommand wm_remove WME quantified firing goal universally The elaboration Sceptic conditions rule finds instantiations firing production productions conditions cycle specified cascade rules information rules parameters associated rule triggers The elaboration satisfied rule triggered instantiation The generator generatellnrefractedinstantiation instantiation passed cycle current contents working memory fired Recall variables distinct generates previously element fireproduction updater makes element future firings instantiation prevent instantiation rule creates appropriate working memory elements specified right hand firing production The createelements preferences truth maintenance learning mechanism lowest goal matched instantiation immatch creating instantiation memory triggered chunking imrmake instantiation memory effectively marking rule consists triggers justifications checking rule adds augmentations working memory fireproduction particular fired Soar 4 Soar 5 The righthand Justifications immake firing This elaboration_cycle generate_unrefracted_instantiationInstantiation FiringGoal notim_matchInstantiation FiringGoal im_makeInstantiation FiringGoal fire_productionInstantiation FiringGoal fire_productionInstantiation FiringGoal generate_elements_to_makeInstantiation ElementsToMake generate_justificationInstantiation Justification create_elementsElementsToMake Justification build_chunksFiringGoal ElementsToMake create_elementsElementsToMake Justification memberWME ElementsToMake wm_makeWME Justification The buildchunks follow process allel processas ory rule discussed separately creation working memory elementsit Section A24 Note par mem justifications relies elements Belowtheline processes elahorution phase Two state testers required elaboration phase quiescent valid production recorded instantiation currently generate called succeeds instantiations fired instantiation memory immatch checks instantiation memory This second state tester It acts state tester elements instantiation memory arguments instantiated The elaboration phase requires generators identify instantiate productions gether firing goal applicable generate_unrefractedinstantiation tification ing generate_elements_tomake createelements The principle uses member standard initialiseelaborationphase updater identify elements actually created production generate_justif elements current elaboration phase jus fir Generators outputcycle ication justification elaboration working memory wmmake This adds element present Several updaters employed wmmark marks existing working memory element removes indicating element instantiation memory serve interface existed prior working memory phase wmremove firing goal intended current elaboration effectmotorcommand motor adds element primitive imnake action phase inputcycle library generator Summary discussion elaboration phase The essential structure elaboration phase captured Sceptic rules They creation working memory elements input cycle firing matching previously unfired productions sequencing subprocesses execution motor commands essential processes building process This process firing productions discussed elaboration phase output cycle As abovetheline specification complete chunk responsible triggered rule R Cooper et al Artificial Intelligence M 1996 344 37 The elaboration functions cialised primitive phases processing functions phase requires number belowtheline testing state generating processing results functions updating state Several spe The modest size specification makes elaboration sential mechanisms described dures importance theory sential Soar nisms formulate predictions relatively Soar The belowtheline involved involve significant researchers wishing programming easy understand es functions 14 Prolog proce grips es design alternative mecha A23 The decision phase Overview decision phase phase attempts If selection The decision current context context stack appropriately generated resolve select problem successful If selection space state operator selection installed adjusting fails impasse arises subgoal A aspect decision phase generally discussed concerns include representation object These augmentations adjustment arise competing objects equally item created elaboration phase contradict current elaboration phase item augmentations removed item augmentations augmentation referred goal arising item augmentations new objects competing impasse In LISP implementations intertwined algorithms effecting clarifies decision phase nature specification Preferences context Impasses slot item augmentations acceptable relevant goal competing augmentations item augmentations impasse Consequently goal longer applicable created process process item augmentation independent adjustment suggest treating Abovetheline specijcation decision phase The decision phase viewed having parts One cascade op identify structure candidate values context object select install erations preferred value terminate subgoals longer relevant This relatively simple operation corresponding decision phase impasses create forms adjustment impasses arise process subgoals The distinct process item augmentation second set processes possibility complicated required redecided If context slot needs looking run newly created preferences slot If change impasse This occur example problem spaces states operators currently values preferences generated previous elaboration phase alter values selection process working memory slot needs decided determined context decisionphase generate_context_pair_to_alterGoal attempt_selection_of_new_objectGoal Attribute Attribute decisionphase notgenerate_context_pair_to_alter_Goal Attribute no_change_impasse Given decision required particular context slot object chosen randomly set possible objects according current preferences slot provided possible values mutually indifferent case example set values conflicting preferences If set possible values mutually indifferent context slot impasse arises attempt_selection_of_new_objectGoal Attribute generate_possible_values_for_attributeGoal Attribute mutually_indifferentGoal select_and_install_objectGoal attempt_selection_of_new_objectGoal ValueSet Attribute ValueSet Attribute ValueSet Attribute generate_possible_values_for_attributeGoal Attribute notmutually_indifferentGoal Attribute ValueSet context_slot_impasseGoal Attribute ValueSet ValueSet The selection installation process consists independent 1 value possible installed slot selected subprocesses appropriate 2 context slots current goal following slot decision reinitialised 3 goals goal selected object augments terminated select_and_install_objectGoal random_selectValueSet install_context_objectGoal Value Attribute Attribute ValueSet Value Attribute reinitialise_following_attributesGoal terminate_subgoalsGoal install_context_objectGoal Attribute Value responsible_preferencesaugmentationgoal Goal AttVal wm_replaceaugmentationgoal Goal AttVal Conds Conds reinitialise_following_attributesGoal Attribute following_context_attributeAttribute initialise_attributeGoal AttributeToInitialise AttributeToInitialise R Cooper et al Artificial Intelligence 85 1996 344 39 Subgoal termination involves removing working memory elements linked goal stack terminated goal removing elements instantiation memory longer relevant These elements firing goal terminated terminate_subgoalsGoal generate_subgoal_wmeUME Goal wm_remove WME terminate_subgoalsGoal generate_subgoal_imeGoal Instantiation FiringGoal im_removeInstantiation FiringGoal Turning impasse processing context slot impasse occurs previous sub goals goal impasse arose terminated new subgoal created Appropriate architecturegenerated augmentations added subgoal The attribute context slot caused impasse lower attributes context reinitialised Creating subgoal requires new identifier generated impassespecific augmentations added working mem ory context_slot_impasseGoal Attribute ValueSet Attribute ValueSet SubType detect_impasse_typeGoal terminate_subgoalsGoal create_subgoalGoal context_slotSubType ValueSet Attribute context_slot_impasseGoal Attribute _ValueSet generate_attribute_to_initialiseAttribute initialise_attributeGoal AttributeToInitialise AttributeToInitialise create_subgoalGoal Type Attribute ValueSet generate_goal_identifierSubGoal add_subgoal_augmentationsGoal SubGoal Type ValueSet Attribute add_subgoal_augmentationsSuperGoal Attribute Goal Type ValueSet generate_impasse_augentationfSuperGoal Attribute AttVal Goal AttVal Goal Type ValueSet Justification Justification wm_makeaugmentationgoal The processing required nochange impasse similar nochange impasses occur lowest context slot lowest goal subgoals need terminated context slots need reinitialised Instead subgoal lowest goal created appropriate architecturegenerated augmentations nochangeimpasse generate_lowest_goalGoal create_subgoalGoal nochange _ _ context slot altered The Sceptic reconstruction highlights situations choice situations arising slot impasses The different response discussed operators distinction genuine processing differences underlie Soar community different impasses distinct types impasse nochange arising required choice context stages processing distinction whilst spaces states regarded demonstrates level problem generally architecture The Sceptic reconstruction distinction types impasse arise different failures problem solving However level individual Soar productions The basic structure item adjustment step straightforward This captured pair rules responsible creating new ones Both rules triggered decisionphase corresponding rest decision phase independently triggered decision phase triggered fact process treated removing invalid augmentations decisionphase wm_matchaugmentationgoal Goal itemItem notgenerate_item_augmentationGoal Item Justification wm_removeaugmentationgoal Goal itemItem decisionphase generate_item_augmentationGoal Item Justification notwm_matchaugmentationgoal Goal itemItem wm_makeaugmentationgoal Goal itemItem Justification Belowtheline A number special generators specicatiotz phase required conditions context objects need decisiotl justifications subgoals alternative context objects mutually decision phase processing These generate possible installed forth A single state tester indifferent recognise candidates augmentations determining required General updaters required adding removing elements ory initialising memory context slots removing working mem instantiation elements Item adjustment lefthand conditions item augmentation requires generate existing check removed The second rule uses conditions opposite way generateitem augmentation generate item augmentation augmentation If item augmentation generateitemaugmentation In rule wmmatch item augmentation working memory justification added present justified The updating mechanisms operations remove adding deleting required items working memory wmmake item adjustment standard wm_ R Cooper et al Ardjicial Intelligence 85 I 996 344 41 Summary discussion Decision phase processing relative complexity reflected rules 12 specialised generators Again complexity Soar cognitive coding theory complex Soar architecture Sceptic specification consists 14 coding level abstraction require significant generators relevant required Item adjustment conceptually consistent simple mechanism complete This simplicity ensuring reflected specification This specification suggest mentations abovetheline justment maintenance Soar seen restricted systems developed different purpose form truth maintenance AI 26 explicitly employed similar current aug brevity item ad truth later versions A24 Chunking Overview chunking Chunks created production fired recent subgoal adds elements chunk derived lefthand production triggered context context associated supergoal The righthand elements added supercontext elements justifications elements tracing supercontexts determined recursively Abovetheline The abovetheline description chunking specification chunking consists rules The rule attempts build appropriate chunk given productions firing goal results build_chunksFiringGoal Results generate_lowest_goalFiringGoal new_supergoal_elementsResults conditions_prior_to_goalElementsToMake FiringGoal ElementsToMake FiringGoal assemble_chunkElementsToMatch ElementsToMake ElementsToMatch variablise_productionInstantiatedChunk InstantiatedChunk add_chunkVariablisedChunk InstantiatedChunk VariablisedChunk The second rule fires potential chunk generated rule If rule adds new chunk learned chunk duplicate previously recognition memory refracts adding appropriate memory preventing creation firing immediately instantiation led instantiation instantiation add_chunkVariablisedChunk Instantiatedchunk nottest_duplicate_chunkInstantiatedChunk generate_firing_goalInstantiatedChunk im_makeInstantiatedChunk FiringGoal rm_make Variablisedchunk FiringGoal 42 R Cooper et rd Artijiciul Intellipwe 85 1996 344 These rules merged single rule separation appears natural The rule essentially generates potential new element recognition memory second existing element duplicate rule records element Belmtheline A single descriptiorl tester qf churzkirlg state chunk chunking occurs rule ensures firing goal results The newsupergoal tiring goal recently created subgoal Several generators rule generate elements generates conditionspriortogoal percontext indirectly uses results previous final chunk Finally chunk instantiated supercontext The second su generators generator variablisechunk led creation results The assemblechunk version replacing identifiers variables subset results belong working memory elements construct instantiated generates uninstantiated version determines The second rule uses single state tester checking duplicate appropriate existing production The firing goal chunk information added instantiation memory generated chunk generated Summary LISP specification data chunking chunking switchable specification differences level abstraction chunking implementation Most notable chunking goals Newell simple As Soar processes recently created subgoal chunking brief Considerable hidden complex pro imple 31 argues architec chunking disregarded More minor specification implementations discussion In barest form chunking theline specification chunking line reveals cedure Nevertheless LISP restricted mentations psychological ture bottomup Allgoals LISP details present dis include partitioning linked tinct chunks expansion subset results include elements results removal condition matches chain working memory elements potential matching chunk addition inequality add little constraint restrictions subchunks separately apply operator create new state filtering certain problem spaces The omission aspects potential justified dubious described mentioned linked subsets subset leading status Soar cognitive manuals accompany descriptions Soar 233140 splitting operator application cognitive psychological Soar implementations matches chunks generated human theorywhile chunking information chunk processing results 22241 chunks References R Cooper et al Artificial Intelligence 85 1996 344 43 2 JR Anderson The Architecture Cognifion Harvard University Press Cambridge MA 1983 31 AD Baddeley Working Memory Oxford University Press Oxford 1986 approach 141 PJ Barnard A Ellis ed Progress Psychology Language Lawrence Erlbaum Hillsdale NJ 1985 Chapter 6 197258 shortterm memory psycholinguistic subsystems Interacting cognitive 51 B Carpenter The Logic Typed Feafure Structures Cambridge Tracts Theoretical Computer Science 32 Cambridge University Press Cambridge UK 1992 61 W Clocksin C Mellish Programming Prolog Springer New York 1981 7 R Cooper A sceptic specification JohnsonLairds Mental Models reasoning Department Psychology University College London London theory syllogistic Tech Rept UCLPSYADREMTR4 1992 9 pp 8 R Cooper A sceptic specification nursemaid London London 1992 15 pp scenario Tech Rept UCLPSYADREMTR3 Slomans motive processing Department Psychology University College application engine I9 I R Cooper J Farringdon Sceptic version 4 user manual Tech Rept UCLPSYADREMTR6 Department Psychology University College London London 1993 IO 1 R Cooper T Shallice Soar case unified theories cognition Cogion 55 1995 actions Applications 115149 1 I R Cooper T Shallice J Farringdon Symbolic continuous processes J Hallam ed Hybrid Problems Hybrid Solutions Frontiers Artificial automatic selection Intelligence 1995 2737 I2 E Davis Representations Common Sense Knowledge Morgan Kaufmann San Mateo CA 1990 131 J Faningdon 27 10s Press Amsterdam calculus reasoning backpropagation propositional Translating network translations time Masters Thesis South Bank Polytechnic London 1990 14 1 J Fox Techniques I5 MR Genesereth developing distributed decision systems Dilemma Workshop 1 1992 NJ Nilsson Logical Foundations Artificial Intelligence Morgan Kaufmann Los Altos CA 1987 1 161 S Hajnal J Fox P Krause Sceptic user manual version 30 Tech Rept Advanced Computation Laboratory Imperial Cancer Research Fund London 1990 171 GE Hinton T Shallice Lcsioning attractor network investigations acquired dyslexia Psych Rev 98 1991 7495 181 E Hunt RD Lute Soar world view theory Behav Brain Sci 15 1992 447448 191 M Johnson AttribufeValue Logic Theory Grammar CSLI Lecture Note Series 16 CSLI Stanford CA 1988 201 PN JohnsonLaird Mental Models Cambridge University Press Cambridge UK 1983 211 R Kowalski Logic Problem Solving NorthHolland New York 1979 221 JE Laird CB Congdon E Altmann K Swedlow Soar users manual Version 52 Tech Rept CMUCS90179 Carnegie Mellon University Pittsburgh PA 1990 231 JE Laird A Newell PS Rosenbloom SOAR architecture general intelligence Artrf Infell 33 1987 l64 24 JE Laird K Swedlow E Altmann CB Congdon M Weismeyer Soar users manual Version 45 Tech Rept University Michigan Ann Arbor MI 1989 1251 1 Lakatos Falsification methodology scientific research programmes I Lakatos A Musgrave UK 197091196 eds Criticism Growth Knowledge Cambridge University Press Cambridge 26 JP Martins The truth 27 BG Milnes A specification Soar cognitive Carnegie Mellon University Pittsburgh PA 1992 truth truth AI Magazine 11 5 architecture 1991 725 Z Tech Rept CMUCS92169 28 1 J Morton RH Hammersley I23 Cognition 20 1985 DA Bekerian Headed records model memory failures 1291 J Morton KE Patterson A new attempt interpretation attempt new interpretation Deep Dyslexia Routledge London 1980 91118 1301 A Newell You play 20 questions nature win WG Chase ed Visual Information Processing Academic Press San Diego CA 1973 283308 44 R Cooper CI I Arcci Intelligence 85 1996 3G 3 I 1 A Newell Unified Theories oj Copririorl 133 I A Newell Soar unified theory cognition issues explanation Behuv Brain Sci 15 1992 Harvard University Press Cambridge MA 1990 464493 I33 I A Newell JC Shnw HA Simon Elements theory human problem solving Psych Rat 65 1958 151166 I34 I A Newell HA Simon Hrrnnm Prohlerrr 135 I DA Norman T Shallicc Attention Soq Prentice Hall Englewood Cliffs NJ 1972 action willed automatic control behavior R Davidson G Schwartz D Shapiro eds Conscinusness SefRetiont md Theory W 4 Plenum New York 1986 I 18 Advances Reseurch 36 I M ONeill The STOP demonstrator Tech Rept Advanced Computation Laboratory Imperial Cancer Research Fund London 1992 37 I D Partridge Iirzeerin Articuzl I38 I D Plaut T Shallice Deep dyslexia case study connectionist neuropsychology Copi Sfrwnrr Intellect Books Oxford 1992 Intrllqrrxe Neuropsych 10 1993 377SO0 I39 1 F Rabbitt Does goes mu J Lkperirn Psych 46A 1993 385434 I40 I P Rosenbloom J Laird A Newell R McCnrl A preliminary analysis Soar architecture basis general intelligence Art 61e 47 199 I 289325 131 I TA Salthouse Effects age verbal ahilities examination psychometric literature LL Light DM Burke eds Lmrrue und Memory Old Age Cambridge University Press Cambridge 1988 1735 I12 I T Shallice From Neuropsclfcll I43 I A Sloman Motives mechanisms emotions Cornir Ennjtion 1 1987 217233 1441 JM Spivey 77re Z Nrlfcltion A Reference Munuul Prentice Hall n Menal Srrucrure I Cambridge University Press Cambridge 1988 International Series Computer Science Prentice Hall Englewood Cliffs NJ 1989 formal 145 I E van Harmelen J Balder ML Acqursit 4 1992 127161 language KADS models expertise Knou 116 j NS Walker Biomedical image interpretation PhD Thesis Department Computer Science Queen Mary Westfield College London I99 I 47 I B Wielinga A Schreiber J Breuker KADS modelling approach knowledge engineering Knon Acquisit 4 1992 S53 148 I D Zicha J Fox Symbohc simulation complex biological processes Tech Kept Advanced Computation Laboratory Imperial Cancer Research Fund London 199 I