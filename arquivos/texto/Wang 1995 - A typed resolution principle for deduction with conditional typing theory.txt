Artificial Intelligence 75 1995 161194 Artificial Intelligence A typed resolution principle deduction conditional typing theory TieCheng Wang Kestrel Institute 3260 Hillview Avenue Palo Alto CA 94304 USA Received October 1992 revised March 1994 Abstract The formal reasoning involved solving real world problem usually consists parts type reasoning associated type structure problem domain general reasoning associated kernel formulation This paper introduces typed resolution principle typed predicate calculus This principle permits separation type reasoning general reasoning background typing theory shares language constructs kernel formulation Such typing theory required accurate formulation type structure program contains partial functions predicate subtypes useful efficiently proving certain theorems mathematics logic typed sorted formulation deduction The paper presents typed deduction procedure employs type reasoning form constraints general reasoning speeding proof discovery The paper discusses refinements procedure incorporating existing refinements untyped resolution 1 Introduction The theory data types plays fundamental role formal reasoning involved solving real world problem Type specification indispensable restricting categories data types individuals involved kernel specification problem formulating data type theories problem domain Consequently formal reasoning usually consists parts associated type relations called type reasoning associated general relations called general reasoning Email wangkestreledu 00043702950950 1995 Elsevier Science BV All rights reserved SSDIOOO437029400027X 162 TieCheng WangArtcial Intelligence 75 1995 161194 type reasoning The simplest approach handling relations specified standard permits direct application existing proof techniques The disadvantage problem mixes efficient methods applied In addition type formulae This approach advantage theory solve special inelegant use predicate calculus uses general method inefficient type calculus firstorder firstorder deductive hybrid knowledge carry inference general reasoning representation type reasoning uses sorted reasoning algorithms general Another approach uses specialized form constraints This approach programming calculus programs efficiently proving certain sorted constructors Particularly need deal conditional reasoning This approach speeding proof discovery logic typed predicate approach However motivated reasoning mathematics typed capability handling type partial functions subtypes deduction shall emphasize relations associated polymorphism includes constrained reported belongs ordersorted resolution logic constraint type reasoning typing rules manysorted formulation resolution The theorems theory A conditional typing rule typing rule having hypothetical condition general relations Conditional 1 It needed accurately typing rule needed number important cases typing partial functions For example div X y int formally language For example section subranges enumeration y Ox int A y int The symbols introduced typed language It needed specifying ventional programming x weekendx E saturday sunday It needed x integer It needed typed formula For example x stringvhfx It needed x Zx dpt Example 24 typing rules created naturally typing Skolem specifying predicate Example 23 2 3 4 5 normalization functions For example qx xpt types occurring dbidlb A 6 ubi integer subtypes For example X oddevenx Due existence conditional typing rules existing techniques manysorted addressed sorting ordersorted predicate calculus inefficient difficult exceptions later previous studies underlying hypothetical solved typed approach typing background general language components solving theory relations Thus crucial problem type reasoning logical separate theory kernel relations The typed resolution principle typing general nonconditional formulation condition apply directly With sorted logic assume sense having general reasoning share introduced principle permits normalization problem resolution subsets clauses One set typing denial theorem The typed proved rules called typing theory set typed clauses The principle consists special forms binary resolution One binary resolution typed clauses kernels called kernel resolution The binary type restriction typed clause head typing rule called TPresolution Kernel resolution resolution completeness reduce prove permits typing clauses deduction procedures theory lieCheq WangArtificial Intelligence 75 1995 161194 163 deduce consequences formulation TPresolution TPdeduction Typechecking type restrictions consequences satisfied general related general relations carry type reasoning contained kernel typechecking detects consequences given relations contained typing kernel resolution deduces theory TPdeduction typing theory We shall prove typed version Herbrand typed resolution principle The typed Herbrand proof unsatisfiability theorem based theorem theorem set typed clauses search unsatisfiable typing theory It provides untyped deduction subset untyped basis logical consequences developing typed general problem solving demonstrate Despite gain efficiency specializing type reasoning sorted deduction problem shall devote good deal discussion main cost proving theorem typed reasoning By noting design typed deduction procedures efficient general In particular shall define TPsecond deduction procedure investigate resolution existing improvements general prob Besides program analysis typed language nontrivial manner effectively applied The paper present refinements untyped theorems reasoning theorems derived incorporating cases general lem solving formulated typed deduction techniques examples apply improvements The basic typed deduction clarity representation type reasoning idea specializing 241 Since famous paper nonresolution theorem proving research Bledsoes typed deductive databases focused sorted predicate calculus SchmidtSchauss formulate handle deduction sort relations This approach demonstrated unsorted approach solving certain problems taxonomic Walther 27 1 The sorted predicate calculus employs sorted languages relations uses special algorithms mainly sorted unification efficiency reasoning systems dates deductive 3 Reiters work direction 111 Frisch 131 311 Cohn great advantage intelligence logic artificial The typed predicate calculus presented extends appear general predicates 121 Cohn allows certain include general predicates allowing extension mention deduction Regarding 381 ability LLAMA However systems produced answer incorporated typed approach emphasizes refinements untyped resolution Thus typed approach substitution transforming systematically corresponding unsorted deduction transforming question existing sorted deduction completeness framework logic Weidenbach typing underlying typing existing approach sorted theory Ohlbach theory The sorted prover sort theory existing incorporation direction Frischs sense resolution scratch refinements unsorted sorted It provides method proof unsorted deduction 13141 Frischs framework provides method systematically limited use general predicates Besides sorted deduction typed approach cation RQS 78 constraint logic programming closely related CLP Btirckerts quantifi 17161 Stickels 164 TieCheng WangArticial Intelligence 75 1995 161194 281 All systems improve automated deduction sep theory resolution arating reasoning associated parts problem solving efficient knowledge representation reasoning methods known developed However Frischs substitution framework Btirckerts RQS require ground theory use set predicates disjoint set predicates general relations CLP additional restriction kernel logical formulation Horn set In contrast Stickels theory resolution general restriction language background theory exist certain similarities Stickels total wide theory resolution 28 Lemma 71 special version typed deduc tion TPfirst deduction The difference theory resolution requires immediate solution unsatisfiability subclauses constraints entire background theory theory resolution step For typed deduction solution postponed The remainder paper organized follows Section 2 introduces typed firstorder language Section 3 presents Herbrand model typing theory based model proves typed Herbrand theorem Section 4 presents typed resolution principle Section 5 presents TPsecond deduction proves completeness Section 6 discusses issues refinements typed resolution Section 7 presents summary results obtained implementation typed theorem prover Section 8 concludes paper 2 The typed firstorder language 21 Basic definition The typed language introduced ordinary firstorder language expanded set special constructs associated type relations The language contains usual function predicate symbols variables logic connectives firstorder language The set special constructs consists type descriptions TD typed quantifiers type restrictions TR typing rules typed clauses A TD type description atom form t r special symbol language t r terms conjunction TDs Typing rules typed language A TR type restriction clauses normal forms language defined soon There kinds type quantifiers V X 7 3 x 7 abbreviations certain language components according following rules formula 4 language Vx74 Vxx74 3x7 3xxrAr Semantically form t T usually intuitive meaning t type r The word type paper synonym word sort sorted predicate Thgequality predicate exception RQS constraint predicate See 71 lieCheng WangArtificial Intelligence 75 1995 161194 165 t T terms calculus But syntactically T terms interpreted semantics restriction t 22 Typing rules typed clauses Similar design efficient proof procedures clausal normal cedures normal forms play fundamental role developing typed predicate calculus For typed language define forms One called typing rule called typed clause untyped predicate calculus efficient proof pro kinds Definition 21 A typing rule formula form DHR D TD R TR conjunction literals atoms IDS H called general condition typing rule IDS H conjunction literals general relations Semantically typing order formula R use true conjunction DJJR DJtrueJtrue equivalent rule DHR universal closure H 0 The following examples typing rules We D DJtrueJR DJH DJHJtrue I 2 3 4 5 6 7 8 9 x y intJ Jx int A y int x y reaZJJ x real A y int V x int A y real V x real A y real concatxyseqcuJJxseqa Ayseqa sizex intJ Jx seq sizex intJJx seta x stringJJx seq char x seq char Jx string x smallint 100 x A x 100x int x weekendlx E Saturday sunday 10 Jirst x ax lx seq 11 Mx realO x A x 9x int 12 div x y intJy OJx int A y int 13 div x y stringly OJx int A y int 14 15 16 reduce op S CY J Jop CY x Y CY A S seta image f S set p JJf LY f p A S seta int x int int Rules 1 2 indicate overloaded Rule 2 represent individual rules conjunction function polymorphic 2 11 Rules 4 5 indicate typing rules Rule 3 indicates typing polymorphic parametric string seq char Rule 8 axiomization enumeration type Rule 10 typing 11 type specification concat relation subtype integer Rule 9 given Rule rule partial array M reals If division zero handled 91 Rules 6 7 specify type equality size overloaded function 166 lieCheng WangArtificial Intelligence 75 1995 161194 rule 16 A collection typing returns error message formulated rules 12 13 A metafunction exception mechanism division function takes functors arguments The functions 15 metafunctions functors function reduce image given Rules 14 The typing rules metafunctions use typing rules typing string rules typing called typing theory In practical application theory consist sources typing rules One rules data types functions The set typing rules Skolem language The second axiomatization rules basic set typing theory typing program analysis set basic typing type programming userdefined functions created normalization input formulae For given typing elements llTl denote instances TDs TITD dr iff T Tll TITD theory T shall use TRr denote T T1 TD denote entire set ground set restriction typing T entire rules T Symbolically I dr E T Clearly T nonconditional set nonconditional I dhr E T lTjl dr Definition 22 A typed clause literals general kernel type restriction clause respectively relations R TR conjunction formula form KR K disjunction TDs K R called firstorder procedures formula F normal clause S typing typed form transform F To transform ordinary formula F replacing Vx r 4 3x r 4 F Vx x r 4 3x x r A q5 respectively Then use standard Skolem transform F set S ordinary clauses ization normalization Finally transform rule typed clause according syntax There cases clause transformed typing rule typed clause outside scope paper Frisch presents mation avoid introduction functions certain assumptions typed formulae rules typed clauses ri V b 72 V b How deal cases form transfor typing rules Skolem set typing form directly converted useful transforming 141 normal conditional normal 23 Relations languages The typed language described close Frischs sorted language firstorder structure sorted sublanguage 13141 SFOPC specific bols ordinary nonlogical distinction schema typed deduction procedures concrete algorithms soning essential SFOPC language sorted syntax sugar However SFOPC sort sym language paper concerned mainly type rea symbols specifying restriction predicate symbols For typed unimportant distinguishes type relations This TieCheng WangArtificial Intelligence 75 1995 161194 167 typed incorporate sorted We wish point order efficient algorithms type reasoning results previous sublanguages studied specifically For study possible existing research unification 111 Frischs 3 I forest sort structure Cohns sorted logic sort array computation tree structure 141 monomorphic sorted deduction Walthers sorted unification algorithm Our typed language form constraint firstorder language RQS close notions restricted quantification CR language Biirckerts borrowed viewed restriction considering RQS general RQS permits theory constraints set models models nonHorn theory RQS expanded general exclusion general predicates approach theory 78 In particular theory relations Without resolution example RQS Actually typing constrained 24 Examples We present number examples These examples conditional typed formula presented later normal form A summary solutions demonstrate use typed language typing rules play key role transforming examples Example 23 VKDT This example verification program The theorem states given valid key data vkd valid key data With typed language concatenated typed strings formal result formulated theorem obtained theorem Yxstringystringvkdx Avkdy vkdconcatxy vkd defined V st vkd st St string A Y ch char ch E st 2 ch A ch 6 7 The entire set clauses obtained theory program domain b k Skolem symbols denial theorem language consists 5 typing rules 10 typed clauses 1 concatx y stringx string A y string 2 3 z stringvkd z kz charvkdzz string 4 string 5 b string The domain theory contains actually hundreds rules typed clauses 168 lieCheng WangArticial Intelligence 75 1995 161194 6 vkdz v 7x E z v x 7xchar 7 8 vkdz V 1x E z V 2 xx char vdz V 2 kz V 1cz 7zstring 9 vkdz V kz E zzstring 10 x E concut u 0 V 1x E ux char A u string A u string 11 xEconcutuuVxEuxchurAustringAustring 12 x E u V x E u V 7x E concutuuxchurAustringAvstring 13 vkdutrue 14 vkd b true 15 7vkd concut b true Clause 1 typing normalizing definition typed clauses lo12 Clauses concut overloaded operators adding soundness rules Note clause 2 conditional demonstrates typing rules produced background rule operator concut Clauses 23 69 obtained clauses 2 3 typing rules axioms concut Since important typing rule This example proving theorem vkd Among transformed conditional typing nonconditional type restrictions theory translation theorem AM8 minimum wellknown The original example set TDs specifying xxpt means Example 24 AMT formulated Bledsoe AM8T given direct contains Among means closed interval model translation AM8T consists basic typing klk5 typed clauses b b2 typed formula Fo maximum AM8 boundary 34 value theorem real analysis typed language This language theorem f yfpt x point intuitive rules range f x dpt means b domain The reader refer 34 domain function theory typing x point y point conditions stated Fo 3 1 dpt WxxptuxAxZflfx AWxdptWyxptuyAyxxfx fy xxO A vw W 3 44 fy fw A Wx dpt fx 6 fw Y xl 1 1 3udptVtdptfu ft The set clauses obtained normalizing Fa consists typing typed clauses b3bg Each k6kg corresponds normalization Skolem rules k6k9 created function EeCheng WangArtificial Intelligence 75 1995 161194 169 kl axpt k3 x dpta 6 x A x blxxpt k2 bxpt k4 x xptx dpt fxfptxdpt 1dpt hx dptx dpt k7 kx dpt1lx dpt qxxptx lxdpt bl xxdpt b2 x 6 blxdpt 63 fl fxVaxVxlxxpt 64 x 1 V qx xx dpt bs xlVaqxxdpt x lVfx d fqxxdpt b7 bs hw xv fx fwxdptAwdpt bs fu With typed language set inequality axioms AM8T given follows standard typed clauses KRI KR Note clause form KR V V R fhw 6 fwlwdpt d fWuludpt typed treated ns aI a2 ax x xx xpt v x fpt xyVyxxxptAyxptVxfptAyfpt xyVyzVxxxptAyxptAzxptVxfptAyfptAzfpt a4 xgYVygxVfx fyxxptAyxpt Example 25 ZLS7 The set clauses given typed language divided Clearly shown theory set typed clauses typed language adds clarity representation As deriving refutation unsatisfiable With later improves set typing efficiency 1 2 3 4 5 6 7 8 9 10 axnum bfixnum x intx nut x nutO 6 xx int x natlxxnum xfixnumx 6 100x nut x y intx int A y int int A y int x y intx plusx y finumll minusx y finumxJixnum P x xnum A yjixnum A x yfiwnum A yjixnum A x yfixnum 11 xyAyz x 6 zxintAyintAzint V xrealAyrealAzreal 12 plus x y x yxBxnum A yfinum A x yfinum 13 minus x y x yx fixnum A ymum A x y fixnum 14 x y x yx intV x real A y intV y real 170 lieCheng WangArtcial Intelligence 75 1995 161194 15 16 17 yqxo xy x int V x real A y int V x real x xx int V x real 0 xx nut 18 x 6 1OOxJixnum 19 0 Q 20 0 b 21 22 ab plus minus b btrue 3 The typed Herbrand theorem theorem reduce satisfiability set ground basis resolutionbased search unsatisfiable set clauses permitting Herbrand satisfiability clauses clauses pose develop efficient deductive procedures instead starting procedures Herbrand typing theory This section proof methods This theorem relates instances set instances Our pur typed predicate calculus However existing deductive extending calculus For extension need typed version given satisfiability untyped developing theorem relates satisfiability logical consequences theorem scratch develop proof unsatisfiability set typed clauses subset ground clauses predicate devoted theory notations We introduce following discussion l U TD entire set ground TDs language l U KA entire set ground kernel atoms general relations language Note U 7 U U KA Herbrand base language 31 The Herbrand model typing theory We start study special Herbrand model called Herbrand model typing theory Definition 31 Ground ro ground TR type restriction r0 T denoted gtpT ro typing preconditiongtp The set ground typing preconditions Let T typing theory let gtp gtpT ro hl A A h 1 dtlhlrl hnlrn 4r19 lr vo c Vlgr ad minimally unsatisfiable Definition 32 Weakest ro ground TR The expression wtpT r0 defined called weakest precondition typing preconditionwtp wtp r0 T Let T typing theory let typing EeCheng WangArtcial Intelligence 75 1995 161194 171 wplro v WI WEgtpKro Intuitively gtp ra T precondition ra implied T wtp ro T weakest precondition implied T Example 33 Let dodI d2 ground TD member UTD let POPIP relations subset ground atoms general b e subset UKA Let TI 4ddmJm 2Jdltd4Jw Ap2d43Jdd6JJd5 We use 7 disjunction results following use true conjunction Then pTt dl true gfpTl 9 6 PI wtpT dl true wtpTld2 PI pUi 9 4 1 A 21 wqdTld3 pl Ap2 gWi 3 4 1 A 7p23 wtpUl4 71 A PZ vp3 gfpT 7 ds 6 wtpTl O Proposition 34 Let L typed language let T typing theory For logically equivalent wtpT el A e ground TDs wtpT el A A e el A wtpT e wtpT el A s A e M true 3 From g M true To c Tgr unsatisfiable Then j 1 j k Proof Let A4 interpretation Definition 32 exists member g grpT el A A e 31 exists To dlhlrl From Definition V V Te TaUlel minimally exists Tj djl hiI rjl djkhjk Jrjk unsatisfiable Let gj hji A A hjk The gj C gtp T ej From g M true fact gj contains conjuncts g conclude wTejlM true Hence wtp T el A A e entails wtp T el A A wtp T e similar We leave reader 0 The proof direction equivalence gjlM true consequently Tj C To Tj UTej dkhkrk minimally For typing theory T Herbrand special Herbrand model T called Bbased interpretation B I KA define Herbrand model T Definition 35 Least Herbrand model Let T typing UKA let theory For subset B A4 d E UTD 1 wtpTdlB true Then B U MT called Bbased Herbrand model T 3 In paper use e M denote truth value e M formula e interpretation M 172 TieCheng WangArtificial Intelligence 75 1995 161I94 Example 36 Herbrand model Tl different values B following set T given Example 33 present For table Bbased B 0 PII PIPZI IP33 G 4 d4 dl7 BUM dld4 PllZ tlsdZd3 plp2dl2d3 dl d4 P3rdld4 PIPP d1d3d4 pIp2p3dld2d3d4 1 2 3 4 5 _ B Trl B true true true true true The significance Definition 35 justified following theorem Theorem 37 Least Herbrand model subset B U KA Denition 35 model T Bbased theorem Let T typing theory For Herbrand model T B U I defined dj Mf true Then exists set Tj C T Tj djhjrj I B U MT model T We going definition 31 exists element gj gtpTdj deduce Proof Assume contradiction assumption Since I model T exists member dohd A Ad T false 1 Then false h t true j 1 6 j n dj true Since dj 6 B dj true wtpT djlB true implies From Definition true B Consequently gj hj A A hjk TjlTn U ldj unsatisfiable Let To Tl u u T u dohd1 A A d TOTD U Tdo unsatisfiable Let TA dhr Then g h A A h member gtpT unsatisfiable disjunct wtpT However conjunct h g h h comes dohd A Ad conjunct hji gj j 1 6 j n jl jt jk h comes element Sj For case easy determine h B true g B true Since g disjunct wtp T wtp T B true conclude earlier assertion Consequently false t true This result contradicts subset To TT U ldo djhjrj dShSrS minimally minimally E il 32 The typed Herbrand theorem Lemma 38 Let T typing theory let SO set ground typed clauses So iff set SW KV TwtpT R 1 KR E SO Tunsatisfiable TUSc unsatisjable wtpT R SO unsatisfiable S satisfiable Let B Herbrand model S Since S Proof Assume B subset U KA Let I B U MT contains TDs assume MF d E UTD 1 wtpT dlB true By Theorem 37 Z model T Let KR arbitrary element SO We KR true I Assuming TieCheng WangArtcial Intelligence 75 1995 161194 173 R t true Since B model K V ywtpT R 1 true Then wtpT R wtpT R B false Since A d TDs dl d By Proposition K false K false conclude K V lwtpT R B true Consequently KIR t false S R ground TR R dl A 34 wtpT R wtpT d A A wtpT d Then wtpT dj B false Hence TDs R disjoint R false contradicts KR true 1 Note KR model So We noted earlier model T U So This result contradicts definition B dj MF implies assertion hypothesis exist dj R set h4 dj h4 Since dj t false Consequently R true derived earlier Therefore I I SO Then I model T Therefore chosen arbitrarily SO Tunsatisfiable On hand element S logical consequence T U SO S cl SO Tunsatisfiable unsatisfiable Definition 39 Gtpdescendant Let T typing clause A ground clause C called gtpdescendant ground g true C called proper gtpdescendant KR T instance KIR KR gtp g R T theory let KR typed KR T iff exists C K V Tg If Example 310 Consider 33 clause Kd1 A d2 A d3 Note PI A p2 gtp dl A d2 A d3 Tl Then ground instance Kr K K V 11 V 72 gtpdescendant Kd A d2 A ds Now consider clause Kd Since wtp T dl true K proper gtpdescendant theory Tl given Example typing Kdl Theorem 311 Typed Herbrand Let T conditional typing theory let S set typed clauses S Tunsatisjiable exists finite unsatisfiable set S gtpdescendants clauses S T theorem theorem S Tunsatisfiable lwtpT R KR E S unsatisfiable To complete Herbrand instances clauses T finite set S ground iff exists finite Proof According instances set T ground iff clauses S St Tunsatisfiable By Lemma 38 S Tunsatisfiable proof set S KV theorem need S finite set gtpdescendants clauses S T Note T finite Then ground TR R gtpT R finite wtpT R disjunction finite number gtps Then Definition 39 K V wtp T R S stands finite set finite conjunction gtpdescendants set gtpdescendants S finite S finite KR T Therefore given clauses S T 0 33 Remarks Remark 1 The set clauses contained conditional Horn set cHs Let L firstorder L R iff restriction S R SIR Horn set A typing theory forms special class language Let R set atoms called cHs respect special form closed substitutions A set S clauses typing theory 174 lieCheng WangArtQicial Intelligence 75 1995 161194 cHs cHs respect theorem Theorem 37 generalized cHs 351 entire set TDs The Herbrand model It known set ground atoms consistent classical deduced result following S 301 We claim sense Horn set S Herbrand model equals Theorem 37 Proposition 312 If T nonconditional Herbrand interpretation B set MT d E U TD 1 wtp T d B true given Theorem 37 exactly Herbrand model T d E U TD 1 T b d Proof It follows immediately following proposition cl Proposition 313 If T nonconditional typing theory d U TD wtp T d true ifs T k d wtp T d 0 iff T k d Consequently Her wtp T d B true ifs T b d wtp T d B brand interpretation B U KA false iff T k d T b d gtp T d contain Proof If T nonconditional clause true wtp T d true If T k d gtp T d wtp T d q On hand wtpT d q wtpT d true T d If wtpT d B false gtpT d 4 So T p d 0 wtpT d B true T nonconditional sorted Herbrand Remark 2 For nonconditional Frischs set 2 nonconditional set cr typed clauses set ground 2 According typing theorem given theory typed Herbrand 131 The sorted Herbrand states typing rules Ssentences 131 iff CX ag instances members Y sorted respect LY U 2 unsatisfiable similar theorem theorem Rsentences Lemma 38 Y U 2 unsatisfiable iff S K V lwtp 2 R 1 KR E CX A wtp 2 R 0 Since 2 nonconditional 313 wtp 2 R Cl iff 2 k R iff wtp 2 R true Then element S K V wtp 2 R K Hence S K 1 KR E LY A 2 k R Then definition S equals 4 Proposition We S 4 A general version Herbrand theorem require 78 This Horn set The sorted Herbrand restriction Horn sets certain extent However limited It interesting existing Herbrand theorems special case topic develop super Herbrand applicability constraint theorem constraint underlying theorem described Frisch theory given Biirckert constraint theory 141 releases theorems Herbrand theories contain general predicates theorem iZeCheng WangArtQicial Intelligence 75 1995 161I 94 175 4 The typed resolution principle theory T Tunsatisfiable Given typing T U S applying recall kinds binary clause formula form DHR classical resolution set S typed clauses refutation proof resolution principle require following typed formula form KR represents represents typing rule redundancy typed calculus DzHzR2 D2 literal IRI DzHzRz literals lH1 yH2 resolution KI RI KzRz literals KI K2 resolution KI RI DHR D literal lR1 resolution KIRI DHR literals K1 H resolution DIHIRI resolution DIHIRI 1 binary 2 binary 3 binary 4 binary 5 binary use Not Clearly create problems contribute difficult fourth kinds resolution produce resolvent typing rule force deal changeable typing resolvent form Di V DJHIR Di 04 TDs produce kinds unwanted section special version resolution principle second kinds binary typed clause typing resolution introduce typed resolution principle This principle use theory The use fifth kind resolution rule In order avoid good handle For instance troublesome resolution called Definition 41 Let T typing KR typed clause R called Tacceptable iff TTD k 3R R called Tprovable iff ljTl k 3R KR called Tacceptable iff R Tacceptable Tprovable theory R type restriction Tprovable The kernel resolution defined close RQresolution rule 71 Definition 42 Kernel resolution Let K1 RI KzRz typed clauses common Let Li literal K1 literal K2 If taining variables L1 lL2 unifiable mgu L1 7L2 KLBRI A RzB called binary kernel resolvent BKR KIR KlLlBV K2R2 6 general unifier factoring Similar inference TDs R mgu CT KcRa called factor KR As mentioned problem proof procedure This remark applies typed resolution rule ordinary clause factoring typed clause KR rule deduces factors clause If literals K obtained applying u KR actual completeness solving needs 401 factoring incorporated establishing Let Cl C2 typed clauses A kernel resolvent Ci C2 BKR Ci C2 BKR Ci factor C2 BKR factor Ci C2 BKR factor Cl factor C2 176 TieCheng WangArtcial Intelligence 75 1995 161 I 94 Definition 43 TPresolution Let KtRt typed clause let dt conjunct RI Let DHR common KlRl If dt D unifiable 0 mgu dt D Kt0 V 7HB Rldl DHR called TPresolvent steps starting dt typed clause called rule contains variables TPresolution A sequence typing KIRI O A RB TPdeduction Definition 44 TPdescendant TPdeduction Let T typing theory let Ka Ro T iff called TPdescendant typed clause A typed clause KR KR 1 6 n exists sequence D KoRo KlRl KiRi KoRo T D called TPdeduction KR TPresolvent T Ki_1 Ri_1 KoRo Our typed resolution principle consists deduction TPresolution With principle propose general version typed deduction TPO deduction following definition rules kernel resolution Definition 45 TPO deduction clauses A finite sequence D KIRI KzRz deduction KR S T iff KiRi Let T typing theory let S set typed called TPO KR KR 1 clause S 2 Tacceptable 3 Tprovable TPdescendant A TPO deduction ntrue kernel resolvent typed clauses D preceding KiRi clause D preceding KiRi S T called TPO refutation S T The process verifying kernel resolvent Tacceptable Tprovable called kernel resolvent T TPO typed deduction procedures Tprovable typechecking We need point requirement acceptable TPdescendant deduction defined flexibly In extreme applied implemented This argument constrained abandoned In flexibly choosing different resolvent later optional Typechecking implemented In extreme completely applied subset resolvents levels reasoning resource bounds resolution literature 8161 Example 46 Let T4 tl t2 t3 t4 typing set typed clauses Prove 1 T4tunsatisfiable theory let S4t ht h2 h3 h4 tl t2 t3 t4 aE P hl sxfx V vxx E h2 cfx v uxx E fx Qx E x Plsaxlx Q h3 h4 xx P lC x lx P First deduce TPdescendant cl h4 TPdescendant CT h3 We shall use TP KR stand TPdeduction kernel resolution respectively ieCheng WangArtijicial intelligence 75 1995 161194 177 Cl fx vafxxE p h4vt4t3 2 fx v afxxE II h3t4t3 Then deduce kernel resolvents C3Cg kernel resolution finally deduce clause Cg TPdeduction c3 q c5 snfxxEAxP cfxx EA x P safxxEAx P c6 nx E A x P cl Utrue I hlh3 h2vh3 KR c4c1 m c5c3 p C6tlt2 Note nonconditional typing theory T typed clause Tacceptable iff TPdeduction Tprovable kernelempty replaced completely typechecking resolvent Tprovable This means refutation kernelempty similar clause essentially special version completeness Btirckerts RQresolution 7 Frischs theory typed clause form UR restriction sorted deduction special version completeness resolvent deduced A In case TPO theory given definite 141 Thus theorem following theorem RQS deduction theorem Frischs sorted deduction Theorem 47 Let T typing theory let S set typed clauses If T nonconditional T llTl S Tunsatisable exist TPO refutation S T The theorem proved refutation lifting formal proof reader ground case conventional way We leave typed Herbrand theorem Theorem 311 For conditional typing theory TPO deduction established basis typed Herbrand given complete This completeness theorem Theorem 47 lemma Lemma 48 Let T typing theory let KR typed clause If C gtpdescendant KR T exists TPdeduction KR KR KR Tprovable C proper gtpdescendant KR Proof This lemma viewed special case Lemma 58 proved section 0 Theorem 49 Completeness clauses exist TPO refutation S T theorem TPO If S Tunsatisfiable set typed Proof By typed Herbrand gtpdescendants S By Lemma 48 exists TPdeduction theorem clauses S T Let C E S gtpdescendant set S clause KR KR T exists finite unsatisfiable KjRj 178 lieCheng WangArtiJScial Intelligence 75 1995 161194 Tprovable Since C proper gtpdescendant KjlRj T KjRj TPdeduction consists finite number steps TPresolution exist deduction Dt set Sk S TPdeduction element S proper gtpdescendant clause S U Sk T Then S U Sk TIIunsatisfiable By Theorem 47 exists TPO refutation 02 S U Sk Tll Then entire deduction formed appending D2 end D1 TPO refutation S T 0 We point completeness theorem strong support practical use typed resolution principle This proof requires apply TPdeduction derive set consequences unsatisfiable nonconditional subset given typing theory This process called weakening However use weakening different sense use sorted calculus literature 331 A TPO deduction weakening called TPjrst deduction It known weakening inefficient general exist criteria final derivation clause decide TPdeduction phase terminated weakening useless TPresolvents deduced The TPdescendant c2 h2 Example 46 redundant TPresolvent Assuming exist T41 additional N conditional typing rules PQ 4 Phr contribute TPdescendants h3 h4 possibly additional 2N TPresolvents generated It turns general TPdeduction inefficient earlier stages proof delay application general TPdeduction possible The TPsecond deduction presented motivated consideration 5 TPsecond deduction 51 Basic definitions We introduce special form KI PR typed clause called divided typed clause KIP called divided clause K P called leftkernel rightkernel respectively Semantically KP standard clause K V P However standard clause assume contains duplicated literal occurrences That K V P indicates clause obtained removing literal P occurrence K merging right For divided typed clause KI PR assume exist duplicated literal occurrences subclauses K P respectively But K P share literal occurrences Note R type restriction 1R share literal occurrence K P Correspondingly factor divided clause KIPR obtained instantiation KOlPeRO clause merging literal occurrences K8 P0 respectively Such factor called divided factor TieCheng WangArtificial Intelligence 75 1995 161194 179 leftkernel kernel general Normally inherited typed clause simplicity hold inherited input set usually form KIDR relations A kernelempty clause hold relations contained rightkernel typing P KIPR theory Thus divided written KR TFdescendants form K KIPR formulation 01 PR Why use divided typed clauses Note general relations contained typing kernel theory hidden underlying inherited kernel TPdescendant TPdeduction effect restricting general need track relations special Divided clause use reasoning associated In order avoid proof failure possibly caused effect proof use course searching deal deduction relations introduced partly purpose TPdeduction Restricting rules control strategies resolution relations inference Why subclauses K P divided share literal occurrences This literal L clause P stand theory TPdeduction Before inheritance L literal inherited implicit K K contains occurrence L Of course L explicitly presented L removed merging But merging needs considered typed clause KIPR allowed instead default operation merged typing refinement Definition 51 Let T typing divided typed clauses KlIPlR 1 K21 P2R2 theory let KI IPlRl KPzR common A binary kernel resolvent T form KI PR defined considering contain variables Bm following cases 1 L1 E Kl L2 E K2 8 mgu L1 1L2 K KlLlO V KzLzB P P V P2e R RIB A R20 2 LI E Kl K2 0 LZ E Pz 8 mgu LI 7L2 K KlLlB PP8vP2L20and RR0AR2 3 K1 II K2 q LI E PI L2 E P2 0 mgu L1 7L2 K 0 PPLBVP2L26andRR1BAR28 Let Ct C divided Cl C2 BKR Ct divided C2 BKR divided typed clauses A kernel resolvent Ct C2 BKR factor Ct factor C2 BKR divided factor Ct divided factor C2 We extend concepts gtpdescendant TFresolvent TPdescendant introduced earlier divided clauses Definition 52 Let T typing typed clause A ground clause KI W called gtpdescendant iff exist ground instance KI PR KI PR gtp g R T W P V Tg If g true KI W called proper divided gtpdescendant theory let KIPR divided K PR T KPR Definition 53 Let KI IPI RI typed clause let dl conjunct RI Let common KI I PI RI If dl DHR typing rule contains variables 180 lieCheng WangArtijicial Intelligence 75 1995 161194 D unifiable 8 mgu dl D KICIPI V THfRldlB called divided TPresolvent KIPIRI DHR dl A R8 Definition 54 Let T typing theory let KoPoRJ typed clause A typed called divided TPdescendant Kol PoRo T iff exists clause K 1 PR sequence 1 II KiIPiRi T D called TPdeduction K 1 P R Ko PO Ro T divided TPresolvent Ki1 IPilRi_l Definition 55 TPsecond deduction typed divided clauses A finite sequence D KllPlRl KPRz KI PR Let T typing theory let S set called TPsecond deduction KI PR S T iff KilPiRi KjPR 1 clause S 2 Tacceptable kernel resolvent typed clauses D preceding Kil PiRi 3 Tprovable TPdescendant kernelempty clause D preceding KifPiRi S T called TPsecond refutation S A TPsecond deduction q lOtrue T TPsecond deduction complete proved Section 53 As mentioned earlier requirement kernel resolvent Tacceptable TP descendant Tprovable optional The purpose including definition obtain stronger version completeness theorem 52 Examples Example 56 Use TPsecond deduction solve Example 46 Since 1 contains kernelempty clause kernel resolution KR applicable beginning deduction We following kernel resolvents note KinR written KR simplicity PI sx fxx E A x P cfxx P2 p3 q xEAxPAfxP EIx P l m hrh3 h2r3 KR p2h4 Note p3 kernelempty clause TPdeduction applied This produce TPdescendant 4 eventually clause p6 4 I7safxx EAx P Tp p3t4t3 ps Oa E A P P6 atrue m P4rP1 UP P5flf2 In comparing derivation given Example 46 search space TPsecond refutation reduced kernel resolution applied EeCheng WangArtificial Intelligence 75 1995 161194 181 p3 deduced There kernel resolvents possibly produced All useful Note need deducing kernelempty resolvent obtaining finally refutation serve strong heuristic According heuristic kernelempty resolvent P3 example given higher priority develop Example 57 Use TPsecond deduction prove AM8T given Example 24 The TPsecond deduction prooftree presented automatically typed prover proving theorem We shall analysis prooftree Section 7 3 g2 fu d fwuludPt u 6 fku v fu 6 ur2 g3 g4 g5 g6 g8 fu x fWUurs X hk0 V hk0 gr4 hkU d lr5 6 dhklr6 qfdk0 MkUr7 fhkl 6 fqhklr8 Given b KR Pas KR g2b7 KR g3b3 KR g4h KR gsvb5 m gsvb4 m g5b6 9 dhk0 d hU0 vhk0 d dMM0r9 g10 0 sf fdhkl vfhkl d ur10 g8a3 g11 hk0 X dWU0lnl g12 u ff qWU0 V hWU d ur12 g13 fdMW0 6 fQ0rl3 814 fQ0 6 fqhWUrl4 g15 fMVU d fU0m g16 nr16 817 q b d dhUU KR g9g7 KR g11a3 m lb8 KFc g13va2 KR g14vg10 KR gl5rh V hUU 1V WkU X bw iI gl6 k3k9 g18 q lqMW0 x bv hk0 6 lr18 m g17vg6 g19 b qhk0lhk0 lr19 KR g18 a2 k2 k6k9 g20 hkU d blhkl 6 lr20 KR gl92 k2 k4 kak9 g21 q llMk0 6 lr21 g22 Clr22 g23 q lhkl g24 Cl true KR gzo b2 ksks KR g21vg5 Ztrue II g22 k2 k4 k6k9 KR g23 9 g5 182 lieCheng WangArtcial Intelligence 75 1995 161194 The type restrictions r2r22 given bellow For simplicity r2r4 expressions The rest given simplified right hand produced simplification described briefly results procedure TRsimplifier later given 2 fufptvfptAfkufptAudpt f vjjrt A u dpt r3 kudptA fufptA fhkufptA fkufptA udpt r4 hklxptA kZdptA flfptA fhklfptA fkltA u dpt 1dpt true true r59r69rlTr8 r9 rlo rll 112 113 r14 r15 rl6 r17r1Svr19 r20r21Tr22 53 Completeness theorem hklxptAqhkZxpt fhkOtAvfptAfqhkOfpt f hklxptAqhklxpt vxptA hklxptAqhkZxpt hklxptAqhkldpt 4 fqhkOAqhkOdptAhkOpt bxpt A hkZxpt Aqhklxpt true We formal proof completeness TPsecond deduction Besides formal discussion provides theoretical base confirming refinement TPsecond deduction completeness lemma TPdeduction Lemma 58 Lifting Let T u typing theory let KI PR divided typed clause If K 1 W gtpdescendant KI PR T exists TPdescendant KtPtRt KIPR KI W proper gtpdescendant KtlPtRt completeness dhr unsatisfiable W PVThlV Proof Outline By Definitions 31 52 wellknown property instance KIPR KIPR input resolution Horn sets exist ground 1 6 n dihiri E T multiset To dthlrl VTh exists input TUR refutation D 7Rh 7R 7 Ri lRi Cl RI resolvent element diri Tolp Let W P V Thl V V Thi let 0 lR_ deduction KhIWLRb KIPR KIWR KLIWARL KIWtrue dirihi By treating Clearly KIWR TPresolvent 101 lemma typed clause typing KI PR ordinary T Wi Piei Rf RiOi By Definition KI P R T Let j n smallest Ki_IW_Ri_ rule ordinary clause lifting deduction D KI PR 54 D index hjl h true Then clause 0 lifted KIWRi instance Kil PiR TPdeduction KjPR Bi K KiOiy EeCheng WangArtcial Intelligence 75 1995 161194 183 Wj W WA W lTal k R llToll b RL Thus KiI W true gtp RI T By Definition 52 KI W I j 1 6 n KIW proper gtpdescendant rl Kt IPtRt T Corollary 59 Zf KI W proper gtpdescendant KI PR T exists TPdeduction KtIPttrue KIPR jTjl KI Wr ground instance KtIPt Zf q proper gtpdescemfant OnR q Cl deduced 7OR TPdeduction T To prove TPsecond deduction divided ground resolution The divided ground deduction typing ground clause type restriction following example KI W Consider theory complete need lemma completeness special TPsecond typed clause form true written simpler assumed resolution Example 510 Let Sh consist divided ground clauses dtd4 given It refutation Sh obtained easy check divided ground Sh unsatisfiable The following resolution dt PVIP d2 p V yqltrue P v 4lP 7p V 741 true given given given given PIP TPITP dlqlqll qId4qll 01 V P pldsdl 4 4 4 4 4lP p 01p dto dtt qlp qltrue 42 d13 q IIP 17lcI d14 MlpWddl ddlpLUdl dxqldddl 4oP4ll dlolP9d2PIl MllqlL421 dlolp43IPl For divided ground resolution allow duplicated merged This restriction leftkernels literal occurrences useful rightkernels refutation divided later typed refutation means lifting lifting divided ground lemma divided kernel resolution Lemma 512 given soon Lemma 511 Let S set ground divided clauses If S unsatisable exists deduction clause IJC S divided ground resolution 4 Proof If q ICI S let proceed induction number excess literal occurrences S 11 EX S CcES size c I size KI W sizeK sizeW sizeO 0 trivially Otherwise lemma holds 4 According talk Resolution Completeness Proofi given Ken Kunen The 4th Annual Frontiers Computing Symposium Honoring Professor W W Bledsoe November 1991 Austin Texas lemma appears reinvention Ken Kunens research results reported Symposium Lemma 511 originally reported author manuscript preliminary version paper submitted CADE11 October 1991 184 lieCheng WangArtificial Intelligence 75 1995 161194 Case 1 EX S 0 Then S contains unit clauses Since S unsatisfiable exist complementary units Kil Wi 12 S From Definition 51 010 divided resolvent Kt 1 W1 K21 W2 Case 2 EX S 0 Assume S EX S N lemma true Case 21 For Kj W S W Cl Let Sk K 1 KI W E S Then SK unsatisfiable Since SK set ordinary clauses exists deduction DK clause SK complete resolution procedure propositional logic Let D obtained DK replacing clause C DK divided clause ClO Then clause D divided clause S divided resolvent D Since q O D D refutation S divided resolution Case 22 For KIW S K q Let SW W I KI W E S Then SW unsatisfiable Thus exists deduction DW clause SW complete resolution procedure propositional logic Let D obtained DW replacing clause C DW divided clause q IIC Then clause D divided clause S divided resolvent D Since ElU D D refutation S divided resolution KoIWO U KoEI let SW SKolWo Case 23 S contains divided clause Kol WO KIJ Cl Wo 0 UUlWu Then Let SK S SW SK unsatisfiable Since EX S EX N induction hypothesis exists refutation DK SK divided resolution refutation Dw SW divided resolution Let D1 deduction obtained DK putting WO rightkernel K017 rightkernel descendants DK Then D1 deduction divided resolution S node q I WO If lemma D1 contains node cid1441 proved If deduction D obtained appending Dw end D1 form refutation S divided resolution 0 Lemma 512 Lifting lemma divided kernel resolution Let T typing theory let K1 I PIRI KIPRz typed clauses containing variables common Let Ki I Wl KI Wi gtpdescendants K1 I PIRI K2l PzRz respectively If KI W kernel resolvent K I Wi Ki I Wi exists kernel resolvent KIW gtpdescendant KPR KIPR KIIIPR KzlPzRz T 12 Ki KiilPiiRii identical Kil PiR Kiil PiiIRii Tprovable TPdescendant Kil PiRi Proof From definition gtpdescendant Definition 52 hypothesis lemma Kl W gtpdescendant Kil PiRi 12 exists ground instance Kil PRf Kil PiR gtp gi Rf W P V lgf By Definition 51 need consider following cases Case 1 Ki q Ki q Then definition K resolvent Ki Ki W W V WJ Consider clause C KI P V Pi R A Rk Clearly C kernel resolvent Ki I PR KI PiR Then treat divided clauses ordinary clauses apply standard lifting lemma lo exist kernel resolvent C K1 PI RI divided factor K2 I P2R2 divided factor C instance C However merging exists K P lieCheng WangArtificial Intelligence 75 1995 161194 185 RI producing C C form KPR aK Ku P V P PC R A Rb Rg Since gi assumed T Definition note W V Wi Pi V Pl V gi V gk Then Definition 52 KI W V W gtpdescendant gtp Ri 31 gi A g gtp R A RG T gtp Ra Also substitution KI PR Case 2 Kj Cl K 17 L Ki equals Li W Then definition TPdeduction resolvent KIPR 01 P22R22 K2 PzR2 obeys clause C KiL I P V P22ALi substitution A 0 K Wi P22A K Ki L W Wi V Wi Lg By Lemma 58 exists TPdeduction K22I P22R22 K21 Pz RZ 01 Wi proper gtpdescendant KZZ PzzRz llTl k R22A Thus T That 01 P22R22 Tprovable Note K q K2 clause TF IJ Then second deduction Now consider Ri A R22A literal Kl Clearly C kernel exist literal P22A Similar factor q IP22R22 resolvent C KPR factor literal LI K1 literal L2 P22 C divided u K Li Ku P V P22AL PO instance C That substitution Ri A R22A Ra From W PI V P22hL V Tgi W Pu V lgl 52 order finally prove KI W gtpdescendant KI PR need g gtp Rcr But true facts Rcr R A R22A g gtp R true gtp R22A facts W P V g Wi P22A W Wi V WiLk Thus Definition q lP22AR Case 1 discussion divided definition KllPlRl KiilPiiRii definition lITI1 b RiiAi ThUS KiilPiiRii That TPsecond deduction Now consider Case 3 Ki 0 Ki 0 Then definition K IJ W resolvent Wi W By Lemma 58 12 exists TFdeduction cI W proper gtpdescendant KilPiRi 7lPiiRii Tprovable Note Ai 0 KiiAi W PiiAi q PiiRii K Ki clause 0 Then TPdeduction clause KilPiRi obeys resolvent C 71 PI 1 Al L V P22AzLi Cases 1 2 IIll PI 1 A1 RII Al cl1 P22A2 R22A2 Then similar exist kernel resolvent C KI P R 01 PI 1 RI 1 divided factor factor C instance C That 01 P22R 22 divided T PI 1 Al L V P22A2Li Pu RI A1 A R22A2 Rcr substitution W Note PI 1 AI Li V P22ALi Pa Then Definition 52 order finally prove KI W gtpdescendant true gtp Ru But true facts Ru RI 1 A1 A R22A2 true gtp RI 1 Al 0 gtp R2 facts Wi Piihi W WiL V WiLi RI A1 A R22 AZ Clearly C kernel K PR need discussion Theorem 513 Completeness let S set divided TPsecond refutation S T TPsecond deduction typed clauses If S Tunsatisjable Let T typing theory exists Proof Since S Tunsatisfiable set Sgfp gtpdescendants typed Herbrand theorem clauses S T S exists finite unsatisfiable Assume 186 lieCheng WangArtificial Intelligence 75 1995 161194 written form divided gtpdescendant defined member S Definition 51 Then Lemma 511 exists refutation D SgP divided resolution We transform D TEsecond refutation D S T First leaf node D replace divided clause clause S divided clause gtpdescendant Then nonleaf node parent nodes replaced clauses S typed clauses deduced S TPsecond deduction replace typed clause deduced parent clauses TPsecond deduction T confirmed Lemma 512 Finally replace clause lJO D typed clause cll gtpdescendant This clause form q OR q O proper gtpdescendant q OR Then Corollary 59 q U deduced q OR TPdeduction T II 6 On refinements typed binary resolution We described typed resolution principle providing basic inference rules typed predicate calculus However unlimited application principle produce redundant resolvents Although exists TPsecond deduction redundancy TEresolution reduced significantly redundant resolvents produced unconstrained kernel resolution By noting kernel resolution close classical binary resolution natural consider improvement kernel resolution extending existing refinements binary resolution A formal study extension outside scope paper Here present overview results preliminary study extension 61 On refinements nonconditional typing theory If nonconditional typing theory considered refinement resolution extended typed deduction direct transformation similar Frischs framework 141 transforming unsorted deduction procedure sorted Actually sort sorted logic corresponds atomic type typed language nonconditional typing theory viewed kind sorting theory Herbrand model Frisch indicated refinements resolution proved complete usual method based Herbrand theorem proving ground completeness lifting ground proof extended completenesspreserving refinement sorted deduction direct transformation This result holds typed domain Thus following Frischs framework outline transformation following steps Let P resolutionbased deduction procedure 1 Transform clause P typed clause 2 Transform resolution rule P typed resolution rule similar manner transforming binary resolution kernel binary resolution stated Definition 42 3 Extend constraints attached clauses resolvents P corre sponding restrictions typed clauses typed resolvents lieCheng WangArticial Intelligence 75 1995 161194 187 4 Apply typechecking kernel resolvents optional non kernelempty resolvents 62 On refinements conditional typing theory In dealing conditional typing theory simple approach use direct transformation outlined plus use TPdeduction However simple approach result deduction incomplete Consider problem Example 46 By treating TDs TRs ordinary literals conjunctions ordinary literals respectively untyped linear deduction procedure starting linear refutation set h sx fx V uxx E obtain ordered clauses T41 U SJ Assuming leftmost literal goal sx fx hl literal resolved clause t4 x Psa xn Q clause goal hl refutation Now let use typed ordered linear deduction directly transformed linear deduction solve problem use hl starting goal Note t4 underlying typing theory longer clause goal hl Then proof fail immediately It turns dealing conditional typing theory important question typed refinement complete A simple approach use weakening deriving set consequences unsatisfiable apply ITdeduction nonconditional subset given typing theory After nonconditional portion typing theory direct transformation mentioned earlier incorporating refinements untyped resolution However mentioned earlier weakening unsatisfactory 63 On completenesspreserving refinements TPsecond deduction A interesting question transform refinement resolution TPsecond deduction introducing incompleteness Note ITsecond duction leftkernel typed clause freely deduction But literal rightkernel typed clause usually inherited general condi tion given typing theory prevented resolved inheritance Then strategy avoiding incompleteness attach additional constraints leftkernel For example require leftkernel kernel resolvent produced TPsecond deduction tautology One prove proof similar proof completeness TPsecond deduction strategy complete However require entire kernel tautology procedure longer complete For counterexample note tautology d7 Example 510 needed proof 101 lock resolution 6 semantic resolution Our preliminary study indicates strategy possible extend unit ITsecond resolution deduction introducing incompleteness The extension essentially steps described earlier handling nonconditional typing theory However order avoid introducing incompleteness need extend manner lo 188 7ieCheng WangArtcial Intelligence 75 1995 161194 extending leftkernel lock deduction typed clause For instance associated refinement attached constraints divided deduction attach index literal leftkernels input divided clauses divided kernel binary kernel resolution resolvents Thus Definition 1 leftkernels given clauses resolved 2 literal Li 12 lowest indices Ki Ki 0 SO Li Pi Li literal Pi 51 Kt PIRI KzlPzRz indexed Ki index Li TPsecond typed locked kernel resolution 3 In similar manner extend untyped semantic resolution lo typed PIclash The typed PIclash associated PIclash applicable typed PIclash similarly leftkernels extending PIclash constraints clauses 64 On refinements TPsecond deduction lo resolution set support strategy 391 361 exist TPsecond deduction In following brief discussion possible hierarchical deduction extending For refinements refinements linearlike general methods causing extensions case case basis First consider extend incompleteness set h s x fx hl h3 Then set support strategy resolvent TPsecond deduction Clearly unrestricted use strategy typed deduction cause proof failure chosen Consider Example 46 If singleton E Ax P set support deduced completeness need add certain selection set support set support include typed clauses For example require type type restriction type E Q set support chosen Example 46 P conditional Example 46 include h3 h4 It easy check set support type r conditional H true For example proof fail In order preserve associated conditional rule form X rHR exist TPsecond refutation S4t T41 V ox cc E s X fxx T restrictions typing Unfortunately linearlike proof failure theory However refinement resolution linear resolution ME 181 exist typed version complete 201 SLresolution mainly dealing conditional typing rule clause goal caused restriction selection clauses proof failure avoided giving certain input clause G starting goal For example require exists model set kernels clauses starting goal S The reader verify goal G exist member S G clause G Applying Example 46 previous selection hl starting goal illegal set kernels h2 h3 ha unsatisfiable But requirement hz h3 h4 chosen starting goal S Tunsatisfiable goal selection requirement restriction lieCheng WangArtificial Intelligence 75 1995 161194 189 lead typed linear refutation linearlike typed produced deduction obtained extending hierarchical deduction incomplete However refinement Unlike searches proof tree nodes contains parent goal In light feature The typed hierarchical TPsecond deduction duction resolvents archical deduction permits lock literals input clauses resolved partial set support strategy constraints similar relations Although PSS complete 361 failure cases fewer linear deduction hierarchical legal hier disallow socalled 361 For typed hierarchical deduction theory literals associated help efficiently prove PSS defined associated general relations contained PSS locking redundancy This restriction given typing application reducing theorems theorems It noted success goaloriented challenge including closely refinement Associated related theorem proving guidance research interesting refinements problem reduction 221 Sandfords hereditary deduction resolution format extend incorporating possibility relation refinement TPsecond deduction semantic It typed approach enhance Bibels connection 5 Plaisteds 231 Nie Plaisteds semantic chaining proof linear typed domain semantic guidance graph deduction interesting subject guided 261 Sutcliffes 291 Lee Plaisteds hyperlinking lock resolution semantically strategy 191 65 On procedures type reasoning How carrying typechecking important question TPdeduction paper The answer question depends properties type In reasoning programs typing contain entire set account results answered theories considered particular practical applications theory possesses certain additional typing rules certain types treelike efficient sorted unification incorporated type reasoning procedures designed For design types constraints typed deduction procedure contain constraints For instance structure By taking implementation existing structures especially 66 About equality reasoning The typed logic considered equality logical symbol general words logic treats equality relations ordinary uses symbol specifying meaning equality set equality axioms supply symbol corresponding essential difference calculus inference way handling general relation typed deduction procedures typed untyped enrich equality In relations particular In order use conveying needs explicitly logic logical There untyped predicate rules paramodulation equality 190 iTeCheng WangArtiJScial Intelligence 75 1995 161194 7 Some implementation results A typed theorem prover 371 implemented extending resolutionbased theorem prover TPsecond deduction The type reasoner prover consists number special purpose procedures based certain assumption underlying typing theory The assumption nonconditional portion typing theory T TTD close Walthers forest structure sorts 311 Frischs treestructure restriction 13 J Besides carrying normal TPdeduction typechecking reasoner makes simplification type restrictions means TRsimplifier The TRsimplifier special TPdeduction procedure simplify type restriction newly generated kernel resolvent For example reduce ka dt true proving AMT Example 24 reduce Kx int A Kn nat Kx nat proving PLUST Example 25 detect illtyped resolvents Kx fox A x wolf proving SSRT Table 1 Remarks l4 The simplification deleting merging portion typing precondition associated type restriction certain conditions This typed prover efficiently prove typed theorems including VKDT AM8T PLUST given Examples 23 24 25 These experiments indicate typed prover better untyped prover efficiency proving theorem clarity knowledge representation A summary implementation results given Table 1 After brief explanation content table shall analysis proof AMT Table 1 A summary implen ntation results Theorem Prover Input typing rules Input kernel clauses Input kernel litemls AMIT VKDT PLUST SSRT typed untyped typed untyped typed untyped typed untyped Accepted kernel resolvenl 238 2495 Kernelempty clauses Illtyped resolvents Useful kernel resolvents Useful goal resolvents Total CPU seconds CPU seconds typing 4 3 23 19 125 451 1 0 42 37 9 13 25 0 26 13 5 10 22 24 2 0 17 14 0 15 44 50 1 0 22 17 12 11 19 29 3 0 10 10 0 23 63 64 1 0 36 36 15 8 12 52 1 85 14 14 964 0 132 007 258 0 180 060 318 0 498 208 0 27 66 1085 1 0 64 64 325 0 Remark 1 The untyped prover simply typed prover running untyped mode In untyped mode prover input data typed prover treated expression t 7 ordinary literal instead TD type descriptor treat typing rules typed clauses ordinary clauses lieCheng WangArtificial Intelligence 75 I 995 161l 94 191 counted total number Remark 2 The number input kernel liter literals input data general relations including contained kernels typed clauses contained typing rules CPU seconds typing total CPU seconds spent type reasoning including typechecking TPdeduction simplification Total CPU seconds total CPU seconds entire proof Remark 3 SSRT standard example Schuberts Steamroller literature sorted calculus The proof SSRT typed prover longer published proofs This proof consists 14 steps 14 useful goal resolvents Whereas published proof 321 consists 10 steps This prover factoring deduction But shorter proof factoring resolvent needed ll 32 Remark 4 The prover merged automatically list typed clauses KR KR formula KRI V V R treated clause This caused total number input clauses typing rules kernel clauses typed prover total number clauses untyped prover problems AMST SSRT An analysis proof AMT AM8 mentioned Example 24 acknowledged challenge theorem automated theorem prover Up automated proofs reported 22361 For untyped provers AM8T little harder AM8 uses typed inequality axioms contain literals untyped ones Please consult Example 24 set clauses Example 57 prooftree In comparison untyped proof took 964 seconds acceptance 2495 resol vents 5 typed prover prove AMST fair efficiently took 125 seconds acceptance 238 kernel resolvents Why typed proof efficient untyped proof In answering question shall illustration general feature advantage typed predicate calculus based TPsecond deduction For TPsecond deduction branching factor search tree reduced This classifying clauses kt typing rules literals x A x b clauses TDs general relations typing theory number clauses kernel clauses literals kernel literals considered kernel resolution reduced Note TP second deduction kernel resolution main inference rule generating new resolvents Another inference rule TPresolution mainly constraint kernel resolution Specifically TPresolvents produced typechecking 5 This typed prover untyped mode performs worse HDprover described 36 solving certain problems For example created 1478 resolvents prove AM8 577 msolvents prove IMV HDprover created 204 resolvents prove AM8 149 resolvents prove IMV This partly HDprover employs special heuristics based twinsymbol matching 361 fully incorporated typed prover 192 TieCheng WangArrcial Intelligence 75 1995 161194 type consistency contribute checking transform kernel resolvent TPdeduction contribute shown generated search space intermediate results produced kernel resolvents The role TRsimplifier simpler form Although TPdescendents space search number kernelempty produced usually small clauses Table 1 usually l The need deducing kernelempty resolvent provides direction determined search goal untyped deduction TPsecond usually deduction clause goaldeducing determined clause g16 prooftree Example 57 given In comparison deduction clause deducing number steps useful goal resolvents clauses Once kernelempty kernelempty develop clause This reduction plus reduction clause smaller search space As shown equal number steps branch factor Table 1 untyped clause generate took 10 steps goals typed prover resolution refutation While deducing intermediate deduced high priority untyped kernelempty deducing leads prover accept 2495 resolvents Whereas deduce took 37 steps deduce reduction kernelempty l The use specialized procedures clause g16 186 resolvents accepted implementation strategy caching If count total strictly speaking needed resolvents deduction contributes gain efficiency generated total number steps produced applying TP reasoning typing number TPresolvents savings typed proof However TPdescendants intermediate kernel clauses TPresolvents deduction results They need produced evaluated maintained ordinary kernel resolvents As shown Table 1 proving AMST typed prover total 457 seconds spent type reasoning We assume generation kernel resolvent 5 TPresolvents typechecking produced total 238 resolvents generated TPresolvent 000384 seconds This 10 time faster 125 457238 0033 seconds spent generating virtually sense Since x 5 seconds seconds corresponding kernel resolvent simplification took 457238 8 Conclusion reasoning general We introduced principle extending typed constrained resolution resolution This principle deduction soning relations kernel formulation We proved typed Herbrand theorem established improve introduced general TPdeduction sorted type rea theory shares general theorem based In order typed resolution principle theorems typed resolution principle efficiency TPsecond deduction procedure allows restrict application results existing capable separating background resolvents We discussed refinements completeness kernelempty proving typing TieCheng WangArtificial Intelligence 75 1995 161194 193 existing typed deduction extending number interesting advantage typed approach tion typed prover We compared approach existing work field referred refinements untyped future research We demonstrated results based conclusion results obtained identified existing analyzed implementa resolution subjects Acknowledgment The author gestions helped D Smith Kestrel R Furst M Pryce proofreading like thank improving Institute drafts anonymous clarifying sug thank A Goldberg fruitful discussion subject thank referees comments presentation References 1 J R Anderson WW Bledsoe A linear format resolution merging new technique establishing completeness J ACM 17 1970 525534 21 HP Barendregt The Lambda Calculus Elsevier Science Publishers BV NorthHolland Amsterdam 1985 3 WW Bledsoe Nonresolution theorem proving Artif Intell 9 1977 l35 4 WW Bledsoe The UT interactive prover University Texas Austin Mathematics Department Memo ATP17b Austin TX 1983 51 W Bibel On matrices connections J ACM 28 4 1981 633645 61 RS Boyer Locking restriction resolution PhD Thesis University Texas Austin TX 1971 71 HJ Biirckert A resolution principle clauses constraints Proceedings 10th International Conference Automated Deduction Kaiserslautem Germany 1989 178202 8 HJ Btlrckert A Resolution Principle Logic Restricted Quantifiers Lecture Notes Artificial Intelligence 568 SpringerVerlag Berlin 199 1 9 L Cardelli P Wegner On understanding types data abstraction polymorphism Comput Sun 17 4 1985 472522 lo CL Chang RC Lee Symbolic Logic Mechanical Theorem Proving Academic Press New York 1973 11 AG Cohn A expressive formulation sorted logic J Automated Reasoning 3 2 1987 113200 121 AG Cohn On appearance sorted literals nonsubstitutional framework hybrid reasoning HJ Levesque R Reiter eds Proceedings First International Conference Principles Knowledge Representation Reasoning Toronto Ont 1989 5566 131 AM Frisch A general framework sorted deduction fundamental results hybrid reasoning HJ Levesque R Reiter eds Proceedings First International Conference Principles Knowledge Representation Reasoning Toronto Ont 1989 126136 141 AM Frisch The substitutional framework sorted deduction fundamental results hybrid reasoning Artif Intell 49 1991 161198 15 1 AM Frisch AG Cohn An abstract view sorted unification D Kapur ed Proceedings 11 th International Conference Automated Deduction Lecture Notes Artificial Intelligence 607 1992 178192 161 M Hiifeld G Smolka Define relations constraint languages LILGGReport 53 IBM Deutschland 1988 171 J Jaffar JL Lassez Constraint logic programming Proceedings 14th ACM Symposium Principles ofprogramming fanguages Munich Germany 1987 11 l120 194 lieCheng WangArtcial Intelligence 75 1995 161194 I 181 R Kowalski D Kuehner Linear resolution selection function Artif Intell 2 197 1 227260 191 SJ Lee DA Plaisted Eliminating duplication hyperlinking strategy J Automated Reasoning 9 3 1992 2542 20 DW Loveland Mechanical theoremproving modelelimination J ACM 15 1968 236251 21 I R Milner A theory type polymorphism programming J Comput Syst Sci 17 1978 348375 22 X Nie DA Plaisted A semantic backward chaining proof ArtY Intell 55 1992 109128 I23 I DA Plaisted NonHorn clause logic programming contrapositives J Automated Reasoning 4 3 1988 287325 24 R Reiter On integrity typed firstorder data bases H Gallaire J Minker J Nicolas eds Advances Data Base Theory Vol I Plenum New York 1981 137157 25 JA Robinson A machine oriented logic based resolution principle J ACM 12 1 1965 2341 26 DM Sandford Using Sophisticated Models Resolution Theorem Proving SpringerVerlag New York 1980 271 MS SchmidtSchauss Computational Aspects OrderSorted Logic Term Declarations Lecture Notes Computer Science 395 SpringerVerlag Berlin 1989 28 ME Stickel Automated deduction theory resolution J Automated Reasoning 1 4 1985 333355 1291 G Sutcliffe The semantically guided linear deduction D Kapur ed Proceedings 11th International Conference Automated Deduction Lecture Notes Artificial Intelligence 607 1992 677680 30 MH van Emden RA Kowalski The semantics predicate logic programming language J ACM 23 4 1976 733742 3 11 C Walther A manysorted calculus based resolution paramodulation Proceedings IJCAI83 Karlsruhe Germany 1983 882891 321 C Walther A mechanical solution Schuberts Steamroller manysorted resolution Artij Intell 26 1985 217224 33 C Walther Manysorted unification J ACM 35 1 1988 117 341 TC Wang Designing examples semantically guided hierarchical deduction Proceedings IJCAI85 Los Angeles CA 1985 12011207 35 TC Wang On Herbrand model conditional Horn sets Assoc Automated Reasoning Newslen 24 1993 361 TC Wang WW Bledsoe Hierarchical deduction J Automated Reasoning 3 1 1987 3571 1371 TC Wang A Goldberg KITP93 automated inference program analysis A Bundy ed Proceedings 12th httemationaf Conference Automated Deduction Lecture Notes Artificial Intelligence SpringerVerlag Berlin 1994 381 C Weidenbach HJ Ohlbach A resolution calculus dynamic sort structures partial functions Proceedings ECAI90 Stockholm Sweden 1990 610 39 L Wos GA Robinson DF Carson Efficiency completeness set support strategy theorem proving J ACM 12 4 1965 484489 40 L Wos R Overbeek E Lusk J Boyle Automated Reasoning Introduction Applications Prentice Hall Englewood Cliffs NJ 1992