Artiﬁcial Intelligence 184185 2012 78123 Contents lists available SciVerse ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Patrolling security games Deﬁnition algorithms solving large instances single patroller single intruder Nicola Basilico Nicola Gatti Francesco Amigoni Artiﬁcial Intelligence Robotics Laboratory Dipartimento di Elettronica e Informazione Politecnico di Milano Piazza Leonardo da Vinci 32 20133 Milano Italy r t c l e n f o b s t r c t Article history Received 29 July 2010 Received revised form 22 February 2012 Accepted 8 March 2012 Available online 12 March 2012 Keywords Security games Adversarial patrolling Algorithmic game theory Security games gaining signiﬁcant artiﬁcial intelligence They characteri zed players defender attacker set targets defender tries protect attackers intrusions committing strategy To reach goals players use resources patrollers intruders Security games Stackelberg games appropriate solution concept leaderfollower equilibrium Current algorithms solving games applicable underlying game normal form player single decision node In paper deﬁne study security games extensiveform inﬁnitehorizon underlying game decision nodes potentially inﬁnite We introduce novel scenario attacker undertake actions execution defenders strategy We new game class patrolling security games PSGs prominent application patrolling environments intruders We PSGs reduced security games studied far highlight generality tackling adversarial patrolling arbitrary graphs We design algorithms solve large instances single patroller single intruder 2012 Elsevier BV All rights reserved 1 Introduction Security applications transportation shipping airports ports infrastructures recently received increasing artiﬁcial intelligence literature 39405262 The mainstream approach models security problem twoplayer noncooperative game 27 defender attacker aim ﬁnd effective strategies defender 51 The basic ingredients number targets value possibly different players number resources available defender protect targets attacker intrude In situations resources available defender protect targets This induces defender randomize possible assignments resources targets maximize expected utility Furthermore defender continuously repeatedly protects targets attacker assumed position observe defender derive correct belief strategy This assumption pushes defender commit strategy places security games general class leaderfollower said Stackelberg games leader defender follower attacker 64 A leaderfollower game characterized underlying game property leader commit strategy Von Stengel Zamir studied class games 64 They committing particular strategy twoplayer normalform underlying game leader receive utility worse receive Corresponding author Tel 39 02 2399 3658 fax 39 02 2399 3411 Email address ngattieletpolimiit N Gatti 00043702 matter 2012 Elsevier BV All rights reserved doi101016jartint201203003 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 79 playing Nash equilibrium The leaderfollower equilibrium proposed appropriate solution concept Letchford Conitzer recently showed result holds underlying game extensive form 45 In years works addressed ﬁeld security games For example inﬂuential works 51 problem placing checkpoints protect targets intrusions studied approach practically applied Los Angeles International Airport 52 The works proposed ﬁeld based underlying game normal form players single decision node focus equilibrium computation problem development eﬃcient algorithms compute leaderfollower equilibrium The currently available models applicable attacker option exploit observation execution defenders actions decide attack realization defenders plan subject temporal deadline possibility waiting indeﬁnitely attacking In 29 author shows exploiting option attacker drastically improve expected utility In paper propose variant security games accounts option To consider security game underlying game extensive form inﬁnite horizon players having multiple potentially inﬁnite decision nodes This contribution constitutes best knowledge extension state art security games The main theoretical motivation work currently available techniques eﬃcient variant security games Indeed resolution requires techniques largely unexplored security games literature reduce size game instances The main practical motivation work option available attacker scenarios studied probably adversarial patrolling patrollers resources controlled defender usually consisting autonomous mobile robots environment protect intruders resources controlled attacker wait outside environment best time attack We focus patrolling reference scenario game models patrolling security games PSGs Formulating adversarial patrolling problem PSG allows deal environments represented arbitrary graphs targets The drawback needed computational effort larger required solve settings special topologies targets closed perimeters 3 Our main original contributions aiming addressing equilibrium computation problem PSGs follow We model PSG twoplayer multistage game inﬁnite horizon defender moves single resource vertices arbitrary graph environment protect targets attacker intrudes environment placing time resource selected target vertex We equilibrium computation problem multiquadratic mathematical programming problem scale realistically large settings To tackle limitations propose following techniques ii We study problem ﬁnd exists equilibrium pure strategies deterministic patrolling strate gies We problem currently unexplored variant travel salesman problem TSP NPcomplete eﬃciently solved constraint satisfaction programming algorithm solves high success rate cid2 90 signiﬁcantly large instances cid2 500 targets short time cid3 10 s iii We develop reduction techniques ﬁnd mixed strategy equilibrium nondeterministic patrolling strategies large game instances pure strategy equilibrium exists We provide reduction algorithms based combination removal dominated actions abstractions general reductions ex ante actual resolution provided We ﬁrstorder Markovian strategies depend vertex visited patroller algorithm optimally solves mediumsize game instances 75 vertices 15 targets suboptimally solves largesize game instances 166 vertices 30 targets We quality optimal suboptimal ﬁrstorder Markovian solutions 99 86 respectively quality optimal highorder Markovian solutions The structure paper follows In Section 2 survey related works security games robotic patrolling In Section 3 game model extend known techniques solve showing limitations In Section 4 discuss pure strategy equilibrium exists In Section 5 provide techniques reduce game instances speed mixed strategy equilibrium computation Our algorithm summarized Sec tion 6 experimentally evaluated Section 7 Section 8 concludes paper Appendices A B C report extensions proofs complete experimental data respectively 2 Related works We review security games leaderfollower equilibrium computation Section 21 Next survey main works robotic patrolling Section 22 related ﬁelds Section 23 21 Security games leaderfollower equilibrium computation The seminal work security games probably von Neumanns hideandseek game 24 It strategicform zero sum game played grid environments hider chooses location hide seeker chooses set locations seek Starting work signiﬁcant variations proposed literature 80 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 A number works study problem pursuers search evaders 1 Game models players mobile said inﬁltration games 8 When pursuer mobile evader immobile search games 28 When situation reverse ambush games 56 A variation interdiction game 65 evader moves source sink target pursuer acts prevent evader reach target All works deﬁned arbitrary graphs consider targets different importance Several variations interdiction games targets varying importance recently proposed goal design randomized policies scheduling constraints protect targets We works protection games Signiﬁcant examples 3940505262 The PSG model propose paper considers mobile defender attacker arbitrary graph targets different importance The attacker directly appears target detected intrusion target model extended considering movements attacker This intruding target requires attacker spend time PSGs lay intersection protection games interdiction games search games As protection games PSGs consider different targets different importance aim prevent intrusions As interdiction games pursuer capture attacker approach target However attacker captured reached target time spends intrusion As search games defender mobile attacker immobile intruding target stays time A crucial point PSGs common protection games appropriate solution concept leaderfollower equilibrium Algorithms computing leaderfollower equilibrium constitute recent result The seminal work described 20 shows computation leaderfollower equilibrium formulated multilinear mathematical programming problem linear programs number followers actions This result shows leaderfollower equilibrium polynomial time An alternative formulation provided 50 problem formulated mixedinteger linear mathematical programming problem 22 Robotic patrolling A broad deﬁnition patrolling act walking traveling area regular intervals order protect supervise 46 Among scientiﬁc aspects involved developing autonomous robots patrolling hardware software architectures 46 focus algorithms producing patrolling strategies We classify existing algorithms patrolling main dimensions The ﬁrst dimension concerns patrolled area representation It graphbased continuous means geo metrical primitives lines polygons With graphbased representations cases open perimeter closed perimeter fully connected vertex connected arbitrary In cases environment identical vertices special vertices called targets The second dimension patrollers objective function It explicitly account presence adversaries adversarial nonadversarial In nonadversarial case objective functions mainly related form repeated coverage aim repeatedly cover locations given area Frequencybased objective functions related repeated coverage deﬁned constraint satisfaction functions patrolling locations frequency functions maximize measure maximal average frequency visits called average idle ness maximal minimum frequency visit called worst idleness When environment targets frequencies visits expressed relative targets Other cases encountered refer ad hoc objective functions In adversarial case kinds objective functions expected utility ﬁxed adversary expected utility patroller maximized given ﬁxed nonrational model adversary expected utility rational adversary adversary modeled rational decision maker The dimension number adopted patrollers available resources It single agent multiagent values Table 1 shows classiﬁcation main works robotic patrolling according dimensions The symbols cid2 cid2 denote contributions provide Sections 4 5 respectively In following review main related works patrolling reported table organizing discussion according representation environment The work 23 provides eﬃcient algorithms ﬁnd multiagent patrolling strategies openended fences open ended polylines minimize different notions idleness realistic models robot motion Patrolling open perimeters challenging intrinsically ineﬃcient robots revisit visited areas reach endpoint turn The work 23 divides continuous open polylines discrete segments determines actions robots accordingly The work presented 3 provides eﬃcient polynomial time algorithm solve closed perimeter multiagent pa trolling settings game theoretical fashion The perimeter continuous divided segments easily mapped vertices ringlike graph The solving algorithms referred discretized environment opposed algorithms based continuous environments like 38 example For reason classify work graphbased environments A possible intruder enter vertex required spend given time measured turns called penetration time success The intruder patrollers preferences vertices intruder enter vertex probability captured minimum The patrollers N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 81 Table 1 Related works robotic patrolling The symbols cid2 cid2 denote contributions paper Graphbased Open perimeter Closed perimeter Fully connected Arbitrary Continuous 66 cid2 48 3366 3235 single agent multiagent single agent multiagent 23 718224659 single agent multiagent single agent multiagent single agent 4754 58 9 cid2 6 29 multiagent 2345 d e s b y c n e u q e r F Constraint satisfaction Maximization measure Others Expected utility ﬁxed adversary Expected utility rational adversary l r s r e v d n o N l r s r e v d A synchronous The problem essentially zerosum game solution patrolling strategy patrollers maxmin strategy In 4 5 model extended considering realistic uncertainty robots sensing adversarys knowledge In 2 presence events different times detection intruders yield different rewards patrollers considered Finally 6 nonrational intruders considered In 29 author considers fully connected topology graph single patroller intruder different preferences target vertices provides algorithm compute Nash equilibrium The approach 66 considers single multiagent patrolling arbitrary graphs goal patrol edges vertices The objective function blanket time criterion patrolling agents cover edges frequency The proposed antbased algorithm shown converge Eulerian cycle ﬁnite number steps revisit edges ﬁnite period A similar work reported 33 Some works address covering environments represented arbitrary graphs The work 46 deals mul tiagent patrolling vertices graphs edges unitary lengths Several agent architectures experimentally compared according effectiveness minimizing idleness The approach generalized 7 graphs edges arbitrary lengths analyzed theoretical perspective 18 Moreover work 59 pro poses reinforcement learning way coordinate patrolling agents drive environment The work 22 eﬃciently computes patrolling strategies multiple agents minimizing worst idleness arbitrary graphs Patrolling strategy calculated exploiting minimal Hamiltonian cycle In 47 54 authors consider multiagent patrolling settings multicriteria objective idleness distribution probabilities occurrence incidents pursued exploiting MDP techniques The work 58 studies different adversaries random adversary adversary chooses penetrate recently visited node adversary predicts chances node visited Some patrolling strategies multiple agents experimentally evaluated simulation showing strategy optimal possible adversaries In 9 authors study arbitrary topology graphs providing online heuristic approach ﬁnd optimal strategies single patroller The contribution provide Section 4 cid2 Table 1 studies setting different targets arbitrary graph visited single agent frequencies speciﬁc target satisfying set constraints The main differences 66 patrolling vertices edges vertices different requirements terms frequency visits Furthermore approach directly comparable approaches ﬁnding deterministic patrolling strategies solve feasibility problem ﬁnding patrolling strategy satisﬁes constraints approaches solve optimization problem criterion The contribution provide Section 5 cid2 Table 1 generalizes works 3 29 arbitrary graphs targets computationally eﬃcient settings approaches applicable Moreover extends 58 capturing rational adversary For completeness cite works deal continuous environments directly com parable graphbased approach In 32 composed multiple air vehicles patrol border area presented The environment represented continuous twodimensional region divided subregions Each 82 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 subregion assigned air vehicle repeatedly patrols spiral trajectory ensuring point cov ered Also 35 considers multirobot patrolling continuous environments In case environment partitioned subregions Voronoi tessellation robots assigned subregions robot patrols subregion order complete coverage The movements robot determined neural network model allows deal dynamically varying environments Finally 48 unpredictable chaotic trajectories produced robot covering continuous environment 23 Other related works A large works closely related patrolling problem operational research literature variations Traveling Salesman Problem TSP These works close graphbased frequencybased patrolling works objective functions adopt suitable patrolling problems discuss In deadlineTSP 63 vertices deadlines ﬁrst visit time spent traversing arcs Rewards collected vertex visited deadline penalties assigned vertex visited deadline visited The objective ﬁnd tour visits vertices possible However differently happens patrolling rewardpenalty received ﬁrst visit In vehicle routing problem time windows 41 deadlines replaced ﬁxed time windows visits vertices occur The time windows depend previous visits patroller happens patrolling In period vehicle routing problem 34 constraints impose multiple visits vertex time period Cyclical sequences visits addressed period routing problem 1926 vehicle routes constructed run ﬁnite period time vertex visited given number times In cyclic inventory routing problem 53 vertices represent customers given demand rate storage capacity The objective ﬁnd tour distributor repeatedly restock customers constraints visiting frequencies Despite works different similarities patrolling problem consider paper application techniques setting straightforward limited particular scenarios 3 Game model solution concept basic algorithm In section introduce approach In particular Section 31 model PSGs Section 32 discuss appropriate solution concept Section 33 provide solving algorithm inspired current state art 31 Patrolling security game model At ﬁrst patrolling setting Section 311 game model Section 312 311 The patrolling setting The patrolling setting composed environment players attacker defender d speciﬁc resources We assume discrete time developing turns model environment means directed graph G V A T v d Set V contains vertices representing areas environment Set A contains arcs connecting vertices V providing topology environment graph representations extracted real environments 43 represent A function V V 0 1 ai j 1 j A ai j 0 Set T V contains vertices called targets values defender attacker v deﬁned pair functions v v d v v d T R assigns target t value defender successfully protecting t T v T R assigns target t T value attacker successfully intruding t Function d T N 0 assigns target t T time attacker needs spend t completing intrusion getting v The attacker modeled follows wait indeﬁnitely outside environment observing defenders actions perfectly deriving defenders strategy 351 use single resource called intruder attack target directly placing target attacked target t control intruder number turns equal dt removes intruder environment The defender modeled follows single resource called patroller G spending turn cover arc simplest motion model adopted 3 patroller sense perfectly area corresponding vertex patroller sensed intruder intruder captured The simplifying assumptions players prevent capture realistic applicative scenarios For example fact attacker directly pose resource target encountered situations patroller detect intruder moving On defenders simpliﬁed movement model represented ﬁxed weights graphs arcs model situation patroller software agent traveling nodes sensor network deployed environment performing data analysis current node Moreover limitations partially relaxed Appendix A3 Appendix A4 attacker defender respectively Since patrolling setting player unique resource following use interchangeably terms patroller defender similarly terms intruder attacker N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 83 Fig 1 The graph representing patrolling setting running example In vertex report number vertex penetration time d parentheses value defender attacker respectively Example 31 Fig 1 depicts patrolling setting circled numbers identify vertices arcs depicted arrows set targets T 06 08 12 14 18 target t report dt v dt v 312 The game model PSGs deﬁned twoplayer multistage games imperfect information inﬁnite horizon 27 Each stage game corresponds turn patrolling setting defender attacker act simultaneously The defenders available actions denoted j j V vertex adjacent patrollers current If action j played turn k turn k 1 patroller visits vertex j checks presence intruder The attackers available actions denoted wait entert t T Playing action wait turn k means attempt intrusion turn Playing action entert turn k means start intrusion attempt target t prevents attacker taking action time interval k 1 k dt 1 Notice playing entert game conclude dt turns The attackers actions perfectly observable defender acting know intruder currently target The game inﬁnite horizon attacker allowed wait indeﬁnitely attacking The possible outcomes game noattack attacker plays wait turn k attacks target intrudercapture attacker plays entert turn k patroller visits target t time interval I k k 1 k dt 1 consequently detects intruder penetrationt attacker plays entert turn k patroller visit target t time interval I deﬁned Example 32 Fig 2 reports portion game tree PSG setting Fig 1 given initial position patroller vertex 01 Branches represent actions players information sets depicted dotted lines Each turn game corresponds levels tree defender attacker act simultaneously We assume players observe actions turn 84 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 Fig 2 A portion game tree setting Fig 1 patroller initially 01 Agents utility functions deﬁned follows The defenders utility function ud returns total preserved targets value udx cid2 cid3 cid3 iT v di iT t v di x intrudercapture noattack x penetrationt Notice defender gets utility intruder captured intruder enters This case utility surplus given capture defender prefer lottery intrudercapture penetrationt noattack This behavior reasonable defenders primary purpose typical patrolling setting preserve value possible necessarily capture intruder The attackers utility function ua returns penalty case intruder captured returns value attacked target uax 0 v cid3 x noattack x penetrationt x intrudercapture cid3 R penalty In words status quo noattack better intrudercapture attacker We denote H space possible histories h vertices visited patroller equivalently actions undertaken defender For example Fig 1 given patroller starts vertex 01 possible history h cid601 02 03 07 08cid7 We deﬁne defenders strategy called patrolling strategy σd H cid5V cid5V probability distribution vertices V Given history h H strategy σd gives probability patroller vertices turn The defenders strategy depend actions undertaken attacker unobservable defender We distinguish deterministic nondeterministic patrolling strategies When σd pure strategies assigning probability single vertex possible history h patrolling strategy deterministic Otherwise patrolling strategy nondeterministic We deﬁne attackers strategy σa H cid5T wait cid5T wait probability distribution T equivalently corresponding actions entert action wait Example 33 In Fig 1 deterministic patrolling strategy prescribe cycle cid604 05 06 11 18 17 16 10 04cid7 nondeterministic patrolling strategy patroller vertex 01 history h σdh 01 probability 025 02 probability 025 06 probability 05 An example attackers strategy play action wait histories vertex 04 play enter18 32 Solution concept We initially discuss appropriate solution concept defender commit strategy Section 321 committing strategy worse defender Section 322 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 85 321 Solution concept absence commitment We consider defenders strategy absence commitment The appropriate solution concept multistage game imperfect information sequential equilibrium 44 reﬁnes Nash equilibrium The presence inﬁnite horizon complicates study game With inﬁnite horizon classic game theory studies game introducing symmetries player repeat given strategy k turns Introducing symmetries game model amounts force players strategies deﬁned histories maximum ﬁnite length l As result strategies Markovian memory order l Example 34 When l 0 actions prescribed defenders strategy depend previous action prob ability visit vertex vertices patroller Notice imposing l 0 satisfactory nonfully connected graph set actions available defender depends current vertex When l 1 defender chooses action basis action equivalently action depends current vertex patroller In case patrolling strategy ﬁrstorder Markovian Obviously increasing value l defenders expected utility decrease defender considers information select action Classical game theory 27 shows games inﬁnite horizon admit maximum length l symmetries expected utility increase anymore l cid2 l l 0 55 Usually l 1 27 In model means defenders strategy deﬁned l vertices visited patroller l cid2 l defenders expected utility receives l l Notice number possible pure strategies σdh σah O nl n number vertices Therefore expect increasing value l computational complexity ﬁnding patrolling strategy exponentially increases In practical settings selection value l tradeoff expected utility computational effort 322 Translation strategicform game given l Given value l PSG translated strategicform game additional constraints defenders strategies In strategicform game defenders actions feasible probability assignments αhi probability execute action movei given history h The attackers actions enterwhent h t T αhi h H stayout Action enterwhent h corresponds wait patroller followed history h entert stayout corresponds wait forever The additional constraints formally deﬁned Section 331 account defenders strategies original extensiveform game repeated l turns Notice game depend initial vertex patroller This defenders attackers strategies depend Example 35 Consider Fig 1 With l 1 available defenders strategies consistent probability assignments αi j j V attackers actions enterwhent j t T j V stayout It easily observed reduced game strategically equivalent original game equilibrium game equilibrium original game Since Nash equilibrium strategicform game sequential equilibrium Nash equilibrium reduced game sequential equilibrium original game Since attacker wait outside environment observing defenders strategy defenders commitment strategy credible Therefore leaderfollower equilibrium appropriate solution concept PSGs We state following result proof easy application result discussed 64 Proposition 36 Given game described ﬁxed l leader gets worse committing leaderfollower equilibrium strategy 33 Basic algorithm We apply algorithm presented 20 setting discuss Section 331 compute capture probabilities constraint patrolling strategies repeated l turns Sections 332 333 leaderfollower equilibrium computed game zerosum generalsum respectively Then Section 334 ﬁrstorder Markovian strategies optimal discuss main limits approach Section 335 331 Computing intruder capture probabilities We denote P ct h intruder capture probability related action enterwhent h deﬁned probability patroller starting vertex h reaches target t dt turns P ct h depends αhi highly nonlinear way degree dt A bilinear special case quadratic formulation computation P ct h provided applying sequenceform 42 imposing constraints behavioral strategies From 86 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 consider formulation l 1 case history h reduces single vertex h V We deﬁne γ wt j probability patroller reaches vertex j w turns starting vertex sensing target t The constraints αi j cid2 0 j V cid7 αi j 1 V jV αi j cid3 ai j j V γ 1t j γ wt j αi j t T j V t γ w1t w ix αx j cid7 cid9 cid8 xV t P ct h 1 cid7 jV t γ dtt h j t T h V cid10 cid11 2 dt t T j V t 1 2 3 4 5 6 Constraints 1 2 express αi j deﬁned probabilities constraints 3 express patroller adjacent vertices constraints 4 5 express ﬁrstorder Markov hypothesis defenders decision policy constraints 6 deﬁne P ct h The bilinearity constraints 5 In worst case fully connected graphs number variables αi j O V 2 number variables γ wt O T V 2 maxtdt j number constraints O T V 2 maxtdt As Appendix A1 formulation extended case l arbitrary practice intractable number variables constraints grows exponentially l number variables αi j O V l1 number variables γ wt O T V 2l maxtdt h1h2 number constraints O T V 2l maxtdt A eﬃcient formulation halving number variables constraints reported Appendix A2 332 Solving zerosum patrolling security games When defender attacker share preferences targets v dt v t T resulting game essentially zerosum It rigorously zerosum outcomes intrudercapture attack provide defender utility attacker different utilities cid3 0 respectively However temporarily discard outcome noattack assuming action stayout played attacker We reconsider action following Without outcome noattack game zerosum In case defenders leaderfollower strategy corresponds maxmin strategy strategy maximizes defenders minimum expected utility We provide mathematical programming formulation ﬁnd We introduce variable u lower bound defenders expected utility Formulation 37 The leaderfollower equilibrium zerosum PSG solution max u constraints 1 2 3 4 5 6 cid8 u cid3 udintrudercaptureP ct h udpenetrationt cid9 1 P ct h t T h V 7 Constraints 7 deﬁne u lower bound defenders expected utility By solving problem obtain maxmin value The values variables αi j corresponding u represent optimal maximum lower bound u patrolling strategy The number constraints 7 O T V The formulation bilinear reduced linear problem constraints 5 6 convex 17 Now reconsider action stayout corresponding outcome noattack Easily solution utility attackers best 0 attacker play stayout Otherwise mathematical programming problem compute attackers expected utility v response given capture probabilities corresponding u play optimal action prescribed mathematical program If v 333 Solving generalsum patrolling security games The mathematical programming formulation generalsum case extension multilinear programming approach described 20 approach proposed 50 adopted obtain mixed integer quadratic problem currently solver able solve In case programming problem multibilinear We deﬁne mathematical programming problems The ﬁrst checks exists defenders strategy σd stayout best response attacker If strategy exists defender follow utility maximum stayout N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 87 Formulation 38 A leaderfollower equilibrium attackers best strategy stayout exists following mathematical programming problem feasible constraints 1 2 3 4 5 6 cid8 uaintrudercaptureP ct h uapenetrationt cid9 1 P ct h cid3 0 t T h V 8 Constraints 8 express stayout better enterwhent h t h The number constraints 8 O T V If formulation feasible need search attackers best response defenders expected utility largest For action enterwhens q calculate optimal defenders expected utility constraint action attackers best response Formulation 39 The largest defenders expected utility attackers best response enterwhens q solution cid8 max udpenetrations cid9 1 P cs q udintrudercaptureP cs q constraints 1 2 3 4 5 6 cid8 uaintrudercapture cid9 P cs q P ct h cid9 cid8 1 P ct h uapenetrationt cid2 0 t T h V cid8 uapenetrations cid9 1 P cs q 9 The objective function maximizes defenders expected utility Constraints 9 express action enterwhent h gives larger value attacker action enterwhens q assumed best response The number constraints 9 O T V We calculate patrolling strategies αi j T V mathematical programming problems action enterwhens q assumed best response The leaderfollower equilibrium strategy αi j maximizes defenders expected utility Example 310 We report Fig 3 patrolling strategy corresponding leaderfollower equilibrium setting Fig 1 We omitted vertices visited strategy The corresponding attackers best response enterwhen08 12 334 Nonoptimality ﬁrstorder Markovian strategies The algorithm solving PSGs reported previous sections formulated l 1 We showed 12 graph representing environment fully connected l 0 strategy l 0 better optimal strategy l 0 The problem determining l arbitrary graph complex largely scope paper However interesting insight problem given following proposition proof Appendix B1 Proposition 311 There settings ﬁrstorder Markovian patrolling strategies provide expected utility strictly smaller higherorder Markovian patrolling strategies The result entails general l larger We provide lower bound eﬃciency u eﬃciency patrolling strategy σ u patrollers expected utility patrollers expected utility playing optimal highorder Markovian strategy ﬁrstorder Markovian strategies Call u playing σ u Theorem 312 No topologyindependent lower bound eﬃciency ﬁrstorder Markovian leaderfollower equilibrium strat egy σ tighter vdi provided u patrollers expected utility playing σ ucid3 The proof based fact given values set targets build topology deterministic strategy exists The following theorem shows lower bound independent values targets proof reported Appendix B2 Theorem 313 The lower bound eﬃciency ﬁrstorder Markovian leaderfollower equilibrium strategy σ 1 asymptotically achieved 2 88 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 Fig 3 Optimal patrolling strategy Fig 1 omitted vertices arcs covered strategy 335 Limits The basic algorithm presented previous sections based combination results presented 20 42 main limits The ﬁrst limit approach computational hardness solving realistically large game instances In general solv ing nonlinear mathematical programming problems requires remarkable computational efforts As discuss experimental evaluations small settings wrt number vertices targets solved l 1 Solving settings l 1 practically intractable showed Section 331 number variables constraints rise exponentially 2l This fact consequences On hand limited scalability wrt settings size prevents model applied practical scenarios l 1 On hand practical impossi bility increasing value l precludes opportunity ﬁnd effective patrolling strategies existence suggested Proposition 311 To tackle issues propose approaches In ﬁrst Section 4 limit generality solution looking deterministic pure strategies We limit value l overcome speciﬁc case deterministic strategies More speciﬁcally PSG admits equilibrium deterministic strategy σd arbitrary value l associated intruders best response stayout σd eﬃciently exploiting structure problem avoiding mathematical programming reducing computational burden This computation equilibrium deterministic strategies treated separately computation general equilibrium nondeterministic strategies The second approach Section 5 based idea simplifying patrolling setting introducing preprocessing phase eliminates variables constraints preserving game theoretical consistency solution optimality As consequence reduced patrolling setting solved eﬃciently nondeterministic patrolling strategies The second limit resulting patrolling strategies inconsistent This happens attackers best response enterwhent x property x visited patroller inﬁnite number turns In Fig 4 report example inconsistent patrolling strategy The intruders best response given patrolling strategy depicted ﬁgure enterwhen12 14 probability patroller visiting 14 inﬁnite number turns zero Essentially strategy inconsistency fact single patroller patrol effectively targets For maximizing expected utility defender patrol subset important targets leaving uncovered N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 89 Fig 4 Inconsistent strategy zerosum PSG vertices covered inﬁnite number turns For example vertex 14 reached vertex 06 important targets attacker prefer attack patrolled target nonpatrolled In Fig 4 attacker prefers attacking target 12 capture probability strictly positive attacking target 14 capture probability zero An inconsistent patrolling strategy practically effective discarded In Section 62 provide algorithm deals inconsistencies The algorithms present following sections inﬂuenced presence inconsistencies 4 Finding deterministic patrolling strategies large games In section method compute deterministic patrolling strategy problem initially addressed 11 In Section 41 formally state problem We discuss computational complexity Section 42 determine upper bound solutions length propose simple ineﬃcient algorithm Section 43 provide eﬃcient algorithm Section 44 41 Problem formulation A deterministic patrolling strategy σd conveniently represented sequence vertices allowing l arbi trary Apart degenerate cases strategy inconsistencies discussed Section 62 leaderfollower equilibrium PSG pure strategy deterministic attackers best response stayout defender gain randomizing By deﬁnition deterministic equilibrium strategy adopted patroller target t left uncovered number turns larger penetration time dt action enterwhent j result capture intruder This kind solution close produced frequencybased approaches applicable visit speciﬁc vertex subject speciﬁc constraints happens case Without loss generality deterministic strategy deﬁned targets assuming patroller targets shortest path Accordingly reduce graph G V A T v d weighted graph G set arcs connecting targets deﬁned function cid10i j 1 cid10 cid10i j 0 w weight function shortest paths connecting j G visit target cid10 T A T T 0 1 derived set A follows pair targets j T cid11 j cid10 w d targets T vertices G A cid10 cid10 90 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 Fig 5 Reduced graph G cid10 corresponding Fig 1 b The graph different relaxed penetration times deﬁned w T T N 0 wi j length shortest path j G wi j deﬁned cid10i j 1 number turns patroller spends going target target j d function deﬁned G The reduction G G obtained applying Dijkstras algorithm pair targets G For sake presentation rest section denote σ deterministic patrolling strategy G refer vertices G instead targets G cid10 cid10 cid10 Example 41 Consider graph reported Fig 1 The corresponding reduced graph G composed 5 vertices The graph Fig 5b differs values penetration times use later example reported Fig 5a G cid10 cid10 Pure strategy equilibria usually iterating players best responses sampling strategy proﬁles However problem different know best response intruder stayout need search eﬃciently patrollers best strategy The application best response search methods lead enumerate possible strategies check This ineﬃcient search space large We provide convenient formulation based constraint programming We deﬁne function σ 1 2 s T represents sequence vertices G σ j jth element sequence The length sequence s known priori The temporal length sequence visits s1 j1 wσ j σ j 1 The time interval visits computed summing weights covered arcs vertex calculated similarly summing weights arcs covered visits A solution sequence σ σ cyclical ﬁrst vertex coincides σ 1 σ s ii vertex T visited uncovered vertices iii indeﬁnitely repeating cycle T time interval successive visits larger di cid3 cid10 Let denote O j position σ jth occurrence vertex oi total number occurrences given σ For instance consider Fig 5a given σ cid614 08 18 08 14cid7 O 081 2 O 082 4 o08 2 o06 0 Notice given sequence σ quantities O j oi easily calculated With deﬁnitions formally restate problem constraint programming fashion presence highly nonlinear constraints makes hard resort integer linear programming formulations extending works discussed Section 23 Formulation 42 A deterministic patrolling strategy σ intruders best response stayout solution σ 1 σ s oi cid2 1 T cid10 cid9 σ j 1 σ j cid8 1 j 2 3 s 10 11 12 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 O k11cid7 jO k O 11cid7 w j1 cid8 cid9 σ j σ j 1 w cid3 di T k 1 2 oi 1 cid8 cid9 σ j σ j 1 s1cid7 cid8 cid9 σ j σ j 1 w cid3 di T jO oi 91 13 14 cid10σ j 1 σ j 1 vertex σ j directly reached vertex σ j 1 G Constraint 10 states σ cycle ﬁrst vertices σ coincide constraints 11 state vertex visited σ constraints 12 state pair consecutively visited vertices σ j 1 σ j constraints 13 state vertex temporal interval successive visits σ larger di similarly constraints 14 state vertex temporal interval ﬁrst visits larger di deadline respected cycle closure cid10 Example 43 Consider graph Fig 5a sequence σ visits satisﬁes constraints listed Indeed shortest cycle covering vertices 06 08 cid606 08 06cid7 temporal length larger penetration times involved vertices way cover vertices penetration times As graph Fig 5b admits deterministic equilibrium strategy 42 NPcompleteness Call DETSTRAT problem deciding deterministic patrolling strategy intruders best response cid10 stayout deﬁned previous section exists given G Theorem 44 The DETSTRAT problem NPcomplete The proof reported Appendix B3 shows Direct Hamiltonian Circuit problem reduced DETSTRAT problem Although DETSTRAT hard problem possible design constraint programming based algorithm able eﬃciently compute solution settings composed large number targets 43 An upper bound solution length simple algorithm The peculiarity problem stated Formulation 42 length solution s number oc currences oi vertex known priori solution The common approach adopted constraint programming literature tackle problems arbitrary number variables involves phases initially analytical bounds number variables derived set problems number variables ﬁxed value bounds solved Although problem resembles problems cyclical CSPbased scheduling 21 best knowledge situation number variables solution unaddressed We derive nontrivial upper bound temporal length solution Theorem 45 If instance Formulation 42 feasible exists solution σ temporal length longer maxtT dt We report proof Appendix B4 Exploiting Theorem 45 upper lower bounds solution length s derived They deﬁned respectively s cid12 maxtT dt mini j wi j cid13 s T 1 Once ﬁxed value s upper lower bounds number occurrences vertex t ot s T 1 ot 1 respectively By bounds use Algorithm 1 solve instance Formulation 42 Algorithm 1 simple_detstrat 1 s s s 1 s 2 3 4 5 assign σ C S P s o σ return σ o o1 oT 1 2 s T 1T 6 return failure The CSPs o solves standard constraint programming problem value s number tar gets occurrences ﬁxed This task easily accomplished commercial CP solvers 37 Despite simplicity 92 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 possibility use offtheshelf solvers Algorithm 1 eﬃcient requires long time simple patrolling settings requires resolution constraint programming problems CSPs o explores search space exponential worst case This pushes design ad hoc algorithm 44 Solving algorithm We present basic algorithm Section 441 report execution example Section 442 improve Section 443 441 Basic algorithm We consider σ j variable domain F j T The constraints values variables 1014 We search assignment values variables constraints satisﬁed Our algorithm basically searches state space backtracking exploiting forward checking 57 attempt reduce branching search tree Despite simplicity eﬃcient practice We report method Algorithms 2 3 4 Algorithm 2 assigns σ 1 vertex T Since solution σ cycle visits vertices vertex assigned σ 1 affecting possibility ﬁnd feasible solution Algorithm 2 ﬁnd_solutionT A cid10 w d 1 select vertex T 2 assign σ 1 3 recursive_callT A cid10 w d σ 2 Algorithm 3 assigns σ j vertex domain F j T contains available values σ j returned forward checking algorithm Algorithm 4 If F j vertex F j successfully assigned σ j Algorithm 3 returns failure backtracking performed Algorithm 3 recursive_callT A 1 σ 1 σ j 1 constraints 11 hold 2 3 constraints 14 hold return σ cid10 w d σ j 4 5 return failure 6 7 8 9 10 11 12 assign F j forward_checkingT A F j assign σ j assign σ cid10 recursive_callT A σ cid10 failure return σ cid10 cid10 w d σ j cid10 w d σ j 1 13 return failure Algorithm 4 restricts F j vertices directly reachable assigned vertex σ j 1 visits violate constraints 1314 Notice checking constraints 1314 requires knowing weights temporal costs related arcs vertices assigned subsequently variables σ k k j For example consider graph Fig 5b suppose partial solution currently constructed algorithm σ cid614cid7 In situation check validity constraints 1314 formation times cover arcs vertices complete solution Therefore estimate unknown temporal costs employing admissible heuristic nonstrict underestimate based minimum cost vertices The heuristic admissible feasible solution discarded We denote heuristic value w wi σ 1 denotes weight shortest path σ 1 We assume wi 0 ver tex Given partial solution σ 1 j 1 forward checking algorithm considers vertices directly reach able σ j 1 keeps violate relaxed constraints 1314 computed heuristic values More precisely considers vertex directly reachable σ j 1 assumes σ j Step 5 Algo rithm 4 checks relaxed constraints 14 respect assuming weight cycle closure σ j σ 1 minimum In example σ 1 14 vertices directly reachable σ 1 08 18 The algorithm considers σ 2 08 By Step 5 wσ 1 08 w08 σ 1 4 cid3 d08 18 Step 5 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 93 satisﬁed It easily observed condition holds σ 2 18 Step 8 Algorithm 4 checks laxed constraints 14 respect vertices k cid11 assuming weight reach k σ j weight cycle closure k σ 1 minimum Consider example It easily observed σ 2 08 conditions hold k Instead σ 2 18 k 06 wσ 1 18 w18 06 w06 σ 1 16 d06 14 The relaxed constraint violated vertex 18 inserted F j Similarly Step 6 checks relaxed constraints 13 respect Step 9 checks relaxed constraints 13 respect k assuming weight reach k σ j minimum In example starting σ cid614cid7 relaxed constraints satisﬁed 08 F j 08 Finally notice Steps 5 8 checked oi 0 ok 0 respectively easily proved oi 0 ok 0 conditions hold Algorithm 4 forward_checkingT A 1 assign F j 2 assign s j 1 3 members T 4 cid10σ s 1 cid10 w d σ j conditions cid3 s1 oi 0 l1 wσ l σ l 1 wσ s wi σ 1 cid2 di cid3 s1 oi 0 lO oi wσ l σ l 1 wσ s cid2 di k cid11 cid3 ok 0 cid3 ok 0 hold s1 l1 wσ l σ l 1 wσ s wi k wk σ 1 cid2 dk s1 lO k ok wσ l σ l 1 wσ s wi k cid2 dk add F j 5 6 7 8 9 10 11 12 return F j We state following theorem proof Appendix B5 Theorem 46 The algorithm sound complete 442 Example We apply algorithm example Fig 5b We perform random selection Step 1 Algorithm 2 choose ﬁrst visited vertex sequence Step 7 Algorithm 3 choose elements F j current candidate solution We report execution trace Fig 6 depicts complete search tree The algorithm assigns σ 1 14 b The domain F 2 depicted ﬁgure curly brackets vertex σ 1 14 produced according discussion previous sections follows vertex 08 added F 2 conditions Algorithm 4 08 satisﬁed vertex 18 added F 2 condition Step 8 Algorithm 4 k 06 satisﬁed formally w14 18 w18 06 w06 14 d06 vertex added F 2 vertex directly reachable 14 c The algorithm assigns σ 2 08 d The domain F 3 produced similarly yielding F 3 06 e The algorithm assigns σ 3 06 continues Some issues worth noting In 10th node search tree sequence σ σ 1 σ s including vertices However sequence satisfy constraints 14 If search stopped backtracked 10th node Step 5 Algorithm 3 algorithm terminate Indeed subtrees follow vertex inﬁnite repetition tree built Finally 6th node possible successor allowed forward checking algorithm backtracks 443 Improving eﬃciency heuristics Our algorithm improved follows Consider conditions Steps 5 8 Algorithm 4 Except ﬁrst execution Algorithm 4 j 2 satisfaction condition Step 5 given j guaranteed condition Step 8 j 1 satisﬁed Therefore safely limit algorithm check conditions Step 5 exclusively j 2 The considerations hold conditions Steps 6 9 Therefore safely limit algorithm check conditions Steps 6 9 exclusively j 2 cid3 We introduce sophisticated stopping criterion called LSC Length Stopping Criterion based Theorem 45 s1 l1 wσ l σ l 1 wσ s σ 1 maxtT dt search stopped backtracked We introduce priori check IFC Initial Forward Checking starting search consider vertex root node search tree apply forward checking If domain algorithm returns failure Otherwise tree search started Finally propose heuristic criteria choosing set F j vertex expand Step 8 Algorithm 3 lexicographic hl random uniform probability distribution hr maximum minimum number incident arcs hmax hmin visited hmin v maximum minimum penetration time hmax d hmin d For ordering 94 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 Fig 6 Search tree example Fig 5b bold nodes arrows denote obtained solution F j s reported nodes σ j 1 xth denotes order trees nodes analyzed criteria hr use criterion breaking ties randomly selects vertex uniform probability RTB Random Tie Break We use heuristics selecting initial node search tree Step 1 Algorithm 2 In Section 7 experimentally evaluate heuristics 5 Finding nondeterministic patrolling strategies large games In section techniques reduce game instances computation nondeterministic patrolling strategies affordable large games In Section 51 present algorithms remove agents dominated strategies In Section 52 discuss compute utility lossless abstractions Section 53 compute abstractions utility loss 51 Removing dominated strategies Action dominates action b expected utility playing larger playing b independently actions played agents rational agent play Removing dominated actions allows obtain equivalent equilibria smaller game consequent reduction computational time needed resolution We present techniques remove defenders attackers dominated actions Section 511 Section 512 respectively discuss possibility iterate removal Section 513 511 Removing defenders dominated actions A defenders action j dominated action removed set defenders available actions defender visit vertex j expected utility decrease This happens removing j capture probability P ct t T V j attackers strategy decreases Practically removing j means removing vertex j incident arcs G Defenders dominated actions identiﬁed steps The ﬁrst focuses vertices corresponding incident arcs based following theorem proof reported Appendix B6 Theorem 51 Visiting vertex shortest path pair targets dominated action N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 95 Fig 7 Graph Gr patrolling setting Fig 1 obtained removing defenders dominated strategies When multiple shortest paths connecting pair targets t1 t2 visiting vertex dominated action We state following theorem proof reported Appendix B7 Theorem 52 Given targets t1 t2 shortest paths P cid6t1 pi t2cid7 Q cid6t1 qi t2cid7 length L k 2 L 1 t T t1 t2 distpk t cid2 distqk t visiting internal vertex P pi excluding t1 t2 dominated The ﬁrst step identiﬁes actions dominated independently current vertex patroller If j dominated patroller visit j adjacent vertex In second step account current vertex occupied patroller considering defenders actions j current vertex We state following theorem proof Appendix B8 Theorem 53 If patroller vertex V T remaining vertex turn dominated action The application Theorem 53 allows remove selfloops V T No defenders strategies removed independently attackers strategy capture probabilities defenders expected utility decrease Therefore theorems allow remove defenders dominated strategies We Gr V r Ar T v d reduced graph produced removing G vertices arcs according Theorems 51 52 53 From work Gr instead G Example 54 We report Fig 7 graph Gr running example Fig 1 having removed vertices arcs corresponding defenders dominated strategies 512 Removing attackers dominated actions Attackers action enterwhent dominated action enterwhens j EUaenterwhent cid3 EUaenterwhens j mixed strategy σd EUa attackers expected utility Checking action dominated formulated optimization problem 96 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 Formulation 55 Action enterwhent dominated enterwhens j result following mathematical pro gram strictly positive max μ constraints 1 2 3 4 5 6 cid8 uapenetrationt cid9 1 P ct cid8 uaintrudercapture cid8 uapenetrations μ cid9 P ct P cs j cid9 1 P cs j 15 16 Constraints 16 deﬁne μ lower bound difference expected utilities actions enterwhent enterwhens j μ corresponds maximum achievable difference positive enterwhent dominated enterwhens j The problem asymptotically number constraints Formulation 37 The nonlinearity size problem large number problems solved pair actions Formulation 55 computationally expensive removal attackers dominated actions However exploiting problem structure design eﬃcient algorithm Initially state following theorem provides necessary suﬃcient conditions dominance exploit fully mixed strategies action played strictly positive probability remove weakly dominated strategies proof Appendix B9 Theorem 56 Action enterwhent dominated enterwhens j fully mixed strategies σd holds uapenetrationt cid3 uapenetrations ii P ct P cs j Now provide eﬃcient algorithm removes dominated actions conditions ii Theorem 56 We report Algorithms 5 6 The algorithm builds trees node q contains vertex ηq For target t cid10 ηq build tree depth dt root t successors node q nodes q cid10 different ηq vertex contained adjacent ηq aηq ηq cid10 cid11 ηfatherq We introduce set dominationt v containing vertices father q ηq enterwhent dominated enterwhent v We build set iteratively initially setting dominationt v V t T v V time node q explored updating follows cid10 1 ηq cid10 cid11 ηq ηq cid10 domination cid8 cid9 t ηq domination cid8 cid9 tηq cid10 cid11 ηp p predecessorsq predecessorsq set predecessors q After construction tree root t dominationt v contains cid10 This reach t v dt turns patroller vertices v cid10 φ pass v cid10 weakly dominated P ct v enterwhent v cid10 cid10 dominationt v Markov chains perturbation P ct v P ct v cid10 φ 1 Thus conditions ii Theorem 56 satisﬁed enterwhent v P ct v P ct v Using trees paths identify dominations scope individual targets However dominations exist actions involving different targets To ﬁnd set cid10 cid10 cid9 cid8 t cid10 tabut v V st t uapenetrationt cid3 ua t T tabut contains vertices v exists pair t cid10 v uapenetrationt cid10 We set dominated enterwhent penetrationt cid10 V uapenetrationt cid3 cid10 cid11 t v cid10 T t cid10 conditions ii Theorem 56 satisﬁed enterwhent v cid10 P ct v P ct t domination v cid8 cid9cid11 cid10 cid10 v cid2 cid12 cid13 nondominatedt V dominationt v tabut t T All actions enterwhent nondominatedt dominated We state following theorem proof trivial construction algorithm vV Algorithm 5 intruder_domination 1 t T tabut 2 v V 3 4 dominationt v V expandt t t 0 5 6 t T 7 8 tabut v V t t nondominatedt V cid10 t dominationt cid14 cid10 v uapenetrationt cid2 uapenetrationt cid10 vV t dominationt v tabut N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 97 Algorithm 6 expandv t B depth 1 N f fatherv cid11 η f cid11 v aη f v 1 2 f N 3 dominationt η f dominationt η f ηB 4 depth dt 5 6 f N expand f t B f depth 1 Fig 8 Search tree ﬁnding dominated actions target 06 Fig 7 white nodes constitute nondominated06 set Theorem 57 Algorithms 5 6 sound complete The worstcase computational complexity O T bmaxt dt b largest outdegree vertices Although complexity exponential maxtdt practice computational time negligible large patrolling settings Section 7 Example 58 when06 13 dominated occurrence 13 search tree node 14 child In Fig 8 black nodes denote vertices actions enterwhen06 dominated enter Finally basis result Algorithms 5 6 discard targets appear dominated actions Corollary 59 Target t T actions enterwhent dominated entered intruder discarded 513 Iterated dominance After removal defenders attackers dominated strategies order remove defenders dominated strategies We state following theorem proof reported Appendix B10 Theorem 510 Assigning positive probability αtt t T dominated action attackers action enterwhent t dominated 98 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 Fig 9 Abstraction vertices 01 03 No steps iterated dominance possible removal arcs prescribed Theorem 510 attackers dominated strategies change1 We remark resorting concept best response 60 additional attackers actions removed However differently happens removal dominated actions remove best responses avoid nonlinear mathematical programming As result removing best response computational complexity solving instance Formulation 39 52 Utility lossless abstractions Although removal dominated strategies greatly reduces computational time resolution realisticsize games hard Section 7 An effective technique received lot attention literature deal large games strategy abstraction 3031 In section apply utility lossless abstractions PSGs We intro duce deﬁnition abstractions Section 521 deﬁne general class utility lossless abstractions Section 522 discuss applied PSG Section 523 521 Abstraction deﬁnition The basic idea abstractions group multiple actions single macro action This allows reduce size game The interesting kind abstractions loss utility called information lossless allowing ﬁnd optimal solution game solving abstracted A number works abstractions devoted extensiveform games imperfect information particular poker games 3031 However application seminal result 30 PSG produces game exactly size original PSGs generalsum chance moves This pushes deﬁne ad hoc abstractions Deﬁnition 511 An abstraction pair nonadjacent vertices j pair defenders macro actions movealongi j movealong j following properties2 defender makes macro action movealongi j patroller moves current vertex vertex j shortest path visiting turn turn vertices composing path b completion movealongi j requires number turns equal length shortest path j c execution macro action defender actions d attacker intrude target defenders execution macro action Example 512 Consider Fig 9 By applying abstraction vertices 01 03 remove arcs labelled α0102 α0201 α0203 α0302 αi j corresponds action j introduce arcs labelled α0103 α0301 When patroller 01 goes 03 spend turns moves 01 02 ﬁrst turn 02 03 second turn When patroller 02 stop execution current macro action action Deﬁnition 513 An abstraction G result application abstractions pairs vertices We obtain removing G disjoint connected subgraphs G cid10 G introducing G G cid10 set arcs j j vertices G G corresponds macro action movealongi j cid10 j adjacent vertices G cid10 arc j b function e V V N assigning arc time needed patroller traversing 1 We notice removal attackers dominated actions discover targets entered attacker However case targets shortest paths connecting targets removed 2 For sake presentation consider situation vertices connected single shortest path If case deﬁne pair macro actions shortest path vertices N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 99 Fig 10 An example abstraction Thus abstraction G involves number abstractions pairs nonadjacent vertices Example 514 We report example abstracted G Fig 10 The main problem address selection vertices removed obtained abstracted setting preserves equilibrium strategies 522 Deﬁning utility lossless abstractions When patroller moves abstracted arc j attacker advantage knows defenders moves Example 515 Consider Fig 9 If defender decides 01 03 attacker observes patroller 02 having observed 01 intruder knows patroller reach 03 turn We produce utility lossless abstractions set attackers dominated strategies computed discussed Section 512 invariant left unchanged application abstractions This motivated following theorem proof trivial omitted Theorem 516 A necessary condition ex ante abstraction utility loss set attackers dominated strategies invariant We provide necessary conditions vertex removed changing set attackers dominated strategies Corollary 517 The removal vertex application abstraction utility loss T t T actions enterwhent dominated b T t T actions enterwhent dominated j V actions enterwheni j dominated It assure set attackers dominated strategies change need assure solving abstracted game ﬁnd strategy worse optimal strategy nonabstracted game cid10 dominated dominates enterwhent We denote domi t set vertices calculated Section 512 We state following theorem proof reported Appendix B11 enterwhent cid10 Theorem 518 Given abstraction G abstractions pairs vertices j vertices k shortest path connecting j disti domk t cid2 disti k b dist j domk t cid2 dist j k targets t T set attackers dominated strategies invariant solving abstracted game gives strategy good optimal strategy original game 100 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 Notice having abstracted PSG utility lossless abstractions directly solve removing attackers dominated strategies invariant wrt nonabstracted game General abstractions stronger terms number removed vertices described theorem provided speciﬁc cases computation eﬃcient For instance abstractions set best responses invariant stronger require use nonlinear mathematical programming 523 Computing utility lossless abstractions Call C V set vertices satisfy Corollary 517 We introduce binary variables xi 0 1 C xi 1 means vertex removed utility lossless abstraction xi 0 means We introduce integer variables sit 0 n V t T n number vertices V sit gives distance vertex target t abstractions applied We succi j set vertices adjacent shortest paths connecting j Formulation 519 An abstraction utility loss following integer linear mathematical programming formula tion associated abstraction feasible sit disti t C t T sit cid2 disti t C t T sit cid3 disti t nxi C t T sit cid3 s jt 1 n1 xi C t T j succi k k domi t sit cid2 s jt 1 n1 xi C t T j succi k k domi t sit cid3 dist j t C t T j domi t 17 18 19 20 21 22 Constraints 17 force sit equal distance t nonremovable vertices constraints 18 force sit equal larger distance t removable vertices constraints 19 force sit equal distance t xi 0 removable vertices constraints 20 constraints 21 force sit equal s jt 1 j succi k k domi t xi 1 removable vertices constraints 22 force sit larger dist j t j domi t The formulation allows check abstraction loss utility We interested ﬁnding strongest abstraction produces game requires minimum computational effort solved game minimum number α variables arcs Call φi outdegree vertex By removing vertex graph remove 2φi arcs corresponding 2φi variables α introduce φiφi 1 new arcs corresponding φiφi 1 new variables α3 In practice reduce number variables φi cid3 3 Formulation 520 The strongest utility lossless abstraction obtained solution following integer linear opti mization mathematical programming problem cid7 max xi iC xi 0 C φi 3 constraints 17 18 19 20 21 22 23 cid10 We A set arcs abstracted game represent A V V 0 1 An abstracted game presenting arbitrary larger weights solved Formulation 37 An extension formulation working arbitrary weights presented Appendix A4 Notice result implicitly shows discard nontargets vertices function cid10 cid10 53 Utility loss abstractions The application utility lossless abstractions potential drastically reduce size PSGs making computation affordable However large games especially containing cycles utility lossless abstractions produce abstracted games hard solve For games relax utility lossless constraints produce reduced games solutions guaranteed optimal nonabstracted game 3 Rigorously speaking removing vertex remove number variables γ experimentally observed computational effort depends strongly number variables α number variables γ N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 101 While utility lossless abstractions produce game set attackers dominated strategies invariant utility loss abstractions produce game weaker condition holds target exposed More precisely target t exposed action enterwhent x related capture probability zero This happens vertex x visited patroller distt x dt Essentially ﬁnding utility lossless abstractions utility loss abstractions conceptually similar main difference deﬁnition upper bound sit abstractions utility loss need sit larger maximum distance domi t t instead abstractions utility loss need sit larger dt This kind utility loss abstractions strongest Indeed removing vertices introduce delay makes target exposed associated capture probability equal zero All candidates C removed vertices targets Formulation 521 An abstraction utility loss following integer linear mathematical program associated abstraction feasible constraints 17 18 19 sit cid3 s jt 1 n1 xi C t T j succi t sit cid2 s jt 1 n1 xi C t T j succi t sit cid3 disti t 1 n1 xi C t T succi t k ai k 1 distk t disti t sit cid2 disti t 1 n1 xi C t T succi t k ai k 1 distk t disti t sit disti t C t T succi t k ai k 1 distk t disti t sit cid3 dt C t T 24 25 26 27 28 29 Constraints 24 25 29 relax corresponding utility lossless constraints 17 18 22 considering directly target t instead set domi t Constraints 26 27 28 analogous constraints 24 25 applied given vertex target t successor succi t This happens presence cycles precisely farthest vertex t Constraints 26 27 applied exists vertex k far t constraints 28 applied x farthest vertex As utility lossless abstractions search strongest abstractions produce smallest game Formulation 522 The strongest utility loss abstraction PSG obtained solution following integer linear optimization mathematical programming problem cid7 max xi iC φi cid23 constraints 17 18 19 24 25 26 27 28 29 As previous section A V 0 1 cid10 set arcs abstracted games represent A cid10 function cid10 V Example 523 In Fig 11 report setting obtained application strongest utility loss abstraction setting Fig 1 The application utility loss abstractions produces reduced game attackers dominated strategies poten tially different original game Furthermore Algorithms 5 6 applied abstracted game consider possibilities distance vertices larger intruder enter target patroller moving vertex We present Appendix A5 extension Al gorithms 5 6 applicable graphs generated utility loss abstractions Once removed attackers dominated strategies computation leaderfollower equilibrium based mathematical programming formula tion utility lossless abstractions Section 523 nondominated action enterwhent v use dt delayt v instead delayt v 6 Summarizing solving algorithm addressing inconsistencies We collect algorithmic results previous sections Section 61 discuss inconsistencies ad dressed Section 62 102 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 61 Global solving algorithm Fig 11 Utility loss abstraction setting Fig 1 Algorithm 7 summarizes proposed approach solving large instances PSGs The deterministic strategy com puted Step 1 reducing game described Section 41 Step 2 solving CSP described Section 44 If deterministic solution exists Step 5 nondeterministic strategy searched The game reduced Step 6 lossless abstractions agents dominated actions removed described Sections 511 512 513 abstractions described Section 52 instead lossy abstractions defenders dominated actions removed described Section 511 abstractions described Section 53 ﬁnally intruders actions removed described Appendix A5 After reduction game leaderfollower equilibrium Step 7 solving mathematical programs described Sections 332 333 523 Algorithm 7 solvingG cid10 1 reduce G G 2 search deterministic strategy G admits deterministic strategy 3 G return 4 cid10 cid10 5 6 7 8 remove agents dominated actions ﬁnd abstractions solve associated mathematical programming problems return 62 Addressing inconsistencies We recall inconsistent strategy characterized attackers best response enterwhent x x visited patroller inﬁnite number turns The problem checking strategy consistent formulated problem checking best response enterwhent x arcs covered strategy removed connected portion G including t x If connected portion exists strategy consistent If strategy inconsistent cases possible uncovered portion G contain targets replacing G covered portion safe trivial solving obtained reduced game obtain nonworse equilibrium strategy defender ii uncovered portion G N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 103 contains targets discarding uncovered portion safe intuitively presence nonpatrolled targets worsen defenders utility intruder attack guarantee captured The second case complex An inconsistent strategy discarded need recompute subportion graph However simply discarding uncovered portion graph targets contains provide guarantee solutions optimality This situation raises problem ﬁnding optimal subset targets cover We provide algorithm address problem Call T c T set targets cover T c T T c set targets covered We GT c reduced patrolling setting comprises targets T c We obtain removing T c Gs sets vertices V targets T taking intersection connected components graph remaining targets T c present Note T c setting GT c example removal T c splits graph connected components containing target Our algorithm enumerates possible T c computes leaderfollower equilibrium GT c explicitly considering attacker attack target T c capture probability zero This introducing Formulations 37 39 additional actions available attacker attacking targets t T c utility equal v independently defenders strategy Finally select consistent strategy maximizes defenders expected utility Guarantees solutions optimality provided simple algorithm stem following lemma proof reported Appendix B12 Lemma 61 If solving GT c T c returns inconsistent strategy σd defenders expected utility σd larger defenders expected utility restricting targets covered σd Therefore consistent patrolling strategy σ cid10 d worse σd defender Then provide insight limit number possible sets T c enumerated We state following lemma proof reported Appendix B13 T c σ cid10 d T cid10 c Lemma 62 For T c T optimal strategy GT cid10 c T cid10 c better cid10 c T c optimal strategy GT c consistent defenders expected utility The lemma shows resolution game targets returns consistent strategy solving patrolling settings patroller limited patrol subset targets return better strategy We state following theorem proof Appendix B14 Theorem 63 Algorithm 8 T c T returns optimal solution Algorithm 8 removing_inconsistencyG T c 1 solve GT c 2 solution consistent 3 return defenders utility 4 5 6 7 assign u 0 t T c u maxu general_sum _inconsistencyG T c t 8 return u 7 Experimental evaluation In section evaluate scalability solution quality algorithm patrolling settings comparable encountered realworld scenarios 43 Experiments conducted Linux 2624 kernel machine equipped Intel XEON 233 GHz CPU 4 GB RAM 4 MB cache We evaluate algorithm ﬁnd deterministic non deterministic patrolling strategies Section 71 Section 72 respectively In Section 73 evaluate quality nondeterministic solutions 71 Finding deterministic equilibrium strategy cid10 We developed random generator graph instances G Without loss generality abstract away speciﬁc topology original patrolling setting concen parameters input number trate G vertices n corresponding targets original graph G number arcs m corresponding obtain applying reduction procedure Section 41 G Given n m random connected graph n vertices produced m n arcs added weights set 1 Values dk uniformly drawn interval cid10 104 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 Fig 12 Percentage termination signiﬁcant algorithm conﬁgurations ﬁnding deterministic patrolling strategies sake presenta tion split conﬁgurations different subﬁgures n number targets Fig 13 Computational times signiﬁcant algorithm conﬁgurations ﬁnding deterministic patrolling strategies sake presentation split conﬁgurations different subﬁgures n number targets mini jwi j w j 2n2 maxi j wi j wi j length shortest path vertices j The lower bound interval comes consideration settings dk mini jwi j w j unfeasible algorithm immediately detects IFC The upper bound justiﬁed considering problem fea sible admit solution shorter 2n2 maxi jwi j The program generating graphs implementing algorithms coded C Since objective ﬁnd solution satisﬁes constraints optimal solution according given metric minimizing cycle length evaluate termination percentage solution failure algorithm 10 minutes computational time case termination success percentage case termination percentage solution For ordering criterion introduced Section 443 hl hr hmax hmin hmin v hmax d hmin d LSC IFC consider n 3 4 5 6 7 8 100 250 500 n produce 1000 instances G m uni formly drawn interval n n 1n m n graph connected m n 1n pair vertices connected arc cid10 The signiﬁcant experimental results summarized Fig 12 termination percentages Fig 13 average com putational times exhaustive view reported Table 2 Appendix C We report combinations heuristics improving eﬃciency signiﬁcant All values averaged 1000 instances The results success percentages appear signiﬁcant strictly correlated termina tion percentages Essentially lower termination percentage higher success percentage This algorithm terminates solution Proving instance admit solution usually requires algorithm explore entire tree rarely happen 10 minutes N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 105 For algorithm conﬁgurations average computational time keeps reasonably short seconds large values n On hand termination percentage varies signiﬁcantly different conﬁgurations This behavior resembles constraint programming algorithms termination time usually short solution deadline exceeded Moreover obtained results present outliers detected observing maximum computational times Table 2 Some cases harder average solve required time signiﬁcantly larger practice cases reduce percentage termination increase computational time These hard cases represent outliers population instances obtained random graph generator They typically characterized tangled topologies oddlydistributed relative deadlines We comment performance techniques Section 443 improving eﬃciency algorithm The best ordering criterion hmin v RTB The experimental results hmax hmin hmax d hmin d similar obtained hl omitted The criterion hmin v RTB leads algorithm terminate percentage close hr small values n 80 larger large values n Instead hl provides bad performance especially large values n algorithm terminates percentages close 0 The LSC improved stopping increases termination percentage value 0 2 distinguishable effects computational time This improvement depends conﬁguration algorithm affects construction search tree Its adoption increases percentage termination ﬁnding solution The IFC criterion increases termination percentage value 1 4 reducing computational time nonfeasible settings recognized starting construction tree This improvement depend conﬁguration algorithm affect search working Its adoption increases percentage termination ﬁnding solution Hence best algorithm conﬁguration appears hmin v RTB LSC IFC The results satisfactory termination percentage high large settings 500 targets corresponding average computational time 55 s reasonably short The results justify decision set threshold 10 minutes 600 s 72 Simplifying large patrolling security games ﬁnding randomized equilibrium strategy Given different heterogeneous formulations patrolling problem proposed literature summarized Table 1 deﬁnition data set experimentation comparison addressed best knowledge Some partial attempts deﬁne experimental settings nonadversarial patrolling 59 47 authors propose arbitrary topology maps 5060 vertices The lack suitable data set experimental activity pushes develop ad hoc data set Our data set adversarial patrolling partitioned parts The ﬁrst composed settings perimeter topologies distinguish open closed topologies second composed settings arbitrary topologies The settings arbitrary topologies obtained introducing targets setting presented 59 producing new patrolling settings inspired environments RADISH repository containing data sets environmental acquisitions performed real robots 36 We characterize patrolling settings wrt number n vertices density δ targets representing percentage targets vertices δ T n We evaluated compared multiple conﬁgurations algorithm differ efforts devoted pre processing phase More precisely given PSG instance consider basic algorithm basic plainly compute optimal strategy described Section 33 original setting exploiting kind reduction removal dominated strategies dom apply algorithms described Section 51 reduce game solve basic algorithm utility lossless abstraction lossless remove players dominated strategies apply strongest utility lossless abstraction described Section 52 ﬁnally solve basic algorithm utility loss abstraction lossy apply strongest utility loss abstraction described Section 53 remove intruders dominated strategies obtained game ﬁnally solve basic algorithm We imposed time deadline hour zerosum settings 24 hours generalsum ones We coded algorithm MATLAB formulated mathematical programming problems AMPL 25 We CPLEX 37 SNOPT 61 solving linear nonlinear mathematical programs respectively 721 Open perimetral settings We generated settings following features Fig 14a example n 10 200 δ 10 50 targets randomly selected vertices constraint extreme vertices tT v dt 1 penetration times targets target t random value v dt chosen global constraint dt independently drawn interval Dt Dt 1 2Dt 1 Dt maximum distance t extreme vertex penetration time shorter Dt target exposed penetration times longer 2Dt 1 deterministic equilibrium strategies exist For generalsum settings target t random value 0 1 chosen v For pair values n δ generated 5 patrolling settings analyzed average values cid3 The removal dominated actions allows discard 95 attackers actions average 99 details Table 3 Appendix C The number nondominated attackers actions happens small 106 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 Fig 14 Example open closed perimetral settings Fig 15 Computational times different algorithm conﬁgurations open closed perimetral settings 12 large settings 104 vertices This essentially reasons First attackers action enterwhent h h extreme vertex dominated enterwhent h extreme Second large number targets nonextreme vertices attacked target larger value presenting strictly smaller capture probability cid10 h cid10 The application lossless abstractions allows generate abstracted graphs discarding removal domi nated actions 70 vertices average 93 Table 4 Appendix C This essentially low number nondominated actions Since nondominated actions imposes set constraints computation abstractions associated optimization problem weakly constrained vertices discarded Graphs Fig 15 lefthand computational time terminated executions varies wrt n δ zerosum case With generalsum instances results similar To general idea average computational time generalsum instance roughly number nondominated attackers actions multiplied 10 computational time zerosum instance The detailed data zerosum generalsum instances Table 5 Appendix C N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 107 For conﬁgurations computational times rise exponentially δn The basic conﬁguration left graph Fig 15 requires large computational time small settings applicable n 40 vertices δ 10 targets Going limit impractical The dom conﬁguration middle left graph Fig 15 solves larger settings thanks signiﬁcant reduction defenders actions In case computational limit n 100 excessively large number vertices defenders actions The percentage preprocessing time total computational time dom 4 average max 18 min 1 The lossless conﬁguration left graph Fig 15 solves larger instances composed 200 vertices 50 targets thanks reduction actions attacker defender The percentage preprocessing time total computational time lossless 76 average max 99 min 9 Given realistically large open perimetral settings 200 vertices 100 targets solvable lossless conﬁguration apply lossy conﬁguration 722 Closed perimetral settings Closed perimetral settings generated squares edges length f vertices Fig 14b example n 10 200 δ 10 50 Targets randomly selected vertices constraints corners targets graph reducible removal patrollers dominated actions open setting penetration times dt independently drawn interval 2 f 2 f 1 n 1 penetration time shorter 2 f target exposed penetration times longer n 1 deterministic equilibrium strategies exist The agents values targets generated open perimetral settings For pair values n δ generated 5 patrolling settings analyzed average values The removal dominated actions applied original settings discards 41 attackers actions average 50 Table 6 Appendix C The number removed actions lower open perimeters This essentially extreme vertices The lossless abstractions remove vertex The set removable vertices vertex appears t h nondominated action enterwhent h The lossy abstraction allows generate abstracted graphs discarding 50 vertices average 70 Table 7 Appendix C The application removal dominated actions applied lossy abstraction graphs allows discard 50 actions Table 6 Graphs Fig 15 righthand computational time terminated executions varies wrt n δ zerosum case The computational time generalsum instance roughly 9 number nondominated attackers actions multiplied computational time zerosum instance The detailed data Table 8 Appendix C Closed perimetral settings diﬃcult wrt open ones The basic conﬁguration right graph Fig 15 ran memory n 44 vertices δ 20 targets slight improvements obtained enabling removal dominated strategies With dom conﬁguration middle right graph Fig 15 limit setting size improved 44 vertices 30 targets The percentage preprocessing time wrt total computational time dom 1 average max 2 min 1 The lossless conﬁguration provides results dom The lossy conﬁguration right graph Fig 15 allows solve large instances composed 84 vertices 50 targets The percentage preprocessing time total computational time lossy 53 average max 99 min 12 Notice speciﬁc case vertices targets targets present value agents penetration time settings solved applying algorithm presented 3 In case algorithm outperforms requiring polynomial time 723 Arbitrary settings We developed software tool 14 compose patrolling settings generated arbitrary settings In addition settings proposed 59 considered subset indoor environments RADISH repository albertb laser austin_ aces3 cmu_nsh_level_a DLRSpatial_Cognition fr079 kwing_wld intel_oregon mitcsail3rdﬂoor sdr_site_b stanfordgates1 ubremen_cartesium Fig 16 shows examples For topology manually reproduced bidimensional grids representing map different n δ n 50 166 δ 5 30 Broadly speaking large values n cell associated small area environment smaller n cell represents larger environment Target cells randomly selected different values δ penetration times dt randomly chosen interval Dt Dt 1 2Dt 1 Dt maximum distance t vertex The target values generated open closed perime tral settings For topology pair values n δ generated 5 patrolling settings analyzed average values In case consider time threshold experiments memory limited computational resource The performance reduction techniques open closed perimetral settings The removal dominated actions applied original setting eliminates 58 attackers actions average 83 Table 9 Appendix C The application lossless abstractions generates abstracted graphs discarding removal dominated actions 20 vertices average 35 Table 10 Appendix C The 108 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 Fig 16 Two examples arbitrary patrolling settings white cells associated vertices targets denoted circles 166 vertices 10 targets Fig 17 Computational times different algorithm conﬁgurations arbitrary settings lossy abstraction generates abstracted graphs discarding 55 vertices average 76 Table 10 The application removal dominated actions applied lossy abstraction graphs discards 75 actions Table 9 Graphs Fig 17 computational time varies wrt n δ zerosum case Results reported terminated executions exceed memory limit obtained strategies inconsistencies observed With generalsum instances results similar computational time generalsum instance roughly 10 number nondominated attackers actions multiplied computational time zerosum instance The detailed data zerosum generalsum instances Table 11 Appendix C We solved game instances lossless lossy conﬁgurations results dom worse lossless basic instances required 4 GB RAM As seen Table 11 arbitrary settings turned hard closed perimetral ones By employing lossless conﬁguration encountered limit n 75 vertices cells δ 10 targets The lossy conﬁguration allowed solve instances 166 cells 10 targets The computational time spent preprocessing lossless lossy conﬁgurations similar closed perimetral settings As experiment relaxed penetration times instances admit pure strategy equilibrium intruder acts stayout We solved instances lossless lossy conﬁgurations The average computational times close reported Table 11 They 103 larger obtained algorithm speciﬁc deterministic strategies described Section 4 In addition solutions returned non deterministic algorithm ﬁrstorder Markovian assure patroller capture intruder probability These ﬁndings justify approach looking deterministic strategies specialized algorithm general algorithm nondeterministic strategies N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 109 Fig 18 Eﬃciency ﬁrstorder Markovian strategies lossless lossy abstractions different settings nonﬁrstorder Markovian deterministic strategy Grey boxes report eﬃciency baseline uniform strategy 73 Solution quality evaluation We evaluate quality solutions produced algorithms terms eﬃciency discussed Section 334 evaluate eﬃciency ﬁrstorder Markovian strategies wrt higherorder Markovian strategies evaluate eﬃciency solutions produced lossy abstractions wrt solutions produced lossless abstractions For previous settings open closed arbitrary topologies value u corresponding optimal high order Markovian strategy known In case discussed Section 334 calculate lower bound With respect results presented previous sections average eﬃciency considering value lower bound eﬃciency 097 lossless conﬁgurations max 099 min 095 092 lossy ones max 099 min 081 v di instead u cid3 In order obtain accurate evaluation solutions quality considered settings admit deterministic known advance equal sum targets values In equilibrium strategy Hence settings u settings eﬃciencies computed exactly resorting lower bound The arbitrary graphs generated phase following features n 40 75 δ 5 20 targets randomly selected value chosen open closed perimetral settings The penetration times smallest values exists nonﬁrstorder Markovian deterministic strategy ﬁrstorder Markovian deterministic strategy This represents worst case nondeterministic ﬁrstorder Markovian strategies Obviously relaxing penetration times ﬁrstorder Markovian nondeterministic strategies perform better For pair values n δ generated 10 patrolling settings analyzed average values Graphs Fig 18 solutions eﬃciency ﬁrstorder Markovian strategies lossless lossy abstractions zerosum instances Strategies compared baseline case eﬃciency reported grey boxes The baseline strategy Markovian strategy assigns uniform probability movement adjacent vertices abstracted lossless lossy respectively graph settings small target density δ 5 A remarkable improvement eﬃciency generally obtained passing baseline case Markovian equilibrium strategy Results obtained generalsum instances similar The detailed data Table 12 Appendix C Lossless ﬁrstorder Markovian strategies effective providing 99 utility provided deter ministic strategy The expected utility strictly increases δ defender preserving targets The employment lossy ﬁrstorder Markovian strategies satisfactory providing 85 utility pro vided deterministic strategy As lossless case expected utility strictly increases δ We additionally compared quality solutions lossy abstractions wrt lossless abstractions settings Sections 722 723 In cases loss eﬃciency larger 5 This average case consistent worst case discussed Finally remark inconsistencies worth The absolute utility loss consistent strategy wrt optimal high order Markovian strategy upper bounded mintT v tP ct h enterwhent h valid best response intruder This happens equilibrium excluding particular topologies intruder likely induced attack covered target lowest value defender This guarantees relatively limited wrt targets values absolute utility loss When inconsistencies present set covered targets change resulting larger 110 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 minimum value Thus upper bound absolute utility loss large consequent arbitrary degradation solutions quality 8 Conclusions future works Security games constitute class games receiving increasing attention artiﬁcial intelligence security applications They characterized players defender attacker set targets values The attacker wants intrude target defender wants protect targets Both attacker defender deploy resources accomplish goals Security games usually modeled leaderfollower games defender commit strategy underlying games normal form In paper studied security games taking account situation attacker observe realization strategy defender decide basis observation attack subject temporal deadline This option available exploited attacker gain larger utility We extended currently available models introducing underlying game extensive form inﬁnite horizon Since natural application model mobile robot patrolling called patrolling security games PSGs new game class Our model allows study adversarial patrolling problems topology area patrolled represented arbitrary graph targets We limited study case agent single resource intruder patroller attacker defender respectively The main contribution work development algorithmic techniques computation leaderfollower equilibrium large instances PSGs Differently state art security games setting leaders commitment directly behavior strategies problem compute leaderfollower equilibrium formulated bilinear mathematical pro gramming problem The nonlinearity presence Markovian constraints introduced dealing inﬁnite horizon This makes computation equilibrium hard problem solve small settings To limitation developed speciﬁc techniques ﬁnd equilibrium pure strategies possible reduce size game instances need resort mixed strategies The computation equilibrium pure strategies PSGs formulated variant TSP Although NPcomplete showed eﬃcient algorithm designed resorting constraint programming The compu tation mixed strategy equilibrium harder tractable practice case ﬁrstorder Markovian strategies We designed reduction techniques based removal dominated strategies utility lossless utility loss abstractions techniques constitute original contribution security games In way drastically reduce size game solve large instances Furthermore showed cases ﬁrstorder Markovian strategies produce solutions quality comparable optimal highorder solutions Several issues worth investigation The ﬁrst improvement model techniques speciﬁc patrolling problem studied The model extended following directions exploitation multiple resources attacker defender preliminary results reported 15 reﬁnement ment models intruder patroller reﬁnement patrollers sensing capabilities Results direction presented 13 intruder reﬁned introducing realistic movement model restricting observation capabilities Moreover interesting study new algorithms generate abstractions account defenders expected utility 10 searching best abstraction given tradeoff computational time expected utility The second issue future work application PSG model novel applications We currently exploring applications patrolling active mobile cameras preliminary results reported 16 security A issue employment techniques proposed paper problems different PSGs For instance abstractions general security games graphs speed generation optimal schedules preserving expected utility Appendix A Extensions reﬁnements A1 Formulation arbitrary l We provide generalization formulation presented Section 331 compute intruder capture probabilities history length l arbitrary Let introduce notation We denote Hl space possible histories h length l ﬁrst vertices h1 hl respectively With slight overload notation l histories obtained h removing ﬁrst vertices respectively We introduce denote h notion adjacent histories Given history h set adjacent histories AHh hx Hl h For example given environment Fig 1 history length 5 h cid606 01 02 03 07cid7 history adjacent h hx cid601 02 03 07 08cid7 The general formulation following 1 h 1 h l x αh j cid2 0 h Hl j V cid7 αh j 1 h Hl jV 30 31 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 cid9 cid8 hl j αh1hl 2 cid7 αh j cid3 γ 1t h1h2 γ wt h1h2 h Hl j V t T h2 A Hh1 cid8 cid9 γ w1t h1hx αhxhl 2 hx A Hh2 t hx P ct h1 1 cid7 hxHl t hx γ dtt h1hx t T h1 Hl w cid10 cid11 2 dt t T h1 h2 Hl hl 2 cid11 t 111 32 33 34 35 The meaning constraints similar corresponding constraints Section 331 A2 Reducing number variables constraints Constraints 16 rewritten eﬃcient way reducing number variables constraints We start giving intuition example Example A1 Consider enterwhen14 12 Fig 1 Focus event patroller starting 12 reaches 12 2 turns passing 14 γ 214 1212 probability associated If event happens probability patroller reaches 14 d14 9 turns zero distance 12 14 9 7 turns left intruder captured As result computation capture probability related enterwhen14 12 safely discard events following associated γ 214 1212 Consider action enterwhent h l 1 attack t started patroller vertex h order capture intruder visit target t following dt turns In scenario suﬃcient condition successful intrusion following turns ρ patroller visited t occupies vertex ρ disti t dt intrusion success disti j shortest distance vertices j In words realization patrollers path drove vertex t reached penetration time intruder captured We easily determine minimum value ρ target t patroller occupies generic vertex ρi t dt disti t 1 We reduce number variables form γ wt included computation P ct h setting ρ j t upper bound index w To h j constraints 5 6 replaced following ones γ wt j cid7 cid8 γ w1t ix αx j cid9 t T j V j cid11 t w cid10 cid11 2 ρ j t xV t wcid2ρxt cid15 cid7 P ct h 1 γ ρ jtt h j cid7 cid7 jV t wcid2ρ jt1 γ wt h j cid7 xV t wcid3ρxt cid16 α jx t T h V jV t 36 37 Constraints 36 constraints 5 addition upper bound ρ j t w index γ wt j variable The term enclosed parentheses constraints 37 success probability action enterwhent Its ﬁrst addendum accounts path realizations start end vertex j exactly ρ j t turns The second addendum accounts path realizations end vertex x turn w ρx t given turn w 1 visited vertex j having reached corresponding upper bound ρ j t The exact number variables constraints eliminated reﬁnement strongly depends speciﬁc instance PSG From experimental evaluations observed average number variables γ wt number constraints approximately j halve A3 Capture probability formulation intruder movements In section provide extension considers realistic movement model intruder We assume performing attack intruder follows path starting access vertex ending target For sake simplicity denote cid12 length path assume intruder disappear target number turns equal penetration time target Modeling situations intruder completed intrusion escapes environment following path easy extension results presented section We P set possible paths denote p P single path ith vertex pi The actions available intruder deﬁned enterwhenp attack following path p soon patroller vertex Performing action intruder spend cid12 turns cover path dpcid12 turns 112 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 complete intrusion target detectable cid12 dpcid12 turns Assuming p w pcid12 w cid2 cid12 capture probabilities computed replacing constraints 46 Section 331 following ones cid10 cid11 p1 cid10 γ 1p j γ wp j αi j p P V j V cid7 cid8 cid9 γ w1p ix αx j xV p w1 cid7 P cp γ cid12dpcid12p j V p P w 2 cid12 d cid9cid11 cid8 pcid12 p P j V j cid11 p w 38 39 40 jV pcid12 A4 Capture probability formulation graphs arbitrary weights In order compute intruder capture probabilities graphs edges arbitrary weights need following constraints capture possibility traversing arcs require turn cid10 αi j cid3 γ ei jt j γ wt j j j V αi j t T j V j cid11 t cid9 cid8 cid7 γ wex jt ix αx j xV t wcid2ρxt wcid3eixex j cid7 P ct 1 γ ρ jtt j jV t w cid10 cid11 2 ρ j t t T j V j cid11 t cid7 cid7 jV t wcid2ρ jt1 γ wt j cid7 xV t wcid3ei jρxt α jx t T V 41 42 43 44 Substituting constraints constraints 3 4 36 37 respectively Formulations 37 38 39 calculate equilibrium patrolling strategies Using graphs arbitrary weights makes patroller movement model expressive allowing capture time spent movements In order model expressive combine arbitrary weight graphs model 3 patrolling robot heading changing heading requires turn robot stays vertex The resulting model lead deﬁne states patroller pair vertex orientation This realistic model drawback increase number patrollers states ﬁnding leaderfollower equilibrium harder A5 Removing attackers dominated strategies abstracted games The algorithm remove attackers dominated strategies abstracted game simple variation algorithm presented Section 512 We report Algorithms 9 10 Algorithm 9 intruder_domination 1 t T tabut 2 v V 3 4 5 dominationt v V delayt v 0 expandt t t 0 v V 6 7 8 9 10 w dominationt v distv w delayt w dominationt v dominationt v w 11 t T 12 13 tabut v V t t nondominatedt V cid10 t dominationt cid14 cid10 v uapenetrationt cid2 uapenetrationt cid10 vV t dominationt v tabut Algorithm 9 works exactly Algorithm 5 following points In Step 2 deﬁnes variable delayt v 0 Step 3 length paths measured terms temporal cost Step 5 vertex ηq consider largest number turns delay patroller spend abstracted arcs reach ηq Step 6 set domination reduced considering delay delayt v In particular focusing step given target t N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 113 Algorithm 10 expandv t B depth 1 N f fatherv cid11 η f cid11 ηv aη f ηv 1 2 f N 3 4 5 dominationt η f dominationt η f ηB distηv η f 1 delayt ηv maxdelayt ηv distηv η f 1 6 depth dt 7 8 f N expand f t B f depth 1 dominationt v computed described Steps 35 vertex v dominates v delayt v distv v capture probability enterwhent v cid10 Indeed cid10 guarantee capture probability enterwhent v smaller cid10 delay delayt v delayt v cid3 distv v cid10 cid10 Appendix B Proofs B1 Proof Proposition 311 Consider setting Fig 1 following penetration times d06 14 d08 18 d12 23 d14 22 d18 18 This PSG admits leaderfollower deterministic patrolling strategy patroller follows cycle targets moving shortest paths 14 08 06 18 12 18 06 08 14 The best intruders action stayout independently value cid3 captured probability It easily observed patrolling strategy implies l 2 Suppose apply Formulation 38 game We ﬁnd value cid3 patrolling strategy l 1 stayout intruders best response Consider action enterwhen06 23 associated capture probability smaller l 1 Indeed values α11i 06 12 18 strictly positive assure patroller cover targets Then Markov chains follows probability patroller reaches vertex 06 starting vertex 23 9 turns strictly smaller We ﬁnd strictly positive value cid3 patroller follows strategy l 1 intruder strictly prefers attack target attack Since intruder attack probability captured strictly lower smaller utility expected patroller following strategy l 1 strictly smaller expected utility following deterministic equilibrium strategy l 2 B2 Proof Theorem 313 No ﬁrstorder Markovian leaderfollower equilibrium strategy provide 05 diction leaderfollower equilibrium strategy σ v dt cid2 05 Therefore σ v di If defender covers target probability gain 05 leaderfollower strategy contradiction gives 05 v di Assume contra v di Then target t v di cid3 cid3 cid3 cid3 We eﬃciency 1 2 arbitrarily achieved Consider setting targets t1 t2 penetration time equal d value defender equal M Assume topology linear targets extreme vertices Assume number vertices including targets 2d 2 This setting admits deterministic equilibrium strategy optimal highorder strategy gives defender 2M The ﬁrstorder Markovian leader follower equilibrium strategy d capture probability enterwhent1 t2 enterwhent2 t1 best responses zero Therefore defenders expected utility approaches M eﬃciency arbitrarily close 1 2 B3 Proof Theorem 44 We prove NPcompleteness reducing Directed Hamiltonian Circuit problem DHC 49 DETSTRAT problem DHC problem determining Hamiltonian path path visits vertex exactly exists given directed graph This wellknown NPcomplete problem Let consider generic instance DHC problem given directed graph Gh V h Ah V h set vertices Ah set arcs In order prove cid10 DHC reduced DETSTRAT problem instance Gh DHC problem instance G s cid10 DETSTRAT problem built polynomial time solving DETSTRAT problem G s obtain cid10 T s As w s ds easily constructed Gh following solution DHC problem Gh An instance G s cid10 T s It straightforward way T s V h As Ah v T s impose dv V h w sv v cid10 s exists Hamiltonian cycle Indeed relative deadline target equal solution G cid10 1 v v 114 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 number targets deterministic equilibrium strategy visit target exactly relative cid10 deadline violated w sv v s provides construction solution Gh words DHC problem reduced DETSTRAT problem proving NPcompleteness proof completed noting trivially polynomial verify given sequence vertices solution DETSTRAT problem cid10 T s Therefore computing solution G cid10 1 v v B4 Proof Theorem 45 In order prove theorem suﬃcient prove problem solvable exists solution σ vertex appears excluding σ s Indeed statement holds maximum temporal length σ bounded di vertex appears time σ It easily follows worst case maximum temporal length σ maxtT dt We prove problem solvable solution vertex appears To prove consider solution σ σ 1 vertex minimum relative deadline σ 1 arg mintT dt Notice assignment preclude ﬁnding solution We k minimum integer vertices appear subsequence σ 1 σ k We problem solvable necessary vertex v σ k appears k A visit v k observed necessary pass v reach σ 1 necessary revisit v relative deadline σ 1 However vertices v σ k visited k vertices v visited necessarily visiting v Furthermore deadline σ 1 hypothesis harder σ ks occurrence v σ k k necessary Therefore vertex σ k occurs time B5 Proof Theorem 46 We initially prove soundness algorithm We need prove solutions produces satisfy straints 1014 Constraints 10 11 14 satisﬁed Algorithm 3 If hold solution produced The satisfaction constraints 12 assured Algorithm 4 Step 3 satisfaction constraints 13 assured Algorithm 4 Steps 6 9 In order prove completeness need algorithm produces solution exists In algorithm points candidate solution discarded The ﬁrst forward checking Algorithm 4 Indeed iteratively applies constraints 1314 partial sequence σ exploiting heuristic future weights time spent visit successive vertices Since employed heuristic admissible feasible candidate solution discarded The second point stopping criterion Algorithm 3 vertices occur σ ﬁrst vertex σ equal successor considered search stopped If σ satisﬁes constraints σ solution backtracking performed We solution stopping search point solution stopping search backtracking vice versa hold This issue paramount importance assures algorithm terminates Section 442 provide example stopping criterion search terminate Consider σ σ 1 σ s including vertices T The search subtree following σ s produced proposed algorithm nonstrictly contained search tree following σ 1 This constraints considered forward checking σ s nonstrictly harder considered σ 1 σ s The increased hardness activation constraints 13 needed given occurrence vertex σ Thus solution searching σ s shorter solution stopping search σ s backtracking This concludes proof completeness B6 Proof Theorem 51 Call z vertex shortest path pair targets If strategy σd prescribes patroller action movez strictly positive probability easily observed patroller action decrease expected utility Indeed intruder capture probability P ct x t T x V decrease visiting z introduce unnecessary temporal cost B7 Proof Theorem 52 The proof trivial When patroller moves Q going t1 t2 intruder capture probabilities smaller case patroller moves P B8 Proof Theorem 53 The idea setting αi 0 V T intruder capture probabilities decrease We consider simple situation vertices adjacent j argument applied situations j N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 115 Fig 19 Example proof Theorem 53 number adjacent vertices Consider Fig 19 vertices targets Given α0201 α0202 α0203 probability probability reach 03 02 inﬁnite reach 01 02 inﬁnite number turns 0 αcid10 0202 03 02 decrease possible number turns Therefore obtain thesis Of course easy hold set αii 0 T probabilities reach 01 α0201 1α0202 αcid10 By setting αcid10 α0203 1α0202 α0201 1α0202 number turns α0203 1α0202 0201 0203 B9 Proof Theorem 56 We prove ii imply 1 P ct iuapenetrationt 1 P cs juapenetrations fully mixed strategy σd By continuity nonfully mixed strategies 1 P ct iuapenetrationt cid3 1 P cs juapenetrations uaintrudercapture nonpositive implies deﬁnition dominance We prove For possible patrolling settings uapenetrationt uapenetrations possible ﬁnd fully mixed strategy σd EUaenterwhent EUaenterwhens j following way We set probabilities leading s j equal 1 cid3 cid3 0 arbitrarily small If path connecting t strictly contained path connecting s j set probability path connecting t equal cid3 1 P ct cid21 1 1 P cs j cid21 0 satisfying previous inequality If path connecting t strictly contained path connecting s j 1 P ct 1 P cs j However set probabilities leading s t equal 1 cid3cid10 P cs j cid2 1 cid3cid10k P ct k distance t s It possible ﬁnd cid3cid10 P cs j P ct arbitrarily small difference uapenetrationt uapenetrations ﬁnite EUaenterwhent EUaenterwhens j We prove ii If exists strategy σd P ct P cs j path connecting t strictly contained path connecting s j In case ﬁnd σd discussed 1 P ct cid21 1 1 P cs j cid21 0 action enterwhent dominated B10 Proof Theorem 510 The proof trivial The intruders action enterwhent t dominated intruder enter t patroller t Therefore setting αtt 0 probability intruder captured enters t decrease B11 Proof Theorem 518 The proof steps In ﬁrst application lossless abstractions set intruders dominated strategies left unchanged focus dominant strategies In second strategy σ nonabstracted game ﬁnd solving abstracted game strategy σ cid10 gives patroller utility smaller given σ With abuse notation denote P cx y z probability intruder captured z turns entered vertex x patroller vertex y We prove ﬁrst step showing abstracted game intruders probabilities captured takes dominated action nonabstracted original game larger takes dominant action original game Exactly given abstraction pair vertices j called k vertex belonging shortest path j need prove target t domk t cid8 cid9 k t dt P c cid2 P c cid8 cid9 domk t t dt By applying abstractions cid9 cid8 k t dt P c max cid10 P c cid8 cid9 t dt distk P c cid8 j t dt distk j cid9cid11 116 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 cid8 cid9 domk t t dt P c max cid17 dtdistitcid7 cid8 P r domk t h cid9 cid8 P c t dt h cid9 hdistdomkti dtdist jtcid7 cid8 P r domk t j h hdistdomkt j cid9 cid8 P c j t dt h cid18 cid9 Since distdomk t j cid2 distk j distdomk t cid2 distk cid8 cid9 k t dt P c cid2 max cid17 dtdistitcid7 P rk h P c cid8 t dt h cid9 cid8 hdistki cid9 domk t t dt cid2 P c P rk j h P c cid8 j t dt h cid18 cid9 dtdist jtcid7 hdistk j We prove second step Consider basic situation Fig 9 Suppose probabilities α0102 α0201 α0203 α0302 constitute leaderfollower equilibrium We ﬁnd values α0103 α0301 capture probabilities abstracted game smaller nonabstracted game Assign α0103 α0102 α0301 α0302 Assume simplicity arc 01 traversed probability come 01 equal zero The probability reach 03 01 2 turns abstracted game α0103 The probability reach 03 01 inﬁnite number turns original game α0102 1 α0201 cid7 l0 α0102 α0201l α0102 1 α0201 1 α0102 α0201 1α0201 1α0102α0201 Being α0103 abstraction preserves optimality solution Given arbitrary information lossless abstraction apply iteratively procedure showing computing equilibrium strategies abstracted game allows ﬁnd strategies good original game 1 α01021α0201 1α0102α0201 B12 Proof Lemma 61 If patrolling strategy inconsistent best response constraints related attack targets patrolled active This expected utility attacker larger value nonpatrolled targets As described Section 62 solving game nonpatrolled targets removed G equivalent substitute best response constraints related nonpatrolled targets new relaxed constraints These constraints relaxed optimal solution good initial problem B13 Proof Lemma 62 cid10 c T c leads better consistent solutions Consider targets T c T The proof contradiction Assume GT c admits consistent solution Assume contradiction sub cid10 c These targets attacked solution cid10 c worse GT c associated capture probabilities cid10 c attacked GT c partition T GT zero However targets T c T defender improve utility patrolling targets leads contradiction cid10 c attacked solution GT cid10 c solution GT B14 Proof Theorem 63 The algorithm optimal enumerates possible partitions targets T c T c considering subpartitions T c solving GT c returns consistent strategy By Lemma 62 subpartitions contain better solutions associated GT c Appendix C Experimental results tables Table 2 Computing deterministic patrolling strategy experimental results ﬁnding deterministic patrolling strategy signiﬁcant conﬁgurations algorithm set time deadline 10 minutes Best conﬁgurations bold hmin v RTB LSC n term time s dev s 3 100 001 001 4 100 001 001 5 100 001 001 6 998 032 517 7 996 010 178 8 995 005 096 100 989 016 352 250 966 087 1447 500 902 550 3028 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 117 Table 2 continued IFC hr LSC IFC hr IFC hmin v RTB LSC hr LSC hr hl LSC IFC hl n max s min s suc term time s dev s max s min s suc term time s dev s max s min s suc term time s dev s max s min s suc term time s dev s max s min s suc term time s dev s max s min s suc term time s dev s max s min s suc term time s dev s max s min s suc 3 001 001 60 100 001 001 001 001 60 100 001 001 001 001 60 100 001 001 001 001 60 100 001 001 001 001 60 100 001 001 001 001 60 100 001 001 001 001 60 100 001 001 001 001 60 4 001 001 58 100 001 001 001 001 58 100 044 868 17355 001 58 100 001 001 001 001 58 100 001 001 001 001 58 100 745 5545 55692 001 58 992 745 5545 54841 001 58 992 742 5523 54841 001 58 5 001 001 62 100 011 164 3200 001 62 990 365 3889 59410 001 62 100 034 629 12503 001 62 100 079 1358 27003 001 62 987 245 2861 50672 001 62 910 245 2861 50574 001 65 880 261 2866 50574 001 67 6 9800 001 59 985 009 170 3300 001 59 972 014 224 4303 001 59 967 298 3377 51975 001 60 954 304 2432 30372 001 61 942 478 4213 49684 001 61 811 478 4213 49746 001 001 780 512 4265 49746 001 71 7 3500 001 61 975 016 173 2400 001 62 967 026 236 3186 001 63 960 016 224 4222 001 63 939 030 277 4153 001 63 930 138 996 14031 001 63 753 138 996 14011 001 001 717 161 1057 14011 001 74 8 1900 001 60 965 002 018 200 001 62 955 001 016 209 001 63 955 001 011 241 001 63 925 003 021 283 001 64 918 014 103 1286 001 64 690 014 103 1201 001 001 650 020 129 1201 001 86 100 7826 001 61 951 134 619 9336 001 62 940 135 3932 56195 001 63 950 030 650 14522 001 63 912 136 3953 56604 002 64 903 137 628 9326 002 65 39 010 001 001 001 001 00 250 3169 001 63 551 252 1675 51366 001 78 530 341 1802 50172 001 80 933 100 1532 36642 001 63 524 348 1846 53164 001 82 510 374 1845 51672 001 83 23 001 001 001 001 001 00 500 41394 007 64 98 466 5162 59087 007 92 89 594 5514 58277 007 93 862 619 3577 49804 007 67 77 583 5565 59642 007 94 71 618 5680 57652 007 95 15 007 001 007 007 007 00 Table 3 Computing nondeterministic patrolling strategy open perimetral settings number candidate best responses basic case reduc tion dom case dominated strategies removed Number vertices n 10 20 30 40 60 80 100 130 160 200 Percentage targetsvertices δ 10 basic 10 40 90 160 360 640 1000 1690 2560 4000 dom 2 2 34 28 5 6 56 118 66 62 20 basic 20 80 180 320 720 1280 2000 3380 5120 8000 dom 2 32 44 54 7 62 58 72 84 88 30 basic 30 120 270 480 1080 1920 3000 5070 7680 12000 dom 38 4 4 52 7 86 94 78 74 74 40 basic 40 160 360 640 1440 2560 4000 6760 10240 16000 dom 4 48 528 7 78 82 86 9 112 10 50 basic 50 200 450 800 1800 3200 5000 8450 12800 20000 dom 46 6 58 92 76 8 92 92 9 118 118 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 Table 4 Computing nondeterministic patrolling strategy open perimetral settings number remaining vertices application lossless abstractions Number vertices n 10 20 30 40 60 80 100 130 160 200 Percentage targetsvertices δ 10 5 6 66 72 86 98 102 104 112 11 20 5 64 72 82 98 92 94 108 128 1275 30 52 66 78 88 102 11 124 114 118 115 40 52 64 8 96 106 118 118 122 142 144 50 56 72 84 104 102 11 122 126 13 154 Table 5 Computing nondeterministic patrolling strategy open perimetral settings computational times standard deviations parentheses zerosum line generalsum line settings Number vertices n 10 20 30 40 60 80 100 130 basic dom lossless basic dom lossless basic dom lossless basic dom lossless basic dom lossless basic dom dom lossless basic dom lossless basic dom lossless Percentage targetsvertices δ 10 036 01 344 15 005 00 012 00 008 00 011 00 58634 12 23018 1502 029 01 061 02 012 00 022 00 12224 24 11731 1331 169 15 582 07 019 01 071 02 161414 315 494 11 1392 24 036 01 101 02 3066 18 15330 261 067 01 335 05 4743 21 25082 301 163 03 972 14 10025 36 56812 694 732 06 4099 87 432 05 5088 82 20 039 02 751 12 005 00 016 00 008 00 015 00 2355 59 1899 393 059 02 198 06 015 00 051 00 50668 259 147 17 701 13 023 01 104 03 513 19 2818 39 044 01 237 05 2523 18 17661 302 122 03 861 10 5468 24 34163 531 264 07 1687 26 12008 41 70142 1007 434 07 2517 66 1179 30 9047 145 30 048 02 1501 24 007 00 029 00 009 00 036 01 4645 20 5782 963 039 03 165 07 015 00 059 01 1304 516 431 36 1664 42 032 01 152 07 610 21 3198 41 080 02 419 09 4324 20 30268 452 177 03 1300 24 8351 29 73142 852 457 08 3952 57 1023 19 9616 115 2409 25 19031 266 40 057 02 2287 30 008 00 030 01 010 00 043 01 7738 24 12531 1283 063 03 289 09 018 00 082 01 1941 638 259 44 1461 53 036 01 184 08 585 25 4051 47 102 02 721 10 2283 25 17807 546 310 09 2421 42 10374 70 86742 931 766 19 6642 92 1489 25 12862 163 3925 37 36612 401 50 077 02 3901 46 008 00 037 01 011 00 057 02 15099 84 33912 4142 051 04 313 09 021 01 143 03 2336 679 269 57 1591 55 042 01 232 09 888 28 7914 115 161 03 1490 27 3757 29 28553 604 448 13 3384 63 1055 25 8909 136 2403 29 23063 427 5925 36 56972 2376 160 basic N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 119 Table 5 continued Number vertices n 200 dom lossless basic dom lossless Percentage targetsvertices δ 10 915 21 6052 85 2211 5 14212 212 20 30 2878 73 21350 325 6724 9 56125 702 5125 76 38009 562 11720 10 85629 991 40 9547 11 1067 156 22073 21 22018 583 50 12995 15 1201 137 36706 51 4118 973 Table 6 Computing nondeterministic patrolling strategy closed perimetral settings number candidate best responses basic case reduc tion dom case dominated strategies removed abstractions lossy abstractions Number vertices n 16 20 24 28 32 44 64 84 Percentage targetsvertices δ 10 basic 32 14 40 16 96 15 112 27 128 18 194 44 66 112 dom 22 10 25 18 32 17 55 22 78 18 117 38 49 76 20 basic 64 21 80 36 116 44 157 56 205 72 388 96 208 391 dom 40 17 38 20 62 27 99 40 118 45 212 66 126 192 lossy lossy lossy lossy lossy lossy lossy lossy 30 basic 77 44 120 49 173 70 236 117 308 126 580 221 418 725 dom 46 26 83 34 114 48 154 70 190 84 300 123 238 432 40 basic 103 63 160 80 231 117 314 156 410 204 357 800 dom 55 37 102 52 121 69 195 94 204 113 209 309 50 basic 178 80 200 120 178 160 392 224 512 288 528 1088 dom 78 49 121 76 153 92 206 118 296 165 273 556 Table 7 Computing nondeterministic patrolling strategy closed perimetral settings number remaining vertices application lossy abstractions Vertices n 16 20 24 28 32 44 64 84 Percentage targetsvertices δ 10 7 78 6 9 6 116 114 14 20 72 9 88 108 118 12 16 23 30 88 82 104 128 142 174 224 298 40 106 104 132 132 176 212 308 50 10 124 144 162 182 24 342 Table 8 Computing nondeterministic patrolling strategy closed perimetral settings computational times standard deviations parentheses zerosum line generalsum line settings Number vertices n 16 Percentage targetsvertices δ 10 20 30 40 50 basic dom 587 15 19853 2537 332 13 7304 1229 583 25 38675 4273 379 22 15524 2064 792 36 60947 12034 382 14 17804 3572 1285 46 1324 30008 640 27 35800 8011 1504 51 1929 54699 737 30 57486 13073 continued page 120 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 Table 8 continued Number vertices n 20 24 28 32 44 64 84 Percentage targetsvertices δ 10 158 04 1652 375 1489 4 1190 16763 845 30 38012 9881 052 025 942 243 6543 35 6280 1263 3971 21 2496 762 056 02 957 209 8546 01 9562 3712 15067 41 8421 2536 037 01 866 233 24638 92 31488 10535 13046 84 10140 3261 025 01 452 131 2390 68 79468 536 474 21 18023 6511 1209 39 57262 20087 6922 22 4862 1555 20 025 01 425 217 2007 9 1725 23841 596 30 20754 5024 025 01 477 100 8288 43 9421 3172 3303 16 1875 540 038 02 1158 372 32544 20 51938 27261 18801 101 18225 5116 227 13 9172 1985 70617 278 34672 130 47420 17822 257 17 11531 3371 3306 964 3076 1029 635 41 38762 12851 20826 100 2654 68699 1381 546 lossy basic dom lossy basic dom lossy basic dom lossy basic dom lossy basic dom lossy basic dom lossy basic dom lossy 30 037 02 962 563 3981 10 4521 55098 3741 17 3007 78421 064 03 2153 409 21400 51 37009 9730 13796 30 14422 5927 194 11 9311 2582 63750 12 33047 176 48722 17428 1169 36 78872 20457 1774 392 55553 270 1552 59 1352 27367 2691 1122 12051 65 86259 166 3261 853 40 195 07 7215 1080 7007 25 11315 2452 4055 20 3952 99655 207 16 10057 3372 33217 111 73962 23662 11186 35 13526 4227 628 41 43373 10237 106462 14 46869 152 78625 22945 1699 21 1567 30863 1885 413 67356 339 6139 56 6725 2887 51558 143 2319 411 50 144 08 7056 1167 9361 26 18362 4873 5487 21 6426 1652 551 29 41900 16752 40666 101 21953 53 30624 10826 1117 35 1042 296 1178 22 49490 282 3739 41 4412 1037 2319 415 1474 460 15857 65 26735 8113 1494 981 3276 534 Table 9 Computing nondeterministic patrolling strategy arbitrary settings number candidate best responses basic case reduction dom case dominated strategies removed abstractions lossy abstractions Number vertices n 50 75 100 133 166 Percentage targetsvertices δ 5 basic 150 75 300 136 143 232 413 dom 22 8 43 18 49 65 79 10 basic 250 110 600 272 332 468 663 dom 81 26 91 53 102 160 195 20 basic 500 202 420 560 702 dom 237 88 158 247 303 30 basic 750 345 638 870 lossy lossy lossy lossy lossy dom 321 163 262 271 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 121 Table 10 Computing nondeterministic patrolling strategy arbitrary settings number remaining vertices application lossless lossy abstractions Number vertices n 50 75 100 133 166 lossless lossy lossless lossy lossless lossy lossless lossy lossless lossy Percentage targetsvertices δ 5 3625 2525 5175 3433 2867 3433 5766 10 4025 2175 535 34 3325 355 39 20 40 2025 2825 28 27 30 42 2325 29 29 Table 11 Computing nondeterministic patrolling strategy arbitrary settings computational times standard deviations parentheses zerosum line generalsum line settings Number vertices n 50 75 100 133 166 lossless lossy lossless lossy lossless lossy lossless lossy lossless lossy Percentage targetsvertices δ 5 1034 68 26913 3512 032 014 256 053 31114 28554 13624 4852 053 03 958 128 679 347 33271 4931 11562 2972 7435 994 62582 29656 49055 11462 10 21097 18457 15084 2367 139 132 3361 459 4615 6421 5377 4704 2849 771 1017 88257 3710 938 11442 1318 20 2923 14798 11005 13767 9415 1089 1219 6953 5704 2741 4375 1399 30 6972 4068 1073 1310 6351 2898 4045 1644 Table 12 Defenders expected utility ﬁrstorder Markovian strategies lossless lossy abstractions different zerosum parentheses generalsum settings nonﬁrstorder Markovian deterministic strategy value 1 Vertices n 40 50 60 75 References lossless lossy lossless lossy lossless lossy lossless lossy Percentage targetsvertices δ 5 0997 0998 0888 0902 0997 0994 0848 0899 0997 0998 0940 0952 0991 0989 0924 0953 10 0998 0998 0920 0937 0998 0999 0951 0976 0998 0994 0961 0983 0999 0999 0977 0982 20 0999 0999 0970 0965 0999 0999 0990 0992 0999 0999 0981 0996 0999 0998 0994 0997 1 M Adler H Räcke N Sivadasan C Sohler B Vöcking Randomized pursuitevasion graphs Combinatorics Probability Computing 12 2003 225244 2 N Agmon On events multirobot patrol adversarial environments Proceedings International Joint Conference Autonomous Agents MultiAgent Systems AAMAS 2010 pp 591598 122 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 3 N Agmon S Kraus G Kaminka Multirobot perimeter patrol adversarial settings Proceedings IEEE International Conference Robotics Automation ICRA 2008 pp 23392345 4 N Agmon S Kraus G Kaminka Uncertainties adversarial patrol Proceedings International Joint Conference Autonomous Agents MultiAgent Systems AAMAS 2009 pp 12671268 5 N Agmon S Kraus G Kaminka V Sadov Adversarial uncertainty multirobot patrol Proceedings International Joint Conference Artiﬁcial Intelligence IJCAI 2009 pp 18111817 6 N Agmon V Sadov G Kaminka S Kraus The impact adversarial knowledge adversarial planning perimeter patrol Proceedings International Joint Conference Autonomous Agents MultiAgent Systems AAMAS 2008 pp 5562 7 A Almeida G Ramalho H Santana P Tedesco T Menezes V Corruble Y Chevaleyre Recent advances multiagent patrolling Proceedings Brazilian Symposium Artiﬁcial Intelligence SBIA 2004 pp 126138 8 S Alpen Inﬁltration games arbitrary graphs Journal Mathematical Analysis Applications 163 1 1992 286288 9 F Amigoni N Gatti A Ippedico A gametheoretic approach determining eﬃcient patrolling strategies mobile robots Proceedings IEEEWICACM International Conference Agent Intelligent Technology IAT Sydney Australia 2008 pp 500503 10 N Basilico N Gatti Automated abstractions patrolling security games Proceedings National Conference Artiﬁcial Intelligence AAAI 2011 pp 10961099 11 N Basilico N Gatti F Amigoni Developing deterministic patrolling strategy security agents Proceedings IEEEWICACM International Conference Intelligent Agent Technology IAT 2009 pp 565572 12 N Basilico N Gatti F Amigoni Leaderfollower strategies robotic patrolling environments arbitrary topologies Proceedings International Joint Conference Autonomous Agents MultiAgent Systems AAMAS 2009 pp 5764 13 N Basilico N Gatti T Rossi S Ceppi F Amigoni Extending algorithms mobile robot patrolling presence adversaries realistic settings Proceedings IEEEWICACM International Conference Intelligent Agent Technology IAT 2009 pp 557564 14 N Basilico N Gatti P Testa Talos A tool designing security applications mobile patrolling robots Proceedings International Joint Conference Autonomous Agents MultiAgent Systems AAMAS 2011 pp 13171318 15 N Basilico N Gatti F Villa Asynchronous multirobot patrolling intrusion arbitrary topologies Proceedings National Conference Artiﬁcial Intelligence AAAI 2010 pp 12241229 16 N Basilico D Rossignoli N Gatti F Amigoni A gametheoretical model applied active patrolling camera Proceedings International Conference Emerging Security Technologies EST 2010 pp 130135 17 M Bazaraa H Sherali C Shetty Nonlinear Programming Theory Algorithms Wiley 2006 18 Y Chevaleyre Theoretical analysis multiagent patrolling problem Proceedings IEEEWICACM International Conference Agent Intelligent Technology IAT Beijing China 2004 pp 302308 19 N Christoﬁdes J Beasley The period routing problem Networks 14 2 1984 237256 20 V Conitzer T Sandholm Computing optimal strategy commit Proceedings ACM Conference Electronic Commerce EC 2006 pp 8290 21 D Draper AK Jónsson DP Clements D Joslin Cyclic scheduling Proceedings International Joint Conference Artiﬁcial Intelligence IJCAI 1999 pp 10161021 22 Y Elmaliach N Agmon G Kaminka Multirobot area patrol frequency constraints Proceedings IEEE International Conference Robotics Automation ICRA 2007 pp 385390 23 Y Elmaliach A Shiloni G Kaminka A realistic model frequencybased multirobot polyline patrolling Proceedings International Joint Conference Autonomous Agents MultiAgent Systems AAMAS 2008 pp 6370 24 MM Flood The hide seek game von Neumann Management Science 18 5 1972 107109 25 R Fourer DM Gay BW Kernighan A modeling language mathematical programming Management Science 36 5 1990 519554 26 P Francis K Smilowitz M Tzur The period vehicle routing problem service choice Transportation Science 40 4 2006 439454 27 D Fudenberg J Tirole Game Theory The MIT Press 1991 28 S Gal Search Games Academic Press 1980 29 N Gatti Game theoretical insights strategic patrolling Model algorithm normal form Proceedings European Conference Artiﬁcial Intelligence ECAI 2008 pp 403407 30 A Gilpin T Sandholm Lossless abstraction imperfect information games Journal ACM 54 5 2007 31 A Gilpin T Sandholm TB Sørensen A headsup nolimit Texas holdem poker player Discretized betting models automatically generated equilibriumﬁnding programs Proceedings International Joint Conference Autonomous Agents MultiAgent Systems AAMAS 2008 pp 911918 32 A Girard A Howell JK Hedrick Border patrol surveillance missions multiple unmanned air vehicles Proceedings IEEE Conference Decision Control CDC 2004 pp 620625 33 A Glad O Simonin O Buffet F Charpillet Theoretical study antbased algorithms multiagent patrolling Proceedings European Conference Artiﬁcial Intelligence ECAI 2008 pp 626630 34 D Gulczynski B Golden E Wasil The period vehicle routing problem New heuristics realworld variants Transportation Research Part E Logistics Transportation Review 47 5 2011 648668 35 Y Guo L Parker R Madhavan Collaborative robots infrastructure security applications Mobile Robots The Evolutionary Approach Book Series Intelligent Systems Engineering vol 50 2007 pp 185200 36 A Howard N Roy The robotics data set repository radish 2003 37 ILOG CP httpwwwilogcomproductscp 38 V Isler S Kannan S Khanna Randomized pursuitevasion polygonal environment IEEE Transactions Robotics 5 21 2005 864875 39 M Jain J Pita M Tambe F Ordóñez P Paruchuri S Kraus Bayesian Stackelberg games application security Los Angeles International Airport SIGecom Exchanges 7 2 2008 40 C Kiekintveld M Jain J Tsai J Pita F Ordóñez M Tambe Computing optimal randomized resource allocations massive security games Proceedings International Joint Conference Autonomous Agents MultiAgent Systems AAMAS 2009 pp 689696 41 A Kolen A Kan H Trienekens Vehicle routing time windows Operations Research 35 2 1987 266273 42 D Koller N Megiddo B von Stengel Eﬃcient computation equilibria extensive twoperson games Games Economic Behavior 14 2 1996 220246 43 A Kolling S Carpin Extracting surveillance graphs robot maps Proceedings IEEE International Conference Intelligent Robots Systems IROS 2008 pp 23232328 44 D Kreps R Wilson Sequential equilibria Econometrica 50 4 1982 863894 45 J Letchford V Conitzer Computing optimal strategies commit extensiveform games Proceedings ACM Conference Electronic Commerce EC 2010 pp 8392 46 A Machado G Ramalho JD Zucker A Drogoul Multiagent patrolling An empirical analysis alternative architectures Proceedings Third International Workshop MultiAgentBased Simulation MABS2002 vol 2581 2003 pp 155170 N Basilico et al Artiﬁcial Intelligence 184185 2012 78123 123 47 JS Marier C Besse B Chaibdraa Solving continuous time multiagent patrol problem Proceedings IEEE International Conference Robotics Automation ICRA 2010 pp 941946 48 L MartinsFilho E Macau Patrol mobile robots chaotic trajectories Mathematical Problems Engineering Hindawi 2007 49 C Papadimitriou Computational Complexity AddisonWesley 1993 50 P Paruchuri J Pearce J Marecki M Tambe F Ordonez S Kraus Playing games security An eﬃcient exact algorithm solving Bayesian Stackel berg games Proceedings International Joint Conference Autonomous Agents MultiAgent Systems AAMAS 2008 pp 895902 51 P Paruchuri J Pearce M Tambe F Ordonez S Kraus An eﬃcient heuristic approach security multiple adversaries Proceedings International Joint Conference Autonomous Agents MultiAgent Systems AAMAS 2007 pp 311318 52 J Pita M Jain J Marecki F Ordonez C Portway M Tambe C Western P Paruchuri S Kraus Deployed ARMOR protection The application game theoretic model security Los Angeles International Airport Proceedings International Joint Conference Autonomous Agents MultiAgent Systems AAMAS 2010 pp 125132 53 B Raa E Aghezzaf A practical solution approach cyclic inventory routing problem European Journal Operational Research 192 2 2009 429441 54 S Ruan C Meirina F Yu K Pattipati R Popp Patrolling stochastic environment Proceeding International Command Control Research Technology Symposium CCRTS 2005 55 A Rubinstein Perfect equilibrium bargaining model Econometrica 50 1 1982 97109 56 W Ruckle R Fennel PT Holmes C Fennemore Ambushing random walk I Finite models Operations Research 24 1976 314324 57 S Russell P Norvig Artiﬁcial Intelligence A Modern Approach ed Prentice Hall 2010 58 T Sak J Wainer SK Goldenstein Probabilistic multiagent patrolling Proceedings Brazilian Symposium Artiﬁcial Intelligence SBIA 2008 pp 124133 59 H Santana G Ramalho V Corruble B Ratitch Multiagent patrolling reinforcement learning Proceedings Third International Joint Conference Autonomous Agents MultiAgent Systems AAMAS 2004 pp 11201127 60 Y Shoham K LeytonBrown Multiagent Systems Algorithmic Game Theoretic Logical Foundations Cambridge University Press 2008 61 Stanford Business Software Inc httpwwwsbsisoloptimizecom 62 J Tsai Z Yin JY Kwak D Kempe C Kiekintveld M Tambe How protect city Strategic security placement graphbased domains Proceed ings International Joint Conference Autonomous Agents MultiAgent Systems AAMAS 2010 pp 14531454 63 J Tsitsiklis Special cases traveling salesman repairman problems time windows Networks 22 3 1992 263282 64 B von Stengel S Zamir Leadership commitment mixed strategies CDAM Research Report LSECDAM200401 London School Economics 2004 65 A Wahsburn K Wood Twoperson zerosum games network interdiction Operations Research 43 2 1995 243251 66 V Yanovski I Wagner A Bruckstein A distributed ant algorithm eﬃciently patrolling network Algorithmica 37 2003 165186