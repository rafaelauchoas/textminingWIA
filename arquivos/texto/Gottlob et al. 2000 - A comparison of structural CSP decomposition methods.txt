Artiﬁcial Intelligence 124 2000 243282 A comparison structural CSP decomposition methods I Georg Gottlob Nicola Leone b Francesco Scarcello ccid3 Institut für Informationssysteme Technische Universität Wien A1040 Vienna Austria b Department Mathematics University Calabria I87036 Rende CS Italy c Dipartimento di Elettronica Informatica e Sistemistica University Calabria I87036 Rende CS Italy Received 25 May 2000 Abstract We compare tractable classes constraint satisfaction problems CSPs We ﬁrst uniform presentation major structural CSP decomposition methods We introduce new class tractable CSPs based concept hypertree decomposition recently developed Database Theory analyze cost solving CSPs having bounded hypertreewidth We provide framework comparing parametric decompositionbased methods according tractability criteria compare relevant methods We method hypertree decomposition dominates case general CSPs CSPs unbounded arity We comparisons restricted case binary CSPs Finally consider application decomposition methods dual graph hypergraph In fact technique exploit binary decomposition methods nonbinary CSPs However case hypertree decomposition method turns general method cid211 2000 Elsevier Science BV All rights reserved Keywords Constraint satisfaction Decomposition methods Hypergraphs Tractable cases Degree cyclicity Treewidth Hypertree width Treeclustering Cycle cutsets Biconnected components I Part work published preliminary form Proceedings Sixteenth International Joint Conference Artiﬁcial Intelligence IJCAI99 Stockholm Sweden 1999 Corresponding author Email addresses gottlobdbaituwienacat G Gottlob leoneunicalat N Leone scarcellodeisunicalit F Scarcello 0004370200 matter cid211 PII S 0 0 0 4 3 7 0 2 0 0 0 0 0 7 8 3 2000 Elsevier Science BV All rights reserved 244 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 1 Introduction summary results The efﬁcient solution Constraint Satisfaction Problems CSPs years important goal AI research Constraint satisfaction central issue problem solving impressive spectrum applications 23 A constraint Si Ri consists constraint scope Si list variables associated constraint relation ri containing legal combinations values A CSP consists set fS1 r1 S2 r2 Sq rq g constraints variables overlap precise deﬁnition Section 2 A solution CSP consists assignment values variables constraints simultaneously satisﬁed By solving CSP mean determining problem solution checking constraint satisﬁability compute solution Constraint satisﬁability equivalent database problems 471821 problem conjunctive query containment 21 problem evaluating Boolean conjunctive queries relational database 22 discussion equivalent problems 15 Actually evaluating Boolean conjunctive queries deciding constraint satisfaction recast fundamental algebraic problem deciding given ﬁnite relational structures A B exists homomorphism f A B 21 Constraint satisﬁability general form known NPhard Much effort spent AI database communities identify tractable classes CSPs Both communities obtained deep useful results direction The successful approaches obtain tractable CSP classes divided main groups 23 cid15 Tractability restricted structure This includes tractable classes CSPs identiﬁed solely base structure constraint scopes fS1 Sq g independently actual constraint relations r1 rq cid15 Tractability restricted constraint relations This includes classes tractable particular properties constraint relations r1 rq This paper deals tractability restricted structure There papers proposing polynomially tractable classes constraints based different structural properties constraint scopes Usually properties formalized graph theoretic properties constraint graph case binary constraints constraint hypergraph general case The constraint hypergraph CSP hypergraph vertices variables CSP hyperedges sets variables occur constraint scope It known CSPs acyclic constraint hypergraphs polynomially solvable 7 The known structural properties lead tractable CSP classes explicitly implicitly based generalization acyclicity In particular method deﬁnes concept width interpreted measure cyclicity underlying constraint hypergraph ﬁxed width k CSPs width bounded k solvable polynomial time There plethora proposed methods G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 245 based different measures cyclicity little known far relative strength different methods A comparison main methods called In paper establish framework uniformly deﬁning comparing structural CSP decomposition methods Within framework compare main methods published far In particular deal following methods reviewed Section 4 Cycle Cutset 7 Tree Clustering 9 Treewidth 24 Hinge Decomposition 1819 Hinge Decomposition Tree Clustering 18 Cycle Hypercutset Hypertree Decomposition 16 We ﬁrst point considered CSPdecomposition method D gives rise inﬁnite hierarchy CSP classes CD 1 cid26 CD 2 cid26 cid1 cid1 cid1 cid26 CD cid1 cid1 cid1 CSPs class CD k solvable time bounded polynomial In particular CSP C belonging class CD k exists decomposition width 6 k data structure witnessing C transformed polynomial time equivalent acyclic CSP For CSPdecomposition method D class CD k tractable class CSPs following important tasks tractable 1 Checking membership CSP C CD k computing corresponding CSP decomposition C 2 Solving CSP C In turn task usually consists following subtasks cid15 Transforming C polynomial time equivalent acyclic CSP C0 cid15 solving C0 polynomial time wellknown algorithms In paper compare methods tractable sense In fact methods solving CSPs reported literature tasks 1 2 tractable NPhard For instance task 1 NPcomplete method bounded query decompositions deﬁned Chekuri Rajaraman 6 16 NPcompleteness proof task 2 intractable early method proposed Freuder 1011 Section 4 NPcompleteness proof For pair decomposition methods D1 D2 deﬁne following comparison criteria cid15 Generalization D2 generalizes D1 exists constant cid14 level k CD1 k cid18 CD2 k C cid14 holds In practical terms means class C constraints tractable according method D1 tractable according D2 Moreover worst case runtime upper bound guaranteed method D2 polynomially bounded worst case upper bound guaranteed method D1 precisely overhead D2 respect D1 ncid14 n size input CSP Note pairs methods compared paper cid14 1 This means signiﬁcant loss efﬁciency replacing method D1 general method D2 cid15 Beating D2 beats D1 exists integer k CD2 k contained class CD1 m m Intuitively means classes problems 246 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 tractable according D2 according D1 For classes D2 better D1 cid15 Strong generalization D2 strongly generalizes D1 D2 generalizes D1 D2 beats D1 This means D2 powerful method given D1 guarantees polynomial runtime constraint solving D2 guarantees tractable constraint solving classes constraints solved polynomial time D2 tractable according D1 cid15 Equivalence D1 D2 equivalent D1 generalizes D2 D2 generalizes D1 Intuitively means methods polynomial classes CSPs differ signiﬁcantly In paper completely classify abovementioned decomposition methods according criteria The result classiﬁcation given Fig 1 This ﬁgure addition mentions method cid3 known equivalent tree clustering method 9 An arrow method D1 method D2 Fig 1 indicates D2 strongly general D1 Since relationship transitive directed path methods indicates relationship The picture complete sense directed path method D1 method D2 D2 strongly generalizes D1 On hand methods related directed path incomparable respect generalization relation methods beats Fig 1 shows method Hypertree Decompositions dominates methods strongly general decomposition methods This method originally introduced database ﬁeld identifying large class tractable conjunctive queries 16 In paper adapt notion setting constraints constraints bounded hypertreewidth polynomially solvable providing Fig 1 Constraint tractability hierarchy G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 247 precise complexity analysis In particular CSPs hypertree width k solved time OnkC1 cid2 log n Hypertree width measure cyclicity speciﬁcally designed hypergraphs It interesting situation changes special case graphs binary CSPs To answer question compared considered method binary case Section 8 Fig 25 Again turns method Hypertree Decomposition dominates time slightly weaker sense explained Section 8 It recently asked 1 method Hypertree Decompositions explained terms simpler wellknown graph cyclicity measures To hypergraph H deﬁnes dual graph H taking vertices hyperedges H connecting vertices edge corresponding hyperedges intersect The question arose hypertree width hypergraph coincides treewidth TCLUSTER width dual graph H See Section 9 deﬁnitions We study interesting question Section 9 negative answer More generally method hypertree decompositions strongly generalizes relevant binary methods based dual graph given hypergraph This paper organized follows Section 2 contains preliminaries CSPs In Section 3 discuss tractability CSPs restricted structure In Section 4 review wellknown CSP decomposition methods In Section 5 new method hypertree decompositions analyze cost solving CSPs having bounded hypertree width In Section 6 explain comparison criteria Section 7 present comparison results general CSPs The case binary CSPs brieﬂy discussed Section 8 In Section 9 consider application binary methods dual graph hypergraph Finally Section 10 draw conclusions 2 Constraint satisfaction problems An instance constraint satisfaction problem CSP constraint network triple I D Var U C Var ﬁnite set variables U ﬁnite domain values C D fC1 C2 Cq g ﬁnite set constraints Each constraint Ci pair Si ri Si list variables length mi called constraint scope ri mi ary relation U called constraint relation The tuples ri indicate allowed combinations simultaneous values variables Si A solution CSP instance substitution Var U 1 6 6 q Si 2 ri The problem deciding CSP instance solution called constraint satisﬁability CS This deﬁnition taken verbatim 20 Many wellknown problems Computer Science Mathematics formulated CSPs Example 1 The famous graph threecolorability 3COL problem deciding vertices graph G D Vertices Edges colored colors red green blue edge links vertices having color formulated 1 Rina Dechter personal communication IJCAI99 248 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 Fig 2 The graph G1 Fig 3 A crossword puzzle follows CSP The set Var contains variable Xv vertex v 2 Vertices For edge e D fv wg 2 Edges v w according ordering Vertices set C contains constraint Ce D Se Se D Xv Xw relation r6D consisting pairs different colors r6D D fhred greeni hred bluei hgreen redi hgreen bluei hblue redi hblue greenig For instance set constraints graph G1 Fig 2 following C D fA B r6D A D r6D A G r6D B C r6D G H r6Dg Example 2 Fig 3 shows combinatorial crossword puzzle typical CSP 7 23 A set legal words associated horizontal vertical array white boxes delimited black boxes A solution puzzle assignment letter white box white array assigned word set legal words This problem represented follows There variable Xi white box constraint C array D white boxes For simplicity write index variable Xi The scope C list variables corre sponding white boxes sequence D relation C contains legal words D For example Fig 3 C1H D 1 2 3 4 5 r1H C8H D 8 9 10 r8H C11H D 11 12 13 r11H C20H D 20 21 22 23 24 25 26 r20H C1V D 1 7 11 16 20 r1V C5V D 5 8 14 18 24 r5V C6V D 6 10 15 19 26 r6V C13V D 13 17 22 r13V Subscripts H V stand Horizontal Ver tical respectively resembling usual naming deﬁnitions crossword puzzles A possible instance relation r1H fhh o u s ei hc o n si hb l o c kig G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 249 It wellknown easy Constraint Satisﬁability NPcomplete problem Membership NP obvious NPhardness follows immediately NP hardness 3COL 13 3 Tractable classes CSPs Much effort spent AI database communities indentify tractable classes CSPs Both communities obtained deep useful results direction The successful approaches obtain tractable CSP classes divided main groups 23 1 Tractability restricted structure This includes tractable classes CSPs identiﬁed solely base structure constraint scopes fS1 Sq g independently actual constraint relations r1 rq 2 Tractability restricted constraints This includes classes tractable particular properties constraint relations r1 rq The present paper deals tractability restricted structure The structure CSP best represented associated hypergraph corresponding primal graph deﬁned follows To CSP instance I D Var U C associate hypergraph HI D V H V D Var H D fvarS j C D S r 2 Cg varS denotes set variables scope S constraint C Fig 4 shows hypergraph Hcp associated crossword puzzle Example 2 Since paper deal hypergraphs corresponding CSPs instances vertices hypergraph H D V H viewed variables constraint satisfaction problem Thus use term variable synonym vertex referring elements V Moreover hypergraph H D V H varH edgesH denote sets V H respectively Let HI D V H constraint hypergraph CSP instance I The primal graph I graph G D V E having set variables vertices HI edge connecting pair variables X Y 2 V fX Y g cid18 h h 2 H Fig 4 Hypergraph Hcp crossword puzzle Example 2 250 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 Note constraints CSP binary associated hypergraph identical primal graph The basic fundamental structural property considered context CSPs conjunctive database queries acyclicity It recognized independently AI database theory acyclic CSPs polynomially solvable A CSP I acyclic primal graph G chordal cycle length greater 3 chord set maximal cliques coincide edgesHI 2 A join tree JT H hypergraph H tree vertices edges H variable X 2 V occurs edges A1 A2 H A1 A2 connected JT H X occurs vertex unique path linking A1 A2 JT H In words set vertices X occurs induces connected subtree JT H We refer condition Connectedness Condition join trees Acyclic hypergraphs characterized terms join trees A hypergraph H acyclic iff join tree 2322 There exist equivalent characterizations acyclic hypergraphs 21422 Checking satisﬁability acyclic CSPs equivalently evaluating acyclic conjunctive queries tractable highly parallelizable In fact shown 15 problem complete complexity class LOGCFL low class contained parallel classes AC1 NC2 Many CSPs arising practice acyclic sense close acyclic CSPs In fact hypergraphs associated naturally arising CSPs contain cycles small cycles transformed acyclic CSPs simple operations lumping small groups vertices Consequently CSP research AI database theory concentrated identifying deﬁning studying suitable classes nearly acyclic CSPs equivalently decomposition methods techniques decomposing cyclic CSPs acyclic CSPs 723 4 Decomposition methods In order study compare decomposition methods ﬁnd useful S introduce general formal framework notion Let H hypergraph For set edges H 0 cid18 edgesH let varH 0 D h2H 0 h Without loss generality assume varH D varH variable varH occurs edge H hypergraph simply represented set edges Moreover assume loss generality hypergraphs consideration connected primal graph consists single connected component reduced hyperedge contained hyperedge All deﬁnitions results easily extend general hypergraphs Let HS set reduced connected hypergraphs A decomposition method short DM D associates hypergraph H 2 HS parameter DwidthH called D width H The decomposition method D ensures ﬁxed k CSP instance I hypergraph HI Dwidth 6 k polynomially solvable solvable pkI k D OkI kO1 time kI k denotes size I For CSP instance I size I G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 251 deﬁned standard way number bits needed encoding I listing constraint I constraint scope tuples occurring constraint relation For k 0 ktractable class CD k D deﬁned CD k D fH j DwidthH 6 Thus CD k collects set CSP instances ﬁxed k polynomially solvable strategy D Typically polynomial pkI k depends parameter k In particular D exists function f k instance I 2 CD k transformed time OkI kOf k equivalent acyclic CSP instance It follows problems CD k polynomially solvable k1 CD k Note Every DM D complete respect HS HS D S deﬁnitions holds DwidthH D minfk j H 2 CD All tractable classes based restricted structure studied literature ﬁt framework We notion width deﬁned decomposition methods shall compare paper Detailed descriptions methods corresponding reference surveys subject 723 41 Biconnected components short BICOMP 11 Let G D V E graph A vertex p 2 V separating vertex G removing p G number connected components G increases A biconnected component G maximal set vertices C cid18 V subgraph G induced C connected remains connected onevertex removal separating vertices It known graph G compute linear time vertexlabeled tree hT cid31i labeling function cid31 bijective function associates vertex tree T set vertices S G S biconnected component G singleton containing separating vertex G There edge fp qg tree T cid31p biconnected component G cid31q contains separating vertex G belonging component cid31p cid31q cid18 cid31p holds We hT cid31i BICOMP decomposition G For hypergraph H BICOMP decomposition H BICOMP decomposition primal graph biconnected width H denoted BICOMPwidthH maximum number vertices biconnected components primal graph H Example 3 Fig 5a shows hypergraph Hb Fig 5b primal graph The vertices G C D E separating vertices primal graph Note maximum number vertices biconnected components 3 BICOMPwidthH D 3 Fig 6 shows BICOMP decomposition Hb 42 Tree clustering short TCLUSTER 9 The tree clustering method based triangulation algorithm transforms primal graph G D V E CSP instance I chordal graph G0 The acyclic 252 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 Fig 5 The hypergraph Hb b primal graph Fig 6 The BICOMP decomposition hypergraph Hb Example 3 hypergraph HG0 having set vertices G0 maximal cliques G0 hyperedges TCLUSTER decomposition HI Intuitively hyperedges HG0 build constraints acyclic CSP I 0 equivalent I The width TCLUSTER decomposition HG0 maximum cardinality hyperedges The treeclustering width short TCLUSTER width HI 1 HI acyclic hypergraph equal minimum width TCLUSTER decompositions HI Example 4 Consider hypergraph Ht c shown Fig 7a Fig 7b shows primal graph This graph triangulated shown Fig 8a If associate hyperedge maximal clique triangulated graph acyclic hypergraph shown Fig 8b This acyclic hypergraph TCLUSTER decomposition Ht c width 3 Moreover easy TCLUSTER decomposition Ht c having smaller width TCLUSTER width Ht c 3 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 253 Fig 7 The hypergraph Htc b primal graph Fig 8 A triangulation primal graph Htc b TCLUSTER decomposition Htc 43 Treewidth TREEWIDTH 24 A tree decomposition graph G D V E pair hT cid31i T D N F tree cid31 labeling function associating vertex p 2 N set vertices cid31p cid18 V following conditions satisﬁed 1 vertex b G exists p 2 N b 2 cid31p 2 edge fb dg 2 E exists p 2 N fb dg cid18 cid31p 3 vertex b G set fp 2 N j b 2 cid31pg induces connected subtree T The width tree decomposition hT cid31i maxp2N jcid31p cid0 1j The treewidth G minimum width tree decompositions The TREEWIDTH hypergraph H 1 H acyclic hypergraph equal treewidth primal graph As pointed TREEWIDTH TCLUSTER equivalent methods Example 5 Consider hypergraph Ht c Example 4 Fig 9 tree decomposition Ht c having width 2 It follows treewidth Ht c 2 hypergraphs having acyclic primal graphs treewidth 1 254 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 Fig 9 A tree decomposition hypergraph Htc Example 4 44 Hinge decompositions short HINGE 1819 Let H hypergraph H cid18 edgesH F cid18 edgesH cid0 H Then F called connected respect H edges e f 2 F exists sequence e1 en edges F e1 D e ii D 1 n cid0 1 ei eiC1 contained iii en D f S h2H h The maximal connected subsets edgesH cid0 H respect H called connected components H respect H It easy connected components H respect H form partition edgesH cid0 H Let H 2 HS let H edgesH proper subset edgesH containing edges Let C1 Cm connected components H respect H Then H hinge D 1 m exists edge hi 2 H varedgesCi varH cid18 hi A hinge minimal contain hinge A hinge decomposition H tree T following conditions hold 1 vertices T minimal hinges H 2 edge edgesH contained vertex T 3 adjacent vertices A B T share precisely edge L 2 edgesH L consists exactly variables shared A B L D varA varB 4 variables H shared vertices T entirely contained vertex connecting path T It shown 19 CSP instance I cardinality largest vertex hinge decomposition HI invariant HI equal cardinality largest minimal hinge HI This number called degree cyclicity HI We refer HINGE width HI Example 6 Consider CSP instance Ihg having following constraint scopes s1X1 X10 X11I s2X1 X2 X3I s3X1 X4I s4X3 X6I s5X4 X5 X6I s6X4 X7I s7X5 X8I s8X6 X9I s9X2 X3 X10 X11 Fig 10 shows corresponding hypergraph Hhg clearly cyclic The minimal hinges Hhg H1 D fs1 s2 s9g H2 D fs2 s3 s4 s5g H3 D fs5 s6g H4 D fs5 s7g G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 255 Fig 10 Hypergraph Hhg b hingetree decomposition Hhg H5 D fs5 s8g H6 D fs3 s6g H7 D fs4 s8g si denotes set variables occurring scope si 1 6 6 9 Since cardinality largest minimal hinge Hhg hinge H2 4 follows HINGE width Hhg 4 Fig 10b shows HINGE decomposition Hhg 45 Hinge decomposition C tree clustering short HINGETCLUSTER 18 It observed 18 minimal hinges hypergraph decomposed means triangulation technique abovedescribed treeclustering method This leads new decomposition method HINGETCLUSTER combines HINGE TCLUSTER formally deﬁned follows Let T D N E hinge tree hypergraph H For hinge H 2 N let wH minimum cardinality H TCLUSTER width hypergraph varH H The HINGETCLUSTER width H respect T maxH 2N fwH g A HINGETCLUSTER decomposition H respect T acyclic hypergraph H0 having set vertices H set edges obtained T H follows For hinge H 2 N wH D jH j H0 contains edge varH H0 contains edges TCLUSTER decomposition subhypergraph varH H having width wH The HINGETCLUSTER width H minimum HINGETCLUSTER width HINGETCLUSTER decompositions Example 7 Consider constraint scopes Example 6 hingetree decomposition hypergraph Hhg shown Fig 10b From hingetree decomposition construct HINGETCLUSTER decomposition H0 hg Hhg Consider subhypergraph varH1 H1 corresponding minimal hinge H1 occurring hingetree decomposition The primal graph hypergraph varH1 H1 clique containing vertices X1 X2 X3 X10 X11 easy TCLUSTER width hypergraph 5 However hinge H1 contains edges wH1 D 3 HINGETCLUSTER decomposition H0 hg contains edge fX1 X2 X3 X10 X11g variables occurring H1 A different situation concerns subhypergraph varH2 H2 corresponding minimal hinge H2 This hypergraph identical hypergraph Ht c Example 4 We 256 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 Fig 11 A HINGETCLUSTER decomposition hypergraph Hhg Example 6 observed Ht c TCLUSTER width 3 smaller jH2j D 4 wH2 D 3 holds This means case convenient decompose varH2 H2 TCLUSTER decomposition method HINGETCLUSTER decomposition H0 hg contains edges belonging TCLUSTER decomposition Ht c D varH2 H2 shown Fig 7 Similarly 2 f4 5 6g subhypergraphs varHi Hi corresponding hinges occurring hingetree decomposition hand acyclic hypergraphs Therefore wHi D 1 holds TCLUSTER width acyclic hypergraphs 1 The resulting HINGETCLUSTER decomposition H0 hg Hhg acyclic hypergraph shown Fig 11 The thickest edges ﬁgure come TCLUSTER decompo sition varH2 H2 Recall wH1 wH2 3 maximum value hinges occurring given HINGE decomposition Hhg Thus width H0 hg 3 easy verify HINGETCLUSTER decomposition having smaller width It follows HINGETCLUSTER width Hhg 3 46 Cycle cutset short CUTSET 7 A cycle cutset hypergraph H set S cid18 varH subgraph primal graph H vertexinduced varH cid0 S acyclic That deleting vertices S primal graph H acyclic The CUTSET width H 1 H acyclic minimum cardinality possible cycle cutsets Example 8 The hypergraph Hb shown Fig 5a CUTSET width 4 Indeed fG C D Eg cycle cutset hypergraph smaller set vertices allow break cycles primal graph Fig 5b As example consider hypergraph Ht c shown Fig 7 The CUTSET width Ht c 2 cycle cutset cardinality 1 cycle cutsets cardinality 2 set fX1 X4g G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 257 47 Cycle hypercutset short HYPERCUTSET This simple modiﬁcation CUTSET method cutset composed hyperedges vertices given hypergraph A cycle hypercutset hypergraph H set bH cid18 edgesH subhypergraph H induced varH cid0 var bH acyclic The HYPERCUTSET width H 1 H acyclic minimum cardinality possible cycle hypercutsets Example 9 The hypergraph Hb shown Fig 5a HYPERCUTSET width 2 Indeed set containing edges fF G Cg fC D Eg hypercutset hypergraph deleting edges acyclic Moreover deleting single edge achieve acyclicity Instead hypergraph Hhg shown Fig 10 HYPERCUTSET width 1 Indeed deleting Hhg edge fX4 X5 X6g acyclic hypergraph 48 Solving CSPs decomposition methods For decomposition methods D shown easy ﬁxed k given CSP instance I deciding hypergraph HI D widthHI k feasible polynomial time solving CSPs associated hypergraph width k polynomial time In particular D consists phases Given CSP instance I 1 kbounded D width w HI corresponding decomposition computed 2 exploiting decomposition I solved time OnwC1 log n n size I plus size given decomposition methods phase consists solution acyclic CSP instance equivalent I Actually methods possible decompositions suitable forms redundancies Thus cost reduces OkI kwC1 log kI k depends CSP instance depend size decomposition For detailed analysis Section 5 study complexity evaluating boundedwidth CSPs according new decomposition method based hypertree decompositions 16 The cost ﬁrst phase independent constraint relations I fact OkHI kc1kCc2 kHI k size hypergraph HI c1 c2 constants relative method D 0 6 c1 c2 6 3 methods As usual size hypergraph HI deﬁned number bits needed encoding edges HI lists variables Clearly size HI smaller kI k encoding I includes encoding constraint relations Observe computing Dwidth w hypergraph general constant bound w 6 k NPhard methods feasible polynomial time HINGE linear time BICOMP Remark 10 The complexity bounds given functions total size CSP instance appropriate considered decomposition methods general CSP 258 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 instances Of course considers restricted cases CSP instances ﬁxed constant domain size ﬁner analysis useful In fact exploiting additional information accurate complexity bounds order choose method better tailored special case 49 Freuder width adaptive width Further interesting methods explicitly generalize acyclic hypergraphs based different notion width Freuder width 1011 If total ordering vertices graph G D V E width G deﬁned wG D maxv2V jffv wg 2 E w vgj The Freuder width G minimum widths possible total orderings V For ﬁxed constant k determined polynomial time graph Freuder width k The graph G1 shown Fig 2 Freuder width 3 This width obtained taking ordering b d e g h c f Freuder observed naturally arising CSPs low width 10 He showed CSP width k relations enjoy property k0consistency k0 k solved backtrackfree manner polynomial time 1011 Clearly consistency condition constraint relations satisﬁed deﬁne purely structural decomposition method based Freuder width In fact following theorem pinpoints structural property bounded Freuder width CSP problem easier Theorem 11 Constraint solvability remains NPcomplete restricted CSPs primal graph Freuder width bounded 4 Proof 3COL remains NPcomplete graphs degree 4 cf 13 Such graphs width 4 By encoding 3COL CSP given Section 2 theorem follows 2 One try enforce suitable level consistency constraint relations given CSP instance However algorithms increase level consistency data increase Freuder width instance 825 Of course think devising powerful procedure ﬁnd equivalent CSP instance Freuder width stays ﬁxed bound However theorem P 6D NP procedure run polynomial time Dechter Pearl subsequently introduced notion induced width wcid3 8 isroughlythe smallest Freuder width k graph G0 obtained triangulation methods primal graph G CSP G0 ensures k C 1consistency Graphs having induced width k characterized partial ktrees 12 equivalently graphs having treewidth k 1 It follows ﬁxed k checking wcid3 6 k feasible linear time 5 If wcid3 bounded constant CSP solvable polynomial time The approach CSPs based wcid3 referred wcid3 Tractability method 7 Note method implicitly based hypergraph acyclicity given triangulation methods enforce chordality resulting graph G0 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 259 acyclicity corresponding hypergraph It noted 79 cyclic CSP instance I TCLUSTER widthHI D wcid3HI C 1 5 Hypertree decompositions CSPs A new class tractable conjunctive database queries generalizes class acyclic queries recently identiﬁed 16 This class queries having boundedwidth hypertree decomposition 16 Deciding given query property feasible polynomial time highly parallelizable In section ﬁrst adapt notion hypertree decomposition previously deﬁned database context general framework hypergraphs Then employ notion order deﬁne new CSP decomposition method refer HYPERTREE A hypertree hypergraph H triple hT cid31 cid21i T D N E rooted tree cid31 cid21 labeling functions associate vertex p 2 N sets cid31p cid18 varH cid21p cid18 edgesH If T 0 D N 0 E0 subtree T deﬁne cid31T 0 D v2N 0 cid31v We denote set vertices N T verticesT root T rootT Moreover p 2 N Tp denotes subtree T rooted p S Deﬁnition 12 A hypertree decomposition hypergraph H hypertree HD D hT cid31 cid21i H satisﬁes following conditions 1 edge h 2 edgesH exists p 2 verticesT varh cid18 cid31p p covers h 2 variable Y 2 varH set fp 2 verticesT j Y 2 cid31pg induces connected subtree T 3 p 2 verticesT cid31p cid18 varcid21p 4 p 2 verticesT varcid21p cid31Tp cid18 cid31p Note inclusion condition 4 actually equality condition 3 implies reverse inclusion An edge h 2 edgesH strongly covered HD exists p 2 verticesT varh cid18 cid31p h 2 cid21p In case p strongly covers h A hypertree decomposition HD hypergraph H complete decomposition H edge H strongly covered HD The width hypertree decomposition hT cid31 cid21i maxp2verticesT jcid21pj The HYPERTREE width hwH H minimum width hypertree decomposi tions A cwidth hypertree decomposition H optimal c D hwH The acyclic hypergraphs precisely hypergraphs having hypertree width Indeed join tree acyclic hypergraph H trivially corresponds hypertree decomposition H width Furthermore hypergraph H0 hypertree decomposition width decomposition easily compute join tree H0 acyclic 16 Remark 13 From hypertree decomposition HD H easily compute complete hypertree decomposition H having width For missing edge h 260 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 choose vertex q T varh cid18 cid31q vertex exist condition 1 create new vertex p child q cid21p D h cid31p D varh Assuming use suitable data structures computation OkHkcid1kHDk time kHDk denotes size hypertree decomposition number bits needed encoding HD encoding rooted tree HD vertex v tree labelings cid31 cid21 v encoded list variables list edge identiﬁers respectively Intuitively H cyclic hypergraph cid31 labeling selects set variables ﬁxed order split cycles achieve acyclicity cid21p covers variables cid31p set edges Example 14 Fig 12 shows hypertree decomposition width 2 hypergraph Hcp crossword puzzle Example 2 Fig 4 Each box b ﬁgure represents vertex v hypertree decomposition Hcp The sets depicted box b labelings cid31v cid21v The hypergraph Hcp clearly cyclic hwHcp 1 acyclic hypergraphs hypertree width 1 Thus follows HYPERTREE width Hcp 2 Example 15 Consider following constraint scopes j J X Y X0 Y 0I aS X X0 C F I bS Y Y 0 C0 F 0I cC C0 ZI dX ZI eY ZI f F F 0 Z0I gX0 Z0I hY 0 Z0 Let H1 corresponding hypergraph Since H1 cyclic hwH1 1 holds Fig 13 shows complete hypertree decomposition H1 having width 2 hwH1 D 2 In order help intuition hypertree decomposition present alternative representation called hyperedge representation Also atom representation conjunctivequeries framework Fig 14 shows hyperedge representation hypertree decomposition HD1 H1 Each node p tree labeled set hyperedges representing cid21p cid31p set variables distinct _ Fig 12 A hypertree decomposition width 2 hypergraph Hcp Example 2 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 261 Fig 13 A 2width hypertree decomposition H1 Fig 14 Hyperedge representation hypertree decomposition HD5 appearing hyperedges Thus anonymous variable _ replaces variables varcid21p cid0 cid31p Using representation easily observe important feature hypertree decompositions Once hyperedge covered vertex decomposition tree subset variables freely order decompose remaining cycles hypergraph For instance variables hyperedge corresponding constraint j H1 jointly included root decomposition If forced variables vertex j occurs possible ﬁnd decomposition width 2 Indeed case choice hyperedges vertex yields hypertree violates connectedness condition variables condition 2 Deﬁnition 12 Let k ﬁxed positive integer We CSP instance I kbounded HYPERTREE width hwHI 6 k HI hypergraph associated I From results 16 follows kbounded hypertree width efﬁciently decidable hypertree decomposition width k efﬁciently computed 262 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 Fig 15 A hypertree decomposition hypergraph Hhg Example 6 Example 16 Consider CSP instance Ihg Example 6 Fig 15 shows hyperedge representation width 2 hypertree decomposition hypergraph Hhg It follows hwHhg D 2 Hhg cyclic Thus Ihg 2bounded HYPERTREE width generally kbounded HYPERTREE width integer k 1 Let H hypergraph let V cid18 varH set variables X Y 2 varH Then X TV Uadjacent Y exists edge h 2 edgesH fX Y g cid18 h cid0 V A TV Upath cid25 X Y sequence X D X0 X D Y variables Xi TV Uadjacent XiC1 2 T0 1U A set W cid18 varH variables TV Uconnected X Y 2 W TV Upath X Y A TV Ucomponent maximal TV Uconnected nonempty set variables W cid18 varH cid0 V For TV U component C let edgesC D fh 2 edgesH j h C 6D g Let HD D hT cid31 cid21i hypertree H For vertex v T use v synonym cid31v In particular TvUcomponent denotes Tcid31vUcomponent term TvUpath synonym Tcid31vUpath We introduce normal form hypertree decompositions Deﬁnition 17 16 A hypertree decomposition HD D hT cid31 cid21i hypergraph H normal form NF vertex r 2 verticesT child s r following conditions hold 1 exactly TrUcomponent Cr cid31Ts D Cr cid31s cid31r 2 cid31s Cr 6D Cr TrUcomponent satisfying condition 1 3 varcid21s cid31r cid18 cid31s Intuitively subtree rooted child node s node r normal form decomposition tree serves decompose precisely TrUcomponent Proposition 18 16 For kwidth hypertree decomposition hypergraph H exists kwidth hypertree decomposition H normal form This normal form theorem immediately entails optimal hypertree decomposition hypergraph H exists optimal hypertree decomposition H normal form G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 263 The fact redundancies occur hypertree decompositions normal form allows precise bound number vertices hypertree decompositions Lemma 19 Let HD D T cid31 cid21 hypertree decomposition normal form hypergraph H Moreover let n number vertices decomposition tree T m number strongly covered edges H HD Then n 6 m holds Proof Let s vertex T We variable X 2 cid31s respectively edge H cid18 cid31s ﬁrst covered s X 2 cid31verticesT cid0 verticesTp respectively H 6cid18 cid31verticesT cid0 verticesTp X respectively H said previously covered By condition 2 Deﬁnition 17 condition 2 Deﬁnition 12 follows vertex p T exists variable X varH ﬁrst covered p Since X 2 cid31p condition 3 Deﬁnition 12 follows edge H H X 2 H H 2 cid21p Moreover condition 4 Deﬁnition 12 follows variable belonging H covered vertex verticesT cid0 verticesTp ﬁrst covered p belongs cid31p Moreover HD normal form satisﬁes condition 3 Deﬁnition 17 varcid21s cid31r cid18 cid31s It follows fact previouslycovered variable Y belonging H belong cid31p Indeed variable X previously covered edge H previously covered exists vertex p0 subtree Tp H cid18 cid31p0 order fulﬁll condition 1 Deﬁnition 12 Assume variable Y 2 H belong cid31p Since H strongly covered p0 Y 2 cid31p0 Moreover choice Y variable previously covered respect p It follows Y violates connectedness condition contradiction Thus variables H belong cid31p Recall H 2 cid21p It follows edge H ﬁrst covered vertex p strongly covered p general vertex T ﬁrst strongly covers edge H This entails cardinality set vertices decomposition tree T HD equal number m strongly covered edges normal form hypertree decomposition HD H 2 A polynomial time algorithm optkdecomp ﬁxed k decides hypergraph kbounded hypertree width case computes optimal hypertree decomposition normal form described 17 As decomposition methods running time algorithm ﬁnd hypergraph decomposition exponential parameter k More precisely optkdecomp runs Om2kv2 time m v number edges number vertices H respectively We CSP instance I efﬁciently solvable given kbounded complete hypertreedecomposition HD HI To end deﬁne acyclic CSP instance equivalent I size polynomially bounded size I For vertex p decomposition HD deﬁne new constraint scope associated constraint relation projection cid31p join relations cid21p This way obtain jointree JT acyclic hypergraph Hcid3 Hcid3 corresponds new CSP instance I cid3 set constraint relations size Onk n input size 264 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 n D kI k k width hypertree decomposition HD By construction I cid3 acyclic CSP easily equivalent input CSP instance I Thus efﬁcient techniques available acyclic CSP instances 79 problem equivalent CSP 152126 employed evaluation I cid3 I Remark 20 According deﬁnition hypertree labeled rooted tree The rooting necessary technical reasons concerning notion hypertree decomposition impact actual evaluation given CSP instance In fact discussion describes compute hypertree decomposition CSP instance I join tree JT acyclic instance I cid3 equivalent I This construction use fact hypertree rooted Moreover note acyclic instance I cid3 evaluated rooting join tree JT vertex The following theorem provides detailed analysis complexity evaluating CSP given hypertree decomposition Theorem 21 Given CSP I kwidth hypertree decomposition HD0 HI normal form I solvable OkI kkC1 log kI k time Proof Let I CSP instance HD0 D T 0 cid31 0 cid210 kwidth hypertree decomposition HI normal form We proceed follows Step 1 We compute HD0 complete hypertree decomposition HD D T cid31 cid21 HI Step 2 We compute HD I acyclic instance I cid3 equivalent I described Step 3 We evaluate acyclic instance I cid3 employing efﬁcient technique solving acyclic CSPs Let m number edges HI The following statements hold Claim 1 The decomposition tree complete hypertree decomposition HD m vertices Proof This immediately follows construction HD Lemma 19 Step 1 add decomposition tree T edges HI strongly covered HD0 2 Claim 2 Step 1 feasible OkHI k2 Proof As observed Remark 13 computation takes OkHD0k cid1 kHI k time From Lemma 19 easily follows kHD0k OkkHI k D OkHI k number vertices T 0 number edges HI number edgelabels vertex T 0 bounded constant k 2 Claim 3 kI cid3k D OkI kk computing I cid3 I takes time OkI kk G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 265 Proof Consider constraint C D Sc rc acyclic instance I cid3 As described relation rc obtained natural join k relations occurring input instance I One input relations ri fact constraint scope Si covered vertex p decomposition tree HD corresponds C acyclic instance I cid3 In particular scope Si corresponds edge hi 2 edgesHI hi 2 cid21p hi cid18 cid31p Let rmax constraint relation having maximum size krmaxk constraint relations occurring input instance I Then krck 6 krmaxkkcid01 cid1 kri k Recall instance I cid3 m constraints Considering constraints I following upper bound size CSP I cid3 cid0 kI cid3k 6 cid1 krmaxkkcid01 cid1 kr1k C cid1 cid1 cid1 C krmaxkkcid01 cid1 krmk kI cid3k 6 krmaxkkcid01 cid1 cid1 cid0 kr1k C cid1 cid1 cid1 C krmk 6 krmaxkkcid01 cid1 kI k It follows kI cid3k 6 kI kk Moreover effective computation I cid3 I takes time OkI kk Indeed computing natural join relations r1 r2 takes time Okr1kcid1kr2k exactly bound size result join operation Thus applying line reasoning space bound computation acyclic instance I cid3 feasible OkI kk time 2 From Claims 13 wellknown Om cid1 kI cid3k cid1 log kI cid3k complexity evaluating acyclic CSP I cid3 79 follows overall cost evaluation procedure OkI k cid1 kI kk cid1 log kI kk C OkHI k2 D OkI kkC1 cid1 log kI k k ﬁxed kHI k 6 kI k k 1 2 It worthwhile noting crucial difference HYPERTREE method TCLUSTER method objective function minimized order obtain convenient acyclic decomposition given CSP instance The HYPERTREE method minimizes number hyperedges HI associated vertex acyclic equivalent instance exploiting fact hyperedge covers variables The TCLUSTER method minimizes number variables occurring vertex equivalent acyclic instance evidenced following example Example 22 For m 0 let T m hypergraph having m C 3 hyperedges fh1 h2 h3 e1 e2 emg deﬁned follows cid15 h1 D fX1 Xm Y1 Ym Ag cid15 h2 D fY1 Ym Z1 Zm Bg cid15 h3 D fZ1 Zm X1 Xm Cg cid15 ei D fXi Yi Zig 81 6 6 m The TCLUSTER width T m 3m primal graph chordal maximal clique C D fX1 Xm Y1 Ym Z1 Zmg cardinality 3m In fact according TCLUSTER method solve subproblem involving hyperedge ei 1 6 6 m 266 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 On hand m 0 HYPERTREE width T m 2 It worthwhile noting number variables occurring largest vertex decomposition 3m C 2 Hence equivalent acyclic instance obtain according HYPERTREE optimal according TCLUSTER method associated primal graph clique cardinality 3m C 2 Nevertheless constraint relation associated vertex computable easily join constraint relations r1 r2 corresponding h1 h2 respectively A simple way decomposition methods way exploit power hyperedges dual graph associated CSP We detailed analysis approaches relationships HYPERTREE method Section 9 It turns methods exploit power hyperedges general HYPERTREE according strong notion generalization formally deﬁned section 6 Comparison criteria For comparing decomposition methods introduce relations cid22 cid3 cid30cid30 deﬁned follows D1 cid22 D2 words D2 generalizes D1 exists cid14 0 k 0 CD1 k cid18 CD2 k C cid14 Thus D1 cid22 D2 implies class CSP instances tractable according D1 tractable according D2 Note constant cid14 allows rid small differences tractability classes irrelevant comparison Eg known discussion Section 49 TCLUSTER TREEWIDTH equivalent methods expect TCLUSTER generalize TREEWIDTH vice versa However k 1 CTREEWIDTH k 6cid18 CTCLUSTER k treewidth deﬁned cardinality vertexlabeling minus Rather CTREEWIDTH k cid18 CTCLUSTER k C 1 holds Thus taking cid14 D 1 easily TREEWIDTH cid22 TCLUSTER D1 cid3 D2 D1 beats D2 exists integer k m CD1 k 6cid18 CD2 m To prove D1 cid3 D2 sufﬁcient exhibit class hypergraphs contained CD1 k CD2 j j 0 Intuitively D1 cid3 D2 means class CSP instances D1 outperforms D2 respect tractability instances tractable according D1 according D2 For classes D1 better D2 D1 cid30cid30 D2 D1 cid22 D2 D2 cid3 D1 In case D2 strongly generalizes D1 This means D2 powerful method given D1 guarantees polynomial runtime constraint solving D2 guarantees tractable constraint solving classes constraints solved polynomial time D2 tractable according D1 Mathematically cid22 preorder reﬂexive transitive antisymmetric We D1 cid22equivalent D2 denoted D1 cid17 D2 D1 cid22 D2 D2 cid22 D1 hold Note hand cid30cid30 transitive antisymmetric reﬂexive G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 267 The decomposition methods D1 D2 strongly incomparable D1 cid3 D2 D2 cid3 D1 Note D1 D2 strongly incomparable incomparable respect relations cid22 cid30cid30 7 Comparison results In section present complete comparison decomposition methods described Section 4 according criteria Fig 1 reproduced Fig 16 acronyms decomposition methods readers convenience shows representation hierarchy decomposition methods determined cid30cid30 relation Each element hierarchy represents decomposition method apart containing Tree Clustering wcid3 Treewidth grouped cid22equivalent easily follows observations Section 4 Theorem 23 For pair D1 D2 decompositions methods represented Fig 16 following holds cid15 There directed path D1 D2 D1 cid30cid30 D2 D2 strongly generalizes D1 cid15 D1 D2 linked directed path strongly incomparable Hence Fig 16 gives complete picture relationships holding different methods The following lemmas transitivity relations deﬁned Section 6 prove Theorem 23 For n 2 m 0 let Circlen m hypergraph having n edges fh1 hng deﬁned follows cid15 hi D fX1 cid15 hn D fX1 Xm n Xm X1 n X1 iC1 Xm iC1 g 1 Xm 1 g 81 6 6 n cid0 1 Fig 16 Constraint tractability hierarchy 268 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 Fig 17 shows hypergraph Circlen 2 n 8 For m D 1 Circlen 1 graph consisting simple cycle n edges like circle Note n 2 m 0 Circlen m hypertree width 2 A width 2 hypertree decomposition Circlen m shown Fig 18 It follows inﬁnite class hypergraphs S fCirclen mg included tractability class CHYPERTREE 2 n2m0 For n 0 let trianglesn graph V E deﬁned follows The set vertices V contains 2n C 1 vertices p1 p2nC1 For index 2 6 6 2n fpi picid01g fpi piC1g fpicid01 piC1g edges E No edge belongs E Fig 19 shows graph trianglesn The HYPERTREE width trianglesn 2 Indeed hypertree hT cid31 cid21i T simple chain n vertices v1 vn vi 1 6 6 n cid31vi D fp2icid01 p2i p2iC1g cid21vi contains edges fp2icid01 p2i g fp2i p2iC1g width 2 HYPERTREE decomposition trianglesn For n 0 let bookn graph having 2n C 2 vertices 3n C 1 edges form n squares pages book having exactly common edge fX Y g It easy HYPERTREE width bookn 2 Fig 20 shows graph book4 Fig 17 The hypergraph Circlen 2 Fig 18 2width hypertree decomposition Circlen m G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 269 Fig 19 The graph trianglesn Fig 20 The graph book4 Lemma 24 CUTSET cid30cid30 HYPERCUTSET Proof HYPERCUTSET clearly generalizes CUTSET Moreover HYPERCUTSET cid3 fCirclen mg 6cid18 CCUTSET k holds k 0 CUTSET Indeed S fCirclen mg cid18 CHYPERCUTSET 1 deleting edge Circlen m n2m0 S n2m0 yields acyclic hypergraph 2 Lemma 25 BICOMP cid3 HYPERCUTSET Proof Consider graph trianglesn n 0 It easy HYPERCUTSET width trianglesn dn3e BICOMP width 3 Hence S ftrianglesng 6cid18 CHYPERCUTSET ftrianglesng cid18 CBICOMP 3 S n1 n1 k holds k 0 2 Lemma 26 BICOMP CUTSET strongly incomparable Proof BICOMP cid3 CUTSET Follows Lemma 25 Lemma 24 CUTSET cid3 BICOMP Consider graph bookn n 0 The graph bookn biconnected Thus BICOMP width 2n C 2 On hand set fX Y g cycle cutset bookn Thus fbookng cid18 CCUTSET 2 holds 2 S n1 Lemma 27 BICOMP cid30cid30 HINGE Proof In 18 shown BICOMP cid22 HINGE Thus sufﬁces prove HINGE cid3 BICOMP Consider graph bookn deﬁned n 0 As observed BICOMP width bookn 2n C 2 HINGE width 4 Indeed minimal hinges bookn correspond pages book cardinality 4 2 270 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 Lemma 28 BICOMP cid30cid30 TCLUSTER Proof In 7 observed BICOMP cid22 TCLUSTER In fact BICOMP compared wcid3 cid22equivalent TCLUSTER Furthermore TCLUSTER cid3 BICOMP follows CUTSET cid3 BICOMP fact observed 7 TCLUSTER generalizes CUTSET CUTSET cid22 TCLUSTER 2 Lemma 29 CUTSET cid30cid30 TCLUSTER Proof As mentioned CUTSET cid22 TCLUSTER 7 Moreover TCLUSTER cid3 CUTSET follows BICOMP cid3 CUTSET BICOMP cid22 TCLUSTER 2 Lemma 30 CUTSET cid3 HINGE S fCirclen 1g CUTSET width 1 deleting Proof Every graph vertex graph acyclic graph However n 2 degree cyclicity Circlen 1 n 18 2 n2 Lemma 31 HINGE TCLUSTER strongly incomparable Proof HINGE cid3 TCLUSTER Let S D fCircle3 m j m 1g For m 1 primal graph G Circle3 m clique 3m variables Thus G need triangulation chordal graph The TCLUSTER width Circle3 m clearly 3m HINGE width 3 hypergraph S hyperedges TCLUSTER cid3 HINGE Follows CUTSET cid3 HINGE CUTSET cid22 TCLUSTER 2 Lemma 32 HINGE cid30cid30 HINGETCLUSTER TCLUSTER cid30cid30 HINGETCLUSTER easy HINGE cid22 HINGETCLUSTER TCLUSTER cid22 Proof It HINGETCLUSTER hold Furthermore HINGETCLUSTER cid3 HINGE follows TCLUSTER cid22 HINGETCLUSTER TCLUSTER cid3 HINGE HINGETCLUSTER cid3 TCLUSTER fol lows HINGE cid22 HINGETCLUSTER HINGE cid3 TCLUSTER 2 Lemma 33 HINGETCLUSTER cid22 HYPERTREE Proof Let H hypergraph H0 HINGETCLUSTER decomposition H width k We exists hypertree decomposition H width k We use running example hypergraph Hhg Example 6 Fig 11 shows width 3 HINGETCLUSTER decomposition H0 hg Hhg described Example 7 Recall construction HINGETCLUSTER decomposition H0 acyclic hypergraph Note general H0 reduced hypergraph For instance H0 hg reduced edge fX1 X2 X3g coming TCLUSTER decomposition hinge H2 subset fX1 X2 X3 X10 X11g comes hinge H1 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 271 Let H00 reduced acyclic hypergraph obtained H0 deleting edge hg contains subset edge hypergraph Therefore H00 edges H0 hg edge fX1 X2 X3g We partition edges H00 sets AE HE TE deﬁned follows cid15 The set AE contains edges H00 come TCLUSTER decomposition hinge Hi H subgraph varHi Hi acyclic In running example property holds hinges H4 H5 H6 Recall case wHi D 1 holds decomposition hinge acyclic hypergraph varHi Hi For example H00 hg AE contains edges corresponding constraint scopes s5 s6 s7 s8 fX4 X5 X6g fX4 X7g fX5 X8g fX6 X9g respectively cid15 The set TE contains edges edgesH00 cid0 AE come TCLUSTER decomposition hinge Hi H subgraph varHi Hi cyclic Since TCLUSTER decomposition hypergraph bounded k follows edge TE contains k variables In running example TE contains edges fX1 X3 X6g fX1 X4 X6g te1 te2 respectively cid15 The set HE contains edges edgesH00 cid0 AE cid0 TE come hinge H Thus edge h HE union k edges belonging hinge Hi H We denote hinge Hi corresponding h hingeh In running example HE contains edge fX1 X2 X3 X10 X11g he1 comes hinge H1 D fs1 s2 s9g Hhg Therefore hingehe1 D fs1 s2 s9g Let JT jointree acyclic hypergraph H00 Recall vertex tree JT edge H00 vice versa connectedness condition holds subgraph JT induced variable H0 connected Fig 21 shows jointree H00 hg From JT deﬁne hypertree decomposition HD D hT cid31 cid21i tree T shape JT labelings cid31 cid21 deﬁned following procedure For vertex h JT denote ph corresponding vertex tree T H 1 edge h AE label corresponding vertex ph follows cid31ph D h 2 edge h HE label corresponding vertex ph follows cid31ph D h cid21ph D fhg cid21ph D hingeh Fig 21 A jointree hypergraph H00 hg 272 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 Fig 22 The hypertree running example proof Lemma 33 steps 1 2 3 Fig 23 The hypertree running example proof Lemma 33 step 4 4 edge h TE label corresponding vertex ph follows cid31ph D h cid21ph D For running example Fig 22 shows hypertree obtained steps 4 edge Nh hypergraph H vertex q T Nh 2 cid21q choose vertex h JT Nh cid18 h h 2 TE add Nh cid21 labeling corresponding vertex ph T cid21ph VD cid21ph f Nhg In running example add edge s3 variables X1 X4 cid21 labeling hypertrees root edge s4 variables X4 X6 cid21 labeling left child root shown Fig 23 5 While vertex p T cid31p contains variable X covered cid21p X 2 cid31p cid0 varcid21p proceed follows A Find path cid25 T linking p vertex q X 2 varcid21q ii X 2 varcid21s vertex s cid25 cid0 fqg B Choose edge h 2 cid21q X 2 h C Add h cid21s cid31s vertex s 2 cid25 cid0fqg cid31s VD cid31sh cid21s VD cid21s fhg In running example root contains variable X6 covered edge s3 Fig 23 Then choose path connecting root right child X6 occurs edge belonging cid21 labeling edge s5 Thus add s5 cid21 labeling root covering X6 Similarly variable X1 occurring left child root covered adding cid21 labeling edge s1 occurs child Fig 24 shows ﬁnal hypertree obtained running example G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 273 Fig 24 The ﬁnal hypertree running example proof Lemma 33 Note steps 1 2 3 connectedness condition condition 2 Deﬁnition 12 clearly holds HD holds jointree JT However vertex ph T corresponding vertex h 2 TE JT step 3 provides cid31 labeling ph Thus step 4 select edges H cover variables vertex ph decomposition HD deﬁne cid21 labeling ph Since connectedness condition preserved step 3 easy verify end procedure HD hypertree decomposition H Moreover HYPERTREE width k Indeed construction follows vertex h 2 HE jcid21phj D jhingehj 6 k vertex h0 2 TE jcid21phj 6 jhj 6 k 2 Lemma 34 HINGETCLUSTER cid30cid30 HYPERTREE Proof From Lemma 33 HINGETCLUSTER cid22 HYPERTREE holds We HYPERTREE cid3 HINGETCLUSTER Consider cyclic hypergraph Circlen m n 2 m 0 This hypergraph unique hinge containing edges HINGE width n Moreover primal graph contains maximal cliques cardinality 2m TCLUSTER width 2m It follows S fCirclen mg 6cid18 CHINGETCLUSTER k holds k 0 However fCirclen mg cid18 CHYPERTREE 2 holds See Fig 18 n2m0 HYPERTREE hypertree decomposition Circlen m width 2 2 n2m0 S Lemma 35 HINGETCLUSTER HYPERCUTSET strongly incomparable Proof HINGETCLUSTER cid3 HYPERCUTSET follows BICOMP cid3 HYPERCUTSET BICOMP cid22 HINGETCLUSTER HYPERCUTSET cid3 HINGETCLUSTER Indeed fCirclen mg 6cid18 CHINGETCLUSTER k n2m0 holds k 0 fCirclen mg cid18 CHYPERCUTSET 1 2 n2m0 Lemma 36 HYPERCUTSET cid30cid30 HYPERTREE 274 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 Proof We HYPERTREE cid3 HYPERCUTSET Lemma 25 BICOMP cid3 HYPERCUTSET BICOMP cid22 HYPERTREE We prove HYPERCUTSET cid22 HYPERTREE Let H hypergraph H cid18 edgesH cycle hypercutset H Let k cardinality H Let H0 subhypergraph H induced varH cid0 varH hypergraph having edge h0h D h cid0 varH edge h 2 edgesH h cid0 varH 6D Note general H0 connected By deﬁnition cycle hypercutset H0 acyclic Thus exists join forest H0 set jointrees JT1 JT corresponding s connected components H0 We exists hypertree decomposition HD D hT cid31 cid21i H having width k C 1 The root r T labeled cycle hypercutset H cid21r D H cid31r D varH The root r children fp1 pg corresponding jointrees JT1 JT In particular subtree Tpi rooted child pi 1 6 6 tree shape jointree JTi Moreover let q vertex jointree JTi h edge H h0h edge H0 associated vertex q JTi We label corresponding vertex Nq Tpi follows cid21 Nq D fhg H cid31 Nq D h varH It easy hypertree HD hypertree decomposition H width k C 1 It follows HYPERCUTSET cid22 HYPERTREE 2 8 Binary CSPs In section focus binary constraints satisfaction problems CSPs constraints relations arity On binary constraint networks differences decomposition strategies highlighted Section 7 evident Indeed bounding arities constraint relations ktractable classes decomposition strategies collapse generalizations longer strong generalizations Let cid30cid30bin cid22bin cid3bin cid17bin relations decompositions strategies induced cid30cid30 cid22 cid3 cid17 respectively binary CSPs considered In Fig 25 arcs paths containing arcs represent cid30cid30bin relationships dashed arc method D1 method D2 means D1 cid22bin D2 D2 6cid22bin D1 time D1 6cid30cid30bin D2 From relationship follows class C tractable according D1 tractable according D2 D2 width graph belonging class C bounded constant k 0 However D2 6cid22bin D1 entails D2 decompositions efﬁcient sense solving D1tractable class D2solution methods feasible augmenting worstcase complexity additive constant exponent possible direction Theorem 37 For pair D1 D2 decompositions methods represented Fig 25 following holds cid15 There directed path D1 D2 D1 cid22bin D2 cid15 There directed path containing arrow D1 D2 D1 cid30cid30bin D2 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 275 Fig 25 Tractability hierarchy binary CSPs cid15 D1 D2 linked directed path incomparable respect cid22bin relationship D1 6cid22bin D2 D2 6cid22bin D1 hold The following lemmas provide proof theorem Lemma 38 HINGE cid30cid30bin TCLUSTER Proof First note TCLUSTER cid3bin HINGE follows proof showing TCLUSTER cid3 HINGE Indeed n 2 graph Circlen 1 degree cyclicity n TCLUSTER width 3 To prove HINGE cid22bin TCLUSTER graph G D V E HINGE widthG TCLUSTERwidthG If G acyclic graph degree cyclicity 2 TCLUSTER width 1 deﬁnition Now assume G cyclic graph let T hinge decomposition G From deﬁnition hinge decomposition follows T represents join tree acyclic hypergraph We recall 19 given hinge H G H 0 cid18 H hinge G H 0 hinge graph varH H It follows minimal hinge G connected set edges Moreover easy H minimal hinge varH H acyclic jH j D 2 Let T 0 new join tree initially set equal T As long exists vertex T 0 corresponding 2edges hinge G modify T 0 follows 1 select vertex p T 0 containing edges G e1 e2 2 add T 0 vertices p1 p2 containing edges e1 e2 respectively 3 add edge connecting p1 p0 vertex p0 T 0 connected p sharing e1 p 276 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 4 add edge connecting p2 p0 vertex p0 T 0 connected p sharing e2 p 5 remove p incident edges T 0 It easy verify ﬁnal tree T 0 obtained procedure terminates satisﬁes connectedness condition join trees In fact represents acyclic hypergraph H0 Let G0 primal graph H0 The graph G0 clearly chordal E cid18 E0 obtained suitable triangulation G Let k number variables occurring largest clique C G0 Since G cyclic graph k 2 By construction G0 clique C corresponds minimal hinge H G graph varH H connected cyclic This entails jH j varH D k It follows k 6 HINGEwidthG HINGEwidthG equal cardinality largest minimal hinge G Thus lemma holds TCLUSTER widthG 6 k G0 witnesses exists graph obtained triangulation G maximal clique cardinality k 2 Lemma 39 The following relationships hold HYPERTREE TCLUSTER cid15 TCLUSTER cid22bin HYPERTREE cid15 HYPERTREE 6cid3bin TCLUSTER cid15 HYPERTREE 6cid22bin TCLUSTER Proof TCLUSTER cid22bin HYPERTREE Easily follows construction described Lemma 33 prove HINGETCLUSTER cid22 HYPERTREE HYPERTREE 6cid3bin TCLUSTER Follows fact graph G TCLUSTERwidthG 6 2 cid1 HYPERTREEwidthG Let HD kwidth hypertree decomposition graph G The hypergraph corresponding acyclic instance built according HD primal graph G0 largest clique contains 2 cid1 k variables Indeed k edges associated vertex p hypertree decomposition varp 6 2 cid1 k HYPERTREE 6cid22bin TCLUSTER Observe n 3 complete graph Kn HYPERTREE width dn2e TCLUSTER width n Thus Kn 2 CHYPERTREE n0 n0 dn2e Kn 2 CTCLUSTER n00 n00 n It follows ﬁxed cid14 k 0 CHYPERTREE k cid18 CTCLUSTER k C cid14 2 Lemma 40 The following relationships hold HYPERCUTSET CUTSET cid15 CUTSET cid22bin HYPERCUTSET cid15 HYPERCUTSET 6cid3bin CUTSET cid15 HYPERCUTSET 6cid22bin CUTSET Proof The proofs ﬁrst points straightforward We HYPERCUTSET 6cid22bin CUTSET Consider graph trianglesn n 0 It easy HYPERCUTSET width trianglesn dn3e CUTSET width dn2e Thus trianglesn 2 CHYPERCUTSET n0 n0 dn3e trianglesn 2 CCUTSET n00 n00 dn2e It follows ﬁxed cid14 k 0 CHYPERCUTSET k cid18 CCUTSET k C cid14 2 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 277 All relationships follow transitivity corresponding proofs given general case hypergraphs carry binary case 9 Solving nonbinary CSPs dualization Many structural decomposition methods designed identify easy graph structures easy hypergraph structures In Section 4 described binary decomposition methods decomposition methods designed graphs hypergraphs acting primal graph hypergraph associated given CSP instance As showed previous section binary CSPs methods closer hypertreedecomposition method An alternative approach solution nonbinary CSPs exploit binary methods dual graph hypergraph See 7 Given CSP instance I dual D V E deﬁned follows set graph 7922 hypergraph HI graph Gd I vertices V coincides set hyperedges HI set E contains edge fh h0g pair vertices h h0 2 V h h0 6D That edge pair vertices corresponding hyperedges HI sharing variable The dual graph looks intricate simple CSPs For instance general acyclic CSPs acyclic dual graphs However known dual graph I suitably simpliﬁed order obtain better graph G0 Gd solve given CSP instance I In particular I acyclic CSP Gd I reduced acyclic graph represents jointree HI In case reduction feasible polynomial actually linear time See 22 Deﬁnition 41 Let G D V E dual graph hypergraph H For pair vertices h h0 2 V let fh h0g D h h0 A reduct G0 G graph V 0 E0 satisfying following conditions V 0 D V ii E0 cid18 E iii edge q D fh h0g belonging E cid0 E0 exists G0 path P h h0 variables q included q 0 edge q 0 occurring path P That variables shared vertices occur path vertices edge connecting safely deleted dual graph We denote redG set minimal reducts graph G set containing graph G0 reduct G set edges minimal respect set inclusion reducts G Clearly computing graph belonging redG feasible polynomial time repeatedly delete edge long possible It natural try solve nonbinary CSP I decomposition method DM dual graph I suitable reduct G 2 redGd 1 compute Gd 2 compute DM decomposition graph G I 278 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 3 solve instance I decomposition For instance BICOMP easily modiﬁed dual graph given hypergraph 11 Call dual version BICOMPd The relationship BICOMPd HINGE discussed 18 proved HINGE general BICOMPd However Gyssens et al observed ﬁne comparison methods difﬁcult performance BICOMPd strongly depends simpliﬁcation applied Gd I selected solve given CSP instance I They argued obvious way ﬁnd suitable simpliﬁcation good small biconnected width reduct solving problem I depends particular graph redGd Since HYPERTREE strongly generalizes HINGE follows HYPERTREE strongly generalizes BICOMPd However suggested Dechter personal communication interesting compare HYPERTREE dual version TCLUSTER short TCLUSTERd deﬁned follows Let H hypergraph G dual graph An acyclic hypergraph Hcid3 TCLUSTERd decomposition H width w Hcid3 TCLUSTER decomposition G0 width w reduct G0 2 redG The dual treeclustering width short TCLUSTERd width H equal minimum width TCLUSTERd decompositions H We HYPERTREE strongly generalizes TCLUSTERd method To end introduce new class hypergraphs For n 1 let DCliquen hypergraph having n C 2 edges fha hb h1 h2 hng deﬁned follows cid15 ha D fXa ij cid15 hb D fXb ij cid15 1 6 6 n hi D fXa icid01i Xb We denote Gd n dual graph DCliquen j 1 6 j 6 ng j 1 6 j 6 ng 2i Xa 1i Xa icid01i Xa g iiC1 Xb 2i Xb 1i Xb fXb iiC1 Xa g Example 42 Consider hypergraph DClique4 Its edges h1 D fXa h2 D fXa h3 D fXa h4 D fXa ha D fXa ij hb D fXb ij 12 Xb 12 Xb 13 Xb 14 Xb 12 Xa 12 Xa 13 Xa 14 Xa 13 Xb 23 Xb 23 Xb 24 Xb 13 Xa 23 Xa 23 Xa 24 Xa 14 Xb 14 24 Xb 24 34 Xb 34 34 Xb 34 gI gI gI gI j 1 6 j 6 4gI j 1 6 j 6 4g Fig 26 shows dual graph Gd 4 Note graph reduced redGd 4 D fGd 4g For instance consider vertices h1 h4 Their shared g clearly 14 For t 2 f1 4 bg ht h1 D fXa 14 Xb variables Xa 14 2 h1 hb Thus g Moreover Xb include fXa 14 Xb 14 delete edge fh1 h4g fact edge deleted Gd 4 14 2 h1 ha Xa 1t Xb 1t Apply TCLUSTER Gd 4 It chordal graph directly identify maximal cliques form edges TCLUSTER decomposition G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 279 Fig 26 The dual graph DClique4 Fig 27 A hypertree decomposition DClique4 Gd 4 The resulting acyclic hypergraph edges fha h1 h2 h3 h4g fhb h1 h2 h3 h4g Thus TCLUSTERd width DClique4 5 The HYPERTREE width DClique4 2 Fig 27 shows complete hypertree decomposition T cid31 cid21 DClique4 having width 2 Observe exploiting edges h1 h2 root T covers variables occurring DClique4 fact hypertree decomposition hypergraph To obtain complete hypertree decomposition shown Fig 27 remaining edges simply attached singletons root Theorem 43 TCLUSTERd cid30cid30 HYPERTREE n0 Proof HYPERTREE cid3 TCLUSTERd Consider hypergraph class fDCliquen j n 1g Generalizing example easily seen n 3 set redGd n singleton containing dual graph Gd n DCliquen This graph chordal maximal cliques fha h1 hng fhb h1 hng TCLUSTERd width DCliquen n C 1 Thus k 0 S fDCliqueng 6cid18 CTCLUSTERd k hypertree width fDCliqueng cid18 Chypertree 2 Indeed tree single hypergraphs 2 vertex r cid21r D fha hbg cid31r D ha hb hypertree decomposition DCliquen complete Fig 27 shows complete hypertree decomposition hypergraphs looks like TCLUSTERd cid22 HYPERTREE Let H0 TCLUSTERd decomposition hyper graph H width k Then H0 acyclic hypergraph edges sets containing k edges H Any join tree JT H0 mapped straightforwardly hypertree decomposition T cid31 cid21 H treeshape JT Every vertex p n0 S 280 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 T corresponds vertex p0 JT The vertex p0 join tree H0 corresponds maximal clique reduct dual graph H contains set S edges occurring H Then vertex p hypertree decomposition labeled cid21p D S cid31p D varS Clearly hypertree decomposition T cid31 cid21 width TCLUSTERd decomposition H0 2 Note TCLUSTERd width H depend choice reduct dual graph The width fact computed optimal reduct G reduct leading lowestwidth TCLUSTER decomposition H However observed 18 clear choose right reduct order obtain TCLUSTERd decomposition having smallest width In fact currently known ﬁxed k deciding TCLUSTERd width hypergraph k feasible polynomial time Thus compared TCLUSTERd HYPERTREE strongly general kbounded hypertree decompositions efﬁciently computable Clearly result holds TREEWIDTH wcid3 given equivalence methods Section 4 10 Conclusion In paper established framework systematically comparing structural CSP decomposition methods regard power identifying large tractable classes constraints We compared main decomposition methods published AI literature Moreover adapted method hypertree decompositions previously deﬁned database context CSP setting We compared methods CSPs arbitrary arity binary CSPs In cases turned hypertree decomposition method general case general CSPs holds strong sense We shown method hypertree decompositions general dualization method applies standard decomposition method dual graph constraint hypergraph CSP We derived upper time bound OkI kkC1 log kI k solution CSP instance I having kwidth hypertree decomposition Note bound worse bound considered method CSP decompositions Thus appears method hypertree decompositions currently powerful CSP decomposition method The comparison results complexity bounds presented paper valid general CSP instances domain size unrestricted Further work needed suitable extensions modiﬁcations decomposition methods comparison methods relevant special cases particular CSPs ﬁxed domain size Moreover remarked HINGE BICOMP width hypergraph computed polynomial time ﬁxed bound given Thus methods useful providing polynomial time measure cyclicity arbitrary CSP instance For practical applications given CSP instances large hypertree width HINGE BICOMP decompositions fast identiﬁcation easy hard modules clusters constraint G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 281 hypergraph Moreover algorithm computing hypertree decompositions suitably modiﬁed identify output clusters low hypertreewidth case entire hypergraph high width We believe comparison results provide insight relationship standard methods constraint decomposition Constraint satisfaction lively ﬁeld new methods techniques decomposing solving CSPs expected proposed years come We hope results paper comparison framework proof techniques useful authors assessing relative strength methods comparing existing methods Acknowledgements We thank anonymous referees useful comments suggestions Research supported FWF Austrian Science Funds project Z29INF Part work Francesco Scarcello carried visiting Technische Universität Wien Part work Nicola Leone carried Technische Universität Wien References 1 S Arnborg J Lagergren D Seese Problems easy treedecomposable graphs J Algorithms 12 1991 308340 2 C Beeri R Fagin D Maier M Yannakakis On desirability acyclic database schemes J ACM 30 3 1983 479513 3 PA Bernstein N Goodman The power natural semijoins SIAM J Comput 10 4 1981 751771 4 W Bibel Constraint satisfaction deductive viewpoint Artiﬁcial Intelligence 35 1988 401413 5 HL Bodlaender Treewidth Algorithmic techniques results Proc MFCS97 Bratislava Lecture Notes Computer Science Vol 1295 Springer Berlin 1997 pp 1936 6 Ch Chekuri A Rajaraman Conjunctive query containment revisited Theoret Comput Sci 239 2 2000 211229 7 R Dechter Constraint networks Encyclopedia Artiﬁcial Intelligence 2nd edn Wiley New York 1992 pp 276285 8 R Dechter J Pearl Network based heuristics constraint satisfaction problems Artiﬁcial Intelli gence 34 1 1988 138 9 R Dechter J Pearl Tree clustering constraint networks Artiﬁcial Intelligence 38 1989 353366 10 EC Freuder A sufﬁcient condition backtrackfree search J ACM 29 1 1982 2432 11 EC Freuder A sufﬁcient condition backtrackbounded search J ACM 32 4 1985 755761 12 EC Freuder Complexity ktree structured constraint satisfaction problems Proc AAAI90 Boston MA 1990 13 MR Garey DS Johnson Computers Intractability A Guide Theory NPcompleteness Freeman New York NY 1979 14 N Goodman O Shmueli Syntactic characterization tree database schemas J ACM 30 4 767786 15 G Gottlob N Leone F Scarcello The complexity acyclic conjunctive queries Proc FOCS98 Palo Alto CA 1998 pp 706715 Full version Technical Report DBAITR9817 available web httpwwwdbaituwienacatstaffgottlobacyclicps email authors 16 G Gottlob N Leone F Scarcello Hypertree decompositions tractable queries Proc PODS99 Philadelphia PA 1999 Full version appear Journal Computer System Sciences A preprint version currently stored The Computer Research Repository httpxxxlanlgovarchivecs 282 G Gottlob et al Artiﬁcial Intelligence 124 2000 243282 17 G Gottlob N Leone F Scarcello On tractable queries constraints Proc Conference Database Expert Systems Applications DEXA99 Florence Lecture Notes Computer Science Vol 1677 Springer Berlin 1999 pp 115 18 M Gyssens PG Jeavons DA Cohen Decomposing constraint satisfaction problems database techniques Artiﬁcial Intelligence 66 1994 5789 19 M Gyssens J Paredaens A decomposition methodology cyclic databases Advances Database Theory Vol 2 Plenum Press New York 1984 pp 85122 20 P Jeavons D Cohen M Gyssens Closure properties constraints J ACM 44 4 1997 21 PhG Kolaitis MY Vardi Conjunctivequery containment constraint satisfaction Proc Symp Principles Database Systems PODS98 Seattle WA 1998 pp 205213 Full version appear Journal Computer System Sciences 22 D Maier The Theory Relational Databases Computer Science Press Rockville MD 1986 23 J Pearson PG Jeavons A Survey Tractable Constraint Satisfaction Problems CSDTR9715 Royal Holloway University London London 1997 24 N Robertson PD Seymour Graph Minors II Algorithmic aspects tree width J Algorithms 7 1986 309322 25 R Seidel A new method solving constraint satisfaction problems Proc IJCAI81 Vancouver BC 1981 26 M Yannakakis Algorithms acyclic database schemes C Zaniolo C Delobel Eds Proc Internat Conference Very Large Data Bases VLDB81 Cannes France 1981 pp 8294