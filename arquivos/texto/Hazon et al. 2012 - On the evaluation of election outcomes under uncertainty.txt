Artiﬁcial Intelligence 189 2012 118 Contents lists available SciVerse ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint On evaluation election outcomes uncertainty Noam Hazon Yonatan Aumann Sarit Kraus Michael Wooldridge b Department Computer Science BarIlan University Ramat Gan Israel b Department Computer Science University Liverpool Liverpool United Kingdom r t c l e n f o b s t r c t Article history Received 7 March 2010 Received revised form 18 April 2012 Accepted 30 April 2012 Available online 3 May 2012 Keywords Computational social choice Voting rules We investigate extent possible compute probability particular candidate winning election given imperfect information preferences electorate We assume voter probability distribution set preference orderings Thus voter number possible preference orderings know orderings actually represents preferences voter ordering know probability For case number candidates constant able polynomial time algorithm compute probability given candidate win We present experimental results obtained implementation algorithm illustrating algorithms performance practice better predicted theoretical bound However number candidates bounded prove problem Phard Plurality kapproval Borda Copeland Bucklin voting rules We evaluating candidate chance winning NPcomplete Plurality voting rule case voters different weights With unweighted voters polynomial algorithm Plurality problem hard voting rules Finally Monte Carlo approximation algorithm computing probability candidate winning settings error small desired 2012 Elsevier BV All rights reserved 1 Introduction Social choice theory concerned making group decisions situations preferences participants decisionmaking process different 1 The mechanism collective decision typically vot ing procedure In voting procedure participants voters express preferences votes voting procedure deﬁnes social outcome chosen function votes cast A fundamental issue social choice literature design voting procedures select social outcome reﬂects preferences expressed voters closely possible 13 In recent years computational aspects social choice theory increasingly studied 20 From computational perspective natural question relating voting following Given preferencesvotes voters possible compute eﬃciently winning outcome according particular voting rule Fortunately relatively widely voting rules hard compute sense 5 Another key computational question studied context voting procedures manipulation extent computationally easy hard voter determine vote achieve best outcome possible 41519 As references indicate computational aspects voting procedures increasingly studied recent years However computational studies voting procedures assume perfect information voter preferences Corresponding author Email addresses hazonncsbiuacil N Hazon aumanncsbiuacil Y Aumann saritcsbiuacil S Kraus mjwlivacuk M Wooldridge 00043702 matter 2012 Elsevier BV All rights reserved httpdxdoiorg101016jartint201204009 2 N Hazon et al Artiﬁcial Intelligence 189 2012 118 votes1 That compute social outcome assumed complete correct knowledge preferencesvotes voters However important settings obtaining complete preferencesvotes voters realistic desirable Communication unreliable Social choice theory largely ignores possibility preferencesvotes lost transit However example voting takes place communications network Internet assumption valid Data communications networks inherently unreliable domains reliable communication simply impossible In situations need social choices access preferencesvotes voters Communication expensive In situations cost associated gathering complete preferencesvotes voters unrealistically high For example decision required quickly time required gather preferencesvotes large unacceptable For reasons study computational aspects voting rules imperfect information model prefer encesvotes There course ways model incomplete information voter preferences For example model studied literature incomplete models preferences 2730 Here assumed partial correct model preferences voters Intuitively know voters rank candidates One ask example completion preferences voters lead election particular candidate In work use different model incomplete information claim model superior 2730 provides interesting alternative framework modeling voting scenarios incomplete information We assume voter probability distribution set preference orderings The idea know voters preference ordering exactly know set possible orderings typically subset overall set possible preference orders probability distribution This information example obtained historical voting data sampling In setting following fundamental question arises Given incomplete information model voter preferences particular candidate particular voting rule probability given candidate win given voting rule assuming given voter preference model We refer Evaluation problem The Evaluation problem received little attention date2 Our aim gain understanding computational properties problem particular classes problem instances Evaluation computationally easy classes problem instances computationally hard The remainder paper structured follows We ﬁrst background review common voting rules Section 2 We formally deﬁne theEvaluation problem Deﬁnition 1 In Section 3 ﬁrst polynomial algorithm solve evaluation problem number candidates constant While result 16 establishes Evaluation NPhard key voting procedures stringent assumptions probability distributions result holds weighted voting rules weights bounded polyn We experimentally evaluate algorithm showing actual running time space smaller asymptotic bound Therefore test voters polynomialtime algorithm handle given set candidates The results demonstrate 6 7 candidates algorithm handle 100 voters suggests realworld voting scenarios If number candidates bounded evaluation problem harder Section 4 wellknown Plurality kapproval Borda Copeland Bucklin voting rules problem Phard We analyze simpler question known ChanceEvaluation problem Deﬁnition 2 This question simply asks candidate chance winner probability candidate win greater 0 Surprisingly problem shown NPcomplete strong sense Plurality voting rule voters equal weights We polynomial time algorithm Plurality voters equal weights ChanceEvaluation problem hard voting rules including kapproval Borda Copeland Bucklin Finally present Monte Carlo algorithm able approximately answer Evaluation problem number candidates parameter error small desired We discuss related work Section 5 Table 1 summarizes key results comparison include results 16 2 Preliminary deﬁnitions An election given set candidates referred alternatives C c1 cm set voters V 1 n Each voter V associated preference order R total order C A vector R R1 Rn containing preference order voter called preference proﬁle A voting rule F mapping set preference proﬁles set candidates F R c c wins F R A voting rule said anonymous F R F Rcid4 preference proﬁles Rcid4 1 Not previous studies assumed perfect information discuss imperfect information models results associated 2 The exception know work 16 discuss relationship work 16 Section 5 N Hazon et al Artiﬁcial Intelligence 189 2012 118 3 Table 1 Summary key results The parentheses near complexity class indicates voting rules results proved Key polynomialtime computable voting rule p Plurality m Maximin 1 Borda Copeland Maximin STV 2 kapproval Borda Copeland Bucklin Number candidates Weights Constant Parameter equal bounded polyn equal bounded polyn Approximation ChanceEvaluation Pall Pall NPhard1 16 Pp NPcompletem2 NPcompletepm2 NPcompletepm2 Pall Evaluation Pall Pall NPhard1 16 Phardp2 Phardp2 Phardp2 Pall obtained permuting entries R In paper restrict attention anonymous voting rules In addition consider voting rules polynomialtime computable During election voter submits preference order Li representing vote The outcome election given F L1 Ln We assume voters truthful voter Li R Of course general voters necessarily truthful purposes present paper ignore possibility Voting rules We deﬁne main voting rules considered paper Before begin small technical remark In deﬁnition voting rule gave function F set preference proﬁles set candidates implicitly required voting rules deterministic sense select exactly winner The voting rules consider follows ﬁt deﬁnition All rules work assigning scores candidates basis votes winner selected set candidates highest score tiebreaking rule mapping T 2C C satisﬁes T S S We consider tiebreaking rules random winner randomly selected tied candidates lexicographic given set tied candidates winner candidate maximal respect ﬁxed ordering cid6 Our results easily shown hold tiebreaking rules Now break ties random voting rule deterministic ﬁt formal deﬁnition However observation affect results way Given vector α α1 αm α1 cid2 cid2 αm score sαc candidate c C positional scoring rule Fα given sαc cid2 iV α jic ji c position voter ranks candidate c Note classic voting rules represented framework For example Plurality scoring rule α 1 0 0 Borda scoring rule α m 1 m 2 1 0 kapproval scoring rule α given α1 αk 1 αk1 αm 0 The Bucklin rule viewed adaptive version kapproval We k 1 cid3 k cid3 m Bucklin winning round j k candidate ranked j positions cid7n2cid8 voters exists candidate ranked k positions cid7n2cid8 voters We candidate cs score round j japproval score Bucklin score sB c kapproval score k Bucklin winning round The Bucklin winner candidate highest Bucklin score Observe Bucklin score Bucklin winner cid7n2cid8 The Copeland rule deﬁned based notion pairwise elections We candidate c C beats TheCopeland score s C c candidate c cid4 C pairwise election majority voters rank c c candidate c given number pairwise elections c wins minus number pairwise elections c loses cid4 Weighted voters Our model extended situation voters equally important assigning integer weight w voter To compute winner proﬁle R1 Rn voting rule F given voters weights w w 1 wn apply F modiﬁed proﬁle 1 n contains w copies R When weights equal voters unweighted Imperfect information To model imperfect information assume voter l possible pref erence orders permutations available alternatives Each order associated nonzero probability voter choose vote sum probabilities given preference orders 1 possible preference orders explicitly given assumed probability 0 If prob abilities 0 1 scenario perfect information imperfect information Consider following illustrative example Suppose candidates c1 c2 c3 c4 voters V 1 V 2 V 3 4 N Hazon et al Artiﬁcial Intelligence 189 2012 118 Table 2 An example imperfect information model voter preferences V 1 1 3 c1 c2 c3 c4 1 2 c2 c1 c3 c4 1 6 c3 c1 c2 c4 V 2 3 4 c4 c2 c1 c3 1 4 c2 c1 c3 c4 V 3 9 10 c4 c2 c3 c1 1 10 c3 c1 c4 c2 Table 3 Winning probabilities candidate rounded 3 decimal places Bold font represents highest probability voting rule c1 c2 c3 c4 Plurality 0036 0178 0053 0733 Borda 0058 07 0017 0225 Copeland 0052 0256 0017 0675 The voters preferences summarized Table 2 probability associated preference order In example n l 3 voters possible preference proﬁles m 4 candidates We consider case voters choices independent If collect voter preference order ones associated possible preference proﬁle voting scenario winner calculated voting rules listed Plurality Borda The probability given voting scenario occurring simply product probabilities preference orders different voters Evaluation ChanceEvaluation We ready deﬁne main problems study remainder paper Deﬁnition 1 Evaluation Given candidates C voters V imperfect information model voters preferences described speciﬁc candidate c C voting rule F probability c chosen F The answer question sum probabilities voting scenarios c wins F For example recall imperfect information model preferences shown Table 2 Assume random tiebreaking rule The winning probabilities candidate Plurality Borda Copeland voting rules summarized Table 3 Note c4 highest probability winning Plurality Copeland c2 highest probability winning Borda Note complexity Evaluation problem function number voters n number candidates m number possible nonzero probability preference orders voter l We deﬁne related decision problem asks weaker question Deﬁnition 2 ChanceEvaluation Given candidates C voters V imperfect information model voters preferences chosen F greater described speciﬁc candidate c zero C voting rule F probability c Of course answer Evaluation problem immediately yields answer ChanceEvaluation problem problem easy However principle case Evaluation hard ChanceEvaluation easy suggests worth studying ChanceEvaluation problem right Note ChanceEvaluation problem natural In cases candidates chance winning voter reasonably contemplate candidates chance winning deciding vote In following sections analyze complexity Evaluation ChanceEvaluation problems sce narios number candidates bounded constant bounded 3 Constant number candidates In realworld scenarios number alternatives small bounded constant For example group agents want decide hour meet given day number alternatives 24 In section polynomial algorithm Evaluation problem assumption constant number alternatives Clearly algorithm answers ChanceEvaluation problem polynomial time We present experimental results obtained algorithm evaluating performance practice N Hazon et al Artiﬁcial Intelligence 189 2012 118 5 31 The algorithm The key eﬃciency algorithm distinction voting scenario voting result Intuitively voting scenario know voter preference order votes But identify winning candidate care actually exactly voter votes candidate aggregate possible voting scenarios compact intermediate form refer voting result For example suppose use Plurality rule With Plurality voting result vector stores total number votes candidate Now suppose voters candidates c1 c2 voters probability 1 vote candidates Thus voting scenarios voting result votes c1 vote c2 Voting results compact representations voting scenarios sense close connections work compilation complexity voting rules 1435 Work compilation complexity voting attempts bounds number bits required summarize votes particular voting rule addition considers speciﬁc compilation functions summarizing votes A voting result sense thought compilation function We remark issues little Expressed little formally voting result understood follows Deﬁnition 3 Given voting rule voting result succinct way represent voting scenarios voters 0 cid3 cid3 n 1 For n winner determined voting result n voters polynomial time 2 A voting result 1 voters generated combining voting result voters additional preference order polynomial time Of course abstract deﬁnition present algorithm concrete representations voting results common voting rules Let ﬁrst algorithm voters weights equal A formal proof correctness algorithm Appendix A The basic idea use dynamic programming compute possible voting results preference proﬁles calculate probability voting results The algorithm computes possible voting results preferences n 1 voters probabilities turn computed voting results preferences n 2 voters Our algorithm builds table T rows possible voting results columns represent voters We denote T cid9row col cell table row represents voting result vector cid9row column col At stage algorithm stores columns memory Algorithm 1 VotingResult table T preference orders voter 1 Init T 0 2 0 n 1 3 cells column T cid90 0 1 4 5 6 7 8 9 cid9r voting results cells row j 1 l cid9cur preference order j voter 1 cid9next voting result adding cid9cur cid9r T cid9next 1 T cid9next 1 probability cid9cur T cid9r end end 10 11 end When algorithm terminates cell column contains probability cells row voting result occurring We identify winner voting result according speciﬁc voting rule So answer Evaluation problem Deﬁnition 1 simply summing c probabilities voting results wins Consider following small example Suppose use Plurality voting rule 3 candidates c1 c2 c3 voters V 1 V 2 The voters preferences summarized Table 4a Table 4b shows table T built algorithm data Every row represents voting result vector index counts number votes candidate ci The column shows probabilities possible voting result voters V 1 V 2 Thus 1 probability c1 winner assuming random tiebreaking method 1 4 2 Note example 0 0 2 possible voting result 4 1 3 1 2 1 2 1 6 1 3 1 4 1 4 The time complexity algorithm O n number rows T l space complexity O number rows T The speciﬁc voting rule determines express possible voting results turn determines number rows Clearly seek representation compact possible This issue summarize votes compact way studied 14 35 reuse techniques presented 1435 It results showing upper bound tight imported settings ways representation 2 6 N Hazon et al Artiﬁcial Intelligence 189 2012 118 Table 4 An example Algorithm 1 builds table given set preferences A set voters preferences b The corresponding table T built algorithm V 1 1 2 c1 1 3 c2 1 6 c3 V 2 1 4 c1 3 4 c2 Voting result c1 c2 c3 0 0 0 1 0 0 0 1 0 0 0 1 2 0 0 1 1 0 1 0 1 0 2 0 0 1 1 0 1 0 0 0 0 0 0 0 0 1 0 1 2 1 3 1 6 0 0 0 0 0 2 0 0 0 0 1 2 1 3 1 6 1 3 1 6 1 4 1 4 1 4 3 4 3 4 1 2 3 4 voting results optimal future work Now voting rules following methods express possible voting results 1 A vector 0 nm index represents number voters voted candidate 2 A vector 0 nmm12 represents number voters preferred ﬁrst candidate possible pair candidates 3 From 35 A vector 0 nm2 4 From 14 A vector 0 nm2m1 represents number voters ranked candidate position For candidate let zi possible subset candidates containing The voting result vector represents candidate possible zi number voters preferred candidate zi 5 A vector 0 nm represents number voters voted possible preference order permutation We method use voting rules Plurality The ﬁrst method number rows O n 1m time complexity O n 1m l However actual number voting results n 1m total number points given candidates n Instead actual number voting results n voters exactly number ways splitting integer number n exactly m nonnegative integers sum equal n Two sums differ order summands considered different compositions This called weak composition n exactly m parts denote value WCn m WCn m nm1 So running time complexity cid5 n i0 WCi m space required O WCn m O l cid3 nm1 m1 nm1 cid4 kapproval The ﬁrst method running time complexity O l i0 WCi k m space com cid5 n plexity O WCn k m Borda We use modiﬁed version ﬁrst method vector 0 m 1nm represents total score candidate Thus time space complexity O l m respectively We use second method Borda score candidate c equals number times cid4 C c preferred candidate c m O WCn mm1 i0 WCi mm1 c cid5 n 2 2 cid4 Bucklin The method time space complexity O l i0 WCi m m O WCn m m cid5 n respectively Copeland The second method number rows O n 1mm12 time complexity O n 1mm12l This method Condorcetconsistent rules Maximin Ranked pairs Voting trees For extensive discussion voting rules refer reader 1 STV deﬁnition 1 Recall STV performs successive rounds round candidate lowest plurality score gets eliminated votes transferred preferred candidate vote majority winner We use fourth method candidate gets eliminated round exactly lowest number voters prefer remaining candidates eliminated Therefore number rows O n 1m2m1 l If m cid3 4 method shall calculate number scores candidate preference orders time complexity O n 1m2m1 When weighted voters case Conitzer Sandholm 16 expressed Evaluation problem following decision problem Given number r 0 cid3 r cid3 1 probability c winning greater r They showed problem NPhard Borda Copeland Minimax STV extremely restricted probability distributions We results hold weights bounded polyn N Hazon et al Artiﬁcial Intelligence 189 2012 118 7 Claim 4 For constant number candidates Evaluation problem P weighted voters weights polyn Proof Our dynamic programming approach Algorithm 1 easily extended work weighted voters Actually thing changed range possible voting results determines number rows table The number rows O polynm O polynmm12 O polynm2 O polynm depending speciﬁc voting rule described In cases P cid2 O polynm2m1 This result understood reference proofs 16 uses reduction Partition problem Partition known pseudopolynomial time dynamic programming solution 24 32 Experiments In preceding section gave analytical results case number candidates constant We showed complexity algorithm grows exponentially number candidates As problems worstcase exponential running time interesting ask worst case performance practice Our hypothesis problem actual number voting results algorithm stores smaller asymptotic bound cases required memory time smaller In particular investigated effect probabilistic structure imperfect information number stored voting results Additionally tested effect parameter l actual number voting results In section present experimental results obtained implementation algorithm Plurality rule unweighted voters validate hypothesis We interesting check voters polynomialtime algorithm reasonably handle practice given number candidates Our implementation written C ran 64bit Linux PC 8 GB RAM The large main memory needed algorithm store table voting results This table implemented Judy array 6 complex fast associative array data structure storing retrieving values We chose use data structure typically requires memory conventional hash table We measured algorithms performance counting total number cells produced runtime contrast measuring time depend actual testing hardware In cases ran 15 iterations took average In cases running time proved high took average 5 iterations As input algorithm takes imperfect information matrix Unlike experimental work social choice generates random preferences random voters weights 33 example need randomly generate proba bilities possible preferences As noted work assume knowledge preferences derived l preference orders nonzero probability voter Therefore impartial culture assump tion 12 model electorate preference orders equally likely We considered methods selecting l candidates voter Plurality needs choice candidate generating probabilities uniform normal distributions In ﬁrst method l candidates randomly chosen voter probability vote set 1l The second method deﬁned arbitrary ﬁxed order candidates It randomly chose candidate mean normal distribution voter The l 1 candidates chosen proximity mean candidate The probability voter vote candidates set according normal distribution selected mean variance 1 Fig 1 demonstrates difference methods In ﬁrst set experiments tested effect random methods generate voters pref erences In experiments ﬁxed l 3 evaluated effect methods running time terms number generated cells 5 6 candidates 20100 voters The results shown Fig 2 Clearly uniform distribution generate preferences results ways splitting total number votes candidates Thus increasing number voting results yields higher running time The second method simulates realistic scenario singlepeaked preference principle 11 In case predetermined linear ordering candidate set Every voter preferred point line dislike candidate grows larger candidate goes away point Similarly case voter special place believe highest probability selected probability voter vote candidate decreases candidate goes away spot In case votes scattered candidates number voting results lower yielding lower running time We use settings demonstrate ratio actual number voting results theoretical number behaves Since use Plurality theoretical bound computed WC function described The results summarized Fig 3 As voting scenarios lead voting result gap theoretical bound actual number voting results increases Thus ratio lower candidates normal distribution uniform distribution generate imperfect information On hand number voters signiﬁcant effect ratio In second set experiments investigated effect l actual number voting results Although algorithms running time asymptotically linear l interesting check l effect actual 8 N Hazon et al Artiﬁcial Intelligence 189 2012 118 Fig 1 An example generate random probabilities m 6 l 3 Fig 2 Results ﬁrst set experiments Fig 3 Ratio actual theoretical number voting results increasing numbers voters N Hazon et al Artiﬁcial Intelligence 189 2012 118 9 Fig 4 Ratio actual theoretical number voting results increasing number nonzero probability preference orders voter l Table 5 Extreme results Fractions rounded 3 decimal places candidates voters Theoretical voting results Actual voting results 4 5 6 7 1100 400 140 100 223045351 1093567501 498187404 1705904746 473316092 935061242 181465782 223815788 Ratio 0212 0086 0036 0013 Time s Total cells 1111834 3382004 4756 3792 131226784580 76404846070 4420923412 3465045432 Fig 5 Results set experiments number voting results In experiments ﬁxed number candidates 5 normal distribution generate preferences We measured ratio actual number voting results theoretical bound computed WC function 50 100 voters l 2 5 The results shown Fig 4 Indeed l increases ratio actual theoretical number voting results increases manner As previous experiment ratio affected number voters Note m 5 l 5 possible voting result happen ratio 1 It follows results clearly gap theoretically predicted running time actual Therefore set experiments tested voters polynomialtime algorithm handle practice given number candidates We set l minimum value 2 normal distribution generate preferences We tested 4 7 candidates voters algorithm handle We able process voters hard disk virtual memory IO overheads result higher running time wanted test algorithm reasonable limits algorithm main memory extreme results shown Table 5 achieved algorithm ran space The complete picture shown Fig 5 Note yaxis shown logarithmic scale The results actual running time terms generated cells heavily depends number candidates expected We algorithm handle practical number voters 6 7 candidates For 10 N Hazon et al Artiﬁcial Intelligence 189 2012 118 example Israeli parliament Knesset 120 voters United States Senate 100 voters Table 5 shows difference theoretical upper bound number voting results computed WC function actual number 4 The number candidates parameter If bound number candidates Evaluation harder In section Evaluation problem kapproval Borda Copeland Bucklin Plurality Phard case We analyze seemingly weaker question ChanceEvaluation Surprisingly problem hard voters equal weights Plurality We equal weights ChanceEvaluation hard kapproval Borda Copeland Bucklin Maximin However Plurality rule voters equal weights able polynomial time algorithm 41 The Evaluation problem Sometimes number candidates assumed constant necessarily parameter problem For example group agents wants choose leader m n constant There special cases number voters constant naive algorithm simply evaluates possible options runs time polynomial O mn suﬃce Of course assumption constant number voters restrictive unfortunately number voters n number candidates m given parameters problem Phard Plurality kapproval Borda Copeland Bucklin voting rules All Phardness reductions known Pcomplete problem Permanent calculate permanent 0 1matrix equivalently count number perfect matchings bipartite graph Deﬁnition 5 Denote Sn set permutations numbers 1 2 n Thepermanent n n matrix A ai j deﬁned perm A cid2 ncid6 σ Sn i1 aiσ Deﬁnition 6 For bipartite graph G X Y E x y E x X y Y X Y r perfect matching set edges edges share common vertex vertex incident exactly edge The permanent bipartite graphs adjacency matrix fact counts number perfect matchings graph We ready proof Plurality voting rule Theorem 7 If n m constant Evaluation problem Phard Plurality voting rule Proof Given bipartite graph G X Y E X x1 xr Y y1 yr wish count number perfect matchings construct instance Evaluation problem probability chosen candidate win function number perfect matchings G The voters vertices X plus additional voters x0 w equal weights The candidates vertices Y plus additional candidates y0 We ﬁrst consider case tiebreaking rule lexicographic priority For x X x y E set probability voter x votes candidate y 1 r With remaining probability 1 deg x deg x degree x voter x votes y0 Finally w votes candidate probability 1 x0 votes candidate y0 probability 1 r Consider particular set votes cast voters Voters x0 w choice consider choices voters X Each set choices naturally corresponds collection r edges M X Y cid7 M x y X Y x voted y cid8 note x voted y0 pair included M We wins election iff M perfect matching Suppose M perfect matching candidates Y exactly vote voters X y0 w x0 respectively Thus candidates obtain score wins tiebreaking rule Conversely suppose M perfect matching Then candidate y Y gets vote voter x X voted y0 addition vote y0 surely received x0 In case candidate got vote received vote w Hence win election The probability voters X elect speciﬁc perfect matching r Pra wins election r r PMG r Thus N Hazon et al Artiﬁcial Intelligence 189 2012 118 11 PMG denotes number perfect matchings G Hence answer Evaluation problem gives number perfect matchings The proof random tiebreaking essentially identical case exact matching nec PMG The rest r2 Hence case Pra wins election r r r2 essarily win wins probability 1 proof remains cid2 As kapproval need slightly modify reduction proof Plurality Recall kapproval k ﬁrst candidates scores dont care order order m k candidates care candidate appears k positions Theorem 8 If n m constant Evaluation problem Phard kapproval voting rule ﬁxed k Proof Given bipartite graph G X Y E X x1 xr Y y1 yr wish count number perfect matchings construct instance Evaluation problem proof Theorem 7 The set voters add set dummy candidates D di 1 cid3 cid3 k 1 0 cid3 y j j cid3 r For x X x y E set probability voter x gives point candidates y d1 remaining probability 1 deg x w gives point candidates d1 probability 1 y dk1 y0 probability 1 x0 gives point candidates y0 d1 y0 deg x degree x voter x gives point y0 d1 y0 dk1 r With Finally dk1 y0 y dk1 di 1 r Now candidate di y j di gets number points y j respectively Therefore rest proof essentially identical Plurality rule cid2 We turn Borda Copeland protocols We start simple lemma proof trivial Lemma 9 Let V set voters individual preference order set candidates Suppose orders different preference order voter v exists voter v exact opposite preference order Then cid4 In Borda protocol candidates exact score average score In Copeland protocol pairwise contests tied total 0 score candidates Theorem 10 If n m constant Evaluation problem Phard Borda voting rule W r 1 voters The set X Proof Let G X Y E bipartite graph X x1 xr Y y1 yr wish count number perfect matchings We construct instance Evaluation problem follows There 2r 1 voters composed subsets X consists set X plus additional voter x0 The set W consists r 1 voters w 0 wr All voters equal weights There r 2 candidates C c0 cr special candidate We build theEvaluation instance way perfect matching G corresponds voting scenario voter xi X voter w j W exact reverse preference order In case Lemma 9 candidates score wins lexicographic tiebreaking rule Furthermore Evaluation instance constructed wins voting scenarios correspond perfect matchings G The details follow For ease notation denote j jmodr 1 Deﬁne following set orderings candidate set For 0 r let si ci ci1 cir denote siR reverse order si For x j yi E edge G probability 1r voter x j votes order si With remaining probability 1 deg x j voter x j votes order s0 Voter x0 votes s0 probability 1 For voters W voter w j votes order s jR probability 1 Note particular votes X ﬁrst votes W See Fig 6 example build instance given bipartite graph r 3 r Consider set orders chosen voters Only voters X choice consider votes Each set choices naturally corresponds collection r edges M X Y cid8 cid7 M xi y j X Y xi voted s j We lexicographic tiebreaking wins election iff M perfect matching G Suppose M perfect matching G Then si gets exactly vote voters X However siR receives exactly vote voters W Hence preference order received vote exact opposite order voted In case Lemma 9 wins lexicographic tiebreaking rule Conversely suppose M perfect matching Denote α average total score candidates α r 12 Since α average independent actual choices voters Consider M Since M perfect matching exists order si note receive vote X Wlog assume sr Note 12 N Hazon et al Artiﬁcial Intelligence 189 2012 118 Fig 6 Reduction Permanent Evaluation problem proof Theorems 10 11 orders si cid14 r candidate cr appears candidate cr1 Hence total score cr1 gets voters higher total score cr The voters W hand total candidates C X exact score construction si s symmetric Hence cr1 gets higher total score cr particular case candidates identical total score Thus candidate ci0 gets total score β strictly greater average α On hand score ﬁrst votes W Hence score identical gets perfect matching α votes X Hence win elections The probability voters X elect speciﬁc perfect matching r r Thus Pra wins election r r PMG Hence answer Evaluation problem gives number perfect matchings The proof random tiebreaking instead lexicographic essentially identical proof Plurality cid2 Theorem 11 If n m constant Evaluation problem Phard Copeland voting rule Proof The proof similar Borda protocol uses exact construction Following proof Copeland protocol win iff M deﬁned Borda proof perfect matching Indeed M perfect matching shown vote given preference order vote exact reverse order Thus conditions Lemma 9 hold candidates identical score zero Hence win lexicographic random choice depending protocol Conversely suppose M perfect matching Then exists order si voted Wlog assume sr In orders si cid14 r candidate cr1 appears candidate cr In voter X orders siR cid14 r 1 candidate cr1 appears immediately cr sr1R appears candidate cr Hence candidate c j cr wins pairwise contest c j cr1 In addition cr1 beats cr Hence total cr1 win strictly pairwise contests cr Hence case candidates score exactly 0 Thus average total score necessarily 0 candidate scores 0 On total 0 Thus hand ties pairwise contests ﬁrst votes W X win elections The rest proof identical Borda rule cid2 As Bucklin use slightly different construction This proof assume use speciﬁc tiebreaking rule Theorem 12 If n m constant Evaluation problem Phard Bucklin voting rule Proof Let G X Y E bipartite graph X x1 xr Y y1 yr wish count number perfect matchings We construct instance Evaluation problem follows There 2r 1 voters Bucklin score Bucklin winner r 2 The set voters composed subsets X W r 1 voters The set X consists set X plus additional voter x0 The set W consists r 1 voters w 0 wr All voters equal weights There r 1 regular candidates C c0 cr special candidate j d Additionally r 12 dummy candidates D di y j 1 cid3 cid3 r 0 cid3 j cid3 r N Hazon et al Artiﬁcial Intelligence 189 2012 118 13 We build Evaluation instance way perfect matching G corresponds voting scenario Bucklin wining round r 2 candidate wins Furthermore Evaluation instance constructed voting scenarios Bucklin winning round strictly r 2 candidates C wins The details follow For ease notation denote j jmodr 1 In construction Bucklin wining round equals r 2 ﬁrst r 2 candidates preference order candidates placed arbitrarily For 0 r let si ci d1 For x j yi E dr yi yi edge G probability 1r voter x j votes order si With remaining probability 1 deg x j voter x j votes order s0 Voter x0 votes s0 probability 1 For voters W voter w j votes order t j probability 1 Note order si gives point candidate c C ﬁrst round order ti gives point c C round j 2 cid3 j cid3 r 1 ti ci ci1 cir1 di r Consider set orders chosen voters Only voters X choice consider votes Each set choices naturally corresponds collection r edges M X Y cid8 cid7 M xi y j X Y xi voted s j We wins election iff M perfect matching G Suppose M perfect matching G Then si gets exactly vote voters X For j 1 cid3 j cid3 r 1 score dummy candidate d D round j equals 1 The score candidate c C round j j score round j r 1 Since candidate r 2 points j 1 cid3 j cid3 r 1 Bucklin winning round On hand round r 2 score 2r 1 candidate r 1 points Therefore Bucklin winning round r 2 unique winner Conversely suppose M perfect matching Then exists order si voted Therefore candidate c C score r 2 round r 1 time voters X Then Bucklin winning round equals r 1 On hand score round j 1 cid3 j cid3 r 1 exactly r 1 Thus win elections The probability voters X elect speciﬁc perfect matching r Hence answer Evaluation problem gives number perfect matchings cid2 r Thus Pra wins election r r PMG Note proofs use equal weights voters results hold weighted voters case bounded bounded weights 42 ChanceEvaluation problem Our original deﬁnition Evaluation computationally hard common voting rules Surprisingly weaker question ChanceEvaluation hard simplest voting rule Plurality voters equal weights Theorem 13 If n m constant ChanceEvaluation problem NPcomplete Plurality voting rule voters equal weights wins check c winner Proof The problem clearly NP given voting scenario c polynomial time The NPhardness reduction NPcomplete BinPacking problem given ﬁnite set U items integer size su u U positive integer bin capacity B positive integer k partition U disjoint sets U 1 U 2 Uk sum sizes items U B The instance Chance Evaluation problem follows Every item represented voter item size voters weight We add voter v z weight B 1 Every bin represented candidate add candidate z v z probability 1 vote z voters equal probability vote remaining candidates We look possibility z winner Note voting scenario corresponds packing vice versa voter weight x votes candidate y like placing item size x bin y One item bin voter vote candidate Now suppose tiebreaking rule lexicographic z minimal candidate respect ordering z winner candidates B votes So packing voting scenario z winner The proof random tiebreaking similar weight v z set B cid2 This problem NPcomplete strong sense 24 meaning weights bounded polyn problem remains hard unlike case constant number candidates shown Fortunately Plurality voters equal weights problem solved polynomial time Theorem 14 Even n m constant ChanceEvaluation problem P Plurality voting rule voters equal weights 14 N Hazon et al Artiﬁcial Intelligence 189 2012 118 Fig 7 An example build ﬂow network given set preferences cid4 cid4 E cid4 V 2 cid4 V 2 cid4 V 1 cid4 cid4 s t V 1 Proof We polynomial time algorithm answer ChanceEvaluation problem assuming random tiebreaking The idea similar technique 34 p 176 refer 2221 different use network ﬂows techniques context voting problems Let c candidate trying determine nonzero probability denote number chance winning Count number voters vote c cid4 additional nodes s b Then build ﬂow network G V E contains bipartite graph G t V V 1 node cid4 cid4 1 voter nonzero probability vote candidate j j E candidate c In E s edge capacity 1 nodes V 1 cid4 j E capacity 1 Now ﬁnd maximum ﬂow check edge s node V 1 j E gets b votes residual capacity zero If ﬂow exists represents voting scenario c b candidates b votes algorithm returns yes If voting scenario c votes candidate gets b votes algorithm returns The construction ﬂow network stages algorithm polynomial time ChanceEvaluation problem Plurality P voters equal weights cid4 t edge capacity b nodes V 2 node voter zero probability vote c For V set candidates favored The algorithm lexicographic tiebreaking similar Let Topc according lexicographic tiebreaking For edge v t E v corresponds candidate Topc c set capacity b 1 The rest construction remains If required ﬂow exists represents voting b 1 votes scenario c b candidates b votes algorithm returns yes If voting scenario c gets b 1 votes votes candidate favored c candidate gets b votes Thus algorithm returns cid2 gets b votes candidates favored c cid4 V 2 cid4 Fig 7 shows algorithm builds ﬂow network set preferences Fig 7a In example seek voting scenario candidate D chance win use random tiebreaking We remove voters V 1 V 5 nonzero probability voting D build ﬂow network described Fig 7b In example possible maximal ﬂow assign 1 outgoing edges s edges V 2 A V 3 B V 4 B V 6 C V 7 C A t assign 2 edges B C t Therefore D chance win V 1 V 5 vote D V 2 votes A V 3 V 4 vote B V 6 V 7 vote C For voting rules NPhardness results corollaries 36 This paper considers possiblewinner problem assumed voter correct incomplete model preference order The input problem different voter collection complete preference orders associated probabilities Nevertheless ChanceEvaluation problem ignores exact values probabilities partial orders considered possiblewinner problem polynomial number extensions possiblewinner N Hazon et al Artiﬁcial Intelligence 189 2012 118 15 Table 6 Number iterations function cid5 α α 005 005 005 001 001 001 0001 0001 0001 00001 00001 00001 cid5 005 001 0001 005 001 0001 005 001 0001 005 001 0001 t 271 6764 676386 542 13530 1352974 955 23874 2387384 1384 34578 3457771 subproblem ChanceEvaluation It turns voting rules possiblewinner problem NPcomplete number undetermined pairs constant implies number extensions bounded We obtain Proposition 15 If n m constant ChanceEvaluation problem NPcomplete kapproval Borda Copeland Buck lin Maximin voting rules voters unweighted3 43 Monte Carlo approximation Computing exact answer Evaluation ChanceEvaluation problems hard cases However utilize underlying probabilities achieve approximate solution Evaluation problem The idea use statistical approach sample according given probabilities estimate true winning probability The algorithm follows For voter sample preference order according given distribution obtaining voting scenario Since voters choices independent process equivalent sampling voting scenario according voting scenarios distribution know We calculate winner voting scenario given voting rule repeat process t times Given speciﬁc candidate c interested winning probability denote p This probability approximately number sampled voting scenarios c wins divided t denote ratio ˆp From perspective c iteration possible outcomes wins candidate wins The winning probability c p iteration iterations statistically independent Therefore distribution p binomial distribution maximum likelihood estimator p ˆp This estimator known unbiased binomial distribution We build binomial conﬁdence interval relies approximating binomial distribution normal distribution4 following formula cid10 cid9 P ˆp ˆp1 ˆp t Z1 α 2 cid3 p cid3 ˆp cid10 cid11 ˆp1 ˆp t Z1 α 2 1 α 1 Z1 α distance true winning probability require given cid5 2 percentile standard normal distribution α chosen probability error For bounding 2 1 α p ˆp cid3 cid5 Combining 1 2 number required iterations cid9 cid12 t cid2 cid11 2 ˆp1 ˆpZ1 α cid5 2 2 3 winning probability ˆp t iterations probability 1 α cid5 away true probability p Table 6 shows required number iterations t function cid5 α assuming ˆp1 ˆp maximal ˆp 05 3 This result holds Ranked Pairs Voting trees discuss rules paper 4 We note explicit bounds Chernoff bounds 2 However samples required 16 N Hazon et al Artiﬁcial Intelligence 189 2012 118 5 Related work As noted introduction computational aspects voting recently received great deal attention leading emergence new research area known computational social choice 20 Within computational social choice community research considered complexity manipulating voting procedures deciding agent optimally cast vote furtherance preferences The complexity manipulation studied assumption number candidates unbounded 4318 assumption constant number candidates 1619 However computational studies voting assume perfect information voter preferences votes discussed introduction unrealistic assumption real world settings The limiting assumption perfect information driven researchers look different realistic model In 27 later 30 assumed voter correct incomplete model voters preference relation For incomplete information setting 2730 considered questions completion incompletely known preferences particular desired candidate winner This question known possiblewinner problem particularly important strong connection preference elicitation 17 manipulation 27 This imperfect information model investigated sequential majority voting 2829 scoring rules 897 common voting rules 36 The complexity possiblewinner problem studied cases certain parameters ﬁxed number candidates number voters total number undetermined candidate pairs 10 However model utilize prior knowledge voters preferences It pessimistic nature assumes missing data completely unknown ignores probabilistic estimation voters preferences learned voting history Of course little known voters preferences model appropriate probabilistic model use paper5 Moreover ChanceEvaluation problem ignores exact values probabilities close settings possiblewinner problem The connections problems illustrated Section 42 hardness results corollaries 36 A recent paper 2 studies computational complexity counting version possiblewinner problem They prove Phardness results Plurality Veto provide randomized approximation algorithm voting rules polynomialtime computable Their algorithm ﬁnd probability designated candidate wins assuming completion incompletely preferences chosen uniformly random The previous work closely related concerns 16 uses probability distribution votes capture imperfect information The results 16 derived restricted model probability distributions A key result 16 manipulation voting rule hard complete information provided hard evaluate candidates winning probability protocol uncertainty votes However demonstrated Section 3 hardness uncertain case holds weights bounded polyn n number voters Conitzer Sandholm 16 consider unweighted voters case probability distribution allows perfect correlations voters actually simulates weights voters This case 32 proves results connection incomplete preferences settings settings probability distribution votes uses perfectly correlated votes Probabilities model imperfect information 26 31 papers assume known electorate probability given candidate beat These papers use data investigate extent possible rig agenda election competition favor particular candidate 6 Conclusions future work In situations desirable use voting rules aggregate preferences different agents order social choice If preference orders agents perfectly known practical voting rule computation ally easy calculate candidate win However perfect information assumption realistic know instead probability voter certain preference order In work investigated problem computing probability candidate win election given imperfect information model We showed important distinction case number candidates constant case bounded In ﬁrst case algorithm runs polynomial time compute probability candidate winning voting rules matter voter weights equal However second case Phard compute proved Plurality kapproval Borda Copeland Bucklin voting rules Even check didate chance winning Plurality voting rule NPcomplete voter weights equal For case equal remains NPcomplete kapproval Borda Copeland Bucklin Maximin rules gave polynomial time algorithm computing candidate chance win Plurality protocol We 5 In addition incomplete information model uses succinct representation probabilistic model However number candidates constant succinct representation equal representation terms time space complexity N Hazon et al Artiﬁcial Intelligence 189 2012 118 17 gave simple Monte Carlo algorithm able approximately compute probability candidate winning setting error small desired For future work like extend current analysis voting rules including multiwinner protocols Even current protocols considered open question For example complexity Evaluation unweighted voters Maximin voting rule ChanceEvaluation unweighted voters STV rule Another extension consider deﬁne analyze general imperfect knowledge model combines model 27 incomplete preferences model probabilistic estimate voters prefer ences We like improve results current voting rules prove problem Phard NPcomplete useful approximation algorithm prove There promising direction investigate use parameterized complexity paradigm 23 analyze problem We demonstrated bound parameters number candidates Evaluation problem easy solve problem belongs XP It interesting check restrictions help example number different probability distributions bounded constant Acknowledgements We gratefully acknowledge detailed helpful comments anonymous referees enabled considerably improve paper We thank Efrat Manisterski help developing algorithm Section 3 This work supported Israel Ministry Science Technology grant 36797 This paper subsumes earlier conference paper 25 Appendix A Correctness proof Algorithm 1 Theorem 16 Given imperfect information voting domain consisting set candidates C ﬁnite set voters V set preferences proﬁles probability distribution set preference proﬁles voter Algorithm 1 enumerates possible voting scenarios polynomial time number candidates considered constant Proof Let VRi set voting results algorithm generates iteration We prove algorithm enu merates relevant voting scenarios induction number voters If voter algorithm generate l voting results voters preferences Clearly possible voting scenarios voter Otherwise consider nth iteration Every voting scenario n voters consist voting scenario n 1 voters plus preference order nth voter By inductive hypothesis possible voting scenarios n 1 voters summarized VRn1 Thus combining voting results VRn1 preference order nth voter generates VRn summarizes voting scenarios n voters required As running time total number voting results polynomial n m constant voting result O l operations generating voting results Generating voting results takes polynomial time deﬁnition Thus algorithms running time polynomial n l cid2 References 1 KJ Arrow AK Sen K Suzumura Eds Handbook Social Choice Welfare vol 1 Elsevier Amsterdam 2002 2 Y Bachrach N Betzler P Faliszewski Probabilistic possible winner determination Proceedings TwentyFourth AAAI Conference Artiﬁcial Intelligence AAAI2010 2010 pp 697702 3 JJ Bartholdi J Orlin Single transferable vote resists strategic voting Social Choice Welfare 8 4 1991 341354 4 JJ Bartholdi CA Tovey MA Trick The computational diﬃculty manipulating election Social Choice Welfare 6 1989 227241 5 JJ Bartholdi CA Tovey MA Trick Voting schemes diﬃcult tell won election Social Choice Welfare 6 1989 157165 6 D Baskins Judy IV httpjudysourceforgenet 2001 7 D Baumeister J Rothe Taking ﬁnal step dichotomy possible winner problem pure scoring rules Lisbon Portugal 2010 pp 1019 1020 8 N Betzler B Dorn Towards dichotomy ﬁnding possible winners elections based scoring rules Proceedings ThirtyFourth In ternational Symposium Mathematical Foundations Computer Science MFCS2009 Lecture Notes Computer Science LNCS vol 5734 SpringerVerlag 2009 pp 124136 9 N Betzler B Dorn Towards dichotomy possible winner problem elections based scoring rules Journal Computer System Sciences 76 8 2010 812836 10 N Betzler S Hemmann R Niedermeier A multivariate complexity analysis determining possible winners given incomplete votes Proceedings TwentyFirst International Joint Conference Artiﬁcial Intelligence IJCAI2009 2009 pp 5358 11 D Black On rationale group decisionmaking Journal Political Economy 56 1 1948 2334 12 D Black Ed The Theory Committees Elections Cambridge University Press Cambridge 1958 13 SJ Brams PC Fishburn Voting procedures KJ Arrow AK Sen K Suzumura Eds Handbook Social Choice Welfare vol 1 Elsevier Amsterdam 2002 Chapter 4 14 Y Chevaleyre J Lang N Maudet G RavillyAbadie Compiling votes subelectorate Proceedings TwentyFirst International Joint Conference Artiﬁcial Intelligence IJCAI2009 2009 pp 97102 15 V Conitzer Computational aspects preference aggregation PhD thesis Department Computer Science Carnegie Mellon University 2006 16 V Conitzer T Sandholm Complexity manipulating elections candidates Proceedings Eighteenth National Conference Artiﬁcial Intelligence AAAI2002 2002 pp 314319 18 N Hazon et al Artiﬁcial Intelligence 189 2012 118 17 V Conitzer T Sandholm Vote elicitation complexity strategyproofness Proceedings Eighteenth National Conference Artiﬁcial Intel ligence AAAI2002 2002 pp 392397 18 V Conitzer T Sandholm Universal voting protocol tweaks manipulation hard Proceedings Eighteenth International Joint Conference Artiﬁcial Intelligence IJCAI2003 2003 pp 781788 19 V Conitzer T Sandholm J Lang When elections candidates hard manipulate Journal ACM 54 3 2007 133 20 U Endriss J Lang Eds Proceedings First International Workshop Computational Social Choice Theory 2006 COMSOC2006 ILLC University Amsterdam Amsterdam The Netherlands 2006 21 P Faliszewski Nonuniform bribery Proceedings Seventh International Joint Conference Autonomous Agents Multiagent Systems AAMAS2008 2008 pp 15691572 22 P Faliszewski E Hemaspaandra LA Hemaspaandra J Rothe Llull Copeland voting broadly resist bribery control Proceedings TwentySecond AAAI Conference Artiﬁcial Intelligence AAAI2007 2007 pp 724730 23 J Flum M Grohe Eds Parameterized Complexity Theory Springer 2006 24 MR Garey DS Johnson Computers Intractability A Guide Theory NPCompleteness WH Freeman New York 1979 25 N Hazon Y Aumann S Kraus M Wooldridge Evaluation election outcomes uncertainty Proceedings Seventh International Joint Conference Autonomous Agents Multiagent Systems AAMAS2008 2008 pp 959966 26 N Hazon PE Dunne S Kraus M Wooldridge How rig elections competitions Proceedings Second International Workshop Computational Social Choice COMSOC2008 2008 pp 301312 27 K Konczak J Lang Voting procedures incomplete preferences Proceedings Multidisciplinary IJCAI05 Workshop Advances Prefer ence Handling MPREF 2005 28 J Lang MS Pini F Rossi D Salvagnin KB Venable T Walsh Winner determination voting trees incomplete preferences weighted votes Autonomous Agents MultiAgent Systems 25 1 2012 130157 29 MS Pini F Rossi KB Venable T Walsh Dealing incomplete agents preferences uncertain agenda group decision making sequential majority voting Principles Knowledge Representation Reasoning Proceedings Eleventh International Conference KR2008 2008 pp 571578 30 MS Pini F Rossi KB Venable T Walsh Incompleteness incomparability preference aggregation complexity results Artiﬁcial Intelli gence 175 78 2011 12721289 31 T Vu A Altman Y Shoham On complexity schedule control problems knockout tournaments Proceedings Eighth International Joint Conference Autonomous Agents Multiagent Systems AAMAS2009 2009 pp 225232 32 T Walsh Uncertainty preference elicitation aggregation Proceedings TwentySecond AAAI Conference Artiﬁcial Intelligence AAAI 2007 2007 pp 38 33 T Walsh Where hard manipulation problems The phase transition manipulating veto rule Proceedings TwentyFirst International Joint Conference Artiﬁcial Intelligence IJCAI2009 2009 pp 324329 34 DB West Ed Introduction Graph Theory 2nd edition Prentice Hall 2001 35 L Xia V Conitzer Compilation complexity common voting rules Proceedings TwentyFourth AAAI Conference Artiﬁcial Intelligence AAAI2010 2010 pp 915920 36 L Xia V Conitzer Determining possible necessary winners common voting rules given partial orders Journal Artiﬁcial Intelligence Research 41 2011 2567