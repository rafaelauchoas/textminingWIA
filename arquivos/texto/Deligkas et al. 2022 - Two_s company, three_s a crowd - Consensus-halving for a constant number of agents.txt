Artiﬁcial Intelligence 313 2022 103784 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Twos company threes crowd Consensushalving constant number agents Argyrios Deligkas Royal Holloway University London United Kingdom b University Edinburgh United Kingdom c University Oxford United Kingdom Alexandros Hollender c Aris FilosRatsikas b r t c l e n f o b s t r c t Article history Received 29 July 2021 Received revised form 19 April 2022 Accepted 7 September 2022 Available online 9 September 2022 Keywords Consensushalving Fair division Computational complexity Query complexity RobertsonWebb We consider εConsensusHalving problem set heterogeneous agents aim dividing continuous resource necessarily contiguous portions simultaneously consider approximately value ε This problem recently shown PPAcomplete n agents n cuts simple valuation functions In quest understand root complexity problem consider setting constant number agents consider computational complexity query complexity problem For agents monotone valuation functions dichotomy agents problem polynomialtime solvable agents PPA complete Similarly monotone agents problem solved polynomiallymany queries agents provide exponential query complexity lower bounds These results enabled interesting connection monotone BorsukUlam problem independent For agents general valuations problem PPAcomplete admits exponential query complexity lower bounds agents 2022 The Authors Published Elsevier BV This open access article CC BY license httpcreativecommonsorglicensesby40 1 Introduction The topic fair division founded work Steinhaus 64 centre literature economics mathematics recently science artiﬁcial intelligence Classic examples include wellknown fair cake cutting problem division divisible resources 43 20 58 fair division indivisible resources 19 The earlier works economics mathematics mainly concerned questions fair solutions exist constructively ﬁnitetime protocols In recent literature science plethora works concerned computational complexity ﬁnding solutions providing polynomialtime algorithms proving computational hardness results Currently exaggeration fair division vibrant important topics intersection areas This paper participant 2021 ACM Conference Economics Computation EC ForwardtoJournal Program Corresponding authors Email addresses ArgyriosDeligkasrhulacuk A Deligkas ArisFilosRatsikasedacuk A FilosRatsikas AlexandrosHollendercsoxacuk A Hollender httpsdoiorg101016jartint2022103784 00043702 2022 The Authors Published Elsevier BV This open access article CC BY license httpcreativecommonsorglicensesby40 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 Besides classic fair division settings mentioned wellknown problem ConsensusHalving problem origins date 1940s work Neyman 56 In problem set n agents different heterogeneous valuation functions unit interval 0 1 aim ﬁnding partition interval pieces labelled n cuts total value agent portion labelled portion labelled Very like wellknown problems fair division existence solution proven ﬁxedpoint theorems particular BorsukUlam theorem 18 seen generalisation HobbyRice Theorem 48 The problem applications context wellknown Necklace Splitting problem Alon 3 studied conjunction problem 544 Other applications highlighted Simmons Su 63 ﬁrst study problem isolation For example consider families dividing piece land regions member family considers split equal Another example 1994 Convention Law Sea 20 regards protection developing countries event industrialised nation planning resources international waters In cases representative developing nations reserves half seabed future use consensushalving solution correspond partition seabed portions developing nations consider equal value Simmons Su 63 fact studied approximate version ConsensusHalving coined εConsensusHalving problem requirement total value agent portion labelled portion labelled approximately additive parameter ε For version Simmons Su 63 provided constructive solution exponentialtime algorithm The εConsensusHalving problem received considerable attention literature science past years proven ﬁrst natural PPAcomplete problem 38 problem polynomialsized circuit explicitly deﬁnition answering decade old open question 4757 Additionally FilosRatsikas Goldberg 39 reduced problem establish PPA completeness Necklace Splitting thieves PPAcompleteness results provided ﬁrst deﬁnitive evidence intractability classic problems establishing instance solving hard ﬁnding Nash equilibrium strategic game 2629 FilosRatsikas et al 41 improved results εConsensusHalving problem showing problem remains PPAcomplete restricts attention small classes agents valuations piecewise uniform valuations valuation blocks Very recently εConsensus Halving problem shown PPAcomplete constant ε ε 15 32 This result falls general umbrella imposing restrictions structure problem explore computational hardness persists obtain polynomialtime algorithms FilosRatsikas et al 41 applied approach axis valuation functions considering general number agents similarly 3839 In paper different approach restrict number agents constant This line theoretical work fair division concerned solutions small number agents1 relevant practical standpoint fair division participants common We believe investigations necessary order truly understand computational complexity problem To end state ﬁrst main question What computational complexity εConsensusHalving constant number agents Since number agents ﬁxed type computational hardness originate structure valuation functions We remark existence results εConsensusHalving fairly general particular require assumptions like additivity monotonicity valuation functions For reason sensible approach start valuations general possible hardness easier establish gradually constrain domain speciﬁc classes eventually polynomialtime solvability possible Indeed paper conceptually similar Deng et al 34 studied computational complexity contiguous envyfree cakecutting problem2 proved problem PPADcomplete agents agents ordinal preferences possible pieces These types preferences induce structure valuation functions general possible In contrast authors showed agents monotone valuations problem polynomial time solvable leaving case agents open problem We adopt similar approach paper εConsensusHalving manage completely settle complexity problem agents monotone valuations results highlighted Section 11 Another relevant question surprisingly overlooked related literature query complexity problem In regime algorithm interacts agents queries asking provide values different parts interval 0 1 complexity measured number queries required ﬁnd εapproximate solution This brings second main question 1 For example existence bounded protocols cakecutting 3 agents known recently 89 protocols 2 3 agents known 1960s 2061 2 This version classic envyfree cakecutting problem requires agent receives single connected piece 2 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 Fig 1 A classiﬁcation εConsensusHalving constant number n agents terms increasing generality valuation functions What query complexity εConsensusHalving constant number agents We develop appropriate machinery allows answer main questions time In nutshell positive results design algorithms run polynomial time recast querybased algorithms use polynomial number queries For negative results construct reductions hard computational problems allow simultaneously obtain computational hardness results query complexity lower bounds 11 Our results In section list main results computational complexity query complexity εConsensusHalving problem Computational Complexity We start computational complexity problem constant number agents We prove following main results parameterised number agents b structure valuation functions For single agent general valuations problem polynomialtime solvable The result applies case number agents identical general valuations For agents general valuations problem PPAcomplete For agents monotone valuations problem polynomialtime solvable This result holds agents general valuation For agents monotone valuations problem PPAcomplete Finally εConsensusHalving problem 2 agents coincides wellknown εPerfect Division problem cakecutting 2122 naturally results imply εPerfect Division 2 agents monotone valuations polynomial time PPAcomplete 2 agents general valuations Before proceed offer brief discussion different cases covered results The distinction number agents straightforward For valuation functions consider mainly general valuations monotone valuations Note functions additive meaning value agent union disjoint intervals b c d necessarily sum values intervals For monotone valuations requirement subsets I I I general valuations requirement 0 1 I I agent values I cid3 cid3 cid3 We remark agents piecewise constant valuations valuations 38 obtain PPA completeness problem agents problem solved straightforwardly polynomial time constant number agents linear programming Appendix A In terms classiﬁcation complex ity problem order increasing generality valuation functions observation provides lower bound PPAhardness results monotone valuations provide upper bound Fig 1 While precise point phase transition identiﬁed results considerable progress goal Query Complexity Besides computational complexity problem interested query complexity In setting envision algorithm interacts agents set queries aims compute solution εConsensusHalving minimum number queries possible In particular query question algorithm agent subset 0 1 responds value set We provide following results L denotes Lipschitz parameter valuation functions number agents identical general valuations cid2 log L For single agent general valuations query complexity problem cid3 ε cid5 cid4cid2 cid3n1 L ε cid4 log2 L For agents monotone valuations query complexity problem O ε For n 2 agents general valuations query complexity problem cid3 cid5 cid3 The result applies This result holds agents general valuation 3 For n 3 agents monotone valuations query complexity problem cid4 Artiﬁcial Intelligence 313 2022 103784 cid4cid2 cid5 cid3n2 L ε A Deligkas A FilosRatsikas A Hollender cid4cid2 cid5 cid3n1 O L ε To results context remark studying query complexity problem input consists error parameter ε Lipschitz parameter L given binary representation In sense constant k cid3logkLε number queries polynomial size input On contrary cid3Lε number queries exponential size input Not surprisingly PPAhardness results rise exponential query complexity lower bounds algorithms transformed querybased algorithms polynomial query complexity We remark connection query complexity analysis fact quantitative provide tight tight bounds query complexity function number agents n general monotone valuation functions Finally case monotone valuations consider expressive query model appropriate ex tension wellknown RobertsonWebb query model 6167 predominant query model literature fair cakecutting 20 refer extension Generalised RobertsonWebb GRW query model We bounds extend model logarithmic factors 12 Related work As mentioned introduction origins ConsensusHalving problem traced 1940s work Neyman 56 studied generalisation problem k labels instead proved existence solution valuation functions probability measures constraint number cuts obtain solution The existence theorem labels known HobbyRice Theorem 48 studied extensively context famous Necklace Splitting problem 3544 In fact proofs existence Necklace Splitting thieves established ConsensusHalving problem time referred Continuous Necklace Splitting 3 The term ConsensusHalving coined Simmons Su 63 studied continuous problem isolation provided constructive proof existence holds general valuation functions including valuation functions consider paper Interestingly proof Simmons Su 63 reduces problem ﬁnding edges complementary labels triangulated nsphere labelled prescribed Tuckers lemma fundamental result topology While strictly reduction sense computational complexity ideas 63 certainly paved way subsequent work problem science The ﬁrst computational results obtained FilosRatsikas et al 40 proved associated computational problem εConsensusHalving lies PPA adapting structive proof Simmons Su 63 problem PPADhard n agents piecewise constant valuation functions FilosRatsikas Goldberg 38 proved problem fact PPAcomplete establishing ﬁrst time existence natural problem complete PPA problem contain polynomialsized circuit ex plicitly deﬁnition answering longstanding open question Papadimitriou 57 In followup paper 39 PPAcompleteness ConsensusHalving prove Necklace Splitting problem thieves PPAcomplete Very recently FilosRatsikas et al 41 strengthened PPAhardness result case simple valuation functions piecewise constant valuations blocks value Deligkas et al 31 studied computational com plexity exact version problem obtained results membership newly introduced class BU BorsukUlam 18 computational hardness wellknown class FIXP Etessami Yannakakis 36 Batziou et al 12 showed corresponding strong approximation problem measures represented algebraic circuits complete BU A version ConsensusHalving divisible items studied Goldberg et al 46 proved problem polynomialtime solvable additive utilities PPADhard slightly general utilities Very recently Deligkas et al 30 showed PPAcompleteness related Pizza Sharing problem 50 reduction ConsensusHalving Importantly aforementioned results apply case constant number agents prior paper completely unexplored Additionally works consider query complexity problem A recent work 4 studies εConsensusHalving hybrid computational model version paper includes query access valuations contrary paper investigations targeted constant number agents agents additive valuation functions A relevant line work concerned query complexity fair cakecutting 2059 related markedly differ ent fairdivision problem Conceptually closest paper Deng et al 34 study computational complexity query complexity contiguous envyfree cakecutting agents general3 monotone valu ations For case authors obtain polynomialtime algorithm agents leave open complexity 3 More accurately Deng et al 34 prove impossibility results ordinal preferences possible division cake agent speciﬁes piece prefers In particular deﬁne valuation functions consistent preferences value agent piece depend way rest cake divided agents 4 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 problem agents In case εConsensusHalving completely settle computational complexity problem agents monotone valuations In literature fair cakecutting related research 6892021 focused wellknown RobertsonWebb RW query model agents interact protocol types queries evaluation queries eval cut queries cut As suggests query model Robertson Webb 6061 work Woeginger Sgall 67 instrumental formalising form today Given conceptual similarity fair cakecutting ConsensusHalving certainly makes sense study problem query model fact queries Alon Graur 4 essentially RW queries As Section 6 bounds qualitatively robust migrating expressive model preserved logarithmic factors Related investigation work Brânzei Nisan 21 settings study problem εPerfect Division stipulates partition cake n pieces n agents interprets pieces approximate equal value ε For case n 2 problem coincides εConsensusHalving interpret results n 2 extensions results 21 additive valuations case monotone valuations problem solvable polynomiallymany queries case general valuations problem admits exponential query complexity lower bounds Besides aforementioned results plethora works science artiﬁcial intelligence related computational aspects fair cake cutting fair division general 210141723273545495262 2 Preliminaries In εConsensusHalving problem set n agents valuation functions v simply valuations interval 0 1 goal ﬁnd partition interval subintervals labelled n cuts This partition satisfy agent total value union subintervals I labelled total value union subintervals I labelled ε v iI v iI ε In paper assume n constant inputs problem ε valuation functions v We interested fairly general valuation functions intuitively functions mapping measurable subsets A 0 1 nonnegative real numbers Formally let cid50 1 denote set Lebesguemeasurable subsets interval 0 1 λ cid50 1 0 1 Lebesgue measure We consider valuation functions v cid50 1 R0 interpretation agent value v A subset A cid50 1 resource Similarly 411212234 require valuation functions Lipschitzcontinuous Following 34 valuation function v said Lipschitz continuous Lipschitz parameter L 0 A B cid50 1 holds v A v iB L λ Acid9B Here cid9 denotes symmetric difference Acid9B A B B A Valuation Classes We particularly interested following valuation classes terms decreasing gener ality General valuations restriction functions v Monotone valuations v A v A Intuitively type function comparing sets subset agent smaller value set contains cid3 Lebesguemeasurable subsets A A A A Additive valuations v function individual intervals 0 1 R0 set intervals I holds v iI II v iI Note v additive valuation function fact measure We prove results type valuation function paper deﬁne reference comparison Fig 1 cid6 cid3 cid3 Normalisation We interested valuation functions satisfy standard normalisation properties A valuation function v normalised following properties hold 1 v A 0 1 A cid50 1 2 v 0 v i0 1 1 In words require agents values lie 0 1 value interval normalised 1 These standard assumptions literature problem additive valuations 3 related problem fair cakecutting 59 We consider normalised valuation functions lower bounds hardness results upper bounds polynomialtime algorithms impose normalisation makes sets results stronger 5 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 With regard valuation classes deﬁned referring normalised versions normalised general valuations normalised monotone valuations Input models Given fairly general nature valuation functions need specify manner accessed algorithm εConsensusHalving Since interested computational complexity query complexity problem assume following standard ways accessing functions In blackbox model valuation functions v arbitrary functions accessed queries referred oracle calls A query function v inputs Lebesguemeasurable subset A intuitively set subintervals 0 1 outputs v A R0 This input model appropriate studying query complexity problem complexity measured number queries valuation function v We consider following weaker version blackbox model use query complexity upper bounds making stronger In weak blackbox model input valuation function v set I intervals obtained n cuts n number agents In whitebox model valuation functions v polynomialtime algorithms mapping sets intervals non negative rational numbers These polynomialtime algorithms given explicitly input including Lipschitz parameter L4 This input model appropriate studying computational complexity problem complexity measured usual running time algorithm We provide formal deﬁnitions problem blackbox whitebox model Note Lipschitz parameter L input problem appear bounds obtain Some previous works L bounded constant result appear bounds Deﬁnition 1 εConsensusHalving blackbox model For constant n 1 problem εConsensusHalving n agents deﬁned follows Input ε 0 Lipschitz parameter L query access functions v Output A partition 0 1 sets intervals I I agent holds v iI v iI ε n cuts Deﬁnition 2 εConsensusHalving whitebox model For constant n 1 problem εConsensusHalving n agents deﬁned follows Input ε 0 Lipschitz parameter L polynomialtime algorithms v Output A partition 0 1 sets intervals I I agent holds v iI v iI ε n cuts Terminology When valuation functions normalised refer problem εConsensusHalving n normalised agents When valuation functions monotone refer problem εConsensusHalving n monotone agents If conditions true use term εConsensusHalving n normalised monotone agents 21 BorsukUlam Tucker For PPAhardness results query complexity lower bounds reduce wellknown problem computational version BorsukUlam Theorem 18 states continuous function F Sn Rn pair antipodal points x x mapped point There equivalent versions problem 53 provide deﬁnition appropriate purposes In fact include optional properties function F deﬁnition map properties valuation functions v construct reductions subsequent sections Speciﬁcally impose conditions normalisation monotonicity correspond normalised valuation functions lower boundshardness results Section 4 normalised monotone valuation functions lower boundshardness results Section 5 Let Bn 1 1n let Bn denote boundary As require functions consider Lipschitzcontinuous We F Bn1 Bn Lipschitzcontinuous parameter L cid12F x F ycid12 L cid12x ycid12 x y Bn1 cid12xcid12 maxi xi 4 To avoid introducing technical details refer Appendix B fully formal deﬁnition 6 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 Deﬁnition 3 nDBorsukUlam For constant n 1 problem nDBorsukUlam deﬁned follows Input ε 0 Lipschitz parameter L function F Bn1 Bn Output A point x Bn1 cid12F x F xcid12 ε Optional Properties Normalisation cid2 F 1 1 1 1 1 1 cid2 F x F x x Bn1 Monotonicity cid2 If x y F x F y x y Bn1 denotes coordinatewise comparison In normalised nDBorsukUlam problem F normalised instead ask point x Bn1 cid12F xcid12 ε By fact F odd function F x F x x Bn1 easy equivalent cid12F x F xcid12 ε2 We use term normalised monotone nDBorsukUlam refer problem normalisation monotonicity properties satisﬁed F In blackbox version nDBorsukUlam query value function F point x Bn1 In whitebox version problem given polynomialtime algorithm computes F Since number inputs F ﬁxed assume given arithmetic circuit n 1 inputs n outputs computes F Following related literature 28 consider circuits use arithmetic gates max min rational constants5 Another related problem computational version Tuckers Lemma 66 Tuckers lemma discrete analogue BorsukUlam theorem computational counterpart nDTucker deﬁned Deﬁnition 4 nDTucker For constant n 1 problem nDTucker deﬁned follows Input grid size N 2 labelling function cid8 Nn 1 2 n antipodally antisymmetric point p boundary Nn cid8p cid8p pi Output Two points p q Nn cid8p cid8q cid12p qcid12 1 N 1 pi In blackbox version problem query labelling function point p Nn retrieve label In whitebox version cid8 given form Boolean circuit usual gates In whitebox model nDTucker recently proven PPAhard n 2 Aisenberg et al 1 membership problem PPA known 57 Theorem 21 157 For constant n 2 nDTucker PPAcomplete The computational class PPA deﬁned Papadimitriou 57 subclasses class TFNP 54 class problems guaranteed solution veriﬁable polynomial time PPA deﬁned respect graph exponential size given implicitly input use circuit outputs neighbours given vertex goal ﬁnd vertex odd degree given vertex input Given close connection Tuckers Lemma BorsukUlam Theorem PPAhardness appropri ate computational version BorsukUlam follows 1 However apply version nDBorsukUlam deﬁned especially considers additional properties function F required normalisation monotonicity discussed earlier We reduce nDTucker version nDBorsukUlam obtain PPA hardness normalised monotone version imply PPAhardness εConsensusHalving main reduction Section 3 In blackbox model Deng et al 33 building results Chen Deng 25 proved query complexity lower bounds upper bounds nDTucker cid2 Theorem 22 33 For constant n 2 query complexity nDTucker cid3 Nn1 cid3 We remark Deng et al 33 use version nDTucker slightly different deﬁned results apply version 5 Formally speaking circuits need wellbehaved certain sense 37 It easy check circuits construct paper property 7 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 Remark 1 Some connections aforementioned problems nDBorsukUlam nDTucker εConsensus Halving known previous literature First nDBorsukUlam nDTucker known computationally equivalent Papadimitriou 57 Aisenberg et al 1 technically speaking aforementioned papers proved result formally deﬁned nDBorsukUlam formally Yet implicit reduction problems insuﬃcient purposes order achieve results ConsensusHalving need version nDBorsukUlam exhibits properties described Deﬁnition 3 normalisation pri marily monotonicity Indeed proving PPAcompleteness monotone nDBorsukUlam main technical result work In terms completeness ConsensusHalving works FilosRatsikas Goldberg 3839 establish reductions nDTucker crucially reductions whitebox access Boolean circuit encodes labelling function On contrary reductions blackbox Section 22 allows obtain computational complexity results query complexity bounds time Also importantly previous reductions work constant number agents 22 Eﬃcient blackbox reductions The reductions construct nDTucker nDBorsukUlam εConsensusHalving blackbox reductions allow obtain query complexity lower bounds εConsensusHalving blackbox model given corresponding lower bounds Theorem 22 For upper bounds reduce directly εConsensusHalving nDTucker blackbox reduction Roughly speaking6 blackbox reduction Problem A Problem B procedure answer oracle calls queries instance Problem B oracle instance Problem A solution instance Problem B yields solution instance Problem A For example blackbox reduction nDBorsuk Ulam εConsensusHalving procedure simulates instance problem accessing function F problem number times solution εConsensusHalving easily translated solution nDBorsukUlam The blackbox comes fact type reduction need know structure functions v εConsensusHalving F nDBorsukUlam In order prove lower bounds query complexity Problem B suﬃces construct blackbox reduction Problem A query complexity lower bounds known obtained bounds depend number k oracle calls input Problem A needed answer oracle input Problem B A blackbox reduction eﬃcient k constant query complexity lower bounds Problems A B asymptotic order To obtain upper bounds query complexity construct reduction opposite direction Problem B Problem A assuming query complexity upper bounds Problem A known Ideally like use reduction obtain computational complexity results whitebox model For possible procedure described actually polynomialtime algorithm Slightly abusing terminology use term eﬃcient reduction whitebox model Deﬁnition 5 We blackbox reduction Problem A Problem B eﬃcient blackbox model uses constant number queries oracle calls function oracle Problem A query oracle function Problem B whitebox model condition holds reduction polynomialtime algorithm Concretely case reductions eﬃcient blackbox reductions allowing obtain PPA completeness results query complexity bounds matching problems reduce fromto We remark reductions constructed proving PPAhardness problem previous works nonconstant number agents 383941 blackbox reductions implications query complexity problem 3 Blackbox reductions consensushalving In section develop main machinery proving PPAcompleteness results query complexity upper lower bounds εConsensusHalving We summarise general approach obtaining positive negative results For impossibility results computational hardness results whitebox model query complexity lower bounds blackbox model construct eﬃcient blackbox reduction nDBorsukUlam εConsensus Halving n agents Proposition 31 This reduction preserve optional properties Deﬁnition 3 meaning instance nDBorsukUlam normalised respectively monotone valuation functions corresponding 6 To exposition clean provide formal deﬁnitions concepts standard refer reader related works 1351 details 8 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 instance εConsensusHalving normalised respectively monotone This allow subsequent sec tions reduce problem proving impossibility results εConsensusHalving proving impossibility results versions nDBorsukUlam properties We obtain results reductions nDTucker n 2 known PPAhard Theorem 21 admit exponential query complexity lower bounds Theo rem 22 For positive results membership PPA whitebox model query complexity upper bounds black box model construct eﬃcient blackbox reduction εConsensusHalving nDTucker Proposition 32 We remark similar reduction exists related literature 42 applied case additive valuation functions The extension case general valuations follows lines provide completeness We note positive results results general agent monotone agents obtained reductions directly design polynomialtime algorithms whitebox model algorithms polynomial query complexity blackbox model Related discussion following propositions Their proofs presented sections Proposition 31 There eﬃcient blackbox reduction normalised monotone nDBorsukUlam normalised monotone εConsensusHalving Proposition 32 There eﬃcient blackbox reduction εConsensusHalving nDTucker 31 Proof Proposition 31 Description reduction Let n 1 ﬁxed integer Let ε 0 let F Bn1 Bn Lipschitzcontinuous function Lipschitz parameter L We construct valuation functions v 1 vn ConsensusHalving instance Let R1 R2 Rn1 denote partition interval 0 1 n 1 subintervals equal length R j j1 n1 j n1 j n 1 For A cid50 1 deﬁne x A Bn1 1 1n1 x A j 2n 1 λ A R j 1 j n 1 Recall λ denotes Lebesgue measure interval 0 1 Note λ A R j 0 1 n1 x A j 1 1 Fig 2 visualisation For n valuation function v ith agent deﬁned v A F ix A 1 2 A cid50 1 F Bn1 1 1 ith output F Note v A 0 1 F ix A 1 1 Lipschitzcontinuity For A B cid50 1 holds v A v iB 1 2 L 2 F ix A F ixB 1 2 cid12F x A F xBcid12 cid12x A xBcid12 n 1 L max jn1 λ A R j λB R j n 1 L max jn1 λ Acid9B R j n 1 L λ Acid9B Thus v Lipschitzcontinuous Lipschitz parameter n 1 L Correctness Now consider ε2ConsensusHalving v 1 vn Namely let I I partition 0 1 n cuts v iI v iI ε2 n Since I obtained n cuts follows exists cid8 n 1 Rcid8 contain cut As result I Rcid8 equal Rcid8 This implies λI Rcid8 0 1 n1 xIcid8 1 xI Bn1 Furthermore j n 1 xI j 2n 1 λI R j 1 2n 1 cid7 1 n 1 cid8 λI R j 1 2n 1 λI R j 1 xI Letting y xI Bn1 n j F y F y F ixI F ixI 2v iI v iI ε 9 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 Fig 2 The partition 0 1 n 1 subintervals equal length set A coloured green region deﬁned red cuts The ﬁrst cuts left located positions b c R1 b c R2 Here λ A R1 1n 1 obtain x A1 2n 11n 1 1 1 2n 1a Similarly λ A R2 1n 1 c b x A2 1 2n 1c b For interpretation colours ﬁgures reader referred web version article Thus y solution original nDBorsukUlam instance Whitebox model This reduction yields polynomialtime manyone reduction nDBorsukUlam εConsensus Halving n agents Thus nDBorsukUlam PPAhard n immediately obtain εConsensusHalving n agents PPAhard Blackbox model It easy blackbox reduction It formulated follows given access oracle instance nDBorsukUlam parameters ε L simulate oracle instance εConsensus Halving n agents parameters ε2 n 1L solution yields solution Furthermore order answer query v need perform single query F Thus obtain following query lower bound solving instance εConsensusHalving n agents parameters ε L requires queries solving instance nDBorsukUlam parameters εcid3 L n1 This means εcid3 n1 n εConsensusHalving n agents nDBorsukUlam query lower bound cid4 L query lower bound cid4 cid3 2ε L ε n1 n constant 2εn1 n1 cid4 L L cid3 Additional properties reduction Some properties BorsukUlam function F carry valuation functions v 1 vn In particular following properties If F monotone v 1 vn monotone Indeed consider A B cid50 1 A B Then holds λ A R j λB R j j n 1 result x A xB coordinatewise By monotonicity F follows F ix A F ixB v A v iB n If F normalised v 1 vn normalised As noted earlier v A 0 1 A cid50 1 Thus remains prove v 0 v i0 1 1 It easy x0 1 1 1 1 F x0 1 1 1 1 F normalised yields v i0 1 1 On hand x 1 1 1 F x F x F 1 1 1 1 1 1 yields v 0 Here fact F odd function normalised In fact F odd obtain v A v Ac 1 A cid50 1 Ac 0 1 A denotes complement A This shown noting x Ac x A argument I fact F x Ac F x A I This means able white blackbox hardness nDBorsukUlam F additional proper ties hardness hold εConsensusHalving n agents corresponding properties Furthermore note F normalised nDBorsukUlam function εapproximate ConsensusHalving v 1 vn v iI v iI ε yields εapproximate solution F sense cid12F xIcid12 ε This fact deﬁnition F odd function normalised 32 Proof Proposition 32 The reduction presented section based proof existence generalization ConsensusHalving general valuations given 42 This existence proof 42 provide reduction additive valuations It easily extended work general valuations We include reduction completeness Description reduction Consider instance εConsensusHalving n agents parameters ε L Let m Km 1 m 1m 1m 0 v 1 vn denote valuations agents We consider domain K n 1m 2m m 1m 1 m cid172nLεcid18 A point K n m corresponds way partition interval 0 1 sets I I n cuts A similar encoding Meunier 55 Necklace Splitting problem m corresponds partition Ix Ix obtained follows A point x K n 1 Provisionally label interval 0 1 2 For cid8 1 2 n xcid8 0 label interval 0 xcid8 10 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 xcid8 0 label interval 0 xcid8 Note subsequent assignments label interval overwrite previous assignments One way thinking applying coat paint interval 0 1 Initially interval painted colour procedure executed subintervals painted colour It easy check ﬁnal partition Ix Ix obtained uses n cuts Furthermore x K n m partition Ix Ix obtained x corresponds partition Ix Ix labels switched In words Ix Ix Ix Ix For formal deﬁnition encoding 42 We deﬁne labelling cid8 K n m 1 2 n follows For x K n m 1 Let n agent sees largest difference v iIx v iIx arg maxin v iIx v iIx break ties picking smallest 2 Pick sign s follows If v iIx v iIx let s If v iIx v iIx let s If v iIx v iIx pick s I s contains left end interval 0 1 3 Set cid8x s cid8x With deﬁnition easy check cid8x cid8x x K n m grid Nn N 2m 1 obtain instance cid9cid8 Nn 1 2 n nDTucker In particular note cid9cid8 antipodally antisymmetric boundary required m By reinterpreting K n Correctness Any solution nDTucker instance cid9cid8 yields x y K n loss generality assume cid8x n Since cid12x ycid12 1m obtain m cid12x ycid12 1m cid8x cid8 y Without λI xcid9 I y ncid10 j1 x j y j cid12x ycid121 ncid12x ycid12 nm bound holds λIxcid9 I y Since v Lipschitzcontinuous parameter L follows v iI y L λI x v iI similarly v iIx v iI y xcid9 I y nLm Since cid8x follows v iIx v iIx For sake contradiction let assume v iIx v iIx ε Then follows y v iI v iI y v iI x v iI x 2nLm ε 2nLm 0 m 2nLε But contradicts fact cid8 y Thus hold v iIx v iIx ε Since cid8x follows j n x v jI x v iI This means Ix Ix yields solution original εConsensusHalving instance x v iI x ε v jI Note reduction uses N 2m 1 4nLε 3 nDTucker instance Furthermore query labelling function cid9cid8 answered performing 2n queries valuation functions v 1 vn 4 General valuations We ready prove main results εConsensusHalving problem starting case general valuations First single agent general valuation function simple binary search procedure suﬃcient solve εConsensusHalving polynomial number queries polynomial time obtaining eﬃcient algorithm whitebox blackbox model We following theorem Theorem 41 For agent general valuation function multiple agents identical general valuations εConsensus cid2 log L Halving solvable polynomial time query complexity cid3 ε cid3 Proof We prove theorem case n 1 solution εConsensusHalving case straight forwardly solution problem multiple agents identical valuations Our algorithm essentially simulates binary search We label cut x 0 1 v0 x vx 1 ε Respectively label cut x vx 1 v0 x ε In case label cut 0 cut label 0 solution εConsensusHalving Observe order interval b 0 1 contain solution suﬃces label label b viceversa deﬁnitely point x b label 0 continuity v 11 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 Now let 0 b 1 If b label 0 immediately solution Otherwise note label b label viceversa For convenience follows assume label b label Our algorithm proceeds follows iteration Given interval b label label b computes label ab sets 2 label sets ab b ab 2 This eval queries Then label ab 2 label 0 outputs cut We claim algorithm ﬁnd cut label 0 log L ε iterations For sake contra diction assume cut log L L In addition know labels b Cut label va 1 v0 ε cut b label v0 b vb 1 ε Since b ε ε iterations Observe length b case ε L v LLipschitzcontinuous follows 2 va 1 vb 1 L λa b L ε L ε similarly v0 v0 b ε Putting obtain v0 b v0 ε va 1 vb 1 ε contradicts assumption cut b label cid2 log L Since polynomialtime algorithm queries polynomialtime algorithm input O ε polynomialtime algorithm immediately obtain polynomialtime upper bound whitebox model cid3 times For blackbox model algorithm immediately gives upper bound lower bound follows general reduction nDBorsukUlam Proposition 31 query lower bounds problem obtained Lemma 42 In 1DBorsukUlam εConsensusHalving single agent inherits query complexity lower bounds 1DTucker easily seen require cid4log N queries worstcase The bound naturally translates cid4logLε bound εConsensusHalving We remark upper bound holds version problem general valuations weak blackbox model lower bound holds normalised general valuations standard blackbox model cid2 We results agents general valuations Here obtain PPAcompleteness result εConsensusHalving exponential bounds query complexity problem Our results demonstrate general valuations case agents problem intractable blackbox white box model The main technical result section following pivotal lemma proved end section Lemma 42 For constant n 1 nDTucker reduces normalised nDBorsukUlam eﬃcient blackbox reduction Now state main theorem computationalquery complexity εConsensusHalving problem corresponding theorem nDBorsukUlam The proofs follow Theorems 21 22 characterising complexity nDTucker following chain reductions denotes eﬃcient blackbox reduction problem lefthand problem righthand nDTucker nDBorsukUlam Lem 42 P rop 31 εConsensusHalving P rop 32 nDTucker The speciﬁc parameters appear bounds follow proof Lemma 42 Theorem 43 Let n 2 constant Then εConsensusHalving n normalised general agents PPAcomplete This remains case ﬁx ε 0 1 b ﬁx L 3n 1 exists constant c 0 ε 0 1 L 3n 1 Lε c query complexity εConsensus Halving n normalised general agents cid3Lεn1 Theorem 44 Let n 2 constant Then normalised nDBorsukUlam PPAcomplete This remains case ﬁx ε 0 1 b ﬁx L 3 exists constant c 0 ε 0 1 L 3 Lε c query complexity normalised nDBorsukUlam cid3Lεn1 In cases lower bounds hold normalised versions problems upper bounds hold general nonnormalised versions 12 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 41 Reducing nDtucker normalised nDBorsuk Ulam Proof Lemma 42 Let n 1 constant Consider instance cid8 Nn 1 2 n nDTucker Let ε 0 1 We construct normalised nDBorsukUlam function F Bn1 Bn Lipschitzcontinuous Lipschitz parameter L max3 4n2N 1ε 1 x Bn1 cid12F xcid12 ε yields solution nDTucker instance Let δ min2ε 1 Note δ 0 1 ε δ 2ε Without loss generality assume p N N N holds cid8p 1 Indeed easy rename labels achieve intro ducing new solutions The remainder proof proceed steps In Step 1 interpolate nDTucker instance obtain continuous function 12 12n Step 2 extend function domain 1 1n Step 3 extend 1 1n1 obtain instance normalised nDBorsukUlam problem Step 1 Interpolating nDTUCKER instance The ﬁrst step embed nDTucker grid Nn 12 12n deﬁne value function grid point according labelling function cid8 interpolate obtain continuous function f 12 12n δ n δ n We embed grid Nn 12 12n straightforward way p Nn corresponds cid9p 12 12n cid9p j 12 p j 1N 1 j n Note antipodal grid points exactly correspond antipodal points 12 12n In words p q antipodal grid cid9p cid9q Next deﬁne value function f 12 12n δ n δ n embedded grid points follows f cid9p δ n ecid8p p Nn For n ei denotes ith unit vector Rn ei ei We use Kuhns triangulation embedded grid interpolate values obtain function f 12 12n δ n δ n Appendix C details We obtain f antipodally antisymmetric boundary 12 12n f x f x x 12 12n f Lipschitzcontinuous Lipschitz parameter 2n2N 1δ grid size 1N 1 cid12 f cid9pcid12 δ n p Nn Any x 12 12n cid12 f xcid12 ε lie Kuhn simplex contains grid points p q Nn cid8p cid8q solution nDTucker instance Indeed let p0 p1 pn Nn grid points Kuhn simplex containing x If cid8p0 cid8p1 cid8pn contain opposite labels points cid9 V f picid12 δ n follows convex combination v vectors V cid12vcid121 δ n cid12vcid12 δ As result cid12 f xcid12 ε δ cid8p0 cid8p1 cid8pn contain opposite labels cid9 p1 f cid9pn lie orthant Rn Since cid12 f cid9 p0 f f 12 12 12 δ n e1 δ n 0 0 0 Now deﬁne g 12 12n δ δn truncation f δ δn gix minδ maxδ f ix It hard g antipodally antisymmetric Lipschitzcontinuous Lipschitz parameter 2n2N 1δ g12 12 12 δ e1 Furthermore x 12 12n cid12gxcid12 ε ε δ cid12 f xcid12 ε x yields solution nDTucker instance Step 2 Extending 1 1n The goal step deﬁne function h 1 1n 1 1n extends g ensures h1 1 1 1 1 1 maintaining properties For x 1 1n let T x 12 12n denote truncation 12 12n T xi min12 max12 xi n The function h 1 1n 1 1n deﬁned hx 2 min j x j 1 1 2 2 min j x j δ e1 2 min jx j 1 1 2 2 min jx j δ e1 gT x xi 12 xi 12 1 Rn denotes allones vector 1 1 1 1 Clearly holds h1 1 1 1 It easy hx hx x 1 1n particular T x T x Furthermore cid12hxcid12 ε cid12gT xcid12 ε yields solution nDTucker instance Indeed xi 12 h1x 2 min j x j 1 1 2 2 min j x j δ δ ε cid12hxcid12 ε By argument xi 12 cid12hxcid12 ε 13 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 Since g12 12 12 δ e1 g12 12 12 δ e1 easy h continu ous Furthermore x y 1 1n holds cid12T x T ycid12 cid12x ycid12 easy h 2n2N 1δLipschitzcontinuous outside x 1 1nxi 12 n x 1 1nxi 12 n For y z x 1 1nxi 12 n holds hi y hiz 2 min j y j min j z j 2cid12 y zcid12 1 h1 y h1z 21 δ min j y j min j z j 2cid12 y zcid12 Thus h 2Lipschitzcontinuous x 1 1nxi 12 n argument x 1 1nxi 12 n As result h Lipschitzcontinuous 1 1n Lipschitz parameter max2 2n2N 1δ Indeed consider x y 1 1n If xi 12 yi 12 cid12x ycid12 1 cid12hx h ycid12 2 2cid12x ycid12 By symmetry remaining case need check xi 12 y exists yi 12 exists yi 12 In case consider segment x y x y let z x y point furthest away x zi 12 Note exist zi 12 This means hz gT z cid12hz h ycid12 2n2N 1δcid12z ycid12 On hand cid12hx hzcid12 2cid12x zcid12 Putting expressions obtain cid12hx h ycid12 max2 2n2N 1δcid12x zcid12 cid12z ycid12 max2 2n2N 1δcid12x ycid12 Here fact z x y means exists t 0 1 z x t y x cid12x zcid12 cid12z ycid12 tcid12x ycid12 1 tcid12x ycid12 cid12x ycid12 Step 3 Extending 1 1n1 The ﬁnal step deﬁne normalised nDBorsukUlam function F 1 1n1 1 1n x 1 1n1 cid12F xcid12 ε yields solution nDTucker instance For x 1 1n1 write x x cid3 1 1n We deﬁne cid3 xn1 x cid3 F x F x xn1 1 xn1 cid3 1 1 F x convex combination follows F x 1 1n Furthermore 1 xn1 cid3 hx cid3 hx 2 2 cid3 hx Since hx F 1 1 1 h1 1 1 1 F odd function cid3 F x F x xn1 1 xn1 2 cid3 hx 1 xn1 2 cid3 hx cid3 F x xn1 F x Consider x x use x instead x If xn1 1 F x nDTucker instance If xn1 0 1 x case cid3 xn1 1 1n1 cid12F xcid12 ε Since F odd function assume xn1 0 cid3cid12 ε yields solution cid3 cid3 xn1 hx cid3 cid12hx cid3 hx cid3 1 1n hx cid3 This implies F x cid3 xn1 hx Finally let determine Lipschitz parameter F Let x y 1 1n1 We cid3 cid12F x xn1 F y cid3 xn1cid12 1 xn1 2 cid3 cid12hx h y cid3 max2 2n2N 1δcid12x cid12 1 xn1 cid3cid12 cid3 y 2 cid3 cid12hx h y cid3 cid12 cid3 cid12F y xn1 F y cid3 yn1cid12 xn1 yn1 2 Putting expressions follows cid3 cid12h y cid12 cid12h y cid3 cid12 xn1 yn1 cid12F x F ycid12 max3 2n2N 1δ 1cid12x ycid12 Note max3 2n2N 1δ 1 max3 4n2N 1ε 1 In blackbox model order answer query F answer queries h queries g In order answer query g answer query f n 1 queries labelling function cid8 order interpolate Thus query F requires 2n 1 queries cid8 Since n constant query lower bounds nDTucker carry normalised nDBorsukUlam In whitebox model reduction actually gives way construct arithmetic circuit computes F given Boolean circuit computes cid8 Indeed standard techniques 2629 execution Boolean circuit input simulated arithmetic circuit Furthermore input bits Boolean circuit obtained gate All operations construct F computed arithmetic gates max min rational constants Thus obtain polynomialtime manyone reduction nDTucker normalised nDBorsukUlam n 1 14 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 Fig 3 Visualisation Algorithm 1 depicts initial assumptions The red line shows Agent 1 indifferent The blue signs 0 pcid10 pcid10 1 weak preferences Agent 2 pairs cuts b shows possible position cuts xr xcid8 ε 8L The arrows difference values positive piece negative piece change possible combinations pairs cuts c depicts actual cuts cake green parts label yellow parts label 5 Monotone valuations In section present results agents monotone valuations In contrast results Section 4 prove agents monotone valuations problem solvable polynomial time polynomial number queries fact result holds agent monotone valuation general valuation For agents problem PPAcomplete obtain corresponding exponential lower bound query complexity 51 An eﬃcient algorithm monotone agents We start eﬃcient algorithm case agents polynomialtime algorithm whitebox model algorithm polynomial query complexity blackbox model Algorithm 1 The algorithm based nested binary search procedure At higher level performing binary search position left cut solution At lower level ﬁxed position left cut perform binary search order ﬁnd right cut pair cuts forms solution ﬁrst agent seen eﬃciently agent monotone valuation Intuitively moving indifference curve valuation function agent monotone valuation red zigzag line Fig 3 reach solution We decide curve checking preferences second agent Before proceed draw interesting connection Austins moving knife procedure 7 ExactDivision proce dure agents general valuations The procedure based moving knifes agents simultaneously continuously slides cake maintaining corresponding cut positions ensure satisﬁed partition At point process agent satisﬁed guaranteed intermediate value theorem Our algorithm interpreted discrete time implementation idea interestingly results polynomialtime algorithm agents monotone valuation computationally hard agents general valuations shown Section 4 On fundamental level demonstrates intricacies transforming movingknife fair division protocols discrete algorithms The main theorem section following Theorem 51 For agents monotone valuation functions εConsensusHalving solvable polynomial time query cid4 log2 L complexity O ε weak blackbox model This result holds agents general valuation cid5 Before proceed description algorithm analysis let begin conventions presentation easier Since cuts denote x position leftmost cut y position rightmost cut So 0 x y 1 In addition labels corresponding intervals follows intervals 0 x y 1 label forming positive piece interval x y label forming negative piece Given pair cuts x y agent weakly prefers positive piece v i0 x y 1 v ix y ε2 weakly prefers negative piece v ix y v i0 x y 1 ε2 indifferent v ix y v i0 x y 1 ε2 In addition let pcid10 0 1 v 10 pcid10 v 1pcid10 1 ε2 Note eﬃciently compute pcid10 Theorem 41 The ﬁnal assumption need preferences Agent 2 special pairs 0 pcid10 pcid10 1 Observe pairs cuts create pieces 0 1 change labels pieces Hence Agent 2 weakly prefers positive piece pair cuts 0 pcid10 weakly prefer negative piece pair cuts pcid10 1 In description algorithm assume case 15 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 weakly prefers positive piece 0 pcid10 negative piece pcid10 1 The case handled analogously Using notation assumptions state Algorithm 1 ALGORITHM 1 εConsensusHalving agents monotone valuations 1 Set xcid8 0 xr pcid10 2 Set ycid8 pcid10 yr 1 3 xr xcid8 ε 4 Find y ycid8 yr Agent 1 indifferent pair cuts xcid8xr Agent 2 weakly prefers positive piece xcid8xr ycid8 y Set xcid8 xcid8xr y 8L y 2 2 Agent 2 weakly prefers negative piece xcid8xr y 2 Set xr xcid8xr 2 yr y end 10 end 11 yr ycid8 ε 12 8L Find x xcid8 xr Agent 1 indifferent pair cuts x ycid8 yr Agent 2 weakly prefers positive piece x ycid8 yr xcid8 x Set ycid8 ycid8 yr 2 2 Agent 2 weakly prefers negative piece x ycid8 yr 2 Set yr ycid8 yr xr x end 2 2 2 5 6 7 8 9 13 14 15 16 17 18 end 19 Output xcid8 ycid8 Proof Theorem 51 To prove correctness Algorithm 1 prove following invariants maintained iterations algorithm 1 Agent 1 indifferent pair cuts xcid8 ycid8 pair cuts xr yr 2 Agent 2 weakly prefers positive piece pair cuts xcid8 ycid8 weakly prefers negative piece pair cuts xr yr Assuming Invariants 1 2 hold follows algorithm outputs correct solution Indeed Agent 1 indifferent pair cuts xcid8 ycid8 Invariant 1 By Invariant 2 Agent 2 weakly prefers positive piece der pair cuts xcid8 ycid8 v 20 xcid8 ycid8 1 v 2xcid8 ycid8 ε2 v 2xcid8 ycid8 ε Thus suﬃces v 2xcid8 ycid8 v 20 xcid8 ycid8 1 ε By Invariant 2 Agent 2 weakly prefers negative piece pair cuts xr yr v 20 xr yr 1 v 2xr yr ε2 Since xr xcid8 ε8L yr ycid8 ε8L LLipschitz continu ity v 2 follows v 20 xr yr 1 v 20 xcid8 ycid8 1 ε4 v 2xr yr v 2xcid8 ycid8 ε4 As result v 20 xcid8 ycid8 1 v 2xcid8 ycid8 ε Next prove Invariants 1 2 hold First note hold start algorithm choice pcid10 fact Agent 2 weakly prefers positive piece 0 pcid10 negative piece pcid10 1 Both invariants automatically maintained construction algorithm We argue Steps 4 12 possible y respectively x exists Consider Step 4 ﬁrst We apply intermediate value theorem follows pair cuts xcid8xr y Agent 1 weakly prefers positive piece y ycid8 weakly prefers negative piece y yr Thus continuity valuation exists y ycid8 yr Agent 1 indifferent pieces For ﬁrst point note Agent 1 indifferent pair cuts xcid8 ycid8 Invariant 1 previous iteration weakly prefers positive piece pair cuts xcid8xr ycid8 monotonicity positive piece increased For second point note Agent 1 indifferent pair cuts xr yr Invariant 1 previous iteration weakly prefers negative piece pair cuts xcid8xr yr monotonicity negative piece increased The argument applies Step 12 Finally observe use monotonicity Agent 2s valuation proof Thus algorithm works Agent 2 general valuation 2 2 2 In order bound running time Algorithm 1 need bound running time number iterations algorithm needs loop time need perform Step 4 Step 12 Firstly observe Steps 4 12 tackled algorithm Theorem 41 This view problem special case agent need place single cut speciﬁc subinterval know solution exists Thus steps requires O log L ε time In addition observe loop essentially perform binary search Thus O log L 8L iteration distance xr xcid8 decreases factor 2 Similarly O log L 8L Hence loop requires O log2 L ε time Finally observe algorithm requires preferences Agent 2 speciﬁc pairs cuts evaluations v 2 ε time So Algorithm 1 terminates O log2 L ε iterations yr ycid8 ε ε iterations xr xcid8 ε 16 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 Next argue implement Algorithm 1 O log2 L 12 simulated O log L time ask Agent 2 preferences need evaluation queries Since need O log L ε queries total cid2 loop Algorithm 1 needs O log2 L ε queries blackbox model Observe Steps 4 ε queries explained Theorem 41 In addition observe ε iterations 52 Results monotone agents We case monotone agents manage problem computationally hard exponential query complexity Our results clear dichotomy complexity εConsensusHalving monotone agents case agents case agents Again employ general approach time need prove computational querycomplexity hardness monotone nDBorsukUlam problem corresponding impossibility results εConsensusHalving agents monotone valuations follow propertypreserving reduction Proposition 31 To end fact construct eﬃcient blackbox reduction n 1DTucker monotone nDBorsukUlam reduce corresponding version nDTucker lower dimension In order achieve interpolate n 1DTucker instance obtain continuous function time embed speciﬁc lower dimensional subset nDBorsukUlam domain We function extended monotone function domain The drop dimension featured reduction following effects Since 1DTucker solvable polynomialtime obtain PPAhardness monotone nDBorsukUlam n 3 PPAhardness εConsensusHalving monotone agents The query complexity lower bounds inherit n 1DTucker exactly match upper bounds obtained reduction εConsensusHalving nDTucker Proposition 32 The main technical contribution section following lemma proved end section Lemma 52 For constant n 2 n 1DTucker reduces normalised monotone nDBorsukUlam polynomial time eﬃcient blackbox reduction Similarly Section 4 obtain following theorems Theorem 53 Let n 3 constant Then εConsensusHalving n monotone agents PPAcomplete This remains case ﬁx ε 0 1 b ﬁx L 3n 1 constant t 0 1 exists constant c 0 ε 0 t L 3n 1 Lε c query complexity εConsensusHalving n monotone agents cid4Lεn2 O Lεn1 Theorem 54 Let n 3 constant Then monotone nDBorsukUlam PPAcomplete This remains case ﬁx ε 0 1 b ﬁx L 3 constant t 0 1 exists constant c 0 ε 0 t L 3 Lε c query complexity monotone nDBorsukUlam cid4Lεn2 O Lεn1 The proofs theorems follow Theorems 21 22 following chain reductions crucially involve monotone version nDBorsukUlam εConsensusHalving n 1DTucker monotone nDBorsukUlam Lem 52 P rop 31 monotone εConsensusHalving P rop 32 nDTucker The speciﬁc parameters appear bounds follow proof Lemma 52 The lower bounds hold normalised versions problems There small gap lower upper bounds conjecture possible prove upper bounds match lower bounds Theorem 53 logarithmic factors leave future work 17 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 53 Reducing n 1DTucker monotone nDBorsukUlam Proof Lemma 52 Let n 2 ﬁxed constant Consider instance cid8 Nn1 1 2 n 1 n 1DTucker Let ε 0 1 We construct monotone normalised nDBorsukUlam function F 1 1n1 1 1n Lipschitz continuous Lipschitz parameter L 4n 14 Nε 2min2 1ε 1 x Bn1 cid12F xcid12 ε yields solution n 1DTucker instance Step 1 From n 1DTUCKER nonnormalised n 1DBORSUKULAM Let δ min2ε 1 Note δ 0 1 ε δ 2ε The ﬁrst step proof similar proof Lemma 42 Namely Step 1 proof Lemma 42 construct g 12 12n1 δ δn1 g antipodally antisymmetric 4n 12N 1εLipschitz continuous Furthermore x 12 12n1 cid12gxcid12 δ yields solution original n 1DTucker instance Then deﬁne h 1 1n1 δ δn1 hx gx2 h properties g 2n 12N 1εLipschitzcontinuous Note construction h differs Step 2 proof Lemma 42 want h normalised Next extend h nonnormalised n 1DBorsukUlam function G 1 1n δ δn1 construction Step 3 proof Lemma 42 By arguments holds G odd function Lipschitzcontinuous parameter 2n 12N 1ε δ 2n2 Nε Furthermore x 1 1n cid12Gxcid12 δ yields solution original n 1DTucker instance On highlevel rest reduction interesting works embedding G ndimensional subspace Rn1 carefully extending 1 1n1 monotonic way This ndimensional subspace cid14 D x Rn1 cid16 xi 0 cid15 cid15 cid15 cid15 cid15 n1cid10 i1 It nice property x y D x y x y Step 2 Embedding function D δ δn1 We begin deﬁning slightly modiﬁed version G The function cid9G Rn δ δn1 deﬁned follows cid4 cid9Gx G cid5 n 1 T 1 n1 x T r 1 1n r rn denotes truncation r r coordinate It easy cid9G remains odd function Lipschitzcontinuous parameter n 1 2n2 Nε 2n 13 Nε Furthermore holds x Rn 1 n1 n cid12cid9Gxcid12 δ yields solution n 1DBorsukUlam instance G Next embed cid9G D Let H D δ δn1 deﬁned Hx Hx cid3 Note H remains odd function 2n 13 NεLipschitzcontinuous Any x D cid12Hxcid12 δ exists n xi 1n 1 yields solution cid9G original n 1DTucker instance cid3 xn1 cid9Gx n1 1 Step 3 Extending function 1 1n1 Rn1 In step extend H function F cid3 1 1n1 Rn1 For n1 x 1 1n1 let Sx i1 xi n 1 n 1 cid11x x cid20x 1n1cid21 1n1n 1 x Sx 1n1n 1 D denote orthogonal projection D Here cid20 cid21 denotes scalar product Rn1 1n1 Rn1 allones vector F deﬁned follows cid6 cid3 cid7 cid3 F x 1 cid8 Sx n 1 Hcid11x C Sx n 1 1n1 cid3 odd function fact Sx Sx cid11x continuous Let determine upper bound Lipschitz parameter For x y C 1 2n 14 Nε It easy check F cid11x Hx Hx cid3 It easy F 1 1n1 cid3 cid12F x F cid3 ycid12 cid15 cid15 cid15Sx S y cid15 n 1 cid12Hcid11xcid12 cid2 cid3 1 S yn 1 cid12Hcid11x Hcid11 ycid12 CSx S yn 1 cid12x ycid12 2n 13 Nε 2n 14 Nε C 1cid12x ycid12 n 1cid12x ycid12 Ccid12x ycid12 Sx S y n 1cid12x ycid12 cid12cid11x cid11 ycid12 cid12x ycid122 continuous Lipschitz parameter 2n 14 Nε C 1 4n 14 Nε 2 18 n 1cid12x ycid12 Thus F cid3 Lipschitz A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 Let F x y Sx 0 S y 0 Indeed F Finally Sx 0 S y 0 exists z x z y Sz 0 implies F monotone For F cid3 y x y 1 1n1 cid3x F odd implies statement holds Sx 0 S y 0 cid3x F cid3z F cid3 y cid3 cid3 Let x 1 1n1 Sx 0 For j n 1 n 1 t 0 x j t 1 holds cid3 x t e j F cid3 x F t n 1 H icid11x t e j cid2 1 Sxn 1 cid3cid2 cid3 H icid11x t e j H icid11x tC n 1 t n 1 2n 13 Nεcid12cid11x t e j cid11xcid12 tC n 1 C 1 2n 14 Nε t n 1 0 C 1 2n 14 Nε Here fact cid12cid11x t e j cid11xcid12 cid12cid11x t e j cid11xcid122 cid12x t e j xcid122 t monotone x y x y Sx 0 S y 0 decompose y x y1 We obtain F x1 e1 y2 x2 e2 yn1 xn1 en1 cid3 Step 4 Extending function 1 1n1 1 1n Deﬁne F cid3cid3x Cn Sxn 1 Cn 4n 14 Nε 2min2 1ε 1 Clearly F odd function monotone CnLipschitzcontinuous Finally deﬁne F 1 1n1 1 1n F x T 1F cid3cid3x It easy check F remains monotone odd monotone odd Furthermore C 1 Cn 1 F 1 1 1 1 1 1 Thus T 1 F F monotone normalised nDBorsukUlam function Lipschitz parameter max4n 14 Nε 2 Cn 4n 14 Nε 2min2 1ε 1 cid3cid3 1 1n1 R F cid3cid3 cid3x F F cid3cid3 cid3 Consider x 1 1n1 cid12F xcid12 ε Since F exists n 1 H icid11x δ Then cid3cid3x ε follows Sx n 1εCn Assume F ix 1 εCnδ CεCn δ C 1εCn δ min2 1ε 1ε δ δ ε ε Cn C 1min2 1ε 1 But mean cid12F xcid12 ε contradiction Thus cid12Hcid11xcid12 δ In order cid11x solution H remains prove exists n cid11xi 1n 1 Since x 1 1n1 exists j n 1 x j 1 As result cid11x j x j Sxn 1 1 εCn If j n 1 let j Otherwise j n 1 Scid11x 0 necessarily exists n cid11xi 1n εnCn In cases n cid11xi 1n εnCn Since Cn n 1ε follows cid11xi 1n 1 Thus x 1 1n1 cid12F xcid12 ε obtain solution original n 1DTucker instance Note reduction polynomialtime operations allowed gates arithmetic circuit In particular division constants performed multiplying inverse constant The reduction blackbox query F answered 2n queries labelling function cid8 original n 1DTucker instance Note constant n constant 6 Relations RobertsonWebb query model The blackbox query model previous sections standard model related literature query complexity nature input functions depends speciﬁc problems hand For example nDBorsukUlam function F inputs points domain returns points nDTucker function cid8 inputs points outputs labels At time literature cakecutting problem predominant query model fact expressive query model known RobertsonWebb model RW 6167 The RW model deﬁned case additive valuations consists following types queries eval queries agent given interval b returns value interval cut queries agent given point x 0 1 real number α designate smallest interval x y value exactly α In fact literature envyfree cakecutting query complexity RW model important open problems 2059 breakthrough results coming literature science fairly recently 89 Since 19 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 Fig 4 Visualisation cut eval queries The input A eval query denoted green intervals b The inputs A1 A2 cut query denoted green yellow intervals respectively interval I b denoted blue The agent places cut possible position x I value A1 x value A2 x b speciﬁed proportion εConsensusHalving εfair cakecutting 21 conceptually closely related sense consider query complexity problem RW model well7 A potential hurdle investigation RW model deﬁned valuation functions additive case To end propose following generalisation RW model Generalised Robertson Webb model GRW appropriate monotone valuation functions necessarily additive Intuitively GRW model agent essentially given sets intervals A single intervals queries deﬁned accordingly Fig 4 Deﬁnition 6 Generalised RobertsonWebb GRW Query Model In GRW query model types queries eval queries agent given Lebesguemeasurable subset A 0 1 returns value v A set cut queries agent given disjoint Lebesguemeasurable subsets A1 A2 0 1 interval I γ b disjoint A1 A2 real number γ 0 designates x I v A1ax v A2xb point exists Let discuss model appropriate generalisation RW model First deﬁnition eval queries fact natural extension agent needs specify value sets intervals note additive case suﬃces elicit agents value single intervals value unions intervals simply sum elicited values This case general monotone valuations need expressive eval query We remark eval query exactly query blackbox model deﬁned Section 2 GRW model stronger blackbox query model Brânzei Nisan 21 fact studied restriction RW model cakecutting problem additive valuations eval queries allowed coined R W query model To results context offer following deﬁnition query model discussed equivalent blackbox query model Section 2 By discussion G R W query complexity bounds Section 4 Section 5 apply verbatim GRW query model Deﬁnition 7 Generalised RobertsonWebb lowed agent given Lebesguemeasurable subset A 0 1 returns value v A set query model In GRW query model eval queries al GRW While extension eval queries RW model GRW model relatively straightforward generali sation cut queries somewhat intricate Upon closer inspection cut query standard RW model additive valuations clear equivalently deﬁne query Given interval I b real number γ place cut x b v ax v xb γ This easily ﬁnd value agent b eval query value α standard deﬁnition cut query appropriate value γ modiﬁed deﬁnition result exactly position x cut viceversa The simplicity cut queries RW model enabled fact additive valuations value agent interval I depend remainder interval 0 1 cut This longer case monotone valuations agent needs specify different value sets intervals We believe deﬁnition cut query GRW model appropriate generalisation captures essence original cut queries RW allows expressiveness type query useful monotone valuations additive case Finally remark general valuations monotone sensible deﬁnition cut queries strong sense conveys unrealistically information contrast RW GRW models 7 The εConsensusHalving halving problem fact recently studied query model somewhat different direction agents additive valuations 4 Note authors refer query model RW model queries use essentially RW queries 20 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 cut queries intuitively shortcuts binary search For example assume agent asked place cut point x interval b cut placed agent sees excess b cut placed b agent sees excess By boundary conditions interval guarantee cut satisﬁes agent exists interval need exhaustively search interval ﬁnd cut position exists meaning binary search help On hand single cut query ﬁnd position return x interval We ready state results section summarise following theorem Qualitatively prove εConsensusHalving normalised monotone agents exponential query complexity GRW model logarithmic savings compared blackbox model normalised monotone agents problem easier logarithmic factor Theorem 61 In Generalised RobertsonWebb model cid4 εConsensusHalving n 3 normalised monotone agents requires cid4 queries εConsensusHalving n 2 monotone agents solved O logLε queries Lεn2 logLε cid5 2 2 v A2 v A1 v A2ab Proof The upper bound n 2 obtained relatively easily observing proof Theorem 51 Step 4 Step 12 Algorithm 1 obtained binary search O logLε queries resulted query complexity O log2Lε steps executed O logLε times In GRW model simply replace binary searches single cut query apply monotone agents obtain query complexity O logLε For example Step 4 simulated cut query γ 1 A1 xcid8xr yr 1 I ycid8 yr ycid8 A2 0 xcid8xr γ φ evaluated eval queries Furthermore v For lower bound n 3 construct instance εConsensusHalving n normalised monotone agents cid4Lεn2 lower bound eval queries holds additionally answer cut query performing O logLε eval queries We use reduction normalised monotone nDBorsukUlam εConsensusHalving n normalised monotone agents Proposition 31 Given cut query A1 A2 I b γ deﬁne φ b R0 φt v A1at v A2tb Note looking I φt monotone t γ If conditions φ nondecreasing We begin checking hold immediately answer t I satisﬁes query In follows assume conditions hold In case query φt t I determine solution t lies J At beginning t t b We denote J I current interval know t J I Using cid17log2n 1cid18 2 queries φ shrink J J R j j n 1 Recall x Ai 2n 1 λ A R 1 n 1 A cid50 1 It follows t J x A1 ti x A2 t bi ﬁxed n 1 j Furthermore additional cid17log2 mcid18 2 queries ensure t J x A1 t j k 1m x A2 t b j cid8m cid8 1m k cid8 Z Next additional 2cid17log2n 1cid18 queries shrink J t J x A1 t x A2 t b lie ﬁxed simplex Kuhns triangulation domain K n1 deﬁned In case construction hold v ix A1 t v ix A2 t b expressed aﬃne function t J exactly determine In order hold ensure normalised monotone nDBorsukUlam function piecewise value t linear Furthermore pick m cid172nLεcid18 23cid17log2n 1cid18 2 cid17log2cid172nLεcid18cid18 2 eval queries answer cut query Note expression O logLε n constant γ v A1ab Consider normalised monotone nDBorsukUlam function F 1 1n1 1 1n Lipschitz parameter L 3 ε 0 1 We ﬁrst discretize domain K n1 1 m 1m 1m 0 1m 2m m 1m 1n1 m cid172nLεcid18 We let f K n1 antipodally anti symmetric f x f x x K n1 m monotone f x f y x y f 1 1 1 1 1 1 Furthermore x K n1 m cid12 f xcid12 ε yields solution original instance F We extend f func tion cid9f 1 1n1 1 1n Kuhns triangulation grid K n1 interpolating Appendix C description triangulation interpolation By arguments presented Appendix C holds cid9f contin uous monotone odd function cid9f 1 1 1 1 1 1 Furthermore xi ﬁxed n 1 j x j constrained x lies ﬁxed simplex σ Kuhns triangulation cid9f x expressed linear aﬃne function x j 1 1n deﬁned f x F x Note f Let determine Lipschitz parameter cid9f Consider simplex σ y0 y1 yn1 Kuhn triangula m Consider x 0 1n1 lies σ j n 1 t 1m 1m x t e j lies tion K n1 σ Then interpolation deﬁned Appendix C yields m m m m cid12cid9f x cid9f x t e jcid12 cid12t m f y j t m f y j1cid12 t m cid12F y j F y j1cid12 t m L cid12 y j y j1cid12 L t 21 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 It easy check implies cid9f follows cid9f n 1LLipschitzcontinuous 1 1n1 proof Lemma 42 n 1LLipschitzcontinuous simplex σ By simple argument Now consider simplex σ y0 y1 yn1 exists n 1 0 cid12 f yicid12 ε Since cid9f yi f yi cid9f n 1LLipschitzcontinuous follows x 1 1n1 lies σ cid12cid9f xcid12 cid12cid9f yicid12 nLcid12x y0cid12 ε nLm ε2 m 2nLε Thus x 1 1n1 cid12cid9f xcid12 ε2 hold cid12 f y0cid12 ε cid12 f yn1cid12 ε σ y0 y1 yn1 Kuhn simplex containing x However x 1 1n1 follows y0 yn1 lies boundary K n1 m This means obtained solution original nDBorsukUlam function F Since parameters cid9f L cid3 nL εcid3 ε2 n constant query lower bound F carries cid9f cid2 7 Conclusion future directions In paper managed completely settle computational complexity εConsensusHalving problem constant number agents general monotone valuation functions We studied query complexity problem provided exponential lower bounds corresponding hardness results polynomial upper bounds corresponding polynomialtime algorithms We deﬁned appropriate generalisation RobertsonWebb query model monotone valuations showed bounds qualitatively robust added expressiveness model The main open problem associated work following What computational complexity query complexity εConsensusHalving constant number agents additive valuations Our approach paper prescribes formula answering question One construct blackbox reduction version εConsensusHalving computationallyhard problem like nDTucker know query complexity lower bounds obtain answers questions time Alternatively able struct polynomialtime algorithms solving problem concretely attempting agents additive valuations natural starting step ﬁrst case problem computationally hard agents monotone valuations It unclear expect problem remain hard additive valuations Another line work study query complexity related fair cakecutting problem GRW model propose In fact fundamental existence results problem 65 actually apply general valuation functions work science restricted attention case additive valuations notable exceptions 2434 We believe work spark study query complexity fair cakecutting valuations additive case Declaration competing The authors declare known competing ﬁnancial interests personal relationships appeared inﬂuence work reported paper Acknowledgements Alexandros Hollender supported EPSRC doctoral studentship Reference 1892947 Appendix A εCONSENSUSHALVING piecewise constant valuations As mentioned introduction valuation functions studied previous work 3839 piecewise constant valuations step functions given explicitly input agent specifying endpoints height step For constant number agents n case solvable polynomialtime illustrated Fig 1 Lemma A1 εConsensusHalving constant number n agents piecewise constant valuations given explicitly input solvable polynomial time Proof The proof follows closely Lemma 15 41 provide main proof idea refer reader paper fully detailed proof First partition interval 0 1 regions set points t1 tm density valuation function agent constant region Let T t j t j1 denote arbitrary region let v iT denote 22 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 constant value density agent region T height step Since valuations provided explicitly equivalently polynomial input parameters process result polynomial number regions We interested regions contain cuts ﬁnd appropriate positions cuts linear programming First hard solution region contains 1 cut transformed solution region contains 1 cut appropriately merging shifting sets cuts region Therefore assume region contains cut doesnt For k 1 n consider possible ways distributing k cuts regions region receives cut n constant polynomial time Let xT position cut region T ti ti1 This means agent left subregion ti xT receives label right subregion xT ti1 receives label resulting values v iT ti xT v iT xT ti1 agent respectively If cut region T interval receives label Now consider set cuts positions xT regions contain cuts corresponding partitioning 0 1 intervals labelled loss generality assume labelling alternating From devise linear program value k aim minimise z subject v iI v iI z transformed set linear constraints plus additional linear constraints positions cuts Since solution exists consider values k 1 n linear programs terminate z 0 ﬁnd exact solution problem cid2 Appendix B Formal deﬁnition input model In Section 2 mentioned whitebox model agents valuations v accessed polynomialtime algorithms given explicitly input We provide precise deﬁnition input model section Formally assume valuations computed Turing machines The input Turing machine list intervals Turing machine outputs value union intervals Deﬁnition 8 εConsensusHalving whitebox model formal deﬁnition For constant n 1 polynomial p problem εConsensusHalving n agents deﬁned follows Input ε 0 Lipschitz parameter L Turing machines v 1 vn Output Any following A partition 0 1 sets intervals I I v iI ε n cuts A violation LLipschitzcontinuity valuations An input X Turing machines terminate p X steps Optional monotone valuations A violation monotonicity valuations agent holds v iI Note solution types ﬁrst solution union arbitrary number intervals necessarily obtained n cuts The violation solutions ensure problem contained TFNP They irrelevant hardness results hold promise version problem promised input violate conditions Appendix C The Kuhn triangulation Let Dm 0 1m 2m mm Kuhns triangulation standard way triangulate grid Dn m Every x Dm 1n base cube containing vertices y yi xi xi 1m Every cube subdivided n ndimensional simplices follows permutation π n σ y0 y1 yn simplex y0 x yi yi1 1 m eπ n ei ith unit vector It easy Kuhns triangulation following properties For simplex σ z1 zk holds cid12zi z jcid12 1m j exists permutation π k zπ 1 zπ k componentwise Given point x 0 1n eﬃciently determine simplex contains follows First ﬁnd base y m contains x Next ﬁnd permutation π xπ 1 yπ 1 xπ n yπ n Then follows cube Dn y π simplex containing x The triangulation antipodally antisymmetric σ y0 y1 yn Kuhn simplex Dn m σ y0 yn simplex yi 1 yi j j j Using Kuhns triangulation function f 0 1n M M cid9f constructed Kuhn simplex σ y0 y1 yn interpolating values M M extended Lipschitzcontinuous function cid9f Dn m 23 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 f y0 f y1 f yn In x 0 1n lies simplex σ y0 y1 yn let z m x y0 Let π denote permutation obtain σ Note x lies σ zπ 1 zπ 2 zπ n Then holds x i0 αi yi α0 1 zπ 1 αn zπ n αi zπ zπ i1 n 1 We deﬁne cid6 n cid9f x ncid10 i0 αi f yi It easy check function cid9f 0 1n M M obtained continuous Indeed x lies common face Kuhn simplices value cid9f x obtained interpolating simplex It shown cid9f antipodally antisymmetric f x f x x Dn Lipschitzcontinuous Lipschitz parameter 2M n m respect cid8norm Furthermore f m cid9f cid9f x cid9f x x 0 1n monotone f x f y x y Dn m x y cid9f cid9f x cid9f y x y 0 1n x y Consider point x 0 1n lies simplex σ y0 y1 yn Then j n t 0 x t e j lies simplex σ Finally f cid9f x t e j cid9f x tmf y j tmf y j1 0 monotone Using easy cid9f y j y j1 f monotone simplex σ x y σ construct path goes x y lies σ uses positive cardinal directions Since monotonicity holds segment path holds x y Finally x y lie different simplices use straight path goes x y fact cid9f monotone simplex traverse References gence 2014 1 James Aisenberg Maria Luisa Bonet Sam Buss 2D Tucker PPA complete J Comput Syst Sci 108 2020 92103 httpsdoi org 10 1016 j jcss 2019 2 Reza Alijani Majid Farhadi Mohammad Ghodsi Masoud Seddighin Ahmad Tajik Envyfree mechanisms minimum number cuts Proceedings AAAI Conference Artiﬁcial Intelligence vol 31 2017 3 Alon Noga Splitting necklaces Adv Math 63 3 1987 247253 httpsdoi org 10 1016 0001 870887 90055 7 4 Alon Noga Andrei Graur Eﬃcient splitting necklaces Proceedings 48th International Colloquium Automata Languages Program ming ICALP 2021 pp 1411417 httpsdoi org 10 4230 LIPIcs ICALP202114 5 Alon Noga Douglas B West The BorsukUlam theorem bisection necklaces Proc Am Math Soc 98 4 1986 623628 httpsdoi org 10 09 002 2307 2045739 6 Georgios Amanatidis George Christodoulou John Fearnley Evangelos Markakis ChristosAlexandros Psomas Eftychia Vakaliou An improved envyfree cake cutting protocol agents Proceedings 11th International Symposium Algorithmic Game Theory SAGT 2018 pp 8799 httpsdoi org 10 1007 978 3 319 99660 8 _9 7 AK Austin Sharing cake Math Gaz 66 437 1982 212215 httpsdoi org 10 2307 3616548 8 Haris Aziz Simon Mackenzie A discrete bounded envyfree cake cutting protocol number agents Proceedings 57th Annual IEEE Symposium Foundations Computer Science FOCS 2016 pp 416427 httpsdoi org 10 1109 FOCS 2016 52 9 Haris Aziz Simon Mackenzie A discrete bounded envyfree cake cutting protocol agents Proceedings 48th Annual ACM Sym posium Theory Computing STOC 2016 pp 454464 httpsdoi org 10 1145 2897518 2897522 10 Eric Balkanski Simina Brânzei David Kurokawa Ariel D Procaccia Simultaneous cake cutting TwentyEighth AAAI Conference Artiﬁcial Intelli 11 Siddharth Barman Nidhi Rathi Fair cake division monotone likelihood ratios Proceedings 21st ACM Conference Economics Computation EC 2020 pp 401437 httpsdoi org 10 1145 3391403 3399512 12 Eleni Batziou Kristoffer Arnsfelt Hansen Kasper Høgh Strong approximate consensus halving BorsukUlam theorem Proceedings 48th International Colloquium Automata Languages Programming ICALP 2021 pp 2412420 httpsdoi org 10 4230 LIPIcs ICALP202124 13 Paul Beame Stephen Cook Jeff Edmonds Russell Impagliazzo Toniann Pitassi The relative complexity NP search problems J Comput Syst Sci 57 1 1998 319 httpsdoi org 10 1145 225058 225147 14 Xiaohui Bei Warut Suksompong Dividing graphical cake Proceedings 35th AAAI Conference Artiﬁcial Intelligence AAAI 2021 15 Xiaohui Bei Ning Chen Xia Hua Biaoshuai Tao Endong Yang Optimal proportional cake cutting connected pieces TwentySixth AAAI Con ference Artiﬁcial Intelligence 2012 16 Xiaohui Bei Ning Chen Guangda Huzhang Biaoshuai Tao Jiajun Wu Cake cutting envy truth IJCAI 2017 pp 36253631 17 Xiaohui Bei Ayumi Igarashi Xinhang Lu Warut Suksompong The price connectivity fair division Proceedings AAAI Conference Artiﬁcial Intelligence vol 35 2021 pp 51515158 18 Karol Borsuk Drei Sätze über die ndimensionale euklidische Sphäre Fundam Math 20 1933 177190 httpsdoi org 10 4064 fm 20 1 177 190 19 Sylvain Bouveret Yann Chevaleyre Nicolas Maudet Fair allocation indivisible goods Handbook Computational Social Choice Cambridge University Press 2016 pp 284310 httpsdoi org 10 1017 CBO9781107446984 013 20 Steven J Brams Alan D Taylor Fair Division From CakeCutting Dispute Resolution Cambridge University Press 1996 21 Simina Brânzei Noam Nisan The query complexity cake cutting httpsarxivorg abs 1705 02946 2017 22 Simina Brânzei Noam Nisan Communication complexity cake cutting Proceedings 20th ACM Conference Economics Computation 23 Simina Brânzei Ioannis Caragiannis David Kurokawa Ariel D Procaccia An algorithmic framework strategic fair division Thirtieth AAAI Con EC 2019 p 525 httpsdoi org 10 1145 3328526 3329644 ference Artiﬁcial Intelligence 2016 24 Ioannis Caragiannis John K Lai Ariel D Procaccia Towards expressive cake cutting Proceedings 22nd International Joint Conference Artiﬁcial Intelligence IJCAI 2011 pp 127132 httpsdoi org 10 5591 978 1 57735 516 8 IJCAI11 033 25 Xi Chen Xiaotie Deng Matching algorithmic bounds ﬁnding Brouwer ﬁxed point J ACM 55 3 2008 1311326 httpsdoi org 10 1145 1379759 1379761 24 A Deligkas A FilosRatsikas A Hollender Artiﬁcial Intelligence 313 2022 103784 httpsdoi org 10 1287 moor1110 0511 1120 1116 Artiﬁcial Intelligence AAAI 2021 doi org 10 1137 080720826 26 Xi Chen Xiaotie Deng ShangHua Teng Settling complexity computing twoplayer Nash equilibria J ACM 56 3 2009 1411457 https doi org 10 1145 1516512 1516516 2011 27 Yuga J Cohler John K Lai David C Parkes Ariel D Procaccia Optimal envyfree cake cutting TwentyFifth AAAI Conference Artiﬁcial Intelligence 28 Constantinos Daskalakis Christos Papadimitriou Continuous local search Proceedings 22nd Annual ACMSIAM Symposium Discrete Algorithms SODA SIAM 2011 pp 790804 httpsdoi org 10 1137 19781611973082 62 29 Constantinos Daskalakis Paul W Goldberg Christos H Papadimitriou The complexity computing Nash equilibrium SIAM J Comput 39 1 2009 30 Argyrios Deligkas John Fearnley Themistoklis Melissourgos Pizza sharing PPAhard Proceedings ThirtySixth AAAI Conference Artiﬁcial 195259 httpsdoi org 10 1137 070699652 Intelligence 2022 31 Argyrios Deligkas John Fearnley Themistoklis Melissourgos Paul G Spirakis Computing exact solutions consensus halving BorsukUlam theorem J Comput Syst Sci 117 2021 7598 httpsdoi org 10 1016 j jcss 2020 10 006 32 Argyrios Deligkas John Fearnley Alexandros Hollender Themistoklis Melissourgos Constant inapproximability PPA Proceedings 54th ACM Symposium Theory Computing STOC pp 10101023 2022 33 Xiaotie Deng Qi Qi Amin Saberi Jie Zhang Discrete ﬁxed points models complexities applications Math Oper Res 36 4 2011 636652 34 Xiaotie Deng Qi Qi Amin Saberi Algorithmic solutions envyfree cake cutting Oper Res 60 6 2012 14611476 httpsdoi org 10 1287 opre 35 Edith Elkind Erel SegalHalevi Warut Suksompong Mind gap cake cutting separation Proceedings 35th AAAI Conference 36 Kousha Etessami Mihalis Yannakakis On complexity Nash equilibria ﬁxed points SIAM J Comput 39 6 2010 25312597 https 37 John Fearnley Paul W Goldberg Alexandros Hollender Rahul Savani The complexity gradient descent CLS PPAD PLS Proceedings 53rd ACM Symposium Theory Computing STOC 2021 pp 4659 httpsdoi org 10 1145 3406325 3451052 38 Aris FilosRatsikas Paul W Goldberg Consensus halving PPAcomplete Proceedings 50th Annual ACM Symposium Theory Computing STOC 2018 pp 5164 httpsdoi org 10 1145 3188745 3188880 39 Aris FilosRatsikas Paul W Goldberg The complexity splitting necklaces bisecting ham sandwiches Proceedings 51st Annual ACM Symposium Theory Computing STOC 2019 pp 638649 httpsdoi org 10 1145 3313276 3316334 40 Aris FilosRatsikas Søren Kristoffer Still Frederiksen Paul W Goldberg Jie Zhang Hardness results consensushalving Proceedings 43rd International Symposium Mathematical Foundations Computer Science MFCS 2018 pp 2412416 httpsdoi org 10 4230 LIPIcs MFCS 2018 24 41 Aris FilosRatsikas Alexandros Hollender Katerina Sotiraki Manolis Zampetakis ConsensusHalving Does easier Proceedings 21st ACM Conference Economics Computation EC 2020 pp 381399 httpsdoi org 10 1145 3391403 3399527 42 Aris FilosRatsikas Alexandros Hollender Katerina Sotiraki Manolis Zampetakis A topological characterization modulop arguments implications necklace splitting Proceedings 32nd Annual ACMSIAM Symposium Discrete Algorithms SODA 2021 pp 26152634 httpsdoi org 10 1137 19781611976465 155 43 George Gamow Marvin Stern PuzzleMath Viking 1958 44 Charles H Goldberg Douglas B West Bisection circle colorings SIAM J Algebraic Discrete Methods 6 1 1985 93106 httpsdoi org 10 1137 45 Paul Goldberg Alexandros Hollender Warut Suksompong Contiguous cake cutting hardness results approximation algorithms J Artif Intell Res 0606010 69 2020 109141 46 Paul W Goldberg Alexandros Hollender Ayumi Igarashi Pasin Manurangsi Warut Suksompong Consensus halving sets items Proceedings 16th International Conference Web Internet Economics WINE 2020 pp 384397 httpsdoi org 10 1007 978 3 030 64946 3 _27 47 Michelangelo Grigni A Sperner lemma complete PPA Inf Process Lett 77 56 2001 255259 httpsdoi org 10 1016 S0020 019000 00152 6 48 Charles R Hobby John R Rice A moment problem L1 approximation Proc Am Math Soc 16 4 1965 665670 httpsdoi org 10 2307 2033900 49 Hadi Hosseini Ayumi Igarashi Andrew Searns Fair division time multilayered cake cutting 29th International Joint Conference Artiﬁcial Intelligence IJCAI 2020 International Joint Conferences Artiﬁcial Intelligence 2020 pp 182188 50 Roman N Karasev Edgardo RoldánPensado Pablo Soberón Measure partitions hyperplanes ﬁxed directions Isr J Math 212 2 2016 51 Ilan Komargodski Moni Naor Eylon Yogev Whitebox vs blackbox complexity search problems Ramsey graph property testing J ACM 66 5 52 David Kurokawa John Lai Ariel Procaccia How cut cake party ends Proceedings AAAI Conference Artiﬁcial Intelligence 53 Jiˇrí Matoušek Using BorsukUlam Theorem Lectures Topological Methods Combinatorics Geometry Springer Science Business Media 54 Nimrod Megiddo Christos H Papadimitriou On total functions existence theorems computational complexity Theor Comput Sci 81 2 1991 55 Frédéric Meunier Simplotopal maps necklace splitting Discrete Math 323 28 2014 1426 httpsdoi org 10 1016 j disc 2014 01008 56 Jerzy Neyman Un théorème dexistence C R Acad Sci Paris 222 1946 843845 57 Christos H Papadimitriou On complexity parity argument ineﬃcient proofs existence J Comput Syst Sci 48 3 1994 498532 httpsdoi org 10 1016 S0022 000005 80063 7 58 Ariel D Procaccia Cake cutting childs play Commun ACM 56 7 2013 7887 httpsdoi org 10 1145 2483852 2483870 59 Ariel D Procaccia Cake cutting algorithms Handbook Computational Social Choice Cambridge University Press 2016 pp 311330 https doi org 10 1017 CBO9781107446984 014 doi org 10 1016 0097 316595 90073 X 60 Jack M Robertson William A Webb Approximating fair division limited number cuts J Comb Theory Ser A 72 2 1995 340344 https 61 Jack M Robertson William A Webb CakeCutting Algorithms Be Fair If You Can CRC Press ISBN 9781568810768 1998 62 Erel SegalHalevi Redividing cake Proceedings 27th International Joint Conference Artiﬁcial Intelligence 2018 pp 498504 63 Forest W Simmons Francis E Su Consensushalving theorems BorsukUlam Tucker Math Soc Sci 45 1 2003 1525 httpsdoi org 10 64 Hugo Steinhaus Sur la division pragmatique Econometrica 17 1949 315319 httpsdoi org 10 2307 1907319 65 Francis E Su Rental harmony Sperners lemma fair division Am Math Mon 106 10 1999 930942 httpsdoi org 10 1080 00029890 1999 66 Albert W Tucker Some topological properties disk sphere Proceedings First Canadian Math Congress Montreal University Toronto 1016 S0165 489602 00087 2 12005142 Press 1945 pp 286309 67 Gerhard J Woeginger JiˇríSgall On complexity cake cutting Discrete Optim 4 2 2007 213220 httpsdoi org 10 1016 j disopt 2006 07003 705728 httpsdoi org 10 1007 s11856 016 1303 z 2019 128 httpsdoi org 10 1109 FOCS 201763 vol 27 2013 2008 httpsdoi org 10 1007 978 3 540 76649 0 317324 httpsdoi org 10 1016 0304 397591 90200 L 25