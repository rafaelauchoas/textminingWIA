Artiﬁcial Intelligence 196 2013 106142 Contents lists available SciVerse ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Automatic behavior composition synthesis Giuseppe De Giacomo Fabio Patrizi Sebastian Sardiña b Dipartimento di Informatica e Sistemistica Sapienza Università di Roma Rome Italy b School Computer Science IT RMIT University Melbourne Australia r t c l e n f o b s t r c t Article history Received 9 February 2011 Received revised form 28 November 2012 Accepted 13 December 2012 Available online 2 January 2013 Keywords Knowledge representation reasoning Intelligent agents Reasoning actions change Automated planning Synthesis reactive systems The behavior composition problem amounts realizing virtual desired module surveillance agent suitably coordinating repurposing execution set available modules video camera vacuum cleaner robot In particular investigate techniques synthesize controller implementing fully controllable tar behavior suitably coordinating available partially controllable behaviors execute shared fully observable partially predictable nondeterministic environment Both behaviors environment represented arbitrary ﬁnite state tran sition systems The technique propose directly based idea controller job coordinate concurrent execution available behaviors mimic target behavior To end exploit variant formal notion simulation formally capture notion mimicking technique proposed sound complete optimal respect computational complexity robust different kind failures In addition demonstrate technique suited highly eﬃcient implementation based synthesis model checking technolo gies relating problem ﬁnding winning strategy special safety game explaining actually solve existing veriﬁcation tool 2013 Elsevier BV All rights reserved 1 Introduction In paper provide thorough investigationfrom theory implementationof behavior composition prob lem problem realize abstract desired target behavior module reusing repurposing set accessible modules implementing certain concrete behaviors More concretely interested synthesizing sort controller coordinates available existing behaviors order replicate given desired target behavior 307980 Generally speaking behavior stands logic artifact able operate environment devices agents software hardware components workﬂows For example consider painting blocks world scenario blocks painted processed different robotic arms different behaviors stand different types arms grip painting arm cleaner arm acting environment The aim realize desired intelligent virtual painting suitably combining available arms Behavior composition particular agents multiagent settings A desired intelligent built example variety existing different modules operating performing actions common environment logic partially known These modules turn agents A set RoboCup players different capabilities form abstract sophisticated team player Sim ilarly BDI BeliefDesireIntention agent implement desired deterministic plan probably obtained Corresponding author Email addresses degiacomodisuniroma1it G De Giacomo patrizidisuniroma1it F Patrizi sebastiansardinarmiteduau S Sardiña 00043702 matter 2013 Elsevier BV All rights reserved httpdxdoiorg101016jartint201212001 G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 107 planning agent communication appealing set available user predeﬁned nondeterministic plans 3675 In robot ecologies ambient intelligence advanced functionalities home surveillance agent achieved composition simple robotic devices vacuum cleaner lamp video camera 7617 Our work form process synthesis studied Computer Science 7018951 However litera ture synthesis concentrates synthesizing process satisfying certain speciﬁcation scratch behavior composition focuses synthesizing process controller starting available components 54 This idea composing reusing components strongly forward Service Oriented Computing service com position 2426386 Indeed service composition aims composing complex services orchestrating controlling coordinating services disposal When service composition takes account behavior component service 208416 instance intimately related behavior composi tion When look behavior composition Artiﬁcial Intelligence perspective issue actual controllability available behaviors prominent While instruct behavior module carry action actual outcome action foreseen priori possibly observed execution Our work based revisiting certain stream work service composition 1315 called Roman Model 4286 keeping need dealing partial controllability central In particular consider problem synthesizing fully controllable target behavior library available partially controllable behaviors execute shared fully observable partially predictable environment 3079 Technically abstract behaviors environment ﬁnite state transition systems More precisely available module represented nondeterministic transition model partial controllability target behavior represented deterministic transition model controllability environment represented nondeterministic transition model partial predictability The environments states fully accessible transition systems Working ﬁnite state transition systems allows leverage research Veriﬁcation Synthesis Computer Science 698750323 Once settle formal speciﬁcation problem concern develop novel sound complete optimal wrt worstcase computational complexity technique generate socalled compositions The technique directly based idea composition amounts controller coordinates concurrent execution available modules mimic desired target behavior We capture mimicking formal notion simulation 6041 Obviously need consider available behaviors environment partially controllable nondeterministic special variant classical notion simulation ought devised The proposed technique interesting features The technique sound complete strong sense allows synthesize sort metacontroller called controller generator represents possible compositions While set possible compositions inﬁnite fact uncountable general controller generator unique The technique gives precise characterization sources complexity problem allows comput ing controller generator implicit representation compositions time exponential number available behaviors number states Observe checking existence composition known EXPTIMEhard deterministic available behaviors running stateless environment 61 Due universality controller generator generate sort lazy composition ontheﬂy possibly adapting reactively based runtime feedback In particular shall argue composition solutions obtained robust behavior failures ways First handle temporary behavior unavailability b unexpected behaviorenvironment evolution totally reactive ontheﬂy mannerthat extra effort replanning required continue realiza tion target behaviorif possible nature composition generator Second composition solutions parsimoniously reﬁned module c permanently unavailable d unexpectedly sumes operation We complement proposed technique showing implemented making use model checking technology applied special game structures developed context Synthesis Computer Science 3474069 27 To end polynomially encode behavior compositions safety games speciﬁc form strategy winning game corresponds composition Section 5 With reduction hand able use available tools tlv 71 order actually compute controller generator symbolic model checking Section 6 Most results presented paper appeared earlier stage 3079158026 Here revise extend combine uniform indepth investigation includes technical details extended examples provide fullycomprehensive clear analysis problem solution approach In particular technical contributions include notion composition presence partially controllable behaviors 108 G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 simulationbased technique working partially controllable behaviors produces universal solutions ones possible solutions generated repair procedures incrementally reﬁne adapt existing solution unexpected types failures alternative equivalent solution technique based safety games suited model checking based technology proofofconcept implementation tlv The rest paper organized follows In Section 2 spell framework behavior composition In Sec tion 3 provide technique based simulation synthesizing compositions notion controller generator In Section 4 approach deal behavior failures Then Section 5 turn synthesis model checking compute controller generator safety games Based results previous sections Section 6 implement behavior composition practice existing platforms synthesis model checking tlv 71 The tlv code running example reported Appendix A We discuss related work areas Artiﬁcial Intelligence Computer Science Section 7 draw conclusions Section 8 2 The framework In section formally deﬁne problem concern developing abstract framework based ﬁnite state transition systems Environment We assume shared fully observable environment provides abstract account action pre conditions effects regarded means communication behaviors deﬁned As general incomplete information preconditions effects akin action theory environment general nondeterministic Formally environment tuple E cid3A E e0 ρcid4 A ﬁnite set shared actions E ﬁnite set environment states e0 E environment initial state ρ E A E environment transition relation states When referring environment transitions equivalently use notations cid3e e performing action state e lead environment successor state e cid7 cid7cid4 ρ e e cid7 E denoting Observe notion environment shares lot similarities socalled transition systems action lan guages 34 formalism compactly represent environment setting Behaviors A behavior abstracts program agent general logic devicemodule terms internal states actions transitions Behaviors intended execute operate environment possibly interact behaviors Hence equipped ability test needed conditions guards environment states Formally behavior environment E tuple B cid3B b0 G F cid3cid4 B ﬁnite set behavior states b0 B behavior initial state G set guards E boolean functions g E cid9 cid10 F B set behavior ﬁnal states cid3 B G A B behavior transition relation cid7cid4 cid3 denotes cid7 We freely interchange notations cid3b g b action executed B state b environment state e ge cid10 ii execution Notice behaviors evolution depends environment deﬁned lead behavior successor state b action executability depends guard satisfaction B A guarded transition cid3b g b cid7cid4 cid3 b cid7 ga b Intuitively behavior states model agents decision points behavior given state agent selects action executed executable1 state Executing selected action effects leads behavior successor state new set actions executable new iteration starts Final states behavior safely stopped ﬁnal states mechanic arm correspond safe conﬁgurations 1 Subject environments current state G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 109 Fig 1 The painting arms S cid3B1 B2 B3 Ecid4 target arm BT e E respectively transitions b We behavior B environment E deterministic behavior environment states exist b B g2a b Clearly given deterministic behaviors environments states executable action behavior state predictable In words deterministic behaviors fully controllable appropriate action selections In general behaviors nondeterministic state resulting action execution unpredictable actions available state In words nondeterministic behaviors partially controllable g1e g2e cid10 exist b g1a b cid7 cid12 b b cid7cid7 cid7cid7 cid7 System target behavior As said behaviors operate environment deﬁned interact The notion introduced allows identifying set interacting behaviors environment A tuple S cid3B1 Bn Ecid4 E environment B1 Bn predeﬁned possibly non deterministic available behaviors E We stress available behaviors given modiﬁed course partially controlled action execution The behaviors model available im plementations actually use execute actions Importantly behavior instructed execute actions regardless environments current state needs state desired action actually exe cutable external controllers course constraints account coordinating set behaviors Finally deﬁne socalled target behavior BT deterministic behavior E represents fully control lable desired behavior obtained Roughly speaking challenge deal bring virtual nonreadily available target behavior properly composing execution available behaviors Observe target meant deterministic assumed desired fully known Example 1 In painting arms scenario depicted Fig 1 overall aim process blocks Only block time processed cleaned painted needs ﬁrst prepared After preparation cleaning painting performed water paint stored different tanks respectively available Both tanks charged simultaneously pushing button Blocks cleaned particular circumstances environment state e3 The nondeterministic environment E provides description dynamic domain behaviors interact Nodes edges represent states transitions respectively edge label represents action triggers tran sition initial state incoming edge source For instance said blocks painted cleaned prepared e1 state action paint clean enabled e2 e3 reached ﬁrst executing prepare Though graphically represented environment accounts tank states e1 e2 water tank e3 e4 Action clean performed e3 water tank state cleaning tool relying water available BT describes deterministic behavior desired target armagent module Observe state t2 captures deci sion point cleaning block optional selection transition demanded executor makes 110 G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 Fig 2 Enacted arm B3 decisions according internal policieseg ensuring ﬁrst block dirty Also notice BT conservative recharges tanks processing block guarantee clean executable needed The desired arm BT exist reality Nonetheless different actual arms available B1 states a1 a2 cleaningdisposing arm able clean dispose blocks B2 states b1 b4 capable preparing cleaning painting blocks B3 states c1 c2 paint arm prepare blocks processing All arms able press charge button reﬁll tanks Notice arm B2 behaves nondeterministically comes painting block This nondeterminism captures modelers incomplete information B2s internal logic Observe arm B1 requires environment e1 e2 order perform clean needs water actually execute action In example behavior states assumed ﬁnal imposing restrictions execution stopped Next derive notions behavior enactment abstract structures needed formally state composition problem characterize solutions Enacted behaviors Behaviors environment mutually affect executions Such combined evolution mally described enacted behaviors Given behavior B cid3B b0 G F cid3cid4 environment E cid3A E e0 ρcid4 enacted behavior B E tuple TB cid3S A s0 Q δcid4 S B E ﬁnite set TBs states state s cid3b ecid4 S denoteb behs e envs A set actions E s0 S initial state TB behs0 b0 envs0 e0 δ S A S enacted transition relation cid3s s cid7cid4 δ equivalently s TB s cid7 envs behs envs ga behs cid7 E action actually executable E cid7 B genvs cid10 g G action performed B state behs environment state envs satisﬁes guard labels respective transition Q s S behs F set enacted behaviors ﬁnal states Technically TB synchronous product behavior environment represents possible executions obtained running behavior B guards evaluated actions performed E Observe enacted behavior nondeterminism stems environments behaviors Moreover notice action executability behavior subject state ii guard evaluation current environment state iii environment state In particular transition labeled action outgoing current behavior B state exists given current environment state e transition outgoing e labeled B execute aas precondition satisﬁed In following ambiguity arises simplify notation denoting enacted counterpart behavior Bi simply Ti instead TBi Example 2 The enacted behavior T3 depicted Fig 2 describes evolution arm B3 act environment Observe exist joint states reached B3 For instance cid3c1 e4cid4 reached executing action dispose available B3 Enacted behavior The enacted behavior formally captures concurrent interleaved execution avail able behaviors environment Let S cid3B1 Bn Ecid4 E cid3A E e0 ρcid4 Bi cid3B bi0 G F cid3icid4 1 n The enacted behavior S tuple TS cid3SS A 1 n sS0 Q S δS cid4 SS B1 Bn E ﬁnite set TS states given sS cid3b1 bn ecid4 denote bi behisS 1 n e envsS sS0 SS initial state TS behisS0 bi0 1 n envsS0 e0 Q S sS SS 1 n behisS F set TS ﬁnal states G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 111 δS SS A 1 n SS TS s transition relation cid3sS k s cid7 S cid4 δS equivalently sS ak s cid7 S TS envsS cid7 S E envs ga behks behksS behisS behis cid7 S Bk genvsS cid10 g Gk cid7 S 1 n k The enacted behavior TS technically synchronous product environment ii asynchronous product available behaviors Except presence index k transitions identiﬁes behavior performs labeling action formally analogous enacted behavior Controller We ready introduce main component framework controller models entity able instruct available behaviors execute actions activate stop resume execution We assume controller observability available behaviors environment track runtime current states Although choices possible observability natural context available behaviors environment suitable abstractions actual modules details hidden directly exposed abstract behaviors resorting nondeterminism In order formally deﬁne controllers start notions traces histories Let TB cid3S A s0 Q δcid4 enacted behavior available target behavior B environment E A trace TB possibly inﬁnite sequence τ s0 a1 s1 a2 state h s0 a1 histories function deﬁned τ inﬁnite trace let τ scid6 trace We denote hs state scid6 lasth length cid6 h As ﬁnite traces s0 s0 ii s j j1 j cid2 0 A history ﬁnite preﬁx ending s j1 TB acid6 Traces histories extend immediately enacted behaviors adding index k System traces form acid6kcid6 s1 a2k2 scid6 Functions extended obvious histories form s0 a1k1 s0 a1k1 way Now consider S cid3B1 Bn Ecid4 enacted behavior TS Let H set TS histories A controller S possibly partial function P H A cid9 1 n2 Intuitively P h identiﬁes available behavior BP ha delegate action S evolved described enacted behavior history h The behavior composition problem Roughly speaking problem deal synthesizing given S controller realizes desired target behavior controller able coordinate available modules resulting behavior fact analogous target In order formalize notion ﬁrst need deﬁne trace realizations Let S cid3B1 Bn Ecid4 BT target behavior P controller S Furthermore let τ enacted target behavior trace trace TT form τ s0 a1 We deﬁne set enacted histories induced controller P trace τ set Hτ P s1 a2 τ P cid6cid20 Hcid6 cid2 H0 sS0 τ P H j1 τ P set j 1length histories h j1k j1 s j1 S h H j envs k j1 P h j1 history h action j1 trace τ delegated available behavior B τ P j1 S envs j1 k j1 lasth s j1 TS behavior B k j1 actually execute action j1 j1k j1 Informally Hτ P H represents set possible enacted histories ensue controller P processes target trace τ Notice evolution environment histories Hτ P ought respect evolution environment encoded trace τ Also note evolution environment independent behavior executes action target cause environment evolve state performing action action available behavior able cause evolution environment Then P realizes enacted target trace τ recall τ s0 a1 s1 a2 1 TS histories h Hτ P h τ P h τ Q T behs 2 τ ﬁnite s h1 k lasth τ ﬁnal BT τ length histories h Hτ cid7 S TS s cid7 S τ P lasth Q S h1k s 2 The kind general synthesis focus general assumption perfect recall 32 seen far decision As technical contributions paper shall demonstrate later ﬁnite controllers suﬃcient composition framework 112 G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 Fig 3 Two ﬁnite state controllers Informally saying controller realizes target behavior trace means given possibly inﬁnite sequence actions compliant target behavior possible environment evolution resulting execution action sequence controller selects step execution behavior able actually execute action requested step matter behaviorswhich nondeterministicselected earlier evolved In addition target trace ﬁnishes ﬁnal state enacted target behavior brought legal terminating state In words controller able delegate actions mimic target behavior Because deterministic behavior seen speciﬁcation set traces controller P realizes target behavior BT realizes traces TT This informally rephrased ability delegate step step target behaviors action sequences matter environment available behaviors evolve Observe controller observe current states available behaviors environment fact observe history current state order decide behavior select This makes controllers akin advanced form conditional plans fact problem related planning 39 synthesis tasks Here planning choosing action shall execute action action happens runtime Formally problem deal follows Given S cid3B1 Bn Ecid4 deterministic target behavior BT E synthesize controller P real izes BT All controllers solution problem called compositions BT E Example 3 Even compositions general functions histories actions cases depend historys k cid2 0 states In cases represented ﬁnite state machines In Fig 3 instance ﬁnite state controllers P 1 P 2 depicted An edge outgoing state s labeled pair c cid3a kcid4 means controller state s action requested delegated behavior Bk provided condition c holds omitted conditions assumed true The main difference P 1 P 2 arm painting P 1 uses B2 P 2 uses B3 In addition P 1 recharges tanks behavior B1 behavior B2 b1 uses behavior B2 B2 state b1 Controller P 2 hand uses B3 recharge tanks For example trace realization consider trace τ cid3t1 e1cid4 prepare cid3t2 e2cid4 clean cid3t3 e3cid4 paint cid3t4 e3cid4 enacted target behavior TT depicted Fig 4a graphical patterns states relevant The set Hτ P 1 enacted histories induced P 1 τ enacted behavior TS Fig 4b contains exactly following traces h1 cid3a1 b1 c1 e1cid4 h2 cid3a1 b1 c1 e1cid4 prepare2 cid3a1 b2 c1 e2cid4 h3 cid3a1 b1 c1 e1cid4 prepare2 cid3a1 b2 c1 e2cid4 clean1 cid3a2 b2 c1 e3cid4 h4 h3 h5 h3 paint2 cid3a2 b1 c1 e3cid4 paint2 cid3a2 b3 c1 e3cid4 Observe action paint lead environment state e2 state e3 traces Hτ P 1 account outcome This fact Hτ P 1 contains histories encoding environment evolution target trace τ delegations performed dictated controller P 1 The case environment moves state e2 accounted target trace τ cid7 matches τ state lastτ cid7 cid3t4 e2cid4 Notice order P 1 composition τ cid7 realized As available behaviors instead possible evolutions accounted set Hτ P 1 For instance h4 h5 represent G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 113 Fig 4 The largest NDsimulation relation cid15 enacted target TT fragment enacted TS A state TS NDsimulates TT share texture cid3cid3a1 b3 c1cid4 e2cid4 cid15 cid3t4 e2cid4 Observe state cid3cid3a1 b1 c1cid4 e1cid4 texturesplain black whiteand NDsimulates cid3t1 e1cid4 cid3t5 e1cid4 state cid3cid3a1 b1 c1cid4 e3cid4 NDsimulates state similar runs fact behavior B2 evolves differently executing paint action b1 h4 b3 h5 It easily seen P 1 realize trace τ traces TT composition BT E On contrary P 2 composition BT To consider target trace τ It turns set Hτ P 2 contains history cid3a1 b1 c1 e1cid4 prepare2 cid3a1 b2 c1 e2cid4 clean1 cid3a2 b2 c1 e3cid4 transition cid3a2 b2 c1 e3cid4 paint3 s cid7 S exists TS s cid7 S Hence P 2 realize τ composition This concludes formal statement behavior composition problem The framework presented stands considered core framework basic setting incorporates distinguishing features problem However stress extensions generalization deﬁned obtain nontrivial variants adopted model solve similar problems domains satisfy different assumptions Section 8 discussion 3 Composition simulation Next present approach composition synthesis This originally inspired 15 restricted version composition problem addressed context services taking standard notion simulation rela tion 6041 formal tool solution characterization Here shared environment devilish nondeterminism available behaviors environment signiﬁcantly sophisticate framework calling new formal set ting presented usual notion simulation relation longer fully characterize set solutions guide solution process Intuitively transition S1 simulates transition S2 S1 able match step step S2 moves execution More precisely imagine execute S2 starting initial state At step execution S2 performs transition allowed current state If possible ways executing S 2 S1 step choose transition matches according criteria label equivalence executed S2 S1 simulates S2 We stress S1 decisions required online fashion S 2 evolves In words case S1 knows advance transitions S2 execute future Such intuition formalized following deﬁnition nondeterminism shared environment taken account 114 G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 Algorithm 1 NDSTT TS Largest NDsimulation 1 R S T SS cid3sT sS cid4 envsT cid12 envsS sT Q T sS Q S 2 repeat 3 R R C C set cid3sT sS cid4 R exists action A k exists transition sT s cid7 T TT transition sS ak s cid7 S TS envs cid7 T envs b exists transition sS ak s cid7 S TS envs cid7 T envs cid7 S cid7 S cid7 T s cid7 S cid4 R cid3s 4 C 5 return R Let S cid3B1 Bn Ecid4 BT target behavior E TS cid3SS A 1 n sS0 Q S δS cid4 TT cid3S T A sT 0 Q T δT cid4 enacted enacted target behaviors corresponding S BT E respectively An NDsimulation relation TT TS relation R S T SS cid3sT sS cid4 R implies 1 envsT envsS 2 sT Q T sS Q S 3 A exists k 1 nalso referred witness cid3sT sS cid4 R action asuch transitions sT s cid7 T TT ak s exists transition sS ak s cid7 S TS envs b transitions sS cid7 S TS envs cid7 S envs cid7 T cid7 S envs cid7 T case cid3s cid7 T s cid7 S cid4 R In words pair enacted states NDsimulation relation states share environment component ii target behavior ﬁnal state iii actions enacted target behavior execute exists witness behavior Bk execute action guaranteeing regardless nondeterminism preservation NDsimulation relation successor target states We state sT S T NDsimulated state sS SS sS NDsimulates sT denoted sT cid15 sS exists NDsimulation relation R TT TS cid3sT sS cid4 R Observe coinductive deﬁnition As result relation cid15 NDsimulation relation fact largest sense NDsimulations contained cid15 Given TT TS relation cid15 computed Algorithm 1 NDS Roughly speaking algorithm works iter atively removing tuples requirements NDsimulation deﬁnition apply ﬁxpoint reached It straightforward prove algorithm reaches ﬁxpoint ﬁnite number steps computes largest NDsimulation comparing algorithm deﬁnition NDsimulation relation observing tuple added candidate set R C R Example 4 Fig 4 shows fragment largest NDsimulation relation painting blocks world example In par ticular Fig 4a shows enacted target behavior BT Fig 4b depicts fragment enacted behavior States Fig 4b contain half environment component half compact representation available service current states ﬁrst component integer string represents subscript state B1 second refers B2 For instance node labeled cid3211 e4cid4 represents state cid3cid3a2 b1 c1cid4 e4cid4 Matching graphical patterns TT TS states mean states NDsimulation For example cid3cid3a1 b3 c2cid4 e2cid4 TS NDsimulates cid3t2 e2cid4 TT implies conceivable action taken cid3t2 e2cid4 replicated behavior possibly different action cid3cid3a1 b3 c2cid4 e2cid4 ii property propagates resulting successor states Observe clearly TT state simulated TS s case cid3t4 e2cid4 simulated cid3cid3a1 b1 c1cid4 e2cid4 cid3cid3a1 b3 c1cid4 e2cid4 Also converse happen cid3cid3a1 b1 c1cid4 e1cid4 TS NDsimulates TT state cid3t1 e1cid4 cid3t5 e1cid4 The relevance NDsimulation relation composition problem addressed twofold Firstly shown computing largest NDsimulation relation target enacted behavior enacted behavior essentially equivalent checking exists composition target behavior uses behaviors available Secondly simulationbased approach overcomes main obstacles previous solution techniques 13 encountered enables construction ﬂexible solutions runtime information account additional worstcase cost Our ﬁrst main result states checking existence composition reduced checking enacted target behaviors initial state NDsimulated enacted behaviors initial state corresponds checking exists NDsimulation relation includes initial states G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 115 Theorem 1 Let S cid3B1 Bn Ecid4 BT target behavior E Moreover let TT cid3S T A sT 0 Q T δT cid4 TS cid3SS A 1 n sS0 Q S δS cid4 enacted target behavior enacted behavior BT S respectively Then composition controller P target BT S exists sT 0 cid15 sS0 Proof If Part First deﬁne P To end let h s0 S scid61 exists TT history hT s0 T scid6 T k 1 n transitions scid6 T T TT action BT executable scid6 scid61 T a1 acid6 scid6 acid6kcid6 a1k1 scid6 T history matching actions h scid6 cid15 scid6 S H TS history A action If S transition T deﬁne P h ωa ωa set indexes T exists transition scid6 S ak scid61 transitions scid6 S S ak scid61 S TS envscid61 TS envscid61 S envscid61 T S envscid61 scid61 T T cid15 scid61 S cid15 scid6 Because scid6 T P h undeﬁned S know ωa cid12 In cases hT exist BT executable Next prove P composition TT trace realized P To end consider TT trace τ s0 T a1 s1 T a2 s0 T sT 0 prove following claim ﬁrst TS history h s0 S cid2 Since Hτ P Hcid6 cid6cid20 τ P prove induction cid6 follows acid6kcid6 a1k1 scid6 S Hτ P 0 cid3 cid6 τ case scid6 T cid15 scid6 S sS0 Clearly sT 0 cid15 sS0 holds trivially acid61kcid61 Let H0 τ P Take hcid61 s0 S envscid61 envscid61 deﬁned follows scid61 T cid15 scid61 S T scid6 S acid6kcid6 a1k1 τ P s0 S P hcid6 acid61 kcid61 By induction hypothesis know scid6 S sS0 By deﬁnition Hcid61 S Hcid61 scid61 τ P scid6 S cid15 scid6 scid61 TS S Then way P S acid61kcid61 T Next h Hτ P h τ Because way Hi τ P constructed h ought form cid15 scid6 acid6kcid6 a1k1 scid6 S h match actions τ From scid6 T h s0 S NDsimulation fact acid61 BT executable scid6 scid6 S S Then deﬁnition T way P deﬁned exists transition S k P h acid61 k 1 n In addition τ ﬁnite h Hτ τ P τ Q T TT ﬁnal enacted state s T lasth Q S acid61k scid61 s Then P realizes τ P composition cid15 lasth turns implies s OnlyIf Part Let P controller S composition BT E From P build relation R S T SS NDsimulation cid3sT 0 sS0cid4 R The deﬁnition R follows cid3sT sS cid4 R exists TT trace τ s0 T a2 induced TS history h Hτ P sT s h T sS lasth Next R NDsimulation relation page 114 Consider pair cid3sT sS cid4 R By Rs deﬁnition a1 s1 T τ T τ T exists TT trace form τ s0 T acid6 a1 sT cid6length TS history induced τ P h Hcid6 ˆτ P h s0 S acid6kcid6 a1k1 sS First way set Hcid6 τ P constructed envsT envsS holds histories matching evolution environment trace τ considered Second P composition P realizes τ hlength trace preﬁx τ h It follows lastτ h sT Q T sS Q S BT executable sT exists sT h induced P realizing trace τ aka s ka 1 n P h ka sS It remains prove requirement NDsimulation holds To end consider action A τ P Since P composition realizes trace τ exits s cid7 T TT Because S TS Next consider transition sT cid7 cid7 cid7 T envs S S envs cid7 T legal trace TT history cid7 S holds requirement 3b NDsimulation deﬁnition evolution environment independent behaviors exist sS condition 3a NDsimulation deﬁnition applies Moreover τ cid7 τ cid6 h satisﬁed ka P h witness sT cid15 sS action cid2 T BT Take trace τ τ cid6 τ cid7P Hence deﬁnition R Rs T Clearly h Hcid6 S Hcid61 aka s aka s s s s cid7 T s cid7 Theorem 1 provides straightforward method checking existence composition compute largest NDsimulation relation TT TS ii check cid3sT 0 sS0cid4 relation 116 G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 As computational complexity considerations observe algorithm NDS described computes largest ND simulation relation cid15 TT TS polynomial time respect size TT TS Since number states TS exponential number available behaviors B1 Bn largest NDsimulation relation cid15 computed exponential time number available behaviors Hence formally stated theorem technique notable improvement respect ones based reduction PDL 3079 exponential number states behaviors environment3 Considering composition problem EXPTIMEhard 61 upper bound tight roughly speaking best hope Theorem 2 Checking existence compositions computing largest NDsimulation relation cid15 polynomial time number states available behaviors environment target behavior exponential time number available behaviors Once NDsimulation relation computed problem synthesizing controller composition arises Next largest NDsimulation relation build ﬁnite state program controller generator returns step set available behaviors capable performing requested action guaranteeing possibility delegating available services targetcompliant requests issued future Formally let S cid3B1 Bn Ecid4 BT target behavior E TS cid3SS A 1 n sS0 Q S δS cid4 TT cid3S T A sT 0 Q T δT cid4 enacted behavior enacted target behavior corresponding respectively S BT The controller generator CG S BT tuple CG cid3Σ A 1 n ωcid4 1 Σ cid3sT sS cid4 S T SS sT cid15 sS set CG states formed pairs TT TS state belonging largest NDsimulation relation given σ cid3sT sS cid4 denote sT comT σ sS comS σ 2 A ﬁnite set shared actions 3 1 n ﬁnite set available behavior indexes 4 Σ A 1 n Σ transition relation cid3σ k σ cid7cid4 σ ak σ cid7 CG exists transition comT σ exists transition comS σ σ cid7cid7 S T SS comS σ comT σ cid7 TT ak comS σ cid7 TS 5 ω Σ A cid9 2 1n ωσ cid3 k output function deﬁned cid5 cid4 cid4 σ cid7 Σ st σ ak σ cid7 CG comT σ cid7cid7 TT envcomT σ cid7cid7 envcomS σ cid7cid7 case cid3comT σ cid7cid7 comS σ cid7cid7cid4 Σ k witness comT σ cid15 comS σ action ak comS σ cid7cid7 TS comT σ Roughly speaking CG ﬁnite state transducer given action compliant target behavior outputs function ω set available behaviors perform according largest NDsimulation relation cid15 Observe computing CG relation cid15 easy involves checking local conditions In fact directly compute CG enriching relation cid15 computation information actions indices transitions By Theorem 1 exists composition BT sT 0 cid15 sS0 CG include state σ0 cid3sT 0 sS0cid4 In case build actual controllers called generated controllers compositions BT picking step available behavior returned output function ω Notice fullobservability available behavior states crucial assumption ω depend current states environment behaviors nondeterminism known certainty reconstructed looking action history As result action execution order obtain ωs output new states environment need known Of course complex scenarios available behavior states partially observable considered scope paper Formally controllers compositions generated CG follows4 Firstly analogy behavior traces deﬁne CG traces histories trace CG possibly inﬁnite sequence σ 0 a1k1 transition σ j j1k j1 σ j1 CG j cid2 05 consequently history CG ﬁnite preﬁx trace Functions σ 1 a2k2 CG histories deﬁned usual For technical convenience given CG trace τCG σ 0 a1k1 a2k2 deﬁne corresponding projected trace sequence projS τCG comS σ 0 intuitively obtained τCG taking component state Clearly deﬁnition CG σ 0 cid3sT 0 sS0cid4 a1k1 comS σ 1 σ 1 a2k2 3 Though light result better complexity analysis involving speciﬁc PDL satisﬁability procedures carried 4 We stress composition exists σ0 cid3sT 0 sS0cid4 Σ Theorem 1 constructing composition makes sense condition holds 5 Observe require σ 0 cid3sT 0 sS0cid4 σ0 general CG include σ0 G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 117 projS τCG legal TS trace Also τCG deﬁne corresponding projected target trace projT τCG comT σ 0 a2 easily proven legal TT trace σ 0 cid3sT 0 sS0cid4 Similarly derive CG comT σ 1 history hCG projected history projected target history respectively TT history TS history σ 0 cid3sT 0 sS0cid4 a1 Next let HCG set CG histories consider selection function CGP HCG A cid9 1 n CGPhCG ωlasthCG hCG HCG A ωlasthCG nonempty left uncon strained ωlasthCG Finally assuming CG includes σ0 cid3sT 0 sS0cid4 CG history hCG σ 0 a1k1 acid6kcid6 σ cid6 σ 0 σ0 consider corresponding projected history cid6 cid6 cid7 a1k1 acid6kcid6 comS σ cid6 cid7 projS hCG comS σ 0 For given selection function CGP generated controller function P CGP H A cid9 1 n TS history h H action A h projS hCG CG history hCG P CGPh CGPhCG The following results relate CGs compositions given CG containing σ0 getsall controllers compositions considering possible resolutions nondeterminism function CGP Notably speciﬁc composition inﬁnite state program controller generator fact includes ﬁnite Theorem 3 Let S BT TS TT let CG cid3Σ A 1 n ωcid4 controller generator S BT If σ0 cid3sT 0 sS0cid4 Σ 1 generated controller obtained CG shown composition BT E 2 controller composition BT E obtained CG shown Proof To prove ﬁrst claim target trace τ HT controller P CGP deﬁned exists controller P deﬁned If Part Theorem 1 Hτ P Hτ P CGP Since P proven realize τ looking deﬁnition trace realization prove P CGP realizes τ τ P CGP Let Hcid6 Hτ P Hτ P CGP set histories h s0 S analogous set τ P We prove induction existence P deﬁned If Part Theorem 1 Hcid6 S induced τ P CGP Also let Hcid6 scid6 cid2 τ P cid6 cid2 0 Since controller C Hτ C τ C Hτ P CGP Hτ P Hcid6 cid6cid20 τ P τ P CGP Hcid6 sS0 By induction hypothesis assume acid6kcid6 a1k1 Hcid6 For base case cid6 0 matter P deﬁned H0 acid6kcid6 a1k1 τ P consider history h s0 S j k j a1k1 Hcid6 τ P CGP scid6 τ P CGP H0 τ P S Hcid6 τ P CGP s j S In particular kcid6 P CGPhcid61 acid6 deﬁned 1 cid6 ki P CGPhi1 ai h j s0 S acid61kcid61 fore P CGP deﬁnition exists CG history hCG cid3s0 S cid4 projS hCG hcid61 T s0 In principle hCG long projS hCG hcid61 In particular unrelated τ But hCG S envsi history CG cid3si S In turn h T 0 cid6 1 Finally BT deterministic T envsi S envsi induced τ envsi T So conclude projT hCG τ cid61 Based fact sT 0 behsi having s0 s0 T T projS hCG hcid61 hCG unique ﬁxed h T si T envsi T behsi S cid4 Σ 0 cid6 1 si cid15 si S envsi cid3scid61 T envsi S cid4 a1k1 scid61 T T By deﬁnition induced history given h kcid6 P CGPhcid61 acid6 CGPCGPhCG acid6 ωcid3scid61 Because h induced history S cid4 a1k1 acid6kcid6 cid3scid6 T scid6 T s0 scid61 S cid4 acid6 So observing T S cid4 CG history particular deﬁnition CG ω easily seen sequence hCG cid3s0 projS hCG h projT hCG τ cid6 S T scid6 cid4 Σ acid61 BT executable scid6 Next prove possible extensions h obtained realizing action acid61 τ according P CGP possible P vice versa In words prove Hcid61 τ P Two cases possible τ τ cid6 τ ﬁnite ii In case trivially obtain Hcid61 S T trivially comes acid61 position τ In addition hC G cid3scid6 proved CG history projS hCG h Therefore deﬁnition generated controller P CGPh acid61 kcid61 ωcid3scid6 T scid6 On hand consider construction P If Part Theorem 1 Given h τ cid6 matches construc S proven So P h acid61 ωacid61 cid12 But tion actions h scid6 T S cid4 acid61 ωacid61 matter index P CGP returns P choose index kcid61 observing ωcid3scid6 T scid6 ωacid61 kcid61 P CGPh acid61 P h acid61 Clearly given h acid61 kcid61 possible history For case ii observe scid6 T lastτ cid6 cid15 lasth scid6 S cid4 acid61 cid12 τ P CGP Hcid61 τ P Hcid61 cid15 scid6 τ P CGP 118 G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 acid61kcid61 scid61 ˆh Hcid61 form ˆh h Hcid61 τ P We prove second showing TT traces decisions P arbitrary history induced τ P ˆh Hcid61 τ P CGP Since h arbitrarily chosen ultimately Hcid61 τ P CGP a1 s1 T τ P compliant deﬁnition generated controller scid6 a2 TT trace h s0 S acid6kcid6 a1k1 S cid4 a1k1 Let τ s0 T acid6kcid6 S Hτ P generic history induced τ P Since P composition OnlyIf Part Theorem 1 ki P hi ai1 witness si S ai1 S cid4 CGhistory Indeed deﬁnition ω BT 0 cid6 1 Then hCG cid3s0 T scid6 executable sT ωcid3sT sS cid4 contains witnesses sT cid15 sS So true particular ωcid3si T si Since preﬁx history history cid6 arbitrary argument proves preﬁx h h j j 0 cid6 1 exists hCG preﬁx hCG j CGhistory projS hCG j h j But S cid4 j1 P CGP behave way P CGPh j j1 CGPhCG j ωcid3s j T s P h properly picking step element set returned ω Since cid6 arbitrarily chosen result extends histories h Hτ P cid2 S cid4 j1 As k j ωcid3s S cid4 ai1 cid3scid6 T s0 j T s cid15 si T j j We close section observing compositions generated justintime based CG ob servability behavior environment states Intuitively CG analogous sort metaplan stateful nondeterministic complete universal plan keeps existing plans disposal selects follow action possibly contingent decisions6 Example 5 The CG decide delegate actions requests target arm BT come For instance clean action requested block prepared CG knows ought delegate request arm B A stay NDsimulation relation While physically possible delegating clean arm BB bring enacted state cid3cid3a1 b1 c1cid4 e3cid4 known NDsimulation enacted target 4 On behavior failures In discussing behavior composition problem far assumed implicitly available component modules fully reliable available behave correctly relative speciﬁcation However situations domains reliability components adequate assumption For example multiagent complex highly dynamic domains rely total availability reliability existing modules stop available variety reasons devices break agents decide stop cooperating communication agents drop exogenous events change state environment behaviors possibly reappear later stage creating new composition opportunities controller Generally speaking behavior environment speciﬁcations seen contracts failures scribed interpreted breaches contracts In section identify classes failures propose respective procedures repair controller execution failure occurred Speciﬁcally identify ﬁve core ways breaking contracts7 A behavior temporarily freezes stops responding remains eventually resumes state As result frozen controller delegate actions b A behavior unexpectedly arbitrarily respecting transition relation changes current state The controller principle delegating actions account behaviors new state c The environment unexpectedly arbitrarily respecting transition relation changes current state The controller account affects target available behaviors d A behavior dies permanently unavailable The controller completely stop delegating actions e A behavior assumed dead unexpectedly resumes operation starting certain state The controller exploit opportunity delegating actions resumed behavior Previous composition techniques 143079 address cases assume controllers deal fully reliable modules Consequently failures left default option 6 As stated deﬁned controllers general possible Note traces unbounded nature immediate ﬁnite controller Indeed notion simulation includes local condition states transition condition captures states evolve time 7 Obviously assume infrastructure able distinguish failures G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 119 replanning scratch new controller What shall prove section simulation based technique presented Section 3 intrinsically robust sense able deal unexpected failures suitably reﬁning solution hand ontheﬂy cases b c parsimoniously cases d e avoiding replanning 41 Reactive adaptability We start showing Theorem 3 provides sound complete technique dealing failure cases b c requiring replanning step As matter fact controller generator actual compositions generated justintime target compliant actions requested In words delay choice performed selection function CGP runtime contingent information actual behavior availability taken account This ability provides executor great ﬂexibility sense switch compositions online needed A controller generated manner referred justintime JIT generated controller denoted CGPjit Below discuss effectiveness JIT generated controllers cases b c Freezing behaviors A JIT generated controller CGPjit fully addresses temporary behavior freezing failure case Indeed behavior temporarily frozen CGPjit simply stops delegating actions continues possible choice8 Obviously choices possible CGPjit left option waiting frozen behavior come State change behaviors environment JIT generated controllers address unexpected changes internal state behaviors andor environment failure cases b c9 To understand let denote TS zS variant enacted behavior initial state zS instead sS0 Similarly let denote TT zT enacted target behavior initial state zT instead sT 0 Next suppose state enacted behavior changes unexpectedly state ˆsS change state behavior set behaviors andor environment Then sT state target failure happened recompute composition starting ˆsS target starting ˆsT ˆsT sT environment state replaced ˆsS note ˆsT sT failures type b Observe NDsimulation relations independent initial states target enacted behaviors Therefore largest NDsimulation relation TT ˆsT TS ˆsS fact relation cid15 computed This implies use controller generator CG justintime generated controller CGPjit guarantee compositions variant target variant captured CG CGPjit Put need check ˆsT cid15 ˆsS continue use CGPjit 0length CG history h0 CG cid3ˆsT ˆsS cid4 Example 6 Upon unexpected change environment available behavior CG reactadapt change immediately For instance referring Fig 4 suppose target state t3 environment state e3 available behaviors B1 B2 B3 states a2 b2 c1 respectively That TT cid3t3 e3cid4 TS cid3cid3a2 b2 c1cid4 e3cid4 Suppose unexpectedly environment happens change state e2someone recharged water tank All needed case check new states TT TS cid3t3 e2cid4 cid3cid3a2 b2 c1cid4 e2cid4 respectively related according relation cid15 Since CG continues realization target new enacted states Computing reactive compositions ontheﬂy Observe JIT generated controller CGPjit computed ontheﬂy storing NDsimulation relation cid15 In fact point information required choice ωσ σ Σ recall Σ cid15 formed current state enacted target behavior enacted behavior Now order compute ωσ need know cid15 42 Parsimonious reﬁnement As seen failure cases b c need particular effort dealt However consider ing cases d e things change signiﬁcantly simple reactive approach longer suﬃcient complex reﬁnement techniques required Concretely suppose current composition executedfrom NDsimulation relationbecomes suddenly invalid disruption available behavior unavailable While current NDsimulation relation composition longer sound necessary recompute new NDsimulation relation corresponding composition scratch As matter fact shall NDsimulation hand reﬁned intelligent manner reuse previous compu tation effort Technically current NDsimulation relation nature disruption identify upper 8 If information hand CGPjit use choose informed way scope paper 9 Although hardly meaningful ones unforeseen changes target state accounted similar way 120 G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 Algorithm 2 NDSPTT TS Rinit Rsure 1 R Rinit Rsure 2 R R cid3sT sS cid4 envsT cid12 envsS sT Q T sS Q S 3 repeat 4 R R C C set cid3sT sS cid4 R exists action A k transition sT TT transition sS cid7 S TS envs ak s cid7 T envs s cid7 T b exists transition sS cid3s cid7 T s cid7 S cid4 R Rsure ak s cid7 S TS envs cid7 S cid7 S cid7 T envs 5 C 6 return R Rsure lower bounds new NDsimulation relation needs computed disruption The upper bound rule tuples known new NDsimulation lower bound provide tuples ought relation To end deﬁne new algorithm Algorithm 2 NDSP instead computing largest NDsimulation relation scratch Algorithm 1 leveraging known lower Rinit upper Rsure bounds More speciﬁcally algorithma generalized parametric version Algorithm 1computes largest NDsimulation relation TT TS contained initial relation Rinit S T SS assuming resulting relation contains relation Rsure S T SS Of course upper lower bounds reasonable We present set results tells use algorithm order reﬁne adapt existing NDsimulation relation hand As observe NDSP algorithm works way algorithm NDS instead starting S T SS takes initial set Rinit input ii neglects pairs contained Rsure removal assumed surely included NDsimulation relation computed As expected Rinit S T SS Rsure algorithm NDSP behaves exactly NDS Indeed special case result identiﬁes suﬃcient conditions new parameters guarantee outputs NDSP NDS match Lemma 4 Consider S B1 Bn E target behavior BT let TS TT respective enacted behaviors If Rsure NDSTT TS Rinit NDSPTT TS Rinit Rsure NDSTT TS 1 Ri Proof Let Ri iteration Similarly deﬁne Ci iterations clearly n2 cid3 n1 2 sets representing R algorithms NDS NDSP respectively ith repeatloop 2 Moreover assume NDSP NDS require n2 n1 respectively repeatloop 1 Ci First let prove induction Ri 2 Rsure Ri 1 r n1 Let π cid3sT sS cid4 Rr1 Suppose Rr 2 expanded iterations case π Rsure π NDSTT TS π Rr1 Rr1 1 1 Because π Rr1 1 It obvious R0 Rsure π Rr1 π Rr1 2 π Rr Rsure Rr π Rr 1 2 1 This means exists action ˆa A k transition sT π Cr b step 3 NDS holds If case holds π Cr exists tuple π cid7 k Rr k action ˆa tuple π cid7 step 3 hold π Cr b NDS NDSPTt TS Rinit Rsure NDSTt TS k satisfy requirement step 4 NDSP Hence π Cr 2 consequently π Rr1 S TS π cid7 cid7 cid7 S cid4 sS ˆak s cid7 T s cid3s 2 cid7 1 2 2 1 Rsure R0 Since Ri 1 observe Rinit S T SS 1 Ri 2 NDSTT TS π deleted rth loop iteration NDS cid7 T TT 2 trivially holds If case b applies k 1 By induction hypothesis π cid7 Rsure Thus 2 2 We conclude Contradiction Therefore Rr1 Rsure Rr1 k Rr ˆa s 2 1 Next prove NDSTT TS NDSPTT TS Rinit Rsure To end shall prove induction NDSTT TS Ri Rsure Since NDSTT TS Rinit NDSTT TS R0 Rsure Next suppose NDSTT TS Rr 2 2 2 Rsure r n2 let π cid3sT sS cid4 NDSTT TS π Rr1 Rsure Rsure By induction hypothesis π Rr 2 π removed R2 rth iteration NDSP algorithm This means exists ac ˆa s cid7 tion ˆa A k transition sT T TS b fourth step NDSP holds In particular case b applies k exists tuple π cid7 cid7 cid7 S TS cid3s S cid4 sS k π cid7 k Rn1 1 However π NDSTT TS k Rn1 π Rn1 tuples π candidate moved set Rn1 1 π Cn1 Rsure NDSTT TS NDSPTt TS Rinit Rsure follows cid2 k NDSTT TS π cid7 k Rr 1 But action ˆa corresponding π cid7 1 Then algorithm NDS requires n1 contradiction Hence π Rr Rsure By induction hypothesis π cid7 ˆak s cid7 T s 2 1 2 2 Next introduce convenient notations shrink expand systems NDsimulation relations Given S cid3B1 Bn Ecid4 set behavior indexes W 1 n denote SW derived S G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 121 keeping behaviors Bi W note S S1 n Also enacted target behavior TT E denote cid15W largest NDsimulation relation TT TSW Finally given set indexes U 1 n W U denote cid15W U relation obtained cid15W trivially putting Bi U Formally operation deﬁned follows loss generality assume W 1 cid6 U cid6 1 m cid15W U cid3 cid7cid4 cid4 cid4 s cid3sT s cid6 1 m cid5 cid7 cid3b1 bcid6 bcid61 bm ecid4 cid3sT cid3b1 bcid6 ecid4cid4 cid15W bi state Bi Intuitively adding set behaviors extend reduce capabilities Indeed additional behaviors constrain way present general able execute actions In particular simulate target behavior environment expect ability possibly introducing additional behaviors The result proves intuition putting set behaviors U SW extending cid15W shown guaranteed obtain NDsimulation relation expanded SW U necessarily largest Lemma 5 Given S B1 Bn E target behavior BT respective enacted behavior TT E let W U 1 n W U The following hold cid15W U cid15W U cid15W U NDsimulation relation TT TSW U cid7cid4cid4 cid15W U Due deﬁnition operation case cid3t ecid4cid15W cid3b1 bcid6 e Proof Without loss generality consider W 1 cid6 U cid6 1 m Suppose cid3cid3t ecid4 cid3b1 bcid6 bcid61 cid7 cid7cid4 This means e e bm e A exists index ka W satisfying requirements NDsimulation relation deﬁnition SW Then cid3t ecid4 cid15W U cid3b1 bcid6 bcid61 bm e A index ka satisfy requirements NDsimulation deﬁnition SW U new behaviors remove inhibit behaviors capabilities This shows cid15W U NDsimulation relation TT TSW U cid15W U cid15W U cid15W U largest NDsimulation relation TT TSW U cid2 cid7cid4 Indeed e e cid7 As turns adding new behaviors minimal impact NDsimulation relation recomputed simple projection operations Unfortunately case behaviors unavailable As discussed general disruptive impact NDsimulation relation order recomputed requires local changes To let F W set indexes behaviors permanently unavailable denote cid15WF relation obtained cid15W projecting dropping termsarguments corresponding failed behaviors Bi F In general soobtained relation contains possibly properly new largest NDsimulation failure Speciﬁcally Lemma 6 For S TT let W F 1 n F W The following holds cid15W F cid15WF cid15WF NDsimulation relation TT TSW F Proof By Lemma 5 cid15W F F cid15W F F cid15W F F cid15W By projecting F relations cid15W F F F cid15WF Then cid15 X X cid15 cid15 X cid15W F cid15WF follows It immediate ﬁnd cases containment proper second follows cid2 Notice cid15W largest NDsimulation relation behaviors W active projected relation cid15W F necessarily NDsimulation relation contracted SW F In light results deal failure cases d e Permanent unavailability When behavior permanently unavailable cf case d wait resume Instead continue executing composition controller hope best failed behavior actually required actions occurring target behavior executed runtime reﬁne current composition continue guaranteeing realization target behavior Assume point composition built NDsimulation relation executing set available behaviors unavailable Clearly current composition longer sound required behaviors available NDsimulation relation longer useful required recompute new corresponding 122 G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 Fig 5 An NDsimulation relation enacted target behavior TT enacted TS13 composition order executing target behavior Of course new NDsimulation relation com puted scratch considering set currently available behaviors However computational point view best solution advantage previously computed In following propose different approach based results aims minimizing required computational effort reﬁning recomputing NDsimulation relation hand Lemma 6 essentially says behaviors unavailable order compute new NDsimulation relation execute NDSP algorithm instantiating Rinit relation obtained projecting failed components current NDsimulation relation This yields general substantially algorithm iterations NDS Indeed behaviors unavailable effort obtain new largest NDsimulation relation systematic incremental tuples previously discarded considered This Lemma 4 leads following Theorem 7 Consider S BT TT Let W 1 n contain indexes behaviors currently working S let F W contain indexes behaviors given point permanently unavailable Then relation β β cid15W F following holds cid15W F NDSPTT TSW F cid15W F β Proof Direct consequence Lemmas 4 6 cid2 Example 7 Suppose arm BT Fig 1 successfully realized means controller P 1 Fig 3 Assume arm B2 breaks state b3 painting block With B2 controller P 1 guarantee BT realization anymoreyet interestingly controller P 2 new unexpected subsystem To handle failure case ﬁrst behavior B2 projected NDsimulation relation cid15123 getting cid151232 new largest NDsimulation relation computed NDSP starting relation cid151232 obtaining cid1513 new CG corresponding composition derived The result shown Fig 5 enacted target behavior Fig 4b reported convenience Like Example 4 matching ﬁlling patterns individuate pairs NDsimulation relation Observe tuple cid3cid3t3 e3cid4 cid3cid3a2 c1cid4 e3cid4cid4 belongs relation cid151232 ﬁltered NDSP algorithm original tuple cid3cid3t3 e3cid4 cid3cid3a2 b2 c1cid4 e3cid4cid4 cid15123 relied B2 maintaining NDsimulation Resumed behaviors Consider situation operating behaviors indexes W supposed permanently unavailable unexpectedly available cf case e Let U set indexes behaviors U W As observed reduces capabilities enhance choices differently said behaviors U available realize executions However wants exploit capabilities brought resumed behaviors new largest NDsimulation relation cid15W U computed In leverage fact cid15W U contains relation cid15W U cf Lemma 5 completely neglect potential ﬁltering tuples cid15W U That tuples provided input NDSP algorithm sure set G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 123 Theorem 8 Consider S BT TT Let W 1 n contain indexes behaviors currently working S U 1 n W U indexes assumed permanently unavailable unexpectedly resumed Then set α cid15W U α following holds cid15W U NDSPTT TSW U α cid15W U Proof Consequence Lemmas 4 5 cid2 As turns requires general iterations required computing NDsimulation relation scratch tuples considered NDS processed NDSP Observe new behaviors appearing 1 n included U thesis Lemma 5 holds Therefore enriched new behaviors use largest NDsimulation relation previously computed order save computational efforts computing new NDsimulation relation Reusing previously computed NDsimulations Theorems 7 8 essentially algorithm NDSP havior resumes unavailable new NDsimulation relation needs recomputed advantage NDsimulation relation previously computed In fact theorems combined reuse NDsimulation relation computed computed past assuming stored To let W 2 1 n W set sets behavior indices assume largest NDsimulation relation set W computed stored For W W order compute largest NDsimulation relation cid15W ﬁrst deﬁne following sets 1n cid15W cid7 W cid7W cid15W cid7 W W cid7 cid8 α β W cid7cid3W W cid2 W cid7cid4W W W cid5W cid3 W cid4W W cid5W W cid3 W cid4W W stand set tightest supersets subsets respectively W W cid7 W cid7 W cid7 V WW V V cid12 W cid7 cid12 V cid7 W V WV W W cid4 cid4 W W cid4 cid4 W cid5 cid5 cid7 cid7 Then applying Theorems 7 8 cid15W computed follows cid15W NDSPTT TSW α β Clearly NDSPTT TS W α β compute cid15W computations carried maximally reused devise NDsimulation relations α β tightest sets obtain starting NDsimulation relations sets W Of course computed cid15W CGPjit immediately computed ontheﬂy We close section noting kind failures considered seen core classes breachofcontract respect speciﬁcation Other forms failures clearly conceivable 886455 assume additional information handeg module announce unavailability duration andor state possible states join backand exploited failure reaction opening interesting research directions However covering wider range failure cases scope present paper limit attention classes presented 5 Simulation safety games In previous sections shown behavior composition problem reduced problem ﬁnding NDsimulation relation transition systems original problem instance Moreover discussed optimization approaches obtain computational beneﬁts computing new NDsimulation relation response different type failures In rest paper adopt pragmatic perspective focus ﬁnding effective ways actually computing NDsimulation relation Concretely demonstrate controller generators synthesized applying model checking techniques We begin laying theoretical bases actually solving behavior composition problem NDsimulation relation constructed resorting inﬁnite games In particular argue constructing NDsimulation relation equivalent building winning strategy safety game cf 566910 The main motivation use game structures availability software tools tlv 71 Lily 44 Anzu 45 Mocha 4 provide effective procedures strategy computation ii convenient languages representing problem instance modular highlevel manner In fact section explains solve behavior composition problem instances tlv 10 Safety games conditionthe invariant propertyneeds maintained case TS able locally statebystate mimic TT 124 G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 51 Safetygame structures We consider notion game structure proposed 69 specialize safety games 5 adapt liter ature results 56 solve resulting problem Roughly speaking safetygame structure represents game played players controller11 turn moves replies Moves subject constraints movesreplies allowed given game state Intuitively controller s objective able reply s moves satisfy given goal property tries avoid Throughout rest paper assume deal inﬁniteplay ﬁnite state games possibly obtained introducing fake loops customary ltl veriﬁcation Inﬁnite plays assumed technical convenience handle playsﬁnite inﬁnitein uniform way This assumption limit power game structures technical details plays A safetygame structure cid2GS short tuple G cid3V X Y Θ ρs ρc cid2ϕcid4 V v 1 vn ﬁnite set state variables range ﬁnite domains V 1 V n respectively Set V partitioned sets X v 1 vm variables Y vm1 vn controller variables A valuation variables V total function val V i1 V valv V 1 n For convenience represent valuations vectors cid24s cid3s1 sncid4 V V V 1 V n si valv 1 n Consequently subvaluations variables X resp Y represented vectors cid24x X cid24y Y X V 1 V m Y V m1 V n A game state valuation cid24s cid3s1 sncid4 V subvectors cid24x cid3s1 smcid4 X cid24y cid3sm1 sncid4 Y corresponding controller states respectively By slight abuse notation shall write cid24s cid3cid24x cid24ycid4 cid2 n Θ formula representing initial states game Technically boolean combination expressions form v si v V 1 n si V Each expressions assignment constraint satisﬁed state cid24s cid3s1 sncid4 valv si In general variables V required occur Θ Given game state cid3cid24x cid24ycid4 V write cid3cid24x cid24ycid4 cid25 Θ cid3cid24x cid24ycid4 satisﬁes obvious way boolean combination assignment constraints speciﬁed Θ ρs X Y X transition relation relates game state possible successor states ρc X Y X Y controller transition relation relating game state successor states possible successor controller states cid2ϕ goal formula representing invariant property guaranteed ϕ form Θ The deﬁnition completed enforcing inﬁniteplay game assumption informally stated requiring game state cid3cid24x cid24ycid4 V exists cid24x cid7 cid24x cid7 X ρscid24x cid24y cid24x cid7 cid7 exists cid24y ρscid24x cid24y cid24x cid7 Y ρccid24x cid24y cid24x cid7 cid24y cid7 In rest paper ambiguity arises use game structure simply game refer safetygame cid7 structure The idea game structures game state cid24s cid3cid24x cid24ycid4 moves choosing cid24x cid7 cid24y cid7 Each pair ρscid24x cid24y cid24x cid7cid4 Note controller allowed cid7 cid3cid24x subsequent controller reply deﬁnes game transition cid24s cid3cid24x cid24ycid4 state cid24s cid7 observe replying witnessed presence cid24x ρccid24x cid24y cid24x cid7 cid24y ρccid24x cid24y cid24x cid7 controller replies choosing cid24y cid7 cid24y cid7 cid7 cid7 cid24y cid7 cid24y cid7cid4 successor state cid3cid24x cid24ycid4 iff ρscid24x cid24y cid24x With formal notion games hand let deﬁne corresponding dynamics notion winning cid7 A game play starting state game A game state cid3cid24x cid3cid24x0 cid24y0cid4 V inﬁnite sequence states η cid3cid24x0 cid24y0cid4cid3cid24x1 cid24y1cid4 j cid2 0 cid3cid24x j1 cid24y j1cid4 successor cid3cid24x j cid24y jcid4 Clearly inﬁniteplay assumption game admits play Intuitively plays capture inﬁnite sequences game states obtained alternating moves controller replies A play said winning controller satisﬁes winning condition cid2ϕ cid3cid24xi cid24yicid4 cid25 ϕ cid2 0 The intuition play remains set safe states satisfy invariant property cid7 ρccid24x cid24y cid24x cid7 f cid3cid24x0 cid24y0cid4 cid24x1 cid24xncid24x A controller strategy partial cid7 cid7 holds A play η cid3cid24x0 cid24y0cid4cid3cid24x1 cid24y1cid4 compliant strategy f X Y X ﬁnite sequence game states λ cid3cid24x0 cid24y0cid4 cid3cid24xn cid24yncid4 state cid24x case ρccid24xn cid24yn cid24x cid24ycid6 f cid3cid24x0 cid24y0cid4 cid24x1 cid24xcid6 cid6 0 intuitively controller replies play match strategy prescribes A strategy f winning state cid24s plays starting cid24s compliant f winning A strategy f winning game G f winning Gs initial states We game winning controller exists winning strategy game state winning exists winning strategy state The winning set game G set winning states game cid9 Y cid7 X ρscid24xn cid24yn cid24x function f 11 To avoid confusion previous notation adopt notation different 69 players environment controller G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 125 Algorithm 3 WINComputes safetygame structures winning set cid3cid24x cid24ycid4 V cid3cid24x cid24ycid4 cid25 ϕ cid7 1 W 2 repeat 3 W W cid7 cid7 W π W cid7 W 4 5 W W 6 return W current candidate set compute candidate set Intuitively game winning controller control game evolution winning strategy affects Y variables guarantee winning condition ϕ holds game plays matter moves happen In order prove game winning needs prove existence winning strategy clearly equivalent showing set games initial states subset winning set Next compute winning set given safetygame structure G cid3V X Y Θ ρs ρc cid2ϕcid4 The key ingredient following operator π 2V 2V 5 cid3 cid6 cid7 cid6 cid7 cid5 cid7 cid3cid24x cid24ycid4 V cid24x π P cid24y Intuitively given set game states P V π P denotes set P s controllable predecessors set game states controller force play reach state P matter happens Using operator Algorithm 3 5 applied compute set Gs winning states proven cid24y cid7 cid24x cid24y cid24x cid7 cid24x cid24y cid24x cid7cid4 P cid7 cid3cid24x ρc ρs cid24y cid7 cid7 cid7 The algorithm essentially computes ﬁxpoint starting set game states satisfy goal formula ϕ candidate set contains game states satisfy ϕ After ﬁrst iteration W controller strategy force step game state satisﬁes ϕ The process iterated reﬁning current candidate set W ruling states controllable predecessors W At end nth iteration W contains game states controller strategy game traverse n states satisfying ϕ independently moves When ﬁxpoint reached n replaced Termination algorithm evident new states added W The following theorem shows obtained set winning set rephrases previous results 5 6 game framework Theorem 9 Let G cid3V X Y Θ ρs ρc cid2ϕcid4 safetygame structure let W obtained running Algorithm 3 G Given game state cid3cid24x0 cid24y0cid4 V exists winning strategy cid3cid24x0 cid24y0cid4 cid3cid24x0 cid24y0cid4 W Proof If Part When algorithm returns case W W π W W π W Hence deﬁnition π W following holds cid7 W Being W cid7 W π W W cid3cid24x cid24ycid4 W cid7 cid24y Φcid24x cid24y cid24x cid7 played cid24x cid6 cid24x cid7 Xρs cid7 ρccid24x cid24y cid24x game state cid3cid24x cid24ycid4 cid7 cid24x cid24y cid24x cid7 cid24y cid7 cid3cid24x cid7 cid6 Φ cid7 cid24y cid7 cid7 cid24x cid24y cid24x cid12 1 cid7cid4 W represents informally set good moves Using set Φ consider strategy f cid3cid24x cid24ycid4 λ satisfying following constraint cid6 cid2 1 cid6 cid3cid24x0 cid24y0cid4 cid24x1 cid24xcid6 cid7 f Φcid24xcid61 cid24ycid61 cid24xcid6 Φcid24xcid61 cid24ycid61 cid24xcid6 cid12 cid24ycid61 f cid3cid24x0 cid24y0cid4 cid24x1 cid24xcid61 cid6 1 cid6 1 cid24ycid61 cid24y0 Next let prove strategy f winning strategy initial game state To end game play η cid3cid24x0 cid24y0cid4cid3cid24x1 cid24y1cid4 game state cid3cid24x0 cid24y0cid4 compliant strategy f case cid3cid24xi cid24yicid4 W cid2 0 Observe game state cid3cid24x cid24ycid4 W case cid3cid24x cid24ycid4 cid25 ϕ This algorithm starts exactly game states satisfy ϕ line 1 removes states candidate set line 4 So let prove cid3cid24xi cid24yicid4 W cid2 0 induction index The base case 0 trivial cid3cid24x0 cid24y0cid4 W holds assumption Next suppose cid3cid24xi cid24yicid4 W k cid2 0 Because η game play case ρscid24xk cid24yk cid24xk1 Also induction hypothesis cid3cid24xk cid24ykcid4 W Therefore applying Eq 1 Φcid24xk cid24yk cid24xk1 cid12 From thistogether fact cid24yk f cid3cid24x0 cid24y0cid4 cid24x1 cid24xk k 0 play η compliant f follows f cid3cid24x0 cid24y0cid4 cid24x1 cid24xk1 cid24yk1 Φcid24xk cid24yk cid24xk1 deﬁnition set Φ cid3cid24xk1 cid24yk1cid4 W follows OnlyIf Part Let W version W ith iteration line 5 1 cid3 cid3 N assuming algorithm ter minates N iterations returns W N We induction index game state cid3cid24x cid24ycid4 cid3cid24x cid24ycid4 W cid3cid24x cid24ycid4 W N force state cid3cid24x cid24ycid4 reach steps state cid3cid24x cid7 cid24y For base case suppose cid3cid24x cid24ycid4 W 1 Due lines 1 3 Algorithm 3 set W 1 exactly states satisfy ϕ cid3cid24x cid24ycid4 cid12cid25 ϕ claim follows trivially Now assume claim holds cid3 k consider game state cid3cid24x cid24ycid4 W k1 If cid3cid24x cid24ycid4 W k game state removed previous iteration j cid3 k induction hypothesis force plays violate goal k k 1 steps So cid7cid4 cid3cid24x cid7cid4 cid12cid25 ϕ cid3 k cid7 cid24y 126 G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 cid7 cid24y suppose hand cid3cid24x cid24ycid4 W k game state removed k 1 iteration line 4 From line 4 algorithm know W k1 W k π W k Since cid3cid24x cid24ycid4 W k cid3cid24x cid24ycid4 W k1 follows cid3cid24x cid24ycid4 π W k cid7 Y cid7 X ρscid24x cid24y cid24x By deﬁnition π cid24x cid7cid4 W k By induction hypothesis force game state ρccid24x cid24y cid24x cid7 cid24y cid3cid24x initial state cid3cid24x cid24ycid4 able force violating ϕ k 1 steps cid7 cid7cid4 reach k steps state violates ϕ Thus playing cid24x cid7 controller replies cid24y cid7 case cid3cid24x Now suppose exits winning strategy f state cid3cid24x0 cid24y0cid4 contrary cid3cid24x0 cid24y0cid4 W cid3cid24x0 cid24y0cid4 W N By reasoning force game violate ϕ N steps This implies exits game play η cid3cid24x0 cid24y0cid4cid3cid24x1 cid24y1cid4 starting cid3cid24x0 cid24y0cid4 compliant f N cid3cid24x1 cid24y1cid4 cid12cid25 ϕ applies Hence f winning strategy cid3cid24x0 cid24y0cid4 contradiction reached follows cid3cid24x0 cid24y0cid4 W apply cid2 cid7 cid24y Importantly winning set computed deﬁne winning strategy 56 To assume cid7 X cid7 cid24y cid7 cid7cid4 W ρccid24xn cid24yn cid24x cid7cid4 informally meaning η cid3cid24x0 cid24y0cid4 cid3cid24xn cid24yncid4 preﬁx play executed point For cid24x cid7 ρscid24xn cid24yn cid24x Indeed condition guarantees controller winning strategy cid3cid24x force future extension play maintain ϕ cid7 deﬁne f cid3cid24x0 cid24y0cid4 cid24x1 cid24xncid24x cid3cid24x cid7 cid24y taking reply cid24y cid7 cid24y cid7 cid24y cid7 52 From composition safety games Next behavior composition problem reduced practice problem synthesizing win ning strategy safetygame structure In order need identify place component composition problemtarget behavior available behaviors environment composition controlleroccupies game represen tation players controller need deﬁned particular setting Generally speaking composing behaviors controller seen strategy function histories returns decisions perspective natural represent composition synthesized strategy controller player components combined player Let S cid3B1 Bn Ecid4 BT target behavior E Bi cid3B bi0 G F cid3icid4 1 n T E cid3A E e0 ρcid4 We derive safetygame structure Gcid3SBT cid4 cid3V X Y Θ ρs ρc cid2ϕcid4 captures relationship target behavior follows 1 V b1 bn e bT ind bi ranges B 1 n T e ranges E ranges A cid19 ind ranges 1 n cid19 Here V B1 Bn E B T A cid19 1 n cid19 set possible valuations 2 X b1 bn e bT set player variables X B 1 Bn E B T A cid19 represents set possible valuations 3 Y ind singleton set player controller variables Y 1 n cid19 represents set possible cid7 b cid7 T cid7cid4cid4 ρs iff cid7 cid19 ˆa e cid7 ˆa e cid7cid7 E b cid7 T cid7 g T ˆa valuations 4 Θ ind cid19 cid19 cid9 i1nT bi bi0 e e0 5 ρs X Y X cid3cid3b1 bn e bT acid4 ind cid3b cid7 n e cid7 cid10 following cases applies cid7 1 b bi0 1 n T e cid7 e0 cid7 T e cid7cid7 T BT g b ind cid19 b b ind cid12 cid19 cid7 exists transition bT gT b cid7 T BT gT e cid10 ginda b cid7 ind Bind ginde cid10 cid7 1 n ind e cid7 E ii exists transition bind iii bi b iv exists transition e cid7 e b c ind cid12 cid19 e cid7 transition bT ii transition bind iii transition e 6 cid3cid3b1 bn e bT acid4 ind cid3b cid7 1 b gT b cid7cid7 T BT gT e cid10 ginda b cid7 ind Bind ginde cid10 cid7cid7 E cid7 cid7 b T cid7cid4 ρc iff ind e cid7 n e cid7cid4 ind cid7 cid12 cid19 bi 1 n T following conditions applies G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 127 7 Formula ϕ deﬁned depending current target environment state current requested action current behavior selection12 cid10 ϕb1 bn e bT ind validReq cid12 cid10 faili ﬁnalT cid12 ﬁnali ncid11 i1 ncid11 i1 cid13 validReq faili ﬁnali ind cid13 bF gT e cid10 cid3bT gT ab cid9 cid7 cid4cid3T T cid7 cid3bi gi ab cid4cid3i bi b 1 n T gie 1 n Intuitively player represents possible evolutions S generated legal executions BT evolutions relevant problem Each complete valuation variables V captures current state variables b1 bn e target behavior variable bT action performed variable available behavior selected perform action variable ind For technical convenience special value cid19 action request delegation represent request action cid19 initial distinguished states game ind cid19 As evolution game player systems transition relation ρs accounts synchronous evolution target behavior Condition 5a states initial game statesthose ind cid19evolve states encod ing Ss BT s initial states Condition 5b encodes evolution S controller performed valid action delegation Basically new state player encodes correct evolution target condition 5bi selected available behavior condition 5bii nonselected behaviors condition 5biii environment dition 5biv Condition 5c hand accounts cases valid behavior delegation possible current action requested targetcompatible condition 5ci handled available behavior condition 5cii allowed environment condition 5ciii In cases behaviors environment forced stay Note condition 5c accounts case action request cid19 Finally requested action cid19denoting requestor conforms target behavior logic Observe certain game state transition function ρs allow different players moves reﬂecting nondeterminism coming available behaviors environment target action requests cid7 The rules controller players moves simpler player allowed arbitrarily assign available behavior index moves condition 6 To fully comply deﬁnition safetygame structures given Section 51 need Gcid3SBT cid4 sat isﬁes inﬁniteplay assumption For legibility cid24xi cid3b1i bni ei bT aicid4 player state Gcid3SBT cid4 use comT cid24xi cid3bT eicid4 comS cid24xi cid3b1i bni eicid4 project enacted target enacted states encoded cid24xi respectively acid24xi ai project action request encoded cid24xi A game state form cid3cid24x ycid4 Lemma 10 Let Gcid3SBT cid4 safetygame structure derived behavior composition problem Then game state cid7 cid3cid24x ycid4 exists cid24x cid7 cid7 cid24x ρccid24x y cid24x ρscid24x y cid24x exists y cid7 y cid7 cid7 Proof If cases 5a 5b account players case 5c apply ρscid24x y cid24x cid7 cid24x cid7 cid7 Moreover cid24x y cid24x matching cid24x possibly acid24x cid7 holds y cid7 hold cid7 1 n cid2 cid7 y ρccid24x y cid24x Once proven Gcid3SBT cid4 legal safetygame structure useful property certain successor game states In words following lemma says successor game state captures legal evolution enacted target behavior TT enacted TS In addition provided successor game state encodes actual action request request conforms enacted target behavior Lemma 11 Let Gcid3SBT cid4 safetygame structure derived behavior composition problem Let cid3cid24x ycid4 non acid24x sT TT sS SS initial game state Gcid3SBT cid4 exist transitions comS cid24x sT S T Then cid3cid24x acid24x y sS TS comT cid24x cid7cid4 successor state cid3cid24x ycid4 iff cid7 y cid7 cid12 cid19 y comT cid24x comS cid24x acid24x comT cid24x acid24x y comS cid24x cid7 TT BT deterministic comT cid24x cid7 TS cid7 sT 12 We assume set conjuncts equal 128 G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 acid24x cid7 cid12 cid19 exists s cid7 T cid7 S T comT cid24x cid7 s acid24x cid7 T TT Proof All claims follow directly Gcid3SBT cid4s ρs deﬁnition condition 5 Observe target transitions conditions 5a 5c apply The ﬁrst claim follows conditions 5bi 5biv The second consequence conditions 5bii 5biii 5biv Finally claim follows constraint imposed acid24x cid7 cid2 Finally consider goal formula ϕ As ﬁrst disjunct trivially satisﬁed initial state Concerning second better understood looking subformulae faili ﬁnali The holds behavior Bi selected ind execute requested action transition outgoing current state bi action guard satisﬁed current environment state e The holds target behavior ﬁnal state available behaviors The target fails failT requests action incompatible speciﬁcation Essentially ϕ requires controller player makes adequate decisions selects behavior able execute current requested action Once game structure built problem deal synthesizing winning strategy controller player guarantees ϕ hold possible plays starting initial state We shall demonstrate corresponds synthesizing composition More speciﬁcally Theorem 14 computing Gcid3SBT cid4s winning set able construct controller generator We start exploring relationship Gcid3SBT cid4s maximal winning set largest NDsimulation relation Theorem 12 Let S cid3B1 Bn Ecid4 BT target behavior E Let Gcid3SBT cid4 cid3V X Y Θ ρs ρc cid2ϕcid4 cid2 GS derived S BT let W V maximal set controller winning states Gcid3SBT cid4 Then bi B 1 n e E A cid19 cid14 cid3b1 bn e bT acid4 ind cid15 W ind 1 n cid3bT ecid4 cid15 cid3b1 bn ecid4 Proof OnlyIf Part Assume cid3cid24x0 y0cid4 cid3cid3b1 bn e bT acid4 indcid4 W ind 1 n Hence exists winning strategy f cid3cid24x0 y0cid4 Using strategy deﬁne relation R S T SS follows cid3sT sS cid4 R iff exists game play η cid3cid24x0 y0cid4cid3cid24x1 y1cid4 compliant f comT cid24xcid6 sT comS cid24xcid6 sS cid6 cid2 1 Clearly η cid3cid24x0 y0cid4cid3cid24x f cid3cid24x0 y0cid4 cid24xcid4cid3cid24x f cid3cid24x0 y0cid4 cid24xcid24xcid4 cid24x cid3b1 bn e bT cid19cid4 f compliant play Since comT cid24x comT cid24x0 cid3bT ecid4 comS cid24x comS cid24x0 cid3b1 bn ecid4 cid3cid3bT ecid4 cid3b1 bn ecid4cid4 R So let prove R NDsimulation TT TS prove requirements ND simulations page 114 To end assume cid3sT sS cid4 R By deﬁnition R envsT envsS holds requirement 1 holds k cid19 acid24x Since cid3sT sS cid4 R exists game play η cid3cid24x0 y0cid4cid3cid24x1 y1cid4 compliant f comT cid24xk sT cid9 n i1 ﬁnali comS cid24xk sS k cid2 1 Because f yields requirement 2 target ﬁnal state cid24xk available behaviors winning strategy cid3cid24xk ykcid4 cid25 ϕ Hence cid3cid24xk ykcid4 cid25 ﬁnalT cid7 yi 0 k 1 comT cid24xk comT cid24x cid7 s cid7 0 y k sT comS cid24xk comS cid24x k legal target transition comT cid24x cid7 s cid7 T TT First condition 5b Finally requirement NDsimulations consider transitions sT cid7 cid7 cid7 Gcid3SBT cid4s deﬁnition follows exists f compliant game play ηcid7 cid3cid24x cid24xi cid4cid3cid24x cid4 cid24x 1 y 0 cid7 cid7 k sS play ηcid7 exactly like η y cid7 game state cid3cid24xk ykcid4 cid24x k possibly encode different requested action Due rules ρs cid7 cid7 acid24x k In case NDsimulation constraint follows cid7 cid7 trivially So suppose acid24x T TT k cid7 A sT Due conditions 5biv 5bi Gcid3SBT cid4s deﬁnition assume ηcid7 cid4 cid25 validReq k valid target request cid3cid24x cid7 So conditions 7 5bii 5biii 5biv Gcid3SBT cid4s deﬁnition comS cid24x k comT cid24xk1 s winning ηcid7 f cid7 acid24x k y cid7 cid7 f cid3cid24x k comS cid24x k1 k y follows requirement 3a NDsimulations applies trivially true envcomS cid24xk1 envcomT cid24xk1 cid7 cid7 S TS envs T Again possible evolution enacted Finally consider sS cid7 cid7 accounted successor game states Lemma 11 assume ηcid7 comS cid24x k1 s S Thus Rs cid7 deﬁnition ηcid7 S condition 3b NDsimulation follows If Part Assume cid3bT ecid4 cid15 cid3b1 bn ecid4 let ω output function controller generator S BT ηcid7 cid7 k compliant f follows Rs cid7 T compliant cid7 cid7 S envs cid7 Since acid24x cid4 cid25 fail y cid7 s cid7 k y cid7 T s cid7 1 cid7 k cid7 k cid7 page 116 Let cid24x0 cid3b1 bn e bT acid4 We deﬁne y0 ωcid3cid3bT ecid4 cid3b1 bn ecid4cid4 A legal action target request state bT environment state e y0 arbitrary value 1 n It important note case ωcid3cid3bT ecid4 cid3b1 bn ecid4cid4 cid12 y0 1 n This G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 129 comS cid24x0 mimic possible comT cid24x0 including target compatible action exist σ cid7 Σ cid3comT cid24x0 comS cid24x0cid4 acid24x0i σ cid7 CG 1 n Note cid3comT cid24x0 comS cid24x0cid4 Σ state CG comT cid24x0 cid15 comS cid24x0 To prove cid3 cid24x0 y0cid4 W strategy f winning game state cid3 cid24x0 y0cid4 Consider strategy f sequences cid24x1 cid24xk k cid2 1 case f cid3cid24x0 y0cid4 cid24x1 cid24xk 1 n cid6 cid3cid24x0 y0cid4 cid24x1 cid24xk cid7 f cid6 cid7 cid3comT cid24xk comS cid24xkcid4 acid24xk ω acid24xk cid12 cid19 comT cid24xk cid15 comS cid24xk ρscid24xk1 yk1 cid24xk hold true Informally pick strategy selects behavior compatible controller generator output function enacted state simulates enacted target state cid24xk player proper action request In cases strategy pick behavior arbitrarily cid19 First argue f welldeﬁned valid strategy Gcid3SBT cid4 It selects cid19 adheres Gcid3SBT cid4s condition 6 Moreover acid24xk cid12 cid19 comT cid24xk cid15 comS cid24xk ρscid24xk1 yk1 cid24xk apply follow reasoning y0 conclude ωcid3comT cid24xk comS cid24xkcid4 acid24xk cid12 We need note acid24xk cid12 cid19 ρscid24xk1 yk1 cid24xk acid24xk ought stand action legal target comT cid24xk condition 5b claim Lemma 11 So let prove f compliant game play η cid3cid24x0 y0cid4cid3cid24x1 y1cid4 case comT cid24xi cid15 comS cid24xi cid3bT eicid4 cid15 cid3b1i bni eicid4 cid2 0 The base case 0 trivial deﬁnition cid24x0 assumption Consider game state cid3cid24xk1 yk1cid4 k cid2 0 By induction hypothesis comT cid24xk cid15 comS cid24xk applies Because η game play cases condition 5 Gcid3SBT cid4s deﬁnition apply transition First yi 1 n cid2 0 condition 5a applies Now acid24xk legal target transition including acid24xk cid19 case 5c ought apply comT cid24xk1 comT cid24xk comS cid24xk1 comS cid24xk hold comT cid24xk1 cid15 comS cid24xk1 follows directly Assume acid24xk stand legal action transition target game state cid24xk cid3cid24xk ykcid4 cid25 validReq If k 0 deﬁnition f ﬁrst y0 ωcid3comT cid24x0 comS cid24x0cid4 acid24x0 If k cid2 1 comT cid24xk cid15 comS cid24xk induction hypothesis acid24xk cid12 cid19 assumption ρscid24xk1 yk1 cid24xk η game play know deﬁnition f yk ωcid3comT cid24xk comS cid24xkcid4 acid24xk So yk ωcid3comT cid24xk comS cid24xkcid4 acid24xk k cid2 0 implies yk 1 n proved f By deﬁnition CGs output function cid3comT cid24xk comS cid24xkcid4 acid24xk yk cid3s welldeﬁned strategy Gcid3SBT cid4 cid7 T s acid24xk yk s cid7 S cid4 CG s cid7 T comS cid24xk acid24xk s cid7 S Due Lemma 11 conclude cid7 T S T sS S cid7 S By CGs transition relation ϑ means comT cid24xk comS cid24xk comT cid24x acid24xk yk comS cid24xk1 acid24x comT cid24xk1 2 3 cid7 T From 2 condition CGs transition relation follows cid3s cid15 comS cid24xk1 Due ﬁrst requirement NDsimulations envs cid7 T comS cid24xk1cid4 Σ state CG cid7 cid7 T envcomS cid24xk1 applies What s T cid7 T envcomT cid24xk1 envcomS cid24xk1 envcomT cid24xk1 This 3 fact target envs behavior BT deterministic implies s comT cid24xk1 result comT cid24xk1 cid15 comS cid24xk1 follows So proven f compliant game play η cid3cid24x0 y0cid4cid3cid24x1 y1cid4 case comT cid24xi cid15 cid2 1 Consider game state cid3cid24xcid6 ycid6cid4 η cid6 cid2 0 let prove cid3cid24xcid6 ycid6cid4 cid25 ϕ comS cid24xi From comT cid24xcid6 cid15 comS cid24xcid6 requirement 2 NDsimulations conclude cid3cid24xcid6 ycid6cid4 cid25 ﬁnalT ﬁnali 1 n Now acid24xcid6 legal transition target game state cid24xcid6 including cid19 cid3cid24xcid6 ycid6cid4 cid25 validReq follows Otherwise acid24xcid6 A target compatible action way deﬁned f know ycid6 ωcid3comT cid24xcid6 comS cid24xcid6cid4 acid24xcid6 observe comT cid24xcid6 cid15 comS cid24xcid6 cid3cid24xcid6 ycid6cid4 legal play respecting ρs This means exists transition cid3comT cid24xcid6 comS cid24xcid6cid4 acid24xcid6 ycid6 σ cid7 controller generator CG σ cid7 Σ By CGs cid7 transition relation deﬁnition exists transition comS cid24xcid6 S TS whichby notion enacted implies behavior B ycid6 transition action acid24xcid6 cid3cid24xcid6 ycid6cid4 cid25 fail ycid6 follows Finally cid3cid24xcid6 ycid6cid4 cid25 faili trivially 1 n ycid6 acid24xcid6 ycid6 s winning game state cid3cid24x0 y0cid4 cid3cid3b1 bn e bT acid4 ωcid3cid3bT ecid4 Putting strategy f cid3b1 bn ecid4cid4 acid4 cid3cid24x0 y0cid4 W cid2 While Theorem 12 talks noninitial states easily extended unique initial state Theorem 13 Let W V maximal set winning states cid2GS Gcid3SBT cid4 let cid3cid24x0 y0cid4 initial state game cid3cid24x0 y0cid4 cid25 Θ Then cid3cid24x0 y0cid4 W iff cid3bT 0 e0cid4 cid15 cid3b10 bn0 e0cid4 130 G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 Proof This follows fact case 5a Gcid3SBT cid4 deﬁnition successor initial game cid3cid24x ycid4 game successor cid3cid24x0 y0cid4 iff state represents initial state comS cid24x cid3b10 bn0 e0cid4 comT cid24x cid3bT 0 e0cid4 So cid3bT 0 e0cid4 cid15 cid3b10 bn0 e0cid4 Theorem 12 initial cid24x exists controller ind cid3cid24x indcid4 W winning state result cid3cid24x0 y0cid4 W Conversely cid3cid24x0 y0cid4 winning cid24x cid3cid24x0 y0cid4 exists troller ind successor state cid3cid24x indcid4 initial state winning Theorem 12 implies cid3bT 0 e0cid4 cid15 cid3b10 bn0 e0cid4 cid2 composition problem That As straightforward consequence result Theorem 1 cid2GS Gcid3SBT cid4 winning exists composition target In addition following result holds gives actual procedure build controller generator possible compositions Theorem 14 Let S cid3B1 Bn Ecid4 BT target behavior E Let Gcid3SBT cid4 cid3V X Y Θ ρs ρc cid2ϕcid4 cid2GS derived assume cid3cid3b10 bn0 e0 bT 0 cid19cid4 cid19cid4 W W maximal set winning states Let cid16CG cid3 cid17Σ A 1 ncid17 cid17ωcid4 cid17Σ cid3cid3bT ecid4 cid3b1 bn ecid4cid4 cid3cid3b1 bn e bT acid4 indcid4 W cid17 cid17Σ A 1 n cid17Σ cid3σ k σ cid7cid4 cid17 σ cid3cid3bT ecid4 cid3b1 bn ecid4cid4 σ cid7 cid3cid3b cid7 T e cid7cid4 cid7 n cid4 e cid7 1 b cid7cid4 cid3b cid3cid3b1 bn e bT acid4 kcid4 W cid3cid3b1 bn e bT acid4 kcid4 cid25 validReq cid7 b cid7 ρscid3b1 bn e bT acid4 k cid3b n e cid17ωσ k σ cid7 cid17Σ st σ ak σ cid7 cid16CG cid7 1 b cid7 T cid7cid4 cid7 A cid19 Then cid16CG CG cid16CG controller generator S BT Proof Consider deﬁnition controller generator CG Section 3 page 116 We need Σ cid17Σ cid17 cid17ω ω By deﬁnition cid17Σ cid3cid3bT ecid4 cid3b1 bn ecid4cid4 cid17Σ iff cid3cid3b1 bn e bT acid4 indcid4 W ind Thus The orem 12 cid3cid3bT ecid4 cid3b1 bn ecid4cid4 cid17Σ iff cid3bT ecid4 cid15 cid3b1 bn ecid4 This deﬁnition Σ CG fact sT cid15 sS envsT envsS implies cid3cid3bT ecid4 cid3b1 bn ecid4cid4 cid17Σ iff cid3cid3bT ecid4 cid3b1 bn ecid4cid4 Σ Hence Σ cid17Σ Let prove cid17 Suppose cid3σ k σ cid7cid4 cid17 Then cid3cid3b1 bn e bT acid4 k cid3b cid7cid4cid4 ρs Because k cid12 cid19 deﬁnition cid17 case 5a page 126 Gcid3SBT cid4 apply Moreover target environment compatible action cid3cid3b1 bn e bT acid4 kcid4 cid25 validReq legally performed behavior Bk cid3cid3b1 bn e bT acid4 kcid4 cid25 failk cid3cid3b1 bn e bT acid4 kcid4 W Thus case 5c Gcid3SBT cid4 apply cid7 1 b cid7 T cid7 n e cid7 b So case 5b Gcid3SBT cid4 apply Then comT σ ak comS σ cid7 TS Let cid7cid7 cid7cid4 TS Due cid7cid7 S cid3b prove requirement CG To end consider transition comS σ n e cid7cid7 cid7 cid7cid7cid4 cid7 b T cid19cid4 k Lemma 11 game state cid3cid3b1 bn e bT acid4 kcid4 ought successor state form cid3cid3b 1 b cid7 cid7cid7 cid7cid7cid4 W cid7cid7cid4 k cid7 b cid7cid7 cid12 cid19 Moreover cid3cid3b1 bn e bT acid4 kcid4 W k cid3cid3b 1 b T k cid7cid7 cid7 cid7 cid7cid4cid4 Σ cid7cid7 cid7cid7 Then Theorem 12 cid3b n e 1 b T e n e T e follows Then cid3σ k σ cid7cid4 follows cid17 comT σ cid7 TT comS σ ak s cid7cid4 applies deﬁnition Σ CG cid3cid3b cid7cid7 1 b cid7cid7 n e cid7cid7 n e cid7cid4 cid3b Now let prove cid17 Assume cid3σ k σ cid7cid4 We want prove cid3σ k σ cid7cid4 cid17 To end cid7cid7 1 b cid7cid4 cid15 cid3b cid7cid7 1 cid3cid24x kcid4 cid3cid3b1 bn e bT acid4 kcid4 W cid7 b 2 ρscid3b1 bn e bT acid4 k cid3b cid7 1 b cid7 n e cid7 T cid19cid4 cid7 k b n e cid4 k T 1 b TS comT σ T Again cid3σ k σ cid7cid4 requirement deﬁnition implies cid3comT cid24x To prove ﬁrst claim successor cid3cid24x comT σ cid7 TT comS σ ak comS cid24x cid4 cid3cid24x kcid4 Gcid3SBT cid4 Because cid3σ k σ cid7cid4 cid4 cid3cid3b ak comS σ cid7 TS Thus Lemma 11 applies conclude comT σ TT Note target behavior deterministic comS σ cid4 Σ b b T cid4 W comT cid24x cid4 successor game state cid3cid24x kcid4 requirement 6 page 126 Gcid3SBT cid4 Note particular k deﬁnition Informally game state cid3cid24x kcid4 controller force game winning state matter plays So prove cid3cid24x kcid4 W remains shown cid3cid24x kcid4 cid25 ϕ game state cid3cid24x kcid4 sat cid24x cid7 k Bk ge cid10 isﬁes winning condition Since comS σ By applying Theorem 12 exists k cid3cid24x ak comS σ cid7 TS bk 1 n cid3cid24x comS cid24x k cid15 comS cid24x comT cid24x ga b k G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 131 cid3cid24x kcid4 cid25 failk Note cid3cid24x kcid4 cid25 faili trivially cid12 k Next σ Σ comT σ cid15 comS σ Then bT ﬁnal BT bi Bi Hence cid3cid24x kcid4 cid25 ﬁnalT cid7 n e cid7 T cid19cid4 follows Lemma 11 fact cid19 legal Putting shown cid17 transition relation cid16CG exactly controller Finally ρscid3b1 bn e bT acid4 k cid3b cid9 n i1 ﬁnali generator As immediate consequence obtain ω cid17ω deﬁnitions coincide Hence CG cid16CG cid2 action game cid7 1 b cid7 b The theorems exploit tools reactive synthesis computing compositions given target behavior In details starting S cid3B1 Bn Ecid4 BT build corresponding game structure Gcid3SBT cid4 compute winning set W contains Gcid3SBT cid4s initial state use W generate controller generator In fact step needed It hard given state cid3b1 bn e bT acid4 including action A executed behavior selection ind good selected behavior actually execute action NDsimulate target behavior W contains tuple cid3cid3b1 bn e bT acid4 indcid4 Consequently step based current target behavior state bT available behaviors states b1 bn environment state e requested action select tuple W extract ind component use select behavior Finally note time complexity Algorithm 3 polynomial V size input cid2GS state space Since encoding V polynomial B 1 Bn B T E A exponential n following result Theorem 15 Let S cid3B1 Bn Ecid4 BT target behavior E Checking existence compositions reduc tion safety games polynomial time wrt B 1 Bn B T E A exponential time n Such result says computing composition safety games computational complexity comput ing NDsimulation relation solving behavior composition problems cf Theorem 2 Since composition problem EXPTIMEhard 61 technique based safety games actually optimal respect worstcase time complex ity 6 Implementing behavior composition TLV With behavior composition problem formally reduced synthesizing winning strategy special safety game appeal existing implemented systems capable searching winning strategies game structures tlv 71 Anzu 45 Lily 44 Mocha 4 We note tools fer eﬃcient appropriately optimized solution techniques currently promising efforts direction cf 44 likely expect formal synthesis technology available effective alternative future similarly model checking 23 In sense section explain proofofconcept implementation presented previous section readily obtained Although shall focus tlv basic concepts discussed remain valid tools tlv Temporal Logic Veriﬁer generic software veriﬁcation synthesis ltl speciﬁcations exploits Binary Decision Diagrams BDDs symbolic state manipulation order contain state explosion Generally speaking tlv takes inputs synthesis procedure ii ltl speciﬁcation encoded smv language 59 processed input procedure In particular consider speciﬁc procedure dealing safety games refer soobtained tlv cid213 Essentially tlv cid2takes input ltl speciﬁcation encoding cid2GS derives games maximal winning set nonempty structure representing controller generator shown Theorem 14 We refer 71 details tlv input language smv introducing essentials Our approach consists building described Section 52 cid2GS corresponding given behavior composi tion problem ii deriving smv encoding obtained cid2GS iii executing encoding tlv cid2 check composition problem solvable compute controller generator Next ii In smv encoding aspect cid2GS available behaviors controller modeled socalled module Fig 6 shows basic blocks encoding painting world running example Fig 1 page109 Modules ArmSys built submodules declaring VAR section actually construction When according smv semantics execution composite module corresponds synchronous execution submodules Asynchronicity emulated allowing module loop state noop transition This accommodate asynchronous execution available behaviors deﬁnition enacted Section 2 submodule represents available behavior forced loop step selected means auxiliary noop action Module Main consisting submodules sys contr wraps modules represents game structure In particular module sys captures player encoding enacted behavior asys enacted target behavior client informally external uncontrollable Module contr 13 This speciﬁc procedure safety games originally coded Amir Pnueli 132 G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 Fig 6 A tlv sample fragment encoding hand encodes constraints controller player game structure module synthesized Finally variable good encodes goal invariant property respected states game state including player states good players dummy initial states external systemthe playerhas brought failure state The external reach failure state instance available behavior requested action perform current state target behavior ﬁnal state available behavior Modules sys contr meant evolve synchronously choosing requested action formed selecting available behavior execution Consequently requested action sysreq passed input argument contr module chosen available behavior passed input sys module Notice instead merely returning index available behavior meant execute cur rently requested action game structure previously deﬁned contr module outputs action available behavioreg a2op denotes action assigned behavior arm a2 distinguished action constant state action requested This approach enables encoding settings behavior execute time like 79 We refer encoding introduces additional diﬃculty clearly general Next submodules representing players game structure As contr instance Controller transition relation deﬁned constraints INIT TRANS sections encodes unconstrained controller assigns step action available behavior assigning values state variables a1op a2op a3op The synthesis goal restrict relation obtain winning strategy In particular constraints enforced controller players state follows According INIT section initial state variable initial holds true controller instruct behavior initialize performing dummy action start behaviors initialize simultaneously As noninitial states TRANS section deﬁnes following constraints initialization action assigned behavior ii current action request match behavior G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 133 actions iii behavior instructed execute action action currently requested iv behavior instructed act time Concerning module sys instance System essentially captures said aspects player Precisely sys synchronous product enacted available submodule asys client issuing action requests submodule client On hand submodule asys accounts available behaviors running environment according currently requested action variable req controller assignment variables a1op a2op a3op hand submodule client provides game state requested action variable req course required compliant target behavior Observe client requests action rule legal action requested anymore Since execution yields change current game state turns executed remains action available target point Distinguished abbreviations deﬁne DEFINE section initial ﬁnal failure states In particular enacted behavior ArmSys fails failure available behaviors available behavior failing instructed perform action execute depending environments current state Avoiding situations properly constraining syss transition relation exactly synthesis procedures aim Clearly way achieve suitably assigning syss controllable input variables a1op a2op a3op ultimately suitably crafting contr module respecting constraints Finally enacted respect ﬁnalstate condition failfinal client state legally terminate execution available We encoded running example tlv cid2 run compute corresponding winning set controller generator The result obtained automaton 16 states 21 transitions controllers easily extracted We report sample states automaton State 3 sysasysenvstate e2 sysasysa2state b2 sysclienttargetstate t2 contra1op contra2op paint contra3op sysasysa1state a1 sysasysa3state c1 sysclientreq paint State 15 sysasysenvstate e2 sysasysa2state b3 sysclienttargetstate t4 contra1op dispose contra2op contra3op sysasysa1state a1 sysasysa3state c1 sysclientreq dispose State 16 sysasysenvstate e2 sysasysa2state b1 sysclienttargetstate t4 contra1op dispose contra2op contra3op sysasysa1state a1 sysasysa3state c1 sysclientreq dispose In state 3 instance environment state e2 available arms states a1 b2 c1 target behavior state t2 action requested paint controller selected arm B2 carrying action States 15 16 possible successor states game depending nondeterministic transition behavior B2 turns The complete tlv speciﬁcation example Appendix A We close noting implementation discussed section concerned synthesis troller generator Section 3 result meant deal runtime adaptation techniques developed Section 4 dealing failures Indeed techniques expected smart composition executor execute adapt controller generators runtime 7 Related work The framework developed paper seen core account behavior composition extended number directions In 79 distributed version problem presented instead central entity embodies controller set local controllers available behavior meant jointly realize target behavior exploiting underlying shared communication channel Another extension involves realizing target behaviors concurrently available 77 Composition partial observability explored De Giacomo 24 composition data exchange investigated Berardi et al 12 context webservices Finally 7828 propose frameworks corresponding techniques composing agent highlevel programs The techniques extensions vary PDL satisﬁability 7912 LTLATL synthesis 24 7728 computation speciﬁc ﬁxpoints 78 Also direct searchbased technique core composition account 134 G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 recently proposed Stroeder Pagnucco 85 turn promising comes applying heuristics The composition technique proposed related synthesis reactive systems LTL temporal speciﬁca tions 706947 proven 2EXPTIMEcomplete general 70 In particular case restrict class speciﬁcations GR1 problem EXPTIMEcomplete 69 Though subclass LTL GR1 type formulas expressive deal realistic applications They instance support advanced forms path planning robots 49481133 Notably work inspired behavior composition Lusting Vardi 54 problem synthesizing LTL speciﬁcations coordinating given modules existing library studied proven 2EXPTIMEcomplete In turn De Giacomo Felli 25 showed solve behavior composition problem ATL model checking ATL Alternatingtime Temporal Logic 3 logic especially aimed reasoning multiplayer games players form coalitions satisfy certain formulae The result important gives access stateoftheart model checking techniques tools mc mas14 recently developed agent community Since behavior composition task seen winning special kind game Section 5 interesting explore heuristicbased techniques developed context GeneralGame Playing 35 applied playing composition games diﬃcult solve outset directly unsolvable Our work directly relates 3819133112153773 Service Oriented Computing SOC 2 Indeed available behaviors ultimately transition systems seen conceptual model conversational stateful web services By taking perspective results presented applicable offtheshelf SOC area One line research related reported 65666816 exploits techniques conditional planning temporally extended goals Starting set conversational available services speciﬁed bpel4ws Business Process Execution Language Web Services goal speciﬁed branching temporal formulae language EaGLe suitable extension CTL 22 conditional planning techniques exploited ﬁnd interleaved execution available services satisfy desired goal Roughly speaking goal represents main ﬁnite desired path states plus secondary paths followed exceptions deviation main path arise This technique actually implemented astro15 based Model Based Planner mbp3 21 exploits Model Checking technology ultimately BDDs control state space explosion Two main features differentiate work Firstly goals actually new services behaviors desired executions realized executed What behaviors synthesize intended interact executor instead executing like plans So highlevel perspective aim extending set services offered given work focuses serving particular requests taking advantage existing A research line services adopts approach 810 Like works rely techniques borrowed controller synthesis approach theoretical In contrast fully advantage results practical reasons exploiting controller synthesis techniques build ﬂexible solutions ii showing use actual existing technology based symbolic approach effective solution construction In series works 575883 Situation Calculus logical framework adopted theoretical framework composing semantic Web services speciﬁed OWLS process ontology 56 Available goal services modeled complex Golog programs objective ﬁnd terminating execution available services corresponds execution goal service Based Situation Calculus semantics Sirin et al 82 exploits Hierarchical Task Networks HTN model available OWLS services uses HTN planner 62 build plan representing actual ﬁnite execution desired target service All works share idea achieving desired goalbeing state situationby executing terminating plan program Our approach different sense general essentially major differences ﬁrst consider realization inﬁnite target behavior executions second solution composition problem required realize possible behavior service executions Behavior composition related forms automated planning AI particular planning tem porally extended goals mentioned context services investigates techniques building ﬁnite inﬁnite plans satisfy linear branchingtime speciﬁcations 76746 Indeed problem requires advanced ditional plan loops guarantees possible target requests served ultimately temporal invariant property More speciﬁcally solutions obtained simulation technique developed work akin socalled universal plans 81 plans representing possible solution A recent work planning temporal fairness constraints explicitly stated capture longterm effects action executions 29 We conjecture concepts exploited context notion behaviors composed sophisticated Composing behaviors linked multiagent systems natural ways For instance BeliefDesireIntention agent operates coordinated execution predeﬁned nondeterministic plansthe available behaviorsin order achieve goals 7536 One imagine composing available plans bring nonavailable 14 httpwwwlaidocicacukmcmas 15 httpastroprojectorg G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 135 planthe target behaviorthat represents goals agent Similarly composing behaviors seen realizing teamoriented behavior RoboCup sophisticated abstract team player represented target behavior behavior single agents set actual RoboCup robotic players different capabilities represented available behaviors Of course core composition framework presented lacks far convenient features programming team agent systems 7243 roles holons communication channels Finally behavior composition studied paper tightly related problem integrating simple function alities implement advanced intelligent behaviors context robot ecologies 761817 The idea leveraging capabilities simple robotic devices vacuum cleaners blinds cameras robot arms order achieve complex tasks attracted attention lately given marked tendency embedding intelli gent networked robotic devices homes oﬃces While close spirit work robot ecologies far focuses differs aspects Most work composing functionalities ecology robots voted generation adequate ways connecting existing functionalities socalled conﬁgurations order able carry particular task making output video camera input moving robot lacking visual capabilities Instead dealing explicitly connectivity issues interaction en vironment work focuses component needs actually operated order achieve target process Also integration functionalities fully hand 7618 semiautomatically handtailored planning techniques 5253 style HTN planning In case meant ﬁne standard recipes ways combine functionalities speciﬁc purposes Our approach ﬁrstprinciples domain information available available behaviors combined More importantly took highlevel perspective agents shared devices focused synthesis prob lem aforementioned work robot ecologies deals better practical aspects concern comes implementing solution For instance design devices easily interoperate assume interoperability actually realized appropriate middleware 17 In fact expect fruitful crossfertilization theoretical studies automated synthesis agents present paper practical work experimenting device integration robot ecologies ambient intelli gence 8 Conclusions In paper carried deep investigation behavior composition problem problem realizing desired nonavailable target behavior reusing repurposing accessible modules devices agents plans behaviors actually available In particular proposed technique based notion simulation building controller coordinates concurrent executions available behaviors mimic target behavior What showed technique directly related building winning strategy safety game opens door relying symbolic model checking technology Because results Sections 3 5 easily linked While Theorem 1 connects existence composition controller certain simulation relation Theorem 12 connects existence winning strategy closing loop compositions winning strategies safety game Similarly Theorem 14 surplus Theorem 12 seen counterpart simulationbased Theorem 3 surplus Theorem 1 safety games Finally Theorems 2 15 complexity problem terms ﬁnding adequate simulation relation winning set safety game respectively overhead This work lays basis developments mentioned related work section We like close paper brieﬂy discussing require study The ﬁrst concerns possibility interchanging actions More precisely work implicitly assumed actions equivalent named way exactly action Clearly situations requiring ﬂexible model instance domain includes actions different names execute fact task actions specialize abstract ones For exam ple actions paintred paintblue stand specializations implementations abstract maybe directly available action paint Both concrete actions abstracting details considered equivalent terms effect having object painted One natural way generalize composition framework developed paper assume existence underlying compatibility relation cid27 A A actions cid27 ˆa action ˆa compatible action execution action satisﬁed actual execution action ˆa With domain compatibility relation hand generalize notion NDsimulation Sec tion 3 account fact action requested target paint compatible action ˆa cid27 ˆa carried available behavior paintred We expect results presented hold generalized case work needed order formalize intuition While assumption relation cid27 practice natural assume satisﬁes certain properties For instance reﬂexive compatibility relation captures fact action replaced par tial order captures hierarchy actions general action replaced speciﬁc vice versa ﬁnally equivalence relation assert actions carry task relative 136 G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 features A study properties relation cid27 speciﬁc applications certainly The second direction study stems observation compositions exist approximate solutions That composition exist interested understanding target realized Some compelling contribution direction area supervisory control deterministic discrete event systems 74 In particular foundational result great given speciﬁcation allowed behavior terms language possibly inﬁnite set runs deemed allowed possible ﬁnd single maximal subset runs obtained controlling given called supremal controllable sublanguage 90 It interesting understand certain cases analogous property holds behavior composition The question optimal controller amounts Besides domainindependent criteria number transitions realized allowing speciﬁcation additional domain information help deﬁne best controllers quantifying nondeterministic transitions specifying preferences target actions available behaviors Initial steps optimization versions composition problem studied article recently proposed Yadav Sardina 9192 developed quantitative decisiontheoretic composition framework qualitative account approximate composition Acknowledgements The authors like thank anonymous reviewers suggestions comments helped improve paper This research partially supported Australian Research Council grants DP1094627 DP120100332 EU FP7ICT Project ACSI grant 257593 mobility awards Australian Academy Science Scientiﬁc Visit Europe RMIT Visiting Researchers awards Appendix A TLV implementation painting block example We list smv code completes presented Fig 6 As module main refer reader Fig 6 encoding reported Concerning code module Environment follows MODULE Environmentact Environment VAR st inie1e2e3e4 INIT st ini TRANS case st ini act start nextst e1 act nextst st st e1 act recharge nextst e1 st e1 act prepare nextst e2 st e2 act paintrecharge nextst e2 st e2 act dispose nextst e1 st e2 act clean nextst e2e3 nondet st e3 act paintclean nextst e3 st e3 act dispose nextst e4 st e3 act recharge nextst e2 st e4 act prepare nextst e3 st e4 act recharge nextst e1 TRUE FALSE transitions possible esac DEFINE initial st ini Observe environment dummy state ini dummy action start executed initial state makes environment state e1 Every line TRANS section encodes transition deﬁnes state module nextst given environments current state st action performed input parameter variable act We list code corresponding available arms B1 B2 B3 Their encoding similar environment differences Firstly dynamics behaviorcaptured modules TRANS sectiondepends action performed behavior current environment state action environment state appear inputs variables act env behavior module As TRANS section similarly environments entries case body captures behavior transition In particular observe behavior instructed execute dummy action second entry TRANS noop action yields state change module Through mechanism implement asynchronous execution available behavior modules explained Section 6 Secondly account guards transitions occurring behavior module contain boolean formulae involving current state environment For example fourth transition ArmA module states state behavior a2 provided current state a1 behavior G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 137 executing action clean environment state e1 e2 Finally behavior deﬁnes initial ﬁnal failure conditions In particular behavior failure accounted introducing distinguished absorbing state failed module reaches transition rule applies current action environment state input behavior legally execute requested action MODULE ArmAact env VAR st inifaileda1a2 INIT st ini TRANS case st ini act start nextst a1 act nextst st st a1 act disposerecharge nextst a1 st a1 actclean env e1e2 nextst a2 st a2 act recharge nextst a2 st a2 act dispose nextst a1 TRUE nextst failed esac DEFINE initial st ini final st a1 fail state failed MODULE ArmBact env VAR st inifailedb1b2b3b4 INIT st ini TRANS case st ini act start nextst b1 act nextst st st b1 act prepare nextst b2 st b2 act clean nextst b1 st b2 act paint nextst b1b3 st b3 act recharge nextst b1 st b3 act prepare nextst b4 st b4 act clean nextst b3 TRUE nextst failed esac DEFINE initial st ini final st b1 fail state failed MODULE ArmCact env VAR st inifailedc1c2 INIT st ini TRANS case st ini act start nextst c1 act nextst st st c1 act recharge nextst c2 st c2 act prepare nextst c2 st c2 act paint nextst c1 TRUE nextst failed failed esac DEFINE initial st ini final st c1 fail state failed The target speciﬁcation simpler target include nondeterministic transition MODULE Targetenv req VAR state init1t2t3t4t5 INIT state ini req start TRANS case state ini req start req state t1 req prepare state t2 req paint state t2 req clean state t3 req paint state t4 req dispose state t5 req recharge nextstate t1 nextstate state nextstate t2 nextstate t4 nextstate t3 nextstate t4 nextstate t5 nextstate t1 esac DEFINE initial state ini final state t1 138 G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 Using target specify client meant issue request actions according course target behavior MODULE Clientenv VAR target Targetenv req req startnonepreparecleanpaintdisposerecharge INIT req start TRANS case nexttst t1 nextreq prepare nexttst t2 nextreq paintclean nexttst t3 nextreq paint nexttst t4 nextreq dispose nexttst t5 nextreq recharge TRUE nextreq esac DEFINE initial targetinitial tst targetstate final targetfinal When speciﬁcation run tlv cid2 following output obtained TLV version 4184 Resources user time 011 s BDD nodes allocated 125962 max BDD nodes allocated 125962 Bytes allocated 2228288 Automaton States State 1 sysavailsysenvstate start_st sysavailsysa2state start_st sysclienttargetstate start_st contra1op start_op contra2op start_op contra3op start_op sysavailsysa1state start_st sysavailsysa3state start_st sysclientreq start_op State 2 sysavailsysenvstate e1 sysavailsysa2state b1 sysclienttargetstate t1 contra1op contra2op prepare contra3op sysavailsysa1state a1 sysavailsysa3state c1 sysclientreq prepare State 3 sysavailsysenvstate e2 sysavailsysa2state b2 sysclienttargetstate t2 contra1op contra2op paint contra3op sysavailsysa1state a1 sysavailsysa3state c1 sysclientreq paint State 4 sysavailsysenvstate e2 sysavailsysa2state b2 sysclienttargetstate t2 contra1op clean contra2op contra3op sysavailsysa1state a1 sysavailsysa3state c1 sysclientreq clean State 5 sysavailsysenvstate e2 sysavailsysa2state b2 sysclienttargetstate t3 contra1op contra2op paint contra3op sysavailsysa1state a2 sysavailsysa3state c1 sysclientreq paint State 6 sysavailsysenvstate e3 sysavailsysa2state b2 sysclienttargetstate t3 contra1op contra2op paint contra3op sysavailsysa1state a2 sysavailsysa3state c1 sysclientreq paint State 7 sysavailsysenvstate e3 sysavailsysa2state b3 sysclienttargetstate t4 contra1op dispose contra2op contra3op sysavailsysa1state a2 sysavailsysa3state c1 sysclientreq dispose G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 139 State 8 sysavailsysenvstate e3 sysavailsysa2state b1 sysclienttargetstate t4 contra1op dispose contra2op contra3op sysavailsysa1state a2 sysavailsysa3state c1 sysclientreq dispose State 9 sysavailsysenvstate e4 sysavailsysa2state b1 sysclienttargetstate t5 contra1op recharge contra2op contra3op sysavailsysa1state a1 sysavailsysa3state c1 sysclientreq recharge State 10 sysavailsysenvstate e4 sysavailsysa2state b3 sysclienttargetstate t5 contra1op contra2op recharge contra3op sysavailsysa1state a1 sysavailsysa3state c1 sysclientreq recharge State 11 sysavailsysenvstate e2 sysavailsysa2state b3 sysclienttargetstate t4 contra1op dispose contra2op contra3op sysavailsysa1state a2 sysavailsysa3state c1 sysclientreq dispose State 12 sysavailsysenvstate e2 sysavailsysa2state b1 sysclienttargetstate t4 contra1op dispose contra2op contra3op sysavailsysa1state a2 sysavailsysa3state c1 sysclientreq dispose State 13 sysavailsysenvstate e1 sysavailsysa2state b1 sysclienttargetstate t5 contra1op recharge contra2op contra3op sysavailsysa1state a1 sysavailsysa3state c1 sysclientreq recharge State 14 sysavailsysenvstate e1 sysavailsysa2state b3 sysclienttargetstate t5 contra1op sysavailsysa1state a1 sysavailsysa3state c1 sysclientreq recharge contra2op recharge contra3op State 15 sysavailsysenvstate e2 sysavailsysa2state b3 sysclienttargetstate t4 contra1op dispose contra2op contra3op sysavailsysa1state a1 sysavailsysa3state c1 sysclientreq dispose State 16 sysavailsysenvstate e2 sysavailsysa2state b1 sysclienttargetstate t4 contra1op dispose contra2op contra3op sysavailsysa1state a1 sysavailsysa3state c1 sysclientreq dispose Automaton Transitions From 1 2 From 2 3 4 From 3 15 16 From 4 5 6 From 5 11 12 From 6 7 8 From 7 10 From 8 9 From 9 2 From 10 2 From 11 14 From 12 13 From 13 2 From 14 2 From 15 14 From 16 13 Automaton 16 states 21 transitions The output states automaton 16 states 21 transition successfully synthesized Observe automaton encodes accounts constraints client running target 140 G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 controller performing composition In fact obtained result regarded representation controller generator painting blocks example States read follows assignment variables sysavailsysenvstate sysavailsysa1state sysavailsysa2state sysavailsysa3state sysclienttargetstate forms current state enacted assignment sysclientreq represents action currently requested assignment contra1op contra2op contra3op repre sents possible action delegations available behaviors fulﬁlling current request We close mentioning running example 2011 midpriced laptop solution half second References 1 M Abadi L Lamport P Wolper Realizable unrealizable speciﬁcations reactive systems Proceedings International Colloquium Automata Languages Programming ICALP 1989 pp 117 2 G Alonso F Casati H Kuno V Machiraju Web Services Concepts Architectures Applications Springer 2004 3 R Alur TA Henzinger O Kupferman Alternatingtime temporal logic Journal ACM 49 5 2002 672713 4 R Alur TA Henzinger FYC Mang S Qadeer SK Rajamani S Tasiran MOCHA Modularity model checking Proceedings International Conference Computer Aided Veriﬁcation CAV 1998 pp 521525 5 E Asarin O Maler A Pnueli Symbolic controller synthesis discrete timed systems P Antsaklis W Kohn A Nerode S Sastry Eds Hybrid Systems II LNCS vol 999 Springer 1995 pp 120 6 E Asarin O Maler A Pnueli J Sifakis Controller synthesis timed automata IFAC Symposium System Structure Control Elsevier Science Publishers Ltd 1998 pp 469474 7 F Bacchus F Kabanza Planning temporally extended goals Annals Mathematics Artiﬁcial Intelligence 22 12 1998 527 8 P Balbiani F Cheikh G Feuillade Composition interactive web services based controller synthesis Proceedings IEEE Congress Services SERVICES 2008 pp 521528 9 P Balbiani F Cheikh G Feuillade Algorithms complexity automata synthesis asynchronous orchestration applications web services composition Electronic Notes Theoretical Computer Science ENTCS 229 3 2009 318 10 P Balbiani F Cheikh G Feuillade Controllerorchestrator synthesis ﬁltration Electronic Notes Theoretical Computer Science ENTCS 262 2010 3348 11 C Belta A Bicchi M Egerstedt E Frazzoli E Klavins GJ Pappas Symbolic planning control robot motion State art grand challenges IEEE Robotics Automation Magazine 14 1 March 2007 6170 12 D Berardi D Calvanese G De Giacomo R Hull M Mecella Automatic composition transitionbased semantic web services messaging Proceedings International Conference Very Large Databases VLDB 2005 pp 613624 13 D Berardi D Calvanese G De Giacomo M Lenzerini M Mecella Automatic composition eservices export behavior Proceedings International Joint Conference Service Oriented Computing ICSOC 2003 pp 4358 14 D Berardi D Calvanese G De Giacomo M Lenzerini M Mecella Automatic service composition based behavioural descriptions International Journal Cooperative Information Systems 14 4 2005 333376 15 D Berardi F Cheikh G De Giacomo F Patrizi Automatic service composition simulation International Journal Foundations Computer Sci ence 19 2 2008 429451 16 P Bertoli M Pistore P Traverso Automated composition web services planning asynchronous domains Artiﬁcial Intelligence Journal 174 34 2010 316361 17 M Bordignon J Rashid M Broxvall A Saﬃotti Seamless integration robots tiny embedded devices PEISecology Proceedings IEEERSJ International Conference Intelligent Robots Systems IROS 2007 pp 31013106 18 M Broxvall M Gritti A Saﬃotti BS Seo YJ Cho PEIS ecology Integrating robots smart environments Proceedings IEEE International Conference Robotics Automation ICRA 2006 pp 212218 19 T Bultan X Fu R Hull J Su Conversation speciﬁcation new approach design analysis eservice composition Proceedings International Conference World Wide Web WWW 2003 pp 403410 20 D Calvanese G De Giacomo M Lenzerini M Mecella F Patrizi Automatic service composition synthesis The roman model IEEE Data Engineering Bulletin 31 3 2008 1822 21 A Cimatti M Pistore M Roveri P Traverso Weak strong strong cyclic planning symbolic model checking Artiﬁcial Intelligence Jour nal 147 12 2003 3584 22 E Clarke E Emerson Design synthesis synchronization skeletons branching time temporal logic D Kozen Ed Logics Programs LNCS vol 131 Springer BerlinHeidelberg 1982 pp 5271 Chapter 5 23 EM Clarke O Grumberg D Peled Model Checking The MIT Press 1999 24 G De Giacomo R De Masellis F Patrizi Composition partially observable services exporting behaviour Proceedings International Conference Automated Planning Scheduling ICAPS 2009 pp 9097 25 G De Giacomo P Felli Agent composition synthesis based ATL Proceedings Autonomous Agents MultiAgent Systems AAMAS 2010 pp 499506 26 G De Giacomo F Patrizi Automated composition nondeterministic stateful services Web Services Formal Methods 6th International Work shop Revised Selected Papers WSFM 2009 Bologna Italy September 45 2009 LNCS vol 6194 Springer 2010 pp 147160 27 G De Giacomo F Patrizi P Felli S Sardina Twoplayer game structures generalized planning agent composition Proceedings National Conference Artiﬁcial Intelligence AAAI 2010 pp 297302 28 G De Giacomo F Patrizi S Sardina Agent programming planning programs Proceedings Autonomous Agents MultiAgent Systems AAMAS May 2010 pp 491498 29 G De Giacomo F Patrizi S Sardina Generalized planning loops strong fairness constraints Proceedings Principles Knowledge Representation Reasoning KR 2010 pp 351361 30 G De Giacomo S Sardina Automatic synthesis new behaviors library available behaviors Proceedings International Joint Conference Artiﬁcial Intelligence IJCAI 2007 pp 18661871 31 A Deutsch L Sui V Vianu Speciﬁcation veriﬁcation datadriven web applications Journal Computer System Sciences 73 3 2007 442474 32 R Fagin JY Halpern Y Moses MY Vardi Reasoning About Knowledge The MIT Press Cambridge Massachusetts 1995 33 GE Fainekos A Girard H KressGazit GJ Pappas Temporal logic motion planning dynamic robots Automatica 45 2 2009 343352 34 M Gelfond V Lifschitz Action languages Electronic Transactions AI ETAI 2 1998 193210 G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 141 35 M Genesereth N Love General game playing Overview AAAI competition AI Magazine 26 2005 6272 36 MP Georgeff AL Lansky Reactive reasoning planning Proceedings National Conference Artiﬁcial Intelligence AAAI 1987 pp 677 682 37 CE Gerede R Hull OH Ibarra J Su Automated composition eservices Lookaheads Proceedings International Joint Conference Service Oriented Computing ICSOC 2004 pp 252262 38 CE Gerede OH Ibarra B Ravikumar J Su Online minimumcost ad hoc delegation eservice composition Proceedings IEEE Inter national Conference Services Computing SCC 2005 pp 103112 39 M Ghallab D Nau P Traverso Automated Planning Theory Practice Morgan Kauffman 2004 40 A Harding M Ryan PY Schobbens A new algorithm strategy synthesis LTL games Proceedings Tools Algorithms Construction Analysis Systems TACAS 2005 pp 477492 41 MR Henzinger TA Henzinger PW Kopke Computing simulations ﬁnite inﬁnite graphs Proceedings Annual Symposium Foun dations Computer Science FOCS 1995 pp 453462 42 R Hull Web services composition A story models automata logics Proceedings IEEE International Conference Services Computing SCC 2005 pp 1819 43 B Jarvis D Jarvis L Jain Teams multiagent systems Z Shi K Shimohara D Feng Eds Intelligent Information Processing III IFIP Interna tional Federation Information Processing vol 228 Springer 2007 pp 110 Chapter 1 44 B Jobstmann R Bloem Optimizations LTL synthesis Proceedings Formal Methods Computer Aided Design FMCAD IEEE Computer Society Press 2006 pp 117124 45 B Jobstmann S Galler M Weiglhofer R Bloem Anzu A tool property synthesis Proceedings International Conference Computer Aided Veriﬁcation CAV 2007 pp 258262 46 F Kabanza S Thiébaux Search control planning temporally extended goals Proceedings International Conference Automated Planning Scheduling ICAPS 2005 pp 130139 47 Y Kesten N Piterman A Pnueli Bridging gap fair simulation trace inclusion Information Computation 200 July 2005 3561 48 H KressGazit GE Fainekos GJ Pappas Wheres Waldo Sensorbased temporal logic motion planning Proceedings IEEE International Conference Robotics Automation ICRA 2007 pp 31163121 49 H KressGazit GE Fainekos GJ Pappas Temporallogicbased reactive mission motion planning IEEE Transactions Robotics 25 6 2009 13701381 50 O Kupferman MY Vardi Module checking Proceedings International Conference Computer Aided Veriﬁcation CAV 1996 pp 7586 51 O Kupferman MY Vardi Churchs problem revisited The Bulletin Symbolic Logic 5 2 1999 245263 52 R Lundh L Karlsson A Saﬃotti Planbased conﬁguration ecology robots Proceedings IEEE International Conference Robotics Automation ICRA 2007 pp 6470 53 R Lundh L Karlsson A Saﬃotti Automatic conﬁguration multirobot systems Planning multiple steps Proceedings European Confer ence Artiﬁcial Intelligence ECAI 2008 pp 616620 54 Y Lustig MY Vardi Synthesis component libraries Proceedings International Conference Foundations Software Science Computational Structures FOSSACS LNCS vol 5504 Springer 2009 pp 395409 55 O Marin M Bertier P Sens DARX framework fault tolerant support agent software Proceedings IEEE International Symposium Software Reliability Engineering ISSRE 2003 pp 406418 56 DL Martin MH Burstein DV McDermott SA McIlraith M Paolucci KP Sycara DL McGuinness E Sirin N Srinivasan Bringing semantics web services OWLS Proceedings International Conference World Wide Web WWW 2007 pp 243277 57 SA McIlraith TC Son Adapting golog composition semantic web services Proceedings Principles Knowledge Representation Reasoning KR 2002 pp 482496 58 SA McIlraith TC Son H Zeng Semantic web services IEEE Intelligent Systems 16 2 2001 4653 59 KL McMillan Symbolic Model Checking Kluwer Academic Publishers Norwell MA USA 1993 60 R Milner An algebraic deﬁnition simulation programs Proceedings International Joint Conference Artiﬁcial Intelligence IJCAI 1971 pp 481489 61 A Muscholl I Walukiewicz A lower bound web services composition Logical Methods Computer Science 4 2 2008 62 DS Nau TC Au O Ilghami U Kuter JW Murdock D Wu F Yaman SHOP2 An HTN planning Journal Artiﬁcial Intelligence Research 20 2003 379404 63 MP Papazoglou P Traverso S Dustdar F Leymann Serviceoriented computing State art research challenges IEEE Computer 40 11 2007 3845 64 O Pettersson Execution monitoring robotics A survey Robotics Autonomous Systems 53 2 2005 7388 65 M Pistore F Barbon P Bertoli D Shaparau P Traverso Planning monitoring web service composition Proceedings Artiﬁcial Intelligence Methodology Systems Applications AIMSA LNCS vol 3192 Springer 2004 pp 106115 66 M Pistore A Marconi P Bertoli P Traverso Automated composition web services planning knowledge level Proceedings International Joint Conference Artiﬁcial Intelligence IJCAI 2005 pp 12521259 67 M Pistore P Traverso Planning model checking extended goals nondeterministic domains Proceedings International Joint Confer ence Artiﬁcial Intelligence IJCAI 2001 pp 479486 68 M Pistore P Traverso P Bertoli A Marconi Automated synthesis composite BPEL4WS web services Proceedings IEEE International Conference Web Services ICWS 2005 pp 293301 69 N Piterman A Pnueli Y Saar Synthesis Reactive 1 Designs Proceedings International Conference Veriﬁcation Model Checking Abstract Interpretation VMCAI 2006 pp 364380 70 A Pnueli R Rosner On synthesis reactive module Proceedings ACM SIGPLANSIGACT Symposium Principles Programming Languages POPL 1989 pp 179190 71 A Pnueli E Shahar A platform combining deductive algorithmic veriﬁcation Proceedings International Conference Computer Aided Veriﬁcation CAV 1996 pp 184195 72 DV Pynadath M Tambe N Chauvat L Cavedon Toward teamoriented programming Proceedings International Workshop Agent Theo ries Architectures Languages ATAL Springer 2000 pp 233247 73 R Ragab Hassen L Nourine F Toumani Protocolbased web service composition Proceedings International Joint Conference Service Oriented Computing ICSOC LNCS vol 5364 Springer 2008 pp 3853 Chapter 7 74 PJ Ramadge WM Wonham Supervisory control class discrete event processes SIAM Journal Control Optimization 25 1987 206230 75 AS Rao AgentSpeakL BDI agents speak logical computable language Proceedings Seventh European Workshop Modelling Autonomous Agents MultiAgent World Agents Breaking Away LNCS vol 1038 Springer 1996 pp 4255 76 A Saﬃotti M Broxvall PEIS ecologies Ambient intelligence meets autonomous robotics Proceedings International Conference Smart Objects Ambient Intelligence 2005 pp 275280 142 G De Giacomo et al Artiﬁcial Intelligence 196 2013 106142 77 S Sardina G De Giacomo Realizing multiple autonomous agents scheduling shared devices Proceedings International Conference Automated Planning Scheduling ICAPS 2008 pp 304312 78 S Sardina G De Giacomo Composition ConGolog programs Proceedings International Joint Conference Artiﬁcial Intelligence IJCAI 2009 pp 904910 79 S Sardina F Patrizi G De Giacomo Automatic synthesis global behavior multiple distributed behaviors Proceedings National Conference Artiﬁcial Intelligence AAAI 2007 pp 10631069 80 S Sardina F Patrizi G De Giacomo Behavior composition presence failure Proceedings Principles Knowledge Representation Reasoning KR 2008 pp 640650 81 MJ Schoppers Universal plans reactive robots unpredictable environments Proceedings International Joint Conference Artiﬁcial Intelligence IJCAI 1987 pp 10391046 82 E Sirin B Parsia D Wu J Hendler D Nau HTN planning web service composition SHOP2 Journal Web Semantics Science Services Agents World Wide Web 1 4 October 2004 377396 83 S Sohrabi N Prokoshyna SA McIlraith Web service composition generic procedures customizing user preferences Proceedings International Semantic Web Conference ISWC 2006 pp 597611 84 S Sohrabi N Prokoshyna SA Mcilraith Web service composition customization golog programs user preferences AT Borgida VK Chaudhri P Giorgini ES Yu Eds Conceptual Modeling Foundations Applications Springer 2009 pp 319334 Chapter Web Services 85 T Stroeder M Pagnucco Realising deterministic behaviour multiple nondeterministic behaviours Proceedings International Joint Conference Artiﬁcial Intelligence IJCAI 2009 pp 936941 86 J Su Ed IEEE Data Engineering Bulletin 31 September 2008 87 L Tan R Cleaveland Simulation revisited Proceedings Tools Algorithms Construction Analysis Systems TACAS 2001 pp 480 495 88 A Tripathi R Miller Exception handling agentoriented systems A Romanovsky C Dony J Knudsen A Tripathi Eds Advances Exception Handling Techniques LNCS vol 2022 Springer 2001 pp 128146 89 MY Vardi An automatatheoretic approach fair realizability synthesis Proceedings International Conference Computer Aided Veriﬁ cation CAV 1995 pp 267278 90 W Wonham P Ramadge On supremal controllable sublanguage given language SIAM Journal Control Optimization 25 3 1987 637659 91 N Yadav S Sardina Decision theoretic behavior composition Yolum Tumer Stone Sonenberg Eds Proceedings Autonomous Agents Multi Agent Systems AAMAS 2011 pp 575582 92 N Yadav S Sardina Qualitative approximate behavior composition Proceedings European Conference Logics Artiﬁcial Intelligence JELIA LNCS vol 7519 Springer 2012 pp 450462