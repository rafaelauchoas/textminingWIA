Artiﬁcial Intelligence 171 2007 185196 wwwelseviercomlocateartint Determining consistency partial tree descriptions Manuel Bodirsky Martin Kutz b HumboldtUniversität zu Berlin Germany b MaxPlanckInstitut für Informatik Saarbrücken Germany Received 1 June 2006 received revised form 27 November 2006 accepted 15 December 2006 Available online 22 December 2006 Abstract We present efﬁcient algorithm decides consistency partial descriptions ordered trees The constraint language descriptions introduced Cornell computational linguistics constraints specify pairs nodes sets admissible relative positions ordered tree Cornell asked algorithm ﬁnd tree structure satisfying constraints This computational problem generalizes commonsupertree problem studied phylogenetic analysis generalizes network consistency problem socalled leftlinear point algebra We present ﬁrst polynomial time algorithm Cornells problem runs time Omn m number constraints n number variables constraint 2006 Elsevier BV All rights reserved Keywords Tree descriptions Constraint satisfaction problems Graph algorithms Leftlinear point algebra 1 Introduction Tree description languages important tool computational linguistics years Gram mar formalisms proposed derive logical descriptions trees representing syntax string 15 2326 Membership language equivalent satisﬁability corresponding logical formula In se mantics paradigm underspeciﬁcation aims manipulating partial description treestructured semantic representations sentence manipulating representations 1725 One key issues constraintbased grammar constraintbased semantic formalisms collect partial descriptions trees solve ﬁnd tree structure satisﬁes constraints Cornell 13 introduced simple powerful tree description language contains constraints dominance precedence equality nodes disjunctive combinations formal deﬁnition given Sec tion 2 Cornell gave saturation algorithm based local propagations turned incomplete For example tree description shows Section 34 3 In article present ﬁrst polynomialtime algorithm tests satisﬁability tree description Cor nells tree description language directly constructs solution problem instance exists A predecessor algorithm applies restricted language presented 4 The present algorithm solves Corresponding author Email addresses bodirskyinformatikhuberlinde M Bodirsky mkutzmpiinfmpgde M Kutz 00043702 matter 2006 Elsevier BV All rights reserved doi101016jartint200612004 186 M Bodirsky M Kutz Artiﬁcial Intelligence 171 2007 185196 general problem Cornells tree description language runs time Onm n number variables m number constraints input The performance achieved recursive strategy works directly constraint graph avoids local consistency techniques la 1419 frequently constraint satisfaction Signiﬁcance results Computational linguistics area science artiﬁcial intelli gence partial tree descriptions relevant In fact fragment Cornells language introduced independently 12 1621 known leftlinear point algebra The best known algorithm socalled network satisfaction problem leftlinear point algebra running time On5 n denotes size input 21 Since leftlinear point algebra fragment Cornells language quadratic time algorithm yields new asymptotically faster algorithm leftlinear point algebra Details connection given Section 31 The consistency problem study posed constraint satisfaction problem CSP formalized 8 The catch variables values inﬁnite domain shown problem modeled CSP ﬁnite domain Section 3 One important direction research area systematically identify constraint languages solved polynomial time In context algorithmic result interesting based grouptheoretic techniques Gaussian elimination Datalog local consistency techniques This contrast CSPs ﬁnite domains known algorithms polynomialtime solvable algorithms involve techniques 918 In computational biology phylogenetic analysis ﬁeld deal partial information evolutionary trees An evolutionary tree set species rooted tree leaves bijectively labeled species set Constructing evolutionary trees biological data difﬁcult problem variety reasons 20 Many approaches assume evolutionary tree built set taxa based comparison single protein single position aligned protein sequences resulting tree different depending particular protein position Several trees different protein position built shown generally consistent implied evolutionary history considered reliable The question consistency tests automated motivates socalled commonsupertree problem 20 We Section 32 commonsupertree problem modeled fragment Cornells tree description language Therefore algorithm presented yields new algorithm new perspective commonsupertree problem Outline In Section 2 introduce standard terminology rooted trees deﬁne Cornells tree description lan guage This allows clearly Section 3 relationship results results qualitative temporal reasoning artiﬁcial intelligence phylogenetic analysis computational biology leftlinear point al gebra theory relation algebras general framework constraint satisfaction problems In Section 5 introduce algorithm small fragment Cornells language This fragment expressive capture commonsupertree problem mentioned The corresponding consistencyproblem nontrivial sense algorithm proposed Cornell inconsistent fragment 3 However simplic ity language allows smaller simpler description algorithm decides consistency Discussing language ﬁrst instructive deal consistency problem language far involved For language ﬁrst reduce problem simpler tree description language Section 5 prove fundamental results constraintgraphs associated partial tree description Section 6 ﬁnally use results present algorithm prove correctness Section 7 Section 8 summarizes poses questions future research 2 Tree descriptions The trees considered rooted consider edges directed pointing away root By ordered tree mean rooted tree linear order children vertex use terms left right compare We follow notation 2 The set vertices tree T denoted VT vertices usually called u v w The expression u cid3 v denotes u father v u cid3 v v cid4 u means u dominates v u ancestor v tree including u v We write u cid3 v v cid4 u u cid3 v u cid5 v If vertices u v u cid3 v v cid3 u u v disjoint symbols u v In situation distinguish M Bodirsky M Kutz Artiﬁcial Intelligence 171 2007 185196 187 Fig 1 The translation partial tree description Fig 1 restricted language cases u precedes succeeds v A vertex u precedes vertex v v succeeds u symbols u v v cid8 u common ancestor u v tree children w1 w2 w1 cid3 u w2 cid3 v u left v We write u v u v u v The right picture Fig 1 shows example rooted tree root αx In pictures indicate ordering children vertex distinguishing left right Here αv αw αy αv αx cid3 αw example In ordered tree pair u v vertices exactly following relations holds cid8 v cid4 v u v u u cid3 v v u u It important note union relations cid3 forms strict linear order set vertices ordered tree easily seen preorder results recursive tree traversal lists node descendants We deﬁne partial tree descriptions Cornell 13 allow partially structure ordered tree arbitrary disjunctions ﬁve cases To distinguish clearly equality language common usage symbol denote relation Deﬁnition 1 A partial tree description V C consists set variables V set C binary constraints form xRy x y V R cid3 cid4 cid8 A constraint xRy satisﬁed pair T α T ordered tree α V VT mapping variables vertices tree αxRαy holds tree relation R R A pair T α satisﬁes constraints C called solution V C Note mapping α deﬁnition required surjective In particular induced graph image α need connected forest A partial tree description solution called satisﬁable consistent Fig 1 shows partial tree description solutions right In picture directed edge x xcid13 labeled R denotes constraint xRxcid13 3 Related work Cornells tree description language closely related problems ﬁelds science arti ﬁcial intelligence We focus ﬁelds distinct origins Cornells language computational linguistics 31 The leftlinear point algebra The leftlinear point algebra studied area binary relation algebras algebraic logic model ﬂows time branch future past ﬁxed 121621 Formally semilinear leftlinear order O partial order s t u O s u t u s t t s s t 188 M Bodirsky M Kutz Artiﬁcial Intelligence 171 2007 185196 In 21 case u v v u holds distinct elements u v semilinear order denoted u t Semilinear orders rise abstract relation algebra called leftlinear point algebra elements atoms represented A typical question context complexity socalled network satisfaction problem In case leftlinear point algebra network satisfaction problem solved quintic time time On5 n denotes size network It straightforward deﬁnitions given 21 network satisfaction problem left linear point algebra formulation consistency problem partial tree descriptions V C restrict constraint C form xcid3y x cid8y In Section 4 discuss algorithm solves consistency problem partial tree descriptions restricted language The algorithm present running time quadratic size partial tree description outperforms previously known algorithm network satisfaction problem leftlinear point algebra 32 The commonsupertree problem The commonsupertree problem computational problem introduced studied computational biology 727 deﬁned follows Let S set trees common leaf set L The computational task decide tree T leaf set L tree S reﬁnement T obtained series contractions edges T If reﬁnement exists trees S compatible The commonsupertree problem easily formulated tree descriptions In fact use constraint types cid3 cid8 Let S set trees common leaf set L The variables tree description vertices trees S inner nodes trees different variables leaves represented set variables trees Treeedges xy translate dominance constraints xcid3y Siblings x y tree S related constraint x cid8y See Fig 2 example incompatible set contains rooted trees translation unsatisﬁ able partial tree description In picture solid arcs stand constraint cid3 dashed arcs constraint cid8 The size resulting tree description clearly OΔ2n n total number nodes S Δ denotes maximum degree tree S It hard solution common supertree trees S Note deﬁnition compatible confused notion compatible given 24 They tree T compatible T cid13 exists subset A leaves T minimal subtree T connects nodes A suppresses nodes degree equals T cid13 In contrast notion compatibility studied 27 called weak compatibility 24 Fig 2 Two incompatible trees translation unsatisﬁable partial tree description M Bodirsky M Kutz Artiﬁcial Intelligence 171 2007 185196 189 33 Allens Interval Algebra As observed Cornell 13 possible translate partial tree description set constraints Allens Interval Algebra 1 In Allens Interval Algebra variables denote intervals real line The constraints Allens Interval Algebra possible relationships intervals impose constraint intervals overlap Allens interval constraint logic NPcomplete unrestricted form fragments logic solved polynomial time 1022 If translation mentioned produces constraints fall tractable fragments Allens Interval Algebra use translation obtain polynomialtime algorithm partial tree descriptions The idea translation partial tree description V C Allens Interval Algebra follows We use V set variables denote intervals translation If C contains xcid3y translation contains interval constraint requires interval x contains interval y If C contains x cid8y translation contains interval constraint requires interval x interval y disjoint All partial tree descriptions translated analogously Solutions translation correspond trees set intervals translation laminar pair intervals disjoint interval completely contain In words intervals overlap To ensure add interval constraints require intervals x y overlap distinct variables x y V It easy translation preserves satisﬁability Consulting classiﬁcation tractable fragments Allens Interval Algebra given 22 turns interval constraints obtained translating constraints form xcid3y x cid8y way necessary nonoverlap interval constraints fall tractable fragments Allens Interval Algebra Hence use approach solve partial tree descriptions polynomial time 34 General constraint satisfaction problems CSPs The problems studied article constraint satisfaction problem Allens Interval Algebra fragment fall class computational problems known constraint satisfaction problems CSPs 8 Every problem class described homomorphism problem respect ﬁxed relational structure To precise ﬁxed structure Γ relational signature τ called template constraint satisfaction problem Γ following computational problem CSPΓ INSTANCE A ﬁnite τ structure S QUESTION Is homomorphism S Γ For relational structures Γ ﬁnite domain computational complexity problems CSPΓ inten sively studied 918 The systematic approach based connection universal algebra essentially says computational complexity CSPΓ described universalalgebraic object called clone polymorphisms Γ 9 However consistency problem partial tree descriptions formulated ﬁnite template But formulated ωcategorical countable template described 11 36 constraint satisfaction inﬁnite templates The concept ωcategoricity fundamental modeltheory It turns universal algebraic approach applied study complexity CSPΓ Γ ωcategorical 5 It interesting observe algorithm presented apply local consistency techniques group theoretic techniques known tractable CSPs ﬁnite templates having ﬁnite domain use techniques 918 4 An algorithm restricted signature We ﬁrst illustrate idea algorithm small fragment tree description language fragment corresponds left linear point algebra described Section 3 We seen fragment 190 M Bodirsky M Kutz Artiﬁcial Intelligence 171 2007 185196 Fig 3 An inconsistent partial tree description expressive cover commonsupertree problem phylogenetic analysis mentioned introduction In reduced constraint language allow constraints types xcid3y x cid8y The ﬁrst constraint called strict dominance second disjointness use shorthands x cid3 y x y respectively types literals Such set constraints viewed graph V cid3 types edges directed edges cid3 undirected edges Observe binary relations cid3 deﬁned vertices tree nodes instance The reference clear We like stress constraints allow equality x cid3 y means solution x lie strictly y We constraint graph G solution T α satisﬁable corresponding partial tree description solution satisﬁable We use standard graph theory notation subgraph G V cid3 induced subset S V denoted GS G S denotes constraint graph GV S In pictures draw constraint graph different types arcs For dominance edge x cid3 y draw directed arc x y disjointness edge x y draw dashed line direction Fig 3 instance shows constraint graph The basic idea algorithm ﬁnd solution partial tree description V C exists pick node x V root solution decompose V C smaller parts recursively determine solutions parts subtrees x With perspective following deﬁnition comes naturally Deﬁnition 2 Let V C partial tree description Then variable x V free V C solution T α αx root T By deﬁnition partial tree description free node satisﬁable We shall soon simple connectivity condition constraint graph converse true satisﬁable instance connected constraint graph free node node dominates The crucial point course sense constraint graph contains directed undirected edges connected Let brieﬂy recall conventions An undirected path directed graph called digraph use arcs direction ignoring orientation A digraph D V E strongly weakly connected directed undirected path b vertices b V A strongly weakly connected component D maximal strongly weakly connected induced subgraph U D Now constraint graph V cid3 dominanceconnected digraph V cid3 weakly nected This notion connectivity crucial desired characterization free nodes The following lemma marks ﬁrst step Lemma 1 Let G V cid3 dominanceconnected constraint graph let y ycid13 variables V Then solution T α G exists variable x V αx cid3 αy αx cid3 αycid13 T Proof Since vertices y ycid13 weakly connected V cid3 exists chain nodes y1 yr starts y y1 ends ycid13 yr yi yi1 cid3 yi1 yi cid4 1 cid2 cid2 r 1 We prove induction r solution T α V C exists index j 1 r αyj cid3 αy0 αyj cid3 αyr T If r 0 r 1 choose x αy0 αyr Otherwise apply induction hypothesis chain y1 yr1 Thus exists j 0 cid2 j cid2 r 1 αyj common ancestor M Bodirsky M Kutz Artiﬁcial Intelligence 171 2007 185196 191 αy1 αyr1 T If αyr1 cid3 αyr αyj common ancestor αy1 αyr choose x yj Otherwise αyr cid3 αyr1 T Hence αy1 αyr ancestors yr1 T Since T tree follows αyr cid3 αyj αyj cid3 αyr T In ﬁrst case choose x yr second x yj cid2 As promised satisﬁable dominanceconnected constraint graph free node Proposition 1 A satisﬁable partial tree description V C dominanceconnected constraint graph free node Proof Assume solution T α V C consider vertices v topmost T respect cid3 v αx node x V If vertex v subtree rooted v α solution V C But node x V v αx contradicts assumption x free If distinct topmost nodes v vcid13 v vcid13 disjoint T Since constraint graph dominanceconnected apply Lemma 1 obtain contradiction assumption v vcid13 lie topmost T cid2 For algorithm need concise graphtheoretic characterization free nodes checked efﬁciently Proposition 2 Let G V cid3 constraint graph satisﬁable partial tree description Then node x V free C1 arc y cid3 x G C2 edge x y G Proof If y y cid3 x vertex x topmost solution G free If vertex x involved disjointness constraint free root tree disjoint nodes tree Conversely assume node x satisﬁable set constraints satisﬁes C1 C2 The dominance connected components GV x satisﬁable Proposition 2 free nodes Then following solution G introduce tree node x let solutions dominanceconnected components subtrees node The disjointness constraints different dominanceconnected components satisﬁed construction clear C1 C2 constraints x satisﬁed cid2 Example Let revisit example shown Fig 3 Note instance contain node x satisﬁes C1 C2 By Proposition 2 free node instance solution But constraint instance removed ﬁnd node satisfying conditions instance solution Fig 4 shows algorithm restricted constraint language relations cid3 For dominance connected constraint graph function Solve ﬁrst selects free node x root links recursively computed SolveG input dominanceconnected constraint graph G V cid3 constructs tree T mapping α V VT pick node x G satisfying C1 C2 free node exists return problem solution create new tree node r let αx r compute dominanceconnected components C1 Ck G x 1 k SolveGCi returned root new child r od return root r Fig 4 The function Solve constraints type cid3 192 M Bodirsky M Kutz Artiﬁcial Intelligence 171 2007 185196 solutions dominanceconnected components Ci remainder G x αimage r x correct order Theorem 1 There algorithm decides satisﬁability given partial tree description V C restricted constraint language OV C time Proof It clear construct constraint graph V cid3 given partial tree description linear time We apply algorithm shown Fig 4 constraint graph For instance dominance connected ﬁrst introduce dummy node z cid3arc z node graph connected The node z root output α required solution valid original graph z If algorithm detects weakly connected component free node know Proposition 1 constraints solution Otherwise Proposition 2 guarantees proceed node x satisfying C1 C2 root solution The running time dominated repeated computations connected components constraint graphs We use depth ﬁrst search compute connected components time OV C V times We assume V smaller C 1 ﬁrst algorithm divides problem instances assumption holds Hence algorithm runs time OV C cid2 5 Reduction basic constraints We turn general problem deciding consistency partial tree description language introduced Cornell In order control 25 subsets relation set R cid3 cid4 cid8 ﬁrst express smaller language contains following different constraint types xcid3 xcid3 y cid4 x cid8y y x cid8 y 1 We reduce 32 subsets directly intersection constraints 1 build small gadgets new dummy variables simulate original constraint The constraints cid4 cid8 simply ﬁrst second constraint 1 ﬂipped singletons cid3 written intersections The extremal sets cid4 cid3 cid8 needed imposes restrictions tree deﬁnition unsatisﬁable If express constraints xcid3 xcid3 cid4 y y cid8 y xcid3 xcid3 cid8 y 2 1 remaining constraints easily representable ﬂippings intersections constraints 1 2 For constraint xcid3 cid4 y introduce new variable z replace constraints xcid3 z ycid3 z By properties tree constraints imply xcid3 cid4 y Conversely solution original constraints modiﬁed satisfy new constraints Constraints form xcid3 y replaced constraints xcid3 z z y z new variable Similarly replace xcid3 cid8 y constraints xcid3 z zcid8 y Finally replace xcid3 cid8 y xcid3 y z cid8 y z new variable Thus express constraints Cornells language basic binary relations 1 Our algo rithm works tree descriptions consisting basic constraints We introduce special names notation types xcid3 y dominance constraint x cid3 y x y precedence constraint x y M Bodirsky M Kutz Artiﬁcial Intelligence 171 2007 185196 193 Fig 5 The translation example Fig 1 basic constraints x cid8 y disjointorequal constraint xcid3 y xcid3 cid4 cid8y inequality constraint x cid5 y Note notions dominance precedence relation considered nonstrict stand reﬂexive relations In following apply reduction example presented Fig 1 The result shown Fig 5 Since disjointorequal inequality constraint symmetric indicate undirected edges arcs 6 Constraint graphs freeness Our algorithm tree description language uses ideas discussed restricted setting The ﬁrst important difference restricted setting variables map tree node Hence shall need generalized notion freeness Deﬁnition 3 Let V C partial tree description Then S V called free solution T α V C S α1r r root T Similarly restricted setting want certain connectedness condition free sets exist want ﬁnd practical characteristics free sets identify algorithmically To end adapt concept constraint graph Section 4 The concept weak connectedness respect dominance edges replaced complex deﬁnition based auxiliary graph containing dominance precedence arcs We deﬁne directed P graph V P V arc set y x cid3 P xy C contains x y y cid3 x partial tree description V C dominance connected P graph strongly connected Example Consider instance drawn Fig 5 The P graph example strongly connected However consider graph vertex x constraints imposed x removed P graph connected components The following proposition analog Proposition 1 restricted case Proposition 3 A satisﬁable partial tree description strongly connected P graph free set Proof Suppose T α solution C We consider set S nodes C map minimum linear order cid3 T nodes map leftmost topmost vertex u T If vertex u dominates vertices αV S actually free set We claim case So assume contradiction 194 M Bodirsky M Kutz Artiﬁcial Intelligence 171 2007 185196 variable y V αy dominated u Since P graph C strongly connected contains path y x1 x2 xk y S xk S The path αy αx1 αx2 αxk eventually enter subtree rooted u αxj Then αxj 1 comes u cid3 contradicting minimality u respect linear order cid3 cid2 For analogy Proposition 2 graphtheoretic characterization free sets deﬁne directed graph V D called Dgraph based cid3 relation addition takes precedence constraints account Precisely let D xy C contains x cid3 y xcid3 y x y y x Example Again consider instance drawn Fig 5 The strongly connected components P graph ﬁve strongly connected components We like remark digraphs V D P D interesting symmetry D based dom inance constraints contains bidirected precedence constraints P union precedence constraints bidirected dominance constraints However deeper reason similarity elusive The purposes digraphs different nature The characterization Proposition 2 similar statement Dgraph old conditions C1 C2 merged C On hand inequality handled explicitly gives second condition I Proposition 4 Let V C satisﬁable partial tree description Then S V free set nodes following conditions hold C edge xy D x S y S I pair x y S x cid5 y Proof The conditions clearly necessary free set denotes root tree dominates vertices constraint x cid5 y explicitly forbids map x y tree node For implication let S set nodes satisﬁes conditions C I Let C1 Ck strongly connected components P graph S Fix arbitrary linear extension acyclic structure deﬁned P graph C1 Ck Since C satisﬁable subgraph Gi C induced component Ci solution Ti αi 1 cid2 cid2 k Introduce new vertex v add T1 Tk subtrees according linear order components The resulting tree denoted T Now consider mapping α extension αi maps vertices S v We claim T α solution V C S free set nodes It clear T α satisﬁes inequality constraints I inequality constraints components different components S component cases inequality satisﬁed T α If C contains disjointness constraint x y condition C implies following cases applies Either x y S case disjointness satisﬁed T α Or x y component Ci case constraint satisﬁed satisﬁed Ti αi By deﬁnition P graph x y different components If C contains dominance constraint x y condition C implies y S Moreover x y different components C1 Ck deﬁnition P graph Therefore x y component S x S y S cases dominance constraint satisﬁed T α Finally suppose C contains precedence constraint x y Again constraint satisﬁed x y lie S lie component C1 Ck If lie different components precedence constraint satisﬁed subtrees v T arranged according linear extension acyclic structure deﬁned P graph components C1 Ck cid2 M Bodirsky M Kutz Artiﬁcial Intelligence 171 2007 185196 195 SolveC Compute sccs P graph C let C1 Ck linear extension acyclic structure create new vertex r children Solve_conCCi 1 cid2 cid2 k order return r Solve_conC precondition The P graph C strongly connected set nodes satisfying C I exists return problem solution choose set nodes S satisfying C I let r root tree SolveCV S set αS r return r Fig 6 The function Solve tree description language 7 The algorithm We turn Propositions 4 3 free sets nodes algorithm Cornells language From given input constraints cid3 cid3 cid5 ﬁrst create Dgraph P graph recursively create tree decomposing vertex set dominanceconnected components extracting free sets roots Fig 6 shows algorithm consists procedures Solve Solve_con We abuse notation denote partial tree description V C simply C Initially given instance C SolveC partitions variable set strongly connected components P graph If P graph C strongly connected procedure Solve_con applied C The algorithm contains statement choose inﬂuences free set nodes selected solution We discuss issue ﬁnd free set runningtime analysis Proposition 5 The algorithm Solve Fig 6 decides satisﬁability given partial tree description V C time OV C Proof In Solve strongly connected components precedence graph C computed linear time input size We procedure Solve_con strongly connected components If returns problem solution constraints unsatisﬁable Proposition 3 Otherwise Proposition 4 guarantees construct solution selecting free set root Because C1 free set union strongly connected components Dgraph Darcs enter Any strongly connected component contained free set free set These strongly connected components easily depthﬁrst search time On m The strongly connected components computed level recursion Since vertex Solve_con calls Solve_con possibly ﬁrst n Om overall running time Onm cid2 8 Conclusion outlook We presented efﬁcient algorithm decides partial tree description consistent case algorithm constructs solution This solves open problem Cornell introduced tree descriptions computational linguistics 13 The consistency test construction solution quadratic time input size We like conclude series open problems future research motivated related areas mentioned Section 3 As mentioned Section 3 consistency problem partial tree descriptions formulated constraint satisfaction problem ωcategorical template Λ For ωcategorical templates universalalgebraic ap proach applies particular shown complexity CSPΛ captured polymorphism 196 M Bodirsky M Kutz Artiﬁcial Intelligence 171 2007 185196 clone Λ The open problems context 1 Describe polymorphism clone Λ 2 What polymorphism responsible tractability CSPΛ An answer questions descrip tions constraint languages higherary constraints constraints considered article binary solved polynomial time In Section 3 pointed different notions compatibility phylogenetic trees studied literature Only described modeled partial tree descriptions Is possible come treedescription language allows model commonsupertree problem notion compatibility 24 The known algorithms tractable fragments Allens Interval Algebra based localconsistency techniques Is possible ﬁnd algorithms better running times fragments algorithmic techniques developed article In particular avoid local consistency techniques similarly algorithm presented Acknowledgements We like thank Pierre Flener drawing attention notion compatibility trees 24 References 1 JF Allen Maintaining knowledge temporal intervals Communications ACM 26 11 1983 832843 2 R Backofen J Rogers K VijayShanker A ﬁrstorder axiomatization theory ﬁnite trees Journal Logic Language Informa tion 4 1995 539 3 M Bodirsky Constraint satisfaction inﬁnite domains Dissertation HumboldtUniversität zu Berlin 2004 4 M Bodirsky M Kutz Pure dominance constraints Proceedings 19th Annual Symposium Theoretical Aspects Computer Science STACS02 Lecture Notes Computer Science vol 2285 Antibes Juan le Pins Springer Berlin 2002 pp 287298 5 M Bodirsky J Nešetˇril Constraint satisfaction countable homogeneous templates Proceedings Computer Science Logic CSL03 Vienna 2003 pp 4457 6 M Bodirsky J Nešetˇril Constraint satisfaction countable homogeneous templates Journal Logic Computation 16 3 2006 359373 7 D Bryant Building trees hunting trees comparing trees PhD thesis University Canterbury 1997 8 A Bulatov P Jeavons A Krokhin The complexity constraint satisfaction An algebraic approach Structural Theory Automata Semigroups Universal Algebra Montreal 2003 NATO Science Series II Mathematics Physics Chemistry 207 2005 181213 9 A Bulatov A Krokhin PG Jeavons Classifying complexity constraints ﬁnite algebras SIAM Journal Computing 34 2005 720742 10 HJ Bürckert B Nebel Reasoning temporal relations A maximal tractable subclass Allens interval algebra Journal ACM 42 1 1995 4366 11 PJ Cameron Oligomorphic Permutation Groups Cambridge University Press Cambridge 1990 12 S Comer A remark chromatic polygroups Congressus Numerantium 1983 85 13 T Cornell On determining consistency partial descriptions trees 32nd Annual Meeting ACL ACL94 1994 pp 163170 14 R Dechter P van Beek Local global relational consistency Journal Theoretical Computer Science 173 1 1997 283308 15 D Duchier S Thater Parsing tree descriptions A constraintbased approach Sixth International Workshop Natural Language Understanding Logic Programming NLULP99 1999 pp 1732 16 I Düntsch Relation algebras application temporal spatial reasoning Artiﬁcial Intelligence Review 23 2005 315357 17 M Egg A Koller J Niehren The constraint language lambda structures Journal Logic Language Information 10 2001 457485 18 T Feder M Vardi The computational structure monotone monadic SNP constraint satisfaction A study Datalog group theory SIAM Journal Computing 28 1999 57104 19 EC Freuder A sufﬁcient condition backtrackfree search Journal ACM 29 1 1982 2432 20 D Gusﬁeld Algorithms Strings Trees Sequences Computer Science Computational Biology Cambridge University Press New York 1997 21 R Hirsch Expressive power complexity algebraic logic Journal Logic Computation 7 3 1997 309351 22 P Jeavons P Jonsson AA Krokhin Reasoning temporal relations The tractable subalgebras Allens interval algebra Journal ACM 50 5 2003 591640 23 MP Marcus D Hindle MM Fleck Dtheory Talking talking trees Proceedings 21st Annual Meeting ACL ACL83 1983 pp 129136 24 MP Ng M Steel NC Wormald The difﬁculty constructing leaflabelled tree including avoiding given subtrees Discrete Applied Mathematics 98 2000 227235 25 M Pinkal Radical underspeciﬁcation Proceedings 10th Amsterdam Colloquium 1996 pp 587606 26 J Rogers V Shanker Reasoning descriptions trees Proceedings 30th Meeting ACL ACL92 1992 pp 7280 27 M Steel The complexity reconstructing trees qualitative characters subtrees Journal Classiﬁcation 9 1992 91116