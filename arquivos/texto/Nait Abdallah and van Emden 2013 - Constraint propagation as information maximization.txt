Artiﬁcial Intelligence 197 2013 2538 Contents lists available SciVerse ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Constraint propagation information maximization A Nait Abdallah ab MH van Emden c Department Computer Science University Western Ontario Canada b INRIA Rocquencourt France c Department Computer Science University Victoria Canada r t c l e n f o b s t r c t Article history Received 26 January 2012 Received revised form 11 February 2013 Accepted 14 February 2013 Available online 16 February 2013 Keywords Constraintsatisfaction problems Information partial order Intervals Propagation This paper draws diverse areas science develop uniﬁed view computation Optimization operations research numerical objective function maximized constraints generalized numerical total order nonnumerical partial order interpreted terms information Relations generalized relations constituent tuples indexes relations indexes variables numerical The distinction essential deﬁnition constraintsatisfaction problems Constraintsatisfaction problems formulated terms semantics conjunctions atomic formulas predicate logic Approximation structures available applied solutions constraintsatisfaction problems important domains As application treat constraintsatisfaction problems reals These cover large numerical analysis signiﬁcantly nonlinear equations inequalities The chaotic algorithm analyzed paper combines eﬃciency ﬂoatingpoint computation correctness guarantees arising logicomathematical model constraint satisfaction problems 2013 Elsevier BV All rights reserved 1 Computation maximization information space The early history constraint processing written MIT theses Sutherlands Waltzs Steeles 162014 Already small selection discern radically different approaches Sutherland Steele use relaxation starting form guessed assignment values variables constraints successively adjust variables way satisfy better constraint consideration These authors followed old idea brought prominence relaxation Southwell 15 Waltz adopted radically different approach knowledge ﬁrst He associated problems variables domain set values priori impossible Each constraint eliminate values domains variables affected constraint incompatible constraint In paper concerned method domain reduction method Research Report 746 Dept Computer Science University Western Ontario Canada Corresponding author Email address vanemdencsuvicca MH van Emden 00043702 matter 2013 Elsevier BV All rights reserved httpdxdoiorg101016jartint201302002 26 A Nait Abdallah MH van Emden Artiﬁcial Intelligence 197 2013 2538 The attraction domain reduction completeness ﬁnite domains solution exists This contrast relaxation ﬂounder forever1 In paper present domain reduction example view computation monotonic gain information This view pioneered Dana Scott ﬁrst mathematical sense 12 recursively deﬁned function f f sequence partial functions If x f x requires He associating deﬁnition recursion depth n anx deﬁned equal f x anx undeﬁned Thus sequence partial functions function agrees previous deﬁned In general partial functions g h type h deﬁned g value deﬁned Scott proposed regard g approximation h noted notion approximation partial order set partial functions type Moreover Scott proposed transfer information concept random variables Shannons information theory partial functions noting partial function regarded containing information partial functions approximating The approach semantics recursive deﬁnitions summarized saying deﬁnition regarded limit sequence approximations containing information limit sequence previous Scott aware somewhat farfetched interpretation notion information As justiﬁcation Scott 13 gave example set partially ordered information numerical intervals Although certainly strengthened case suggestion far know followed In paper motivated opportunities deeper understanding constraint solving In numerical applications view computation monotonic gain information theoretically teresting insight adds essential capability Suppose conventional numerical computation stopped 1000 iterations yields 1912837465 yields 1912877134 allowed run 10000 iterations know improvement obtained If results intermediate ﬁnal expressed intervals 1911 19382 1000 iterations 19126 192833 10000 iterations Here know unknown solution result additional computational work Rephrasing knowing gain information suggests effect iteration interval arithmetic described monotonic gain information The important qualiﬁcation monotonic interval arithmetic need settle information result additional computational work fail gain Moreover stalling progress useful criterion halting iteration Because special importance solving constraintsatisfaction problems reals means ﬂoatingpoint arithmetic choose example problem area Section 3 gives needed review interval methods Section 4 describes example The new view domain reduction monotonic information gain Section 6 develop method ﬁrst principles This suggests set constraints constraintsatisfaction problem formula predicate logic ﬁxed interpretation predicate symbols The standard semantics assigns meanings closed formulas formula free variables Accordingly Section 5 develop required extension semantics predicate logic This needs novel treatment relations section 2 Related work Following Mackworths AC3 algorithm 9 papers concerned converging fair itera tions 13171811 For historical references refer textbooks 72 We address connections work Saraswat et al 11 Section 7 3 Interval arithmetic interval constraints To facilitate use information computation use interval arithmetic directly indirectly constraintsatisfaction problem CSP Such problems solved associating unknown set possible val ues instead usual single value This especially appropriate realvalued unknowns In combination use ﬂoatingpoint arithmetic sets possible values form intervals ﬂoatingpoint numbers bounds This special case CSP solving called interval constraints 61 We introduce interval constraints means example In interval arithmetic rule adding intervals b c d cid2 cid3 x y x b y c d 1 But expect domain reduction cureall For problems relaxation quickly ﬁnds solution domain reduction requires infeasible time The nqueens problem large n example Van Hentenryck Michel 19 page 89 mention n 10000 routine example relaxation combination search technique 2 Note smaller number decimals intervals clear additional decimals meaningless 3 The smaller interval warrants decimal A Nait Abdallah MH van Emden Artiﬁcial Intelligence 197 2013 2538 27 0 2 0 2 0 4 The analogous operation interval constraints starts deﬁning constraint sumx y z holds reals x y z iff x y z In words formula sumx y z true x y z This leads following inference sumx y z x 0 2 y 0 2 z x 0 2 y 0 2 z 0 4 We use conventional format inference premises horizontal line conclusion The inference coincides special case interval arithmetic Only interval z narrowed In interval constraints priori constraints variables sumx y z x 0 2 y 0 2 z 3 5 x 1 2 y 1 2 z 3 4 Here intervals variables narrowed As result effect operation longer exclusively characterized addition inverse effect mixture operations We formulate effect algebraically applying operator contraction operator constraint sum maps triples intervals triples intervals case cid5 0 2 0 2 3 5 cid5 1 2 1 2 3 4 cid6 1 cid4 cid4 The righthand 1 smallest triple box inferred box strictly smaller exclude points possible according given premises inference Thus box optimal solution given constraintsatisfaction problem The optimal solution obtained addition subtractions interval arithmetic plus bound comparisons Similarly eﬃcient algorithms exist constraints product integer power trigonometric logarithmic functions We express contraction operator sum constraint mapping tuple B intervals tuple containing intersection B constraint In general CSP conjunction constraints After applying contraction operator case round applications yields contractions intervals variables As contractions implemented ﬂoatingpoint interval arithmetic assured valid outward rounding limit reached ﬁnite number rounds contractions In rounds happen constraint contain variables bound changed In cases contraction operator constraint effect skipped Algorithms developed perform optimizations 1 4 An example solving interval constraints Let consider problem determining intersection points parabola circle For example solve y x2 x2 y2 1 2 x 0 1 y 0 1 One eliminate y solve instead x4 x2 1 real roots However purpose illustrating solving interval constraints ignore opportunity simpliﬁcation numerically solve original 2 The method interval constraints applies class constraints form equalities inequalities realvalued expressions The sum constraint Section 3 example takes form equation x y z As mentioned section eﬃcient implementation optimal contraction operator The second equation 2 primitive transformed equivalent set primitive constraints In example primitive constraints sq sum needed The constraint squ v deﬁned u2 v sumu v w deﬁned u v w oneu deﬁned u 1 In way 2 following set constraints cid2 cid3 sqx y sq y z sum y z u oneu 3 The unknowns x y z u real numbers The introduction z u result reducing given constraints primitive ones In typical cases given constraints complex introduced variables greatly outnumber original ones 1 2 1 2 28 A Nait Abdallah MH van Emden Artiﬁcial Intelligence 197 2013 2538 In example given x y z satisfy constraints From original problem statement addition x 0 1 y 0 1 Of auxiliary unknown z initially know z u In effect transformed 2 y x2 z y2 y z u u 1 4 Instead solving original 2 solve equivalently constraints 3 This repeatedly applying arbitrary order contraction operators change intervals associated unknowns Applying contraction operators sq y z oneu results drastic narrowing intervals z u change 0 1 z 1 1 u After contraction operators constraints results change Therefore far contraction operator application To obtain information possibly existing solutions split CSP interval X 0 1 unknown x CSPs identical intervals x In ﬁrst CSP interval x left half X second CSP right half Then start round contraction operator applications starting halves initial box cid6 cid7 x 0 y 0 1 z 0 1 u 1 1 5 Applying contraction operator sqx y results y 0 14 Applying contraction operator sq y z results z 0 116 Applying contraction operator sum y z u results u 0 516 Applying contraction operator oneu causes interval u This proves solution initial box 5 We turn half cid6 cid7 x 1 y 0 1 z 0 1 u 1 1 6 Applying contraction operator sqx y results y 1 4 1 Continuing tabular form gives Interval x 05 1 Apply sqx y oneu sum y z u sq y z y 0 1 4 1 1 3 1 4 1 2 z 0 1 0 3 4 1 16 3 4 u 1 1 1 1 Now intervals x y continue getting smaller ﬂoatingpoint box reached contains 5 1 intervals y converge cid8 solution intervals x converge small interval containing small interval containing 1 2 5 1 1 2 5 Notation terminology relations constraints We 3 intuitively clear characterize mathematically solutions CSP characterize mathematically algorithm obtaining solution Consider example constraints sqx y sq y z They clearly common sq kind relation But constraints different conjunction simpliﬁed dropping different sq In section develop settheoretic formulation constraintsatisfaction problems illustrate example Section 4 We ﬁnd formulation facilitated treatment relations operations spirit conventional treatment differs details In particular need clarify difference relations constraints connection 51 Functions We denote S T set total functions deﬁned S values T If f S T f cid9 cid9 T x S cid9 S deﬁne f Scid9 restriction f S function S cid9 type S T If S f Scid9 x f x A Nait Abdallah MH van Emden Artiﬁcial Intelligence 197 2013 2538 29 52 Tuples As case conventionally relations sets tuples arity However need possibility index tuples variables conventional indexes 0 1 2 Hence deﬁne tuple element function set I T I arbitrary set serve index set I T type tuple Example If t tuple x y R tx 11 t y 121 Example t 3 b c 3 0 1 2 t0 b t1 c t2 c In cases like index set ordinal use compact notation t b c c In general write n 0 n 1 When function regarded tuple restriction operation functions called projection Eg t 2 1 3 t cid9 t02 t cid90 2 t cid92 3 t cid91 deﬁned 53 Approximation structures In 13 Dana Scott proposed computation steps viewed transitions partially ordered space data In view computation consists generating timeordered sequence d0 d1 d2 property successive data di approximated previous sense holding information limit sequence compat ible informative We write d0 cid11 d1 cid11 d2 cid11 cid11 partial order Scott primarily interested approach model mathematically evaluation recursively deﬁned func tions This requires mathematically sophisticated constructions However idea applies situations covered following deﬁnition Deﬁnition 1 An approximation structure set D set A subsets D 1 A closed ﬁnite intersection 2 A closed intersection possibly inﬁnite descending chains subsets 3 A contains D element The information order cid11 A deﬁned inverse inclusion subsets An approximation domain pair cid12D Acid13 formed set D approximation structure A D It turns tiresome approximation domain D A A speak approximation domain D ambiguity arises A Lemma 1 If D cid9 D exists approximation structure D element containing D cid9 Deﬁnition 2 If A approximation structure D D containing D cid9 cid9 D deﬁne α AD cid9 element A The set α AD cid9 corresponds maximum information D cid9 expressible approximation structure A Example The intervals form approximation structure set R real numbers deﬁne interval x R cid2 x cid2 b R b R We write b interval Note deﬁnition 0 Example Let F subset set R reals The F intervals approximation structure R F interval x R cid2 x cid2 b F b F An important case F set ﬁnite doublelength IEEEstandard ﬂoatingpoint numbers The include pairs numbers convenient representation elements approximation structure 54 Relations A relation set tuples type This type type relation If r relation type I T projection r I cid9 I f cid9 I cid9 T f r f I cid9 f cid9 denoted πI cid9 r Example sum x y z 3 R x y z relation type 3 R 3 0 1 2 Compare relation relation σ s x y z R sx s y sz As types different different relations 2 2 4 sum tuple s σ sx 2 s y 2 sz 4 Example If S element relation type S T unary relation Such relation identiﬁed subset T For example R b R f x R cid2 f x cid2 b unary relation identiﬁed interval b Maintaining distinction important current setting Section 56 30 A Nait Abdallah MH van Emden Artiﬁcial Intelligence 197 2013 2538 Deﬁnition 3 If r0 r1 relations types I0 T I1 T respectively join r0 cid2 r1 r0 r1 cid2 f I0 I1 T f I0 r0 f I1 r1 cid3 The join relations disjoint index sets called product relations We avoid term Cartesian product usually understood consist tuples index set 0 n 1 natural number n Deﬁnition 4 Let r relation type I T let I J Then write cylinder r respect J π 1 deﬁne greatest relation g J T πI g r J r Cylindriﬁcation inverse projection sense πI π 1 J r r Deﬁnition 5 Let I i0 in1 index set A box product unary relations r0 i0 D rn1 in1 D In case r0 rn1 intervals refer box interval box 55 Boxes approximation domain Lemma 2 Let I i0 in1 ﬁnite index set let B set boxes type I D Then cid12I D Bcid13 approximation domain Proof We need deﬁning properties Deﬁnition 1 In case closure arbitrary ﬁnite inﬁnite intersection ﬁrst properties established simultaneously Let r j Let j J possibly inﬁnite family boxes r j r j 0 cid2 cid2 r j n1 r j k ik D k n r cid9 j J r j cid4 r j 0 cid9 j J cid2 cid2 r j n1 cid5 Then f r cid9 j J r j j J f r j j J k n f ik r j k k n j J f ik cid9 f cid2 cid2 j 0 r j J cid9 j J r j k r j k k n f ik cid9 j J r j n1 Hence cid9 j J r j cid9 j J r j 0 cid2 cid2 cid9 j J r j n1 box intersection possibly inﬁnite family boxes box We ﬁnally need relation r I D box Letting rk ik D I D i0 in1 D in1 D r0 cid2 cid2 rn1 cid4 cid5 cid2 cid2 cid4 i0 D cid5 box cid3 Therefore relation r type i0 in1 D box containing r justiﬁes following deﬁnition Deﬁnition 6 The box operator applied relation r type i0 in1 D box cid3r contains r A Nait Abdallah MH van Emden Artiﬁcial Intelligence 197 2013 2538 31 56 Constraints A constraint syntactic entity denote relation A constraint form atomic formula theory predicate logic function symbols The semantics predicate logic assigns relation r atomic formula pq0 qn1 set V variables The relation r depends interpretation p tuple q0 qn1 arguments These arguments variables necessarily different The ﬁrstorder predicate logic interpretation language atomic formulas identiﬁes argument occurrences numerical indexes forces n 0 n 1 index set relation Mp relation meaning predicate symbol p given interpretation In setting instead index set associated constraint denoted pq0 qn1 set V distinct variables occurring atomic formula pq0 qn1 The interpretation M assigns relation type 0 n 1 nary predicate symbol p needs extended interpretation M assigns relation type V D constraint Deﬁnition 7 Let c pq0 qn1 V set variables q0 qn1 We deﬁne cid10 cid11 aq0 aqn1 cid2 V D cid3 Mp Mc As result deﬁnition meaning constraint c set V variables relation type V D One view argument tuple constraint operator converts relation Mp type n D relation Mc type V D This extension usual semantics predicate logic Example Let sq binary relation reals second argument square ﬁrst That Msq f 0 1 R The constraints sqx y sq y x sqx x denote different relations verify cid4 cid4 cid4 cid5 M cid5 sqx y f 1 f 2 0 Given Msq f 0 1 R cid2 cid2 cid2 cid2 cid2 cid2 x y R x y R x y R x y R x R x R cid5 sq y x cid5 sqx x M M cid5 cid5 cid4 cid4 cid4 cid4 cid4 cid4 f 1 f 2 0 cid5 cid5 cid10 cid11 cid3 Msq ax y cid3 ax2 y cid10 cid11 cid3 Msq y ax cid3 y2 ax cid10 cid11 ax ax cid3 Msq cid3 ax 0 ax 1 cid5 Deﬁnition 8 A tuple f V D satisﬁes constraint c restriction f set variables occurring c belongs Mc 57 Constraintsatisfaction problems Deﬁnition 9 A constraintsatisfaction problem CSP form cid12C V D Mcid13 consists set C s0 sm1 constraints set V set variables occurring constraints set D domain CSP interpretation M maps nary predicate symbol occurring constraints relation type n D A solution cid12C V D Mcid13 V D aV Msi m V set variables si It follows set σ solutions CSP relation type V D In cid12C V D Mcid13 Example f 0 1 R f 0 1 The set σ solutions relation σ V R πx yσ p0 p1 p0x p0 y 1 2 let C sqx y sq y z sum y z u oneu Eq 3 V x y z u D R Msq f 2 f 0 f 1 Mone f 0 R 5 1 f 1 f 02 Msum f 0 1 2 R 5 1 p1 y 1 2 5 1 p1x 5 1 1 2 1 2 cid8 cid8 This example shows CSP ﬁnite small solution set Sudoku puzzles example It happens solution set inﬁnite number elements ﬁnite number large list process Theorem 1 Let σ solution set CSP C s0 sm1 M interpretation predicate symbols Then σ Ms0 cid2 cid2 Msm1 32 A Nait Abdallah MH van Emden Artiﬁcial Intelligence 197 2013 2538 Proof By induction size set s0 sm1 The base case C s0 trivial Assume theorem holds constraint set Ck s0 sk1 size k cid3 1 let σ Ck Ms0 cid2 cid2 Msk1 denote solution set Ck Consider constraint set Ck1 Ck sk Any tuple t solution Ck1 Ck sk restriction t set variables occurring Ck solution Ck restriction t set variables occurring sk solution sk Whence σ Ck1 σ Ck cid2 Msk Conversely t σ Ck cid2 Msk construction t satisﬁes Ck sk t satisﬁes Ck1 Ck sk Therefore σ Ck1 σ Ck cid2 Msk cid3 6 Solving constraintsatisfaction problems What mean solve CSP It rare solution set σ elements Sudoku Though occupying small proportion type σ ﬁnite overwhelmingly large number elements inﬁnite set Hence typically hope obtain information σ Useful information come form approximation If approximation domain consists computerrepresentable sets typically cid3σ representable usually little information σ But cid3σ useful case case σ CSP solutions This advantage treating numerical problems CSPs conven tional computation conclude solutions By formulating problem CSP intervals approximation structure able prove solutions exist The possibility proof nonexistence means standard ﬂoatingpoint arithmetic rounding errors valuable complement conventional numerical analysis In case possible cid3σ subdivides box consideration able subdivisions solutions Let box P probe subdivision We use reduce partial solution problem determining σ determining solutions occur P ﬁnd usefully solutions occur P Thus proceed obtain information σ P This intersection general box necessarily computerrepresentable Hence appropriate task algorithm determine cid3σ P given CSP suitable P approximation cid3σ P approximation Subdivision P result subsets P union includes P These subsets subject consider ation absence solutions shown amenable subdivision process repeats subset Any box P deﬁnes tree subsets processed way solving CSP requires addition attempt absence solutions given box search tree subboxes initially given box The solution numerical CSP necessarily list boxes small subdivide absence solutions shown Of solution x Rn best typically fail cid3x contains solutions CSP 61 Contraction operators A contraction operator transforms box B box B cid9 B solution B B cid9 Two kinds contraction operators boxes deﬁned operators deﬁned relations operators deﬁned constraints 611 Contraction operators deﬁned relation Deﬁnition 10 Let D approximation domain I index set Any relation r type I D determines mapping γrP cid3r P contraction operator r maps boxes type I D boxes type Benhamou Older 3 introduced formula intervals reals Here generalized approximation systems general Lemma 3 The contraction operator γr idempotent monotonic inﬂationary correct Proof We cid3cid3r P P cid3r P P cid3r P γr idempotent cid3 monotonic intersection monotonic arguments γr monotonic γrP cid3r P cid3P P P cid11 γrP That γr moves information partial order γr inﬂationary We r P γrP meaning γr correct sense remove r argument An example contraction operator The contraction operator sum constraint acting box cid4 cid5 x b cid4 cid5 y c d cid4 cid5 z e f cid2 cid2 b c d e f ﬁnite IEEEstandard ﬂoatingpoint numbers given A Nait Abdallah MH van Emden Artiﬁcial Intelligence 197 2013 2538 33 γMsumx yz cid10 cid4 x cid9 cid4cid4 cid5 x b cid2 cid11cid5 cid4 cid9 b y cid2 cid4 cid5 y c d cid11cid5 cid10 cid9 c d cid2 cid4 cid9 z cid4 cid2 cid5cid5 z e f cid11cid5 cid10 cid9 e f cid9 Here cid9 cid10 cid10 cid9 c cid10 e cid9 cid11 cid11 cid11 cid9 cid9 b cid9 d f cid10 cid10 b c d e f e d f c e b f cid10 b d c cid11 cid11 cid11 means ﬂoatingpoint operation performed roundtowardminusinﬁnity mode super means ﬂoatingpoint operation performed roundtowardplusinﬁnity mode In way correctness superscript script γsum maintained presence rounding errors In Eq 1 contraction operator applied case 0 b 2 c 0 d 2 e 3 f 5 Applying γMsumx yz special case gives cid9 cid10 cid10 cid9 c cid10 e cid9 cid11 cid11 cid11 cid9 cid9 b cid9 d f 0 2 1 5 1 2 0 2 1 5 1 2 3 5 0 4 3 4 This gives general idea A practical algorithm care possibility overﬂow It allow possibility c e b d f undeﬁned cases circumvented For details algorithms 8 612 Contraction operators deﬁned CSP In CSP deﬁned constraints s0 sm1 let write σi Msi Then Theorem 1 says σ σ0 cid2 cid2 σm1 The γ operator Deﬁnition 10 useful r σ useful r σi solution sets constraints In fact constraints chosen eﬃcient algorithm γσi Deﬁnition 11 Let cid12s0 sm1 V D Mcid13 CSP Let σi Msi let V set variables si We deﬁne γiP π 1 V cid4 cid5 γσi πV P 0 m 1 box P type V D γi contraction operator si We deﬁne Γ P γ0P γm1P Γ contraction operator CSP Lemma 4 Γ inﬂationary monotonic correct Proof Since Lemma 3 γσi inﬂationary m1cid9 Γ P γiP cid2iγiP cid4 cid5 γσi πV P cid4 γσi πV P i0 cid2iπ 1 V cid4 π 1 cid2i cid21 π 1 V cid2i πV P P V cid5cid5 Hence Γ inﬂationary Γ monotone composition monotone operators projection πV cylindriﬁcation π 1 mono V tone operators Finally Γ correct Indeed Lemma 3 σi correct satisﬁes σi πV P γσi πV P f γiP f V σi f σ Hence f P Γ P implies f σ tuple f f P Γ P f P σ P Γ P Therefore Γ correct cid3 34 A Nait Abdallah MH van Emden Artiﬁcial Intelligence 197 2013 2538 A counterexample idempotency Γ given CSP example discussed earlier Section 4 cid2 cid3 sqx y sq y z sum y z u oneu It approximation domain real boxes included x u z u R corresponding Γ oper ator operating domain box P informally described Eq 6 P f x y z u R 2 1 f y 0 1 f z 0 1 f u 1 1 The sequence Γ nP nN strictly decreasing stabilizes f x 1 smallest box approximation domain containing tuple f x y z u R f x 5 1 f y 1 2 5 12 f u 1 5 1 f z 1 4 1 2 cid8 62 Algorithms Algorithms solving CSPs proceed applying contraction operators Hence algorithms remove tuples consideration solution In course process absence solutions CSP demon strated solutions general constructed In case discrete D happen applying constraint contractors result box contains single tuple This tuple need substituted CSP check solution However type CSP concerned reals ﬂoatingpoint intervals approximation domain ﬁnding solution way remote theoretical possibility problem exact solution terms ﬂoatingpoint numbers substitution miraculously avoid rounding errors Hence numerical CSPs best expect algorithm results small box This box small doublelength IEEEstandard 17 The result shows ﬂoatingpoint arithmetic box projections intervals relative width 10 solution exists box Among algorithms use contraction operators solve CSPs distinguish types iteration according order operators applied We distinguish rigid order ﬂexible order The type leaves choice choice operator applied Consider CSP cid12C V D Mcid13 contraction operators γ0 γm1 The rigidorder algorithm applies m opera tors order successive applications particular operator operators applied The rigidorder algorithm susceptible improvement In typical CSP m order hundreds thousands constraints typically arguments In numerical CSPs example fewer Usu ally constraint shares argument In situation contractor applications effect application affects arguments operator belongs constraint involve arguments application effect This suggests chaotic algorithm avoids ineffectual choices operator applications4 There considerable scope optimization constraint sequence operator applications sequence fair following sense Deﬁnition 12 Let k N A inﬁnite sequence elements members ﬁnite set A k fair iff element A occurs inﬁnitely times k Thus fair sequence possible necessary occurrences item items occurred A chaotic algorithm m operators applies operators fair sequence Such algorithm generate fair sequence maintaining record index sequence change effected As soon operators applied resulting change idempotence algorithm halted rest inﬁnitely long fair sequence consists operator applications effect For details 1 63 Maximization property chaotic algorithm The chaotic algorithm solves following problem cid12 maximize B subject B cid11 Γ B 7 B ranges boxes approximation domain Γ Γ operator associated CSP The prob lem stated format borrowed mathematical programming sense includes example linear programming In format total order real numbers replaced partial order Scott information order described Section 5 The generalization total order mathematical programming programming partial orders Parker captures wide variety algorithms framework 10 4 The term chaotic adopted constraint processing literature detour numerical algorithm 5 A Nait Abdallah MH van Emden Artiﬁcial Intelligence 197 2013 2538 35 It easily seen chaotic iteration solves maximization problem sequence generated algorithm converges ﬁxpoint Γ Note cid11 information order B 0 cid11 B1 iff projections B1 subset corresponding projection B 0 631 Fixpoints We review basic facts ﬁxpoints Let cid12D cid11 cid13 complete partially ordered set Completeness means i0 ci element partially ordered inﬁnite ascending chain c0 cid11 c1 cid11 upper bound set cid13 Let Γ D D monotonic continuous Continuity function f D D means inﬁnite ascending chain c0 cid11 c1 cid11 f i0 f ci In case ﬁnite D partially ordered set ﬂoatingpoint intervals monotonicity implies continuity By KnasterTarski theorem Γ ﬁxpoint lfpΓ D This seen follows By monotonicity Γ i0 ci cid13 cid13 cid11 Γ cid11 Γ 2 cid11 By completeness partially ordered set cid14 cid15 Γ cid16 Γ n cid15 cid4 cid5 Γ n Γ cid13 n0 n0 Γ n ﬁxpoint Γ n0 Hence cid15 n0 Γ n cid13 n0 Γ n D By continuity Γ We turn Tarski ﬁxpoint theorem Let Γ D D monotonic assume partially ordered set cid12D cid11 cid13 complete lattice richer structure Completeness means subset D upper bound greatest lower bound In particular D possesses largest element cid23 Then Tarski ﬁxpoint theorem Γ ﬁxpoint lfpΓ D This seen follows Consider set S D Γ cid11 S nonempty contains element cid23 D Let l cid24S greatest lower bound S Then element S S l cid11 Γ l cid11 Γ cid11 monotonicity Γ Hence Γ l lower bound S Γ l cid11 l cid24S Therefore l S One chain implica tions Γ l cid11 l Γ cid4 cid5 Γ l cid11 Γ l Γ l S l cid11 Γ l l Γ l Hence l ﬁxpoint Γ It ﬁxpoint S contains ﬁxpoint l cid24S Therefore l cid24S lfpΓ ﬁxpoint Γ 632 Application ﬁxpoint theory chaotic algorithm Theorem 2 Given CSP cid12C V D Mcid13 contraction operator Γ solution set σ For box P type V D σ P cid3σ P Γ nP n 0 1 2 Proof The ﬁrst inclusion follows deﬁnition cid3 operator We consider case m 2 constraints easily extends arbitrary greater values m We write σi Msi V set variables si 0 1 We ﬁrst consider case n 1 cid2 cid3 V D aV 0 σ0 aV 1 σ1 aV 0 πV 0 P aV 1 σ0 aV 1 cid2 cid3 V D aV 0 cid2 cid3 V D aV 0 cid4 cid3 π 1 π 1 cid4 cid3 V σ0 πV 0 P aV 1 π 1 V σ0 πV 0 P π 1 cid3σ0 πV 0 P π 1 cid3σ0 πV 0 P π 1 V V V cid3σ P cid3 cid3 σ1 P πV 1 P cid3 σ1 πV 1 P cid5 V σ1 πV 1 P cid5 cid3σ1 πV 1 P cid3σ1 πV 1 P γ0P γ1P Γ P 36 A Nait Abdallah MH van Emden Artiﬁcial Intelligence 197 2013 2538 We shown cid3σ P Γ P We cid3σ P Γ 2P This correctness Γ remove solution tuples argument Hence cid3σ P Γ nP n cid3 0 cid3 By Deﬁnition 11 Γ intersection contraction operators constraint eﬃciently computed The results operators exact sense results deﬁnition approximations exactly representable Thus Theorem 2 serve basis algorithm approximating set solutions P In terms information order cid11 Theorem 2 states Γ nP cid11 cid3σ P cid11 σ P Theorem 3 Γ monotonic partially ordered set subboxes P ordered information order Proof Each contraction operator γi P cid6 π 1 tone cid3 V γσi πV P monotone join monotone operators mono Observe set boxes contained P deﬁnes approximation structure P Γ monotonic The partially ordered set subboxes P ordered information order complete lattice element P Accordingly Γ restricted approximation structure ﬁxpoint lfpΓ Tarski ﬁxpoint theorem Summarizing Γ nP cid11 lfpΓ cid11 cid3σ P cid11 σ P n If box operator cid3 continuous approximation domain deﬁned D Γ continuous i0 Γ iP ﬁxpoint Γ contained compositionality continuous functions KnasterTarski theorem P cid13 In particular D set F ﬁnite doublelength IEEEstandard ﬂoatingpoint numbers approximation main given set F intervals domain D ﬁnite operators cid3 Γ continuous The subboxes P form complete partially ordered set trivially ﬁniteness set ﬂoatingpoint numbers Therefore cid13 cid13 n i0 Γ iP ﬁnite n ﬁxpoint Γ restricted P i0 Γ iP Theorem 4 Let CSP cid12s0 sm1 V D Mcid13 contraction operator Γ contraction operators γi individual straint si given If approximation structure D box operator cid3 continuous box P fair iteration continuous operators γi starting P converges ﬁxpoint j0 Γ jP Γ restricted P cid13 Proof Let k0 k1 k2 fair iteration n kn 0 m 1 index constraint s s0 sm1 selected nth iteration step The corresponding iteration starting box P given sequence boxes P 0 P P n γkn P n1 n 0 We ﬁrst j q Γ jP cid11 P q 8 Indeed k fair sequence operators γi inﬂationary monotone j choose q initial iteration subsequence k0 kq1 contains constraint sl C j occurrences index l sl 0 m 1 occurrences correspond j applications contraction operator γl Next observe q P q cid11 Γ qP follows induction q cid13 cid13 Whence j0 Γ jP cid11 j0 P j 8 cid13 j0 P j cid11 cid13 j0 Γ jP 9 The limits equal cid3 9 7 Further work Concurrent constraint programming CCP 11 references model concurrent programming This model based abstraction store abstract conventional programming languages Usually store modeled vector storable values numbers characters indexed variables acces sible program Thus variable corresponds single value The conventional read operation variable yields value The conventional write operation variable changes value In CCP assumed value variable precisely known store constraint values variables The conventional read operation replaced ask operation form logic formula succeeds logically entailed store The conventional write operation replaced tell operation A Nait Abdallah MH van Emden Artiﬁcial Intelligence 197 2013 2538 37 form logic formula T effect replacing store S logical equivalent S T provided consistent The generalization conventional store CCP requires store logical theory S satisfaction complete sense formula C admissible ask tell case S cid26 C S cid26 C denotes existential closure See 4 references CCP great deal unexploited potential Its motivation terminology area concurrent pro gramming aim generalizing different approaches Hewitts Actors Hoares CSP Milners CCS ﬂavours concurrent logic programming CCP linked constraint solving formulation terms predicate logic Thus CCP promises framework constraint solving parallelism built promising feature given massive computation typical constraint problems To realize promise necessary generalize CCP restriction store satisfactioncomplete theory For example case interval constraints domain reals theory store satisfactioncomplete Consequently result converging iteration interval constraints means solution exists remaining intervals Often knows sources solution exists CSP arises polynomial odd degree equated zero remaining intervals close resolution ﬂoatingpoint In situation weakness conclusion stand way great practical value We explored valuable features CCP preserved store necessarily satisfactioncomplete theory 8 Concluding remarks We contributions paper following Although usual deﬁnition CSP constraints look like atomic formulas predicate logic semantics CSP given independently We use standard semantics ﬁrstorder predicate logic deﬁne solution set CSP deﬁne approximation systems settheoretic device interface framework CSPs wellknown chaotic iteration algorithm Parkers observation 10 operations research paradigm maximizing realvalued objective function constraints generalized maximization partially ordered spaces Scotts contribution 13 computation viewed information gain We combine insights Parkers examples seen iterations information monotonically gained Among examples concentrate solving systems constraints nonlinear equations inequalities reals Constraint processing domain reduction viewed use monotonic gain information This theoretical point view What lacking current practice computing quantitative treatment work CPU gigacycle The domain reduction method compare gigacycles required obtain recent domain reduction expressed ratio cardinalities volumes box reduction One conclude reduction x percent worth y gigacycles cost diminishing returns computational effort expected time terminate iteration Acknowledgements This research supported universities INRIA Rocquencourt France Natural Science Engi neering Research Council Canada References 1 KR Apt The essence constraint propagation Theoretical Computer Science 221 12 1999 179210 2 KR Apt Principles Constraint Programming Cambridge University Press 2003 3 F Benhamou WJ Older Applying interval arithmetic real integer Boolean constraints Journal Logic Programming 32 1997 124 4 KL Clark Logicprogramming schemes implementations JL Lassez G Plotkin Eds Computational Logic MIT Press 1991 pp 487541 5 D Chazan W Miranker Chaotic relaxation Linear Algebra Applications 2 1969 199222 6 JG Cleary Logical arithmetic Future Computing Systems 2 1987 125149 7 R Dechter Constraint Processing Elsevier Science 2003 8 T Hickey Q Ju MH van Emden Interval arithmetic principles implementation Journal ACM 48 5 2001 10381068 9 AK Mackworth Consistency networks relations Artiﬁcial Intelligence 8 1977 99118 10 DS Parker Partial order programming Technical Report CSD870067 Computer Science Department University California Los Angeles 1987 11 VA Saraswat M Rinard P Panangaden Semantic foundations concurrent constraint programming ACM Conference Principles Program ming Languages POPL 1991 12 DS Scott Outline mathematical theory computation Technical Report PRG2 Programming Research Group Oxford University 1970 13 DS Scott Lattice theory data types semantics R Rustin Ed Formal Semantics Programming Languages PrenticeHall 1972 14 G Steele The deﬁnition implementation programming language based constraints PhD thesis MIT 1980 15 RV Southwell Relaxation Methods Engineering Oxford University Press 1940 16 I Sutherland Sketchpad manmachine graphical communication PhD thesis Dept Electrical Engineering MIT 1963 38 A Nait Abdallah MH van Emden Artiﬁcial Intelligence 197 2013 2538 17 P Van Hentenryck L Michel F Benhamou Newton constraint programming nonlinear constraints Science Computer Programming 30 1998 83118 18 P Van Hentenryck V Saraswat Y Deville Design implementation evaluation constraint language ccFD Journal Logic Programming 37 1998 139164 19 P Van Hentenryck L Michel ConstraintBased Local Search MIT Press 2005 20 DL Waltz Generating semantic descriptions drawings scenes shadows PhD thesis MIT 1972