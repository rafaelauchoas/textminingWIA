Artiﬁcial Intelligence 191192 2012 4260 Contents lists available SciVerse ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint On minimal constraint networks Georg Gottlob Department Computer Science Oxford Man Institute University Oxford Oxford OX1 3QD UK r t c l e n f o b s t r c t In minimal binary constraint network tuple constraint relation extended solution The tractability intractability computing solution minimal network long standing open question Dechter conjectured computation problem NPhard We prove conjecture We prove conjecture Dechter Pearl stating k cid2 2 NPhard decide single constraint decomposed equivalent kary constraint network We holds case bivalued constraints k cid2 3 proves conjecture Dechter Pearl Finally establish tractability frontier problem respect domain cardinality parameter k 2012 Elsevier BV All rights reserved Article history Received 12 May 2012 Received revised form 26 July 2012 Accepted 28 July 2012 Available online 31 July 2012 Keywords Constraints Minimal network Complexity Join decomposition Structure identiﬁcation Database theory Knowledge compilation 1 Introduction This paper deals problems related minimal constraint networks First complexity computing solution minimal network determined Then problems recognizing network minimality networkdecomposability studied 11 Minimal constraint networks In seminal 1974 paper 26 Montanari introduced concept minimal constraint network Roughly minimal network constraint network partial instantiation corresponding tuple constraint relation extended solution Each arbitrary binary network N having variables X1 X v transformed equivalent binary minimal network MN computing set solN solutions N creating 1 cid2 j cid2 v constraint ci j scope Xi X j constraint relation consists projection solN Xi X j 1 cid2 cid2 v unary constraint ci scope Xi constraint relation projection solN Xi The minimal network MN unique solutions exactly original network solN solMN An example binary constraint network N given Fig 1a This network variables X1 X4 simplicity range numerical domain 1 2 3 4 5 Its solution solN join relations N shown Fig 1b The minimal network MN shown Fig 1c Obviously MN regarded optimally pruned version N hard compute But computing MN result useful knowledge compilation 215 In fact MN hand answer number queries This paper signiﬁcantly extended version paper title presented 17th International Conference Principles Practice Constraint Programming Gottlob 2011 17 The present paper contains new results addition Gottlob 2011 17 Possible future updates available CORR httparxivorgabs11031604 Email address georggottlobcsoxacuk 00043702 matter 2012 Elsevier BV All rights reserved httpdxdoiorg101016jartint201207006 G Gottlob Artiﬁcial Intelligence 191192 2012 4260 43 Fig 1 A binary constraint network N solution solN minimal network MN polynomial time NPhard Typically queries involve variables example queries solution X4 cid2 3 N solution X2 X1 aﬃrmatively answered simple lookup relevant tables MN For query example look ﬁrst relation table MN tuple cid22 1cid3 constitutes witness In contrast example query solution X1 X4 immediately recognized negative answer fourth relation MN tuple witnessing inequality An example slightly involved nonBoolean twovariable query polynomially answered MN maximal value X2 X4 minimum solutions Again read answer single relation MN variables query In example Fig 1 penultimate relation MN easily deduce answer 2 12 Computing solutions minimal constraint networks In applications computersupported interactive product conﬁguration queries arise frequently useful able exhibit time solution query answer assignment values variables witnessing answer However unclear following problem tractable Given nonempty minimal network MN compute arbitrary solution Gaur 11 formulated open problem He showed stronger version problem solutions restricted speciﬁc value assignments pair variables sought NPhard speculated ﬁnding arbitrary solutions tractable However introduction minimal networks 1974 came polynomialtime algorithm task This led Dechter conjecture problem hard 8 Note problem deviates ways classical decision problems First search problem decision problem second promise problem promised 44 G Gottlob Artiﬁcial Intelligence 191192 2012 4260 input networks constitute problem instances minimal promise veriﬁcation NPhard Section 41 We clarify NPhardness means referring problems The simplest probably cleanest deﬁnition following The problem NPhard polynomial algorithms solving imply existence polynomialtime algorithm NPhard decision problems imply P NP In light Dechters conjecture reads follows Conjecture 11 See Dechter 8 Unless P NP computing single solution nonempty minimal constraint network polynomial time While problem interested number researchers solved recently Some progress Bessiere 2006 In wellknown handbook article Constraint Propagation 4 results Cros 6 backtrackfree algorithm computing solution minimal network exist Polynomial Hierarchy collapses second level precisely Σ p 2 However mean problem intractable 2 A backtrackfree algorithm according Bessiere able recognize partial assignment extensible solution In sense algorithm computes solution potential compute solutions changing choices variableinstantiations different steps In colloquial terms backtrackfree algorithms according Bessiere fair solutions Bessieres result preclude existence general algorithm computes solution unable recognize partial assignments unfair solutions Π p The simple example Fig 1 way shows following naïve backtrackfree strategy doomed fail Pick arbitrary tuple ﬁrst relation MN expand suitable tuple second relation In fact picked ﬁrst tuple cid21 1cid3 ﬁrst relation combine ﬁrst tuple cid21 1cid3 second relation obtain partial instantiation X1 X2 X3 1 However partial instantiation solution expanded match tuple relation While naïve strategy fails imagine existence sophisticated backtrackfree strategy precomputes polynomial time helpful data structure embarking choices However paper strategy exist NP P In ﬁrst paper prove Dechters conjecture showing polynomialtime search algorithm A computes single solution minimal network transformed polynomialtime decision algorithm A classical satisﬁability problem 3SAT The proof carriedout Section 3 We ﬁrst SAT instance transformed polynomial time equivalent highly symmetric Section 31 Such symmetric instances ksupersymmetric polynomially reduced problem computing solution minimal binary constraint network Section 32 We consider case bounded domains input instances cardinality overall domain values appear constraint relation bounded ﬁxed constant c By simple modiﬁcation proof general case easily seen bounded domain case problem computing single solution remains NPhard Section 33 Our hardness results computing relations reformulated terms database theory Every constraint net work N seen relational database instance constraint N corresponds single relation instance The set solN solutions binary constraint network database instance N identical relation obtained performing natural join relation instances N The minimal network MN lossless decomposition solN according join dependency S S schema MN Our main hardness result implies coNPhard recover arbitrary single tuple relation instance R called universal relation lossless decomposition according given single join dependency decomposition given Lossless decompositions universal relations studied decades recently related hidden variable models quantum mechanics 12 13 Minimality checking structure identiﬁcation In Section 41 generalize slightly strengthen result Gaur 11 showing NPhard determine kary network minimal case bounded domains In Section 42 study complexity checking network N consisting single constraint relation typically arity cid3 k represented equivalent kary constraint network Note precisely case iff exists kary minimal network M equivalent N solM solN Dechter Pearl 9 regarded problem relevant complexity problem structure identiﬁcation relational data checking element general class objects case data relations belongs structurally simpler subclass case kdecomposable relations This problem equivalent database problem testing given instance data relation satisﬁes speciﬁc join dependency Dechter Pearl conjectured problem NPhard k cid3 2 We prove conjecture showing problem coNPcomplete k cid3 2 A special case considered 9 bivalued constraints constraints Boolean domain For bi valued constraints structure identiﬁcation problem equivalent testing Boolean formula represented explicit list models equivalent kCNF For k 2 problem known tractable 711 Dechter Pearl 9 conjectured NPhard ﬁxed k 2 In Section 43 prove conjecture G Gottlob Artiﬁcial Intelligence 191192 2012 4260 45 deciding bivalued relations kdecomposable coNPcomplete ﬁxed k 2 Moreover Section 44 representability trivalued constraints generally rvalued constraints r cid3 3 kary network coNPhard ﬁxed k cid3 2 Put results allow trace precise tractability frontier problem relational structure identiﬁcation terms domain cardinality parameter k This visualized Fig 3 Section 44 The paper concluded Section 5 brief discussion practical signiﬁcance main result proposal enhancement minimal networks hints possible future research 2 Preliminaries basic deﬁnitions While deﬁnitions section adapted standard literature constraint satisfaction particular 84 use slightly different notation convenient purposes Constraints networks solutions We assume totally ordered inﬁnite set X variables For Xi X j X Xi X j means Xi smaller X j according ordering We assume variables constraint networks set A kary constraint c pair scopec relc The scope scopec c sequence Xi1 Xi2 Xik k Xik variable Xi j associated ﬁnite domain dom Xi j distinct variables X Xi1 The relation relc c subset Cartesian product dom Xi1 dom Xi2 dom Xik The set Xi1 Xik variables occurring scopec denoted varc Given set variables totally ordered shall identify set U variables convenient list cid7U elements ordered according We write scopec U instead scopec cid7U More generally concepts lists distinct elements ordered sets coincide use settheoretic notation express facts lists For example s denotes scope write Xi s express Xi variable scope If U denotes list unordered set variables write s U variable s element U Xi2 A constraint network N consists ﬁnite set varN X1 X v variables associated domains dom Xi 1 cid2 cid2 v set constraints consN c1 cm 1 cid2 cid2 m varci varN cid2 If U varN set variables domU XU dom X The domain domN constraint network N deﬁned domN domvarN Theschema N set schemaN scopec c consN scopes constraints N If S schema varS denotes set variables scopes S In particular S schema network N varS varN We N binary kary arityc cid2 2 arityc cid2 k constraint c consN Let N constraint network An instantiation mapping set variables W varN mapping θ W domW X varN θ X dom X We θW instantiation W An instantiation proper subset W varN called partial instantiation instantiation varN called instantiation total instantiation A constraint c N satisﬁed instantiation mapping θ W domW varc W θscopec relc An instantiation mapping θ W domW consistent satisﬁed constraints By abuse terminology θ understood consistent θW consistent A solution constraint network N consistent instantiation N The set solutions N denoted solN N solvable iff solN cid10 Whenever useful identify solution set solN single constraint scope varN relation consists tuples solN We assume loss generality set variables W varN constraint network exists constraint c varc W In fact constraints exactly variables scope equivalent single constraint obtained intersecting constraint relations Complete networks The complete schema S U k set variables U denotes schema consisting nonempty X1 X2 X1 X2 If constraint scopes arity k contained U For example U X1 X2 S U k set variables U understood write Sk instead S U k A kary constraint network N complete schema S varN For ﬁxed constant k kary constraint network N transformed trivial polynomial reduction k In fact cid5 cid2 k ordered set variables equivalent complete kary network N W Xi1 Xicid5 scope N add trivial constraint cid12W scopecid12W Xi1 Xicid5 relcid12W dom Xi1 dom Xi2 dom Xicid5 For reason useful restrict attention complete networks Some authors Montanari 26 studies binary networks assume deﬁnition networks complete Dechter 8 assumption implicitly solN solN Intersections networks containment projections Let N1 N2 constraint networks deﬁned schema S set S constraint scopes The intersection M N1 N2 N1 N2 network having varM varN1 varN2 having constraint cs s S scopecs s relcs relcs 2 c1 c2 constraints having scope s N1 N2 respectively The intersection arbitrary families constraint networks deﬁned schema deﬁned similar way For networks N1 N2 schema S c1 contained c2 write N1 N2 s S c1 consN1 c2 consN2 1 relcs 46 G Gottlob Artiﬁcial Intelligence 191192 2012 4260 scopec1 scopec2 s relc1 relc2 If c constraint set variables W X1 X v V W projection ΠV c constraint scope V relation projection V relc Let c constraint S schema consisting scopes contained scopec ΠS c Πsc s S Minimal networks Let c constraint varc U The projection ΠS U c henceforth denote ΠSk c Thus ΠSk c constraint network obtained projecting c scopes schema S U simply denoted Sk k nonempty ordered lists k variables varc In particular constraints ΠS2 c precisely ΠW c W varc unary binary scope k It ﬁrst observed 26 binary constraint network N unique binary minimal network MN cid14 solN Minimality consists intersection binary networks N respect deﬁned relation binary networks More generally kary network N cid14 unique kary minimal network MkN intersection kary networks N schema Sk solN solN For special case k 2 M2N MN The following known 26278419 easy schema S2 solN cid14 cid14 cid14 kary networks N MkN ΠSk solN MkN N solN A kary network N satisﬁable solution iff MkN nonempty A kary network N minimal iff ΠSk solN N A kary network N minimal iff MkN N A network N schema Sk minimal iff exists universal relation ρ N single constraint ρ cid14 solN cid14 N ΠSk ρ In case N said join consistent 19 It obvious k cid3 2 MkN hard compute In fact deciding network N MkN network coNPcomplete decision problem equivalent deciding N solution Recall deciding network N solution NPcomplete 23 In paper primarily interested computing MkN computing single solution case MkN computed known Graphtheoretic characterization minimal networks An npartite graph graph vertices partitioned n disjoint sets vertices set adjacent It known 31 binary straint network N n variables represented npartite graph G N The vertices G N possible instantiations variables corresponding domain values Thus variable Xi possible domain value dom Xi vertex X j scope Xi Y j contains tuple b1 Gaur 11 gave following nice characterization minimal networks A solv able2 complete binary constraint network N n variables minimal iff edge N clique size n G N Note deﬁnition G N npartite graph clique G N n vertices cliques n vertices precisely maximum cliques G N j connected edge G N iff relation constraint c N Two vertices X X b Satisﬁability problems An instance C satisﬁability SAT problem conjunction clauses written set clauses consists disjunction written set literals positive negated propositional variables Propositional variables called propositional atoms If α set clauses single clause denote propvarα set propositional variables occurring α A 3SAT instance SAT instance clause disjunction literals 3SAT problem deciding 3SAT instance satisﬁable 3 NPhardness computing minimal network solutions To computing single solution minimal network NPhard exactly contrary people automatic constraint solvers usually whilst solving constraint network SAT instance While everybody aims breaking symmetries actually introduce additional symmetry 3SAT instance corresponding constraint network representation This achieved Symmetry Lemma proved section 31 The Symmetry Lemma The following lemma shows ﬁxed k cid3 1 transform arbitrary 3SAT instance C polynomial satisﬁable Before time satisﬁabilityequivalent highly symmetric SAT instance C truth value assignment k variables C stating lemma let formally deﬁne notion symmetry refer supersymmetry extended truth value assignment satisfying C C C 1 We disregard unary relations N fact unary relation constraint network eliminated appropriately restricting domain scope variable 2 We refer solvability according deﬁnition Gaur uses different deﬁnition term G Gottlob Artiﬁcial Intelligence 191192 2012 4260 47 Deﬁnition 31 For k cid3 1 SAT instance C ksupersymmetric C unsatisﬁable set k propositional variables p1 pk propvarC arbitrary truth value assignment η p1 pk exists satisfying truth value assignment τ C extends η A SAT instance 2supersymmetric called supersymmetric Assume k k By deﬁnition SAT instance C k cid14 However ksupersymmetric SAT instance C necessarily k cid14 cid14 supersymmetric C ksupersymmetric supersymmetric Lemma 31 Symmetry Lemma For ﬁxed integer k cid3 1 polynomialtime transformation T transforms 3SAT C satisﬁable iff C instance C ksupersymmetric SAT instance C satisﬁable We illustrate proof Lemma 31 example A proof given Appendix A Proof Illustration Example Consider 3SAT instance C C1 C2 C3 C1 p q r C2 p q C3 q Clearly 3SAT instance C satisﬁable 1supersymmetric fortiori ksupersymmetric k cid3 1 To observe partial truth value assignment assigning false q falsiﬁes clause C3 extended satisfying truth value assignment C In sequel illustrate T C C transformed polynomialtime transformation T satisﬁable supersymmetric SAT instance C To aim introduce propositional variable v C set Newv ﬁve new propositional variables In particular Newp p1 p2 p3 p4 p5 Newq q1 q2 q3 q4 q5 Newr r1 r2 r3 r4 r5 We create C C taking conjunction clauses obtained replacing clause C positive literal v possible ways disjunction v v j vk elements v v j vk Newv replacing negative literal v possible ways disjunction v v j vk v v j vk elements Newv Each clause replaced multitude clauses taken conjunction In particular example clause C1 actually replaced conjunction following 1000 clauses C 1 p1 p2 p3 q1 q2 q3 r1 r2 r3 1 C 1000 1 C 1 1 C 2 1 C 3 1 C 10 1 C 11 1 C 1000 1 p1 p2 p3 q1 q2 q3 r1 r2 r4 p1 p2 p3 q1 q2 q3 r1 r2 r5 p1 p2 p3 q1 q2 q3 r3 r4 r5 p1 p2 p3 q1 q2 q4 r1 r2 r3 p3 p4 p5 q3 q4 q5 r3 r4 r5 Similarly clause C2 p q replaced following 100 clauses C 1 p1 p2 p3 q1 q2 q3 C 1 2 2 C 100 2 C 1 2 C 100 2 p1 p2 p3 q1 q2 q4 p3 p4 p5 q3 q4 q5 Finally clause C3 p replaced following 10 clauses C 1 3 C 10 3 C 1 3 C 2 3 C 10 3 q1 q2 q3 q1 q2 q4 q3 q4 q5 48 G Gottlob Artiﬁcial Intelligence 191192 2012 4260 The SAT instance C T C consists conjunction clauses C 1 3 C C 10 3 We claim formally prove Appendix A transformation 3SAT instance C SAT C 1000 C 100 C 1 2 1 2 C 1 1 stance C satisﬁes following key facts Fact 1 C Fact 2 C satisﬁable iff C satisﬁable example C satisﬁable In fact satisﬁable truth value assignment τ propositional variables C transformed satisfying truth value assignment τ follows If τ v true let τ assign true propositional variables Newv false τ v false let τ assign false propositional variables Newv true In example instance consider truth value assignment τ satisfying C τ p false τ q τ r true This truth value assignment satisﬁes r C1 The assignment τ assigns true atoms Newr r1 r2 r3 r4 r5 assume example r1 r4 r5 But 3element subset Newr nonempty intersection nonempty element subset Newr set atoms Therefore clause C C 1 clause C 1 satisﬁed For example C 1 1 r1 1 common set r1 r4 r5 satisﬁed τ τ r1 true A similar argument holds negative literals Applying type reasoning clauses Ci C given Ci literal In summary τ satisﬁed τ clauses C Vice versa proof C satisﬁable C satisﬁed τ 1 C 1000 satisﬁes C j C C C 1 C satisfying exampleinstance C elements Newp p1 p5 According construction rules τ supersymmetric Intuitively great choice truth value assignments propositional variables Newv constructing satisfying assignment τ assignment τ C Imagine illustration wed like construct truth value assignment τ τ p1 true τ q3 false Note truth value assignment instance C actually satisfy p falsify q Notwithstanding able ﬁnd appropriate τ desired properties We start arbitrary satisfying truth value assignment τ C example τ p false τ q τ r true To construct τ let ﬁrst deﬁne τ previous paragraph given τ p false τ assign false elements Newp necessarily elements Newp This leaves freedom assigning true p1 So example assign false p2 p3 p4 p5 true p1 Similarly given τ q true τ assign true elements Newq fulﬁlling time requirement τ q3 false For example let τ q1 τ q2 τ q5 true τ q3 τ q4 false Finally requirement truth values assigned τ elements Newr propositional variables assigned true Thus example let τ r1 τ r2 τ r5 true In summary easy actually follows Fact 1 truth value assignment τ extends initially given partial truth value assignment τ p1 true τ q3 false More generally pair v w propositional variables extends η C satisﬁes C truth value assignment η v w construct truth value assignment τ 2supersymmetric supersymmetric constructed way satisﬁes C Moreover τ This shows C As easily seen transformation arbitrary 3SAT instance C corresponding C polynomialtime com putable Together Facts 1 2 informally proves Symmetry Lemma k 2 For k 2 proof analogous cid2 Remark The concept supersymmetry somewhat related notions quadrangle subquadrangle deﬁned 30 discussed 20 A quadrangle single constraint c satisﬁed value assignments assign arbitrary value dom X variable X scopec Thus constraint relation relc quadrangle c simply consists Cartesian product domains An nary constraint c subquadrangle projection c n 1 fewer variables scopec quadrangle Generalizing notion deﬁne ksubquadrangle constraint projections k variables quadrangles In context Lemma 31 reformulated follows For k cid3 1 satisﬁable 3SAT instance C transformed satisﬁable SAT instance C ksubquadrangle solution relation solC 32 Intractability computing solutions The Symmetry Lemma proving main intractability result Theorem 31 For ﬁxed constant k cid3 2 NP P computing single solution minimal kary constraint network N polynomial time The problem remains intractable cardinality variabledomain bounded ﬁxed constant Proof We ﬁrst prove theorem k 2 Assume A algorithm computes time pn p polynomial solution AN nonempty minimal binary constraint network N size n We construct polynomialtime 3SATsolver A A The theorem follows G Gottlob Artiﬁcial Intelligence 191192 2012 4260 49 Let ﬁrst deﬁne simple transformation S SAT instances equivalent binary constraint networks S transforms conjunctions K K1 Kr clauses binary constraint networks SK N K follows The set variables varN K deﬁned varN K K1 Kr For variable K N K domain domK consists exactly literals appearing K For distinct pair clauses K K j j constraint ci j having scopeci j K K j relci j domK domK j p p p p p propvarK Moreover variable K unary constraint ci scope contains single variable K relci domK It easy K satisﬁable iff N K solvable Basically N K solvable iff pick literal clause set picked literals contains atom negation But equivalent satisﬁability K The transformation S clearly polynomialtime computable Now consider constraint networks NC SC T C In precise sense NC inherits high symmetry present C obtained transformation T Lemma 31 3SAT instance C C satisﬁable Lemma 31 pair cid51 cid52 noncontradictory literals satisfying assignment makes C satisﬁable constraint ci j pick pair cid51 cid52 relci j literals true Thus C solution pair useless Moreover C satisﬁable clearly value relations C satisﬁable MNC NC means unary constraint ci solution It follows C NC minimal We In fact C C If C satisﬁable NC nonempty minimal We ready specifying 3SATsolver A rithm A loss generality C clauses A illustrated ﬂowchart Fig 2 The input A works follows works polynomial time witnesses NP P Algo 3SAT input instance C We assume 1 Apply transformation T C C T C Note C supersymmetric C 2 Apply transformation S C NC SC satisﬁable C satisﬁable 3 Run A input NC pNC steps denote w output point satisﬁable iff C Note NC solvable C Note If C C unsolvable w string string solution NC satisﬁable NC solvable minimal network w solution NC NC 4 Check w solution NC 5 If w solution NC output C unsatisﬁable stop Note In fact w solution NC NC nonminimal By contrapositive Fact C unsatisﬁable 6 If w solution NC output C satisﬁable stop Note If w solution NC solvable C C satisﬁable Each step A polynomial p A requires polynomial time The polynomial runtime step 3 depends parametrically ﬁxed polynomialtime 3SAT solver The theorem k 2 follows Fig 2 Flowchart 3SATsolver A 50 G Gottlob Artiﬁcial Intelligence 191192 2012 4260 Note C constructed proof Theorem 31 9SAT instance cardinality domain variable NC bounded 9 For k 2 proof analogous main change transformation S creates cid5ary constraint cL constructed ordered set L cid5 cid2 k clauses C The resulting constraint network NC SC Lemma 31 job cid2 C 33 The case bounded domains Theorem 31 states problem computing solution nonempty minimal binary network intractable case cardinalities domains variables bounded constant However total domain domN set literals C cardinality unbounded This notwithstanding following simple corollary Theorem 31 shows case domN bounded computing single solution minimal network N hard Corollary 31 For ﬁxed k cid3 2 NP P computing single solution minimal kary constraint network N polynomial time case domN bounded constant Proof We prove result k 2 higher values k proof totally analogous The key fact exploit variable Ka NC proof Theorem 31 domain exactly elements corresponding literals occurring clause Ka C We standardize domains simply renaming literals variable numbers 1 9 We equivalent minimal constraint network total domain cardinality 9 cid2 4 Minimal network recognition structure identiﬁcation In section ﬁrst deal complexity recognizing kary network M minimal network kary network N Section 41 We study problem deciding kary network M minimal network single constraint Section 42 41 Minimal network recognition An algorithmic problem obvious relevance recognizing given network minimal Using graph theoretic characterization minimal networks described Section 2 Gaur 11 shown following binary networks Proposition 41 See Gaur 11 Deciding complete binary network N minimal NPcomplete Turing reduc tions We generalize Gaurs result kary case slightly strengthen showing NPcompleteness standard notion polynomialtime manyone reductions Theorem 41 For k cid3 2 deciding complete kary network N minimal NPcomplete case bounded domain sizes Proof Membership NP easily seen We need guess candidate solution st solN polyno mially tuples t constraint c N check polynomial time st effectively solution projection st scopec yields t For proving hardness revisit proof Theorem 31 For k cid3 2 3SAT instance C construct polynomial time highly symmetric kary network bounded domain sizes NC NC minimal MkNC NC iff C satisﬁable This clearly standard manyone reduction 3SAT network minimality cid2 A result database theory similar Theorem 41 shown 19 proven determining set database relations join consistent admits universal relation NPcomplete This actually proven sets binary relations schema Sk Here showed holds complete kary networks sets relations speciﬁc schemas Sk k cid3 2 42 Structure identiﬁcation krepresentability This section Sections 43 44 dedicated problem representing single constraints single constraint networks equivalent kary minimal networks By slight abuse terminology danger confusion identify singleconstraint network ρ unique constraint ρ tuples t relation relρ constraint ρ write t ρ instead t relρ G Gottlob Artiﬁcial Intelligence 191192 2012 4260 51 Deﬁnition 41 A complete kary network M minimal kary network ρ iff 1 solM ρ 2 tuple occurring constraint r M projection tuple t ρ scoper We constraint relation ρ krepresentable exists necessarily complete kary constraint net work M solM ρ The following proposition known follows easily Deﬁnition 41 Proposition 42 Let ρ constraint The following statements equivalent 1 ρ minimal kary network 2 solΠSk ρ ρ 3 ρ krepresentable Note equivalence ρ krepresentable ρ admitting minimal kary network emphasizes importance usefulness minimal networks In sense equivalence means minimal kary network ρ exists represents kary networks equivalent ρ The complexity deciding minimal kary network relation ρ exists stated open prob lem Dechter Pearl 9 More precisely Dechter Pearl consider equivalent problem deciding solΠSk ρ ρ holds refer problem problem structure identiﬁcation relational data 9 The idea identify class relations ρ structural property equivalent kary network ΠSk ρ krepresentable Dechter Pearl formulated following conjecture Conjecture 41 See Dechter Pearl 9 For ﬁxed positive integer k cid3 2 deciding solΠSk ρ ρ NPhard3 As observed Dechter Pearl 9 close relationship krepresentability constraint relations relevant database problem Let brieﬂy digress It common knowledge single constraint ρ identiﬁed data relation context relational databases cf 8 The decomposition relations plays important role database area particular context normalization 24 It consists decomposing relation ρ loss information smaller relations natural join yields precisely ρ If ρ concrete data relation relational instance S family subsets subschemas schema ρ decomposition ρ S consists projection ΠS Πsρ s S ρ schemes S This decomposition lossless iff natural join Πsρ yields precisely ρ equivalently iff ρ satisﬁes join dependency S We reformulate concept kdecomposability terms database theory follows A relation ρ kdecomposable iff satisﬁes join dependency Sk iff decomposition ρ schema Sk lossless The following complexity result shown early 1981 254 Proposition 43 See Maier Sagiv Yannakakis 25 Given relation ρ family S subsets schema ρ coNP complete determine ρ satisﬁes join dependency S equivalently decomposition ρ schema S lossless Proposition 43 weaker Conjecture 41 imply proof given 25 In fact Conjecture 41 speaks speciﬁc sets Sk k cid3 2 mentioned Proposition 43 proof Actually NPhardness proof 25 transforms 3SAT problem checking join pendency S schema S S1 Sm1 relation schemas Sm1 unbounded arity depending input 3SAT instance arity 4 To prove Conjecture 41 refers spe ciﬁc schema Sk relations arity k needed develop new independent hardness argument Theorem 42 For ﬁxed integer k cid3 2 deciding single constraint ρ solΠSk ρ ρ ρ kdecomposable coNPcomplete 3 Actually conjecture stated 9 somewhat weaker Given relation ρ integer k deciding solΠSk ρ ρ NPhard Thus k ﬁxed input instance However context use conjecture 9 clear Dechter Pearl actually intend NPhardness ﬁxed k cid2 2 4 As mentioned Dechter Pearl 9 Jeff Ullman proved result In fact Ullman request Judea Pearl aware speciﬁc result 25 produced totally independent proof 1991 sent private communication Pearl The result implicit Moshe Vardis 1981 PhD thesis 52 G Gottlob Artiﬁcial Intelligence 191192 2012 4260 Proof We deciding solΠSk ρ cid10 ρ NPcomplete Membership Membership NP follows Proposition 43 short proof sake self containment Clearly ρ solΠSk ρ Thus solΠSk ρ cid10 ρ iff containment proper means exists tuple t0 solΠSk ρ contained ρ One guess tuple t0 polynomial time check polynomial time cid5 cid2 k cid5tuple variables Xi1 Xicid5 varρ projection t0 Xi1 Xicid5 tuple corresponding constraint Sk Thus determining solΠSk ρ cid10 ρ NP Hardness We ﬁrst hardness binary case case k 2 We use NPhard problem 3COL deciding graph G V E set vertices V v 1 vn edge set E 3colorable Let G given input instance We assume loss generality G vertices Let r g b data values standing colors red green blue respectively Let N3COL constraint network deﬁned follows The set variables varN3COL X1 Xn The schema S 2 N3COL consists exactly binary scopes Xi X j Xi X j dom Xi r g b 1 cid2 cid2 n Moreover 1 cid2 j cid2 n constraint ci j schema Xi X j following constraint relation relci j ri j j E ri j set pairs representing legal vertex colorings ri j r g g r r b b r g b b g ri j r g b2 N3COL straightforward 2 obviously G 3colorable iff solN3COL cid10 Thus deciding solN3COL cid10 encoding 3COL schema S NPhard We construct N3COL single constraint ρ schema X1 Xn follows The domain domρ contains color constants r g b special tuple identiﬁers detailed For constraint ci j N3COL tuple b ri j ρ contains tuple t Xi X j values b respectively Xcid5 value 1 cid2 cid5 cid2 n cid5 cid10 cid5 cid10 j constant dt j different values tuples purpose act tuple identiﬁer This concludes description transformation 3COL instance G V E constraint network N3COL constraint ρ Clearly transformation feasible polynomial time We claim following Claim solΠS2 ρ cid10 ρ iff solN3COL cid10 iff G 3colorable This claim clearly implies NPhardness deciding solΠSk ρ cid10 ρ Let prove claim holds We start direction Assume solN3COL cid10 Then G V E 3colorable exists function f V r g b edge cid2v v jcid3 E f v cid10 f v j Let t tuple deﬁned 1 cid2 cid2 n t Xi f v Then deﬁnition t ρ 1 cid2 j cid2 n t Xi X j Π Xi X j ρ fort 1 cid2 cid2 n t Xi Π Xi ρ Therefore t solΠS2 ρ However t ρ tuple ρ unlike t tuple identiﬁers components It follows solΠS2 ρ cid10 ρ Let onlyif direction claim Assume solΠS2 ρ cid10 ρ Given noted ρ solΠS2 ρ exist tuple t0 solΠS2 ρ t0 ρ We t0 contain values r g b solution N3COL Assume tuple identiﬁer d dt j occurs component t0 By struction ρ d occurs precisely single tuple t ρ It follows relation ΠS2 ρ tuple containing d join relations ΠS2 ρ contains single tuple d occurs data value t Therefore t0 t t0 ρ contradicts assumption t0 ρ We shown t0 contain tuple identiﬁer color elements r g b However deﬁnition ρ tuple ti j r g b2 occurring relation schema Xi X j ΠS2 ρ occurs corresponding relation N3COL vice versa Thus solΠS2 ρ cid10 ρ iff solN3COL cid10 iff G 3colorable proves claim For ﬁxed k 2 apply exactly line reasoning We deﬁne Nk kCOL complete network variables X1 Xn kary correct coloring constraints relation schema Xi1 Xik expresses correct colorings vertices v i1 v ik graph G We deﬁne ρ similar way k 2 ktuple relation Nk kCOL extended use possibly multiple occurrences tuple identiﬁer ntuple ρ Given k ﬁxed ρ constructed polynomial time ΠSk ρ It readily seen tuple solΠSk ρ contains tuple identiﬁer present ρ tuple identiﬁer value d relation ΠSk ρ contains tuple involving d Hence tuple solΠSk ρ ρ involves values r g b solution kCOL valid 3coloring G cid2 Nk 43 The case bivalued relations Let turn attention bivalued relations ρ relations ρ binary domain As explained Sec tion 32 9 bivalued relations special correspond Boolean formulas For example 3CNF seen bivalued constraint network ternary relations single bivalued relation ρ corresponds DNF The problem structure identiﬁcation bivalued case corresponds relevant identiﬁcation learn ability questions Boolean formulas refer reader 9 details In context interesting know parameter k Theorem 42 carries bivalued case While coNPmembership clearly applies special case bivalued ρ hardness proof uses multiplevalued relation ρ allow derive hardness result bivalued case In fact relations ρ constructed proof The G Gottlob Artiﬁcial Intelligence 191192 2012 4260 53 orem 42 arbitrary 3COL instances bivalued actually unbounded domains domρ containing ρ 3 elements5 color constants r g b ρ tuple identiﬁers dt As noted 711 k 2 bivalued domains problem deciding solΠSk ρ ρ tractable It actually reduced 2SAT But values k cid3 3 Dechter Pearl following conjecture Conjecture 327 9 j Conjecture 42 See Dechter Pearl 9 For ﬁxed positive integer k cid3 3 deciding bivalued relation ρ solΠSk ρ ρ NPhard6 We able conﬁrm conjecture Theorem 43 For ﬁxed integer k cid3 3 deciding single bivalued constraint ρ solΠSk ρ ρ ρ kdecomposable coNPcomplete The involved proof theorem given Appendix B The hardness similar spirit Theorem 42 important changes requirement twovalued domain First encode 3SAT 3COL order achieve binary domain However problem tuple identiﬁers values dt j proof Theorem 42 They values unbounded domain We use speciﬁc bitvector encoding allows represent tuple identiﬁers binary format This totally trivial The diﬃculty lies fact relations projection ΠSk ρ longer bit vectors disposal kbit projections bit vectors Sophisticated coding tricks coping problem obtaining correct reduction Theorem 43 corollary formulate terminology Dechter Pearl 9 Corollary 41 For ﬁxed k cid3 3 class kCNFs identiﬁable relative CNFs P NP The means following If CNF φ generally Boolean function φ given set models bivalued relation tuple corresponds model NPhard decide φ equivalent kCNF We refer reader 9 detailed account kCNF identiﬁcation equivalence problem bivalued relation ρ kdecomposable To conclude topic let note representation Boolean function φ explicit set models satisfying truth value assignments known onset φ 32 The corollary states ﬁxed k cid3 3 NPhard decide Boolean function speciﬁed onset equivalent kCNF7 44 Further strengthening tractability frontier The technique prove Theorem 43 strengthen Theorem 42 actually holds trivalued constraints ρ Theorem 44 For ﬁxed integer k cid3 2 deciding single trivalued constraint ρ solΠSk ρ ρ ρ kdecomposable coNPcomplete The proof theorem given Appendix C We use transformation 3COL graph G V E described proof Theorem 42 applying addition similar vectorization techniques proof Theo rem 43 The result Theorem 43 fact 2representability binary networks feasible polynomial time 7 facts 0representability 1representability network krepresentability 1valued networks trivially tractable gives following precise characterization tractability deciding solΠSk ρ ρ Theorem 45 For class ivalued relations ρ deciding solΠSk ρ ρ tractable iff 1 2 k cid2 2 In cases problem coNPcomplete Fig 3 illustrates tractability frontier 5 Here ρ relρ designates number tuples constraint relation constraint ρ 6 Note 9 parameter k explicitly required ﬁxed context clear present stronger version conjecture actually intended Moreover Conjecture 327 9 formulated terms kCNFs purely relational setting To avoid additional deﬁnitions terminology restated equivalent relational formulation In particular replaced term MΓSk ρ original formulation equivalent term solΠSk ρ 7 While result literature Boolean functions totally exclude independently derived maybe different context different formalism 54 G Gottlob Artiﬁcial Intelligence 191192 2012 4260 Fig 3 Tractability Frontier kdecomposability ivalued relations ρ 5 Summary discussion future research In paper tackled solved long standing complexity problems related minimal constraint networks We solved open problem posed Gaur 11 1995 later Dechter 8 proving Dechters conjecture showing computing solution minimal constraint network NPhard We proved conjecture structure identiﬁcation relational data 1992 Dechter Pearl 9 In par ticular showed k cid3 2 coNPcomplete decide single constraint data relation ρ solΠSk ρ ρ ρ kdecomposable We proved reﬁned conjecture Dechter Pearl 9 showing problem remains coNPhard ρ bivalued constraint case k cid3 3 A consequence NPhardness identifying kCNFs relative class CNFs represented explicit enumeration models We ﬁnally proved deciding solΠSk ρ ρ coNPcomplete trivalued relations k cid3 2 Together results structure identiﬁcation allowed trace precise tractability frontier prob lem We wish clear hardness result computing solutions minimal networks mean think minimal networks useless To contrary convinced network minimality desirable property solution space needs eﬃciently represented applications computersupported conﬁguration 10 For example user interactively conﬁguring PC constrains relatively small number variables specifying maximum price minimum CPU clock rate desired hard disk type capacity The user wants quickly know solution exists wants For kary minimal constraint network satisﬁability queries involving k variables decided polynomial time However Theorem 31 states NP P case query satisﬁable way witness satisﬁability complete solution example exhibiting completely conﬁgured PC satisfying user requests Our Theorem 31 unveils certain deﬁciency minimal networks failure able exhibit solutions However strikingly simple proposal redressing deﬁciency Rather storing cid5tuples cid5 cid2 k kary minimal network MkN store solution t coincides k N harder obtain t cid5 variables t Call extended minimal network M MkN Moreover practical terms given known algorithms computing MkN N require check cid5tuple t occurs solution t ﬂy good tuple t k N polynomial factor varN larger size MkN One Note size M store single solution K best solutions according predeﬁned preference ordering values coincide t tuple t MkN This allows answer K queries k variables polynomial time MkN compiled An example 5 cheapest laptops fulﬁlling φ φ constrains k variables k N Complexitywise M cid5tuple t memorize t For practical applications optimal consider complete schemas Sk deﬁned In conference version 17 paper Sk deﬁned contain exactly kary relations given set variables kary relations It easy relations scopes fewer k variables redundant omitted obtained projections exactly kary relations The reason complete schemas present journal version wanted use exactly deﬁnition standard references 268 However liberal deﬁnitions possible For example Lecoutre 22 deﬁnes constraint network N arbitrary schema S minimal N ΠS solN Clearly complexity bounds carry liberal setting lower bounds directly inherited instances settings instances liberal setting upper bounds obtained trivial adaptation proofs existing upper bounds k N An interesting problem future research following We issue queries following form M SELECT A SOLUTION WHERE φ Here φ Boolean combination constraints variables N Queries φ simple combination range restrictions k variables answered polynomial time But complicated queries answered eﬃciently example queries involve aggregate functions k N andor reuse quantiﬁed variables It nice useful identify large classes queries M single solution exists polynomial time Another relevant research problem related projection ΠS solN solution solN necessarily distributed constraint binary constraint network N userdeﬁned schema S use schema S G Gottlob Artiﬁcial Intelligence 191192 2012 4260 55 solving The projection solution space speciﬁc sets variables context conﬁguration jointly conﬁgured number engineers having access projection solution space 33 The problem computing solution ΠS solN generally NPhard remains NPhard special S2 Theorem 31 We like investigate relevant restrictions cases N binary time S problem tractable For restrictions known For example S bounded hypertree width 16153 problem tractable If S bounded hinge width computing solution backtrackfree manner Section 3 18 Note bounded hinge width stronger restriction bounded hypertree width comparison hypergraph restrictions 14 Other decompositions lead backtrack solution search worldset decompositions discussed 28 generalized 29 These decompositions based Cartesian products joins computing solutions easier projectjoin decompositions There problem computing desired projections computing possibly large relation solN special case computing minimal constraint network MN given network N More formally like compute ΠS solN N polynomial space eﬃciently possible assuming relations S bounded arity There promising approaches problem literature In 1213 conﬂictdriven answer set programming ASP techniques task In 33 projections solN computed SAT solver shown method feasible large datasets stemming automotive industry However expect structural analysis original network N desired projection schema S help speed computation Acknowledgements This research originally stimulated discussions aspects constraint solving pruning Donald Knuth paper dedicated warmest congratulations 75th birthday Work funded EPSRC Grant EPG0551141 Constraint Satisfaction Conﬁguration Logical Fundamentals Algorithms Complexity The author James Martin Senior Research Fellow He thanks V Bárány C Bessiere D Cohen R Dechter D Gaur J Petke M Vardi M Yannakakis S Živný referees conference journal version useful comments andor pointers earlier work Appendix A Proof Symmetry Lemma Lemma 31 Symmetry Lemma For ﬁxed integer k cid3 1 polynomialtime transformation T transforms 3SAT instance C ksupersymmetric instance C C satisﬁable iff C satisﬁable Proof We ﬁrst prove lemma k 2 Consider given 3SAT instance C Create propositional variable p set disjunctions p propvarC set Newp p1 p2 p3 p4 p5 fresh propositional variables Let Disj p set disjunctions distinct negative literals distinct positive atoms Newp let Disj p Note corresponding atoms Newp Thus example p2 p4 p5 Disj 10 elements distinguish syntactic variants equivalent Disj clauses containing literals p p1 p4 p5 Disj p exactly p Disj cid3 5 3 cid4 Consider following transformation T eliminates original literals C yielding C cid14 C Function T BEGIN C WHILE propvarC propvarC cid14 cid10 DO pick p propvarC propvarC cid14 OutputC END cid14 C cid14 elimC cid14 p Here elimC cid14 p obtained C cid14 p follows FOR clause K C cid14 p occurs positively negatively DO BEGIN let δ disjunction literals K different p p8 p occurs positively K replace K C p occurs negatively K replace K C α Disj END p cid14 conjunction Γ K clauses form α δ α Disj p conjunction Γ K clauses form α δ cid14 8 An δ equal false understood α false simply α 56 G Gottlob Artiﬁcial Intelligence 191192 2012 4260 Let C T C ﬁnal result T C contains original variable propvarC Note C polynomial time C In fact note clause literals C gives rise exactly clauses 9 literals C C replace threeliteral clause C independently corresponding 1000 clauses Similar direct replacements fewer result clauses course possible twoliteral oneliteral clauses C Assuming appropriate data structures transformation C C actually linear time We need prove 1 C satisﬁable iff C 2 C 2supersymmetric While computing C computed cid3 5 3 cid43 103 1000 Fact 1 C shows satisfying assignment C transformed satisfying assignments C come prove supersymmetry Fact 2 We prove Fact 1 showing step algorithm T C cid14cid14 C transformed value C Then let τ cid14cid14 Assume C variables C satisﬁable iff C We actually prove need In fact proof Fact 1 We use satisfactionequivalent Fact 1 follows induction truth value assignment propositional cid14 p C cid14 satisﬁed truth value assignment τ cid14 following properties cid14cid14 elimC cid14cid14 cid14 cid14 cid14cid14 propositional variable q C τ cid14p true 3 variables Newp set true τ cid14cid14 τ cid14p false variables Newp set true τ cid14cid14 different p τ cid14cid14q τ cid14q set false cid14cid14 cid14cid14 τ cid14cid14 satisfy C By deﬁnition C Then given variables Newp set true τ cid14cid14 true τ cid14cid14 clauses C literals truth values clauses true In summary clauses C similar way shown τ cid14cid14 In fact assume ﬁrst τ cid14p true Let K clause C p occurs positively p atom All clauses C stem true literals corresponding atom q different p But deﬁnition τ In clauses Γ K C evaluates true τ cid14cid14 satisﬁed τ cid14cid14 τ cid14p false element Disj satisﬁes C cid14cid14 cid14cid14 cid14cid14 cid14cid14 cid14 Vice versa assume truth value assignment τ cid14cid14 cid14cid14 satisﬁed deﬁned follows If majority 3 ﬁve atoms Newp let τ cid14p true let τ cid14p false propositional variables q Newp let Then hard C satisﬁes C C cid14 cid14 truth value assignment τ cid14 true τ cid14cid14 τ cid14q τ cid14cid14q To τ cid14 cid14 cid14 cid14 cid14cid14 satisﬁes C sets Γ K If τ cid14cid14 contain p p trivially satisﬁed τ cid14 consider ﬁrst case propositional variables Newp assigned true τ cid14cid14 coincide Note clauses C p occurs positively Then clauses contain positive atoms Now let consider clause K C occurrences elements Newp C makes ﬁve atoms Newp true clause Γ K true atoms Newp Thus replacing atoms p assigning p true resulting clause K remains true Now consider clause K p δ C p occurs negatively Γ K Recall assumed The clauses containing negative Newpliterals C τ cid14cid14 satisﬁes distinct atoms Newp Let satisﬁed atoms pi p j pk By deﬁnition Γ K contains clause form pi p j pk δ Given clause satisﬁed τ cid14cid14 falsiﬁes pi p j pk δ satisﬁed τ cid14cid14 Therefore K p δ satisﬁed τ cid14 This concludes case propositional variables Newp assigned true τ cid14cid14 The case propositional variables Newp assigned false τ cid14cid14 completely symmetric settled totally similar way cid2 δ contains Newpliterals δ satisﬁed τ cid14 deﬁnition C τ cid14cid14 τ cid14cid14 τ cid14 cid14cid14 cid14cid14 cid14 2supersymmetric Assume C 1 cid2 j cid2 5 construction τ satisﬁable truth value assignment τ satisﬁable truth value assignment η Then C satisﬁable Fact 2 Proof C truth value assignment τ C constructed inductively described proof Fact 1 Let closer look inductive construction obtain τ Fact 1 For initially ﬁxed pair propositional variables pi q j propvarC gives large degree freedom choosing τ Actually construction general allows let pi q j arbitrary truth value assignment possible joint truth value assignments In fact choose truth value assignments variables p1 p5 q1 q5 ﬂexibility assigning remaining variables set truth values ensure majority variables truth value required proof Fact 1 representing original truth value p τ cid14 This holds case p q variable want force elements p1 p5 truth values second example Let examples illustrate characteristic cases consider First assume p q distinct τ satisﬁes p falsiﬁes q We like construct example truth value assignment τ requirements Newp Newq variables Newp need satisﬁed τ Newq need satisﬁed τ For instance set τ p1 τ p3 τ p4 τ p5 true τ p2 false τ q1 τ q2 τ q3 τ q5 false τ q4 true This achieves desired truth value assignment p2 q4 An extension satisfying truth value assignment τ guaranteed Now falsiﬁes p2 simultaneously satisﬁes q4 In constructing τ C G Gottlob Artiﬁcial Intelligence 191192 2012 4260 57 second example assume τ p false like τ p1 τ p2 simultaneously true truth value assignment satisfying C atoms Newp assigned true Here single option set τ p1 τ p2 true τ p3 τ p4 τ p5 false This option works perfectly assigns desired truth values p1 p2 In summary C 2supersymmetric cid2 Note case requirement Newp construction τ The proof k 2 totally analogous following modiﬁcations Instead creating propositional variable p propvarC set Newp p1 p2 p5 ﬁve new variables create set Newp p1 p2 p2k1 2k 1 new propositional variables The set Disj p deﬁned set disjunctions k 1 positive atoms Newp Similarly Disj p deﬁned set disjunctions k 1 negative literals obtained negating atoms Newp We replace numbers 2 3 k k 1 respectively We note threeliteral clause C replaced longer 3k 1SAT instance We note resulting clause set C cid43 cid3 5 3 clauses cid43 cid3 2k1 k1 clauses It easy proofs Fact 1 Fact 2 modiﬁcations Finally let recall 2supersymmetric SAT instance trivially 1supersymmetric settles theorem k 1 cid2 Appendix B Proof Theorem 43 Theorem 43 For ﬁxed integer k cid3 3 deciding single bivalued constraint ρ solΠSk ρ ρ ρ kdecomposable coNPcomplete Proof It suﬃces coNPhardness membership coNP follows Theorem 42 We ﬁrst prove coNP hardness case k 3 Consider nonempty 3SAT instance C C1 Cm set propvarC p1 pn propositional variables Ci clause containing precisely 3 literals corresponding atoms mutually distinct cid4 cid4 Let ﬁrst deﬁne numbers r0 r C meaning use clear later Let r0 denote number 3element sets pa pb pc mutually distinct propositional variables pa pb pc propvarC cid3 jointly appear clause C Note r0 cid2 8 Let r 7m r0 Clearly r polynomially bounded n cid3 3 size C r cid2 7m 8 n 3 We construct polynomial time bivalued constraint ρ r elements solΠSk ρ cid10 ρ iff C satisﬁable The scope scopeρ ρ contains pi propvarC list r 1 variables X 0 Intuitively tuple t relρ 1 cid2 cid2 n values assigned variables X 0 shall encode truth value assignment pi case variables list assigned value zero values shall encode tuple identiﬁer tuple occur A tuple identiﬁer sth tuple relρ assigns value zero X j cid3 s This formal j cid2 s value X The constraint relation relρ consists groups tuples X r X r X 1 X 1 j j j j h j h X r X 0 X 1 t t τ jpi Moreover pi propvarC propvarCh t Clauseinduced tuples These 7m tuples seven clause Ch 1 cid2 h cid2 m These tuples numbered 1 7m Each tuples describes 7 legal truth value assignments 8 possible propositional variables clause Ch C For clause Ch 1 cid2 h cid2 m truth value assignment τ j propvarCh 0 1 7 permitted truth value assignments propositional variables Ch h components described follows For pi propvarCh 1 cid2 j cid2 7 relρ contains precisely tuple t j j X 2 0 t t h h X r assignments X 1 encodes tuple number s tuple t cid14 s 1 variables X s 0 cid2 s h s 7h 1 j simple way It assigns 0 X s s cid2 s cid4 cid3 n Auxiliary tuples These 8 3 tuples 3element set pa pb pc mutually distinct propo sitional variables pa pb pc propvarC jointly appear clause C These auxiliary tuples numbered 7m 1 r r cid2 7m 8 total number tuples ρ Essentially auxiliary tuples associated sets pa pb pc encode truth value assignments σ1 σ8 propositional variables pa pb pc These tuples encode effective constraints reﬂect arbitrary truth value assignment pa pb pc needed technical reasons More formally set S pa pb pc truth value assignment σ pa pb pc relρ contains tuple tσ S jointly constitute unique tuple identiﬁer exclusively appears tuple t j h cid14 cid14 cid2 r X 0 cid3 n 3 j h cid4 j cid14 58 G Gottlob Artiﬁcial Intelligence 191192 2012 4260 components described follows For pi S tσ S pi propvarC S tσ X 0 S identiﬁer exclusively appears tuple tσ X s cid14 s 1 variables X s cid14 s 0 assignments X 1 X 0 tσ S X 2 tσ S tσ X 1 σ pi Moreover X r s X r jointly constitute unique tuple S assigning 0 S encodes tuple number s tuple tσ cid14 s cid14 cid3 s This concludes deﬁnition ρ Claim solΠS3 ρ cid10 ρ iff C satisﬁable We ﬁrst prove ifpart claim Assume C satisﬁable Thus exists truth value assignment τ propvarC b X w satisfying C We solΠS3 ρ contain tuple t relρ deﬁned follows For 1 cid2 cid2 n t X 0 t X 1 distinct variables scopeρ contained corresponding relation ΠS ρ ΠS3 ρ τ pi To suﬃces observe projection tS t set S X u t X r t X 2 In fact atoms pa pb pc jointly occur clause Ch C tuple t relρ induced Ch cid14S tS Hence truth value assignment τ pa pb pc coincides Scomponents tuple t terms t tS contained relation ΠS ρ ΠS3 ρ Moreover case pa pb pc jointly occur clause C cid14S tS tS contained relation ΠS ρ exist auxiliary tuple t ΠS3 ρ In summary t contained join exactly ternary relations ΠS3 ρ As easily veriﬁed binary unary relations ΠS3 ρ weaker ternary ones actually redundant join constraints precisely variables fact equal solΠS3 ρ It follows t contained join ΠS3 ρ solΠS3 ρ However t relρ t contain tuple identiﬁer tuple relρ t X v It remains solΠS3 ρ contains tuple t relρ t corresponds satisfying truth value assignment C C satisﬁable Let t tuple We ﬁrst 1 cid2 cid2 n 1 cid2 v cid2 r 1 cid2 w cid2 r hold t X v equal We prove X 1 showing bitvector consecutive bits different value bits t X 0 t X w X r c cid14 cid14 0 t X cid5 1 tuple numbered cid5 Therefore relation relc constraint c 0 j single tuple fc having fc X cid51 1 By construction relρ contains single tuple t variable X u X cid5 cid14 cid14 X cid5 cid14 X cid51 Assume 0 cid5 cid2 r t X cid51 0 t t ΠS3 ρ scopec contains X cid51 fc X cid5 tuple t Therefore t t Assume 0 cid5 cid2 r t X cid51 t single tuple t cid14 X 0 X 1 sequences t ΠS3 ρ scopec contains X cid51 f X cid5 Contradiction cid14 X cid51 X r cid14 cid14 1 It follows solΠS3 ρ contains unique tuple X cid51 value zero X cid5 value cid14 contradicts assumption t relρ 1 t X cid5 cid14 X cid5 0 Observe construction relρ contain 1 t 0 In fact relρ carefully constructed bit values decrease tuples Therefore relation relc constraint c 1 X cid5 0 It follows join solΠS3 ρ contains tuple X cid51 variable X u j tuple f having f X cid51 value X cid5 value zero We established 1 cid2 cid2 n bits t X 0 1 cid2 cid2 n associates pi truth value t X 0 Ch pa pb pc Deﬁne X 1 X r t X 1 equal Let τ truth value assignment Let Ch clause C Let atoms t X r Xa X 0 Xb X 0 b Xc X 0 c τ pa 1 Xa X r τ pb 1 Xb X r b τ pc 1 Xc X r c τ pa 0 τ pb 0 τ pc 0 Consider constraint q ΠS3 ρ having cid2 Xa Xb Xccid3 scope This constraint tuple tq cid2τ pa τ pb τ pccid3 obviously identical t Xa Xb Xc There tuple t cid6 cid5 τ pa τ pb τ pc cid14Xa Xb Xc t cid14 relρ belong group Given speciﬁc values positions Xa Xb Xc t induced precisely clause Ch truth value assignment τ pa pb pc clauseinduced tuples speciﬁcally t To let ﬁrst recall encoding tuple identiﬁer ﬁrst bit bit 0 0 bit bit r 1 case encoding truth value Now consider τ pa If τ pa 0 t Xa t value zero bit r tuple identiﬁer 1 Therefore Xa representation truth value assignment Similarly τ pa 1 t Xa t tuple tuple identiﬁer t Xa identical t X r easily seen tuple t 1 If Xa X 0 0 If Xa X r cid14 Xa t cid14 Xa t cid14 X 0 cid14 X r cid14 cid14 cid14 G Gottlob Artiﬁcial Intelligence 191192 2012 4260 59 identiﬁer t Xa value tuple identiﬁers value zero bit position index zero Therefore Xa representation truth value assignment Exactly reasoning applies tuple ρ exactly describes truth value assignment τ restricted Xb Xc In summary t propositional variables pa pb pc Given propositional variables jointly occur clause Ch t clause induced tuple τ legal truth value assignment satisﬁes Ch Given Ch arbitrary clause C τ satisﬁes clauses C C satisﬁable We k 3 The proof easily modiﬁed hold larger ﬁxed value k It suﬃces example start kSAT instead 3SAT The proof goes obvious adjustments numeric parameters cid2 cid14 cid14 Appendix C Proof Theorem 44 Theorem 44 For ﬁxed integer k cid3 2 deciding single trivalued constraint ρ solΠSk ρ ρ ρ kdecomposable coNPcomplete Proof For constants k membership coNP decision problem covered upper bound Theorem 42 Moreover coNPhardness k cid3 3 proven Theorem 43 bivalued relations trivially kvalued relations additional k 2 values appear domains actual constraint relations Thus remains prove coNPhardness k 2 We use transformation 3COL graph G V E described proof Theorem 42 applying similar vectorization techniques proof Theorem 43 In particular consider relation ρ obtained 3colorability network N3COL hardness proof Theorem 42 let s ρ cardinality ρ Rather transforming N3COL graph G ρ transform trivalued constraint ρ cardinality s closely resembles ρ To aim 1 cid2 cid2 n scope variable Xi N3COL ρ replaced block s 1 variables X 0 encodes color r g b tuple identiﬁer We use following encoding X s Color red encoded block consisting s 1 consecutive positions having value r Color green encoded block consisting s 1 consecutive positions having value g Color blue encoded leading b assignment X 0 followed block containing s consecutive positions having value r The tuple identiﬁer tuple number d block length s 1 starting sequence r elements followed g elements In terms tuple identiﬁer having b position corresponding X d sequence length s 1 form r r b g g d 1st component b The new relation ρ cid3 cid4 cid3 scope ρ domρ r g b 1 X 1 X 0 1 X s 1 X 0 2 X 1 2 X s 2 X 0 n X 1 n X s n cid4 Claim G 3colorable iff solΠS2 ρ relρ nonempty solΠS2 ρ relρ vectorized component t X 0 color τ v The ifpart hard construction In fact correct graph coloring τ gives rise tuple t representing vertex v consists encoding X s Let prove onlyif Assume exists tuple t solΠS2 ρ relρ We similar arguments proof Theorem 43 G 3colorable This shown following successively derived facts 1 Tuple t value b X assignment occur single tuple t ΠS2 ρ scopec contains X cid5 relations ΠS2 ρ contains single tuple having X cid5 contradiction j cid14 component j cid10 0 In fact b assigned variable X cid5 cid5 cid10 0 relρ Therefore relation relc constraint c b But means join cid14 relρ contain single tuple having X cid5 But imply t t b t cid14 2 No pair consecutive values block t X 1 1 cid2 cid2 n coincide rg gr In fact construction X cid51 relρ cid5 cid3 1 rg gr occur consecutive values consecutive columns labeled X cid5 Therefore relation relc constraint c ΠS2 ρ scope X cid5 cid5 cid3 1 contains tuple rg tuple gr It follows join solΠS2 ρ contain tuple having rg tuple gr consecutive components cid5 cid3 1 Given t solΠS2 ρ follows corresponding variables attributes X cid5 tuple t X cid51 X cid51 X s entirely value r g This follows 3 For 1 cid2 cid2 n block t X 1 X s immediately Facts 1 2 60 G Gottlob Artiﬁcial Intelligence 191192 2012 4260 X s 4 For 1 cid2 cid2 n block values t X 0 precisely encodes colors red green blue according g r b t X 1 r t X 0 g This shown way Fact 2 By construction ρ property holds ΠS2 ρ Therefore property encoding scheme To suﬃcient 1 cid2 cid2 n t X 1 t X 0 tuple ρ constraints scope X 0 hold tuple join solΠS2 ρ ΠS2 ρ particular t r Xa X 0 5 For edge cid2va vbcid3 E blocks t X 0 t X 0 Similarly deﬁne Xb X s represent different colors To deﬁne Xa X s r Xb X 0 b Let q constraint ΠS2 ρ scopeq Xa Xb Clearly t Xa Xb q Xa Xb Thus tuple cid14 relρ t Xa Xb t cid14 Xa Xb However particular valueposition combinations t cid14 Xb tuple identiﬁer jointly represent legal coloring edge cid2va vbcid3 cid14 Xa t t G Since true edges cid2va vbcid3 G edges G correctly colored coloring expressed tuple t b X s X s b X 0 X 0 X 1 b b Therefore G 3colorable This concludes proof onlyif claim proof theorem cid2 References 1 Samson Abramsky Relational databases Bells theorem submitted publication 2 Samson Abramsky Relational hidden variables nonlocality Studia Logica press 3 Isolde Adler Georg Gottlob Martin Grohe Hypertree width related hypergraph invariants European J Combin 28 8 2007 21672181 4 Christian Bessiere Constraint propagation F Rossi P van Beek T Walsh Eds Handbook Constraint Programming Chapter 3 2006 5 Marco Cadoli Francesco M Donini A survey knowledge compilation AI Commun 10 34 1997 137150 6 Hervé Cros Compréhension et apprentissage dans les résaux contraintes PhD thesis Université Montpellier 2003 cited 4 currently unavail able 7 Rina Dechter From local global consistency Artiﬁcial Intelligence 55 1 1992 87108 8 Rina Dechter Constraint Processing Morgan Kaufmann 2003 9 Rina Dechter Judea Pearl Structure identiﬁcation relational data Artiﬁcial Intelligence 58 1992 237270 10 Gerhard Fleischanderl Gerhard Friedrich Alois Haselböck Herwig Schreiner Markus Stumptner Conﬁguring large systems generative constraint satisfaction IEEE Intell Syst 13 4 1998 5968 11 Daya Ram Gaur Algorithmic complexity constraint satisfaction problems Master Science MSc Thesis Simon Fraser University April 1995 currently available httpsummitsfucasystemﬁlesiritems16666b17427204pdf 12 Martin Gebser Benjamin Kaufmann André Neumann Torsten Schaub Conﬂictdriven answer set enumeration Chitta Baral Gerhard Brewka John S Schlipf Eds LPNMR Lecture Notes Comput Sci vol 4483 Springer 2007 pp 136148 13 Martin Gebser Benjamin Kaufmann Torsten Schaub Solution enumeration projected boolean search problems Willem Jan van Hoeve John N Hooker Eds CPAIOR Lecture Notes Comput Sci vol 5547 Springer 2009 pp 7186 14 Georg Gottlob Nicola Leone Francesco Scarcello A comparison structural CSP decomposition methods Artiﬁcial Intelligence 124 2 2000 243282 15 Georg Gottlob Nicola Leone Francesco Scarcello Hypertree decompositions A survey Jiri Sgall Ales Pultr Petr Kolman Eds MFCS Lecture Notes Comput Sci vol 2136 Springer 2001 pp 3757 16 Georg Gottlob Nicola Leone Francesco Scarcello Hypertree decompositions tractable queries J Comput System Sci 64 3 2002 579627 17 Georg Gottlob On minimal constraint networks Jimmy HoMan Lee Ed CP Lecture Notes Comput Sci vol 6876 Springer 2011 pp 325 339 18 Marc Gyssens Peter Jeavons David A Cohen Decomposing constraint satisfaction problems database techniques Artiﬁcial Intelligence 66 1 1994 5789 19 Peter Honeyman Richard E Ladner Mihalis Yannakakis Testing universal instance assumption Inform Process Lett 10 1 1980 1419 20 Chris Houghton David A Cohen Solution equivalent subquadrangle reformulations constraint satisfaction problems Peter van Beek Ed CP Lecture Notes Comput Sci vol 3709 Springer 2005 p 851 21 Henry A Kautz Bart Selman A general framework knowledge compilation Harold Boley Michael M Richter Eds PDK Lecture Notes Comput Sci vol 567 Springer 1991 pp 287300 22 Christophe Lecoutre Constraint Networks Techniques Algorithms John Wiley Sons 2009 23 Alan Mackworth Eugene Freuder The complexity polynomial network consistency algorithms constraint satisfaction problems Artiﬁcial Intelligence 25 1 1985 6574 24 David Maier The Theory Relational Databases Computer Science Press 1983 25 David Maier Yehoshua Sagiv Mihalis Yannakakis On complexity testing implications functional join dependencies J ACM 28 4 1981 680695 26 Ugo Montanari Networks constraints Fundamental properties applications picture processing Inform Sci 7 1974 95132 27 Ugo Montanari Francesca Rossi Fundamental properties networks constraints A new formulation L Kanal V Kumar Eds Search Artiﬁcial Intelligence 1988 pp 426449 28 Dan Olteanu Christoph Koch Lyublena Antova Worldset decompositions Expressiveness eﬃcient algorithms Theoret Comput Sci 403 23 2008 265284 29 Dan Olteanu Jakub Zavodny Factorised representations query results Proc International Conference Database Theory ICDT 2012 Berlin Germany March 2630 2012 30 Robert Rodošek A new approach solving 3satisﬁability Jacques Calmet John Campbell Jochen Pfalzgraf Eds Artiﬁcial Intelligence Sym bolic Mathematical Computation Lecture Notes Comput Sci vol 1138 Springer Berlin Heidelberg 1996 pp 197212 31 Edward Tsang Foundations Constraint Satisfaction Academic Press 1993 32 Christopher Umans Tiziano Villa Alberto L SangiovanniVincentelli Complexity twolevel logic minimization IEEE Trans ComputAided Des Integr Circuits Syst 25 7 2006 12301246 33 Alexey Voronov Knut Åkesson Fredrik Ekstedt Enumeration valid partial conﬁgurations K Shchekotykhin D Jannach M Zanker Eds Pro ceedings IJCAI 2011 Workshop Conﬁguration Barcelona Spain July 16 2011 CEUR Workshop Proc vol 755 2011 paper 04 available httpceurwsorgVol755paper04pdf