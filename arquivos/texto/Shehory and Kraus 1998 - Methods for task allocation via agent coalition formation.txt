Artificial Intelligence 101 1998 i65200 Artificial Intelligence Methods task allocation agent coalition formation Onn Shehory Sarit Kraus b3c The Robotics Institute CarnegieMellon Universiv 5000 Forbes Ave Pittsburgh PA 15213 USA b Department Mathematics Computer Science Bar Ilan University Ramat Gun 52900 Israel Institute Advanced Computer Studies University Maryland College Park MD 20742 USA Received 17 April 1997 received revised form 7 April 1998 Abstract require environments multiagent Task execution perform necessary group agents task Task allocation agents form coalitions single agents performance tasks performed single agent However cooperation satisfy consider agents Given set situations task agents set tasks groups attached agents In beneficial groups perform efficiently respect problem task allocation autonomous agents paper present solutions suggest efficiency performance We present efficient distributed algorithms low ratio bounds low computational complexities These properties proven theoretically supported simulations agent Our methods based algorithmic aspects implementation combinatorics agent coalition formation agent member coalition Next present domain overlapping coalitions We proceed discussion domain tasks precedence order Finally discuss open dynamic agent lead agents formation coalitions For case provide algorithm coalition simple efficient easy implement 0 1998 Published Elsevier Science BV All rights reserved assigned task Our algorithms anytime algorithms NPhard problems We present approach case implementation order perform approximation tasks improve algorithms Keyor Multiagent cooperation Coalition formation Task allocation This material based work supported NSF grant No IRi9423967 results research published Army Research Lab contract No DAAL0197K0135 proceedings IJCAI95 ICMAS96 Preliminary Corresponding author Email Onn_Shehoryursacimdsricmuedu 00043702981900 PII SOOO4370298000459 0 1998 Published Elsevier Science BV All rights reserved 166 0 Shehory S KrausArtijTcial Intelligence 101 1998 165200 1 Introduction Autonomous agents multiagent environments need cooperate order fulfill tasks Given set tasks satisfied consider situations task assigned group agents perform tasks exist competing execution precedence order The allocation tasks groups agents necessary tasks performed inefficiently Various groups agents single agents single agents perform different degrees efficiency task performance differing capabilities members Task allocation We address cases dependencies requirements respect differences resources The purpose allocation tasks groups agents maximize benefits agents solution Hence performance We seek algorithm central authority A low computational important property enable coalitions For development algorithmic methods distributed computing paper We concentrate necessarily approach concepts algorithms operations beneficial coalition 112 I superadditive artificial enable distributed task allocation form groups assign task group We groups paper present algorithms shall considered complexity required algorithms combine combinatorial systems methods The coalitions systems cooperative formation research autonomous agents agents form agents environments DAI solving Distributed intelligence tries increase MAS agent concerned problem formation problem suggested researchers 284464 Most solutions given coalition agents superadditive formation Multi personal utility case MAS common outcome coalition members We present coalition agents interact order execute tasks During past years solutions coalition field DAI These solutions concentrate special case autonomous environment Agent Systems cooperation One main problems coalition distribute Distributed Problem Solving DPS 6 formation algorithms appropriate cases agents cooperate overall outcome 45 concerned personal payoffs MAS In cases MAS In addition disbursements Since case super solution formation process additive environment non DPS systems In superadditive realistic costly 4 size cases addition new agent coalition superadditive environment agents important shall simple Conversely case challenging expected 3 coalition superadditive order increase grand coalition restricted environments environment formation t In superadditive details Section 3 environment combination groups agents new group beneficial For 2 Recently DPS agent systems referred 3 A grand coalition coalition includes agents 43 cooperative MAS 52 4 Such costs arise intracoalition coordination communication costs increase size coalition 0 Shehory S Kraus Artificial Intelligence 101 1998 165200 167 coalition increases appropriate nonbeneficial nonsuperadditive cases form We suggest solution problem intend We begin illustrating basic definitions problems solve Section 2 Then environment deal Section 3 We briefly Section 31 set covering set Sections 4 5 Section results analysis Section 9 discuss open MAS Related research brief description present partitioning ratio bounds discussed 7 Section 8 contains requirements referred Section 10 Section 11 ends paper discussion conclusions properties implementation Section 6 complexity Section 32 The algorithms assumptions simulation described analyzed 2 Illustration problem paper The problem solve task allocation benefits satisfying groups agents DPS Given set tasks seek autonomous tasks 5 We consider cases tasks maximization tasks precedence order We assume central authority agents Therefore seeking maximal outcome This achieved formation coalitions possibly overlapping ones distributes task allocation shall reach efficient Initial configuranon mi Final configuration Schema I 5 Ideally tasks satisfied attempting maximize benefits execution tasks hindered 168 0 Shehmy S Kraus Artificial Intelligence lOll998 165200 We demonstrate problem Blocks World domain Schema 1 The blocks sizes simplicity consider case unit block row attached unitblocks Each unitblock weighs weightunit The blocks moved final configuration This group agents initial configuration capable lifting limited weight 2 weightunits aside necessary Each block carried limited number agents physical limitations We discuss planning problem assume previously provided plan This plan shall divide goal subgoals precedence order Such subgoals Schema 2 In subgoal global plan presented place block C blocks A B properly located In addition cooperation agents necessary Block C lifted agent However 4 agents efficiently coordination costs 20 far Obviously member group places C member group places A B However performing agents limited fuel cease functioning working groups set tasks moving Subgoal Schema 2 blocks A I B1 CI subgoal IIlocate subgoals For instance The global goal partitioned subgoals subgoal Ilocate IIIlocate blocks partition AZ B2 C2 subgoal block C3 Each subgoals performed coalition agents subgoal III performed subgoals I II perform subgoal I Cr subgoal II Ctt performed Members coalitions members coalition members Ct members Cn vice versa However efficiency performance subgoals This enable performance subgoals I II simultaneously coordination avoiding intracoalitional I II Ct Ctt common members saving time arises larger coalitions III It possible performs subgoal increase overhead Another example problem transportation plies transportation services autonomous company 6 The company sup trucks lift trucks automated 6 Transportation systems extensively examples DPS systems 41 We intend reader familiar problem However provide example solve specific transportation 0 Shehory S KrausArtifcial Intelligence 101 1998 165200 169 cranes boats planes refer agents This usually arranged distributed manner single agent perform limited tasks The agents differ capabilities That differ type actions perform size volume weight goods carry time transporta tion speed costs method performed There occasions agents perform given transportation In cases task agents shall form groups group agents operation cooperatively task We cooperating groups coalitions perform tasks Some tasks performed Some coalitions unable tasks satisfied prior performance Among able perform given task efficiency costs completely different necessary Therefore fulfill transportation coalitions regulations Therefore For example suppose task taking 10 passengers Mirabel airport Dorval airport Montreal ordered This performed private cars case probably cost single helicopter However helicopter time flight private cars approximately constraints case coalition private cars This coalition shall consists optimal number cars number passengers An excess agents coalition costly coalition members This costs formation communication function size coalition maintenance These costs increasing coalition In case disjoint coalitions overhead agents coalition prevent formation beneficial coalitions reduce total outcome appropriate coalition internal organization coordination The transportation task allocation mechanism centralized advantageous formation costly time computational company agents central authority efforts Using dis coalition tributed shall decided discussed Section 7 In cases task allocation benefits Therefore locally However company seeks maximization bring company future immediate profit satisfy clients important Since single agent satisfy clients order close cooperation necessary For cases company shall provide agents simple efficient algo rithm enable formation coalitions agents orders mainly companys satisfy beneficial cooperation shall attempt transportation The problem transportation paper We provide al gorithms enable allocation tasks agents formation coalitions We algorithms simple implement short runtime realtime method yield results close optimal results generalized company 3 Environment description In order elucidate notations definitions concepts We assume problem solution briefly present general negotiate agents communicate 170 0 Shehory S KrausArtcial Intelligence 101 1998 165200 require 59 Communications time effort agreements agents We assume resources transferred agents This ability help agents form beneficial coalitions Agreement cooperation reached assumption goods transferability beneficial coalitions To emphasize deal assume expanding coalitions nonbeneficial Without coalition coalition beneficial costly grand consists formed coalitions property environment coalition nonsuperadditivity addition agents valid 122962 However possibility sidepayments help agents form alternatively assumption 31 Definitions We recall following definitions presented 4546 There set n agents capabilities ability Blocks World The expendability task execution agent Recalling affects company transported agent transportationvolume A Each agent Ai vector real nonnegative property agent quantifies N AlAz Bi 61 bf Each capability perform specific action These capabilities expendable nonexpendable carrying capability capabilities overall volume weight capability evaluation transform income performing task This linear function number tasks T tl t2 t passengers We assume set m independent For satisfaction task tl vector capabilities Bt b bi necessary required The utility gained performing performance utility gained linear function resource In order function capability units monetary units In transportation shall case function type capability Such function enable shall attached task depends capabilities In solution assume task execution transportation calculations assessment coalitions simplify tasks tl 5 t12 5 There occasions specific task tj performed specific task ti satisfied This generalized partial precedence order 5 tl tk 5 tk2 5 5 tkk ti 5 tj means ti predecessor tj tj successor ti performance order The precedence order resource consumption assume This restricts solution exist appropriate domains domains cases explicit dependencies Blocks World transportation dependencies including A coalition defined group agents decided cooperate order achieve common task time agent member coalition The work single task We assume coalition 7 The partition single task subtasks algorithms suggest recursively scope paper However subtasks allocate subgroups agents tasks In cases interdependencies precedence dependencies tasks unified tasks The recognition dependencies performed combine dependent independent subtasks suggest implementing techniques constraint satisfaction research 3537 0 Shehoty S Kraus Artificial Intelligence 101 1998 165200 171 use resources increase agents ability assumption A coalition C vector capabilities Bc sum capabilities coalition members contribute coalitions contribute agents members A coalition C perform capabilities task t vector capabilities necessary fulfillment Bt satisfies VO 6 r bi b case precedence order t unsatisfied predecessors For sum sum capabilities members specific coalition Note case overlapping coalition task execution coalition activity coalitions coalitional In case overlapping joint utility satisfying members specific task 9 members precedence order tasks number coalition method capabilities coalitions coalition C value V calculated C reach cooperating The coalitional value V directly affected capabilities coalition contribute members agents decide partition members This method Section 4 Recall sum transportation task value coalition transportation positive relatively small compared transportation affect coalitional value exclusively provided transportation volume greater necessary task zero If coalitional task value case having exact volume Actually capability agents coalition company given specific volume necessary formation transportation volumes coalition required according corresponding task specific satisfying algorithm volume To conform common representation employ notion coalitional value negation Such calculation cost c instead coalitional value This cost calculated reciprocal attaches low cost high coalitional described valued coalition leads agents try increase leads try reduce coalitional cost rationality coalitional value likewise vice versa The coalitional We assume agents grouprational That form coalition benefit coalition sum personal benefits outside 22 33391 The agents benefit fulfill tasks Group rationality ensure necessary systems common outcome agents form coalition sum coalitional outcomes We assume agent tries maximize common utility possibilities agent choose lead maximum common utility However group rationality agents difference necessarily environment superadditive In order emphasize ones deal superadditive environment environment entail superadditive increase s The calculation coalitional values general case complex Nevertheless low complexity approximation methods calculating values agreements multiple agents recently developed 1261 utilized case 9 This notion coalitional value different theory value depends coalitional configuration notion commonly coalitional values game task allocation 172 0 Shehory S Kraus Artcial Intelligence 101 1998 165200 A superadditive following join environment satisfies rule pair coalitions Cl C2 set Ct n C2 0 Cl C newly formed coalition new value VFW VA Vz set possible coalitions superadditive grand coalition environment lesser importance superadditive remains MAS DPS systems problem Vi V VFW values coalitions Cl C2 Cnew respectively Rational agents coalitions Hence formed problem major problem exist More assumptions coalition lo environment prefer grand coalition utility distribution members This follows assume agent population change information That formation process We assume complete agents know goals existence agents required coalition members know details dynamic agent specific goal Note implementation knowledge goal agent existence later fixed agent population agents outside coalition C relaxed Section 9 Additional activity C Our algorithm need know details intracoalitional l1 That order decide work regardless clock synchronization agent perform action agents know precisely agents act Nevertheless agents clocks reduce efficiency overall goal satisfaction satisfying assumptions time differences agents follows assumption significant Now necessary assumptions definitions formally tm optional precedence problem solve A capabilities tasks ti E T coalitions agents Ci C N xi Vi total maximal precedence order respected Note refer T N fixed later allow change dynamically We solve environments However solution consist coalitions Ci coalition present problem Given set m tasks T tl orderandasetofnagentsNAr assigning outcome initially problem general case nonsuperadditive case superadditive null l2 members This membership null members probably overall outcome costs reducing coalitional environment increase 32 Set covering set partitioning Since task allocation agents approached problem assigning groups issue set tasks partition agents task allocation problem similar subgroups set partitioning main agents Therefore covering problems Below formulate problems SCP SPP Given set N A 1 A asetofsubsetsofNSC1CsuchthatCjNandSS2Nasetcoverisany lo Note case coalitions Cl C2 C Vte Vh Vz group rationality prohibits formation Cnews I1 This assumption regards requirements algorithm The properties tasks multiagent require synchronization independently algorithm requirements I2 Null members agents contribute coalitional performance 0 Shehory S Kraus Artijicial Intelligence IO1 1998 165200 173 S c S UcjEs Cj N The members S covering sets If members S pairwise disjoint VCi Cj E S j Ci n Cj ri5 S set partitioning N We assume Cj E S positive cost cj The cost cover S cost CcjEs cj The set covering problem entails finding cover minimum defined correspondingly 3420 set partitioning problem The set covering problem computational solving 121 Therefore NPcomplete tempting optimal solution problem suboptimally coalition algorithm provides solution exponential variety algorithms 489 Among algorithm Chvatal9 logarithmic bound I3 Given low ratio bound case multiagent coalitions subgroups overlap Furthermore difficulties present These include small given set subsets case agents coalitions SCP SPP centralized seek distributed algorithm precedence order attempt constructing implies complexity high practical use However suggested ratio adopt adapt algorithm formation This case disjoint coalitions allowed set covering problem deals number possible algorithms distributed agents deal autonomous SCP SPP algorithms refer cases indicated borrow properties Chvatals algorithm overlapping following formation algorithms low ratio bound 2 need heuristics chosen subgroups Despite set covering problem deficiencies number reducing coalition 4 The algorithms The algorithms present greedy distributed set partitioning algorithms low ratio bounds They designed agents environment necessarily try act order increase The algorithms anytime algorithms algorithm normally provides better initial state preceding states terminated superadditive work DPS performance benefits group stopped agents solution execution set covering special case autonomous The algorithms consist main stages presented In preliminary stage algorithm possible coalitions distributively later calculated initial values computed stage algorithms consists iterative distributed greedy ii The main procedure The coalitional substages occur coalition possible coalitions formation algorithm values recalculated This requires uptodate information efficient values enable choice preferred ones The agents decide preferred coalitions form I3 An approximation algorithm problem ratio bound pn pn smaller ratio optimal cost approximated cost 174 0 Shehog S Kraus Artijciul Intelligence 101 1998 165200 As previously stated solution SPP SCP case autonomous accrue limitations smallsized 2n A reduction communication possible limitations coalitions economical complexity number number possible coalitions computation try avoid unnecessary In sense smallsized shall preferred operations exponentially agents exponential exponential permitted coalitions This constraints specific problem investigation happen tasks performed number agents In case specific properties specific problem coalitions We justify heuristics associated recommend preferring time costly agents cost estimation computation communication seek cost reduction larger activities coalitions communication algorithms presenting integer coalition These heuristics implemented k denote number coalitions remains NP trivialize case limitation size coalitions complete reasonable assume general case Here convenient volume single task exceeds given size Such restriction affects number coalitions restrictions properties tasks coalitional values Additional enable calculation expectation values outcome different coalitions This shall improve complexity algorithm I4 This case calculations dependent numbers members highest coalitional Onk polynomial way case communication size allowed This restriction limit restrictions heuristics employ number coalitions l5 In transportation computation II However reducing problem problem information design number The initial coalitional 31 step step form coalitions coalitions quit coalition continue negotiations The reduction reduces computational agents join coalitions quit coalition depleted However overlapping property benefits communication state consists 1 single agents The agents begin negotiating agents join In case disjoint coalitions single agents formation process remaining number agents continue negotiating costs In case overlapping coalitions formation process resources efficiency task execution increases 41 Preliminary agreement calculation distribution forming coalitions agents agree distribution In order achieve distribution value agent Ai Prior calculations perform following steps l4 Note contradict economies scale principle However coalitions created principle economies scale refer performing longlasting case There cases large coalitions satisfy tasks In cases different heuristics adopted single task decompose organizations perform multiple tasks time Hence concept inapplicable I5 This number combinations coalitions exponential This similar NP completeness SPP SCP refer small number subsets 0 Shehoq S Kraus Articial Intelligence 101 1998 165200 175 Calculate permutations include k agents including A Pi set potential coalitions agent Ai ii While 7 Contact agent Aj member potential coalition _ If contact Aj locate information P capabilities retrieve Bj Commit calculation potential coalitions A j members values subset I6 Sij common Pi Ai subset coalitions _ Subtract Sij Pi Add Sij longterm commitment For agent potential coalitions contacted subtract Pi set ski committed compute values list Li Compute values coalitions committed Section 42 iiv relevant agents I8 If capabilities I7 Sij detailed contact unknown Repeat contacting agents Pi Ai agents contact stage agent Ai list Li potential coalitions After preliminary committed Ai necessary information coalitions updates information repeatedly calculate values preliminary values In addition members necessary capabilities l9 42 Distributed repeated calculation coalitional values values The coalition repeated formation algorithms common approach Therefore iteration appropriate calculations follows overlapping nonoverlapping require repeated calculation coalitional values model vary coalitional values As opposed iteratively However continuously described Note calculation procedure cases For case tasks precedence order modifications necessary The basic procedure Li currently compute agent Ai maintain values denoted Ly following steps list coalitions set 2o 8 Given coalitional values presented In addition lists agent Ai perform procedure calculating initially Loop coalition C list LF perform I6 The size subset vary single coalition decision respect relative computation I7 Note agents different computation common coahttons The agents speed capabilities finish faster These subset potential coalitions By computations reenter distributed evenly respect computing loop commit speed Ix Instead implementation Section 9 agents query matchmaker information I9 Note require compute coalitions agents members The necessity agents knowledge agent know capabilities necessarily relaxed implementation LF initially B values calculated open Section 9 preliminary stage 176 0 Shehory S Kraus Artificial Intelligence 101 1998 165200 0 ii iii iv potential coalitional Calculate vector B summing capabilities unused capabilities members coalition 21 Formally Bp CA EC Bi Form list E expected outcomes tasks T coalition C performs Check capabilities Bj necessary Compare Bj sum unused capabilities members coalition For task tj E T perform satisfaction tj Bp finding tasks satisfied coalition C If Vi b E Bj 6 bit E Bp tj satisfied C calculate expected net outcome ej respect 1 C I This shall calculating gross benefit acquired task execution The sum market Bj values capabilities necessary From gross benefit costs subtracted This expected net outcome ej task tj coalition C performs execution tj expressed costs internal coordination sum capabilities Put ej E tjs expected outcomes list E choose maximal This Among coalitional value V Calculate coalitional cost cc 1 V bottleneck agent additional action In cases computation Ai necessary LF If Ai finished computing values coalitions agent instance Aj finished computations Ai contact Aj values subset SC LT Then Ai add commit ST LF repeat iterative process computation Having calculated coalitional agents continue values costs iteration formation proceeding steps coalition 43 Choosing coalitions In substage iteration algorithms formed agents decide stepbystep coalitional configuration preferred achieved At end coalition value calculation coalition gradually Ai list Li coalitions substage sequence steps The overlapping disjoint coalitions case agent In agents shall form coalitions Each agent Ai shall iteratively perform coalitions case require sequence different values costs calculated substage 431 Disjoint coalitions In order simplify representation algorithm denote ratio size wi cilCi 1 coalitional cost coalition coalitions weight At end substage iteration algorithm agent calculated list coalitions coalitional values weights Each agent Ai shall iteratively perform following Locate Li coalition Cj smallest Wj ii Announce coalitional weight wj located 21 Note case overlapping coalitions sum coalitional vector capabilities 0 Shehory S Kraus Artificial Intelligence 101 1998 165200 177 iii Choose lowest announced coalitional weights This luloW coalition CIOW task tlow chosen agents Choose corresponding iv Delete members chosen coalition CIOW list candidates new coalitions v If member chosen coalition CIOW join members form Cl vi Delete Li possible coalitions vii Delete T chosen task tlOW viii Assign Ly coalitions include deleted agents Li values recalculated details coalitional calculating values choosing The procedures assigned tasks beneficial Some coalitional values shall recalculated preferred coalitions repeated agents deleted allocated possible coalitions repeatedly coalitions coalitional configuration This values affected variations value coalitional assignment task coalition This specific task longer affects coalitional values previously affected Therefore coalitional values calculated respect task allocated recalculated All values remain unchanged performed A change tasks calculated configuration corresponds subject 432 Overlapping coalitions Each agent Ai shall iteratively perform following Locate Li coalition Cj smallest cost cj ii Announce iii Choose coalitional cost cj located lowest announced chosen agents The corresponding selected coalitional coalition Cl costs This clOW task tlOW shall iv If member chosen coalition CIOW join members CloW form selected coalition v Erase T task according value newlyformed CIOW calculated vi Update capability vectors members CIOW according contribution task execution vii Assign As case disjoint coalitions LF coalitions Li values recalculated iterative procedures calculating preferred coalitions forming coalitional repeated values costs selecting beneficial tasks performed possible coalitions iteration value Here coalitional values recalculated calculated respect change formation coalition Note disjoint case use coalitional weight overlapping disjoint case agents contribute individual weight important overlapping case agents contribute case use coalition cost This difference unused capabilities total outcome necessary 178 0 Shehop S Kraus Artificial Intelligence 101 1998 165200 total outcome times contribution coalitions This difference causes different choice agents coalitions formed important 5 Tasks precedence order In case tasks predecessors choice task implies performed previously Hence precedenceorder coalition perform precedent set predecessors choice predecessors task satisfied algorithm tasks For t Pr The choice t formation including formation depend costs benefits perform tasks Pt predecessors requires require task t denote coalition coalitions iterativelyone iteration In precedenceorder In original algorithms agents form coalitions coalition single task t currently iteration They greedily satisfy tasks performing agents shall form appears beneficial case perform tasks specific set Pt appears coalitions beneficial possible sets For evaluation sets tasks introduce concept precedence value pV pvalue sum values tasks precedence set Pt As previous cases value task recalculated chosen pV recalculated iteration Each values tasks Pt For calculation employ calculation methods Sections 52 53 Pt substituted T 53 The internal precedence order Pt considered value calculation calculations iteration tasks Pl satisfied Since introduced emphasize performed Section 52 In notion Pt T denotes set tasks difference Initially T includes tasks satisfied agent tasks Pl satisfied t chosen The distribution chosen current pVs This implies agents performed suggested pV requires calculation best pV iteration The agents perform calculations concerning task t E T calculations distribute agree Pr calculated Recall tasks Pt recalculated All agents simultaneously Given current status capabilities iteratively perform t E T following step algorithm necessary values corresponding Compute greedily distributed methods Section 53 input set tasks greedy calculation Pr values tasks Pr ii If step tasks Pt assigned coalitions set p V sum values tasks Pt perform iii Otherwise remove t T 22 This t performed 0 Shehory S Kraus Artid Intelligence 101 1998 165200 179 Choose task t maximal pV performed predecessors Form required coalitions Section 53 _ Remove _ If overlapping t predecessors coalitions T capability vectors associated coalitions members Else disjoint coalitions delete members coalitions list candidates case update coalition formation task execution forming The iterative procedure calculating coalitions tasks performed values dynamically shall distributively preferred repeated T agents free perform Note changing result change accessibility resources coalition formation pvalues costs selecting recalculated 6 Quality assessment The algorithms presented advantages An important property ratio bounds Denote coalition configuration C algorithms total cost ctot C c EC cj superscribe optimal case low logarithmic 6 I The overlapping case number new members To express ratio bound notions disjoint overlapping algorithms define agent weight wi case overlapping coalitions Denote ratio members calculation coalition cost ci zi Wi ci zi Here agents new weight coalition Ci zi agents weight disjoint case distinction agents join new coalition time considered necessary Theorem 1 The ratio bound p algorithm overlapping case given maxlCjI z Ct c il 1 7 1 1 confi Proof Each coalition Cj contributes guration C solution Since agent Ai receives weight wi ctOt sum weights agents final coalitional configuration Chnal given cost cj cost ctot coalition ctot c Wi C CWi AieN Cj ECI Ai ECj 2 The inequality expressed single agent For final coalition configuration results fact agent contributes total cost optimal left sum right sum allows multiple contributions particular 180 0 Shehory S Kraus Artcial Intelligence 101 1998 165200 Since following relation holds general C CjGinal jj C jmamr J CjGind il il particular holds c conclusion 2 3 4 lcjl 1 maxlC I Cm G C CjCi Ct C f Cj GInal il il Hence derive ratio bound 4 5 6 ratio bound disjoint algorithm disjoint case algorithm case quality assessment Since overlapping derivation presented separately Note limnoo Cyl 05772 coalitions constant ratio bound constant ratio bound worst case bound determine Therefore ratio bound grows similar nature algorithm similar Despite minor modifications similar li y Inn y Eulers constant logarithmically size suggested presenting algorithm maximum permitted coalitional refers Since previously limited calculated simply 6 One recall size simultaneously 62 The precedenceorder case As result modified coalitional values costs weights changed Proposition 2 The ratio bound precedenceorder case given p 2 lnmaxICjIlnmaxIpvalue 7 Proof The calculation calculation calculations adding pvalue precedence pvalues nonprecedenceorder values cases based concept choosing total cost Therefore according case cases This lowest cost time Theorem 1 ratio bound precedenceorder similar set Pt Ppvalue ctotPt 1 cPt The total value Cm c pvalue PrGC maxlCfJl C il f lnmaxICj E Pfl 8 9 10 given 0 Shehory S KrausArtijcial Intelligence 101 1998 165200 181 ctot bounded c lnmax Ipvaluel As result ratio bound pvalues contributes logarithm ratio bound yielding p z lnmaxCjlnmaxpvalue 0 tot 7 Complexity algorithms In addition quality solution respect optimal solution main perspectives ln judged relevant permutations communications At preliminary k efficiency algorithms computations distributed Cf_ln agent During rzkP1 min Sij I contacts agents potential coalitions ISij I varies correspondingly While best case communicationwise stage calculations requires stage agents contact conducts I Sij size subset choice complexity ISij Ci_ communication agents calculated considered integer communication operations order 0l li computation operation Since range l Ct_2 average number communication Onk worst case ISij 1 1 communication distribution stage 0l operations agent Ol complexity agent calculations Below prove discuss complexity nonprecedence case Proposition 3 For value calculation task assignment ity agent order Onk IT I computational complex performed number capabilities tasks I T I assignments Proof The value calculation process consists assignment tasks coalitions 23 Such assignment The number value calculation operations agent order 24 Onk assumption agents number tasks assignment operation Choosing computations coalitions repeated n times I T I c n n replaced IT 1 Therefore requires 0 1 operations Onk coalitional values choosing largest value order number possible coalitions necessary IT I Given number complexity agent order Onk 1 T I q agent The processes calculating depends computational This complexity operations compared centralized case single agent performs In case single agent experience Onkf IT I 23 We assume coalitional values complicated planning partitioning goals 42 subgoals given calculation 24 Note agents perform Ok Onk differences calculations moderates calculation completion ITI calculations This property process capabilities computational calculation differences agents IT 1 value calculations advantageous In cases perform occurs happen nonequal partition time average reducing time agents 182 0 Shehory S Kraus Articial Intelligence 101 1998 165200 average distributed On communications computations higher communicational lower 25 The overlapping disjoint coalitions case However 1 T 1 n case allows Ol T I coalitions formed disjoint case n upper limit order On case speedup computational case similar complexity complexity Therefore coalitions Following present complexity precedenceorder case We provide explicit proof justify informally Proposition 4 The computational complexity precedenceorder case Onk T j5 Proposition 4 justified follows The change original calculations calculation computational values precedence order yields increase addition tasks pvalue This shall performed IT I times additional complexity multiplied Thus new complexity complexity A deliberate analysis introduction complexity coalitional complexity calculation overall 0 I T 14 complexity original algorithm shall Onk lT15 rough estimation 0 I T 13 operations necessary heuristics reduce In 8 Simulation results In order strengthen validity demonstrate quality approach algorithm overlapping coalitions precedence order simulated tasks The simulation consists centralized program calculates coalition centralization properties original algorithm distribution section present fully distributed domainspecific task allocation formation resulted distributed algorithm The aimed simplifying code running process kept Separately agent modifications algorithm algorithm implementation We especially interested ratio total outcome agent systems algorithm optimal outcome systems We number tasks executed factor runtime consumption important number tasks executed respect act according interested optimal case Another respect number agents tasks ratios The simulation tested different average amounts resources agent average resource necessary task execution elaborate We conducted numbers tasks number agents varying 4 22 We performed simulations larger numbers agents tasks There 4 different resources randomly partitioned agents amounts agents As result nonequal partition 50 60 agents check functionality hundreds runs simulation algorithm 25 If agents overhead distributed case affect performance algorithm exists communication channel pair agents computational 0 Shehory S Kruus Artijicial Intelligence 101 1998 165200 183 Simulation task execution Optimal task execution 08 07 06 Z 05 I d 04 m 03 1 02 I 01 0 __ 06 08 1 v 12 14 16 18 2 Agents1 Tasks Fig I Simulation profits I Optimal profits 1 09 08 07 o 06 I d d Z 04 05 1 03 t 02 01 0 j 06 08 t 1 12 14 16 18 2 Agentsi Tasks Fig 2 resources significantly perform tasks driven agents coalition different average This affected ability Figs l6 present results simulation categories Figs 1 case average resources agent results equal average resources necessary task execution formation divided 2 present approximately Figs 3 4 present agent task execution Figs 5 6 present results greater significantly average resources necessary case average resources case average results 184 0 Shehory S KrausArtijkial Intelligence 101 1998 165200 01 06 11 16 21 26 enEs Tasks Fig 3 Simulation profits Optimal profits pe I q m q 08 07 o 06 05 u 04 03 02 01 0 06 11 16 21 26 Agents I Tasks Fig 4 smaller average resources necessary resources agent significantly task execution In graph x axis represents agents number tasks y axis represents results optimal Figs 24 6 measure results 26 Figs 1 3 5 measur e ratio task execution ratio global profits In graphs square ratio ratio number simulation 26 We computed upper bound optimal complexity results optimal results 0 Shehory S Kraus Arcial Intelligence 101 1998 165200 185 n n I I I I I n I 1 09 t 08 07 2 06 5 05 I g 04 03 02 01 03 06 11 16 21 26 AgeIwuks Fig 5 Smulation profits Optimal profits 08 07 06 11 16 21 26 AgentTasks Fig 6 repersents results different experiments result single simulation squares overlap similar number executed Via simulations examined Figs 1 3 5 In addition tested ratio optimal case given number tasks executed profits gained settings agents result task execution coalition formation profits gained optimal case Figs 2 4 6 The results cases close optimal seen figures tasks respect 186 0 Shehoty S Kraus Artificial Intelligence 101 1998 165200 The main results simulations performed follows simulation The ratio task fulfillment optimal task fulfillment Figs 1 3 Only ratio cases close means nearoptimal tasks resources decrease Fig 5 Nevertheless decrement beneficial profit tasks Thus perform task fulfillment significantly smaller task fulfillment simulation agents resources ratio profit ratio remains suboptimal The reason leads choice 1 task execution algorithm fewer tasks reach suboptimal ii The ratio profits task execution algorithm optimal case close Figs 246 Note ratio significantly better theoretical iii The runtime simulations usually seconds ratio bound running minute dealing 50 60 Spare station agents tasks running PC iv During simulation coalitions sizes formed 9 Implementation dynamic open MAS coalition In section report implementation sented previously existing framework arrive dynamically provided reader referred 52 details Implementing algorithms namism proves applicability realworld MAS formation methods pre dynamic open MAS For implementation chosen RETSINA agent webbased tasks agents agents appear disappear A brief description openness dy usefulness algorithms required adjustments RETSINA framework 91 The multiagent RETSINA REusable Taskbased System Intelligent Networked Agents information developed integrate sources perform decision cooperative multiagent webbased compartmentalize bottlenecks tion tasks number agents capabilities specialized constructed support task knowledge organize specifically tasks The agents deal dynamic changes 5 l531 gathering RETSINA avoid processing informa In RETSINA agents distributed run different machines Based tasks needed decision point tasks models users agents tasks agents decide decompose pass information cooperate agents The agents communicate delegate information request provide negotiate sists classes agents similar task models The integace agents task agents information agents Note 36 Interface agents interact users information resolve inconsistencies InfoSleuth filter integrate information infrastructure information sources 0 Shehory S Kraus Art1 Intelligence 101 1998 165200 187 delivering specifications receiving results They acquire model utilize user preferences Task agents formulate plans carry They knowledge task domain types task agents information performing parts task In addition conflicts fusing information cooperate appropriate itoring results composition geneous collection information strategies source selection fusion Several typical demand task agents strategies resolving agents They decompose plans agents plan execution mon access hetero resources access conflict resolution information sources They models information information retrieved information task agents information Information tasks executed single agent agents form teams agents relevant tasks agents provide intelligent investment For instance suppose user requested interface agent monitor task portfolio maintain given level risk The interface agent involve agents provide types information regards assets information price relevant news It needs task agents analyze portfolio information decisions suggestions regards portfolio There agents provide services se formation process Note lecting appropriate ones coalition multiple attempts formation algorithm serves purpose form coalitions The coalition different agents tasks arriving simultaneously risk critique compute A basic design problem cooperative open multiagent systems connection In open participating 131 That agent able locate agents execution tasks locally coalition enter leave agents dynamically solutions precluded agents basic al capabil tasks problem capabilities necessary formation distributed Internet broadcast communication The solution provided interactions themmatchmaking lows agent tasks requester ities agent server able execute requesters matchmaker agent maintains service characteristics 14321 In general process matchmaking learn contact information relies wellknown reliability agents cost availability RETSINA information capabilities contact During join agents operation multiagent advertise matchmaker leave agent society capabilities details 51 In search agents unadvertise ask names relevant possibly agents After having acquired agents directly contact agents initiate cooperation needed Note matchmaker agents relax problem unavailable overwhelmed single matchmaker avoid centralized agents approach matchmaker form coalitions information solution 92 Cooperation coalition formation The RETSINA receive coalition formation mechanism increases tasks users Incorporation efficiency groupwise task execution 188 0 Shehoq S Kraus Articial Intelligence 101 199X 165200 decide importance nearoptimal mechanism task performance We report results enables agents resulting addition realworld order27 tasks performed Such decision making fulfill tasks domains situations A RETSINA agent considers cooperation following holds agent perform specific task agent perform specific task agents resources perform faster efficient task require agent perform specific task working collaboratively increase benefits task reduce costs Section 93 In possibly performing important The implementation coalition differences infrastructure discussed formation mechanisms modify assumed agent systems RETSINA required The number RETSINA constantly goals agents assumed fixed agents appear disappear tasks vary previous sections dynamic The method information regards existence tasks details distributed original algorithms restrictions modifications discussed To resolve We agents behave formation functional elaborate details dynamically task follows framework coalition applied addition required modifications Note extremely simplified manner issues RETSINA agents described tasks arrive users agents The activity single agent arriving 51 The activity entails algorithms RETSINA When task tj arrives agent Ai user agent performs 4 b Adds tj 1 task list Finds possible decompositions tj subtasks tj ti tasks c 4 29 Ai determines possible decompositions tj information reduction library includes pregiven possible decompositions capabilities According gathering contacts match needed performing maker agents capabilities able work task It adds agents Ni agent list sends rel If sender evant subtasks tj tj decomposable tj Ai agent added Ni To avoid cyclic task delegation allow propagation results origin task user agent delegation path requester 27 A RETSINA agent internal scheduling mechanism algorithm provides priority generation scheduler 28 Note original algorithms discuss capability partial overlapping use resource typical formation care agents dependencies The implemented coalition 29 For example checking portfolio requires assets portfolio subtask computing balance according coalition formation algorithm balanced reuse tasks complex RETSINA dynamic agents time dependencies RETSINA time resolves scheduling inherits properties subtask finding criteria prices 0 Shehoty S KrausArrcial Intelligence lOl1998 165200 189 agents task passed added delegated task ii When Ais local schedule allows computes coalitions values forms coalitions follows iii Computing coalitions values 3o task tj Ti considers possible library coalition value possibility The value calculation based task reduction perform formed coalitions computes performed evaluating account typical computational space necessary time interval execution linear functions attached capability takes resources CPU memory disk task studied past behavior RETSINA iv Choosing Coalitions 3 step iii Ai chooses highest Cj registers Cj lowest cost cj denotes registered If forms members Cj coalition performs task subtasks If values registered Ai rechecks highest registered 4 b cl 4 values computed Among value correspondingly value matchmaker Ai checks value matchmaker associated values waiting period 32 Upon completion removes passed capabilities Concurrently occasional polling matchmaker availability skipping continually performed individually performs members coalition tj T In case task execution failure report Ai Ai tj s deadline tj kept list future handling Note updates 7 Ai performs agents matchmaker changes coalition local schedule allows coalitions values agent algorithm formation task execution time tasks includes redesign process In RETSINA step ii possibly member coalitions value calculation computation communication time coalition design significantly dynamically appear Therefore When new task received agent require small compared modified algorithm If tasks assigned iteration coalition informed new task recalculate consideration l inclusion iteration task coalition new coalition value greater arrival new task newly arrived introduces coalitions performed current formation algorithm agents coalitions coalitional values recalculations current currently known values So This step corresponds associated coalitions coalitions associated tasks That task best coalition This simpler implement open tasks known agents Section 42 However original algorithm algorithm tasks This step corresponds algorithm Section 43 32 Such situations occur asynchrony differences agent computation time network latency Waiting additional values beneficial tasks deadline allows 190 0 Shehop S Kraus Artificial Intelligence 101 1998 165200 coalitions selecting best actual agents avoid coalition redesign consider new task coalitions 33 agents redesign redesigned inclusion If previous l coalitions iteration tasks process new task arrived Ai added group tasks Ti dealt coalition formation iteration _ In case rapid highfrequency If rate new tasks expected disenabled statistically statistical data redesign process shall avoided infer rate sampling stream new tasks redesign process advance agents task stream interpolating 93 Analysis modications The dynamic addition tasks agent change complexity algorithm new task This result number dynamically multiplied Td Since Td E T redesign process complexity order magnitude respect number tasks tasks Therefore performing received overall order process 1 Td 1 times 1 Td 1 original complexity implies increase analysis In worst case redesign process performed The communication requirements original algorithms worst case avoid worst case communication stages commits algorithm compute implicitly communication maximal Sij This results commitment On Td agent implemented large We designed complexity This performed requirement Aj complexity In modified algorithm task assignment additional arriving 0 1 Td I n Yet low linear complexity Nevertheless gathering coalition experiments Originally number agents n assumed RETSINA operates tasks Therefore original communication worst case remains unchanged informing required complexity similar formation dwarfed comparison This observed contact Ai communication average OTd On ITI agent However agents dynamically value calculation average case web information time course network latency causes computation constant However RETSINA change n dynamically v maxn maximum decided designers according expectations regards agent Then substitute Ouk expression u resulting slightly modified Let IZ original complexity complexity ITI ITdl analysis RETSINA agents able perform task reductions determined complexity subtask general domainspecific complexity subtasks designers domainspecific In information libraries provide details planning executing internal 60 In practice task reduction task schema libraries tasks The libraries components control subtasks domain RETSINA j3 Note redesign allowed redesign perform tasks expected task flow rapid lest constantly 0 Shehory S KrausArtijiciul Inielligence 101 1998 165200 191 subtask typically performed small number agents This implies coalition agents particular expertise formation small coalitions formation procedure concentrate perform task For example domains RETSINA implemented finding satellite agents specific location For 4 information gathering 4 agents involved tracking One tasks agents cooperatively perform specific satellite observable agents involved information related tasks This means maximal coalition size task type 8 Since sizes coalitions tasks order complexity limited The include active agents involved tasks idle The specialization coalitions according specialty present highest payoff Thus coalition different specialties necessary In current RETSINA performs necessary given task execution The maximal number specialties necessary restriction size coalitions However different decompositions different specialty dimensions Among RETSINA agent specialtycapability utility functions enables comparison results choice number subtask execution complies k tasks possible specific agent ks execution task coalition number specialties small size coalitions maximal determine worst case complexity incorporation implementations size limited agents results 94 Implementation settings algorithm formation RETSINA modified coalition interaction mechanisms RETSINA properties maintaining To apply simulate distribution This performed running degenerated RETSINA agents able register matchmaker query agents receive tasks RETSINA agents The degenerated agents perform However computational simulated performance RETSINA simulated task performance similar values original studied framework tasks simulated including matchmaking task performance advertisement consumption openness availability resources agent totalling resource consumption The implementation performed running 20 agents machines 1000 tasks Each agent agents stream tasks supplied represented simulated thread task queue real agent The agents running Sun workstations Each agentthread tasks arrived agent frequency tasks type required dynamically capabilities chosen studied RETSINA Each task associated vector capabilities necessary execution payoff function value task For task calculating agent creates task object consumes The agent received initial set tasks additional random manner informs agents tasks passing time memory requires communication random manner according typical distributions task objects references 192 0 Shehoq S Kraus Articial Intelligence 101 1998 165200 Fig 7 The average performance optimal performance function maximal coalition size permitted k solid line worst case broken line expressed fraction The CPU communication RETSINA agents This resource consumption previously measured presented memory consumption similar consumed 1471 During simulation coalitions agents formed task allocated value execution coalition calculated The sum values total payoff When new tasks arrived redesign procedure calculated followed We performed ratio bound total payoffs optimal payoffs calculated offline theoretical depicted hundreds times compared simulation algorithm logarithmically respect In Section 6 shown ratio bound increases simulated number coalition members However implementing close RETSINA agent average case specific domain terms optimal case Fig 7 The figure shows average performance task allocation agents depicted reached solid line 09 optimal performance34 worst case fast 05 optimal line declines ratio bound depicted broken performance Note implementation prohibits best currently known value choice best value time instead selected nearoptimal simulated RETSINA asynchrony execution results 10 Related work Distributed task allocation discussed example task allocation mechanism context DPS systems A Contract Net Protocol known 34 We calculated optimal performance explicitly line small number agents involved coalition formation Small means 20 0 ShehoT S KrausArtificial Intelligence 101 1998 165200 193 cases single similar subtask attempts performance tasks allocated agent 49 The CNP discusses subtasks subcontract In task partitioning subtask This CNP necessary The CNP allows single agents satisfy CNP task divide agents agent bidding mechanism procedure allow perform agents involved algorithms However deal case single agents Rather solve single agents problem groups agents partition perform computationally required In CNP simulations However issue efficiency solution evaluated solution provide efficiency complexity formal analysis quality complexity simulation tasks complex close cooperation tasks partitioned crucial implementation coalitions approach solutions In cases assigning addition tasks task handles performance tasks assignment The allocation tasks teams agents process designing forming addressed order perform discussed DA1 researchers 253855 Although discussing groups roles groups agents 25 emphasis seeking nearoptimal uses presents information abilities agents assign tasks Recipe selection complex group action managed central organizer The team members description select recipes singleagent mechanism solution solution Jennings requires central agent Both limitations issues discusses scope research joint intentions shared plans planning agents form teams In addition task allocation having central organizer Jennings avoided constituent according actions 151748 As mentioned cooperatively faces satisfaction extreme tasks increase MultiAgent Systems agents selfmotivated task DPS deals ways main extreme approaches common task individually DAI DPS concerned cases group fulfill resulting MAS focuses personal utility However DPS MAS lying introduction Distributed Problem Solving agents agents distribute subtasks systems autonomous personal extremes In paper deal autonomous type mutually beneficial agents selfish try maximize expected utilities 305063 MAS cooperation greater MAS case competition restricted task redistribution try certain restrictions agents In case DPS benefits agents In cases benefits arise cooperation resource sharing acting individuals increase conlines DPS agents systems closer benefits Cooperation act order achieve variety multiagent autonomous situations DA1 research previously addressed problem solvers 16 There coordination view node activity node acts subject problem tasks precedence order based local control overlapping organizational 194 0 Shehot S Kraus Artcial Intelligence 101 1998 165200 solving subgoal global goal The organizational idea coalition However Durfee et al discuss coalitions address problem forming groups nodes improve overall performance goals important method cooperation view implicitly multiagent environments resembles formation Coalition subsets game theory usually concentrates formation process resulting disbursements theory provides analysis possible coalitions shall form result Game agents assuming coalition coalitions For example 182740 agents multiple memberships 611 However game theory provide algorithms agents use order formed coalitional form coalitions Given previously stability agents payments Game theory rarely fairness 35 calculation corresponding That takes communication coalition solutions distributed formation mechanism agents We seek dynamic evaluation coalitions 36 game theory usually provides static evaluation allow agents members coalition Therefore coalition theories appropriate concerned gametheoretic situation special properties multiagent In case particularly costs limited computation time seldom considered distribute partition multiagent consideration configuration checking environment formation interested Sandholm Lesser 42 present coalition formation model boundedrational coalition games As 42 allow In 42 value coalition depends computation agents general classification varying coalitional values time However consider cases time computing polynomial previously formed coalitions The model presented Sandholm Lesser refers nonrestricted number configurations present greedy algorithms configurations values vary respect resource consumption bound number coalition values considered entails problem The problem coalition SCP 37 Set partitioning partition agents formation coalitions overlap approached SPP Coalition Covering Problem set partitioning formation agents results appropriate formation algorithms The SPP SCP dealt widely NPhard problems proposed theory appropriate main deficiencies That complexity formation approached Set Partitioning Problem Set partition set subsets finding partition cost Since coalition subgroups SPP SCP determining coalitions form result coalition context SPP SCP graph algorithms proposed provide agents NPhard problems approximations research combinatorial 1 The exact optimal solutions solutions number agents Such problem coalition fields operations 348920 However 191 Exact solutions solution exponential solutions formation solution 35 Stability fairness different definitions context game theory 36 The values coalitions change dynamically 37 The SCP similar SPP Both described relying initial values misleading Section 32 rapid changes tasks resource availability 0 Shehory S Kraus Artificial Intelligence 101 1998 165200 195 2 The approximation calculate solutions 38 polynomial algorithms lead complexity deal tightly subgroups given set This overly 2 subsets solution applied cases agents environment agents unable nearoptimal restricted number predefined possible restrictive case agent coalition given set n agents This limitation resolved artificially coalitions That solutions calculated implemented dominates In contrast MAS goals aim reducing robustness possible centralized central agent agents Such situation case bottleneck increasing formation process supervises agents environments single point failure computational 3 All present solutions typical result solution formation inappropriate problems distributed coalition limiting systems computing algorithms Distributed cases twoprocessor approximation The general problem systems lo Suboptimal DCS order Optimal 24 constrained research dealt problems solutions provided task strongly solutions 57 provide good solutions task assignment presented In 7 algorithm aimed reducing time The minimization task turnaround time main objective task assignment distributed task allocation reduce execution allocation precedence constrained presented NPcomplete multiprocessor The proposed solution task turnaround computing increase time While DCS research usually discusses fullyconnected multiprocessor assume multiagent Agents types belong remote places indirectly connected We discuss agents perform outcome different owners located specific case single In work main issue development benefits agent necessarily tasks join order agents try maximize systems follows task execution precedenceordered Research Loading Time Scheduling Problem similar research concentrates LTSP 5 presents approximation algorithms cases tasks performed single machine machines task performed subset machines This appears cases differences tasks performed groups agents single agents ii time task sequence tasks main factor LTSP loading specific machine discuss time effect task arises task execution sequences single agent iii discuss given precedence order subject resource distribution agents The differences case DCS research requires approach presented research loading utility Nearoptimal solutions ratio optimal solution large In case available solutions ratio small number agents ratio growing number agents logarithmically 196 0 Shehoty S Kraus Artificial Intelligence 101 1998 165200 programming economics A study planning competition 58 In research serves theoretical basis applied construct environment employed means In research Wellman concen forma MAS presented Wellman generalequilibrium approach planning mechanism Mechanisms marketoriented struction analysis distributed planning trates competitive agents discuss cooperative agents In addition tion coalitions systems agents programming striction provide good results small number agents proved simula tions 34 The theoretic model underlying marketoriented suitable largescale addressed systems presented A marketoriented task allocation approach utilized 56 There Walsh Wellman present simple auctioning protocol pricing alloca agents In contrast address case cooperative tion tasks selfinterested solution agents As result Walsh prove convergence addition prove protocols issue effects formation groups addressed Walsh Wellman tasks single agents perform agents Such groups allow executing Task execution groups increase efficiency execution These major effect overall benefits agent focus groups termscoalitions solutions One important lead nearoptimal work algorithm problems increase preferable Hard computational class NPcomplete goal Huberman single component problems instead employing including et al 23 This research suggests ad single dressed Huberman algorithm portfolio algorithms algorithms approximation interleavingly As proved research approach result performed results As authors lution approach distribution computational state economicsbased sources efficiency task performance This useful address problems discussed method provided distribution issue forming groups agents means proposed approach importantly increasing performance research Cooperation cooperation team members cooperating discussed cooperatively algorithms zero intersection outputspace sufficient agents ATeam tasks solutions higher level cooperation solutions nearoptimality cooperating scaleeffectiveness consider comparatively marketbased solution complex optimization asynchronous problems ATeam works imperfect simplistic refers non approach agents According information respect claim cooperation We refer cases applied allows improvement In addition deal formation multiple groups better greater teams As opposed agents 54 There team multiple small number agents This ATeam property team One interesting property ATeams solve problem Although ATeams et al addressed systems described performance common improve agents single similar programs 0 Shehoq S Kraus Articial Intelligence lOl1998 165200 197 11 Discussion nonsuperadditive In paper presented algorithms task allocation computational agents environment The algorithms suitable formation coalition benefits cases agents motivated agents perform They appropriate tasks However efficiency task execution performance single agents worse performance groups The cases tasks precedence order algorithms yield suboptimal Although general act order maximize incidents improve task allocation problems computationally adjusted results exponential yield results ratio algorithms computational NPcomplete present polynomialcomplexity close optimal results proven bounded logarithmic bound Our distribution method prevents possibly overlapping saving unnecessary computation In addition agent performs primarily calculations computational unnecessary case precedenceordered capabilities agents outcome algorithm characteristics required actions process In cases precedence order distribution method prevents saving repeated individual operations However property tasks takes account individual computational distribution calculations agents significant leads distribution calculations calculations operations terminated case results halting good quality The algorithms anytime algorithms coalitions If halted normally formed task allocated In case better subgroups tasks coalitions formed prior performance subgroup subgroup anytime property algorithm exists cases results The anytime intervention time period provide In nonprecedence precedenceorder However completed best This means case precedence order yield beneficial property algorithm negotiation formation processes changed process dynamic environments value tasks necessarily accumulative halted algorithm important coalition formation methods implemented The coalition agent improve multiagent implementation relax binding assumptions account requirements We shown incorporation nearoptimal information multi terms joint payoff To enable taking constraints arising dynamism openness formation method induces execution coalition increasing limitations realworld cooperation time To summarize dynamic open systems distributed computational execution demonstrated They general solution Some restrictive assumptions realistic cases tasks precedence order interdependencies agents involved distributed cooperative agent systems tasks shall assigned paper task allocation agents task allocation problem appropriate performance task The algorithms apply Nevertheless distributed algorithms task allocation significantly algorithms presented 198 0 Shehoy S KrausArtial Intelligence 101 1998 165200 agents order agents perform minimize maximize overhead computational expected outcome References l RJ Aumann The core cooperative game sidepayments Trans Amer Math Sot 98 1961 539552 2 RJ Aumann B Peleg Von NeumannMorgenstem solutions cooperative games payments Bull Amer Math Sot 66 1960 173179 3 E Balas M Padberg On set covering problem Oper Res 20 1972 1152I 161 4 E Balas M Padberg On set covering problem An algorithm set partitioning Oper Res 23 1975 7490 5 R Bhatia S Khuller J Naor The loading time scheduling problem Proceedings 36th Annual IEEE Symposium Foundations Computer Science FOCS95 6 AH Bond L Gasser An analysis problems research 1995 pp 7281 DAI AH Bond L Gasser Eds Readings Distributed Artificial Intelligence Morgan Kaufmann San Mateo CA 1988 pp 335 7 GH Chen JS Yur A branchandboundwithunderestimates algorithm problem precedence Computing Systems 1990 pp 494501 constraint Proceedings 10th International Conference task assignment Distributed 8 N Christofides S Korman A computational survey methods set covering problem Math Oper Res 21 5 1975 591599 9 V Chvatal A greedy heuristic lo EG Cotfman LR Graham Optimal scheduling setcovering problem Math Oper Res 4 3 1979 233235 twoprocessor systems Acta Informatica 1 1972 200213 111 R Conte M Miceli C Castelfranchi Limits levels cooperation types disentangling Eds Decentralized AI Vol 2 Elsevier prosocial Amsterdam interaction 1991 pp 147157 Y Demazeau JP Muller 12 TH Cormen CE Leiserson RL Rivest Introduction Algorithms MIT Press Cambridge MA 1990 13 R Davis RG Smith Negotiation metaphor distributed problem solving Artificial Intelligence 20 I 1983 63109 141 K Decker K Sycara M Williamson Middleagents intemet Proceedings IJCAI97 Nagoya Japan 1997 pp 578583 151 EH Durfee VR Lesser Negotiating allocation partial global planning L Gasser MN Huhns Eds Distributed Artificial Intelligence Vol II PitmanMorgan Kaufmann London UK 1989 pp 229244 task decomposition 161 EH Durfee VR Lesser DD Corkill Coherent cooperation problem solvers communicating Distributed Artificial Intelligence Morgan Kaufmann San AH Bond L Gasser Eds Readings Mateo CA 1988 pp 268284 171 EH Durfee VR Lesser Global plans coordinate distributed problem solvers Proceedings IJCAI 87 Milan Italy 1987 pp 875883 181 D Fudenberg J Tirole Game Theory MIT Press Cambridge MA 1991 191 MR Garey DS Johnson Computers Intractability A Guide Theory NPcompleteness WH Freeman San Francisco CA 1979 20 RS Garfinkel GL Nemhouser The setpartitioning problem set covering equality constraints Oper Res 17 1969 848856 21 JC Harsanyi A simplified bargaining model nperson cooperative game Intemat Economic Review 4 1963 194220 22 JC Harsanyi Rational Behavior Bargaining Equilibrium Games Social Situations Cambridge University Press 1977 23 BA Huberman RM Lukose T Hogg An economic approach hard computational problems Science 275 1997 5 l54 0 Shehory S KrausArtijcial Intelligence IO1 1998 165200 199 24 OH Ibarra CE Kim On twoprocessor scheduling twounit time tasks precedence constraints J Cybernetics 5 3 1976 87109 251 NR Jennings Controlling cooperative problem solving industrial multiagent systems joint intentions Artificial Intelligence 75 2 1995 146 26 S Jha 0 Shehory K Sycara Viewing contingent contracts agents options Unpublished manuscript 1271 JP Kahan A Rapoport Theories Coalition Formation Lawrence Erlbaum Associates Hillsdale NJ 1984 28 SP Ketchpel Forming coalitions face uncertain rewards Proceedings AAAI94 Seattle WA 1994 pp 414419 29 S Kraus An overview incentive contracting Artificial Intelligence 83 2 1996 297346 X S Kraus J Wilkenfeld G Zlotkin Multiagent negotiation time constraints Artificial Intelligence 75 2 1995 297345 3 I T Kreifelts E Von Martial A negotiation framework autonomous agents Proceedings Second European Workshop Modeling Autonomous Agents MultiAgent World 1990 pp 169182 1321 D Kuokka L Harada On KQML matchmaking Proceedings First International Conference MultiAgent Systems AAAI Press San Francisco CA 1995 pp 239245 33 RD Lute H Raiffa Games Decisions John Wiley New York 1957 34 T Mullen M Wellman A simple computational market Proceedings First International Conference Multiagent Systems AAAI Press San Francisco CA 1995 pp 283289 network information services 35 B Nadel Constraint satisfaction algorithms Comput Intell 5 1989 188224 36 M Nodine A Unruh Facilitating open communication agent systems infosleuth infrastructure M Singh A Rao M Wooldridge 1365 Springer Berlin 1997 pp 281296 Eds Intelligent Agents 4 Lecture Notes Artif Intell Vol 1371 P Presser Hybrid algorithms 3X AS Rao MI Geogeff constraint satisfaction problem Comput EA Sonenberg Social plans preliminary Intell 9 1993 268299 report Decentralized Artificial Intelligence Vol 3 Elsevier Amsterdam 1992 pp 5776 39 A Rapoport NPerson Game Theory University Michigan Press Ann Arbor Ml 1970 40 E Rasmusen Games Information Basil Blackwell Cambridge MA 1989 41 I TW Sandholm An implementation contract net protocol based marginal cost calculations Proceedings AAAI93 Washington DC 1993 pp 256262 1421 TW Sandholm VR Lesser Coalitions computationally bounded agents Artificial Intelligence 94 1997 99137 1431 LS Shapley A value nperson game HW Kuhn AW Tucker Eds Contributions Theory Games Princeton University Press 1953 1441 0 Shehory S Kraus Coalition formation autonomous C Castelfranchi 957 Springer Berlin 1993 pp 5772 JP Muller Eds From Reaction Cognition Lecture Noms agents strategies complexity Artif Intell Vol 1451 0 Shehory S Kraus Task allocation coalition formation autonomous agents Proceedings IJCAI95 Montreal Que 1995 pp 655661 1461 0 Shehory S Kraus Formation overlapping coalitions Proceedings precedenceordered ICMAS96 Kyoto Japan 1996 pp 330337 autonomous agents taskexecution 47 0 Shehory K Sycara S Jha Multiagent M Singh Ed Intelligent Agents 4 Lecture Notes Artif Intell Vol 1365 Springer coalition coordination formation A Rao M Wooldridge Berlin 1997 pp 143154 1481 RG Smith A framework distributed problem solving Proceedings IJCAI79 Tokyo 1979 pp 836 841 1491 RG Smith The contract net protocol highlevel communication control distributed problem solver IEEE Trans Comput 29 12 1980 1104l 113 SO K Sycara Persuasive argumentation 1511 K Sycara K Decker A Pannu M Williamson Designing negotiation Theory Decision 28 1990 203242 behaviors information agents Proceeding Agents97 Los Angeles CA 1997 pp 4Ow12 200 0 Shehory S Kraus Artcial Intelligence 101 1998 165200 52 K Sycara K Decker A Pannu M Williamson D Zeng Distributed intelligent agents IEEE Expert Intelligent Systems Their Applications 11 6 1996 3645 53 K Sycara D Zeng Coordination multiple intelligent software agents Intemat J Intelligent Cooperative Information Systems 5 23 1996 I8 I211 54 SN Talukdar L Baerentzen A Gove PS deSouza Asynchronous agents Technical Report EDRC185996 autonomous Engineering Design Research Center Pittsburgh PA 1996 55 G Tidhar AS Rao EA Sonenberg Guided team selection computerbased schemes teams cooperation Carnegie Mellon University Proceedings ICMAS96 Kyoto Japan 1996 pp 369376 56 WE Walsh MP Wellman A market protocol distributed task allocation Proceedings ICMAS 98 Paris France 1998 57 L Wang W Tsai Optimal assignment task modules precedence distributed processing graph matching statespace 58 MP Wellman A marketoriented search BIT 28 1988 5468 environment programming application distributed multicom modity flow problems J Artif Intell Res 1 1993 123 59 E Werner Toward theory communication cooperation multiagent planning Proceedings Second Conference pp 129143 Theoretical Aspects Reasoning Knowledge Pacific Grove CA 1988 60 M Williamson K Decker K Sycara Unified information control flow hierarchical task networks Proceedings AAAI96 Workshop Theories Planning Action Control Portland OR 1996 set nperson game endogenous 61 L Zhou A new bargaining formation Games coalition Economic Behavior 6 1994 512526 62 G Zlotkin J Rosenschein Negotiation task sharing autonomous agents cooperative domain Proceedings IJCAI89 Detroit Ml 1989 pp 912917 1631 G Zlotkin J Rosenschein Cooperation agents Artificial noncooperative domains Intelligence 21 6 1991 13171324 resolution negotiation IEEE Trans Systems Man Cybernetics Special conflict autonomous Issue Distributed 64 G Zlotkin J Rosenschein Coalition cryptography stability mechanisms Proceedings AAAI94 Seattle WA 1994 pp 432437 task oriented domains coalition formation