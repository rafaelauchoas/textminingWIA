Artiﬁcial Intelligence 129 2001 199218 Time complexity iterativedeepeningA Richard E Korf Michael Reid b Stefan Edelkamp c Computer Science Department University California Los Angeles Los Angeles CA 90095 USA b Department Mathematics Statistics University Massachusetts Amherst MA 010034515 USA c Institut für Informatik GeorgesKöhlerAllee Gebäude 51 79110 Freiburg Germany Received 15 February 2000 received revised form 3 February 2001 Abstract IDA We analyze time complexity iterativedeepeningA We ﬁrst calculate exact number nodes given depth regular search tree asymptotic bruteforce consistent admissible heuristic branching factor We use result analyze IDA function Previous analyses relied abstract analytic model characterized heuristic function terms accuracy apply concrete problems In contrast analysis actual problems slidingtile allows accurately predict performance IDA puzzles Rubiks Cube The heuristic function characterized distribution heuristic values problem space Contrary conventional wisdom analysis shows asymptotic heuristic branching factor bruteforce branching factor Thus effect heuristic function reduce effective depth search constant relative bruteforce search reducing effective branching factor 2001 Elsevier Science BV All rights reserved Keywords Problem solving Heuristic search IterativedeepeningA Heuristic branching factor Slidingtile puzzles Eight Puzzle Fifteen Puzzle Rubiks Cube Time complexity Branching factor 1 Introduction overview Our goal predict running time iterativedeepeningA IDA 5 linear space version A algorithm 4 Both algorithms rely heuristic evaluation function hn estimates cost reaching goal node n If hn admissi ble overestimates actual cost node n goal algorithms return optimal solutions Corresponding author Email addresses korfcsuclaedu RE Korf reidmathumassedu M Reid edelkampinformatikunifreiburgde S Edelkamp 0004370201 matter 2001 Elsevier Science BV All rights reserved PII S 0 0 0 4 3 7 0 2 0 1 0 0 0 9 4 7 200 RE Korf et al Artiﬁcial Intelligence 129 2001 199218 The running time IDA usually proportional number nodes expanded This depends cost optimal solution number nodes bruteforce search tree heuristic function In Section 2 compute size bruteforce search tree asymptotic branching factor In Section 3 use result predict number nodes expanded IDA consistent heuristic function The key analysis characterizing heuristic function Previous work problem characterized heuristic accuracy estimate actual solution cost The accuracy heuristic difﬁcult obtain corresponding asymptotic results based abstract model dont predict performance concrete problems In contrast characterize heuristic distribution values characterization easy determine As result predict performance IDA slidingtile puzzles Rubiks Cube 1 experimental results In contrast previous work analysis shows asymptotic heuristic branching factor bruteforce branching factor This implies effect heuristic function reduce effective depth search constant relative bruteforce search reducing effective branching factor Much work originally appeared AAAI98 papers bruteforce branching factor 2 analysis IDA 7 We begin bruteforce search trees 2 Branching factor regular search trees 21 Graph versus treestructured problem spaces Most problem spaces graphs cycles Given root node graph expanded tree For example Fig 1 shows search graph tree expansion rooted node A In tree expansion graph distinct path node graph generates different node tree The tree expansion graph larger original graph fact inﬁnite ﬁnite graph In paper focus problemspace trees The reason IDA uses depthﬁrst search save memory detect duplicate nodes Thus potentially explores path given node searches treeexpansion problemspace graph We characterize size bruteforce search tree asymptotic branching factor The branching factor node number children In trees different nodes different numbers children In case deﬁne asymptotic branching factor number nodes given depth divided number nodes shallower depth limit depth goes inﬁnity We present examples problemspace trees compute asymptotic branching factors We formalize problem solution set simultaneous equations We present analytic numerical techniques computing exact number nodes given depth determining asymptotic branching factor We branching factors Rubiks Cube slidingtile puzzles Five Puzzle NinetyNine Puzzle RE Korf et al Artiﬁcial Intelligence 129 2001 199218 201 Fig 1 Graph tree expansion Fig 2 Rubiks Cube 22 Example Rubiks Cube Consider Rubiks Cube shown Fig 2 We deﬁne 90 180 270 degree twist face Since faces gives initial branching factor 6 3 18 We twist face twice row result obtained single twist face This reduces branching factor 5 3 15 ﬁrst Note twists opposite faces independent commute For example twisting left face followed right face gives result twisting right face followed left face Thus opposite faces twisted consecutively require twisted particular order eliminate state resulting twisting opposite order For pair opposite faces arbitrarily label ﬁrst face second face Thus Left Up Front ﬁrst faces Right Down Back second faces After ﬁrst face twisted possible twists remaining ﬁve faces branching factor 15 After second face twisted twist 202 RE Korf et al Artiﬁcial Intelligence 129 2001 199218 remaining faces excluding face twisted corresponding ﬁrst face branching factor 12 Thus asymptotic branching factor 12 15 The exact asymptotic branching factor depends relative fraction nodes twist ﬁrst face type1 nodes twist second face type2 nodes Deﬁne equilibrium fraction type1 nodes number type1 nodes given depth divided total number nodes depth limit large depth The equilibrium fraction 12 twist ﬁrst face followed twist second face twist second face followed immediately twist corresponding ﬁrst face To determine asymptotic branching factor need equilibrium fraction type1 nodes The fraction type2 nodes minus fraction type1 nodes Each type1 node generates 2 3 6 type1 nodes 3 3 9 type2 nodes children difference twist ﬁrst face Each type2 node generates 2 3 6 type1 nodes 2 3 6 type2 nodes twist corresponding ﬁrst face second face Thus number type1 nodes given depth 6 times number type1 nodes previous depth plus 6 times number type2 nodes previous depth The number type2 nodes given depth 9 times number type1 nodes previous depth plus 6 times number type2 nodes previous depth Let f1 fraction type1 nodes f2 1 f1 fraction type2 nodes given depth If n total number nodes depth nf1 type1 nodes nf2 type2 nodes depth In limit large depth fraction type1 nodes converge equilibrium fraction remain constant Thus large depth f1 type1 nodes level total nodes level 6f1 6f2 15f1 12f2 6f1 61 f1 15f1 121 f1 6nf1 6nf2 6nf1 6nf2 9nf1 6nf2 2 6 3f1 12 f1 4 f1 Cross multiplying gives quadratic equation f 2 1 f1 f1 3 4f1 2 positive root 6 2 044949 This gives asymptotic branching factor 15f1 121 6 6 1334847 23 A simultaneous equations In general analysis produces simultaneous equations For example consider Five Puzzle 2 3 version wellknown slidingtile puzzles Fig 3A In problem branching factor node depends blank position In Fig 3B positions labelled s c representing corner positions respectively We dont generate parent node children avoid duplicate nodes representing state This requires keeping track current previous blank positions Let cs denote node blank currently position blank position corner position Deﬁne ss sc cc nodes analogously Since cs ss nodes children sc cc nodes child know equilibrium fractions different types nodes determine RE Korf et al Artiﬁcial Intelligence 129 2001 199218 203 Fig 3 The Five Puzzle asymptotic branching factor Fig 3C shows different types states arrows indicating type children generate For example double arrow ss sc indicates ss node generates sc nodes level Let Nt d number nodes type t depth d search tree Then write following recurrence relations directly graph Fig 3C For example equation comes fact arrows ss sc arrow cs sc Ncc d 1 Nsc d Ncs d 1 Ncc d Nss d 1 Ncs d Nsc d 1 2Nss d Ncs d The initial conditions ﬁrst generates ss node sc nodes cs node cc node depending blank starts corner position respectively 231 Numerical solution A simple way compute branching factor numerically compute values successive terms recurrences relative frequencies different state types converge Let fcc fcs fss fsc number nodes type given depth divided total number nodes depth After iterations equilibrium fractions fcc 0274854 fcs 0203113 fss 0150097 fsc 0371936 Since cs ss states generate children generate child asymptotic branching factor fcc 2fcs 2fss fsc 135321 Alternatively simply compute ratio total nodes successive depths branching factor The running time algorithm product number different types states case search depth In contrast searching actual tree depth 100 generate 1013 states case 232 Analytical solution To compute exact branching factor assume fractions eventually converge constant values This generates set equations recurrence Let b represent asymptotic branching factor If view fcc number cc nodes depth d example number cc nodes depth d 1 bfcc This allows rewrite recurrences following set equations The constrains fractions sum 204 RE Korf et al Artiﬁcial Intelligence 129 2001 199218 bfcc fsc bfcs fcc bfss fcs bfsc 2fss fcs 1 fcc fcs fss fsc Repeated substitution eliminate variables reduces ﬁve equations ﬁve unknowns single equation b4 b 2 0 solution b 135321 In general degree polynomial number different types states The Fifteen Puzzle example types positions types states If naive incorrect assumption blank position equally likely Five Puzzle incorrect branching factor 2 2 1 46 133333 Another natural erroneous approach include parent node children compute resulting branching factor subtract result eliminate inverse This gives incorrect branching factor 14142 Five Puzzle The error eliminating inverse changes equilibrium fractions different types states 24 Results We computed asymptotic branching factors square slidingtile puzzles 10 10 Table 1 gives odddepth branching factors puzzle The column geometric mean square root product best estimate overall branching factor Most values computed numerical iteration recurrence relations As n goes inﬁnity values converge branching factor inﬁnite slidingtile puzzle positions neighbors previous blank position To odd branching factors different color positions puzzle checkerboard pattern note blank moves squares Table 1 The asymptotic branching factor n2 1Puzzle n n2 1 Even depth Odd depth 3 4 5 6 7 8 9 10 8 15 24 35 48 63 80 99 15 21304 230278 251964 259927 269590 273922 279026 2 21304 243426 251964 264649 269590 276008 279026 Mean 3 21304 236761 251964 262277 269590 274963 279026 RE Korf et al Artiﬁcial Intelligence 129 2001 199218 205 different colors If sets differentcolored squares equivalent Five Fifteen Puzzles branching factor If sets differentcolored squares different Eight Puzzle different odd branching factors In general n m slidingtile puzzle different branching factors n m odd 25 Generality technique In problem spaces node branching factor In spaces node different branching factor requiring exhaustive search compute average branching factor The technique described determines size brute force search tree intermediate cases small number different types states generation follows regular pattern Computing size bruteforce search tree ﬁrst step determining time complexity IDA topic 3 Time complexity IDA IDA 5 uses cost function f n gn hn gn sum edge costs initial state node n hn estimate cost reaching goal node n Each iteration depthﬁrst search branch pruned reaches node total cost exceeds cost threshold iteration The cost threshold ﬁrst iteration heuristic value initial state increases iteration lowest cost nodes pruned previous iteration It continues goal node cost exceed current cost threshold 31 Previous work Most previous analyses heuristic search focused A 3910 abstract problemspace tree node b children edge unit cost single goal node depth d The heuristic characterized error estimating actual solution cost This model predicts heuristic constant absolute error results linear time complexity constant relative error results exponential time complexity 310 There limitations model The ﬁrst assumes path start goal state problem spaces contain multiple paths state The second limitation order determine accuracy heuristic single state determine optimal solution cost state expensive compute Doing signiﬁcant number states impractical large problems Finally results asymptotic dont predict actual numbers node generations Because limitations previous work accurately predict performance A IDA concrete problems real heuristics That requires different approach 206 RE Korf et al Artiﬁcial Intelligence 129 2001 199218 32 Overview We begin consistency property heuristics conditions node expansion A IDA Next characterize heuristic distribution heuristic values problem space Our main result formula number node expansions function heuristic distribution cost threshold iteration number nodes cost bruteforce search Finally compare analytic predictions experimental data Rubiks Cube Eight Fifteen Puzzles One implication analysis effect heuristic function decrease effective depth search constant reducing effective branching factor 33 Consistent heuristics One property heuristic required analysis consistent A heuristic function hn consistent node n neighbor ncid9 hn cid1 kn ncid9 hncid9 kn ncid9 cost edge n ncid9 9 An equivalent deﬁnition consistency pair nodes n m hn cid1 kn m hm kn m cost optimal path n m Consistency similar triangle inequality metrics implies admissibility vice versa However naturally occurring admissible heuristic functions consistent 9 34 Conditions node expansion We measure time complexity IDA number node expansions If node expanded children evaluated constant time asymptotic time complexity IDA simply number node expansions Otherwise product number node expansions time expand node Given consistent heuristic function A IDA expand nodes total cost f n gn hn c cost optimal solution 9 Some nodes optimal solution cost expanded goal node chosen expansion algorithms terminate In words f n c sufﬁcient condition A IDA expand node n f n cid1 c necessary condition For worstcase analysis adopt weaker necessary condition An easy way understand node expansion condition search algorithm guarantees optimal solutions continue expand possible solution path cost guaranteed exceed cost optimal solution lest lead better solution On ﬁnal iteration IDA cost threshold equal c cost optimal solution In worst case IDA expand nodes n cost f n gn hn cid1 c We ﬁnal iteration determines overall asymptotic time complexity IDA 35 Characterization heuristic Previous analyses characterized heuristic function accuracy estimator optimal costs As explained difﬁcult determine real heuristic RE Korf et al Artiﬁcial Intelligence 129 2001 199218 207 obtaining optimal solutions extremely expensive In contrast characterize heuristic function distribution heuristic values nodes problem space In words need know number states heuristic value 0 states heuristic value 1 number heuristic value 2 Equivalently specify distribution set parameters Dh fraction total states problem heuristic value equal h We refer set values overall distribution heuristic Dh deﬁned probability state chosen randomly uniformly states problem heuristic value equal h h range zero inﬁnity values h greater equal maximum value heuristic Dh 1 Table 2 shows overall distribution Manhattan distance heuristic Five Puzzle Manhattan distance computed counting number grid units tile displaced goal position summing values tiles The ﬁrst column Table 2 gives heuristic value The second column gives number states Five Puzzle heuristic value The column gives total number states given smaller heuristic value simply cumulative sum values second column The fourth column gives overall heuristic distribution Dh These values computed dividing value column 360 total number states problem space The remaining columns explained The overall distribution easily obtained heuristic For heuristics implemented tablelookup pattern databases 168 distribution determined exactly scanning table Alternatively heuristic computed function Manhattan distance large slidingtile puzzles randomly sample problem space estimate overall distribution desired degree accuracy For heuristics Table 2 Heuristic distributions Manhattan distance Five Puzzle h States Sum Dh Corner Side Csum Ssum P h 0 1 2 3 4 5 6 7 8 9 10 11 12 1 2 3 6 30 58 61 58 60 48 24 8 1 1 3 6 12 42 100 161 219 279 327 351 359 360 0002778 0008333 0016667 0033333 0116667 0277778 0447222 0608333 0775000 0908333 0975000 0997222 1000000 1 1 1 5 25 38 38 41 44 31 11 4 0 0 1 2 1 5 20 23 17 16 17 13 4 1 1 2 3 8 33 71 109 150 194 225 236 240 240 0 1 3 4 9 29 52 69 85 102 115 119 120 0002695 0008333 0016915 0033333 0115424 0276701 0446808 0607340 0773012 0906594 0974503 0997057 1000000 208 RE Korf et al Artiﬁcial Intelligence 129 2001 199218 maximum different heuristics approximate distribution combined heuristic distributions individual heuristics assuming individual heuristic values independent The distribution heuristic function measure accuracy says little correlation heuristic values actual costs The connection accuracy heuristic distribution given admissible heuristics higher values accurate lower values average 351 The equilibrium distribution While overall distribution easiest understand complexity IDA depends potentially different distribution The equilibrium distribution P h deﬁned probability node chosen randomly uniformly nodes given depth bruteforce search tree heuristic value equal h limit large depth If states problem occur equal frequency large depths search tree equilibrium distribution overall distribution For example case Rubiks Cube search tree described Section 22 In general equilibrium distribution equal overall distribution In Five Puzzle example overall distribution assumes states blank positions equally likely As saw Section 23 deep levels tree blank position 13 nodes corner position 23 nodes In limit large depth equilibrium frequency positions fs fcs fss 0203113 0150097 035321 Similarly frequency corner positions fc fcc fsc 0274854 0371936 064679 1 fs Thus compute equilibrium distribution equilibrium fractions account The ﬁfth sixth columns Table 2 labelled Corner Side number states blank corner position respectively heuristic value The seventh eighth columns labelled Csum Ssum cumulative numbers corner states heuristic values equal particular heuristic value The column gives equilibrium distribution P h The probability P h heuristic value node equal h probability corner node 064679 times probability heuristic value equal h given corner node plus probability node 035321 times probability heuristic value equal h given node For example P 2 064679 3240 035321 3120 0016915 This differs overall distribution D2 0016667 The equilibrium heuristic distribution property problem problem space For example including parent node children affect equilibrium distribution changing equilibrium fractions different types states When equilibrium distribution differs overall distribution computed pattern database random sampling problem space combined equilibrium fractions different types states illustrated RE Korf et al Artiﬁcial Intelligence 129 2001 199218 209 Fig 4 Sample tree analysis IDA 36 An example search tree To provide intuition main result Fig 4 shows schematic represen tation search tree generated iteration IDA abstract problem instance edges unit cost The vertical axis represents depth node g value horizontal axis represents heuristic value node Each box represents set nodes depth heuristic value labelled number nodes The arrows represent relationship parent child node sets These particular numbers generated assuming node generates child heuristic value equal greater heuristic value parent For example 6 nodes depth 3 heuristic value 1 1 parent heuristic value 1 2 parents heuristic value 2 3 parents heuristic value 3 In example maximum value heuristic 4 heuristic value initial state 3 One assumption analysis heuristic consistent Because edges unit cost example heuristic value child heuristic value parent minus We assume cutoff threshold moves iteration IDA Solid boxes represent sets fertile nodes 210 RE Korf et al Artiﬁcial Intelligence 129 2001 199218 expanded dotted boxes represent sets sterile nodes expanded total cost f n gn hn exceeds cutoff threshold 8 The diagonal line separates fertile node sets sterile node sets 361 Nodes expanded function depth The values far right Fig 4 number nodes expanded depth number fertile nodes depth Ni number nodes brute force search tree depth P h equilibrium heuristic distribution The number nodes generated branching factor times number expanded Consider graph There root node depth 0 generates N1 children These nodes collectively generate N2 child nodes depth 2 Since cutoff threshold 8 moves worstcase nodes n total cost f n gn hn cid1 8 expanded Since 4 maximum heuristic value nodes depth 8 4 4 expanded Thus d cid1 4 number nodes expanded depth d Nd bruteforce search Since 4 maximum heuristic value P 4 1 N4P 4 N4 The nodes expanded depth 5 fertile nodes f n gn hn 5 hn cid1 8 hn cid1 3 At sufﬁciently large depths distribution heuristic values converges equilibrium distribution Assuming heuristic distribution depth 5 approximates equilibrium distribution fraction nodes depth 5 hn cid1 3 approximately P 3 Since nodes depth 4 expanded total number nodes depth 5 N5 number fertile nodes N5P 3 There exist nodes depth 6 heuristic values 0 4 distribution equal equilibrium distribution In particular nodes heuristic values 3 4 shown dotted boxes underrepresented relative equilibrium distribution nodes generated parents heuristic values 2 4 At depth 5 nodes heuristic value 4 sterile producing offspring depth 6 reducing number nodes depth 6 heuristic values 3 4 The number nodes depth 6 hn cid1 2 completely unaffected pruning parents nodes depth 5 hn cid1 3 fertile In words number nodes depth 6 hn cid1 2 fertile nodes exactly bruteforce search tree N6P 2 Due consistency heuristic function possible parents fertile nodes fertile Thus number nodes left diagonal line Fig 4 exactly bruteforce search tree In words heuristic pruning tree effect number fertile nodes effect sterile nodes If heuristic inconsistent distribution fertile nodes change level pruning occurred making analysis far complex When edges unit cost number fertile nodes depth Ni P d Ni number nodes bruteforce search tree depth d cutoff depth P equilibrium heuristic distribution The total number nodes expanded iteration IDA depth d dcid1 i0 Ni P d RE Korf et al Artiﬁcial Intelligence 129 2001 199218 211 37 General result Here state prove main theoretical result First assume minimum edge cost divide costs value normalizing We express costs multiples minimum edge cost We allow operators different costs replace depth node gn sum edge costs root node Let Ni number nodes n bruteforce search tree gn Next assume heuristic returns integer multiple minimum edge cost Given admissible noninteger valued heuristic round larger integer preserving admissibility We assume heuristic consistent meaning nodes n m hn cid1 kn m hm kn m cost optimal path n m Given assumptions task determine EN c P number nodes n f n gn hn cid1 c given problemspace tree Ni nodes cost heuristic characterized equilibrium distribution P x This number nodes expanded iteration IDA cost threshold c worst case Theorem 1 In limit large c EN c P ccid1 i0 Ni P c Proof EN c P number nodes n f n gn hn cid1 c Consider nodes n gn set nodes cost bruteforce search tree There Ni nodes The nodes cost expanded IDA iteration cost threshold c f n gn hn hn cid1 c hn cid1 c By deﬁnition P limit large number nodes bruteforce search tree NiP c It remains nodes bruteforce search tree tree generated IDA Consider ancestor node m node n Since m ancestor n path tree gn gm Km n Km n cost path node m node n Since f m gm hm gm Km n f m Km n hm Since heuristic consistent hm cid1 n hn n cost optimal path m n problem graph Since Km n cid2 n hm cid1 Km n hn Thus f m cid1 Km n Km n hn f m cid1 hn Since hn cid1 c f m cid1 c f m cid1 c This implies node m fertile expanded search Since ancestors node n fertile expanded node n eventually generated Therefore nodes n bruteforce search tree f n gn hn cid1 c tree generated IDA Since nodes IDA tree bruteforce search tree number nodes level IDA tree Ni P c Therefore total number nodes expanded IDA iteration cost threshold c number iteration EN c P ccid1 i0 Ni P c 212 RE Korf et al Artiﬁcial Intelligence 129 2001 199218 38 The heuristic branching factor The effect earlier iterations time complexity IDA depends rate growth node expansions successive iterations The heuristic branching factor ratio number nodes expanded search cost threshold c divided nodes expanded search cost c 1 EN c P EN c 1 P 1 normalized minimum edge cost Assume size bruteforce search tree grows exponentially cost Ni bi b bruteforce branching factor In case heuristic branching factor EN c P EN c 1 P c i0 biP c c1 i0 biP c 1 b0P c b1P c 1 b2P c 2 bcP 0 b0P c 1 b1P c 2 bc1P 0 cid2 cid2 The ﬁrst term numerator b0P c equal dropped signiﬁcantly affecting ratio Factoring b remaining numerator gives bb0P c 1 b1P c 2 bc1P 0 b0P c 1 b1P c 2 bc1P 0 b Thus bruteforce tree grows exponentially branching factor b running time successive iterations IDA grows factor b In words heuristic branching factor bruteforce branching factor In case easy overall time complexity IDA bb 1 times complexity iteration 5 Previous analyses based different assumptions predicted effect heuristic function reduce search complexity Obc Oac b reducing effective branching factor 9 Our analysis shows exponential tree effect heuristic reduce search complexity Obc Obck constant k depends heuristic function If deﬁne effective depth search log base b number nodes expanded b bruteforce branching factor heuristic reduces effective depth c c k constant k In words heuristic search cost c generates number nodes bruteforce search cost c k 39 Experimental results We tested analysis experimentally predicting performance IDA Rubiks Cube slidingtile puzzles wellknown heuristics Since operators unit cost problems gn cost node n depth For Ni exact numbers nodes depth computed recurrence relations described Section 23 391 Rubiks Cube We ﬁrst predicted existing data Rubiks Cube 6 The problem space described Section 22 allows 180degree twists single moves disallows consecutive twists face allows consecutive twists opposite faces order This RE Korf et al Artiﬁcial Intelligence 129 2001 199218 213 Table 3 Nodes generated IDA Rubiks Cube Depth Theoretical Problems Experimental Error 10 11 12 13 14 15 16 17 1510 20169 269229 3593800 47971732 640349193 8547681506 114098463567 1000 1000 1000 100 100 100 100 25 1501 0596 20151 0089 270396 0433 3564495 0815 47916699 0115 642403155 0321 8599849255 0610 114773120996 0591 search tree bruteforce branching factor 1334847 The median optimal solution depth 18 moves The heuristic maximum different pattern databases 16 It admissible consistent maximum value 11 moves average value 8898 moves The distribution individual heuristics calculated exactly scanning databases heuristics assumed independent calculate distribution combined heuristic In case equilibrium distribution overall distribution We ignored goal states completing search iteration In Table 3 ﬁrst column shows cutoff depth column gives node generations predicted theory column indicates number problem instances run column displays average number nodes generated IDA single iteration column shows error theoretical prediction experimental results The theory predicts data 1 accuracy case Sources error include limited number problem instances assumption independence heuristics fact heuristic distribution ﬁnite depth equal equilibrium distribution The ratio node generations levels experimental heuristic branching factor 1334595 compared theoretical value 1334847 If log base 1334847 predicted number nodes generated depth 17 114098463567 9825 Thus particular heuristic reduces effective depth search 17 9825 7175 moves 392 Eight Puzzle We experimented Eight Puzzle Manhattan distance heuristic It maximum value 22 moves mean value 14 moves The optimal solution length averages 22 moves maximum 31 moves assuming blank corner goal state Since Eight Puzzle 181440 solvable states heuristic distributions computed exactly Three distributions depending blank center corner position The number nodes type depth bruteforce tree computed exactly 214 RE Korf et al Artiﬁcial Intelligence 129 2001 199218 Table 4 Nodes expanded IDA Eight Puzzle Depth Theoretical Problems Experimental 20 21 22 23 24 25 26 27 28 29 30 31 393 657 1185 1977 3561 5936 10686 17815 32072 53450 96207 160167 181440 181440 181440 181440 181440 181440 181440 181440 181440 181440 181440 181440 393 657 1185 1977 3561 5936 10686 17815 32072 53450 96207 160167 Error 00 00 00 00 00 00 00 00 00 00 00 00 Table 4 shows comparison number node expansions predicted theoretical analysis number nodes expanded single iteration IDA depths ignoring goal states Each data point average 181440 problem instances Since average numbers node expansions size bruteforce tree heuristic distributions exact model predicts experimental data exactly multiple decimal places verifying accounted relevant factors The Eight Puzzle odddepth bruteforce branching factors 15 2 The corresponding heuristic branching factors 1667 18 product 3 number branching factors 3 cases If log base nodes expanded depth 31 160167 218 This implies Eight Puzzle Manhattan distance reduces effective depth search 31218 92 moves 393 Fifteen Puzzle We ran similar experiment Fifteen Puzzle Manhattan distance heuristic The average heuristic value 37 moves maximum 62 moves The average optimal solution length 525 moves Since Fifteen Puzzle 1013 solvable states random sample billion solvable states approximate heuristic distributions Three different distributions blank middle corner position The number nodes type depth computed exactly different initial blank position Table 5 similar Table 4 Each line average 100000 random solvable problem instances Despite orders magnitude variation nodes expanded individual problem instances average values agree theoretical prediction 1 cases The ratio experimental number node expansions RE Korf et al Artiﬁcial Intelligence 129 2001 199218 215 Table 5 Nodes expanded IDA Fifteen Puzzle Depth Theoretical Problems Experimental Error 40 41 42 43 44 45 46 47 48 49 50 42664 90894 193641 412535 878864 1872330 3988805 8497734 18103536 38567693 82164440 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 41973 91495 191219 415490 870440 1886363 3959729 8562824 18003959 38864269 81826008 165 066 127 072 096 075 073 077 055 077 041 depths 2105 compared bruteforce branching factor 2130 If log base 213 predicted number nodes expanded depth 50 82164440 241 Thus Fifteen Puzzle Manhattan distance reduces effective depth search 50 241 259 moves The results single complete iterations given search depths ignoring solutions How results predict running time IDA solve random problem instance The average optimal solution length random Fifteen Puzzle instances 525 moves 8 Multiplying value Table 5 b2 213042 predicts 372911869 node expansions complete iteration depth 52 794451446 node generations Multiplying b2b2 1 12826 account previous iterations predicts 1019 billion node generations Completing ﬁnal iteration ﬁnd optimal solutions set 1000 problem instances generates average 1178 billion nodes Terminating IDA ﬁrst solution generates average 401 million nodes 394 TwentyFour Puzzle We predict performance IDA problems run experimentally TwentyFour Puzzle Manhattan distance heuristic The bruteforce branching factor 236761 Sampling billion random solvable states yields approximation overall heuristic distribution approximates equilibrium distribution The average heuristic value 76 moves Experiments powerful disjoint pattern database heuristics 8 average optimal solution length 100 moves Our theory predicts running iterations depth 100 generate average 1217 1019 nodes On 440 MHz Sun Ultra 10 workstation IDA Manhattan distance generates 75 million nodes second This predicts average time complete iterations depth 100 random instance TwentyFour 216 RE Korf et al Artiﬁcial Intelligence 129 2001 199218 Puzzle ignoring solutions 50000 years Manhattan distance reduces effective depth search TwentyFour Puzzle 49 moves 395 Observed heuristic branching factor If run IDA single instance slidingtile puzzle observe ratio numbers nodes generated successive iterations usually decreases iteration exceeds theoretical heuristic branching factor On slidingtile puzzles Manhattan distance cost threshold increases successive iteration theoretical heuristic branching factor square brute force branching factor For example TwentyFour Puzzle observed heuristic branching factor greater 10 b2 56 The reason discrepancy initial transient observed heuristic branching factor The formula Theorem 1 based equilibrium heuristic distribution Starting single initial state takes iterations IDA heuristic distribution converge equilibrium distribution This effect ameliorated results presented experimental data averaged large number initial states If run IDA long single problem instance observed heuristic branching factor eventually converges square bruteforce branching factor Why observed heuristic branching factor greater theoretical branching factor The heuristic distribution root search tree starts heuristic value initial state gradually spreads larger smaller heuristic values increasing depth Thus frequency small large heuristic values initially zero underestimating frequency equilibrium heuristic distribution Underestimating large values little effect frequency values multiplied relatively small number nodes shallow depths The frequencies small values multiplied large numbers nodes deep depths underestimating values signiﬁcantly decreases number node generations relative happens equilibrium As search depth increases successive iterations frequency nodes small heuristic values increases causes larger observed heuristic branching factor occurs equilibrium In Rubiks Cube observed heuristic branching factor converges bruteforce value consistently overestimating initially This smaller range heuristic values larger branching factor allows convergence equilibrium heuristic distribution quickly 4 Conclusions We ﬁrst compute exact number nodes different depths asymptotic branching factor bruteforce search trees different nodes different numbers children We begin writing set recurrence relations generation different node types By expanding recurrence relations determine exact number nodes given depth time linear depth We use ratio numbers nodes successive depths approximate asymptotic branching factor high precision Alternatively rewrite RE Korf et al Artiﬁcial Intelligence 129 2001 199218 217 recurrence relations set simultaneous equations involving relative frequencies different types nodes solve analytically small numbers node types We asymptotic branching factors Rubiks Cube Five Puzzle ﬁrst square slidingtile puzzles We use results predict time complexity IDA We characterize heuristic distribution heuristic values obtained random sampling example We compare predictions experimental data Rubiks Cube Eight Puzzle Fifteen Puzzle getting agreement 1 Rubiks Cube Fifteen Puzzle exact agreement Eight Puzzle In contrast previous results analysis experiments indicate exponential tree asymptotic heuristic branching factor bruteforce branching factor Thus effect heuristic reduce effective depth search constant relative bruteforce search reducing effective branching factor 5 Generality work To extent results applied problems Our main result Theorem 1 It says number nodes n f n gn hn cid1 c convolution distributions The ﬁrst number nodes given cost bruteforce search space second number nodes given heuristic value In order apply particular problem determine size bruteforce search space heuristic distribution Thus decomposed problem predicting performance heuristic search algorithm simpler problems How use analysis predict performance A The main difference A IDA A detects duplicate nodes doesnt reexpand Theorem 1 applies A Ni number nodes problemspace graph tree expansion Unfortunately technique known computing number nodes given depth search graph exhaustive search depth As result values unknown regular problem spaces Fifteen Puzzle Rubiks Cube The relevant heuristic distribution P h analyzing A overall heuristic distribution Dh state occurs problem space As example predict performance IDA traveling sales man problem In problem space constructs tour adding city time node represents partial tour number nodes depth d number mutations n 1 elements taken d time Computing distribution heuristic cost minimum spanning tree remaining cities difﬁcult It depends depth search particular problem instance If edge costs heuristic values real numbers integers discrete convolution Theorem 1 continuous convolution summation integral While solve problem currently Theorem 1 tells distributions need combine The running time IDA depends branching factor heuristic distribution optimal solution cost Predicting optimal solution cost given problem 218 RE Korf et al Artiﬁcial Intelligence 129 2001 199218 instance average optimal solution cost open problem Since number nodes problemspace tree grows factor b succeeding depth lower bound maximum optimal solution depth log base b number reachable states rounded larger integer This estimate average solution depth For example method predicts depth 22 moves Eight Puzzle equals average optimal solution length For Rubiks Cube method predicts value 18 moves median optimal solution length For Fifteen Puzzle estimate 40 moves average solution depth 525 moves The reason method doesnt accurately predict maximum solution depth assumes states search tree unique For problems multiple paths state giving rise duplicate nodes tree representing state Acknowledgements We like thank Eli Gafni Elias Koutsoupias Mitchell Tsai helpful discussions R Korf supported NSF grant IRI9619447 S Edelkamp supported DFG project entitled Heuristic Search Application Protocol Validation References 1 J Culberson J Schaeffer Pattern databases Comput Intelligence 14 4 1998 318334 2 S Edelkamp RE Korf The branching factor regular search spaces Proc AAAI98 Madison WI 1998 pp 299304 3 J Gaschnig Performance measurement analysis certain search algorithms PhD Thesis Department Computer Science CarnegieMellon University Pittsburgh PA 1979 4 PE Hart NJ Nilsson B Raphael A formal basis heuristic determination minimum cost paths IEEE Transactions Systems Science Cybernetics 4 2 1968 100107 5 RE Korf Depthﬁrst iterativedeepening An optimal admissible tree search Artiﬁcial Intelligence 27 1 1985 97109 6 RE Korf Finding optimal solutions Rubiks Cube pattern databases Proc AAAI97 Providence RI 1997 pp 700705 7 RE Korf M Reid Complexity analysis admissible heuristic search Proc AAAI98 Madison WI 1998 pp 305310 8 RE Korf A Felner Disjoint pattern database heuristics Artiﬁcial Intelligence Special Issue Chips Challenging Champions Advances Computational Intelligence GamePlaying 2001 appear 9 J Pearl Heuristics AddisonWesley Reading MA 1984 10 I Pohl Practical theoretical considerations heuristic search algorithms W Elcock D Michie Eds Machine Intelligence Vol 8 Ellis Horwood Chichester 1977 pp 5572