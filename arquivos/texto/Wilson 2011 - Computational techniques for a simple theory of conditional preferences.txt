Artiﬁcial Intelligence 175 2011 10531091 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Computational techniques simple theory conditional preferences Nic Wilson Cork Constraint Computation Centre Department Computer Science University College Cork Cork Ireland r t c l e n f o b s t r c t A simple logic conditional preferences deﬁned language allows compact representation certain kinds conditional preference statements semantics proof theory CPnets TCPnets mapped logic semantics proof theory generalise CPnets TCPnets The express preferences lexicographic kind The paper derives suﬃcient conditions set conditional preferences consistent algorithmic techniques checking conditions conﬁrming consistency These techniques totally ordering outcomes way consistent set preferences developed approach problem constrained optimisation conditional preferences 2010 Elsevier BV All rights reserved Article history Received 28 February 2009 Received revised form 9 August 2010 Accepted 9 August 2010 Available online 2 December 2010 Keywords Conditional preferences Comparative preferences Ceteris paribus preferences CPnets TCPnets Constrained optimisation Lexicographic preferences 1 Introduction cid3 cid3 x x The formalism CPnets 34 designed compactly expressing conditional comparative preferences multivariate problems A CPnet involves statements form u x x values variable X u assignment set variables U called parents X The interpretation given u x strictly preferred x cid3 equal ceteris paribus assignments s variables S sux preferred sux sux outcome complete assignment α α X x αU u αS s The statement compactly represents exponentially preferences outcomes This conditional preference preference values X conditional values variables U It represents comparative preferences preference statements relate directly ordering outcomes contrast theories preference assign form grade outcomes outcomes compared comparing grades Comparative preference statements easier reliably elicit easier judge alternative preferred allocate particular grades preference alternatives cid3 Another key feature CPnets related languages ceteris paribus aspect interpretation If tells theyd prefer green car white car wouldnt usually mean theyd prefer green car white car ceteris paribus interpretation green car preferred car similar white natural However tend lead weak inferences user want express stronger statements form x preferred x irrespective values variables variable X important variable example x represents value avoided possible cid3 cid3 This paper develops formalism similar lines CPnets richer language preference statements expressed stronger conditional preference statements usual CPnets ceteris paribus statements The Tel 353 21 4205954 fax 353 21 4205369 Email address nwilson4cuccie 00043702 matter 2010 Elsevier BV All rights reserved doi101016jartint201011018 1054 N Wilson Artiﬁcial Intelligence 175 2011 10531091 cid3 W assignments t S W tuxw preferred tux cid3W W subset S represents assign language consists statements form u x x cid3 ments w w So given u t x preferred x irrespective values W CPnets ceteris paribus statements represented statements W cid3V X V set strong conditional preference statement previous paragraph corresponds cid5 x x variables As CPnets extension TCPnets 68 compact representation statement typically corresponds preferences outcomes w cid3 cid3 The section introduces new formalism viewed simple logic conditional preferences A cp theory Γ associated preference relation Γ outcomes Γ considered compact representation Γ A semantics given complete proof theory based swapping sequences natural generalisation ﬂipping sequences CPnets TCPnets Section 3 examines relative expressivity language compared CPnets It shows CPnet orderings Section 31 TCPnet orderings Section 32 represented language stronger kind preference statement example construct lexicographic order outcomes expressible languages CPnets TCPnets Sections 33 34 Section 35 illustrates ceteris paribus statements CPnets tend weak showing hard CPnet generate total order outcomes Sections 4 5 6 7 concerned interrelated topics determining consistency cptheory totally ordering sets outcomes constrained optimisation Most work CPnets TCPnets assumed strong acyclicity property variables 1211 generally weaker assumptions desirable natural sets conditional preference statements easily fail acyclic sense A necessary condition consistency derived local consistency Section 41 suﬃcient conditions determining conditions hold hard determining consistency A cptheory consistent exists strict total order outcomes satisﬁes We focus particular kind strict total order generated complete search tree cstree Section 42 backtracking search solutions constraint satisfaction problem associated strict total order order outcomes visited search tree We derive suﬃcient conditions cstree satisfy cptheory If exists cstree satisfying cptheory Γ proved Γ consistent Furthermore use satisfying cstree totally ordering sets outcomes constrained optimisation algorithm Section 44 making use upper approximation preference relation relation outcomes extends preference relation For fully acyclic case graph formed dependencies importance acyclic deﬁning satisfying cstree straightforward shown Section 5 implies Γ consistent locally consistent condition easy check For general cases situation complicated Sections 6 7 derive complex methods constructing satisfying cstrees Section 6 considers weaker forms acyclicity cptheories strong conditional acyclicity Section 61 cucacyclicity Section 62 suﬃcient conditions cptheory consistent A polynomial upper approximation derived cucacyclic cp theories Proving consistency cptheory explicitly giving cstree satisﬁes cptheory typically feasible cstree exponentially large object However cstrees deﬁned compact way based implicit representations variable value orderings deﬁning value ordering easy given cptheory locally consistent Section 7 deﬁnes compact computational structure associated techniques deﬁning variable order ings cstree satisfying cptheory conﬁrming consistency ordering outcomes constrained optimisation Section 8 discusses related work Section 9 concludes Appendix A contains proofs 2 A logic conditional preferences In section simple logic conditional preferences deﬁned language semantics kind proof theory As Sections 31 32 CPnets TCPnets expressed language The logic somewhat restrictive language restrictions entail nice properties generalising properties CPnets After giving basic deﬁnitions ordering relations Section 21 deﬁne cptheories associated pref erence relations Section 22 A semantics Section 23 proof theory Section 24 deﬁned completeness result Theorem 1 21 Ordering relations In section basic deﬁnitions properties ordering relations paper A binary relation cid6 set Ω deﬁned subset Ω Ω notations b cid6 cid6 b interchangeably Since binary relations sets talk intersection union containment So particular cid6 cid6cid3 holds cid6 b implies b We case cid6cid3 cid6cid3 binary relations Ω cid6 cid6cid3 extends cid6 contains cid6 cid6cid3 N Wilson Artiﬁcial Intelligence 175 2011 10531091 1055 Let cid6 binary relation set Ω cid6 said reﬂexive cid6 Ω It said irreﬂexive Ω case cid6 Relation cid6 said transitive b c Ω cid6 b b cid6 c hold cid6 c holds For relation cid6 exists unique setwise minimal transitive relation R containing cid6 equal intersection transitive relations Ω containing cid6 R known transitive closure cid6 Irreﬂexive relation cid6 said acyclic transitive closure irreﬂexive exists cycle cid6 cid3cid3 cid6 cid6 Relation cid6 said strict partial order transitive irreﬂexive A strict partial order acyclic A strict total order cid6 strict partial order different b Ω cid6 b holds b cid6 holds cid3 cid6 We summarise wellknown properties ordering relations ii generalised inﬁnite sets Szpilrajns Extension Theorem 25 Lemma 1 Let cid6 binary relation ﬁnite set Ω Then following properties hold Suppose cid6 strict partial order Ω α β Ω case α cid6 β Then cid6 β α ii If cid6 strict partial order extended strict total order exists strict total order cid6cid3 Ω acyclic cid6 cid6cid3 α cid6 β α cid6cid3 β iii If cid6 irreﬂexive acyclic extended strict total order Ω iv Suppose cid6 irreﬂexive Then cid6 acyclic transitive closure irreﬂexive exists strict total ordering extending v If cid6 strict partial order cid6 equal intersection strict total orders extending 22 cptheories associated preference relations In section deﬁne formalism compactly expressing comparative preferences Before deﬁning cptheories ﬁrst introduce notation outcomes assignments Variables tuples outcomes X For subset variables U V use notation U U Formally U set functions U X U assign value X variable X 1 Let V set variables X V let Domain X set possible values XU Domain X represent set possible assignments cid2 The assignment set variables written cid5 A complete tupleassignment outcome element V assignment variables Let A assignment variables A let u U assignment variables U A V We write cid11 u mean projected U gives u written aU u We extends u 221 cptheories cid3 x For set variables V language LV abbreviated L consists statements form u x x assignment set variables U V u U x x cid3 x x cid3 write uϕ u U ϕ U xϕ x x ϕ correspond different values X W subset V U X If ϕ statement u x x W ϕ W Tϕ V X U W cid3W u cid3 X different assignments variable X U cid3W Subsets L called conditional preference theories cptheories V For ϕ u x x cid3 pairs outcomes tuxw tux α β ϕ intended compact representation preference information ϕ cid3 given u t x preferred x deﬁne Γ ϕΓ ϕ natural deﬁne order Γ induced V Γ transitive closure Γ represented terms statements u x x variable cid3W let ϕ set intended represent preference Informally ϕ represents irrespective assignments W For conditional preference theory Γ L represents set preferences We assume preferences transitive In Section 3 shown CPnets cid3W W TCPnets statements W containing cid3 W Such pairs α β ϕ cid3 t Tϕ w w Γ cid3 w Conditional preference theories allow locally partially ordered preferences need assume elicit total order values variable given assignment parents This kind representation conditional preferences ﬂexible regards elicitation reason arbitrary subset Γ language L accept conditional preference statements appropriate form agent happy More statements added later logic monotonic Γ cid7 implies Γ cid7 previous deductions Γ hold particular outcome preferred 222 Example A Im planning holiday I week n later year n Ive decided Oxford o Manchester o I plane p drive car ferry p So variables X1 X2 1 For variable X V elements X written form X value X onetoone correspondence Domain X We usually slightly abuse notation refer element X value X refer X domain X 1056 N Wilson Artiﬁcial Intelligence 175 2011 10531091 Fig 1 The ordering outcomes Example A For 2 5 edge outcome α outcome β labelled preference statement ϕi entails α preferred β iff α β ϕ All outcomes lefthand oval dominate ϕ1 outcomes All edges form Γ Γ transitive closure set Γ orderings X3 X1 n n X2 o o X3 p p Firstly Id prefer week irrespective choices variables I break soon This represented statement ϕ1 equals cid5 n n X2 X3 This represents set ϕ 1 pairs outcomes nw 1 nw 2 w 1 w 2 arbitrary assignments set variables X2 X3 setting w 1 op w 2 op gives pair nop nop indicating preference nop nop ϕ1 compact way representing 16 pairs ϕ 1 Secondly equal ceteris paribus Id prefer Oxford Manchester We represent statement ϕ2 equals cid5 o o This unconditional ceteris paribus statement It represents set ϕ 2 pairs outcomes x1ox3 x1ox3 meaning outcome x1ox3 preferred x1ox3 x1 value X1 x3 value X3 My preferences variable X3 conditional Id prefer ﬂy drive I later year Manchester weather warmer car useful touring This represented conditional preference statements ϕ3 ϕ4 ϕ5 deﬁned follows ϕ3 n p p ϕ4 o p p ϕ5 5 consists single preference nop nop ϕ p p representing ϕ Let Γ ϕ1 ϕ5 The statement ϕ1 represented CPnet V X1 X2 X3 The involve W The induced partial ordering Γ outcomes shown transitive closure nop Γ nop nop Γ nop Γ nop Γ nop Γ nop Γ nop Γ total order pair outcomes nop nop ordered Fig 1 nop nop 5 223 Graphs HΓ GΓ V fully acyclic cptheories In paper deﬁne kinds directed graph set variables Directed graphs notation introduce following notation For S T V deﬁne S T set edges X Y X S Y T In addition S T singleton set omit set brackets abbreviating S X S X Let Γ cptheory set variables V We deﬁne pair binary relations V considered directed graphs The dependency graph HΓ consists edges U ϕ Xϕ ϕ Γ In words HΓ consists pairs form Y Xϕ ϕ Γ Y U ϕ HΓ contains edge Y X conditional preference statement ϕ Γ makes preferences X conditional Y HΓ encodes dependency information Given ﬁxed Γ variable X V write U X mean parents variable X respect HΓ set variables Y Y X HΓ U X set variables preference X depend Deﬁne GΓ contain U ϕ Xϕ Xϕ W ϕ ϕ Γ GΓ ϕΓ Xϕ W ϕ GΓ HΓ extra edges X Z preference statement ϕ Γ representing preference values X irrespective value Z implies X important Z context GΓ represents dependency relative importance information ϕΓ U ϕ Xϕ cid3 cid3 We cptheory Γ fully acyclic GΓ acyclic Fully acyclic cptheories studied Section 5 In example happens case HΓ GΓ acyclic Γ fully acyclic HΓ X1 X3 X2 X3 GΓ equals total order variables X1 X2 X1 X3 X2 X3 However generally need Suppose cptheory Γ contains following statements If I later year Oxford Id prefer drive ﬂy If I ﬂy week Id prefer Manchester Oxford HΓ contains X2 X3 X3 X2 There unreasonable inconsistent particular preferences disjoint contexts ﬁrst later year second travelling week 23 Semantic entailment cptheories In section deﬁne semantics notion consistency cptheories We deﬁne models L strict total orders V irreﬂexive transitive binary relations V α β V α cid13 β α β β α For strict total order conditional preference statement ϕ L satisﬁes ϕ cid11 ϕ ϕ cid3 Therefore ϕ statement u x x For cptheory Γ L satisﬁes Γ cid11 Γ satisﬁes element Γ Γ cid3W satisﬁes ϕ t T w w cid3 cid3 W tuxw tux w We model Γ N Wilson Artiﬁcial Intelligence 175 2011 10531091 1057 Deﬁnition 1 Semantic entailment For Γ L ϕ L deﬁne semantic entailment relation Γ cid11 ϕ cid11 ϕ cid11 Γ For α β V Γ cid11 α β α β holds models Γ Deﬁnition 2 Consistency cptheory We cptheory Γ consistent model exists strict total order cid11 Γ For Example A consider model deﬁned transitive closure nop nop nop nop nop nop nop nop Total order satisﬁes ϕ1 cid5 n n X2 X3 outcome extending n preferred outcome extending n α β outcomes α β α X1 n β X1 n It checked satisﬁes statement Γ satisﬁes Γ extends Γ This shows Γ consistent Γ model differs orders outcomes nop nop Hence example Γ cid11 nop nop case Γ cid11 nop nop exists model Γ nop nop Γ cid11 nop nop The construction semantic entailment relation cid11 ensures monotonic particular Γ cid7 L Γ cid11 α β cid7 cid11 α β The following lemma sums basic properties semantic entailment Lemma 2 Let Γ L cptheory variables V Let strict total order V Then satisﬁes Γ extends Γ cid11 Γ Γ ii The following statements equivalent Γ consistent b Γ acyclic c Γ irreﬂexive d Γ strict partial order iii If Γ consistent Γ equal intersection strict total orders satisfying Γ Γ equals iv If Γ consistent Γ cid11 α β α Γ β v If Γ consistent Γ cid11 ϕ Γ ϕ cid4 cid11Γ 24 Proof theory We proof theory cptheories based swapping sequences generalise ﬂipping sequences CPnets 4 completeness result relating proof theory semantics Deﬁnition 3 Swapping sequences Let α β V outcomes We worsening swap α β cid3 cid3W Γ α cid11 u β cid11 u α X x β X x cptheory Γ α β Γ αTϕ βTϕ We worsening swapping sequence α β Γ exists sequence α α1 αl β k 1 l 1 worsening swap αk αk1 αk αk1 Γ iff exists ϕ u x x For instance Example A worsening swap worsening swapping sequence nop nop 1 There worsening swapping sequence nop nop worsening swap nop nop ϕ nop nop ϕ2 worsening swap nop nop ϕ5 Clearly worsening swapping sequence α β α β transitive closure Γ Γ We Lemma 2ii iv following result soundness exists sequence αcid3 α1 αl βcid3 Conversely αcid3 βcid3 transitive closure Γ k 1 l 1 αk αk1 Γ completeness result worsening swapping sequences Theorem 1 Soundness completeness swapping sequences2 Let Γ conditional preference theory V let α β V outcomes Then α Γ β exists worsening swapping sequence Γ α β ii Γ consistent associated preference relation Γ irreﬂexive Γ iii Γ consistent Γ cid11 α β α Γ β exists worsening swapping sequence Γ acyclic α β 3 Expressiveness CPnets TCPnets lexicographic orders This section considers issues expressiveness cptheories CPnets TCPnets It shown Section 31 map CPnet cptheory associated preference relation Section 32 TCPnets 2 An alternative strict total orders models use total preorders reﬂexive transitive complete binary relations Section 3 9 We deﬁne total preorder cid2 satisfy Γ cid2 Γ Every Γ model particular Γ satisﬁed total preorder α cid2 β outcomes α β We deﬁne relation cid11cid3 follows Γ cid11cid3 α β α cid2 β holds total preorders cid2 satisfying Γ This leads fuller completeness result Γ cid11cid3 α β α Γ β Theorem 1 33 Theorem 1 9 1058 N Wilson Artiﬁcial Intelligence 175 2011 10531091 Lexicographic orders considered Section 33 shown represented easily cptheory CPnets TCPnets Lexicographic orders viewed composed set particular kind strong preference statement choice values variable dominate assignments set important variables Some results presented Section 34 statements natural CPnets TCPnets In Section 35 hard generate total order outcomes purely ceteris paribus preferences number n essentially unique acyclic CPnet n Boolean variables associated preference relation total order 31 Expressing CPnets language In section CPnets expressed conditional preference theories statements u x x W It shown Section 33 Section 34 language good deal expressive CPnets A CPnet V deﬁned 3 especially Deﬁnitions 1 2 3 4 pair N H CT H binary relation V conventionally thought directed graph CT function assigns conditional preference table variable X V The conditional preference table CT X deﬁned function assigns each3 u PaH X strict total order4 cid6 X Let strict total order V Let X variable let u PaH X assignment parents X Let T V PaH X X said satisfy cid6 X We satisﬁes CPnet N H CT X V u PaH X satisﬁes cid6 X CT Xu CPnet N said satisﬁable exists satisﬁes N There simple suﬃcient condition satisﬁability CPnet N associated relation H acyclic We N acyclic associated relation H acyclic holds t T x x cid3 X x cid6 X cid3 u tux tux u cid6 X u X cid3 u x u For CPnet N deﬁne relation cid6N V follows For α β V α cid6N β α β total orders cid3W satisfying N Therefore cid6N intersection satisfying N Representing CPnet N cptheory cid3 x x cid3 X x cid6 X For variable X V assignment u PaH X parent variables L set statements X V u x x u PaH X Note construction ΓN linear size conditional preference table If domain variable X large represent total order cid6 X u subrelation deﬁnition Γ Xu satisﬁes cid6 X u So cid11 ΓN satisﬁes N Therefore ΓN consistent N satisﬁable We cid3 Let conditional preference theory ΓN union sets Γ Xu u subrelation transitive closure cid6 X Now strict total order cid11 Γ Xu u x let Γ Xu N N N N Proposition 1 Let N CPnet ΓN L deﬁned associated conditional preference theory Then N satisﬁable ΓN consistent If N satisﬁable ΓN cid6N Proof The ﬁrst shown Now suppose N satisﬁable ΓN satisﬁable cid6N inter section satisfying N intersection satisfying ΓN Lemma 2iii equals ΓN cid2 This shows CPnet represented language L associated preference order outcomes 32 Expressing TCPnets language In section TCPnetsa generalisation CPnetscan represented cptheories A TCPnet 86 set variables V considered consisting directed graph H V conditional preference table set iarcs set cistatements For X V let U X PaH X set parents X H set variables Y Y X H A conditional preference table assigns X V assignment u U X strict partial order cid6 X u X partially orders values X An iarc ordered pair different variables X Y write X Y It intended represent X important variable Y A cistatement consists ordered pair variables X Y assignment s set variables S XY V X Y statement written X s Y It intended represent given s X important Y It assumed Y U X X U Y A strict partial order outcomes said satisfy conditional preference table X V u U X cid3 implies t T tux tux u strict partial order satisﬁes cid6 X u x cid6 X cid3 u x satisﬁes associated ordering cid6 X T V X U X 3 PaH X parents X respect H set Y Y X H 4 If relax assumption allowing cid6X u nonempty strict partial order results hold N Wilson Artiﬁcial Intelligence 175 2011 10531091 1059 x cid6 X Given TCPnet N strict partial order said satisfy iarc X Y rxy rx cid3 rU X x cid3 Given TCPnet N strict partial order satisﬁes cistatement X s Y rsxy rsx cid3 Y assignments r V X Y y y cid3 y cid3 Y u rs restricted U X cid3 V S XY X Y x x x cid6 X cid3 u x y y cid3 cid3 y cid3 holds x x holds assignments r Strict partial order outcomes said satisfy TCPnet satisﬁes conditional preference table iarc cistatement Deﬁne TCPnet order outcomes follows TCPnet N deﬁne N V α β V α N β α β strict partial orders satisfying N Therefore N intersection strict partial orders satisfying N Lemma 1v implies N inter section elements J J set strict total orders extend partial order satisfying N The deﬁnitions immediately imply strict partial order satisﬁes TCPnet strict total order extending satisﬁes J equals set strict total orders satisfying N N equal intersection strict total TCPnet Hence orders satisfying N Therefore α N β α β strict total orders satisfying N Representing TCPnets orderings cptheories cid6 X Let N TCPnet deﬁned We deﬁne cptheory ΓN generates order outcomes cid3 Deﬁne Γcp L set statements u x x u x u conditional preference table N For iarc X Y N deﬁne Γ XY L set statements u x x Let Γi union Γ XY iarcs X Y N For cistatement X s Y deﬁne Γ Xs Y set statements qs x x cid3Y assignments q U X S XY u qs restricted U X Let Γci union Γ Xs Y cistatements X s Y N cid3 X V u U X x x cid3 cid3Y u U X x x cid3 V x cid6 X x cid6 X cid3 u x Finally deﬁne cptheory ΓN Γcp Γi Γci These deﬁnitions easily lead following result cid3 u x x cid6 X cid3 x x Proposition 2 TCPnet N satisﬁable ΓN consistent If N satisﬁable N ΓN This means cptheories general TCPnets sense TCPnet eﬃciently converted cptheory preference relation outcomes The TCPnet order N differs corre sponding cptheory order ΓN N satisﬁable case TCPnet order trivial N complete relation V V As shown TCPnets represent conditional preference statements ϕ W ϕ 0 1 directly represent statements larger W ϕ situations variable important large set variables W ϕ large It immediately obvious difference makes lost cid3Y variables Y W One cid3W set cid7 statements u x x approximating statement ϕ u x x good idea answer comparing sizes ϕ represent direct consequences conditional preference statements For example binary twovalued variables shown cid7ϕ cid3W tend poor k 12 W small k k W TCPstyle approximation statement u x x cid7 Example B This variation holiday example Example A Section 22 To relationship values variables clearer use x1 instead n travelling week x2 instead o Oxford x3 instead p travelling plane As decision I travel I decide expensive camera x4 cheaper x4 This choice important So variables X1 X2 X3 X4 X1 x1 x1 X2 x2 x2 X3 x3 x3 X4 x4 x4 Firstly Id prefer week irrespective choices variables This represented following preference statement cid5 x1 x1 X2 X3 X4 This implies outcome α preferred β α X1 x1 β X1 x1 irrespective values α β It represents strong kind preference natural contexts As shall represented CPnet TCPnet If I week I deﬁnitely want ﬂy I face long drive represented preference statement x1 x3 x3 X2 X4 Also Id prefer Oxford case x1 x2 x2 X4 So I week choice I travel X3 important choice I X2 Later year preference Oxford irrespective I travel x1 x2 x2 X3 X4 If I later Id prefer drive ﬂy I Oxford Manchester x1 x3 x3 X4 useful having car If I ﬂy Id prefer cheap camera I drive Id better x3 x4 x4 x3 x4 x4 Let Γ set preference statements Unlike Example A GΓ acyclic contains pairs X2 X3 X3 X2 Let α x1x2x3x4 β x1x2x3x4 let ϕ ﬁrst preference statement cid5 x1 x1 X2 X3 X4 Then α β ϕ α X1 x1 β X1 x1 So worsening swap α β α Γ β It seen α β consecutive order Γ outcome γ α Γ γ Γ β Since α β differ variables seen exists TCPnet N V N equalling Γ Lemma 3 Because Γ happens case total order implies exists satisﬁable 1060 N Wilson Artiﬁcial Intelligence 175 2011 10531091 TCPnet N satisﬁes preferences N Γ This illustrates fact statement ϕ strictly stronger CPnet statement cid5 x1 x1 iarcs X1 X2 X1 X3 X1 X4 outcomes x1x2x3x4 x1x2x3x4 ordered TCPnet 33 Representing lexicographic orders We represent lexicographic order cptheory For set variables V lexicographic order V involves ordering X1 Xn variables V Xi total order set values Xi Xi Deﬁne relation lex follows For α β V α lex β α cid13 β α Xi β Xi Xi ﬁrst variable minimal α Xi cid13 β Xi The lexicographic order lex easily seen strict total order V The following proposition shows lexicographic orders represented conditional preference theories lexicographic order lex exists cptheory Γ associated order Γ equals lex Proposition 3 For variable Xi let Γi set statements form cid5 x x cid3 Let Γ Γ1 Γn Then associated order Γ equals lex x x cid3 Xi1 Xn x x cid3 Xi The following lemma useful revealing limits expressivity CPnets TCPnets We α covers β respect transitive relation cid6 V α cid6 β exist γ V α cid6 γ cid6 β Lemma 3 Let Γ conditional preference theory Suppose α covers β respect Γ Then worsening swap α β ii Let N CPnet Suppose α covers β respect cid6N Then α β differ precisely variable In words exists X V α X cid13 β X X cid3 V X α X cid3 β X cid3 iii Let M TCPnet associated relation cid6M Suppose α covers β respect cid6M Then α β differ variable variables All parts follow easily appropriate completeness theorems swappingﬂipping sequences Theorem 1 Section 24 Theorem 8 CPnets completeness result ﬂipping sequences 4 ii iii TCPnets completeness result Theorem 6 8 In Example A Section 222 pair outcomes nop nop consecutive preference order Γ differ variables Lemma 3 implies preferences example represented CPnet TCPnet theres CPnet TCPnet N V N equal Γ A consequence Lemma 3 trivial cases N CPnet TCPnet cid6N lexicographic order This lexicographic orders n variables include consecutive elements differ n variables assuming domain variable element To illustrate consider case Boolean variables order complete tuples usual order binary numbers Then 1 0 0 0 0 1 1 1 consecutive order differ variables Therefore lemma order generated CPnet n 1 order generated TCPnet n 2 This leads following result appears Section 32 16 Proposition 4 Let lex lexicographic order deﬁned V domain variables contains element X V X 1 Then V 1 exists CPnet N V cid6N lex b V 2 exists TCPnet M V cid6M lex 34 Representing stronger conditional preferences In section strong kind preference statement sort holds lexicographic order represented cptheory Lexicographic orders special type order kind statements represent natural Let cid6 strict partial order transitive irreﬂexive relation V Let X V W V X let T V X W X W T partition V Let X nonempty partial order X set assignments variable X We X unconditionally dominates W respect cid6 X following condition holds α β V α cid6 β holds α β α X X β X αT βT In words α preferred β α β agree T α better β X In particular X dominates W V X respect cid6 X suﬃcient condition α cid6 β α X X β X This stronger form preference statement ceteris paribus statements It represents situation value variable X important values variable prefer outcome better variable X N Wilson Artiﬁcial Intelligence 175 2011 10531091 1061 cid3W x X x This kind condition naturally represented language L Let Θ set preferences statements cid3 Then cptheory Γ contains Θ X dominates W respect Γ X Such statements cid5 x x represent lexicographic order shown Proposition 3 In contrast type variable domi nance natural CPnets TCPnets following results indicate It easy construct consistent cptheory Γ satisﬁes hypotheses propositions Γ Θ representation Θ extensions Θ particular representing lexicographic order Proposition 5 Consider consistent CPnet N V X1 Xn n cid2 2 X2 parents X2 1 Then nonempty 1 X1 case X1 dominates X2 Xn respect cid6N 1 In Example A X1 dominates X2 X3 respect Γ 1 n 1 n X2 parents The proposition implies looking level outcomes theres CPnet N V cid6N Γ It implies hold change preferences X3 way There similar result TCPnets Proposition 6 Consider consistent TCPnet M V X1 Xn n cid2 3 total local orderings X2 parents X3 parents X2 X3 1 Then total order 1 X1 case X1 dominates X2 Xn respect cid6M 1 35 Generating precisely total order outcomes We ﬁnish Section 3 expressibility result illustrating unusual CPnet generate total order outcomes It shows removes obvious symmetries concerned variable value ordering unique acyclic CPnet set V Boolean variables generates total order outcomes This contrasts situation conditional preference theories doubly exponential number5 total orders V maximum element 1 1 1 equal Γ cptheory Γ GΓ consistent variable ordering X1 Xn Theorem 2 For given value n cid2 1 unique CPnet N Boolean variables V X1 Xn satisfying following properties CPnet order cid6N strict total order outcomes maximum element 1 1 ii variable ordering X1 X2 Xn consistent relation H V associated N X j Xi H implies j We furthermore H maximally large H X j Xi X1 Xi1 The conditional preference tables written explicitly exponential size They expressed compactly follows 1 n assignment u Pa Xi 1 cid6 Xi u 0 holds u viewed sequence Boolean values contains number zeros j parents set Pa Xi Xi We derive auxiliary results help prove theorem The ﬁrst prove ordering outcomes equalling cid6N CPnet satisfying conditions ii Theorem 2 The result gives explicit construction CPnet First consider case n 3 illustrate ideas results Example 1 Suppose wed like construct acyclic CPnet N Boolean variables X1 X2 X3 cid6N total order We relabel values 1 1 1 optimal outcome Since N acyclic choose variable relabel X3 children We generate CPnet N variables X1 X2 deleting N conditional preferences X3 It seen cid6N total order implies cid6Ncid3 total order deleting ﬂips involving X3 ﬂipping sequences N Without loss generality let assume X1 parents Then N CPnet preferences 1 cid6 X1 cid5 0 1 cid6 X2 X11 0 0 cid6 X2 X10 1 Now outcomes N α β agree X1 X2 differ X3 consecutive total order Otherwise removing ﬂips changing X3 ﬂipping sequence α β gives ﬂipping sequence Let α1 α2 α8 N ordering outcomes α1 1 1 1 The previous remark implies 1 1 1 1 1 0 consecutive α2 1 1 0 Now α3 α2 consecutive exists worsening ﬂip α2 α3 differ precisely α X1 X2 β X1 X2 α X1 X2 cycle contradicting consistency N cid3 cid3 cid3 cid3 5 It follows Proposition 17 Section 52 instead count number total orders equalling cid6pΓ cptheory Γ satisfying properties Γ total order cid6pΓ equals Γ cid6pΓ total order Γ equals cid6pΓ For cid6pΓ total order need transitive closure GΓ total order local orderings cid6X α total orderings Xn parents X1 Xn1 doubly exponential number 22n11 valid nonequivalent choices set local orderings Xn 1062 N Wilson Artiﬁcial Intelligence 175 2011 10531091 variable This means α2 X3 α3 X3 0 If change value X3 α3 1 earlier remark obtain outcome consecutive α3 α4 Hence α4 X3 1 Continuing argument values X3 α1 α2 α8 1 0 0 1 1 0 0 1 Therefore ordering outcomes 1 1 1 1 1 0 1 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 1 1 This kind reasoning generalised formalised Lemma 4 proof Lemma 4 Let N acyclic CPnets Boolean variables V cid6N strict total order V Let Z variable children conditional preferences variable conditional Z List elements V decreasing order respect cid6N α1 α2 αK K 2 CPnet variables V Z formed deleting conditional preferences Z Then following hold Let N V cid3 cid6Ncid3 strict total order V Z b If α β V differ V Z α cid6N β αV Z cid6Ncid3 βV Z c If outcomes α β differ Z agree variables α β consecutive cid6N Hence j 1 2 K 2 outcomes α2 j1 α2 j agree V Z d Suppose α1Z 1 Then value Z sequence α1 α2 αK follows pattern 1 0 0 1 1 0 0 1 l 1 2 3 4 j 0 1 K 4 1 α4 jlZ 1 l 1 4 α4 jlZ 0 l 2 3 Proposition 7 shows CPnet ordering satisfying conditions Theorem 2 Proposition 8 deﬁnes CPnet showing exists exactly Theorem 2 proved results Proposition 7 Let n natural number let V X1 Xn set Boolean variables There strict total order V equalling cid6N CPnet N V satisfying pair conditions CPnet order cid6N strict total order outcomes maximum element 1 1 ii variable ordering X1 X2 Xn consistent relation H V associated N X j Xi H implies j Sketch proof The proof induction n Suppose CPnets N1 N2 variables V X1 Xn cid3 2 variables X1 Xn1 satisfying conditions proposition Eliminating variable Xn gives CPnets N Lemma 4b c d cid6 following sequence values variable Xn 1 0 0 1 1 0 0 1 Similarly cid6N2 By Lemma 4a cid6 strict total orders induction equal cid6N1 cid6N2 equal cid2 cid3 1 N determines total ordering cid6N1 extending cid6 cid3 N 1 cid6 cid3 1 cid3 2 cid3 1 N N N Continuing Example 1 write assignment u variables X1 X2 pair Boolean values example assignment X1 1 X2 0 abbreviated 1 0 It seen use following conditional preference table X3 arrive total ordering outcomes 1 cid6 X3 01 1 This argument generalised n exists CPnet n Boolean variables totally orders outcomes In fact seen 1 cid6 Xi u 0 tuple u contains number zeros 00 0 0 cid6 X3 10 1 1 cid6 X3 11 0 0 cid6 X3 Proposition 8 Let V set variables label X1 Xn Deﬁne CPnet N follows graph H deﬁned X j Xi 1 cid3 j cid3 n set U parents variable Xi equal V i1 X1 Xi1 b 1 n u U relation cid6 Xi u 0 tuple u contains number zeros u 1 tuple u contains odd number number variables X j U u X j 0 So 0 cid6 Xi zeros u deﬁned 1 cid6 Xi Then cid6N strict total order V maximum element 1 1 Proof Theorem 2 Let n natural number Proposition 8 shows exists CPnet N0 satisfying conditions ii theorem Suppose N CPnet V satisfying conditions ii Proposition 7 implies cid6N equals cid6N0 For variable Xi set parents Xi N set parents Xi N0 X1 Xi1 This parents Xi N N0 contradicting ii N0 preference Xi genuinely depends variables omit X j V i1 equivalent conditional preference table 1 cid6 Xi u 0 holds tuple u contains number zeros omit variable u generate equivalent preferences Given choice parents relation cid6N determines local relations cid6 Xi u x cid6 Xi t assignment variables u x V U Xi This shows N actually equal N0 cid2 cid3 cid3 tux cid6N tux N Wilson Artiﬁcial Intelligence 175 2011 10531091 1063 4 Determining consistency totally ordering outcomes constrained optimisation Section 4 Sections 5 6 7 concerned interrelated topics determining consistency cptheory totally ordering sets outcomes constrained optimisation described Determining consistency cptheory Γ Γ consistent exists strict total order extending preference relation Γ Theorem 1 Γ acyclic We focus particular kind strict total order generated complete search tree cstree backtracking search solutions constraint satisfaction problem CSP associated strict total order order outcomes visited search tree For fully acyclic case GΓ acyclic Section 223 testing consistency relatively easy Section 51 More generally problem determining consistency cptheory extremely hard PSPACEcomplete 18 Theorem 3 We necessary Section 41 suﬃcient conditions Section 6 consistency lower complexity Proposition 11 Section 41 Proposition 24 Section 65 Totally ordering sets outcomes It case complete assignments available Suppose set Ω V possible outcomes user needs choose elicited preferences cptheory Γ We wish display outcomes order showing best ones ﬁrst A basic requirement α preferred β α appears β user interested outcome α outcome β Thus concerned following task given cptheory Γ subset Ω outcomes construct total order Ω extends Γ restricted Ω The set Ω available outcomes large particular expressed implicitly set solutions constraint satisfaction problem Then wont able display number K This gives rise following related problem Given number K generate outcomes α1 αK Ω j 1 K β Γ α j β Ω β αi j element Ω preferred α j occurs α j generated list outcomes cstrees total ordering tasks Sections 44 51 64 Optimisation Given cptheory Γ outcome α optimal exists outcome β dominates β Γ α It easily seen outcome α optimal solution particular constraint satisfaction problem This implies checking outcome optimal performed eﬃciently ﬁnding optimal outcome solved CSP technology Let Ω set outcomes We outcome α Ω optimal Ω exists outcome β Ω β Γ α If Ω represented set solutions CSP refer task constrained optimisation Given cptheory Γ deﬁne upper approximation cid16 strict partial order containing preference relation Γ polynomial upper approximation α cid16 β determined polynomial time outcomes α β Section 44 Speciﬁc polynomial upper approximations deﬁned Sections 52 63 76 We polynomial upper approximation useful ﬁnding set optimal outcomes constrained optimisation problem search tree generate solutions order consistent Γ upper approximation cid16 eliminate outcomes nonoptimal Ω They totally order small set Ω outcomes α β Ω determine α cid16 β holds determining cid16 restricted Ω choose total order Ω compatible Section 45 This section Section 4 describes basic mathematical notions approaches deﬁne necessary condition consistency called local consistency deﬁne cstrees complete search treeswhich showing consistency cptheoryand basic properties consider problem constrained optimisation general approach based cstrees upper approximations Section 5 considers problems determining consistency ordering outcomes fully acyclic case shows polynomial upper approximation deﬁned In Sections 6 7 approaches tasks derived general cptheories Section 41 deﬁnes local consistency property cptheory locally consistent exists outcome α variable X exists worsening swapping ﬂipping sequence α changes variable X Local consistency necessary condition cptheory consistent determined eﬃciently Section 42 deﬁnes cstrees associated strict total orders Section 43 gives precise characterisation cstree order satisﬁes cptheory The cstree kind lexicographic order value variable orderings conditional values important variables Search trees previously context CPnets TCPnets particular 5 8 Section 44 considers problem totally ordering set outcomes according preference ordering Γ solved construct compact representation satisfying cstree Sections 51 64 7 constructions set small upper approximation Γ strict partial order containing Γ Sections 52 63 76 deﬁnitions polynomial upper approximations different situations Section 45 considers problems optimisation constrained optimisation showing use cstree upper approximation generate optimal solutions set constraints 1064 N Wilson Artiﬁcial Intelligence 175 2011 10531091 41 Local consistency In section consider necessary condition consistency called local consistency In certain cases clear cptheory Γ consistent looking local conditions theres sequence worsening swaps outcome α changes values single variable X If hold Γ locally consistent As deﬁning local consistency deﬁnition introduces local ordering cid6 X induced cptheory domain variable X given assignment Deﬁnition 4 Local consistency local ordering cid6 X X V set variables A V assignment A A Say ordered pair x x exists statement u x x cid6 X locally consistent cid6 X Fix conditional preference theory Γ V consider variable cid3 values X validated cid3W Γ extends u u projection Deﬁne local ordering cid3 validated We Γ X transitive closure set pairs x x Γ abbreviated cid6 X α irreﬂexive variables X outcomes α If Γ locally consistent exists outcome α variable X sequence x1 xk values X associated statements Γ ui xi xi1W α cid11 ui α X x1 xk This gives worsening swapping sequence α α involving changing variable X implying Γ consistent Theorem 1 Therefore local consistency necessary condition consistency Proposition 9 If cptheory Γ consistent locally consistent The set statements Γ Example A Section 222 Example B Section 32 easily seen locally 5 equalling o p p Γ longer locally consistent ϕcid3 5 α α p Γ longer consistent However ϕ5 changed ϕcid3 ϕ3 n p p conﬂicting preferences X3 conditions Let α nop Then cid6 X3 α p p p validated α ϕcid3 irreﬂexive p cid6 X3 consistent Γ longer irreﬂexive nop Γ nop Γ nop α Γ α α p ϕ3 p cid6 X3 5 p cid6 X3 Local ordering cid6 X holds x cid6 X cid3 b x monotonic respect partial tuple b extends cid6 X holds b extends cid6 X x cid6 X cid3 x Clearly relation cid6 X generated polynomial time given tuple variable X selecting ϕ Γ cid3 Xϕ X aU ϕ uϕ recording associated pairs xϕ x ϕ computing transitive closure set pairs values X Unsurprisingly converse Proposition 9 hold Example 2 Let V X1 X2 X1 x1 x1 X2 x2 x2 Let Γ pair statements cid5 x1 x1 X2 cid5 x2 x2 X1 easily seen locally consistent statement preferring x1 x1 x2 x2 However x1x2 Γ x1x2 ﬁrst statement x1x2 Γ x1x2 second statement x1x2 Γ x1x2 Γ inconsistent For example Example 1 18 The following lemma important Section 61 follows easily deﬁnitions x x cid3 validated α It states local ordering cid6 X cid3 validated α unchanged eliminates irrelevant α A x x variables α Lemma 5 Let α outcome let X V variable let A set variables satisfying following property ϕ Γ Xϕ X α cid11 uϕ A U ϕ It follows cid6 X α A α cid6 X For X V recall U X PaHΓ X set parents X respect HΓ Section 223 Hence Y U X exists ϕ Γ Xϕ X U ϕ cid17 Y U X ϕΓ Xϕ X U ϕ Lemma 5 implies following result shows local consistency determined local orderings based set parents variable cid3 Proposition 10 Γ locally consistent X V u U X cid6 X u irreﬂexive Proposition 10 shows local consistency checked eﬃciently parents sets U X small X cid3 values X validated u u U X compute cid6 X u taking transitive closure pairs x x Hence sizes parents sets sizes domains bounded constant determining local consistency polynomial N Wilson Artiﬁcial Intelligence 175 2011 10531091 1065 Fig 2 A cstree σ binary variables X1 X2 X3 For body node r include associated variable Yr ordering cid6r The associated ordering σ outcomes given ordering leaf nodes starting left x1x2x3 σ x1x2x3 σ x1x2x3 σ σ x1x2x3 Example 3 Consider set Γ ϕ1 ϕ2 ϕ3 ϕ4 ϕ5 preference statements variables X1 X2 X3 Example B variable X4 deleted ϕ1 equals cid5 x1 x1 X2 X3 ϕ2 x1 x3 x3 X2 ϕ3 equals x1 x2 x2 ϕ4 x1 x2 x2 X3 ϕ5 x1 x3 x3 It clear outcome α cid6 X1 cid3 preference x1 x1 xϕ x1 x ϕ α X1 x1 x3 cid6 X3 proves outcomes α cid6 X3 α irreﬂexive preference statement ϕ Γ involves α x3 α x3 α X1 x1 outcome α preferences x1 Similarly X2 Regarding X3 x3 cid6 X3 α irreﬂexive Γ locally consistent An alternative way proving local consistency use Proposition 10 For X3 involves considering possible assignments set X1 parents X3 We cid6 X3 x1 x3 x3 cid6 X3 x1 x3 x3 In general determining local consistency coNPcomplete Proposition 11 The problem deciding cptheory Γ locally consistent coNPcomplete However checking local consistency easy particular discussed sets U X small U X set variables variable X depends intended applications CPnets TCPnets eﬃciently construct local ordering cid6 X u explicitly determining local consistency holds Proposition 10 For CPnets TCPnets assumed local orderings cid6 X u computed directly elicited assumed strict partial orders local consistency guaranteed To example variables binary twovalued local consistency determined time proportional Γ 2V assuming domain sizes variables bounded constant 42 cstrees In section complete search trees cstrees associated total orderings outcomes In Sec tions 43 5 6 7 certain conditions search tree ordering satisfy cptheory leads methods proving consistency cptheory A cstree complete search tree rooted directed tree V leaves corresponding outcomes Fig 2 Associated nonleaf node r variable Y r instantiated different value nodes Y r children ordering cid6r values Y r So directed edge tree corresponds instantiation variables Paths tree root leaf node correspond sequential instantiations variables V Deﬁnition 5 cstree complete search tree A cstree variables V deﬁned rooted directed tree nodes edges associated labels deﬁned Each directed edge e node r node r associated variable Y e value ye Y e corresponding cid3 assignment Y e ye We r child r Each node r following associated labels cid3 set variables Ar V assigned variables variables assigned node cstree b assignment ar variables Ar corresponding assignments node 1066 N Wilson Artiﬁcial Intelligence 175 2011 10531091 If node children leaf node node body node A node leaf node associated set variables Ar equal set variables V If r body node associate following labels c variable Y r V Ar variable instantiated d ordering cid6r domain Y r Y r value ordering node For leaf node r deﬁne associated leaf tuple cid18 Ar arcid19 For body node r deﬁne associated body tuple cid18 Ar ar Y r cid6rcid19 The unique root node write r deﬁne Ar set ar equals cid5 assignment set Body node r associated variable Y r Y r children Y r edges coming Each edge e Arcid3 Ar Y r arcid3 associated variable Y e Y r different associated value yr If e goes node r r tuple formed extending ar assignment Y e ye cid3 Example 4 We deﬁne search tree σ binaryvalued variables V X1 X2 X3 This illustrated Fig 2 The root node leaf nodes In ﬁgure node r associated variable Y r body nodes local ordering cid6r values Y r omitting components Ar ar The root node associated tuple cid18 cid5 X1 x1 x1cid19 X1 variable assigned root node ordering x1 cid6 x1 Below following edge associated assignment X1 x1 node tuple cid18 X1 x1 X3 x3 x3cid19 The ﬁrst component set variables assigned node X1 The left node leaf node cid18 X1 X2 X3 x1x2x3cid19 The ﬁrst component node set variables assigned path root node equal V leaf node The second component assignment V path Notice variable orderings vary cstree For example leftmost path tree associated variable ordering X1 X3 X2 rightmost path variable ordering X1 X2 X3 Also local value orderings variable different different nodes For example node ordering x3 cid6 x3 whilst nodes ordering x3 cid6 x3 We following properties cstrees Lemma 6 Let σ cstree variables V For node r ar set assignments Y e ye edges e path root r For outcome α exists exactly leaf node r ar α associate leaf nodes outcomes The set leaf nodes onetoone correspondence set V outcomes Deﬁnition 6 Path outcome Let σ cstree variables V let α element V The path σ α deﬁned sequence nodes directed path root node leaf node corresponding α The set nodes path α consists nodes r α extends ar Write path α r0 r1 rn set variables instantiated α Ari The path α associated ordering variables r0 r nodes ri root node We ari Y r0 Y rn1 A cstree σ associates ordering V outcome α root node Then 1 n Ari Y r0 Y ri1 Deﬁnition 7 cstree node divides outcomes Let σ cstree variables V let α β elements V We node r divides α β r node path α path β Clearly pair different outcomes α β exists unique node σ divides α β We associate strict total order σ cstree σ follows Deﬁnition 8 cstree order outcomes Let σ cstree variables V let α β elements V Deﬁne α σ β α cid13 β αY r cid6r βY r r node divides α β In words compare outcomes considering lowest deepest node r use ordering cid6r compare If Fig 2 draw cstree σ directed edges pointing downwards root edges node r order cid6r best leftmost α σ β leaf node cid18V αcid19 appears left cid18V βcid19 Similarly suppose depthﬁrst search instantiate node r best value according cid6r ﬁrst backtracking values order cid6r α reached β α σ β This means easy generate ﬁrst K elements cstree order N Wilson Artiﬁcial Intelligence 175 2011 10531091 1067 Example 5 Consider cstree σ Fig 2 To determine σ orders outcomes x1x2x3 x1x2x3 start root follow corresponding edges ﬁnd node divides The root divide agree associated variable X1 taking value x1 So consider node end x1 edge This associated variable X3 Since outcomes differ X3 node divides Since value ordering node prefers x3 x3 x1x2x3 σ x1x2x3 The ordering σ outcomes given ordering leaf nodes σ transitive closure following preference comparisons x1x2x3 σ x1x2x3 σ x1x2x3 σ x1x2x3 σ x1x2x3 σ x1x2x3 σ x1x2x3 σ x1x2x3 Compact representations cstrees To construct cstree node starting root node choose associated variable Y total ordering cid6 domain Y Similarly complete search ﬁnding solution constraint satisfaction problem node explored search tree choose variable instantiate value ordering domain variable This determines components Ar ar child r node choose associated variable Y r V Ar total ordering cid6r Y r Applying iteratively root leaf nodes generates cstree A cstree σ exponentially large object able generate explicitly However deﬁne cstree implicitly deﬁne function g takes input appropriate tuples A returns pair Y cid6 Y V A cid6 total ordering Y The domain D g function set possible tuples need suﬃcient contain assignment cid5 set satisfy condition D g contains ga Y cid6 D g contains tuple ay assignment y Y Such function g speciﬁes compact representation search tree σg given g speciﬁed compact way For search tree exists g σ equals σg Given value function g computed eﬃciently eﬃciently perform important operations σg constructing σg explicitly In particular outcomes α β determine α σg β generate nodes path α ﬁnd node divides α β In addition given number K eﬃciently generate best K outcomes according σg generating nodes σg depth ﬁrst search manner explained K outcomes generated Using cstree σ backtracking search As alluded cstrees essentially search trees solving CSPs control depthﬁrst search solutions Any node search tree corresponds node r cstree σ Ar set variables assigned ar assignment We start search root node At node r instantiate variable Y r Relation cid6r gives value ordering instantiate ﬁrst best value according cid6r On backtracking search node remove previously tried value Y r domain Y r instantiate Y r best remaining value according cid6r If domain Y r backtrack parent node r When reach leaf node r variables instantiated record associated outcome ar backtrack parent node Given set C constraints6 variables V use backtracking search method usual way generate solutions C outcomes satisfying constraints C Standard CSP techniques maintaining arc consistency reduce search The solutions C generated decreasing order σ 43 cstrees satisfying cptheories In section suﬃcient conditions given cstree ordering satisfy cptheory These conditions Sections 5 6 7 suﬃcient conditions cptheory consistent A cstree σ said satisfy cptheory Γ associated total order σ extends preference relation Γ Deﬁnition 9 A cptheory conditionally acyclic exists cstree satisfying This immediately implies Proposition 12 conditional acyclicity implies consistency converse hold Example 6 Propo sition 13 gives pair necessary suﬃcient conditions cstree satisfy cptheory ﬁrst based variable orderings paths cstree equivalently variable Y r chosen node r given current signment second condition value ordering chosen node r cstree Proposition 14 gives stronger pair suﬃcient conditions corresponds strong satisfaction developed Section 61 ﬁrst condition variable orderings preference statement ϕ Γ set variables U ϕ appear Xϕ appear variables W ϕ path root node cstree outcome α extends uϕ This condition enables simpler form second local ordering condition total ordering cid6r node r cstree extends appropriate local ordering strict partial order given cptheory locally consistent implies second condition easy satisfy partial order extended total order 6 A constraint c variables V relation Sc Sc V interpreted subset Sc An outcome α V satisﬁes constraint c αSc c Outcome α said solution set constraints C V satisﬁes constraint C 1068 N Wilson Artiﬁcial Intelligence 175 2011 10531091 Deﬁnition 9 Let Γ cptheory We cstree σ satisﬁes Γ associated total order σ satisﬁes Γ σ Γ Lemma 2i We Γ conditionally acyclic7 exists cstree satisfying Γ If cptheory Γ conditionally acyclic exists cstree σ σ satisfying Γ implying Γ consistent Proposition 12 Let Γ cptheory If Γ conditionally acyclic consistent The following example shows converse hold exist consistent cptheories condition ally acyclic Example 6 Let cptheory Γ variables X1 X2 consist preference statements x1 x2 x2 x2 x1 x1 x1 x2 x2 x2 x1 x1 These statements imply x1x2 x1x2 preferred x1x2 x1x2 Γ consistent conditionally acyclic To prove contradiction assume exists cstree σ satisﬁes Γ important variable σ Then Suppose X1 variable associated root node r node value ordering cid6 x1 cid6 x1 x1 cid6 x1 If x1x2 σ x1x2 x1x2 σ x1x2 Both incompatible Γ X1 variable Similarly X2 variable exists cstree satisfying Γ The following result gives equivalent conditions search tree satisfy cptheory Condition 1 states variable precedes important variables relevant paths cstree condition 2 states node value ordering compatible preference statements cptheory More precisely consider statement u x x values variable X 1 requires paths outcomes extend u X appears element W 2 requires node r context ar compatible u cid3 X chosen x preferred x cid3 cid3W cptheory Γ x x node value ordering Proposition 13 Let Γ cptheory let σ cstree The following pair conditions suﬃcient σ satisfy Γ If domain variable elements pair conditions necessary σ satisfy Γ 1 For ϕ Γ outcome α α cid11 uϕ path root α Xϕ appears element W ϕ cid3 2 body node r ϕ Γ Xϕ Y r uϕ compatible ar xϕ cid6r x ϕ The condition domain variable elements restrictive variable singleton domain eliminated One interesting aspect result shows necessary parents variable precede variable paths cstree ϕ Γ elements U ϕ root important Xϕ However paper mainly concerned cstrees parents precede children relevant contexts For case following version Proposition 13 Section 6 It consists stronger form condition variable orderings condition node value orderings Condition 1 cid3W Γ paths U instantiated u 1 Proposition 13 requiring statement u x x instantiated X instantiated W Given 1 condition 2 Proposition 13 expressed 2 cid3 cid3 cid3 Proposition 14 Let Γ cptheory let σ cstree Then σ satisﬁes Γ following pair conditions hold cid3 cid3 1 2 For ϕ Γ outcome α α cid11 uϕ path root α element U ϕ appears Xϕ appears element W ϕ body node r cid18 A Y cid6cid19 relation cid6 extends local ordering cid6Y Deﬁnition 4 Example 7 Consider cptheory Γ Example 3 cstree σ Example 4 Fig 2 In particular consider preference statement ϕ x1 x3 x3 X2 Γ outcome α α cid11 x1 α X1 x1 In path outcome variables appear order X1 X3 X2 U ϕ X1 appears Xϕ X3 appears W ϕ X2 Thus condition 1 Proposition 14 satisﬁed ϕ easily conﬁrmed cid3 consider node associated assignment x1 value ordering cid6 ϕ Γ To illustrate condition 2 given x3 cid6 x3 cid6 equal cid6 X3 conﬁrmed nodes Proposition 14 cstree σ satisﬁes Γ x1 Example 3 Condition 2 cid3 cid3 7 Our terminology differs TCPnets terminology 31 conditional acyclicity TCPnets 8 corresponds property contextuniform conditional acyclicity Section 62 stronger condition assuming particular HΓ acyclic N Wilson Artiﬁcial Intelligence 175 2011 10531091 1069 44 Total ordering tasks upper approximations preference relation Suppose set Ω possible outcomes user needs choose elicited preferences cptheory Γ We wish display outcomes order showing best ones ﬁrst A basic requirement α β Ω α preferred β α appears β α Γ β α β likely interested outcome α outcome β Thus concerned following task given cptheory Γ subset Ω outcomes construct strict total order Ω extends Γ restricted Ω However Ω large particular expressed implicitly set solutions constraint satisfaction problem wont able display K This gives rise following related problem Given K generate outcomes α1 αK Ω j 1 K β Γ α j β Ω β αi j These ordering tasks solved deﬁne cstree satisfying Γ shown Section 42 ef ﬁciently compare outcomes generate outcomes cstree order Another approach use upper approximation preference relation deﬁned Deﬁnition 10 Upper approximation Binary relation cid16 V said upper approximation preference relation Γ cid16 strict partial order extending Γ We cid16 polynomial upper approximation outcomes α β α cid16 β holds determined polynomial time Note upper approximation Γ exists Γ irreﬂexive Theorem 1 Γ consistent The result follows easily deﬁnitions describes general way generating upper approximations Sections 52 63 76 proving certain relations polynomial upper approxima tions It states intersection nonempty set cstree orderings satisfying cptheory upper approximation Proposition 15 Let R nonempty set cstrees satisfying cptheory Γ Deﬁne relation cid16R σ R outcomes α β α cid16R β α σ β holds σ R Then relation cid16R Γ strict partial order containing Γ intersection σ upper approximation Proof Each relation σ transitive intersections transitive relations transitive cid16R irreﬂexive σ irreﬂexive cid16R intersection cid16R transitive strict partial order For σ R σ Γ implies contains Γ cid2 For Ω consisting outcomes polynomial upper approximation cid16 order Ω way compatible Γ α β Ω test α cid16 β generates strict partial order Ω restriction cid16 Ω Ω This procedure speeded eﬃciently ﬁnd cid16undominated element Ω element α Ω β Ω case β cid16 α ﬁnd element remove Ω iterate For larger Ω Ω deﬁned implicitly set solutions constraint satisfaction problem V approach use implicit representation cstree σ satisfying Γ Sections 51 64 7 This generate K elements according σ 45 Constrained optimisation polynomial upper approximation This section ﬁrst considers task ﬁnding optimal outcomes cptheory Γ outcomes dominated outcome according preference relation Γ It considers harder problem ﬁnding optimal solutions set constraints shows upper approximation help ﬁnd optimal solutions Deﬁnition 11 Given cptheory Γ outcome α Γ optimal exists outcome β β Γ α Let Ω set outcomes We outcome α Ω Γ optimal Ω exists outcome β Ω β Γ α If C set constraints V α Γ optimal solution C α Γ optimal set solutions C The optimal outcomes respect cptheory Γ precisely solutions particular constraint satisfaction problem CSP CΓ V cf 9 Theorem 2 13 The point outcome α satisfy cϕ cid3 ϕ xϕ optimal theres improving swap changing value Xϕ x Proposition 16 Let Γ cptheory Deﬁne CΓ set constraints cϕ ϕ Γ constraint cϕ variables U ϕ Xϕ cid3 ϕ Then outcome α V Γ optimal α solution CΓ U ϕ uϕ Xϕ cid13 x 1070 N Wilson Artiﬁcial Intelligence 175 2011 10531091 Furthermore observed 32 HΓ acyclic Γ locally consistent easy ﬁnd Γ optimal outcomes instantiating variables order compatible HΓ reach solution having backtrack The situation trickier set constraints C V wish ﬁnd optimal solutions C If interested ﬁnding outcomes optimal try solve CSP constraints CΓ C Any solution CSP Γ optimal solution C Γ optimal V However CΓ C solutions need general methods Finding optimal solutions Suppose ﬁnd cstree σ satisfying Γ This generate solutions C order σ natural backtracking algorithm associated σ Section 42 The ﬁrst solution α generates Γ optimal β Γ α implies β σ α β solution C At point search set Ω Γ optimal solutions When ﬁnd solution α need determine exists β Ω α dominated solution γ later α σ γ γ σ α γ Γ α β Γ α If α Γ optimal solution add Ω This algorithm based approach CPnets 5 complete ﬁnal Ω set Γ optimal solutions point set Ω contains Γ optimal solutions The problem algorithm similar algorithms 58 determining β Γ α infeasible 41218 problem small involves searching swapping sequences generalise ﬂipping sequences Finding optimal solutions However suppose apply exactly form algorithm replacing tests form β Γ α β cid16 α cid16 upper approximation Γ The generated outcomes precisely cid16optimal solutions C However deﬁnition upper approximation immediately follows α cid16 optimal Γ optimal This algorithm generate usually Γ optimal solutions tests β cid16 α performed eﬃciently generating Γ optimal solutions way feasible There large number optimal solutions wish report small fraction necessarily important upper approximation close approximation cid16 suﬃciently far total order liable good number solutions cid16optimal 5 Consistency polynomial upper bound preference relation fully acyclic case In section consider fully acyclic cptheories Γ GΓ acyclic Recall Section 223 GΓ contains sets edges U ϕ Xϕ Xϕ W ϕ ϕ Γ Γ fully acyclic set variables V labelled Z1 Z2 Zn way ϕ Γ Z U ϕ j Z j Xϕ Zk W ϕ k j It shown Section 51 construct satisfying cstree Γ locally consistent This implies Theorem 3 GΓ acyclic Γ consistent locally consistent In Section 52 deﬁne upper approximation preference relation Γ shown Section 44 totally ordering sets outcomes constrained optimisation 51 Generating cstree satisfying fully acyclic Γ Suppose Γ locally consistent fully acyclic cptheory Therefore exists total order set variables V extends GΓ Let enumerate V Z 1 Z2 Zn way compatible GΓ Z Z j GΓ implies j We iteratively deﬁne nodes cstree root leaves follows instantiating variables order Z1 Z2 Zn For node r Ar Z1 Zk1 k We deﬁne Y r Zk choose cid6r strict total order extending cid6 Zk acyclic local consistency Let cstree σ Γ Proposition 14 Section 43 immediately implies cstree satisﬁes Γ ar possible cid6 Zk ar Lemma 7 Let Γ locally consistent fully acyclic cptheory Then cstree σ Γ satisﬁes Γ Lemma 7 implies locally consistent fully acyclic cptheory Γ consistent cid6σ Γ satisﬁes Γ As observed earlier local consistency necessary condition consistency Proposition 9 Section 41 We local consistency consistency equivalent fully acyclic cptheories Theorem 3 Let Γ fully acyclic cptheory Then Γ consistent Γ locally consistent 52 An upper approximation fully acyclic Γ There simple way deﬁning polynomial upper approximation Deﬁnition 10 Section 44 fully acyclic cptheory It kind generalised lexicographic order strongly related ordering queries relation cid16 proof Theorem 6 4 Two outcomes compared comparing appropriate local ordering N Wilson Artiﬁcial Intelligence 175 2011 10531091 1071 value important variables differ importance deﬁned according relation GΓ The section ﬁnishes result Proposition 17 shows polynomial upper approximation Γ equal preference relation associated strengthened form Γ Deﬁnition 12 Let Γ locally consistent fully acyclic cptheory Deﬁne relation cid6pΓ outcomes follows Let α β outcomes V Deﬁne cid7α β set variables α β differ set Y V αY cid13 βY If α cid13 β deﬁne Θα β set G transi tive closure GΓ variables Y cid7α β exists Z cid7α β Z Y G In words Θα β set variables Y α β differ ancestor Y agrees α β For α β V deﬁne α cid6pΓ β α cid13 β αY cid6Y maximal elements cid7α β G α βY Y Θα β For given outcomes α β determining α cid6pΓ β clearly polynomial time This ordering similar lexicographic ordering It views GΓ expressing relative importance variables Y Z GΓ variable Y considered important Z The idea Θα β set important variables α β differ α preferred β α better β variables A standard lexicographic order compares outcomes α β considering important variable X α β differ preferring α β α X preferred β X This order differs best variable α β differ G partial order ii local preference α X β X partial conditional important variables With Γ Example A Section 222 consider outcomes nop nop We cid7nop nop X2 X3 Θnop nop X2 variable X2 important X3 according GΓ Also o cid6 X2 nop o holds ϕ2 nop cid6pΓ nop In fact relation cid6pΓ case total order extends Γ additional preference nop cid6pΓ nop The following lemma shows relation cid6pΓ equal intersection particular set cstree orderings ordering variables cstrees involved compatible GΓ Lemma 8 Let Γ locally consistent fully acyclic cptheory Let S set cstrees σ satisfying conditions pair Y Z GΓ outcome α variable Y appears Z path α ϕ Γ variables U ϕ appear variable Xϕ appears variables W ϕ path outcome b body node r σ cid6r cid6Yr Ar U Yr u u arU Yr U Yr set parents Y r HΓ Section 223 Note For outcomes α β α cid6pΓ β cstrees σ S α σ β In words cid6pΓ cid16S notation Proposition 15 Section 44 This lemma Proposition 15 Section 44 immediately imply following result showing cid6pΓ polynomial upper approximation preference relation This result proved directly Theorem 4 Let Γ locally consistent fully acyclic cptheory Then cid6pΓ strict partial order containing Γ upper approximation preference relation Γ As shown Theorem 4 cid6pΓ extends Γ In fact turns strengthens preference statements Γ Γ This expanding sets W ϕ form cptheory Γ obtain equality relations cid6pΓ cid6 result footnote Section 35 pΓ Proposition 17 Let Γ L cptheory For ϕ u x x set descendants X GΓ set variables Y X Y transitive closure GΓ Deﬁne Γ ϕ ϕ Γ If Γ locally consistent fully acyclic cid6pΓ cid6 cid3W Γ let ϕ u x x cid3 W Γ cid3W cid3 Γ pΓ 6 Consistency polynomial upper bound preference relation general case This section considers problems determining consistency generating polynomial upper approximation general kinds cptheories fully acyclic ones considered Section 5 We ﬁrst consider conditions cptheories suﬃcient conditions cptheory consistent They weaker forms acyclicity stronger conditional acyclicity strong conditional acyclicity Section 61 contextuniform conditional acyclicity cucacyclicity Section 62 The similar notion conditional acyclicity 8 An important aspect conditions complexity determining coNPcomplete Proposition 24 complexity PSPACEcomplete determining consistency general cptheories For cucacyclic cptheories deﬁne way generating upper approximation Section 63 Section 64 1072 N Wilson Artiﬁcial Intelligence 175 2011 10531091 shows generate total order satisfying cptheory Theorem 6 Section 65 summarises results strength different forms consistency speciﬁcally following progressively weaker conditions cptheory locally consistent fully acyclic cucacyclicity strong conditional acyclicity conditional acyclicity consistency local consistency Section 65 discusses use results conﬁrm cptheory consistent 61 Strong conditional acyclicity strong satisfaction We consider condition called strong satisfaction suﬃcient cstree satisfy cptheory Deﬁnition 13 This expressed pair conditions node r cstree The ﬁrst condition choice new variable Y branched given assignment variables node condition satisﬁed Y strongly aundominated The second condition node value ordering extends appropriate local ordering Proposition 18 gives equivalent deﬁnition cstree strongly satisfy cptheory leads Proposition 19 states strong satisfaction implies satisfaction The deﬁnition strong satisfaction suggests deﬁnition stronger form conditional acyclicity Deﬁnition 14 cptheory locally consistent given assignment proper subset set variables exists strongly aundominated variable This easily implies cptheory strongly conditionally acyclic iteratively construct starting root node cstree strongly satisfying Γ implying consistency Γ Proposition 21 In addition result Proposition 20 given useful helping prove particular cptheory strongly conditionally acyclic We interested cstrees associated orders satisfy cptheory Γ For need sure path relevant ϕ Γ Xϕ appears variables W ϕ Xϕ important variable Proposi tion 13 Section 43 Furthermore require conditioning variables U ϕ appear Xϕ know values relevant parents Xϕ decide values Xϕ preferred cf Proposition 14 Deﬁnition 13 Let Γ cptheory variables V Let A subset V let A assignment variables A We Y V A strongly aundominated respect Γ ϕ Γ uϕ compatible Xϕ Y U ϕ A ii W ϕ cid17 Y U ϕ Xϕ A A body tuple cid18 A Y cid6cid19 said strongly satisfy Γ I Y strongly aundominated II ordering cid6 Y extends cid6Y y cid6Y y cid3 y cid6 y cid3 A body node said strongly satisfy Γ associated body tuple strongly satisﬁes Γ A cstree said strongly satisfy Γ body node cstree strongly satisﬁes Γ The following result immediately consequence ﬁrst previous deﬁnition uϕ compatible cid5 assignment set variables Lemma 9 Let Γ cptheory variables V let Y variable V Then variable Y strongly cid5undominated ϕ Γ Y W ϕ b Xϕ Y U ϕ In words Y strongly cid5undominated Y important variable preferences values Y unconditional This Y undominated respect GΓ Section 223 exist Z V Z Y GΓ If cstree strongly satisﬁes Γ conditions ensure ϕ Γ outcome α α cid11 uϕ path root leaf node cid18V αcid19 variables U ϕ appear Xϕ appears variables W ϕ leads following result expressing equivalent form cstree strongly satisfy cptheory Proposition 18 Let Γ cptheory let σ cstree Then σ strongly satisﬁes Γ following pair conditions hold 1 For ϕ Γ outcome α α cid11 uϕ path root α element U ϕ appears Xϕ appears element W ϕ 2 body node r σ associated tuple cid18 A Y cid6cid19 relation cid6 extends local ordering cid6Y Proposition 18 Proposition 14 Section 43 immediately imply following result Proposition 19 If cstree σ strongly satisﬁes cptheory Γ satisﬁes Γ associated order σ satisﬁes Γ N Wilson Artiﬁcial Intelligence 175 2011 10531091 1073 Here deﬁne stronger form conditional acyclicity cptheory shown Proposition 21 Deﬁnition 14 Strongly conditionally acyclic cptheory We Γ strongly conditionally acyclic locally consistent proper subsets A V A exists strongly aundominated variable Deﬁnition 13 Below derive result Proposition 20 easier prove strong conditional acyclicity consistency First Lemma 10 strongly aundominated undominated respect particular relation Fa V A Let A V set variables let A assignment A Deﬁne relation Fa V notation Section 223 consist edges U ϕ Xϕ U ϕ Xϕ W ϕ ϕ Γ uϕ compatible Fa union U ϕ Xϕ U ϕ Xϕ W ϕ ϕ Γ uϕ compatible Thus Y Z Fa exists ϕ Γ uϕ compatible Y U ϕ Z Xϕ Y U ϕ Xϕ Z W ϕ Lemma 10 Let A V let A let Y variable V A Then Y strongly aundominated Y Fadominated element V A exist Z V A Z Y Fa Proposition 20 Let A B V sets variables A B let A assignment A suppose b B extends Then Fb Fa Y Z Fb Y Z Fa ii Y V B strongly aundominated Y strongly bundominated iii Fa restricted V A acyclic exists strongly bundominated variable V B Example 8 Consider cptheory Γ Example 3 Section 41 consisting following preference statements ϕ1 cid5 x1 x1 X2 X3 ϕ2 x1 x3 x3 X2 ϕ3 x1 x2 x2 ϕ4 x1 x2 x2 X3 ϕ5 x1 x3 x3 By Lemma 9 X1 strongly cid5undominated Proposition 20ii X1 strongly bundominated assignment b set variables B B cid17 X1 F x1 restricted X2 X3 consists edge X3 X2 ϕ2 acyclic Then Proposition 20iii exists strongly bundominated variable b extending x1 Similarly F x1 restricted X2 X3 acyclic Proposition 20iii exists strongly bundominated variable b extending x1 This implies assignment b proper subset V exists strongly bundominated variable Γ strongly conditionally acyclic A similar argument works Example B Section 32 This example illustrates strong conditional acyclicity consistency cptheory Γ easily shown Γ close acyclic The following result follows easily deﬁnitions Lemma 11 Let Γ strongly conditionally acyclic cptheory Given proper subset A V V exists Y total order cid6 Y cid18 A Y cid6cid19 body tuple strongly satisfying Γ Proof Since Γ strongly conditionally acyclic exists strongly aundominated variable Y Choose outcome α extending pick strict total order cid6 extending cid6Y α strict partial order Then cid6 extends cid6Y α This possible local consistency cid6Y cid18 A Y cid6cid19 strongly satisﬁes Γ cid2 This means easy construct cstree satisfying strongly conditionally acyclic Γ start picking root node strongly satisfying Γ proceed inductively choosing children strongly satisfying Γ node chosen Lemma 11 ensures cstree generated strongly satisfy Γ satisﬁes Γ Proposition 19 This implies following result Proposition 21 Suppose Γ strongly conditionally acyclic cptheory Then Γ conditionally acyclic consistent The example shows converse fails Example 9 Let V X1 X2 Let Γ pair statements x1 x2 x2 x2 x1 x1 Γ equal x1x2 x1x2 x1x2 x1x2 acyclic Γ equal Γ Theorem 1ii Γ consistent Further Γ conditionally acyclic deﬁne cstree σ satisfying Γ follows σ includes body nodes apart root node The root node equal cid18 cid5 X1 x1 x1cid19 The ﬁrst body node cid18 X1 x1 X2 x2 x2cid19 second cid18 X1 x1 X2 x2 x2cid19 The associated ordering σ outcomes transitive closure x1x2 σ x1x2 σ x1x2 σ x1x2 σ contains Γ 1074 N Wilson Artiﬁcial Intelligence 175 2011 10531091 However Γ strongly conditionally acyclic By Lemma 9 X1 strongly cid5undominated pref erence statement x2 x1 x1 Similarly X2 strongly cid5undominated exists strongly cid5undominated variable 62 Contextuniform conditional acyclicity We consider cucacyclicity stronger form conditional acyclicity cptheories requires particular dependency graph HΓ acyclic Section 223 It closely connected notion conditional acyclic ity TCPnets 8 A major motivation considering cucacyclicity allows polynomial upper approximation preference relation Γ deﬁned Section 63 shown Sections 44 45 ordering tasks constrained optimisation Deﬁnition 15 Cucacyclic cptheory Let Γ cptheory Let A assignment set variables A Deﬁne directed graph J aΓ set variables V notation Section 223 consist set U ϕ Xϕ W ϕ edges ϕ Γ set Xϕ W ϕ edges ϕ Γ U ϕ A extends uϕ In words Y Z J aΓ exists ϕ Γ Y U ϕ Z Xϕ W ϕ ii extends uϕ Y Xϕ Z W ϕ Deﬁne order cid3aΓ V abbreviated cid3a transitive closure J aΓ We cptheory Γ contextuniformly conditionally acyclic abbreviated cucacyclic locally consistent outcome α V J αΓ acyclic cid3α irreﬂexive The reason terminology contextuniform relations U ϕ Xϕ W ϕ involving context sets U ϕ required hold ϕ Γ contrast relations Section 61 deﬁnition Fa require condition ϕ In particular cucacyclicity Γ requires dependency graph HΓ acyclic This property similar notion conditional acyclicity TCPnets Deﬁnitions 8 9 8 property conditional acyclicity weaker condition The methods Section 5 8 checking certain kinds cptheories cucacyclic Note Γ contextuniformly conditionally acyclic A V A J acyclic J J α α extending α A Cucacyclicity stronger condition strongly conditionally acyclic Proposition 22 If cptheory Γ contextuniformly conditionally acyclic strongly conditionally acyclic condi tionally acyclic consistent Example 10 Consider cptheory Γ Example 8 Section 61 Example 3 Section 41 For α extending x1 cid3α consistent fact equal ordering X1 X3 X2 partly preference statement ϕ2 equals x1 x3 x3 X2 For α extending x1 cid3α equal ordering X1 X2 X3 Thus α cid3α irreﬂexive Γ cucacyclic Similarly Example B Section 32 α extending x1 cid3α equals ordering X1 X3 X2 X4 α extending x1 cid3α equals ordering X1 X2 X3 X4 Γ cucacyclic Example B As following example illustrates contextuniform conditional acyclicity strictly stronger condition strong conditional acyclicity Example 11 Let cptheory Γ consist following statements cid5 x1 x1 x1x3 x2 x2 x1x2 x3 x3 HΓ acyclic X2 parent X3 vice versa This implies outcome α J αΓ acyclic Γ cucacyclic On hand Γ strongly conditionally acyclic Consider assignment A A proper subset V To strong conditional acyclicity need exists Y V A strongly aundominated If A contain X1 X1 strongly aundominated If equals x1 x1x3 x1x3 X2 strongly aundominated If equals x1 x1x2 x1x2 X3 strongly aundominated This covers cases 63 Generating polynomial upper approximation preference relation In section develop approach generating upper approximation preference relation Γ As explained Sections 44 45 constrained optimisation ordering queries This particular upper approximation requiring acyclicity requires strong condition cptheory cucacyclic Deﬁnition 15 Section 62 N Wilson Artiﬁcial Intelligence 175 2011 10531091 1075 We deﬁne relation cid16Γ outcomes associated cucacyclic Γ This modiﬁed form Deﬁnition 12 Section 52 fully acyclic case We Theorem 5 cid16Γ upper approximation preference relation Γ To compare outcomes relation cid16Γ ﬁrst consider set cid7α β variables differ Among set eliminate variables dominated respect relation cid3α Deﬁnition 15 obtain set variables Θ cid3α β Then α cid16Γ β deﬁned hold X Θ cid3α β α X better β X according local ordering cid6 X Let A subset V let A assignment variables A let B subset V We Y B α Deﬁnition 4 cid3aundominated B Y undominated B respect cid3a exist Z B Z cid3a Y Deﬁnition 16 Upper approximation cid16Γ Consider ﬁxed cucacyclic Γ For α β V let cid7α β set variables α β differ X V α X cid13 β X Let Θ cid3α β cid3α undominated variables cid7α β note deﬁnition cucacyclicity ensures Θ cid3α β nonempty given α cid13 β The binary relation cid16Γ outcomes deﬁned α cid16Γ β X Θ cid3α β α X cid6 X α β X We prove following result section Theorem 5 Let Γ cucacyclic cptheory Then cid16Γ strict partial order containing Γ upper approximation preference relation Γ Example 12 Continuing Example 10 let α outcome x1x2x3 let β outcome x1x2x3 The outcomes differ variables X2 X3 cid7α β X2 X3 cid3α ordering X1 X2 X3 Example 10 Θ cid3α β X2 We α X2 cid6 X2 α x2 preference statement ϕ4 x1 x2 x2 X3 Hence α cid16Γ β α β X2 x2 cid6 X2 Dominance testing cid16Γ determining α cid16Γ β polynomial time easy cid16Γ polynomial upper approximation If Γ fully acyclic cid16Γ compared relation cid6pΓ deﬁned Deﬁnition 12 Section 63 Let α β outcomes We J αΓ GΓ cid3α G Hence Θ cid3α β Θα β Therefore α cid16Γ β implies α cid6pΓ β cid16Γ closer approximation Γ cid6pΓ Proving Theorem 5 The way shall prove Theorem 5 Lemma 14 Lemma 15 cid16Γ intersection total orders σ particular set cstrees cusatisfy Γ Deﬁnition 17 This property ensures cstree satisﬁes Γ The theorem follows Proposition 15 Section 44 A direct proof possible Deﬁnition 17 cusatisfaction Let Γ L cucacyclic A body node associated tuple cid18 A Y cid6cid19 said context uniformly satisfy Γ abbreviated cusatisfy Γ Y cid3aundominated V A exist Z V A Z cid3a Y ii total ordering cid6 Y extends cid6Y A cstree said cusatisfy Γ body node cstree cusatisﬁes Γ y cid6Y y cid6 y y cid3 cid3 If Y cid3aundominated V A seen Y strongly aundominated V A Deﬁnition 13 immediately implies following result Proposition 19 Section 61 Lemma 12 If cstree cusatisﬁes Γ strongly satisﬁes Γ satisﬁes Γ If Γ cucacyclic Deﬁnition 15 A V A deﬁne body node cusatisfying Γ choosing Y cid3aundominated V A cid3a acyclic cid3α acyclic α cid11 ensuring pick Y choosing total order cid6 Y extending cid6Y partial order local consistency This means generate cstree cusatisfying Γ choosing root node iteratively generating children nodes created This proves following lemma possible cid6Y Lemma 13 If Γ cucacyclic exists cstree cusatisfying Γ The following result shows cid16Γ contained σ cstree σ cusatisfying Γ Lemma 14 Let Γ cucacyclic cptheory let σ cstree cusatisﬁes Γ Then σ contains cid16Γ The lemma supplies ﬁnal piece need prove Theorem 5 1076 N Wilson Artiﬁcial Intelligence 175 2011 10531091 Lemma 15 Let Γ cucacyclic cptheory suppose outcomes α β V case α cid16Γ β Then exists cstree σ cusatisfying Γ case α σ β Putting parts following result immediately entails Theorem 5 Proposition 23 Let Γ cucacyclic cptheory Then cid16Γ intersection σ cstrees σ cusatisfying Γ Furthermore cid16Γ strict partial order containing Γ upper approximation preference relation Γ Proof By Lemma 14 Lemma 15 α cid16Γ β α σ β cstrees σ cusatisfying Γ This implies cid16Γ intersection σ cstrees σ cusatisfying Γ If σ cusatisﬁes Γ satisﬁes Γ Lemma 12 Proposition 15 Section 44 implies cid16Γ strict partial order containing Γ cid2 64 Generating total order satisfying cptheory Γ The procedure described aboveafter Lemma 11 Section 61for generating cstree strongly conditionally acyclic Γ usually depending choices generate different cstrees satisfying Γ It useful way pinning choice way deﬁning implicitly particular total order mi Xi values satisﬁes Γ We assume listing X1 Xn V total ordering x1 Xi We use deﬁne particular cstree σ Γ satisﬁes Γ This constructed root Whenever set choices aundominated variable node r choose Y r Xi minimal choices Similarly deﬁne cid6r generating values Xi best worst point choosing cid6 Xi maximal value remaining values ties broken choosing value x xmi j largest j Suppose want able generate outcomes order compatible preferences Γ compatible Γ If Γ conditionally acyclic σ Γ order This order deﬁned implicitly explicitly construct cstree σ Γ use In particular generate polynomial time best K outcomes according σ Γ generating ﬁrst K leaf nodes cstree σ Γ Also given different outcomes α β eﬃciently determine better according order σ Γ constructing nodes leaf node cid18V αcid19 leaf node cid18V βcid19 65 Summary discussion forms consistency The following result sums relationships different conditions cptheories explored Theorem 6 Let Γ cptheory Recall Γ consistent exists strict total order satisfying Γ Deﬁnition 2 Section 23 locally consistent cid6 X fully acyclic GΓ acyclic Section 223 conditionally acyclic exists cstree satisfying Γ Deﬁnition 9 Section 43 strongly conditionally acyclic locally consistent A V A exists strongly aundominated α irreﬂexive variables X outcomes α Deﬁnition 4 Section 41 variable Deﬁnition 14 Section 61 contextuniformly conditionally acyclic cucacyclic locally consistent outcome α V J αΓ acyclic Deﬁnition 15 Section 62 Then Γ locally consistent fully acyclic Γ contextuniformly conditionally acyclic Γ strongly conditionally acyclic Γ conditionally acyclic Γ consistent Γ locally consistent Moreover implications equivalences Proof If Γ fully acyclic GΓ acyclic J αΓ acyclic outcome α J αΓ GΓ This shows Γ locally consistent GΓ acyclic Γ contextuniformly conditionally acyclic The implications Propositions 22 21 12 9 respectively The follows Example 10 cptheory Γ contextuniformly conditionally acyclic fully acyclic Example 11 Example 9 Example 6 Example 2 respectively cid2 N Wilson Artiﬁcial Intelligence 175 2011 10531091 1077 Determining Γ strongly conditionally acyclic coNPcomplete problem determining Γ context uniformly conditionally acyclic It straightforward problems coNP coNPhardness shown reduction 3SAT similar construction proof Theorem 2 8 coNP hardness local consistency Proposition 11 Proposition 24 The problem determining cptheory Γ strongly conditionally acyclic coNPcomplete problem determining Γ cucacyclic Determining consistency cptheory PSPACEcomplete 1718 We necessary condition sistency local consistency suﬃcient condition strong conditional acyclicity lower complexity One adapt methods Section 5 8 check contextuniformly conditionally acyclicityand consistencyof certain forms cptheory Γ It easy conﬁrm consistency cptheory Γ somewhat ad hoc manner assuming Γ locally consistent easy conﬁrm We deﬁne simple set rules determine variable gets picked point generating cstree σ satisfying Γ For example suppose V X1 X8 consider following rules variable ordering X1 X2 means X1 picked earlier X2 X1 X2 X3 X4 X5 X6 X7 X8 x1 X3 X4 X5 cid3 x 1x2 X5 X4 X3 X5 X3 X4 cid3 x4x 6 X7 X8 X8 X7 cid3 cid3 Given tuple A rules determine minimal variable V A Ya example assignment x 1x 2 Ya X5 deﬁne value ordering cid6 node simple way This deﬁnes compact representation function g associated cstree σg Section 42 It straightforward check σg strongly satisﬁes Γ Ya aundominated If proves Γ conditionally acyclic consistent use σg totally order set outcomes In section formal way developed compactly representing variable orderings search tree determining consistency enabling totally order outcomes way compatible cptheory 7 Variable ordering networks compact representations satisfying cstrees It shown Section 4 complete search trees important tasks conﬁrming consistency cptheory Γ totally ordering set outcomes In particular Γ happens strongly conditionally acyclic easy deﬁne cstree strongly satisﬁes Γ Section 64 However conﬁrming consistency Γ constructing cstree explicitly usually feasible number nodes order number outcomes V Here compact representation certain cstrees satisfying Γ The idea turn cstree directed acyclic graph decision diagram merging nodes decisions variables orderings point The key generating cstree strongly satisfying cptheory Γ choosing ar undominated variable Y r body node r ar tuple assignments instantiated variables Deﬁnition 13 Section 61 variable body node shown Γ consistent assuming local consistency Given local consistency Deﬁnition 4 Section 41 choosing node value ordering cid6r problem choose strict total order extending local ordering cid6Y strict partial order local consistency Consider nodes q r cid3 assignments set variables A Suppose associated tuples equivalent following sense assignment b subset B remaining variables V A variable Y bundominated This means choices aundominated abundominated Y variables nodes q nodes r neatly merge nodes q r We deﬁne graphical structure enables assert equivalences cid3 cid3 cid3 In Section 71 deﬁne variable ordering network compact representation variable orderings different branches cstree In Section 72 variable ordering triples deﬁned restrictions variable orderings cstree variable ordering network In Section 73 suﬃcient conditions deﬁned variable ordering network satisfy set variable ordering triples Section 74 generate set variable ordering triples Γ cptheory Γ way compatible variable ordering network given local consistency generate cstree satisfying Γ Thus construct variable ordering network proved consistency locally consistent Γ use implicitly deﬁned cstree eﬃciently answer total ordering queries Section 75 gives method constructing variable ordering network Γ Section 76 shows easily generate upper approximation preference relation variable ordering network 1078 N Wilson Artiﬁcial Intelligence 175 2011 10531091 Fig 3 A variable ordering network τ The root node sink node The set paths root sink onetoone correspondence set outcomes 71 Variable ordering networks This section describes variable ordering networks intended compact representations variable order ings cstree strongly satisﬁes given cptheory Let σ cstree let α outcome Write Oσ α ordering variables path α The idea develop compact representation variable ordering function Oσ A variable ordering network similar cstree interested representing variable orderings include value ordering information use directed acyclic graph potentially compact representation tree Variable ordering networks VONs deﬁned ﬁrst Deﬁnition 18 VON deﬁned Deﬁnition 19 compatible cstree induce variable ordering outcome Proposition 25 shows variable ordering networks cstrees represent set variable ordering functions Deﬁnition 18 Variable ordering network VON A variable ordering network variables V deﬁned directed acyclic sink node r nodes edges associated labels graph distinguished nodes root node r deﬁned Each directed edge e node r node r associated variable Y e value ye Y e corresponding assignment Y e ye We r cid3 child r r parent r cid3 cid3 Every node root node parent node sink node child Each node r following associated labels set variables Ar V b assignment ar variables Ar corresponding assignments paths node c exception sink node variable Y r V Ar variable instantiated For node r sink node deﬁne associated tuple cid18 Ar ar Y rcid19 It Y r children Y r edges coming Each edge e associated variable Y e Y r different associated value ye If e goes node r r For node r cid3 cid3 Arcid3 Ar Y r equal root exists parent node r r arcid3 equal tuple formed extending ar assignment Y e ye e edge node r r For root node r The sink node r associated tuple cid18 Ar αcid19 α outcome Ar V deﬁne Ar set ar equals cid5 assignment set cid3 cid3 Example 13 Fig 3 illustrates variable ordering network variables V X1 X2 X3 X4 Example B Sec associated tuple cid18 cid5 X1cid19 The node sink node r tion 32 The node root node r associated pair cid18V x1x2x3x4cid19 Note contrast cstrees nodes parent Let τ variable ordering network For outcome α deﬁne path root node sink node following node r edge corresponding assignment Y r αY r In particular outcome generates ordering variables V Conversely directed path root node sink node corresponds outcome The set paths root node sink node onetoone correspondence set outcomes N Wilson Artiﬁcial Intelligence 175 2011 10531091 1079 Let τ variable ordering network variables V Let α outcome A variable ordering network τ generates total ordering Oτ α variables V following assignments variables α For instance τ variable ordering network Fig 3 Oτ x1x2x3x4 equals ordering X1 X3 X2 X4 following lefthand edges root node Oτ x1x2x3x4 equals X1 X2 X3 X4 A variable ordering network viewed representation variable orderings cstree Deﬁnition 19 cstree σ VON τ said compatible outcomes α ordering variables τ associated α ordering variables path α cstree σ In words Oτ Oσ The following result implies variable ordering networks cstrees represent set variable ordering functions Proposition 25 Let σ cstree There exists variable ordering network compatible σ Conversely τ variable ordering network exists cstree compatible τ 72 Variable ordering triples A variable ordering triple cid18u Y Z cid19 intended restriction orderings cstree means variable Y appear variable Z path root outcome α extends assignment u Variable ordering triples similar cistatements TCPnetssee Section 32 A set variable ordering triples represent conditions variable orderings required cstree strongly satisfy cptheorysee Section 74 Deﬁnition 20 A variable ordering triple cid18u Y Z cid19 ordered triple Y Z variables u assignment set variables Given set variable ordering triples T partial tuple A A V deﬁne Ta set variable ordering triples relevant given consider triples cid18u Y Z cid19 T u compatible restrict triples V A Deﬁnition 21 Let T set variable ordering triples let A assignment subset V Deﬁne Ta cid3 Y Z cid19 exists triple cid18u Y Z cid19 T Y Z V A tuple u U compatible set triples cid18u cid3 uU A u The ﬁrst lemma prove Lemma 17 modularity property use Section 73 Lemma 16 Let A B disjoint subsets V let A b B Let t assignment set variables T V A B let Y Z variables V A B Let T set variable ordering triples Then cid18t Z Y cid19 Tab exists assignment u set variables U V A U B T uT t u compatible b ii cid18u Z Y cid19 Ta Lemma 17 Let T set variable ordering triples Let A B disjoint subsets V let Tab Tacid3b cid3 A b B If Ta Tacid3 Proof This follows immediately previous lemma cid2 73 Suﬃcient conditions variable ordering network satisfy set ordering triples In section suﬃcient condition Deﬁnition 23 Proposition 26 given VON satisfy variable orderings conditions stipulated set triples A result Proposition 27 included imply limit size VONs required satisfy cptheory A variable ordering network respects variable ordering triple associated restriction variable orderings respected Deﬁnition 22 A VON τ respects variable ordering triple cid18u Y Z cid19 Y appears Z Oτ α outcomes α extending u We deﬁne condition suﬃcient Proposition 26 variable ordering network respect set variable ordering triples condition enforced easily 1080 N Wilson Artiﬁcial Intelligence 175 2011 10531091 Deﬁnition 23 Let VON τ strongly compatible set variable ordering triples T following pair properties holds node r τ cid18u Y Y rcid19 T u compatible ar Y Ar ii Merging suppose r child node r cid3 edge labelled assignment Y rcid3 y Extend assignment arcid3 assignment Y rcid3 y form assignment variables Ar We Ta Tar The following lemma proved Lemma 17 prove Proposition 26 showing variable ordering network τ strongly compatible set ordering triples T implies τ respects T Lemma 18 Suppose τ strongly compatible set triples T let r node τ Consider path root r associated assignment Then Ta Tar Proposition 26 If variable ordering network τ strongly compatible set ordering triples T τ respects T We ﬁnish section result limits size variable ordering networks need use cptheory Γ Section 75 For set T ordering triples deﬁne Q T A consist variables X A exists cid18u Y Z cid19 T Y Z V A U cid17 X u assignment variables U Q T A considered set variables A relevant determining variable orderings outside A Proposition 27 Let T set variable ordering triples variables V let A subset V Suppose Q T A Then Ta Tacid3 cid3 agree 74 cptheories sets variable ordering triples For cptheory Γ generate set variable ordering triples Γ corresponding Γ We Theorem 7 Γ locally consistent construct variable ordering network respects Γ Γ consistent This gives approach showing consistency cptheories A method constructing Γ given Section 75 The idea want enforce following property variable ordering network ϕ Γ outcome α extending uϕ variables U ϕ appear Xϕ Xϕ appears variables W ϕ path α cf Proposition 181 Section 61 Γ encodes ordering information Deﬁnition 24 Deﬁne Γ set triples cid18u Y Z cid19 exists ϕ Γ uϕ u Y U ϕ Z Xϕ W ϕ ii Y Xϕ Z W ϕ Example 14 Consider Γ Example B Section 32 Example 15 Because Γ contains statement ϕ x1 x2 x2 X4 x1 X1 x2 x2 X2 Γ contains triples cid18x1 X1 X2cid19 cid18x1 X1 X4cid19 case Deﬁnition 24 cid18x1 X2 X4cid19 case ii Deﬁnition 24 This ties fact σ cstree strongly satisﬁes Γ ϕ X1 come X2 come X4 path outcome α extends x1 Proposition 181 Lemma 19 shows Γ determines variables strongly aundominated This proof Lemma 20 gives suﬃcient condition Γ cstree strongly satisfy cptheory Γ proof Theorem 7 Lemma 19 For A Y V A Y strongly aundominated respect Γ exist cid18u Z Y cid19 Γ Z V A u compatible This exist triple form cid18u cid3 Z Y cid19 Γ Lemma 20 Let Γ locally consistent cptheory suppose τ variable ordering network respects Γ let σ cstree compatible τ Suppose body nodes r cid18 A Y cid6cid19 σ associated strict total ordering cid6 extends local ordering cid6Y Deﬁnition 4 Then σ strongly satisﬁes Γ Theorem 7 Let Γ cptheory variables V suppose exists variable ordering network τ respects Γ If Γ locally consistent conditionally acyclic Therefore Γ consistent locally consistent N Wilson Artiﬁcial Intelligence 175 2011 10531091 1081 Proof By Proposition 25 Section 71 exists cstree σ compatible τ Let r cid18 A Y cid6cid19 body node σ Local consistency Γ implies local ordering cid6Y strict partial order Redeﬁne cid6 strict total ordering extending cid6Y By Lemma 20 cstree σ strongly satisﬁes Γ showing Γ conditionally acyclic consistent Proposition 12 Section 43 The follows local consistency necessary condition consistency Proposition 9 Section 41 cid2 Theorem 7 kind counterpart Theorem 3 Section 51 shows construct variable ordering network respects Γ locally consistent cptheory Γ proved Γ consistent In Section 75 way attempting construct variable ordering network strongly compatible Γ respects Γ Proposition 26 75 Generating variable ordering network respects Γ In section method constructing variable ordering network τ Γ respects Γ succeeds prove Γ consistent Γ locally consistent Theorem 7 Label V X1 Xn To construct τ Γ ﬁrst construct single root node iteratively construct children node constructed As cstrees node r generate Y r directed edges r associated value variable Y r Let ar extended assignment y Y r let A Ar Y r We check node q constructed Aq A Γ aq Γ corresponds merging condition Deﬁnition 23ii If node q add directed edge r q associated value y Y r Suppose node If strongly aundominated variable V A construction τ Γ fails proceed create new node cid18 A Xicid19 leaf node cid18 A acid19 A V Xi chosen minimal aundominated variables V A If construction τ Γ fail τ Γ exists Example 15 The algorithm applied Γ Example B Section 32 consists following preference statements cid5 x1 x1 X2 X3 X4 x1 x3 x3 X2 X4 x1 x2 x2 X4 x1 x2 x2 X3 X4 x1 x3 x3 X4 x3 x4 x4 x3 x4 x4 We ﬁrst generate root node To need choose strongly cid5undominated variable The choice X1 preference statement cid5 x1 x1 X2 X3 X4 means X2 X3 X4 strongly cid5undominated Lemma 9 Thus root node cid18 cid5 X1cid19 We create edges corresponding choices x1 x1 X1 Following x1 edge need choose x1 undominated variable X2 X3 X4 The X3 preference statement x1 x3 x3 X2 X4 means X2 X4 x1undominated given x1 X3 needs come X2 X4 Thus create node r tuple cid18 X1 x1 X3cid19 Following edge r associated choice x3 X3 leads node q tuple cid18 X1 X3 x1x3 X2cid19 X2 x1x3undominated variable X2 X4 preference statement x1 x2 x2 X4 Following edge r associated choice x3 X3 let ar extended assignment x3 Y r X3 let A Ar Y r x1x3 A X1 X3 ﬁnd A Aq Γ Γ aq consists single triple cid18cid5 X2 X4cid19 This means x3edge node r leads node q This relates merging condition Deﬁnition 23 Continuing process value ordering z z z equalling x1 x2 x3 x4 generate variable ordering network Fig 3 Proposition 27 Section 73 limits possible size generated variable ordering network τ Γ Q Γ A consists variables X A exists ϕ Γ U ϕ cid17 X U ϕ cid3 A Xϕ W ϕ cid3 A ii Xϕ A W ϕ cid3 A For given set variables A number nodes r Ar A exponential Q Γ A exponential A The following result shows Γ strongly conditionally acyclic construction given bound succeed Proposition 28 If Γ strongly conditionally acyclic cptheory τ Γ exists Proof The deﬁnition strongly conditionally acyclic cptheory ensures A exists aundominated variable V A This implies construction fail point cid2 Proposition 29 shows ﬁnd τ Γ exists locally consistent Γ proved consis tency Γ Furthermore Proposition 28 shows Γ happens strongly conditionally acyclic cptheory construction given bound succeed correctly determine Theorem 7 Γ consistent Proposition 29 Let Γ cptheory suppose τ Γ exists Then τ Γ respects Γ Also Γ consistent locally consistent 1082 N Wilson Artiﬁcial Intelligence 175 2011 10531091 Proof The construction τ Γ ensures strongly compatible Γ Lemma 19 ensures condition Deﬁnition 23 holds condition ii clearly holds Hence Proposition 26 τ Γ respects Γ By Theorem 7 Section 74 Γ consistent locally consistent cid2 The variable ordering network τ Γ Example B Section 32 seven nodes Example 15 Fig 3 opposed 31 nodes corresponding cstree σ Γ More generally expect variations importance orderings variable ordering network compact Also number variable orderings associated variable ordering network exponential number nodes network factorises variable orderings need different orderings different paths cstree variable ordering network small enabling consistency eﬃciently checked 76 Generating upper approximation variable ordering network From locally consistent cptheory Γ variable ordering network τ respects Γ generate simple way polynomial upper approximation preference relation Γ ordering optimisation tasks shown Section 4 Deﬁne irreﬂexive relation cid16Γ τ follows Consider different outcomes α β Follow assignment α edges τ root node r reached α β differ Y r α Ar β Ar αY r cid13 βY r As cstrees node node divides α β Deﬁne α cid16Γ ar βY r holds Deﬁnition 4 τ β hold αY r cid6Yr Theorem 8 shows cid16Γ total orders cid16Γ strict total order useful generating optimal solution τ constrained optimisation problem cid16Γ τ tend cruder approximation Γ upper approximations deﬁned paper Sections 52 63 To prove Theorem 8 use similar technique proving Theorems 4 5 showing cid16Γ τ upper approximation Γ Note local orderings cid6Y τ intersection set cstree orders Lemma 21 Let Γ locally consistent cptheory let τ variable ordering network respects Γ Let Q set cstrees σ compatible τ body nodes r cid18 A Y cid6cid19 σ associated strict total ordering cid6 extends local ordering cid6Y τ β α σ β σ Q Then α cid16Γ This implies cid16Γ τ upper approximation preference relation Γ Theorem 8 Let Γ locally consistent cptheory let τ variable ordering network respects Γ Then cid16Γ partial order cid16Γ mation preference relation Γ τ β holds outcomes α β α Γ β Hence cid16Γ τ contains Γ α cid16Γ τ strict τ upper approxi Proof Lemma 21 implies cid16Γ τ strongly satisﬁes Γ σ satisﬁes Γ Proposition 19 Section 61 Proposition 15 Section 44 implies cid16Γ strict partial order containing Γ cid2 intersection relations σ cstrees σ Q By Lemma 20 σ τ 8 Related work The work described herewhich based develops papers 3231builds fundamental work CPnets described especially 3 4 work authors Boutilier Brafman Domsh lak Hoos Poole papers 1261159108 main initial motivations current work CPnets approaches generalised richer language Although work focused acyclic CPnets strong restriction limiting potential applicability For analysis discussion nonacyclic CPnets Chapter 6 11 Section 4 12 9 Section 4 17 35 One motivations work paper determining consistency cptheory hardness complexity results task CPnets 11121718 Logicbased formalisms comparative preferences emphasise importance ceteris paribus interpretations include 2930192128 Philosophy literature 15262723241 AI literature The preference statements paper form u x x single notnecessarily Boolean variable X conditional partial assignment u irrespective variables W variables treated ceteris paribus manner Other logicbased formalisms allow preferences arbitrary propositional formulae vary interpretation ceteris paribus Formalisms deﬁned 24 Deﬁnition 4 281 allow irrespective statements formalisms especially expressive cid3 cid3W focusing values x x One main tasks paper concerned totally ordering outcomes way compatible cptheorys preference ordering The work closely related ordering queries 4 use search trees 458 CPnets TCPnets However kind approach problem construct value N Wilson Artiﬁcial Intelligence 175 2011 10531091 1083 function utility function set outcomes function assigns number outcome ordering compatible preference relation Work kind acyclic CPnets includes UCPnets 2 soft constraints methods 1413 7 An advantage search tree approaches value function approaches easier generate outcomes decreasing preference order The upper approximation case fully acyclic cptheories Section 52 generalises relation cid16 deﬁned ordering queries 4 acyclic CPnets kind approximation considered 22 Another upper approximation cptheories deﬁned 33 generalised expressive preference languages 34 9 Summary discussion This paper deﬁned formalism cptheories simple logic comparative preferences basic formal properties shown Section 2 The relationship CPnets TCPnets analysed expressed Section 3 It shown cptheories particular precise sense general CPnets TCPnets represent natural statements expressed CPnets TCPnets lexicographic order A result included showing n essentially unique acyclic CPnet n Boolean variables totally orders outcomes Much paper Sections 4 5 6 7 dedicated related problems determining consistency cp theory totally ordering set outcomes way compatible cptheory preference relation The key basic task particular choosing outcomes displayed ﬁrst user The approaches developed cover nonacyclic acyclic cases cptheories means methods applied nonacyclic CPnets TCPnets important nonacyclic sets preference statements easily arisetheres irrational Inconsistency indicates incoherence input preference statements example elicited statements reﬂecting users preferences importance able check consistency However determining consistency cptheory CPnet extremely hard problem desirable ﬁnd incomplete methods prove consistency prove inconsistency A simple necessary condition consistency deﬁned called local consistency Section 41 testing local consistency easy particular parents set U X variable X small inconsistency proved showing local inconsistency If cptheory fully acyclic consistency holds local consistency holds Section 5 In Section 6 suﬃcient conditions derived consistency lower complexity speciﬁcally strong conditional acyclicity Section 61 cucacyclicity Section 62 The approaches conﬁrming consistency ordering tasks based complete search trees cstrees similar depthﬁrst search solution constraint satisfaction problem A suﬃcient condition consistency cptheory Γ cstree satisfying Γ If looking exists cstree satisfying locally consistent Γ suﬃcient satisfy certain constraints Γ imposes variable orderings appear branches cstree Proposition 18 Section 61 Explicitly constructing cstree possible number variables small size linear number outcomes Different compact representations satisfying cstree derived expressing variable orderings search tree Of particular note variable ordering network deﬁned Section 7 uses decision diagram representation variable orderings These compact representations cstree allow consistency cptheory determined ordering tasks performed eﬃcient way Unconstrained optimisation reduces like case CPnets solving constraint satisfaction problem Poly nomial upper approximations preference relation derived Sections 52 63 76 useful generating relatively eﬃcient way set optimal solutions constraint satisfaction problem Section 45 There directions work usefully extended developed list The language conditional preferences allows preferences single variable conditional variables natural preference statements involve preferences variable desirable sider general languages particular lines languages considered 2427 34 extent methods paper extended The idea cstree extended include partially completed search trees An upper approximation deﬁned closer approximation preference relation Γ ones deﬁned paper 33 conjunction cstree methods developed constrained optimisation In addition propagation methods improving eﬃciency constrained optimisation developed order prune subtrees search tree contain outcomes dominatedwith respect appropriate upper approximationby solution weve The compact representation variable orderings developed Section 7 compact weaker conditions merging Section 75 generating variable ordering network This paper addressed important hard 41218 problem dominance testing approaches Sec tion 5 4 Proposition 8 32 developed general cptheories 1084 N Wilson Artiﬁcial Intelligence 175 2011 10531091 Acknowledgements This material based works supported Science Foundation Ireland Grant No 05INI886 Grant No 08PII1912 Thanks referees constructive comments helped improve paper Appendix A Proofs Proof Lemma 1 If exists cycle cid6 β α cid6 acyclic β α appear cycle We sequence α cid6 cid6 β α cid6 β transitivity contradicts hypothesis ii If strict partial order cid6 strict total order exists pair α β different elements α cid6 β β cid6 α Arbitrarily choose pair Let cid6cid3 strict partial order strictly containing cid6 Iterating eventually generate strict total order containing cid6 iii follows ii ﬁrst taking transitive closure generate strict partial order iv easily follows iii transitive closure cid6 β α By cid6cid3 v Clearly cid6 subset intersection strict total orders containing To prove converse suﬃcient case α cid6 β α β intersection strict total orders extending cid6 exists strict total order extending cid6 α β So suppose case α cid6 β If α β implication follows immediately let assume α cid13 β By cid6 β α irreﬂexive acyclic iii exists strict total order extending cid6 β α β α α β required cid2 Proof Lemma 2 We cid11 Γ Γ Γ transitive closure Γ transitive contains ii Γ consistent exists strict total order extending Γ Lemma 1iv Γ acyclic Γ acyclic transitive closure Γ irreﬂexive strict partial order iii If Γ consistent ii Γ strict partial order Lemma 1v equal intersection strict total orders extending intersection strict total orders satisfying Γ iv Suppose Γ consistent Γ cid11 α β α β holds strict total orders satisfying Γ intersection strict orders satisfying Γ contains pair α β iii α Γ β v Suppose Γ consistent Γ cid11 ϕ holds extends ϕ intersection strict total orders satisfying Γ superset ϕ Γ ϕ cid2 strict total orders satisfying Γ iii Proof Proposition 2 Let arbitrary strict total order set V outcomes Let X V u U X x x cid3 t T tux tux conditional preference table satisﬁes cptheory Γcp cid3 V x cid6 X T V X U X satisﬁes cid6 X satisﬁes cptheory statement u x x cid3 u Therefore satisﬁes cid3 u x cid3 satisﬁes Γ XY u U X x x x cid6 X cid3 u x y y iarc X Y Hence satisﬁes iarcs N satisﬁes Γi cid3 Y assignments r V X Y extending u rxy rx holds satisﬁes u x x cid3Y This satisﬁes y cid3 cid3 cid3 u x satisﬁes Γ Xs Y satisﬁes qs x x cid3 x cid6 X holds u qs restricted U X This holds rsxy rsx cid3 x cid6 X assignments r V S XY X Y x x satisﬁes cistatement X s Y Hence satisﬁes cistatements N satisﬁes Γci cid3 Y u rs restricted U X This cid3 cid3Y assignments q U X S XY x x holds y y cid3 u x y cid3 Putting satisﬁes TCPnet N satisﬁes cptheory ΓN Therefore N satisﬁable ΓN consistent Furthermore N satisﬁable ΓN consistent N intersection strict total orders satisfying N intersection strict total orders satisfying ΓN equals ΓN Lemma 2iii cid2 Proof Proposition 3 Well Γ equals lex showing Γ Γ transitive closure Γ equal lex equals lex Because lex transitive To Γ lex suppose α β Γ Then α β Γi cid3 cid3 Xi1 Xn Γi α Xi x β Xi x x required exists statement cid5 x j α X j β X j We α Xi β Xi α lex β To prove converse suppose α lex β Then 1 m α Xi β Xi j α X j cid3 β Xi Since ϕ Γ cid3 Xi1 Xn x α Xi x ϕ statement cid5 x x β X j But α β ϕ α β Γ cid2 Proof Lemma 3 All parts follow easily appropriate completeness theorems swappingﬂipping se quences However presentation selfcontained instead use Propositions 1 2 Section 31 Section 32 ii iii respectively N Wilson Artiﬁcial Intelligence 175 2011 10531091 1085 The ﬁrst follows immediately Theorem 1 α Γ β implies exists worsening swapping sequence α β α covers β element sequence α β worsening swap α β ii If CPnet N unsatisﬁable cid6N degenerates V V implies outcome covers outcome The applies TCPnets Suppose α covers β respect cid6N CPnet N satisﬁable cid6N equals cid3W ΓN Proposition 1 Part implies exists worsening swap α β ΓN Let u x x relevant element ΓN swap The form ΓN implies W α β differ X agree variables The proof iii ii Let N TCPnet suppose α covers β respect cid6N N satisﬁable cid6N equals ΓN Proposition 2 Part implies worsening swap α β cid3W relevant element ΓN swap The form ΓN implies W ΓN Let u x x singleton α β differ variable X variables cid2 Proof Proposition 5 Suppose contrary exists order 1 X1 X1 dominates X2 Xn respect cid6N 1 Write 2 total order X2 given speciﬁcation CPnet unconditional X2 set parents Because 1 nonempty choose α β V α X1 1 β X1 β X2 2 α X2 Because α X1 1 β X1 α cid6 β dominance X1 Therefore exists sequence α α1 αk β outcomes 1 k 1 worsening ﬂip αi αi1 For αi X2 αi1 X2 αi X2 2 αi1 X2 This implies α1 X2 αk X2 α1 X2 2 αk X2 possible αk X2 β X2 2 α X2 α1 X2 cid2 Proof Proposition 6 Let x1 1maximal element X1 Let α cid6M minimal element A α α X1 x1 exists cid6M acyclic let β cid6M maximal element B V A β x1 1 β X1 Since α X1 1 β X1 dominance X1 α cid6 β Furthermore γ cid13 α β γ A case α cid6 γ γ B case γ cid6 β This shows exist γ α cid6 γ cid6 β proving α covers β respect cid6M By Lemma 3iii case α β differ variables obtain required contradiction showing α β differ variables cid3 We α X1 cid13 β X1 Suppose α X2 β X2 element x2 let x 2 element X2 Since X2 cid3 cid3 2 b CP statement cid5 x parents CP statement cid5 x2 x 2 x2 If worsening ﬂip α element αcid3 A α cid6 αcid3 contradicting deﬁnition α If b perform improving ﬂip β produce βcid3 B βcid3 cid6 β contradicting deﬁnition β Therefore α X2 cid13 β X2 We use exactly argument α X3 cid13 β X3 α β differ variables contradiction required cid2 cid3 cid3 Proof Lemma 4 cid6Ncid3 transitive construction We need irreﬂexive complete outcomes α β α β α cid6Ncid3 β β cid6Ncid3 α Suppose δ cid6Ncid3 δ δ V Z Then exists worsening ﬂipping sequence δ δ N Let δ0 δ extended assignment Z 0 Applying ﬂips yields worsening ﬂipping sequence N δ0 δ0 showing δ0 cid6N δ0 contradicting assumption cid6N strict total order Consider different elements δ cid13 V Z Extend element V assigning Z 0 leading outcomes δ0 cid130 respectively Since cid6N strict total order δ0 cid6N cid130 cid130 cid6N δ0 Without loss generality assume δ0 cid6N cid130 There exists worsening ﬂipping sequence N δ0 cid130 Removing ﬂips Z generates worsening ﬂipping sequence N δ cid13 proving δ cid6Ncid3 cid13 completeness b First suppose α cid6N β exists worsening ﬂipping sequence N α β By ignoring ﬂips αV Z βV Z showing αV Z cid6Ncid3 Z generate worsening ﬂipping sequence N βV Z The converse follows immediately fact cid6N cid6Ncid3 strict total orders α cid6N β hold β cid6N α holds implying βV Z cid6Ncid3 αV Z αV Z cid6Ncid3 βV Z hold c Suppose α β differ Z agree variables α β consecutive respect cid6N Since cid6N total order exists γ V different α β α cid6N γ cid6N β β cid6N γ cid6N α Without loss generality assume α cid6N γ cid6N β Since Z values γ differ α β V Z There exists worsening ﬂipping sequence N α β passing γ By ignoring ﬂips Z generate αV Z βV Z αV Z contradicts irreﬂexivity cid6Ncid3 worsening ﬂipping sequence N shown If outcomes δ γ differ Z agree variables write δ γ γ δ recall Z values The ﬁrst implies α1 α1 consecutive α2 α1 Similarly α3 α3 consecutive α3 equals α2 α4 But α3 α2 imply α3 α1 Z values α3 α4 Continuing shows j 1 2 K 2 α2 j α2 j1 α2 j1 α2 j agree V Z d Suppose α1Z 1 Since Z takes values element α V exists exactly element V agrees α V Z By c α1 α2 agree V Z differ Z cid3 cid3 1086 N Wilson Artiﬁcial Intelligence 175 2011 10531091 outcome Similarly j 1 2 K 2 outcomes α2 j1 α2 j agree V Z differ Z α2 α3 differ V Z consecutive exists worsening ﬂip α2 α3 differ exactly j 1 2 outcomes α2 j α2 j1 agree Z We variable agree Z Similarly sequence values Z 1 0 0 1 1 0 0 1 1 cid2 Proof Proposition 7 We induction n This clearly true n 1 strict total order satisfying property Suppose true n k We holds n k 1 implying true natural numbers n Suppose 1 2 strict total orders V corresponding CPnets N1 cid3 cid3 2 associated CPnets X1 Xk deﬁned N2 respectively satisfying properties ii Let N 1 N Lemma 4 By Lemma 4a cid6 cid3 1 strict total orders induction equal Lemma 4b c d imply cid6N1 cid6N2 equal Lemma 4b α β V differ V Z α cid6N1 β αV Z cid6 βV Z α cid6N2 β If different outcomes α β V agree V Z Lemma 4c consecutive orderings cid6N1 cid6N2 Lemma 4b fact cid6 equal implies ordering α β relative outcomes cid6N1 cid6N2 Lemma 4d implies cid6N1 cid6N2 order α β way α cid6N1 β α cid6N2 β Therefore 1 equals 2 completing inductive step cid2 βV Z αV Z cid6 cid6 cid6 cid3 2 cid3 2 cid3 1 cid3 2 cid3 1 N N N N N N Proof Proposition 8 This CPnet N restricted CPnet Ni V 1 cid3 cid3 n Nn N We shall prove induction cid6Ni strict total order V maximum element 1 1 1 n proving cid6N cid6Nn strict total order The base case 1 Then 1 cid6 X1 cid5 0 cid5 contains number zeros contains zeros Hence 1 cid6Ni 0 case 0 cid6Ni 1 cid6Ni strict total order cid3 v Suppose induction cid6Ni1 strict total order maximum element 1 1 need cid6Ni strict total order maximum element 1 1 Consider v v We prove cid3 cid6Ni v This implies model satisfying Ni Acyclicity implies Ni v cid6Ni v model Theorem 1 4 exactly model equal cid6Ni This implies cid6Ni strict total order Lemma 4b c d inductive hypothesis maximum element 1 1 completing inductive step Case vV i1 v cid3V i1 equals u Then v v cid3 V v cid13 v differ variable Xi v Xi 1 u 1 implies u1 cid6Ni u0 u0 cid6Ni u1 u 0 0 cid6 Xi cid3 cid3 cid3 Xi 0 vice versa We 1 cid6 Xi v v cid6Ni v cid3 cid6Ni v v cid3 cid3cid3 cid3 Case ii vV i1 cid13 v cid3V i1 Let u vV i1 u cid3 v vice versa Assume loss generality u cid6Ni1 u deﬁne v v cid6Ni v cid3cid3 Putting imply transitivity v cid6Ni v u cid3cid3 cid3cid3 cid3 cid3 cid3V i1 By inductive hypothesis u cid6Ni1 u minimal respect cid6Ni1 u Let u cid3cid3 cid3 cid3 cid3cid3 cid6Ni1 u cid3cid3 b v v cid3cid3 cid6Ni v cid3 extended assignment v Xi Xi We shall v required cid3 cid3 cid3cid3 To u covers u cid3cid3 apply worsening ﬂip u 0 cid6Ni u contains odd number zeros differ precisely variable 0 cid6 Xi u cid3 cid3cid3 1 cid6Ni u 0 cid6Ni u 0 cid6Ni u cid3cid3 To b If v cid13 v Lemma 3 Section 33 exists worsening ﬂip u 1 cid6Ni u cid3 1 implies v cid3cid3 u cid6Ni1 u u cid13 u required A similar argument applies 0 cid6 Xi We contain number zeros ucid3 1 This implies ucid3cid3 1 fact cid6Ni1 strict u cid6Ni1 u The sequence ﬂips v covers u cid3cid3 total order So exists worsening sequence ﬂips u u v ucid3cid3 0 u 0 If 1 cid6 Xi cid3cid3 cid6Ni v u 1 u showing v cid6Ni v cid2 u u cid3cid3 cid3cid3 cid3cid3 cid3cid3 cid3cid3 cid3cid3 cid3 cid3 cid3 cid3 cid3cid3 cid3 Proof Proposition 11 The problem coNP Γ locally consistent nondeterministically choose α X cid6 X α computed polynomial time irreﬂexive exists x X x cid6 X α x cid3 To coNPhardness use reduction 3SAT Consider instance 3SAT m clauses involving 3 We generate cptheory propositional variables V zk1 zk Γ follows let V V j 1 2 3 let Γ Γ1 Γm cid5 zk z0 Then Γ locally consistent exists j assignment u V u satisﬁes 3SAT instance cid2 For k 1 m let ck kth clause write lk 1 cid3 Z Z domain z0 zm Let Γk consist statements lk u irreﬂexive k exists j u satisfying lk cid6 Z lk 2 lk cid3 j ϕ Γ Consider α β ϕ Proof Proposition 13 Suﬃciency 1 2 We need σ ϕ α β different outcomes exists node r σ divides α cid11 uϕ 1 path α Xϕ appears W ϕ This implies Y r Xϕ α β differ Xϕ W ϕ certainly differ cid3 Xϕ Since α cid11 uϕ ar tuples uϕ ar compatible 2 xϕ cid6r x shows α σ β α β σ Since α β arbitrary element ϕ ϕ arbitrary element Γ σ ϕ ϕ α Xϕ cid6r β Xϕ α β ϕ ϕ Γ N Wilson Artiﬁcial Intelligence 175 2011 10531091 1087 Conversely need prove necessity 1 2 Necessity 1 Suppose ϕ Γ α cid11 uϕ exists Y W ϕ appears Xϕ path α Let r node Y r Y Since Y cid3 β follows αcid3 Xϕ xϕ β Xϕ x values choose values y y ϕ β αcid3 σ β αcid3Y y α cid11 uϕ αcid3 β cid11 uϕ fact U ϕ disjoint αcid3Y r cid4r βY r However αcid3 β ϕ Xϕ W ϕ αcid3 case σ satisﬁes Γ proving necessity 1 cid3 βY y variables Z cid13 Xϕ Y deﬁne αcid3Z βZ αZ Then r divides αcid3 β agree α U ϕ Therefore σ cid5 ϕ Deﬁne outcomes αcid3 Y y cid6r y cid3 cid3 Necessity 2 Suppose σ satisﬁes Γ node r ϕ Γ Xϕ Y r uϕ compatible ar Choose outcome α extends uϕ ar satisﬁes α Xϕ xϕ possible Xϕ U ϕ Ar cid3 Deﬁne outcome β satisfy β Xϕ x α Γ β cid3 cid3 α σ β Node r divides α β xϕ αY cid6r βY x ϕ deﬁnition σ xϕ cid6r x ϕ required cid2 ϕ agree α outcomes α β ϕ Γ Using Proposition 13 suﬃcient σ Proof Proposition 14 Let σ cstree satisfying 1 Regarding 2 let r cid18 A Y cid6cid19 node satisﬁes 1 2 Proposition 13 1 follows immediately 1 ϕ element Γ Xϕ Y uϕ compatible Since uϕ compatible exists U ϕ appears Xϕ U ϕ A Since outcome α extends r path α By 1 uϕ compatible extends uϕ By deﬁnition Deﬁnition 4 xϕ cid6 Xϕ cid3 ϕ x 2 cid3 ϕ xϕ cid6Y uϕ x cid3 ϕ proving 2 cid2 xϕ cid6 x 2 cid3 cid3 cid3 cid3 cid3 Proof Proposition 16 Suppose α optimal exists outcome β β Γ α Since Γ transitive closure Γ cid3 We α Xϕ x ϕ αU ϕ uϕ α solution CΓ satisfy cϕ exists outcome γ γ α Γ ϕ Γ γ α ϕ Conversely suppose outcome α solution CΓ Then exists ϕ Γ α cid3 satisfy cϕ α Xϕ x ϕ αU ϕ uϕ Deﬁne outcome γ equal α variables Xϕ deﬁne γ Xϕ xϕ We γ α ϕ γ Γ α showing α optimal cid2 Proof Lemma 8 First suppose α cid6pΓ β consider σ S Let r cid18 A Y cid6cid19 node divides α β α A β A Condition implies U Y A αY cid13 βY Y cid7α β Suppose Y Θα β Then exists Z cid7α β ancestor Y respect GΓ Condition implies Z appear Y path α Z A α β agree A Z r divides α β contradiction Z cid7α β We proved Y Θα β Since α cid6pΓ β αY cid6Y U Y A α extends Thus Lemma 5 αY cid6Y α σ β required α βY Let u αU Y equals aU Y u βY implies αY cid6r βY condition b Conversely suppose case α cid6pΓ β exists σ S α σ β This follows immediately α β let assume α cid13 β Since α cid4pΓ β exists Y Θα β αY cid4Y α βY We create cstree σ satisfying following properties σ uses ﬁxed variable ordering compatible GΓ paths root outcomes Y preceded ordering ancestors GΓ ii let r cid3 node divides α β Y preceded variable ordering variables Θα β cid7α β α β agree variables Y implies Y rcid3 Y choose cid6rcid3 strict total order extending cid6Y α αY cid4rcid3 βY iii nodes r σ set cid6r strict total order extending cid6Yr u u arU Yr U Yr parents Y r HΓ Then σ satisﬁes conditions b S We α σ β cid2 Proof Proposition 17 For ϕ ϕ ϕ Γ local orderings cid6 X U V maxGΓ U maxGΓ U These observations imply cid6pΓ equals cid6 cid6 taking transitive closure sides Γ Also HΓ HΓ Γ locally consistent Γ locally consistent rise Γ GΓ pΓ By Theorem 4 applied Γ Γ GΓ equal transitive closure G α X The transitive closure G pΓ Suppose α cid6pΓ β α cid13 β Abbreviate GΓ G abbreviate HΓ H Θα β Θ Write Θ X1 Xk Γ It remains cid6pΓ Γ Γ Γ Since cid7α β cid13 G acyclic Θ cid13 Deﬁne β0 α 1 k deﬁne βi inductively follows 1088 N Wilson Artiﬁcial Intelligence 175 2011 10531091 βi Xi β Xi βiZ βZ Z descendants Xi G Xi Z transitive closure G For Y V let βiY βi1Y We βk β element cid7α β equal descendant Xi Θ α equals cid6 Xi β j j By deﬁnition cid6pΓ Xi Θ α Xi cid6 Xi For Xi Θ PaH Xi cid7α β Xi descendant variable cid7α β contradicting deﬁnition Θ So αPaH Xi βPaH Xi We j 0 k αPaH Xi β jPaH Xi This implies cid6 Xi β Xi βi1 Xi cid6 Xi βi Xi βi1 Xi α Xi Xi descendant X1 Xi1 This implies βi1 Γ βi apply sequence worsening swaps Γ start βi1 change swap value Xi βi Xi swap changing values descendants Xi values βi Since Γ transitive β0 Γ βk α Γ β Thus cid6pΓ Γ required cid2 α β Xi So j α Xi cid6 Xi β j βi1 Proof Proposition 18 First let assume conditions 1 2 hold We need σ strongly satisﬁes Γ body node r σ associated tuple cid18 A Y cid6cid19 I Y strongly aundominated II ordering cid6 Y extends cid6Y II follows immediately 2 To prove I need ϕ Γ uϕ compatible Xϕ Y U ϕ A ii W ϕ cid17 Y U ϕ Xϕ A Since uϕ compatible exists outcome α extends r path α 1 Xϕ Y U ϕ appears Y U ϕ A proving Similarly W ϕ cid17 Y U ϕ Xϕ appear Y path α U ϕ Xϕ A proving ii Conversely suppose σ strongly satisﬁes Γ We need conditions 1 2 hold For body node r σ associated tuple cid18 A Y cid6cid19 r strongly satisﬁes Γ cid6 extends cid6Y proving 2 To prove 1 consider ϕ Γ outcome α α cid11 uϕ Consider ﬁrst node r path α Y r Xϕ Then Y r strongly ar undominated U ϕ Ar U ϕ appears Xϕ path α Now consider node r path α Y r W ϕ Since Y r strongly ar undominated U ϕ Xϕ Ar showing Xϕ appears element W ϕ path α completing proof 1 cid2 Proof Lemma 10 Suppose Y Fadominated element Z V A Then exists ϕ Γ uϕ compatible Y Xϕ Z U ϕ ii Y W ϕ Z U ϕ Xϕ In case Y strongly aundominated Suppose Y Fadominated element V A Consider ϕ Γ uϕ compatible If Xϕ Y U ϕ V A U ϕ A ii If Y W ϕ Xϕ U ϕ V A Xϕ U ϕ A This proves Y strongly aundominated cid2 Proof Proposition 20 Fb Fa follows immediately fact ϕ Γ b compatible uϕ compatible uϕ ii Suppose Y V B strongly aundominated By Lemma 10 Y Fadominated element V A fact Fb Fa Y Fbdominated element V A particular Fbdominated element V B By Lemma 10 Y strongly bundominated iii Suppose Fa restricted V A acyclic consider b extending Fb subrelation Fa Fb restricted V A acyclic Fb restricted V B V A acyclic exists Y V B Fbundominated V B By Lemma 10 Y strongly bundominated cid2 Proof Proposition 22 By Deﬁnition 14 A V A exists strongly undominated variable Deﬁnition 13 Let α outcome extending Then cid3α irreﬂexive Γ cucacyclic This implies cid3a irreﬂexive Y cid3a Z implies Y cid3α Z So cid3a acyclic This implies exists Y V A cid3aundominated V A If ϕ Γ compatible uϕ Y Xϕ W ϕ Z U ϕ Z cid3a Y deﬁnition cid3a U ϕ A Y wouldnt cid3aundominated V A implies extends uϕ If W ϕ cid17 Y Xϕ cid3a Y Xϕ A proving Y aundominated cid2 We use following basic technical lemma prove Lemma 14 Lemma 22 Let A subset V let A assignment variables A let α V outcome α cid11 Y undominated V A respect cid3a Y undominated V A respect cid3α Furthermore Y cid6Y undominated V A respect cid3a relations cid6Y α Deﬁnition 4 equal Proof If Y undominated V A respect cid3α clearly Y undominated V A respect cid3a relation cid3α extends cid3a Conversely suppose Y undominated V A respect cid3a prove contradiction suppose Y undominated V A respect cid3α Z cid3α Y Z V A Then exists ϕ Γ U ϕ cid17 Z Y Xϕ W ϕ ii Xϕ Z W ϕ cid17 Y α cid11 uϕ We U ϕ A Y undominated V A respect cid3a Since Z A U ϕ cid17 Z case hold Consider case ii We N Wilson Artiﬁcial Intelligence 175 2011 10531091 1089 α cid11 uϕ cid11 uϕ U ϕ A α cid11 This implies Deﬁnition 15 Z cid3a Y contradiction Z V A Y cid3aundominated V A For cid6Y α clearly contains cid6Y U Y dominates Y respect cid3a cid3α This implies cid6Y α cid11 uϕ cid11 uϕ cid2 We parents Y A U Y A element α equal Y Xϕ ϕ Γ cid6Y Proof Lemma 12 We ﬁrst prove Y cid3aundominated V A Y strongly aundominated V A Suppose Y cid3aundominated consider ϕ Γ uϕ compatible If Xϕ Y U ϕ V A U ϕ A Also ii W ϕ cid17 Y U ϕ Xϕ V A U ϕ Xϕ A This proves Y strongly aundominated V A If cstree σ cusatisﬁes Γ body node cusatisﬁes Γ This implies result body node strongly satisﬁes Γ Deﬁnitions 17 13 implying σ strongly satisﬁes Γ Proposition 19 σ satisﬁes Γ cid2 Proof Lemma 14 Suppose α cid16Γ β let σ cstree cusatisfying Γ Let r cid18 A Y cid6cid19 node divides α β In order prove required condition α σ β need αY cid6 βY Now α β differ Y Y cid7α β Y cid3aundominated V A Lemma 22 undominated V A respect cid3α Y Θ cid3α β Since α cid16Γ β αY cid6Y βY Lemma 22 This implies deﬁnition body node cusatisfying Γ αY cid6 βY required cid2 α βY implies αY cid6Y Proof Lemma 15 If α β result follows Lemma 13 σ irreﬂexive cstree σ Now suppose α cid13 β This implies cid7α β cid13 Θ cid3α β cid13 Since case α cid16Γ β exist Y Θ cid3α β case αY cid6Y α βY Since Y Θ cid3α β αY cid13 βY List variables order compatible cid3α Y appears early possible theres order compatible cid3α Y appears earlier We construct cstree σ variables path root α appear order Thus node r path α Y r cid3α undominated V Ar dominating variables come earlier ordering compatible cid3α For node r cid3 path α Y rcid3 Y deﬁne relation cid6rcid3 total order Y extending cid6Y αY cid4rcid3 βY possible Lemma 1i cid6Y nodes r path α deﬁne relation cid6r total order extending cid6Yr ar α partial order αY cid4Y α α βY For We generate rest cstree iteratively body node r cusatisﬁes Γ choosing variable Y r ar This generates cstree σ cid3ar undominated V Ar choosing total order cid6 Y r extending cid6Yr cusatisﬁes Γ The condition Y appears early possible variable ordering ensures Arcid3 consists variables Z Z cid3α Y If let Z latest variable appearing list Y satisfying Z cid3α Y Then moving Z Y gives ordering variables compatible cid3α Y comes earlier contradicts deﬁnition variable ordering Y Θ cid3α β implies Arcid3 cid7α β α β agree variables Arcid3 Then node r divides α β We αY cid4rcid3 βY implies case α σ β cid2 cid3 Proof Proposition 24 If Γ strongly conditionally acyclic locally consistent exists proper subset A V assignment A exists strongly aundominated variable Thus deter Γ strongly conditionally acyclic nondeterministically choose α X cid6 X α computed polynomial time irreﬂexive proving Γ locally consistent nondeterministically choose A A exists strongly aundominated variable variable Y V A check polynomial time Y aundominated This proves membership coNP The proof membership cucacyclicity similar fact given cptheory Γ outcome α comput ing relation J αΓ determining acycliccan polynomial time cid3 For k 1 m let ck kth clause write lk 1 To coNPhardness use reduction 3SAT Consider instance 3SAT m clauses involving propo lk 3 We generate cptheory cid3 Let Γk consist k Z0 Now 3SAT instance cid3 implies Γ lk sitional variables V 2 cid3 Z0 Z1 Zm k 0 m Zk domain zk z Γ follows let V V cid3 Zk j 1 2 3 let Γ Γ1 Γm cid5 zm z statements lk m satisfying assignment u exists uundominated variable V V strongly conditional acyclic j zk1 z cid3 k1 Conversely Γ strongly conditional acyclic proper subset A V tuple A exists aundominated variable V A Γ clearly locally consistent This happen A contains V k exists j satisfying lk j satisﬁes 3SAT instance cid3 Hence 3SAT instance satisﬁable Γ strongly conditionally acyclic The construction applies cucacyclicity cid2 1090 N Wilson Artiﬁcial Intelligence 175 2011 10531091 Proof Proposition 25 Let σ cstree deﬁne VON τ compatible σ For body node r σ associated tuple cid18 A Y cid6cid19 deﬁne node r τ associated tuple cid18 A Y cid19 We create sink node r ar equal σ create edge r node rcid3 τ rcid3 arbitrary outcome For edge node r node r leaf node σ Clearly τ compatible σ Naturally deﬁned sink node r compact variable ordering networks compatible σ τ cid3 cid3 Conversely suppose τ variable ordering network We construct cstree σ compatible τ inductively starting root To generate body node r need deﬁne associated tuple cid18 A Y cid6cid19 Assume inductively A deﬁned root node deﬁnition equal cid5 respectively generates path τ root node node r We let Y equal Y r choose cid6 arbitrary strict total order Y We create Y child nodes r r Y edges coming Each edge e associated variable Y e Y cid3 Arcid3 Ar Y arcid3 tuple formed extending different associated value ye If e goes node r r assignment Y e ye This inductively deﬁnes σ Clearly σ compatible τ cid2 Proof Lemma 16 By deﬁnition cid18t Z Y cid19 Tab exists assignment s set variables S s compatible ab S A B T sT t cid18s Z Y cid19 T Given assignment s deﬁne U S A u sU Then U B T uT sT t u compatible b s compatible b ii cid18u Z Y cid19 Ta s compatible Conversely suppose exists assignment u set variables U V A U B T uT t u compatible b ii cid18u Z Y cid19 Ta Hence exists assignment s set variables S compatible S A U sU u cid18s Z Y cid19 T We S A B S A B U B T Also T U sT uT equals t Since A B disjoint S B S A B U B Tuple s compatible b sS B sU B uU B bU B bS B u compatible b Therefore s compatible ab compatible This proves cid18t Z Y cid19 Tab cid2 cid3 Proof Lemma 18 This proved induction cardinality Ar Suppose true nodes r Arcid3 k Consider node r Ar k consider path root r associated assignment Let r parent r path let induction Tacid3 Tar Ta Tar required cid2 cid3 r By arcid3 assignment Y y obtain Ta Tacid3cid3 arcid3 extended assignment Y y We condition ii Deﬁnition 23 Tacid3cid3 Tar Hence Arcid3 let Y y assignment edge r cid3 Using Lemma 17 extending cid3cid3 cid3 cid3 cid3 Proof Proposition 26 Consider element cid18u Y Z cid19 T u assignment set variables U Consider outcome α extending u We need Y appears Z Oτ α We proceed Proof Contradiction Suppose Z appears Y Oτ α Consider node r τ Y r Z path associated α Since Z Y r Ar Y Ar Z appears Y path associated α deﬁnition Oτ α Let cid3 uU Ar α Ar By Lemma 18 Ta Tar Now u compatible α extends u Let u cid3 Y Z cid19 Tar cid18u cid3cid3 Y Y rcid19 T cid3 Y Y rcid19 Tar exists cid18u Since Y Z Ar cid18u cid3 By condition Deﬁnition 23 Y Ar contradicts Y Ar u completing Proof Contradiction cid2 cid3 Y Z cid19 Ta cid18u extending u compatible ar u cid3cid3 cid3cid3 Proof Proposition 27 Suppose exists triple cid18u Y Z cid19 T Y Z V A tuple u U compatible uU A u U A Q T A Deﬁnition 21 Weve shown Ta Tacid3 Swapping roles Ta Tacid3 required cid2 cid3 Y Z cid19 Ta Then Deﬁnition 21 Now cid3 Y Z cid19 Tacid3 Hence cid18u argument shows Tacid3 Ta agree U A implies u compatible agree Q T A Consider cid18u cid3 cid3 cid3 cid3 cid3 Proof Lemma 19 Y strongly aundominated exists Z V A ϕ Γ uϕ compatible Z U ϕ Y Xϕ W ϕ b Z Xϕ Y W ϕ This exists Z V A ϕ Γ uϕ compatible cid18uϕ Z Y cid19 Γ This exists Z V A u cid3 Z Y cid19 compatible cid18u Z Y cid19 Γ exists element form cid18u Γ cid2 Proof Lemma 20 Let r body node σ associated tuple cid18 A Y cid6cid19 Suppose exists triple cid18u Z Y cid19 Γ Z V A u compatible Then α extending u Z appear Y path α τ τ respects Γ Deﬁnition 22 path α σ σ compatible τ contradicts fact Z V A Therefore exists triple cid18u Z Y cid19 Γ Z V A u compatible By Lemma 19 Y strongly aundominated Therefore Deﬁnition 13 Section 61 r strongly satisﬁes Γ σ strongly satisﬁes Γ r arbitrary body node σ cid2 N Wilson Artiﬁcial Intelligence 175 2011 10531091 1091 τ β let r Proof Lemma 21 Note local consistency Γ ensures Q nonempty proof Theorem 7 First cid3 cid18 A Y cid19 node τ divides α β Consider σ Q let r suppose α cid16Γ node σ divides α β Because σ compatible τ variable ordering path βY αY r cid6r βY r α τ σ Ar A Y r Y Since α cid16Γ α σ β τ β αY cid6Y Conversely suppose case α cid16Γ τ β shown exists σ Q α σ β cid3 cid18 A Y cid19 If α β implication holds irreﬂexivity σ assume α cid13 β Let r acyclic exists total order cid6 node τ divides α β Then αY cid4Y αY cid4 βY Consider cstree σ Q Let r node σ divides α Y extends cid6Y β Because σ compatible τ Ar A Y r Y Change σ changing cid6r cid6 σ Q αY cid4r βY implies α σ β required cid2 βY By local consistency cid6Y References 1 M Bienvenu J Lang N Wilson From preference logics preference languages Proceedings KR 2008 2010 2 C Boutilier F Bacchus R Brafman UCPnetworks A directed graphical representation conditional utilities Proceedings UAI 2001 2001 pp 5664 3 C Boutilier R Brafman H Hoos D Poole Reasoning conditional ceteris paribus preference statements Proceedings UAI 1999 1999 pp 71 80 4 C Boutilier RI Brafman C Domshlak H Hoos D Poole CPnets A tool reasoning conditional ceteris paribus preference statements Journal Artiﬁcial Intelligence Research 21 2004 135191 5 C Boutilier RI Brafman C Domshlak H Hoos D Poole Preferencebased constrained optimization CPnets Computational Intelligence 20 2 2004 137157 6 R Brafman C Domshlak Introducing variable importance tradeoffs CPnets Proceedings UAI 2002 2002 pp 6976 7 R Brafman C Domshlak Graphically structured valuefunction compilation Artiﬁcial Intelligence 172 2008 325349 8 R Brafman C Domshlak E Shimony On graphical modeling preference importance Journal Artiﬁcial Intelligence Research 25 2006 389 424 9 RI Brafman Y Dimopoulos Extended semantics optimization algorithms CPnetworks Computational Intelligence 20 2 2004 218245 10 RI Brafman C Domshlak SE Shimony Qualitative decision making adaptive presentation structured information ACM Transactions Informa tion Systems 22 4 2004 503539 11 C Domshlak Modeling reasoning preferences CPnets PhD thesis BenGurion University Negev 2002 12 C Domshlak RI Brafman CPnetsreasoning consistency testing Proceedings KR 2002 2002 pp 121132 13 C Domshlak S Prestwich F Rossi KB Venable T Walsh Hard soft constraints reasoning qualitative conditional preferences Journal Heuristics 12 45 2006 263285 14 C Domshlak F Rossi K Venable T Walsh Reasoning soft constraints conditional preferences complexity results approximation tech niques Proceedings IJCAI 2003 2003 pp 215220 15 J Doyle MP Wellman Representing preferences ceteris paribus comparatives Working Notes AAAI Symposium DecisionTheoretic Planning 1994 16 E Freuder R Heffernan R Wallace N Wilson Lexicographicallyordered constraint satisfaction problems Constraints 171 1 2010 325 17 J Goldsmith J Lang M Truszczy nski N Wilson The computational complexity dominance consistency CPnets Proceedings IJCAI 2005 2005 pp 144149 18 J Goldsmith J Lang M Truszczy nski N Wilson The computational complexity dominance consistency CPnets Journal Artiﬁcial Intelli gence Research 33 2008 403432 19 SO Hansson What ceteris paribus preference Journal Philosophical Logic 425 1996 307332 20 SO Hansson Preference logic D Gabbay F Guenthner Eds Handbook Philosophical Logic Kluwer 2001 pp 319393 21 SO Hansson The Structure Values Norms Cambridge University Press 2001 22 S Kaci H Prade Relaxing ceteris paribus preferences partially ordered priorities Proceedings ECSQARU 2007 2007 pp 660671 23 J Lang From preference representation combinatorial vote Proceedings KR 2002 2002 pp 277288 24 J Lang Logical preference representation combinatorial vote Annals Mathematics Artiﬁcial Intelligence 42 1 2004 3771 25 E Marczewski Sur lextension lordre partiel Fundamenta Mathematicae 16 1930 386389 26 M McGeachie J Doyle Eﬃcient utility functions ceteris paribus preferences Proceedings AAAI 2002 2002 pp 279284 27 M McGeachie J Doyle Utility functions ceteris paribus preferences Computational Intelligence 20 2 2004 158217 28 J van Benthem P Girard O Roy Everything equal A modal logic ceteris paribus preferences Journal Philosophical Logic 38 1 2009 83125 29 GH von Wright The Logic Preference Edinburgh University Press 1963 30 GH von Wright The logic preference reconsidered Theory Decision 3 1972 140169 31 N Wilson Consistency constrained optimisation conditional preferences Proceedings ECAI 2004 2004 pp 888892 32 N Wilson Extending CPnets stronger conditional preference statements Proceedings AAAI 2004 2004 pp 735741 33 N Wilson An eﬃcient upper approximation conditional preference Proceedings ECAI 2006 2006 pp 472476 34 N Wilson Eﬃcient inference expressive comparative preference languages Proceedings IJCAI 2009 2009 pp 961966 35 L Xia V Conitzer J Lang Voting multiattribute domains cyclic preferential dependencies Proceedings AAAI 2008 2008 pp 202207