Artificial intelligence 103 199X 5117 Artificial Intelligence Remote Agent boldly AI gone Nicola Muscettola P Pandurang Nayak 2 Barney Pell Brian C Williams 3 NASA Ames Research Center MS 2692 Mqtt Field CA 94035 USA Abstract work Artificial Renewed motives fleets robotic takes significant exploration space particular play central inspired NASA heterogeneous space virtual presence technology intelligence Remote Agent specific autonomous Intelligence explorers form computational goal explorers establishing role Information remote endeavor endowing ayems In paper agent architecture onboard deduction search goal based principles modelbased programming commanding directed closedloop future This unique characteristics spacecraft domain require highly reliable architecture addresses autonomous operations long periods time tight deadlines concurrent activity integrates constraint execution modelbased mode based temporal planning scheduling onboard identification period controller opportunity week mid 1999 The development reassess AIs conventional wisdom challenges implementing embedded systems issues contrary experiences tightly coupled subsystems The Remote Agent robust multithreaded tractable reasoning knowledge Deep Space One NASAs New Millennium mission paper 0 1998 Published Elsevier Science BV reconfiguration The demonstration Remote Agent provided representation We discuss step enabling resource constraints integrated scheduled Kcyrtords Autonomous systems Diagnosis Recovery Modelbased reasoning agents Architectures Constraintbased planning Scheduling Execution Reactive Authors alphabetical order author RIACS Email pellQptolemyarcnasagov Corresponding Recom Technologies Email musptolemyarcnasagov RIACS Email nayakptolemyarcnasagov Email williamsptolemyarcnasagov 0004370298 matter 0 1998 Published Elsevier Science BV All rights reserved Pll SOOO437029800068X 6 N A4uscettola et al Artijicinl Intelligence 103 1998 547 1 Introduction imagination The melding space exploration particularly robotic vision future For example intelligence amazing hold science public fiction classic 2001 A Space Odyssey offered future humankind firmly spacestations At established Earth amply populated moonbases impressive time intelligence firmly established humankind HAL9000 created Urbana Illinois January 12 1997 In fact January I2th 1997 passed moon base HAL9000 Space Station begin launch However space station far modest scope space year reaching completion sight The International 2002 far ambitious dreams surprising different future particularly reality While exploration exploration information enabling future technology community humans space space robotic play central role exciting NASA open Space Frontier When people Our vision think rocket plumes space shuttle But future space information technology We establish virtual presence space planets spacecraft think space aircraft Daniel S Goldin NASA Administrator Sacramento California May 29 1996 Providing virtual human presence universe actual presence plethora robotic probes requires strong motive mechanical means computational motivate space exploration scientific questions intelligence We briefly consider mechanical means exploring paper progress intelligence computational questions focus remainder explorers form endowing remote agents mechanical The development remote agent tight time constraints forced examine places question Als conventional wisdom challenges implementing systems This topic addressed variety places representation paper embedded reasoning tractable 11 Estublishing virtuul presence space evidence suggest new possibilities Renewed motives space exploration recently offered A prime example life space The best primitive summer 1996 suggesting 36 billion years ago More specifically series scientific discoveries known example life existed Mars recent discovery extremely scientists evidence suggestive native microfossils mineralogical evidence complex organic chemistry overturn cost effective led Martian meteorite AlH84001 fine resolution features characteristic life confirm higher performance traditional missions Traditional planetary missions findings requires new means exploration small bacteria Earth called nanobacteria 47 Extending virtual presence examine N Muscettala et al Artcial Intelligencr 103 1998 547 Fig 1 Planned concept missions Return missions courtesy NASA Johnson Space Center 2 cryobot hydrobot exploration airplane courtesy NASA Ames Research Center courtesy JPL 3 DS3 formation extend human virtual presence flying optical interferometer universe I Mars Sample Europa oceanographic courtesy JPL 4 Mars solar Galileo Jupiter mission Cassini Saturn mission price tags excess billion dollars ground crews ranging entire introduced paradigm shift life mission The Mars Pathfinder NASA lightweight highly focused missions tenth cost operated small ground summer MPF landed Mars enabled 48 mobile robot land surface planet 141 The viability concept vividly demonstrated 100 300 personnel Sojourner microrover MPF mission teams Pathfinder Sojourner demonstrate achieving achieve goals month life span taxing small ground crew Future Mars rovers expected operate need development remote agents able virtual presence currently challenging missions For example operating Sojourner extremely year emphasizing continuously important mechanical means intelligence necessary interact uncertain environment lack onboard robustly Rovers means exploring Mars Another solar airplane study NASA Lewis NASA Ames Given CO2 atmosphere innovative concept 8 N khscettolrr et al Artcial Intelligencr 103 1998 547 feet sea level This height like terrestrial plane Mars plane flying feet Martian surface reach flying 90000 survey Mars Martian plane existing planes Developing Martian climate requires idiosyncrasies long durations surviving development remote agents able accurately model quickly adapt environment autonomously A second example discovery planet star raises intriguing question Earthlike planets exist To search 161 Earthlike planets NASA developing series interferometric telescopes New Millennium Deep Space Three DS3 mission These interferometers identify star induced orbiting planets They categorize planets measuring wobble accurate pointed California Washington DC measure optical thickness single piece paper DS3 achieves requirement placing flying tight formation kilometer apart This units separate spacecraft extends tightly coordinated multiple computational remote agents development challenge frozen surface A final example smooth surface chunky In February 1998 Galileo mission idea Europa subsurface oceans hidden question form life exist identified beneath Europas ice rafts lend features Europa relatively icy support subsurface ocean layer One NASAs intriguing ice penetrator submarine autonomously navigate beneath Europas surface This hydrobot need operate autonomously environment Taken flying developing examples small explorers interferometers including microrovers provide remote agents assist establishing airplanes extraordinary formation opportunity space land air sea called cryobot hydrobot utterly unknown virtual presence hydrobots exploring cryobots concepts 12 Requirements building remote agents enable missions The level onboard autonomy necessary unprece fact NASA need achieve capability billion cost 100 million dollars 23 years operated small ground team This ambitious goal low cost technol probe Deep Space One DSl dented Added challenge fraction cost design dollar Cassini mission NASAs target missions developed achieved Apolloera pace New Millennium Programs ogy demonstration missions The New Millennium development time half years scheduled time previous missions mid 1998 launch In contrast remote agents controlling The unique challenge developing space explorers driven major properties spacecraft domain First spacecraft carry intervention This autonomous operations requirement cost limitations deep network spacecraft occultation dark space communication planet communication stems variety sources including long periods time human Cassini spacecraft perform delays For example N Muscettola et al Artijicial Intelligence 103 1998 547 9 critical Saturn orbit insertion maneuver human assistance occultation Saturn Second autonomous operations guarantee success given second chances rare celestial events include examples executing resource constraints Tight deadlines dynamics insertion maneuver fixed time window window Jupiter Tight spacecraft propellant carefully managed budgeted time closest approach imaging comets fiery descent like power nonrenewable mission resources renewable tight deadlines stem orbital orbit images narrow like taking asteroid expensive unique missions designed require high reliabifity Even use highly reliable hardware failures Flight hardware hardware failures repairing reconfiguring space cause unexpected possibly degraded operation modes Providing Third spacecraft spacecraft operations harsh environment software compensate switching complicated need rapid failure responses precious resources limited observabili9 limited onboard mission associated hardware sensing additional cost Furthermore making capability meet hard deadlines conserve spacecraft state The stems increase sensors add weight sensors reliable difficult deduce true spacecraft state complex networked multiprocessor bus sophisticated involves concurrent uctivity set tightly coupled Fourth spacecraft operation subsystems A typical spacecraft sensors star flight computers communicating reaction wheels main trackers gyros sun sensors actuator subsystems subsystems operate engines interactions concurrent processes control negative ones For example camera attitude controller hold spacecraft specified attitude main engine vibration Hence reasoning spacecraft reflect concurrent nature instruments These hybrid hardwaresoftware coordinated enable synergistic taking picture produce thrusters science 13 A Remote Agent architecture architecture New Millennium program group AI researchers Following announcement JPL challenged short span months spacecraft control To evaluate engineers demonstrate architecture New Millennium Autonomy Architecture Prototype based Cassini mission spacecraft The NewMAAP successful Remote Agent architecture developed based planning identification Additional robust multithreaded scheduling retains including insertion scenario details NewMAAP reconfiguration An overview architecture description NewMAAP challenging fully capable early 1995 spacecraft NASA Ames JPL remote agent JPL engineers defined simulation study aspects The NewMAAP date NewMAAP scenario integrated constraint execution modelbased mode provided Section 2 scenario scaled version Cassini NASAs complex spacecraft based complex mission phase Cassini Saturns orbit event single point failure The woefully l Qualitative We examine 57 The success NewMAAP demonstration selected technology late 1998 Details experiment 5 resulted experiment DS 1 This experiment Remote Agent currently scheduled The development provided reassess Als conventional wisdom includes Remote Agent architecture opportunity important l Generative planning scale practical problems l For reactive systems proving question l Justificationbased theorems Logical Truth Maintenance inefficient inadequate time space 181 11 Systems proven equations far general practical use 63 statements later paper But highlight important guiding principles underlying design Remote Agent architecture 14 Principles guiding design Remote Agent Many agent architectures developed Al community particularly features First largely programmable field indoor outdoor mobile robots The Remote Agent architecture distinctive declarative models We refer modelbused programming Second significant hours hundreds milliseconds Third Remote Agent designed level closedloop commanding amounts onboard deduction und search time resolutions performs provide high set compositional varying 141 Modelbased programming requires The effective way reduce software development task requires implement achieve breadth tasks constitute autonomous programmer cost software cost software successive applications systemwide failed attitude thrusters thruster valve electronics Hence particulars plug play amortize This difficult architecture interactions thruster controller software lacks modularity use restricted hardware The kind nature NASAs explorers means cost reasoning systemwide new explorer In addition overload programmers amortized paid lead cognitive reason function For example diagnosing causing suboptimal decisions outright errors complexity interactions star tracker bus controller interactions appropriate interactions reasoning programming Our solution problem called modelbused programming Modelbased generate breadth desired functionality missionlevel Hence generate goals In addition flight software highly reusable software highly reusable 70 operators hardware models light model perform tasks modeling knowledge based observation commonsense programmers introduced To support plug play Remote Agent specifying plugging behaviors The Remote Agent programmed possible declarative component models hardware software reasoning responsibility automating N Muscettolu et al Artificial Intelligence 103 1998 547 11 modelbased mode component Remote Agent uses compositional model combination probabilistic planning scheduling component models For example concurrent transitions reconfiguration transition Section 5 Similarly wide interactions identification declarative deterministic constraintbased principles sophisticated interconnections possible generic procedures written operate directly declarative models scripting operating declarative domain model generate plan Section 3 Even executive component primarily programmed language uses declarative models device properties language scripting 142 Onboard deduction search long periods time large number failures frequently Given task automating reasoning interactions suggests space explorers operate time The need fast reactions Remote Agent onboard compile computed However mission critical phases Hence preenumerating usually restored use simplifying control interactions Unfortunately inefficient control loop intractable When writing flight software traditional single faults ignoring laws assuming result sensor information assumptions systems responses natural question realtime offboard pre harsh environments responses appear possible situations quickly spacecraft tractability local suboptimal subsystem ignoring brittle grossly reason human operators needed The difficulty precomputing responses requirement highly survivable timely responses systems means Remote Agent use models synthesize anomalous unexpected situations realtime This applies equally high level planning scheduling component lowlevel fault protection novel situations performing deduction respond larger timescale search realtime fault protection course timecritical significantly planning This goal goes directly counter conventional AI wisdom avoid deduction reactive late 80s mathematical tasks NPhard For example proving planning NPhard David Chapman concluded analysis showed surprisingly formulation 111 loop costs This wisdom emerged robotic executives simple deductive STRIPSstyle best amounts Hoping practice extensions intuition case arguing current planning particular cases come efficient My techniques happen On flip offers hope empirical work developed early 90s hard satisfiability problems This work satisfiability problems quickly elusive hard problems shown satisfiable unsatisfiable unsolvable problems The elusiveness hard lie phase transition solvable problems space randomly generated problems real carefully designed world problems tractable This raises 12641 The surprisingly possibility suggests 12 N Muscettdu et al Artijicial Intelligence 103 WY 547 deductive kernel perform significant deduction constrained example approach tuned propositional set assumptions simple search strategy simple language writing heuristic control rules diagnosis recovery component Remote Agent adopts RISClike wide range deductive problems reduced queries highly exploits bestfirst search kernel 5671 The planning component generate plans acceptable efficiency domain structuring realtime For 143 Goaldirected closed loop commanding respond A mission robustly extraordinary like Cassini requires ground crew 100300 personnel different mission stages The driver large team Cassinis nominal mission situations Likewise effort required need extreme robustness extensive ground interaction Remote Agents defining requirement Traditional lowlevel commands commanding rigid time stamps leaves spacecraft occurs unable hardware sequence extremely open valve17 2034 exactly This low level direct little flexibility failure change achieve commands spacecraft commanded time commanding timestamped shift A fundamental concept supporting robustness brittleness direct commanding input feedback mechanism error classical control systems feedback taking set systems actual intended simple specification intended commands freedom determine senses trajectory control Feedback control avoids point actual trajectory commanding trajectories behavior gives necessary achieve behavior eliminated The setpoint feedback trajectory controller concept abstract level It mission profile specifies highlevel goals activity 24 engine calibration target This gives Remote Agent considerable The Remote Agent embodies commanded goal trajectory different mission segments performing hour window approaching flexibility goals achieved To achieve robustness sensor information detecting compensating trajectory cause close feedback continuously anomalies Remote Agent uses loop goal level quickly deviate goal close situations Traditionally feedback highlights diverse actions humans ground crew accurately Apollo 13 crisis The crisis began quintuple loop closed astronauts ground crew A popular example extraordinary fault occurred consisting electrical shorts tankline pressure jacket bursting health state A challenge spacecraft limited sensor information No repair spacecraft mission track moon second challenge new mission allow Apollo capsule hobbled state Recall astronaut Mattingly worked extensively search novel command sequence imperiled spacecraft Ultimately Mattingly achieved unintended novel lunar return ground simulator work severe power limitations Earth spacecraft hardware involved quickly designing drew current reconfiguration sequence assess loop N Muscettolu et al Artkd Intelwe 103 11998 547 13 capsule guide procedures sequence This example highlights Mattinglys basic roles performed humans modules battery Finally astronauts Swaggert Love11 challenge quickly new assembling mission Remote Agent The embodied albeit simpler form performed roles diagnosis multiple Remote Agents modelbased mode component Generation new mission sequences tight resource constraints Remote Agents plannerscheduler implement new changing mission sequences executive component performed Flexible assembly execution flight procedures implemented Remote Agents hardware reconfiguration failures novel reconfiguration identification In section discuss components Agent architecture We focus technical Remote Agent discuss key technology insertion lessons interact Remote lessons related components 2 Remote Agent architecture resources develops plans overview Remote Agent address domain requirements discussed RA architecture The This section provides architecture designed Section 12 The need autonomous operations tight resource constraints hard deadlines dictated PS associated mission manager MM need temporal PlannerScheduler achieve goals timely manner The manages need high reliability dictated provides time activity modelbased mode robust plan execution coordinates rapid failure enables identification spacecraft state The need handle concurrent spite limited observability activity impacted domain concurrently formalisms PS models evolving models spacecraft concurrent representation state variables EXEC uses multiple transition use reactive executive manage concurrency execution MIR threads reconfiguration MIR responses EXEC RealTime Control Fig 2 Remote Agent architecture embedded flight software 14 N Muscettoln et al Artificial Intelligence IO3 1998 547 flight software The RA architecture relationship shown Fig 2 When viewed blackbox RA sends commands embedded realtime control RT RT provides form discrete continuous attitude determination modes control loops states devices Information hardware sensors passed RA directly set monitors realtime estimation control tasks commands changing status RT control loops primitive skills autonomous attitude control RT responds integrated PS Mission Manager MM PS constraintbased 52 activated MM new plan PlannerScheduler temporal planner resource scheduler desired EXEC When requested EXEC MM formulates shortterm planning PS based longrange mission profile The mission profile provided problems It contains list launch updated nominal goals achieved DSl mission profile contains goals optical navigation goals specify duration frequency time windows orbit determination achieved initial long range mission planning shortterm detailed planning enables RA undertake extended diverse mission minimal human onboard navigator MM determines horizon week long combines ground necessary mission For example spacecraft state provided EXEC This decomposition images goals need spacecraft asteroid projected intervention PS takes plan request temporal plan The plan constrains formulated MM uses heuristic guided backtrack activity details required progress plan executed The plan contains explicit round planning For example typical DS 1 plan achieve search produce flexible concurrent spacecraft subsystem duration plan leaves flexibility resolved execution The plan contains activities information monitor activity optical navigation goal requires pointing asteroid image taken The plan leaves temporal exactly events place constrain effecting attitude controller flexibility particular mode camera turned spacecraft initiate turn Other onboard software systems called planning experts participate planning process requesting navigation planning spacecraft orbit attitude planning duration specified turns resulting new goals answering expert requests main engine resource consumption questions PS For example thrust goals based determination estimated expert answers questions executiontime plan commands Smart Executive EXEC coordinating activities constraints methods thrusting start thrusting attitude controller executed previous optical navigation window ended EXEC reactive plan execution responsibilities activity EXEC executes plans decomposing highlevel temporal language ESL 35 define alternate DSl main engine switch thrust vector control mode activities For example highlevel decomposed plan EXEC uses rich procedural decomposing main engine respecting coordinated realtime commands activity N Muscettolu et al Artijiciul Intelligrnce 103 19 547 15 robustness time EXEC achieves highlevel command task decompositions choose execution commanding plan execution exploiting closedloop directly plans flexibility specified windows able activity EXEC achieves receives feedback results recipient inferences drawn component MIR For example EXEC turns camera switch current sensors confirm able select different robustness commands mode identification prepare imaging MIR uses information camera turn When method achieve task fails EXEC attempts accomplish mode reconfiguration When instructed request new plan currently executing plan EXEC provides MM projected spacecraft state end current plan requests new execute repair current plan aborts plan cleans plan If EXEC unable executing activities puts controlled stable safe state called standby mode EXEC provides MM current state requests new plan maintaining standby mode plan received tasks definition invoking task alternate method component MIR provide Identijication Livingstone spacecraft model search Reconjiguration use deduction EXEC enabling called mode identification 71 discrete modelbased MZR The MIR component controller Livingstone use single declarative sensing component RA Mode provided distinguished loop reactive control functionality MI tracks likely Livingstones spacecraft states identifying states models consistent sensed monitor values commands sent realtime MI reports inferred state changes reason purely EXEC provides level abstraction terms spacecraft state For example particular combinations attitude errors allow thruster failed EXEC informed failed Ml infer particular lowlevel sensor values state thruster observed called mode reconfiguration commanding MR uses establishes restores desired spacecraft model cost command sequence failed components Unlike PS MR functionality reactive focus enabling RA architecture MR invoked EXEC recovery request specifies set constraints In response MR produces recovery plan executed EXEC moves spacecraft current state inferred MI new state constraints satisfied For example camera turn commanded EXEC request MR repair camera MR respond instructing EXEC retry command established maintained rapidly suggest command hardware repairing sequences Within MI determines reconfiguring Livingstones component 3 Planning scheduling The PlannerScheduler highlevel deliberative PS Remote Agent provides planning component architecture The extended duration space mission coupled unpredictability like thrusting poses challenge planning actions 16 N Muscettolu et al Artijicial Intelligence IO3 1998 547 Heuristics Model Knowledge base Goals Initial state Plan Database Plan _ Fig 3 PS architecture diagram early coherence problem round planning mission exhaust propellant plan entire mission lowest 60 raises potential level The approach impossible RA perform periodic planning restricted scheduling horizon However later mission example activities horizon compromise activities aggressive maneuvers MM later mission goals RA addresses extracts component When MM extracts goals upcoming constraints available future use waypoint constraint specifies propellant current plan request MM restricts PS generate By adding waypoint constraints plans coherent overall mission plan 61 Hence PS receives MM EXEC initial spacecraft conditions goals scheduling horizon waypoint constraints It produces plan viewed highlevel program EXEC follows order achieve required goals mission profile For example Mission Manager waypoint round planning associated problem needed Fig 3 shows structure PS 5152 details A generalpurposepkun reused different applica ning engine provides problem solving mechanism application The tion domains A specialpurpose domain knowledge base characterizes planning engine consists plan database search engine The plan database provided Heuristic Scheduling Testbed System HSTS framework The search en gine calls plan database problem solving step require consistency maintenance propagation The search engine Iterative Refinement Search IRS chronological backtracker record consequences services encodes set methods usable extend partial plan Programming specific application methods IRS choose branching domain heuristics requires description domain alternatives One crucial aspect success PS ability domain constraints To PS uses Domain Description Language HSTS framework The models expressed DDL use strong domain organizational principles foundation HSTS First structures description provide good model DDL planning engine domain model search process N Muscertola rt al ArtiJicial Intelligence 103 1998 S47 17 uses unified timelines linear continuous evolution set finite set state variables A plan describes time state variable parallel histories Second token actions state literals As 26 token extends metric time interval The description consists constraints represent principles tokens satisfied We discuss plan structural legal behaviors controlled Section 32 representational primitive PS generates complex plans performance spacecraft simple search strategy simple heuristic program search engine This use constraint posting restrictions primary problem solving method onboard application language propagation topology constraint networks imposed structural principles HSTS acceptable PS concrete example fact solely relying concepts techniques research scheduling possible include subgoaling AI planning practical significance These techniques propagation heuristic planning scheduling development This bears great promise future technology We discuss points highlevel commanding search Furthermore believe techniques provide viable software engineering software highly autonomous solve complex problems temporal reasoning constraint current time AI approach systems 31 Nonclassicul aspects Qf DSl domain application A complex missioncritical technology The classical AI planning problem like DSl stresstest classical AI achieve set set world derived 32 sees world alternation indefinitely persistent states actions Classical schedulers hand world set planning scheduling goal conditions given initial state description controlled planning operators Most classical AI planners use representations STRIPS instantaneous resources set structured known priori Solving problem task guaranteeing task networks task having duration involves allocating start time resource deadlines resource limits satisfied The DSl domain forces view world need significant 51 introduces scheduling perspective Here quick review types constraints dynamics types goals PS handle merges planning extensions classical 31 I System dynamics To dynamics spacecraft hardware realtime software need express stateaction constraints picture resources camera continuous board electric power Classical planning classical scheduling cover aspects However classical perspective preconditions time management ofjnite modeling constraints important outside equally 18 N Muscettola et al Artijiiciul Intelligence 103 199H 547 l Persistent parallel threads separate components evolve loosely coupled need relative operational modes Typical examples threads loops Attitude Control Ion Propulsion System Control manner This represented coordination control terminate switch different operational modes parallel execution threads l Functional dependencies parameters model best represented turn depends functions parameters For example turn starts turn ends pointing direction The exact duration turn known priori computed PS decides sequence source destination pointings turn inserted duration spacecraft DSl engine require accumulated interruptions thrust accumulation going Between Ion Propulsion System l Continuous parameters addition continuous parameters These include battery charge data volume nonrenewable example long periods time order months During activities executed activity previously total requested l Planning experts level renewable resources IPS engine accumulates time planner track status like resources like propellant For thrust shut plan track expect unrealistic PS In cases sophisticated aspects domain encoded software modules available effectively model subsystem behaviors mission PS requirements able exchange information DSI experts For example trajectory The expert manages PS makes use Navigation Navigation expert charge feeding PS beacon asteroid observation goals determine trajectory trajectory error thrusting maneuver goals correct thrust overshoot undershoot planning spacecraft thrust 312 Goals goal types Problem The DSl problem expressed making use disparate set classical final states requirements camera classical tasks given temporal constraints nonclassical end scheduling horizon planning goals requests scheduled communicate Earth according schedule classical scheduling goals Nonclassical predefined Deep Space Network availability categories goals include include conditions l Periodic goals example optical navigation periodic plusminus 6 hours function asteroid pictures activities naturally expressed 2 hours 2 days navigation DS 1 goal expresses goals arise handling continuous l Accumulation level resources For duty cycle requested example percentage scheduling horizon IPS engine thrusting PS choose specific time intervals IPS actually thrusting It trading IPS requirements goals thrust accumulation N Muscetfola et al Artijicial Intelligence I03 1998 547 19 l Default goals specify conditions achieve goal For example communications Earth rection spacecraft goal satisfy trying order facilitate possible emergency High Gain Antenna point different di pointed requiring 32 Domain structure principles We mentioned PS strong structural principles represent domain models We state variable principle token principle We discuss State variable principle evolution time entirely described values finite set state variables evolution State variables generalization resources classical description task allocation In resources scheduling PS literal inside plan associated state variable Similarly The literal represents value assumed state variable given time state variable assume value point time Building plan involves determining complete evolution state variables scheduling horizon finite duration scheduling typically addressed perspective classical planning For example At glance structuring model finite set state variables appear restrictive However analysis natural domains monkey bananas world actions state literals assigned values location following block floor climbing block block Moreover state monkey research variables advantageous problem solving Recent results planning devices similar state variables suggest planners use representational seriously outperform planners Satplan 1421 mutex relations location bananas elevation monkey state variable constraints location monkey state variables Graphplan 6 l Token principle distinction needs representational primitives actions states A single representational primitive evolution state variables time token sufficient This structural principle challenges fundamental tenet classical planning dichotomy actions states To illustrate dichotomy consider example drawn spacecraft operations domain The attitude space supervised closed spacecraft orientation loop Attitude Control System certain achieve maintain current desired attitude attitude ACS determines thrusters function It appropriately discrepancy repeated attitude error acceptable When controlled ACS spacecraft possible modes acceptable attitude error This cycle continuously threedimensional ACS When asked firing spacecraft discrepancy maximum problematic commands 20 N Muscettola et al ArtiJiciul lntelligmce 103 1998 547 1 Turning x pointing y y changing attitude initial pointing x final 2 Constant_Pointing z maintaining attitude fixed orienta tion z When classical planning representation model attitude need different kinds literals state literals representing spite means easy choose mapping modes natural map cons tant_Point ing change The problem literals representing modes map persistent conditions action appearances statesactions Most people probably z state literal Turning reasonable x action attitude control Thrusters However want different perspective consider literal This certainly y focuses value time actual orientation spacecraft level activity thrusters In fact thrusters fired frequently acceptable error attitude maintaining thrusters executing Turning x beginning turn start end turn stop In case conclude z best represented actions cons tant_Point ing z state low error tolerance fact Turning x y sufficient usually active constant_Pointing smaller y The opposite perspective appropriate literals present ACS executing communicating required constant_Pointingz parameter settings literals spacecraft attitude behavior From possible If focus EXEC plan EXEC law set point cause control ACS control conceptually point view reasonable Turning x y different best represented state In example PS takes radical view gives observations precisely plan occurs period time nonnegative reference temporally distinction actions states clear Given literals More dynamic stationary remove term token refer stateaction dichotomy use neutral duration To purposefully literal describes scoped assertions status process A domain model contains constraint patterns For example Fig 4 gives DDL construct representing plan DS 1 Microelectronics image This action represented plan token Integrated Camera And Spectrometer consistent plan token conditions needed MICAS MICASactions_sv TakeImage id orientation exp_time settings state variable act meaning ground value matching The constraint descriptor parameters token In example value token duration computes ions_sv TakeImage predicate includes specification component MICAS assumes duration token dependency functional function Compute_Image_Duration special variable duration function N Muscettola et 11 Artificial Intelligence IO3 1998 547 MICASactions_sv TakeImage id orientation exp_time settings 1 parameter_functions duration Compute_Image_Duration exp_time settings temporal_relations metby MICASactions_sv Idle meets MICASactions_sv Idle equal Poweravailability_sv DELTA Used 1400 containedby Spacecraftattitude_sv ConstantPointing orientation containedby MICAShealth_sv MICASAvailable containedby MICASmode_sv Ready Fig 4 Taking picture onboard MICAS camera relations temporal value token arguments exp_t ime se t t ing Finally descriptor satisfied tokens order plan includes consistent domain model temporal_relations keyword They state MICASactions_sv state variable Idle immediately TakeImage spacecraft TakeImage consumes ConstantPointing TakeImage token Ready requested MICAS good health MICASAvailable TakeImage token 140 W power constraints In example orientation follow template approaches closely temporally 3 However consequence related allows expression similar constraint patterns temporal planning framework like MICASactions_sv express constraints actions states For example functional duration y duration depends constraint need apply Turning angle maximum duration depend relative orientation Sun respect z affects satisfaction solar exposure constraints x y ConstantPointing Idle In reality equally important able sensitive subsystems z x scoped operators token principle tokens state use The constraint 22 N Muscettola et al Artificial Intelligence IO3 11998 547 33 Plans constraint networks information spacecraft However instead compactly behavior envelope PS plans effectively programs behavior consistent select appropriate behavior available execution acceptable robustness plans possible avoid single completely behaviors They possible behaviors EXEC incrementally envelope responding EXEC interprets run time generate single ensure execution specified set time PS satisfies requirement representing plans constraint networks For example simple assume start end times tokens integervalued temporal constraint network 271 Codesignations value plan execution Other functional dependencies For example thrust accumulation constraints final accumulation tries enforce compatibility plan database The plan database new constraints constraint propagation deduces acceptable represented contain IPS engine tokens previous thrust accumulation duration token During plan construction PS posts portions constraint network variables relate parameters rest network When ranges values variable relate initial accumulation enforces consistency checking propagating constraint network interconnected consistent constraints tokens Plans intrinsically jexible During plan execution EXEC plans order select specific values plan variables For example constraint network plan specifies acceptable range start time token EXEC freedom start token execution range values This decision affect value range start end unexecuted tokens To adjust value ranges run time EXECs constraint propagation EXEC able propagate constraints different requirements PS Section 421 interprets 34 Practical generative planning Fig 5 outlines PS search process If partial plan plan database flaws fix Then plan database restrict variable backtracks PS selects extends performs arcconsistency detect value ranges If propagation detects inconsistency When plan database contains flaws plan returned inconsistencies PS chronologically plan constraint network propagation subgoal temporal flaw refers analogous flaw detection repair process classical 67 PS recognizes resolved analogously kind flaws Fig 5 lists temporal The algorithms urzinstantiated compatibility Unscheduled goal token flaws refer goal tokens legal position state variable PS resolves flaw finding legal position variable position rejecting value flaw handled restricting possibly single value original range The handling flaw analogous constraint planning The token relation flaws classical planning single open precondition value range variable subrange goal The underconstrained value selection satisfaction search N Muscettola et al Artcial lrztelligence 103 1998 547 23 No b Plan Uninstantiated w Underconstrained parameter Schedule token state variable Fig 5 PS problem solving cycle The prioritization open flaws selection alternatives flaw handling relies simple heuristics For example uninstantiated assigned numeric priority according flaw moment flaw appears plan value range variables involved temporal compatibilities domain translates Although underlying search strategy heuristic scenario 154 tokens 180 temporal constraints language simple PS solve problems size complexity adequate practical application domains For example DSl Remote Agent experiment consists 18 state variables 42 token specifications The largest plan nominal Remote predicates 46 compatibility tokens Agent experiment This 232 constraints constitute simple constraints Of 8 1 variables 114 temporalbound rest temporal subnetwork related constraint network average arity number variables 649 search 35 The number nodes expanded plan generation efficiency 64 Search efficiency measured ratio number nodes path solution total number expanded nodes Thus search efficiency 100 indicates backtracking relates start end times tokens The constraints network 288 variables constraint PS purely generative planner level Most importantly PS use precompiled overall plan atomic components This differentiates From previous description conclude operates single abstraction plan fragments assembles PS practical applications systems rely Hierarchical Task Network HTN planning patched comes handgenerated successful The notable absence generative planning task networks planning technology date 131569 These power overall plan led applications 24 N Muscrttolu et al Artificial Intelligrnce 103 1998 547 commonly automatic solution planning problems commercial HTN planning shared view significance true utility respect DSl token networks precompiled Although precompiling task networks significantly shallow useful precompiled HTN approach For example HTN powerful problem solving accidental First domains task decomposition task networks assemble small number differ HTN clear advantage respect relies replanning constraints activities goals HTN formalism technique choice pure generative planning equally amenable hierarchy tokens In conditions domain compatibilities generative planning Second representation domainlevel included HTN representations provide strong separation encoding domain model problem solving heuristics While valid independent goals function ensure acceptable performance specific planning problem quality instead clearly separates domain model heuristics As shall Section 62 facilitate separation domain models problem solving heuristics validation big impact acceptability AI technologies applications solution specific planning problems Our approach especially degraded capabilities 3 11 Third importantly missioncritical crucial 35 Summary PS constraintbased commanding Remote Agent architecture From experience following temporal planner highlevel provides capability lessons l Classical planning classical scheduling combined augmented autonomous commanding complex systems l The classical actionstate dichotomy problematic substituted unified concept token l A constraintbased problemsolving plan representation organized state variables powerful framework planning l Heuristic generative planning solve problems practical significance l The separation domain models problem solving heuristics realworld domains validating planners important 4 Executive EXEC robust eventdriven goaloriented multithreaded control diagnosis reconfiguration framework It provides language planning autonomous interdependent success uncertain interactions When It provides language interpreting language execution capabilities software designers express timing outcomes activities resource executive automates integrated run time concurrent activities expressing goaldecompositions It request execute plans involving N Muscetrola et al Artcial Intelligence 103 1998 547 25 smaller activities executed concurrently This decomposition goals automates aspects laborintensive spacecraft operations raises level abstraction ground onboard planner reason fault EXECs design supports close integration activity decomposition responses This leads robust execution avoids loss mission objectives improves mission reliability resource utilization design entire software simplifies sequencing function EXEC built Execution Support Language ESL 1351 provides sophisticated control constructs property schedule execution hierarchical routine configuration management 36 These locks loops parallel activity synchronization features EXEC language error handling robust contextdependent method selection responses main coordination role intermediary implement I task decomposition eventdriven In RA architecture EXEC plays concentrate main aspects EXECs behavior flight software modules internal external RA Here PS available capabilities Periodic planning extended missions EXEC periodically ask PS new tasks coordinate PS operation tasks executed Also operations interrupted capabilities lost EXEC ask new plan communicating Robust plan execution EXEC successfully uncertainty hybrid proceduraldeductive method selection guided state inference based modelbused diagnosis Local recovery current plan execution context presence allowed plan exploited faults involves planning guided constraints performs contextdependent failures The flexibility execute plans execution strategy 41 Periodic planning extended missions Fig 6 shows major branches periodic planning replanning cycle RA nominal execution plan failure execution Nominal execution occurs plan tokens Plan failure Plan assumZs violated U Plan failure Next horizon plan request Plan ready Fig 6 Periodic planning replanning cycle 26 N Muscuttoln et al Artificial Intelligence 103 I 998 547 execute MIR EXEC detecting execution failure In case plan execution proceeds end current scheduling horizon At predefined point plan EXEC invokes PS continues executing waiting new plan smoothly installs new plan current execution context Plan execution failure occurs MIR EXEC encounter unrecoverable failure In event EXEC aborts current activity enters standby mode serves design invocation point planning EXEC requests new plan welldefined state possibly updating plan soon receives PS planner degraded capabilities starts executing A smooth execution periodic planning generation new plan activities available capabilities PS MM cycle requires EXEC coordinate communicate information 411 Planning plan In spacecraft domain planning complete preconditions informational input state preconditions experts need relies input planning suitable changing quickly unpredictably Therefore propulsion attitude control Future planning Domain constraints enforced achieved planning considered form metaplanning planning activity things resources like plans timeline plan ensure resources preconditions plan 60 commanding activities appear invoked This aspect planning hard plan scarce computational subsystems RA invoking consumes analogous planner 7 RAs approach planning plan illustrated round planning fragment constraint Navigation expert performed new orbit calculation This calculation pictures PS inserts turns required initiate point camera corresponding round planning executes plan supporting plan occur relies analysis imaging activities targets During execution EXEC Planning token installed Fig 7 In example Goal Cruise_to_Targett Imaging 1 Idle Attitude Pointa Turnab 1 Imaging 1 A containedby Pointb Idle I Turnba Fig 7 Sample plan fragment plan Because constraints activities required planning successfully explicit completed plan happen 412 Concurrent planning execution reasonable Even prescheduled times limited computational long time complete Throughout resources available planning combined difficulty planning severe resource limitations cause round planning process spacecraft need operate capabilities For example current onboard processor expect PS 8 hours generate plan capabilities week operation This adds percent total mission time spent targets IPS propulsion need generating plans However time Since activities operate high duty cycles excess 92 available observations require IPS engine omitting total thrust accumulation reach target Hence EXEC continues plan execution PS planning necessitates currently executing plan prediction activities period underway IPS thrusting planning leave insufficient 60 This scientific experiments happen planning assumptions planning reach designated tracking changes planning 413 Replanning degraded cupabilities combination monitoring diagnosis When operating extended periods time spacecraft face problems arising capabilities hardware control diminish time aging Once failures recognized future planning Section 5 EXEC track degradation commanding stuck shut thrusters cycles For example fault mode DSl The attitude control software redundant control modes enable maintain control following longer complete When EXEC notified permanent change MIR passes health information PS thruster effect turns loss single 42 Robust plan execution We seen nominal operations EXEC invokes planning machinery planning welldefined However execution resources available byproduct plan execution ensures projected state basis planning fails planning activity properly prepared executed agent needs way generate plan continue making progress mission goals RA addresses execute repair current plan aborts problem follows plan cleans executing activities puts controlled standby mode This serves design welldefined invocation point planning EXEC unable Entering standby mode following plan failure costly respect mission goals interrupts ongoing planned activities important mission opportunities lost For example plan failure causing EXEC enter standby mode comet flyby cause loss encounter science time replan comet passed sight Such concerns motivate strong desire 2x N Muscettola et al Artificial Intelligence 103 1998 547 plan robustness uncertainty failures plan execution continue RA achieves robust plan execution successfully presence flexible plans running multiple parallel threads fast constraint Executing propagation algorithms Choosing high level abstraction detailed activity decisions possible Handling execution repair planning EXEC exploit plan flexibility planned activities delegate procedural executive failures combination robust procedures deductive 42 I Executingjexible plans Section 33 plans constraint networks As discussed desirable behaviors determines run time actual behavior This process involves propagating execution envelopes interprets plans plans constraint networks EXEC incrementally time information representing The process interpreting plan carried EXECs plan runner Here brief sketch plan runner works The plan runner treats state variable separate runs thread execution Each token state variable corresponds thread The transition token following state variable represented time point time variable Starting terminating time point plan The plan runner wait time points precede executed time point enabled current time time bound When time point executed plan runner executes following cycle 1 Set execution 2 Set parameters tokens started time point acceptable underlying plan constraint network execution tokens involves certain processing time time point current aprogram time values 3 Propagate plan consequences previous value assignments rest 4 Terminate execution tokens ending time point 5 Start execution tokens starting time point After execution previous cycle plan runner waits current enters time bound enabled possible values startend time bounds parameters unexecuted tokens time time point Note step 421 adjusts set research plan runner work realworld application AI execution Making overlooked operation 4 A realtime guarantee seen way quantify agent The way problem arises plan runner execution cycle takes time execution unable latency raised issue need EXEC realtime guarantees reactivity following Processing latency h One EXEC finer asked execute event precisely time time point precision In words EXEC exact execution guarantee 4 An alternative approach realtime execution guarantees addressed CIRCA architecture 55 N Muscettola et al Articial Intelligence 103 1998 547 29 actual event execution time t guarantee t 12h interval t 12L temporally precise agent guarantee milliseconds minimum given time necessary 53 Therefore time order produce highly reactive taking picture target execution reduce latency propagation One important way reduce k speed executiontime constraint propagation time constraint network transform simple temporal constraint network time assignment time adjacent time points In RA address speedup problem One possible equivalent represents time points propagation need propagate execution temporal constraint network Minimal means network contains number edges dispatchable temporal constraint networks fastest possible minimum flexible PS gives EXEC execution minimal dispatchable Dispatchable means networks 154661 This means set consistent time immediately EXECs 422 Delegating activity details execution flexibility Generation representation leastcommitment plans temporal planner A complementary source plan domain The approach follows PS constraint robustness relies choose activities planned PS leave details level abstraction resolved EXEC execution A PS token based careful knowledge appropriate possible sense provides envelope resources execution allocated power consumption detailed activities executable resource envelopes absence exogenous abstracted time allowances maximum failures guaranteed design For token type EXEC task decomposition An example DSl achievement illustrates certain change approach requires Velocity changes achieved thrusting Fig 8 A DeltaV goal token velocity spacecraft time delta engine Thrust Goals I Delta_Vdirectionb magnitude200 Attitude ACS mode k I Pointb tokens RCS mode Tvc mode Fig 8 Plan fragment achieving change spacecraft velocity spacecraft certain direction A total velocity change achieved pointing thrust engine series shorter thrust time segments segment required segment stopped spacecraft turned direction ACS Thrust Vector Control TVC mode shortly IPS There constraint started thrusting Reaction Control System RCS control mode termination thrusting activity uncertainty long initiation involves performing uncertainty number complex operations Initiating thrust activity takes engine considerable switch attitude thrust starts accumulating This translates given segment control modes thrust actually accumulated achieve total desired thrust RA takes thrust segments necessary following approach problem PS inserts thrust tokens plan need executed EXEC tracks thrust achieved executes turns long thrust actually necessary Similarly PS thrust tokens associated delegates EXEC coordination activity details subsystems level visibility PS In example represent thrust activity control mode ACS The result constraint plan execution engine setup time thrust achievement We note delegation labor PS EXEC relies capabilities sophisticated procedural execution 353658 EXECs domain knowledge robust variations engine 423 HyhridproceduruUdeductive executive The preceding discussion described ways achieve robust execution primarily presence uncertainty timing task progress Another major cause execution failure spacecraft domain activity failure problems hardware Several properties spacecraft domain drove design executive combines language local recovery planning These challenging rich procedural properties irreversible actions complex include internal structure execution tight coupling subsystems consider As example tight coupling subsystems GDE board If experiences communications spacecraft subsys tems DS 1 Fig 9 engine gimbal solar panel gimbal A gimbal enables engine nozzle rotated point directions changing space rotated track sun In DS 1 craft orientation The solar panels independently sets gimbals communicate main common gimbal drive failure way electronics reset GDE fix resets communication In particular loss control resetting solar panels Thus fixing problem cause new problems To avoid recovery needs account global constraints schedule execution fashion recovery sophisticated plan involving operations subsystems turn GDE However resetting fix engine problem causes temporary local fixes incremental making engine gimbal nominal powercycle 5 In TVC mode spacecraft turned steering main engine gimbal AC mode spacecraft turned small attitude thrusters N Muscettol et al Artijicial Intelligmce 103 1998 547 31 p55Eqg Fig 9 Interacting gimbal subsystems DS I Fuel Oxidizer X Valve 33 Pyro Valve Solid black indicates closed valve Fig 10 Simplified schematic Casini spacecraft propulsion Another problem stems need repair systems complex internal structure irreversible actions For example complex set valves Fig 10 including explosivepyro valves change states ordinary valves varying amounts wear tear It difficult costs risks express right valve choices redirect fluid flow minimizing wide variety situations Cassini spacecraft encountered propulsion flight 101 Examples like drove design R4s hybrid execution 59 executive based generic procedures MIR integrates EXEC deductive modelbased state inference optimal failure recovery planning procedural executive Section 5 provides algorithms sophisticated RAs integrated executive enables designers encode knowledge combination procedures declarative models yielding rich modeling capability challenges real spacecraft control The interface executives ensures recovery sequences consistent highlevel schedule execution high effectively handle additional degree reactivity failures recovery retained suitable The need integrate EXEC localrecovery significant approach languages RAPS 33 RAPS supports robust execution procedure ability MIR impact design EXEC integration execution synchronization required In NewMAAP RA prototype EXEC based language provided definition multiple methods If method fails RAP interpreter selects alternate methods In particular present constructs planning 32 N Muscenola et al Articial Intelligence 103 1998 517 interacting health functioning run options case entire procedure basis The NewMAAP followed similar approach EXEC invoked MIR plan recovery variable bindings fails Effectively RAPS handles failures activitybyactivity RA prototype activity separately However design real flight software DS 1 introduced problems tightly subsystems described This caused redesign interface EXEC suspend failed activities provide global constraints preserve repair failures subsystems RAPS reasons First RAPS This turned extremely difficult constructs successful execution Second RAPS support nested contexts tasks respond recoveries Third RAPS support suspending global recovery execution concurrent activity interrupts hierarchical 3536 required properties specific way ultimately draw generic interrupts new language ESL facilities easy language extension flexible notion recovery procedures declarations progress 6 These difficulties motivated tasks properties threads based external recovery procedures need maintained request design failures 43 Summary EXEC robust eventdriven goaloriented multithreaded activity flight software modules internal external execution coordinates Remote Agent This section discussed following major points l Coherent autonomous operation longterm mission achieved l Executing periodic planning guided mission profile flexible constraintbased results robust plan execution guaranteed plans bounded executiontime propagation realtime behavior Procedural deductive capabilities integrated reactive execution loop Enhanced synchronization primitives track state requirements necessary concurrent execution systems A robust multithreaded executive provides core capabilities support architecture autonomous operations extended missions 5 Modelbased mode identification reconfiguration The mode identification reconfiguration sits nexus ture provided Livingstone controller planning scheduling systems lowlevel tive methods Fig 11 It discrete controller spacecraft hardware software highlevel 71 Livingstone feedforward component Remote Agent architec discrete modelbased reasoning classical feedback control continuous adap sense constantly attempts achieves set point configuration 6 Similar concerns apply procedural execution systems like PRS 37 RPL 46 Interrap 50 Golog 1431 N Muscettola et al Artcial Intelligence 103 1998 547 33 Planner Executive values Spacecraft Commands Fig I 1 Livingstone architecture diagram Fig 12 Different configurations achieve thrust The circled valve failed called conjiguration goal sensing component commanding component uses single declarative compositional called mode reconfiguration called mode identification sense It modelbased spacecraft model MI MR A configuration goal specification set hardware software configurations modes More configuration line functional goal providing fails Other configurations handle valve failures redundancy For example Fig 12 shows configurations satisfy configuration goal corresponding satisfy thrust right circled valve open valves different combinations corresponding Livingstones sensing component mode identification MI provides capability It compares track changes spacecrafts configurations executive commands component predict nominal failures MI uses spacecraft model executive commands configuration predicted actual values monitored spacecraft Discrepancies monitored values signal failure MI isolates cause identifying diagnosis actual spacecraft configuration algorithms adapted modelbased sensor values predicted configuration fault diagnoses 2324 N Muscrttola et 01 Artijicial lrztelligerm 103 1998 547 MI provides variety functions RA architecture l Mode confirmation confirmation EXEC provides including particular spacecraft command completed successfully l Anomaly detection identifies observed spacecraft behavior inconsistent expected behavior l Fault isolation diagnosis anomalies failure modes components In cases models component identifies components failures explain detected particular failure exist identifies explain anomalies l Token tracking monitors state properties executive allowing monitor plan execution When current configuration Livingstones mode reconfiguration procedures goals MR support variety functions goals MR capability identify cost set control satisfies new configuration including active configuration invoked spacecraft satisfy ceases l Mode configuration desired behavior place spacecraft cost configuration exhibits l Recovery spacecraft function repairing goals failure state restores desired failed components finding alternate ways achieving l Standby safing absence recovery place spacecraft safe state highlevel planner ground operations awaiting additional guidance team Within RA architecture MR primarily recovery identified MI Section 423 detailed assist EXEC generating procedures discussion response failures use single central model particularly worth highlighting Three technical features Livingstone reasoning tasks As noted Livingstone modelbased vision Second Livingstones long held vision modelbased support diversity engineering tasks single model single core algorithm achieving achieves broad coverage hybrid discretecontinuous coupling 44 qualitative Third approach unifies 19 conflictdirected reasoning We discuss points transition models underlying concurrent developed First automates variety making significant progress formalism systems reactive languages 2568 reasoning reactivity coupled fast propositional dichotomy AI deduction softwarehardware search algorithm modelbased representations concurrent representation 5 I Representation formalism Implemented modelbased constraintbased modeling models built compositionally connections modes corresponding constraints characterize diagnosis example systems traditionally 17233965 component models specification specify behavior In formalism individual components Each component model consists set different nominal failure modes component A set modes The behavior component N Muscettola et al Artijicial Intellipme 103 1998 547 35 componentbased nature modeling supports development complex formalism enables plugandplay increases largescale models compositional model development maintainability While compositional enables model reuse constraintbased modeling limitation suited modelbased Its widespread use restricted significant diagnosis applications fact typically model dynamics essential modes Modeling dynamics determine changes spacecraft configurations words model transitions Livingstone reconfiguration needs track sequences firstorder modelbased diagnosis hand assumed logic logic 2162 The enticement firstorder semantics However order logic accurate reflection formalism representation wholly inappropriate systems On hand expressiveness leads use intractability On hand firstorder firstorder satisfiability semidecidable precluding logic offer particularly modeling hardware software systems Finally writing language dynamics state change Modeling dynamics logic large scale models flat structure firstorder Most formalizations implementations models specified clear understood existing building practical diagnosis computational realtime natural essential impractical constants describing language functions relations Our challenge Livingstone effective compositional modeling represent software naturally clean underlying realtime develop practical modeling language dynamics hardware semantics computed efficiently 5 I 1 Concurrent We overcame transition systems transition concurrent limitation coupling compositional systems constraintbased modeling 44 In set formalism transitions modes For example Fig 13 shows modes modes explicit transitions valve valve driver Each transition transition modeling executive command failure transition As mode associated model modeled transition reactive software consisting nominal component Open cmd open 2 Closed vcmd jn vcmc 4 cmd reset 1 cmd 1 Off Resettable failure I Permanent failure Stuck open Stuck closed Valve Vale Driver systems valve valve driver Shaded modes failure modes Fractional numbers Fig 13 Transition represent transition probabilities numbers represent transition costs 36 N Muscettola et al Artijicial Intelligence 103 1998 547 components behavior set constraints inflow outflow 0 constraint Closed mode valve To ensure representation computable finite domains compile mode example defined semantics restrict constraints propositional logic transition transitions preconditions In terms dynamics nominal model conditions absence failure valve Open Closed receives Close command At given time transitions enabled zero failure Stuck open Stuck transitions associated probabilities model failure transitions model failure transitions different costs command cost way repairing valve driver exhibiting Resettable transition taken For example transitions exactly nominal possible example Closed valve fail transitioning closed modes Hence likelihood failure occurring Probabilistic intermittence On valve driver fail transitioning mode transition On explicit command Nominal associated costs providing sequences For example failure Reset turning way model Resettable component connecting transition concurrent Components larger viewed acting concurrently communi models built cating wires Hence constraintbased modeling models The resulting model compositionally model sense single transition cancurrent systems Natu transitions component corresponds transitions consistent component connections For example rally component OpenClose command output valve driver Hence valve transition commanded valve driver On input valve directly controllable transition transition supports specification concurrent compiled restricted propositional To support large scale modeling built compositional modelbased program ming language mod els This specification logic mula welldefined directly Livingstones MI formalism enabled nat MR components We modeling urally model discrete digital systems valve driver b analog systems qualitative modeling 2568 valve c realtime software spacecraft attitude controller Hence primary semantics This formula lesson experience transition temporal concurrent Probabilistic building modelbused autonomow tractable transition systems provide appropriate expressive clean semantics formalism systems 512 Qualitative modeling As noted use simple qualitative Sacks Doyle 63 strongly criticized arguing ambiguous systems They conclude far general practical use 63 Indeed work qualitative modelbased diagnosis focused variety methods computation ambiguous values applying quantitative representations value qualitative critique comment Qualitative analyze handful simple equations modeling analog systems try eliminate representations information reasoning N Muscettdu et al Artificial Intelligence 103 I 998 547 31 indicator representation simply case values sufficient precision Our experience contrary First fact model lead In ambiguous values case diagnosis rule rule incorrect diagnoses Second modeling incorrect diagnoses little For example researchers Xerox PARC tried listed human develop simple set copier models sufficient cover diagnoses generated diagnostic models far simpler Sacks Doyle asserted impoverished 4 What representations representations information necessary repair procedure sufficient Based lesson adopted modeling formalism Livingstone models based qualitative deviations reconfiguration tasks Furthermore tuning numerical parameters This enabled rapidly prototype analog behaviors extremely simple representation nominal behavior We representations adequate Livingstones mode identification simpiicity models important benefits First contrast models process We tease exact form quantitative carefully protection measure robustness hardware designers choose substitute different qualitative model change underlying meaning nominal changes Third qualitative models allow use propositional This essential shortly The essential detailed quantitative easy acquire acquired early stages design equations worry fault concurrently hardware design Second qualitative models provide inaccuracy For example thruster valve produce thrust thrust enable fast inference We discuss point following rapid timely response lesson draw experience design changes modeling terms deviations qualitative model nominal providing encodings remains Extremely simple qualitative models appropriate practical signijcant tasks 52 Reactivity deduction A key contribution fact unifies dichotomy Al Livingstone 19 argued sym deduction reactivity Several authors principally bridge bolic reasoning methods planning deduction gap perception action timely fashion For example construction reactive systems rapidly handle complexity uncertainty imme theorems ques diacy real situations Agre Chapman claim proving tion I Rather argument goes right way construct com reactive systems circuits possibly augmented pile inference architecture timers state elements 9 But subsumption solution adequate types reactive systems particularly remote agents Equally correct deduction search play role reactive systems important network combinational search unable leading example discussing 521 Fast deduction search Consider systems deep space probes Antarctic Martian habitats power networks question adequacy thesis Autonomous 38 N Muscettola et ul Artificiul Intelligencr IO 1998 S47 essential interruption lines need operate In systems rapid correct carrying mission Responding long periods chemical plants assembly response anomalous harsh environments situations single anomalous situation hardwired network plausible However length time autonomous operations desired increases arise grows exponentially Constructing cascade failures truly daunting embodied responses directly solution task The compositional modelbased paradigm Livingstone ability identify multiple failures synthesize correct compact declarative model provides practical combinations reactive network responds correctly anomalous situations But concern search deduction sufficiently reactive responses combination combinatorial transitions commands timeconsuming possible Livingstone concern 71 details We formulate MI MR likely cost addresses optimization finding consistent observations MR formulated restore current configuration goals problems MI formuiated timescales techniques Livingstone follow spirit proposed Brooks compiling constraint Livingstone models network This propositional instead functional network tasks highly tuned search algorithm propositional evaluated Livingstone simple network However compiles simple deductive search problem highly tune performance Our motive reducing constraints parallels modelbased intuitions reduced instruction solves combinatorial search coupled fast propositional focuses set computers optimization problems conjlictdirecred 7 inference unit propagation Empir rapid diagnosis search enabling suffices loops best ically response While unit propagation applications The reason use causal models feedback unit propagation chosen prime implicates complete complete small number carefully use conflicts dramatically inference procedure incomplete RISC 191 522 Truth maintenance The techniques response allow Livingstone identify modes reconfigure hardware evaluating extremely small set candidate solutions Hence potentially search appears major problem Nevertheless exponential slow requirements processor unit propagation significant problem Livingstones enhanced order magnitude truth maintenunce Incremental Truth Maintenance System ITMS 56 computes unit propagations variant traditional Logicbased TMS LTMS 2845 time The ITMS optimizes context switching The ITMS truth trajectory states event driven manner That ITMS assignments times order hundreds milliseconds like traditional LTMS computes performance called A conflict partial assignment assignment containing conflict guaranteed infeasible N Muscettolu et al Artificial Intelligence 103 19981 S47 39 propagates chunges unit propagation truth assignments state state performing TMS ATMS inadequate introduce Livingstones 20232430 efficiency 22 Concerns use ITMS different sharp contrast inefficient modelbased type TMS called ATMS write use fundamentally woefully 181 The advantage ATMS linear avoiding diagnosis systems Assumptionbased LTMS 80s lead Kleer traditional TMSs proven time space switch contexts label propagation comes cost exponential process These costs particularly problematic embedded realtime systems More recently ATMS focusing algorithms developed cost labeling alleviate exponential current context 242934 Precise empirical restricting ATMS label propagation comparisons modelbased diagnosis systems based focused ATM unavailable However perform limited experiments based LTMSslTMSs run version Livingstone contained TMS Even TMS Livingstones time standard diagnostic Sherlock 24 contain ATMS ability time cost unit propagation However time space prelabeling test suite comparable diagnostic algorithms change This result led revisit LTMS technology received little attention decade We addition traditional LTMS significantly improved Livingstones performance On hand LTMS performance ideal In best case LTMS update linear cases far number labels applying Livingstone LTMS spent significant percentage time labels remain constant specifically 37 average 670 worst case This worst case deadly real systems hard time label update merely requirements The ITMS offers aggressive approach 5 ideal worst case overhead 100 The use TMS resulted Livingstones performance version order magnitude TMS allowed Livingstone DSl spacecraft models timing requirements DS 1 states Unfortunately meet stringent improvement successive The primary lessons discussion following Seurch deduction essential deduction carried reactive maintenance reactive systems Furthermore time scales Firy LTMSstyle search truth systems provide essential toolfor speeding deductive search 53 Summay Livingstone discrete modelbased controller provides mode identification reconfiguration Livingstone provided following technical lessons capability Remote Agent architecture Our experience l Many reactive tasks carried single model l Concurrent systems provide appropriate formalism transition building model based autonomous systems l Strikingly simple qualitative models effective realworld tasks 40 N Muscettola et al Artijicial Intelligence 103 1998 547 b l Search deduction necessary Search deduction carried reactively Truth maintenance systems powerful reactive tools speeding search 6 Lessons technology insertion Most discussion paper focused technical raising technical RA In addition developing real mission real mission schedule provided valuable kind technology Three key technology l Humancentered operational missions insertion lessons following 2 issues encountered issues process working lessons inserting operations While new classes missions require systems systems support highly autonomous operational modes humans exercise tight control important capabilities l Validation testing A major barrier increasingly systems concern actually perform desired test validate Architectural design choices let spacecraft engineers focus domain model problemsolving methods significantly help address barrier onboard spacecraft potentially impacts Putting autonomous l Schedule autonomous major impact traditional require knowledge normally codified operations encoded early Developing flight software development schedule built things alleviate problem mental models large This motivated unified techniques coherence timeconsuming software programmed team skunkworks Ensuring inordinately l Modelbased software develop research paradigm modeling collaborative modeling environments language small team supported automated synthesis We believe lessons generalize situations lessons complex au sub following tonomous sections systems deployed We briefly discuss 61 Humancentered operations involving operations support scenarios actual flight code development The NewMAAP RA prototype designed extremely autonomous human communication impossible As moved prototyping teamed ground operators extend RA architecture RA The key insight gained extreme autonomy necessary interaction 861 Such approach offers key benefits First interaction simplify ability chance mission success Second designers design increase address broader operational context certain mission phases essential draw human expertise especially support human anomalous possible conditions 8 Montemerlo 49 provides set lessons summarizing earlier experience technology insertion NASA N Muscetiola et al Articial Intelligence 103 1998 547 41 operators automate autonomous acceptance relying fully launch time This help increase confidence improve operator incrementally capabilities As result extensions RA purposes features RA shares longrange mission profile ground operators following enable asynchronous spacecraft multiple additional knowledge information inconsistent state Additional major area ongoing research 86 11 RA ground updates ground operators monitor command levels simultaneously ground operators provide RA parameter updates model updates diagnostic interfering activities RA leaving forms support human interaction remote agents 62 Validation testing validation problemsolving role In interaction spacecraft engineers lesson research far concentrated The strict separation modeling problem solving heuristics PS DSl experience While AI learned Section 3 addresses mission performance problemsolving planning takes critical applications prominent asked sure software work insistently advertised avoid unintended development aspects missioncritical embedded software systems AI based However systems like RA promise complete autonomy wider variety previously possible On face makes validation complex situations declarative nature Al systems harder traditional technology behavior approaches inspection models facilitates deep understanding software development systems Fortunately behavior Indeed question unprecedented traditional question applies allows Our use declarative approach dictates clean separation models mission engineers focus guaranteeing met details reasoning engines manipulate order produce solutions efficiently A strict separation models knowledge AI problem solving methods analyze research areas heuristics This ensures requirements models heuristics allows nonAI embedded We believe inspectable models synthesize problem solving heuristics important widen applicability AI techniques having representational techniques tools automatically model understand realworld applications experts inspect specialists 63 Schedule impacts In traditional approach spacecraft development software capabilities necessary goes wrong spacecraft ground operators This approach remain uncodified available heads designers enables knowledge puts flight designers build ensure safety When safe state waits help interactions It enables additional 42 N Muscettola et al Artificial lntelligencr I0i 1998 547 automation flight software development ground typically schedule later earlier stage included In RA approach building autonomous codify knowledge board models RA This need earlier modeling major impact traditional technical concern schedule insertion especially ering new era faster development flight software development onboard spacecraft designers schedule While potentially issues play major role success technology engine cycles concurrent Fortunately modelbased programming approach advantages compensate hardware design details compared plicit schedule models easier impacts Since maintain declarative models mirror face changing hardware im traditional software keeps hardware design assumptions With said remains considerable flexibility order things perform model development The key lesson learned respect workjrst jirst focus critical models level necessary refine models Then progressively This approach tendency major spacecraft capabilities fit risk management meet launch requirements capabilities detailed models components approach approach overall flight software project increased performance unmanaged modelbased enables provide reduces 64 Modelbused skunkworks DSl difficult teams responsible 40 Mars Pathfinder broken specifications Often creativity speed design time decreases exponentially size 14 excellent examples inexpensive assembled pace sustain virtual come closer emulating team comprised 40 systems attitude control codes discrete device drivers integration test scripts systems team Lunar Prospector missions developed small teams short time span operated flawlessly However far capable missions presence For example flight software individuals engineering EXEC procedures MIR models PS models A significant meeting presentations validation What challenging mental model spacecraft behaved The purpose timeconsuming meetings bring perspectives fact models implicit changing miscommunication inevitable making scoping model definition seven teams fraction rhe development directed alignment The large team size writing hardware specifications knowledge acquisition preparing documents task inordinately time devoted timeconsuming simulators The research challenge provide development allow small team dozen allow models levels explicit single coherent model able easily track dynamically changing hardware design The paradigm developing modelbased skunkworks In paradigm develop equivalent facilitate development paradigm set tools These tools programming classical programming aspects flight software programmed models Automated synthesis techniques use models generate simulators discrete Ilight codes continuous attitude control codes test scripts To facilitate model synergy models developed best ideas language unified modelbased languages Model building disparate encapsulation Finally team facilitated distributed project human assessment flight softwares capability systems engineers analysis management facilitated models Finally extensive reusable model library ultimately allow future spacecraft plugged tools generate review documents past knowledge collaborative modeling incorporates environments 7 Conclusions future work virtual presence AI The characteristics The challenge building remote agent assist establishing require highly reliable autonomous space proved exciting unique opportunity domain time tight deadlines resource constraints coupled subsystems led development principles modelbased programming directed closed loop commanding The resulting architecture temporal planning mode identification different areas AI including planning scheduling plan execution qualitative reasoning modelbased diagnosis integrates constraintbased scheduling modelbased reconfiguration These components draw research variety reasoning truth maintenance operations long periods concurrent tightly activity Remote Agent architecture based onboard deduction search goal reactive languages deduction constraint propagation robust multithreaded execution temporal search Jumping headlong NewMAAP demonstra meet fastpaced challenges reassess tion DS 1 provided invaluable opportunity conven Als conventional wisdom Our experience sharp contrast tional wisdom main lessons generative planning scale solve practical problems search deduction carried reactive realworld problem control rel provides veritable evance research lesson experi ence important research problems ensures embedding fountain interesting In sense important loop Furthermore While Remote Agent significant step reaching goal providing Future remote agents injbrmution NASAs explorers remains autonomy need adaptive They need anticipate imminent active seekers state As fleets explorers descend distant planets achieve mission goals We expect future NASA missions ones highlighted Introduction building capable remote agents This exciting following vision autonomy react uncertain failures plan contingencies They need environment need colluborute require future aptly captured concrete challenges better understand environment provide 44 N Muscettola et al Artcial Intelligence 103 1998 547 With autonomy declare sphere limits We send spacecraft search tell tale directly control relying horizon accepting Bob Rasmussen Cassini AACS Cognizant Engineer New Millennium Autonomy Team Acknowledgment We contributions like acknowledge members NewMAAP DSl Remote Agent teams tireless efforts work possible Douglas Bernard Steve Chien Scott Davies Greg Dorais Julia Dunphy Dan Dvorak Chuck Fry Ed Gamble Erann Gat Othar Hansson Jordan Hayes Bob Kanefsky Ron Keesing Sandy Krasner James Kurien Jim Larson Ina Lungu Bill Millar Sunil Mohan Paul Morris Illah Nourbakhsh Chris Plaunt Gregg Rabideau Kanna Rajan Nicolas Rouquette Scott Sawyer Rob Sherwood Reid Simmons Ben Smith Will Taylor David Hans Thomas Yuwen Tung Todd Turco Michael Wagner Greg Whelan Yan We like acknowledge Abdullah Aljabri Richard Doyle Guy Man Bob Rasmussen Gregg Swietek tireless promotion spacecraft autonomy John Bresina Dan Clancy Greg Dorais Ari Jonsson Jim Kurien Paul Morris Kanna Rajan David Smith Rich Washington provided comments earlier drafts paper invaluable contributions References I PE Agre D Chapman Pengi implementation theory activity Proc AAAI87 Seattle WA 1987 pp 268272 2 AS Aljabri DE Bernard DL Dvorak GK Man B Pell TW Starbird Infusion autonomy technology space missionsDS 1 lessons learned Proc IEEE Aerospace Conference Snowmass CO 1998 3 JF Allen Maintaining knowledge temporal intervals Communications ACM 26 11 1983 832843 4 D Bell D Bobrow B Falkenhainer M Fromherz V Saraswat M Shirley Rapper Working Papers 8th International Workshop Qualitative Reasoning copier modeling Physical project Systems 1994 S DE Bernard GA Dorais C Fry EB Gamble Jr B Kanefsky J Kurien W Millar N Muscettola PP Nayak B Pell K Rajan N Rouquette B Smith BC Williams Design remote agent experiment spacecraft autonomy Proc IEEE Aerospace Conference Snowmass CO 1998 6 AL Blum ML Furst Fast planning planning graph analysis Artificial Intelligence 90 1997 28 l300 7 M Boddy TL Dean Deliberation scheduling problem solving timeconstrained environments Artificial Intelligence 67 1994 245285 S RP Bonasso D Kortenkamp T Whitney Using robot control architecture automate space shuttle operations Proc AAAI97 Providence RI AAAI Press Cambridge MA 1997 pp 949956 9 RA Brooks Intelligence representation Artificial Intelligence 47 1991 139l 59 IlO GM Brown DE Bernard RD Rasmussen Attitude articulation control Cassini spacecraft 14th AIAAnEEE Digital Avionics Systems Conference Cambridge MA fault tolerance overview November 1995 l I D Chapman Planning conjunctive goals Artificial Intelligence 32 3 1987 333377 N Muscettola et al Artijicial Intelligence 103 1998 547 45 1121 P Cheeseman B Kanefsky W Taylor Where hard problems Proc IJCAI91 Sydney Australia 1991 pp 163169 1131 SA Chien HB Mortensen Automating image processing scientific data analysis large image database IEEE Transactions Pattern Analysis Machine Intelligence 18 8 1996 854859 141 R Cook Mars Pathfinder mission operations faster better cheaper Mars Proc IEEE Aerospace Conference Snowmass CO 1998 1151 K Currie A Tate Oplan 161 SS Dallas Space interferometry mission 17 R Davis Diagnostic IS J Kleer Choices backtracking 1191 J Kleer Exploiting 1201 J Kleer Focusing probable diagnoses locality open planning architecture Artificial Intelligence 52 I 1991 4986 Proc IEEE Aerospace Conference Snowmass CO 1998 reasoning based structure behavior Artificial Intelligence 24 1984 347410 Proc AAAI84 Austin TX 1984 pp 7985 TMS Proc AAAI90 Boston MA 1990 pp 264271 Proc AAAI91 Anaheim CA 1991 pp 842848 ModelBased Diagnosis Morgan Reprinted Kaufmann San Mateo CA 1992 W Hamscher L Console J Kleer Eds Readings 21 J Kleer A Mackworth R Reiter Characterizing W Hamscher L Console J Kleer Eds Readings diagnoses systems Artificial Intelligence 56 1992 ModelBased Diagnosis 197222 Reprinted Morgan Kaufmann San Mateo CA 1992 22 J Kleer BC Williams Reasoning multiple faults Proc AAAI86 Philadelphia PA 1986 pp 132139 23 J Kleer BC Williams Diagnosing multiple faults Artificial W Hamscher L Console J Kleer Eds Readings Reprinted Kaufmann San Mateo CA 1992 32 1 1987 97130 Intelligence ModelBased Diagnosis Morgan 24 J Kleer BC Williams Diagnosis behavioral modes Proc IJCAI89 Detroit MI 1989 pp 13241330 Reprinted Morgan Kaufmann San Mateo CA 1992 W Hamscher L Console J Kleer Eds Readings ModelBased Diagnosis 1251 J Kleer BC Williams Eds Qualitative Reasoning Physical Systems II Special Issue Artificial Intelligence 51 1991 26 TL Dean DV McDermott Temporal data base management Artificial Intelligence 32 1987 27 R Dechter I Meiri J Pearl Temporal constraint networks Artificial Intelligence 49 1991 6195 1281 J Doyle A truth maintenance 29 0 Dressler A Farquhar Putting Artificial problem ATMS Lecture Notes Artificial Intelligence Vol 515 Springer Berlin 1990 Intelligence 12 1979 23 l272 solver l55 drivers seat contextual control 30 0 Dressier P Struss Modelbased diagnosis defaultbased diagnosis engine effective control strategies work practice Proc ECAI94 1994 13 11 TA Estlin SA Chien Xuemei Wang An argument hybrid HTNoperatorbased approach planning Proc 4th European Conference Planning 1997 32 R Fikes N Nilsson STRIPS new approach application theorem proving problem solving Artificial Intelligence 2 34 I 97 I 189208 33 RJ Firby Adaptive execution 34 KD Forbus J Kleer Focusing 35 E Gat ESL language complex dynamic worlds PhD Thesis Yale University 1978 ATMS Proc AAAI88 St Paul MN 1988 pp 193198 supporting robust plan execution embedded autonomous agents L Pryor Ed Proc AAAI Fall Symposium Plan Execution AAAI Press 1996 1361 E Gat B Pell Abstract resource management Aerospace Conference Snowmass CO 1998 unconstrained plan execution Proc IEEE 1371 MP Georgeff AL Lansky Procedural knowledge Technical Report 41 I Artificial Intelligence Center SRI International January 1987 1381 W Hamscher L Console J Kleer Eds Readings Mateo CA 1992 ModelBased Diagnosis Morgan Kaufmann San 1391 WC Hamscher Modeling digital circuits troubleshooting Artificial Intelligence 5 1 199 1 22327 1 Proc IEEE Aerospace 1401 GS Hubbard Lunar prospector developing low cost planetary mission Conference Snowmass CO 1998 1411 IEEE Proc IEEE Aerospace Conference Snowmass CO 1998 142 H Kautz B Selman Pushing envelope planning propositional AAAI96 Portland OR 1996 pp 11941201 logic stochastic search Proc 46 N Musctmdu et al Artijiciul htelligence 103 1998 547 431 HJ Levesque R Reiter Y Lesperance F Lin R Scherl Golog logic programming language dynamic domains Journal Logic Programming 3 1 1997 5984 441 Z Manna A Pnueli The Temporal Logic Reactive Concurrent Systems Specitication Springer Berlin 1992 4S D McAllester An outlook truth maintenance Memo 55 I MIT Artificial Intelligence Laboratory August 1980 1461 D McDermott A reactive plan language Technical report Computer Science Department Yale University 1993 47 DS McKay EK Gibson Jr KL ThomasKeprta H Vali CS Romanek SJ Clemett XDF Chillier CR Maechling RN Zare Search past life Mars possible relic biogenic activity Martian meteorite ALHX4001 Science 273 1996 924930 4X AH Mishkin operations Snowmass CO 1998 autonomy JC Morrison TT Nguyen HW Stone BK Cooper BH Wilcox Experiences Mars Pathfinder microrover Proc IEEE Aerospace Conference 1491 M Montemerlo The AI program NASA lessons learned SO J Muller M Pischel An architecture dynamically Cooperative Information Systems 3 1 1994 2545 seven years AI Magazine 13 1992 Int Journal Intelligent agents interacting iii N Muscettola HSTS integrating planning scheduling M Fox M Zweben Eds Intelligent Scheduling Morgan Kaufmann San Mateo CA 1994 1521 N Muscettola B Smith C Chien C Fry G Rabideau K Rajan D Yan Onboard Intelligence Robotics planning autonomous Automation spacecraft Symposium Proc 4th International Space iSAIRAS Tokyo Japan August 1997 Artificial 153J N Muscettola P Morris B Pell B Smith Issues temporal reasoning Ed Proc 2nd International Conference Autonomous Agents ACM Press New York autonomous control systems M Wooldridge 1998 1541 N Muscettola P Morris 1 Tsamardinos Reformulating temporal plans efficient execution Proc 6th Internat Conf Principles Knowledge Representation Reasoning KR98 199X 55 D Musliner E Durfee Kang Shin Circa cooperative intelligent realtime control architecture IEEE Transactions Systems Man Cybernetics 23 6 1993 S6 PI Nayak BC Williams Fast context switching realtime propositional reasoning Proc AAAI97 Providence RI 1997 57 B Pell DE Bernard SA Chien E Gat N Muscettola PP Nayak MD Wagner BC Williams An autonomous spacecraft agent prototype Autonomous Robots 5 I C 1998 SS B Pell GA Dorais C Plaunt R Washington The remote agent executive capabilities support integrated Eds Proc AAAl Spring Symp Integrated Robotic robotic agents Architectures AAAI Press Palo Alto CA 1998 A Schultz D Kortenkamp S91 B Pell E Gamble E Gat R Keesing J Kurien B Millar PP Nayak C Plaunt B Williams A hybrid Ed Proc 2nd International M Wooldridge spacecraft proceduraldeductive executive autonomous Conference Autonomous Agents ACM Press New York 1998 60 B Pell E Gat R Keesing N Muscettola B Smith Robust periodic planning andexecution Proc IJCAI97 Nagoya Japan Morgan Kaufmann Los Altos CA 1997 spacecraft autonomous 1611 B Pell S Sawyer N Muscettola B Smith DE Bernard Mission operations autonomous agent Proc IEEE Aerospace Conference Snowmass CO 199X 1621 R Reiter A theory diagnosis principles Artificial Intelligence 32 1 1987 5796 Reprinted ModelBased Diagnosis Morgan Kaufmann W Hamscher L Console J Kleer Eds Readings San Mateo CA 1992 63 EP Sacks J Doyle Prolegomena future qualitative physics Computational Intelligence 8 2 1992 1 X7209 64 B Selman D Mitchell H Levesque Generating hard satisfiability problems Artificial Intelligence X1 1996 1729 1651 P Struss 0 Dressier Physical negation fault models Proc IJCAIX9 San Mateo CA 1989 pp 13 18l 323 Reprinted Eds Readings integrating ModelBased Diagnosis Morgan Kaufman San Mateo CA 1992 General Diagnostic Engine W Hamscher L Console J Kleer N Muscettola et al Artcial Intelligence 103 1998 547 41 66 I Tsamardinos N Muscettola P Morris Fast transformation Proc AAAI98 AAAI Press Cambridge MA 1998 temporal plans efficient execution 67 DS Weld An introduction 6X DS Weld J Kleer commitment planning Al Magazine Eds Readings Qualitative Reasoning I5 1994 Physical Systems Morgan Kaufmann San Mateo CA 1990 691 DE Wilkins Practical Planning Morgan Kaufmann San Mateo CA 1988 70 BC Williams PP Nayak Immobile robots AI new millennium AI Magazine 17 3 1996 1635 7 I1 BC Williams PP Nayak A modelbased approach Proc AAAI96 reactive selfconfiguring systems Portland OR AAAI Press Cambridge MA 1996 pp 97 1978 1721 M Wooldridge Ed Proc 2nd International Conference Autonomous Agents ACM Press New York 1998