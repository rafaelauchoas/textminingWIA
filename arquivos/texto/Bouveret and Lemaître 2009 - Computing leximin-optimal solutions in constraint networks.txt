Artiﬁcial Intelligence 173 2009 343364 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Computing leximinoptimal solutions constraint networks Sylvain Bouveret Michel Lemaître ONERA Centre Toulouse 2 avenue Édouard Belin BP74025 31055 Toulouse Cedex 4 France r t c l e n f o b s t r c t Article history Received 31 October 2007 Received revised form 23 September 2008 Accepted 31 October 2008 Available online 8 November 2008 Keywords Leximin Fairness Multiobjective optimization Constraint programming 1 Introduction In realworld multiobjective optimization problems needs ﬁnd solutions alternatives provide fair compromise different conﬂicting objective functionswhich criteria multicriteria context agent utilities multiagent contextwhile eﬃcient informally ensuring greatest possible overall agents satisfaction This typically case problems implying human agents fairness eﬃciency requirements met Preference handling resource allocation problems examples need balanced compromises conﬂicting objectives A way characterize good solutions problems use leximin preorder compare vectors objective values select solutions maximize preorder In article ﬁve algorithms ﬁnding leximinoptimal solutions constraint programming Three algorithms original Other ones adapted constraint programming settings existing works The algorithms compared experimentally benchmark problems 2008 Elsevier BV All rights reserved In collective decision making problems implying human agents needs ﬁnd eﬃcient fair solutions In social choice context informally eﬃcient solution solution ensuring greatest possible satisfaction society agents Eﬃciency1 formal deﬁnitions later Concerning fairness property refers need compromises agents objectives conﬂicting antagonistic It impossible widely accepted formal deﬁnition notion fairness depends situation stake agents implied The interested reader refer 3348 deep investigation fairness different contexts One prominent deﬁnition fairness stick article given egalitarianists informally context fair solution tries balance utilities agents worstoff welloff possible This deﬁnition formally deﬁned later article Fairness particularly relevant areas crew worker timetabling rostering problems optimization long shortterm planning ﬁremen emergency services Fairness ubiquitous resource allocation problems like bandwidth allocation network users fair share airspace airport resources airlines 1 Earth observing satellite scheduling sharing problems 24 As noticed earlier fairness This article extended version S Bouveret M Lemaître New constraint programming approaches computation leximinoptimal solutions constraint networks MM Veloso Ed Proceedings 20th International Joint Conference Artiﬁcial Intelligence IJCAI07 Hyderabad India AAAI Press 2007 Corresponding author Email addresses SylvainBouveretonerafr S Bouveret MichelLemaitreonerafr M Lemaître 1 Unfortunately words eﬃciency eﬃcient meanings In Sections 1 2 refer meaning social choice microeconomics contexts Paretoeﬃciency From Section 3 refer science meaning eﬃciency algorithm In case ambiguity easily cleared considering context words appear 00043702 matter 2008 Elsevier BV All rights reserved doi101016jartint200810010 344 S Bouveret M Lemaître Artiﬁcial Intelligence 173 2009 343364 requirement comes eﬃciency requirement implicitly workers occupied resources allocated agents satisﬁed possible In spite wide range problems concerned fairness issues lacks theoretical generic approach In applications fairness eﬃciency enforced speciﬁc heuristic local choices guiding search supposed balanced alternatives decisions However works cited approach fairness require ment The article 24 investigates multiagent decision problem consists sharing common property resource fair eﬃcient way ways handling problem proposed ﬁrst gives priority fairness sec ond eﬃciency computes set compromises based linear combination eﬃciency fairness indices More recently different direction 36 proposes new constraint based statistics enforces relative balance given set variables possibly ensure kind fairness set agents Fairness studied operational research example 35 proposes model fairness requirements Ordered Weighted Average OWA aggregation 46 investigates way solve optimization problem linear programming Microeconomics social choice theory provide important literature fairness collective decision making tween agents From theoretical background borrow idea representing preferences satisfaction levels agents utility levels adopt leximin preorder utility proﬁles2 conveying fairness eﬃciency x x1 x2 xn requirements Here informal deﬁnition leximin preorder Consider utility proﬁles x If mini xi mini yi y y1 y2 yn If mini xi mini yi leximin preorder strictly prefers eliminate occurrence lowest value proﬁles continue process comparing second lowest values ﬁnd unequal minimal values proﬁles case leximin indifferent Notice case proﬁles leximinindifferent equivalent permutation elements For example proﬁle 2 2 1 2 strictly leximinpreferred proﬁle 4 1 5 1 4 1 5 1 1 1 4 5 indifferent y Before introducing formally Section 2 reasons leximin preorder conveys eﬃciency fairness First leximinoptimal solutions worstoff agent welloff possible perfectly matching deﬁnition fairness introduced earlier Secondly leximinoptimal solutions Pareto eﬃcient means increase utility agent decreasing utility agent corresponds prominent notion eﬃciency collective decision making problems Computing leximinoptimal solution trivial problem easily translated classical optimization frameworks In article focus problem constraint programming CP framework effective ﬂexible tool modeling solving combinatorial problems We provide generic algorithms computing leximinoptimal solutions framework aim beneﬁt powerful expressive framework existing stateoftheart solvers adapting particular problem Apart fact convey formalize concepts fairness eﬃciency multiagent contexts leximin preorder subject contexts This preorder particular importance context multiobjective multicriteria decision making optimization In context enforce good balance criteria objectives ensuring Paretoeﬃciency solution Of course algorithms given article generic applied multicriteria multiobjective multiagent problems Moreover notice leximin preorder domains fuzzy CSP 14 symmetrybreaking constraint satisfaction problems 15 This contribution organized follows Section 2 gives minimal background social choice theory justiﬁes mally leximin preorder fairness criterion Section 3 motivates use constraint programming framework dealing search leximinoptimality generic way deﬁnes search leximinoptimality framework The main contribution article Section 4 describes ﬁve algorithms computing leximin optimal alternatives new ones adapted existing works We introduce section general method designing good heuristics dedicated computation leximinoptimal solutions All algorithms introduced implemented constraint programming performance compared Section 5 presents experimental comparison algorithms different kinds randomly generated instances 2 Background social choice theory x brackets x1 xn The notation We ﬁrst introduce notations Calligraphic letters X stand sets Vectors written arrow x x1 xn explicitly speciﬁed f stand vector ith x rearranged increasing resp decreasing order We write x composed element Finally R denotes set real numbers N set nonnegative integers x element vector interval integers k l included written cid2k lcid3 x shortcut set elements resp x f x1 f xn Vector resp x resp x x x 2 A utility proﬁle vector agent utilities proﬁle corresponding given alternative decision S Bouveret M Lemaître Artiﬁcial Intelligence 173 2009 343364 345 21 Collective decision making welfarism Let N set n agents A set admissible alternatives decisions concerning benevolent arbitratoror society agentshas choose The prominent model describing situation welfarism example 1932 choice arbitrator basis utility levels enjoyed individual agents levels Each agent N associated individual utility function ui maps admissible alternative A numerical index uia R Therefore alternative attached single utility proﬁle u1a una The model assumes individual utilities comparable agents In words expressed common utility scale According welfarism comparing alternatives performed comparing respective utility proﬁles A standard way compare utility proﬁles aggregate collective utility index standing collective welfare agents community A collective utility function uc maps alternative collective utility index uca gu1a una g Rn R aggregation function The aggregation functions sum minimum wide range functions possible conveying different principles 28 An optimal alternative preferred according collectivity alternative maximizing collective utility set admissible alternatives 22 The leximin preorder fairness eﬃciency criterion The main diﬃculty fair decision problems reconcile contradictory preferences agents Since generally solution fully satisﬁes aggregation function g lead fair eﬃcient compromises The fairness requirement discussed depth section Regarding eﬃciency requirements widely accepted criterion Paretooptimality y Pareto dominates Deﬁnition 1 Pareto domination Paretooptimality 13 Let x V Paretooptimal V x vector V Pareto dominates x We extend deﬁnitions alternatives following way let b alternatives dominates b utility proﬁle dominates utility proﬁle b The alternative A Paretooptimal A alternative A dominates y cid21 ncid3 xi yi Let V set vectors Rn The vector y vectors Rn We x cid7 x The problem choosing right aggregation function g computing collective utility index corresponding proﬁle far scope article We standard ones corresponding opposite points view social welfare3 classical utilitarianism egalitarianism The rule advocated defenders classical utilitarianism best decision maximizes sum individual utilities corresponding g However kind aggregation function lead huge differences utility levels agents u 10 10 10 ruling aggregation context fair decisions As example consider utility proﬁles v clearly unfair Consider sum aggregation discriminate v 1 1 29 An utilitarian decision maker select proﬁle u clearly fairest w 1 1 28 u 10 10 10 From egalitarian point view best decision maximizes utility satisﬁed agent corresponding g min y minn Deﬁnition 2 Min preorder minoptimality Let x min minn i1 yi We write set vectors Rn A vector i1xi minn i1 yi The vector x min x cid12min y y y V said minoptimal V y minpreferred x min i1xi minn x y vectors Rn x y said minindifferent written y y The binary relation cid12min total preorder Let V x written x min x V x cid12min y Whereas min aggregation function particularly wellsuited problems fairness essential major drawback idempotency min operator known drowning effect community u 14 20 17 fuzzy CSP 12 leaves alternatives indistinguishable As example consider proﬁles v 14 15 15 They distinguished min aggregation function v Paretooptimal As striking example utility proﬁles 0 0 1000 1000 0 discriminated second appears better ﬁrst In words min aggregation function select nonParetooptimal alternatives desirable u dominates v The leximin preorder known reﬁnement order induced min aggregation function overcomes drawback It introduced social choice literature initially 41 discussed depth 102232 social welfare ordering reconcile egalitarianism Paretooptimality fuzzy CSP 14 It deﬁned follows 3 Compromises extremes possible See 33 page 68 46 OWA aggregation 346 S Bouveret M Lemaître Artiﬁcial Intelligence 173 2009 343364 y said leximin x Deﬁnition 3 Leximin preorder 41 leximinoptimality Let x leximin y x written y indifferent written x leximin y cid20 n 1cid3 j cid21 icid3 x y y j y V said y The binary relation cid12leximin total preorder Let V set vectors Rn A vector x leximin leximinoptimal V x The vector i1 y j x y vectors Rn y leximinpreferred i1 We write y x leximin x cid12leximin x V y x x cid12leximin In words leximin preorder lexicographic preorder ordered utility vectors For example 4 1 5 1 leximin 2 2 1 2 1 2 2 2 greater 1 1 4 5 according lexicographic preorder From previous deﬁnition easy leximinoptimal vector minoptimal It known leximinoptimal vector Paretooptimal 32 This social welfare ordering noticeable characterization explains central place huge importance theory cardinal welfarism social welfare ordering 1 independent common utility pace 2 satisﬁes PigouDalton property time example 32 page 40 33 page 266 The independence common utility pace property states increasing bijection τ R R u1 cid12leximin v 1 vn τ u1 τ cid12leximin τ v 1 τ vn words individual utilities deﬁned increasing dilatation τ modifying leximin preorder The PigouDalton property asks sumpreserving transfer utility satisﬁed agent satisﬁed v cid7 j narrows utilities leads collectively preferred utility proﬁle More formally 1 ui v v j u j 2 ui u j v v j 3 k j uk vk v obviously v equitable utility proﬁle utility transferred agent j happier agent agent Satisfying PigouDalton property desirable context fairness required reduces inequalities agents possible u u leximin x cid15 cid2 n ii n A known result collective utility function represent leximin preorder4 set possible utility proﬁles countable This major limitation practice set ﬁnite discretized reduced ﬁnite In case leximin preorder represented following nonlinear functions5 cid2 q xi adapted leximin alternative approaches proposed 15 g2 n i1 x g1 cid2 n q 0 large 32 Ordered Weighted Average operator 4647 g3 w 1 cid16 w 2 cid16 cid16 wn cid16 informally means suﬃciently bigger The major drawback kind x representation rapidly unreasonable use upper bound possible values creases Moreover hides semantics leximin preorder hinders computational beneﬁts possibly advantage These points discussed Section 4 x cid15 ii w u x cid15 In following use leximin preorder criterion ensuring fairness eﬃciency seek set leximinoptimal alternatives This problem expressed section constraint programming framework 3 Constraint programming leximinoptimality The constraint programming CP framework effective ﬂexible tool modeling solving different combinatorial problems planning scheduling problems resource allocation problems conﬁguration problems 113139 Examples actual CP frameworks solvers Ilog Solver OPL Studio Comet Choco 16 The ﬂexibility CP framework allows user model problems mathematical incremental way cooperation separate constraints linked shared variables The CP user provided basic constraints cid7 socalled global constraints 45 scalar product allDifferent A CP solver implements kernel providing basic interconstraint propagation mechanism 3 In kernel intraconstraint speciﬁc propagation algorithms plugged The CP framework natural support search leximinoptimality complementary reasons Firstly constraints convenient ﬂexible way deﬁne set admissible alternatives link decision variables individual utilities Secondly search leximinoptimality considered separately generic way casted kind global constraint providing highly reusable algorithms different contexts 31 Constraint networks The CP framework based notion constraint network A constraint network X D C consists set variables X x1 xp set associated domains D Dx1 Dxp Dxi set possible values xi set constraints C C C speciﬁes set allowed instantiations concept instantiation deﬁned VC set variables X C called scope constraint From suppose domains ﬁnite subsets N A constraint scope size n called nary constraint In following use bold letters variables x given variable x respectively write x x x cid12leximin 4 In words g 5 For g1 g2 domain utilities restricted strictly positive real numbers y See 32 page 34 x g y g S Bouveret M Lemaître Artiﬁcial Intelligence 173 2009 343364 347 minDx maxDx In algorithms use following shortcuts domain reductions x α Dx Dx cid2α cid2 values α removed domain x notice α x Dx modiﬁed x α Dx Dx cid3 αcid3 values α removed domain x notice α x Dx modiﬁed x α Dx α Dx values different α removed domain x notice α Dx Dx restriction instantiation S cid20 An instantiation v set S variables function maps variable x S value vx domain Dx If S X instantiation said complete partial If S cid20 cid2 S projection instantiation v S Scid20 written vScid20 set instantiations V write VScid20 set vScid20 v V An instantiation v satisﬁes constraint C deﬁned superset X C vX C VC An instantiation said consistent satisﬁes constraints A complete consistent instantiation constraint network called solution The set solutions X D C written solX D C 32 Constraint Satisfaction Problems constraint propagation Given constraint network problem determining solution called Constraint Satisfaction Problem CSP NPcomplete This problem solved backtracking search techniques 42 associated constraint propagation 311 aiming detecting inconsistencies earlier searching process Constraint propagation generally based algorithms ensuring generalized arc consistency bound consistency 31145 deﬁne 45 The constraint C said generalized arc consistent x X C value α Dx exists instantiation v VC vx α Now let C constraint domain Dx variable x X C interval domain Dx cid2x xcid3 Then C said bound consistent cid20 VC x X C exists instantiation v VC vx x instantiation v cid20x x v 33 The LeximinOptCSPproblem The CSP adapted optimization problem following standard way Given constraint network X D C objective variable o X ﬁnd value M Do M maxvo v solX D C We write maxX D C o subset solutions maximize objective variable o Expressing collective decision making problem numerical collective utility criterion CSP objec tive variable straightforward consider collective utility objective variable o link variables representing individual utilities u1 u2 constraint o gu1 u2 g explained Sec tion 2 chosen aggregation function However directly encode problem computing leximinoptimal solution kind multicriteria optimization problem We introduce formally LeximinOptCSP problem fol lows Deﬁnition 4 LeximinOptCSP Input constraint network X D C vector variables u element ui X called objective Output Inconsistent solX D C Otherwise solution cid3v called leximinoptimal solution v vector solX D C v u cid12leximin cid3v u In following set leximinoptimal solutions constraint network X D C objective vector written leximinOptX D C u u We section generic constraint programming algorithms solve problem The idea use searchtree exploration algorithms constraint propagation mechanisms provided CP framework tools computing eﬃciently leximinoptimal solution constraint network 4 Constraint programming algorithms leximin optimization 41 Overview existing works contribution article Finding leximinoptimal solution algorithmically easy input constraint network solu tions leximinoptimal solution minoptimal compute minoptimal solutions problem solved CSP single objective variable compare ﬁnd leximinoptimal It solution suggested 13 page 162 This naive approach good results class problems completely ignored suggested 34 However instances huge number minoptimal solutions need cleverer approach tractable The algorithmic aspects linked computation leximinoptimal solution treated works coming ﬁelds Operational researchers interested leximinoptimal solutions context 348 S Bouveret M Lemaître Artiﬁcial Intelligence 173 2009 343364 multicriteria optimization 13 example context equitable resource allocation problems 27 lo cation problems 34 matrix games 37 The leximin preorder appealing criterion dealing fuzzy CSP algorithmics naturally studied community 12 However algorithms presented works restricted easy case continuous problems linear convex objective func tions rapidly unreasonable cases later section An exception work 34 citing 29 brieﬂy presents eﬃcient algorithm computing leximinoptimal solution discrete case Section 47 revisits work constraint programming setting In section ﬁve different algorithms solving LeximinOptCSP computing leximin optimal solutions constraint networks Algorithm 1 leximinbased branchandbound Section 43 new branchandbound algorithm adapted lex imin preorder The main contribution use lower bound ﬁltering purposes constraint introduced 15 different context Algorithm 2 branching saturated subsets Section 44 adaptation constraint programming settings known algorithm 12 Algorithm 3 based Sort constraint Section 45 new algorithm simple intuitive based Sort constraint Algorithm 4 based AtLeast metaconstraint Section 46 new algorithm It constitutes main techni cal contribution article It contains new speciﬁc way propagate metaconstraint AtLeast Algorithm 5 maxmin transformations Section 47 said revisiting previous work 29 However presentation algorithm points interesting connection comparison networks Note algorithms ﬁrst multistep optimization algorithms based iterative optimiza tions step maximize value element sorted version objective vector During presentation algorithms use following example illustrate algorithms work Example 1 Let X D C constraint network let u1 u2 u3 X 3 objective vector We suppose set solutions constraint network leads following set admissible values objective vector 1 1 0 5 5 3 7 3 5 1 2 1 9 5 2 3 4 3 5 3 6 10 3 4 Notice instance 5 different minoptimal solutions 5 5 3 7 3 5 3 4 3 5 3 6 10 3 4 leximinoptimal solution 7 3 5 One notice leximinoptimal solution different sumoptimal solution 10 3 4 corresponding classical utilitarian point view All algorithms presented use functions solve maximize concern solving techniques constraints satisfaction problems respectively return solution v solX D C Inconsistent solX D C optimal solution cid3v maxX D C o Inconsistent solX D C 42 Diﬃculties leximin represented collective utility function Before entering description algorithms let ﬁrst explain straightforward approach consists standard optimization collective utility function representing leximin preorder effective As explained Section 2 leximin preorder represented collective utility function number possible values objective vector ﬁnite assumption In case ﬁnding leximinoptimal solution comes simple optimization problem adequate collective utility function We discuss prac tical relevance encoding leximin preorder collective utility function CP optimization framework introducing objective variable uc stand collective utility linked objective vector u constraint representing collective utility function The ﬁrst matter size domain uc combinatorial nature set admissible solutions If suppose Dui identical6 size m prove number equivalent classes leximin preorder corresponding minimal size Duc cid4 cid5 m n 1 n m n 1 m 1 n This actually number combinations repetitions n objects taken set cardinality m example 21 Exercise 12660 It equivalent mn m This problem m grows diﬃcult CP systems handle huge domains eﬃciently 6 This reasonable assumption leximin preorder meaningful elements objective vector expressed common scale S Bouveret M Lemaître Artiﬁcial Intelligence 173 2009 343364 349 u The second issue way specify collective utility function constraint uc cid2 ui aggregation functions introduced Section 22 In general case constraint uc n i1 n q easy propagate dissuade use way computing leximin constraint uc optimal solution However particular cases agents utilities approach eﬃcient For example consider case multiagent resource allocation problem object agent object j given agent producing utility ui w j In case directly deﬁne objective variables ui w object j given agent w q j precomputed cid2 n i1 ui q j Example 1a In example given end Section 41 collective utility function deﬁned uc u1 u2 u3 cid15 u1 19 u2 19 u3 19 suitable representing leximin preorder This needs explanations The choice q 9 comes fact lowest integer computed numerically uc represents leximin preorder set vectors 3 elements taking values 0 10 Replacing ui ui 1 prevents domain deﬁnition function uc deﬁned ui 0 The values admissible solutions 6 uc1 2 1 approximately following uc1 1 0 100 uc5 5 3 401 10 6 uc10 3 4 396 10 433 10 3 uc9 5 2 509 10 6 One check leximinoptimal vector 7 3 5 greatest value 6 uc5 3 6 394 10 5 uc3 4 3 814 10 6 uc7 3 5 392 10 Of course problem propagating constraint specifying collective utility solved aforementioned problem cardinality domain collective utility remains In concrete terms constraint programming experiments showed encoding leximin preorder eﬃcient CP frame work 43 Algorithm 1 leximinbased branchandbound A natural approach algorithmics leximin adapt branchandbound algorithm standard way optimizing CP leximinpreorder Informally speaking works follows Algorithm 1 computes ﬁrst solution tries improve specifying solution strictly better sense leximin preorder current constraint network inconsistent It works looking solutions like naive approach evoked Section 41 instead comparing end search process prunes branches lead better solution best far This approach based following constraint Deﬁnition 5 Constraint Leximin Let set λ leximin v x variables belonging x x vector variables x The constraint Leximin λ vector integers v instantiation x satisﬁed v λ x holds Although constraint exist literature works 15 20 introduce algorithm enforcing generalized arc consistency similar constraint Multiset Ordering constraint context multisets equivalent leximax7 constraint vectors variables At price straightforward adaptations algorithm introduced work enforce constraint Leximin However Multiset Ordering constraint close constraint Leximin best knowledge context computing leximinoptimal leximaxoptimal solution That consider Algorithm 1 new context 7 The leximax based decreasing reordering values instead increasing leximin 350 S Bouveret M Lemaître Artiﬁcial Intelligence 173 2009 343364 Proposition 1 If function solve correct halts Algorithm 1 halts solves LeximinOptCSP The proof straightforward omit 44 Algorithm 2 branching saturated subsets Our algorithm ﬁrst multistep algorithm based recursive solving successive minoptimal subproblems This algorithm introduced context fuzzy CSP 12 brieﬂy suggested 13 page 145 The idea ﬁnd possible sets worst objective variables ﬁx explicitly value deﬁning called strong αcuts context fuzzy CSP By worst refer saturated subsets objective variables Deﬁnition 6 Saturated subset Let X D C constraint network minoptimal value variables u vector objective variables Let cid3m u cid3m maxvsolX DCminivui A saturated subset objective variables subset Ssat u v solX D C x Ssat vx cid3m y u Ssat vy cid3m In Example 1 saturated subsets u2 u3 u1 u3 Among ones cardinalityminimal ones u2 u3 Clearly saturated subsets lead leximinoptimal solution cardinalityminimal ones The idea algorithms introduced 12 computing leximinoptimal solutions context fuzzy CSP based computation cardinalityminimal saturated subsets objective variables The algorithms informally work follows Firstly minoptimal value cid3m cardinalityminimal saturated subsets objective variables computed Then subset Ssat variable Ssat removed objective vector value ﬁxed cid3m new objective vector variable remains In general case step cardinalityminimal saturated subsets variables The algorithm seen branching procedure chooses node saturated subset branches Algo rithm 2 translation CP framework DepthFirstSearch algorithm proposed 12 It based function explore recursively called explore search tree node computes minoptimal value corresponds function findMinOptimal developed makes maximize computes cardinalityminimal saturated subsets corresponds function findSaturatedSubsets makes calls solve branches Before returning algorithm calls function leximinOptimal selects leximinoptimal solution simple leximin comparisons branches search tree lead suboptimal solutions S Bouveret M Lemaître Artiﬁcial Intelligence 173 2009 343364 351 Fig 1 The search tree developed Algorithm 2 Example 1 Example 1b The search tree developed Algorithm 2 Example 1 shown Fig 1 On left ﬁgure saturated subsets objective variables right remaining solutions node search tree shown The set sol returned explore Algorithm 2 5 3 6 7 3 5 5 5 3 The biggest problem algorithm ﬁnd saturated subsets general case ones branch However special known cases step saturated subset included cardinalityminimal saturated subset In words findMinimal SaturatedSubsets returns saturated subset In cases previous algorithm produce branching saturated subsets suﬃces choose step cardinalityminimal saturated subset This occurs example continuous linear problems set alternatives convex 13273437 explains success algorithm performs context 45 Algorithm 3 based Sort constraint However context discrete problems like leximinCSP cardinalityminimal saturated sub sets step ﬁnding expensive renders kind algorithms unusable practice A solution overcome diﬃculty introduce new variables replace objective ones way 1 preserves leximinoptimal set solutions 2 guarantees uniqueness cardinalityminimal saturated subset One way introduce sorted version objective vector The leximinoptimal solutions relatively sorted objective vector clearly leximinoptimal solutions relatively nonsorted objective vector Moreover saturated subsets ﬁrst elements sorted objective vector leximinoptimal solutions computed successively maximizing ﬁrst elements sorted vector y objective vector u naturally CP framework intro Introducing entire sorted version ducing constraint Sort u y deﬁned follows Deﬁnition 7 Constraint Sort Let The constraint Sort increasing order x x x cid20 holds cid20 x x x vectors variables length v instantiation cid20 satisﬁed v v x cid20 sorted version v x This constraint particularly studied works introduce ﬁltering algorithm enforcing x The authors bound consistency The ﬁrst algorithm comes 5 runs O n log n n size 352 S Bouveret M Lemaître Artiﬁcial Intelligence 173 2009 343364 30 designed simpler algorithm runs O n plus time required sort interval endpoints asymptotically faster O n log n Our new algorithm Algorithm 3 intuitively works follows having introduced sorted version y ob u successively maximizes elements vector provided leximinoptimal solution jective vector solution maximizes y1 given maximal value maximizes y2 yn x Example 1c Let example At beginning algorithm 3 new variables y1 y2 y3 intro duced stand sorted version objective vector The admissible instantiations y following ones 1 1 0 0 1 1 5 5 3 3 5 5 7 3 5 3 5 7 1 2 1 1 1 2 9 5 2 2 5 9 3 4 3 3 3 4 5 3 6 3 5 6 10 3 4 3 4 10 u During ﬁrst step y1 maximized 3 maximal value ﬁxed optimal value 3 The remain ing admissible instantiations 5 5 3 3 5 5 7 3 5 3 5 7 3 4 3 3 3 4 5 3 6 3 5 6 10 3 4 3 4 10 During second step y2 maximized 5 maximal value ﬁxed optimal value 5 The remaining admissible instantiations 5 5 3 3 5 5 7 3 5 3 5 7 5 3 6 3 5 6 During step y3 maximized 7 maximal value The unique leximinoptimal solution 7 3 5 3 5 7 Proposition 2 If functions maximize solve correct halt Algorithm 3 halts solves Lex iminOptCSP Proof If solX D C solve correct Algorithm 3 obviously returns Inconsistent We suppose following solX D C cid7 use following notations Si Scid20 sets solutions X cid20 Dcid20 Ccid20 respectively beginning end iteration We obviously Si1 Scid20 cid21 n 1cid3 proves Si cid7 maximize line 6 return Inconsistent Si1 cid7 Thus cid3vn welldeﬁned obviously cid3vnX solution X D C We note cid3v cid3vn instantiation computed maximize Algorithm 3 Suppose instantiation u Then u Following Deﬁnition 3 yi1 Due line 7 cid3vyi1 cid3vnyi1 i1yi1 strictly greater cid3vi1yi1 v solX D C cid3v constraint Sort cid3v y v cid20 n 1cid3 j cid21 icid3 cid3vyj v cid3vi1yi1 Thus v contradicts hypothesis maximize cid2 u leximin v y respective sorted version cid3v solution maxX cid20 Dcid20 Ccid20 yi1 objective value v extension v instantiates yi v yj cid3vyi1 v u We deﬁne v u v 46 Algorithm 4 based AtLeast metaconstraint cid2 x number α Before presenting new algorithm introduce following notation given vector numbers iα xi cardinality set α xi This notation inspired constraint modeling language OPL 43 α xi 1 inequality satisﬁed 0 The previous algorithm introduced explicitly sorted version objective vector required propagations performed elements However possible deﬁne ith element sorted objective vector explicitly introducing entire vector The following proposition gives trick Proposition 3 Let cid6 x max x vector numbers size n Then cid7 cid7 cid7 cid9 α xi n 1 cid8 α S Bouveret M Lemaître Artiﬁcial Intelligence 173 2009 343364 353 In words ith minimum vector numbers size n maximal number α n 1 elements vector greater equal α This basic proposition present explicitly works involving sorting It explicitly 49 context jobshop problem implicitly 5 30 propagating constraint Sort works based Our Algorithm 4 new usage proposition allows introduce element sorted vector lazily contrary propagation algorithms dedicated constraint Sort The structure Algorithm 4 similar Algorithm 3 Informally works follows ﬁrst computes maximal value cid3y1 y1 solution v cid2 cid3y1 vui n words cid2 ﬁxes y1 cid3y1 computes maximal value cid3y2 y2 solution v cid3y2 vui having ﬁxed yn1 cid3yn1 computing maximal value cid3yn yn solution v cid3y1 vui n 1 cid2 cid3yn vui 1 To enforce constraint ui use metaconstraint AtLeast derived cardinality combinator introduced 44 Deﬁnition 8 Metaconstraint AtLeast Let cid5 set p constraints k cid21 pcid3 integer The metaconstraint AtLeastcid5 k holds union scopes constraints cid5 It satisﬁed instantiation v k constraints cid5 satisﬁed v This Algorithm 4 illustrated example Example 1d During ﬁrst step variable y1 introduced objective variables value higher u y1 1 1 0 0 5 5 3 cid20 3cid3 7 3 5 cid20 3cid3 1 2 1 cid20 1cid3 y1 It gives following solutions 9 5 2 cid20 2cid3 3 4 3 cid20 3cid3 5 3 6 cid20 3cid3 10 3 4 cid20 3cid3 y1 ﬁxed maximal value 3 written bold restricts set admissible instantiations following ones 5 5 3 3 7 3 5 3 3 4 3 3 5 3 6 3 10 3 4 3 During second step variable y2 introduced objective variables value u y2 following ones 5 5 3 cid20 5cid3 7 3 5 cid20 5cid3 higher y2 The solutions 3 4 3 cid20 4cid3 5 3 6 cid20 5cid3 10 3 4 cid20 4cid3 y2 ﬁxed maximal value 5 written bold restricts set admissible instantiations 5 5 3 5 7 3 5 5 5 3 6 5 During step variable y3 introduced objective variables value u y3 5 5 3 cid20 5cid3 7 3 5 cid20 7cid3 5 3 6 cid20 6cid3 The higher y3 It gives following solutions maximal value y3 7 written bold leads unique leximinoptimal solution 7 3 5 Proposition 4 If functions maximize solve correct halt Algorithm 4 halts solves Lex iminOptCSP cid20 Ci We In following proofs write soli sol cid20 iX j sets solutions projected X j j We notice sol0 write soliX j sol cid20 solX D C sol soli line 8 restricts domain yi respectively referring solXi Di Ci solXi Dcid20 354 S Bouveret M Lemaître Artiﬁcial Intelligence 173 2009 343364 Lemma 1 If sol0 cid7 cid3vn welldeﬁned equal Inconsistent cid20 cid20 cid7 let vi sol Proof Let cid21 ncid3 suppose sol i1 Then extending vi instantiating yi min juj leads i1 solution Xi Di Ci constraint added satisﬁed instantiation Therefore cid20 cid20 soli cid7 maximize correct cid3vi cid7 Inconsistent cid3vi sol So sol cid7 It proves Lemma 1 induction cid2 Lemma 2 If sol0 cid7 cid3vnXi soli cid20 ncid3 cid20 soli soli1Xi Proof We sol cid20 More generally sol iX j cid20 soli1Xi sol soli cid2 soliX j soli1X j cid20 sol Xi Dcid20 Ci Xi1 Di1 Ci1 add constraint cid20 iX j soon j Hence cid3vnXi solnXi cid20 nXi sol sol Lemma 3 If sol0 cid7 cid3vn y equal cid3vn u Proof For cid21 ncid3 cid3vnXi satisﬁes cardinality constraint iteration solution soli By deﬁnition function maximize cid3viyi cid3vn solution soli Lemma 2 By Proposition 3 cid3vnXi Since cid3viyi cid3vnyi cid3vnyi cid3vn Since cid3vn solution soln n 1 numbers vector cid3vn u greater equal cid3vnyi At u greater equal cid3vnyi These elements include yi cid3vn u u n 1 greatest numbers cid3vn leads cid3vnyi cid3vn cid3vn u proving lemma cid2 u u We things prove Proposition 4 Proof Proposition 4 If solX D C solve correct Algorithm 4 obviously returns Inconsistent Other wise following Lemma 1 outputs instantiation cid3vnX according Lemma 2 solution X0 D0 C0 X D C Suppose v solX D C cid3vn u indices cid21 ncid3 j v instantiating y1 yi1 cid3vny1 cid3vnyi1 yi v ing previous equalities j v cid3vn u j u leximin v u Then following Deﬁnition 3 substitution j cid3vn v u extension v respectively u j By gather u Following Lemma 3 j cid3vnyj cid3vn u j We v u Let v iyj cid3vnyj v iyi v By Proposition 3 j n j 1 numbers v u iyj proving satisﬁes cardinality constraints iteration Since satisﬁes constraint C maps cid3viyi It contradicts v variable Xi possible values solution soli v deﬁnition maximize proving Proposition 4 cid2 u j u greater equal v iyi v cid3vn u u u v v There easy ways encode AtLeastcid5 k metaconstraint CP framework A straightforward reify subconstraint Ci cid5 introducing new variable ci domain 0 1 introducing new constraints holding ci deﬁned ci 1 Ci satisﬁed ci 0 ﬁnally posting ci k Another possibility speciﬁc use encode AtLeasty x1 y xn k global constraint CardPath 2 Slide 4 CardPathm x1 xn C C constraint arity r holds Cxi xir1 holds m times 1 n r 1 Our speciﬁc use AtLeast encoded CardPath r 1 C deﬁned Cxi y xi additional constraint m k However case constraint set cid5 form y xi bound consistency enforced following specialized algorithm recall notation x α means values α removed Dx cid2 S Bouveret M Lemaître Artiﬁcial Intelligence 173 2009 343364 355 This algorithm runs O n selection kth highest value The algorithm informally works follows If domains variables constraint satisﬁed anymore line 1 procedure returns Inconsistent Otherwise exactly k variables xi greater y variables greater y line 3 In case value y higher kth highest value xi line 4 x O n 8 page 189 We notice algorithm wellsuited eventbased implementation constraint propagation case update xi lines 24 need run update y domain y condition line 1 satisﬁed anymore case update y lines 13 need run update require updating xi run algorithm The procedure beneﬁt storing ordered vector changes taking O n time By access k O 1 It noticed arguments constraints linear metaconstraint AtLeast expressed set linear constraints allowing algorithm implemented linear solver provided constraints linear The usual way 17 page 11 express constraint AtLeast introducing n 01 variables δ1 δn set linear constraints y x1 δ1y y xn δny cid2 n i1 δi n k x x 47 Algorithm 5 maxmin transformations Another way sorted version objective appear speciﬁc constraints associated propagation mechanisms like algorithms use set maxmin transformations This solution introduced 29 cited 34 dealing leximinoptimization problems nonconvex sets alternatives based following idea replacing elements ui uj objective vector variables m M respectively standing minimum maximum elements change leximinoptimal set solutions In following use notation M m MaxMinx y shortcut couple constraints M Maxx y m Minx y u objective vector ui uj distinct variables u We introduce new variables M m deﬁne X cid20 X M m Dcid20 D DM Dm DM Dm u Proposition 5 Let X D C constraint network cid2minui uj maxui ujcid3 Ccid20 C M m MaxMinui uj We deﬁne ui uj replaced M m We leximinOptX D C v vector elements u leximinOptX cid20 Dcid20 Ccid20 v X The proof proposition obvious By iteratively applying transformation rule replace initial m1 u 1 following way introducing new vector intermediate variables u 0 new u objective vector cid10 u 1 n m cid10 1 n1 m u 1 m n cid11 1 n1 1 n2 cid11 cid10 1 1 2 m u 1 cid11 1 u 1 0 u n MaxMin MaxMin MaxMin 1 m 1 equivalent cid10 m cid10 m cid11 1 n u 1 n1 u 0 n1 0 n2 cid11 cid10 m 0 1 2 u 1 cid11 cid12 cid13 1 u 1 1 u Min Max 0 1 u u cid10 0 i1 Min u 0 0 2 u n cid12 0 u u 0 0 i1 u n cid13cid11 cid22 ncid3 Using reformulation minimum objective variables appears naturally new variable u variable clearly cardinalityminimal saturated subset new vector objective variables Algorithm 2 variable u u 2 1 1 u 1 Like 1 1 set maximal value cid3m processing new vector objective variables Interestingly noticed previous authors maxmin transformation interpreted comparator entire sorting process comparison network 8 page 704 Deﬁnition 9 Comparator A comparator device inputs x y outputs x following functions x cid20 minx y A comparator represented follows cid20 maxx y y y cid20 cid20 performs 356 S Bouveret M Lemaître Artiﬁcial Intelligence 173 2009 343364 Fig 2 The comparison network sorting algorithm implicitly Algorithm 5 n 5 In algorithm proposed Algorithm 5 implicit use sorting algorithm implemented comparison network successive reformulations objective variables correspond use comparators Finally entire algorithm implicitly uses sorting algorithm presented Fig 2 Each comparator Fig 2 implemented constraints Algorithm 5 dot corresponds different variable Notice variables constraints introduced layer layer step need minimal variable u ﬁgure algorithm The layers introduced step function minLayer As said need restrict set admissible solutions ones minimum objective variable maximal introducing new layer This role lines 8 9 Algorithm 5 Example 1e Here illustration Algorithm 5 example The table shows set solutions initial objective variables new ones At ﬁrst step variables maximized Fixing variable maximal value restricts set solutions explains cells table At second step u 1 introduced u 1 1 S Bouveret M Lemaître Artiﬁcial Intelligence 173 2009 343364 357 2 u 2 introduced u variables 2 unique leximinoptimal solution 7 3 5 maximized And step u 3 3 introduced maximized leaving u1 1 5 7 1 9 3 5 10 u2 u3 1 u 1 1 u 2 1 u 3 2 u 2 2 u 3 3 u 3 1 5 3 2 5 4 3 3 0 3 5 1 2 3 6 4 0 3 3 1 2 3 3 3 1 5 7 1 9 3 5 10 1 5 5 2 5 4 6 4 5 5 3 5 4 5 7 6 5 7 4 6 10 48 Heuristics All constraint programming algorithms introduced dealing LeximinOptCSP beneﬁt speciﬁc heuristics exploits particular semantics leximin preorder guide search process rapidly good solutions During search leximinoptimal solution lowest element objective vector crucial increasing ﬁrst immediately gives better solution It gives idea general method design eﬃcient variable value choice heuristics dedicated leximin optimization node search tree variable instantiate value assign chosen increases possible value current lowest objective variable In collective decision making resource allocation problems objective vector utility proﬁle depends set 01 decision variables If case variable instantiate decision variable increases utility satisﬁed agent criterion Of course considerations clue build eﬃcient heuristics dealing LeximinOptCSP adapted kind problem stake As section applied idea design particular heuristics dedicated kinds instances test algorithms These heuristics compared classical ones results presented Section 48 5 Applications results We implemented algorithms described article tested different kinds problems 1 simpliﬁed linear model realworld application concerning sharing constellation Earth observation satellites 2 fair combinatorial auctions 3 generic model allocation problem indivisible goods agents complex preferences expressed weighted propositional logic The experimental settings following implementations developed Java 160 constraint programming tool Choco 23 The tests conducted 21 GHz biprocessor PC 38 GB memory running GnuLinux 2621 tests concerning comparison heuristics 16 GHz SUNW UltraSPARCIIIi Sun station 1 GB memory running Solaris 10 tests 51 Allocation constellation Earth observation satellites Description This ﬁrst application concerns common exploitation constellation agile Earth observation satellites described 25 From application extracted simpliﬁed multiagent resource allocation problem In problem set objects O standing resource allocated set agents N So approximate real physical constraints limited onboard memory limited agility satellite introduced volume constraints different subsets variables attaching constraint volume object set maximal admissible volume subset There consumption constraints restrict objects allocated agent The individual utility functions speciﬁed set weights w io pair agent object given allocation objects individual utility agent sum weights w io objects o receives The weights generated uniformly approximate effect priority levels The customizable generator random instances developed testing algorithms available online8 Experiments We conducted sequences experiments kind problems concerning respectively 4 10 20 agents variable number objects For number agents number objects tested algorithms 20 8 httpwwwcertfrdcsdTHESESsbouveretbenchmark 358 S Bouveret M Lemaître Artiﬁcial Intelligence 173 2009 343364 Fig 3 CPU times number instances solved 10 minutes algorithm run instances problem Earth observation satellites simpliﬁed different instances time limit 10 minutes When number agents low 4 agents results tests shown article bring light signiﬁcant difference algorithms probably kind problems near monoagent case difference approaches However case anymore number agents increases One example Fig 3a algorithm based exhaustive comparison leximinoptimal solutions eﬃcient ones One notice Algorithm 5 based maxmin transformations eﬃcient The best approaches kind instances based constraint Leximin Algorithm 1 saturated subsets Algorithm 2 Finally notice solving time approach increases number objects tends 0 This surprising number objects decreases impossible satisfy agents creating lot equal zero utilities leximinoptimal proﬁle leading search saturated subsets harder Things clearer Fig 3b 20 agents algorithm based saturated subsets completely ineﬃcient instances objects reasonable solving time number objects higher Here best algorithms based constraint Leximin Algorithm 1 metaconstraint AtLeast Algorithm 4 constraint Sort Algorithm 3 One ﬁnally notice running times algorithms close instances explained fact compute sorted vector objective variables propagation algorithm constraint Sort uses implicitly alternative deﬁnition sorting Algorithm 4 Heuristics We implemented experiments dedicated variable choice heuristics based principles given Section 48 choose variable instantiate gives currently satisﬁed agent object rates We compared heuristics classical ones mindomain variable instantiate S Bouveret M Lemaître Artiﬁcial Intelligence 173 2009 343364 359 Fig 4 CPU times number instances solved 10 minutes algorithms different heuristics instances problem Earth observation satellites simpliﬁed 10 agents p objects having smallest domain domdeg variable instantiate having smallest ration domain sizedegree The results shown Fig 4 We ﬁgure leximinspeciﬁc heuristics far eﬃcient heuristics algorithms tested 1 2 3 4 For sets instances 75 objects Algorithm 1 2 decrease CPU time reach order magnitude 52 Fair combinatorial auctions Description Combinatorial auctions 940auctions bidders place unrestricted bids bundles goods subject increasing study recent years Their central problem Winner Determination Problem WDP extensively studied It deﬁnitely corresponds utilitarian point view maximizing revenue auctioneer sum selected bids receives Even fairness relevant issue combinatorial auctions WDP inspired fair resource allocation problem indivisible goods agents express preferences bundles items Deﬁnition 10 Fair CA instance Given set agents N set objects O bid b triple sb pb ab O N N bundle objects price agent Given set nonintersecting bids W agent utility 2 W uiW pb b W ab A fair combinatorial auctions instance deﬁned follows Input A set n agents N set objects O set bids B Output A set nonintersecting bids W B set nonintersecting bids W cid20 B cid2 u1W unW leximin u1W cid20 unW cid20 360 S Bouveret M Lemaître Artiﬁcial Intelligence 173 2009 343364 Fig 5 CPU times number instances solved 10 minutes algorithm run instances problem fair combinatorial auctions n agents 100 objects Experiments We tested different approaches computing leximinoptimal solution constraint network implementation problem The test instances generated CATS 26 aims making realistic economically motivated bids combinatorial auctions simulating kind relations substitutabilities complementarities goods The results shown Fig 5 concern variable number agents 100 objects number bids approximately equal 10 times number agents For number agents tested algorithms 20 different instances kind arbitrary time limit 10 minutes We observe ﬁgure eﬃcient algorithm case like previously based exhaustive comparison solutions It followed approach based saturated subsets completely ineﬃcient number agents increases ratio objectsagents decreases reasons The best algorithms based metaconstraint AtLeast constraint Sort However notice algorithm based constraint Leximin eﬃcient kind instances instances previous problem We compared solving times algorithms time required compute sumoptimal solution corresponding solution classical Winner Determination Problem constraint programming One huge difference CPU time required compute sumoptimal solution CPU time required compute leximinoptimal solution9 Heuristics As previously implemented experiments dedicated variable choice heuristics based prin ciples given Section 48 bid allocate higher price currently satisﬁed agent All results shown subsection use speciﬁc heuristics 53 Resource allocation problem logical preferences Description The kind problems test algorithms concerns allocation set indivisible goods set agents The agents complex preferences set objectsthat preferences involve complementarity substitutability relationships objects Moreover set admissibility constraints restricts set admissible allocations A formal model representing kind problems introduced 6 In model instance resource allocation problem deﬁned follows 9 At use constraint programming solve WDP Of course ad hoc solvers dedicated problem far eﬃcient S Bouveret M Lemaître Artiﬁcial Intelligence 173 2009 343364 361 Fig 6 CPU times number instances solved 10 minutes algorithm run instances resource allocation problem logical preferences n agents 20 objects Deﬁnition 11 Combinatorial resource allocation problem Input ﬁnite set agents N 1 n ﬁnite set objects O set admissibility constraints C propositional formulae Lalloc O propositional language variables alloco o O N meaning object o allocated agent set cid7i weighted formulae agent weight w propositional formula LO propositional language variables o O Given set objects πi allocated agent deﬁne individual utility uiπi sum weights formulae cid7i satisﬁed πi Output An allocation π πi O admissibility constraints satisﬁed allocation 1 unπ cid20 u1π cid20 n π cid20 satisfying admissibility constraints u1π1 unπn leximin Experiments We implemented customizable random generator description detailed dedicated model resource allocation problem The implementation model generator complete description available online10 We tested algorithms set instances created customizable generator The results shown Fig 6 The time limit 10 minutes number tested instances 10 number agents number objects These instances imply great number logical constraints explains algorithms ineﬃcient solve One best approaches based metaconstraint AtLeast constraint Sort case algorithm based constraint Leximin Heuristics It harder design eﬃcient variable choice heuristics particular problem attribution object agent direct complex semantics propositional logic The heuristics experiments following choose object allocate appears formula highest weight currently satisﬁed agent Although difference heuristics classical ones blatant previous problems gives better results It interesting investigate potential gain designing complex heuristics particular application 10 httpwwwcertfrdcsdTHESESsbouveretbenchmark2007 362 S Bouveret M Lemaître Artiﬁcial Intelligence 173 2009 343364 54 Conclusion discussion The aim making experiments ﬁnd algorithms interesting use constraint programming framework The experimental results clearly eﬃcient algorithms average Algo rithm 4 based AtLeast metaconstraint Algorithm 3 based Sort constraint Algorithm 1 leximinbased branchandbound slightly eﬃcient ones instances fair combinatorial auctions resource allocation logical preferences slightly eﬃcient instances problem Earth observation satellites simpliﬁed Unsurprisingly approach based exhaustive comparison solutions avoided small instances worth complex constraint propagation mechanisms The Algorithms 4 based AtLeast metaconstraint 3 based Sort constraint similar results kinds instances On hand surprising noticed Section 46 algorithms based principle sorting objective variables constraint Sort indirectly based trick Algorithm 4 On hand expected introducing sorted variables time Algorithm 4 instead introducing time Algorithm 3 difference The experiments case Therefore use algorithms indifferently The choice driven requested implementation effort Algorithm 3 based Sort constraint easy implement constraint Sort provided CP Algorithm 4 based AtLeast metaconstraint easy implement CP provides cardinality metaconstraints choose encode constraints set 01 variables linear constraints Algorithm 1 leximinbased branchandbound eﬃcient instances problem Earth observation satellites simpliﬁed little bit instances unknown reasons In case worth try algorithm better results ones The fact Algorithm 1 gives better results cases gives idea suggested anonymous reviewer previous article 7 mix approach Algorithm 4 based AtLeast metaconstraint approach Algorithm 1 constraint Leximin constraint AtLeast provide ﬁltering We expected approach eﬃcient best algorithms instance However results experiments given mixing approaches eﬃcient Our intuition gain double ﬁltering AtLeast Leximin worth cost running propagation algorithms node search tree Concerning algorithm based saturated subsets Algorithm 2 reasonable eﬃcient instances equal components leximinoptimal proﬁle However expected explodes number saturated subsets increases example case number agents number objects similar instances problem Earth observation satellites simpliﬁed Fig 3b small numbers objects Thus algorithm sure little chance equal components leximinoptimal objective vector One notice surprising algorithm comes fuzzy CSP community context constraint satisfaction levels continuous unlikely constraints satisfaction level Lastly Algorithm 5 maxmin transformations appears ineﬃcient The probable reason number additional variables constraints introduces sorting purposes expensive eﬃcient constraint propagation algorithms associated maxmin constraints simple To conclude relative performance algorithms introduced surprising CP frame work eﬃcient algorithms ones use constraint propagation algorithms global constraints The different approaches AtLeast Sort hand Leximin hand slight differences terms performance unclear better use given particular instance Finally Fig 4 speciﬁc heuristics based considerations described Section 48 gives good results instances problem Earth observation satellites simpliﬁed compared classical heuristics eﬃcient kinds problems results shown In cases gap CPUtime implied use heuristics worth order magnitude This interesting result experiments sort heuristics easy implement speciﬁc kind problem leads big improvement running time compared classical heuristics 6 Conclusion future work Fairness base realworld applications implying human agents seeking compromise conﬂicting interests We borrowed microeconomics ﬁeld idea leximin preorder wellsuited address fairness requirements reconcile crucial notion Paretooptimality More generally preorder adapted kind multicriteria optimization problems ﬁnd good compromises set criteria objective functions ensuring Paretooptimality Finding leximinoptimal solution trivial algorithmic problem In article focused search solutions constraint network We proposed set constraint programming algorithms adapted ﬁelds Operational Research new address problem The reasons invoked justify development S Bouveret M Lemaître Artiﬁcial Intelligence 173 2009 343364 363 algorithms dedicated particular framework provides effective ﬂexible eﬃcient tools modeling solving wide range combinatorial problems Our approaches easily integrated existing stateoftheart CP systems solvers heavily depend performance algorithms provided solvers We tested algorithms different kinds randomly generated problems ﬁrst linear problem inspired realworld application concerning sharing constellation Earth observing satellites second adaptation combinatorial auctions framework leximin preorder generic resource allocation problem concerning indivisible goods logical constraints preferences Our experiments best approaches based metaconstraint AtLeast constraint Sort followed algorithm based constraint Leximin This article contribution problem having wide range applications It raises lot interesting questions problems First CP approaches remain explored For example anonymous reviewer suggested think global cardinality constraint work 1838 describes fast bound consistency algorithms global cardinality constraint introduce compute occurrence vector corresponding objective vector This approach cited 20 15 decomposing Multiset Ordering constraint Having constraint computing leximinoptimal solution comes compute solution occurrence vector lexicographically optimal easily multistep algorithm It interesting compare approach ones tested article explicit introduction occurrence vector probably expensive instances domains objective variables large case experiments performed One notice limitation applies propagation algorithm introduced works 15 20 Multiset Ordering constraint However works propose adaptation algorithm overcome limitation Our propagation algorithm constraint Leximin actually based adaptation allows handle large domains A natural extension work concerns development incomplete algorithms dedicated computation leximinoptimal solutions One think example adapting local search techniques particular problem However raises particular interesting diﬃculties evaluate quality solution expected distance solution leximinoptimal Another natural extension work giving leximinoptimality considered extreme way aggregate individual utilities focusing softer modeling fairness compromises objective variables An interesting direction use Ordered Weighted Averages 46 model fairness It appears algorithms introduced adapted compute OWAoptimal solution Acknowledgements Authors like thank anonymous reviewers comments suggestions This work partly supported project ANR05BLAN0384 Preference Handling Aggregation Combinatorial Domains funded Agence Nationale la Recherche References 1 M Ball GL Donohue K Hoffman Auctions safe eﬃcient equitable allocation airspace resources P Cramton Y Shoham R Steinberg Eds Combinatorial Auctions MIT Press 2006 pp 507538 Chapter 22 2 N Beldiceanu M Carlsson Revisiting cardinality operator introducing cardinalitypath constraint family Proceedings 17th Interna tional Conference Logic Programming ICLP01 Paphos Cyprus 2001 3 C Bessière Constraint propagation F Rossi P van Beck T Walsh Eds Handbook Constraint Programming Foundations Artiﬁcial Intelligence Elsevier 2006 pp 2983 Chapter 3 4 C Bessière E Hebrard B Hnich Z Kiziltan T Walsh SLIDE A useful special case CARDPATH Constraint Proceedings 18th European Conference Artiﬁcial Intelligence ECAI08 Patras Greece 2008 5 N BleuzenGuernalec A Colmerauer Narrowing block sortings quadratic time G Smolka Ed Proceedings 3rd International Confer ence Principles Practice Constraint Programming CP97 Schloss Hagenberg Austria Springer 1997 6 S Bouveret H Fargier J Lang M Lemaître Allocation indivisible goods general model complexity results F Dignum V Dignum S Koenig S Kraus MP Singh M Wooldridge Eds Proceedings 4th International Joint Conference Autonomous Agents Multiagent Systems AAMAS05 Utrecht The Netherlands ACM 2005 7 S Bouveret M Lemaître New constraint programming approaches computation leximinoptimal solutions constraint networks MM Veloso Ed Proceedings 20th International Joint Conference Artiﬁcial Intelligence IJCAI07 Hyderabad India AAAI Press 2007 8 TH Cormen CE Leiserson RL Rivest C Stein Introduction Algorithms second ed MIT Press 2001 9 P Cramton Y Shoham R Steinberg Eds Combinatorial Auctions MIT Press 2006 10 C dAspremont L Gevers Equity informational basis collective choice Review Economic Studies 44 2 1977 199209 11 R Dechter Constraint Processing Morgan Kaufmann 2003 12 D Dubois P Fortemps Computing improved optimal solutions maxmin ﬂexible constraint satisfaction problems European Journal Operational Research 118 1999 95126 13 M Ehrgott Multicriteria Optimization Lecture Notes Economics Mathematical Systems vol 491 Springer 2000 14 H Fargier J Lang T Schiex Selecting preferred solutions fuzzy constraint satisfaction problems Proceedings First European Congress Fuzzy Intelligent Technologies EUFIT93 Aachen 1993 15 AM Frisch B Hnich Z Kiziltan I Miguel T Walsh Filtering algorithms multiset ordering constraint Artiﬁcial Intelligence 173 2 2009 299328 issue 364 S Bouveret M Lemaître Artiﬁcial Intelligence 173 2009 343364 16 T Frühwirth L Michel C Schulte Constraints procedural concurrent languages F Rossi P van Beck T Walsh Eds Handbook Constraint Programming Foundations Artiﬁcial Intelligence Elsevier 2006 pp 453494 Chapter 13 17 RS Garﬁnkel GL Nemhauser Integer Programming Wiley 1972 18 I Katriel S Thiel Fast bound consistency global cardinality constraint F Rossi Ed Proceedings 9th International Conference Principles Practice Constraint Programming CP03 Kinsale County Cork Ireland Springer 2003 19 RL Keeney H Raiffa Decisions Multiple Objectives Preferences Value Tradeoffs John Wiley Sons 1976 20 Z Kiziltan Symmetry breaking ordering constraints PhD thesis Uppsala University 2004 21 DE Knuth The Art Computer Programming vol 1 Fundamental Algorithms AddisonWesley 1968 22 SC Kolm Justice et Équité Cepremap CNRS Paris 1972 English translation Justice Equity MIT Press 1998 23 F Laburthe CHOCO Implementing CP kernel Proceedings TRICS2000 Workshop Techniques Implementing CP Systems Singapore 2000 httpsourceforgenetprojectschoco 24 M Lemaître G Verfaillie N Bataille Exploiting common property resource fairness constraint case study T Dean Ed Proceedings 16th International Joint Conference Artiﬁcial Intelligence IJCAI99 Stockholm Sweden Morgan Kaufmann 1999 25 M Lemaître G Verfaillie F Jouhaud JM Lachiver N Bataille Selecting scheduling observations agile satellites Aerospace Science Tech nology 6 2002 367381 26 K LeytonBrown M Pearson Y Shoham Towards universal test suite combinatorial auction algorithms Proceedings 2nd ACM Confer ence Electronic Commerce EC00 Minneapolis MN ACM 2000 27 H Luss On equitable resource allocation problems lexicographic minimax approach Operations Research 47 3 1999 361378 28 JL Marichal Aggregation operators multicriteria decision aid PhD thesis Faculté des Sciences lUniversité Liège 1999 29 M Maschler JAM Potters SH Tijs The general nucleolus reduced game property International Journal Game Theory 21 1992 85106 30 K Mehlhorn S Thiel Faster algorithms boundconsistency sortedness alldifferent constraint R Dechter Ed Proceedings 6th International Conference Principles Practice Constraint Programming CP00 Singapore Springer 2000 31 U Montanari Network constraints Fundamental properties applications picture processing Inf Sci 7 1974 95132 32 H Moulin Axioms Cooperative Decision Making Cambridge University Press 1988 33 H Moulin Fair Division Collective Welfare MIT Press 2003 34 W Ogryczak On lexicographic minimax approach location problems European Journal Operational Research 100 1997 566585 35 W Ogryczak T Sliwi nski On solving linear programs ordered weighted averaging objective European Journal Operational Research 148 2003 8091 36 G Pesant JC Régin sPREAd A balancing constraint based statistics P van Beek Ed Proceedings 11th International Conference Principles Practice Constraint Programming CP04 Sitges Spain Springer 2005 37 JAM Potters SH Tijs The nucleolus matrix game nucleoli Mathematics Operations Research 17 1992 164174 38 CG Quimper A Golynski A LópezOrtiz P van Beek An eﬃcient bounds consistency algorithm global cardinality constraint Constraints 10 2 2005 115135 39 F Rossi P van Beck T Walsh Eds Handbook Constraint Programming Foundations Artiﬁcial Intelligence Elsevier 2006 40 TW Sandholm Algorithm optimal winner determination combinatorial auctions Artiﬁcial Intelligence 134 2002 154 41 AK Sen Collective Choice Social Welfare NorthHolland 1970 42 P van Beek Backtracking search algorithms F Rossi P van Beck T Walsh Eds Handbook Constraint Programming Foundations Artiﬁcial Intelligence Elsevier 2006 pp 85134 Chapter 4 43 P Van Hentenryck The OPL Optimization Programming Language The MIT Press 1999 44 P Van Hentenryck H Simonis M Dincbas Constraint satisfaction constraint logic programming Artiﬁcial Intelligence 58 13 1992 113159 45 WJ van Hoeve I Katriel Global Constraints F Rossi P van Beck T Walsh Eds Handbook Constraint Programming Foundations Artiﬁcial Intelligence Elsevier 2006 pp 169208 Chapter 6 46 RR Yager On ordered weighted averaging aggregation operators multicriteria decision making IEEE Transactions Systems Man Cybernet ics 18 1988 183190 47 RR Yager On analytic representation leximin ordering application ﬂexible constraint propagation European Journal Operational Research 102 1 1997 176192 48 HP Young Equity Theory Practice Princeton University Press 1994 49 J Zhou A permutationbased approach solving jobshop problem Constraints 2 2 1997 185213