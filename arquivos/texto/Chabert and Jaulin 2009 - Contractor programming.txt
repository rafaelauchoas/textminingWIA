Artiﬁcial Intelligence 173 2009 10791100 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Contractor programming Gilles Chabert Luc Jaulin b Ecole des Mines Nantes LINA CNRS UMR 6241 4 rue Alfred Kastler 44300 Nantes France b ENSIETA 2 rue Fran cois Verny 29806 Brest Cedex 9 France r t c l e n f o b s t r c t Article history Received 22 February 2008 Received revised form 11 March 2009 Accepted 15 March 2009 Available online 18 March 2009 Keywords Constraint processing Interval methods Solver design Programming languages This paper describes solver programming method called contractor programming copes issues related constraint processing reals First continuous constraints involve inevitable step solver design Existing softwares provide insuﬃcient answer restricting users choose list ﬁxed strategies Our ﬁrst contribution freedom solver design introducing programming concepts conﬁguration parameters previously available Programming consists applying operators intersection composition algorithms called contractors similar propagators Second problems real variables cast search vectors simultaneously satisfying set constraints large variety different outputs demanded set constraints paving boxes inside outside solution set These outputs actually viewed result different contractors working concurrently search space bisection procedure intervening case deadlock Such algorithms strictly speaking solvers easy build thanks new branch prune called paver Thus paper gives way deal harmoniously larger set problems giving ﬁne control solving mechanisms The contractor formalism paver contributions The approach motivated justiﬁed different cases study An implementation framework named Quimper presented 2009 Elsevier BV All rights reserved 1 Introduction Constraint programming simple eﬃcient paradigm handle large class combinatorial problems 401044 In presence realvalued variables constraint propagation algorithms combined interval analysis 162227199 particularly wellsuited included realworld applications 3321 We shall refer interval variant constraint programming interval programming Even interval programming moderate success In opinion reason lack clear uniﬁed formalism describing solvers derived programs built This paper attempt ﬁll gap We propose framework allows build continuous solver lines highlevel syntax More tuning language programming framework proposed 11 Motivation Three reasons justify introduction solver programming framework presence real variables Corresponding author Email addresses gilleschabertemnfr G Chabert lucjaulinensietafr L Jaulin 00043702 matter 2009 Elsevier BV All rights reserved doi101016jartint200903002 1080 G Chabert L Jaulin Artiﬁcial Intelligence 173 2009 10791100 1 Constraint programming declarative paradigm means programmer spend effort modeling conveniently problem This effort involve breaking symmetries introducing global soft constraints All concepts related modeling represent way active ﬁelds research In theory solver black box programmer ignore details Despite need point control solver declarative languages consider instance Prolog cuts allow ruling choices search We overall eﬃciency gets combined result efforts aspects modeling solver control With real variables modeling languages limited1 Constraints usually equations means mathematics facto ultimate modeling language2 The consequence solver control inevitable step improve eﬃciency 2 Continuous solvers twolayered structure interval analysis constraint programming The lower layer includes interval arithmetics interval numerical algorithms interval variant Newton iteration roundoff considerations The upper layer includes branch prune algorithms describing sets reals deﬁned constraints optimizing criterion constraints Since layers correspond different scientiﬁc com munities need interface In concrete words useful constraint programmer ability develop continuous solver digging details interval analysis 3 The possibly main point related output constraint solvers With discrete domains output set solutions subset optimizing criteria But continuous domains large variety different outputs First look subpaving set boxes encompassing solutions precisely existing solvers provide They act root ﬁnders Next case solution set nonnull volume subpavings expected satisfying different property basically contain solution contain solution contains solutions Such solvers act set describers Actually examples Section 2 semantics subpavings completely change problem other3 As root ﬁnder set describer adapted solving problems Of course adhoc solutions exist purpose precisely avoid multiplicity programs single In practice people facing speciﬁc constraint problem requires speciﬁc algorithm reverseengineer code existing solver Often redevelop scratch 12 Contribution We propose formalism algorithm called paver In formalism different interval routines evaluations projections existence tests wrapped object called contractor Section 3 Of course concept contractor novelty Our ﬁrst contribution redeﬁne constraint programming techniques propagation shaving parameter splitting operations contractors yield new contractors Section 4 Syntactically contractor unique atom certain simplicity A solver programed conﬁgured combining different contractors examples given Sections 42 43 51 55 The paver algorithm generic solver It takes list contractors initial box follows classical recursion contractors successively called current box gets contraction In case box bisected contractors called The fact different contractors work concurrently allows solving problems different nature section This second contribution Hence contractor programming consists distinct steps contractor design paver design The refers design possible eﬃcient contractor given set constraint shall discussed Section 4 The refers selection contractors yield desired output regardless eﬃciency This framework supported real named Quimper introduced Section 6 Thinking contractor programming extension constraint programming valid extent contractors help modeling output problem But fundamentally extension constraints basically tell contractors tell Note branching covered paper mind paver customizable Only plain bisection examples variable selected roundrobin heuristic 1 This limitation holds numerical systems involving analytic expressions cover mathematical models physics problems But modeling languages limited real variables discrete ones introduce table constraints piecewise constraints 2 There notable exception geometrical constraints Geometry represents semantic level algebra example intersection spheres introduced global constraints instead equivalent distance equations 1 But cases improvement expected modeling 3 We modeling language dedicated output exists far important distinction discrete problems modeling aspect ubiquitous solvers explanations counterexamples G Chabert L Jaulin Artiﬁcial Intelligence 173 2009 10791100 1081 13 Power contractor programming As programming language power contractor programming class problems solved paradigm require setting computability theory described formally Pavings obtained framework results algorithms recursively contract boxes smaller boxes general deﬁnition involve concept constraint It ﬁt context graphics draw fractals This means pavings generated characterized constraints However wonder problems contractor programming aimed The contractor paradigm aimed building set computation tools reals These tools typically calculate disjunction equidimensional sets sets usually described constraints There restriction form constraints ﬁrstorder logic formulas involving numerical equations inequalities quantiﬁed parameters They handled implicitly associated contractor The main point representation sets way calculated entirely controllable 14 Related works In discrete constraint programming existing tools control mechanisms associated malism In constrainedbased local search COMET 46 offers language allowing deﬁnition moves neighborhoods incremental computation impact automatically In branch prune systems choice points propagation usually controlled The Choco 25 ILOG Solver 20 Gecode 43 libraries allow specify instantiation order variables values It decided split domains instantiate bisect domains Propagation given rise sophisticated concepts The aforementioned libraries allow programmer sociate propagator ﬁltering algorithm constraint In Gecode propagators automatically generated formula It possible Choco control propagators launched thanks events bound reduced variable instantiated This allows effect schedule constraints propagation loop costly propagators ignore events minor importance Events handling implemented propa gators Gecode albeit recent works advisors 29 facilitate task These mechanisms related modeling propagator associated constraint preserving declarativity As far know way build new propagators composing different propagators modeling phase Only programmers good knowledge target library able This difference contractor programming aims building solvers operational constraints In contrast eﬃciency taken precedence ﬂexibility continuous constraint programming Perhaps cause prevailing numerical culture solvers usually compared performance basis As consequence different existing implementations Numerica 47 RealPaver 15 Alias 32 Rsolver 38 GlobSol 26 Baron 41 supply good level openness extensibility These libraries contain solvers global optimization algorithms highlevel interface basically restricting users enter equations set parameters press enter Of course parameters For instance decided Alias resort computation Hessian matrix ask RealPaver global consistency instead solution set But way venture beaten tracks A contribution paper new representation solution spaces nonempty interiors More suitable representations proposed 42 quadtreesoctrees 48 extreme vertices However quadtrees consist discretizing constraints reasoning auxiliary representation This appealing method distant interval programming Results paper unlikely applicable context quadtrees Computing extreme vertices viewed independent operation obtain compact representation set boxes The dissertation 48 contains smart branching heuristics concept active variables preserve align ment small boxes All concepts fully compatible framework orthogonal contractors related branching issues They viewed complementary 15 Notations vocabulary The set intervals denoted IR A Cartesian product intervals called box Intervals boxes surrounded brackets x The symbol stand lower x x denote ndimensional box stated If x box x upper bound xi respectively The width box x largest diameter components The smallest box enclosing set S denoted cid2S A subpaving x set nonoverlapping boxes included x A subpaving considered collection boxes x1 union x1 depending context Hence subpaving viewed discrete subset IRn compact subset Rn 1082 G Chabert L Jaulin Artiﬁcial Intelligence 173 2009 10791100 A paving x collection subpavings K1 KN cid2 cid2 x b 1cid2kcid2N bKk Finally temporarily adopt following deﬁnition Let c constraint reals cx true false A contractor c function C IRn IRn usually given polynomialtime algorithm cid3 b IRn Cb b x bCb cx satisﬁed Note concept contractor generalized formalism Section 3 Thanks interval arithmetics contractors built respect equation f x 0 f Rn Rm Example 1 Consider expx2 x2 logx1 C contractor respect f x 0 f R2 R f x x1 expx2 deﬁne C IR2 IR2 follows Cx x1 151 Contractor versus propagator In spite appearance contractor new propagator A propagator associated constraint destined called propagation loop As contractor necessarily associated constraint propagation Furthermore add continuity condition deﬁnition contractor Section 32 exist propagators Finally term ﬁltering chosen conﬂict everyday meaning ﬁltering areas dealing continuous systems Kalman ﬁltering 16 The ABC interval programming Let end introduction short description interval programming The basic algorithm interval programming root ﬁnder Consider equations f x 0 x variable Rn f mapping Rn Rm A root ﬁnder wraps solutions boxes desired precision leaving aside ﬂoatingpoint considerations branch prune process prune operation performed contractor Here sketch algorithm Note stack depthﬁrst search precision criterion chosen widthx ε Of course existing implementations sophisticated But simpliﬁed description language perspective In ideal case square m n singularity solutions punctual certiﬁca tion demanded In general case n m dimensional surface described This illustrated Fig 1 Consider f Rn Rm x y Rnm We look following set inverse 1 y x x x y y y f x f Note set inversion particular subclass quantiﬁed constraints 1239 The rootfinder algorithm split solution set small boxes depicted Fig 2a In case solution set nonnull ndimensional volume expect solver dissociate boxes contain solutions boundary boxes boxes contain solutions inner boxes Clearly precision required boundary boxes splitting inner box useless counterproductive A appropriate output given Fig 2b Hence enhanced algorithm setdescriber derived rootfinder inserting inner test contractor The design inner tests matter study publications 131814 G Chabert L Jaulin Artiﬁcial Intelligence 173 2009 10791100 1083 Fig 1 An enclosure x 05 25 25 05 f x 0 f x expx1x2 sinx1 x2 cid4 Fig 2 A set inversion problem f x y f x deﬁned Section 21 small boxes enclosing solutions b A adapted output set inversion problem including inner test 2 y 3 6 x 7 7 7 7 The output set inversion problem x2 x2 1 2 Motivating examples The purpose section present ﬁve different problems tractable interval programming rootfinder setdescriber appropriate Once claim algorithm exists problems We claim algorithm exist solves Note rootfinder setdescriber different algorithms formalism 21 A decomposable problem In applications systems suﬃciently sparse decomposed equational geometric techniques 24366 Consider example distance constraints dimensions depicted Fig 3 There 5 points connected 6 distance equations Points A B ﬁxed unknowns Instead directly solving 1084 G Chabert L Jaulin Artiﬁcial Intelligence 173 2009 10791100 Fig 3 A decomposable 6 6 overall process progressively steps We solve ﬁrst triangle A B C 2 2 Because rigidity ﬁnite number solutions ﬂips Then solution second triangle B C D solved C ﬁxed Finally triangle C D E solved turn C D ﬁxed In general solving decomposed problem seven 2 2 systems including ﬂips faster solving global problem 6 6 No standard root ﬁnder supports implementation strategies The state art decompositionbased solving methods relies dedicated algorithms 22 Enhanced description ring Let consider set inversion problem introduced Section 16 We mentioned inner test necessary setdescriber algorithm inner contractor introduced case actually adapted Indeed set inversion problem easily formulated conjunction inequalities It shown 82 case inequalities negation trick problem reversed contracted region reversed problem lies inside feasible region original Remember y IR We cx f x y y cid2 f x f x cid2 y Hence point unfeasible y f x f x y f x f x y Now contract box x respect y If x1 x2 resulting boxes xx1 x2 inside solution set x x cx In situation fruitful replace current search space x x1 x2 memorize complementary space inner The setdescriber algorithm appropriate 23 Level surfaces Level surfaces generalization previous problem stated follows Consider f Rn R N decreasing values y1 y N The goal classify points initial domain x according constraints f x cid3 y1 f x cid3 y2 f x cid3 y N 1 priority corresponding intuitive idea interested highest values surface level y1 number points satisfying f x cid3 y1 maximized ﬁrst Then surface level y2 maximized Fig 4a shows example 4 surface levels Note problem easily generalized MAXSAT problem Let focus inputoutput Of course directly 1 input constraint makes sense 1 equivalent f x cid3 y N One solve N times set inversion problem f x yk yk1 superimpose different outputs Fig 4b However satisfactory reasons First boundaries level surface little white boxes Fig 4b appear lowest This undesirable boundaries cleared Fig 11 One circumvent effect slightly enlarging G Chabert L Jaulin Artiﬁcial Intelligence 173 2009 10791100 1085 Fig 4 Surfaces levels f x cid3 yi An example y1 08 y2 06 y3 04 y4 02 f x sinx2 1 Darkness increases f b The example decomposed set inversion problems x2 2expx1 x2 2 x 2 2 2 2 intervals yk yk1 computing inversions making level surfaces overlap Another trick simply boundary subpaving kth surface level inner subpaving k 1th level surface However cases cheat lose reliability result Second decomposition input problem N subproblems aggregation intermediate results requires extra undesirable manipulations user 24 Set inclusion Given sets deﬁned constraints c1 c2 set inclusion problem consists proving refuting set included This illustrated Fig 5a We shall denote setc set associated constraint setc x Rn cx true Using conjunction c1 c2 input algorithm setdescriber address problem following situations solution set included sets intersect In way initial box included inner subpaving sets coincide Except extreme cases said As solve separately c1 c2 check inclusion inner boundary subpavings c1 inner subpaving c2 Fig 5b Again requires undesirable manipulations user worse process extremely ineﬃcient Assume box B Fig 5b detected inner paving setc2 recursively bisected contracted paving setc1 boundary inner boxes All work spare inclusion setc1 B setc2 B established Hence decomposition involves huge number useless computations Of course legitimately object example given Fig 5 c1 reversed Section 22 c1 running standard solver c1 c2 job expected Indeed solution point satisfy c2 c1 setc2 setc1 However general constraint reversed inner test possible As example constraint c1x following form c1x y 0 1 cid3 f x y 0 gx y 0 reversed y multiple occurrences testing inner box possible algorithm given 12 25 Boundederror parameter estimation This example devoted solver design problem new terms inputoutput requires speciﬁc strategy 1086 G Chabert L Jaulin Artiﬁcial Intelligence 173 2009 10791100 Fig 5 Set inclusion Two subsets x 3 1 1 3 deﬁned constraints c1x expx1x2 sinx2 x1 01 01 dark gray c2x expx1 x2 sinx1x2 01 01 light gray We setc1 setc2 b The set inclusion problem decomposed set inversion problems Consider following model realtime 23 f p t 20 expp1t 8 expp2t p1 p2 unknown parameters Assume vector 10 measurements y1 y10 available measurements corresponding times t1 t10 respectively The question compute rigorous enclosure feasible p1 p2 experimental data taking account uncertainties yi ti Hence given intervals ti yi following set p1 p2 110 yi yi ti ti yi f p ti If restrict single measurement instead 10 problem boils simple set inversion constant ti Hence set computed intersection 10 set inversions The setdescriber algorithm suit In fact multiincidence t expression f makes strategy ineﬃcient Indeed underlying method contractor inner test domain t small resulting operator sharp Hence domain t split solver This illustrated Fig 6 Second introducing vector t variables makes search space dimension jumps 2 12 wants solve 10 problems separately This leads combinatorial explosion In conclusion need splitting component ti inside contractor inner test associated ith measure To knowledge available solver generic tuned way 3 A new formalism We different examples Section 2 solved suggested algorithm generic solver called paver expressed contractor formalism We paver formalism section We provide concrete examples contractors Section 4 subsequently revisit problems Section 2 31 The contract classify paver To help intuition let consider problem Section 23 It turns example sets described simultaneously set corresponding different constraint Let assume sets disjoint We circumvent case overlapping sets Each point initial space classiﬁed respect sets For given point x means membership x different sets tested successively If test succeeds x marked treated associated corresponding set A generic interval solver directly derived test classify principle Remember ﬁrst contractor C easily built constraint c The contractor C following property Cx y y G Chabert L Jaulin Artiﬁcial Intelligence 173 2009 10791100 1087 Fig 6 The parameter estimation problem The set feasible points p1 p2 b The result standard contraction inner test splitting domains ti bisection precision 001 First inner boxes Second outer enclosure sharp contraction x eliminated point yx satisfy c Thus simple negation trick contractor C eliminated points satisfy c easy build Example 2 Consider set inversion problem Section 22 A point inside ring satisﬁes f x y Consider contractor C built f x y If Cx y x y inside ring Given box x constraint c complementary contractor C reduces x y x y classiﬁed mark inside c Then paver proceeds follows algorithm detailed The solver takes input list contractors initial box x0 The ﬁrst contractor enforced x x0 If contraction effective smaller box xcid12 stored subpaving associated ﬁrst contractor Only xcid12 left treated second contractor called When contractors ineffective box x common ﬁxpoint contractors reached x bisected The process repeated list boxes We section termination algorithm guaranteed returned difference4 xxcid12 4 Note resorting simple tree structure avoids explicitly difference x xcid12 simply subnode 1088 G Chabert L Jaulin Artiﬁcial Intelligence 173 2009 10791100 Note paver AC3like algorithm essentially reasons First contractors given paver algorithm usually involve variables merely correspond sets generally subpavings dimension initial box This rule user advice One different constraints level order trace contraction power But paver level intended deal sets constraints related given set encapsulated outer inner contractor explained Second semantics contractors goes constraints order called inﬂuence quality result number boxes subpaving For instance contractor designed detect weak condition preferably called resort lose boxes satisfying stronger condition 32 Contractors Deﬁnition 1 Contractor A contractor mapping C IRn IRn ii x IRn Cx x x x Cx x x Cx contraction consistency iii Cx ε 0 x Bx ε Cx continuity Bx ε ball centered x radius ε A box x said insensitive C Cx x sensitive By extension point x said sensitive insensitive x sensitive Property states box reduced contractor Property ii states insensitive points removed Finally property iii required properties paver explain The set associated contractor C union insensitive points setC x Rn Cx x The continuity property C implies setC closed If C contractor constraint c classical sense word Section 15 setC setc An important novelty formalism consider sets associated contractors constraints This allows rigorous description output paver Proposition 2 A contractor algorithm interpreted subset Rn standard operations sets extended contractors We deﬁne C1 C2x C1x C2x C1 C2x cid2C1x C2x C1 C2x C1C2x intersection union composition 1 C C1 C1 C1 C1 cid18 C2 C1 C2 C1 cid19 C2 C1 C2 iterated composition iterated intersection iterated union All operations stable yield contractors We introduce following deﬁnition Deﬁnition 2 Let C1 Ck collection contractors C1 Ck complementary setC1 setCk C1 Ck independent cid20 j setCiC setC jC Additional properties contractors play signiﬁcant role C monotonous x y Cx C y C minimal x IRn Cx cid2x setC C idempotent x IRn CCx Cx Given contractor C Rn Rm deﬁne following contractors Rn 2 3 G Chabert L Jaulin Artiﬁcial Intelligence 173 2009 10791100 1089 y y degenerated real y The contraction Fig 7 ProjUnion We consider contractor C IR2 S setC Representation C y x x x results enclosure x x x y S Since C continuous x y degenerated enclosure minimal C iff x y S b Principle implementation resorting parameter splitting union subcontractions interval y decomposed ﬁnely y obtained numerous repetitions splitting possible c Result projintersection practice outer approximation setC operation presented b Fig 8 Projintersection In similar way Fig 8 given ﬁxed interval y C implementation resorting parameter splitting intersection c Result projintersection practice outer approximation setC obtained allows constrain x R y y x y S b Principle y y y C x y C x cid2 y y cid5 y y πxCx y πxCx y πxx y x The ﬁrst operation called projunion second projintersection Once operations stable set contractors We y setC y setC x y y x y setC x y y x y setC This result intuitive proof given Figs 7 8 In practice operators implemented follows For projunion y split sequence small subintervals yi Then contractor C enforced subdomain x yi hull results returned For projintersection sequence points yi sampled y C enforce x yi intersection results returned Although examples contractors topic Section 4 shall introduce right precision contractor Cε special status This contractor aimed controlling precision paver scheduling contractors Sections 51 53 implicitly referred subsequent propositions 1090 G Chabert L Jaulin Artiﬁcial Intelligence 173 2009 10791100 Deﬁnition 3 Precision contractor Given cid4 0 precision contractor Cε deﬁned follows cid6 Cεx x widthx cid4 Many properties stated contractors As example set idempotent monotonous contractors complete lattice inclusion Listing properties scope paper aimed introducing concepts However fundamental properties paver given previous section based properties contractors position proving 33 Paver properties Proposition 1 Termination Let C1 Ck list complementary contractors The paver terminates initial box x0 Proof Assume contradiction paver terminate Hence sequence nonempty boxes xi x x0 0 ii iii xi xi1 strict inclusion xi cid20 xi1 C1xi Ckxi xi x xi Indeed direct consequence properties contractors bisections ii ﬁxpoint postcon dition inner loop inside paver algorithm Finally pick point xi xi nonempty The sequence bounded admits accumulation point x Since xi closed set contains subsequence x j jcid3i contains accumulation point x Hence iii holds Now box xi identiﬁed 2ntuple ui vertices coordinates This identiﬁcation isometric appropriate distances Hausdorff distance IRn counterpart R2n For component j increasing decreasing bounded component x Hence converges 1 cid2 j cid2 2n sequence u point u j By inverse isometry follows sequence boxes xi converges box x Furthermore width box necessarily null x degenerated box x j cid3 0 radxin cid2 1 2 radxi Next setC1 setCk means contractor Cl satisﬁes x setCl By applying continuity property Cl Deﬁnition 1 obtain exists cid4 xi Bx cid4 Clxi contradiction cid2 To ensure complementarity contractors usually resort precision contractor setCε Informally following proposition states given precision cid4 subpaving associated contractor matches intersection contractors sets Since set contractor usually approximates set related initial constraint clear semantics paver Proposition 2 Subpavings characterization Let C1 Ck list independent contractors Cε setCε Let denote K1 Kk Kcid4 subpaving returned paver C1 Ck Cε respectively We cid5 1 cid2 cid2 k setC jKi Kcid4 jcid20i Proof First paver terminates thanks previous proposition Let index 1 cid2 cid2 k For j cid20 jcid20i setC j Since x Ki hypothesis setCiC setC jC setCiC setC j implies setCiC x setCic applying consistency Ci Ki setCiC jcid20i setC j The inclusions strict setCiC open sets closed It follows jcid20i setC jKi nonempty Take x set assume x Kcid4 The box x removed search Cl 1 cid2 l cid2 k jcid20i setC j l leads contradiction x Ki cid2 x setClC Since x cid7 cid7 cid7 cid7 4 Contractor design In section present contractors operations help modeling problems improving eﬃciency paver We basically explain manage constraint c different ways build contractor C G Chabert L Jaulin Artiﬁcial Intelligence 173 2009 10791100 1091 satisfying setC setc Likewise operations op preserve associated sets Eg unary operator op satisfy contractor C setopC setC Hence contractors operations section inﬂuence result terms subpaving char acterization On hand decrease time complexity space complexity number boxes subpaving We overlook technical details purpose sticking generalities The interested reader refer Section 6 important implementation choices disclosed We shall distinguish numerical contractors directly built numerical constraint result operation composition contractors Numerical contractors related equations inequalities systems equations The point large interval analysis routines wrapped contractors As announced good separation obtained numerical skills design numerical contractors constraint programming skills design compound contractors In layered framework constraint propagation generalized contractor propagation A possible implementation corresponding operator propag described Section 63 41 Numerical contractors Several contractors associated equation f x 0 The simplest consists evaluating interval arithmetics f x checking 0 belongs image range If 0 f x x contracted set Otherwise left unchanged This contractor qualiﬁed binary sense keeps This test easily extended inequali ties This contractor given variants based symbolic numerical processing following examples Example 3 Assume exist equivalent expressions f f 1 fk minimizing multi incidence different variable Since overestimation interval evaluation grows multiincidence variables 34 sharper results computing f 1x fkx instead f x accurate slower test cid12xx x0 instead Example 4 On numerical resort centered form compute f x0 f f x x0 arbitrary point inside x Higherorder Taylor formulas payfull One introduce intermediate monotonicity tests Consider twodimensional vector x If f x1 increasing respect x1 f x replaced f x 1 x turns positive interval f x2 smaller interval x2 f x 1 More sophisticated contractors associated constraint c equation inequality compute outer estimation feasible set Cx nontrivial superset x x cx Three important techniques literature 1 Forwardbackward traversals syntax tree intermediate interval computations HC4Revise 3 2 Univariate interval Newton iterations performed narrowing operator box consistency 47 3 Linear relaxations 30 references In techniques nonlinear constraint cast linear program feasible region encompasses original solution set Given equation f x 0 denote C f Of course numerical techniques handle equations simultaneously equations Many derived multivariate interval Newton famous variant HansenSengupta algorithm 17 In case linear equalities dedicated algorithms exist 35 37 One easily convinced algorithms act contractors sequel arbitrary contractor 42 Propagation The propagation operator allows implementation interval variants classical AC3 algorithm hull consistency 311 algorithms This operator illustrates potential framework terms contractor design The key idea propagate contractors instead constraints Given list contractors principle obtain ﬁxpoint composition C1 Cm lower computation price We shall denote propag operator We setpropagC1 Cm setC1 Cm means propag pure eﬃciency contractor impact output An implementation operator proposed Section 63 1092 G Chabert L Jaulin Artiﬁcial Intelligence 173 2009 10791100 Let recall hull consistency enforces bound consistency equation In practice relaxation boundconsistency calculated HC4Revise algorithm The resulting propagation algorithm called HC4 In framework given list constraints c1 cm HC4 algorithm simply reimplemented follows HC4c1 cm propagHC4Revisec1 HC4Revisecm A interesting direct application multilevel propagation Sometimes like group constraints know strong dependencies For instance ﬁnd relevant perform intermediate ﬁxpoint constraints strictly share variables Consider sets constraints c1 c2 c3 c4 c5 c6 The following contractor ensure constraint subset c4 wakened constraints subsets c1 c2 propagpropagc1 c2 c3 c4 propagc5 c6 43 Shaving The purpose section operators exist propag Shaving operation allows implementing refutation techniques similar SAC 5 discrete domains With continuous domains refutation shrink endpoints instead value inside domains structure interval maintained fancy shaving Detailing algorithm room We shall rough description A shaving operator shave takes contractor C Given box x resulting contractor shaveC contracts slices cid4 C subboxes obtained x restricting domain xk component small subinterval x k x k When result subcontraction set slice removed Otherwise contraction tried x k smaller slice This recursion leads consistent endpoints More formally resulting box y shaveCx satisﬁes k 1 n cid4 x k C y1 yk1 y C y1 yk1 y k k yk1 yn cid20 yk1 yn cid20 The shaving operator given variants mainly slicing optimistic try large slices ﬁrst pessimistic check consistency endpoints ﬁrst Given m constraints c1 cm box consistency operator 44547 reimplemented framework follows propagshaveunivNewtonc1 shaveUnivNewtoncm UnivNewton univariate interval Newton contractor Section 41 The 3B consistency deﬁned 31 reimplemented follows shaveHC4c1 cm 5 Revisiting examples We revisit examples framework By convention subpaving precision contractor represented white pictures As preliminary example consider equations Fig 1 remember goal enclose solution set subpaving By direct application formalism need contractors 1 A contractor C f remove unfeasible points 2 The precision contractor Cε The desired output given Fig 9 This time result outer contraction appears subpaving unfeasible points The roots subpaving precision contractor 51 A decomposable problem Assume subsystem called block solved combination propagation interval Newton Of course multivariate interval Newton denoted newton henceforth requires square When variable ﬁxed xC yC second triangle solved considered variable newton interval constant Such information typically enters static parameter Section 61 For reason G Chabert L Jaulin Artiﬁcial Intelligence 173 2009 10791100 1093 Fig 9 System equations outer precision contractor The subpaving outer contractor light gray newton contractor takes arguments set constraints set variables Similarly let reﬁne behaviour precision contractor Cε Section 4 This contractor subset S variables parameter A box x emptied CεS domains components S diameter lower ε In sequel d P Q denotes distance constraint points P Q For block triangle solving strategy implemented thanks following operator block_ contractor block_contractorc1 ck x1 xk HC4c1 ck newtonc1 ck x1 xk For instance paver run block_contractordB D dC D xD y D Cε xC yC ﬁxed domains diameter ε solve second triangle required manner propagation Newton The stepbystep solving method proposed Section 21 directly implemented following contractor block_contractord AC dBC xC yC CεxC yC block_contractordB D dC D xD y D CεxC yC xD y D block_contractordD E dC E xE y E provided variables bisected block block In details variables ﬁrst block xC yC bisected roundrobin fashion precision achieved The bisection procedure pro ceed second block Branching procedures covered paper mechanism orthogonal contractors easily convinced blockwise bisection easy set 52 Enhanced description ring In set inversion problem need characterize x f x y This means sets described contractors x f x y ring x f x int y complementary ring Put y y gx f x y y To deal unfeasible points need outer contractor This contractor denoted C f y simply deﬁned follows C f y x cid23 πxC gx y The points inside ring classiﬁed inner contractor As explained Section 22 comes naturally negation problem We 1094 G Chabert L Jaulin Artiﬁcial Intelligence 173 2009 10791100 Fig 10 A description ring involving outer inner contractors cx f x y y cid2 f x f x cid2 y f x y f x y Hence cx f x y cid24 f x y Therefore contractor f x y f x y C f yx x cid23 πxC gx y πxC gx y removes unfeasible points c feasible points c Now setC f y setC f y boundary ring nonempty Hence add precision tractor ensure termination algorithm The result depicted Fig 10 Since C f y C f y independent ring represented ﬁgure interpreted approximation set described Proposition 2 53 Level surfaces First contractor C f yi deﬁned previous paragraph associated ith level surface f cid3 yi Of course way contractor lowest surface level preempt boxes leading bad result independence hold Introducing priority different contractors addition independence require extra concept We need adapt contractors actual semantics suﬃciently small box x classiﬁed contractor ith surface level x inside ith surface level x intersect 1th surface level x small width lower ε The desired contractor Ci obtained simply rewriting conditions terms subcontractors Ci C f yi C f yi1 Cε subdistributivity rule Ci C f yi1 C f yi Cε Finally need outer contractor surface levels Cn1 C f yn Moreover intersection C1 Cn1 x f x yn usual set treated precision contractor Cε Fig 11 shows desired output G Chabert L Jaulin Artiﬁcial Intelligence 173 2009 10791100 1095 Fig 11 An appropriate paving smooth boundaries surface levels Fig 12 The set inclusion problem solved adapted algorithm Boxes dark gray belong setc1 Boxes light gray inside setc2 We resort splitting regions boundaries setc1 setc2 close 54 Set inclusion The set inclusion problem solved eﬃciently formalism following simple reasoning A box x discarded search belong setc1 included setc2 Indeed cases x compromise assertion proven x x c1x cid24 c2x Hence inner contractor C1 c1 outer contractor C2 c2 jointly Only box possibly contain points inside setc1 outside setc2 bisected The result depicted Fig 12 No precision need introduced intsetc1 setc2 int stands interior algorithm end case setC1 setC2 But need precision contractor Cε case noninclusion 1096 G Chabert L Jaulin Artiﬁcial Intelligence 173 2009 10791100 Fig 13 Parameter estimation solved inner outer contractors based projunion projintersection The precision paver 001 55 Boundederror parameter estimation As evoked modeling problem causes diﬃculty The overall inner contractor union inner contractors related measure C gi yi gip f p ti ti ti Here interval extension gi function interval constant ti substitutes variable ti Likewise intersection outer contractors C gi yi deﬁnes outer contractor problem For eﬃciency split ti inside ith outer inner contractor Consider ﬁrst outer contraction p1 p2 feasible value ti satisﬁes f p ti yi Hence point p ti R3 insensitive C f yi p insensitive outer contractor The projunion deﬁned Section 4 exactly ﬁts requirement We deﬁne Couter C t1 f pt1 y1 C t10 f pt10 y10 Similarly projintersection ﬁts requirement inner contraction Indeed point p ti R3 sensitive C f yi discarded inner contractor We deﬁne Cinner C t1 f pt1 y1 C t10 f pt10 y10 A paving resulting combination contractors shown Fig 13 6 The Quimper Besides theoretical investigations contractor programming given rise real named Quimper QUick Interval Modeling Programming boundedERror context This includes today different programs qPave graphical tool paving sets 2D qSolve tool listing numerical results typically high dimension qTraj graphical tool tailored constraint problems derived differential equations These lightweight programs manage inputoutput language writing contractors Quimper language interface conﬁguring running paver handling generated pavings They linked C library called Ibex IntervalBased Explorer implements contractor programming framework Ibex based ProfilBias library 28 lowlevel interval arithmetics However library wrapped functions manage borderline cases inﬁnite bounds values deﬁnition domains sets arithmetic operations exceptionfree This explains modiﬁed release ProfilBias included Ibex package All software components GPL licence downloaded online 7 A user guide Quimper including grammar Quimper language complete documentation Ibex classes available site An archive containing examples paper Quimper syntax provided IbexQuimper developed ﬁrst author software considered prototype real collaborative opensource project continuing work launched This new project advantage existing code G Chabert L Jaulin Artiﬁcial Intelligence 173 2009 10791100 1097 The purpose section insight Ibex For convenience shall adopt object oriented coding notations A contractor C class main function contract box x Ccontractx contracts x C Generalizing constraint propagation contractor propagation required letting interface contractors inherit constraints First ask contractor domain given variable impact result contraction This notion simply generalizes incidence graph constraint network A contractor C class implements Boolean function involves takes argument index j variable Cinvolvesj returns false true Note default contractor returns true In parlance objectoriented pro gramming function needs necessarily overridden Second added parameters contract function box contracted explained section 61 Indicators Every contractor set speciﬁc parameters For instance precision contractor Cε maxdiamGT Quimper syntax takes parameter ε The interval Newton needs parameter controlling termination iteration step reduce interval given ratio procedure stops This ratio set externally These parameters related semantics speciﬁc contractors precision contractor deﬁnition threshold implementations They usually set constructor parameters We shall consider type parameters There type parameters required constraint programming algorithms eﬃciency reasons called dicators The purpose parameters notify contractors search context called For instance inform contractor contraction given variable actually expected contraction superﬂuous If time complexity contractor depends number variables work spared We inform contractor domain given variable modiﬁed Again contractor works incrementally speed contraction Two indicators integrated corresponding precisely examples given The ﬁrst named scope contains subset variables treated The second named impacted contains subset variables domain impacted The semantics indicators constrained single fundamental property ignored called contractor spoiling soundness losing solutions If develops contractor ignores scope indicator contractor passed argument operator based communicability information propagate The consequence loss eﬃciency Hence indicators proposed today nice point indicators new ones invented time integrated progressively subsequent implementations contractors In words backward compatibility complete We indicators dictionary structure The real signature contract function contractboxx dictionary indicators As example ask contractor C focus ﬁrst variables following way Ccontractx scope 0 1 62 Numerical contractors There particular implementation numerical contractors Quimper indicators managed The binary test 0 f x actually proposed Quimper contractor necessarily ignore indicators HC4Revise implemented The complexity contractor linear length constraint expression Hence contracting single variable amounts contracting variables small constant factor In Quimper HC4Revise ignores scope indicator The univariate interval Newton implemented As contrary HC4Revise contractor deals particu lar variable time Setting scope indicator single variable divides contraction time number variables 1098 G Chabert L Jaulin Artiﬁcial Intelligence 173 2009 10791100 Linear relaxations implemented Now linear programming solver called iteratively reduce bounds initial variable scope indicator taken account univariate Newton The multivariate interval Newton implemented ignores scope impacted indicators 63 Propagation Here propagation operator implemented Quimper Our convention indices use j contractors variables respectively When couple j revised ith contractor work jth variable If revision succeeds signiﬁcant ith domain removed agenda updated following classical procedure Now revision j fails residual contraction Furthermore subcontractors account scope indicator unsolicited contractions appear propagation loop goes At point accumulation small contractions variable j add signiﬁcant contraction The agenda updated consequence In case jth variable source particular contractor The agenda updated couples j describing set contractors This procedure Now let main procedure Two local boxes deﬁned ﬁrst measure result revision contraction Ci x j measure contractions collected time x j triggered update 64 Some performance results All examples paper executed instantaneously 01 s precision high corresponds ﬁgures apparent boxes Fig 4a obtained setting precision Ccid4 cid4 001 The paving contains 17768 boxes generated 12 s Fig 5a obtained natural contractors corresponding constraints c1x c1x c2 precision set cid4 0005 The paving contains 40844 boxes generated 22 s G Chabert L Jaulin Artiﬁcial Intelligence 173 2009 10791100 1099 Fig 6a obtained cid4 0001 splitting 10 times parameter domain inside contractors C Computation time 26 s case mainly parameter splitting process occurs systematically C The paving includes 18249 boxes 7 Conclusion We presented new framework interval programming The beneﬁts framework twofold First large class constraintbased problems addressed unique simple algorithm called paver Second control solving process hand including core propagation loop This framework entirely built concept contractor inputs contractors instead constraints Similarly outputs related contractor sets instead constraints sets As said apparently small change modeling lead signiﬁcant improvements design new solvers declarative way In sense imperative aspect solvers subsumed declarative end user write constraints constraint programmer write contractors This approach supported real called Quimper solves quickly different problems mentioned paper There plenty possible extensions work The ﬁrst deal global optimization This extension probably resort dynamic contractors contractors parameterized value updated solving process Orthogonally contractors potentially remove unfeasible points local ﬁnders ﬁnd peculiar feasible points key feature References 1 H Batnini M Rueher Décomposition sémantique pour la résolution systèmes dequations distance JEDAI Journal Electronique dIntelligence Artiﬁcielle 2 1 2004 2 F Benhamou F Goualard Universally quantiﬁed interval constraints CP00 6th International Conference Principles Practice Constraint Programming 2000 pp 6782 3 F Benhamou F Goualard L Granvilliers JF Puget Revising hull box consistency ICLP 1999 pp 230244 4 F Benhamou D McAllester P Van Hentenryck CLPintervals revisited International Symposium Logic Programming MIT Press 1994 pp 124 138 5 C Bessière R Debruyne Optimal suboptimal singleton arc consistency algorithms IJCAI 19th International Joint Conference Artiﬁcial Intelligence 2005 pp 5459 6 C Bliek B Neveu G Trombettoni Using graph decomposition solving continuous CSPs CP98 4th International Conference Principles Practice Constraint Programming Springer 1998 pp 102116 7 G Chabert IBEX IntervalBased EXplorer httpwwwibexliborg 8 H Collavizza F Delobel M Rueher Extending consistent domains numeric CSP IJCAI Sixteenth International Joint Conference Artiﬁcial Intelligence 1999 pp 406413 9 E Davis Constraint propagation interval labels Artiﬁcial Intelligence 32 3 1987 281331 10 R Dechter Constraint Processing Morgan Kaufmann Publishers Inc San Francisco CA USA 2003 11 F Delobel H Collavizza M Rueher Comparing partial consistencies Reliable Computing 5 3 1999 213228 12 A Goldsztejn A branch prune algorithm approximation nonlinear AEsolution sets SAC06 Proceedings 2006 ACM Symposium Applied Computing 2006 pp 16501654 13 A Goldsztejn L Jaulin Inner outer approximations existentially quantiﬁed equality constraints CP06 12th International Conference Principles Practice Constraint Programming Springer 2006 pp 198212 14 C Grandón G Chabert B Neveu Generalized interval projection A new technique consistent domain extension IJCAI 20th International Joint Conference Artiﬁcial Intelligence 2007 pp 9499 15 L Granvilliers F Benhamou Algorithm 852 RealPaver An interval solver constraint satisfaction techniques ACM Transactions Mathematical Software 32 1 2006 16 E Hansen Global Optimization Using Interval Analysis second ed Dekker 2003 17 ER Hansen S Sengupta Bounding solutions systems equations interval analysis BIT Numerical Mathematics 21 2 1980 203211 18 P Herrero MA Sainz J Vehí L Jaulin Quantiﬁed set inversion algorithm applications control Reliable Computing 11 5 2005 369382 19 E Hyvönen Constraint reasoning based interval arithmetic The tolerance propagation approach Artiﬁcial Intelligence 58 13 1992 71112 20 ILOG ILOG Solver httpwwwilogcomproductscp 21 L Jaulin Localization underwater robot interval constraint propagation CP06 12th International Conference Principles Practice Constraint Programming 2006 22 L Jaulin M Kieffer O Didrit E Walter Applied Interval Analysis Springer 2001 23 L Jaulin E Walter Guaranteed boundederror parameter estimation nonlinear models uncertain experimental factors Automatica 35 5 1999 849856 24 C Jermann G Trombettoni B Neveu P Mathis Decomposition geometric constraint systems A survey IJCGA International Journal Computational Geometry Applications 16 56 2006 479511 25 N Jussien G Rochart X Lorca The CHOCO constraint programming solver CPAIOR08 Workshop OpenSource Software Integer Con straint Programming OSSICP08 2008 26 RB Kearfott GlobSol httpintervallouisianaeduGlobSol 27 RB Kearfott Rigorous Global Search Continuous Problems Springer 1996 28 O Knüppel ProﬁlBias httpwwwti3tuharburgdeSoftwarePROFILEnglischhtml 29 MZ Lagerkvist C Schulte Advisors incremental propagation CP07 13th International Conference Principles Practice Constraint Programming Springer 2007 30 Y Lebbah C Michel M Rueher Eﬃcient pruning technique based linear relaxations COCOS Lecture Notes Computer Science vol 3478 2003 pp 114 1100 G Chabert L Jaulin Artiﬁcial Intelligence 173 2009 10791100 31 O Lhomme Consistency techniques numeric CSPs IJCAI 13th International Joint Conference Artiﬁcial Intelligence 1993 pp 232238 32 JP Merlet Alias httpwwwsopinriafrcoprinlogicielsALIAS 33 JP Merlet Solving forward kinematics goughtype parallel manipulator interval analysis International Journal Robotics Research 23 3 2004 221236 34 R Moore Interval Analysis PrenticeHall 1966 35 A Neumaier Interval Methods Systems Equations Cambridge University Press 1990 36 B Neveu G Chabert G Trombettoni When interval analysis helps interblock backtracking CP06 12th International Conference Principles Practice Constraint Programming Springer 2006 37 S Ning RB Kearfott A comparison methods solving linear interval equations SIAM Journal Numerical Analysis 34 1 1997 12891305 38 S Ratschan RSolver httprsolversourceforgenet 39 S Ratschan Quantiﬁed constraints perturbation Journal Symbolic Computation 33 4 2002 40 F Rossi P van Beek T Walsh Handbook Constraint Programming Foundations Artiﬁcial Intelligence Elsevier Science Inc 2006 41 N Sahinidis BARON BranchAndReduce Optimization Navigator httpwwwandrewcmueduuserns1bbaronbaronhtml 42 D SamHaroud B Faltings Consistency techniques continuous constraints Constraints 1 1996 85118 43 C Schulte M Lagerkvist G Tack Gecode httpwwwgecodeorg 44 P Van Hentenryck The OPL Optimization Programming Language MIT Press Cambridge 1999 45 P Van Hentenryck D McAllester D Kapur Solving polynomial systems branch prune approach SIAM Journal Numerical Analysis 34 2 1997 797827 46 P Van Hentenryck L Michel ConstraintBased Local Search The MIT Press 2005 47 P Van Hentenryck L Michel Y Deville Numerica A Modeling Language Global Optimization MIT Press Cambridge 1997 48 XH Vu Rigorous solution techniques numerical constraint satisfaction problems PhD Thesis Swiss Federal Institute Technology Lausanne 2005