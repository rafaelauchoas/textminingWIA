Artiﬁcial Intelligence 172 2008 17521782 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Modelling solving temporal reasoning propositional satisﬁability Duc Nghia Pham ab John Thornton ab Abdul Sattar ab SAFE Program NICTA Ltd Queensland Australia b Institute Integrated Intelligent Systems Griﬃth University Queensland Australia r t c l e n f o b s t r c t Article history Received 24 November 2006 Received revised form 2 June 2008 Accepted 11 June 2008 Available online 19 June 2008 Keywords Temporal reasoning Interval Algebra Satisﬁability Satisﬁability modulo theories DPLL Search Representing reasoning time dependent information key research issue areas science artiﬁcial intelligence One best known widely formalisms representing intervalbased qualitative temporal information Allens interval algebra IA The fundamental reasoning task IA ﬁnd scenario consistent given information This problem general NPcomplete In paper investigate intervalbased representation IA network encoded propositional formula Boolean variables andor predicates decidable theories Our task discover satisfying formula eﬃcient ﬁnding consistent scenario original problem There basic approaches modelling IA network represents relations intervals variables represents endpoints interval variables By combining approaches different Boolean satisﬁability SAT encoding schemes produced encoding schemes converting IA SAT In addition showed IA networks formulated satisﬁability modulo theories SMT formulae based quantiﬁerfree integer difference logic QFIDL These encodings empirically studied randomly generated IA problems sizes ranging 20 100 nodes A general conclusion draw experimental results encoding IA SAT produces better results existing approaches More speciﬁcally new pointbased 1D support SAT encoding IA produces consistently better results alternatives considered In comparison different SAT encodings SMT encoding came fourth pointbased intervalbased 1D support schemes pointbased direct scheme Further observe phase transition region maps directly IA encoding SAT SMT encoding surprisingly location hard region varies according encoding scheme Our results ﬁxed performance ranking order encoding schemes 2008 Elsevier BV All rights reserved 1 Introduction background Representing reasoning time dependent information temporal reasoning central research issue real world AI applications planning plan recognition scheduling natural language understanding medical diagnosis 36 The basic research tasks include design development eﬃcient reasoning methods check consistency temporal information infer new information answer temporal queries 10 Temporal reasoning important subdiscipline ﬁeld constraint satisfaction research subdi vided basic areas qualitative quantitative temporal reasoning Corresponding author SAFE Program NICTA Ltd Queensland Australia Email addresses ducnghiaphamnictacomau DN Pham johnthorntonnictacomau J Thornton abdulsattarnictacomau A Sattar 00043702 matter 2008 Elsevier BV All rights reserved doi101016jartint200806003 DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 1753 11 Quantitative temporal reasoning Quantitative problems deal situations deﬁnite metric information time intervals event 20 minutes long starting exactly 2 oclock Such scenarios treated temporal straint satisfaction problems TCSPs variables represent continuous domain time points constraints represent sets intervals restrict domains particular variables 11 For example represent unary straint T time point xi occurs intervals a1 b1 a2 b2 a1 cid2 xi cid2 b1 a2 cid2 xi cid2 b2 binary constraint T j duration time points xi x j lies interval a1 b1 a1 cid2 x j xi cid2 b1 A general TCSP represented directed constraint graph nodes representing variables edges represent ing binary constraints edge labelled set intervals If specify edge labelled single interval arrive simple temporal problem STP 10 Deciding consistency general TCSP known NPcomplete ﬁnding consistency STP decided polynomial time shortestpath algorithms 11 This led development methods decide consistency TCSP selecting disjunct label edge testing resulting problem consistent STP Subsequent work looked disjunct temporal problems DTPs allow inclusion nonbinary constraints Techniques solving problems treat task selecting consistent STP original DTP metaCSP 50 takes constraint original problem variable metaproblem performs backtracking search forwardchecking space possible STPs A DTP represented satisﬁability SAT problem consisting clauses containing disjunctions literals represent temporal constraint x1 x2 cid2 2 Such problems solved generic SAT solvers additionally test consistency underlying STP problems represented clauses search 3 Currently promising results DTP area produced SAT solvers incorporate latest advances general SAT solving complete search community 5 12 Qualitative temporal reasoning However notions time day day decision making refer directly quantitative metric data time points durations For example constraint event start occur event Here concerned relative time ordering events exactly event starts stops For instance consider ordering events construction house Here typically unable predict control exactly particular task occur hard constraints ﬁtting interior roof attached These qualitative temporal relations formalised Allens interval algebra IA 1 In IA 13 atomic relations deﬁne possible qualitative arrangements exist time intervals These relations cover basic situations events overlapping meeting starting ﬁnishing equal Table 1 As formulation TCSP IA problem expressed directed constraint graph However node represents interval unspeciﬁed length edges represent constraints labelled sets atomic relations In form IA expressively rich framework general TCSP reasoning problem computationally intractable Existing IA techniques typically based backtracking approach proposed Ladkin Reinefeld 29 uses path consistency forward checking Although approach Table 1 The 13 IA atomic relations Note endpoint relations X X Y Y omitted Atomic relation Symbol X Y Y X X meets Y Y met X X overlaps Y Y overlapped X X Y Y includes X X starts Y Y started X X ﬁnishes Y Y ﬁnished X X equals Y b bi m mi o oi d di s si f ﬁ eq Meaning Xcid2cid3 Ycid2cid3 Xcid2 cid3 Ycid2 cid3 Xcid2 cid3 cid2 cid3 Y Xcid2 cid3 cid3 cid2 Y Xcid2 cid3 cid2 cid3 Y Xcid2 cid3 cid3 cid2 Y Xcid2 cid2 Y cid3 cid3 Endpoint relations Y X Y X Y Y X X Y Y X X Y Y X X Y Y X X Y Y X X Y Y X X Y Y X X Y Y X X Y Y X X Y Y X X Y Y X X Y Y X X Y Y X X 1754 DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 improved 3653 variants rely path consistency checking step prune search space This native IA approach advantage fairly compact disadvantaged overhead continually ensuring pathconsistency Additionally native IA representation variables constraints means stateoftheart local search complete search techniques unit propagation look ahead Satz 32 nogood recording nonchronological backtracking Chaff 35 easily transferred IA domain In practice existing native IA backtracking approaches able ﬁnd consistent solutions relatively small general IA instances 4851 On hand recent research shown modelling solving hard combinato rial problems including DTPs planning problems SAT instances produce signiﬁcant performance beneﬁts solving problems original form 5242641 These results motivated undertake current study In related work stochastic local search techniques SLS applied IA problem performance improvements complete search observed SAT CSP domains translated IA Thornton et al 48 developed endpoint ordering model speciﬁcally represent IA problems form suitable processing SLS In research TSAT local search algorithm shown signiﬁcantly outperform existing complete search technique set larger diﬃcult IA problems However endpoint ordering model like native IA model specialised structure carefully exploited TSAT algorithm 13 Alternative approaches translations Another wellknown approach qualitative temporal reasoning problem Villain Kautzs point algebra PA 54 This formalism uses basic relations exist time point variables In PA IA constraints deﬁned disjunctions basic relations variables resulting 23 possible constraint types opposed 213 IA These variables constraints expressed directed constraint graph nodes represent time point variables edges represent constraints The greater simplicity PA means expressive IA computationally tractable In addition PA provides link qualitative reasoning time point orderings metric reasoning time quantities This shown fact PA problem special case TCSP metric information omitted This allows simple transformation PA TCSP means TCSP techniques easily applied 10 However translating IA TCSP straightforward This disjunctions IA relations expressed PA binary TCSP As discuss later paper disjunctions represent nonbinary constraints involve endpoints pair intervals The inclusion nonbinary constraints allows represent IA network endpoints basic relations PA Such constraints encoded DTP formalism In fact IA problem considered restricted DTP metric information omitted PA treated binary TCSP The previously discussed work developing SATbased DTP solvers overlaps general area satisﬁability modulo theories SMT 4 SMT approaches designed solve problems combination SAT solving theory speciﬁc decision procedures In fact DTP SAT solver special case SMT solver metaCSP handled standard SAT solver problem deciding consistency underlying STPs handled theory speciﬁc decision procedure BellmanFord procedure 5 As existing general purpose SMT solvers Yices 13 applied new IAencoding metric DTPs providing uniﬁed framework handle qualitative quantitative dimensions temporal reasoning domain 14 An overview paper The aim current research investigate best approach solving qualitative IA reasoning problems terms choice algorithm problem representation We ask question representation IA problems specialised models require specialised algorithms necessary general case Given development approaches takes considerable effort investigate counterbalancing performance beneﬁts actually result To end consider range existing IA reasoning techniques including backtracking native IA problems local search endpoint ordering model We develop new SMTencoding IA use existing SMT solver evaluate encoding Against contrast approach expressing IA pure propositional satisﬁability problem applying stateoftheart SATsolver need develop special decision procedures representa tion formalisms Despite extensive work solving quantitative TCSPs DTPs constraint satisfaction SAT techniques best knowledge explicit thorough work formulating IA problems pure SAT instances excluding recent works 3839 Nebel Bürckert 37 pointed qualitative temporal stances translated SAT instances translation causes exponential blowup problem size Hence investigation provided work1 1 Other independent work 20 proposed representing IA SAT authors specify transformation provide adequate empirical evaluation DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 1755 In paper extend work 39 We provide detailed investigation intervalbased representations encoded conjunctive normal form CNF propositional formula The intervalbased representation IA network modelled different forms based treating relations intervals variables based representing intervals terms endpoints By combining approaches different SAT encoding schemes produced encoding schemes converting IA SAT In empirical study MiniSAT 14 stateoftheart complete search SAT solver solving SAT encoded problems These SAT encoded temporal reasoning problems translated randomly generated IA problems ranging size 20 100 nodes In addition analysing performance MiniSAT encoding scheme looked comparative performance range algorithms working directly native IA endpoint ordering new SMT encodings A general conclusion draw experimental results SAT based approach performs better alternatives We conclude representing intervals endpoints produces better performance repre senting intervals variables Further observe phase transition region maps directly IA encoding SAT SMT encoding surprisingly location hard region varies according encoding scheme Our results ﬁxed performance ranking order encoding schemes The remainder paper structured follows ﬁrstly review basic deﬁnitions IA Section 3 introduce models transforming IA instances CSP instances Using methods combined CSP SAT encodings present IA SAT encodings Section 4 Section 5 describes translation IA SMT Section 6 describes generation test set instances Sections 710 present empirical study evaluate performance SAT encodings relative evaluate performance existing complete SAT solver comparison native IA backtracking SMT TSAT solvers In Section 11 evaluate performance SAT approach performance SMT approach structured SMT problems Finally Section 12 presents conclusions discusses future research directions 2 Interval Algebra 21 Preliminaries I time line I Interval Algebra 1 commonly formalism represent qualitative temporal information based deﬁned ordered pair realvalued endpoints relations time intervals A time interval There 13 atomic interval relations time intervals I I eq b bi m mi o oi d di s si f ﬁ jointly exhaustive pairwise disjoint Table 1 shows graphical represen tations atomic relations deﬁnitions terms endpoint relations Indeﬁnite information time intervals expressed subset I disjunction atomic relations For example statement Event A happen event B expressed Ab biB Hence total 213 8 192 possible IA relations pairs time intervals I I Qualitative temporal constraints IA relations time intervals A B written ARB R A B R IA relation Let R1 R2 IA relations Then operators IA union denoted intersection denoted inversion denoted 1 composition denoted deﬁned follows A B AR1 R2B AR1 B AR2 B A B AR1 R2B AR1 B AR2 B 1 A B AR 1 B BR1 A A B AR1 R2B C AR1C CR2 B Hence intersection union temporal relations R 1 R2 simply standard settheoretic intersection union sets atomic relations describing R1 R2 respectively The inversion temporal relation R union inversion atomic relation ri R The composition pair temporal relations R1 R2 union results composition operation pair atomic relations r1i r2 j r1i R1 r2 j R2 The composition results IA atomic relations shown Table 2 Deﬁnition 1 Interval Algebra algebra underlying set 2 inversion binary operators intersection union composition 52 I power set set subsets I unary operators 22 The ISAT problem An IA network deﬁned constraint satisfaction problem CSP variable represents interval event domain ordered pairs real numbers binary constraint labelled possible interval relations pair interval events 3652 1756 DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 Table 2 The composition table 12 IA atomic relations omitting eq Note dur represent d s f di si ﬁ respectively b bi m mi o oi d di s si f ﬁ b b I b b o m di ﬁ b b o m di ﬁ b b o m di ﬁ b b o m di ﬁ b b bi I bi bi oi mi di si bi bi oi mi di si bi bi oi mi di si bi bi bi bi oi mi di si bi b bi bi mi mi bi o di ﬁ b o di ﬁ m m m b bi oi mi d f b mi b o m d s bi f ﬁ eq o b bi oi mi d f b oi b o m d s bi o d s s si eq bi oi d f bi b oi di si b o m d b o m d s bi oi mi d f o d s oi d f o d s oi d f d o oi dur eq d di b bi b bi b o m di ﬁ bi oi mi di si I b o m di ﬁ di bi oi mi di si di s b bi oi mi d f m oi d f si b bi m bi f b o m d s bi o d s ﬁ b bi b mi mi o o di ﬁ o d s b o m oi d f bi oi mi bi oi mi d f di bi oi mi s s si eq s si eq si d d o oi d oi di si d oi f oi di si b o m d s di b o m di f ﬁ eq o oi dur eq bi oi mi bi oi mi d f oi di si o oi dur eq b o m d s o di ﬁ b o m oi d f o di ﬁ oi oi d f o d s bi oi mi d oi di si o oi di si o d s di f ﬁ eq ﬁ o di ﬁ oi di si di o di ﬁ Fig 1 An example IA network consistent solution An instantiation IA network maps variable time interval time line represented ordered pair real values s e s e A binary constraint R A B satisﬁed instantiation Θ iff Θ A ΘB satisfy corresponding endpoint relations atomic relation r R A solution IA network instantiation satisﬁes binary constraints The problem determining IA network satisﬁable exists solution network called ISAT ISAT fundamental reasoning task interesting reasoning problems reduced polynomial time 21 important tasks practical applications 53 An IA network represented constraint graph constraint network nodes represent variables edges labelled binary constraints Usually constraint graph n interval events described n n matrix M entry Mi j binary constraint ith jth intervals An IA scenario singleton IA network edge constraint labelled exactly atomic relation A consistent scenario scenario exists corresponding CSP instantiation satisﬁes constraints Fig 1a shows example IA network expressing situation Fred reading paper eating breakfast He paper drank coffee After breakfast went walk2 In example variables I p Ib Ic I w represent intervals Fred reading paper eating breakfast drinking coffee walking respectively Fig 1b shows consistent scenario network Fig 1c shows graphical representation scenario time line 2 This example originally 51 DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 1757 A CSP kconsistent iff partial solution k 1 variables extended partial solution k variables satisﬁes relevant constraints 15 In addition CSP strongly kconsistent iff iconsistent cid2 k 16 An IA network n interval variables globally consistent iff strongly nconsistent Hence ISAT problem equivalent problem determining IA network globally consistent scenario The useful local consistency notion temporal reasoning path consistency 3consistency 151633 Allen 1 proposed path consistency method IA network M repeatedly computes following triangle operation Mi j Mi j Mik Mkj triplets nodes j k change occurs Mi j These operations remove atomic relations cause inconsistency triple j k intervals The resulting network path consistent IA network If Mi j original IA network path inconsistent More sophisticated path consistency algorithms applied IA networks run O n3 time 3652 Although path consistency guarantee global consistency IA network proved enforcing path consistency ensure global consistency maximal tractable subclasses IA 36 23 Current approaches ISAT In general ISAT NPcomplete problem 54 Therefore requires exhaustive search methods determine satisﬁa bility IA network In seminal work Allen 1 proposed algorithm systematically search possible singleton networks resulting instantiating binary constraints atomic relations enforce path consis tency instantiated networks However sort brute force backtracking technique ineﬃcient impractical nontrivial problems Moreover domains underlying IA network variables inﬁnite real numbers makes representation unsuitable ﬁnite CSP SAT solving techniques Ladkin Reinefeld 29 proposed eﬃcient approach solve ISAT problem enforcing path consistency forward checking 22 branching node This allows elimination relations inconsistent current partial solution results signiﬁcant pruning search tree In addition backtracking algorithms improved preprocessing input network path consistency algorithms van Beek 51 pointed branching factor algorithm signiﬁcantly reduced decomposing disjunctive relations set relations path consistency guarantees global consistency decomposing simple atomic relations This suggestion later proven correct Nebel 36 Based approach advanced algorithms developed explore variable value ordering techniques different decomposing sets relations 3031365153 Given implicit constraints current IA formalism enforced path consistency stateofthe art search techniques CSP SAT domains easily employed require embedding path consistency heuristic reasoning mechanism solver To address issue 48 developed new transformation method called endpoint ordering reformulates IA networks CSPs In model variables interval endpoints constraints endpoint relations deﬁned Table 1 The domain end point variable deﬁned integer value position rank variable total ordering endpoints 48 To solve problems specialised TSAT local search algorithm developed exploits structure endpoint domains constraints The main diﬃculty approach generation large variable domains representing possible orderings interval Without special TSAT pruning heuristics standard general purpose solver prove competitive Therefore native IA endpoint ordering models appropriate use general purpose SAT CSP solver As mentioned introduction elaborated Section 5 developed translation procedure encode IA network SMT problem solved generalpurpose SMT solver 44 However solvers pay price comparison pure SAT solver having perform consistency checks calling separate decision procedures Due shortcomings techniques considered decided explore development alter native SAT representations produce reasonablesized problems solved existing nonspecialised SAT solvers 3 Reformulation IA CSP Recent research shown modelling solving hard combinatorial problems SAT instances produce signif icant performance beneﬁts solving problems original form 242641 These results inspired undertake thorough study encoding solving IA problems SAT instances existing SAT solvers A common approach encode combinatorial problems SAT divide task steps modelling original problem CSP ii mapping new CSP SAT In subsections propose transformation methods model IA networks CSPs CSPs feasibly translated SAT We discuss SAT encoding schemes map CSP formulations SAT producing different approaches encode IA networks SAT3 3 In practice IA networks directly encoded SAT formulae reformulated CSPs However sake clarity ﬁrst transform IA different CSP formulations SAT 1758 DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 31 The intervalbased CSP formulation A straightforward method formulate IA networks CSPs represent edge binary constraint CSP variable We limit domain values CSP variable set permissible IA atomic relations edge set subsets I existing IA approaches This allows reduce domain size CSP variable 213 maximum 13 values Thus instantiation intervalbased CSP maps variable edge exactly atomic relation domain In words instantiation new CSP model actually singleton network original IA network Lemma 2 Let Θ singleton IA network 3 intervals I1 I2 I3 Let ri j label edge Ii I j intervals j 13 Then Θ consistent iff r13 r12 r23 Proof The proof lemma trivial based fact exactly mapping singleton network time line cid2 Theorem 3 Let Θ singleton IA network n intervals ri j label edge I I j Then Θ consistent iff triple k j nodes ri j rik rkj Proof This direction trivial Θ path consistent Given fact ri j rik rkj holds triplets k j nodes Θ path consistent result Lemma 2 In addition Θ singleton Hence Θ globally consistent cid2 Based results Theorem 3 intervalbased CSP representation given IA network deﬁned follows Deﬁnition 4 Given IA network M n intervals I1 In corresponding intervalbased CSP X D C X Xi j j 1n j variable Xi j represents relation intervals I I j D D j D j set domain values Xi j D j Mi j set relations interval I I j C consists following constraints cid2 xD ik yDkj Xik x Xkj y cid16 Xi j D cid17 j k j D cid17 j D j x y 1 Theorem 5 Let Θ IA network Φ corresponding intervalbased CSP deﬁned Deﬁnition 4 Then Θ satisﬁable iff Φ satisﬁable Proof We ﬁrst rewrite constraint 1 clauses cid2 xD ik yDkj cid2 xD ik yDkj Xik x Xkj y cid16 Xi j D j Xik x Xkj y cid16 Xi j x y 2 3 It trivial prove clauses 2 3 equivalent constraint 1 singleton network Θ cid17 Let Θ cid17 consistent scenario Θ As Θ cid17 Hence clause 2 satisﬁed In addition Θ cid17 satisﬁes constraints Φ As result Φ satisﬁable instantiation Φ Deﬁnition 4 globally consistent clause 3 satisﬁed Theorem 3 Hence Θ cid17 Let Φcid17 instantiation Φ satisﬁes constraints Φ clauses 2 3 satisﬁed We atomic relation Φcid17i j As Φcid17 satisﬁes clause satisﬁes clause 3 Θ cid17i j Θ cid17i k Θ cid17k j triples labelling edge j Θ cid17 singleton network Θ In addition Φcid17 construct singleton network Θ cid17 2 Θ cid17 k j nodes Applying Theorem 3 Θ cid17 globally consistent As result Θ satisﬁable cid2 311 Example For sake clarity use IA network Fig 2a running example illustrate transformation IA networks CSPs SAT encodings discussed later sections The example represents following scenario DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 1759 Fig 2 An example intervalbased CSPs IA networks Table 3 The composition table PA atomic relations Note represents universal relation Anne usually reads newspaper I1 breakfast I3 In addition drinks cup coffee I2 breakfast This morning started reading newspaper coffee served ﬁnished reading drinking coffee The corresponding intervalbased CSP IA network shown Fig 2b having 3 variables represent temporal relations pair actions These CSP variables corresponding domains described order X D It worth noting o d o d s constraint I1 I2 I3 restricts domain X13 d instead original D13 b d Anne read newspaper breakfast reading drinking coffee breakfast 32 The pointbased CSP formulation Vilain Kautz 54 proposed Point Algebra model qualitative information time points PA consists set 3 atomic relations P operators union intersection inversion composition deﬁned similar manner IA The composition results PA atomic relations shown Table 3 A PA network represented constraint graph similar manner IA network nodes represent points edges labelled PA relations pairs points Hence concepts consistency discussed IA networks applicable PA networks Again use n n matrix P represent PA network n points P j relation points j As mentioned Section 2 IA atomic relations uniquely expressed terms endpoint relations However representing nonatomic IA relations complex IA relations translated conjunctions point relations For example following combination point relations cid18 B A A B A cid18 B A B represents Ab dB Ab d oB This means PA cover 2 IA 36 In example represent Ab dB need disallow AoB This possible PA ruling overlap relation requires nonbinary relation endpoints A B disallow situation interval A starts interval B ending start end interval B requiring nonbinary relation involving 3 endpoints cid3 A B A B A B cid4 However CSP formalism control instantiation undesired IA relations simply introducing new constraints CSP model follows Let μr v ss v se ves vee PA representation IA atomic relation r intervals A B We deﬁne pointbased CSP v se example corresponding PA relation endpoints A model IA network B Deﬁnition 6 Given IA network M n intervals corresponding PA network P 2n points P 1 P 2n4 corresponding pointbased CSP M X D C 4 P allow relations allowed M 1760 DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 X Xi j j 12n j variable Xi j represents relation points P P j P D D j D j set domain values Xi j D j P j set point relations P P j C consists following constraints cid2 Xik x Xkj y cid16 Xi j D cid17 j xD ik yDkj cid2 Xlm Xlm Xlm Xlm cid18 μr r Mlm 4 5 k j D l endpoint interval m cid17 j D j x y Xlm CSP variable representing relation endpoint interval Theorem 7 Let Ω singleton PA network n points ri j label edge points Ii I j Then Ω consistent iff triple k j nodes ri j rik rkj Theorem 8 Let Ω PA network Ψ corresponding pointbased CSP deﬁned Deﬁnition 6 constraints 5 Then Ω satisﬁable iff Ψ satisﬁable Theorems 7 8 similar Theorems 3 5 respectively We construct proofs Theorems 7 8 similar way proofs Theorems 3 5 Theorem 9 Let Θ IA network Ψ corresponding pointbased CSP deﬁned Deﬁnition 6 Then Θ satisﬁable iff Ψ satisﬁable Proof Let Θ cid17 consistent scenario Θ As Θ cid17 ﬁned Deﬁnition 6 instantiation Ψ Hence Ψ cid17 Ψ cid17 singleton network corresponding pointbased CSP Ψ cid17 satisﬁes constraints 5 In addition Θ cid17 globally consistent satisﬁes constraints 4 Theorem 7 As result Ψ satisﬁable Let Ψ cid17 instantiation Ψ constraints 4 5 satisﬁed Let μ1 Xlm Xlm Xlm Xlm r inversion μr maps combination PA atomic relations endpoints Xlm Xlm Xlm Xlm IA atomic relation r intervals l m As variable Xlm Ψ cid17 instantiated exactly atomic relation μ1 Xlm Xlm Xlm Xlm maps exactly interval relation We construct singleton IA network Θ cid17 tion μ1 Xlm Xlm Xlm Xlm As Ψ cid17 consistent application Theorem 7 Ψ cid17 Ψ cid17 satisﬁes constraints 5 Θ cid17 labelling edge l m corresponding IA atomic rela globally scenario Θ In addition Θ cid17 satisﬁes constraints 4 As result Θ satisﬁable cid2 321 Example Fig 3 shows pointbased CSP corresponding original IA network running example Fig 2a including partial PA graph assist understanding pointbased CSP translation In graph Fig 3a interval I Fig 3 An example pointbased CSP representation IA network DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 1761 replaced endpoints I start point I ﬁnish point temporal relations pairs intervals replaced corresponding relations endpoints These endpoint relations CSP variables new model turn instantiated PA atomic relations For example expression X11 expresses constraint edge endpoints I1 I1 instantiated value expressing underlying PA constraint I1 I1 The power obtain CSP representation disallow additional unwanted interpretations eliminated simple PA model For example Fig 3a PA graph correct alternative representation original IA network allows interval I1 overlap o interval I3 In CSP formalism disallow overlapping relation constraint Fig 3b X13 X13 X13 X13 It noted order domains D exactly preserved respect corresponding variables X constraints type 4 restrict domain values variable omitted example 4 Reformulation IA SAT The eﬃciency modern SAT solvers triggered considerable encoding problems different domains propositional satisﬁability problems For example encoding binary CSPs SAT studied 2455 In current study introduced intervalbased pointbased nonbinary IA CSP formulation In section different schemes encode formulations SAT producing new encodings First onedimensional 1D support scheme naturally translates IA CSPs CNF formulae We present extensions direct log encoding schemes 2455 41 The SAT 1D support encoding An IA network encoded SAT instance intervalbased pointbased CSP formulations scribed previous section Boolean variable xr j represents assignment domain value r CSP variable Xi j xr j true iff r assigned Xi j In standard SAT encoding CSP variable Xi j having domain values D j sets atleastone ALO atmostone AMO clauses ensure exactly domain value v D j assigned Xi j time ALO AMO cid5 xv j vD j cid2 uvD j xu j xv j 6 7 It common practice encode general CSP SAT formula AMO clauses allowing CSP variables instantiated value 55 A CSP solution extracted taking single SAT assigned value CSP variable However CSP formulation methods strongly depend fact CSP variable instantiated exactly value time This maintains completeness reformulation methods proofs A counterexample based example Fig 1 shown Fig 4 I p I w I p Ib Ib I w In addition I p overlaps Ic Ic starts I w I p overlaps I w As result I p overlaps I w However scenarios obtained network consistent Hence AMO clauses removed translation A natural way encode consistency constraints constraints 1 4 add following support SUP clauses SUP cid2 uD ikvDkj xu ik xv kj xw1 j xwm j 8 Fig 4 A counterexample removing AMO clauses 1762 DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 Fig 5 An intervalbased 1D support encoding running example Fig 6 A pointbased 1D support encoding running example D j u v w 1 wm Note use IA composition table intervalbased reduction method D PA composition table pointbased reduction method cid17 j The constraints 5 pointbased CSP translated SAT formula following forbidden FOR clauses FOR xu lm xv lm x y lm xz lm 9 cid2 r Mlm u v y z PA atomic relations μr u v y z For example given PA representation Xlo Xm μo corresponding forbidden clause x lm x lm x lm x We refer method 1D support encoding scheme encodes support values original problem In Gents support encoding scheme 18 support clauses necessary implication directions CSP constraints However scheme SUP clause needed triple intervals k j permutation orders triple lm Formally interval pointbased SAT 1D support encoding schemes IA networks described follows Scheme 1 The intervalbased 1D support encoding Input IA network M n intervals 1 associate Boolean variable xr 2 generate ALO clauses deﬁned 6 3 generate AMO clauses deﬁned 7 4 generate SUP clauses deﬁned 8 j assignment relation r Mi j edge j intervals j Output corresponding intervalbased 1d support SAT instance Scheme 2 The pointbased 1D support encoding Input IA network M n intervals corresponding PA network P 1 associate Boolean variable xr 2 generate ALO clauses deﬁned 6 3 generate AMO clauses deﬁned 7 4 generate SUP clauses deﬁned 8 5 generate FOR clauses deﬁned 9 j assignment relation r P j edge j endpoints j Output corresponding pointbased 1d support SAT instance 411 Example The intervalbased pointbased SAT 1D support encodings running IA network example respectively shown Figs 5 6 Literals following SUP clauses bolded highlight differences direct encoding examples Figs 7 8 DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 1763 Fig 7 An intervalbased direct encoding running example Fig 8 A pointbased direct encoding running example 42 The SAT direct encoding Another way represent CSP constraints SAT clauses encode conﬂict values nogoods pair CSP variables 2455 This direct encoding scheme IA networks derived 1D support encoding scheme replacing SUP clauses conﬂict CON clauses If represent SUP clauses triple intervals k j 3D array allowable values CSP variable Xi j given values Xik Xkj corresponding CON clauses deﬁned cid2 CON uD ikvDkj wD cid17cid17 j xu ik xv kj xw j D cid17cid17 j D j u v 10 The multivalued encoding 41 variation direct encoding AMO clauses omitted As discussed earlier consider encoding IA transformations AMO clauses play necessary role Scheme 3 The intervalbased direct encoding Input IA network M n intervals 1 associate Boolean variable xr 2 generate ALO clauses deﬁned 6 3 generate AMO clauses deﬁned 7 4 generate CON clauses deﬁned 10 j assignment relation r Mi j edge j intervals j Output corresponding intervalbased direct SAT instance Scheme 4 The pointbased direct encoding Input IA network M n intervals corresponding PA network P j assignment relation r P j edge j endpoints j 1 associate Boolean variable xr 2 generate ALO clauses deﬁned 6 3 generate AMO clauses deﬁned 7 4 generate CON clauses deﬁned 10 5 generate FOR clauses deﬁned 9 Output corresponding pointbased direct SAT instance 1764 DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 421 Example The intervalbased pointbased SAT direct encodings running IA network example respectively shown Figs 7 8 Literals following CON clauses bolded highlight differences 1D support encoding examples Figs 5 6 43 The SAT log encoding A compact version direct encoding log encoding 2455 Here Boolean variable xl true iff corresponding CSP variable Xi assigned value lth bit value 1 We linearly derive log encoded IA instances direct encoded IA instances replacing Boolean variable direct encoding bitwise representation As single instantiation underlying CSP variable enforced bitwise representation ALO AMO clauses omitted However extra bitwise prohibited PRO clauses needed necessary prevent bitwise representations undesired Boolean variables instantiated For example domain variable X values need minimum bits represent values As bits represent values add clause x0 3 prevent fourth value assigning X Another way remove redundant bitwise 3 representations map valid values However binary encoding 17 generate exponentially conﬂict clauses log encoding considered study x1 Scheme 5 The intervalbased log encoding Input IA network M n intervals 1 associate temporary Boolean variable pr j assignment relation r Mi j edge j intervals j 2 generate CON clauses deﬁned 10 3 replace occurrence temporary Boolean variable pr j bitwise representation bwr j note bwr j actually combination Boolean variables lvk 4 generate PRO clauses necessary Output corresponding intervalbased log SAT instance Scheme 6 The pointbased log encoding Input IA network M n intervals corresponding PA network P 1 associate temporary Boolean variable pr j assignment relation r P j edge j endpoints j 2 generate CON clauses deﬁned 10 3 generate FOR clauses deﬁned 9 4 replace occurrence temporary Boolean variable pr j bitwise representation bwr j note bwr j actually combination Boolean variables lvk 5 generate PRO clauses necessary Output corresponding pointbased log SAT instance 431 Example The intervalbased pointbased SAT log encodings running IA network example respectively shown Figs 9 10 5 Beyond SAT The SMT encoding Over years increasing SAT community develop alternative SAT deal effectively nonBoolean problems In paper particularly interested SMT techniques designed decide satisﬁability quantiﬁerfree QF ﬁrstorder logic formulae respect background decidable theories linear arithmetic theory numbers theory arrays theory bitvectors Apart Fig 9 An intervalbased log encoding running example DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 1765 Fig 10 A pointbased log encoding running example successful applications formal veriﬁcation compiler optimisation SMT solvers best solving quantitative temporal reasoning problems STPs TCSPs DTPs An SMT problem deﬁned combination Boolean formula predicates theories Deciding sat isﬁability SMT problem involves ﬁnding assignment Boolean theory speciﬁc variables satisﬁes Boolean formula theory speciﬁc predicates proving assignment Consequently developing eﬃcient SMT solver involved ﬁnding good integration SAT theoryspeciﬁc techniques Currently SMT solvers support difference constraints constraints form x y cid19cid20 b x y real integervalued variables b numeric constant cid19cid20 cid2 cid3 cid18 These types constraints called QFRDL QFIDL quantiﬁerfree real difference logic quantiﬁerfree integer difference logic depending values x y real integer numbers In paper use QFIDL logic translate IA network M n intervals pointbased SMT formula 2n integervalued variables SMT variable xi represents endpoint P corresponding PA network P 2n points P 1 P 2n M5 We add following domain DOM constraints ensure instantiation SMT variables xi x j satisﬁes set point relations P j endpoints P P j P Note u PA atomic relation cid5 DOM xi u x j uP j 11 Here need add constraints ensure path consistency triplets j k endpoints P pointbased CSP formulation Section 32 As SMT variable xi instantiated integer values instantiation xi represents position corresponding endpoint P time line Consequently solution SMT formula DOM constraints satisﬁed represents consistent mapping endpoints P time line consistent scenario P Finally add following forbidden FOR constraints rule IA relations r set IA relations Mlm intervals Il Im enabled translation original IA network M corresponding PA network P cid2 FOR xl u xm xl v xm xl y xm xl z xm 12 r Mlm u v y z PA atomic relations μr u v y z Formally pointbased SMT QFIDL encoding scheme short pointbased SMT encoding IA networks described follows Scheme 7 The pointbased SMT QFIDL encoding Input IA network M n intervals corresponding PA network P 1 associate integervalued variable xi endpoint P P 2 generate DOM constraints deﬁned 11 3 generate FOR constraints deﬁned 12 Output corresponding pointbased SMT QFIDL formula Theorem 10 Let Θ IA network Π corresponding pointbased SMT formula formulated Scheme 7 Then Θ satisﬁable iff Π satisﬁable Proof The proof theorem trivial constructed similar manner proof Theorem 9 cid2 5 P allow relations allowed M 1766 DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 Fig 11 A pointbased SMT encoding Yices input language running example 51 Example The pointbased SMT encoding running IA network example shown Fig 11 Yices input language6 The run commands tell Yices check satisﬁability input formula return satisﬁable model exists 6 Test instances algorithm selection 61 Test instances As lack large sized realistic IA benchmarks majority empirical studies ﬁeld relied randomly generated IA problems 29313653 This reliance advantage allowing researchers investigate algorithmic performance depends problem characteristics able predict algorithm perform given problem class 23 Among different current models randomly generating IA instances 313653 models proposed Nebel 36 provide control characteristics generated instances We based empirical study random problems generated Nebels An d s model 36 The resulting instances temporal constraint graphs n nodes intervals average degree d constrained edges interval relations Constrained edges uniformly labelled average size s IA atomic relations 1 cid2 s cid2 12 Unconstrained edges labelled 13 IA atomic relations We chose An d s model allows constraints uniformly chosen entire set IA relations limited small sets hard constraints like Hn d model generating satisﬁable instances like Sn d s model 36 In study Nebel 36 pointed average degree d critical parameter deﬁne phase transition IA instances independently number nodes He showed s ﬁxed 65 phase transition happens d 95 To investigate performance effects SAT encoding schemes SMT encoding use Nebels generator7 generate IA instances number nodes varied 20 100 We preprocessed IA instances path consistency algorithm proposed van Beek 53 encoding SAT SMT formulae We preprocessing signiﬁcantly reduced problem size SATencoded SMTencoded IA instances terms number variables number clauses Section 71 discusses effects preprocessing approach SAT encodings 6 See httpyicescslsricomlanguageshtml 7 Available download ftpftpinformatikunifreiburgdedocumentspaperskiallencspsolvingprogramstargz 62 Algorithm selection DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 1767 SAT solving active research areas science artiﬁcial intelligence It shown SLS techniques WalkSAT family 46 recent clause weighting techniques SAPS 25 PAWS 49 signiﬁcantly better systematic search random SAT problems However SLS solvers best choice realistic problems 62728 systematic solvers leading performers recent SAT competitions8 crafted industrial categories problems test cases highly structured As local search solvers PAWS 49 manyvalued variant MVPAWS 40 performed poorly comparison systematic solver zChaff 35 version 20041125 different SAT encodings IA instances preliminary study 38 decided use systematic search study9 Another reason choosing systematic solvers work satisﬁable unsatisﬁable instances allow evaluate performance SAT solvers phase transition IA instances In study selected MiniSAT 14 version 2 build 07072110 benchmarking SAT solver best systematic solvers random structured problems MiniSAT uses eﬃcient mechanism learning clauses won championship 2005 SAT competition As SMT solver Yices 13 version 10911 shown best overall SMT solver 2006 2007 SMT competitions12 To compare existing IA approaches chose Nebels solver 36 best known systematic solver native IA representation13 In particular variants Nebels backtracking algorithm NBTI NBTH NBTI instantiates edge atomic relation I NBTH assigns relation set H ORDHorn relations edge The heuristics Nebels backtracking algorithm set default Finally included TSAT 48 specialised SLS solver uses end point ordering representation IA instances described Section 23 By exploiting special heuristics suited representation domain constraint skip ping TSAT shown perform better NBTI NBTH hard IA instances 48 7 The effects encoding problem size In 1995 Nebel Bürckert 37 pointed qualitative temporal instances translated SAT instances translation causes exponential blowup problem size In order study effect SAT translation size generated problems ﬁrst generated extensive benchmark test set An d 65 IA instances varying average degree d 1 20 steps 05 8 11 steps 1 n 20 50 steps 5 We generated 500 instances nd data point obtain set 23 7 500 80 500 test instances We SAT SMT encoding schemes translate instances SAT SMT formulae respectively Fig 12 graphs median number variables clauses literals corresponding SAT SMT encodings median time translation We use PS PD PL denote pointbased 1D support direct log SAT instances IS ID IL denote intervalbased 1D support direct log SAT instances SMT denote pointbased SMT instances respectively The results pointbased SMT encoding dominates encoding schemes producing smallest problem sizes fastest translation times As graphed Fig 12 SMT encoding produces instances 40 times smaller closest SAT rival In addition translation IA instances SMT formulae happened instantly SMT translation times omitted Fig 12 This result surprising translation IA network SMT formula relatively straightforward carry corresponding PA network Putting aside results SMT encoding graphs Fig 12 clearly pointbased SAT encoding produces instances signiﬁcantly smaller problem sizes terms number clauses shorter time interval based SAT encoding Among SAT encoding schemes 1D support best followed direct encoding scheme Although intervalbased pointbased log schemes generated SAT instances smallest number variables took longest time translate produced instances lengthy clauses As shown Fig 12 median CPU time pointbased 1D support scheme 2 20 times faster SAT encoding schemes Similar results observed comparing median number clauses literals point based 1D support SAT instances SAT encoded instances 8 Results SAT competitions available httpwwwsatcompetitionorg 9 Although PAWS weight decay parameter ﬁxed 10 lost RAdaptNovelty 2005 SAT competition tuned version PAWS strongly dominates local search solvers 2 In preliminary study variants PAWS run optimal tuned parameter settings 10 Source code available httpwwwcschalmersseCsResearchFormalMethodsMiniSatMiniSathtml 11 Binary version available httpyicescslsricom 12 Results SMT competitions available httpwwwsmtcomporg 13 Source code available ftpftpinformatikunifreiburgdedocumentspaperskiallencspsolvingprogramstargz 1768 DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 Fig 12 The median number variables clauses literals median time taken translate An d 65 IA instances SAT SMTencoded instances path consistency preprocessing 11500 instances d 120 data point The CPU time pointbased SMT encoding omitted translation instant 71 The impact path consistency preprocessing Since path consistency algorithm eﬃcient approximation approach solve IA problems 295153 suc cessful IA backtracking algorithms use search remove inconsistent relations intervals endpoints possible 30313653 Hence appear reasonable try minimise problem size SAT SMT encoded instances applying path consistency algorithms native IA instances translation In addition path consistency algorithms polynomial expect combination path consistency SAT SMT eﬃcient trying solve unpreprocessed SAT SMT encoded instances Here vBM path consistency algorithm 5314 taken Nebels backtracking solvers NBTI NBTH evaluate impacts preprocessing native IA instances SAT SMT translations We ran vBM algorithm benchmark instances generated previous experiment Fig 13 graphs median number variables clauses literals median time taken translate IA instances path consistency preprocessing pointbased SAT instances The results clearly advantage preprocessing native IA instances path consistency algorithms SAT translation With path consistency preprocessing higher probability inconsistency IA instances higher average degree d improvement minimising problem size SAT encoded instances observed Similar beneﬁts observed combining path consistency SAT SMT encoding schemes 14 The source code path consistency algorithm included Nebels solvers DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 1769 Fig 13 The median number variables clauses literals median time taken translate A50 d 65 IA instances pointbased SAT instances path consistency preprocessing 500 instances d 120 data point 8 The phase transition SATSMT encodings An important advantage randomly generated benchmark test sets average diﬃculty instances controlled Cheeseman et al 8 pointed satisﬁability distribution problem sets separated regions problems solutions relatively easy solve problems unsatisﬁable relatively easy prove They conjectured phase transition border regions depends strongly critical value order parameter They instances phase transition harder solve instances Later empirical studies reconﬁrmed conjecture 4247 Ladkin Reinefeld 30 ﬁrst study phase transition IA instances They observed transition range 6 cid2 c n cid2 15 c cid3 05 c completion coeﬃcient 29 n number intervals However phase transition depends problem size n allow generation arbitrarily hard instances 36 In study Nebel 36 pointed average degree d critical parameter deﬁne phase transition IA instances independently number nodes He showed s ﬁxed 65 phase transition happens d 95 An d s model He observed runtime backtracking algorithm peaked d 95 s 65 As SAT SMT translation methods theoretically proved sound complete expected following properties true SATencoded SMTencoded IA instances The phase transition SATencoded SMTencoded instances happens critical value average degree parameter d original IA instances 1770 DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 Fig 14 The probability satisﬁability An d 65 500 instances data point ii The performance SAT solvers SATencoded instances proportionally similar performance temporal backtracking algorithms original IA instances iii The performance SMT solvers SMTencoded instances proportionally similar performance temporal backtracking algorithms original IA instances In order verify properties conducted similar experiment reported Nebels study 36 We ran NBTI NBTH IA instances generated previous section MiniSAT Yices respectively corresponding SATencoded SMTencoded instances All solvers timed hour As expected probability satisﬁability SATencoded SMTencoded instances prob ability satisﬁability original IA instances regardless translation method This illustrated Fig 14 shows phase transition happens d 95 s 65 regardless instance size representation These results consistent earlier work Nebel 36 However performance MiniSAT different SAT encodings signiﬁcantly different performance NBTI NBTH native IA representations As graphed Fig 15 runtime NBTI NBTH peaked phase transition point d 95 In contrast runtime peaks MiniSAT SAT instances shifted away phase transition Fig 16 shows median mean CPU time MiniSAT pointbased 1D support direct log SATencoded instances peaked d value 8 8 3 respectively In addition CPU time MiniSAT instances surrounding peaks relatively similar regardless SAT encoding scheme This result supported account performance MiniSAT intervalbased SAT instances Fig 17 graphs median mean CPU time MiniSAT corresponding intervalbased 1D support direct log SATencoded instances respectively Here runtime peaks MiniSAT shifted away phase transition pointbased SAT instances regardless SAT encoding scheme However CPU time MiniSAT intervalbased direct log instances peaked slightly different points comparison corresponding pointbased instances d equal 7 compared 8 4 compared 3 respectively Only runtime MiniSAT intervalbased 1D support instances remained pointbased instances peaking 8 A similar story develops look performance Yices SMTencoded instances Fig 18 graphs median mean CPU time Yices pointbased SMT instances Here runtime peaks Yices d 7 shifted away phase transition runtime peaks achieved MiniSAT d 8 pointbased 1D support direct SAT instances These results surprising contrast results previous studies phase transition random problems 8364547 Intuitively left phase transition solutions instance consequence easier instance solve However conjecture true SAT SMT encoding schemes Our empirical results clearly hard region instances signiﬁcantly time solve happen phase transition In contrast representation encoding problem instance plays important role determining hard region occur 9 An empirical comparison SAT SMT encodings From graphs Figs 1618 conclude A pointbased formulation method produces better results intervalbased formulation method regardless IA instances generated terms number nodes n average degree d average label size s SAT encoding employed ii The 1D support encoding scheme produces best results followed direct log encoding schemes regard IA instances generated terms number nodes n average degree d average label size s formulation method employed DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 1771 Fig 15 The performance NBTI NBTH native IA instances iii SAT encoding schemes produce better results SMT encoding scheme In particular performance Yices SMT instances worse performance MiniSAT SAT encodings pointbased interval based 1D support pointbased direct encodings better performance MiniSAT SAT encodings iv Among SAT encoding schemes considered pointbased 1D support encoding suitable scheme translate IA instances SAT formulae Fig 19 graphs median CPU time MiniSAT Yices respectively SAT SMT encodings IA instances different problem sizes These graphs closer look SAT SMT encodings affect performance hardest regions discussed previous sections From performance MiniSAT pointbased encoding scales better performance intervalbased encoding bigger problem instance bigger gap point versus interval performance lines plotted graphs Among SAT encodings performance MiniSAT point based 1D support instances scaled steadiest nearly linear having average runtime 836 seconds average runtime MiniSAT second best encoding intervalbased 1D support scheme 2116 seconds A50 8 65 The performance MiniSAT different SAT encodings ordered best worst follows pointbased 1D support PS intervalbased 1D support IS pointbased direct ID intervalbased direct ID pointbased log PL intervalbased log IL If account results pointbased SMT instances order clearly divided exact halves Yices performance SMT instances worse MiniSATs performance pointbased direct instances better MiniSATs performance intervalbased direct instances In summary results clearly demonstrate beneﬁt 1D support SAT encoding direct log SAT encodings SMT encoding 1772 DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 Fig 16 The performance MiniSAT pointbased 1D support direct log SATencoded instances It worth noting SMT solvers QFIDL QFRDL usually translate SMT formula eagerly lazily SAT formula pass DPLL SAT solver 13 Consequently question arises inferior performance Yices SMTencoded IA instances comparison MiniSAT SATencoded instances Yices derlying SAT engine performs signiﬁcantly worse MiniSAT In order test reran Yices pointbased 1D DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 1773 Fig 17 The performance MiniSAT intervalbased 1D support direct log SATencoded instances support SATencoded A50d65 instances Yices simply calling SAT engine solve CNF input formula15 Yices results SATencoded instances graphed Fig 20 performance corresponding SMTencoded instances MiniSAT SATencoded instances These graphs clearly Yices internal SAT solver identical performance MiniSAT 1D support SATencoded instances large difference 15 The developers Yices conﬁrmed email discussion Yices exclusively employ SAT engine solve pure CNF formula 1774 DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 Fig 18 The performance Yices pointbased SMTencoded instances Fig 19 The performance MiniSAT Yices SATencoded SMTencoded IA instances respectively The SMT key represents Yices All keys represent MiniSAT encodings P pointbased I intervalbased S support D direct L log DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 1775 Fig 20 The performance MiniSAT Yices SATencoded SMTencoded IA A50 d 65 instances The SMT key represents Yices SMTencoded instances Other keys represent MiniSAT Yices SATencoded instances M MiniSAT Y Yices PS pointbased 1D support Fig 21 The median mean number unit propagations performed MiniSAT pointbased SATencoded IA A45 d 65 instances The keys represent MiniSAT encodings P pointbased S support D direct L log performance Yices SMTencoded instances MiniSAT SATencoded instances use SMTencoding subsequent translation SMT SAT Although search trees number variables 1D support direct SATencoded instances size graphs Fig 12 clausetovariable ratios 1D support SATencoded instances signiﬁcantly smaller direct SATencoded instances This difference partly explains superior performance gained 1D support encoding direct encoding satisﬁable IA instances However MiniSAT gained signif icant performance boost solving unsatisﬁable 1D support SATencoded instances comparison performance solving unsatisﬁable direct SATencoded instances despite previous studies 891934 showing smaller clausetovariable ratio CNF formula harder prove unsatisﬁability formula This motivated ﬁnd explanation observations Theoretically shown DPLL solver unit propagation support SATencoded instance maintains arc consistency search 18 direct SATencoded instances maintains weaker form arc consistency equivalent forward checking CSP solver 55 However results limited SAT instances translated binary CSPs IAtoCSP formulations produce ternary CSPs According Bessière et al 7 unit propagation 1D support direct SATencoded IA instances enforce relational 2arcconsistency relational 3arcconsistency respectively Although experiments conﬁrmed support encoding better direct encoding ternary CSPs best knowledge theoretical comparison encodings ternary CSPs From examination MiniSATs use unit propagation branching heuristic explanations superior performance supportencoded instances Firstly direct scheme replaces support clause xu ik 1776 DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 Fig 22 The median number decisions conﬂict clauses produced MiniSAT pointbased SATencoded IA A45 d 65 instances The keys represent MiniSAT encodings P pointbased S support D direct L log j xw1 j xwm series nc conﬂict clauses xu ik w xv j nc varies 1 12 conﬂict clauses kj meaning unit propagation direct SATencoded instances work support SATencoded instances As unit propagation accounts 90 run time DPLL solver 1235 solvers beneﬁt signiﬁcantly support encoding This conﬁrmed plots median mean number unit propagations MiniSAT support direct SATencoded instances shown Fig 21 xv kj x cid17 l Secondly MiniSAT selects variable highest number occurrences recent conﬂict clauses split ik xv kj series conﬂict clauses xu w search tree Consequently variables xu j higher chance selection branching node variables series In contrast variables correspond ing support clauses treated equally Furthermore MiniSAT branches negative value variable ﬁrst Consequently MiniSAT direct SATencoded instances effective eﬃcient enforcing path consistency constraints constraints 1 4 support SATencoded instances In words MiniSAT gains information guidance direct encoding support encoding This illustrated Fig 22 shows MiniSAT decisions produced conﬂict clauses solving direct SATencoded instances support SATencoded instances Note higher number conﬂict clauses generated higher number times MiniSAT needs backtrack xv kj x ik cid17 l We altered MiniSAT branches positive value branching variable ﬁrst meaning strictly enforce path consistency constraints direct SATencoded IA instances The results Fig 23 superiority branchpositiveﬁrst strategy supporting conjecture original MiniSAT branch negativeﬁrst policy suitable direct SATencoded IA instances Finally log SATencoded encoding scheme produces instances O n s log s times smaller schemes terms number variables 24 bitwise representation variables loosens relationship variables constraints Consequently SAT solver spend time correcting values bitwise variables log encoding direct encoding This conﬁrmed large number decisions MiniSAT solving log SATencoded instances shown Fig 22 10 An empirical evaluation SATSMT versus existing approaches As results previous sections provided encouraging evidence practical feasibility SATSMT approaches decided perform thorough evaluation best performing versions approach MiniSAT pointbased 1D support SAT instances Yices pointbased SMT instances comparison wellknown existing approaches NBTH native IA instances TSAT endpoint ordering model We generated benchmark test set An d 65 IA instances varying average degree d 1 3 5 7 8 85 9 95 10 105 11 12 14 16 18 20 values n varied 60 100 steps 5 We generated 100 stances nd data point obtain set 16 9 100 14400 test instances This test set allows closer look performance different approaches phase transition providing general view entire distribution We ran NBTH instances MiniSAT Yices corresponding pointbased 1D support SAT instances pointbased SMT instances respectively All solvers timed hour n 80 hours n cid3 80 Fig 24 plots median mean CPU time MiniSAT Yices NBTH benchmark instances Here MiniSAT strongly dominates Yices NBTH problem size grows In particular CPU time MiniSAT DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 1777 Fig 23 The headtohead comparison effects branchnegativeﬁrst branchpositiveﬁrst policies performance MiniSAT point based direct SATencoded IA A50 d 65 instances 500 instances d data point d 120 n 100 30 times better Yices terms median mean time 10 times better NBTH terms mean time In addition test instances bigger n cid3 80 median mean time curves Yices NBTH exponentially increasing MiniSAT curves remained nearly polynomial A closer look results produced evidence support conclusion hour time limit MiniSAT unable solve 1 entire benchmark set 14400 instances instance took MiniSAT extra 20792 seconds solve 323 1774 instances remained unsolved NBTH Yices respectively When time limit raised hours NBTH Yices unable solve 103 812 instances respectively This shows performance MiniSAT scaled signiﬁcantly better NBTH Yices extremely hard instances The detailed probabilities failure Yices NBTH graphed Fig 25 It noted average CPU time MiniSAT signiﬁcantly better NBTH graphed Fig 24 median CPU time MiniSAT slightly better This observation led conjecture MiniSAT performs better NBTH hard instances A thorough analysis results revealed stances NBTH failed solve hour limit hour limit fall area surrounding phase transition Fig 25 This conjecture supported look runtime distribution MiniSAT NBTH instances range d 8 11 Fig 26 These graphs conﬁrm performance MiniSAT scales better methods number time intervals test instances increases The performance TSAT satisﬁable instances ﬁrst shown better NBTH 48 result ini tially conﬁrmed preliminary study 38 In investigation ran TSAT 3985 hard satisﬁable instances instances range d 8 11 generated study order obtain better view relative perfor mance approaches NBTH TSAT As TSAT local search algorithm ran TSAT 100 times satisﬁable instance timeout hour n 80 hours n cid3 80 1778 DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 Fig 24 The CPU time MiniSAT Yices NBTH pointbased 1D support SAT instances pointbased SMT instances native IA instances respectively We plotted performance TSAT performance MiniSAT Yices NBTH extracted pre vious experiment Fig 27 These results emphasise superior performance SAT approach existing approaches showed reversal performance TSAT NBTH NBTH appearing convincingly better TSAT This reversal explained relatively small number instances preliminary study DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 1779 Fig 25 The probability failure Yices NBTH pointbased SMT instances native IA instances respectively 11 An empirical evaluation SAT versus SMT structured SMT problems So far shown SAT approach signiﬁcantly outperforms approaches solving qualitative temporal problems As discussed Section 61 followed common trend IArelated research 29313653 limited benchmarks randomly generated IA problems However randomly generated problems useful features controllable size hardness lack structure nonrandom instances For reason decided extend benchmark set realistic diamonds instances16 These problems generated Ofer Strichman17 later translated SMTLIB format Albert Oliveras Each diamonds instance speciﬁed n s n number diamonds s number edges diamond divided 2 A diamonds instance encoded SMT formula conjunction disjunct clauses clause contains elements following form cid3 b 1 cid3 b 1 Given variables b integer numbers translation instances qualitative temporal SAT encodings straightforward task element equal b cid2 b respectively The left graph Fig 28 compares performance seconds MiniSAT Yices diamonds instances n varies 10 18 s varies 2 10 MiniSAT run pointbased 1D support encodings instances whilst Yices run original SMT encodings The results shows SAT approach dominates n 2 instances biggest n 3 instances outperformed Yices instances majority test set In addition SAT encodings diamonds n 10 instances big MiniSAT handle n 12 16 The majority QFIDL benchmarks SMTLIB repository httpwwwsatliborg require reasoning metric information suitable study 17 httpiew3technionacilHomeUsersofersphtml 1780 DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 Fig 26 The runtime distribution MiniSAT Yices NBTH An d 65 instances d 811 Fig 27 The results MiniSAT Yices NBTH TSAT satisﬁable An d 65 instances d 811 However closer inspection diamonds problem set provided solution size blowup problem instances contain long chains inequalities form cid2 c1 cid2 c2 cid2 cid2 ck cid2 b c1 c2 ck appear inequalities Our conjecture original intention ci variables enforce metric distance constraint b However constraints appear weak solver freely set distance b number cid3 0 In addition constraint redundant DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 1781 Fig 28 A comparison performance MiniSAT Yices original processed SMTLIB diamonds problems qualitative point view b allow unlimited number ci b It inclusion ci variables diamonds instances makes size corresponding SAT encoding grow exponentially requirement extra clauses maintain consistency Once redundant ci variables removed size SAT encoded diamonds instances greatly reduced leading signiﬁcant boost performance MiniSAT This shown right graph Fig 28 MiniSAT clearly dominates Yices majority instances n 11 12 Conclusions future work In conclusion proposed different methods formulate IA networks SAT formulae point based method formulate IA networks SMT instances We provided theoretical proofs completeness transformation techniques Although empirical results conﬁrmed phase transition IA networks mapped directly SAT SMT encodings showed hard regions problems surprisingly shifted away phase transition areas transformation SAT SMT Evaluating effects encodings pointbased 1D support SAT scheme best seven different encoding schemes examined Our results revealed MiniSAT combined pointbased 1D support SAT scheme solve IA instances signiﬁcantly faster existing IA solvers working equivalent native IA networks In future work anticipate performance SATbased approach improved exploiting special structure IA problems manner analogous work TSAT 48 In addition plan extend SATbased approach cover INDU networks 43 enable qualitative reasoning duration pairs intervals The possibility opens integrating approach temporal reasoning known real world problems planning Given success SAT solvers real world domains work promises expand reach temporal reasoning approaches IA encompass larger practical problems Acknowledgements We thankfully acknowledge ﬁnancial support NICTA Queensland government NICTA funded Australian Government represented Department Broadband Communications Digital Economy Australian Research Council ICT Centre Excellence program References 1 JF Allen Maintaining knowledge temporal intervals Communications ACM 26 1983 832843 2 Anbulagan D Nghia Pham J Slaney A Sattar Old resolution meets modern SLS Proceedings Twentieth National Conference Artiﬁcial Intelligence AAAI05 2005 pp 354359 3 A Armando C Castellini E Giunchiglia SATbased procedures temporal reasoning Proceedings Fifth European Conference Planning 2000 pp 97108 4 A Armando C Castellini E Giunchiglia M Idini M Maratea TSAT An open platform satisﬁability modulo theories Proceedings Second Workshop Pragmatics Decision Procedures Automated Reasoning PDPAR04 2004 5 A Armando C Castellini E Giunchiglia M Maratea A SATbased decision procedure boolean combination difference constraints Pro ceedings Seventh International Conference Theory Applications Satisﬁability Testing SAT 2004 Selected Revised Papers Lecture Notes Computer Science vol 3542 2004 pp 1629 6 R Béjar F Manyà Solving round robin problem propositional logic Proceedings Seventeenth National Conference Artiﬁcial Intelligence AAAI00 2000 pp 262266 7 C Bessière E Hebrard T Walsh Local consistencies SAT Proceedings Sixth International Conference Theory Applications Satisﬁability Testing SAT 2003 Selected Revised Papers Lecture Notes Computer Science vol 2919 2003 pp 299314 8 P Cheeseman B Kanefsky WM Taylor Where hard problems Proceedings Twelfth International Joint Conference Artiﬁcial Intelligence IJCAI91 1991 pp 331337 1782 DN Pham et al Artiﬁcial Intelligence 172 2008 17521782 9 JM Crawford LD Auton Experimental results crossover point random 3SAT Artiﬁcial Intelligence 81 12 1996 3157 10 R Dechter Constraint Processing Morgan Kaufmann San Francisco 2003 11 R Dechter I Meiri J Pearl Temporal constraint networks Artiﬁcial Intelligence 49 13 1991 6195 12 HE Dixon ML Ginsberg AJ Parkes Generalizing Boolean satisﬁability I Background survey existing work Journal Artiﬁcial Intelligence Research 21 2004 193243 13 B Dutertre L Mendonça Moura A fast lineararithmetic solver DPLLT Proceedings Eighteenth International Conference Computer Aided Veriﬁcation 2006 pp 8194 14 N Eén N Sörensson An extensible SAT solver Proceedings Sixth International Conference Theory Applications Satisﬁability Testing SAT03 Selected Revised Papers Lecture Notes Computer Science vol 2919 2003 pp 502518 15 EC Freuder Synthesizing constraint expressions Communication ACM 21 11 1978 958966 16 EC Freuder A suﬃcient condition backtrackfree search Journal ACM 29 1 1982 2432 17 AM Frisch TJ Peugniez Solving nonBoolean satisﬁability problems stochastic local search Proceedings Seventeenth International Joint Conference Artiﬁcial Intelligence IJCAI01 2001 pp 282290 18 IP Gent Arc consistency SAT Proceedings Fifteenth European Conference Artiﬁcial Intelligence ECAI02 2002 pp 121125 19 IP Gent T Walsh The SAT phase transition Proceedings Eleventh European Conference Artiﬁcial Intelligence ECAI94 1994 pp 105 109 20 K Ghiathi G GhassemSani Using satisﬁability temporal planning WSEAS Transactions Computers 3 4 2004 963969 21 MC Golumbic R Shamir Complexity algorithms reasoning time A graphtheoretic approach Journal ACM 1993 11081133 22 RM Haralick GL Elliott Increasing tree search eﬃciency constraint satisfaction problems Artiﬁcial Intelligence 14 3 1980 263313 23 JN Hooker Needed empirical science algorithms Operations Research 42 2 1994 201212 24 HH Hoos SATencodings search space structure local search performance Proceedings Sixteenth International Joint Conference Artiﬁcial Intelligence IJCAI99 1999 pp 296302 25 F Hutter DAD Tompkins HH Hoos Scaling probabilistic smoothing Eﬃcient dynamic local search SAT Proceedings Eighth International Conference Principles Practice Constraint Programming CP02 2002 pp 233248 26 H Kautz D McAllester B Selman Encoding plans propositional logic Proceedings Fifth International Conference Principles Knowl edge Representation Reasoning KR96 1996 pp 374384 27 H Kautz Y Ruan D Achlioptas C Gomes B Selman M Stickel Balance ﬁltering structured satisﬁable problems Proceedings Seventeenth International Joint Conference Artiﬁcial Intelligence IJCAI01 2001 pp 351358 28 H Kautz B Selman Pushing envelope Planning propositional logic stochastic search Proceedings Thirteenth National Conference Artiﬁcial Intelligence AAAI96 1996 pp 11941201 29 P Ladkin A Reinefeld Effective solution qualitative interval constraint problems Artiﬁcial Intelligence 57 1 1992 105124 30 P Ladkin A Reinefeld A symbolic approach interval constraint problems Artiﬁcial Intelligence Symbolic Mathematical Computation 1993 pp 6584 31 P Ladkin A Reinefeld Fast algebraic methods interval constraint problems Annals Mathematics Artiﬁcial Intelligence 19 1997 383411 32 CM Li Anbulagan Lookahead versus lookback satisﬁability problems Proceedings Third International Conference Principles Practice Constraint Programming CP97 1997 pp 341355 33 AK Mackworth Consistency networks relations Artiﬁcial Intelligence 8 1 1977 99118 34 D Mitchell B Selman H Levesque Hard easy distributions SAT problems Proceedings Tenth National Conference Artiﬁcial Intelligence AAAI92 1992 pp 459465 35 MW Moskewicz CF Madigan Y Zhao L Zhang S Malik Chaff Engineering eﬃcient SAT solver Proceedings 38th Design Automation Conference DAC01 2001 pp 530535 36 B Nebel Solving hard qualitative temporal reasoning problems Evaluating eﬃciency ORDHorn class Constraints 1 3 1997 175190 37 B Nebel HJ Bürckert Reasoning temporal relations A maximal tractable subclass Allens Interval Algebra Journal ACM 42 1 1995 4366 38 D Nghia Pham J Thornton A Sattar Modelling solving temporal reasoning satisﬁability Proceedings 4th International Workshop Modelling Reformulating Constraint Satisfaction Problems 2005 pp 117131 39 D Nghia Pham J Thornton A Sattar Towards eﬃcient SAT encoding temporal reasoning Proceedings Twelfth International Conference Principles Practice Constraint Programming CP06 2006 pp 421436 40 D Nghia Pham J Thornton A Sattar A Ishtaiwi SATbased versus CSPbased constraint weighting satisﬁability Proceedings Twentieth National Conference Artiﬁcial Intelligence AAAI05 2005 pp 455460 41 S Prestwich Local search SATencoded colouring problems Proceedings Sixth International Conference Theory Applications Satisﬁability Testing SAT03 Selected Revised Papers Lecture Notes Computer Science vol 2919 2003 pp 105119 42 P Prosser An empirical study phase transitions binary constraint satisfaction problems Artiﬁcial Intelligence 81 12 1996 81109 43 AK Pujari G Vijaya Kumari A Sattar INDU An interval duration network Proceedings Twelfth Australian Joint Conference Artiﬁcial Intelligence 1999 pp 291303 44 S Ranise C Tinelli The Satisﬁability Modulo Theories Library SMTLIB wwwSMTLIBorg 2006 45 J Renz B Nebel Eﬃcient methods qualitative spatial reasoning Journal Artiﬁcial Intelligence Research 15 2001 289318 46 B Selman H Kautz D McAllester Ten challenges propositional reasoning search Proceedings Fifteenth International Joint Conference Artiﬁcial Intelligence IJCAI97 1997 pp 5054 47 BM Smith ME Dyer Locating phase transition binary constraint satisfaction problems Artiﬁcial Intelligence 81 12 1996 155181 48 J Thornton M Beaumont A Sattar M Maher A local search approach modelling solving Interval Algebra problems Journal Logic Computation 14 1 2004 93112 49 J Thornton D Nghia Pham S Bain V Ferreira Jr Additive versus multiplicative clause weighting SAT Proceedings Twentieth National Conference Artiﬁcial Intelligence AAAI04 2004 pp 191196 50 I Tsamardinos M Pollack Eﬃcient solution techniques disjunctive temporal reasoning problems Artiﬁcial Intelligence 151 1 2003 4389 51 P van Beek Reasoning qualitative temporal information Artiﬁcial Intelligence 58 1992 297326 52 P van Beek R Cohen Exact approximate reasoning temporal relations Computational Intelligence 6 1990 132144 53 P van Beek DW Manchak The design experimental analysis algorithms temporal reasoning Journal Artiﬁcial Intelligence Research 4 1996 118 54 M Vilain H Kautz Constraint propagation algorithms temporal reasoning Proceedings Fifth National Conference Artiﬁcial Intelligence AAAI86 1986 pp 377382 55 T Walsh SAT v CSP Proceedings Sixth International Conference Principles Practice Constraint Programming CP00 2000 pp 441 456