Artiﬁcial Intelligence 175 2011 11531179 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Decision making multiple objectives GAI networks C Gonzales P Perny JPh Dubus LIP6 Université Pierre et Marie Curie case 169 4 place jussieu 75005 Paris France r t c l e n f o b s t r c t Article history Received 28 February 2009 Received revised form 20 July 2010 Accepted 15 September 2010 Available online 2 December 2010 Keywords Graphical models GAI decomposable utility Preference representation Multiobjective optimization Multiagent decision making Compromise search Fairness 1 Introduction This paper deals preference representation combinatorial domains preference based recommendation context multicriteria multiagent decision making The alternatives decision problem seen elements product set attributes preferences solutions represented generalized additive decomposable GAI utility functions modeling individual preferences criteria Thanks decomposability utility vectors attached solutions compiled graphical structure closely related junction trees socalled GAI network Using structure present preferencebased search algorithms multicriteria multiagent decision making Although models nondecomposable attributes actually GAI networks useful determine preferred alternatives provided preferences compatible Pareto dominance We ﬁrst present algorithms determination Paretooptimal elements Then second algorithms adapted directly focus preferred solutions We provide results numerical tests showing practical eﬃciency procedures contexts compromise search fair optimization multicriteria multiagent problems 2010 Elsevier BV All rights reserved The complexity decision problems organizations importance issues raised increasing need explain justify decision led decision makers seek scientiﬁc support preparation decisions For years rational decision making understood solving singleobjective optimization problem optimal deci sion implicitly deﬁned feasible solution minimizing cost function technical constraints However practice decision making organizations shown limits formulations First diversity subjectivity human preferences requires distinguishing objective description alternatives choice problem value perceived individuals In decision theory alternatives seen multiattribute items characterized tuple product set attributes domains preferences individual encoded utility function deﬁned multiattribute space measuring relative attractiveness tuple Hence objectives individuals form multiattribute utility functions maximized Typically multiagent decision problem deal utility functions optimized simultaneously Since individual utilities gen erally commensurate constructing overall utility function gathering relevant aspects possible Hence problem reduce classical singleobjective optimization task solve multiobjective problem Moreover single decision maker points views considered preference analysis leading deﬁnition criteria Rationality decision making generally matter costs reduction In practice signiﬁcant aspects reducible costs included analysis outcomes Corresponding author Email addresses kavehrivervalleycom C Gonzales patricepernylip6fr P Perny cvrrivervalleycom JPh Dubus 00043702 matter 2010 Elsevier BV All rights reserved doi101016jartint201011020 1154 C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 alternatives thought multidimensional space This case elaboration public policies different aspects ecology environment education health security public acceptability considered evaluation process This case individual decision consumers For example choosing new car family individual look cost consider multiattribute utility functions concerning security car brake airbags velocity speed acceleration space boot size environmental aspects pollution aesthetics color shape brand All observations motivated emergence multicriteria methodologies preference modeling human decision support 14 entire stream research steadily developed years As human decision making automated decision making complex environment requires optimization procedures involving multiple objectives This case computers planning actions autonomous agents ganizing workﬂow production chains Various examples mentioned web search 5 ecommerce resource allocation problems In decision actually characterized combination lo cal decisions providing set alternatives combinatorial structure This explains growing multiobjective combinatorial optimization Besides explicit introduction possibly conﬂicting objectives evaluation process necessity exploring large size solution spaces additional source complexity This motivated development AI community preference representation languages aiming simplifying preference handling decision making combinatorial domains As far utility functions concerned works compact representation aim exploiting preference independence attributes decompose utility tuple sum smaller utility factors Different decomposition models utilities developed model preferences The widely assumes special kind independence attributes called mutual preferential independence It ensures preferences representable additively decomposable utility 67 Such decomposability makes elicitation process query optimizations fast simple However practice preferential independence fail hold rules interaction attributes Generalizations proposed literature signiﬁcantly increase descriptive power additive utilities Among multilinear utilities 2 GAI generalized additive independence decompositions 89 allow general interactions attributes 7 preserving decomposability The endow CP nets utilities UCP nets uncertainty 10 certainty 11 GAI decomposable utilities compiled graphical structures closely related junction trees socalled GAI networks They exploited perform classical optimization tasks ﬁnd tuple maximal utility simple collectdistribute scheme essentially similar Bayes net community variable elimination algorithms CSP 1215 In order extend use GAI nets multiobjective optimization tasks investigate potential GAI models representing solving multiobjective optimization problems As soon multiple criteria utility functions considered evaluation solution notion optimality straightforward Among optimality criteria concept Pareto optimality eﬃciency widely A solution said Paretooptimal eﬃcient improved criterion depreciated Pareto optimality natural require information relative importance criteria preliminary ﬁlter circumscribe set reasonable solutions multiobjective problems However combinatorial optimization problems complete enumeration Paretooptimal solutions infeasible practice 1618 For reason real applications people facing complexity resort artiﬁcial simpliﬁca tions problem focusing important criterion route planning assistants performing prior linear aggregation criteria single objective version problem generating samples good solutions heuristics case provide formal guarantees quality solutions In paper assume objective represented GAI decomposable utility function deﬁned multiattribute space describing items In Section 2 recalling basic deﬁnitions related GAI nets possible represent vectorvalued utility functions compact form facilitating preference handling multiobjective decisionmaking problems In Section 3 present exact algorithms exploiting structure GAI net determination Paretooptimal elements In Section 4 propose reﬁnement second algorithm aiming focusing search speciﬁc compromise solutions Pareto set We provide exact algorithms preferencebased search preference models The potential approach illustrated context fair multiagent optimization context compromise search multicriteria optimization Finally Section 5 present numerical tests showing practical feasibility proposed approach instances multiobjective combinatorial problems 2 Multidimensional GAI nets We assume alternatives characterized n attributes x1 xn taking values ﬁnite domains X1 Xn respectively Hence alternatives seen elements product set domains X X1 Xn In sequel N 1 n denote set attributes indices By abuse notation set Y N XY refer iY Xi xY refer projection x X XY Cartesian product Xi Y XY tuple formed xi Y We consider binary relation cid2 X actually weak order Essentially x cid2 y means x good y Symbol cid5 refers asymmetric cid2 symmetric cid2 C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 1155 Under mild hypotheses 19 shown cid2 representable utility function function u X cid7 Z st x cid2 y ux cid3 u y x y X Actually algorithms proposed paper work realvalued utility functions Our assumption utilities integervalued exploited proofs complexity results As preferences speciﬁc individual utilities elicited agent impossible combinatorial nature X Moreover recommendation multiple regular users storing explicitly user utility element X prohibitive Fortunately agents preferences usually underlying structure induced independencies attributes substantially decreases elicitation effort memory needed store preferences The simplest case 6 obtained preferences X X1 Xn representable i1 uixi x x1 xn X This model requires store uixi xi Xi N additive utility ux effortlessly elicited However decomposition convenient inevitably rules interaction attributes far realistic When preferences complex elaborate models needed Some generalizations additive utilities investigated For instance utility independence Xi leads sophisticated form called multilinear utility 7 Such utilities general additive ones cope kinds interactions attributes To increase descriptive power models GAI generalized additive independence decompositions introduced 20 allow general interactions attributes 79821 preserving decomposability cid3 n 21 GAI models GAI nets GAI decomposition generalization additive decomposition subutilities ui allowed deﬁned overlapping factors As include additive multilinear decompositions special cases They formally deﬁned follows Deﬁnition 1 Let C1 Ck subsets N N wrt XCi iff exist functions ui XCi cid4 k cid7 Z i1 Ci A utility u representing cid2 X GAIdecomposable ux1 xn kcid5 i1 uixCi x x1 xn X Example 1 Utility function ua b c d e f g u1a b u2b c d u3c e u4b d f u5b g deﬁned A B B D F C D E F G GAIdecomposable utility XC1 XC5 B C D XC3 A B XC2 C E XC4 B G GAI decompositions represented graphical structures GAI networks 921 essentially similar junction graphs Bayesian network literature 2223 Deﬁnition 2 Let ux1 xn rected graph G C E satisfying following properties i1 uixCi GAI utility function X A GAI network representing u undi cid3 k Vertices XCi called cliques To vertex XCi associated corresponding subu Property 1 C XC1 XCk tility factor ui utility function u Property 2 XCi XC j E Ci C j cid12 Edges XCi XC j labeled XSi j Si j Ci C j XSi j separator Separator XSi j corresponds attributes cliques XCi XC j common Property 3 XCi XC j Ci C j Si j cid12 exists path XCi XC j G clique XCh path Si j Ch running intersection property called In rest paper XCi denote cliques GAI network XSi j denote separator intersection cliques XCi XC j By abuse notation XSii refer clique XCi Cliques usually drawn ellipses separators rectangles For GAI decomposition Deﬁnition 2 cliques GAI network sets attributes subutilities The edges network represent intersections subsets attributes As intersections commutative GAI network undirected graph Note contrasts UCP nets relationships vertices network correspond conditional dependencies justifying use directed graphs UCP nets For clique XCi Adj XCi refer set cliques adjacent XCi In paper shall interested GAI trees As shall restrictive general GAI networks compiled GAI trees The set edges GAI network determined algorithm preserving running intersection property Bayesian network literature matter 23 Fig 1 shows possible GAI network representing GAI utility Example 1 Note network unique representation utility function 1156 C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 Fig 1 A GAI tree Fig 2 The GAI trees representing u1 u2 22 Handling multiple objectives Fig 3 The Markov networks G 1 u1 G 2 u2 Consider ﬁnite set objectives M 1 m assume solution x X characterized utility ui X Z ith utility function This function measures relative utility vector u1x umx Zm alternatives respect ith point view criterion agent considered problem Hence comparison alternatives reduces utility vectors instead comparing alternatives x y numbers assigned utility u preceding subsection compare vectors u1x umx u1 y um y The ui functions X Z Hence separately considered single utility functions Assuming objective corresponds given agent ui corresponds utility function representing agents preferences vectors u1x umx correspond utility group agents Now ui utility function given agent preceding subsection GAI decomposable Thus assume ui decomposable according GAI net given Fig 1 Then M 2b c d ui uia b c d e f g ui 4b d f ui 1a b ui 3c e ui 5b g Note values ui j differ agent utilities stored GAI net 2 M clique BC D Hence 1 M clique A B store functions ui Fig 1 follows store functions ui GAI networks described Section 21 easily adapted multiobjective case The key property enables generalization multiobjective case fact subutilities ui j deﬁned attribute sets XC j 1 deﬁned A B stored clique included clique GAI net For instance ui containing attributes A B clique A B possible choice Let consider case agents preferences decomposable according GAI network For simplicity illustrate point agentobjective case m 2 So suppose u1 u2 decomposed follows u1a b c d e f g u1 u2a b c d e f g u2 1a b u1 1a c u2 2b g u1 2b u2 3d g u1 4c d f u1 3d g u2 4d e f u2 5e 5c e 1 These decompositions correspond GAI networks Fig 2 Note trees store u1 u2 left graph unable store u2 1a b We need construct GAI tree contain u1 u2 To construct new GAI network ﬁrst create graph ui called Markov network In graph node corresponds attribute Xi nodes cid7 Z j Ch In words Xi X j connected edge exists subutility uh XCh set attributes uh deﬁned contains Xi X j Hence Markov network subutility uh corresponds clique complete subgraph Fig 3 displays Markov networks u1 u2 described Eq 1 4d e f right unable store u1 Now create union graphs Markov network containing edge nodes G 1 andor G 2 contains edge The union G 1 G 2 represented Fig 4a Next graph triangulated C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 1157 Fig 4 The creation GAI net u1 u2 triangulation technique 2426 Finally triangulated graph mapped GAI network maximal complete subgraph corresponds clique GAI network In edges added algorithm preserving running intersection property 23 In 27 Rose guarantees cliques GAI net correspond maximal complete subgraphs triangulated Markov network GAI net tree Hence given set u1 um utilities having GAI decomposition X global GAI tree cid7 Z 1 m constructed store utilities In sequel instead storing m utilities ui clique XC j chose alternative equivalent representation store vectorvalued utility u j XC j u jxC j u1 j xC j um j xC j j XC j cid7 Zm 3 Pareto search 31 Problem formulation The set utility vectors attached solutions X denoted U We recall deﬁnitions related dominance optimality multiobjective optimization Deﬁnition 3 The weak Pareto dominance relation deﬁned utility vectors Zm u cid2P v M ui cid3 v Deﬁnition 4 The Pareto dominance relation cid5P deﬁned asymmetric cid2P u cid5P v u cid2P v notv cid2P u Deﬁnition 5 Any utility vector u U said nondominated U Paretooptimal cid2v U v cid5P u The set nondominated vectors U denoted NDU referred Pareto set The problem determining Pareto set X stated follows Paretooptimal elements PO Input product set ﬁnite domains X X1 Xn n ﬁnite m GAI utility functions ui X Z 1 m m ﬁnite Goal determine entire set nondominated vectors U utility vector u NDU corresponding tuple xu X This problem generally intractable large size instances Even m 2 happen size Pareto set grows exponentially number attributes shown following example Example 2 Consider instance PO objectives m 2 set X j 1 n Assume objectives additive utility functions deﬁned Boolean vector x x1 xn X uix cid3 j x j 2 j11 x j jx j 1 2 ui n j1 ui cid3 cid3 j1 2 j1 Then x 0 1n u1x n n 2n 1 So exists 2n different Boolean vectors X distinct images utility space located line characterized equation u1 u2 2n 1 This line orthogonal vector 1 1 proves vectors Paretooptimal Here NDU U j1 2 j11 x j u1x u2x j marginal utility function deﬁned X j u1 j1 X j X j 0 1 j1 2 j1x j u2x j x j 2 j1x j u2 cid3 n cid2 n Although pathological example shows determination entire Pareto set induce prohibitive run times practice large size instances criteria Numerical tests presented Section 5 conﬁrm point We establish complexity result concerning problem PO proofs given Appendix A Proposition 1 As soon Xi cid3 2 N m cid3 2 deciding exists tuple X utility vector weakly Pareto dominates given utility vector u Zm NPcomplete decision problem referred problem P u sequel 1158 C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 32 Multiobjective optimization algorithms Despite worst case complexity problem PO expect solve real instances reasonable size admissible times To end introduce solution algorithms PO based message propagation schemes GAI network For clarity reasons ﬁrst present variable elimination PO algorithm processes vectors given clique removing GAI network In subsections consider bestﬁrst variations algorithm eﬃcient preferencebased search 321 A variable elimination algorithm The algorithm described direct application variable elimination determine Pareto set Its principle CSP 28 The algorithm extensively relies following proposition corollaries Proposition 2 Let D E partition N Assume utility u X cid7 Zm u1 XD cid7 Zm u2 XE cid7 Zm cid6cid7 unambiguously refers pointwise addition vectors Then cid8cid9 cid8cid9 cid6cid7 additively decomposable u u1 u2 cid4 ND u2xE xE XE 2 NDU ND u1xD xD XD sets V W vectors Zm V cid4 W deﬁned V cid4 W v w v V w W In words undominated utility vectors U result addition undominated utility vector subset XD undominated utility vector subset XE For instance u A B cid7 Z decomposable u1 A u2B u1 u2 deﬁned u2 b1 u1 a1 a2 3 4 4 2 2 3 a3 b2 3 5 6 3 3 3 b3 Then NDu1ai u1a1 3 4 u1a2 4 2 NDu2bi u2b1 3 5 u2b2 6 3 composed operator cid4 produce following set cid7 cid8 ua1 b1 6 9 ua1 b2 9 7 ua2 b1 7 7 ua2 b2 10 5 Therefore NDU ua1 b1 ua1 b2 ua2 b2 Note Pareto element involves u1a3 u2b3 domi nated NDu1ai NDu2bi respectively As consequence u additively decomposable eﬃcient procedure determine NDU ﬁrst determine independently NDuxD xD XD NDuxE xE XE sumup vectors ﬁnally undominated resulting vectors Corollary 1 Let G GAI tree cliques XC1 XC2 separator XS12 Let D1 C1S12 D2 C2S12 Di indices attributes appear Ci C3i words appear separator Then cid10 cid6 cid6cid7 NDU ND u1xD1 xS12 xD1 xS12 XS12 cid8cid9 cid6cid7 XD1 cid4 ND u2xD2 xS12 xD2 XD2 cid8cid9cid9 In words ﬁxed value xS12 XS12 utility vector u1 yD1 xS12 Pareto dominated vector u1xD1 xS12 deﬁned value separator combination u1 yD1 xS12 vector u2xD2 xS12 result vector NDU Hence determine NDU ﬁrst determine undominated vectors type u1xD1 xS12 u2xD2 xS12 sum ﬁxed value xS12 undominated Corollary 2 Let G C E GAI network C XC1 XCk XCir1 sets cliques separator XSi j let D XCik let XSi j separator Let XCi1 Si j E cid13cid14cid14 cid4 k tr1 Cit cid4 r t1 Cit XCir Si j Then NDU cid10 xSi j XSi j cid11 cid11cid12 ND rcid5 t1 utxCit xD XD cid4 ND utxCit xE XE cid13cid14 cid11cid12 kcid5 tr1 In words determine NDU suﬃcient select separator compute ﬁxed value xSi j separator undominated utility vectors separator sumup vectors Finally gather vectors values xSi j undominated ones Corollary 2 exploited recursively compute Pareto set U consider GAI network Fig 5 subutility tables displayed corresponding clique The overall utility function u A B C D E F G decomposable u1 A B u2C D u3 A C E u4C E F u5E G Using Corollary 2 C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 1159 Fig 5 The subutility tables example Fig 6 The messages Mi cid4 A separator A conclude vectors NDU result sum vectors u2 u3 vectors u1 A B undominated ﬁxed values A Send message M A separator A Fig 6 Similarly Corollary 2 separator C resp E vectors u2C D resp u5E G undominated ﬁxed values C resp E lead vectors NDU Send vectors message MC separator C message ME separator E respectively Now apply Corollary 2 separator C E vectors NDU derive undominated vectors u1 u2 u3 ﬁxed values C E But know vectors u1 resp u2 dominated ﬁxed values A resp C vector NDU As consequence undominated vectors u1 u2 u3 ﬁxed values C E determined ﬁrst computing possible vectors u1 u2 u3 vectors u1 u2 restricted M A MC respectively keeping value C E undominated ones In words compute MC E c e ND M Aa cid4 u2a c e cid4 MC c c e C E This results overall separators message MC E MC E c e c e C E Now remains combine vectors MC E ME u4C E F MC E c e cid4 u4c e f cid4 ME e undominated ones Pareto set NDU ND Indeed combination corresponds combination possible vectors ui known NDU In end NDU ua1b1c1d1e2 f 2 g2 15 25 ua1b2c1d1e2 f 2 g2 22 22 ua1b2c1d2e2 f 2 g2 24 14 ua2b2c1d1e2 f 2 g2 16 24 Note gain resulting application Corollary 2 instance computing message MC E needed 40 additions 16 additions compute M A cid4 MC 4 vectors removed dominated 24 additions combine 12 remaining vectors u3 instead 72 additions computed u1 u2 MC E c e cid4 u4c e f cid4 ME e required 8 u3 A B C D E Similarly computing NDU ND additions compute u4c e f cid4 ME e 30 additions compute addition result message MC E Overall computed 78 additions instead 298 needed computed u Cartesian product X The procedure described justiﬁes collect algorithm clique C E F collects information neighbors messages Mi compute Pareto set To produce messages neighbors collect necessary information neighbors This results function Pareto described However deﬁne algorithm ones conveniently work directly subutility vectors labels ce f CEF ce f CEF cid4 cid4 Deﬁnition 6 A label triple cid15v xC XSi j XSi j separator GAI network cid16 v vector Zm xC XC instantiation set XC attributes 1160 C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 Intuitively label cid15v xC XSi j cid16 corresponds subutility vector v additional information partial instanti ation xC attributes involved construction separator XSi j message containing v transmitted Given clique XCi subutility ui XCi deﬁne set labels corresponding In addition handle labels easily deﬁne set labels V cid16 xCi ui Labels XCi cid15uixCi xCi XCi W set attributes XE instantiation xE XE following operators XCi cid7 Zm NDV denotes set labels V utility vectors undominated actually NDV label undominated vector interested instantiation utility vector V W cid15v w xCD XEFcid16 cid15v xC XEcid16 V cid15w xD XFcid16 W operator aggregates additively labels V W partial instantiations agree attributes XCD This operator extensively combine appropriately aforementioned messages VXE cid15v xD XEcid16 cid15v xD XFcid16 V VXE contains labels V component substituted XE This messages separator cid4 VxE cid15v yD XFcid16 V yE xE VxE subset labels V agree partial instantiation xE V XE contains set labels V undominated label V partial instantiation xE This operator discard labels combination lead undominated solutions Corollary 2 NDVxEXE V XE xE XE Given operators express basic messagepassing algorithm described computing Pareto set1 Algorithm 1 A variable elimination algorithm computing Pareto set Function Pareto_Collect XCi XC j 01 message Mi j Labels XCi 02 cliques XCk 03 04 Mi j Mi j Mki 05 Pareto_Collect XCk XCi Adj XCi XC j 06 Mi j Mi j XSi j Function Pareto 01 Let root XCp clique 02 Pareto_Collect XCp XCp 03 return NDMpp Proposition 3 Given GAI tree G function Pareto returns precisely Pareto set Proposition 4 See Rollon Larrosa 28 Pareto requires space O k number cliques GAI network d largest attributes domain size w number variables largest clique minus K bound utility ui i1 K dw m cid2 time O 1 networks induced width m i1 K 2 dw cid2 Note function Pareto_Collect described generic impose ordering messages Mki s combinations In practice number operations performed loop lines 0205 depends combinations performed A simple effective strategy consists ﬁrst computing Mki calling appropriate Pareto_Collect XCk XCi perform combinations The computed iteratively selecting pair messages produces message smallest dimension For instance assume wish compute M1i M2i M3i messages M1i M2i M3i deﬁned A B A C C D respectively Then ﬁrst computing M1 M1i M2i M1 M3i produces result computing M2 M1i M3i M2 M2i faster M1 deﬁned A B C M2 deﬁned A B C D 322 A bestﬁrst Pareto search algorithm In function Pareto described previously sending subutility vectors undominated ﬁxed separator values single message Mi j prevents applying prunings signiﬁcantly speedup algorithm For reason propose alternative algorithm sends undominated subutility vectors labels actually separators When vector reaches root clique vector produces new knowledge prune vectors reached root know sure solution This algorithm similar spirit variant MOA algorithm Mandow la Cruz 29 improves algorithm 3032 It favors early detection partial solutions lead suboptimal solutions standard MOA discard corresponding labels limiting combinatorial blowup The main difference lies exploitation explicit junction tree structure instead implicit state space graph approach MOA 1 Recall abuse notation XSii XCi 1 k cid15v xC XSii cid16 corresponds label transmitted clique XCi C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 1161 Fig 7 Making label root On hand search algorithm requires satisfying speciﬁc constraints imposed junction tree Actually label moved separator combined labels stored adjacent separators ensure combination meaningful partial instantiations labels necessarily compatible Thus usually On hand approach needs information labels generated MOA bestﬁrst search algorithm based tree structure GAI network proceeds leaves root clique given label generated Thus unlike MOA algorithm need track list closed labels actually stores list In sense feature close frontier search algorithms 33 More precisely idea maintain lists labels Lopen labels reached root clique LPareto essentially labels reached root undominated At beginning algorithm LPareto Lopen basically ﬁlled labels leaves GAI network A nonempty Lopen set means exist labels possibly combined labels produce end undominated labels belong LPareto So Lopen nonempty select labels root combining appropriate labels When label reaches root course discarded Lopen LPareto updated When labels reached root Lopen algorithm computed Pareto set To illustrate labels root consider arbitrary label cid15w xD XSi j cid16 currently located separator XSi j Fig 7 Like function Pareto label corresponds subutility partial instantiation attributes A area GAI net Moving separator XS jl logically produce label corresponding instantiation attributes B area GAI net Hence cid15w xD XSi j cid16 necessarily added compatible labels located separators XSk1 j XSkr j compatible labels stored clique XC j attributes B area remain uninstantiated Among possible labels sent separators XSk1 j XSkr j earlier steps algorithm good candidates So let consider set labels Mkt j t 1 r sent separators earlier steps We propose generate compatible combinations cid16 Mk1 j Mkr j Labels XC j project resulting set labels separator messages cid15w xD XSi j XS jl discarding course dominated labels ﬁxed values XS jl words compute cid6cid7 V cid15w xD XSi j cid8 cid16 cid9 Mk1 j Mkr j LabelsXC j XS jl 3 The labels V correspond set labels appropriate separator XS jl As added Lopen Lopen represents sets labels potentially Pareto solutions look In addi cid16 safely removed Lopen dealt combined tion label cid15w xD XSi j labels The process described informally described algorithmically following func tion Algorithm 2 The function moving labels Junction tree cid16 cid16 cid16 Function move_labelcid15w xD XSi j 01 Mi j Mi j cid15w xD XSi j 02 V Labels XC j cid15w xD XSi j 03 XC j 04 cliques XCk 05 V V Mkj 06 07 XC j 08 return V cid12 root V V XS jl Adj XC j XCk V NDV cid12 root let XCl clique Adj XC j st XCl path XC j root cid12 XCi XCk cid12 XCl XCl deﬁned line 02 1162 C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 Of course Eq 3 produces set labels corresponding instantiations attributes B area Fig 7 messages Mkt j nonempty Hence enforce function move_label called Mkt j actually nonempty A simple way achieve initialize Pareto search function ini tial_labels ﬁlls separator XSi j exactly label value xSi j The basic idea function apply collect scheme root leaves GAI tree time separator encountered ﬁll label value More precisely separators leaves tree compute set undom inated labels value separator V XSi j As set contain labels value xSi j label xSi j produces message Mi j ones Lopen processed later When like Fig 7 collect scheme ﬁrst ﬁlls separators XSi j XSk1 j XSkr j messages encounter separator XS jl MSi j MSk1 j MSkr j respectively Now messages combined produce message stored Again V contain messages value xS jl XS jl V MSi j store message M jl ones Lopen processed later Of course label chosen stored M jl processed immediately added Lopen processed later selected currently best ﬁtted produce Pareto element moved till root For reason element promising label Different strategies exist deﬁne promising label In experiments deﬁned label highest utility average M objectives When optimistic heuristics available highest average sum utility vector heuristic vector Of course alternative characterizations highest lexicographic utility value lexicographic order objectives Overall algorithm leads following function initial_labels Labels XC j XS jl MSkr j MSk1 j Algorithm 3 The function initializing separator messages label separators value Adj XCi XC j initial_labels XCk XCi Function initial_labels XCi XC j 01 V Labels XCi 02 cliques XCk 03 04 V V Mki 05 06 V V XSi j cid4 07 Mi j xSi j 08 Lopen Lopen VMi j XSi j promising label VxSi j Let illustrate algorithm GAI net Fig 5 initial_labelsC E F C E F initial_labelsE G C E F initial_labels AC E C E F line 03 The ﬁrst ﬁrst creates set V cid151 0 e1 g1 E Gcid16 cid151 1 e1 g2 E Gcid16 cid151 1 e2 g1 E Gcid16 cid152 1 e2 g2 E Gcid16 line 01 V reduced V cid151 1 e1 g2 Ecid16 cid152 1 e2 g2 Ecid16 line 06 As V contains label separators value e1e2 message ME V shown Fig 8 Now initial_labels AC E C E F calls initial_labels A B AC E initial_labelsC D AC E The ﬁrst compute V cid151 5 a1b1 Acid16 cid158 2 a1b2 Acid16 cid153 4 a2b2 Acid16 cid156 2 a2b3 Acid16 line 06 discarding labels cid157 1 a1b3 Acid16 cid152 3 a2b1 Acid16 dominated cid158 2 a1b2 Acid16 cid153 4 a2b2 Acid16 respectively Here V contains element ai need select element ai V create message M A Say M A cid151 5 a1b1 Acid16 cid153 4 a2b2 Acid16 Fig 8 Note example reduce number iterations algorithm promising label chosen highest utility average The elements V cid158 2 a1b2 Acid16 cid156 2 a2b3 Acid16 added Lopen processed later Similarly initial_labelsC D AC E computes line 06 label set V cid152 9 c1d1 Ccid16 cid154 1 c1d3 Ccid16 cid154 9 c2d2 Ccid16 cid155 3 c2d3 Ccid16 From V extract message MC cid152 9 c1d1 Ccid16 cid154 9 c2d2 Ccid16 labels cid154 1 c1d3 Ccid16 cid155 3 c2d3 Ccid16 added Lopen processed later Now initial_labels AC E C E F compute label set Labels AC E M A MC C E leads cid16 cid7cid15 cid15 cid16 cid15 V cid15 6 17 a1b1c1d1e1 C E 6 17 a2b2c1d1e2 C E 10 16 a2b2c1d1e1 C E cid16 5 18 a1b1c1d1e2 C E cid15 cid16cid8 cid15 11 17 a2b2c2d2e1 C E 9 18 a2b2c2d2e2 C E cid16 cid16 line 06 From set extract message MC E selecting label value ci e j MC E cid7cid15 cid15 10 16 a2b2c1d1e1 C E 11 17 a2b2c2d2e1 C E cid16 cid16 cid15 cid16 6 17 a2b2c1d1e2 C E cid15 cid16cid8 9 18 a2b2c2d2e2 C E add Lopen labels cid156 17 a1b1c1d1e1 C Ecid16 cid155 18 a1b1c1d1e2 C Ecid16 selected MC E Finally initial_labelsC E F C E F computes V LabelsC E F MC E ME C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 1163 Fig 8 Messages computed function initial_labels V cid7cid15 cid15 cid15 cid15 19 18 a2b2c1d1e1 f 1 g2 C E F 14 19 a2b2c2d2e1 f 1 g2 C E F 15 18 a2b2c1d1e2 f 1 g2 C E F cid15 cid15 cid15 cid15 16 23 a2b2c1d1e1 f 2 g2 C E F 13 23 a2b2c2d2e1 f 2 g2 C E F 16 24 a2b2c1d1e2 f 2 g2 C E F cid16 cid16 cid16 cid16cid8 cid16 cid16 cid16 cid16 12 20 a2b2c2d2e2 f 1 g2 C E F 11 24 a2b2c2d2e2 f 2 g2 C E F V contains label triple c e f MC E F V Overall created messages Mi j Fig 8 Lopen initialized cid7cid15 Lopen cid16 cid15 cid15 8 2 a1b2 A cid16 5 3 c2d3 C 6 2 a2b3 A cid15 4 1 c1d3 C cid16 cid15 6 17 a1b1c1d1e1 C E 5 18 a1b1c1d1e2 C E cid16cid8 cid15 cid16 cid16 In addition ﬁlling separators single label separators value primary purpose function ini tial_labels important feature Proposition 5 Let XCp clique Call initial_labels XCp XCp Then utility vector ux following assertions holds cid3 k j1 u jxC j NDU 1 exists label cid15ux x XCp 2 exist indices j1 jr Lopen contains label cid15w xD XS j1l cid16 message Mpp XC j1 XC j1 XC jr clique nearest root cid16 w cid3 r t1 u jt xC jt D cid4 r t1 C jt According Proposition 5 calling initial_labels XCp XCp ux NDU exists label corresponding ux Mpp exists label Lopen corresponding ux The case interpreted fact propagation label corresponding ux root XCp temporarily stopped given separator label time promising label belong NDU We subsequently use function move_label eventually reach root XCp This justiﬁes algorithm Pareto present simplicity pruning rules given later Algorithm 4 Basic bestﬁrst Pareto search Function Pareto 01 let root XCp clique 02 Lopen initial_labels XCp XCp 03 LPareto NDMpp 04 Lopen cid12 let cid15w xD XSi j 05 remove cid15w xD XSi j cid16 Lopen 06 07 V move_labelcid15w xD XSi j 08 09 10 return LPareto XSi j cid16 cid16 promising label Lopen root XCp LPareto NDLPareto V Lopen Lopen V In experiments deﬁned promising label line 05 nearest label root clique break ties highest utility average M objectives Favoring labels nearest root clique effective tends quickly ﬁll LPareto feasible labels subsequently prune early possible labels Lopen When optimistic heuristics available broke ties highest average sum utility vectors heuristic vectors 1164 C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 Fig 9 An optimistic heuristicbased pruning rule Proposition 6 Given GAI tree G function Pareto returns precisely Pareto set Fig 10 The subutility tables example Proposition 7 Pareto requires space O cliques GAI network d largest attributes domain size w largest clique minus K bound utility ui i1 K dw m cid2 time O 1 k number networks induced width number attributes m i1 K 2 dw cid2 For moment function Pareto moves labels root applies pruning rule course given Corollary 2 end sends precisely messages Mi j sent func tion Pareto Section 321 Hence shall introduce additional pruning rule improve eﬃciency algorithm 323 Pruning rule Consider graph Fig 9 apply function Pareto At step algorithm select line 05 label cid15w aib j Acid16 Lopen moved separator C E Assume know exists vector v completion ck dl er f s gt attributes gray area v cid2P u2ck dl u3ai ck er u4ck er f s cid2P v w label u5er gt If addition turns LPareto contains time label cid15u cid15w aib j Acid16 safely discarded solution NDU Indeed exists vector z U utility vector instantiation ck dl er f s gt attributes gray area w cid21 w added cid2P v w cid2P w u NDU Pareto dominates z As consequence vector w cid21 w cid2P z u cid21 w cid2P z w cid16 u x XCp This suggests deﬁning optimistic heuristic given label like cid15w aib j Acid16 able return vector set vectors like v vector mentioned preceding paragraph For vector setvalued optimistic heuristic 30 In paper simplicity present singlevector valued heuristic easily computable collect algorithm illustrated Fig 11 separator E send message HE containing value ei E utility vector constituted max criterion u5ei g1 u5ei g2 cid15cid6 cid7cid15cid6 cid16cid8 cid9 cid9 cid16 cid21 HE cid7cid15 max1 1 max0 1 cid16 1 1 e1 E 2 1 e2 E cid15 e1 E cid16cid8 max1 2 max1 1 e2 E Clearly construction vectors HE weakly Pareto dominate possible vectors u5er gt r t 1 2 As sequence utility vectors V LabelsC E F HE Pareto dominate LabelsC E F LabelsE G Now apply process V construct message HC E containing pair ck er vector constituted max criterion Vck er Here construction vectors HC E weakly Pareto dominate possible vec tors V turn weakly Pareto dominate possible vectors LabelsC E F LabelsE G Apply pro cess constructing message HC ﬁnally construct H A apply maximization criterion scheme HC Labels AC E HC E Clearly process construction vectors H A weakly Pareto dominate subutility vectors u2ck dl u3ai ck er u4ck er f s u5er gt completion ck dl er f s gt precisely looking This justiﬁes following recursive algorithm C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 1165 Algorithm 5 Computation optimistic heuristic Function Heuristic_Collect XCi XC j 01 V Labels XCi 02 cliques XCr 03 04 V V Hir 05 06 H ji MaxXSi j Heuristic_Collect XCr XCi Adj XCi XC j V set attributes XE set labels V Max XE w cid16 v max v 1 vm xE XSi j Max XE V cid7cid15 cid7 V deﬁned cid9 cid15cid6 w 1 wm yC XD cid16 cid8cid8 VxE In words xE v max criterion utilities labels agreeing xE Now clear following proposition holds Proposition 8 Call Heuristic_Collect XCi XC j Then xSi j subutilities obtained instantiations attributes cliques Xr XCi path Xr root weakly Pareto dominates sums XSi j H jixSi j Note Proposition 8 cliques Xr precisely located gray area Fig 9 Proposition 9 Heuristic_Collect XCi XC j requires space O dw cliques GAI network d largest attributes domain size w largest clique minus K bound utility ui 1 k number networks induced width number attributes time O dw Importing optimistic heuristic function Pareto essentially requires modifying line 08 Lopen LPareto updated time LPareto updated try prune labels Lopen combined optimistic heuristic value Pareto dominated element LPareto So let deﬁne corresponding dominance operator sets labels V W W labels complete instantiations NDH V W cid7 cid15v xD XSi j utility Hi jxSi j cid16 V exists cid15w y XCp cid16 W w cid2P v h h cid8 returned Heuristic_CollectXCi XC j Clearly calling NDH Lopen LPareto function Pareto remove labels Lopen moved root produce labels weakly Pareto dominated NDU As consequence safe discard labels early possible reduces run time algorithm This leads following Pareto search algorithm Algorithm 6 Eﬃcient bestﬁrst Pareto search algorithm H Function Pareto 01 let root XCp clique 02 Lopen initial_labels XCp XCp 03 Separators XS ji Heuristic_Collect XCi XC j 04 LPareto NDMpp Lopen NDH Lopen LPareto 05 Lopen cid12 let cid15w xD XSi j 06 remove cid15w xD XSi j cid16 Lopen 07 08 V move_labelcid15w xD XSi j 09 10 11 12 return LPareto XSi j Lopen Lopen NDH V LPareto cid16 promising label Lopen cid16 root XCp LPareto NDLPareto V Lopen NDH Lopen V Proposition 10 Given GAI tree G function Pareto H returns precisely Pareto set Proposition 11 Pareto cliques GAI network d largest attributes domain size w largest clique minus K bound utility ui H requires space O i1 K dw m cid2 time O 1 k number dw networks induced width number attributes m i1 K 2 cid2 Note simplicity exposition chose Heuristic_Collect times different separators This optimally eﬃcient messages Hri computed function actually computed times However techniques similar inference Bayesian networks 34 collectdistribute algorithm 1166 C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 Fig 11 Computing optimistic heuristic label cid15w ai b j Acid16 Fig 12 The optimistic heuristic computed separator Fig 13 The content messages Mi j completion initial_labelsC E F C E F redundancies removed overall computational burden compute heuristic separators twice time required complete Heuristic_Collect XCi XC j Let GAI network Fig 10 new pruning rule effectively improve run time compute Pareto set First display Fig 12 values optimistic heuristic computed separator After completion initial_labelsC E F C E F messages Mi j instance Fig 13 deﬁning promising vectors appropriately content Lopen described Lopen separator inst vect vect H separator A A C C a1b2 8 2 24 22 a2b3 6 2 24 22 c1d3 4 1 24 17 c2d3 5 3 22 18 C E C E C E C E inst vect vect H a1b1c1d1e1 6 17 15 24 a1b1c1d1e2 5 18 15 25 a1b1c2d2e1 6 16 9 22 a2b2c2d2e2 9 18 12 24 Then LPareto ﬁlled undominated labels MC E F LPareto cid7cid15 19 18 a2b2c1d1e1 f 1 g2 C E F cid15 cid16 16 24 a2b2c1d1e2 f 2 g2 C E F cid16cid8 C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 1167 Fig 14 The content messages Mi j moving label cid158 2 a1b2 Acid16 Now instruction line 04 reduces set Lopen labels combined optimistic heuristic dominated elements LPareto discarded separator inst vect vect H separator inst vect vect H Lopen A A C C a1b2 8 2 24 22 a2b3 6 2 24 22 c1d3 4 1 24 17 c2d3 5 3 22 18 C E a1b1c1d1e2 5 18 15 25 Next enter loop lines 0511 Let assume promising element label located separator C E Then label root producing V cid1514 19 a1b1c1d1e2 f 1 g2 C E F cid16 cid1515 25 a1b1c1d1e2 f 2 g2 C E F cid16 The second element added LPareto line 09 cid16 cid7cid15 cid15 cid16 LPareto 19 18 a2b2c1d1e1 f 1 g2 C E F cid15 15 25 a1b1c1d1e2 f 2 g2 C E F 16 24 a2b2c1d1e2 f 2 g2 C E F cid16cid8 Lopen remains unchanged In addition label cid155 18 a1b1c1d1e2 C Ecid16 added separator C E resulting message MC E described Fig 14 Assume label selected line 06 cid158 2 a1b2 Acid16 Then label moved separator C E We compute V cid158 2 a1b2 Acid16 Labels AC E MC MC precisely message described Fig 13 resulting label set V equal V cid7cid15 cid15 13 14 a1b2c1d1e1 AC E 13 13 a1b2c2d2e1 AC E cid15 cid15 cid16 cid16 12 15 a1b2c1d1e2 AC E cid16 cid16cid8 18 13 a1b2c2d2e2 AC E Of course V C E V set appended Lopen separator inst vect vect H separator Lopen A C C a2b3 6 2 24 22 c1d3 4 1 24 17 c2d3 5 3 22 18 C E C E C E C E inst vect vect H a1b2c1d1e1 13 14 22 21 a1b2c1d1e2 12 15 22 22 a1b2c2d2e1 13 13 16 19 a1b2c2d2e2 18 13 21 19 In addition label cid158 2 a1b2 Acid16 added message M A contents messages described Fig 14 Note LPareto unaffected And execute loop lines 0511 Let cid1512 15 a1b2c1d1e2 C Ecid16 label selected line 06 Moving label clique C E F produces label set V cid1521 16 a1b2c1d1e2 f 1 g2 C E F cid16 cid1522 22 a1b2c1d1e2 f 2 g2 C E F cid16 Only second element added LPareto line 09 LPareto cid7cid15 cid16 cid15 16 24 a2b2c1d1e2 f 2 g2 C E F cid15 22 22 a1b2c1d1e2 f 2 g2 C E F 15 25 a1b1c1d1e2 f 2 g2 C E F cid16cid8 cid16 Note label cid1519 18 a2b2c1d1e1 f 1 g2 C E F cid16 previously belonged LPareto discarded set dominated cid1522 22 a1b2c1d1e2 f 2 g2 C E F cid16 In addition Lopen updated follows discarding elements new pruning rule Lopen separator inst vect vect H separator inst A a2b3 6 2 24 22 C vect vect H c1d3 4 1 24 17 1168 C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 Now enter loop select cid156 2 a2b3 Acid16 moved However element set V cid156 2 a2b3 Acid16 Labels AC E MC added Lopen NDH V LPareto Finally remains label cid154 1 c1d3 Ccid16 moved This creates set V 8 elements 2 kept pruning rule Lopen separator inst vect vect H separator inst vect H a1b2c1d3e2 17 4 24 14 vect C E a1b2c1d3e1 15 6 24 13 C E Moving cid1517 4 a1b2c1d3e2 C Ecid16 root produce new Pareto element utility value 24 14 As consequence Lopen label cid1515 6 a1b2c1d3e1 C Ecid16 combined optimistic heuristic dominated new Pareto element Therefore Lopen execution algorithm completed The Pareto set computed cid7cid15 LPareto 16 24 a2b2c1d1e2 f 2 g2 C E F cid15 22 22 a1b2c1d1e2 f 2 g2 C E F 15 25 a1b1c1d1e2 f 2 g2 C E F cid16cid8 cid15 24 14 a1b2c1d2e2 f 2 g2 C E F cid15 cid16 cid16 cid16 As pruning rule effective discards labels combined rule overall actually 38 labels combinations instead 78 function Pareto 4 Preferencebased search As mentioned multiagent multicriteria problem comparing feasible solutions X amounts comparing respective utility proﬁle The basic preference model compare solutions Pareto dominance The results obtained Section 3 exact determination Pareto set requires instances prohibitive computation times Proposition 1 Fortunately determining entire set Paretooptimal elements necessary For example multiagent problems value solution measured social welfare function assessing overall utility solutions society agents For example interested maximizing sum individual utilities utilitarianism maximizing satisfaction satisﬁed agent egalitarianism compromise attitudes One major issue multiagent decision making processes seeking approval agents fairness decision procedures This normative principle generally refers idea favoring solutions fairly share happiness utility agents More formally comparing utility vectors u v component agent claiming u fair v usually conveys vague notion components u spread nearly equal components v This intuitive notion leaves room different deﬁnitions fairness models proposed mathematicians developed formal theory majorization 35 economists provided axiomatic foundations inequality measures synthesis 3637 All models provide solution space transitive preference structure reﬁning Pareto dominance partial weakorder Lorenz dominance complete weakorder ordered weighted averages We general algorithm Pareto H presented Section 323 determine Pareto set specialized focus search fair compromise solutions The need reﬁning Pareto dominance present singleagent multicriteria decision making problems In problems preferred solutions usually achieving good compromise conﬂicting ob jectives involved decision model We generally interested generating extreme solutions favoring particular criterion detriment The standard way generating compromise solutions Pareto set optimize scalarizing function measuring overall quality solutions aggregation criteria generally deﬁne overall preference model reﬁning Pareto dominance narrowing initial optimality concept When pref erence information suﬃcient formulate stable overall preference model iterative compromise search explore Pareto set One starts neutral initial preference model generate wellbalanced compromise solution Pareto set model progressively evolves feedbacks decision maker exploration better meet desiderata Such interactive process multiobjective programming continuous domains scan Pareto set inﬁnite 381 The approach worth investigating combinatorial problems complete enumeration Pareto set feasible This discussed Section 44 The common problem situations determine mostpreferred solutions respect given prefer ence model cid2 reﬁning Pareto dominance Hence rest section dedicated general problem We propose reﬁnement Pareto H exploits GAI structure utility functions determine preferred solutions resorting complete enumeration Pareto set For sake illustration consider 3 different models hand Lorenz dominance ordered weighted averages fair optimization multiagent decision making problems hand Tchebycheff distances compromise search multicriteria decision making problems We report numerical tests provide computation times obtained models Section 5 41 Lorenz dominance Lorenz dominance reﬁnement Pareto dominance fair optimization problems utility functions u1 um represent preferences m agents In addition initial objective aiming maximizing individual utili C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 1169 ties fairness refers idea favoring Paretooptimal solutions having wellbalanced utility proﬁle For reason fair optimization problems interested working preference relation cid2 satisfying following axioms PMonotonicity For u v Zm u cid2P v u cid2 v u cid5P v u cid5 v cid5 strict preference relation deﬁned asymmetric cid2 PMonotonicity natural unanimity principle enforcing consistency Pdominance Transfer Principle Let u Zm ei resp e j vector ith resp jth component equals 1 null ui u j j Then ε 0 ε ui u j u εei εe j cid5 u This axiom captures idea fairness follows ui u j utility vector u Zm slightly increasing com ponent u j detriment ui preserving sum individual utilities produce better distribution utilities consequently improve fairness solution For example vector u 11 10 11 preferred v 12 9 11 exists transfer size cid3 1 pass v u Note similar transfer size greater 12 9 3 increase inequality This explains transfers size ε ui u j Such trans fers said admissible sequel They known PigouDalton transfers social choice theory reduce inequality income distribution population 37 survey Note Transfer Principle enables discriminate pair vectors having sum utilities apply comparison utility vectors having different sums This reason Transfer Principle combined PMonotonicity For example compare w 11 11 11 z 12 9 10 use vectors u v introduced observe w cid5 u PMonotonicity u cid5 v Transfer Principle explained v cid5 z PMonotonicity Hence w cid5 z transitivity In order better characterize vectors compared combinations PMonotonicity Transfer Principle recall deﬁnition Lorenz vectors related concepts details 35 Deﬁnition 7 For u Zm cid6 Lu u1 u1 u2 u1 u2 um cid9 generalized Lorenz vector associated u vector u1 cid5 u2 cid5 cid5 um represent components u u1 um sorted increasing order The jth component Lu L ju cid3 j i1 ui Deﬁnition 8 The generalized Lorenz weak dominance relation Zm Lv strict called Ldominance deﬁned u cid5L v Lu cid5P Lv deﬁned u v Zm u cid2L v Lu cid2P The notion Ldominance initially introduced compare vectors average cost The generalized version Ldominance considered classical extension allowing vectors different averages compared Within set U Zm utility vector u said Ldominated v cid5L u v U Lnondominated v U v cid5L u The set Lnondominated vectors U denoted NDL In order establish link generalized Lorenz dominance preferences satisfying combination PMonotonicity Transfer Principle recall result Chong 39 Theorem 1 For pair distinct vectors u v Zm Conversely u cid5L v exists sequence admissible transfers andor Pareto improvements transform v u u cid5P v u obtains v PigouDalton transfer u cid5L v For example Lw 11 22 33 cid5P 9 19 31 Lz directly proves existence sequence Pareto improvements andor admissible transfers passing z w This theorem establishes Ldominance minimal transitive relation respect set inclusion satisfying simultaneously PMonotonicity Transfer Principle Hence subset Lnondominated elements deﬁnes best candidates optimality fair optimization problems This explains solving following problem Lorenzoptimal elements LO Input product set ﬁnite domains X X1 Xn n ﬁnite m GAI utility functions ui X Z 1 m m ﬁnite Goal determine entire set Lnondominated vectors U utility vector u NDLU corresponding tuple xu X Unfortunately set Lnondominated elements subset Pareto set suﬃciently large prevent eﬃcient enumeration shown following result 1170 C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 Proposition 12 Problem LO intractable m 2 requires number operations grows worst case exponen tially number attributes Proposition 13 As soon Xi cid3 2 m cid3 2 deciding exists tuple X utility weakly Ldominates given utility vector u Zn NPcomplete decision problem referred problem Lu sequel Despite apparent negative results Propositions 12 13 Section 5 practice average size NDL small compared ND This suggests exist algorithms eﬃcient average determine set Lnondominated elements The following subsection dedicated algorithm 42 A focused search algorithm Lnondominated elements We introduce modiﬁcation Pareto H search algorithm introduced Section 323 determine Lnon dominated elements X Since elements necessarily Paretooptimal ﬁrst determine Paretooptimal elements pairwise comparisons determine Lnondominated elements This procedure eﬃ cient size Pareto set Instead prefer nice feature Pareto H computes Pareto optimal solutions leaving room pruning rules based Ldominance Using rule going specialize Pareto H focus directly Lorenzoptimal solutions However naively shown following example Example 3 Consider GAI network Boolean attributes A B C cliques A B BC Assume Paretooptimal solutions clique A B 1 1 0 1 utility u A B 1 1 2 2 u A B 0 1 3 1 We L2 2 2 4 L3 1 1 4 Hence tempted eliminate vector 3 1 Ldominated 2 2 A B send message 0 1 utility 2 2 clique BC However mistake Assume compatible Paretooptimal vector clique BC 1 0 u BC 1 0 1 3 output solution 1 1 0 utility 2 2 1 3 3 5 L3 5 3 8 exists better solution 0 1 0 utility 3 1 1 3 4 4 L4 4 4 8 This example shows simply substitute Pareto dominance Ldominance Pareto search algorithm admissible algorithm determining Lnondominated elements Lorenz dominance compare labels located given separator having partial instantiation separator suggested Pareto dominance Corollary 2 It prune labels comparison labels corresponding complete tuples evaluated We explain exact management labels determination Lnondominated elements For determining Lorenz nondominated elements deﬁne counterparts labels functions ND NDH Lorenz dominance instead Pareto dominance More formally let L denote set labels We deﬁne function NDL L cid7 L set labels V returns set NDLV V containing label set labels cid21 V having generalized Lorenz nondominated vector V cid15v xD XEcid16 NDLV exists V cid15w yF XGcid16 V w cid5L v In addition deﬁne NDL H L L cid7 L pair label sets V W returns H V W V containing label set labels V having generalized Lorenz vector heuristically set NDL H V W undominated generalized Lorenz vector label W In words V cid15v xD XEcid16 NDL cid21 cid15w yF XGcid16 W w cid5L v h cid15h xH XEcid16 label agrees xD HE exists V deﬁned function Heuristic_Collect Using NDL NDL H provide counterpart function Pareto H lines 04 09 10 Lorenz dominance discard complete instantiated labels dominated Note particular function move_label remains unchanged uses Pareto dominance Corollary 2 prune labels H Lorenz dominance Function Lorenz H identical Pareto 10 20 x XCp The pruning rules function NDL lines 04 09 10 illustrated simple example assume wish add line 10 label cid15w 8 3 aib j Acid16 Lopen In addition assume exists LLorenz label cid15u cid16 shown Fig 9 Finally assume instantiations attributes gray area Fig 9 compatible ai b j corresponding utility vectors Pareto dominated v 4 4 Then operator 10 20 cid12cid2P w v 12 7 However ND preceding section exploited prune w u 10 30 cid2P Lv w 7 19 This explains Lorenz dominance operator NDL prune w Lu practice function Lorenz H It important note pruning vector w corresponding complete assignment Ldominance achieved comparison vector u attributes As shown Example 3 extend pruning rule utility vectors u corresponding partial assignments attributes As consequence Algorithm 7 functions initial_labels move_label Algorithm 4 use Pareto dominance Lorenz dominance As Pareto H different possible strategies deﬁne promising label In experiments simply deﬁned nearest label root clique break ties highest sum M objectives Lorenz vector sum utility vector heuristic vector H faster function Pareto C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 1171 Algorithm 7 Eﬃcient bestﬁrst Lorenz search algorithm H Function Lorenz 01 let root XCp clique 02 Lopen initial_labels XCp XCp 03 Separators XS ji Heuristic_Collect XCi XC j 04 LLorenz NDL Mpp Lopen NDL 05 Lopen cid12 let cid15w xD XSi j 06 cid16 Lopen remove cid15w xD XSi j 07 08 V move_labelcid15w xD XSi j 09 10 11 12 return LLorenz root XCp LLorenz NDL LLorenz V Lopen NDL XSi j Lopen Lopen NDL cid16 promising label Lopen H Lopen LLorenz H V LLorenz cid16 H Lopen V Proposition 14 Given GAI tree G function Lorenz H returns Lorenzoptimal set Proposition 15 Lorenz H requires space O number cliques GAI network d largest attributes domain size w attributes largest clique minus K bound utility ui i1 K dw m cid2 time O log m 1 k networks induced width number m i1 K 2 dw cid2 43 Ordered weighted averages Although Ldominance reﬁnement Pareto dominance capture idea fairness comparisons partial relation suﬃcient discriminate multiple feasible solutions shown Proposition 12 This reason inequality measures proposed literature reﬁne Lorenz dominance Among preference weakorders induced Ordered Weighted Averages OWA 40 appear natural ex tensions Ldominance As shown 41 reasonable axioms compatibility Ldominance completeness preferences continuity comonotonic independence possible model ordered weighted average decreasing weights This result consistent Ogryczak 42 justify use OWA operators equitable optimization OWA operators formally deﬁned follows Deﬁnition 9 The family Ordered Weighted Averages OWA class aggregators assign weights ranks perform linear combination scores ranked More formally utility vector u Zm OWA deﬁned OWAu mcid5 i1 w ui mcid5 w w i1Liu i1 w 1 w 2 wm wm1 0 u1 cid5 u2 cid5 cid5 um represent components u u1 um sorted increasing order Note important weights attached satisﬁed agents consistently intuitive idea egali tarianism Note OWAu expressed linear combination Lorenz components Liu coeﬃcients involved combination strictly positive weights w strictly decrease increases In case OWA func tion obviously provides weakorder reﬁning Ldominance Unfortunately determination OWAoptimal solution X NPhard Proposition 16 As soon Xi cid3 2 m cid3 2 problem P α consisting deciding exists element x X utility vector ux OWAux cid3 α ﬁxed positive integer α NPcomplete decision problem The procedure Lorenz easily adapted compute optimal OWA elements X For computing best element according OWA need redeﬁne functions NDOWA NDOWA Lorenz We deﬁne function NDOWA L cid7 L set labels V returns set NDOWAV V containing label cid21 cid15w yF XGcid16 V set labels V having OWA V cid15v xD XEcid16 NDOWAV exists V L L cid7 L pair w cid5OWA v OWAw OWAv In addition deﬁne NDOWA V W V containing label set labels V having OWA non label sets V W returns set NDOWA dominated OWA labels vector W In words V cid15v xD XEcid16 NDOWA V W exists cid21 cid15w yF XGcid16 W w cid5OWA v h cid15h xH XEcid16 label agrees xD HE deﬁned V function Heuristic_Collect Now replace function Lorenz respectively H NDL NDL H NDOWA NDOWA H H H H H 1172 C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 Fig 15 Pruning rule OWA prune w OWAu cid2 OWAw hw resulting algorithm determines optimal element wrt OWA The notion promising label updated We simply deﬁned nearest label root clique highest OWA value sum illustrated Fig 15 label cid15w aib j Acid16 utility vector heuristic vector The pruning rule NDOWA let hw vector Pareto dominates utility vectors corresponding instantiations attributes cid3 OWAw hw w safely discarded solution gray area OWAu NDOWAU H 44 Weighted Tchebycheff distances The previous procedures proposed context fair multiagent decision making We easily adapt procedures singleagent multicriteria decision problems In case GAI utility functions u1 um represent criteria deﬁned different subsets attributes referring different viewpoints solutions security velocity space aesthetics car mentioned introduction In context notion fairness replaced notion wellbalanced compromise solution In order explore possible compromise solutions Pareto set classical approach multicriteria optimization generate Paretooptimal solutions minimizing following scalarizing function Wierzbicki 43 Steuer Choo 38 cid9cid17 cid17 cid7 cid8 cid6 f w x u ux cid17 cid17w max iM cid18 cid18 cid18 ui uix cid18 w u u1 um represents ideal utility proﬁle w positive weighting vector The choice Tchebycheff norm focuses worst component guarantees feasible solutions close reference utility vector u component receive good score This promotes wellbalanced solutions Function f w fulﬁlls important properties 43 Property 1 If M w 0 solutions x minimizing f w set X weakly Paretooptimal feasible solution perform better criteria simultaneously Moreover Paretooptimal Property 2 If M ui supxX uix Paretooptimal solution x X exists weighting vector w x unique solution minimizing f w X Property 1 shows minimizing f w yields Paretooptimal solution Property 2 shows Pareto optimal solution obtained appropriate choice parameter w This second property important It prevents excluding priori good compromise solutions Yet satisﬁed usual linear aggregators Example 4 Consider problem 3 criteria assume X x y z t u1x 0 u2x u3x 100 u2 y 0 u1 y u3 y 100 u3z 0 u1z u2z 100 u1t u2t u3t 65 All solutions t bad respect criterion Thus t reasonable compromise solution Paretooptimal obtained maximizing linear combination individual utilities positive coeﬃcients belong boundary convex hull feasible utility vectors Fig 16 represents feasible area different Paretooptimal compromise solutions obtained minimizing weighted Tchebycheff distance different weights Among ﬁlled points obtained maximization linear combination criteria Example 4 Fig 16 explain f w scalarizing function preferred weighted sum multiobjective optimization nonconvex sets 4338 This remark important optimization weighted sum criteria easier problem Indeed weighted sum GAI decomposable functions GAI decomposable Hence optimizing weighted sum criteria amounts ﬁnding optimal tuple GAI network As mentioned 21 problem solved standard nonserial dynamic programming 12 computation plausible explanation MPE Bayesian networks 13 On contrary weighted Tchebycheff distances introduced GAI decomposable In 44 ﬁnding solution x X minimizes Tchebycheff criterion NPhard problem propose solution procedure It relies ranking algorithm enumerating solutions according C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 1173 Fig 16 Compromise solutions minimizing weighted Tchebycheff norms Table 1 Performance algorithms biobjective problems derived classical benchmarks File GEOM30a_4 GEOM40_2 dubois30 dubois50 dubois100 pret150_25 pret150_40 pret150_75 hailﬁnder insurance n 30 40 90 150 300 150 150 150 56 27 w Par H 6 5 3 3 3 8 8 9 4 8 0315 0019 0054 0152 0751 1032 0750 2048 29302 28279 Lor H 0317 0008 0046 0121 0637 0998 0705 1842 28553 28271 OWA 0286 0007 0041 0106 0568 0823 0597 1644 27808 28151 L 6 2 1 4 1 1 6 2 34 1 Par File 16 18 38 66 115 55 56 57 169 58 kbtree5_2_4_5_10_1 kbtree5_2_4_5_30_1 kbtree5_2_4_5_50_1 kbtree5_2_4_5_70_1 kbtree5_2_4_5_90_1 cnf240100730621 cnf240100730623 cnf280100735545 cnf280100735549 alarm n 62 62 62 62 62 40 40 80 80 37 w Par H Lor H OWA 5 5 5 5 5 11 12 6 6 4 4335 5109 3530 3026 3692 0746 1630 0050 0038 0172 3863 4607 3136 2717 3322 0730 1622 0044 0034 0150 3196 4203 2783 2393 3072 0672 1433 0038 0030 0128 L 3 3 5 3 4 3 5 1 2 23 Par 46 47 42 42 49 16 10 16 17 92 weighted sum criteria boundary condition reached guarantees optimal solution We propose alternative approach based Pareto H procedure We ﬁrst ﬁx components ideal point ui supxX uix 1 1 m value supxX uix obtained monocriterion optimization GAI net Then implement focused search procedure OWA replacing OWA Tchebycheff criterion This approach implemented tested random instances weighting vector w ﬁxed generate wellbalanced compromise solutions Pareto set 145 The experiments presented Section 5 Note approach easily generalizes aggregation function provided monotone respect Pareto dominance 5 Numerical tests In order evaluate performance algorithms performed experiments 2 GB PC equipped 36 GHz Pentium 4 running aGrUM2 graphical model library For ﬁrst set experiments showed algorithms perform network structures practice We classical benchmarks available httpcarlittoulouseinrafrcﬂibtars As algorithms return exact approximate solutions limited experi cid5 15 In repository benchmarks monoobjective problems ments networks induced width w mapped multiobjective ones To end objective generated utility decomposable according GAI network monoobjective problem More precisely utility ui monoobjective problem j computed minimal maximal values u u drawing random values u u In end multiobjective GAI network structure monoobjective For biobjective problems evaluated run times Pareto H OWA performances Tchebycheff distance similar OWA The results displayed Table 1 In table n refers number attributes w induced width GAI network computed triangulation algorithm columns L Par number Lorenzoptimal Paretooptimal elements respectively All columns report average run times seconds 100 experiments As expected Lorenz H essentially number Lorenz undominated elements smaller Pareto undominated ones Note attributes H OWA usually outperform Pareto generated objective j corresponding utility u H Lorenz 2 See httpagrumlip6fr 1174 C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 Table 2 Performance biobjective problems attributes domain sizes 4 File GEOM30a_4 GEOM40_2 dubois30 dubois50 dubois100 pret150_25 pret150_40 pret150_75 hailﬁnder insurance n 30 40 90 150 300 150 150 150 56 27 w Par H 6 5 3 3 3 8 8 9 4 8 1001 0394 11616 54627 104716 25888 Lor H 1037 0423 10911 51974 949368 23067 OWA 0936 0352 9904 48046 905818 21095 L 4 4 4 15 10 5 Par File 65 64 310 530 1451 178 kbtree5_2_4_5_10_1 kbtree5_2_4_5_30_1 kbtree5_2_4_5_50_1 kbtree5_2_4_5_70_1 kbtree5_2_4_5_90_1 cnf240100730621 cnf240100730623 cnf280100735545 cnf280100735549 alarm n 62 62 62 62 62 40 40 80 80 37 Table 3 Run times random problems 5 criteria n 10 11 12 13 14 15 16 19 20 Par 1519 8199 31512 55833 162425 427137 2050512 Par H 0451 3927 11995 23389 44526 104028 105577 1620304 Lor H 0237 0398 7506 7903 6055 76941 60467 392702 512344 OWA 0196 0301 7143 7322 5022 73707 56931 359253 484233 5 5 5 5 5 11 12 6 6 4 L 7 21 5 9 22 9 5 11 13 w Par H Lor H 10188 10274 7516 10502 8169 11955 11781 9099 12299 9955 2734 2643 OWA L Par 9471 7575 7035 9492 7074 2416 8 5 8 8 3 7 269 199 304 243 254 103 Par 2957 7134 8891 11 484 16 928 22 676 33 334 42 655 45 245 Tcheb 0203 0326 7258 7473 5231 74419 58092 367835 497613 instances Boolean seldom case decision problems Signiﬁcant exceptions problems hailﬁnder insurance actually Bayesian networks attributes domain sizes 11 For problems run times higher experiments To test behavior algorithms decisiontheoretic framework performed second round exper iments network structures Table 1 attributes domain size 4 For instance ﬁlled utility tables numbers drawn randomly 0 20 The run times biobjective problems summarized Table 2 indicate program failed lack memory space available Note context Pareto sets run times bigger Table 1 Finally set experiments studied algorithms behaved presence multiple conﬂicting criteria actually chose 5 criteriaobjectives The experiments Tables 1 2 appropriate purpose cause problems harder solve biobjective ones run times prohibitive Hence randomly generated GAI networks cliques size 3 separators size 2 attributes domain size 4 For clique generated 5 different utility tables objective numbers drawn randomly 0 20 The run times algorithms seconds displayed Table 3 indicate instances program failed 2400 s timeout Column Tcheb shows times Tchebycheff optimization ﬁxed set weights Note Pareto H OWA Tcheb compared Pareto H Pareto This shows preferencebased optimization performed Pareto set computed H signiﬁcantly outperforms Pareto column Par Note eﬃciency Lorenz 6 Conclusion We shown GAI networks eﬃciently handle preferences decision problems involving multiple objectives provided objectives modeled GAI decomposable utility functions In particular possible store m different GAI functions single GAI network endowed local vectorvalued utility tables Then proposed heuristic search procedure exploiting GAI structure compute Paretooptimal elements This procedure bears 30 state space graphs works similarity labels propagation algorithms multiobjective MOA junction tree satisfy compatibility constraints induced separators The procedure propose bears similarity multiobjective approaches constraint satisfaction problems 4648 speciﬁcities linked use heuristic information ii management labels candidate expansion belong different cliques require treat Paretooptimal labels given clique propagation These speciﬁcities possible modify initial procedure determine preferred solutions preference model compatible Pareto dominance This case ranking approaches proposed 21 apply concave utility functions We provided examples approach appears useful ﬁrst Lorenz dominance OWA models fair multiagent decision making weighted Tchebycheff distances multicriteria problems Note related approaches successfully perform fair optimization compromise search multiobjective C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 1175 shortest path problems 4145 This paper shows focused search algorithms specializing Pareto search imported Graphical Models solve wide range multiobjective combinatorial optimization problems involving sophisticated preferences Knowing size Pareto set huge combinatorial domains useful comple mentary study design near admissible algorithms approximate Pareto set performance guarantees Several recent works multiobjective combinatorial problems shown power approximations solving large size instances 54950 It likely ideas imported beneﬁt world graphical multiobjective utility models A ﬁrst step direction proposed 51 Appendix A Proofs Proof Proposition 1 We establish proof m 2 biobjective case The result obviously extends problems involv ing objectives The decision problem P u associated PO clearly NP To establish NPcompleteness reduce decision version Knapsack problem known NPcomplete 52 problem This problem denoted KP stated follows Instance utility vector v 1 vn Zn Question exist x 0 1n cid3 n j1 v j x j cid3 V j1 w j x j cid5 W cid3 n weight vector w 1 wn Zn positive integers V W Given instance KP construct polynomial time instance P u u V j1 w j W follows consider n Boolean attributes X j 0 1 j 1 n x j X j u1x j v j x j u2x j w j1 x j Thus cid3 j1 w j1 x j We know vector x 0 1n associate utility vector deﬁned u1x u2x n j1 w j x j cid5 W By construction utility functions j1 v j x j cid3 V answer KP YES inequalities equivalent u1x cid3 V u2x cid3 j1 w j W meaning answer P u YES This shows P u hard KP cid2 cid3 n j1 v j x j cid3 n cid3 n cid3 n cid3 n Proof Proposition 2 Assume u1xD cid5P u1 yD deﬁnition xE XE u1xD u2xE cid5P u1xD u2xE Hence vector NDU result addition vector u2xE u1 yD For reason vector NDU result addition vector u1xD dominated vector u2xE As U uxD xD XD cid4 uxE xE XE D E D E N result obtains cid2 Proof Corollary 1 By running intersection property Property 3 Deﬁnition 2 D1 D2 Hence U cid4 Now values attributes XS12 ﬁxed XD2 xS12 u1xD1 xS12 u2xD2 xS12 subutilities deﬁned XD1 XD2 respectively As D1 D2 case u1 u2 additive utility application Proposition 2 completes proof cid2 cid4 u2xD2 xS12 xD2 u1xD1 xS12 xD1 XD1 XS12 xS12 Proof Corollary 2 The utility function u deﬁned GAI network decomposed u u1 u2 u1 XD cid3 r Now t1 utxCit XSi j conditions application Corollary 1 result obtains cid2 deﬁned u1xD xSi j cid3 k tr1 utxCit u2 XE XSi j u2xE xSi j cid7 Zm cid7 Zm Proof Proposition 3 Function Pareto completed ﬁnite number steps function Pareto_Collect inﬁnite number times But induction easily seen Pareto_Collect XCk XCi called line 03 clique XCi XCk root G tree ﬁnite number calls Pareto_Collect Now Pareto_Collect XCi XC j transforms ui let prove induction Pareto returns NDU Consider ﬁrst leaves XCi GAI tree By label set Mi j projects XSi j computes Mi j XSi j Corollary 2 applied separator XSi j subutility vectors ui undominated ﬁxed values xSi j XSi j need taken account computing NDU This corresponds precisely label set Mi j XSi j By induction hypothesis assume label sets Mki line 04 correspond undominated vectors described Corol XSi j lary 2 ﬁxed values XSki To apply Corollary 2 separator XSi j compute value xSi j VxSi j xD XD Cit t 1 r XCi cliques having XCi path xD XD ward root D subset WxSi j discarded elements known dominated Corollary 2 Hence NDVxSi j NDWxSi j So Pareto_Collect returns set labels undominated value separator XSi j t1 CtSi j The loop lines 0205 compute exactly cid3 r t1 utxCit cid3 r t1 utxCit ND Finally clique XCi loop lines 0205 parses neighbors XCi leads root GAI net parsed function Pareto completed As consequence labels Mpp cid4 r 1176 C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 computed Pareto correspond utility values u complete instantiations Moreover recursive applications Corollary 2 know NDU Mpp As ﬁnal step returns NDMpp function Pareto returns Pareto set cid2 Proof Proposition 4 See proof Theorem 3 28 cid2 Proof Proposition 5 Consider initial_labels XCi XC j XCi leaf GAI tree Then line 06 V Labels XCi XSi j By applying Corollary 2 separator XSi j know case label Labels XCi V Pareto element NDU On lines 07 08 V partitioned message Mi j W VMi j added Lopen As consequence utility vector ux NDU cid15uixCi xCi XSi j cid16 belongs W Lopen Property 2 proposition holds r 1 j1 cid15uixCi xCi XSi j cid16 Mi j Now let XCi clique leaf Let XC j2 path clique XCp Clearly initial_labels XCi XC j recursively calls line 03 initial_labels XC jt t 2 r XCht induction hypothesis vector ux NDU following cases obtains path XC jt denotes clique adjacent XC jt denote set cliques XCi XCht root Assume XC jr exists clique XC jt t 2 r initial_labels XC jt XCht created new label Lopen satisfying cid16 M jt ht yD xD label combined appropriately Property 2 Proposition 5 ii exists label cid15w yD XS jt ht produce cid15ux x XCp cid16 Let ux element NDU If Let prove hold set cliques XCi XC j2 t 2 r holds result obvious Hence assume t 2 r exists clique XC jt ii holds In particular holds neighbors clique XCi means line 04 label set Mki contains label corresponding partial instantiation x So end loop lines 0205 V necessarily contains cid4 label cid15w xD XCi r t2 C jt labels corresponding partial cid16 discarded line 06 mean instantiations x combined If label cid15w xD XCi dominated label ﬁxed value xSi j separator XSi j But impossible Corollary 2 imply ux necessarily dominated ux NDU Consequently label cid15w xD XCi cid16 inserted message Mi j line 07 inserted Lopen line 08 cid16 w uixCi cid3 r t2 u jt xC jt D Ci XC jr The application induction clique XCp completes proof cid2 Proof Proposition 6 First Pareto executes ﬁnite number steps clearly initial_labels XCp XCp ends ﬁnite number steps G tree In addition number elements inserts Lopen ﬁnite size message Mi j domain size XSi j Each time loop lines 0409 element removed Lopen line 06 function Pareto run inﬁnitely mean inﬁnite number new elements added Lopen line 08 Now impossible elements set V result given label But function move_label new labels cid16 labels located neighbors clique XC j In words new ones combine cid15w xD XSi j labels correspond new partial instantiations attributes As number possible partial instantiations ﬁnite Pareto terminates ﬁnite number steps Note given label belong Lopen message Mtl This property clearly holds loop function initial_labels inserts twice label lines 07 08 In loop Pareto cid16 removed Lopen added Mi j function move_label Finally label set V created line 07 Pareto contains new labels mentioned preceding paragraph So add Lopen belong message Mtl label cid15w xD XSi j Let prove step assertions Proposition 5 holds Mpp substituted LPareto Clearly loop holds Let cid15w xD XSi j cid16 label chosen line 05 For vectors ux NDU exists agreeing label cid15v yE XS j1l cid16 deﬁned assertion 2 Proposition 5 j1 cid12 executing lines 0608 label exist Lopen line removes labels Lopen line 06 cid16 j1 cid12 But exist label LPareto corresponding label removed cid15v yE XS j1l ux label correspond complete instantiation x cid15v yE XS j1l cid16 combined labels case belongs Lopen Let ux NDU vector exists agreeing label Lopen label precisely chosen line 05 cid15w xD XSi j cid16 cid16 ﬁrst computes lines 0106 label set V For label notations Fig 7 move_labelcid15w xD XSi j cid16 Mk1 j Mkr j projects set line 07 It easy prove induction Labels XC j cid15w xD XSi j message Mkt j t 1 r contains label agreeing ux cid15w xD XSi j cid16 label agreeing ux Lopen Hence V necessarily contains label agreeing ux As ux NDU label discarded line 07 move_label So set V line 07 Pareto contains label agreeing ux line inserted LPareto Lopen assertions Proposition 5 holds Finally C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 1177 cid21 consider vector ux NDU label L belongs LPareto Then label set V mentioned contain agrees ux correspond partial instantiation L But label L cid21 label L new label Hence property holds case combined labels produce L impossible L Now complete proof know preceding paragraph ux NDU exists label returns Lopen cid16 LPareto exists label Lopen agrees ux When function Pareto cid15ux x XCp LPareto contains Pareto set line 08 precisely equal NDU cid2 cid21 Proof Proposition 7 Vectors separators Lopen precisely sent separators function Pareto Hence space complexity Pareto identical Pareto As time complexity combina tions sets labels projections differ Pareto order In addition labels selected line 05 determined O 1 Hence Pareto time complexity equal Pareto cid2 Proof Proposition 8 Proof induction On leaves construction labels HirxSir obviously Pareto dominate urxSir Now loop lines 0205 computes V Labels XCi Hir1 Adj XCi XC j Assume induction hypothesis Hirt weakly Pareto dominates sum subutilities cliques XCs path XCi Then clearly V weakly Pareto dominates sum subutilities XCi XCrt cliques XCs XCi path XC j Now deﬁnition Max XSi j property holds H ji deﬁned line 06 cid2 Hir p XC1 XCp Proof Proposition 9 In usual scalar collect algorithm space time complexities known O k dw time O k dw Hence overall complexities cid2 1 respectively Here difference manipulate scalars vectors size m Proof Proposition 10 The difference Pareto prunes Lopen operator NDH lines 04 09 10 But Proposition 8 labels pruned produce root Pareto dominated labels Hence discarding labels remove element NDU As Pareto proved return Pareto set Pareto H Pareto H return cid2 cid2 Proof Proposition 11 There fewer undominated vectors K labels Lopen separators kK dw dw m i1 K As consequence fewer possible k separators separators size lower 1 separators value fewer K undominated vectors Hence space complexity As time complexity account prunings perform operations Pareto actually fewer labels So difference lies additional domination tests When label moved line 08 reaches root LPareto updated line 09 means compare pairs x y x LPareto y V Thus execution function perform K 2 tests 1 On line 09 Lopen updated Note value root clique complexity O mK 2dw labels Lopen stored later separators size Lopen exceeds kK dw In addition labels Lopen compared line 09 new labels labels LPareto As 1 Finally Lopen updated line 10 note consequence overall time complexity tests kK 2dw elements V sent Pareto separator XSi j As consequence execution elements stored successively V As fewer elements K LPareto algorithm fewer kK dw time complexity obtains cid2 cid3 n j1 ui j x j 2 j1x j u1 Proof Proposition 12 We consider instances LO objectives m 2 set X j1 X j X j 0 1 j 1 n Assume objectives additive utility functions deﬁned Boolean vector x x1 xn X uix j marginal utility function deﬁned X j jx j 1 2 ui u2 j x j 2 j1 x j 2n 1 j 1 n cid3 n cid6 cid9 n cid3 n j1 2 j1x j u2x 2 Then x 0 1n u1x j1 2 j1x j u1x z u2x 22n 1 2z 2n 1 32n 1 2z Hence exist 2n different Boolean vectors X distinct images utility space form z 32n 1 2z z 0 2n 1 Note second component greater equal ﬁrst z 0 2n 1 Consequently corresponding set Lorenz vectors written z 32n 1 z z 0 2n 1 All Lorenz vectors components adding 32n 1 Consequently located line orthogonal vector 1 1 proves vectors Paretooptimal Hence initial utility vectors Lorenzoptimal proves NDLU U Clearly instances size set Lnondominated elements grows exponentially number attributes number criteria ﬁxed 2 cid2 j1 2 j11 x j 2n 1 Let z cid2 n cid3 n 1178 C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 Proof Proposition 13 The problem clearly NP To establish NPcompleteness reduce partition problem known NPcomplete 52 problem The partition problem stated follows Instance ﬁnite set A a1 items weight sai N ai A Question possible partition A sets objects equal weights cid3 ai A sai2 We construct polynomial time instance Lu m 2 criteria n Boolean Let u β β β j 1 n x j X j u1x j sa jx j u2x j sa j1 x j Thus attributes X j 0 1 partition A type B A B B A associate Boolean vector xB X n A components xB 1 cid3 B By construction image xB utility space vector AB sa Hence answer Lu YES answer partition problem YES Indeed solution partition problem exists partition utility β β corresponding Boolean vector X solution Lu Moreover answer partition problem NO partition A subsets unfair corresponding Boolean vector utility type β j β j j positive integer greater β Since Lβ j β j β j 2β Lu β 2β u cid5L β j β j answer Lu NO cid2 aB sa cid3 Proof Proposition 14 The differences Lorenz H lie lines 04 09 10 Pareto dominance substituted Lorenz dominance Clearly replacing instructions LPareto NDMpp LPareto NDLPareto V LPareto NDLMpp LPareto NDLLPareto V respectively discard element Lorenz dominated Had modiﬁed instructions Lorenz dominance reﬁnement Pareto dom inance function Lorenz H algorithm prunes labels know sure solution Hence Lorenz H described returns set Lorenzoptimal labels cid2 H return set Lorenzoptimal elements As heuristic NDL H Pareto Proof Proposition 15 The space complexity Pareto separators The time complexity Pareto parsing vectors size m need sort complexity O m log m instead O m cid2 H store elements Lopen H log m perform dominance tests addition cid3 Proof Proposition 16 The proof similar Proposition 13 The problem clearly NP To establish NP completeness reduce partition problem known NPcomplete 52 problem Let α w 1 w 2β β ai A sai2 From instance partition introduced proof Proposition 13 construct polynomial time instance P α m 2 criteria n Boolean attributes Xk 0 1 k 1 n xk Xk u1xk sakxk u2xk sak1 xk Thus partition A type B A B B A associate Boolean vector xB X n A components xB 1 B By construction image xB utility space vector ai AB sai Hence answer P α YES answer partition problem YES Indeed solution partition problem exists partition utility β β corresponding Boolean vector X gets value OWAβ β w 1β w 2β α Moreover answer partition problem NO partition A subsets unfair corresponding Boolean vector utility type β k β k k positive integer greater β Then OWAβ k β k w 1β k w 2β k α kw 1 w 2 α w 1 w 2 Hence answer P α NO cid2 ai B sai cid3 cid3 References 1 RE Steuer Multiple Criteria Optimization Theory Computation Application John Wiley 1986 2 RL Keeney H Raiffa Decisions Multiple Objectives Preferences Value Tradeoffs Cambridge University Press 1993 3 B Roy Multicriteria Methodology Decision Analysis Kluwer Academic Publishers 1996 4 M Ehrgott Multicriteria Optimization Springer 1999 5 CH Papadimitriou Y Yannakakis On approximability tradeoffs optimal access web sources Proceedings 41st Annual Sympo sium Foundations Computer Science FOCS 2000 p 86 6 D Krantz RD Luce P Suppes A Tversky Foundations Measurement Additive Polynomial Representations vol 1 Academic Press 1971 7 F Bacchus A Grove Graphical models preference utility Proceedings 11th Annual Conference Uncertainty Artiﬁcial Intelligence UAI 1995 pp 310 8 D Braziunas C Boutilier Local utility elicitation GAI models Proceedings 21st Annual Conference Uncertainty Artiﬁcial Intelligence UAI 2005 pp 4249 9 C Gonzales P Perny GAI networks utility elicitation Proceedings 9th International Conference Principles Knowledge Represen tation Reasoning KR 2004 pp 224234 10 C Boutilier F Bacchus R Brafman UCPnetworks A directed graphical representation conditional utilities Proceedings 17th Conference Uncertainty Artiﬁcial Intelligence UAI 2001 pp 5664 11 R Brafman C Domshlak T Kogan Compact valuefunction representations qualitative preferences Proceedings 20th Conference Uncertainty Artiﬁcial Intelligence UAI 2004 pp 5159 12 U Bertele F Brioschi Nonserial Dynamic Programming Academic Press 1972 13 D Nilsson An eﬃcient algorithm ﬁnding M probable conﬁgurations probabilistic expert systems Statistics Computing 8 2 1998 159173 C Gonzales et al Artiﬁcial Intelligence 175 2011 11531179 1179 14 R Dechter Bucket elimination A unifying framework reasoning Artiﬁcial Intelligence 113 1999 4185 15 Th Schiex H Fargier G Verfaillie Valued constraint satisfaction problems hard easy problems Proceedings 14th International Joint Conference Artiﬁcial Intelligence Morgan Kaufmann 1995 pp 631637 16 P Hansen Bicriterion path problems G Fandel T Gal Eds Multicriteria Decision Making Theory Applications Lecture Notes Economics Mathematical Systems vol 177 1980 pp 109127 17 V Emelichev V Perepelitsa Multiobjective problems spanning trees graph Soviet Mathematics Doklady 37 1 1988 114117 18 H Hamacher G Ruhe On spanning tree problems multiple objectives Annals Operations Research 52 1994 209230 19 G Debreu Continuity properties Paretian utility International Economic Review 5 1964 285293 20 PC Fishburn Interdependence additivity multivariate unidimensional expected utility theory International Economic Review 8 1967 335342 21 C Gonzales P Perny S Queiroz GAI networks Optimization ranking collective choice combinatorial domains Foundations Computing Decision Sciences 32 4 2008 324 22 F Jensen An Introduction Bayesian Networks Taylor Francis 1996 23 R Cowell A Dawid S Lauritzen D Spiegelhalter Probabilistic Networks Expert Systems Statistics Engineering Information Science Springer 1999 24 U Kjærulff Triangulation graphs algorithms giving small total state space Tech Rep R9009 Department Mathematics Computer Science Aalborg University 1990 25 A Darwiche M Hopkins Using recursive decomposition construct elimination orders jointrees Dtrees Proceedings 6th European Conference Symbolic Quantitative Approaches Reasoning Uncertainty ECSQARU 2001 pp 180191 26 F van den Eijkhof HL Bodlaender Safe reduction rules weighted treewidth Proceedings 28th International Workshop GraphTheoretic Concepts Computer Science Lecture Notes Computer Science vol 2573 Springer 2002 pp 176185 27 D Rose Triangulated graphs elimination process Journal Mathematical Analysis Applications 32 1970 597609 28 E Rollon J Larrosa Bucket elimination multiobjective optimization problems Journal Heuristics 12 45 2006 307328 29 L Mandow JP la Cruz A new approach multiobjective A search Proceedings 19th International Joint Conference Artiﬁcial Intelligence IJCAI 2005 pp 218223 30 BS Stewart CC White III Multiobjective A 31 R Carraway T Morin H Moskowitz Generalized dynamic programming multicriteria optimization European Journal Operational Research 44 1 Journal Association Computing Machinery 38 4 1991 775814 1990 95104 32 CC White III BS Stewart RL Carraway Multiobjective preferencebased search acyclic ORgraphs European Journal Operational Research 56 3 1992 357363 33 R Korff W Zhang H Hohwald Frontier search Journal Association Computing Machinery 52 5 2005 715748 34 G Shafer Probabilistic Expert Systems Society Industrial Applied Mathematics 1996 35 W Marshall I Olkin Inequalities Theory Majorization Its Applications Academic Press London 1979 36 H Moulin Axioms Cooperative Decision Making Monograph Econometric Society Cambridge University Press 1988 37 A Sen On Economic Inequality expanded edition Clarendon Press 1997 38 R Steuer EU Choo An interactive weighted Tchebycheff procedure multiple objective programming Mathematical Programming 26 1983 326 344 39 KM Chong An induction theorem rearrangements Canadian Journal Mathematics 28 1976 154160 40 R Yager On ordered weighted averaging aggregation operators multicriteria decision making IEEE Transactions Systems Man Cybernetics 18 1998 183190 41 P Perny O Spanjaard LX Storme A decisiontheoretic approach robust optimization multivalued graphs Annals Operations Research 147 1 2006 317341 42 W Ogryczak Inequality measures equitable approaches location problems European Journal Operational Research 122 2000 374391 43 A Wierzbicki On completeness constructiveness parametric characterizations vector optimization problems OR Spektrum 8 1986 7387 44 C Gonzales P Perny S Queiroz Preference aggregation graphical utility models Proceedings 23rd AAAI Conference Artiﬁcial Intelligence 2008 pp 10371042 45 L Galand P Perny Search compromise solutions multiobjective state space graphs Proceedings 17th European Conference Artiﬁcial Intelligence ECAI 2006 pp 9397 46 E Rollon J Larrosa Multiobjective Russian doll search Proceedings 22nd AAAI Conference Artiﬁcial Intelligence 2007 pp 249254 47 S Bistarelli F Gadducci J Larrosa E Rollon A soft approach multiobjective optimization Proceedings 24th International Conference Logic Programming ICLP Lecture Notes Computer Science vol 5366 Springer 2008 pp 764768 48 H Fargier N Wilson Local computation schemes partially ordered preferences Proceedings 10th European Conference Symbolic Quantitative Approaches Reasoning Uncertainty ECSQARU Lecture Notes Computer Science vol 5590 Springer 2009 pp 3445 49 M Laumanns L Thiele K Deb E Zitzler Combining convergence diversity evolutionary multiobjective optimization Evolutionary Computa tion 10 3 2002 263282 50 P Perny O Spanjaard Near admissible algorithms multiobjective search Proceedings 18th European Conference Artiﬁcial Intelligence ECAI 2008 pp 490494 51 JP Dubus C Gonzales P Perny Multiobjective optimization GAI models Proceedings 21st International Joint Conference Artiﬁcial Intelligence IJCAI 2009 pp 19021907 52 M Garey D Johnson Computers Intractability WH Freeman Company 1979