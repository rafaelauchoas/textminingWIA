ELSEVIBR Artificial Intelligence 94 1997 167215 Artificial Intelligence Representations solutions gametheoretic problems Daphne Koller Avi Pfeffer Computer Science Department Gates Building IA Stanford University Stanford CA 943059010 USA Abstract A multiple interacting agents artificial human best ana tools Unfortunately formal foundations wellestablished lyzed gametheoretic techniques gametheoretic reasoning inadequate dealing standard computational realistic galmes This paper describes Gala implemented allows specification efficient solution large imperfect information games The contains implernentation recent algorithm Koller Megiddo von Stengel Experimental results demonstrate algorithm exponentially faster standard algorithm practice theory It allows solution games orders magnitude larger previously possible The provides new declarative lan guage compactly naturally representing games rules As Gala provides tbe capability automated gametheoretic analysis complex realworld situations 1997 Elsevier Science l3V Keywords Game theory Algorithms Imperfect information Multiagent systems Game playing Logic programming Poker 1 Introchction When dlesigning analyzing tant consider information mally model rational strategies available situation incompatible situation multiple impor possible actions Game theory provides tools prescribe multiplayer goals entities analyze interacting entities game different players Corresponding author Email kollercsstanfordedu nail avicsstanfordedu 00043702971700 1997 Elsevier Science BV All rights reserved PZISOOO4370297000234 168 D KolleK A PfefferArtijicial Intelligence 94 1997 167215 Perfect information Imperfect information No chance Chance Chess Go Inspection game Battleships Backgammon Monopoly OPEC game Poker Fig 1 Examples games types real Since incompatible theory fundamental microeconomic FCC auction wavelengths government Clearly situations policy tions applications resource information allocation service involving multiple life contains situations agents goals game theory played role variety different areas Game design 19956 realm strategic tactical biology 221 Game theory applied theory practical examples law politics military analysis 11 theoretical economics foundations interacting involving multiple agents arise In applications agents mixture game playing interface design discourse understanding involve artificial agents network distributed coordination science applica human users Other load sharing robots routing multiple transactions gametheoretic internet analysis The applicability science problems In recent years problems analyzed game work Franklin Galil include 281 network routing protocols intelligence foundations results Examples work Shenker 231 discourse understanding turning game example 271 references theoretical tools interesting gone unnoticed theoretic Yung 71 security work Parikh multiagent Despite researchers systems growing popularity game little work providing effective automated area focused exclusively solution algorithms information world Unfortunately concern game hidden theory analytic tools gametheoretic state games form small fraction class games In real life situations analysis The work games pect games players knowledge current players aspects tool In artificial contain theory theory possibility lack information It important distinguish moves The involves uncertainty situations different players access different uncertainty games materializes Both perfect chance examples games categories shown popular model arms control chance current state world particularly information The involves resolved soon future involve element Fig 1 Most theorists game Section 35 The OPEC game future uncertainty information games The inspection described recreational inspections imperfect game D Kollel A PfeerArtiicial Intelligence 94 1997 167215 169 models oil pricing oilproducing textbook 251 countries described Rasmusens game theory As turns presence chance elements necessitate major changes solve game In fact cost solving techniques information game chance moves computational perfect game chance moves By contrast greatly player case 2 problem different players access different greater imperfect complexity problem This increase materializes substantially multiplayer introduction information increases solving information case particularly conceptual problem infrastructure algorithmic largely dealing imperfect level ignored computational dealing games Due complexity games information The lack computational unfortunate consequences l Since gametheoretic decisionmaker abstract faced complex analysis manually small simple games reallife results original insight rarely applied directly analysis As consequence situation simplify manual situation analyzed When situations amenable analysis providing problem l Manual gametheoretic analysis subtle complicated task tools provided game theory performed experts Therefore available general public specialized consultants l The lack practical gametheoretic algorithms prevented use game theoretic decision making directly autonomous paper step addressing In artificial agents lack We called Gala automates gametheoretic takes description implemented class games The different players gametheoretically strategies described game If desired agents providing arise game analyzes rational playing picture different scenarios simulate analysis large outputs situation role likely The Gala composed main interacting pieces The allows described complex games specification large game For example Fig 2 presents Gala specification typically described natural language Gala The Gala language mimics language presenting game Poker clearly concisely specialpurpose large game way rules game specification extensive form game natural augmentation Given generates game theorists Standard game trees typically AI gameplaying inadequate information information sets Gala game tree utilized systems agents game trees represent problem augmenting modelling state The extensive reallife games component form addresses The problem solving Markov decision process MDP easier problem solving partially observable Markov decision process POMDP See 101 survey 170 D Keller A PfefferArtcial Intelligence 94 1997 167215 gamecpoker C players dealer gambler flow play_roundante deal bet ante moneyplayer gets cash player gets hisher initial allocation cash payCante gplayer pot Xii pays ante pot deal choosenature Handl HsndS dealcdeck Ocards Handi dealcdeck cards HandZ pair random hands chosen dealt deck revealcgambler myhandHandl revealcdealer myhandHand players hand revealed ifbeatsHand1 HendZ betterhsnd gets gambler betterhand gets dealer XX evaluate hands immediately deal possible showdown bet choosegambler InitialBet betueen0 moneygambler InitialBet player chooses bet revealcdealer betcgembler InitialBet reveals player debt InitialBet payInitialBet gambler pot pays pot take_turnsnext_bet nextbet chooseplayer Bet meet raise betweendebt moneyplayer Bet fold debtO Bet O ifdebtO Bet 01 winsopponent payBet Splayer pot meet raise ifdebtO fold winsbetterhand showdown revealopponent betplayer Bet debt gets Bet debt Fig 2 Abbreviated Gala description poker D Keller A vefferArtijcial Intelligence 94 1997 167215 171 The second main component Gala automatically analyzes optimal strategies use randomized strategies formance The basic insight opponents games extensive essential deterministic gain additional form For games imperfect order achieve guaranteed strategies predictable information state game finds information reasonable allowing Once randomized strategies allowed existence optimal information games proved perfect optimal optimal deterministic poker game optimal strategy use randomization chess Indeed Kuhn 211 In particular randomized poker strategy strategy strategies means im exists way exists 141 shown simplified The optimal opponent player better strategy advantages playing good opponent furthermore opponent gains advantage strategy strategy revealed figuring players strategy This feature particularly automated gameanalysis attack way strategy discovered intensive randomized information strategies player worse context form code accessible general play testing Given important benefits games utilize deal games vulnerable somewhat surprising AI papers imperfect programs important strategies 3829 Clearly minimaxbased standard game strategies strategies imperfect solution algorithms information imperfect trees adapted solution algorithms finding optimal randomized games The Gala provides access variety task finding information games solution algorithms use Traditionally alternative Gametheoretic game representation converting linear optimization finding optimal strategies Gala provides access solution algorithms interfacing stateoftheart called GAMBIT 191 partitioned games representation routines linear programming extensive called classes based form solved form Standard linear complementarity normal gametheoretic normalform solving Unfortunately normalform rendering implements alternative size representation 121 solving games game different compact algorithms The result solution algorithms form based algorithms normal representation extensive incurs exponential conversion process approach blowup large games Gala approach Koller Megiddo von Stengel called sequence form This representation based converting form The approach impractical form supports use similar exponentially linear optimization faster normal One sequenceform algorithms added future versions We provide results form Our results algorithm practice Gala experimental based normal theory solve complex games tree standard algorithm It allows optimally algorithm faster exponentially implemented comparing 172 D Keller A PjefferArtificial Intelligence 94 1997 167215 r J Q K 6 7 6 9 10 J G K Card received Second round 6 7 6 Caed recense First round Fig 3 Gambler strategies gcard poker tens thousands nodes In comparison normalform game trees larger 30 nodes algorithms rarely deal ability By combining Gala specification Gala provides complete automated gametheoretic easily specify complex games algorithms capable analysis Poker game Fig 2 produce optimal strategies general poker game player gets card In gamblers bet pass If gambler passed dealer bet gambler dollar gets opportunity solving tool For example generate game tree analyzed Poker To illustrate case player dollar round bet dealer decide decides decide bet At point gambler bet dollar pass After hearing bet Such game consist rounds process consider instantiation deck consists 8 cards 6K The optimal strategies gambler Fig 3 They demonstrate shown simpler game Kuhn psychological makeup human players actually gametheoretically 141 Behaviors bluffing Gala observed arise optimal game ends game obtained interesting phenomenon These strategies generated completely automatically description rules Poker described complete endtoend game end clear comprehensible game Gala starting Fig 2 Thus provides functionality start simple specification rules description optimal strategies language supports clear concise specification The remainder paper structured follows In Section 2 review exten sets In Section rules game games concepts definition Nash equilibrium 211 In Section 5 survey solution algorithms based normal form game form algorithms 121 In Section 6 sive form game game trees augmented information 3 Gala large complex games allowing In Section 4 review including standard gametheoretic recent sequence formal specification basic solution imperfect information D Keller A PjieflerAricial Intelligence 94 1997 167215 173 ideas come different results comparing sequence Section 7 discussion unfamiliar gametheoretic tutorial sections concepts form Gala present experimental future work As readers review wellknown material Sections 2 4 51 present standard form normal directions concepts form algorithms We conclude paper contains techniques game theory Section 52 reviews recent work 2 The extensive form In section review extensive form representation game Readers familiar game theory wish skip section skim rapidly familiarize form similar traditional notation later The extensive AI representation point changes finite action set end finite number actions Therefore consider finite trees game tree As usual node represents possible state initial state Each edge action situations taken state new In paper restrict attention time root representing multiagent case edges represent choose action The set edges situation node associated single agent leading node agent The agent acting given node chance When modeling turn choices available nature moves different points rational agents preferences different possible outcomes situation Therefore associate vector payoffs agent leaf tree random events An agents strategy dictates strategy game In order recommend agent model This representation multiagent situation represent game trees AI gameplaying mode1 games games model realworld To understand consider Kuhn deck containing card simplified variant poker described initially dollars cards J Q K Each player antes dollar dealt 14l The game players familiar standardly inadequate situations applications Unfortunately following Fig 4 shows half game tree game tree corresponding Q K J K The game consists rounds shown In deals Q J grey bet additional dollar pass After gambler round bet hearing gamblers bet dealer shown bet gambler dollar pass If gambler passed dealer decides gets opportunity decide bet At point game ends If bet pass player highest card takes pot case winning player wins dollars second case takes pot wins If player bet passed winning dollar dashed black decides betting player At glance Fig 4 appears adequate albeit partial representation game However case Note points corresponding 174 D Keller A PfefferArtcial Intelligence 94 1997 167215 Fig 4 Naive attempt partial game tree simplified poker containing possible deals Fig 5 A partial game tree simplified poker containing possible deals A left corresponds pass right bet The information sets drawn ovals extend parts tree Q K information information Q J information gambler exactly state encoded tree Therefore algorithm capable executing Unfortunately So legitimate theorists long known deals gambler prefer bet case pass second strategy gamblers uses tree model game possibly determine strategy Game information tree known extensive form game contains information aggregates act For example shown deals gambler set represented graphically oval containing states game indistinguishable game information sets Each nodes tree player turn associated game encode representation representation standard Q I Q K single Fig 5 nodes immediately states players Therefore omniscient information set following D KolleK A PjefferArticial Intelligence 94 1997 167215 175 More precisely hands dealt let c d denote players nodes node corresponds Initially gambler knows card possible c information uc containing hand In turn dealer knows d gamblers action Hence gamblers previous round As Fig 5 accurate game set dealers round set ui information action Finally gambler information possibilities sets du corresponding representation partial extensive formal definition We provide 151 The game represented form game scribed Kuhn tree nodes denote game states The internal nodes tree types decision nodes player k k 1 n chance moves The outgoing edges decision labels called choices A node represent possible actions node distinct play denotes taken path leaf A choice finite directed root path The pyof kth component payoffs coincide situation h h function h determines hp p different players circumstances payoff vector hp E R leaf p The payoff p player k The relation general arbitrary Thus interests players A zerosum game models players interests strictly opposed conflict sets Each information information player differentiate set node p u outgoing edges U For sets u Fig 5 dealer choices ppd Bz set This implies labels choice sets C C information The set decision nodes partitioned assumed exactly player k Intuitively information u belongs different nodes player set C choices simplicity v disjoint For example vf 2 Bi vi P indicates peect information Throughout bet In games information players know current state game pass B indicates sets players single nodes paper restrict attention gametheory literature player perfect games players perfect recall Informally recall forgets previous actions fact knows Formally Definition 1 Player k said pelfect recuEE information sets u nodes p q E u sequence player k choices path p precisely sequence player k choices path q Thus I q information set entire history events u v identical uccomling player ks point view Had histories player k forget difference definition set To fully understand leading difference order place p q information recall assumption example PQ action actions different labels For firstround passing action gambler Queen labelled sets different information gambler Jack labelled PJ Thus 176 D Kollec A PfeferArtcial Intelligence 94 1997 167215 pass different infoation sets different Hence histories definition information forget perfect recall guarantees sets converge histories information passed information different set player 3 The Gala language The extensive form captures lowlevel dynamics game choice points captures underlying sets nodes player stinguish choices available However Poker player determined money left In fact extensive points structure fact choices player form represent money game regardless hands Since encode game tree observing identical explicitly far trivial expect person reasonable information utilize compactly specify available moves betting round Poker players dealt The game tree written possible set While unrealistic tree 30 nodes construct game tree thousands nodes It information write correct game manually expect resulting game tree correct language natural called Gala The idea declarative large complex games Gala mimics In section present language supports clear concise specifications large game typically described GAme LAnguage 3 way res language presenting specify games proposed Pell 241 perfect He utilizes information represent multi player games games outcomes arbitrary payoffs games information As expressive power Gala allows perfect imperfect clear concise game descriptions resemble highlevel natural language representation specify symmetric chesslike gamesa board games Our language general wide class games rules game class twoplayer particular oneplayer twoplayer Gala describes number players game branching program possible execution possible play game determined players program corresponds actions outcomes chance moves The program specifies initial It lists sequence game steps state including execution state change course game A Gala program categories Declarations program game In poker players named dealer gambler consists set declarations These declarations game involves category entities game state players information fall causes 3 We use Gala refer Gala language Gala described solving games specified Section 6 contains implementation language Gala language algorithms D Kolles A PfefferArtcial Intelligence 94 1997 167215 111 deck cards The category contains declarations sequence events ante deal bet nextbet sequence Gala statements Gala provides game In Fig 2 declarations fall category Each declaration similar flow control statements place programming languages flow contains Three important Gala statements building blocks defining point game choice state player The payoff indicates choose reveal outcome These basic course game A choose statement defines choice set choices available point player random A reveal statement changes information statements determine final outcome game In addition Gala allows game state explicitly determining available choices For example specified maintained money available moneydealer These updated Gala commands determine set possible amounts Poker players game utilized program Fig 2 maintain variables moneygambler betting progresses accessed player choose bet The game manipulation statements uitous concepts combinations certain affect structure game induce choice points specify sets Rather provide bookkeeping specification ubiq range simple variable manipulation dealing specialpurpose objects rectilinear board These statements directly information game state game tree turns supports types objects libraries It worth discussing relationship Gala Prolog Gala constructs The Gala embedded interpreter Prolog uses Prolog proof generator Prolog uses Prolog syntax written game In addition Prolog predicates called Gala program allowing conditions Prolog predicates game defined choose statements Gala consists parts Gala program Gala program In general game code describing auxiliary Prolog predicates discover possible plays game state expressed declarative queries We require called Gala deterministic nondeterminism We begin discussing underlying manipulation types Gala statements Finally demonstrate specifying complete games semantics Gala program We discuss game state flow control come features language basic primitives 31 Gala semantics Gala program As discussed game trees sufficiently expressive ascribing precise state state players We consider somewhat 61 allow discuss framework based work Fagin Halpem Moses Vardi multiagent semantics game information expressive reasoning systems We specify behavior Gala program execution tree Each node execution tree possible state occur game root corresponding initial state program children node coesponding state encoded node states follow As 6 global State describes states different players ss internal Nltupleoftheform local state player k The players available local state external state game In Nplayer game global state SN s environment state Sk local state encodes information player player distinguish global states The environment state corresponds program state Gala program sense programing language It consists main parts serves executed The gameflow A gameow Gala code fragment specifying remains state gameflow description letters 4 indicate arbitrary steps A gamestate consisting program variables Gala allows Prologstyle progressively changed traditional programming indicate set bindings presented possibly course execution variables refined set current assignments role program counter sequence steps In quotes use sequence gameflow variables bindings bindings variables values languages We use V The local state player describes agents mental players memories player We use Fk denote represented ordered list facts known list facts Prolog player k state It consists terms known The execution tree directed tree vertices labeled global states The command executing transitions state Some state possible states resulting successors gameflow mechanics game transferring game transition successors The choice point dice action players choices action induce different possible plays game ante pot beginning poker In cases vertices roll pass bet Different vertex single successor choice point In case corresponds game resulting chance event deterministic decision corresponding 32 Basic Gala 32 I Choice points statement The choose format choosePlayer Template Constraint Template Prolog expression containing unbound variables Constraint Prolog predicate Any instantiation taken current state4 For example Template satisfying Constraint action choosegambler InitialBet between0 moneygambler Bet 4 We assume correct Gala program set instnntiations finite computed Prolog finite time D Kollel A FfefferArtificiai Intelligence 94 1997 167215 179 Fig 2 specifies statement variable Bet semantics Gala variables nature satisfying Constraint 5 set possible actions 0 money Section 331 Player u probability distribution numerical value gambler See player Template instantiations state answers The power choose lies fact available actions query depend query encoded explicitly The answers current game state vary according available bets statement depend current value variable moneygambler described gamestate global state Thus choose statement context For example betting phase More formally let choosePlayer TemplateConstraint CL v Fl Fk FN statement We transition point The infoation current prolog constraint Constraint refinement bindings Prolog variables state let Z set insttations consistent V For I E Z let VI denote Template satisfy directly player know I state state choice V bindings set actions available locai state We implement transitions Formally interpretation Player player k E 1 Iv deterministic transition state choosingk 11 JI v Fl F 0 choosingl 3 choosing statement Gala language placeholder The statement intermediate distinguish player state Note addition fact choosingX This new state multiple states different choice sets states corresponding successor possible instantia Fk forces tions f E Z Each state form C VZ 5 6 A I Fk 0 choosingx 0 chosel Fn V1 modification V according variables Note requirement enforcing remembers actions fact chosel implied bindings added 1 See specification local state players player perfect recall assumption For case chance events Player naturep transition state choosingnature z vFl FN The set successors state form sVrT3 I E Z Each successor states reached probability gI 5 w ba omitted case defaults uniform distribution 180 D Keller A PfeerArtcial Intelligence 94 1997 167215 The choose statement way represent choice points chance players Thus game allow multiple successor states execution tree choice statement 322 Znfoton The reveal states statement format revealPlayer Pact Prolog allowing distinguish Fact interpreted Prolog Fact Player fact Fact added players pIayer local state runs Fact observed runs set bindings term Intuitively player V More foxily let reveal Player Fact I v Fl Fk FN current state let k interpretation Player Then state lff2vF ooFaclw N FactV v6 Prolog term resulting interpreting Fact bindings For example Gala program Fig 2 players starts execution stements Prolog list After value Hand2 contains Hand example fact myhmd CJI As betting progresses Fk augmented facts denote moves moves opponent For example rounds betting local state list Cmyhandf CJl choosing0121 gamblers games player gets card fact myhandGIand appropriate Hand11 revealcdealer revealcgambler chosei bet dealer 011 Definition 1 requires Note facts known player ordered player differentiate different orders This important runs requirement local runs facts revealed perfect recall fact revealed choosing adding chosen Since choose reveal Gala statements state append maintained facts known perfect recall player time action list facts known player distinish change players action We fulfill infoation chosedction 323 PayoJffs The format payoff haunt statement added mean actual payoff end game accumulated game The cumulative game long infinite players contexts In games want consider Payoff Player Amount It interpreted Players nature payoff command date Thus payoff allows 6 Fact contain uninstantiated variables names ignored interpretation process ignores names Given set bindings V Prolog term Fact unique structure Factv variables structure added players information state D Keller A PfeerArtifcial Intelligence 94 1997 167215 181 prefix game useful date able record players payoffs To implement payoff command maintain special set variables hi hN global state Formally let current state payoff Player Jmount I V Fl 3N Let k interpretation state player p interpretation Amount Then fvVh hkp3 3k h Note assume payoff revealed player 324 Basic flow control Gala provides flow control statements game The basic ones concatenation guide progress conditional termination Concatenation concatenation semantics straightforward steps 4 The semantics If 4 gameflows concatenation 4 statements demonstrated statements simply derived gameflow The game terminates reached The payoff hk accumulated assigned games payoff provides outcome statement takes vector V argument assigns payoff vk kth player terminates game point allocated player k Since players game terminates Gala terms payoff end The statement state end statement defined Conditionals form Condition cate QI gameflows state flow continues 41 let current state Prolog predi If Condition satisfied given set bindings V 41 42 Condition continues 42 More formally ifCondition 41 42 v 31 3 If Condition satisfied given V state iV3N As shorthand use Condition sequence commands 4 instead Condition 4 1 E For example Poker example beats Hand1 Handl Prolog predicate Fig 8 argument statement The outcome predicate variable betterhand determines assignment defined In correct Gala program evaluation Condition terminate 182 D Kollec A PfeerArtificial Intelligence 94 I 997 167215 325 Game trees These primitives guage Any extensive features described appropriate actions duction corresponding basic A leaf translated Gala tools specifying game trees form game written Gala program utilizing lan statement vector payoffs For internal node p suppose player k choose rooted rooted p translated defined gameflows 1 1 subtrees outcome set CL Assume p Then subtree cl information children p cl u C memberC Cct cl revealck chooseck Cct II I Ccz Cc_t I I 111 Conversely basic primitives influence choose construction reveal payoff Gala com game tree Gala program directly mands We return point end section 33 Maintaining game state As mentioned power choose players set choices explicitly set depend current commands accessing manipulating game state statement derives fact listed program Rather suite state game Gala provides extensive 331 Variables As traditional programming language described Some standard Prolog variables accessed statements set bindings V They changed consequences statements described statement Prolog variables consequence The bindings particular state maintained set variables maintained choice choose It convenient model changing state traditional programming changed Prolog variables Gala variables For reason programming languages Prolog variables game state way languages variables values provide Gala variables encoun assigned values old new value consistent variables similar helps changing assigned addition tered requiring value 8 In program set constructor member tests membership resulting set D Keller A PfefferArtcial Intelligence 94 1997 167215 183 The types variables normally different ways Prolog variables statements gameflow course useful storing Gala variables maintain global information game For example consider following code fragment local information connecting choosea Number betueencl 10 Number Parity Number mod 2 revealb Parity choosecb Guess betweencl 10 Guess ifGuess Number score gets score Number specifies This fragment player chooses number 1 10 reveals parity player b Player b tries guess number gets numbers right The Prolog variables Number Parity value added Guess connect relate numbers The Gala variable score contrast maintains course game score guesses statements score accumulated Gala variables directly referenced gameflow putting analogous Prolog Gala variables They instantiated gameflow gets Prolog variables gala_valGalaVar PrologVar galasetGalaVar Value These statements allow Prolog predicates outside Gala program game state The semantics setting variable causes transition list reference binding access modify setting referencing Gala variables obvious appended recent gala command replaced value state converted new binding variable In Fig 2 Prolog variables Handi Hand2 Bet They serve precisely making shortterm role described choose statement additional statement The use Gala variable debt allows information revealing connection outcome statements For example use Bet opponent update value debt information passed different CdlS nextbet 332 Mole complex game states The different types variables provide basic facilities storing manipulating concepts accessing aspects game state Using variables Gala provides short hand notation locations change hands contents pieces movement patterns resources statements form user utilize money For example Gala allows movequeenwhite dl Cd811 Or paycgambler pot Bet occur ubiquitously games These include On abstract level observed certain structures combinations appear different games While usually come straight hand common property elements successive bear relation classes based rank classes specific size equivalence involve sets way flavors For example flush poker set cards sharing sequence cards partition house 184 D Kollec A PfefleerArtificial Intelligence 94 1997 167215 predicates language provides predicates The Prolog supplemented combinations mines Set sequence objects successive Predicate partitionRelation Set Classes partitions Classes defined equivalence games For example relation Relation sets subsets We easy chainPredicate Set deter related equivalence elements set occurring The following example elaborate library function provided test types poker hand flushes straights shows concisely partition_profilematch_rank Hand Profile associateProfile HandType 4 11 fourofakind C3 21 full_house C3 1 II three_of_a_kind 2 2 11 two_pairs C2 1 1 II onepair Cl 1 1 1 11 relationin The predicate equivalence The predicate defined equivalence nonincreasing 32 The profile order For example 32 partitionprofile takes arguments setin case Hand case matchrank list numbersprologargProfile true precisely list numbers profile partition relation profile list sizes partition cells Profile Hand 906 946060 associated class fullhouse functionality describing common Building library predicates game apply specifically combinations Gala provides certain class games libraries specific These include games played grid chess tictattoe playing cards dice declared For example include gridboard object range rectilinear board available One predicates straight line predicate satisfy certain property tic In general highlevel predicates tattoe It defined typically easy level concepts adding module terms intermediate little effort straightline tests sequence squares open file chess threeinarow new class games requires terms chain predicate define 34 Advanced flow control One primary advantages representing code encode structures utilize game For example discussed different subtree game Gala program ability repeat set legal bets rule specifying subtrees poker game different bets Gala provides variety repetition statements basic It form whileCondition interpreted translation That current state statement whileCondition 41 v following state ifCondition 4 whileCondition vp D Kolles A PfefferArtijcial Intelligence 94 1997 167215 185 Gala provides repeat statement vides fancier functionality Its form defined repeat Flow Conditionl terms pro Conditio Each Can One Of tW0 fOrIllS unlessPredicate untilPredicate Flow executed repeatedly predicates tested iteration conditions The Set true tested Conditioq statements conditions iteration Another defined procedure As usual feature adapted traditional programming dened consists head head consists list formal parameters body listed separate section specification nextbet jaw analogous body gameflow A defined gameflow Gala program For example defined gameflows poker example deal bet languages firstbet game A defined gameflow interpreted values actual parameters ters passed value If gameflow gameflow eters defined gameflow defined gameflow conflicts obvious way parame game state begins defined formal param body substituted substituted game state All Prolog variables local different calls gameflow cause binding body defined gameflow body Finally Gala provides functionality allows players subgroup players treated uniformly This allows games players sequence actions One command playloundFlow executing FLOW player takes value players fOlXl chooseplayerAction example poker program play_roundante Constraint9 Flow gameflow defines special Gala variable player step turn For twice player choice ante flow called FLOW contains turn Thus In addition player instantiated dealer gambler In addition player variable game lho rho left righthand opponent multiplayer players variable opponent defined respectively player defined variant playzound allows subset different order default order play round games There Gala allows temporally turns performing takes form take_turnsFlow ConditionI extended version playround sequence actions condition players true The statement Condition player variable relatives poker program turn This flow meets repeated betting players called nextbet lo For example It essentially Condition way playzound construct aS repeat Flow ConditionI defined taketurns terminates wins0 case debtO 9 The dollar sign indicates lo This repeat Condition checked Gala variable referenced playzoundFlow Condition Section 33 ConditioQ checked complete rounds taketurns turns different players case statement Condition 186 D Keller A FfefferArtijcial Intelligence 94 1997 167215 gameinspection C players inspector violator params stages inspections variables stagesremaining stages inspectionsremaining inspections violate inspect flow repeatstage unlessno_more_inspections unlessno_more_stages untilviolation determine_outcome stage chooseviolator X X yes X chooseinspector Y Y yes Y revealviolator Y violate gets X inspect gets Y ifinspect yes inspectionsremaining gets inspections_remaining I stagesremaining gets stages_remaining I determineoutcome ifno_more_inspections outcomeCI II ifno_more_stages outcomeC1 ll ifinspect yes outcomeiL1 111 outcomeC1 11 I no_more_inspections gala_valinspections_remaining 0 no_more_stages gala_valstages_remaining 9 gala_valinspections_remaining RI s Ft violation gala_valviolate yes Fig 6 A Gala description inspection games 35 Two complete Gala programs In section bined form Gala program As example Fig 6 shows complete features Gala language com listing 0 Kolter A rrtiil nteliene p4 1997 167215 187 simple inspection game received significant attention game theory community model onsite inspections arms control treaties 21 The inspection game involves players violator wants commit treatyviolating act nuclear testing inspector wants prevent act The game takes place n stages In period violator chooses olr violate inspector chooses inspect By terms treaty inspector inspect 1 times n stages 1 n If stage violator violates caught violator wins If violator caught attempt violation game inspector wins If point number remaining inspections 0 assume violator successfully violate stage If number inspections remning equals number stages remning assume inspector inspect subsequent stage ensuring victory The game terminates soon assumptions valid winner known A Gala program consists statement gameGameName DeclarationList set auxiliary Prolog predicates Each declaration DeclarationList form NIW Definitioa Some declarations define gameflows specify aspects game The players declaration lists players game order default constructs playround taketurns The variables declaration declares Gala variables program The parader declaration illustrates powerful feature Gala A Gala program parameterd defines family games The program shown defines inspection game number stages inspections In program parameter values declare initial values Gala variables In general parameters appear directly inside gameflow game state modified game The flow declaration defines gameflow entire game appear game description It analogous main function C program Two gameflows defined program stage determineautcome The content garnetlow sequence statements defined previous sections En case primary construct main flow repeat statement stage repeated termination conditions met When happens outcome game determined The teination conditions defined auxiliary Prolog predicates Each stage consists choice players The violator chooses violate inspector chooses inspect After choices inspectors decision revealed violator violators decision revealed inspector The remainder stage consists bookkeeping updating values Gala variables violate stagesxemaining inspectionszemaining inspect As final example Figs 7 8 complete code poker game Fig 2 Approximately half code Gala program rest Prolog code evaluating comparing hands Most code easy understand based discussion The new feature objects deration declares game includes deck cards money account players 188 D Kolle A PfefferArtificial Intelligence 94 1997 167215 gamepoker players dealer gambler parems suits ranks cards cash ante 11 objects deck suits ranks money dealer gambler pot1 1 variables winner debt flow play_roundante deal bet ante moneyplayer gets cash pay Sent e I Splayer pot 1 deal choosenature Hsndl Hend2 dealcdeck dealcdeck csrds Handl cerds Hand2 pair random hands chosen dealt myhandHandl revealcgambler reveal dealer myhandHend2 players beatsHend1 betterhand betterhand Hend2 gets gambler gets dealer hand revealed deck evaluate XX cznce deal hands immediately ue possible showdown bet InitialBet betveen0 moneygambler InitialBet chooses bet betcgsmbler InitialBet player choosegsmbler player revaeldealer reveals debt payInitialBet end pays taketurns InitialBet gambler pot pot nextbet 1 nextbet chooseplayer Bet meet raise betweendebt fold moneyplayer Bet ifdebtO wins opponent payBet Bet O Splayer debtO debtO Bet O pot fold 7 meet raise vinsbetterhand reveal opponent bet player debt gets Bet Sdebt 1 showdown Bet winsplayer moneyplayer Winnings Losings player dealer Winnings outcome Winnings Losingsl outcomeCLosing5 Winnings I moneypot cash Fig 7 Gala description poker Gala program D Kollec A PfefferArcial Intelligence 94 1997 167215 189 beatsHand1 Hand2 predsortcompare_renks Handl SortedHandi predsortcompare_ranks Hsnd2 SortedHand21 evaluateSortedHand1 Typel Detailsi evaluateSortedHand2 Type2 Details2 Type1 Type2 Details1 o Details2 precedesType1 TypeP Cstraight_flush fourofakind fullhouse flush straight threeofakind twopairs onepair evaluateWand Type Details is_flushHand is_straightHend Type straightflush Hand CC_ Rank I _I Details Rank Type flush maplistrank Hand Details is_straightHend Type straight Hand CC_ Rank 1 _I Details CRankI partition_profilematch_rank Hand profile associateProfile Type I _I four_of_a_kid 3 X I _I Xl fullhouse CC3 I _I threeofakind C2 2 I _I twopairs cc2 I _I onepair _ is_flushHand checklistmatch_suit_ Hand is_straigbtC_l is_straightC_ Ranki _ Rank2 I Tail Rank2 Rank1 1 is_straightC_ Rank21 1 Tail compare_rulks_ Ranki _ Rank211 Rank2 Rankl match_rank_ Rank Rank match_suitSuit Suit _ Fig 8 Gala description poker Prolog predicates 190 D Kolle A PfefferArticial Intelligence 94 1997 167215 pot This declaration types objects For example deck added players hand allows program use Gala functioity deal statement causes cards removed created This Gala program takes parameters cash initially given suits ranks cards deck player number cards dealt player ante Not program different poker games variants poker cards dealt time exchanged deck individually player exchanges revealed For example describing cards adding gameflow describing exchange process replacing bet step flow take_turnsfexchangel bet easily modified use parameters game 36 Gala programs game trees form game Gala program games Galaspecified game tree More precisely given program parameters need Above showed specify extensive order converting To accomplish However need process Gala program assignment generate game tree coesponding apply standard solution algorithms Gala program values game task need understand tree game tree In sense execution game tree vertex execution However point In contrast execution manipulations complex statement tsfoatios Thus eliminate game different outcomes gamestate changing game tree essentially vertices game relationship execution tree annotated game tree like state game I1 tree corresponds tree contains nodes states represent choice game lead different plays tree contains vertices correspond values variables deterministic transforming simpler ones The states corresponding deterministic condensed version execution successor More precisely tree tree game associated nodes game tree gameflow l An internal node vertex execution choosingf 3 A leaf node Ieaf vertex execution An edge node placeholder tree command tree path consisting deter corresponding ministic edges The infoatio associated vertices local state Sk consists choice nodes player k correspond executiontree determined local state player turn vertices player ks local state s Note information tree derived tree An information set player k corresponds tree local states sets game execution execution vertices set I1 To help disambiguate use state vertex nodes execution tree node nodes game tree D Kollel A PfeerArtificial Melligence 94 1997 167215 191 4 Strategies equilibrium While defining game examining goal good strategies gametheoretic strategy We concepts possible scenarios playing interesting exercise game In section survey definitions strategy minimax strategy Nash equilibrium framework extensive form games The simplest strategies pure deterministic explicit howtoplay manual strategy Like conditional plan AI pure strategy tells player possible point game In poker example Fig 5 manual gambler contain entry If I hold King I passed round bet 1 In general pure strategy 7 player k specifies dealer bets choice information player distinguish set strategy dictate different actions nodes nodes information sets Since Fixing strategy game behavior nodes random tuple strategies game Therefore player k determines probability denote players completely determine game contains moves completely TT 1 distribution outcome nature However description TN Vk strategy leaves tree We node p tree PIP representing specified probability reaching Definition 2 The expected payoff H m defined Hn c fwPhP leaves p game recommendation players play Based definitions mean solving game A solution game tuple strategies w 9i1 TN Of course tuple strategies dictates behavior wish players strategy optimal respect current context strategy provided That player able better diverging strategies players strategies said equilibrium More formally players property following definition different players At minimum If tuple strategies satisfies remains constant rational Definition player k strategy dk player 3 A strategy combination 1 TN said equilibrium Hk7T1 Tk 7TN Hk IT TN The equilibrium property highly desirable Without solution leave vulnerable following recommended recommendation advantage In case following making idea solution rational recommended somewhat dubious player following having strategy predicted taken possibly rational longer solution thing 192 D Keller A PfeeerArtcial Intelligence 94 1997 167215 The ability particularly ones strategy secret For thing code For subject simply playing announce ones strategy giving advantage context artificial agent There important possible agents program possible game player difficult break testing intensive In perfect games easily construct equilibrium information game process called backward players known At state turn choose action maximizes payoffs Under assumption game tree determine process reduces case zerosum games induction At leaves tree payoffs player player optimal action This backward Zermelo player act rationally standard minimax algorithm preceding node end game induction 341 originally solution Unfortunately reallife games players perfect nodes And strategy clear simple process work imperfect decision optimal entire information individual set optimal nodes information Queen gambler bet In nodes King Clearly different moves optimal For example set corresponding information optimal simple poker game situation dealers hand gambler Jack node information nodes far complex case imperfect dont In fact defined equilibrium There pure player That simple game scissorspaperstone information games The answer exist To consider strategy achieve equilibrium pure strategy losing soon revealed How equilibrium The problem notion equilibrium strategy calculated Pure strategies predictable opponent making information guaranteed randomized original strategy suboptimal Unpredictable information gap inherent imperfect strategies predictable play gives opponent advantage information use pure strategies information The play hand maintains games Unpredictability Definition 4 A randomized game function probability strategy pk player k called behavior choices C u strategy set u player k returns information distribution theory In poker example randomized strategy gambler described It information games Here set defining probability betting information Once fix tuple randomized strategies u ut pN specified points random L determines Definition tuple randomized Definition 3 substituting probability 2 strategies Similarly substituting distribution _L n u rr game Therefore Pr nodes set uc u c 123 albeit behavior pure strategies tree Thus ascribe expected payoff game presented notion equilibrium D Keller A PfeerArtcial Intelligence 94 1997 167215 193 The use randomized strategies allows adequate solution scissorspaperstone probability player strategy long player sticks equilibrium game The strategy combination players assigns Each expected payoff 0 better possible choices l3 guaranteed clearly equilibrium However far clear equilibrium involving moves In Nobelprize winning use randomized imperfect strategies allows guarantee information games necessarily exists complex games theorem Nash 211 showed existence equilibrium Theorem 5 Nash 1951 Any extensiveform game peect recall equilib rium solution randomized strategies Just case perfect compelling information games strategies par zerosum Then shown von Neumann equilibrium game strategy pairs player plays optimal defensive best worstcase payoff This maximin behavior fact players best interests optimal rational player More precisely strategy reasonable harmful ticularly 321 equilibrium equilibrium provides zerosum games possible More formally Theorem 6 von Neumann equilibrium mm min HZ PI 2 1 I3 maximization minimization space randomized strategies In zerosum game strategy pair LL maximizes iff uT maximizes maxP minPcLz HI 1 2 1947 Thus zerosum games best defensive strategies optimal achieved rational player player publicly strategy Furthermore strong player announce sense They best plays intention defensive adversely affecting payoffs 5 Solving games Now clearly defined notion solution finding In poker example Fig 5 general difficult problem This specify strategy players numbers information game need appropriate sets information set numbers satisfies sets player When probabilities trying solve properties applies Nashs result actually section The application based theorem Kuhn representations l3 Since H2 HI essentially equivalent equivalent mixed strategies normal form games described Nashs 151 asserting theorem extensive games perfect extensive form games behavior strategies strategy recall minimizing min maxP HI 1 2 194 D Keller A PfefferArtijcial Intelligence 94 1997 167215 want That want treat parameters strategy variables solve In zerosum case example general computational problem Find x achieves max minyHlxy subject x represents strategy player 1 y represents strategy player 2 Given definition randomized strategies appropriate obvious We simply use different probabilities example x xc XL 1 c 123 y ydp y 1 d 123 representing dealers strategy representing Unfortunately space legal assignments variables set variables game In poker strategy gamblers search It continuous H plays important maximin strategy highdimensional Furthermore role definition equilibrium nice linear function xs ys difficult payoff function definition We survey main frameworks traditional normal solving games form algorithms extensive form In Section 52 Section 51 survey review recent approach 121 5 1 Normal form enable mathematical The representation components dynamics different senting goal game games extensive resentation called mal form allows tion normal inducing extensive game nodes game players information edges form complex sets chance moves information requiring repre state By contrast representing framework analysis properties The complexity theory provide simple uniform form viewed detracting theorists game develop alternative suitability form known straregic form clean elegant solution algorithms formulation primary rep game It turns attrac adding The normal form abstracts away structure game It represents game list pure strategies available mal form table indexed tuple pure strategies 7c 1 TN player For tuple lists tuple payoffs Hm HI HN m players More precisely Clearly extensiveform list possible purestrategy tuple Hm While game tree Definition game converted combinations 7r compute normal form We simply expected payoff encoded analysis equilibrium tranformation loses information capture basic components 3 possible courses actions outcomes necessary In case general twoplayer games called bimatrix games normal form written pair m x n matrices A B A row represents pure strategy 1 player 1 column chosen pure strategy 7rz player 2 corresponding A B HI 1 n2 Hz rt7r2 represents entries simultaneously respectively D Keller A PfefferArticial Intelligence 94 1997 167215 195 In zerosum games B A A normal form game completely specified form shows normal leach possible card 27 x 64 matrix The 27 rows correspond Fig 9 example Fig 5 The entire normal strategies gambler Each strategy round passes round Thus figure represents Queen passing Ring bets form simplified poker game indicates gambler bet round strategy passing Jack rounds betting dealer bluff betting triple pp b pb attempt example boldface gambler dealers strategy Each column corresponds action triple pp bp bb boldface strategy dealer passes Jack bets Ring matter gambler passed The matrix uf possible card d For example represents gambler bets Queen shows 16 64 possible strategies taken indicating The matrix entry strategy pair represents average possible outcomes game arising expected payoff pair In case simply possible deals For example Q J deal gambler bet payoff 1 On K Q deal gambler dealer pass leading pass dealer bet giving bet ensuing payoff 2 opportunity gambler As mentioned solution algorithms Recall form complexity representing players pure strategies randomized distribution theory games perfect recall equivalent literature Clearly randomized randomized set Such distribution representation simpler game allows simple main difficulty solving games extensive strategy However list randomized strategy viewed simply probability known mixed strategy game For distribution strategy generates mixed strategy case distribution strategy 151 strategies allows construct This representation problem finding equilibrium case twoplayer games focus remainder section However analysis holds unchanged strategies The advantages tangible general case formulation simple probabilities r We represent ui player 1 distribution player Suppose player 1 m pure strategies player 2 pure strategies Consider ls pure strate mixed strategy vector X m components gies v assigned 1 pure strategies di player representing 1 In fact nonnegative mvector x xi x Cz xi 1 describes mixed strategy Similarly nvector y It easy expected payoff HI 1 u2 equal matrix product xAy similarly H2 1 2 xTBy The vectors xy provide alternative mixed strategy 2 player 2 represented distribution UI solve They allow reduce player games zerosum case problem simple problem optimization set variables problem finding equilibrium strategies linear space vectors For described written 196 D Keller A PfeerArtQicial Intelligence 94 1997 167215 PI PI PP PP PP PP PI PP PP PP PP PP PP PP PP PP pb PP bp pp pb bb pp pb pb pb bp pb bb bp pp bp bp bp pb bp bb bb PP Pi bb pb PI bb bp PP bb bb Fig 9 Part normal form threecard poker D Keller A PfeflerArtifcial Intelligence 94 1997 167215 197 Find x achieves maxx min subject xTAy m c il n c jl xy Xi 1 Yj 1 0 This problem reformulated 51 simple linear programming problem resulting appropriate use linear progrmnming duality 321 following theorem Theorem 7 von Neumann linear program game The normul form zerosum game defines LP solutions equilibria maximin strategies 1947 The standard Simplex algorithm solve LP effectively Other standard LP solution algorithms slower practice guarantee linear programming worstcase polynomial transformation time solution allows reformulation equilibrium twoplayer games linear complementarity problem 41 A different related general problem definition Theorem 8 The normal form general twoplayer game defines linear comple mentarity problem LCP solutions equilibria game One solutions LCP corresponds 171 This algorithm LeneHowson simplex algorithm general operation fact requiring exponential time required general exhaustive enumeration course requires exponential scheme 4 p 171 This equilibrium resembles fast practice worst case If comprehensive list equilibria algorithm time At point solved twoplayer polynomialtime librium solvable algorithm effective Howevcer closer examination known algorithm think problem solving games essentially case In zerosum case fairly efficient l4 In general case problem finding single equi time We worstcase polynomial practice shows Theorems 7 8 highly misleading useful Although persons situation alternative normal form representation naturally captures analyst model formalism probably game tree convert intuitive model game In practice gametheoretic I4 In fact expect Theorem 7 holds form game normal better normal form game It easy converse problem solving linear program reduced solving 198 D Keller A PfefferArtcial Intelligence 94 1997 167215 Fig 10 A simple game player 1 1 information sets 2 pure strategies solution In theorems form And unfortunately form purposes finding linear program linear complementarity size problemis form extensive normal solvedthe problem size resulting normal form game large consider simple game tree Fig 10 In game player 1 To understand sets possible player 2 initial state At I information information sets player pick possible moves Thus pure strategy described Ilength vector Rs Ls The total number form game contains row possible pure strategies form size normal pure strategies Therefore corresponding size game tree 2 The normal game exponential normal More generally strategy space set functions information process solving moves exponential worstcase 8 incurs exponential worse Clearly case problem number information game algorithms blowup time space renders algorithms impractical sets sets I5 Thus Theorems 7 practice worst think One practice like So worst case bad blowup arise deck k cards For card c player 1 decide artificial games typical case reasonable Unfortunately case Consider simple poker example generalized pass bet option pass bet round There 3k Player courses action c total number possible strategies 2 hand decide action card d actions possible round The number different decisions normal exponential form row strategy player column 2k total number deterministic 22k 4k Since player eachstrategy strategies k size game tree 9k 1 reallife games appears In fact blowup occurs significant obstacle widespread use game theory analysis technique I5 This analysis uses standard conversion extensive conversions form exponential size game tree See 1331 details reduced normal form exist While reduced normal form smaller form game normal form Alternative normal D Kollec A FjefferArtificial Intelligence 94 1997 167215 199 This astronomical occurs abandon game theoretic approach increase important number variables realworld problems determined actually forces analyst An Overview Mathematical Theory Games William F Lucas Cornell University Management Science 181 52 Sequence form imperfect The exponential unrealistic option algorithms solving 121 This approach uses alternative avoids exponential main games Recently new approach blowup associated normal form makes standard solution information games developed Koller Megiddo von Stengel sequence form blowup associated normal form I6 We ideas briefly details 121333 representation called The sequence form based different representing probabilities Rather probabilities pure strategies reakution weight different sequences moves representation individual moves normal extensive strategic variables form represent variables form Essentially sequence player corresponds path tree isolates ignoring chance moves decisions addition sequence players direct control In poker game Fig 5 example moves players sequences game sequences round rounfd The dealer 13 sequences d sequences bet d seeing bet gambler 13 root case pass c pass c bet round pass c pass sequence card pass d seeing pass bet d seeing pass pass d seeing bet card c bet c corresponds More precisely let k player let p node game tree There unique path root p On path certain edges correspond k The string labels edges choices player k leading root Essentially p reached p chooses relevant moves player sequence p player k game That pure strategy nk reach p It sequence 8 example gkp denoted dp sequence dp set information called choices describes Our goal randomized Just mixed strategies described randomized sequences weights associated pure strategies We consider given strategy set weights associated strategy set play Clearly strategy pk certain sequence probability randomized realized I6 In 1996 discovered manovskys community Megiddo von Stengel form suggested Romanovsky paper published Russian result completely unknown West This led later independent development sequence sequence 26 But Ro scientific form Koller 200 D Keller A PfeerArticial Intelligence 94 1997 167215 player unilaterally sequence bet turn However realized given appropriate decision points pass c bet round players strategy determine sequence game reached dealer decides determine sequence realized For example realized Thus given sequence uk sequence randomized strategy pk define realization weight player k conditional probability Definition 9 The realization weight sequence gk pk denoted probability defined k given corresponding realization weights pk player k called realization plan player k k moves game The set set sequences pk player k playing according sets reached information Tk It fairly easy realization weight pk k simply product probabilities according moves listed Tk strategies We equilibrium player k searching space possible realization plans More precisely described beginning section treat 7 search space realization weights player k variables xi possible assignments minimax Note sequence node required satisfies optimality conditions variable number variables represent strategy exponential variables tree Compare normal game form Several crucial properties required order substitute search realization plans search randomized provide correspondence numbers right length randomized represents order process feasible First strategies spaces Clearly vector strategy actually 111 Zf player k perfect recall exists Lemma 10 Koller Megiddo matrix E vector e nonnegative vector x dimension mk represents matrix E strategy player k tf Ex e Furthermore randomized vector e derived game tree linear time That vector straints These constraints simple They force weights sequences denoted denoted Pi P pc represent randomized strategy encoded matrix E add right way For example satisfy certain vector e weight pass c bet round pass c pass round c B add weight sequence pass c More generally let k sequence player k leading information set player k I7 let cl cl possible moves information set The sequence uk realized mutually xgkoc Uk o c sequence obtained realized exclusive events Therefore x xUItoc c continuations concatenating I7 The perfect recall assumption implies sequence cq leading information set D Keller A PfefferArtificial Intelligence 94 1997 167215 201 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1001 0 0 0 0 0 0 0 0 0 1 Gambler 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 1 0 0 0 O 0 0 0 1000000000000 b Dealer 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 Y 1000000000011 Fig 11 Constraints realization plans 3card poker x 0 0 0 0 0 0 I 1 O 1 0 0 0 0 0 l k The constraints sequence sequence 1 x 0 T Thus realization plan root game realized realization weight play game constraints sequences P B values c encoded dealer P P Fig 11 The constraints ordered Fig 12 Thus gambler 13element written constraints weights sum weight P different lines 3 5 7 matrix Similarly realization plan constraints vector x satisfying assumption Fig 11 b asserting 13element vector y satisfying The sequence form transformation allows accomplish randomized strategies searching space vectors satisfying appropriate vector easily recover space randomized constraints Furthermore corresponding Lemma realization weights Let c possible node p game player k let Uk sequence playerk moves Then condition strategy pk tree p strategy That realization plan satisfies 10 recover corresponding randomized leading task searching xCk 0 Otherwise define Prc strategy resulting Uk induces The analysis shows represent randomized realization plan x arbitrarily It straightforward verify plan easily convert advantages gained payoff function H linear key normalform representations However The key point function realization plan variables strategy realization clear linearity solution algorithms 202 D Keller A PfefferArtijicial Intelligence 94 1997 167215 PJ PJ PJ Bl PQ PQPh PQ BQ PK pK PK BK 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 100 0 0 0 100 0 0 0 1 2 0 I 2 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 2 0 0 0 2 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 2 0 0 0 0 0 0 1 2 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 2 0 0 0 0 0 0 0 2 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 2 0 0 1 2 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 2 0 0 0 2 0 0 0 0 Fig 12 Payoff matrix sequence form simplified poker To derive linearity property divide path game tree game product pN components The probability probability product realization weights players sequences path times probability chance moves path That given tuple PI randomized moves path This product reexpressed path actually strategies taken pp rating denotes expression product chance probabilities Definition 2 obtain path p Incorpo HF c hP PP qJPkakm N leaves p kl 1 If x realization precisely xUk Hp players plan player k corresponding linear strategy Uk realization weight variables k In player case linearity Eq 1 allows achieve matrix formu lation analogous called sequence form define matrix A pair matrices A B But pure strategies player 1 rows correspond normal form In representation sequences D Keller A PfefferArtificial Intelligence 94 1997 167215 203 columns correspond sequences player 2 The entry aij weighted sum payoff leaves reached pair sequences ai u aij c PP hP matrix entry pair sequences denoted BQ For example pass Jack seeing bet leaf consistent consistent pair sequences Note pair sequences path leaf matrix entry zero Thus matrix entry pair bet Queen 0 Fig 12 shows matrix sequence pass Jack seeing pass form simplified poker game denoted P 1 obtained bet Queen Let x denote realization player 2 The entry xi x weight sequence af ith row A xi ut di player 1 y denote realization strategy cocsponding ut randomized n assuming plan plan exists Similarly yi uz It easily follows definitions aij xi yj Eq 1 Hi xY xTAy precisely normal We solve form realization weights similarity use similar following theorems normal techniques form sequence proofs Theorems 7 8 resulting form formulations allow strategic variables The Theorem linear program game 11 Keller et al 121 The sequence LP solutions equilibria form zerosum game defines strategies maximin As standard LP solution algorithms provide polynomial time algo rithms solving games In general case 12 Keller et al 121 Theorem defines linear complementarity game One solutions Lemkes algorithm 161 The sequence problem corresponds game form general hograyer LCP ose soEutiuns equilibria equilibrium Lemkes algorim simple variant aceowson algothm general characteristics results At glance similar normalform clear gained The key sequence representation sequence information set Furthermore game tree Thus example size game tree generated easily single pass LP algorithm node game tree constraint results form realization plan zerosum games linear polynomial 204 D Kollel A PfefferArtcial Intelligence 94 I997 167215 Fig 13 Architecture Gala tree opposed size game The algorithms exponential typically time reduction standard normalform size normal form general case analogous worstcase behavior form representation size game tree results provide exponential size corresponding Since normal polynomial exponential algorithms 6 The Gala The Gala builds techniques described previous sections solving games The described specifying main stages processing game generating game solving game tree examining strategies complete uses specification provide Fig 13 tree Gala functionality strategies The result The provides endtoend game specification gametheoretic optimal examination game experimental Section 35 specification general game compact poker As demonstrated parameters program allow gen instantiations natural Appropriate eration variety games These games effectively solved strategy interpreted We illustrate useful package process consider analysis To illustrate 61 Game tree generation In stage receives input game specified Section 3 The described possible executions game The interpreter works maintaining local state agents updating state semantics interpreter possible outcomes reaches choice point Gala code running Section 3 When depthfirst according interprets including fashion Gala language game Gala explores D Keller A PfeerArtijicial Intelligence 94 1997 167215 205 The interpreter implemented Prolog relying underlying Prolog interpreter Gala code It utilizes generation different facilitate embedded Prolog predicates interpreting ability Frolog deal nondeterminism possible plays game As result interpreter generation execution generated Whenever created The node consisting structural equality added nodes players choose searches entire execution tree corresponding statement encountered appropriate information game tree defined tree program During node game set information Section 36 tree set Prolog local state according 62 Solving game game resulting solves stage processing occurs methods The In second game Cmrently form The Gala converts resulting matrices These read appropriate implementation commercial We currently working implementation games The Gala provide implementation form algorithms extensiveform sequence solution algorithm The current solution zerosum games form twoplayer sequence software packages I8 resulting supports case general tree sequence linear programming form outputs sequence The solution method interface GAMBIT 191 state theory software package provides number gametheoretic primarily algorithms oftheart game normal solution game format readable GAMBIT calls appropriate GAMBIT result games written combinatmn Gala language solved In particular GAMBIT form Gala outputs provides algorithms multiplayer form routines games systems extensive program Fig 6 The Gala interface performance form normal form algorithms practical problems We experi Figs 7 GAMBIT allows compare Gala program sequence mented games simplified poker instantiated 8 inspection game instantiated The experiments performed induced different different variants games We generated poker games different numbers cards tion games varying number stages inspections experiments solution engine resulting conversion follows The Gala generate parameters instantiations deck inspec form form Gala linear program solved CPLEX The times form solution linear program added form transformed For sequence sequence extensive sequence For normal form experiments game trees printed normal form GAMBIT The normal I8 CPLEX Matlab OSL supported file converted form linear program 206 D Keller A PfefferArtcial Intelligence 94 1997 167215 250 Nemxlfcwm Sequence form oL 0 500 1 2500 WI0 1000 1500 number nodes tree 2000 2 E S P z 5 1 4 600 500 400 300 _ 200 100 0 0 Nomal form sequence ioml 500 1000 1500 2rJoo number nodes tme 2500 3000 Poker Inspection game Fig 14 Normal form versus sequence form NnniIIg time 1 5000 10000 15000 2Oooo 25000 number nodes tree 0 6000 1GOoo 15000 2iBoo 25oOcl number nodes tree Poker Inspection game Fig 15 Time genemting solving sequence form solved CPLEX The times conversion linear program added running times shown The resulting normal form solution Fig 14 They expect polynomial exponential algorithm The results continued form Fig 15 It impossible In recent experiments solved poker games hour The largest games solved obtain normalform results comparison sequence larger games 140000 nodes Sun UltraSPARC We believe II Gala easily modified implementation sequence games simply streamlining time generating poker games generating Solving run considerably generator Furthermore largest games current form solving larger deal Fig 15 shows division linear program For form takes bulk time takes 10 seconds Thus believe sequenceform faster optimizing sequence resulting implementation generator stores game D Keller A FjeeerArticial Intelligence 94 1997 167215 207 cards deck 48 43 38 33 28 23 18 13 8 3 1 fig 16 Parameters largest poker games solved tree main memory generated As consequence main memory available posed severe constraint size experiments A careful implementation write game tree disk created generate sequence single pass tree We believe minor modifications allow efficiently deal process larger games form main In general influences complexity solving sequence tree structure information form game sets In poker number nodes example total size tree determined initial number deals number nodes subtree deal turn depends cash ante Fig 16 shows number cards deck number cards dealt player largest games solved far The extreme points number rounds 127 card deck 1 card 1 round 3 card deck 1 card 11 rounds 11 card deck 5 cards 3 rounds The influence informationset formance sequenceform Games poker wide shallow tion sets information sets reached typically gain use sequence hand tree tends deep narrow reducing obtained sequenceform representation apparent compare poker games inspection tend parallel games informa play game form In inspection game savings computational algorithm structure 63 Examining strategies The final stage processing solution covered allows user examine optimal engine The user navigate game strategies dis tree view 208 D Kolles A PfefferArtcial Intelfigence 94 1997 167215 0 6 7 6 Cafd 10 recaived J Q K 0 6 7 8 0 10 J Q K Card received First round Second round Fig 17 Gambler strategies Scard poker 6 7 8 9 10 J Q K Card received oi 6 7 8 9 Card recelifed J 0 K After seeing pass After seeing bet Fig 18 Dealer strategies Scard poker optimal behavior GAMBIT offers nice graphical user interface resulting strategy information strategies set The GAMBIT useful displaying game trees interface The Gala provides useful information equilibrium game tree ve solution fixed branch Once pair strategies taken point expected outcome game given branch induce players continue probability distribution plays game Therefore information sets player derive belief nodes information belief state player value action specified strategies Also strategies user examine resulting probability play according set Gala allows distribution statethe Figs 17 18 present version simplified card deck player strategies poker discussed eightcard We dealt card ante 1 dollar analysis paper resulting D Keller A PfefferArtcial intelligence 94 1997 167215 209 probability high 1 0 middle cards goes example insights gambler bets interesting low cards corresponds characteristic associate psychological makeup human players Similarly dealer bets low cards high gambler In complex games round final round attempt discourage bluffing bet l9 They provide achieved analysis Consider round high cards The behavior tends seeing pass probability Psychologically interpret changing mind betting examples human behavior optimal underbidding gametheoretically The fact psychological pointed Kuhn 3card poker game described The Gala makes ysis effortless process allows games optimal 141 It result laborious manual poker analysis type anal carried complex properties gametheoretically As example actions implemented outcome gametheoretic game preventing illustrates provides bluffing low hand Thus output directly Before simple games solved exactly Thus solution process strategy greatly simplified exact probabilities results directly applicable 7 Discussion 71 Equilibrium optimality particularly Throughout paper questioned use Nash equilibrium Nash equilibrium In practice case extensiveform definition desired solution ways appropriate relatively imin strategy worst case materialize human players involved human players takes al games The problem arises case zerosum games The definition max optimal unlikely invariably mis player 2 playing optimally This situation set Theorem 6 requires strategy simple results adversary strategies The maximin criterion guaranteed optimal But strategies guaranteed suboptimal advantages counterintuitive win 1 assume optimal player 2 But makes mistake allows player 1 immediately win 10000 mistakes behavior For example It perfectly consistent definition player 1 guaranteed worse apparent This optimal lead I9 The game generated solved 2 seconds form algorithm terminate days execution Gala The corresponding normal 210 D Keller A PfeerArtificial Intelligence 94 1997 167215 maximin goal strategy continue playing win 1 original induction information compare perfect behavior It interesting resulting game In perfect strategy definition allows strategies bizarre behavior However backward node imperfect point Section 72 discussion Essentially node information set complicated optimal case maximin specific algorithm solve game avoids strategies picking case player know optimal harder define notion optimal optimal node Unfortunately actually designing information information game strategies games These difficulties suite alternative options consensus useful progress computational 203 1 results O known led development solution concepts The discussion refined scope paper 301 survey Currently problem Nevertheless right solution extensive different Gala Work aspects refined solution concepts See solutions incorporate alternative There alternative simply type mistake players Rather learn sharing similar games The ability Gala particularly useful provide longterm flaws play features context learning algorithm lessthanperfect approach reacting certain player problem dealing suboptimality interaction player prone detected try This approach players long game series game regularities highlevel description game state single capture language 72 Scaling While solve games tens thousands nodes close able solve huge games fullscale poker unlikely able A game tree fivecard draw poker example players allowed games We zerosum games algorithms game tree extremely exchange cards 1O25 different nodes The situation size game tree unfortunately perfectinformation fairly efficient similar Nevertheless large chessplaying imperfect currently applied issue nontrivial solve fullscale information programs successful chess Can games We believe principle standard gameplaying spite fact yes answer techniques O 20 contains extensive games survey computational methods finding equilibria nonzerosum D Kolles A PfefferArtijkial Intelligence 94 1997 167215 211 The general standard form algorithms playing perfectinformation games following function initial Expand heuristic evaluation Compute optimal pure strategies action root Choose opponent choose action Return new root step 1 subtree game beginning root node assign payoff resulting optimal leaves subtree subtree subtree wait node reached consequence actions That solving imperfectinformation Can adapt approach games Initially work fine Just expand initial subtree game assign payoff function strategies tree obtain randomized initial stages game play thing beginning leaves subtree We solve resulting player We strategy proceed root node use heuristic evaluation The problem arises attempt apply idea subsequent positions player know node actually game At point actual node p player knows information set u contains p The player consider combine subtrees information u obtain single decision rooted nodes entire set think nodes Of course player beliefs determined strategies computed probabilities Therefore reasoning generating world We optimal tree Finally choose randomized optimal set chance moves solved simple process set separately information true state strategy true state cases We consider nodes assumption game weighted probability problem tree representing information This approach clearly flawed assumes player perfect information round inspecting This action cost waste entire possibility gathering example inspector making decision Consider optimal course action However algorithm described The algorithm considers occurred case simply case intelligence gather waste resources inspection It chosen options Either violation inspect violation occurred variant inspection intelligence game A somewhat plausible current position The player creates new game tree root node chance players node children nodes u The chance represents players uncertainty incorporates approach The solution process guide interleaved process generating game tree partial results expansion process relevant parts game tree 212 D KolleK A PfeerArtifcial Intelligence 94 1997 167215 uncertainty players belief state The analysis proceeds new tree chance leading probability node agrees ignores dealer incorporate set correspond subtle While threecard poker The flaw algorithm information Consider second decide action following players uncertainty player knows opponents uncertainty After true state nodes u opponent necessarily round pass gambler The dealer knows trying hand Jack The nodes information gambler Queen King In game begins choosing gambler better card dealer know nodes random dealer reason gambler fact optimal Queen know advantage strategy situation The point strategy Thus eliminate knows fact Similarly nodes possible player effect players strategy The nodes completely consideration reached 22 state large effect ones considers possible player considers player considers possible bluff However better card And dealer bluff nonzero probability common knowledge information nodes opponents actual game opponent eliminated requires thinks 6 reduce dynamically It possible knowledge nodes The resulting develop solution approach analogous number reachable nodes stays constant size game tree Some method pruning game variants poker elimination described algorithm useful poker game consists deal followed bets eliminate games For example rounds betting common knowledge 23 Unfortunately games complex structure created revealed This inspection course game In games significantly needed based value information metric believe interesting Besides information case cards dealt nodes tree 93 We tree principled manner presents difficulties designing heuristic evaluation subtree This function account words nodes information conceivably estimate fails differentiate function evaluate nodes leaves state In evaluation node consider node state players poker function player better hand win current stake states player knows better hand affect nodes value For example naive evaluation tree care taken knowledge players set In fact information research problem developing unreachable algorithm prunes pruning involved 22 A fact 4 common knowledge know know 23 Unfortunately main challenge know q5 poker depth tree width players know 4 players know know 4 D Keller A PfeerArtijicial Intelligence 94 1997 167215 213 knowledge affects value state In threecard poker opponent possesses Jack state possess King better possess Queen fooled bluff obstacles boundeddepthsearch circumvent general solution While Even proach wide game trees scale poker example depth 1 One approach games based abstraction Many similar game states mapped resulting solved completely play real game ap work game tree deep expanded abstract state tree tree The abstract abstract game abstract game tree smaller useful strategies original In poker example approach likely work It implausible player 5card draw generates completely Section 6 reveal lot regularity results 552 hands different strategy Indeed experimental strategies gambler exhibiting We believe close possible abstractions solution appropriately optimal We currently identical behavior cards 6 7 8 abstracted game result strategies process experimenting concisely naturally appropriate abstractions automatically Even interestingly represent game rules allow raises solve possibility day develop solution algorithms rules Galas ability construct intriguing games dinectly 73 Conclusion The Gala provide search Different abstractions efficiently Gala provides convenient approaches solving games infrastructure experimental variants game generated easily solved tool testing evaluating different gametheoretic Perhaps importantly Gala play crucial role making gametheoretic simply language described expert given people reasoning accessible plex games gametheory equately models nally nonexpert httproboticsstanfordedukollergalahtml encourage gametheoretic use This allows situation The effective obtained game solution reasonable public human We hope examined layperson solutions daytoday way availability interpreted algorithms reasoning solutions Gala allow life implemented legible time Fi use available systems The allows com ad refined Acknowledgements We deeply grateful way ensure GAMBIT Richard McKelvey Ted Turocy going functionality needed experiments ready 214 D Kolles A PfefferArtcial Intelligence 94 1997 X67215 access CPLEX ntemational Computer Science Institute time We thank providing early stages project We wish thank Nimrod Megiddo Barney Pell Stuart Russell Yoav Shoham John Tomlin Bernhard von Stengel Michael Wellman Salim Yusufali comments Some work authors UC Berkeley support University California Presidents Postdoctor Fellowship NSF Science More recent work supported Postdoctoral Associateship ONR grant NOOO1496l0718 generosity Powell foundation useful discussions Experimental Berkeley I RJ Aumann S Hart eds Handbook Game Theory Vol 1 NorthHolland Amsterdam 1992 2 R Avenhaus B von Stengel S Zamir Inspection games RJ Aumann S Hart eds Handbook Game Theory Vol 3 NorthHolland Amsterdam 1997 3 JRS Blair D Mutchler C Liu Games imperfect infoon W bores ofe Adftl Fall Symposium Gantes Planning Learning 1993 141 RW Cottle JS Pang RE Stone The Linear Complementarity Problem Academic Press New York 1992 f5 GB Dag Linear Programming Extensions Princeton University Press Princeton NJ 1963 161 R Fagin JY Halpem Y Moses MY Vardi Reasoning abuu Knowledge MIT Press Cambridge MA 1995 7 M Franklin 2 Galil M Yung Eavesdropping games graphtheoretic approach privacy distributed systems Proceedings 34th Annual IEEE Symposium Foundations Computer Science 1993 670679 infoaon WoTng Notes AAAI Fall moirn Games Planning warning S S Gordon A comparison probabilistic search weighted heuristics game incomplete f 1993 9 RA Howard JE Matheson KL Milbr eds Readings Principles Applications Decision Analysis Stanford Research Institute Strategic Decisions Group Menlo Park CA 1977 IO Ll Kaelbling ML Littman AR Cassandra Planning acting partially observable stochastic domains Submitted publication obtained http www cs duke edu litttopicspomdppagehtmll996 1 I D Keller N Megiddo The complexity twoperson zerosum games extensive form Games Economic Behavior 4 1992 528552 121 D Koller N Megiddo B von Stengel Fast algorithms finding randomized strategies game trees Proceedings 26th Annual ACM Symposium Theory Computing 1994 750759 131 D Koller N Megiddo B von Stengel Efficient solutions extensive twoperson games Games Economic Behavior 14 1996 247259 141 HW Kuhn A simplified twoperson poker HW Kuhn AW Tucker eds Contributions Theory Games I Princeton University Press Princeton NJ 1950 97103 151 HW Kuhn Extensive games problem information HW Kuhn AW Tucker eds Contributions Theory Games II Princeton University Press Princeton NJ 1953 193216 161 CE Lene Bimatrix eqniIibum points mathematical pugging augerne Sei 11 1965 681689 171 CE Lemke JT Howson Jr Equilibrium points bimatrix games J Sac Industrial Appl Math 12 1964 413423 181 WF Lucas An overview mathematical theory games Management Sci I Appendix P 1972 319 I91 RD McKelvey GAMBIT feacfjve Extensive Form Game Program California Institute Technology Pasadena CA 1992 1201 RD McKelvey A McLennan Computation equilibfia finite games Handbook Computational Economics 1996 D Keller A PfefferArtificial Intelligence 94 1997 167215 215 21 JF Nash Noncooperative games Ann Math 54 1951 286295 22 R Norton Winning game business Fortune Mag 131 1995 36 23 P Pah A gametheoretic account implicature Proceedings 4th Conference Theoretical Aspects Reasoning Knowledge TARK Morgan Kaufmann Los Altos CA 1992 24 B Pell Metagame symmetric chesslike games H van der Herik L Allis eds Heuristic Programming Artificial Intelligence 3The Third Computer Olympiad Ellis Horwood Chichester 1992 25 E Rasmusen Games Information An Introduction Game Theory Basil Blackwell Oxford 1989 26 JV Romanovsky Reduction game perfect recall constrained matrix game Dokl Akad Nuuk SSSR 144 1962 6264 Russian 27 JS Rosenschein G Zlotkin Consenting agents designing conventions automated negotiation AI Mug 15 1994 2946 28 SJ Shenker Making greed work networks gametheoretic analysis switch service disciplines IEEEACM Trans Networking 3 1995 819831 291 SJJ Smith DS Nau Strategic planning imperfectinformation games Working Notes AAAI Fall Symposium Games Planning Learning 1993 30 E van Damme Refinements Nash Equilibrium Concept Lecture Notes Economics Mathematical Systems Springer Berlin 1983 3 11 A van den Elzen B von Stengel D Talman Tracing equilibria extensive games complementary pivoting Manuscript 1996 32 J von Neumann 0 Morgenstem The Theory Games Economic Behavior Princeton University Press Princeton NJ 2nd ed 1947 331 B von Stengel Efficient computation behavior strategies Games Economic Behavior 14 1996 220246 341 E Zerrelo Uber eine Anwendung der Mengenlehre auf die Theorie des Schachspiels EW Hobson AEH Love eds Proceedings 5th International Congress Mathematicians II Cambridge University Press Cambridge 1913 501504