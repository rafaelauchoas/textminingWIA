Artiﬁcial Intelligence 252 2017 267294 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint The ﬁrst international competition computational models argumentation Results analysis Matthias Thimm Institute Web Science Technologies Universität KoblenzLandau Germany b Université Côte dAzur CNRS Inria I3S France Serena Villata b r t c l e n f o b s t r c t Article history Received 14 June 2016 Received revised form 15 June 2017 Accepted 18 August 2017 Available online 30 August 2017 Keywords Formal argumentation Algorithms We report First International Competition Computational Models Argumenta tion ICCMA15 took place ﬁrst half 2015 focused reasoning tasks abstract argumentation frameworks Performance submitted solvers evaluated computational problems wrt different semantics relating veriﬁcation acceptance status arguments computing jointly acceptable sets arguments In paper technical setup competition overview submitted solvers Moreover report results discuss ﬁndings 2017 Elsevier BV All rights reserved 1 Introduction Argumentation core technique humans reach conclusions presence conﬂicting information mul tiple alternatives It means persuasion dialogues owns deliberation mechanism An argument regarded concise set pieces information supports certain conclusion As Tweety bird birds usually ﬂy Tweety supposedly ﬂies Arguments support contradicting conclusionsconsider As Tweety penguin penguins ﬂy Tweety ﬂy despite fact birdand pro cess argumentation aims comparing weighing arguments counterarguments ultimately deciding arguments prevail While ﬁeld argumentation theory 96 studies structure interaction arguments philosophical perspective artiﬁcial intelligence ﬁeld computational models argumentation 68 gained attention recent years In general ﬁeld concerned logical formalizations models argumentation automatic reasoning systems cope uncertainty inconsistency Thus models closely related approaches nonmonotonic reasoning offer novel perspective After earlier works Pollock 82 Simari Louie 87 abstract argumentation frameworks proposed Dung 35 general abstract formalism represent arguments interactions inﬂuential In abstract ar gumentation frameworks arguments represented vertices directed graph arc vertex A vertex B means A counterargument B A attacks B Thus model abstracts issues argu mentation scenariosincluding inner structure argumentsand provides clean formal view issue conﬂict arguments Given abstract argumentation framework central question decide arguments acceptable survive attacks counterarguments backing arguments A set jointly acceptable arguments called extension This paper submitted Competition Section journal Corresponding author Email address thimmunikoblenzde M Thimm httpdxdoiorg101016jartint201708006 00043702 2017 Elsevier BV All rights reserved 268 M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 Abstract argumentation provides nice framework discuss issues nonmonotonic reasoning general nonmonotonic formalisms default theory logic programs stable model semantics cast abstract argumentation frameworks cf 35 On hand multitude different semantics extensions expressivity previous formalisms provide novel general approach nonmonotonic reasoning cf 39 This makes abstract argumentation frameworks versatile knowledge representation formalism Many research topics spawned frameworks including semantical issues 4 extensions support 31 quantitative approaches 389065 particular algorithms 30 The computational challenges reasoning problems vast range second level polynomial hierarchy certain semantics 4044 Among ﬁrst implementations reasoning abstract argumentation frameworkswhich appeared 2008were Dungine 88 ASPARTIX 47 More followed years starting 2013 till number comparative analyses argumentation solvers conducted 4210439511121427 order address systematic performance comparison Following tradition communities approaches knowledge representation reasoning SAT Answer Set Programming ASP communities public competition solver evaluation planned soon This paper reports First International Competition Computational Models Argumentation ICCMA15 took place ﬁrst half 2015 The results competition oﬃcially presented International Work shop Theory Applications Formal Argument TAFA15 colocated 24th International Joint Conference Artiﬁcial Intelligence IJCAI15 Buenos Aires Argentina The competition called solvers classical computational problems abstract argumentation frameworks wrt classical semantics proposed 35 includ ing enumerating extensions particular semantics deciding certain argument contained Submitted solvers evaluated wrt runtime performance tasks series artiﬁcially generated argumentation frameworks Abstract argumentation frameworks arguably investigated formalism formal argumentation However formalisms structured argumentation deductive argumentation 8 defeasible logic program ming 55 In structured argumentation arguments set propositional formulas support argument derive certain conclusion claim argument The attack relation arguments derived logical inconsistency For ICCMA15 problems abstract argumentation considered simple wellunderstood formalism representing computational argumentation However considering tracks structured argu mentation worthwhile endeavor future competitions The competition received 18 solvers research groups Austria China Cyprus Finland France Germany Italy Romania UK The solvers based different approaches algorithmic design patterns solve problems ranging reductions SAT ASP problems novel heuristic algorithms This paper gives overview setup competition submitted solvers results More speciﬁcally remainder paper organized follows In Section 2 provide necessary background abstract argumentation overview computational tasks considered competition In Section 3 technical setup competition including approach benchmark generation evaluation methodology technical interface requirements In Section 4 overview submitted solvers Afterwards present analyze results competition Section 5 discuss lessons learned ﬁrst experience Section 6 We conclude summary Section 7 Appendix A provides pseudo code graph generators creating benchmark graphs competition Appendix B gives detailed graphtheoretic statistics benchmark graphs 2 Background competition overview In following brief overview abstract argumentation computational problems considered competition brief overviews answer set programming satisﬁability solving The intended provide formal background inner workings solvers based reductions 21 Abstract argumentation Abstract argumentation frameworks 35 simple view argumentation presuppose internal structure argument Abstract argumentation frameworks consider interactions arguments means attack relation arguments Deﬁnition 1 Abstract argumentation framework An abstract argumentation framework AF tuple AF Arg Arg set arguments relation Arg Arg For arguments A B Arg relation A B means argument A attacks argument B Abstract argumentation frameworks concisely represented directed graphs arguments represented nodes edges model attack relation Note consider ﬁnite argumentation frameworks argumentation frameworks ﬁnite number arguments M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 269 Fig 1 A simple argumentation framework Example 1 Consider abstract argumentation framework AF Arg depicted Fig 1 Here Arg A1 A2 A3 A4 A5 A2 A1 A2 A3 A3 A4 A4 A5 A5 A4 A5 A3 A5 A6 A6 A6 Semantics usually given abstract argumentation frameworks means extensions 35 An extension E argumentation framework AF Arg set arguments E Arg gives coherent view argumentation underlying AF In literature 3522 wide variety different types semantics proposed In competition focused classical semantics Dung 35 grounded complete preferred stable semantics For set B A S A B denote arguments S Arg let S set attacked arguments S B A S B A denote set attackers S let S Deﬁnition 2 Let AF Arg argumentation framework 1 A set arguments E Arg conﬂictfree iff A B E A B 2 An argument A Arg acceptable respect set arguments E Arg iff B Arg B A Acid7 E Acid7 B 3 A set arguments E Arg admissible extension iff conﬂictfree A E acceptable respect E 4 A set arguments E Arg complete extension CO iff admissible A Arg E acceptable respect E 5 A set arguments E Arg grounded extension GR iff complete E minimal respect set inclusion 6 A set arguments E Arg preferred extension PR iff complete E maximal respect set inclusion 7 A set arguments E Arg stable extension ST iff complete E E Arg If E extension A accepted wrt E The intuition admissibility argument accepted attackers accepted argument accepted acceptable argument attacking The idea completeness property acceptable arguments accepted The grounded extension minimal set acceptable arguments uniquely determined 35 A preferred extension maximal set acceptable arguments stable extension complete extension attacks arguments contained Note complete preferred stable semantics extensions necessarily uniquely deﬁned stable semantics extension necessarily exist 35 For remainder paper use σ denote semantics GR CO PR ST Example 2 Consider argumentation framework AF Fig 1 The complete extensions AF E 1 A2 E 2 A2 A4 E 3 A2 A5 Furthermore E 1 grounded extension E 2 E 3 preferred extensions E 3 stable An alternative approach deﬁne semantics argumentation framework use labelings instead extensions 21 Deﬁnition 3 AFlabeling Let AF Arg abstract argumentation framework An AFlabeling total function lab Arg undec We deﬁne inlab ai Arglabai outlab ai Arglabai undeclab ai Arglabai undec While extensions allow twovalued assessment justiﬁcation status argumenteither argu ment extension notlabelings allow threevalued assessment additional assessment value undec represents undecided assessment Similar conditions Deﬁnition 2 deﬁned labelings order formalize labeling conﬂictfree admissible complete labeling lab conﬂictfree iff A B inlab A B Indeed labelingbased extensionbased semantics equivalent 21 following transformations If E conﬂictfree admissible complete extension labeling lab deﬁned inlab E conﬂictfree admissible complete labeling Furthermore lab outlab E conﬂictfree admissible complete labeling inlab conﬂictfree admissible complete extension For reason use terms labeling extension interchangeably undeclab Arg E E 270 M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 Table 1 Computational complexity important decision problems Cc denotes completeness com plexity class C P class decision problems solvable deterministic Turing machine polynomial time NP resp coNP class decision problems Yes resp No stances accepted nondeterministic Turing machine polynomial time cid3P 2 class decision problems complement decided nondeterministic Turing machine additionally access NPoracle polynomial time 81 σ CO PR GR ST Credσ NPc NPc P NPc Skeptσ P cid3P 2 c P coNPc Verσ P coNPc P P Existsσ trivial trivial trivial NPc Exists σ NPc NPc P NPc 22 Computational problems The important decision problems discussed context abstract argumentation follows let σ semantics Credσ Input An argumentation framework AF Arg argument A Arg Skeptσ Output Yes iff A contained σ extension AF An argumentation framework AF Arg argument A Arg Input Output Yes iff A contained σ extensions AF Verσ Input An argumentation framework AF Arg set E Arg Output Yes iff E σ extension AF Existsσ Exists σ An argumentation framework AF Arg Input Output Yes iff AF σ extension An argumentation framework AF Arg Input Output Yes iff A nonempty σ extension The decision problem Credσ credulous acceptance argument contained σ extension The problem Skeptσ skeptical acceptance argument contained σ extensions Further Verσ verifying given set arguments σ extension Finally problems Existsσ Exists relate existence problems extensions Note Existsσ trivial semantics stable semantics σ guarantee existence extension The harder decision problem Exists checking σ exist nonempty σ extension Table 1 gives overview computational complexity decision problems discussed The results grounded semantics ExistsPR ExistsCO follow immediately properties semantics shown 35 The remaining results complete semantics initially 32 The results stable preferred semantics follow corresponding results logic programming 33 SkeptPR result 36 For detailed discussion results employed techniques 4144 As seen grounded semantics semantics ﬁve decision problems tractable A naive algorithm computing grounded extension easily given ﬁrst arguments attackers added extension E arguments arguments attacked arguments removed framework process repeated obtains framework unattacked argument ﬁnal set E grounded extension Clearly polynomial algorithm solve decision problems wrt grounded semantics The problems related complete stable semantics usually reside ﬁrst level polynomial hierarchy intractable practice Preferred semantics usually assessed computationally harder semantics particularly decision problem Skeptσ lies second level polynomial hierarchy Functional problems computing σ extensions argumentation framework AF investigated literature This line general research computational complexity functional problems heavily depend size output However computational complexity corresponding decision problems usually suﬃcient judge hardness functional problems Still solving functional problems important actual usability systems abstract argumentation considered competition More precisely problems considered competition given follows actual naming convention competition M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 271 DCσ Input An argumentation framework AF Arg argument A Arg Output Yes iff A contained σ extension AF DSσ Input equivalent Credσ An argumentation framework AF Arg argument A Arg Output Yes iff A contained σ extensions AF SEσ EEσ equivalent Skeptσ An argumentation framework AF Arg Input Output σ extension E AF NO σ extensions An argumentation framework AF Arg Input Output set E 1 En σ extensions AF In notation abbreviation DC stands decide credulous DS decide skeptical SE extension EE enumerate extensions In following refer DC DS SE EE computational problems simply problems combination problem semantics SEPR track In competition considered problems combination discussed semantics resulting total 16 tracks For track aim competition evaluate solvers fast instances tracks correctly solved Solvers permitted enter competition supported 16 tracks obliged support 23 Argumentation answerset programming satisﬁability solvers In following provide basics Answerset Programming Satisﬁability solvers This background intended support reader understanding main insights competition solvers described Section 4 implementing encodings 231 Answerset programming Answer set programming ASP 57 modern approach declarative programming user focuses declar atively specifying problem ASP roots deductive databases logic programming logicbased knowledge repre sentation reasoning constraint solving satisﬁability testing It applied uniform way search problems classes P NP NPNP applications like planning decision support model checking As discussed 93 ASP relies 1 representation knowledge terms disjunctive logic programs negation failure possibly including explicit negation forms constraints 2 interpretation logic programs stable modelanswer set semantics extensions dealing explicit negation constraints 3 eﬃcient computational mechanisms called ASP solvers compute answer sets grounded logic programs We ﬁx countable set U domain elements called constants An atom expression pt1 tn p predicate arity n 0 ti variable element U An atom called ground free variables BU denotes set ground atoms U A disjunctive rule r form a1 b1 bk bk1 bm n 0 m k 0 n m 0 a1 b1 bm literals represents default negation The head r set Hr a1 body r Br b1 bk bk1 bm Furthermore r bk1 bm A rule r normal n 1 constraint normal n 0 A rule r r b1 bk B B r A rule r ground variable occurs r A fact ground rule safe variable r occurs B disjunction body An input database set facts A program ﬁnite set disjunctive rules For program π input database D write π D instead D π If rule program normal resp ground program normal resp ground For program π let U π set constants appearing π Grπ set rules rσ obtained applying rule r π possible substitutions σ variables r elements U π An r I An interpretation interpretation I BU satisﬁes ground rule r iff Hr I cid14 B I satisﬁes ground program π r π satisﬁed I A nonground rule r resp program π satisﬁed interpretation I iff I satisﬁes groundings r resp Grπ We I BU answer set π iff subsetminimal set satisfying GelfondLifschitz reduct π I Hr B r r Grπ For program π denote set answer sets A Sπ r I B rI B 272 M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 ASP particularly wellsuited enumeration problems systems enumerate default solutions given program enabling enumeration extensions abstract argumentation framework easy manner Moreover disjunctive ASP capable expressing problems complete second level polynomial hierarchy abstract argumentation considering semantics preferred semantics high complexity cf previous section Several approaches proposed literature computing extensions abstract argumentation frame works ASP solvers 76475399 All approaches rely mapping argumentation framework logic program answer sets onetoone correspondence extensions original abstract argumentation framework The approaches differ kinds extensions focus mappings corre spondences deﬁne For exhaustive overview refer reader 93 In Section 4 provide speciﬁc features ASP solvers participated competition 232 Satisﬁability solvers A propositional formula set Boolean variables satisﬁable iff exists truth assignment vari ables formula evaluates true Checking assignment exists satisﬁability SAT problem 101 SAT solvers largely owe success eﬃcient search heuristics 75 conﬂictdriven tracking 86 cid2 Let consider standard setting propositional logic set P b c propositional atoms standard logical connectives denoting conjunction disjunction negation respectively A literal atom p P negation p A clause C set literals representing disjunction lC l A propositional formula Conjunctive Normal Form CNF conjunction clauses An interpretation I P true f alse maps atoms Boolean values An interpretation I satisﬁes formula ϕ I ϕ ϕ evaluates true assignment determined I A formula ϕ satisﬁable exists interpretation I I ϕ unsatisﬁable A satisﬁability solver decision procedure determines given formula ϕ CNF satisﬁable Stateoftheart SAT solvers capable solving instances hundreds thousands literals clauses SAT solvers operate following way conﬂict clauses derived previous instance ϕ retained subsequent run solver formula ψ ϕ ψ Moreover backtracking capabilities SAT solvers possible ﬁx tentative assignment assumption respectively subset S A form conjunction literals S Assumptions discarded subsequent calls This capability perform iterative calls crucial performance SATbased algorithms proposed abstract argumentation problems One method SAT solvers abstract argumentation reduce argumentation problem hand formula propositional logic Reductions kind sophisticated SAT solvers amenable ﬁeld argumentation Using classical propositional logic evaluate abstract argumentation frameworks ﬁrst advocated 7 extended quantiﬁed propositional logic 149 eﬃciently reduce abstract argumentation problems complexity NP Several implementations modern SAT technology solving hard problems area argumentation In Section 4 provide speciﬁc features SAT solvers participated competition 3 Technical setup evaluation In section overview benchmarks competition generated Section 31 evaluation measures Section 32 details execution competition Section 33 31 Benchmarks The availability realworld benchmarks argumentation problems point time competition limited exceptions 2019 AIFdb1 However benchmarks tailored problems argument mining 102 representation abstract argumentation frameworks usually lead topologically simple graphs cyclefree graphs These kinds graphs suitable comparing computational performance solvers abstract argumentation problems classical semantics coincide grounded semantics cyclefree graphs 35 considered computational problems tractable cf Section 23 Another possibility obtain benchmark examples utilize problem areas automatic planning satisﬁability reasoning prob lems encode problems abstract argumentation frameworks Although problem transformations generally lead complex challenging graphs structurally similar As consequence solvers optimized speciﬁc graphtheoretic features advantage solvers In order able distinguish computational performance considered semantics different graphtheoretic features decided use artiﬁcially generated graphs benchmarks line preliminary performance evaluation 10 In order provide challenging benchmarks abstract argumentation setting created different graph generators called GroundedGenerator StableGenerator SccGenerator addressing different aspects 1 http corpora aifdb org M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 273 computationally hard benchmark graphs These graph generators implement heuristic algorithms generating graphs speciﬁc features large number size extensions speciﬁc semantics Another possibility generate graphs argumentation problems use exact methods algorithms solving realizability problem 37 recently proposed method synthesizing frameworks 77 Given speciﬁc set extensions methods construct argumentation framework exactly set extensions We decided use heuristic algorithms instead exact methods following reasons First exact methods rely deterministic approach construct argumentation framework Consequently generated graphs possess similar graphtheoretic features exploited speciﬁc solvers Although possible alter algorithms order incorporate randomness lead heuristic algorithms necessarily desired result Second solving realizability problem computationally hard Initial experiments showed feasible run heuristic algorithms test resulting graphs suﬃciently good characteristics We brieﬂy outline algorithms generators features graphs generated algorithms Pseudo code formalizations algorithms Appendix A A GroundedGenerator This graph generator aims generating graphs large grounded extension As exten sions considered semantics contain grounded extension 35 graphs generated generator test solvers exploit property eﬃciently compute extensions Given upper bound maxA number arguments predeﬁned probability p generator ﬁrst randomly determines actual number A arguments uniformly distributed 1 maxA named a1 A Afterwards pair j 1 A j attack ai j added probability p The resulting intermediate graph component guaranteed acyclic possibly fully connected Afterwards random attacks added notyet connected arguments graph component uniformly distributed B StableGenerator This graph generator aims generating graphs stable extensions complete preferred extensions Graphs generated generator pose huge combinatorial challenges solvers addressing computational tasks determining skeptical credulous acceptance arguments enumerating extensions After having determined number arguments A GroundedGenerator generator ﬁrst identiﬁes set arguments grounded form acyclic subgraph contain grounded extension Afterwards subset M candidate stable extension arguments randomly selected attacks randomly added arguments M arguments M grounded This process repeated number desired stable extensions M reached C SccGenerator The graph generator aims generating graphs feature stronglyconnected compo nents challenging solvers rely decomposition techniques 72 After having determined number arguments A GroundedGenerator ﬁrst step arguments partitioned uniform distribution given number N components C1 Cn Within component attacks added randomly high probability given parameter likely forming strongly connected component Inbetween components attacks randomly added probability given parameter component Ci C j j order avoid having large strongly connected components The source code generators source code repository2 probo 25 benchmark suite run competition discussed Section 33 In contrast preliminary perfor mance evaluation 10 decided use proprietary graph generators instead wellknown graph models network theory ErdösRényi 52 WattsStrogatz 100 BarabásiAlbert 3 models following reason Graph models network theory designed explain topology social networks An important cept indirectly implemented graph models triangle closure tendency nodes directly connecting neighbors neighbors saying friend friend friend From perspective challenging benchmarks abstract argumentation feature trivializes computation Initial experiments suggest generated graphs contain small grounded extensions usually stable extensions small complete preferred extensions The observation fact graph models aim modeling small world property realworld graphs3 This leads arguments directly indirectly conﬂict For benchmark generators A B C generated 72 argumentation graphs different sizes partitioned set equalsized subsets small medium large instances This results 9 test sets having 24 argumentation graphs Appendix B exact numbers arguments attacks We conducted 2 http sourceforge net p probo code HEAD tree trunk src net sf probo generators 3 This property basically states relatively short paths node node 100 example theory degrees separation suggests social network known world longest shortest path persons 274 M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 preliminary experiments alpha versions available solvers order check graphs easy hard There discovered test set corresponding largest argumentation graphs generated B diﬃcult solver As consequence test set removed evaluation All test sets appropriate actual competition Therefore 192 instances evaluation competition consisted 24 smallsized argumentation graphs generator A test set 1 24 mediumsized argumentation graphs generator A test set 2 24 largesized argumentation graphs generator A test set 3 24 smallsized argumentation graphs generator B test set 4 24 mediumsized argumentation graphs generator B test set 5 24 smallsized argumentation graphs generator C test set 6 24 mediumsized argumentation graphs generator C test set 7 24 largesized argumentation graphs generator C test set 8 All argumentation graphs competition downloaded competition website4 Appendix B gives detailed statistics benchmark graphs For discussion relationships statistics argumentationspeciﬁc properties 95 32 Evaluation measures The aim competition measure compare computational performance submitted solvers solving instances problems presented Section 23 For problems SE compute extension EE compute extensions 192 argumentation graphs previous section individual instance semantics For problems DS decide skeptical acceptance DC decide credulous acceptance randomly selected arguments argumentation graph yielding total 576 instances semantics For instance track solver given 10 minutes time compute answer In case timeout wrong answer solver received zero points instance5 If gave correct answer time limit received point actual runtime solving instance saved separately For track cumulative number points main ranking criterion solvers received points ranked higher solvers points If solvers reached number points cumulative runtimes correctly solved instances compared break ties solver smaller total runtime ranked higher solvers larger total runtime This procedure results total 16 rankings solvers track For solvers supported 16 tracks competition aggregated scores individual tracks obtain global ranking Borda count For solver received point ﬁrst place ranking points second place ranking A global ranking obtained ordering resulting total number points smallest largest 33 Competition details The competition realized benchmark framework probo 25 provides possibility run instances individual solvers verify results measure runtime log results accordingly The software probo written Java requires implementation simple command line interface participating solvers6 All benchmark graphs available ﬁle formats The trivial graph format7 TGF simple representation directed graph simply lists appearing vertices edges The ASPARTIX format APX 47 abstract argumentationspeciﬁc format represents argumentation framework facts logic programminglike way In order verify answers solvers solutions instances computed advance Tweety libraries logical aspects artiﬁcial intelligence knowledge representation 91 Tweety contains naive algorithms considered semantics implement formal deﬁnitions semantics straightforward manner provides veriﬁed reference implementations considered problems Besides serving benchmark framework executing competition probo contains abstract classes interfaces solver speciﬁcation participants order easily comply solver interface 4 http argumentationcompetition org 2015 iccma2015 _benchmarks zip note test sets numbered differently competition website particular test sets 6 7 8 numbered 7 8 9 accommodate removed test set 6 5 The initial policy wrong answers disqualify solver completely track However solvers occasionally produced wrong results order provide comprehensive picture stateoftheart revised policy ﬁnal results differ slightly enforcing policy Tables 58 6 See http argumentationcompetition org 2015 iccma15notes _v3 pdf formal interface description 7 http en wikipedia org wiki Trivial _Graph _Format M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 275 Table 2 Supported tracks participating solvers No Solver SE cid2 CO LabSATSolver cid2 cid2 ArgSemSAT cid2 ArgTools Cegartix Dungell ZJUARG ASPARTIXV CoQuiAAS ASPARTIXD ConArg GRIS ASGL LamatzSolver ProGraph DIAMOND Carneades prefMaxSAT ASSA cid2 cid2 cid2 cid2 cid2 cid2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 PR GR ST EE CO PR GR ST DC CO PR GR ST DS CO cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 PR GR cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 ST cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 cid2 speciﬁcation We provided tutorial8 generic shellscript9 implements solver interface speciﬁcation order enable participants implement solvers way compatible competition requirements The competition executed cloud computing platform available University KoblenzLandau provides 320 cores 29 GHz 22 TB usable RAM For test set benchmark graphs single virtual machine 1 CPU 8 GB RAM run tracks set The results tracks aggregated 4 Participants In section provide description solvers participated competition classify respect supported tracks Note solvers numbered according registration number Table 2 gives overview participating solvers supported tracks Table 3 gives information solvers development country programming language paradigm total number lines code reference contributions describing solver Most solvers developed Europe exception ZJUARG solver China ArgTools solver Jordan Moreover note solvers developed mainly logic objectoriented programming languages Table 4 lists solvers license information available provides link source code repositories Most repositories available GNU GPL license chose speciﬁc licenses like MIT license In general source code solvers participating competition available research purposes requirement participating In following details individual solvers participated competition For complete descriptions refer reader 92 LabSATSolver The LabSAT solver 17 solves tasks competition wrt semantics It encodes labeling approach 21 boolean satisﬁability problem SAT following proposal Cerutti colleagues 23 Roughly approach proposed 23 called PrefSAT depthﬁrst search space complete extensions identify maximal preferred extensions enumerate Each step search process requires solution SAT problem invocation SAT solver The algorithm based idea encoding constraints corresponding complete labelings AF 21 SAT problem iteratively producing solving modiﬁed versions initial SAT problem according needs search process For details encoding refer reader 23 Complete preferred extensions computed LabSAT solver PrefSAT approach 23 To compute stable extension additional clauses added SAT solver label undec excluded The SAT solver LabSAT lingeling 9 It worth noticing grounded semantics computed use SAT solver relying Java implementation algorithm proposed 74 8 http argumentationcompetition org 2015 iccma15probotutorial _v2 pdf 9 http sourceforge net p probo code HEAD tree trunk solvers genericinterface sh format raw 276 M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 Table 3 Detailed information participating solvers No Solver Country Programming language Programming paradigm Lines code Reference 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 LabSAT ArgSemSAT ArgTools Cegartix Dungell ZJUARG ASPARTIXV CoQuiAAS ASPARTIXD ConArg2 GRIS ASGL LamatzSolver ProGraph DIAMOND Carneades prefMaxSAT ASSA Germany UK Italy Jordan UK Austria Finland UK China Luxembourg Italy Finland Austria France Germany Italy UK Germany Germany Romania Germany Germany UK Italy Cyprus Java C C C Haskell Java ASP C ASP C C Lisp Java Prolog PythonASP Go C Java objectoriented objectoriented objectoriented objectoriented directfunctional objectoriented logic objectoriented logic objectoriented objectoriented functional objectoriented logic logic NA objectoriented objectoriented 1300 7800 6000 850 240 2100 750 1600 640 3644 2190 900 550 305 420 1242 750 NA 17 26 79 45 97 62 85 66 54 13 83 89 68 61 51 58 94 63 Table 4 Licenses source code repositories participating solvers No Solver License Source code repository 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 LabSAT ArgSemSAT ArgTools Cegartix Dungell ZJUARG ASPARTIXV CoQuiAAS ASPARTIXD ConArg GRIS ASGL LamatzSolver ProGraph DIAMOND Carneades prefMaxSAT ASSA GNU LGP MIT GNU GPL GNU GPL BSD3 NA NA GNU GPL adhoc NA GNU GPL adhoc NA NA GNU GPL MPL 20 MIT NA httpsgithubcomfbrnsLabSATSolver httpsourceforgenetprojectsargsemsat httpsourceforgenetprojectsargtools httpwwwdbaituwienacatresearchprojectargumentationcegartix httpwwwcsnottacukpsxbvDungICCMA httpmypagezjueducnenbeishui685664html httpwwwdbaituwienacatprojargumentationsystempage httpwwwcrilunivartoisfrcoquiaas httpsddllinftudresdendewebSarah_Alice_GagglASPARTIXD httpwwwdmiunipgitconarg httpwwwinfkclacukstaffodinaldogris httpsgithubcomkispasgl httpsbitbucketorgCloudkennylamatzsolver httpcsgwutclujroadriantoolsprographProGraphArgComp2015tar httpdiamondadfsourceforgenet httpscarneadesgithubio httpsourceforgenetprojectsprefmaxsat httpwwwmertjiandatacomassahtml ArgSemSAT The ArgSemSAT solver 26232829 implements collection algorithms solving tasks competition wrt semantics ArgSemSAT10 encodes constraints corresponding complete labelings AF SAT problem iteratively produces solves modiﬁed versions initial SAT problem according needs search pro cess As LabSAT solver ArgSemSAT implements PrefSAT approach 23 described enumerating preferred extensions PrefSAT ﬁrst solves SAT problem solutions correspond complete extensions AF second hillclimbing approach ﬁnd maximal wrt set inclusion complete extension preferred extension Already computed extensions excluded subsequent search steps In addition ArgSemSAT10 implements SCCP algorithm 24 exploiting SCCrecursiveness schema 5 partial order strongly connected com ponents SCCs In SCCP extensions frameworks restricted SCC receiving attack computed combined Then SCC attacked unattacked SCCs considered extensions SCC computed merged obtained Finally subsequent wrt partial order SCCs considered remaining SCCs left The schema recursive base recursion reached SCC case solver similar PrefSAT called It worth noticing SCCP resulted eﬃcient PrefSAT AFs numerous SCCs ArgSemSAT10 exploits Glucose solver 2 PrecoSAT10 solver 10 http fmvjku precosat M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 277 ArgTools The ArgTools solver Argumentation Tools 7978 based backtracking algorithms solving tasks competition wrt semantics The backtracking algorithms ArgTools based exploration abstract binary search tree The key features ArgTools enhance backtracking search sets acceptable arguments new pruning strategy called global lookingahead strategy ii set backtrackingbased approach decide acceptance different semantics argument someall sets acceptable arguments given AF necessarily enumerating sets Roughly global lookingahead pruning strategy enables backtracking procedure traversing search space regularly lookahead deadends paths lead solutions early considerable time saved For details strategy refer reader 80 CEGARTIX The CEGARTIX CounterExample Guided Argumentation Reasoning Tool solver 4543 supports computation credulous acceptance semistable stage semantics skeptical acceptance preferred semistable stage semantics returns arbitrary preferred extension enumerates preferred extensions Note preferred semantics relevant participation competition Each step exploration delegated complete Boolean satisﬁability SAT solver The strategy exploited solver consists ﬁrst identiﬁcation ﬁrstlevel fragments NPcoNP layer secondlevel reasoning tasks main reasons fragments present particular sources complexity considered problems ii NP fragments eﬃciently reduced SAT problem CEGARTIX uses NP decision procedures NP oracles iterative way For problems complete second level polynomial hierarchy leads general procedures worst case require exponential number calls NP oracle unavoidable assumption polynomial hierarchy collapse Nevertheless procedures designed behave adequately input instances fall considered NP fragment instances relatively low number oracle calls suﬃcient CEGARTIX exploits current stateoftheart conﬂictdriven clause learning CDCL SATsolver technology underlying NP oracle CEGARTIX employs CDCL SATsolver Minisat 46 For details NP decision procedure refer reader 43 Dungell The Dungell solver 9798 supports computation grounded complete preferred stable exten sions The characterizing feature Dungell consists providing solver close mathematical deﬁnitions possible The rationale feature tackle problem implementing structured argumentation models translations providing framework allows implementation close mathematical speciﬁcation facilitates checking formal proof properties Dungell implements steps pipeline ﬁrst allows translation Carneades 59 structured argumentation framework abstract second computes extensions grounded complete preferred stable semantics Given AF possible verify list arguments conﬂictfree checking list attacks arguments Acceptability argu ment respect set arguments AF determined verifying attackers turn attacked attacker set This solver ones functional programming speciﬁcally Haskell implementation structured abstract models argumentation ZJUARG The ZJUARG solver 6270 enumerates preferred extensions grounded extension AF It adopts divideandconquer strategy As LabSATSolver grounded extension AF computed directly following algorithm proposed 74 The main feature ZJUARG solver application notion modularity argumentation framework close SCC concept solvers like ArgTools To overcome fact eﬃciency SCC approach highly limited maximal SCC AF solver implements solution exploiting skeptically rejected arguments AF Roughly given AF grounded labeling 21 ﬁrst generated Then attacks undecided arguments rejected arguments removed It turns modiﬁed AF preferred labeling original AF maximal SCC smaller original AF Since ZJUARG solver adopts divideandconquer strategy employing eﬃcient algorithms compute semantics subframework eﬃciency highly depends topologies argumentation frameworks input ASPARTIXV The ASPARTIXV solver Answer Set Programming Argumentation Reasoning ToolVienna version 8548 supports computation skeptical acceptance preferred semantics returns single preferred extension enumerates preferred extensions Together ASP encoding preferred semantics answersets 1to1 correspon dence preferred extensions given argumentation framework AF ASP solvers offer enumeration answersets returning arbitrary In ASPARTIXV single program encode particular argumen tation semantics instance argumentation framework given input database ASPARTIXV improves 278 M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 performances predecessor ASPARTIX11 follows While preferred semantics encoded disjunctive logic program making heavy use socalled loop constructs ASP ASPARTIX ASPARTIXV able uses conditional literals enhancing performance Intuitively conditional literals allow use dynamic head disjunctive rule contains literal iff condition true The loop constructs avoided alternative charac terizations preferred semantics ASPARTIXV employs socalled saturation technique encodings preferred semantics ﬁrst guess set arguments AF solver veriﬁes set admissible To verify set subsetmaximal admissible ASPARTIXV performs second guess veriﬁes second guess admissible set superset ﬁrst guess The idea second guess small overcome computational overhead Additional rules verify witness set represents admissible set combined ﬁrst guess result larger admissible set If case ﬁrst guess represent preferred extension The underlying ASP solver Clingo 44 56 CoQuiAAS The CoQuiAAS solver 6667 solves tasks competition wrt semantics exploiting constraint programming techniques More precisely takes advantage encodings proposed 7 CoQuiAAS deals encodings Nega tion Normal Form NNF formulae meaning propositional formulae negation operator applied variables As CoQuiAAS uses SAT solvers able tackle propositional formulae CNF translation step NNF CNF required encodings exist literature ones An interesting question SAT solvers determine interpretation maximizes number satisﬁed constraints problem called MaxSAT We generalize problem giving weight constraint Weighted MaxSAT constraints inﬁnite weight satisﬁed problems said partial Partial MaxSAT CoQuiAAS uses CNF formulae solve problems ﬁrst level polynomial hierarchy encodings Partial MaxSAT formalism higher complexity problems Discovering optimal solution MaxSAT instance allows determine set constraints initial formula consistent adding constraint initial problem makes new problem inconsistent set constraints property called maximal satisﬁable subset MSS The optimal solutions MaxSAT problem subset MSS formula The solver approaches argumentation semantics exploiting SAT MSS extraction CoQuiAAS incorporates software coMSSExtractor 60 perform constraintbased process ASPARTIXD The ASPARTIXD solver Answer Set Programming Argumentation Reasoning ToolDresden version 54 collection ASP encodings dedicated solvers solve tasks competition wrt semantics The general approach ASPARTIXD approach ASPARTIXV described differs details In particular ASP encodings ASPARTIXD described 48 optimization applied presented 42 The main aim solver ﬁnd suitable encodings solver conﬁguration ASPARTIXD exploits potassco ASP solvers12 ConArg The ConArg Argumentation Constraints solver version 20 1315 allows enumerate conﬂictfree admis sible complete stable grounded preferred semistable ideal stage extensions return extension given semantics check credulous skeptical acceptance conﬂictfree admissible complete stable semantics It constraint programming tool properties semantics encoded constraints arguments assigned 1 true belong valid extension semantics 0 Searching solutions takes advantage classical techniques local consistency constraint propagation different heuris tics trying assign values variables complete searchtree branchandbound To map argumentation framework AF Constraint Satisfaction Problem CSP13 deﬁned set constraints deﬁned set variables domain D ConArg deﬁnes variable argument AF arguments taken extension domain variable D 1 0 As example preferred extensions assigning arguments possible 1 searching complete extensions The solver exploits toolkit called Gecode 44014 deﬁned developing constraintbased systems applications GRIS The GRIS GabbayRodrigues Iterative Solver solver 8384 allows produce extensions ar gumentation framework grounded preferred semantics given argument decide accepted credulously skeptically according semantics The peculiarity GRIS solver 11 http wwwdbai tuwien ac research project argumentation systempage 12 http potassco sourceforge net 13 A CSP triple P cid17V D Ccid18 C set constraints deﬁned variables V domain D 14 http wwwgecode org M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 279 works numerical argumentation networks arguments given initial values interval 0 1 equilibrium values calculated iteratively yielding traditional extensions use characterization result 83 An argumentation framework represented GRIS means set equations As ArgTools ZJUARG solver GRIS exploits strongly connected components compute extensions More precisely solver starts computing strongly connected components network arranging layers successive computa tion steps following idea 71 Once layers computed solver identify deepest layer computation needed according layer depth input argument terminate computation decision problems early possible ASGL The ASGL solver 89 solves tasks competition wrt semantics ASGL uses extensionbased encoding solutions As ConArg ASGL casts argumentation framework CSP Constraints formalized socalled computation space algorithm based propagation methods reach ﬁxpoint The task computing preferred extension implemented ASGL like classical optimization problem branchandbound search standard Gecode As soon solution solutions constrained better current solution If solution current solution maximal To eﬃciently enumerate preferred extensions ﬁltering complete extensions maximality performed The ASGL solver solvers participating Competition written functional language Lisp It features interface Lingeling SAT Solver alternative solver backend Also ASGL ConArg exploits Gecode generic CSP solver library LamatzSolver The LamatzSolver 68 solver computing grounded extension argumentation frameworks based direct implementation characteristic function 35 Sets like attacks implemented HashMap Java More precisely computation grounded extension addressed following steps checks HashMap typeZero containing unattacked arguments If answer positive HashMap called grounded returned algorithm copies argument typeZero HashMap grounded The size grounded stored parameter prev argument defended arguments determined added grounded According process algorithm keeps track arguments attacked arguments grounded These ar guments stored HashMap attacks arguments candidates grounded extension The algorithm checks attackers candidate defeated These steps repeated grounded grow anymore Finally grounded Hash Map returned ProGraph The ProGraph solver 61 allows compute extension decides argument credulously inferred respect stable semantics The key feature ProGraph solver relying bipartite graphs More precisely set arguments partitioned classes The idea determining extension attacks argument extension reduced relaxed partitioning problem initial set arguments split partitions arguments second partition free attack Arguments sorted placed attacks attacks arguments The algorithm starts picking nonattacked argument adds attackers extension checks arguments attacked selected ﬁrst partition If case algorithm starts backtracking Otherwise arguments attacked current argument added second partition These steps repeated arguments partitioned paths fail If attacked arguments left algorithm chooses supposes attacked A veriﬁcation step stops algorithm point attacker placed second partition DIAMOND The DIAMOND solver 5150 solves tasks competition wrt semantics DIAMOND employs declarative programming paradigm ASP knowledge representation languages implemented solver Abstract Dialec tical Frameworks ADFs 16 generalization AFs In addition computation semantics AF DIAMOND compute semantics bipolar ADFs different input formats decide given ADF bipolar transform ADF representation The encodings DIAMOND built modular way To compute models ADF respect semantics different modules need grounded desired behavior As solvers described DIAMOND exploits potassco ASP solvers15 Carneades The Carneades solver 5859 solves tasks competition wrt semantics Note Carneades originally cluded implementation solver Dunglike abstract argumentation frameworks grounded semantics despite 15 http potassco sourceforge net 280 M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 focus Carneades project abstract argumentation structured argumentation The imple mentation closely follows highlevel speciﬁcations abstract argumentation frameworks optimized exception grounded semantics implementation keeps track mutable labeling changed main loop exits loop changes having explicitly test labelings equivalent The solvers procedures implemented ﬁnding ﬁrst subset arguments satisfy given predicate applying procedure subset Using functions implementing predicates complete stable exten sions Carneades ﬁnds ﬁrst complete extensions ﬁlter complete extensions ﬁnd stable Argument sets represented Hash tables arguments Boolean values prefMaxSAT The prefMaxSAT solver 9424 allows compute extension enumeration problem preferred semantics It implements encoding preferred extensions search unweighted MaxSAT The algorithm exploited prefMaxSAT based idea encoding constraints corresponding admissible labelings AF MaxSAT problem iteratively producing solving modiﬁed versions initial problem If step variable assignment maximally satisﬁes formula returned corresponding labeling saved list preferred extensions Then hard clause eliminating solution added formula process repeated If solution prefMaxSAT ends provides set preferred extensions Each step search process requires solution MaxSAT problem The AF encoded CNF provided MaxSAT solver If variable assignment maximally satisﬁes formula returned corresponding labeling saved list preferred extensions ii clause eliminating solution added CNF iii clause forcing include different arguments added CNF ﬁnally iv process repeated If MaxSAT solver returns variable assignment satisﬁes constraints prefMaxSAT ends provides set preferred extensions As ArgSemSAT prefMaxSAT exploits Glucose solver 2 ASSA The ASSA solver 6364 computes extensions decide argument credulously skeptically inferred respect stable semantics The solver implements approach based mathematical matrix operations solve abstract argumentation problems The ﬁrst creates matrix representation AF Then possible instances selected arguments created combined matrix S Based matrix operations speciﬁcally left right matrix multiplication possible navigate inside AF ﬁnd arguments attack arguments arguments attack By constructing matrix multiplication possible determine given set arguments conﬂictfree Using method conﬂictfree sets extracted based comparison output matrices matrix S able ﬁnd stable extensions 5 Results analysis We report results competition evaluated participating solvers Section 4 methodology described Section 316 Tables 58 obtained rankings solvers track Each table gives rank solver semantics number instances solver timeout column TO number incorrectly classiﬁed instances column number correctly classiﬁed instances column total runtime classiﬁed instances column RT ms The column Signiﬁcant indicates performance solver signiﬁcantly superior solver ranked right according standard Students TTest signiﬁcance level 95 cf 18 A YES indicates solver row signiﬁcantly superior NO indicates case indicates signiﬁcance test applicableand necessaryas solver correctly solved strictly instances Solvers grouped number correctly classiﬁed instances ranked group runtime Therefore note column runtime sorted table solvers solved fewer instances time limit smaller total runtime remaining instances solvers solved instances Furthermore solvers identical number solved instances identical runtime performance ranked equally Table 9 shows aggregated ranking solvers participating sixteen tracks column Borda count gives sum ranks particular solver tracks Due results depicted Table 9 International Competition Computational Models Argumentation awarded following solvers ﬁrst second place respectively 1 CoQuiAAS 2 ArgSemSAT 3 LabSATSolver 16 The raw results detailed statistics http argumentationcompetition org 2015 results html M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 281 Table 5 Results problem SE extension semantics N 192 TO number timeouts number incorrectly classiﬁed instances number correctly classiﬁed instances RT ms total runtime classiﬁed instances Signiﬁcant indicates performance solver signiﬁcantly better solver applicable correctly solved number instances σ CO PR GR ST Rank Solver TO 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6 7 8 9 10 11 1 2 3 4 5 6 7 8 9 10 CoQuiAAS ASGL ASPARTIXD ConArg ArgSemSAT ArgTools LabSATSolver DIAMOND Carneades Dungell Cegartix ArgSemSAT LabSATSolver ASPARTIXV CoQuiAAS ASGL ConArg ASPARTIXD ArgTools GRIS DIAMOND Carneades Dungell CoQuiAAS Carneades LabSATSolver ArgSemSAT ArgTools GRIS ASGL ASPARTIXD ConArg Dungell DIAMOND ASPARTIXD ArgSemSAT LabSATSolver CoQuiAAS ConArg ASGL DIAMOND ArgTools ProGraph Carneades Dungell ASSA 0 0 0 0 0 0 2 13 137 137 0 0 0 1 2 12 15 17 59 17 2 192 192 0 0 0 0 0 0 1 18 40 72 0 0 0 1 4 6 7 14 46 101 192 192 0 0 0 0 0 0 0 1 28 0 0 0 0 0 0 0 0 0 23 0 103 152 0 0 0 0 0 0 0 0 0 13 0 0 177 0 0 0 0 0 1 27 49 0 0 0 192 192 192 192 192 192 192 189 151 55 55 192 192 192 191 190 180 177 152 133 72 38 0 0 192 192 192 192 192 192 191 161 152 120 15 192 192 191 188 186 184 151 97 91 0 0 0 RT ms Signiﬁcant 30170 302730 411890 505960 552790 1627070 406450 15452520 6300 37400 859590 1265260 1729840 7875480 2454510 4056110 5360400 12379180 4157610 28153000 6455890 0 0 28860 88490 368110 710930 1654720 4191400 307480 7868920 2365420 213950 13524760 275270 739930 877000 295160 7235750 3147420 15748650 4461260 11562420 0 0 7024250 YES NO NO NO YES YES YES NO NO YES YES YES YES YES YES NO NO Furthermore solver Cegartix additionally received award Honorable mention achieved ﬁrst places second place tracks participated SEPR EEPR DSPR The statistics timeouts runtime performances given Tables 58 large diversity solvers For example results problem SEPR Table 5 solvers timeout places 13 solvers solving instance time limit place 12 Moreover ﬁrst place Cegartix track achieved average runtime roughly 45 seconds instance way timeout 10 minutes Similar observations tracks Furthermore solvers performed differently different tracks compared solvers For example solver 16 Carneades achieved second place tracks related grounded semantics place tracks This behavior stems fact solvers developed speciﬁc semantics grounded semantics Carneades tailored semantics All tracks related stable semantics won ASPARTIXD great lead second place For example problem EEST solved instance second place ArgSemSAT needed roughly total time cf Table 6 ASPARTIXD based reductions abstract argumentation problems answer set programmingsee Section 4and exploits equivalence stable semantics abstract ar 282 M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 Table 6 Results problem EE enumerate extensions semantics N 192 TO number timeouts number incorrectly classiﬁed instances number correctly classiﬁed instances RT ms total runtime classiﬁed instances Signiﬁcant indicates performance solver signiﬁcantly better solver applicable correctly solved number instances σ CO PR GR ST Rank Solver TO 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 ASPARTIXD ArgSemSAT CoQuiAAS LabSATSolver ASGL ConArg DIAMOND ArgTools Carneades Dungell Cegartix ArgSemSAT CoQuiAAS ASPARTIXV LabSATSolver prefMaxSAT ASGL ASPARTIXD ConArg ArgTools ZJUARG GRIS DIAMOND Carneades Dungell CoQuiAAS Carneades LamatzSolver LabSATSolver ArgSemSAT ZJUARG ArgTools GRIS ASGL ASPARTIXD ConArg Dungell DIAMOND ASPARTIXD ArgSemSAT CoQuiAAS ASGL ConArg ArgTools LabSATSolver DIAMOND Carneades Dungell ASSA 5 9 10 7 30 42 22 71 192 192 1 2 2 3 3 27 29 18 46 65 100 16 9 192 192 0 0 0 0 0 0 0 0 1 17 40 72 0 1 2 4 11 11 57 1 14 192 192 0 1 0 0 3 0 0 36 0 0 0 0 0 0 0 2 0 0 23 0 0 17 104 141 0 0 0 0 0 0 0 0 0 0 0 14 0 0 177 0 0 0 0 0 0 74 104 0 0 192 186 183 182 182 162 150 134 121 0 0 191 190 190 189 187 165 163 151 146 127 75 72 42 0 0 192 192 192 192 192 192 192 192 191 161 152 120 15 191 190 188 181 181 135 117 74 0 0 0 RT ms Signiﬁcant 1040810 4518420 1776270 2631520 7979820 2459560 20949590 2612080 0 0 1520400 3563780 4896610 9926900 4775950 6863850 6116050 13381150 2650920 3048350 1131130 28214730 9497860 0 0 30390 87000 287020 338540 691780 801200 1660070 4184350 304810 8572200 2353550 212280 13597410 575620 1708400 620350 8147390 8321000 2371760 1530240 19026710 0 0 6939650 NO NO NO NO YES YES NO YES NO YES YES NO NO NO gumentation answer set semantics direct way Note solver DIAMOND based answer set programming reduction In contrast ASPARTIXD approach actually twolevel reduction In ﬁrst step abstract argumentation problems reduced equivalent formalization Abstract Dialectical Frameworks 16 In second step reduced answer set program This overhead probable cause lower ranking solver In addition DIAMOND shows higher total runtime incorrect classiﬁed instances meaning twolevel approach impact performances solver Notice second solver higher total runtime incorrect classiﬁed instances ASPARTIXD impact overall performance solver signiﬁcant DIAMOND Despite exception seen solvers rely reduction established formalisms SAT solving constraint satisfaction problems mentioned answer set programming performed better solvers implementing direct algorithm abstract argumentation In fact ﬁrst places Table 9 CoQuiAAS M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 283 Table 7 Results problem DC decide credulous semantics N 576 TO number timeouts number incorrectly classiﬁed instances number correctly classiﬁed instances RT ms total runtime classiﬁed instances Signiﬁcant indicates performance solver signiﬁcantly better solver applicable correctly solved number instances σ CO PR GR ST Rank Solver TO 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 10 11 ArgSemSAT ASPARTIXD LabSATSolver CoQuiAAS ASGL ConArg DIAMOND ArgTools Carneades ArgSemSAT LabSATSolver CoQuiAAS ASGL DIAMOND GRIS ArgTools ASPARTIXD Carneades CoQuiAAS Carneades LabSATSolver ASGL ArgSemSAT ArgTools GRIS DIAMOND ASPARTIXD ASPARTIXD ArgSemSAT LabSATSolver CoQuiAAS ConArg ASGL DIAMOND ASSA ArgTools ProGraph Carneades 0 0 1 3 8 21 29 93 576 0 0 2 5 2 48 93 144 576 0 0 0 0 0 0 0 0 44 0 0 1 2 5 7 30 0 89 246 576 0 0 0 0 0 0 5 0 0 0 0 0 0 12 40 0 6 0 0 0 0 0 0 0 0 22 1 0 0 0 0 0 0 2 46 0 18 0 576 576 575 573 568 555 542 483 0 576 576 574 571 562 488 483 426 0 576 576 576 576 576 576 576 554 531 576 576 575 574 571 569 544 530 487 312 0 RT ms Signiﬁcant 1018060 2530280 1705780 439500 8495780 13877500 48188790 10278620 0 884960 1992860 412620 8841570 66137810 69419300 8939600 18318950 0 92580 248430 885950 967200 2140360 5036130 13246200 39350510 23996940 513390 779820 1234520 170390 4658410 4891350 46999150 20966220 9716900 37377190 0 YES YES YES YES NO YES YES YES YES ArgSemSAT LabSATSolver honorable mention Cegartix rely reductions maximum satisﬁability problems use mature SAT solvers solving argumentation problems ﬁrst places tracks use reductions mentioned Solvers direct algorithmsie solvers formalism abstract argumentationsuch ArgTools Carneades usually performed average Tables 10 11 performance solvers wrt different test sets accumulated tracks For solver column N indicates number instances solved test set reminded test set contains 24 benchmark graphs DS DC problems benchmark graph tested times For test set generated generators A B C corresponding cells contain number incorrectly classiﬁed instances timeouts wrt given total number instances N Table 10 gives interesting insights behavior solvers wrt different characteristics For example considering solver 9 ASPARTIXD seen hard time solving instances generated graph generator A featured large graphs large grounded extension signiﬁcantly better solving instances graph generators B C generated smaller graphs complex attack structure However solvers 3 ArgTools 10 ConArg featured opposite behavior solving instances generator A usually easier instances B C Furthermore average behavior solvers different test setsindicated summed values row tableis homogeneous data sets 4 5 generator B slightly harder average But individual different behavior solvers justiﬁes decision use different graph models challenging graph features competition solvers advantage Table 12 reports percentage correctly classiﬁed instances solver tracks participated We report 0 solver participated track providing correct answer leave 284 M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 Table 8 Results problem DS decide skeptical semantics N 576 TO number timeouts number incorrectly classiﬁed instances number correctly classiﬁed instances RT ms total runtime classiﬁed instances Signiﬁcant indicates performance solver signiﬁcantly better solver applicable correctly solved number instances σ CO PR GR ST Rank Solver TO 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 10 11 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 10 ASGL LabSATSolver ConArg ArgSemSAT ASPARTIXD ArgTools CoQuiAAS DIAMOND Carneades ArgSemSAT Cegartix LabSATSolver ASPARTIXV CoQuiAAS DIAMOND GRIS ASGL ArgTools ASPARTIXD Carneades CoQuiAAS Carneades ASGL LabSATSolver ArgSemSAT ArgTools GRIS ASPARTIXD DIAMOND ASPARTIXD LabSATSolver CoQuiAAS ConArg ASGL DIAMOND ArgSemSAT ASSA ArgTools Carneades 0 0 0 0 0 0 1 44 576 0 1 1 4 6 25 49 69 111 155 576 0 0 0 0 0 0 0 39 0 0 0 3 19 23 31 0 0 122 576 0 0 0 0 0 0 0 5 0 0 0 0 0 0 36 18 0 0 3 0 0 0 0 0 0 0 0 2 113 0 0 0 0 0 7 222 254 172 0 576 576 576 576 576 576 575 527 0 576 575 575 572 570 515 509 507 465 418 0 576 576 576 576 576 576 576 535 463 576 576 573 557 553 538 354 322 282 0 RT ms 900660 1005630 1479110 1700390 3127750 4852460 91310 62109540 0 2005760 1979600 5520220 23387890 9580080 808113010 64506430 20655510 6675920 23109590 0 95130 252900 935140 1005340 2134270 4852170 11615450 24273490 40100710 863480 2831570 1237220 20402070 16240150 53686090 3009520 20818370 10172600 0 Signiﬁcant NO YES NO YES YES YES YES YES NO YES YES YES YES Table 9 Aggregated ranking solvers participating tracks Rank Solver Borda count 1 2 3 4 5 6 7 8 CoQuiAAS ArgSemSAT LabSATSolver ASGL ASPARTIXD ArgTools Carneades DIAMOND 49 50 58 82 84 119 130 134 cell solver participate speciﬁc track From view results competition emerges systems employing SATsolvers perform better wrt instance classiﬁcations employing ASP Only systems participated tasks unable provide correct answers Carneades Dungell ASSA It noted common point systems adhoc implementations abstract argumentation frameworks These negative results explained fact systems time compute extensions time returning answer Carneades optimized grounded semantics M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 285 Table 10 Number timeouts solver test set summed tracks No Solver N 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 LabSATSolver ArgSemSAT ArgTools Cegartix Dungell ZJUARG ASPARTIXV CoQuiAAS ASPARTIXD ConArg GRIS ASGL LamatzSolver ProGraph DIAMOND Carneades prefMaxSAT ASSA Sum 768 768 768 120 192 48 120 768 768 480 384 768 24 96 768 768 24 192 7824 A 1 0 0 3 0 192 0 0 3 104 0 0 1 0 29 53 576 0 0 961 2 5 0 9 0 192 0 1 0 190 0 0 0 0 23 107 576 0 0 1103 3 0 0 24 0 192 0 6 2 143 0 0 7 0 27 6 576 0 0 983 B 4 4 3 221 0 144 23 0 14 0 61 0 30 0 72 34 576 11 0 1193 C 6 0 1 0 0 128 14 0 0 0 0 30 0 0 51 1 560 0 0 785 7 2 3 78 0 122 21 0 5 1 40 64 41 0 34 0 554 0 0 965 5 0 0 366 1 144 24 0 2 10 118 1 86 0 72 32 576 15 0 1447 Table 11 Number incorrectly classiﬁed instances solver test set summed tracks No Solver N 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 LabSATSolver ArgSemSAT ArgTools Cegartix Dungell ZJUARG ASPARTIXV CoQuiAAS ASPARTIXD ConArg GRIS ASGL LamatzSolver ProGraph DIAMOND Carneades prefMaxSAT ASSA Sum 768 768 768 120 192 48 120 768 768 480 384 768 24 96 768 768 24 192 7824 A 1 2 0 0 0 0 0 0 0 2 0 0 0 0 2 120 0 0 62 188 2 1 0 0 0 0 0 0 0 7 0 0 0 0 1 146 0 0 63 218 3 0 0 0 0 0 0 0 0 76 0 0 0 0 0 217 0 0 51 344 B 4 7 18 7 0 0 1 0 0 0 0 68 0 0 7 65 0 0 85 258 5 6 12 4 0 0 0 0 0 0 0 67 0 0 5 137 0 0 79 310 C 6 24 72 96 0 0 10 0 0 0 0 42 0 0 0 113 0 0 120 477 7 22 66 66 0 0 1 0 0 2 0 34 0 0 1 127 0 0 116 435 8 6 6 105 1 127 18 1 13 10 26 40 38 0 39 2 559 1 0 992 8 18 54 48 0 0 4 0 0 0 0 49 1 0 2 119 0 0 108 403 6 Lessons learned The competition substantially contributed advancement stateoftheart abstract argumentation solvers apparent optimizations new developments root The best solvers ICCMA15 based reductions formalisms general multipurpose tools Although solvers beneﬁt maturity current SAT solvers approach reduction adds overhead For translating possibly huge abstract argumentation problem equivalent SAT instance calling SAT solver speciﬁc syntax timeconsuming despite fact translation polynomial perspective computational complexity Furthermore strategies SAT solvers solve SAT instances tailored general typical prob lems expressed SAT instances It apparent SAT instances compiled abstract argumentation problems included sets problems To analogy consider problem ﬁnding shortest paths graph It pos sible phrase problem combinatorial optimization problem use generalpurpose methods simulated annealing 69 However domainspeciﬁc algorithms Dijkstras algorithm 34 clearly outperform general purpose methods domain17 Still competition introduced overhead reductionbased approaches 17 Note given analogy complexity classes actually differ general combinatorial optimization polynomial shortest paths problems argument similar reductions problems complexity Table 12 Percentage correctly classiﬁed instances track supported participating solvers Empty cells represent tracks supported related solver No Solver 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 LabSATSolver ArgSemSAT ArgTools Cegartix Dungell ZJUARG ASPARTIXV CoQuiAAS ASPARTIXD ConArg GRIS ASGL LamatzSolver ProGraph DIAMOND Carneades prefMaxSAT ASSA SE CO 98 100 100 28 100 100 100 100 78 9 PR 100 100 69 100 0 99 98 79 92 37 93 19 0 EE CO 94 95 63 0 94 96 78 84 69 0 GR 100 100 100 ST 99 100 50 62 0 100 83 79 100 99 7 100 97 100 96 95 47 78 0 0 PR 97 98 66 99 0 39 98 98 78 76 37 84 21 0 95 GR 100 100 100 62 100 100 83 79 100 99 100 7 100 ST 60 98 50 0 97 99 94 94 38 0 0 DC CO 99 100 83 99 100 96 98 94 0 PR 100 100 83 99 73 84 99 97 0 GR 100 100 100 100 92 100 100 96 100 ST 99 100 84 99 100 99 98 54 94 0 92 DS CO 100 100 100 99 100 100 100 91 0 PR 99 100 80 99 99 98 72 88 88 89 0 GR 100 100 100 100 92 100 100 80 100 ST 100 61 48 99 100 96 96 93 0 55 2 8 6 M T h m m S V l l t A r t ﬁ c l I n t e l l g e n c e 2 5 2 2 0 1 7 2 6 7 2 9 4 M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 287 signiﬁcantly outweigh maturity utilized tools This fact indicates focused research development domainspeciﬁc approaches abstract argumentation outperform reductionbased approaches future Whilst expect generation solvers outperform general purpose SATsolvers exploited systems participating competition question actual necessity Ap plications abstract argumentation solvers concrete usage scenarios hard ﬁnd recent results argument mining community 19 existing graphs extracted real natural language argumentation interac tions online dialogues blogs present cycles arguments Moreover dialogues end pretty small graphs 40 nodes online debate speciﬁc topic These observations sug gest actual need community outperform SATbased solvers However noticed results provided argument mining community preliminary actually potential mining huge argumentation graphs reporting views hundreds users certain topic widely discussed Web including opinions reported blogs social networks online debate platforms In conclusion fact outperforming existing solvers answer present need community near future combination argument mining techniques Concerning semantics ICCMA15 ﬁrst edition competition decided focus standard semantics 35 Given results appears reasonable choice solvers unable tackle range tracks It useless provide semantics affected solvers The ICCMA competition scheduled 2017 consider ideal semistable stage semantics addition standard semantics Concerning input graphs believe covered suﬃcient range graph structures order avoid penal izing implementations In general conclude main insights competition great potential developing new sophisticated algorithmic approaches abstract argumentation problems Finally ASPARTIX format emerged standard format input data participants adapted solvers accept input format This line wellknown competitions like instance SAT solver competition standard input format DIMACS CNF format 7 Conclusions This paper gave overview First International Competition Computational Models Argumentation IC CMA15 We described computational tasks competition technical setups presented participants Furthermore reported results provided analysis interpretation Being ﬁrst instance ICCMA organizers satisﬁed engagement community 18 submitted solvers The competition provided common background compare different solvers developed years computational models argumentation community adoption novel algorithms SAT ASP based standard solutions address heterogeneous goals Thanks results competition publicly available informed decisions choice right solver adopt respect computational task performed possible The results unsurprisingly SATbased ASPbased solvers outperform adhoc algorithms great potential developing new sophisticated algorithmic approaches abstract argumentation problems The competition highlighted new needs ICCMA steering committee evaluating order propose new tracks upcoming editions competition First track structured argumentation frameworks envisioned currently discussion The main issue structured formalism suﬃ cient number competing solvers addressing comparison systems implementing different formalisms extremely laborious The lack existing benchmarks task issue direction Second track natural language argumentation envisaged The idea include argument mining tack tasks arguments detection relations prediction proposed systems Also case main issue lack common annotation schema consequence common annotated benchmark compare existing approaches The competition ﬁrst upcoming series competitions instance planned 201718 Acknowledgements We like thank participants ICCMA15 submitting solvers actively engaging effort ad vancing implementations computational models argumentation We thank ICCMA steering committee providing support shaping competition Appendix A Algorithms benchmark generators We provide pseudo code algorithms generate benchmark graphs competition Algorithm 1 shows code GroundedGenerator Generator A Algorithm 2 shows code StableGenerator Genera tor B Algorithm 3 shows code SccGenerator Generator C 18 http argumentationcompetition org 2017 index html 288 M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 Algorithm 1 A GroundedGenerator Require maxA maximal number arguments Require p probability attack 1 A random integer 1 maxA 2 G VE V a1 A E 3 unconnected a1 A 4 1 A 5 j 1 1 random number 0 1 smaller p E E ai j unconnected unconnected ai 8 9 b unconnected 10 k random integer 1 A coin ﬂip shows heads E E b ak E E ak b 6 7 11 12 13 14 15 return G Algorithm 2 B StableGenerator Require maxA maximal number arguments Require minNumExtensions approx minimal number stable extensions Require maxNumExtensions approx maximal number stable extensions Require minSizeOfExtensions approx minimal size stable extension Require maxSizeOfExtensions approx maximal size stable extension Require minSizeOfGrounded approx minimal size grounded extension Require maxSizeOfGrounded approx maximal size grounded extension Require p probability attack 1 A random integer 1 maxA 2 X random integer minNumExtensions maxNumExtensions 3 S random integer minSizeOfExtensions maxSizeOfExtensions 4 R random integer minSizeOfGrounded maxSizeOfGrounded 5 G VE V a1 A E 6 grounded a1 aR 7 1 R 8 k 0 1 9 random number 0 1 smaller p E E ai ak 10 11 j 1 X 12 Let M random set S arguments V R 1 A ai M Let ak random argument M E E ak ai 13 14 15 16 17 return G Appendix B Statistics benchmark graphs Tables B13B16 detailed overview structure properties benchmark graphs considered ICC MA15 In particular table graph test set number arguments number attacks average indegree number attackers global clustering coeﬃcient C C number strongly connected com ponents SCCs density number complete preferred stable extensions size grounded extension average size complete preferred stable extensions For argumentation framework AF Arg global clustering coeﬃcient 73 deﬁned let A cid2 B denote A B B A A B Arg C CAF A1 A2 A3 Arg A1 cid2 A2 A2 cid2 A3 A3 cid2 A1 A1 A2 A3 Arg A1 cid2 A2 A2 cid2 A3 In words C CAF ratio number undirected triangles AF number connected triples arguments value 0 1 Large values indicate high clustering arguments For argumentation framework AF Arg density deﬁned ArgArg 1 DAF M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 289 Algorithm 3 SccGenerator Require maxA maximal number arguments Require maxNumSccs approx maximal number SCCs Require pinner probability attack SCCs Require pouter probability attack SCCs Require pscc probability connect SCCs 1 A random integer 1 maxA 2 N random integer 1 maxNumSccs 3 G VE V a1 A E 4 C1 CN 5 1 A 6 k random integer 1 N Ck Ck ai 7 8 1 N 9 arg1 Ci arg2 Ci E E arg1 arg2 12 13 1 N1 14 j 1 N random number 0 1 smaller pinner random number 0 1 smaller pscc arg1 Ci arg2 C j random number 0 1 smaller pouter E E arg1arg2 10 11 15 16 17 18 19 20 return G Table B13 Statistics benchmark graphs test sets 1 graphs 124 2 graphs 2548 Arg number arguments Att number attacks average indegree cc clustering coeﬃcient dens density sccs number strongly connected components CO number complete extensions PR number preferred extensions ST number stable extensions GR size grounded extension CO average size complete extensions PR average size preferred extensions S T average size stable extensions ID 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 Arg 1909 1880 2223 2511 4166 2033 2636 2696 2743 2943 2631 2846 1224 1315 1278 1624 1866 3144 2797 3740 3600 3589 3737 3713 2219 2838 3896 4459 4827 4685 Att 3668 3555 4956 6277 17289 4143 6886 7280 7508 8663 6893 8153 1484 1730 1633 2659 3504 9886 7855 14045 12957 12931 14018 13856 4936 8042 15163 19886 23222 21863 1921 1891 223 250 415 038 2612 270 2737 2944 262 2865 1213 1316 1278 1637 1878 3145 2808 3756 3599 3603 3751 3732 2225 2834 3892 446 4811 4667 cc 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 dens sccs CO PR ST GR 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 245 302 350 472 658 285 393 739 246 389 310 340 254 331 231 256 465 577 190 537 239 317 386 355 497 390 568 387 560 548 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 183 184 189 193 217 183 199 199 199 200 198 197 154 160 166 183 186 208 200 215 216 208 214 213 187 196 216 219 231 224 CO 1830 1840 1890 1930 2170 1830 1990 1990 1990 2000 1980 1970 1540 1600 1660 1830 1860 2080 2000 2150 2160 2080 2140 2130 1870 1960 2160 2190 2310 2240 PR 1830 1840 1890 1930 2170 1830 1990 1990 1990 2000 1980 1970 1540 1600 1660 1830 1860 2080 2000 2150 2160 2080 2140 2130 1870 1960 2160 2190 2310 2240 ST 1830 1840 1890 1930 2170 1830 1990 1990 1990 2000 1980 1970 1540 1600 1660 1830 1860 2080 2000 2150 2160 2080 2140 2130 1870 1960 2160 2190 2310 2240 continued page 290 M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 Table B13 continued ID 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 Arg 2450 3005 2684 4959 3478 5900 4470 6017 6546 3955 1945 5257 1937 3994 1152 3954 3168 2085 Att 6010 9059 7233 24612 12141 34720 20063 36208 42923 15584 3797 27616 3770 15976 1346 15641 10029 4348 2453 3015 2695 4963 3491 5885 4488 6018 6557 3941 1953 5253 1947 400 1169 3956 3166 2086 cc 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 dens sccs CO PR ST GR 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 343 276 424 729 657 438 375 572 275 228 302 238 245 190 260 588 247 263 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 191 208 197 228 206 237 227 240 242 229 185 231 182 222 152 217 206 193 CO 1910 2080 1970 2280 2060 2370 2270 2400 2420 2290 1850 2310 1820 2220 1520 2170 2060 1930 PR 1910 2080 1970 2280 2060 2370 2270 2400 2420 2290 1850 2310 1820 2220 1520 2170 2060 1930 ST 1910 2080 1970 2280 2060 2370 2270 2400 2420 2290 1850 2310 1820 2220 1520 2170 2060 1930 Table B14 Statistics benchmark graphs test sets 3 graphs 4972 4 graphs 7396 Arg number arguments Att number attacks average indegree cc clustering coeﬃcient dens density sccs number strongly connected components CO number complete extensions PR number preferred extensions ST number stable extensions GR size grounded extension CO average size complete extensions PR average size preferred extensions ST average size stable extensions ID 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 Arg 7191 6142 6961 4872 7861 6977 7242 8402 7521 7833 8366 7318 5593 7746 5774 8393 9473 6499 9360 6958 6518 8548 6219 5013 141 299 289 277 202 286 280 276 291 232 258 197 280 300 193 Att 51655 37683 48482 23657 61863 48531 52543 70560 56661 61518 69910 53649 31399 60078 33330 70558 89713 42252 87622 48439 42442 73157 38707 25121 38 424 416 399 50 280 367 261 414 333 250 271 399 287 46 7183 6135 6965 4856 787 6956 7255 8398 7534 7854 8357 7331 5614 7756 5773 8407 947 6501 9361 6962 6512 8558 6224 5011 274 1421 144 1443 251 981 1311 949 1423 1438 972 1379 1428 957 242 cc 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 002 003 003 004 002 002 003 002 003 004 003 005 003 002 001 dens sccs CO PR ST GR 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 001 002 005 005 005 001 003 005 003 005 006 004 007 005 003 001 305 394 469 341 367 443 410 463 573 754 503 881 1267 1722 423 347 436 290 519 365 433 592 562 370 105 6 6 6 91 4 24 6 6 6 6 6 6 6 79 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 360 4 3 1 159 1 16 3 2 6 9 13 14 1 70 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 40 3 2 1 12 1 8 2 1 4 6 10 7 1 11 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 32 3 2 0 12 0 8 2 1 4 5 10 7 0 0 245 238 244 239 255 251 245 257 251 249 258 243 234 253 231 263 262 246 261 252 238 258 236 238 19 4 3 3 15 3 12 3 3 3 4 3 3 3 16 CO 2450 2380 2440 2390 2550 2510 2450 2570 2510 2490 2580 2430 2340 2530 2310 2630 2620 2460 2610 2520 2380 2580 2360 2380 3471 295 2733 30 4912 30 3388 3033 200 2517 3711 2338 3371 30 4031 PR 2450 2380 2440 2390 2550 2510 2450 2570 2510 2490 2580 2430 2340 2530 2310 2630 2620 2460 2610 2520 2380 2580 2360 2380 432 380 395 30 6883 30 3813 440 370 2975 415 255 3643 30 520 ST 2450 2380 2440 2390 2550 2510 2450 2570 2510 2490 2580 2430 2340 2530 2310 2630 2620 2460 2610 2520 2380 2580 2360 2380 4406 380 395 6883 3813 440 370 2975 418 255 3643 M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 291 Table B14 continued ID 88 89 90 91 92 93 94 95 96 Arg Att 262 292 246 259 300 162 290 293 287 376 284 354 246 290 218 416 427 412 1437 973 1439 953 969 1348 1436 1458 1436 cc 004 002 004 002 002 006 003 003 003 dens sccs CO PR ST GR 006 003 006 004 003 008 005 005 005 6 6 6 6 6 6 6 5 6 1 5 1 11 15 3 5 2 4 1 3 1 7 9 2 4 1 2 0 3 0 7 9 2 4 1 2 5 3 3 3 3 3 2 3 3 CO 50 404 30 3727 4573 1533 298 215 250 PR 50 500 30 4143 4944 215 3675 400 330 ST 500 4143 4944 215 3675 400 330 Table B15 Statistics benchmark graphs test sets 5 graphs 97120 6 graphs 121144 Arg number arguments Att number attacks average indegree cc clustering coeﬃcient dens density sccs number strongly connected components CO number complete extensions PR number preferred extensions ST number stable extensions GR size grounded extension CO average size complete extensions PR average size preferred extensions ST average size stable extensions ID 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 Arg Att 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 283 319 334 189 397 242 260 217 308 332 318 379 330 332 306 379 360 285 360 185 291 374 381 366 379 383 539 541 541 383 562 563 545 556 550 374 378 375 559 377 546 384 374 374 575 376 379 558 214 250 329 98 401 143 187 166 984 1451 335 935 362 443 223 379 533 301 529 87 215 499 558 456 95 959 1349 1355 1353 959 1405 1409 1363 1392 1377 937 945 939 1398 945 1365 96 937 937 439 942 948 1397 759 786 987 52 1011 595 722 766 3198 4371 1056 2467 1099 1336 731 1002 1481 1056 1472 473 739 1336 1465 1248 cc 002 002 002 002 002 002 002 002 002 002 002 002 002 002 002 002 002 002 002 002 003 002 002 002 009 007 009 005 005 006 008 01 023 042 01 03 009 014 006 006 012 012 012 005 006 013 011 011 dens sccs CO PR ST GR 002 002 003 003 003 002 004 004 003 003 003 002 002 002 004 002 003 002 002 002 004 002 002 004 003 002 003 003 003 002 003 004 01 013 003 007 003 004 002 003 004 004 004 003 003 004 004 003 31 20 41 32 19 29 21 23 41 31 32 40 22 20 21 32 40 21 21 29 21 31 20 30 61 75 37 100 76 98 52 52 6 4 28 9 28 20 89 68 22 21 21 93 89 23 23 28 3 2 4 7 7 1 1 1 2 1 7 8 3 6 3 6 5 3 6 2 3 5 3 5 288 152 162 800 14 496 28 48 1 1 4 4 2 51 4 768 4 180 8 200 30 10 2 28 2 1 2 5 5 1 1 1 1 1 4 6 2 4 2 3 4 2 4 1 2 4 2 3 2 3 7 1 1 4 6 4 1 1 1 2 1 3 1 8 2 4 2 2 1 1 1 3 1 1 2 5 5 0 0 0 1 0 2 6 2 4 2 3 3 2 4 1 2 3 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 8 8 9 11 10 7 9 7 12 8 10 8 8 8 9 8 9 6 5 8 8 9 10 7 4 1 0 3 2 4 0 0 0 0 0 0 0 0 3 0 0 0 0 11 2 0 0 0 CO 4467 365 395 4629 4843 70 90 70 340 80 4486 5875 4933 585 3867 5217 428 430 5567 360 3533 526 4733 430 883 584 428 1386 464 135 343 50 00 00 20 325 10 669 40 69 25 613 30 2027 733 39 10 443 PR 630 650 515 524 550 70 90 70 560 80 510 6667 700 690 535 630 5125 615 6675 640 490 635 660 520 130 100 70 240 70 190 483 85 00 00 40 45 20 1067 50 130 35 115 55 270 120 80 20 733 ST 630 650 515 524 550 560 520 6667 700 690 535 630 5167 615 6675 640 490 650 660 520 292 M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 Table B16 Statistics benchmark graphs test sets 7 graphs 145168 8 graphs 169192 Arg number arguments Att number attacks average indegree cc clustering coeﬃcient dens density sccs number strongly connected components CO number complete extensions PR number preferred extensions ST number stable extensions GR size grounded extension C O average size complete extensions PR average size preferred extensions ST average size stable extensions ID 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 Arg 826 777 754 311 780 500 315 393 499 442 243 455 636 417 679 649 458 652 490 351 696 733 703 757 461 457 755 671 795 769 778 595 507 837 374 868 853 847 940 960 996 481 935 939 489 992 964 583 Att 5044 1179 1711 284 2567 1211 2735 407 1180 563 2936 2839 1186 467 2609 1410 594 2534 6622 6119 73 1904 1670 2903 136 112 1538 278 1707 1484 1565 277 410 1925 152 2094 3393 1793 3027 2297 3264 11551 10939 2711 11955 18650 440 17018 6107 1518 227 914 3292 2423 8683 1036 2366 1275 12085 6241 1866 112 3843 2174 1298 3888 13515 17436 106 2599 2376 3836 295 246 2038 415 2148 193 2012 466 809 2301 408 2413 3979 2117 3221 2393 3278 24016 11699 2887 24449 18801 457 29192 cc 027 028 008 006 012 02 035 006 015 008 05 036 01 006 019 01 009 015 035 05 00 012 01 017 001 002 006 001 007 006 006 002 001 008 002 007 012 007 011 008 012 05 023 01 05 032 001 05 References dens sccs 007 002 003 003 004 005 028 003 005 003 05 014 003 003 006 003 003 006 028 05 00 004 003 005 001 001 003 001 003 003 003 001 002 003 001 003 005 003 003 002 003 05 013 003 05 019 00 05 8 18 34 65 20 14 2 63 16 39 1 4 34 50 12 27 39 13 2 1 686 24 28 14 395 345 46 617 42 48 49 301 416 38 290 42 18 47 26 42 26 1 5 31 1 3 852 1 CO 4 9 2 3916 2 1 4 44 18 6 1 3 20 1011 4 1 1297 2 1 1 27 9 2 1 324 222 12 18 7 190 6 5274 90 3 495 6 1 1 1 2 1 1 1 2 1 2 54 1 PR ST GR CO 1 4 1 5 1 1 2 2 4 2 1 1 3 3 1 1 8 1 1 1 8 2 1 1 24 20 3 4 2 4 1 192 16 1 44 2 1 1 1 1 1 1 1 1 1 1 8 1 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 8 0 0 0 24 0 0 4 0 0 0 192 16 0 44 0 0 0 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 349 0 0 0 123 119 0 136 0 0 0 34 48 0 36 0 0 0 0 0 0 0 0 0 0 0 152 0 45 50 05 1027 15 00 55 70 717 15 00 40 615 1084 40 00 108 20 00 00 35667 50 10 00 1305 13734 483 1405 343 917 15 12565 5897 133 6488 35 00 00 00 10 00 00 00 10 00 30 16233 00 PR 90 75 10 180 30 00 90 105 115 25 00 80 933 190 80 00 185 40 00 00 3605 90 20 00 13467 1429 733 1430 55 140 30 1525 660 30 8395 60 00 00 00 20 00 00 00 20 00 60 1715 00 ST 90 3605 13467 1430 1525 660 8395 1715 1 O Arieli MWA Caminada A QBFbased formalization abstract argumentation semantics J Appl Log 11 2 2013 229252 2 G Audemard J Lagniez L Simon Improving glucose incremental SAT solving assumptions application MUS extraction Theory Applications Satisﬁability Testing SAT 2013 16th International Conference Proceedings Helsinki Finland July 812 2013 Lect Notes Comput Sci vol 7962 Springer 2013 pp 309317 3 AL Barabási R Albert Emergence scaling random networks Science 286 5439 1999 509512 4 P Baroni M Caminada M Giacomin An introduction argumentation semantics Knowl Eng Rev 26 4 2011 365410 5 P Baroni M Giacomin G Guida SCCrecursiveness general schema argumentation semantics Artif Intell 168 12 2005 162210 6 TJM BenchCapon PE Dunne Argumentation artiﬁcial intelligence Artif Intell 171 2007 619641 7 P Besnard S Doutre Checking acceptability set arguments Proceedings 10th International Workshop NonMonotonic Reasoning NMR 2004 Whistler Canada June 68 2004 2004 pp 5964 8 P Besnard A Hunter Elements Argumentation The MIT Press 2008 9 A Biere Lingeling essentials tutorial design implementation aspects SAT solver lingeling Fifth Pragmatics SAT Workshop Workshop SAT 2014 Conference Part FLoC 2014 During Vienna Summer Logic POS14 July 13 2014 Vienna Austria EPiC Ser Comput vol 27 EasyChair 2014 p 88 M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 293 10 S Bistarelli F Rossi F Santini A ﬁrst comparison abstract argumentation systems computational perspective D Cantone MN Asmundo Eds Proceedings 28th Italian Conference Computational Logic 2013 pp 241245 11 S Bistarelli F Rossi F Santini A ﬁrst comparison abstract argumentation reasoningtools ECAI 2014 21st European Conference Artiﬁcial Intelligence Including Prestigious Applications Intelligent Systems PAIS 2014 1822 August 2014 Prague Czech Republic 2014 pp 969970 12 S Bistarelli F Rossi F Santini Benchmarking hard problems random abstract AFs stable semantics Computational Models Argument Proceedings COMMA 2014 2014 pp 153160 13 S Bistarelli F Rossi F Santini ConArg2 constraintbased tool abstract argumentation 92 pp 3336 arXiv151005373 2015 14 S Bistarelli F Rossi F Santini A comparative test enumeration extensions abstract argumentation Fund Inform 140 34 2015 15 S Bistarelli F Rossi F Santini ConArg tool classical weighted argumentation Computational Models Argument Proceedings 16 G Brewka S Ellmauthaler H Strass JP Wallner S Woltran Abstract dialectical frameworks revisited Proceedings 23rd International Joint 263278 COMMA 2016 vol 287 2016 p 463 Conference Artiﬁcial Intelligence IJCAI13 2013 17 F Brons LabSATsolver utilizing Caminadas labelling approach Boolean satisﬁability problem 92 pp 13 arXiv151005373 2015 18 MG Bulmer Principles Statistics Dover Publications 1979 19 E Cabrio S Villata Node benchmark natural language arguments Proceedings 5th International Conference Computational Models Argument COMMA 2014 Front Artif Intell Appl vol 266 IOS Press 2015 pp 449450 20 E Cabrio S Villata F Gandon A support framework argumentative discussions management web Proceedings 10th Extended Semantic Web Conference ESWC13 SpringerVerlag 2013 pp 412426 21 M Caminada On issue reinstatement argumentation Proceedings 10th European Conference Logics Artiﬁcial Intelligence 22 M Caminada Semistable semantics P Dunne T BenchCapon Eds Proceedings First International Conference Computational Models JELIA06 2006 pp 111123 Argument COMMA06 IOS Press 2006 pp 121130 23 F Cerutti PE Dunne M Giacomin M Vallati Computing preferred extensions abstract argumentation SATbased approach Theory Applications Formal Argumentation Second International Workshop TAFA 2013 Beijing China August 35 2013 Lect Notes Comput Sci vol 8306 Springer 2013 pp 176193 Revised Selected Papers 24 F Cerutti M Giacomin M Vallati M Zanella An SCC recursive metaalgorithm computing preferred labellings abstract argumentation Principles Knowledge Representation Reasoning Proceedings Fourteenth International Conference KR 2014 Vienna Austria July 2024 2014 AAAI Press 2014 25 F Cerutti N Oren H Strass M Thimm M Vallati A benchmark framework computational argumentation competition Proceedings 5th International Conference Computational Models Argument 2014 pp 459460 26 F Cerutti M Vallati M Giacomin ArgSemSAT10 exploiting SAT solvers abstract argumentation 92 pp 47 arXiv151005373 2015 27 F Cerutti M Vallati M Giacomin Where State art future trends solvers hard argumentation problems Computa tional Models Argument Proceedings COMMA 2016 2015 pp 207218 28 F Cerutti M Vallati M Giacomin Eﬃcient offtheshelf solver jArgSemSAT Computational Models Argument Proceedings COMMA 29 F Cerutti M Vallati M Giacomin jArgSemSAT eﬃcient offtheshelf solver abstract argumentation frameworks Proceedings Fif teenth International Conference Principles Knowledge Representation Reasoning AAAI Press 2016 pp 541544 30 G Charwat W Dvorak SA Gaggl JP Wallner S Woltran Methods solving reasoning problems abstract argumentation survey Artif Intell 31 A Cohen S Gottifredi AJ Garcia GR Simari A survey different approaches support argumentation systems Knowl Eng Rev 29 5 2014 2016 vol 287 2016 p 465 220 2015 2863 513550 32 S CosteMarquis C Devred P Marquis Symmetric argumentation frameworks Proceedings 8th European Conference Symbolic Quantitative Approaches Reasoning Uncertainty ECSQARU05 Lect Notes Comput Sci vol 3571 Springer 2005 pp 317328 33 E Dantsin T Eiter G Gottlob A Voronkov Complexity expressive power logic programming ACM Comput Surv 33 3 2001 374425 34 EW Dijkstra A note problems connexion graphs Numer Math 1 1959 269271 35 PM Dung On acceptability arguments fundamental role nonmonotonic reasoning logic programming nperson games Artif 36 PE Dunne TJM BenchCapon Coherence ﬁnite argument systems Artif Intell 141 12 2002 187203 37 PE Dunne W Dvoˇrák T Linsbichler S Woltran Characteristics multiple viewpoints abstract argumentation Artif Intell 228 2015 153178 38 PE Dunne A Hunter P McBurney S Parsons M Wooldridge Weighted argument systems basic deﬁnitions algorithms complexity results Intell 77 2 1995 321358 Artif Intell 175 2 2011 457486 39 PE Dunne C Spanring T Linsbichler S Woltran Investigating relationship argumentation semantics signatures Proceedings 25th International Joint Conference Artiﬁcial Intelligence IJCAI16 2016 40 PE Dunne M Wooldridge Complexity abstract argumentation Argumentation Artiﬁcial Intelligence Springer 2009 pp 85104 Ch 5 41 PE Dunne M Wooldridge Complexity abstract argumentation Argumentation Artiﬁcial Intelligence Springer 2009 pp 85104 42 W Dvorák SA Gaggl JP Wallner S Woltran Making use advances answerset programming abstract argumentation systems Ap plications Declarative Programming Knowledge Management 19th International Conference INAP 2011 25th Workshop Logic Programming WLP 2011 Vienna Austria September 2830 2011 Lect Notes Comput Sci vol 7773 Springer 2011 pp 114133 Revised Selected Papers 43 W Dvorák M Järvisalo JP Wallner S Woltran Complexitysensitive decision procedures abstract argumentation Artif Intell 206 2014 5378 44 W Dvoˇrák Computational Aspects Abstract Argumentation PhD thesis Technische Universität Wien 2012 45 W Dvoˇrák M Järvisalo JP Wallner S Woltran CEGARTIX v04 SATbased counterexample guided argumentation reasoning tool 92 pp 1214 arXiv151005373 2015 46 N Eén N Sörensson An extensible SATsolver Proceedings International Conference Theory Applications Satisﬁability Testing 2004 Lect Notes Comput Sci vol 2919 Springer 2004 pp 502518 47 U Egly SA Gaggl S Woltran ASPARTIX implementing argumentation frameworks answerset programming Logic Programming Proceed ings 24th International Conference ICLP 2008 Udine Italy December 913 2008 Lect Notes Comput Sci vol 5366 Springer 2008 pp 734738 48 U Egly SA Gaggl S Woltran Answerset programming encodings argumentation frameworks Argum Comput 1 2 2010 147177 49 U Egly S Woltran Reasoning argumentation frameworks quantiﬁed Boolean formulas Computational Models Argument Proceedings COMMA 2006 September 1112 2006 Front Artif Intell Appl vol 144 IOS Press Liverpool UK 2006 pp 133144 50 S Ellmauthaler H Strass The DIAMOND computing abstract dialectical frameworks Computational Models Argument Pro ceedings COMMA 2014 2014 pp 233240 294 M Thimm S Villata Artiﬁcial Intelligence 252 2017 267294 51 S Ellmauthaler H Strass DIAMOND computing abstract dialectical frameworks 92 pp 5153 arXiv151005373 2015 52 P Erdös A Rényi On random graphs I Publ Math 6 1959 290297 53 W Faber S Woltran Manifold answerset programs metareasoning Logic Programming Nonmonotonic Reasoning Proceedings 10th International Conference LPNMR 2009 Potsdam Germany September 1418 2009 Lect Notes Comput Sci vol 5753 Springer 2009 pp 115128 54 SA Gaggl N Manthey ASPARTIXD ASP argumentation reasoning tool Dresden 92 pp 2932 arXiv151005373 2015 55 A Garcia GR Simari Defeasible logic programming argumentative approach Theory Pract Log Program 4 12 2004 95138 56 M Gebser R Kaminski B Kaufmann T Schaub Clingo ASP control preliminary report CoRR arXiv14053694 abs 2014 57 M Gelfond V Lifschitz Classical negation logic programs disjunctive databases New Gener Comput 9 1991 365385 58 TF Gordon Carneades ICCMA straightforward implementation solver abstract argumentation Go programming language 92 pp 5457 arXiv151005373 2015 59 TF Gordon H Prakken D Walton The Carneades model argument burden proof Artif Intell 171 1015 2007 875896 60 É Grégoire J Lagniez B Mazure An experimentally eﬃcient method MSS coMSS partitioning Proceedings TwentyEighth AAAI Conference Artiﬁcial Intelligence July 2731 2014 Québec City Québec Canada AAAI Press 2014 pp 26662673 61 S Groza A Groza ProGraph enacting bipartite graphs abstract argumentation frameworks 92 pp 4950 arXiv151005373 2015 62 Q Guo B Liao ZJUARG decompositionbased solver abstract argumentation 92 pp 1921 arXiv151005373 2015 63 E Hadjisoteriou M Georgiou ASSA computing stable extensions matrices 92 pp 6265 arXiv151005373 2015 64 E Hadjisoteriou Computing argumentation matrices Proceedings 2015 Imperial College Computing Student Workshop 2015 p 29 65 A Hunter A probabilistic approach modelling uncertain logical arguments Int J Approx Reason 54 1 2013 4781 66 JM Lagniez E Lonca JG Mailly CoQuiAAS application constraint programming abstract argumentation 92 pp 2528 arXiv151005373 2015 67 JM Lagniez E Lonca JG Mailly CoQuiAAS constraintbased quick abstract argumentation solver 2015 IEEE 27th International Conference Tools Artiﬁcial Intelligence JCTAI November 2015 pp 928935 68 N Lamatz LamatzSolverv01 grounded extension ﬁnder based Javacollectionframework 92 pp 4548 arXiv151005373 2015 69 D Lawrence Genetic Algorithms Simulated Annealing Pitman Publishing 1987 70 B Liao Toward incremental computation argumentation semantics decompositionbased approach Ann Math Artif Intell 67 34 2013 319358 71 B Liao Eﬃcient Computation Argumentation Semantics Intelligent Systems Series Academic Press 2014 72 B Liao L Jin RC Koons Dynamics argumentation systems divisionbased method Artif Intell 175 2011 17901814 73 RD Luce AD Perry A method matrix analysis group structure Psychometrika 14 1 1949 95116 74 S Modgil MW Caminada Proof theories algorithms abstract argumentation frameworks Argumentation Artiﬁcial Intelligence Springer Publishing Company Inc 2009 pp 105129 75 MW Moskewicz CF Madigan Y Zhao L Zhang S Malik Chaff engineering eﬃcient SAT solver Proceedings 38th Design Automation Conference DAC 2001 Las Vegas NV USA June 1822 2001 ACM 2001 pp 530535 76 JC Nieves U Cortés M Osorio Preferred extensions stable models Theory Pract Log Program 8 4 2008 527543 77 A Niskanen JP Wallner M Järvisalo Synthesizing argumentation frameworks examples Proceedings 22nd European Conference Artiﬁcial Intelligence ECAI 2016 Front Artif Intell Appl vol 285 IOS Press 2016 pp 551559 78 S Nofal K Atkinson PE Dunne Algorithms decision problems argument systems preferred semantics Artif Intell 207 2014 2351 79 S Nofal K Atkinson PE Dunne ArgTools backtrackingbased solver abstract argumentation 92 pp 811 arXiv151005373 2015 80 S Nofal K Atkinson PE Dunne Lookingahead backtracking algorithms abstract argumentation Int J Approx Reason 78 2016 265282 81 CH Papadimitriou Computational Complexity Addison Wesley 1994 82 JL Pollock Justiﬁcation defeat Artif Intell 67 1994 377407 83 O Rodrigues GRIS computing traditional argumentation semantics numerical iterations 92 pp 3740 arXiv151005373 2015 84 O Rodrigues Introducing EqArgSolver argumentation solver equational semantics Proceedings First International Workshop Systems Algorithms Formal Argumentation SAFA2016 CEUR Workshop Proc vol 1672 2016 pp 2233 85 A Ronca JP Wallner S Woltran ASPARTIXV utilizing improved ASP encodings 92 pp 2224 arXiv151005373 2015 86 JPM Silva KA Sakallah GRASP new search algorithm satisﬁability ICCAD 1996 pp 220227 87 GR Simari RP Loui A mathematical treatment defeasible reasoning implementation Artif Intell 53 23 1992 125157 88 M South G Vreeswijk J Fox Dungine Java dung reasoner Proceedings 2008 Conference Computational Models Argument Proceedings COMMA 2008 IOS Press Amsterdam The Netherlands 2008 pp 360368 89 K Sprotte ASGL argumentation semantics Gecode Lisp 92 pp 4144 arXiv151005373 2015 90 M Thimm A probabilistic semantics abstract argumentation Proceedings 20th European Conference Artiﬁcial Intelligence ECAI12 91 M Thimm Tweety comprehensive collection Java libraries logical aspects artiﬁcial intelligence knowledge representation Pro ceedings 14th International Conference Principles Knowledge Representation Reasoning KR14 July 2014 pp 528537 92 M Thimm S Villata Eds System Descriptions First International Competition Computational Models Argumentation ICCMA15 2015 93 F Toni M Sergot Argumentation answer set programming Logic Programming Knowledge Representation Nonmonotonic Reasoning Essays Honor Michael Gelfond Lect Notes Comput Sci vol 6565 Springer 2011 pp 164180 94 M Vallati F Cerutti W Faber M Giacomin prefMaxSAT exploiting MaxSAT enumerating preferred extensions 92 pp 5861 95 M Vallati F Cerutti M Giacomin Argumentation frameworks features initial study Proceedings 21st European Conference Artiﬁcial August 2012 arXiv151005373 arXiv151005373 2015 Intelligence ECAI14 2014 96 FH van Eemeren B Garssen ECW Krabbe FAS Henkemans B Verheij JHM Wagemans Handbook Argumentation Theory Springer 2014 97 B van Gijzel Dungell reference implementation Dungs argumentation frameworks Haskell 92 pp 1518 arXiv151005373 2015 98 B Van Gijzel H Nilsson A principled approach implementation argumentation models Proceedings 2014 Conference Compu tational Models Argument 2014 pp 293300 99 T Wakaki Preferencebased argumentation capturing prioritized logic programming Argumentation MultiAgent Systems 7th International Workshop ArgMAS 2010 Toronto ON Canada May 10 2010 Lect Notes Comput Sci vol 6614 Springer 2010 pp 306325 Revised Selected Invited Papers 100 DJ Watts SH Strogatz Collective dynamics smallworld networks Nature 393 6684 1998 440442 101 G Weissenbacher S Malik Boolean satisﬁability solvers techniques extensions Software Safety Security Tools Analysis Veriﬁ cation NATO Sci Peace Secur Ser D Inf Commun Secur vol 33 IOS Press 2012 pp 205253 102 S Wells Argument mining Was ist das Proceedings 14th International Workshop Computational Models Natural Argument CMNA14 2014