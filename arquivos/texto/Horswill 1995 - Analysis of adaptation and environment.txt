Artificial Intelligence 73 1995 l30 Artificial Intelligence Analysis adaptation environment Ian Horswill MIT Artcial Intelligence Laboratory Received September 1992 revised September 1994 Abstract Designers improve performance artificial agents specializing We rough useful distinction specialization task specialization environment difficult understand unclear environment Specialization agent depends manner depends properties environment individual property In paper I discuss method analyzing specialization series conditional optimizations formal transformations given constraint environment map mechanisms efficient mechanisms equivalent behavior I apply technique analysis vision control systems working robot day day use laboratory The method intended general theory automated synthesis arbitrary specialized agents Nonetheless perform posrhoc analysis agents explicit environment properties required agent computational value property This posthoc analysis helps explain performance normal environments predict performance novel environments In addition transformations brought analysis reused synthesis future systems 1 Introduction Scientists mathematicians seek general principles reason explain large class phenomena Engineers forced solve wide range problems mechanisms problems pay price needed individual principles seek general mechanisms use highly specialized ones When needs desirable design set specialized build single mechanism solve Email ianaimitedu 00043702950950 SSDIOOO4370294000573 1995 Elsevier Science BV All rights reserved Computer science curious combination engineering generality simpler compact mathematics Theorists program abstract computing 2counter Turing machine 331 search language designers Turingequivalent pushes extremes specialization ming machines lambda calculus specialized machines mapping 171 Finally compiler designers general machines circuits lo41 architects search best collections behavior general computing automatically search better methods emulate specialized machines 31 Specialization environment task different task navigation Throughout paper I adopt somewhat artificial distinction vs car assembly agent cialization forests versus highways specialization normal program explicit definition task consciously agent program Often structure task modules mechanism overall However agents environment agents assumptions agent Such factors conspire spe task The designer usually design uses definition internal reflects structure mechanism subproblems 71 formal description behavior In addition represented agent These exception simple virtual worlds environment tacit knowledge spread diffusely specialized case biological explicitly rare designer complete clear agents difficult understand corresponding agents internal This task The fundamental usefully described behavior specialized mechanisms paper agent claim paper terms transformations situated environmental specialization possible agents provably preserve type environment The issue scope specific place outside 2 Example avoid obstacles turning Fig I shows image office taken camera mounted robot Suppose want robot left free space left right free space right To robot problem determine image free space This amounts finding regions floor free objects loses information The problem depth structure scene information images additional additional assumptions image projection process particular uniquely determine form additional difficult information features problem A common way solving build complete depth map scene project depth map floor plane Those parts floor features projected free space A common way features building depth maps use cameras usually edges matching features compute features shift parallax stereo configuration Distinctive images matched Given I HorswillArticial Intelligence 73 1995 l30 3 Fig 1 Left Image office taken robots camera The dots lower middle image rendering process The structure artifacts quantization lower righthand portion topleft left right doorway viewed image Hegged oblique angle small trash file cabinet The homogeneous left carpet Right The pixels significant office chair The structures lower middle texture region Lp__ situation m image Fig 2 An observer views cliff textureless sides cliff produce local variation texture depth presence cliff stereo data surface image discontinuity allow observer Left Although variations image brightness point discontinuity lighting Right infer 3D positions features The stereo approach perfectly 41 reasonable undesirable properties matching phase It require floor environment marked distance expensive particularly features pixels significant white The region corresponding It computationally high resolution data A important problem appears textureless map image gradients black The stereo process depth measurements region image remedied interpolating compute depth depth floor directly happens general case Fig 2 features flat surface In case stereo true floors office environments match Fig 1 shows texture actually significant floor intensity uniformly important matched The problem absence texture working measuring assumption true making smoothness The assumption This brings important points First truly general systems extremely rare mechanisms advance claims generality build hidden assumptions These particularly difficult considered carefully Often uncover 4 I HorswillArfifcial Intelligence 73 1995 I30 Fig 3 The carpet blob extracted exposed carpet Fig I coloring algorithm Note blob taller choose bad Quite contrary test data fit This unconsciously lead great im implicit assumptions provements performance However engineers need informed decisions use specialization We need understand clearly assumptions agents environments particular environments assumptions operate assumptions true 2 I A ejficient algorithm The stereo worked scene obstacles texture We different efficient facts directly treating floor useful feature environment problem Fig 1 floor flat solve problem lack texture overcome Notice This blob easily computed region coloring image column marking pixels textured pixel marked pixels form floor corresponding exposed free space direction floor forms single connected black blob Fig 1 Fig 3 I carpet blob The carpet blob shown trace column The blob The height blob varies direction giving rough ready measure starting screen We solve navigation problem simply extracting carpet blob tallest This technique capabilities tours AI lab MIT The navigation turning direction low level navigation simple real time lowend personal Polly carpet blob basis 18191 mobile robot gives algorithm easily executed 22 Preliminary analysis coloring algorithm Both mechanisms stereo algorithm coloring blobbased algorithm assumptions structure environments specialized They I HorswiWArtificial Intelligence 73 1995 I30 5 hold perform properly run environments fail Unfortunately represented Neither algorithm mention flatness floor source code listing comment explicitly assumptions assumptions coloring We understand algorithm deriving The stereo measures depth map projecting exact distances use consistently stereo algorithm free space directly means series transformations computing floor plane Since concerned determining free space need particular unit measure Any measure know provided stereo function free space It known computes strictly Euclid points replace stereo computations ground plane This means image plane heights obstacles provided rest floor way labeling pixel obstacle carpet A general obstacle detector difficult carpet environment substitute appearanceit obstacle detector image plane height roughly build predictable distance measure In fact substitute stereo However textureand texture detector original obstacles increasing We summarize l We substitute analysis following general principles monotonic measure quantity calibrated measure provided l We substitute height objects measure comparisons image plane rest floor distance calculation way classifying provided pixels l We substitute floor object texture detector floor detector provided floor general coloring possibly specialization obstacles texture concisely transformation textureless These principles describes ficient conditions The transformations novel environments use blobbased abandon If property texture allowed carpet pixels classified algorithm Each ef valid wanted environment textured carpet able use easily use property basis new transformation predict reused algorithm transformation design new systems For example performance coloring algorithm task environment inefficient algorithm 3 Preview The main point paper usefully analyze specialized systems deriving general systems chain conditional Implicit claims promise analysis optimizations precise However analysis Most rest paper way making previous section handwavy devoted extended example analysis precise This entails great deal formalism formal showing uninteresting entirely The reader want skim formal sections skip The paper interpreted arguing The notations serviceable chosen particular choice notation largely compact exposition given alternatives exist Section 4 alternatives literature Nonetheless Section 4 surveys analysis The rest paper literature environmental robot The systems Polly detailed analysis navigational cooked suit needs formalism Polly real daytoday use MIT AI lab Section 5 fleshes Section 6 fully formalizes transformation blob coloring purpose analyzing devoted navigation working visionbased notions environment notions Pollys changes actions Section 8 uses extended level navigation basis state encompass analyze Pollys high Section 9 gives concluding Section 7 extends low level navigation formalism algorithm formalism remarks robot 4 Related work Relatively science computational little attention devoted environmental likely recently specialization begun construct systems closely coupled natural environments In biology great deal attention given specialization environments Cybernetics agents focused agentenvironment specific complex environments intelligence artificial robotics interactions 293034 complete intelligence properties 451 Ideas areas applied progenitor artificial necessarily In perceptual psychology Gibson proposed ecological stressed role environment structure environment environment perceptual apparatus organism process akin resonance forming agents perceptions Gibson argued energy flowing determines directly picked theory perception set invariants invariants Marr 28 argued order properly understand operation perceptual problem inputoutput interpretations understand generally intelligent theov behavior perceptual solves level conzpututional The computational set constraints desired possible given input The constraints necessary single stimulus usually generated infinite number possible situations The virtue computational individual mechanism A single computational different mechanisms computational tation possible efficient Marr believed details theory explain unify To Marr role constraints theories structure environment interpre human abstracts away theory defines instantiate theory Marrs actual story complicated levels explanation See I28 I 1 HorswillArtcial Intelligence 73 I 995 I30 7 visual general mechanism environment specialized ronment This work extends Marrs ideas constraints implementation descriptions advantage useful unnecessary properties envi relatively unconcerned understanding explain optimizations threedimensional constructing level form 36381 dynamics Kaelbling synthesizing developed method directly synthesized basis programming state environment finitestate machines Rosenschein Most formal models environments use statespace descriptions environment finite state machines Their formalization allowed descriptions desired behavior behavior environment The formalization powerful program real robot language states logic 121 use automata internal given set temporal usually represent agent environment specialized mechanisms formalization Later Rosenschein provable correlations assertions geometric similar approach 46 specifically environment Donald Jennings constructing simulated proposed based types mechanisms operate successfully finite state formalization classes based properties finite state machines genetic algorithm Littman reinforcement terms local storage algorithm allowed optimal control policy environments Wilson 43 grid worlds class artificial agents created classify environments complexity RL agents RL environment He divided environments determinacy Todd Wilson use far future algorithms Littman parameterized minimal parameters looks He empirically 25 FSM models classified environments classification virtual sensors taxonomize learned learning Wilson There extensive literature discreteevent dynamic systems 23 readable assume agents introduction model information transition environment finite state machine visible state information Several researchers discussed timeextended patterns interaction formal l reduce called dynamics Agre environment burden agent Lyons Hendriks discussed derive exploit useful 271 They use uniform dynamics temporal formalization exploit logic able identify useful dynamics Hammond Converse Grass discuss new dynamics designed agent improve based process algebra Using design reactive behaviors stability agentenvironment agent environment environment computational specification 161 5 Analyzing specialized agents We assume reasonably separate world agent environment Ihe world need mean entire physical universe portion analysis Let A denote set possible agents E set relevant environments Each agentenvironment form dynamic pair 8 I HorswillArticiul Intelligence 73 1995 I30 behavior We assume behaviors We write ai el E 2 e2 mean ei equivalent possible behavior ai operating behavior a2 e2 We agents notion equivalence equivalent environments equivalent taskspecific al a2 iff Vetezaiei u2e2 We conditionally equivalent environments equivalent given environmental constraint C satisfying C We write al Z_C az Thus UI fc a2 iff Veie2Cei ACe2 atei u2e2 Often designer particular behavior useful behavioral distinction relation divide working Let habitat HA agent A set environments refer environment constraints described constraint conjunction habitat constraints constraints possible behaviors want agent achieve Then agent works classes working works We habitat 5 I Specialization optimization Suppose want understand ronment Although smaller habitat domain constraints C s efficient agent s specialized envi general g s H C_ H If sequence mechanisms environments work exactly habitat g g GC s We phrase statement sati Cl cases This lets express C g s behaviorally habitat s terms English equivalent H 2 HgnCl IInC Note left righthand situations S works g One constraints righthand overly strong sides necessarily equal g gradually derivations equations We restrict _c s seen transformed step si1 I sequence equivalences case derivation s derivation s g analogy attention result applying given Ci si O s_l defined Exhibiting easier optimizations Oi making constraints If environment understand It places computational general optimizing transformation Oi preserves equivalence derivation breaks ss specialization _c Oia Oia constraints Ci correspondence explicit Teasing value constraint smaller pieces apart helps predict performance agent novel environments satisfies constraints agent work If 1 HorswillArtcial Intelligence 73 1995 l30 9 know optimizations fail consequently parts design modify In addition write general lemma effect ci reuse Oi design future systems Such lemmas greater actual agents inspired Note equally perform derivation subsystem agent possible subsystem For reason I use term mechanism mean agent subsystems 6 Analysis simple perceptual systems In section perform detailed analysis coloring algorithm given Section 21 To need flesh notions environment behavior behavioral equivalence Throughout paper use state space formalization environment In section concerned environment states possible transitions We ignore internal state agent In Section 7 add dynamics internal state Let W set possible world states We model environments subsets W consider state spaces Section 71 Thus 2w Habitats defined sets environments effectively larger regions statespace Habitat constraints constraints possible habitats effectively subsets W Since ignoring dynamics internal state consider perceptual systems information instantaneous world state Thus perceptual mechanism identifiable output identifiable set possible states S state output causally determined perceptual computes function state world Effectively W S We function information type perceptual computes We perceptual systems behaviorally equivalent compute information type An information type finite range finite Note information types confused concept information inverse probability classical information theory 151 While certainly compatible classical information theory concerned measuring quantities information concern distinguishing different kinds information 61 Derivability equivalence Often interesting information type information types computed We information type I W S derivable I W S exists derivation function f I f o I II written ii 12 interderivable 12 equivalent The range information type irrelevant derivability We arbitrarily rename elements range changing derived Thus matters partition PI induces world states P A c W 1 xy t A w Ix Iy The elements partition maximal sets world states indistinguish able given I One easily Lemma 1 The following stutements equivalent I 11 12 equivalent 2 X derivable 11 iff derivable 12 X 3 The partitions PI PI identical 4 11 12 difer u bijection 1I mapping interderivable We I I condition w t C Note I lv I It c 12 f2 cz 1s implies equivalent equivalent given C I bv Iw ft cn2 Is Finally perceptual systems behaviorally compute information identical given C written types conditionally type conditionally information identical given C I c I 62 Unconditional equivalence transformations We use single box labeled information type I represent meant internal wholly represent structure Thus perceptual computes connection environment When want use single arrows 1 The double arrow expose represent connections transformations f g represents Finally denote predicates computes I applies denotes diagrams outputs true I KJ T false These inherit associativity function composition simple optimization folding compiler optimization computation replacement series computations single constantfolding 2 SW I9 1 El proof I HorswiNArtificial Intelligence 73 1995 I30 II If 00 z f0I 0 One example optimizing transformation called decalibration precise parameters Estimating sensor calibration Often information empirical threshold For example estimate swerve avoid collision Generally experimentally units provided depth difficult require precise decide designer arbitrarily In situations use mechanism late brake chooses threshold determines computes distance correct compare obstacle threshold distance Lemma 2 Decalibration numbers strictly increasing function f I JR For information type I W Ii2 IR set real jyT c Ifoli Proof By associativity righthand equivalent ZK x fx fT iff x T fT T cid144 Decalibration allows calibrated mechanism replaced uncalibrated mechanism certain cases 63 Transformations simple vision systems The coloring algorithm image plane height discriminate depth texture obstacles In section derive sufficient conditions detector validity techniques We image plane height strictly increasing function object depth provided region contact floor We floor contained frequencies w floors surface markings spatial viewed region objects floor The proof terribly 0 dw discriminate interesting distance d low pass filter passband The reader wish skip Section 64 rests floor projection object First need forward direction forward camera frames share leftright camera bodycentered ground plane bw images ZR define coordinate z axis projection systems cameracentered bodycentered 2 direction faces forward somewhat camera bodycentered Fig 4 We assume direction motion axis X We updown lies Y 0 We denote systems y Y respectively We assume image range set X ZX axes color images ZW3 The projection cameracentered coordinates process specified In projection process maps point X y z world coordinate frames I HorwillArifcial Infelligence 73 1995 I30 camera 1 Y optic axis 2 h I center body coordinate p Ground plane Fig 4 A camera viewing ground plane The X axis shown comes page shared camera body coordinate formed X Y 2 camera frame X y z z axis projection optic axis camera h height camera P arbitrary point ground plane frames The body coordinate frame fXz point bodycentered A point P world projected Jyz image plane f focal length lens In best expressed vector algebra coordinate projection image plane point fP h zPh These 3D coordinates image plane axes X y yielding 2D coordinates coordinates obtained projecting p y p X 631 Salience functions jigureground separation W I T F figureground compute FGo FGo arbitrarily difficult Let 0 set objects FGo type world states returns image information T imaged A perceptual background chameleons recognized information constraint salience constraint particular classes objects biological world unique pixels marked world state objects 0 F 0 case 0 set specific cues allow objects specific contexts We cues salience functions An FGo given functions The use simple easily computed 351 good introduction common AI habitat distinguish type salience function snipers Fortunately conditionally 1120424447 equivalent consider The coloring algorithm uses texture detector salience function We want determine salience constraint restrict detector examines small patch Fourierbased measures texture Effectively required given texture detector For simplicity texture projection small patch image We approximate Xyz H fxlzofYlzo center surface patch A sufficiently 0 distance treated plane patchs reflectance varies sinusoid frequency vector 3 Then point x y patch given local coordinate x y Suppose small patch reflectance R I HorswillArticial Intelligence 73 1995 I30 13 Zero band Projected zero band Fig 5 The effect perspective projection local frequency distributions RXy t sin sitl If view patch l unit distance l lens unit focal length l direction normal l X axis aligned x axis l illumination unit intensity patch image intensity simply IY NY Now consider halving focal length halves size image effect changing viewing conditions Doubling distance Zxy Rg k sinsin Y 1 sine wave grating projected frequency doubled Rotating The image patch angle 6 factor cos 13 producing X axis shrinks image Y axis sine wave frequency w wcos 0 IxyRXyCOS8 Rotating Y shrinks frequency vector sinXsin wx ycose WY X axis Rotating optic axis simply rotates frequency Thus sine wave grating viewed position appears grating identical amplitude linear extend arbitrary possibly rotation Since projection process power spectra power spectrum patchs projection power spectrum patch rotated stretched axis Fig 5 Frequency bands patch transformed regions frequency domain projection vector modified scaling components elliptical 14 I HorswillArtijiciul Intelligence 73 1995 I30 point projection I Y image plane r Ground plane 2 l P Fig 6 Monotonicity image plane height body depth Rays projected point projection points ground plane pass successively higher points image plane distant points ground plane Bounds possible viewing conditions bands deformed yield bounds frequency The background texture constmint surface patches background surface markings power spectra bounded w view objects surface markings energy w surface lit We closer d focal lengths scene uniformly requires BTC Lemma 3 Any thresholded 0 dw salience function given background texture constraint lineurfiltering image u passband interval frontoparallel distance d band patch background energy Proof By assumption objects By reasoning patch object background viewed Thus patch imaged note increasing size projected viewing orientation object Thus thresholded band 0 w 0 dw band But increase d iff imaged ellipse Thus distance greater 0 dw iff projection energy patch energy distance changing linear filter salience viewing orientation function given BTC 0 w projects object band frequency 0 The corollary conditionally constraint thresholded equivalent figureground 632 Depth recover linear filter passband given background 0dw texture Depth measured cameracentered coordinate We camera depth body depth respectively The camera depth point P distance image plane z P h Body depth hand far forward robot drive collides point Z P We concern body depth bodycentered Consider world flat objects lying ground plane Then object points ground plane points zero Y coordinates The points linear combinations X 2 Since z Z perpendicular contribution X X component point camera depth body depth restrict I HorswillArtcial Intelligence 73 1995 I30 15 simply onedimensional attention depth II We inspection depth body depth related linear mapping More surprisingly height shown analytically The image plane height P case shown Fig 4 point P nZ Its body camera depth z nZ h depends camera placement n camera image plane function body depth This seen Fig 6 It camera depth linear strictly increasing Y fnZ h z nZ h yfnZfh nzZzh nffS Mr cr fZ obtain y 3 z Z y z h S f h y Differentiating respect n r np S PSoY pna r looks forward P agent n I S 0 np y2 camera When ya 0 derivative strictly positive GPC requires The ground plane constraint G set points contact G3 Thus pyramids 0 resting ground plane G o E 0 o completely os projection bases satisfy GPC use y coordinate information Let BodyDepth generated objects 0 cc pixels generated background camera view set objects view resting resting points Given measure depth closest object type gives correct body depth pixels restriction pyramids Lemma 4 Let R region image Then minR oBodyDepth equivalent increasing FGox y miny function conditionally E R given GPC module strictly xy touching floor minimal depth case contact point Proof Note minimal depth minimal object depth object points However object point point ground plane projection contact point contradiction Let p contact point We want object point smaller minimaldepth invariant respect changes projected y coordinate X coordinate p smaller Z coordinate smaller Y coordinate The contradict ps minimaldepth ground plane Thus p minimal y projection We shown contact points p Since y coordinate lesser y coordinate place point projects point y projection body depth point increasing strictly 0 A trivial corollary lemma height lowest figure pixel direction corresponding image column gives distance column nearest object 3 Formalizing notion touches difficult example 13 Chapter 81 treat notion primitive particular formalization unimportant purposes 16 I HorswillArtijicial Intelligence 73 I 995 I30 64 Derivation coloring algorithm We derive coloring algorithm stereo algorithm Recall stereo By Lemma 4 stereo monotonic function form conditionally equivalent given GPC modulo FG computation conditionally equivalent given BTC performs figureground separation By Lemma 3 filter edge detector operating scale larger floor texture filter restricted frequency band linear 0 dw remains shown Since coloring stereo yield outputs differ monotonic leads functions substituting left motor behavior space right distances mode1 steering motor invariant respect substitution provided order Doing requires math reader directed interested It shown steering based balancing attractor repeller basins robots configuration introduction 191 reflectances Even restricted derivation untextured objects different derivation tion extended ground While space precludes tured objects trigger correct figureground map filling image However operation provided screen coloring reflectances assumes fully textured objects The deriva argument goes follows Untex texture detector boundaries We compute texture interiors closed contours tilling view runs raw different coloring filled unfilled versions differ Thus algorithm work untextured objects provided column heights invariant respect view background object interior The derivation shows background separation More importantly ureground If wish run texture constraint satisfy stitute salience constraint holds background Turk et al 441 Crisman distinctive environment color set colors texture constraint fig shows simplify ground plane constraint new environment satisfy background sub use color For example 111 floor 1 HorswiWArtijkial Intelligence 73 1995 l30 17 jz build If wanted implement systems switch sufficient original information stereo determine parallel systems add switch use We worked environments opportunistically provided implement 7 Analysis action selection transformational number formal conditions techniques reactive systems We continue known set possible actionselection tasks model states First systems In section apply goal demonstrating planning dynamic state reduce deliberative environment add actions We model deliberative planning control policies classical control uniform vocabulary formal conditions substitution transitions environment making statemachine systems reactive systems variants 261 71 This gives expressing types systems We examine control policy allow simplifications theory environment reactive policy deliberative focus paper use transformational Again notation The notation apply transformations Rosenschein chosen largely compactness agents Kaelbling internal state turns useful needed establish The notation largely equivalent 38 Donald Jennings presentation The formal trick externalizing analysis specifics framework 121 It 71 Environments We allow different environments actions mappings E S A formed state space S set actions A mappings s s different state spaces treat states states An environment state machine For example consider robot moving corridor n equally spaced offices 1 n function dec map integer dec 0 0 n 1 n 1 identity action stay labeled 1 2 We formalize 1 dec identity 1 1 respectively proviso Fig 7 Note effect performing state environment Z 0 711 Discrete control problems We discrete control problem DCP pair D E G E environment G goal region Es state space The problem getting robot DCP Z 0 By abuse notation write DCP triple S A G A finite sequence beginning corridor decij iinc inci inci iinc deci idec incj inci idec Fig 7 The environment Zs Top serial product Bottom expressed graphs Function products written pairs x written Identity actions x omitted reduce clutter actionsaata2a solvable s sequence exists D solvable s E S solvesDfromirzitialstutesifaalas general EC D solvable 712 Cartesian products Often structured distinct components state space environment product environment Zs example Thus like think kingonachess acted independently The position king chess board row column components board environment IR2 Cartesian product reals rows columns 8 x 8 However consider environment product grid city blocks We like think environment Zs Both car king 8 x 8 grids state spaces car change state components king change moving diagonally We distinguish different Cartesian products environments car drives time parallel product corresponds corresponds f x x 0 H fu g b let identity Et St Al E2 Sz AZ define parallel product car case Let Cartesian product functions king case function For environments serial product f g El 11 E2 St x S2 u x u2 ul E A u2 E A2 serial product 1 HorswillArtcial Intelligence 73 1995 l30 19 El E2 S x S2 x aI E A U x a2 a2 E AZ The products DCPs defined obvious way EIG II E29G2 El 1 E2G x G2 EIGI E2G2 EI E2G1 x G2 The state diagram G Z2 shown Fig 7 We environment DCP parallel serial separable isomorphic product environments DCPs 713 Solvability separable DCPs The important property separable DCPs solutions constructed solutions components Claim 5 Let D1 02 DCPs Then DI ti D2 solvable state 1 2 iff D1 solvable SI D2 solvable 2 Proof Consider sequences actions S sequence sequence S solves product DI D2 respectively st 2 Let Sr S2 form S uxiixxixybxiixzcxi gr g2 By definition gr g2 goal states DI D2 St b c S2 x y z S goal state Sr S2 solution construct 0 components D1 D2 respectively Conversely sequences product solution product solution sequences sequence leave This 1 x F property agent way preserving The parallel product case complicated agent change state components leaves solved sub problem solving Consider flipflop environment F 0 1 Gflip wherex state F F property F 11 F F 11 F action flips state components given state F F state flip As king problem fixed leave component product add identity action necessary intact changing A weaker unnecessary maps goal states goal states F Then The identity action sufficient F action Thus states accessible state accessible possible condition Claim 6 Let D1 D2 DCPs rf D1 D 2 solvable state 1 2 DI solvable s1 D2 solvable 2 The converse true goal state D1 D2 action maps goal state 20 I HmswillArtijicial Intelligence 73 I 995 I30 let S solution Proof Again sequences obtained taking element S Thus S sequence second components si 2 Now let Si respectively axxbxycxz solutions respective component Si 19 c S2 x y z Again Si S2 solution problems Similarly form solution sequences product To loss solutions map goal generality let Si shorter solution Since state goal state pad Si actions goal region The combination combining components action Dt S2 padded Si solution elementwise length Without components product 0 72 Agents We assume agent uses policy choose actions A policy p mapping states actions We p l generates state sequence s si p si si l generates action sequence ai generates l solves I3 state s p generates solution sequence solves D states l solves D l solves D halts solves D s E G ps si ai p si s s E G For example halts constant function ps dec policy solves DCP Z 0 721 Hidden state sensors A policy uses perfect In real life information agents access sensory type Section 6 provided agents sensors The crucial question T type observable information derivable world choose action information Let T S X information derived We information T To choose actions need mapping world states S A sensor D We p Tsolves D given state initial states X A We mapping Tpolicy A function p Tpolicy DCP D p o T policy p o T solves state p Tsolves D general Tsolves 722 Externalization internal state completely state We model We assumed state sensors agent internal statethat actions In real life agents generally determined internal state perfect sensors effecters Let register environment RA alphabet A environment state space A actions constant A We write constant C writes functions function value C The action E register We E 11 RA augmentation state form external environmental internal I HorswillArtificial Intelligence 73 1995 l30 21 alphabet A An agent operating states E register perform action register augmentation point E write new value time read Using external state internal state simply mathematical artifice Agents use world external memory An agent need isolate portion worlds state appearance sheet paper accurately sensed controlled Humans routinely Appointment plans day world scarce memory Bartenders mix use position glass bar encode type drink far mixing uses external state 2 61 For example program books allow people intend 73 Progress functions A progress function measure distance function Q DCP D S A G nonnegative function goal In particular progress S reals 1 nonnegative 2 s 0 iff s E G 3 For initial state D solvable Qs 2 0 s S strictly decreasing exists solution sequence Uj al functions ajl aj The term progress refers termination 26 admissible fields 21 24 ali function j taken internal functions loops Progress heuristics similar 5 Volume 1 Chapter program verification state program literature prove artificial potential functions Liapunov II We policy p honors nonnegative E Qs ps s 0 A policy states s E 0 pss function steadily decreases honors thought run reaches local minimum DCP local minimum progress corresponding function goal reaches zero hillclimbing When happens global minimum Lemma 7 Let S R nonnegative let p policy DCP D honors Then p solves D halts exactly progress function D zero ai reaches 0 execution p arbitrary Proof Consider value Q decreases E Thus converge confined function converse solvable generated p sequence initial state On step remain zero steps state set 0 We need 0 C_ G iff progress function 0 c G holds definition To D If progress suppose 0 2 G We want state D decreases The sequence monotonically solution sequence 0 Progress functions generated directly policies The standard progress function J policy p solves D number steps p solves D given state An important property product DCPs construct progress components progress products functions functions Lemma 8 If I progress Y y H I x 2y DCPs function DI cP2 progress progress function function D2 serial product Proof Since I 0 2 0 Q 0 Similarly zero goal states product Now suppose product solvable SI 2 exactly decrease Then exist solution sequences I 2 respectively Any combination product monotonically cid144J product decrease Cp progress sequences components form solution monotonically function Again parallel case complicated Lemma 9 lf I progress D2 goal state DI D2 action maps state goal parallel product state Cp x y H 01 x 2 DCPs DI 2 progress progress function function function Proof Again 3 0 zero exactly product Now consider state SI 2 product sequences SI S2 component problems solution respectively strictly decreasing Without shorter Of solutions We pad SI combine product The padding change solution combined strictly decreasing goal states solvable There cP1 2 SI produce value I value solution assume solutions loss generality 0 74 Construction DCP solutions decomposition 74 I Product DCPs We tools construct solutions product DCPs solutions components Lemma 10 Let pl policy solves DI halts states set initial states 11 let p2 policy solves D2 halts states 12 Then poliq PXY PIx x P2Cv solves Dl 11 02 halts states convention qf treating p function pairs function scalars 11 x 12 Note I HorswillArtificial Intelligence 73 1995 I30 23 Lemma 11 Let p1 policy solves D1 states set initial states II let p2 policy solves 02 states 12 Then policy pxy PI x x x p2y y E G2X Gl PPy p1x x EGIYGGZPXYXPY solve Dt D2 halt states II x I2 functions Let n ppzDz p p2 DI D2 respectively Their sum serial case products clearly sum solve respective products Note constraint given Proof We prove lemmas progress standard progress progress fact PI p2 halt parallel case Since policies honor second product This follows directly sufficient necessary function lemma 0 742 Reduction We treat environment retains fundamental distinctions vironment removes unimportant concrete states abstract actions correspond actions states An abstract state corresponds complicated The abstract en set sequences concrete structure concrete environment abstraction Let projection environment S A mapping ST S S U 1 crete state I states corresponding U SES 7rs E S A T gives abstract environment E abstract state given concrete corresponding given abstract state For sets states let rr S abstract state nI gives states corresponding We define rimplementation reliably moves abstract state s visiting states corresponding abstract states Thus s s defined abstract action policy abstract state s states corresponding implementation solves DCP FsIasA7rTTas Note require p stay mTT s reaching Given 9rimplementattons concrete environment p solve problems need look abstract state corresponding abstract action policy pa 0 f abstract action use abstract policy abstract actions We emulating current concrete state look This suggests abstract state run implementation PS PpfTrsS This concrete policy works taking computing state s looking abstract state rTT s running proper abstract action p r s computing 24 1 HmswillArtcial Intelligence 73 1995 I30 state action effectively abstract state rimplementations implementation recomputes problem P Note abstract action time concrete environment concrete internal concrete action This corresponds abstract state To handle environment policy environment new abstract action implementation When uses abstract action stored register preserves policy chooses state visit states add state register remember abstract action presently performed The concrete state abstract state new abstract action state It stores computes state corresponding register later use executing value register augmented concrete environment necessary problem allowed environment abstract Lemma 12 Let D S A G D S A G DCPs T projection D D action E A let pni rimplementation D If p policy solves D policy psa PS x I rs I PJ x C1jTy solves augmentation D alphabet A state T S function problem p D let s E P S solved suppose states s D rr s n consider compute p QT s Proof Let Qpnt standard progress Then Qpoj rr s number abstract actions need solve problem concrete state s If lDt r s 0 problem p solves s o rs begin store register Call action The policy p immediately reach executing pO Since state r finite time reach state D By assumption p solve D high level state n steps p able solve D s induction p solves D s E P S n 1 The policy p immediately pimplementation policy s 0 We D reducible D exists projection rimplementations convert solution actions D If D reducible D solution D 8 Analysis robot navigation IT D D D easily Consider robot decide given problem piloting robot office environment shown Fig 8 fast turn At given moment corridors fast coordinates reaches intersection intersection turns north goal north south goal south intersections At intersections goal forward backward Polly uses policy following coordinates destination compares presumed north east south west Fig 8 Approximate layout seventh floor AI lab MIT Top topological stmcture Bottom stop turnnorth turnsouth goal south goal turn north north goal turn south pPOIIy sensors turnnorth turnsouth followcorridor south goal pointed south north goal pointed north The details perception control systems given 191 81 Derivation geometric path planner Geometric path planning common technique solving type problem Given detailed description environment start position goal position path planner computes safe path environment start goal 241 Once path planned separate follows path Geometric planning versatile produce efficient paths computationally efficient It requires detailed knowledge environment perceptual unable deliver We clarify relationship path planning Pollys reactive algorithm deriving Pollys algorithm planing Let N DCP states position orientation pairs actions small translation 26 1 HorwillArtiJiciul Intelligence 73 I 995 I30 clock pairs robot rotation modeled N policy However policy A plannerexecutive execute plan The planning portion uses scratch memory reads store register executes segment form tick Clearly Polly planner equally modeled N state compute gradually compute plan finished plan architecture turn Thus plannerexecutive plan register simply policy uses internal executive pasplanscr planNsscrurch executeplan x 1 plan incomplete executepfan headplun x Crairpun An agent N spend nearly time corridors The real choice points intersections Thus graph corridors state space N Fig 8 current environment corridor intersections N need searched By Lemma 12 augment northsoutheastwest action replace po policy environment register hold I s action pcs x C PO11 s x CutliOn 3 intersection intersection l fs l different puctfon p olicies state S implement following north south east west cor ridors respectively l pi arbitrary N policy The lemma requires started corridor scratch registers planexecute goal corridor robot intersection intersection We solve N adding plan policy pi intersecplun scratch x plan intersec scratch plan incomplete executeplutr x We simplify corridor network interleaves goal We remove actions noting 4 x 2 grid By Lemma 11 replace p policy isomorphic N Zb Zz location current reduce grid coordinate differences plan scratch registers pr reduce pz s action ppjr x Cj Puctiot r x CUtiOn intersection N policy satisfying moves northsoutheastwest constraints 1 goal northsoutheastwest stops goal pi 2 IS There important differences p2 pt Polly uses different state instead north internal turn north set actions I HorswillArtcial Intelligence 73 1995 I30 27 Table I Summary constraints optimizations Pollys navigation Constraint Optimization ground plane constraint backgroundtexture constraint corridor network grid structure orientation correlation use height depth estimation use texture obstacle detection replace planning N planning N replace planning difference reduction store state orientation appears Within short period beginning track abstract action While derived pointed north Similarly robot effectively register Theres need internal memory Polly stores state motor different policy north action agent east south west actions The orientation register turn commands use qualitatively effectively write action We summarize transformations environment intersection The constraint corridor corridor graph The isomorphism planning difference internal allows replace geometric planning planning derivation follows Table 1 consist network corridors goal grid allows replace correlation robots orientation corridor graph reduction Finally It important state allows store current action orientation note subproblems corridor environment decisions orthogonal effectively happens allow active reverse optimization reacting connected reactively corridor imagine 9 second optimization intact The result following solved deliberative If implemented hierarchical use simple planner reactive policies In environment complicated abstracted planners planning resulting 391 221 Pollys environment layered graph topology examples On hand corridors cluttered abstract problem solved use deliberative leaving hybrid planning planner 8142740 environment grid In environment individual following actually require deliberative planning 9 Conclusions Fundamentally paper explanation For reason type operate properly agents performance In cases want explain It reduces agents environmental faced agents mechanisms environment different environments Transformational programs giving enlightening Polly uses The constraint place choice edge detector predict obtained conditions agents given analysis way reverseengineering specialization ones series lemmas possible The lemmas No cares edge detector surface markings far interesting Once lemmas performance old agents new environments Lemma 3 background different optimizations 28 1 HorswillArtificiul Intelligence 73 I 995 l30 new agents suggest designs optimization imagine developing particular kinds situated agents cookbook methods currently electrical mechanical old environments Given sufficient cookbook methods lemmas designing stock engineering A discussion specialization appropriate outside issue The specialized agent works generality design serendipitous billed We think carefully properties test data build specialized systems general systems specialization consumers intelligent literature The scope paper systems We study environment formally experimentally The knowledge I It rare structure sensors environment techniques discussed primarily posthoc analysis incomplete use external world design agents necessarily transformational I understand guess algorithm robust Performing turn empirically encode agents partial tested If notion seriously form natural science To understand world false derivation based plausible constraints constraints wasted effort The environmental theories environment Theories view artificial intelligence study intelligence Acknowledgements Phil Agre Rod Brooks Bruce Donald Eric Grimson Maja Mataric David Michael Lynn Stein provided needed feedback ideas The reviewers provided useful suggestions Ray Paton Stan Rosenschein development improving University Research 0685 Advanced Research Projects Agency Office Naval Research contract N0001485K0124 Initiative Office Naval Research contract NOOO1486K research provided presentation Support References I I I FE Agre The dynamic structure everyday life Tech Report 1085 MIT Artificial Intelligence Laboratory Cambridge MA 1988 12 I RE Agre 1 Horswill Cultural support 1992 improvisation Proceedings AAAI92 San Jose CA 13 I AV Aho R Sethi JD Ullman Compilers Principles Techniques Tools Addison Wesley Reading MA 1986 4 I ST Barnard MA Fischler Computational biological models stereo vision Proceedings DARPA Image Understandinq Workshop 1990 I S I A Barr EA Feigenbaum The Handbook ofArtijicia1 Intelligence William Kaufmann Los Altos 1981 16 I K Beach Becoming bartender role external memory cues workdirected educational activity J Appl Cop Psychol 1992 I HorswillArttjial Intelligence 73 1995 l30 29 171 R Beer A dynamical systems perspective autonomous agentenvironment interaction Artif Intelf 72 1995 173215 CES 9211 Case Western Reserve University Cleveland OH 1992 81 J Brcsina M Drummond JHendler ed AAAI Spring Integrating planning reaction Symposium Planning Uncertain Unpredictable Changing Environments AAAl Press Asilomar CA 1990 9 RA Brooks A robust layered control mobile robot IEEE t Rob Autom 2 1 1986 1423 IO A Church The Calculi Lambda 1 I JD Crisman Color region tracking vehicle guidance A Blake A Yuille eds Active Vision Conversion Princeton University Press Princeton NJ 1951 MIT Press Cambridge MA 1992 Chapter 7 121 BR Donald J Jennings Constructive recognizability taskdirected robot programming J Rob Auton Syst 9 1992 4174 131 MM Fleck Boundaries topological algorithms Tech Report 1065 MIT Artificial Intelligence Laboratory Cambridge MA 1988 1141 E Gat Integrating planning reacting heterogeneous asynchronous architecture controlling realworld mobile robots Proceedings AAAI92 San Jose CA 1992 151 RW Hamming Coding information Theory PrenticeHall Englewood Cliffs NJ 1980 161 KJ Hammond TM Converse Stabilizing environments facilitate planning activity engineering argument Proceedings AAAI91 Anaheim CA 1991 787793 171 JL Hennessy DA Patterson Computer Architecture Quantitative Approach Morgan Kaufmann San Mateo CA 1990 IS I Horswill Polly visionbased artificial agent Proceedings AAAI93 Washington DC 1993 824829 191 I Horswill Specialization perceptual processes PhD Thesis Massachusetts Institute Technology Cambridge MA 1993 20 I Horswill R Brooks Situated vision dynamic environment chasing objects Proceedings AAAI88 St Paul MN 1988 211 0 Khatib Realtime obstacle avoidance manipulators mobile robots In J Rob Res 5 1 1986 9098 221 CA Kuoblock JD Tenenbetg Q Yang A spectrum abstraction hierarchies planning Proceedings AAAI90 Boston MA 1990 23 J KoSecka Control discrete event systems GRASP LAB Report 313 Department Computer Information Science University Pennsylvania Philadelphia PA 1992 241 JC Latombe Robot Motion Planning Kluwer Academic Publishers Boston MA 1991 25 ML Lman An optimizationbased categorization reinforcement learning environments JA Meyer SW Wilson eds From Animals Animats The Second International Conference Simulation Adaptive Behavior MIT Press Cambridge MA 1993 262270 26 DG Luenberger Introduction Dynamic Systems Theory Models Applications Wiley New York 1979 27 DM Lyons AJ Hendriks Exploiting patterns interaction achieve reactive behavior Artg Intell 73 1995 117148 volume 28 D Marr Ksion Freeman New York 1982 29 D McFarland What means robot behavior adaptive JA Meyer SW Wilson eds From Animals Animats Proceedings First International Conference Simulation Adaptive Behavior MIT Press Cambridge MA 1991 2228 30 JA Meyer A Guillot Simulation adaptive behavior animats review prospect JA Meyer SW Wilson eds From Animals Animats Proceedings First International Conference Simulation Adaptive Behavior MIT Press Cambridge MA 1991 214 3 1 JA Meyer SW Wilson eds From Animals Animats Proceedings First International Conference Simulation Adaptive Behavior MIT Press Cambridge MA 1991 321 JA Meyer SW Wilson eds From Animals Animats The Second International Conference Simulation Adaptive Behavior MIT Press Cambridge MA 1993 1331 M Minsky Computation Finite Infinite Machines PrenticeHall Englewood Cliffs NJ 1967 30 1 HorswillArriciul Intelligence 73 1995 l30 34 1 RC Patton HS Nwana MJR Shave TJM BenchCapon Computing rissueorgan level particular f35 J HL Roitblat 36 1 SJ Rosenschein reference liver MIT Press Cambridge MA 1992 41 I420 fnfroducrion Formal fo Compariive Cognition theories knowledge Freeman New York 1987 AI robotics Research Report CSLI8784 Center Study Language Information Stanford CA 1987 I37 I SJ Rosenschein Synthesizing informationtracking automata environment descriptions RJ Brachman HJ Levesque R Reiter eds Proceedings First Infernafional und Reasoning Toronto Ont 1989 386393 Knowledge Representation Conference Principles I38 1 SJ Rosenschein J Halpem Monterey CA 1986 8398 LP Kaelbling The synthesis machines provable epistemic properties ed Proceedings Conjkrence Theoretical Aspecfs Reasoning Knowledge I39 ED Sacerdoti Planning 1401 L Spector J Hendler The supervenience hierarchy abstraction architecture Fall Symposium Sensory Aspects cf Robofic Infelligence spaces Art Intell 5 2 1974 A Kak ed Working notes AAAI AAAI Press Asilomar CA I99 I 93 100 lambda extended 141 I GL Steele GJ Sussman The revised report Scheme interpreter calculus Al Memo 452 MIT Artificial Intelligence Laboratory Cambridge MA 1978 421 MJ Swain Rochester 1990 Color indexing Tech Report 390 Department Computer Science University I43 I PM Todd SW Wilson Environment structure adaptive behavior JA Meyer SW Wilson eds From Animals Simulation Adaptive Behavior MIT Press Cambridge MA 1993 I I20 Animuts The Second International I44 1 MA Turk DG Morgenthaler K Gremban M Marra Video road following ground Conference Conference Roborirs Automurinn autonomous 1987 land vehicle 273280 Proceediqs IEEE Internationcrl MIT Press Cambridge MA 1961 145 I N Wiener Cybernetics 46 I SW Wilson The animat path Al JA Meyer SW Wilson eds From Animals Animafs Proceedings First Cambridge MA 1991 1521 International Corzference Simulation Adaptive Behavior MIT Press I47 I J Woodfill R Zabih Using motion vision simple robotic task Proceedings AAAI FuU Symposium Sensory Asperrs Robotic lntelligetxe 199 1