Artiﬁcial Intelligence 175 2011 120141 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint A unifying action calculus Michael Thielscher School Computer Science Engineering The University New South Wales Australia r t c l e n f o b s t r c t Article history Available online 3 April 2010 Keywords Knowledge representation Reasoning actions Situation Calculus McCarthys Situation Calculus arguably oldest specialpurpose knowledge represen tation formalism designed axiomatize knowledge actions effects Four decades research area led variety alternative formalisms While approaches considered instances extensions classical Situation Cal culus like Reiters successor state axioms Fluent Calculus special planning languages like ADL approaches based linear branching time structure like Event Calculus The coexistence different calculi main disadvantages The formal relations largely open issue lot todays research concerns transfer speciﬁc results approach In paper present unifying action calculus encompasses welldeﬁned classes aforementioned formalisms Our calculus facilitates comparisons translations speciﬁc approaches allows solve interesting problems calculi We exemplify providing general calculusindependent lution problem practical relevance intimately related McCarthys quest elaboration tolerant formalisms modularity domain axiomatizations 2010 Elsevier BV All rights reserved 1 Introduction John McCarthys Situation Calculus 22 arguably oldest specialpurpose knowledge representation formalism The aim use classical logic axiomatize knowledge actions effects This relevant variety areas AI including planning intelligent agents highlevel cognitive robotics natural language understanding general game play ing While Situation Calculus classical approach purpose variety different logicbased formalisms emerged course past decades motivated mainly fundamental Frame Problem 25 Besides prominent variants Situation Calculus like Reiters successor state axioms 31 Fluent Calculus 41 planning languages like STRIPS ADL PDDL 52926 developed allow simple operational solutions Frame Prob lem expense signiﬁcantly limited expressiveness Furthermore underlying branching time structure Situation Calculus replaced linear time structure Event Calculus number approaches 1836410 The basic principles knowledge representation actions specialpurpose formalisms like Game Description Language 8 The coexistence multitude knowledge representation languages actions signiﬁcant consequences research area Firstly growing need comparative analysis expressiveness different approaches translations speciﬁc language Previous studies line 17 28353 concerns comparison speciﬁc formalisms However method encompasses wide variety alternative formalisms time allow uniform way assessing translating calculi Secondly issues general need separately addressed individual language This leads Email address mitcseunsweduau 00043702 matter 2010 Elsevier BV All rights reserved doi101016jartint201004010 M Thielscher Artiﬁcial Intelligence 175 2011 120141 121 multiplication research efforts A notorious example Ramiﬁcation Problem problem determining indirect effects actions 9 variety individual solutions developed different formalisms 192111403827 A general method enables uniform treatment problems different calculi help avoid multiplication research efforts In paper address issues time proposing unifying action calculus independent speciﬁc solution Frame Problem shown general encompass variety different action representation formalisms Most notably abstracts underlying time structure branching linear instantiated Situation Calculusstyle approaches Event Calculuslike languages In general calculus provides uniform method translating variety speciﬁc formalisms Moreover unifying approach allows abstract speciﬁc formalisms investigating problems general We exemplify providing new calculusindependent solution problem practical relevance action representation language modularity domain axiomatizations 13 Our result contribution McCarthys quest elaboration tolerant formalisms 24 modularity prerequisite elaboration tolerance theories variety dependencies different parts allow addition new information disrupting entire axiomatization 14 We use unifying action calculus develop general method verifying given set domain constraints precondition axioms effect formulas free undesired implicit dependencies We exemplify range applicability result instantiating speciﬁc approaches particular Situation Fluent Event Calculus The remainder paper organized follows In section formally deﬁne action calculus abstracts speciﬁc underlying time structure independent speciﬁc solution Frame Problem We illustrate expressiveness deﬁnition formalizing example domains known literature including nondeterministic actions indirect effects actions duration In Section 3 unifying calculus intermediary language translations speciﬁc languages Speciﬁcally present new results translation ADL planning problems Event Calculus translation basic Fluent Calculus new extensionsuitable nondeterministic actionsof Reiters basic Situation Calculus In second paper Section 4 unifying action calculus provide calculusindependent solution problem implicit dependencies domain axioms exemplify range applicability result instantiating action formalisms We conclude discussion Section 5 2 A unifying action calculus The purpose section develop unifying action calculus abstracts variety existing axioma tization techniques describing actions change Logicbased action representation formalisms common fundamental elements Fluents 22 called features 33 represent properties domain change response execution actions events 18 Fluents actions basic sorts sorted logic language going deﬁne Action calculi need distinguish different points time order axiomatize changes caused actions We assume abstract notion timewhich linear branchingas fundamental sort The basic sorts fundamental predicates The relation t1 t2 denotes possibly partial ordering time structure Predicate Holds f t ﬂuent f true time t Finally intended meaning expression Possa s t possible action beginning time s ending time t These predicates fundamental sorts form basis domain signature unifying action calculus Deﬁnition 1 A domain signature ﬁnite sorted logic language includes sorts ﬂuent action time predicates time time Holds ﬂuent time Poss action time time We tacitly assume signature includes standard predicate interpreted true equality As usual s cid2 t stands s t s t Throughout paper denote variables sort action letter variables sort ﬂuent f g variables sort time s t We tacitly assume uniquenessofnames 1 functions ﬂuent action common assumption standard action calculi Next deﬁne notion state formula allows express properties domain given times Deﬁnition 2 Let cid3t nonempty sequence variables sort time given domain signature A state formula cid3t ﬁrstorder formula Φcid3t variables cid3t occur free 1 occurrence Holds f t Φ t cid3t 122 M Thielscher Artiﬁcial Intelligence 175 2011 120141 2 predicate Poss occur Φ Similar notions existing calculi usually restricted single time point As shown later section general concept useful instance axiomatizing actions ramiﬁcations We position formalize calculus fundamental categories domain axioms domain straints state properties hold times precondition axioms deﬁne conditions actions applicable state effect axioms deﬁne consequences actions For use general form allows deﬁne nondeterministic actions help different possible cases 1 k updates Υis t cf axiom 1 Each subformulas deﬁnes ﬂuents hold action time t relative state action starts time s This concern possibly conditional effects action noneffects This formulation general subsume speciﬁc solutions Frame Ramiﬁcation Problem Deﬁnition 3 Consider domain signature let A function sort action 1 A domain constraint form δt state formula t1 2 A precondition axiom form cid2 Poss Acid3x s t cid3 π As π As state formula s free variables s t cid3x 3 An effect axiom form cid2 Poss Acid3x s t cid3 Υ1s t Υks t k cid3 1 Υis t 1 cid2 cid2 k formula form cid2 cid3yi cid4 Φis f Γ cid4 f Γ cid5 s t Holds f t s t Holds f t cid5cid3 1 2 Φis state formula s free variables s cid3x cid3y2 Γ formulas s t free variables f s t cid3x cid3y s t Γ s t state A domain axiomatization consists precondition effect axioms function sort action ﬁnite set domain constraints ﬁnite set foundational axioms predicates Holds Poss The purpose foundational axioms deﬁne underlying time structure In following present exam ple axiomatizations domains known literature illustrate wide range phenomena expressed unifying calculus Example 1 Branching time nondeterministic actions The Situation Calculus related axiomatization techniques based branching timestructure situations commonly deﬁned constant S 0 time function Do action time cid10 time A standard example nondeterministic action dropping pin checkerboard 20 The pin land white square black square Let ﬂuents Pinx Whitex Blackx denote x pin respectively white black square The action Dropx axiomatized following precondition effect axiom cid2 cid2 Poss Poss cid3 Dropx s t cid2 Holds Pinx s cid2 t Do Dropx s cid3 cid2 Holds cid3 Whitex s cid3 cid2 Holds Blackx s cid3 3 Dropx s t cid3 cid2 cid4 cid5 f f Whitex Holds f s Holds f t cid4 f cid12 Whitex Holds f s Holds f t f cid5 cid4 cid2 f Blackx Holds f s Holds f t f cid5cid3 1 Throughout paper free variables assumed universally quantiﬁed 2 The purpose subformula Φi s deﬁne conditions case apply Whenever tautology simply omit formula M Thielscher Artiﬁcial Intelligence 175 2011 120141 cid4 f cid12 Blackx Holds f s Holds f t f cid2 cid5 cid4 f f Whitex f Blackx Holds f s Holds f t cid4 f cid12 Whitex f cid12 Blackx Holds f s Holds f t f cid5cid3 cid5cid3 123 4 The disjuncts effect axiom encode possible outcomes nondeterministic action including case pin lands white black Each subformulas describing update includes solution Frame Problem ﬂuents possibly Blackx Whitex retain value successor situation t DoDropx s As example suppose given initial state description cid3 cid3 cid3 cid2 Holds PinA S0 cid2 Holds WhiteA S0 cid2 Holds BlackA S0 5 observation HoldsWhiteA DoDropA S0 Together domain axioms implies HoldsBlackA DoDropA S0 To 5 precondition axiom 3 follows PossDropA S 0 DoDropA S0 The ﬁrst disjunct effect axiom 4 imply HoldsWhiteA DoDropA S 0 contradicts observation Therefore claim follows second disjunct It worth mentioning nondeterministic actions formulated unifying calculus disjunc tive effect axiom simply excluding ﬂuents frame assumption An example following axiomatization effect tossing coin cid2 Tossc s t cid3 Poss cid4 f cid5 f cid12 Headsc Holds f s Holds f t cid4 f cid5 f cid12 Headsc Holds f s Holds f t ﬂuent Headsc denotes coin c shows heads This corresponds notion occlusion release 34 37 Example 2 Branching time ramiﬁcations Consider variant introduced 2 famous Yale Shooting scenario 12 ﬂuents Loaded Alive Walking representing gun loaded turkey alive walking respectively The following domain constraint says turkey walk alive HoldsWalking t HoldsAlive t 6 Let Load Wait Shoot denote actions loading gun waiting shooting respectively Their preconditions shall follows PossLoad s t t DoLoad s PossWait s t t DoWait s PossShoot s t t DoShoot s 7 The following schema effect axioms encodes combined solution Frame Ramiﬁcation Problem reformulation causal approach described 10 cid5 cid4 CausedT f s t CausedF f s t Holds f t Possa s t f cid5 cid4 CausedF f s t CausedT f s t Holds f t f CausedT f s t def Holds f s Holds f t f Loaded Load CausedF f s t def Holds f s Holds f t f Alive HoldsLoaded s Shoot f Walking HoldsAlive t 8 9 Macro CausedT f s t combines positive frame assumption Holds f s Holds f t possible positive effects domain fact gun loaded loading Likewise CausedF f s t combines negative frame assumption possible negative effects gun loaded shooting turkey dies successor situation turkey alive causes walking The describes indirect effect related domain constraint 6 conveying additional causal information solve Ramiﬁcation 124 M Thielscher Artiﬁcial Intelligence 175 2011 120141 Problem 10 Note decades shooting turkey Yale longer unloads gun It easy action variable schema 8 instantiated actions domain order obtain effect axioms actually form required Deﬁnition 3 The domain axiomatization entails example HoldsWalking DoShoot DoWait DoLoad S 0 To let S1 DoLoad S0 S2 DoWait S1 S3 DoShoot S2 Precondition axioms 7 imply PossLoad S0 S1 PossWait S1 S2 PossShoot S2 S3 From deﬁnition 9 obtain CausedTLoaded Load S0 S1 effect axiom 8 entails HoldsLoaded S1 10 loaded subsequent Wait action given uniquenessofnames The gun remains CausedFLoaded Wait S1 S2 equivalent HoldsLoaded S1 HoldsLoaded S2 Because 10 actually implies CausedFLoaded Wait S1 S2 It follows 8 implies 9 HoldsLoaded S2 11 It worth mentioning 10 implies CausedTLoaded Wait S 1 S2 This Frame Prob lem solved axiomatization technique ﬂuent Loaded caused true S 2 simply staying true S1 S2 Given gun loaded Shoot action effect turkey dies indirect effect stops walking 9 11 follows CausedFAlive Shoot S 2 S3 Hence HoldsAlive S3 8 This turn implies CausedFWalking Shoot S2 S3 according 9 claim follows 8 Example 3 Linear time actions duration The Event Calculus axiomatization techniques use linear time structure like example natural numbers The following scenario adapted 33 Let ﬂuents Assembled Instr denote respectively state assembly kit availability assembly instructions To represent occurrence actions add ﬂuent called Occursa s t describes fact action actually happens starting time s ending time t We consider actions Assemble effect kit assembled end special action Inert axiomatize frame assumption time points happens cid4 PossAssemble s t f cid5 f Assembled Holds f s Holds f t cid4 f cid5 f cid12 Assembled Holds f s Holds f t cid5 cid4 Holds f s Holds f t PossInert s t f cid5 cid4 Holds f s Holds f t f The preconditions actions follows cid2 PossAssemble s t Holds cid3 cid4 OccursAssemble s t s cid5 HoldsInstr s t s 20 cid4 HoldsInstr s t s 60 cid5 cid2 PossInert s t cid13 s t cid13 cid3cid2 cid2 Holds cid2 Occurs s cid13 t cid3 cid13 s cid3 cid13 s t t cid13 s cid3 12 13 Put words assembling variable duration depending availability instructions The generic Inert action possible time points s t action starts t ends s In order second precondition axiom 13 complies Deﬁnition 3 righthand state formula s This turn requires action occurrences known times easily obtained generic deﬁnition domain constraints following macro Happensa s t def cid2 cid3 cid2 Holds cid13 t Occursa s t t cid3 cid13 As example consider scenario single action occurs cid2 ta cid4 PossAssemble 100 ta s t Happensa s t Assemble s 100 t ta cid5cid3 14 15 observation HoldsAssembled 130 This domain axioms implies HoldsInstr 0 kit assembled time 130 instructions present beginning To suppose sake argument PossAssemble 100 120 We leads contradiction 12 follows HoldsAssembled 120 16 M Thielscher Artiﬁcial Intelligence 175 2011 120141 125 15 deﬁnition 14 PossAssemble 100 120 13 instance Moreover cid13 120 Therefore PossInert 120 130 according 13 In turn 16 HoldsOccursa s imply HoldsAssembled 130 12 contradicts observation Hence PossAssemble 100 120 This PossAssemble 100 ta entail HoldsInstr 100 13 The claim HoldsInstr 0 follows 12 fact PossInert 0 100 reader easily verify 14 15 cid13 120 t imply cid13 t These examples unifying calculus allows model variety ontological features We conclude section deﬁning important subclasses domain axiomatizations later paper To begin domain axiomatization called progressing time point time moves forward action executed Deﬁnition 4 A domain axiomatization precondition axioms Π foundational axioms Ω progressing 1 Ω cid14 s timet times cid2 t 2 Π Ω cid14 Possa s t s t A domain axiomatization called sequential progressing actions overlap Deﬁnition 5 A domain axiomatization precondition axioms Π foundational axioms Ω sequential pro gressing Π Ω cid14 Possa s t Poss cid2 cid13 cid13 s t cid3 cid13 cid2 t t cid13 t cid2 s cid13 cid3 cid2 t t cid13 cid13 s s cid13 cid3 In Example 2 seen ramiﬁcations actions obtained effect depends conditions successor state f Walking HoldsAlive t Holds f t cf 9 8 respectively This gives rise following deﬁnition Deﬁnition 6 A domain axiomatization ramiﬁcationfree Υis t effect axiom 1 form cid2 cid3yi cid4 Φis f Γ cid4 f Γ s Γ cid5 s Holds f t s Holds f t cid5cid3 Γ s state formulas s 3 Translations based unifying approach In section unifying calculus intermediary language translating speciﬁc calculi The general idea map domain descriptions language domain axiomatizations unifying calculus rewrite target language This provides uniform method embedding deﬁned classes domains variety existing approaches allows compare relative expressiveness The advantage unifying action calculus middle language twofold 1 A mapping source language unifying calculus results generic representation mapped variety different target languages avoiding need complete translations case 2 Once mapping target language developed speciﬁc class domains unifying calculus suﬃces map source language class obtain translation source target We exemplify method new results axiomatic characterization ADL planning problems Event Cal culus translation basic Fluent Calculus Situation Calculus As byproduct deﬁne extension Reiters basic Situation Calculus suitable nondeterministic actions somewhat general approach proposed 20 31 Translating ADL event calculus 311 From ADL In order Event Calculus characterization planning language ADL introduced 29 ﬁrst interpret ADL unifying calculus For deﬁnition planning language follow 6 126 M Thielscher Artiﬁcial Intelligence 175 2011 120141 Deﬁnition 7 An ADL signature consists ﬁnite set types possibly including deﬁnitions types disjunctive unions types ﬁnite set typed constants ﬁnite set typed ﬂuents ﬁnite set typed action names An ADL planning problem composed following elements 1 For operator Acid3x precondition π ﬁrstorder formula free variables cid3x atoms ﬂuents F cid3t equalities t1 t2 2 For operator Acid3x ﬁnite set effect speciﬁcations forms cid2 cid3yi γ cid3 F icid3yi cid2 cid3y j γ j cid3 F jcid3y j 17 j ﬁrstorder formulas free variables respectively cid3x cid3yi cid3x cid3y j conditions γ atoms ﬂuents F cid3t equalities t1 t23 γ 3 A conjunction ground ﬂuent literals possibly incomplete initial state speciﬁcation closed ﬁrstorder formula planning goal Example 4 Consider following speciﬁcation action Moveobject old new wellknown blocksworld Precondition Onobject old old new Effects zOnz object zOnz new cid2 x y cid2 x y cid2 x y cid2 x z cid2 x z cid3 x object y new Onx y cid3 x object y old Onx y cid3 x object y new Abovex y cid3 x object Abovenew z Abovex z cid3 x object Abovex z Abovex z 18 The bottommost expressions specify unbounded number effects characteristic features ADL expressiveness STRIPS The semantics ADL domain description requires deﬁnition transition function complete states These represented ground sets ﬂuents S basis entailment deﬁnition S cid14 F cid3t iff F cid3t S ground ﬂuent F cid3t Deﬁnition 8 Consider ADL planning problem let S S cid13 action precondition π effect speciﬁcations 17 sets ground ﬂuents Acid3t ground instance S cid2 Acid3t Scid13 action applicable S S cid14 π cid3x cid10 cid3t Scid13 S D A deletelist D set ground ﬂuents F jcid3r S cid14 γ cid3x cid10 cid3t cid3y j cid10 cid3r addlist A set ground ﬂuents F icid3r S cid14 γ cid3x cid10 cid3t cid3yi cid10 cid3r A sequence α1 αn ground actions solution planning problem S0 satisﬁes initial j state S0 cid2α1 cid2αn Sn entails planning goal Sn Because purely logical axiomatization ADL description presuppose particular time structure This allows interpretations example 3 uses branching time embedding ADL Situation Calculus In view translation Event Calculus map ADL planning problems unifying calculus linear time structure speciﬁcally natural numbers To begin type declarations taken speciﬁcation domain sorts The ADL operator names mapped functions sort action ADL ﬂuents mapped functions sort ﬂuent Much like Example 3 add special ﬂuent Occursa action t N represent occurrence action speciﬁc time An ADL domain description translated domain axiomatization unifying calculus follows 3 The original deﬁnition actually allows partially instantiate arguments ﬂuents F cid3yi F jcid3y j 17 For sake simplicity assume equivalently represented equations γ respectively γ j M Thielscher Artiﬁcial Intelligence 175 2011 120141 127 1 The foundational axioms deﬁne time structure natural numbers N element 0 2 The precondition axioms cid2 cid3 cid2 Holds cid2 Occurs cid3 cid3 Acid3x s t Poss 19 π As ADL precondition operator Acid3x occurrence ﬂuent φ replaced Holdsφ s Acid3x s s t s 1 π As 3 The effect axioms cid3 cid2 Acid3x s t Poss cid4cid2 f Γ A cid4cid2 f Γ Holds f s Γ A Holds f s Γ cid3 A cid5 Holds f t A cid5 Holds f t cid3 Γ A def cid6 cid2 cid3yi γ cid3 s f F cid3yi cid6 cid2 cid3y j Γ A def cid3 s f F cid3y j γ j 20 21 j s γ Here γ replaced Holdsφ s j s γ γ j ADL effect speciﬁcations action Acid3x ﬂuent φ 4 An initial state I mapped formula I0 ﬂuent φ replaced Holdsφ 0 5 A sequence actions α1 αn mapped formula cid2 cid2 t Holds Occursa s t cid3 α1 s 0 αn s n 1 cid3 22 Example 4 Continued Recall effect speciﬁcations 18 These mapped general effect axiom 20 Moveobject old new Γ Move Γ Move def f Onobject new f Aboveobject new cid2 z cid2 Holds Abovenew z s cid3 cid3 f Aboveobject z def f Onobject old cid2 z cid2 Holds Aboveobject z s cid3 cid3 f Aboveobject z 23 The mapping ADL unifying calculus easily proved correct assumption effect speci ﬁcations 17 action consistent cid7cid6 cid8 γ cid6 γ j cid14 24 j j range effect formulas ﬂuent Proposition 9 Let Σ domain axiomatization obtained consistent ADL domain goal G sequence actions α1 αn solution planning problem iff cid9 cid10 22 Σ cid14 Gn Gn G ﬂuent φ replaced Holdsφ n sets ground ﬂuents s time point Acid3t ground action In following Ss denote Proof Let S Scid13 conjunction atoms Holdsφ s φ S plus Holdsφ s ground ﬂuents φ S This possible ﬁnitely ﬂuent functions object constants Since ﬂuent action occurrences feature ADL effect speciﬁcations effect axiom 20 implies cid3 cid3 cid2 cid3 cid2 Holds Occursa s t cid13 t cid2 Holds Occursa s t cid13 From 19 follows Acid3t applicable S iff cid2 cid2 Occurs cid14 Ss Poss cid2 Holds Acid3t s Σ cid3cid10 s cid9 cid3 Acid3t s s 1 cid3 Under consistency assumption 24 effect axiom 20 implies S cid2 Scid13 iff Acid3t 128 M Thielscher Artiﬁcial Intelligence 175 2011 120141 cid9 cid2 Poss Σ Acid3t s s 1 cid3cid10 cid14 Ss Scid13s 1 Deﬁnition 8 ground ﬂuent F icid3r A iff S cid14 γ cid3x cid10 cid3t cid3y cid10 cid3r iff Ss cid14 Γ cid3x cid10 cid3t cid3y cid10 cid3r F jcid3r D iff S cid14 γ cid3x cid10 cid3t cid3y cid10 cid3r iff Ss cid14 Γ cid3x cid10 cid3t cid3y cid10 cid3r Hence F cid3t S D A iff 20 Poss Acid3t s s 1 cid14 Ss HoldsF cid3t s 1 conversely F cid3t S D A iff 20 Poss Acid3t s s 1 cid14 Ss HoldsF cid3t s 1 This shows precondition effect axioms correctly encode update states ADL according Deﬁnition 8 The claim follows straightforward induction n cid3 j 312 Event Calculus The Event Calculus uses linear time structure allows adopt directly natural numbers axiomatization ADL planning problem In simple Event Calculus 37 predicate Happensa t denotes occurrence action aka event given time point Effects actions axiomatized based predicates Initiatesa f t Terminatesa f t representing respectively initiation termination ﬂuent f time t action The Frame Problem solved steps First minimizing predicates Initiates Terminates circumscription 23 applying following foundational axioms Init P f InitN f specify positive negative initial conditions Holds f t Init P f Clipped0 f t cid2 s cid3 Happensa s Initiatesa f s s t Clippeds f t Holds f t InitN f Declipped0 f t cid2 s cid3 Happensa s Terminatesa f s s t Declippeds f t Clippeds f t def cid2 Declippeds f t def t t cid2 cid3cid2 cid13 cid13 cid3 cid2 t Happens cid2 cid3cid2 t Happens cid13 cid2 f t cid3 cid13 s t cid13 Terminates cid2 cid3 f t Initiates cid13 cid3 cid13 s t cid13 cid3 t cid3 t 25 Put words ﬂuent holds time t true initially initiated earlier action terminated deﬁnition Clipped Conversely ﬂuent hold time t false initially terminated earlier action initiated deﬁnition Declipped In following domain axiomatization resulting mapping ADL planning problem unifying calculus translated simple Event Calculus Generally translation domain axiomatization language based linear time structure require introduce special occurrence ﬂuent Occursa s identify case simple Event Calculus natural numbers predicate Happensa s Possa s s 1 HoldsOccursa s s For sake simplicity exploit fact ﬂuent present domain axiomatizations ADL planning problems In way obtain following translation Event Calculus 1 The sorts actions ﬂuents 2 The foundational axioms time structure augmented 25 3 The precondition axioms 19 rewritten cid3 cid2 Happens Acid3x s π As 4 The set effect axioms 20 translated formulas Γ Γ A A Initiates Terminates cid2 cid2 cid3 Acid3x f s cid3 Acid3x f s Predicates Initiates Terminates circumscribed locally results secondorder axiom CIRC cid11cid6 A 27 Initiates Terminates cid12 26 27 28 5 The initial formula I0 mapped formula Holds f 0 replaced Init P f Holds f 0 InitN f 6 The encoding plan 22 remains unchanged Example 4 Continued Recall subformulas 23 general effect axiom 20 Assuming Move action domain actual effect corresponding Event Calculus deﬁnition initiation termination equivalent following M Thielscher Artiﬁcial Intelligence 175 2011 120141 129 cid2 Moveobject old new Onobject new s cid2 Moveobject old new Aboveobject new s cid2 Moveobject old new Aboveobject z s cid3 cid3 cid3 Initiates Initiates Initiates cid2 cid2 Terminates Terminates Moveobject old new Onobject old s Moveobject old new Aboveobject z s cid3 cid2 Holds Aboveobject z s cid3 Abovenew z s cid3 cid2 Holds cid3 The equivalence domain constraints precondition axioms obvious The correctness translation effect axioms given following result Proposition 10 Let Σ domain axiomatization resulting ADL planning problem let α1 αn action sequence Σ cid14 Possα1 0 1 Possαn n 1 n Let ΣEC mapping Σ Event Calculus ﬂuent φ Σ cid14 Holdsφ t iff ΣEC cid14 Holdsφ t t 1 n Proof Suppose Σ cid14 Holdsφ t 20 Σ cid14 Γ αt imply ΣEC cid14 Holdsφ t ΣEC entails Holdsφ t 1 Γ αt Correspondingly foundational axioms 25 1 Initiatesαt φ t 1 2 m sInitiatesαm φ m 1 m n 1 Clippedm φ n 3 Init P φ Clipped0 φ n By 28 ﬁrst case equivalent Γ αt 25 28 equivalent Holdsφ t 1 Γ αt Suppose Σ cid14 Holdsφ t 20 Σ cid14 Γ αt imply ΣEC cid14 Holdsφ t ΣEC entails Holdsφ t 1 Γ αt Correspondingly foundational axioms 25 1 Terminatesαt φ t 1 2 m sTerminatesαm φ m 1 m n 1 Declippedm φ n 3 InitN φ Declipped0 φ n By 28 ﬁrst case equivalent Γ αt Γ αt cid3 25 28 equivalent Holdsφ t 1 Together Proposition 9 shows obtained correct translation ADL planning problems Event Calculus 32 Translating Fluent Calculus Situation Calculus As second result present translation simple Fluent Calculus unifying calculus Situation Calculus based Reiters solution Frame Problem As byproduct obtain extension suitable nondeterministic actions 321 From Fluent Calculus The Fluent Calculus variant Situation Calculus uses branching time structure cf Example 2 adds sort state explicit representation states Intuitively state identiﬁed ﬂuents hold The state situation s denoted standard function States By deﬁnition ﬂuent singleton state z1 z2 states composition denoted z1 z2 The state represented special constant The behavior function governed following foundational axioms essentially deﬁne states nonnested sets ﬂuents In following Holds f z abbreviation equational formula z amounts axiomatic characterization set membership4 cid13z f z cid13 z1 z2 z3 z1 z2 z3 Holds f Holds f z1 z2 Holds f z1 Holds f z2 P z f Holds f z P f z1 z2 z2 z1 Holds f 1 f f 1 f f Holds f z1 Holds f z2 z1 z2 29 4 Below letter z denotes variables sort state 130 M Thielscher Artiﬁcial Intelligence 175 2011 120141 The axiom P secondorder predicate variable sort ﬂuent stipulates existence state possibly inﬁnite set ﬂuents These axioms accompanied foundational axioms situations inherited Situation Calculus 30 cid2 ss S0 cid3cid2 cid2 cid13 cid13 s s cid3cid2 cid13 s s cid2 P cid2 cid13 Doa s Do s cid3 cid2 cid13 cid13 s cid2 s s s Do cid3 cid2 P s P Doa s P S0 s cid3 cid3 cid13 cid3 cid13 cid13 s s cid3 sP s 30 The axiom P secondorder predicate variable sort sit deﬁnes induction principle situations initial situation satisﬁes property P property preserved execution actions P true situations Effects actions speciﬁed Fluent Calculus help purely axiomatic characterization subtraction addition ﬂuents states z2 z1 f z2 z1 f def z2 z1 f def z2 z1 z2 f z1 Holds f z2 These macros straightforwardly generalized subtraction addition ﬁnitely ﬂuents On ba sis domains axiomatized simple Fluent Calculus follows expression Holds f s uniform state formulas sense Deﬁnition 2 stands Holds f States 31 32 33 Deﬁnition 11 A simple Fluent Calculus domain composed following elements 1 Domain constraints form δs δ state formula s 2 Precondition axioms action Acid3x form cid2 Poss Acid3x s cid3 π As π As state formula s free variables s cid3x 3 Socalled state update axioms action Acid3x form cid3 cid3cid3 cid2 cid3 cid2 Poss Acid3x s cid2 cid3y1 Φ1s State cid2 Do Acid3x s States ϑ 1 ϑ 1 cid2 cid3yn Φns State cid2 cid2 Do Acid3x s cid3cid3 States ϑ n ϑ n cid3 Φis state formula s free variables s cid3x cid3yi ϑ positive effects stand zero subtractions additions respectively ﬂuent terms variables cid3x cid3yi negative effects ϑ The basic theorem Fluent Calculus 42 says equations state update axioms provide solution Frame Problem Theorem 12 Foundational axioms 29 entail cid3 cid2 cid13 s State implies States g1 gm f 1 fn cid2 Holds f State cid6 cid3cid3 cid2 cid13 s f f vice versa cid11 cid2 Holds cid3 f States cid12 f cid12 g j cid13 j A state update axiom 33 speciﬁes action indeterminate effects n 1 conditions Φi mutually exclusive But action nondeterministic state update axiom single update equation accompanied underspeciﬁed condition M Thielscher Artiﬁcial Intelligence 175 2011 120141 Example 5 Consider following axiom speciﬁes alternative forms payments cid2 PossPay s y cid2 Holds HasPayment y s cid3 State cid2 cid3 DoPay s cid3 States HasPayment y 131 34 Suppose example HoldsHasPayment y S0 y Cash y Cheque according Theorem 12 state update axiom implies cid2 Holds cid3 HasPaymentCash DoPay S0 cid2 Holds cid3 HasPaymentCheque DoPay S0 disjuncts entailed Based Theorem 12 translation basic Fluent Calculus theories unifying calculus straightforward Domain constraints taken A precondition axiom 32 rewritten cid2 Poss Acid3x s t cid3 cid2 π As t Do Acid3x s cid3 A state update axiom 33 mapped effect axiom cid14 cid3y1 Φ1s f Acid3x s t cid15cid6 Poss cid3 cid2 f f 1i Holds f s cid13 cid16 f cid12 g1 j Holds f t 35 cid16cid17 f f g1 j Holds f s f cid12 f 1i Holds f t cid14 cid3yn Φns f f fni Holds f s cid13 cid16 f cid12 gnj Holds f t cid16cid17 j cid13 j cid13 cid15cid6 cid15cid6 cid15cid6 j j f f gnj Holds f s f cid12 fni Holds f t 36 k ϑ Here fki gkj ﬂuent terms occur ϑ k respectively The equivalence mapping obvious domain constraints precondition axioms As following proposition shows correctness effect axioms follows updates consistent cid13 cid13 fki cid12 gkj 37 j k 1 n Proposition 13 Suppose Poss Acid3x s Poss Acid3x s t t Do Acid3x s assume 37 holds state update axiom 33 foundational axioms Fluent Calculus imply 33 36 equivalent Proof Under consistency assumption implication cid11 cid12 f gkj Holds f s f cid12 fki Holds f t cid6 j cid13 logically equivalent cid11cid13 Holds f t cid12 f cid12 gkj Holds f s cid6 f fki j Hence 36 equivalently written cid2 Poss Acid3x s t cid3 cid6 cid7 cid3yk Φks f k cid11cid6 f fki Holds f s cid13 j cid12cid8 f cid12 gkj Holds f t 38 The equivalence effect axiom state update axiom 33 follows immediately Theorem 12 cid3 Example 5 Continued Recall state update axiom 34 Pay action The corresponding effect axiom PossPay s t cid2 y cid2 Holds HasPayment y s cid3 cid5 cid4 f Holds f s f cid12 HasPayment y Holds f t cid4 Holds f s f HasPayment y Holds f t f cid5cid3 132 M Thielscher Artiﬁcial Intelligence 175 2011 120141 equivalently written PossPay s t cid2 y cid2 Holds HasPayment y s cid3 cid4 Holds f s f cid12 HasPayment y Holds f t f cid5cid3 39 322 Situation Calculus In following domain axiomatization resulting Fluent Calculus domain mapped Situation Calculus socalled successor state axioms 31 ﬂuent F cid3u solution Frame Problem The general form axioms reiﬁed version ﬂuents represented terms cid4 cid2 Holds cid3 F cid3u Doa s cid2 s Holds F cid3 cid5 s F Γ F Γ Γ Possa s 40 F conditions s cid3u ﬂuent F cid3u respectively positive negative effect Here Γ Reiters basic action theories allow axiomatize nondeterministic actions In 20 shown generic predicate Casek s k N subformulas Γ model nondeterministic effects distinguishing different cases updates For correct mapping effect axioms form 38 concept needs generalized view actions characterized underspeciﬁed condition like action Pay cf axiom 34 To end introduce action Acid3x effect axiom 36 general predicates F Γ F cid3u s F Case A k cid3x cid3yk s k 1 n The behavior predicates governed following axioms5 cid2 Poss Acid3x s cid3 cid18 cid2 cid3yk Case A cid3 k cid3x cid3yk s Φks cid3cid2 cid2 cid3yk cid3y cid13 k k Case A k cid3x cid3yk s Case A k cid3 cid2 cid3x cid3y cid13 k s cid3yk cid3y cid3 cid13 k 41 Put words situation s action possible exists unique applicable case k unique instance cid3yk We position map axiomatization characterizing Fluent Calculus domain Situation Calculus provided original Fluent Calculus domain satisﬁes consistency assumption 37 Domain constraints taken precondition axioms 35 rewritten cid2 Poss Acid3x s cid3 π As 42 Given equivalent form 38 effect axioms mapped following schema possibly nondeterministic successor state axioms Possa s cid11 cid2 Holds cid3 f Doa s cid6 cid7 cid3x Acid3x cid6 cid7 cid3yk Case A A cid7 k cid3x Acid3x Holds f s cid8cid8 cid6 f fki Case A k cid3x cid3yk s k cid3x cid3yk s cid7 cid11cid6 cid3yk k cid6 j f gkj cid8cid12cid8cid12 43 The ﬂuent variable f schema instantiated ﬂuents domain order obtain actual successor state axioms Example 5 Continued Recall general effect axiom 34 Pay action Assuming action domain obtain following successor state axiom schema Possa s cid4 cid2 Holds cid3 f Doa s cid4 yCase Pay Holds f s Pay 1 y s f HasPayment y cid5cid5 44 case axiom6 cid2 PossPay s y Pay Case 1 Instantiating 44 ﬂuent f cid10 HasPayment y obtain cid3 y s HasPayment y s Possa s cid4 cid2 Holds cid3 HasPayment y Doa s cid2 Pay Holds HasPayment y s cid3 Pay Case 1 cid5 y s 5 Below notation 6 Below notation yF means existence unique instance y subformula F true k Fk means exactly subformulas Fk true cid19 M Thielscher Artiﬁcial Intelligence 175 2011 120141 133 It easy prove mapping effect axioms successor state axioms correct Proposition 14 Suppose Poss Acid3x s Poss Acid3x s t t Do Acid3x s 36 43 instantiated cid10 Acid3x equivalent axioms 41 Proof Instantiating 43 cid10 Acid3x obtain cid2 Holds cid2 f Do Acid3x s cid6 cid3cid3 k cid7 cid3yk cid8 f fki cid6 Case A k cid3x cid3yk s cid11cid6 Holds f s cid3ykCase A k cid3x cid3yk s k cid12 f gkj cid6 j Given 41 rewritten cid6 cid7 cid3yk cid11 Φks f cid2 Holds cid2 f Do Acid3x s cid6 cid3cid3 f fki Holds f s cid11cid6 cid12cid12cid8 f gkj k j given Poss Acid3x s t t Do Acid3x s equivalent 38 cid3 We obtained help unifying calculus embedding basic Fluent Calculus Situation Calculus variant successor state axioms suitable nondeterministic actions somewhat general 20 The translation generalizes earlier result restricted deterministic actions 35 33 Translations different time structures The example translations presented common target language uses time structure input language Since unifying action calculus conﬁned particular time structure serve termediary language translating approaches different time structures Domain axiomatizations branching time situations Situation Fluent Calculus mapped linear time structure introducing special ﬂuent denote actual occurrence action like Occurs adding precondition possibility action identiﬁed actual occurrence Conversely domain axiomatizations linear time time points t mapped branching time structure time points s adding special ﬂuent Times t denote t actual time branching time point s Precondition effect axioms target language inherit relation beginning end action speciﬁed domain axioms linear time structure 4 Modularity domain axiomatizations In second paper unifying action calculus allows analyze solve problems general different formalisms The motivation unifying approach enables proofs results conﬁned speciﬁc approach Once established instantiating result particular action calculus likely easier solving problem individually scratch individual formalism We exemplify providing new calculusindependent solution problem arises different approaches question domain axiomatization modular This problem recently gained 15 particular relevance practical use domain axiomatizations highlevel action programming languages like GOLOG 32 FLUX 42 intimately related McCarthys concept elaboration tolerance 24 The problem modularity arises fact axiomatizations action domains combine different categories formulas serve different purposes Domain constraints static properties hold states precondition axioms deﬁne conditions actions applicable effect axioms deﬁne consequences actions As uniform logical theory domain axiomatization easily rise dependencies different kinds axioms effect formulas entail implicit preconditions domain constraints entail implicit effects 13 Implementations like GOLOG FLUX hand rely assumption dependencies like exist The reason sake eﬃciency implementations use domain axiomatizations modular fashion agents refer domain constraints initialize world model check applicability action merely precondition axioms update world model entirely basis effect axioms Agent programs eﬃcient entire domain theory taken account speciﬁc reasoning task However modular use domain axiomatization incorrect dependency axioms different kind As consequence modularity domain axiomatization veriﬁed prior knowledge base agent This excellent example value McCarthys elaboration tolerance principle 24 134 M Thielscher Artiﬁcial Intelligence 175 2011 120141 dependencies different types axioms elaboration tolerant formalism addition new information disrupt entire existing axiomatization modular 14 In following use unifying action calculus formal basis general calculusindependent analysis problem modularity domain constraints precondition axioms effect formulas domain axiomatizations We present conditions modularity domain axiomatization checked As main result prove class sequential ramiﬁcationfree domain axiomatizations deﬁned end Section 2 guaranteed free dependencies satisfy conditions We result straightforwardly instantiated concrete formalisms In way general conditions independence easily checked applying automated theorem proving given domain theory speciﬁc action calculus 41 Examples implicit dependency In order illustrate universality problem modularity ﬁrst present simple example axiomatizations different calculi entail implicit domain constraints preconditions effects respectively 411 Implicit domain constraints The ﬁrst example axiomatized Situation Calculus shows effect axiomssuccessor state axioms case entail additional implicit domain constraints Example 6 For scheduling domain consider ﬂuents Jobm j Freem respectively representing machine m allocated job j machine m free Two actions Schedule j m Unschedule j allocating job j machine m deallocating job j Consider single domain constraint7 cid2 j Holds cid2 Holds Jobm j t Freem t 45 cid3 cid3 Let action precondition axioms cid2 cid2 Poss Poss cid3 Schedule j m s cid3 Unschedule j s cid2 Holds mHolds cid2 cid3 Freem s Jobm j s cid3 The successor state axioms ﬂuents follows Possa s cid4 cid2 Holds cid3 Jobm j Doa s Schedule j m cid3 cid2 Holds Jobm j s cid5 cid12 Unschedule j Possa s cid4 cid2 Holds cid3 Freem Doa s cid2 j cid2 Jobm j s Holds cid2 Holds Freem s cid3 Unschedule j cid5 ja Schedule j m cid3 cid3 46 47 Put words Jobm j holds successor situation job j allocated machine m Jobm j true j deallocated Similarly Freem holds successor situation job allocated m got unscheduled machine m free got job j We claim axiomatization entails following implicit domain constraint follow 45 cid2 Holds Jobm j s cid3 cid2 cid2 Holds Jobm s cid3 cid3 j cid12 To suppose HoldsJobm j s 46 implies PossUnschedule j s By 47 cid2 Holds Freem Do cid2 Unschedule j s cid3cid3 Hence 45 follows cid2 iHolds Jobm Do cid2 Unschedule j s cid3cid3 Also 47 uniquenessofnames cid2 Holds Jobm Do cid2 Unschedule j s cid3cid3 cid2 Holds Jobm s cid3 j cid12 This 49 imply iHoldsJobm s j cid12 48 49 7 It stressed converse following implication left intentionally reasons machine available allocated job M Thielscher Artiﬁcial Intelligence 175 2011 120141 135 412 Implicit preconditions The example axiomatized simple Event Calculus introduced Section 312 shows effect axioms rise implicit preconditions actions Example 7 To model movement robot consider ﬂuent Atx representing robot position x The action Gox y denotes movement robot x y Let domain axiomatization consist single domain constraint cid2 Holds Atl1 t cid3 cid2 Holds Atl2 t cid3 l1 l2 50 Put words robot unique location time Let precondition action axiomatized cid2 Happens Gox y s cid3 cid2 Holds Atx s cid3 The effects domain determined following circumscribed deﬁnition initiation termination cid2 cid3 Initiatesa f s x y f At y Gox y cid2 Terminatesa f s x y cid3 f Atx Gox y 51 52 We claim assumption Go action performed isolation axiomatization entails following implicit precondition follow 51 cid2 Happens Gox y s cid3 x cid12 y 53 To 52 implies InitiatesGox y At y s TerminatesGox y Atx s Suppose Happensa s Gox y foundational axioms 25 entail HoldsAt y t negation HoldsAtx t t s turn implies x cid12 y 413 Implicit effects The example given basic Fluent Calculus shows domain constraints rise additional implicit effects Example 8 To model operation elevators consider ﬂuent AtFloore n e E1 E2 n 0 1 9 representing current ﬂoor elevator The action Calln means activate button ﬂoor n Let domain axiomatization consist domain constraints cid2 kHolds cid2 Holds AtFloore k t cid3 AtFloorE1 0 t cid3 54 elevators unique ﬂoor situation ﬁrst elevator serve basement We assume possible activate button ﬂoor long elevator ﬂoor cid2 Calln s cid3 Poss 0 cid2 n cid2 9 eHolds cid2 AtFloore n s cid3 cid3 cid2 Poss cid2 Calln s The following state update axiom speciﬁes nondeterministic effect cid2 cid2 m Holds cid2 cid2 State Do cid2 cid2 m cid2 State AtFloorE1 m s cid3cid3 cid2 Holds cid2 Do AtFloorE2 m s Calln s Calln s cid3cid3 cid3 cid3 States AtFloorE1 m AtFloorE1 n States AtFloorE2 m AtFloorE2 n cid3cid3 cid3cid3 55 56 Put words calling elevator ﬂoor n indeterminate effect elevators arrives We claim domain axiomatization entails following implicit effect follow 56 cid2 Call0 s cid3 cid2 Holds Poss AtFloorE2 0 Do cid2 Call0 s cid3cid3 57 To note StateDoCall0 s States AtFloorE1 m AtFloorE1 0 implies cid2 Holds AtFloorE1 0 Do cid2 Call0 s cid3cid3 according Theorem 12 By 54 ﬁrst disjunct state update axiom 56 false substituted n cid10 0 This entails 57 according 56 Theorem 12 136 M Thielscher Artiﬁcial Intelligence 175 2011 120141 42 A general method verifying modularity The examples previous section problem domain axiomatizations modular arises different action formalisms With help unifying action calculus general formal deﬁnition implicit domain constraints preconditions effects To end introduce following notation given action Acid3x In domain axiomatization precondition axioms Π Π A denote Acid3x π As righthand usual Likewise Υ effect axioms Υ A denote action Acid3x For notational convenience refrain stating foundational axioms domain axiomatization These tacitly assumed satisﬁable entailment cid14 consistency sets formulas meant modulo Deﬁnition 15 Consider domain axiomatization Σ Δ Π Υ consisting domain constraints Δ precondition axioms Π effect axioms Υ 1 The domain axiomatization free implicit domain constraints state formula δt Σ cid14 δt implies Δ cid14 δt 2 The domain axiomatization free implicit preconditions action Acid3x state formula π s Σ cid14 Poss cid2 Acid3x s t cid3 π s implies Δ Π A cid14 Poss Acid3x s t π s 3 The domain axiomatization free implicit effects action Acid3x state formula εt Σ cid14 Poss cid2 Acid3x s t cid3 εt implies ΔS Π AS Υ AS T cid14 Poss Acid3x S T εT constants S T sort time Put words implicit domain constraint universally quantiﬁed state formula entailed entire domain axiomatization derived given domain constraints Δ An implicit precondition entailed entire domain axiomatization follow precondition axioms state satisﬁes domain constraints The rationale deﬁnition following given state satisﬁes domain constraints Δ precondition axiom action A suﬃce entail executability conditions action Finally implicit effect follows entire domain axiomatization effect axiom state satisﬁes preconditions action domain constraints The rationale deﬁnition given state satisﬁes domain constraints Δ preconditions action A instantiated effect axiom action suﬃce infer concluded resulting state The use time constants item 3 motivated desire verify modularity local fashion instantiating domain constraints precondition axioms single time point effect axioms time point successor We use unifying calculus provide conditions shown guarantee domain axiomatization free implicit dependencies Informally speaking ﬁrst condition C1 essentially says state time S consistent domain constraints action Acid3x applicable condition ΦiS case effect axiom A holds Condition C2 implies applicable effect speciﬁcations selfcontradictory C3 requires possible update leads state satisﬁes domain constraints Here following consider ramiﬁcationfree domain axiomatizations according Deﬁnition 6 subformulas Γ effect axioms cf 2 state formulas solely s Γ Deﬁnition 16 Let S T constants sort time A domain axiomatization Δ Π Υ called modular following holds action Acid3x effect axiom 1 exist arbitrary time constants S T cid14 ΔS π AS kcid6 i1 cid3yiΦiS 1 k cid14 ΔS π AS ΦiS Γ cid14 ΔS π AS ΥiS T ΔT S Γ S C1 C2 C3 M Thielscher Artiﬁcial Intelligence 175 2011 120141 137 These conditions principle checked given domain axiomatization automated theorem proving8 When advantage conditions veriﬁed separately action domain signature We ready prove main result says modular domain axiomatizations free implicit domain constraints preconditions effects We begin proving state formula consistent domain constraints consistent entire domain axiomatization Lemma 17 Consider sequential ramiﬁcationfree domain axiomatization Δ Π Υ satisﬁes conditions C1C3 Let S arbitrary constant sort time ψS state formula S ΔS cid9 cid10 ψS consistent implies Δ Π Υ ψS consistent 58 Proof Let Icid13 element I We construct model J follows arbitrary model ΔS ψS From straightforwardly obtain model I S I 1 For ﬂuent ϕ Holdsϕ SJ iff Holdsϕ SI 59 2 Given domain axiomatization sequential iteratively construct following assignment σ domain I sort time starting S Let πα righthand precondition axiom A action α Acid3xI I time point τ I σ Possα σ τ J iff J cid14 παs cid10 σ t cid10 τ 60 b Let 1 αs effect axiom If Possα σ τ J choose 1 k cid3yi Φiσ J ﬂuent ϕ let Holdsϕ τ J Holdsϕ τ J J cid14 Γ J cid14 Γ σ f cid10 ϕ σ f cid10 ϕ 61 The existence cid3yi follows assumption C2 guaranteed assumption C1 consistency assignment 61 Then J model ψS 59 Π 60 Υ 61 Δ 58 C3 cid3 Next state formula ψT consistent entire domain axiomatization consistent instance update Υ AS T state time S satisﬁes domain constraints preconditions action A Lemma 18 Consider sequential ramiﬁcationfree domain axiomatization Σ Δ Π Υ satisﬁes conditions C1C3 Let Acid3x action S T arbitrary constants sort time ψT state formula T cid9 cid9 cid10 ΔS π ASt cid10 T Υ AS T cid10 ψT consistent implies cid9 cid2 Poss Σ Acid3x S T cid3cid10 cid9 cid10 ψT consistent Proof Let I model ΔSπ ASt cid10 T Υ AS T ψT We construct model J proof Lemma 17 speciﬁc assignment state time T Holdsϕ T J iff Holdsϕ T I 62 ϕ domain I sort ﬂuent This consistent Υ I model Υ AS T As J model Σ model ψT 62 Poss Acid3x S T I model π ASt cid10 T cid3 With help lemmas prove main result 8 It worth noting condition C2 trivially true successor state axioms Situation Calculus consistent state update axioms Fluent Calculus corresponding formulas Γ Γ general effect axioms negations cf axiom 38 138 M Thielscher Artiﬁcial Intelligence 175 2011 120141 Theorem 19 Any sequential ramiﬁcationfree domain axiomatization modular free implicit domain constraints preconditions effects Proof Let Σ modular domain axiomatization domain constraints Δ precondition axioms Π effect axioms Υ Consider arbitrary state formula δt If Σ cid14 δt Σ δt inconsistent By Lemma 17 Δ δt inconsistent Δ cid14 δt This shows Σ free implicit domain constraints Consider state formula π s If Σ cid14 Poss Acid3x s t π s Σ cid14 π As π s π A righthand precondition axiom Acid3x Hence Σ π As π s inconsistent By Lemma 17 Δ π As π s inconsis tent Δ cid14 π As π s Δ Π cid14 Poss Acid3x s t π s This shows Σ free implicit preconditions Finally consider action Acid3x state formula εt If Σ cid14 Poss Acid3x s t εt Σ π ASt cid10 T εT inconsistent S T sort time By Lemma 18 ΔS π ASt cid10 T Υ AS T εT inconsistent ΔS Π AS Υ AS T cid14 Poss Acid3x S T εT This shows Σ free implicit effects cid3 We conclude analysis illustrating general method easily instantiated applied order verify independence speciﬁc approaches Situation Event Fluent Calculus 421 Modularity situation calculus In Section 322 seen speciﬁc class domain axiomatizations unifying action calculus mapped successor state axioms The converse translation action theories Situation Calculus consisting domain constraints precondition axioms basic successor state axioms sense 31 straightforward domain constraints taken precondition axioms form 42 rewritten form 35 successor state axioms 40 ﬂuents F mapped effect axiom schema Possa s t f cid11cid6 cid2 f F cid3u cid2 Γ F s Holds f s Γ cid3 s cid3 Holds f t F cid12 F cid11cid6 cid2 f f F cid3u cid2 Γ F s Holds f s Γ cid12 cid3 Holds f t cid3 s F F The action variable schema instantiated actions domain order obtain actual effect axioms unifying calculus By deﬁnition axiomatizations ramiﬁcationfree foundational axioms Situation Calculus 30 imply sequentiality according Deﬁnition 5 Based translation veriﬁcation modularity conditions Situation Calculus axiomatizations straightforward Example 6 Continued We seen given axiomatization entails implicit domain constraint Indeed dependence condition C3 entailed To arbitrary time constants S T consider action Unschedule j Successor state axioms 47 determine update formula equivalent cid2 Holds cid3 Υ1S T cid12 j cid3 Jobm T cid3cid5 cid3 cid3 cid5 cid4 Jobm S cid2 Holds Jobm j S cid2 Holds Freem S cid2 Holds cid4 cid2 Holds Freem T Along cid2 ΔS Holds πUnscheduleS mHolds Freen S cid3 cid2 kHolds cid2 cid3 Jobn k S cid3 Jobm j S entail cid2 ΔT Holds Freen T cid3 kHolds cid2 Jobn k T cid3 To consider interpretation satisﬁes cid3 cid3 cid2 Holds JobM J S cid2 Holds JobM J T cid2 Holds cid3 JobM I S cid2 Holds JobM I T cid2 Holds cid3 FreeM S cid2 Holds FreeM T cid3 cid3 It easy verify model conjunction ΔS πUnscheduleS Υ1S T cid10 I j cid10 J ΔT 9 9 The reader verify C3 entailed implicit domain constraint 48 added M Thielscher Artiﬁcial Intelligence 175 2011 120141 139 422 Modularity Event Calculus In Section 312 seen speciﬁc class domain axiomatizations unifying action calculus mapped simple Event Calculus This translation easily reversed The required generalization additionally axiomatize special action Inert Example 3 capture arbitrary sequential narratives based arbitrary linear time structure like positive real numbers actions immediately follow With regard verifying modularity easy axioms Inert cf 12 13 satisfy conditions C1C3 Example 7 Continued We seen given axiomatization entails implicit precondition Indeed independence condition C2 entailed To arbitrary time constant S consider action Gox y Initiation termination axioms 52 determine effect formulas unifying action calculus S f At y Holds f S f cid12 Atx S f Atx Holds f S f cid12 At y Γ 1 Γ 1 1 Then Γ cid2 Holds Atl2 S cid3 l1 l2 S conjunction cid3 cid2 ΔS Holds Φ1S cid20 cid2 πGoS Holds Atl1 S Atx S cid3 entail Γ 1 S This easily seen interpretation satisﬁes x y10 423 Modularity Fluent Calculus In Section 321 shown basic Fluent Calculus theories mapped domain axiomatizations unifying calculus This mapping directly applied verify modularity theories help general method Example 8 Continued We seen given axiomatization entails implicit effect Indeed independence condi tion C3 entailed To arbitrary time constants S T consider action Calln State update axiom 56 determines effect formula unifying action calculus cid2 Υ1S T m cid2 cid2 Holds AtFloorE1 m S cid3 cid2 cid3 f AtFloorE1 n Holds f S f cid12 AtE1 m Holds f T f AtE1 m Holds f S f cid12 AtFloorE1 n Holds f T cid2 Υ2S T m cid2 AtFloorE2 m S cid3 f AtFloorE2 n Holds f S f cid12 AtE2 m Holds f T f AtE2 m Holds f S f cid12 AtFloorE2 m Holds f T cid2 Holds cid3 cid2 cid3cid3 cid3cid3 For instance n cid10 0 Υ1S T cid3 cid2 ΔS kHolds AtFloore k S cid2 πCallS 0 cid2 n cid2 9 eHolds cid2 Holds AtFloorE1 0 S cid3 cid3 AtFloore n s implies HoldsAtE1 0 T This contradicts ΔT 11 5 Discussion We proposed unifying action calculus abstracts concrete time structure speciﬁc solution Frame Problem encompasses variety existing speciﬁc languages axiomatizing action domains This unifying approach intermediary language facilitate translations speciﬁc calculi We exempliﬁed obtaining new results characterization ADL planning problems Event Calculus embedding basic Fluent Calculus variant Situation Calculus nondeterministic successor state axioms Generally speaking use intermediary axiomatization major advantages First makes explicit 10 The reader verify C2 entailed implicit precondition 53 added 11 The reader verify C3 entailed implicit effect 57 incorporated state update axiom 140 M Thielscher Artiﬁcial Intelligence 175 2011 120141 speciﬁc solution Frame Problem input language determines effects noneffects action This makes easier ﬁnd appropriate translation different solution Frame Problem As example domain axiomatization obtained Section 321 basic Fluent Calculus theory gives clear indication effect axioms translated successor state axioms illustrates explicitly extension Reiters basic action theories needed order capture ways nondeterministic actions axiomatized state update axioms Fluent Calculus Second prior translation input language intermediary language allow generic uniform way embedding input formalism different target languages The domain axiomatization obtained Section 311 characterization ADL planning problems example readily deﬁne mappings approaches Event Calculus Among variety potential applications intercalculi translations consider following ones important 1 Translations prove welldeﬁned class speciﬁc calculus formally embedded calculus 2 The use implementation calculus solve problems given different input language requires prior translation examples problem speciﬁcation languages Planning Competitions 6 General Game Description Language General Game Playing Contest 8 3 In order use different platform run knowledgebased agent programs written languages like GOLOG FLUX background knowledge agent needs transformed appropriate encoding In comparison related work like systematic assessment methods 33 Action Description Language A 7 extensions thereof unifying calculus analyze relative expressiveness different axiom atization techniques comparison The main difference deﬁne speciﬁc semantics action domains providing purely logical axiomatization This implies assessments restricted problem classes deﬁned special semantics For example Action Description Language A translated successor state axioms 16 state update axioms 39 These results combined translation Fluent Calculus Situation Calculus vice versa translation conﬁned domains ex pressed A allow embedding basic Fluent Calculus theories Situation Calculus In second paper unifying calculus develop general method verifying inde pendence domain constraints preconditions effects axiomatizations action domains We shown general method easily instantiated speciﬁc calculi Existing results problem implicit dependen cies restricted speciﬁc calculi general classes domains In 30 shown precondition axioms deterministic successor state axioms Situation Calculus independent provided main constraints In 15 algorithms presented inferring implicit domain constraints preconditions domain axiomatizations given propositional modal logic A conceptually different approach pursued 27 shown particular class domain constraints compiled successor state axioms deterministic Incidentally condition C3 Deﬁnition 16 known context way ensure satisﬁed given initial situation result compilation allows ignore domain constraints In context condition serves different purpose instead showing speciﬁc initial situations given domain constraints redundant shows domain constraints entailed independent initial situ ation With regard Event Calculus stressed result restricted sequential domains However unifying calculus readily express concurrent actions simply taking elements sort action collections simultaneous overlapping actions It remains issue future work deﬁne concrete sound complete mapping domains concurrent actions given Event Calculus unifying calculus single actions represent collections actual actions allow apply modularity conditions For future work different line unifying action calculus readily comparing assessing action formalisms considered paper generalize speciﬁc translations developed general classes domain axiomatizations Most notably approach abstract concrete solutions Frame Problem facilitate formal comparisons different existing solutions Ramiﬁcation Problem going comparisons based speciﬁc example scenarios With regard result second paper worthwhile future develop general sys tem automatic veriﬁcation modularity By extracting implicit domain constraints preconditions effects failed attempts prove independence conditions assist knowledge engineers design good axiomatizations A different line future work use unifying calculus method abstraction analyzing problems general speciﬁc calculi Acknowledgements This paper ground stand John McCarthys seminal inspiring work artiﬁcial intelligence knowledge representation commonsense reasoning I deeply grateful Johns continuing work years M Thielscher Artiﬁcial Intelligence 175 2011 120141 141 I want thank anonymous referees helpful comments suggestions earlier version paper References 1 AB Baker A simple solution Yale Shooting problem R Brachman H Levesque R Reiter Eds Proceedings International Conference Principles Knowledge Representation Reasoning KR Morgan Kaufmann Toronto Canada 1989 pp 1120 2 AB Baker Nonmonotonic reasoning framework situation calculus Artiﬁcial Intelligence 49 1991 523 3 J Claßen P Eyerich G Lakemeyer B Nebel Towards integration golog planning Proceedings International Joint Conference Artiﬁcial Intelligence IJCAI AAAI Press Hyderabad India 2007 4 P Doherty J Gustafsson L Karlsson J Kvarnström Temporal action logics TAL Language speciﬁcation tutorial Electronic Transactions Artiﬁ cial Intelligence 2 34 1998 273306 5 RE Fikes NJ Nilsson STRIPS A new approach application theorem proving problem solving Artiﬁcial Intelligence 2 1971 189208 6 M Fox D Long PDDL21 An extension PDDL expressing temporal planning domains Journal Artiﬁcial Intelligence Research 20 2003 61124 7 M Gelfond V Lifschitz Representing action change logic programs Journal Logic Programming 17 1993 301321 8 M Genesereth N Love B Pell General game playing AI Magazine 26 2 2006 7384 9 ML Ginsberg DE Smith Reasoning action I A possible worlds approach Artiﬁcial Intelligence 35 1988 165195 10 E Giunchiglia J Lee V Lifschitz N McCain H Turner Nonmonotonic causal theories Artiﬁcial Intelligence 153 12 2004 49104 11 J Gustafsson P Doherty Embracing occlusion specifying indirect effects actions LC Aiello J Doyle S Shapiro Eds Proceedings International Conference Principles Knowledge Representation Reasoning KR Morgan Kaufmann Cambridge MA 1996 pp 8798 12 S Hanks D McDermott Nonmonotonic logic temporal projection Artiﬁcial Intelligence 33 3 1987 379412 13 A Herzig I Varzinczak Domain descriptions modular RL Mántras L Saitta Eds Proceedings European Conference Artiﬁcial Intelligence ECAI IOS Press 2004 pp 348352 14 A Herzig I Varzinczak Cohesion coupling metatheory actions L Kaelbling A Saﬃotti Eds Proceedings International Joint Conference Artiﬁcial Intelligence IJCAI Edinburgh UK 2005 pp 442447 15 A Herzig I Varzinczak Metatheory actions Beyond consistency Artiﬁcial Intelligence 171 1617 2007 951984 16 GN Kartha Soundness completeness theorems formalizations actions R Bajcsy Ed Proceedings International Joint Conference Artiﬁcial Intelligence IJCAI Morgan Kaufmann Chambéry France 1993 pp 724729 17 R Kowalski F Sadri The situation calculus event calculus compared M Bruynooghe Ed Proceedings International Logic Programming Symposium ILPS MIT Press Ithaca NY 1994 pp 539553 18 R Kowalski M Sergot A logic based calculus events New Generation Computing 4 1986 6795 19 F Lin Embracing causality specifying indirect effects actions CS Mellish Ed Proceedings International Joint Conference Artiﬁcial Intelligence IJCAI Morgan Kaufmann Montreal Canada 1995 pp 19851991 20 F Lin Embracing causality specifying indeterminate effects actions B Clancey D Weld Eds Proceedings AAAI National Conference Artiﬁcial Intelligence MIT Press Portland OR 1996 pp 670676 21 N McCain H Turner A causal theory ramiﬁcations qualiﬁcations CS Mellish Ed Proceedings International Joint Conference Artiﬁcial Intelligence IJCAI Morgan Kaufmann Montreal Canada 1995 pp 19781984 22 J McCarthy Situations Actions Causal Laws Stanford Artiﬁcial Intelligence Project Memo 2 Stanford University CA 1963 23 J McCarthy Circumscriptiona form nonmonotonic reasoning Artiﬁcial Intelligence 13 1980 2739 24 J McCarthy Mathematical logic artiﬁcial intelligence Daedalus 117 1 1988 297311 25 J McCarthy PJ Hayes Some philosophical problems standpoint artiﬁcial intelligence Machine Intelligence 4 1969 463502 26 D McDermott The 1998 AI planning systems competition AI Magazine 21 2 2000 3555 27 S McIlraith An axiomatic solution ramiﬁcation problem Artiﬁcial Intelligence 116 12 2000 87121 28 E Mueller Event calculus temporal action logics compared Artiﬁcial Intelligence 170 11 2006 10171029 29 E Pednault ADL Exploring middle ground STRIPS situation calculus R Brachman H Levesque R Reiter Eds Proceedings International Conference Principles Knowledge Representation Reasoning KR Morgan Kaufmann Toronto 1989 pp 324332 30 F Pirri R Reiter Some contributions metatheory situation calculus Journal ACM 46 3 1999 261325 31 R Reiter The frame problem situation calculus A simple solution completeness result goal regression V Lifschitz Ed Artiﬁcial Intelligence Mathematical Theory Computation Academic Press 1991 pp 359380 32 R Reiter On knowledgebased programming sensing situation calculus ACM Transactions Computational Logic 2 4 2001 433457 33 E Sandewall Features Fluents The Representation Knowledge Dynamical Systems Oxford University Press 1994 34 E Sandewall The range applicability nonmonotonic logics strict inertia Journal Logic Computation 4 5 1994 581615 35 S Schiffel M Thielscher Reconciling situation calculus ﬂuent calculus Proceedings AAAI National Conference Artiﬁcial Intelligence AAAI Press Boston MA 2006 pp 287292 36 M Shanahan A circumscriptive calculus events Artiﬁcial Intelligence 77 1995 249284 37 M Shanahan Solving Frame Problem A Mathematical Investigation Common Sense Law Inertia MIT Press 1997 38 M Shanahan The ramiﬁcation problem event calculus T Dean Ed Proceedings International Joint Conference Artiﬁcial Intelli gence IJCAI Morgan Kaufmann Stockholm Sweden 1999 pp 140146 39 M Thielscher Representing actions equational logic programming PV Hentenryck Ed Proceedings International Conference Logic Programming ICLP MIT Press Santa Margherita Ligure Italy 1994 pp 207224 40 M Thielscher Ramiﬁcation causality Artiﬁcial Intelligence 89 12 1997 317364 41 M Thielscher From situation calculus ﬂuent calculus State update axioms solution inferential frame problem Artiﬁcial Intelli gence 111 12 1999 277299 42 M Thielscher FLUX A logic programming method reasoning agents Theory Practice Logic Programming 5 45 2005 533565