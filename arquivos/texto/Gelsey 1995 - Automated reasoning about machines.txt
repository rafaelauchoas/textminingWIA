Artificial Intelligence 74 1995 153 Artificial Intelligence Automated reasoning machines Andrew Gelsey Computer Science Department Hill Center Mathematical Sciences Rutgers University New Brunswick NJ 08903 USA Received June 1992 revised July 1993 Abstract simulation Numerical predicting machine behavior basic capability tasks design fault diagnosis However simulators requires considerable human effort create behavioral models analyze understand simulation results I algorithms automate kinematic dynamical analysis needed create behavioral models automate intelligent control computational simulations needed understand machines behavior short long time scales The input description machines geometry material properties output behavioral model machine concise qualitativequantitative prediction machines longterm behavior My algorithms implemented working program predict machines behavior short long time periods At present work limited mechanical devices particularly clockwork mechanisms 1 Introduction Predicting machines behavior soning machines machines predicting lation behavioral models redesign existing machines Numerical behavior machines tasks requiring basic capability rea diagnosis malfunctioning machines design new systems However simu human effort create physical requires considerable based analyze understand simulation simulation predict machine behavior This research supported National Science Foundation grants IRI8610241 IRI8812790 Defense Advanced Research Projects Agency National Aeronautics Space Administration NASA grant NAG2645 Email gelseycsrutgersedu 00043702950950 1995 Elsevier Science BV All rights reserved SSDIOOO437029400003J A CelseyArrficm1 lnleliigence 74 1995 l53 b Balance collides lever ygf c Escape wheel pushes lever I balance d Halfway cycle Fig I Clock watch escapement mechanism escape wheel present model shown figures Note hairspring attached balance mainspring attached results simulation Automating research spatial reasoning I process requires basic artificial intelligence reasoning physical systems The research l automated creation behavioral models machines directly article addresses main problems models raw physical structure l intelligent control computational experiments needed reveal machines longterm behavior algorithms Together diction machines behavior short long time periods At present work limited problems allow automated pre mechanical devices particularly clockwork mechanisms solving I present input All algorithms article implemented working program The description physical structure machine consists programs primarily precise numerical specification machines geometry From input program creates behavioral model machine uses numerically machines precise behavior started number intelligently simulate chosen description machines expected final output concise qualitativequantitative initial conditions The programs longterm behavior Fig 1 keeps escape wheel I present example gives overview entire process The escape average speed clock watch constant advance pushed clockwise strong spring motion attached spring In Fig 1 b balance hit lever pushes balance spite damping Finally ment mechanism allowing escape wheel driven counterclockwise Impact lever balance Fig 1 c This pushing loses friction act harmonic oscillator tooth oscillation balance blocked lever balance free escape wheel energy restores In Fig 1 motionless lever far force pushes A GebeyArtljkial Intelligence 74 1995 l53 3 Fig 1 d escape wheel lever locked balance brought temporarily halt spring In article behavioral model machine considered consist parts l identification set stare variables particular state machine specified assigning specific numerical values state variables l description state variables change time usually differential equations The input program escapement example specifies shapes parts positions space input indicate parts contact impose constraints Therefore order identify useful set state variables program use spatial reasoning determine kinematic properties escapement mechanism The program identifies kinematic pairs pairs parts mutually constrain motion looking pairs parts having subparts matching sym metries corresponding positions For example escapement balance hole rotational symmetry certain axis frame shaft having rotational symmetry axis Algorithms 2 3 Section 211 specify conditions matching symmetries result kinematic pair For escapement program determines moving parts forms revolute pair frame constrained rotate fixed axis The program partitions moving parts kinematic subsystems having single degree freedom algorithms Section 213 In mechanism moving parts connected kinematic pairs kinematic subsystems consisting single moving As result program concludes reasonable set state variables escapement consists variables position variable velocity variable kinematic subsystems In order generate half behavioral model escapement differential equations describing state variables change time program analyze dynamics mechanism My program produce separate behavioral models machine based distinctly different sets approximations simplifying assumptions The user choose models article address model selection However availability disparate models necessary prerequisite experimental investigation choices approximations simplifying assumptions influence forms behavioral models sorts behavior models predict For escapement mechanism models differ treatment intermittent contacts moving parts critical functioning mechanism Permanent contacts handled kinematic pairs described The model handles intermittent contacts moving parts mechanism approximating small elastic distortions parts rise contact forces In model parts mechanism treated absolutely rigid bodies contact forces result geometric constraints relative motions parts contact Section 24 compares models The forces modeled escapement mechanism springs friction program uses simple linear models 4 350 300 k 250 200 150 6 100 50 2 g 0 50 A GelseyArtificial Intelligence 74 1995 153 2 0 2 4 6 8 10 12 0 0 20 40 60 80 100 120 140 160 200 180 5 10 15 20 25 30 35 40 _a__ rime 0 0 5 10 15 20 25 30 35 40 time 1 5 10 15 20 25 30 35 40 _ L_ IILcz balance lever escape wheel Fig 2 Motion escapement mechanism The behavioral model generated program numerically simulate second dynamic model The models good job predicting machines behavior Fig 2 shows plot simulation behavior escapement mechanism different mechanism appear actually exhibit article Both outputs shown 151 My Fig 2 omitted presented algorithms automated modeling As result simulation output model looks identical Section 2 behavior To human eye data plot Fig 2 clearly shows regularity mech simulation data explicit trace Fig 2 shows regular behavior decide long human need analysis clear instructions Also plot shows sufficiently ran length time numerical reason long behavior simulation stream simulation data determine In Section 3 I present algorithms continuously long anisms behavior regularity Furthermore havioral regularity explicit escapement regular behavior continue processing regularities experiments characterizing determine limits validity hypothesized behavioral regularities controlled simulated regularity results process recognizes important qualitative For escapement havior explicitly repetitive nature important quantitative repetition behavior cycle exactly start description shapes clocks parts effect conclude specification mechanism meets functional Although mechanical device simulators Section 4 concise description longterm feature behavior fact duration Thus program commercially information ref shape incapable clock available feature erences machines parts users simulators following modeling inherit l pair parts geometric constraint permanent contact completely l pair parts intermittently come contact supply subroutine positions parts determine contact interpenetrating tasks automatically These dressed aspects modeling qualitative description machines expected program Other researchers ad Section 4 The problem extracting numerical longterm behavior issues tasks resulting A GelseyArtcial Intelligence 74 I 995 l53 5 simulation described Section 3 output addressed machines complex escapement 2 Creating behavioral models My program creates behavioral model machine directly representation systems Solid Geometry 2433 machine structure shapes mechanical Euclidean intersection widely CADCAM space difference modeled The representation CSG order represent represented formed applying physical Constructive solid modeling CSG representation dimensional union square plate hole represented cylinder block appropriately plate cylinder correct diameter position difference operation create supplemented information constants input data escapement mechanism desired hole plate This geometric masses spring physical properties coefficients friction Figs 12 13 Section 23 complete In closed subset set operations Boolean solids For example difference block small set primitive sized positioned representation represent devices 21 Kinematics In order identify useful set state variables program determine kinematic properties mechanism requires analysis geometry Kinematic parts mutually constrain 341 classified kinematic pairs lower pairs higher pairs motion The concept starts identification reasoning mechanisms kinematic pairs pairs Reuleaux form kinematic pair set points When parts mechanism parts contact limits twodimensional relative motion elements prismatic pair allows relative revolute pair surface include single axis axis pairs geometrically crankshaftframe pair Fig 4 shows example prismatic pair The pistonframe cylindrical isnt allowed If set contact points kinematic pair classified lower pair Examples lower pairs rotation parallel pair allows motions Only lower rod pair Fig 3 behaves prismatic pair examples revolute pairs rod pair pistonconnecting pair crankshaftconnecting complete mechanism possible Fig 3 shows cylindrical pair translation rotate Higher pairs kinematic pairs takes place lines points contact surface The common higher pairs gears contact elements I use PADL2 solid modeling 201 6 A GelwyArtciul Intelligence 74 I 995 I53 Frame Crankshaft Fig 3 Crank mechanism Fig 4 Prismatic pair 21 I Identifying lower pairs The central concept identify lower pairs symmetry A threedimensional like translation share common twodimensional If parts form lower pair generated rotation symmetry translational Fig 3 crankshaft shape symmetry operation subparts prismatic pair prismatic symmetries For example symmetry However rotational actually process detecting subparts moving mechanism shape simple symmetry pair forms revolute pair frame parts rotational note crankshaft considered frame The subparts revolute pair rotational cylindrical contact rotational symmetry lower pairs starts listing symmetries important symmetry area contact possible symmetry The Constructive Solid Geometry representation compute easy systems makes modeling subparts CSG primitives clearly defined symmetries For example primitive including crosssection generally cylinder identical solids list symmetries widely CADCAM solid parts like blocks cylinders regular solids crankshaft cylinders Every cylinder rotational Fig 3 combination symmetry volume swept rotating twodimensional cylinder cylinders axis symmetry Every cylinder A GelseyArtiial Intelligence 74 1995 l53 7 SYMMETRY type rotational prismatic 1 symmetry 2 axis symmetry 3 list primitive solids having symmetry Fig 5 The SYMMETRY data structure AIgorithm 1 Find symmetries subparts For PART For primitive solid PRIM PART For symmetry SYM PRIM If SYM PARTs symmetry list add PRZM SYMs list primitive add SYM PARTS symmetry list solids prismatic identical Some primitive rotational perpendicular axes symmetry crosssections perpendicular solids symmetry different prismatic forming crankshaft axis symmetry blocks symmetries respect Algorithm Each subpart data structure Fig 3three SYMMETRY rotational The rotational represented 1 finds SYMMETRY symmetry Fig 5 Algorithm prismatic 1 generates list symmetries subparts moving instance instances symme rotations distinct solids instance symmetry kinematic pair applies separate cylindrical mechanism SYMMETRY crankshaft tries parallel axes considered distinct axes produce differing effects axes parallel Several primitive participate rotational axis crankshaftframe subparts crankshaft Though ferent rotational symmetry unique axis symmetryany define symmetry Of course symmetries crankshaft However input filtered cylinder subparts crankshaft dif prismatic axis result kinematic pairs symmetries symmetries prismatic algorithms irrelevant expect subpart symmetries symmetries prismatic kinematic pair identification symmetry line parallel rotational example symmetries remove The symmetry lists lower kinematic pairs mechanism The represented list KINEMATIC PAIR data lower pairs identified Algorithm 2 descriptions list kinematic pairs Algorithm 5 refine kinematic pairs mechanism structures initial kinematic pairs list Fig 6 The Algorithm 2 looks pairs parts having subparts common uses Algorithm 3 determine forming kinematic pair consist primitive solids For example subparts form kinematic pair The subparts Fig 3 symmetry 8 A GelseyArtificiul lnfelligence 74 1995 153 KINEMATIC PAIR 1 type kinematic implementation pair revolute prismatic cylindrical gear current kinematic pair 2 parts forming 3 axis kinematic pair lower pairs 4 gear ratio gear pairs 5 list pairs primitive 6 list CONSTRAINT data structures 151 solids making kinematic pair Fig 6 The KINEMATIC PAIR data structure Algorithm 2 Find initial list lower pairs For pair parts PART1 PART2 For symmetry SYM shared PART1 PART2 For primitive solid PRIM1 PART1 having symmetry SYM For primitive solid PRIM2 PART2 having symmetry SYM Apply Algorithm 3 PRIM1 PRIM2 If form kinematic pair KP apply Algorithm 4 Algorithm 3 Check kinematic pair conditions If PRIM1 PRIM2 satisfy following conditions 1 They type primitive 2 One solid hollow 3 Their dimensions intersection 4 Their solid possibly axis symmetry solid type primitive dimensions form kinematic pair KP solids solid crankshaft participate kinematic pair primitive solid element kinematic pair paired frame Each primitive primitive element type block cylinder kinematic pair One primitive solids solid hollow A hollow primitive frame These holes hollow primitive crankshaft solids surrounding solid child difference node CSG tree For example formed subtracting solid block Fig 3 fits holes cylinders appropriate size position paired primitive My algorithms The dimensions axis symmetry kinematic radius length dimensions sides In revolute pair solid hollow cylinders radius possibility slippage play block lengths perpendicular solids In CSG representation currently neglect dimensions cylinder pairs A GelseyArticial Intelligence 74 1995 153 9 Algorithm 4 Merge primitive solids kinematic pair If KP mechanisms list kinematic pairs add KP mechanisms list kinematic pairs If SYMtype prismatic KPtype prismatic rotational KPtype revolute If SYMtype add pair PRZMIPRZM2 KPs list pairs primitive solids If KPtype prismatic AND SYMtype rotational revolute AND SYMtype prismatic OR KPtype KPtype cylindrical example crank mechanism solid cylinders lengths differfor crankshaft extend far length hollow cylinders fit In prismatic pair hollow solid primitives identical crosssections differ dimension axis symmetry case prismatic pair Fig 4 Finally primitive solids nonempty intersection A hole place form kinematic pair solid axis The intersection smaller primitive solids solid element extend hollow crankshaftframe pair andor inside larger hollow element case pistonframe pair Since Constructive Solid Geometry representation based Boolean set oper ations easy way define shapes parts order fit form lower pair simply shape solid element pair use single difference operation create hollow element subtract ing solid element larger solid body Algorithm 3 particularly suitable identifying lower pairs elements defined way However cases elements kinematic pair specified ways convenient user yield exactly shapes Constructive Solid Geometry representations solids unique 331 For example hole rectangular crosssection created difference blocks union blocks A limitation Algorithm 3 underlying assumption Boolean set operation form hollow element kinematic pair difference operation Algorithm 3 currently identify kinematic pair hollow element formed union blocks If primitive solids satisfy conditions Algorithm 3 Algorithm 4 instantiate new kinematic pair merge new data previously instantiated pair For example cylindrical pair prismatic rotational symmetry Depending symmetry processed pair initially instantiated prismatic revolute symmetry processed type kinematic pair set cylindrical Often initial list kinematic pairs include degrees freedom ac tually unavailable mechanism analyzed Algorithm 5 heuristic algorithm filters degrees freedom associated kinematic pair attempting IO A GelseyArtificiul Intelligence 74 I 995 153 Algorithm 5 Refine list kinematic pairs For kinematic pair KP If KPtype cylindrical translational motion KPtype revolute blocked directions If KPtype cylindrical primitive solids block KPtype prismatic If KPtype cylindrical cylindrical subparts coaxial KPtypc prismatic possible remove If translational motion degrees freedom list Any identify unavailable subpart rotational prismatic symme kinematic pair cylindrical try initially labeled cylindrical pair limitation degrees freedom blocked ends solid element pair contact solid parts element degree freedom removed kinematic pair translational declared revolute pair If translation short distance kept algorithms cur possibility slippage play kinematic pairs If rotational motion rently neglect blocked symmetry kinematic pair declared prismatic pair Every additional degree freedom eliminated run efficiently analysis allow simulation machines dynamics fewer state variables needed translational degree freedom pair doesnt rotational direction total crosssection kinematic possible Algorithm 5 removes cylindrical pairs degrees freedom legitimately degree freedom actually available missing degrees freedom result strategy simulations simulations degree freedom available kinematic able determine pair Therefore kinematic pair mistakenly removed hand cases degree freedom removed Algorithm 5 cautious The reason extra degrees freedom completely wrong behavioral The final behavioral model machine correct efficient behavioral model contact incorporates example revolute pair solid objects generate appropriate fact translational motion blocked classified cylindrical implicitly represented fact behave revolute pair translational motion kinematic pair reduction resisted appropriate degrees freedom result incorrect simulated behavior behavioral model missing state variables forces reality missing behavioral model behavioral simulation state variables effect model force On hand unwarranted geometric model force Thus influence 212 Identifying higher pairs At present higher pairs kinematic However model generator works mechanisms analyzer knows gear pairs including higher pairs A GelseyArtcial Intelligence 74 1995 I53 II Algorithm 6 Find gear pairs For pair parts PART1 PART2 For primitive solid PRIM1 PART1 gear For primitive If PRIM1 solid PRIM2 intersects PRIM2 PART2 gear instantiate new gear kinematic pair behavior arises physics bodies contact Section 221 Appendix A allow Fig 14 shows example higher pair behavior dynamics algorithms simulated modeled Modeling physical structure gear poses difficulty CSG representation available cylinder imply object modeled actually labeled property gear This convention Section 21 gear teeth typically profile curve cycloid described involute represented primitives CSG implementations My program expects gear represented motion envelope shape representation gear If motion envelopes gears overlap meshed 2 My program presently model gear tooth geometry arbitrarily considered computes compromise tooth geometry annotate gear number teeth tooth depth Gear pairs represented KINEMATIC PAIR data structure Fig 6 identified Algorithm 6 number teeth analyzer gear ratio ratio diameters gears A simple extension present scheme representation space considered directly proportional gear diameter kinematic small overlap considered meshing sufficient functions 213 Partitioning The goal kinematic analysis choose useful set state variables It simulations pairs set state variables small possible desirable run efficiently fewer state variables State variables chosen partitioning kinematic sets parts kinematically constrained positions position velocity gears preferable freedom associated entire gear train entire set single degree freedom For example velocities gear gear train computed knowing degree kinematic subsystems Each kinematic velocity variable My current partitioning moving pairs bind kinematic discuss partitioning subsystem state variables associated position variable fairly limited requires algorithm kinematic higher pairs In section I gears For example fixedaxis kinematic pair Therefore kinematic subsystems subsystems bound This case input kinematic analyzer CSG representations solid bodies allowed overlap space 12 A GelseyArtijicial Intelligence 74 1995 153 KINEMATIC SUBSYSTEM Fig 9 1 fixedaxis KINEMATIC PAIR 2 motion envelope moving KINEMATIC PAIR 3 list INTERACTOR data structures 4 5 6 7 8 9 10 inertia moving linear damping coefficient moving spring description children list KINEMATIC SUBSYSTEM parent KINEMATIC SUBSYSTEM type relationship parent relationship data structures data structure data Fig 7 The KINEMATIC SUBSYSTEM data structure Escape Wheel Lever f Frame Balance Only balance moving Fig 1 Fig 1 d Balance Lever Escape Wheel b All parts moving Fig I b Fig 1 c Note second behavioral model Appendix A Fig 8 Kinematic subsystem trees escapement chiming clock shown gear form single kinematic higher pairs form temporary kinematic moving parts considered pairs single kinematic Fig 26 Section 322 subsystem escape wheel large In Appendix A I introduce transient Fig 1 c joined transient higher subsystems temporarily example subsystem total degree freedom kinematic subsystem A kinematic set elementary subsystems kinematic Fig 7 This data structure The data structure includes pointers sub systems moving represented KINEMATIC SUBSYSTEM includes data model physical data structure Section 21 inertia damping moving description structure spring driving nodes parent children tree particular reorganized ferent elementary trees escapement moving parts linked transient higher pairs Appendix A For example Fig 8a determined lever position lever determined frame Since frame moves lever escape wheel The balance tree dif subsystem subsystem root Fig 8 shows kinematic kinematic root position escape wheel In Fig 8b time Algorithm pointers organize separate kinematic 21 Section A21 elementary subsystem subsystem subsystem kinematic kinematic indicates A GelseyArticial Intelligence 74 I 995 I53 13 Algorithm 7 Form permunent kinematic subsystems 1 For kinematic pair KP If element pair frame instantiate new KINEMATIC SUBSYSTEM data structure KS Store value KP KINEMATIC PAIR field KS Fill physical structure data input model Set fields NULL 2 For gear pair GP If associated kinematic subsystems parents root tree reversing links Make associated kinematic subsystems root child kinematic subsystem Set relationship type GEAR Set relationship data gear ratio INTEXACTOR 1 KINEMATIC SUBSYSTEMS interact 2 sets interacting primitive solids 3 ACTIVE flag Appendix A Fig 9 The INTJZRACTOR data struchm position escape wheel determines parts These trees shown second behavioral model Appendix A model escapement subsystems remain separate join form tree The position velocity state variables kinematic subsystem position velocity elementary kinematic subsystem root tree The states elementary kinematic subsystems computed descending tree computing state node state parent Algorithm 7 generates elementary kinematic subsystems forms permanent links pair elementary kinematic subsystems moving parts gears meshed In Appendix A I dynamic partitioning algorithms form additional links moving parts different kinematic subsystems temporarily form certain higher pairs 2 I 4 Interaction analysis Interaction analysis determines kinematic subsystems potentially come contact motion mechanism Potential interactions repre sented INTERACTOR data structure Fig 9 This preprocessing results optimization model isnt essential modelgeneration process Without preprocessing pair parts treated potentially inter acting slow simulations model My interaction analysis 14 A GelseyArtificiul Intelligence 74 1995 153 works checking 151 currently limited fixedaxis mechanisms intersecting motion envelopes algorithms described 22 Dynamics After finding useful set state variables program complete behavioral state variables change time model mechanism described differential determining equations dsi dt gsr 1 program creates The behavior mechanism s state variables The functions g behavioral model depends sorts different ways parts depends state parts determined mechanism forces acting simplifying local model parts global model simultaneous models assumptions program model force parts mechanism By making different mechanism Section 24 compares forces forces equations involving 221 Local model contact forces mechanism consisting Consider kinematic subsystem subsystems FL elementary kinematic subsystems moving Let xi position variable associated ith elementary let L time derivative xi The state machine time specified completely values 2n state variables xi equations u way state changes instance Eq 1 For mechanical typically nonlinear fact expressible solved explicitly To solve equations numerically compute time derivatives state variables For x computation described 2n differential devices closed form general requires algorithms differential trivial equations dx xt dt Lf For L dui tidtli f 2 3 inertia In equation pair frame frame revolute pair The inertia structure force traditional I inertiu moving If moving forms prismatic mass forms revolute pair axis data Fig 7 For prismatic pair fi force moving net sense revolute pair net torque moment inertia moving KINEMATIC SUBSYSTEM inertia available In current sources implementation springs contributions friction contact total force subsystem come forces Springs attached A GelseyArtifcial Intelligence 74 1995 l53 15 Fig 10 Freebody diagrams escapement moving parts kinematic subsystem state variable For example mainspring gives energy elementary function position springs elements linear Fig 1 involves hairspring makes In current model generator information explicitly kinematic variable implementation subsystem frictional viscous damping Coulomb represented Friction occurs force linear friction springs represented annotating springs constants force spring escapement mechanism run clock rate shapes springs input elements elementary function velocity state rotation balance oscillate regular The model contact forces I discuss present section explicitly considers small elastic plastic distortions model greatly simplifies modeled overlap gives rise force If o depth overlap defined physics rigid volumes I use involved useful Bodies space magnitude 1 force parts near point contact allowed overlap 0 1 The contact I Eo DbMo ifoOand EDMdO 4 force basically modeled linear spring linear damping factor term right b significant magnitude E spring constant D damping coefficient The additional continuous MO second o 0 MO damping Typically force finite value instant contact The direction force taken surface normal point contact Simulations mechanism changes values constants Eq 4 values zero significant behavior appear fairly jump discontinuously force function insensitive E 100000 D 10000 M 100 examples The total force fi subsystem article fi kiXi hiUi c aiklk ki spring constant spring coefficient linear friction subsystem attached lk contact 5 subsystem hi force described 16 A GelseyArtcial Intelligence 74 I 995 153 Algorithm 8 Compute For elementary kinematic Set Ui tii kixi subsystem hiui Ii time derivatives state variables For INTERACTOR data structure Fig 9 For pair potentially interacting primitive solids If Algorithm 9 determines volumes overlap space Let o depth overlap normal vector point contact For interacting subsystems Let hi unit vector axis kinematic pair If subsystem elementary kinematic prismatic pair set Qi n ii Else Let Ti radius vector axis point contact Set Y ri X n 2i If n points away subsystem 22 Let negate ay lEoDtiMo For interacting Subtract aiZZi ti elementary kinematic subsystems parts contact contact k LYik geometric force multiplier taking contact force lk force subsystem involved contact k qk zero subsystem Fig 1 c state shown escape wheel pushing I subsystems balance A contact force contributes Fig 10 shows freebody diagrams moving parts escapement mech lever iri different factors LY different For positive giving f2 f3 lever anism turn pushing subsystems opposite directions escapement balance counterclockwise escape wheel negative experience clockwise acceleration useful behavioral model mechanism state Fig 10 net torque fl balance net torques acceleration To turn algorithms overlap o rate change overlap 4 geometric equations determining parts contact computing requires depth force acts equally force multiplier Algorithm 8 computes 3 Following EQ 2 time derivatives state variables set Ui elementary kinematic ii cy equations subsystems Though Algorithm 8 appears complicated actually partial differential The equations elasticity grid mesh generation complex shapes like predicting failures estimating metal fatigue predicting behavior normal operating conditions like escapement mechanism computational needed equations automating far simpler proper model true elasticity task solution challenging Fig 1 While deeper model useful tasks simply hard justify added complexity discretization A GelseyArtcial Intelligence 74 1995 l53 17 Using Eq 3 Eq 5 tii set kixi hl account spring frictional forces Then Algorithm 9 parts contact Eq 4 compute resulting contact force Eq 5 net tii In case prismatic pair geometric force multiplier LY simply n ii select component force axis translation For revolute pair r x n ii torque force f r x f case force In 1 magnitude contact force computed Eq 4 n surface normal direction contact force acting body touching surface The direction force body n The rate change overlap b appears Eq 4 sum motions parts point contact motions computed velocity state variables geometric factor CY The fact force velocity transformation use geometric factor basically principle lever A force end lever appears end multiplied certain factor velocity appears divided exactly factor This equivalence proven formally permuting scalar triple product r x n ii ii x r II angular velocity vector dui component linear velocity surface normal direction To compute net force time derivative routine determine primitive solids overlapping volumes For overlap detected depth overlap surface normal point contact computed Algorithm 8 applies Algorithm 9 pair potentially interacting primitive solids compute information In sense Algorithm 9 actually unnecessary PADL2 solid modeler mentioned Section 2 includes general algorithms computing solidbody intersections In experiments I general algorithms runs orders magnitude slower Algorithm 9 impossible realtime simulations achieved current implementation Fig 22 Algorithm 9 currently limited 2dimensional overlapping parts works analyzing twodimensional projections threedimensional situations Therefore prim itive solids arbitrary orientations prismatic symmetry respect zaxis Overlap computations currently limited interactions blocks blocks cylinders All limitations removed course simply slow general intersection capabilities PADL2 For model contact forces section plausible parts overlap slightly Thus algorithms section compute depths overlap based assumption overlap slight However simulator adjusting step size try optimum start trying incorrect sizes lead project physically implausible states like shown Fig 11 c Fig 11 e To allow simulator proper adjustments depth values returned cases reasonable extrapolation results physically plausible range In case potentially overlapping blocks Algorithm 10 looks face blocks separates comer block corners corner inside block comers 18 Blocks overlapping b Blocks overlapping c Blocks overlapping deeply I d Cylinder crosses face e Cylinder center inside block f Corner cylinder g Cylinder overlapping block Fig I I Cases overlap detector deal Algorithm 9 Check overlap primitive solids 1 If projections solids zaxis intersect 2 Project 3 Return solids xv plane apply Algorithm depth overlap 10 Algorithm 11 point overlap local surface normal exit outside See Fig 1 1 Alternatively plane block entirely plane block entirely blocks overlap See Fig 11b Otherwise blocks overlap deeply depth extrapolated See Fig 1 1 c blocks face physically plausible Algorithm 11 deals case cylinder potentially overlaps block A cylinder cross face block Fig 11 d contain corner block depth Fig 11 f extrapolated solids overlap See Fig 11 g range See Fig 11 e Otherwise physically plausible center cylinder If block contains A GelseyArtifcial Intelligence 74 1995 153 19 Algorithm 10 Check overlap blocks 1 2 3 4 Check comers blocks corner block shown Fig 11a If comer block return comer point contact distance nearest face depth overlap perpendicular face local surface normal If faces block separates blocks shown Fig 11 b exit The blocks overlap deeply Fig 11 c Choose point midway blocks centers point contact overlap blocks containing spheres depth overlap let normal line blocks centers Algorithm 11 Check overlap block cylinder 1 2 3 4 5 If cylinder crosses face block shown Fig 11 d return deeply embedded point cylinder point contact distance nearest face depth overlap perpendicular face local surface normal If block contains center cylinder Fig 11 e choose point midway solids centers point contact overlap cylinder blocks containing sphere depth overlap let normal line solids centers Check comers block cylinder shown Fig 11 f If comer cylinder return deepest comer point contact distance surface depth overlap normal cylinders surface The solids dont overlap Fig 11 g Exit 222 Global model contact forces My program create alternative model contact forces represents machines collections perfectly rigid bodies treats interactions different kinematic subsystems forming temporary kinematic pairs join var ious interacting subsystems single subsystem When new temporary kinematic pairs formed behavioral model dynamically reduces number state variables state kinematic subsystem determined state variablesa position velocityno matter parts subsystem When parts separate number state variables increases In model forces shown freebody diagrams Fig 10 acting need explicitly considered predicting motion mechanism effects captured kinematic constraints reduce number state variables Though forces need computed predict machines behav ior desired determined simultaneous mechanism model given Appendix A I global model contact equations involving forces The details 23 Simulation A computational differential equations behavioral model equations standard algorithms local model contact numerically time steps taken simulation machines behavior generated numerically specific set initial forces stiff solving differential equations 121 Thus based stiff differential 231 My global model contact forces based model I use standard solving conditions The differential means unstable small model I use special algorithm subroutine GEAR publiclyavailable stiff equations algorithm method subroutine RKF45 381 Both GEAR RKF45 available electronic mail netlibornlgov RungeKuttaFehlberg publiclyavailable simulations simulations implemented implemented equations For models numerical solvers carefully controlled ensure shown motion I b balance collides lever Before collision allow moving parts mechanism escapement mechanism time steps large pass For example consider Fig balance step directly state balance predict smooth simulator takes collision balance lever large time steps However predict position accurately takes large time lever lever simulation fail simulator state balance Figs 12 13 complete 201 Fig 13 shows supplementary input data given program escapement Fig 1 Fig 12 shows geometric description mechanism mechanism parsed PADL2 solid modeling program moments inertia lever balance escape wheel input data indicating 10 20 200 respectively coefficients friction frame 5 6 20 spring spring constant 15 relaxed position 90 degrees balance frame spring spring constant 20 attached escape wheel frame relaxed position 10000 degrees velocities 0 shows Fig 1 simulated global local model runs slowly The global model fast Fig 22 end section gives numerical methods time 0 parts mechanism original positions behavior escapement mechanism model contact yields permit realtime timing data examples initial value problem initial conditions input model Fig 2 introduction complete examples Initial conditions specified Appendix A A simulation simulation workstation solve For following attached identical behavior forces described moving specified Fig 14 shows mechanism converts reciprocating motion It consists wheel arm form revolute pairs frame A rotary motion A GelseyArtiJTcial Intelligence 74 1995 153 21 generic escesc tooth blox03y54 movx32 gap 36 ewheel cyldlOhl tooth tooth degzgap tooth degz2gap tooth degz3gap tooth degz4gap tooth degz5gap tooth degz6gap tooth degz7gap tooth degz8gap tooth degz360gap dif cyldl movxO lever bloxlOy22 movx5movy64 blox09y2 degz7movx3movy56 blox09y2 degz25movx3movy56 bloxly2 movyOldegz40movx24movy57 bloxly8 movx5movy8 bloxiy18 movyldegz45movy162 bloxly18 movylmovxldegz45movy162 dif cyldl movy75 movy75 degz5 movy75 bwheel cyld8hl movy20movz1 cyldlh2 movx3movy2OmovzI dif cyldl movy20movz1 movxO frame blox13y31 movx65movy65movz2 cylh4 movz2 cylh4 movy75movz2 cylh3 movy20movz2 dif ewheel lever bwheel cyldlh3 movx16movy14movz2 cyldlh3 movxl6movy14movz2 movxO attr frame frame 1 esc ewheel asb lever asb bwheel asb frame Fig 12 Geometric input data escapement mechanism LEVER FRAME 10 5 BWHEEL FRAME 20 6 SPRING 90 15 EWHEEL FRAME 200 20 SPRING 10000 20 Fig 13 Supplementary input data escapement mechanism small cylinder protrudes rotates recognizes common higher kinematic pairs recognize wheel arm Nevertheless behavioral wheel fits grove arm As wheel analyzer pair formed oscillate forth Since kinematic able simulate arm forced simulator 22 A GelseyArtijicial Intelligence 74 1995 153 Fig 14 Mechanism wheel present model shown figure convert rotary motion reciprocating rocking motion Note spring attached v S d 2 r 1200 1000 800 600 400 r 200 0 0 0 5 10 15 20 25 30 5 10 15 20 0 5 10 15 20 time time wheel arm Fig IS Motion conversion mechanism continuous contact methods elements work intermittent mechanism behavior mechanism higher pair modeled contacts parts results simulation mechanism shown coefficients moving parts frame friction Fig 14 Note input representation mechanism wheel like escapement Fig 15 shows plot driven spring starts state velocities zero parts position specification friction examples I specified nonzero Section 2 allows Fig 16 shows double escapement mechanism useful test simulator Fig 17 shows plot simulation jam It turns double escapement doesnt particularly unusual way balances lever synchronously provides interesting results double escapement behave mechanism exhibits regular behavior standard escapement A GelseyArtificial Intelligence 74 1995 I53 23 Fig 16 Double escapement Note hairsprings attached balances mainspring attached escape wheel present model shown figures soI __ 1 0 5 10 15 20 25 30 35 40 __ 12 1 t1w tima 0 5 10 15 20 25 30 35 10 2 7 1 I 5 10 15 20 25 30 35 40 0 tinm Balance 1 Lever 1 Escape Wheel 300 0 250 s 200 150 g 100 50 j 0 a5o 2 0 2 4 6 8 10 12 I 0 5 10 15 20 25 30 35 40 0 5 10 15 20 25 30 35 40 tinv tima Balance 2 Lever 2 Fig 17 Motion double escapement mechanism Fig 18 shows simple ratchet mechanism When counterclockwise force applied wheel motion blocked pawl shown Fig 19 clockwise force applied wheel turns freely Fig 20 shows plot results simulation mechanism clockwise force wheel Fig 21 shows plot results simulation mechanism counterclockwise force wheel The configurations mechanisms end simulations shown Fig 19 24 Comparing models The global model contact forces described Appendix A imple mented run examples The capability experiment disparate models useful tool investigating choices approximations 24 A GeiseyArtijicial lntellience 74 1995 153 Perspective view Parallel view Fig 18 Ratchet mechanism figure Note springs attached wheel paw1 present model shown Clockwise force Counterclockwise force Fig 19 Final state ratchet mechanism models predict Both models appear influence assumptions simplifying havior predictions clockwork mechanisms ilar Fig 22 shows experimental implementation takes time execute step This difference model parts come model dynamically differential local model stiff problems reduces equations Also runs quickly somewhat contact tends forms behavioral models sorts realistic behavior simulations model sim data Note global model fewer time steps global behavioral pushes plausible requires number state variables speeds solution like longer solver solution stiff differential equations tailored For application like routine design type mechanical device model superior local model task evaluating global performance A GelseyArtcial Intelligence 74 1995 153 25 30 0 12 30 25 01 20 D 15 G z 10 0 0 5 3 4 5 6 7 8 91011 time 0 12 3 4 5 6 7 8 91011 time paw1 wheel Fig 20 Motion ratchet mechanism clockwise force 1200 1000 800 600 400 200 0 0 20 40 60 80 100 time 0 20 40 60 80 100 time paw1 wheel Fig 2 1 Motion ratchet mechanism function time counterclockwise force Local model Escapement Rotary Reciprocation Ratchet cw Ratchet ccw Double Escapement Global model Escapement Rotary Reciprocation Ratchet cw Ratchet ccw Execution time Steps Timestep Simulated time seconds ms 492 25 082 167 181 13 0176 0086 13 3942 2119 594 7928 5073 836 333 65 1089 125 12 14 21 36 16 053 13 12 31 20 10 100 39 37 20 19 100 Fig 22 Experimental data Sparcstation 10 26 A GelseyArtcial Intelligence 74 1995 l53 local model likely candidate designs simply better choice example unusual innovative designs evaluated simpler derivation implementation adaptable runs faster However application new situations 3 Longterm behavior prediction The behavior machine n state variables curve st ndimensional st st simulation described solution approximated Eq 1 Section 22 Section 23 However machines st computed particular specific time period exhibit simple function t state space The function initial conditions numerical repetitive behavior discrete set time points Such approximation machines longterm behavior straight simulation long time period serves concise description qualitative expensive The approximation longterm behavior quantitative provide considerable The approximation insight current aspects machines predicted linear function time useful predicting implementation tt sto t toAD 6 linear However limiting time points start repetitive behavior pattern holds A D constant Of course glance Fig 2 makes behavior like escapement approximation linear approximation particular detailed simulation time interval separating discrete approximation My program attempts approximation values st computed running time points viable Though time points far intermediate clear holds approximation parameter values short carefully EQ 6 It simulations tests expose subjecting series tests sI t actual st order approximation trolled numerical hypothesized discrepancies approximation An alternative approach In contrast mathematical clocks order reduce ysis mechanical assumptions program state variables described state variables powerful PoincareBendixson tractors twodimensional systems approximate important systems proves 7261 dynamical predicting machines theory dynamical longterm behavior anal analyses systems For example 1273 11 These analyses use strong simplifying considered number state variables behavioral model clock created Section 2 Reduction problem use analysis allows chaotic behavior impossible theorem provides complete classification Thus longterm behavior prediction detailed behavioral behavioral resulting approximate model In article model approximating model analyzing resulting behavior st approximating A GelseyArtcial Intelligence 74 1995 l53 27 I approach automating approximation dynamical analysis process needed second approach appears interesting challenging research problem However finding simple approximation s1 t behavior likely provide useful guidance task generating approximate behavioral model approaches actually complementary competitive In addition behavioral model algorithms includes complete mechanism geometry approximation st based detailed behavioral model provide valuable check analysis based approximate behavioral model necessarily abstract away details mechanical devices geometry 31 Finding behavioral regularities My program attempts approximate st series discrete time points nD time particular repetitive behavior pattern begins n integer D duration repetitive behavior patterns The approximation currently linear function time EQ 6 rewritten terms n sto nD sto nA 7 Though approximation holds time points nD integer n intermediate values st computed running detailed simulation initial conditions sI nD n For simplest sort periodic behavior component vector A zero approximation constant However constant approximation wont work like escapement Fig 2 indicates entry A corresponding escape wheel position nonzero To approximation program runs numerical simulation generate st searching values D A approximation matching st time points nD To constrain potentially explosive search search process examines states function eks t minimum ek kinetic energy mechanism This restriction implies discrete time points nD kinetic energy minima If machines behavior fact repetitive plausible assume interval length D include number kinetic energy minima My approximation algorithm focuses kinetic energy minima presence kinetic energy minimum useful heuristic indicator boundary qualitatively distinct regions behavior example time oscillating machine switches moving direction moving machine receives push energy boost velocity stops decreasing starts increasing A change number kinetic energy minima behavior pattern good indication significant qualitative change behavior My program uses Algorithm 12 try approximation s1 t filling fields data structure Fig 23 values consistent stream behavior data coming numerical simulator The program simulates behavior machine finds kinetic energy minima In order avoid misled spurious local kinetic energy minima program considers minima 28 A GelseyArtificial Intelligence 74 1995 153 I Number kinetic energy minima 2 Duration behavior pattern 3 Net change 4 List periodically superimposed state variable pattern instance A processes Fig 25 instance behavior pattern M D Fig 23 Parameters approximation Algorithm 12 Find locally satisfactov behavioral hypothesis Default parameter values Pconsrm 2 Prange_fraction 10e5 Pisnore 4 i_match Ol P svmatch 421 While behavioral hypothesis formed OR hypothesis belief level M Pconsn Perform simulation Update range information If previous state local kinetic energy minimum step AND energy AND Pisnore kinetic energy minima ignored level Pransefraction kinetic energy range Then If hypothesis Then hypothesize M1 D c difference behavior pattern time current kinetic energy minimum previous A t differences values state variables current kinetic energy minimum previous Else current hypothesis remains valid D matches time elapsed Mth previous kinetic energy minimum AND A matches Ptmatch changes values state variables Mth previous kinetic energy minimum PS_v_matCh If current hypothesis fails form new hypothesis level 0 hypothesis belief McMSl D t difference minimum A c differences time current kinetic energy Mth previous values state variables Else increment current kinetic energy minimum hypothesis belief level Mth previous A GelseyArtifcial Intelligence 74 1995 153 29 Prmgefraction range kinetic energies encountered simulation The Pigno minima ignored program misled transient startup phenomena Machines designed regular behavior incorporate damping negative feedback rapidly eliminate behavioral irregularities Pisnore safely set small value The program searches viable approximation successively forming possi ble hypothesis consistent currently available data After hypothesis formed tested results simulation Though program quires new data match predictions hypothesis fairly closely require exact matches transients noise numerical data The match parameters adjusted tune behaviors program recognize For example identical patterns different time durations detected giving Ptm large value This algorithm based following simple powerful ideas 1 Given set simulation data including exactly m kinetic energy minima M Fig 23 assigned value m clearly unique assignment D A consistent data 2 Given set simulation data including m kinetic energy minima single mminima hypothesis consistent m minima consistent rest data mminima hypothesis consistent data implies 3 Once program new data consistent previously formed mminima hypothesis consistent particular sequence m minima need consider hypothesis m kinetic energy minima Thus program iterate possible behavioral hypotheses testing turn Note program looks regularities behavior state variables like shown Fig 2 behavior kinetic energy Kinetic energy simply guide tell program look state variablesit considered measure interestingness particular state machine Focusing search significant points systems behavior reduces chance incorrect matches makes Algorithm 12 efficient If machine behavior pattern M kinetic energy minima behavioral simulator takes S steps instance behavior pattern Algorithm 12 terminate SP gnore MPconfinn 1 iterations main loop A potential drawback kinetic energy minima filter analyzing machines behavior interesting behaviors filtered For example machine having energy input potential energy storage mechanism friction dissipation energy output clearly absolutely constant kinetic energy times complex interesting motions However machines common machine simple frictionless pendulum fails fully meet criteria Transformations different forms energy central purpose machines 30 A GelseyArtiJiciul intelligence 74 1995 l53 Algorithm 13 Test gradual effects Let n2 1 2 initial total energy change total energy pattern instance 1 Apply Algorithm If new hypothesis match initial 12 initial conditions sI n2D locally satisfactory hypothesis Then FAILURE Else let s nhD state reached s nD state reached initial generating locally satisfactory hypothesis generating new locally satisfactory hypothesis If sto nD sto nA Then SUCCESS Else reset A tsto nD sto nbD I 4 And test new hypothesis validity test Algorithm 12 32 Hypothesis failures 12 finds locally Algorithm st s nD n hypothesis eventually failure consistent initial simulation satisfactory behavioral hypothesis approximation hypothesis fail In article I consider globally data If fto nD remains close satisfactory classes hypothesis l distance sI nD s nD gradually grows n increases eventually transition l A sudden large machines behavior st occurs time t behavior sto nD predicted approximation n t toD far actual behavior s nD My program performs variety heuristic failures useful modified possible rejected longterm behavior prediction tests order try detect hypothesis satisfactory fails test If hypothesis If hypothesis passes tests declared globally 321 Gradual effects Imprecisions components A cause approximation s nD s nA 8 gradually deviate n2D deviates significantly state machine unstable running instabilities s nD At time nzD s n2D sI n2D represent 13 look program uses Algorithm sI n2D If initial conditions short simulation actual behavior A GelseyArtifcial Intelligence 74 1995 153 31 deviation approximation detected s t way Algorithm 13 attempts modify A improve results tension provides decreasing mainspring slow decrease balance However The escapement mechanism noise initial clock runs amplitude oscillations background searches balance Algorithm change background rithm 13 easily correct A include small nonzero change behavioral pattern example gradual effect As simulation 12 locally valid s t initial A indicates zero change repetitions However s1 lo n2D gradual noise Algo balance position starts successive behavior pattern initial conditions data detected Algorithm simulation decrease grown 13 restarts balance far larger smaller amplitude 322 Sudden transitions Figs 2629 mechanisms time bomb fail sudden hypotheses machines behavior st For example normal clock suddenly wheels run protrusion frame This sort hypothesis different unlikely sudden frame s1 n2D instead wheel protrusion detect actual behavior ft transitions like Fig 29 behave stop protrusion 13 wheel collided state 13 way st deviated greatly predicted behavior previous section Algorithm 13 detect failures discussed sudden transition Of course Algorithm s n2D happened actually unreachable state Algorithm detect transition failure In mechanical devices considering sudden transitions changes patterns contact parts categories mechanism I divide changes 1 changes 2 new contacts parts previously pattern contact contact parts regularly contact The escapement mechanisms modified escape wheels amples category The escape wheels pattern contact possible violating time bomb Figs 27 28 ex modified escape wheel lever change Fig 26 Fig 29 examples second category local hypothesis The chiming clock mechanisms successful state end behavioral pattern change My program uses Algorithm 14 sure changes parts regularly contact violate return algorithm considers pattern contact hypothesized changes The algorithm position subsystems revolute pairs net position Algorithm transitions 14 uses symmetry raises change pattern soon separate number confirmations considerations elements pattern contact hypothesis Moving parts prismatic elementary limited kinematic elementary subsystems kinematic pair In case rotating rule possibility sudden hypothesis required 32 A GelseyArtificial tntelligence 74 1995 153 Algorithm 14 Check symmetric regular contacts For elementary subsystem EKS kinematic If EKS hypothesized AND EKS revolute pair AND EKS interacted elementary kinematic Then position change let M 27rthe hypothesized position change EKS For primitive PR EKS interact EKS2 If PR union having Mradial rotational M Then raise number required confirmations subsystem EKS2 symmetry met solid satisfactory locally revolution motion simulated The program applies Algorithm If Algorithm 14 raises 14 Algorithm 12 locally satisfactory number required confirmations Algorithm 12 hypothesis applied new requirement primitive defined My program determines primitive PADL2 I added primitive checking syntactic extension takes arguments TRANSLATIONAL explicit union marks resulting primitive union Algorithm symmetric union appropriate symmetry 14 checks primitive PADL2 repetition solid modeling solid axis symmetry count range The preprocessor SYMMETRKIJNION symmetric union macro language This macro type ROTATIONAL expands specified properties symmetric solid PR appropriate properly positioned cylinder language having having come particular 323 New contacts parts previously contact contact come The primitive solids come contact classified New contacts parts previously num time moving contact The moving parts rotating contact blocks predicts contacts block cylin ber categories handled current program The parts coming moved translating cylinders My current der One motionless rotate fixed axis The algorithms operate world described earlier cover cases moving running ward Predicting difficult niques motionless straightfor considerably 2dimensional I Section 221 Extension algorithms simultaneously moving parts approach probably use search contact contacts implementation come general require tech Before presenting block cylinder block cylinder capable rotation common algorithms program uses I derive geometrical predict contacts preliminaries Fig 24 shows fixed axis rotation A GelseyArtQicial Intelligence 74 1995 153 33 4 Block separates axis rotation zaxis cylinder q 1 _ b Cylinder axis rotation zaxis block k 1 Fig 24 The ways cylinder touch face block The algorithms assume moves issue irrelevant geometrical point view The following symbols figure D distance axis cylinder axis rotation c distance axis cylinder intersection plane axes plane containing face block 8 angle plane perpendicular face block contains axis rotation plane containing axes rb distance axis rotation face contact cylinder T radius cylinder P 1 axes separated 1 By properties similar triangles C rc DcYc tb Therefore case k rb C rc D 9 10 11 34 PSP A GeleyArtijiciul Intelligence 74 1995 l53 time start superimposed process long process runs I Period 2 Duration 3 Time process starts 4 Vector truth values specifying 5 Net change involved state variable process involved state variables Fig 25 Periodically superimposed process PSP data structure It possible edge face Le Fig 24 blocks corners cosines requires cylinder touch block face In case law rf T 0 2rD cos 6 12 8 angular polar coordinate corner block contact cylinder rc corners radial polar coordinate constant block rotates rigidly Therefore cos 8 r D2 t1 2rD In case possible solutions reflected horizontal appropriate solution axis The algorithms presented choose 8 fact figures 13 If parts fixed When new contact occurs hypothesis fail completely determine quickly come halt On hand moving prior contact capable motion new behavior pattern emerge time contact Simulation behavior mechanism things happen subsequent typically Many mechanisms multiply periodic different sorts regular behavior occur time scales For example chiming clock like Fig 26 different escapement regular behavior pattern times second chiming mechanism pattern repeated hour Perhaps repeated case multiple periodicity I periodically super PSP additional behavior pattern regularly superimposed represents periodically My program imposed process basic behavior pattern disturbing superimposed commonest Because superimposed processes PSP data structure process disturb Fig 25 basic behavior pattern basic pattern I state simulation needed involve state variables dont change variables static The static state variables identified generate local hypothesis original My program uses Algorithm The motion envelope volume intersecting motion envelopes contact computed Algorithm 16 The parts come contact resulting new contact sweeps moves If parts point contact behavioral 15 analyze behavior A GelseyArtifcial Intelligence 74 1995 153 35 15 Analyze behavior resulting new contact 16 determine behavioral pattern instances pass Algorithm 1 new check gradual effects steadily changing state variables modify given st t halfway initial conditions contact 13 nonhypothesized Use Algorithm Use Algorithm contact hypothesis If fixed restart behavior s t t new contact While simulating state variables Monitor behavior nonstatic necessary simulator initial conditions given sure violate original hypothesis b Monitor behavior static state variables gather data needed PSP data structure If superimposed rithm 13 default mode gradual effects half total energy modify hypothesis process violate original hypothesis necessary apply Algo gone 2 3 4 Algorithm For INTERACTOR 16 Look nonhypothesized contacts data structure Fig 9 If parts contact If parts print warning message Else moving nonzero position change behavioral pattern For pair potentially interacting primitive solids If solid block cylinder For edges blocks 2D projection Use Algorithm cylinder 17 edge hit Else print warning message distance Divide basic behavioral pattern instance hypothesized displacement instance Since predicts net change nonhypothesized parts positions contacts distance moving parts freely behavioral pattern Thus contacts displacement instances nonhypothesized If parts fixed frame program determines original hypothesis ends new contact identify new periodic process superimposed contact parts hypothesized mechanism hypothesis behavioral pattern determined dividing number behavioral determined valid region program attempts originally hypothesized pattern Algorithm 16 uses Algorithm edges blocks twodimensional behavior pattern 17 contact cylinders circle projection 36 A GelseyArtial Intelligence 74 1995 153 Algorithm 17 Find contact blocks edge cylinder For cases P 1 P I If lPrC rbl 3 D For cases S 1 S 11 Let esarecos p If contact point D h cos 8 Pr sin 6 lies endpoints edge block Then record 0 possible contact Else distant endpoint nearer contact point distance axis rotation greater D rC OR nearer endpoint farther away contact point distance rp axis D r Then 8 Sarccos possible contact tz D2 r 2rD The contact nearest contact direction motion moving solid axis giving cylinder possibilities projection Each contact cases shown horizontal inside output algorithm automatically eliminated If appropriate touch cylinder nearest contact physically algorithm checks Fig 24 reflected In cases body block final cases happen ways endpoint edge outside However physically unrealizable possible contact necessarily 33 Examples The algorithms 12 behavior pattern section implemented extreme position balance The tested number Fig 1 kinetic initial hypothesis instance kinetic moving parts net position change pattern finds 12 tests behavioral hypothesis minimum examples The behavior pattern escapement mechanism energy minima formed Algorithm energy minimum When Algorithm net displacements changes The formed balance lever net position confirmed Pconsn pattern rejected new hypothesis instances finally accepted locally valid 13 n2D balance lever negatives hypothesized behavior pattern kinetic energy minima After finding locally acceptable hypothesis change pattern This hypothesis half clocks original energy program applies Algorithm initial behavioral hypothesis failure The simulation restarted time mainspring stored hypothesis check approximately dissipated Algorithm arrives approximation 13 reapplies Algorithm 12 new initial condition However A GelseyArticiul Intelligence 74 1995 I53 37 Fig 26 Chiming clock Fig 27 Escapement mechanism missing tooth state sto nD compared prediction s naA Algorithm 13 significant deviation amplitude oscillations balance considerably smaller decrease tension mainspring The program executes final portion Algorithm 13 changing A include small change balance amplitude behavior pattern repetition The new approximation st work locally 4 No sudden transitions tested example Fig 26 shows clock chimes regular intervals hour A small gear escape wheel drives large gear moves relatively slowly The clapper 38 A CelseyArtifcial Intelligence 74 1995 153 Fig 28 Escapement mechanism extralarge tooth normally pressed pushes hypothesis elementary running chiming Using algorithms contact occur initial conditions order program collision identifies affecting clocks energy modify balance check restarts order approximation resulting hits chime away chime releases In example makes chiming chime spring protrusion large gear sound local clock initial hypothesis significant difference instead Since program proceeds subsystems chimes previous example kinematic given Zt halfway Section 323 program determines large gear clapper It restarts gradual effects hypothesis modification account incomplete behavior prediction nonhypothesized simulation collision needed The given st contact basic hypothesis 13 usual time half gone check gradual effects time need amplitude oscillation simulation initial conditions determine results nonhypothesized superimposed unexpected sf reflect decrease tension decreased mainspring periodic process The program applies Algorithm Fig 27 shows escapement mechanism escape wheel Fig 28 shows escapement mechanism escape wheel exceptionally starts finding examples locally confirm wheel hypothesis escape wheel hypothesis missing teeth teeth large For mechanisms program finds standard escapement But rotation escape program attempts symmetric simulate In case mechanism extralarge revolution large tooth contacts initially tooth Fig 28 escape lever prevents fails My successful hypothesis form hypotheses confirmed wheel completed escape wheel advancing attempts program gives eventually In case mechanism missing tooth Fig 27 initially successful A GelseyArtifcial Intelligence 74 1995 l53 39 Fig 29 The time bomb hypothesis fails escape wheel completes revolution However program starts forming new hypotheses eventually finds 20 kinetic energy minima displacement escape wheel position state variable revolution new hypothesis turns completely successful Fig 29 shows time bomb clock runs normally long time suddenly exhibits anomalous behavior stopping protrusion wheels runs protrusion frame In example Algorithm 12 finds local hypothesis previous cases The algorithms Section 323 determine unexpected collision occur Algorithm 13 check gradual deviations bt halfway collision In example amplitude balance oscillation changed significantly tension mainspring changed original hypothesis considered globally consistent interval ending unexpected collision occurs 4 Related work A number mechanical device simulators commercially available ADAMS 629 DADS 22 surveys 8213032 Though simulators include powerful algorithms forming solving equations motions wide variety mechanisms incapable information shape machines parts user simulator inherits following modeling tasks l For pair parts permanent contact completely resulting geometric constraint l For pair parts intermittently come contact supply subroutine positions parts determine contact interpenetrating These tasks automatically program 40 A GelseyArtkd Intelligence 74 1995 153 These tasks addressed Joskowicz Sacks 25 They handle permanent contacts axes planes motion surfacetosurface initial configuration intersected contacts computing compute reachable axes regions intermittent spaces twodimensional This approach computing advance actual contacts occur simulation kinematic analysis adding kinematic behavior mechanisms behavior mechanism different approach simulator allows kinematic like escapement requires simulation In 37 contacts transforming potential kinematic pairs They handle pairwise configuration entire set possible contacts locally computing supplement simulate adequate sort detailed dynamic analysis predict Nakamura Nakajima I presented article 28 kinematic pair recognition represented feature description pair parts mechanism program sets matching pairs identifies features set matching features instantiations program For language looks set list certain common kinematic The handling intermittent 41 Gilmore Cipra Cremer lators researchers specified input constraints constrained equations having proach intermittent 51 Goyal et al 191 bodies mechanical devices contacts mechanism contacts 171 Conti et al 31 Like commercial resulting addressed simu require geometric constraints contacts programs They represent contacts geometric permanent simulation I Appendix A constraints equations simulates systems I form unconstrained fewer degrees freedom The soft contact sort ap Section 2 Cundall rigid cases sets unconstrained I None research cited addresses longterm behavior based numerical problem predicting ma simulation output Longterm behavior chines systems prediction goals mathematical example analyses abstract models mechanical 1273 11 Section 3 discusses 391 describes program approach Weld detects repeating cycles processes produces aggregate description repet itive behavior The behavior mechanical article series discrete processes Welds technique easily decompose appear usable clocks theory dynamical devices described context Forbus et al 1 l qualitative kinematic clock Their simulation suffers ambiguous behavior predictions simulation liability run qualitative constant defining characteristic clock numerical run long Furthermore qualitative models predicts predict period clock 411 Sacks 361 controllers intelligent Yip systems Their systems physical address execute interpret numerical require behavioral models issue model creation Yips program automatically equations experiments concerning Hamiltonian simulations input plan systems analysis inherent clock simulation A GelseyArtcial Intelligence 74 1995 153 41 degrees freedom Sacks program automatically form detailed analysis parameter planar ordinary differential equations Both programs powerful domains expertise handle sixthorder like escapement mechanism I present article Forbus Falkenhainer 101 intelligent controller numerical simu lations based Qualitative Process Theory 91 Their work emphasizes automatically generating systems equations change time physical model Their input model considerably higher level model raw physical structure program uses input prevent program able generate numerical simulation device like clock contacts parts appear disappear dynamically This article mainly based dissertation 151 Less detailed descriptions work described article appear 131416 5 Limitations future work Combining modeling algorithms Section 2 capabilities com mercial mechanical device simulators described Section 4 result having considerably wider range applicability components My dynamics modeling algorithms Section 22 presently limited fixedaxis mecha nisms commercial simulators use information shape machines parts imposing considerable modeling burden user especially mechanisms intermittent contacts described Section 4 The commercial simulators handle complex movableaxis mechanisms algorithms auto matically identify permanent intermittent contacts approaches complementary remedy deficiencies The principal limitation longterm behavior prediction algorithms Section 3 form approximation function given Eq 7 The set machines longterm behavior predicted necessarily limited behavior set discrete time points adequately approximated function form This limitation strength constrained form approximation function makes possible use powerful behavior recognition algorithms An important direction future work area investigation set possible approximations usefully expanded precluding tractable behavior recognition The question generalizations useful probably best answered pursuing research context particular tasks like diagnosis malfunctioning machines design new machines 6 Conclusion Predicting machines behavior basic capability tasks requiring rea soning machines diagnosis malfunctioning machines design new 42 A GelseyArtijcial Intelligence 74 1995 I53 1 Fig AI The position variables xi kinematic pairs functions position variables qi kinematic subsystems machines following capabilities redesign existing machines I described working program l automated creation behavioral models machines directly models raw physical structure l intelligent control computational experiments needed reveal machines longterm behavior The algorithms machines final output longterm behavior I present solving behavior short allow problems long time periods description machines automated prediction programs expected concise qualitativequantitative Appendix A Global model contact forces Contact single uniform way appendix forces parts result sudden collisions steady Section 221 pushing The model contact forces presented treats collisions pushing temporary kinematic pairs dealt separately Pushing collisions place new temporary kinematic pairs formed Collisions moving parts idealized completely reasons important inelastic This assumption concern elements permanent kinematic pairs plausible effects lubrication 21 special case momentum colliding parts handled forming transfers damping A1 Theory All Equations motion Consider mechanism moving forms permanent kinematic pair frame Each kinematic pairs associated position variable xi At particular m kinematic Fig A1 moving parts temporarily joined subsystem total degree freedom moving parts group single degree freedom For example time subsystems single kinematic contacts having A GelseyArtijcial Intelligence 74 1995 153 43 Let qj position state variable jth kinematic subsystem If kinematic subsystem moving qj position variable kinematic pair forms frame subsystem moving parts qj typically position variable parts definition kinematic subsystem positions moving parts determined qj Let L Lagrangian mechanism difference kinetic energy potential energy The behavior mechanism modeled m differential equations form Gj jth component generalized force This Lagrungian formulation classical mechanics equivalent Newtons formulation convenient problems 181 Using definitions Section 221 Lagrangian mechanism A1 components generalized force 18 p 191 Gj c J Substituting Eq A 1 simplifying gives kixig dqj J o rearranged A2 A3 A4 A5 desired input form numerical simulator See 151 details derivation To turn equation useful behavioral model mecha nism requires algorithms computing xi dXidqj d2xidd functions qj These algorithms presented Section A2 based geometrical theory described Section A13 A I 2 Collisions At particular time elementary subsystems mechanism grouped m kinematic subsystems having single degree freedom state mechanism specified 2m state variables qj gj behavior 44 A GelseyArtijicial Intelligence 74 I 995 l53 mechanism determined m equations instance Eq AS m subsystems When causes contact motion mechanism come form new subsystem having single degree freedom set state variables equations motion change For example balance moving comes contact lever begin moving m kinematic subsystems join kinematic independently Fig 1 b subsystems A new contact begins collision In rigidbody model considered section collisions velocity state variables change variables 35401 The force F remain constant assumed place infinitesimally short time interval values position state colliding subsystems impulsive time motion kinematic force interval At approaches integral Fdt converges zero During collision Eq A4 subsystem additional generalized finite nonzero value P equation force term kiXi ss Fdx dqj dqj A6 force F x measures distance direction F F magnitude Integrating equation time collision yields A7 F magnitude impulse assumption infinitesimally short time remain constant interval collisions place state variables position A 13 Geometry Consider moving parts mechanism form kinematic pairs fixed frame If parts temporarily compute position state variable pairs order use 2 equations derived dimensional situations implementation projections threedimensional works analyzing sections My current necessary previous twodimensional contact In section I discuss case temporary contact moving parts revolute pairs parallel axes I start case corner block moving parts touches edge block component moving In escapement mechanism discussed earlier sections lever escape wheel type contacts component I refer moving C corner kinematic pair forms frame pair C The E edge element pair E In following discussion axis rotation revolute pair E coincides zaxis axis rotation I use coordinate A GelseyArtificial Intelligence 74 1995 I53 45 I0 0 Fig A2 A comer contact edge revolute pair C parallel zaxis intersects negative xaxis The contact parts line segment parallel zaxis I discuss situation projected XY plane I refer contact point coordinates cx cy See Fig A2 I define following symbols distance axes revolute pairs r distance axis rotation C point contact cx cr h shortest distance origin projection edge E involved contact Bc angular orientation point contact c c relative axis rotation C angle edge E horizontal Using plane geometry trigonometry derive following relations positions moving parts 151 details c rsinec c rcosa en polarztngle cy c f arccos E1 d COS r2 asin h2 d2 _arh2a2sinBfahlsin2BE dz2 r2 asin h32 A8 A9 AlO All A12 A13 46 A GelseyArtijicial Intelligence 74 I 995 I53 Algorithm 18 Find new contacts Until interpolation needed For active INTERACTOR data structure Fig 9 For pair interacting primitive solids If Algorithm 9 finds excessive depth overlap state depth acceptable Interpolate Restart algorithm beginning A14 A15 d 1a dfk c c A2 Implementation Instead unencountered After simulation step model volumes overlap machine simulated state Therefore moving parts separated new previously parts general perfect contact Actually space The algorithm contact finding new contacts determine machines state point parts came contact See Algorithm 18 Typically simulation occurred algorithm new contact step The interpolation occur new contacts depth overlap interpolate process reseparate A21 Amalgamating kinematic subsystems subsystems implementation represented Elementary kinematic Fig 7 Kinematic subsystems represented KINEMATIC SUBSYSTEM subsystems In current data structure mentary kinematic subsystem possible relation type transient higher pair relation edge block described pair current higher pair equivalent block outward radius cylinder replacing block center Thus problem analyzing problem analyzing directed trees ele elementary kinematic relationships parent gear Section 21 types transient higher pair relations One corner block sliding Section A13 The type transient higher cylinder sliding edge block This edge cylinder corner second type higher pair reduces different higher pair formed extending type discussed Section A13 implementation A GelseyArtifcial Intelligence 74 1995 153 4l Algorithm 19 Amalgamate kinematic subsystems 1 Use Algorithm 20 compute relationship data change elements new transient higher pair remain contact 2 Initialize normal vector contact point values returned Algo rithm 18 3 Initialize second derivatives plugging values directly derivative formulas Section A13 velocity 4 Compute new amalgamated kinematic subsystem Eq A19 The KINEMATIC SUBSYSTEM data structure specifies type relationship parent associated relationship data For gear relation relationship data gear ratio For transient higher pairs relationship data constant long pair exists parameters r h Section A 13 1 child rotating line rotating corner cylinder 2 cylinder radius 0 corner 3 4 C offset position state variable C offset 5 E offset en position state variable E Offset 6 coordinates adjacent corners 7 coordinates edge endpoints point contact c cy Section A 13 data changes simulation step 1 normal vector point contact 2 3 d child position d parent position 4 d2 child position d parent position 2 When separate kinematic subsystems come contact program uses Algo rithm 19 amalgamate single subsystem The unchanging data computed Algorithm 20 Kinematic pairs C E Section A13 previously elements disjoint kinematic subsystems linked single new sub Since kinematic subsystem represented directed tree kinematic pairs happen children trees representing previous kinematic subsystems trees reversed Algorithm 21 child root tree On hand pair NOT child reason reverse tree However fixed frame kinematic subsystem root tree position change determines positions parts A new contact begins collision In Section A12 I derived Eq A7 I restate A16 I define qj position state variable kinematic subsystem j position state 48 A GelseyArtijicial Intelligence 74 1995 l53 Algorithm 20 Find transient higher pair constant data 1 If fixed childreverse tree necessary Else rotating corner child cylinder child Else rotating edge child child Else reverse rotating corners tree making root child rotating edge 2 If contact finder Algorithm 18 cylinder store radius 3 Compute r h current positions parts Fig A2 4 8c polar_anglecontact C offset position 5 polar_anglenormal vector Algorithm 9 1r2 point Algorithm 9 state variable C 8c E offset position state variable E 6 transform corner edge coordinates coordinate Fig A2 Algorithm 21 Make elementary kinematic subsystem EKS root tree 1 2 apply algorithm If EKS parent Copy relationship data EKS parent following changes negate type flag line versus corner child b dmentdhild 1 dhilddmnt 7 CC dXpmentdild d2nchilddXarenJdXchildldXparent3 variable elementary kinematic kinematic subsystem j For geometry considering subsystem root tree representing dx G rj X Ilj Z A17 new contact point contact ri radius vector axis kinematic pair kinematic j formed n local surface normal impulse P The sum lefthand Eq A16 computed directly data tree KINEMATIC SUBSYSTEM instance Eq A 16 colliding law motion subsystem subsystem Algorithm 9 Algorithm 9 direction data structures We write subsystems force force subsystem F collision Newtons collision F A equation comes assumption subsystems united collision collision If colliding inelastic subsystems A GelseyAmjcial Intelligence 74 1995 153 49 Algorithm 22 Reformulate vector state variables state_variable_count 0 For elementary kinematic subsystem EKS If EKS parent state_variable_vector statevariablecount state EKS increment state_variable_count j k dqjdqk computable geometry newly amalgamated kinematic subsystem These equations solved algebraically compute unknown values fi QF 4 If qj parent new amalgamated kinematic subsystem A18 4y 24k q_i _ Lyi dqk 7 ffk dqj 1 A19 A20 A22 Simulation Numerical simulation model publiclyavailable subroutine RKF45 38 program calls simulation time step RKF45 passed vector state variables specifying current state machine pointer subroutines calls compute time derivatives state variables RKF45 returns new vector state variables specifying new state time step If program finds new contacts Algorithm 18 current set kine matic subsystems changed algorithms Section A21 In case calling RKF45 necessary reformulate vector state variables Algorithm 22 number state variables changed As I mentioned Section A21 I define qj position state variable kinematic subsystem j position state variable elementary kinematic subsystem root tree representing kinematic subsystem j RKF45 calls subroutine program uses Algorithm 23 compute time derivatives state variables The time derivatives position state variables velocity state variables The time derivatives velocity state variables SO A GelseyArtcial tntelligence 74 1995 153 Algorithm 23 Compute For elementary kinematic subsystem EKS time derivatives state variables If EKS parent time derivative position velocity 0 numerator denominator Apply Algorithm 24 EKS velocity time derivative 0 numerator denominator state variable kinematic subsystem containing elementary kinematic subsystem Algorithm 24 Recursive computations Let qj position If parent dxidqj dxid 1 1 2 3 subsystem kinematic Let elementary Compute Xi xk Algorithm 25 Compute dxidqj pute dxjdxk setting k parent Eq A12 Eq A14 dxi _ dqi dxi dXk dxk com A21 4 Compute dxid Eq A13 Eq A15 compute dxidxi setting A22 Add rdz kixi dq dqj hdi dqi numerator Add Ii dxidqj 2 denominator For CHZLD elementary kinematic subsystem Apply algorithm CHILD Algorithm 25 Compute position child parent If child moving corner cylinder compute x Xk Eq A1 1 compute xi c cr xk Eqs A8 A9 AlO Choose value xi closest previous value A GelseyArticial Intelligence 74 1995 l53 51 Algorithm 26 Fill new nonconstant values For elementary kinematic subsystem EKS If EKS parent CHILD EKS Apply Algorithm 27 CHILD Algorithm 27 Recursively new nonconstant values 1 Let elementary kinematic subsystem k parent 2 Compute Xi cx cy xk Algorithm 25 3 normal vector sin cos 4 Compute dXidXk xk Eq A12 Eq A14 5 Compute d2xidni Eq A13 Rq A15 computed Eq AS Algorithm 23 calls Algorithm 24 Note positions second derivatives recomputed scratch This necessary RKF45 calls timederivative subroutine passes state variable vector potential future state mechanism seen Therefore quantities recomputed new vector Algorithm 24 uses Algorithm 25 compute position child subsystem parent Since appropriate equations Section A13 possible values Algorithm 25 choose In current implementation simply choosing whichever values closer value previous step Since values typically far apart heuristic works practice The time choice particular transient higher pair previous value guide returned contact finder ambiguous The correctness choice checked methods warning messages printed case disagreement The methods check possible choices causes corner past end edge The second method check position change consistent velocity Often methods arent able choice primary method RKF45 returns vector state variables representing new state machine time step My program uses Algorithm 26 new nonconstant values elementary kinematic subsystem A23 Detecting separation After state machine advanced simulation time step described Section A22 current set valid kinematic subsystems changed In Section A21 I discussed amalgamation kinematic subsystems time step result new contacts detected Algorithm 18 Configuration changes simulation time step cause parts separate previously contact 52 A CelseyArcial Intelligence 74 1995 153 Algorithm 28 Separate kinematic subsystems subsystem EKS For elementary kinematic EKS parent If AND point contact EKS parent endpoints edge OR edges ending corner collinear edge corner sliding break contact EKS parent tree KINEMATIC SUBSYSTEM In case subsystem broken kinematic higher pair longer valid separate data structures trees removing representing transient Separation invalid transient higher pairs applying Algorithm 28 subsystem There ways transient higher pair kinematic elementary sliding edge fall If corner cylinder invalid sliding edge relative rotation comer end edge Alternatively contact comertoedge parts convert contact immediately Typically parts involving linked higher pair old higher pair longer valid In case Algorithm 28 instantiated deletes old higher pair new higher pair needs detected usual way Algorithm 19 new contact Algorithm contact different corner andor edge Therefore edgetoedge cornertoedge contact turn 18 References III 121 131 1 161 171 Lsl I91 I to1 1992 563574 kinematic analysis mechanism design control PhD Thesis Department Computer Science Cornell University simulation Mechanism Mach Theory 27 5 general purpose physical AA Andronov AA Vitt SE Khaikin Theory Uscillarors Pergamon Press Oxford England 1966 FP Bowden D Tabor The Friction Lubrication Solids Oxford University Press London 1950 C Conti P Corron l Michotte A computeraided JF Cremer An architecture dynamics 1989 PA Cundall Formulation represent contacts Geomech Abstracts 25 3 G Dawson The dynamic duo Dram Adams Compur Mech Eng 1985 PG Drazin Nonlinear Systems Cambridge University Press Cambridge England 1992 B Fallahi KM Ragsdell A compact Mechanisms Transmissions Automation Design 105 1983 434440 K Forbus Qualitative process KD Forbus quantitative knowledge detect composed polyhedral blocks Inf J Rock Mech Mining Sci simulations An Proceedings AAAI90 Boston MA 1990 theory Artif Intell 24 1984 85168 analysis Trans ASME J geometry Ithaca NY distinct element modelpart threedimensional B Falkenhainer planar kinematic simulationintegrating 1988 107l 16 Selfexplanatory qualitative I scheme integration approach A GelseyArtifcial Intelligence 74 1995 153 53 11 I KD Forbus I Nielson B Faltings Qualitative spatial reasoning CLOCK project Artif Intell 51 1991 417471 121 CW Gear Numerical Initial Value Problems Ordinary Differential Equations PrenticeHall Englewood Cliffs NJ 1971 131 A Gelsey Automated reasoning machine geometry kinematics Proceedings Third IEEE Conference Artificial Intelligence Applications Orlando FL 1987 DS Weld J Kleer eds Readings Qualitative Reasoning Physical Systems Morgan Kaufmann San Mateo CA 1990 141 A Gelsey Automated physical modeling Proceedings IJCAI89 Detroit MI 1989 151 A Gelsey Automated reasoning machines PhD Thesis YALEUCSDRR785 Yale University New Haven CT 1990 161 A Gelsey Using intelligently controlled simulation predict machines longterm behavior Proceedings AAAI91 Cambridge MA 1991 880887 171 BJ Gilmom RJ Cipra Simulation planar dynamic mechanical systems changing topologies J Mech Design 113 1991 7083 181 H Goldstein Classical Mechanics AddisonWesley Reading MA 2nd ed 1980 191 S Goyal FW Sinden EN Pinson Simulation dynamics rigid bodies I II III Proceedings PacificRim International Conference Modelling Simulation Identification Vancouver BC 1992 20 G Hartquist Public PADLZ IEEE Comput Graph Appl 1983 3031 21 EJ Haug A survey dynamics software EJ Haug ed Computer Aided Analysis Optimization Mechanical System Dynamics SpringerVerlag Berlin 1984 243 1 221 EJ Haug Computer Aided Kinematics Dynamics Mechanical Systems Volume 1 Basic Methods Allyn Bacon Boston MA 1989 23 AC Hindmarsh ODEPACK systematized collection ODE solvers R Stepleman editor Scientt Computing Applications Mathematics Computing Physical Sciences IMACS Transactions Scientific Computation NorthHolland Amsterdam 1983 5564 241 CM Hoffmann Geometric Solid Modeling An Introduction Morgan Kaufmann San Mateo CA 1989 25 L Joskowicz EP Sacks Computational kinematics Arttf Intell 51 1991 381416 26 AJ Lichtenberg MA Lieberman Regular Stochastic Motion SpringerVerlag Berlin 1983 27 N Minorsky Nonlinear Oscillations D Van Nostrand Ptinceton NJ 1962 281 A Nakamura N Nakajima Computeraided design diagnosis machineskinematic model extraction mechanisms Mech Mach Theory 25 3 1990 355364 29 N Orlandea MA Chace DA Calahan A sparsityoriented approach dynamic analysis design mechanical systems I Eng Industry 99 1977 773784 301 B Paul Kinematics Dynamics Planar Machinery PrenticeHa Englewood Cliffs NJ 1979 3 11 AB Pippatd The Physics Vibration Cambridge University Press Cambridge England 1978 321 CD Potter Mechanism analysis moves times Comput Graph World 15 5 1992 30 33 AAG Requicha Representations rigid solids theory methods systems ACM Comput Surv 12 1980 437464 341 E Reuleaux The Kinematics Machinery Macmillan London 1876 351 EJ Routh The Elementary Part Treatise Dynamics System Rigid Bodies Dover New York 1960 36 EP Sacks Automatic analysis oneparameter ordinary differential equations intelligent numeric simulation Art Intell 48 1 1991 371 EP Sacks L Joskowicz Automated modeling kinematic simulation mechanisms Cornput Aided Design 25 2 1993 106118 381 LF Shampine HA Watts S Davenport Solving nonstiff ordinary differential equationsthe state art SIAM Rev 18 1976 376411 391 DS Weld The use aggregation causal simulation Artif Intell 30 1986 40 J Wittenbutg Dynamics Systems Rigid Bodies Teubner Stuttgart Germany 1977 411 KMK Yip Understanding complex dynamics visual symbolic reasoning Artif Intell 51 l3 l34 1991 179221