Artiﬁcial Intelligence 170 2006 9831016 wwwelseviercomlocateartint The complexity soft constraint satisfaction David A Cohen Martin C Cooper b Peter G Jeavons c Andrei A Krokhin d Department Computer Science Royal Holloway University London UK b IRIT University Toulouse III France c Computing Laboratory University Oxford UK d Department Computer Science University Durham UK Received 4 October 2005 received revised form 13 February 2006 accepted 13 April 2006 Available online 5 June 2006 Abstract Over past years considerable progress methods systematically analyse complexity constraint satisfaction problems speciﬁed constraint types One powerful theoretical development area links complexity set constraints corresponding set algebraic operations known polymorphisms In paper extend analysis complexity general framework combinatorial optimisation problems expressed forms soft constraints We launch systematic investigation complexity problems extending notion polymorphism general algebraic operation multimorphism We tractable sets soft constraints established novel characterised presence particular multimorphisms We simple set NPhard constraints restricted multimorphisms Finally use notion multimorphism complete classiﬁcation complexity Boolean case extends earlier classiﬁcation results particular special cases 2006 Elsevier BV All rights reserved Keywords Soft constraints Valued constraint satisfaction Combinatorial optimisation Submodular functions Tractability Multimorphism 1 Introduction In standard constraint satisfaction framework 1438 constraint understood predicate relation specifying allowed combinations values ﬁxed subset variables refer constraints crisp constraints Problems crisp constraints deal feasibility satisfying solution considered better A number authors suggested usefulness constraint satisfaction framework greatly enhanced extending deﬁnition constraint include soft constraints allow different measures desirability associated different combinations values 1243 In extended framework constraint Corresponding author Email addresses dcohenrhulacuk DA Cohen cooperiritfr MC Cooper peterjeavonscomlaboxacuk PG Jeavons andreikrokhindurhamacuk AA Krokhin 00043702 matter 2006 Elsevier BV All rights reserved doi101016jartint200604002 984 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 seen cost function deﬁned ﬁxed subset variables maps possible combination values variables measure desirability undesirability Problems soft constraints deal optimisation feasibility aim ﬁnd assignment values variables having best possible overall combined measure desirability In paper examine limiting choice cost functions affects complexity optimisation problem Example 11 Consider optimisation problem choose sites n service stations motorway length L subject following requirements There r n possible sites distances d1 dr motorway Each pair consecutive service stations separated distance A B The service stations equally spaced possible One possible way model situation follows Introduce variables v1 v2 vn represent position service station variable Impose binary constraint pair vi vi1 1 n 1 cost function δ δx y 0 assigned value set d1 dr A cid2 y x cid2 B Impose binary constraint pair vi vi1 1 n 1 cost function ζ ζ x y x y2 Add unary constraint v1 cost function ζ 0 x unary constraint vn cost function ζ x L Note sum functions minimal values variables equally spaced 0 L We seek assignment values set D d1 dr variables minimises sum cost functions n1cid2 i1 δvi vi1 ζ 0 v1 n1cid2 i1 ζ vi vi1 ζ vn L The cost allowing additional ﬂexibility speciﬁcation constraints order model optimisation criteria feasibility generally increase computational difﬁculty For example establish class problems containing unary constraints soft version binary equality constraint NPhard Example 211 On hand certain types soft constraint possible solve associated optimisation problems efﬁciently For example establish optimisation problems form described Example 11 solved polynomial time Example 613 In case crisp constraints considerable progress analysing complexity problems involving different types constraints This work led identiﬁcation number classes constraints tractable sense exists polynomial time algorithm determine collection constraints class simultaneously satisﬁed 1526334042 One powerful result area establishes tractable class constraints ﬁnite domain relations preserved nontrivial algebraic operation known polymorphism 626 In case soft constraints little detailed investigation tractable cases certain special cases twovalued domain 1030 special case involving simple temporal constraints 31 In earlier paper 7 identiﬁed particular tractable class binary soft constraints showed class maximal sense adding soft binary constraint class gives rise class problems NPhard This class recently study complexity MINIMUM COST HO MOMORPHISM problem 21 model Level Repair Analysis problem operations research 22 Example 27 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 985 In paper ﬁrst step systematic analysis complexity soft constraints arbitrary arity arbitrary ﬁnite domains To generalise algebraic ideas study crisp constraints introduce new algebraic operation multimorphism Every cost function associated set multimorphisms multimorphism associated set cost functions We different types multimorphism associated collection soft constraints maximal tractable class In words maximal tractable classes soft constraints precisely characterised collection soft constraints associated particular multimorphism Furthermore simple NPhard class soft constraints restricted multimorphisms Finally apply techniques developed paper twovalued domain obtain new di chotomy theorem classiﬁes complexity set soft constraints domain Theorem 71 This dichotomy theorem generalises earlier results concerning complexity particular Boolean constraint prob lems including SATISFIABILITY problem 42 MAXSAT problem 9 weighted MINONES problem 10 30 weighted MAXONES problem 1030 Corollary 712 The examples given paper demonstrate framework introduce unify isolated results tractable problem classes different application areas prompting discovery new tractable classes For example notion multimorphism generalises notion poly morphism Proposition 410 express earlier results concerning characterisation tractable subproblems different decision problems case SATISFIABILITY problem include HORNSAT 2SAT subproblems 19 case standard crisp constraint satisfaction problem include generalisations HORNSAT socalled maxclosed constraints 2629 generalisations 2 SAT socalled 01all implicative constraints 82532 systems linear equations 26 The notion multimorphism characterise tractable subproblems optimisation problems case optimisation problem MAXSAT include 0valid 1valid 2monotone constraints 10 case optimisation problems sets include minimisation submodular set functions 2339 bisubmodular set functions 18 2 Deﬁnitions Several alternative mathematical frameworks soft constraints proposed literature including general frameworks semiring based constraints valued constraints 1243 For simplicity shall adopt valued constraint framework relationship semiring framework discussed brieﬂy Section 8 In valued constraint framework constraint associated function assigns cost possible assignment values These costs chosen valuation structure satisfying following deﬁnition Deﬁnition 21 A valuation structure Ω totally ordered set minimum maximum element denoted 0 commutative associative binary aggregation operator denoted α β γ Ω α 0 α α γ cid3 β γ α cid3 β Deﬁnition 22 An instance valued constraint satisfaction problem VCSP tuple P cid6V D C Ωcid7 V ﬁnite set variables D ﬁnite set possible values Ω valuation structure representing possible costs C set constraints Each element C pair c cid6σ φcid7 σ tuple variables called scope c φ mapping Dσ Ω called cost function c 986 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 Deﬁnition 23 For VCSP instance P cid6V D C Ωcid7 assignment P mapping s V D The cost assignment s denoted CostP s given aggregation costs restrictions s constraint scope CostP s def cid5 sv1 sv2 svm cid3 φ cid4 cid6cid6v1v2vmcid7φcid7C A solution P assignment minimal cost question ﬁnd solution Our results Sections 3 4 apply valuation structure satisfying Deﬁnition 21 In Sections 5 6 7 examples particular soft constraint problems given paper focus valuation structure R consisting nonnegative real numbers inﬁnity usual ordering usual addition operation Possible extensions results valuation structures discussed brieﬂy Section 8 The valuation structure R sufﬁciently ﬂexible allow express wide range problems valued constraint satisfaction problems costs R following examples indicate Example 24 Standard CSP In standard constraint satisfaction problem crisp constraints 1436 constraint c speciﬁed pair cid6σ Rcid7 σ scope c R relation specifying allowed combinations values variables σ For standard constraint satisfaction problem instance P deﬁne corresponding valued constraint satisfaction problem instance cid6P range cost functions constraints set 0 R For crisp constraint cid6σ Rcid7 P deﬁne corresponding valued constraint cid6σ φRcid7 cid6P cost function φR maps tuple allowed R 0 tuple disallowed R The cost assignment s cid6P computed Deﬁnition 23 equals minimal possible cost 0 s satisﬁes crisp constraints P Example 25 MaxCSP For standard constraint satisfaction problem instance P crisp constraints deﬁne corresponding valued constraint satisfaction problem instance P range cost functions constraints set 0 1 R For crisp constraint cid6σ Rcid7 P deﬁne corresponding valued constraint cid6σ χRcid7 P cost function χR maps tuple allowed R 0 tuple disallowed R 1 The cost assignment s P computed Deﬁnition 23 case equals total number crisp constraints P violated s Hence solution P corresponds assignment violates minimal number constraints P satisﬁes maximal number constraints P Finding assignments kind generally referred solving MAXCSP problem 1734 Example 26 Minimum kTerminal Cut MinCut Let G undirected graph vertices V edges E let v1 v2 vk V set k distinguished vertices The problem ﬁnding smallest set edges removal disconnects distinguished vertices known MINIMUM kTERMINAL CUT problem 12 set edges called minimum kterminal cut In special case k 2 problem known MINCUT problem 39 Each instance MINIMUM kTERMINAL CUT problem formulated VCSP instance PG costs R The instance PG constructed follows variables PG vertices V G values set D 1 2 k For distinguished vertex vi v1 v2 vk impose unary constraint variable vi cost function ψi 0 1 R deﬁned follows cid7 ψix x 0 For edge e E impose binary constraint scope e cost function φEQ D2 R deﬁned follows φEQx y cid7 0 1 x y It straightforward check number edges minimum kterminal cut G equal cost solution PG DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 987 Example 27 Level Repair Analysis Level Repair Analysis LORA prescribed procedure defence logistics support planning 22 For complex engineering containing thousands assemblies sub assemblies modules components LORA seeks determine optimal provision repair maintenance facilities minimise overall lifecycle costs In simple model problem presented 22 engineering modelled set items V binary relation E V Ev vcid10 holds item v contained item vcid10 Each item V assigned repair level central repair local repair discard chosen ﬁxed set possible repair levels D There ﬁxed cost cdv associated assignment repair level d D item v V inﬁnite repair level available item There restrictions allowed assignments pairs items related E example item assigned discard items contained item assigned repair level The question ﬁnd assignment repair levels items minimises total cost For LORA instance kind deﬁne corresponding valued constraint satisfaction problem instance P costs R For item v V deﬁne unary constraint cid6cid6vcid7 κvcid7 P cost function κv maps element d D cdv For pair cid6v vcid10cid7 items related E deﬁne valued constraint cid6cid6v vcid10cid7 φcid7 P cost function φ maps pair allowed repair levels 0 pair disallowed repair levels A solution P corresponds assignment repair levels minimises total cost The problem ﬁnding solution valued constraint satisfaction problem NPoptimisation problem lies complexity class NPO 10 formal deﬁnition class For valued constraint satisfaction problem corresponding decision problem question decide solution cost lower given threshold value It clear Example 24 polynomialtime reduction decision problem standard constraint satisfaction problem known NPcomplete 36 general VCSP NPhard In paper consider effect restricting forms cost function allowed constraints cases results tractable versions VCSP Deﬁnition 28 Let D set Ω valuation structure A valued constraint language D costs Ω deﬁned set Γ φ Γ function Dm Ω m N m called arity φ The class VCSPΓ deﬁned class VCSP instances cost functions constraints lie Γ We ﬁnite valued constraint language Γ tractable instance VCSPΓ solved polynomial time We inﬁnite valued constraint language tractable ﬁnite subset1 tractable Finally valued constraint language Γ NPhard decision problem corresponding VCSPΓ cid10 NPcomplete ﬁnite Γ cid10 Γ Example 29 SAT MaxSAT Let Γ valued constraint language set D D 2 In case VCSPΓ called Boolean valued constraint satisfaction problem If restrict Γ allowing cost functions range 0 R Example 24 VCSPΓ corresponds precisely standard Boolean constraint satisfaction problem crisp constraints Such problems known GENERALISED SATISFIABILITY problems 1942 The complexity VCSPΓ restricted sets Γ completely characterised tractable cases identiﬁed 1019 42 Alternatively restrict Γ allowing functions range 0 1 R Example 25 VCSPΓ corresponds precisely standard Boolean maximum satisﬁability problem aim satisfy maximum number crisp constraints Such problems known MAXSAT problems 10 The complexity VCSPΓ restricted sets Γ completely characterised tractable cases identiﬁed Theorem 76 10 1 Deﬁning tractability terms ﬁnite subsets ensures tractability valued constraint language independent cost functions represented explicitly tables values implicitly oracles 988 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 The examples indicate generalising constraint satisfaction framework include valued constraints increase computational complexity For example standard 2SATISFIABILITY problem known tractable 19 valued constraint satisfaction problem involving single binary Boolean function φXOR deﬁned Example 210 NPhard Example 210 Let ΓXOR Boolean valued constraint language D 0 1 contains single binary function φXOR D2 R deﬁned cid7 φXORx y 0 x cid11 y 1 The problem VCSPΓXOR corresponds MAXSAT problem exclusiveor predicate known NPhard Lemma 74 10 ΓXOR NPhard Similarly standard constraint satisfaction problem involving crisp unary constraints equality straints clearly trivial valued constraint satisfaction problem involving unary valued constraints soft version equality constraint speciﬁed function φEQ deﬁned Example 26 NPhard Example 211 Let Γ3 valued constraint language D 0 1 2 consisting set unary functions costs R single binary function φEQ D2 R deﬁned Example 26 Even Γ3 apparently simple shown VCSPΓ3 NPhard reduction MINIMUM 3TERMINAL CUT problem deﬁned Example 26 known NPhard 12 To obtain reduction use construction described Example 26 transform instance MINIMUM 3TERMINAL CUT instance VCSPΓ3 polynomial time In order allow translate easily relations functions described Example 24 following deﬁnitions Deﬁnition 212 Any function φ takes values set 0 Ω called crisp function For relation R arity m deﬁne associated crisp function known feasibility function R denoted φR follows φRx1 x2 xm cid7 cid6x1 x2 xmcid7 R 0 For mary function φ valuation structure Ω deﬁne relation known feasibility relation φ denoted Feasφ follows cid6x1 x2 xmcid7 Feasφ φx1 x2 xm A function φ called essentially crisp φ takes ﬁnite value value α φx β β α Any valued constraint language Γ containing essentially crisp functions called essentially crisp language Note Γ essentially crisp language assignment ﬁnite cost cost assignment ﬁnite cost Hence solve instance VCSPΓ languages solving cor responding standard constraint satisfaction problem valued constraint cid6σ φcid7 replaced crisp constraint cid6σ Feasφcid7 Deﬁnition 212 We use observation number times establishing sults 3 Expressibility Let Γ valued constraint language consider arbitrary instance P VCSPΓ The variables scope constraint P explicitly constrained What subset variables P constrained implicitly combined effect constraints P The cost function describes implicit constraint element Γ sense expressed elements Γ The deﬁnitions formalise idea function expressible valued constraint language DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 989 Deﬁnition 31 For VCSP instance P cid6V D C Ωcid7 tuple distinct variables W cid6v1 vkcid7 cost function P W denoted ΦW P deﬁned follows ΦW P d1 dk def min s V Dcid6sv1svkcid7cid6d1dkcid7 CostP s Note cost function P W kind projection overall cost function speciﬁed subset variables Deﬁnition 32 A function φ expressible valued constraint language Γ exists instance P cid6V D C Ωcid7 VCSPΓ list W variables V φ ΦW P The set functions expressible Γ denoted Γ In cases Γ Γ case Γ contains functions Γ example illustrates Example 33 Let D 0 1 2 D 1 subset integers let Γ1 φ0 φ1 valued constraint language D consisting constant unary cost function φ0 D R deﬁned φ0x 1 unary cost function φ1 D R deﬁned φ1x x In case language Γ1 contains cost functions deﬁned linear expressions nonnegative integer coefﬁcients cost function φ φx1 x2 xm a0φ0x1 mcid2 i1 aiφ1xi set nonnegative integers a0 a1 φ Φ This larger valued constraint language denoted ΓLIN cid6x1xmcid7 P instance P VCSPΓ1 The notion expressibility key tool analysing complexity valued constraint languages result shows Theorem 34 Let Γ Γ cid10 valued constraint languages Γ cid10 Γ If Γ tractable Γ cid10 tractable If Γ cid10 NPhard Γ NPhard Proof Let Γ0 ﬁnite subset Γ cid10 let P cid6V D C Ωcid7 instance VCSPΓ0 let c cid6σ φcid7 constraint C Since Γ cid10 Γ know φ expressible Γ exists instance Pφ VCSPΓ list variables W Pφ ΦW φ Hence replace constraint c P copy Pφ Pφ variables scope σ identiﬁed list variables W remaining variables Pφ disjoint V obtain new problem instance P cid10 Note solutions P cid10 restricted V correspond precisely original solutions P costs By repeating construction constraint c P obtain instance P cid10cid10 VCSPΓ solutions restricted V correspond precisely original solutions P costs Since Γ0 ﬁnite bound size instances Pφ construction size P cid10cid10 bounded constant multiple size P If Γ tractable solve P polynomial time carrying construction polynomial time algorithm VCSPΓ restricting solutions obtained original variables V This sufﬁcient establish Γ cid10 tractable If Γ cid10 NPhard construction establishes Γ NPhard cid2 Example 35 Consider languages Γ1 ΓLIN deﬁned Example 33 Since Γ1 contains unary cost func tions clearly tractable Since ΓLIN Γ1 follows Theorem 34 ΓLIN tractable 990 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 4 Multimorphisms For crisp constraints shown expressive power set relations determined certain algebraic invariance properties relations known polymorphisms 626284146 Throughout rest paper ith component tuple t denoted ti Deﬁnition 41 A polymorphism relation R Dm function f Dk D k t1 tk elements R cid6f t11 tk1 f t1m tkmcid7 Example 42 Let D 0 1 2 D1 subset integers let R ternary relation D deﬁned R cid6x y zcid7 ax cid2 cz b c positive constants Consider function f D2 D deﬁned f x y Minx y For elements t1 t2 R at11 bt12 cid2 ct13 at21 bt22 cid2 ct23 imply cid5 cid4 t11 t21 cid5 cid4 t13 t23 cid5 cid4 t12 t22 b Min cid2 c Min Min Hence f polymorphism R R polymorphism Min The concept polymorphism speciﬁc relations applied directly functions valued constraint language However introduce general notion multimorphism apply directly functions Fig 1 concrete example Deﬁnition 43 Let D set Ω valuation structure φ Dm Ω function We F Dk Dk multimorphism φ list ktuples t1 t2 tm D cid5 cid4 t1i t2i tmi cid5 cid4 F t1i F t2i F tmi kcid3 kcid3 cid2 φ φ 1 i1 i1 If F multimorphism function language Γ F multimorphism Γ Γ multimorphism F The largest language consisting functions φ costs Ω F multimorphism denoted ImpΩ F The notation ImpΩ F abbreviation Improved F term chosen functions F multimorphism precisely functions aggregated value improved lowered left unchanged applying function F coordinatewise suitable collection argument vectors obtain new collection argument vectors Eq 1 Fig 1 An example form inequality shows function φ 0 13 R deﬁned φx y z 3x 2y z multimor phism F cid6Min Maxcid7 See Example 44 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 991 It convenient multimorphism F Dk Dk listing k separate component functions Fi Dk D deﬁned Fix1 xk F x1 xki Example 44 Let D 0 1 2 D 1 subset integers let φ D3 R linear function deﬁned φx y z ax cz b c positive constants Consider function F D2 D2 deﬁned F x y cid6Minx y Maxx ycid7 For list pairs t1 t2 t3 D cid5 cid4 F t1i F t2i F t3i φ 2cid3 i1 cid5 t31 t32 Max cid4 t31 t32 cid5cid9 cid5 φ φ Min 2cid3 cid8 φ cid5cid9 cid4cid8 cid5cid5 cid4 Min cid4 t31 t32 cid5 cid4 t11 t12 Max Min cid5 cid4 t11 t12 i1 cid4 cid4 Min Min cid5 cid4 cid4 t11 t12 Max cid5 cid4 t11 t12 cid4 t11 t12 cid5 t21 t22 Min cid5 cid4 cid4 t31 t32 t21 t22 Max Max cid5 cid4 cid5 cid4 t31 t32 c Min t21 t22 b Min cid5 cid5 cid4 cid4 t11 t12 t21 t22 b Max Max cid5 cid4 cid5 cid4 c t21 t22 b t11 t12 cid5 cid4 t1i t2i t3i cid5 cid4 t31 t32 c Max cid5 cid4 t31 t32 2cid3 cid5cid5 φ i1 A particular concrete example illustrated Fig 1 Hence F multimorphism φ φ multimorphism cid6Min Maxcid7 The result establishes multimorphisms key property extend functions expressible given language Theorem 45 If F multimorphism valued constraint language Γ F multimorphism Γ Proof Let F multimorphism Γ let φ1 φ2 arbitrary elements Γ By Deﬁnition 43 F multi morphism φ1 φ2 Similarly Eq 1 holds choices tuples t F multimorphism function obtained minimising φ1 subset arguments Hence Deﬁnition 32 F multimorphism function Γ cid2 We important classes functions characterised property having particular form multimorphism Example 46 For ﬁnite set V realvalued function ψ deﬁned subsets V called submodular func tion 39 subsets S T V ψS T ψS T cid2 ψS ψT 2 The problem SUBMODULAR FUNCTION MINIMISATION consists ﬁnding subset S V value ψS minimal Such problems arise number different contexts 39 For example Cunningham 11 showed ﬁnding maximum ﬂow network viewed special case general problem submodular function minimisation It known long time submodular functions minimised polynomial time ellipsoid method 20 Recently different strongly polynomial combinatorial algorithms proposed problem 162344 Any function ψ deﬁned subsets set V v1 vn associated function φ 0 1n R deﬁned follows tuple t DV set φt ψT T vi ti 1 992 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 For tuples s t 0 1 set S vi si 1 T vi ti 1 S T vi Minsi ti 1 Min function returning minimum arguments Similarly S T vi Maxsi ti 1 Max function returning maximum arguments Hence comparing Eq 2 Eq 1 Deﬁnition 43 follows ψ submodular corresponding cost function φ multimorphism cid6Min Maxcid7 Example 47 For ﬁnite set V realvalued function ψ deﬁned pairs disjoint subsets V called bisubmodular function 18 pairs cid6S1 S2cid7 cid6T1 T2cid7 disjoint subsets V cid5 cid4 cid6S1 S2cid7 cid18 cid6T1 T2cid7 cid5 cid4 cid6S1 S2cid7 cid17 cid6T1 T2cid7 cid5 cid4 cid6T1 T2cid7 cid5 cid4 cid6S1 S2cid7 cid2 ψ ψ ψ 3 ψ cid6S1 S2cid7 cid17 cid6T1 T2cid7 cid6S1 T1 S2 T2cid7 cid8 cid6S1 S2cid7 cid18 cid6T1 T2cid7 S1 T1 S2 T2 S2 T2 S1 T1 cid9 It known 18 bisubmodular function ψ takes integer values minimised OV 5 log M time M designates maximum value function ψ Any function ψ deﬁned pairs disjoint subsets set V v1 vn associated function φ 0 1 2n R deﬁned follows tuple t DV set φt ψcid6T1 T2cid7 T1 vi ti 1 T2 vi ti 2 Arguing Example 46 follows Eq 3 ψ bisubmodular corresponding cost function φ multimorphism cid6min0x y max0x ycid7 cid10 min0x y max0x y cid7 Minx y 0 Maxx y 0 x y cid11 1 2 x y cid11 1 2 In Section 6 wide range tractable optimisation problems costs R characterised presence certain forms multimorphism In Section 7 Boolean case tractable optimisation problem form VCSPΓ characterised presence particular multimorphism A function F k Dk called conservative possible choice x1 x2 xk tuple F x1 x2 xk contains multiset values x1 x2 xk order Example 48 For totally ordered set D function F Dk Dk returns arguments sorted order conservative For example function F D2 D2 deﬁned F x y cid6Minx y Maxx ycid7 conservative On hand function F D2 D2 deﬁned F x y cid6Maxx y Maxx ycid7 conservative Lemma 49 Any conservative function F Dk Dk multimorphism unary cost functions Proof If F conservative Eq 1 Deﬁnition 43 holds equality unary function φ F multimorphism unary function cid2 There close relationship polymorphisms relation R multimorphisms correspond ing feasibility function φR result makes clear Proposition 410 Let R relation arity m let φR corresponding feasibility function range 0 deﬁned Deﬁnition 212 For collection polymorphisms f1 f2 fk Dk D R function F Dk Dk multimorphism φR F x1 x2 xk cid8 cid9 f1x1 x2 xk f2x1 x2 xk fkx1 x2 xk Furthermore F Dk Dk multimorphism function φ Dm R k component functions F polymorphism relation Feasφ DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 993 Proof Follows immediately Deﬁnitions 41 43 restricted special case crisp functions cid2 Proposition 410 shows special case crisp cost functions multimorphism seen simply collection polymorphisms need distinct polymorphism seen simply component function multimorphism Hence notion multimorphism viewed extension generalisation notion polymorphism 5 A family NPhard languages In remainder paper use results obtained classify complexity wide range valued constraint languages costs R We start establishing sufﬁcient condition language NPhard Proposition 51 Let Γ valued constraint language set D costs R If exist d d cid10 D α β R α β binary function φ given XORβ α φ XORβ α x y cid11 x cid11 y x y d d cid10 x y x y d d cid10 α β expressible Γ VCSPΓ NPhard ﬁnite cost assigns values Proof An assignment instance VCSPφ d d cid10 constrained variables Hence restrict variables values Lemma 74 10 states twovalued problem VCSPφXOR NPhard φXOR Boolean exclusiveor function deﬁned Example 210 Since adding constant cost functions scaling costs constant factor affect difﬁculty solving VCSP instance valuation structure R conclude VCSPφ NPhard Hence Theorem 34 VCSPΓ NPhard cid2 XORβ α XORβ α Next set multimorphisms Boolean language shown NPhard Proposition 51 restricted Deﬁnition 52 A function f Dk D called essentially unary exists nonconstant unary function g D D index 1 2 k f d1 d2 dk gdi choices d1 d2 dk Deﬁnition 53 An injective multimorphism component function essentially unary called trivial Theorem 54 A function F 0 1k 0 1k multimorphism valued Boolean constraint language ΓXOR deﬁned Example 210 F trivial Proof It straightforward check injective function F 0 12 0 12 component function essentially unary multimorphism ΓXOR φXOR To establish converse let D 0 1 let F Dk Dk multimorphism φXOR By Deﬁnition 43 s t Dk kcid2 i1 cid4 cid5 F si F ti cid2 φXOR cid5 cid4 si ti φXOR kcid2 i1 For pair tuples s t deﬁne Hamming distance s t denoted H s t number coordinate positions differ We rewrite inequality Hamming distances obtain s t Dk k H cid5 cid4 F s F t cid2 k H s t 994 s t Dk H DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 cid5 cid4 F s F t cid3 H s t 4 This implies F injective bijection Dk Dk summing elements Dk obtain cid2 H stDk cid5 cid4 F s F t cid2 H s t stDk From Eqs 4 5 follows cid5 cid4 F s F t s t Dk H H s t Now let 0 zero ktuple deﬁne function PF Dk Dk setting cid10 PF si 1 si si F 0i 1 5 6 Since φXORa b φXOR1 1 b cid4 PF cid5 cid4 F s PF cid5 cid4 F t cid5 φXOR kcid2 i1 cid5 cid4 F si F ti φXOR kcid2 i1 F PF multimorphism φXOR By construction PF F 0 0 follows Eq 6 setting t 0 F PF conservative Let ti ktuple zero position We reorder components conservative function F PF obtain function F cid10 ﬁxes ti Now consider ktuple s The function F cid10 conservative Eq 6 H F cid10s ti H s ti ti It follows F cid10s ones exactly s F cid10 identity function Hence F PF simply returns list arguments ﬁxed order Finally F F PF PF follows component function F essentially unary cid2 Corollary 55 Let Γ valued constraint language 0 1 costs R deﬁned Proposition 51 expressible Γ α β R α β If cost function φ XORβ α multimorphism Γ trivial Proof Follows immediately Theorems 54 45 fact set multimorphisms cost function costs R unchanged adding constant scaling values constant factor cid2 6 Multimorphisms tractable languages In section present maximal tractable valued constraint languages costs R Some translations known tractable optimisation problems VCSP framework novel tractable classes In cases able characterisation tractable language terms single multimorphism Hence cases presence certain kind multimorphism sufﬁcient guarantee tractability We ﬁrst following observations If Γ tractable valued constraint language costs R set relations Feasφ φ Γ tractable crisp constraint language By results 62628 implies relation Feasφ ﬁxed set polymorphisms guarantees tractability set relations By Proposition 410 know F Dk Dk multimorphism function φ k component functions F polymorphism relation Feasφ Hence search tractable valued constraint languages costs R sensible place start consid ering multimorphisms component functions polymorphisms guarantee tractability The DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 995 straightforward examples polymorphisms constant functions maximum minimum functions dered sets majority functions minority functions 26 examples section obtained combining simple functions ways We Section 7 examples considered section sufﬁcient obtain complete charac terisation complexity valued Boolean constraint languages costs R 61 Constant multimorphisms The ﬁrst example consider straightforward family tractable languages characterised pres ence single unary multimorphism constant value Lemma 61 A cost function φ unary multimorphism constant value d value φd d d smallest value range φ Example 62 A constant cost function possible constant unary multimorphisms Example 63 The valued constraint language ΓLIN deﬁned Example 33 constant unary multimorphism value 0 Although proof tractability case trivial proof language characterised constant multimorphism maximal tractable language interesting provides simple example techniques shall use cases Theorem 64 Let D set let F D D constant function 1 The set functions ImpRF tractable valued constraint language 2 Any valued constraint language Γ Γ ImpR F NPhard Proof Let dF constant value F 1 Let φ function ImpR F let m arity φ Since F multimorphism φ d1 d2 dm D φdF dF dF cid2 φd1 d2 dm Hence instance P VCSPImpR F solution assigns value dF variable VCSPImpR F tractable 2 Now assume Γ ImpRF Γ contains function φ arity m F multimorphism φ Hence exist d1 d2 dm D φdF dF dF φd1 d2 dm If φdF dF set μ φdF dF φd1 dm2 set μ 1 Choose i0 di0 cid11 dF Now deﬁne functions δ ψ follows cid10 cid6x1 xmcid7 cid6d1 dmcid7 cid6dF dF cid7 δx1 xm cid7 ψx1 x2 x3 0 μ cid6x1 x2 x3cid7 cid6di0 di0 di0 0 cid7 cid6di0 dF dF cid7 Note δ ψ ImpRF Γ We construct instance P VCSPΓ variables X1 Xm Y1 Ym Z1 Zm constraints cid8 cid6X1 Xmcid7 φ cid9 cid8 cid6Y1 Ymcid7 δ cid7 ψ cid6Xi0 Yi0 Zi0 cid8 cid9 cid9 cid8 cid9 cid6X1 Xmcid7 δ cid9 cid8 cid6Z1 Zmcid7 δ 996 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 If set W cid6Yi0 Zi0 cid7 straightforward check cid11 ΦW P x y φd1 d2 dm μ φd1 d2 dm x cid11 y x y dF di0 x y x y dF di0 Hence Proposition 51 VCSPΓ NPhard cid2 Example 65 Recall Example 29 MAXSAT optimisation problem maximal tractable classes identiﬁed 10 Two characterised having constant function multimor phism referred 10 0valid relations 1valid relations2 62 The multimorphism cid6Min Maxcid7 The example consider family valued constraint languages set D characterised pres ence single binary multimorphism cid6Min Maxcid7 binary operations Min Max return minimum maximum values respect ﬁxed total ordering D These languages include class submodular set functions economics operations research 39 Example 46 Lemma 66 Let D ﬁnite totally ordered set A function φ Dm R multimorphism cid6Min Maxcid7 satisﬁes following conditions φ ﬁnitely submodular mtuples s t φs φt cid5 cid4 Mins t φ cid5 cid4 Maxs t φ cid2 φs φt operations Min Max applied coordinatewise Feasφ polymorphisms Min Max Proof If φ multimorphism cid6Min Maxcid7 properties follow immediately Deﬁnition 43 Proposition 410 Conversely φ ﬁnitely submodular satisﬁes Eq 1 Deﬁnition 43 choices t1 t2 cid2 The second condition Lemma 66 implies set mtuples φ ﬁnite sublattice set mtuples lattice operations operations Min Max applied coordinatewise Theorem 492 45 implies realvalued submodular function deﬁned sublattice extended submodular function lattice Hence Lemma 66 function multimorphism cid6Min Maxcid7 expressed sum ﬁnitevalued submodular function crisp function φR associated relation R polymorphisms Min Max Theorem 67 Let D ﬁnite totally ordered set let F D2 D2 function deﬁned F d d cid10 cid6Mind dcid10 Maxd d cid10cid7 1 The set functions ImpRF tractable valued constraint language 2 Any valued constraint language Γ Γ ImpRF NPhard Proof Assume simplicity D 0 1 2 D 1 usual ordering 1 To establish tractability set functions ImpR F problem reduced problem minimising realvalued submodular set function 39 special family sets known ring family 44 This problem solved polynomial time algorithm Schrijver 44 Let P V D C R instance VCSPImpR F By Lemma 66 feasibility relation corresponding constraint P polymorphisms Min Max Hence standard constraint satisfaction problem 2 The tractable class MAXSAT problem discussed Example 68 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 997 instance relations crisp constraints solved polynomial time results 29 But means determine polynomialtime assignment P ﬁnite cost If assignment P inﬁnite cost return arbitrary assignment solution Otherwise deﬁne set Q D V associate assignment s P ﬁnite cost subset Qs Q deﬁned follows cid13 cid12 cid6d vcid7 Q v V d cid2 sv Qs Now straightforward check pair assignments s t ﬁnite cost Qs Qt QMaxst Qs Qt QMinst Hence subsets Q associated assignments ﬁnite cost form collection C closed union intersection Such collection referred 44 ring family Finally deﬁne realvalued function ψ C setting ψQs CostP s Note F multimorphism cost function P S T C ψS T ψS T cid2 ψS ψT Hence ψ realvalued submodular set function deﬁned ﬁnite ring family C minimised polynomialtime algorithm described 44 The output algorithm element Qs C corre sponding solution s P problem tractable 2 Now assume Γ ImpRF Γ contains function φ arity m F multimorphism φ Hence exist s scid10 Dm cid4 Mins s cid10 cid5 φ cid4 φ Maxs s cid10 φs φs cid10 cid5 operators Min Max applied coordinatewise tuples s scid10 It follows ﬁnd indexes j si scid10i sj scid10j We deﬁne mary function δ takes value 0 tuples s scid10 Maxs scid10 Mins scid10 cases Note δ ImpR F Γ Deﬁne λ μ follows cid4 cid5 Mins s cid4 cid10 Maxs s cid4 λ min φ cid4 μ min φ cid10 φs φs cid5 φs φs cid10 cid5 cid5 1 cid10 1 It straightforward check φs φscid10 λ μ Now deﬁne binary functions ζ x y κx y cid11 μ x y 0 scid10i x y 1 si λ 0 φscid10 1 φs 1 0 x y sj 0 x y sj 1 x y scid10j 0 x y scid10j 1 Note ζ κ ImpRF Γ We construct instance P VCSPΓ variables X Y V1 Vm W1 Wm 998 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 constraints cid8 cid9 cid9 cid8 cid6V1 Vmcid7 δ cid8 cid6V1 Vmcid7 φ cid6Wi Xcid7 κ cid9 cid6X Vicid7 ζ cid9 cid8 cid9 cid9 cid8 cid6W1 Wmcid7 δ cid8 cid6W1 Wmcid7 φ cid8 cid6Vj Y cid7 κ cid6Y Wj cid7 ζ cid9 cid9 cid8 If set W cid6X Y cid7 straightforward check λ μ φs φscid10 λ μ λ μ x cid11 y x y 0 1 x y x y 0 1 P x y ΦW cid11 Hence Proposition 51 VCSPΓ NPhard cid2 Example 68 Recall Example 29 MAXSAT optimisation problem maximal tractable classes identiﬁed 10 Two characterised having constant multimorphism Example 65 The characterised having multimorphism cid6Min Maxcid7 class referred 10 class 2monotone relations deﬁned class relations deﬁnable logical expression form x1 x2 xp y1 y2 yq x y variables necessarily distinct Example 69 It follows Lemma 49 Example 48 unary function multimorphism cid6Min Maxcid7 Example 610 Let D 0 1 M set integers It follows Example 69 Theorem 45 language ΓLIN deﬁned Example 33 consisting functions D deﬁned linear expressions positive integer coefﬁcients multimorphism cid6Min Maxcid7 Example 611 A function φ 0 1m R called pseudoBoolean function 3 It straightforward check table values function φ deﬁned φx y x1 y multimorphism cid6Min Maxcid7 It follows Example 610 Theorem 45 language Γ consisting nonnegative functions 0 1 deﬁned expressions form a0 ij aij xixj ai aij nonnegative integers multimorphism cid6Min Maxcid7 tractable Theorem 67 aixi cid18 cid18 Example 612 It shown Example 26 MINIMUM kTERMINAL CUT problem formu lated instance VCSPΓk language Γk consisting crisp unary constraints cost function φEQ 0 1 k2 R deﬁned Example 26 In special case k 2 straightforward verify cost function φEQ multimorphism cid6Min Maxcid7 Using fact Example 69 Theorem 67 implies MINCUT problem solved polynomial time Compare Example 211 Example 613 It follows immediately Deﬁnition 43 binary function φ D2 R multimorphism cid6Min Maxcid7 u v x y D u x v y φu v φx y cid2 φu y φx v Using observation straightforward check ﬁnite set real values D following binary functions multimorphism cid6Min Maxcid7 VCSP instance involving constraints cost functions forms tractable cid10 ax cid2 c constants b c b 0 δx y 0 cid19 x2 y2 ηx y ζ x y x yr r cid3 1 Using observations Example 69 conclude discrete optimisation problem described Exam ple 11 solved polynomial time A specialised algorithm binary soft constraints kinds runs cubic time given previous paper 7 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 999 63 The multimorphism cid6Max Maxcid7 The example consider family valued constraint languages set D characterised presence single binary multimorphism cid6Max Maxcid7 binary operation Max returns maximum value respect ﬁxed total ordering D These languages generalise crisp maxclosed constraint languages introduced shown tractable 29 We ﬁrst function values R multimorphism cid6Max Maxcid7 satisﬁes simple conditions For tuples u v ordered set D write u cid2 v ui cid2 vi coordinate position Lemma 614 A function φ Dk R multimorphism F D2 D2 F d d cid10 cid6Maxd d cid10 Maxd d cid10cid7 satisﬁes following conditions φ ﬁnitely antitone tuples u v φu φv u cid2 v φu cid3 φv Feasφ polymorphism Max Proof If φ multimorphism F tuples u v φu φv cid3 2φMaxu v implies conditions hold Conversely φ multimorphism F exist tuples u w φu φw 2φMaxu w Hence loss generality assume φu φMaxu w Setting v Maxu w u v φu φv If φv ﬁrst condition lemma hold φv second condition fails hold cid2 By Lemma 614 function multimorphism cid6Max Maxcid7 expressed sum ﬁnitevalued antitone function crisp function φR associated relation R polymorphism Max Theorem 615 Let D totally ordered ﬁnite set let F D2 D2 function deﬁned F d d cid10 cid6Maxd dcid10 Maxd d cid10cid7 1 The set functions ImpRF tractable valued constraint language 2 Any valued constraint language Γ Γ ImpR F NPhard Proof Assume simplicity D 0 1 2 D 1 usual ordering 1 To establish tractability ImpRF explicit polynomialtime algorithm VCSPΓ ﬁxed ﬁnite subset ImpR F Let Γ ﬁnite subset ImpRF let P V D C R instance VCSPΓ To constraint c cid6σ φcid7 C associate crisp constraint c cid6σ Feasφcid7 allows precisely tuples values t φt We establish arc consistency 37 constraint satisfaction problem formed associated crisp constraints This successively removing values domain variable unsupported extended compatible values variables scope constraint containing v Since Γ ﬁnite arity constraint relations bounded arcconsistency achieved polynomial time 37 For variable v let Dv domain v establishing arc consistency If domains assignment P cost assignment solution Otherwise let dv largest supported value variable v These values computed polynomial time By Lemma 614 constraint P ﬁnitely antitone assigning dv variable v optimal solution P 2 Now assume Γ ImpRF Γ contains function φ arity m F multimorphism φ Hence exist s scid10 Dm φs φs cid4 Maxs s cid5 2φ cid10 cid10 1000 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 si0 scid10cid10i0 δ ImpR F Γ cid11 ψx y operator Max applied coordinatewise tuples s scid10 Set scid10cid10 Maxs scid10 We consider cases depending φscid10cid10 cost Case 1 φscid10cid10 Without loss generality assume φscid10cid10 φs In case index i0 We deﬁne mary function δ takes value 0 tuples s scid10cid10 cases Note We deﬁne binary function ψ follows 2φscid10cid10 2φs cid6x ycid7 cid6si0 si0cid7 cid6x ycid7 cid6si0 scid10cid10i0cid7 cid6scid10cid10i0 si0cid7 cid6scid10cid10i0 scid10cid10i0cid7 Note ψ ImpR F Γ We construct instance P VCSPΓ variables X1 Xm Y1 Ym cid9 cid8 cid8 cid6Y1 Ymcid7 φ cid9 cid6Y1 Ymcid7 δ cid9 constraints cid8 cid6X1 Xmcid7 φ cid8 cid9 cid6X1 Xmcid7 δ cid8 cid6Xi0 Yi0 If set W cid6Xi0 Yi0 cid7 ψ cid9 cid11 cid7 straightforward check ΦW P x y x cid11 y x y si0 scid10cid10i0 x y x y si0 scid10cid10i0 Hence Proposition 51 VCSPΓ NPhard φscid10cid10 3φs 2φscid10cid10 φs Case 2 φscid10cid10 Consider relation Feasφ containing precisely tuples value φ ﬁnite Since hypoth esis φs φscid10 φscid10cid10 s scid10 Feasφ scid10cid10 Maxs scid10 cid11 Feasφ That relation Feasφ polymorphism Max Now let LMax crisp constraint language D consisting relations polymorphism Max It shown 29 LMax maximal tractable language class crisp constraint sat isfaction problems constraint relations chosen LMax Feasφ NPcomplete By representing crisp constraints valued constraints corresponding feasibility functions cost functions described Example 24 obtain polynomialtime reduction problem decision problem associated VCSPΓ Hence VCSPΓ NPhard cid2 Example 616 Let D 0 1 2 M subset integers let ΓAT set antitone cost functions D costs R These cost functions express preference larger values x2 y2 z2 select arguments For example ternary function φ deﬁned φx y z 3M point D3 far possible origin By Lemma 614 ΓAT multimorphism cid6Max Maxcid7 tractable Theorem 615 cid20 Example 617 The constraint programming language CHIP 47 incorporates number constraint solving tech niques arithmetic constraints In particular provides constraint solver restricted class crisp constraints natural numbers referred basic constraints These basic constraints kinds referred domain constraints arithmetic constraints The domain constraints unary constraints restrict value variable speciﬁed ﬁnite subset natural numbers The arithmetic constraints unary binary constraints following forms aX cid11 b aX bY c DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 1001 aX cid2 bY c aX cid3 bY c variables represented uppercase letters constants lower case letters All constants non negative nonzero If represent crisp constraints valued constraints corresponding feasibility functions cost functions described Example 24 easy verify multimorphism cid6Max Maxcid7 form tractable valued constraint language Theorem 615 Moreover tractable language extended shown 29 include feasibility functions following nonbinary relations multimorphism cid6Max Maxcid7 a1X1 a2X2 ar Xr cid3 bY c aX1X2 Xr cid3 bY c a1X1 cid3 b1 a2X2 cid3 b2 ar Xr cid3 br aY cid2 b The tractable language consisting crisp constraint functions multimorphism cid6Max Maxcid7 denoted ΓMC Example 618 By Lemma 614 Theorem 34 combine tractable languages ΓAT deﬁned Exam ple 616 ΓMC deﬁned Example 617 obtain larger tractable language ΓAT ΓMC In fact ImpR cid6Max Maxcid7 ΓAT ΓMC This larger tractable language includes functions binary function φ D2 R deﬁned cid10 φx y M xM y x y x cid3 y This function expressed sum antitone function ψx y M xM y function φR R cid6x ycid7 x y It express preference larger values x y provided x y 64 Majority minority multimorphisms The example consider family valued constraint languages set D characterised presence single ternary multimorphism cid6F1 F2 F3cid7 component function Fi majority operation deﬁned follows Deﬁnition 619 A function f D3 D called majority operation x y D f x x y f x y x f y x x x Languages multimorphism kind shown essentially crisp complexity determined techniques developed standard constraint satisfaction problem crisp constraints In fact problems involving languages viewed generalisation standard tractable 2SATISFIABILITY problem larger ﬁnite domains Proposition 620 Any valued constraint language costs R multimorphism cid6F1 F2 F3cid7 Fi majority operation essentially crisp language tractable Proof Let Γ valued constraint language multimorphism cid6F1 F2 F3cid7 let φ kary cost function Γ If Fi majority operation follows Deﬁnitions 619 43 x y Dk 3φx cid2 φx φx φy 3φy cid2 φy φy φx Hence φx φy ﬁnite φx cid2 φy φy cid2 φx equal means φ essentially crisp Furthermore φ Γ relation Feasφ polymorphism F1 majority operation follows Theorem 57 26 VCSPΓ tractable cid2 1002 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 Similar arguments minority operations deﬁned follows Deﬁnition 621 A function f D3 D called minority operation x y D f x x y f x y x f y x x y Proposition 622 Any valued constraint language costs R multimorphism cid6F1 F2 F3cid7 Fi minority operation essentially crisp language tractable Proof Let Γ valued constraint language multimorphism cid6F1 F2 F3cid7 let φ kary cost function Γ If Fi minority operation x y Dk 3φx cid2 φx φy φy 3φy cid2 φy φx φx Hence φx φy ﬁnite φx cid2 φy φy cid2 φx equal means φ essentially crisp Furthermore φ Γ relation Feasφ polymorphism F1 minority operation Maltsev operation 13 follows Theorem 1 13 VCSPΓ tractable cid2 65 The multimorphism cid6Mjrty1 Mjrty2 Mnrty3 cid7 The ﬁnal example consider valued constraint language costs R characterised cid7 cid10 y x Mjrty1x y z presence single ternary multimorphism cid6Mjrty1 Mjrty2 Mnrty3 y z x z y z z cid11 x x z z cid11 y Mnrty3x y z Mjrty2x y z x y cid11 x y z cid10 Note Mjrty1 Mjrty2 majority operations3 Mnrty3 minority operation Deﬁnitions 619 621 We section function taking values R multimorphism simple form The proof fact involved include largely result turns essential complete classiﬁcation Boolean case Section 7 Despite simplicity associated constraint language multimorphism deﬁnes maximal tractable class We ﬁrst need technical lemma For mtuple s set D write si d denote tuple d D substituted position In words si d mtuple identical s possibly position equal d Lemma 623 A function φ Dm R expressed sum unary functions tuples s t Dm 1 m cid21 cid4 si s φs φt φ ti cid22cid5 φ cid4 t cid22cid5 7 cid21 Proof Suppose φ expressed sum unary functions This means exist φ1 φm tuples s cid6s1 smcid7 t cid6t1 tmcid7 mcid2 cid4 cid5 φisi φiti φs φt i1 By rearranging terms summation Eq 7 3 The operation Mjrty1 known dual discriminator operation 46 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 1003 Conversely suppose φ satisﬁes Eq 7 We implies φ expressed sum unary functions Let s0 cid6s01 s0mcid7 mtuple φ achieves minimum cost s Dm φs0 cid2 φs If φs0 φ takes ﬁnite value φx1 xm So assume φs0 For 1 m let μi unary cost function deﬁned cid12 φx1 xm xi x μix min cid13 cid18 8 m i1 ζ xi ζ x result holds x D choose witness wx Dm wx Note tuples cid6x1 xmcid7 xi x x φwx μix μix cid2 φx1 xm We x D μix φs0 φwx cid4 wx φ cid4 wx φ cid3 φs0 φ μix cid3 φ μix cid2 φ μix φ φs0 cid21 cid5 cid4 wx s0i φ s0 cid5 cid5 cid4 s0i x φ s0i cid5 cid4 s0i x cid5 cid4 s0i x cid5 cid4 s0i x cid5 cid4 s0i x 9 cid22cid5 choice wx Eq 7 choice wx Eq 8 cancelling φs0 Eq 9 Now consider arbitrary tuple s cid6x1 xmcid7 By applying Eq 7 m 1 times obtain cid5 cid4 s0i xi φs m 1φs0 μixi mcid2 mcid2 φ i1 i1 Eq 8 ensures choosing φix μix φs0 2 m deﬁned Finally choosing φ1x μ1x gives result cid2 Using result function multimorphism cid6Mjrty1 Mjrty2 Mnrty3 expressed sum unary functions binary functions following kind cid7 Deﬁnition 624 Let D set Ω valuation structure A crisp binary function φ D2 Ω called permutation restriction x D y φx y 0 cid23 cid12 cid23 cid13cid23 cid23 cid2 1 cid23 cid23 cid12 y φy x 0 cid13cid23 cid23 cid2 1 Theorem 625 Let D ﬁnite set let F D3 D3 function deﬁned F x y z cid6Mjrty1x y z Mjrty2x y z Mnrty3x y zcid7 A kary function φ belongs set ImpR F expressed sum unary functions permutation restrictions Proof By Theorem 45 function expressed sum unary functions permu tation restrictions ImpRF sufﬁcient unary functions permutation restrictions ImpR F Since F conservative know Lemma 49 F multimorphism unary functions Now let π arbitrary permutation restriction consider arbitrary triples t1 t2 D3 If cid24 cid24 3 3 πt1i t2i F trivially satisﬁes inequality i1 πt1i t2i i1 πF t1i F t2i cid2 sider case πt1i t2i In case t2i determined corresponding t1i 1004 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 π permutation restriction Suppose pairs cid6t1i t2icid7 equal cid6p qcid7 pair cid6r scid7 Then deﬁnition F cid6F t11 F t21cid7 cid6F t12 F t22cid7 3 cid6p qcid7 cid6F t13 F t23cid7 cid6r scid7 F satisﬁes inequality i1 πF t1i F t2i cid2 cid24 3 i1 πt1i t2i equality The remaining case consider pair cid6t1i t2icid7 dis case deﬁnition F gives cid6F t1i F t2icid7 cid6t1i t2icid7 1 2 3 tinct cid24 3 i1 πF t1i F t2i πt1i t2i Hence F multimorphism permutation restriction Conversely suppose φ kary function ImpRF In remainder proof shall establish cid24 φ expressed sum unary functions permutation restrictions Consider kary relation Feasφ It follows Proposition 410 Feasφ polymor phisms Mjrty1 Mjrty2 Mnrty3 Any relation majority operation Mjrty1 polymorphism known decomposable binary projections 2546 This means cid6x1 xkcid7 Feasφ exactly j 1 k cid6xi xj cid7 Rij Rij cid12 cid13 cid6xi xj cid7 cid6x1 x2 xkcid7 Feasφ Furthermore polymorphisms preserved taking projections 26 binary relations Rij polymorphisms Mjrty1 Mjrty2 Mnrty3 Binary relations polymorphism Mjrty1 previously characterised 46 relation known following forms Feasμ1 μ2 μ1 μ2 unary functions Feasπ π permutation restriction cid6x ycid7 D1 D2 x d1 y d2 d1 d2 D D1 D2 D D1 1 D2 1 Of straightforward check ﬁrst Mnrty3 polymorphism Therefore φ expressed sum functions following form cid2 cid2 φx1 xk ψx1 xk πixai xbi μj xcj 10 iI j J ψ cost function taking ﬁnite values πi permutation restriction μj crisp unary function Let G graph vertices 1 k edges cid6ai bicid7 I Choose set M m1 mr containing representative connected component G deﬁne function η follows cid12 ηy1 yr def min φx1 xk xmi 11 By choice M vertex 1 k connected G exactly mi Hence cid6y1 yr cid7 Dr yi 1 r cid13 cid12 cid23 cid23 cid6x1 xkcid7 φx1 xk xmi Let cid6x1 xkcid7 Dk set cid6y1 yr cid7 cid6xm1 xmr equality φx1 xk ﬁnite yi 1 r cid13cid23 cid23 cid2 1 cid7 We Eq 12 ηy1 yr cid2 φx1 xk 12 It remains prove η expressed sum unary functions Let 1 cid2 j cid2 r s cid6s1 sr cid7 t cid6t1 tr cid7 Dr First suppose ηs ηt Since φ ImpRF η expressible φ know Theorem 45 η ImpR F cid5 cid4 η tj sj ηs η cid5 cid4 sj tj cid3 ηs ηs ηt Cancelling ηs symmetry obtain cid5 cid4 sj tj η cid5 cid4 tj sj η ηs ηt 13 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 1005 Otherwise loss generality assume ηs φx1 xk cid7 s Using Eq 10 implies single index si Hence Eq 13 holds case sides equal x1 xk cid6xm1 xmr φx1 xk x1 xk xmi Hence cases Lemma 623 η expressed sum unary functions cid2 Corollary 626 A function φ Dm R multimorphism cid6Mjrty1 Mjrty2 Mnrty3 following conditions cid7 satisﬁes φ ﬁnitely modular mtuples s t 1 m φs φt φsi ti φti si ti cid21 cid4 si s Feasφ polymorphisms Mjrty1 Mnrty3 φs φt φ φ cid4 t cid22cid5 cid21 cid22cid5 We prove set functions multimorphism cid6Mjrty1 Mjrty2 Mnrty3 tractable valued constraint language cid7 maximal Theorem 627 Let D ﬁnite set let F D3 D3 function deﬁned F x y z cid6Mjrty1x y z Mjrty2x y z Mnrty3x y zcid7 1 The set ImpRF tractable valued constraint language 2 Any valued constraint language Γ Γ ImpR F NPhard Proof 1 This straightforward application Theorem 625 To solve instance VCSPImpRF simply merge pair variables constrained permutation restriction combining associated unary constraints appropriately The resulting VCSP instance unary constraints solved trivially 2 Now assume Γ ImpRF Γ contains function φ arity m F multimorphism φ By Corollary 626 3 cases consider Case 1 φ ﬁnitely modular In case exist j 1 m s cid6s1 smcid7 t cid6t1 tmcid7 Dm cid5 cid4 tj sj cid5 cid4 sj tj φs φt φ φ values inequality ﬁnite For 1 2 m deﬁne following permutation restrictions cid11 ζix y x s1 y si x t1 y ti 0 0 κix y x s1 y ti x t1 y si 0 0 cid11 Note ζi κi ImpRF Γ We construct instance P VCSPΓ variables X1 Xm Y1 Ym Z constraints cid8 cid9 cid9 cid6X1 Y1cid7 κ1 cid8 cid6X1 Xmcid7 φ cid8 cid6Z Xj cid7 κj cid8 cid6X1 Xicid7 ζi cid8 cid9 cid6Y1 Yicid7 ζi cid9 cid9 cid8 cid9 cid9 cid6Y1 Ymcid7 φ cid8 cid6Z Yj cid7 ζj 1 2 j 1 j 1 m 1 2 j 1 j 1 m If set W cid6X1 Zcid7 straightforward check cid11 ΦW P x y φs φt φsj tj φtj sj x cid11 y x y s1 t1 x y x y s1 t1 1006 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 Hence Proposition 51 VCSPΓ NPhard Case 2 Feasφ polymorphism Mjrty1 Let FeasΓ Feasψ ψ Γ let P set polymorphisms FeasΓ Since Γ contains permutation restrictions algebra set operations P homogeneous deﬁned 46 A complete description homogeneous ﬁnite algebras given Chapter 5 46 straightforward verify4 P contain operation Mjrty1 element P polymorphism relation R cid6d0 d0 d0cid7 cid6d0 d1 d1cid7 cid6d1 d0 d1cid7 cid6d1 d1 d0cid7 d0 d1 D Hence Theorem 410 24 relation R expressed ﬁnite combination relations FeasΓ This implies Γ contains function φ φs exactly s R Now set α ψd0 d1 d1 ψd1 d0 d1 β ψd1 d1 d0 ψd0 d0 d0 We deﬁne binary permutation restriction π unary function μ follows x d0 y d1 x d1 y d0 cid10 πx y cid11 μx 0 α 1 x d0 x d1 0 We construct instance P VCSPΓ variables X Y Z X cid10 Y cid10 constraints cid8 cid6X Y Zcid7 ψ cid8 cid9 cid6X Xcid10cid7 π cid6Zcid7 μ cid9 cid8 cid9 cid8 cid8 cid6Xcid10 Y cid10 Zcid7 ψ cid6Y Y cid10cid7 π cid9 cid9 If set W cid6X Y cid7 straightforward check x cid11 y x y d0 d1 x y x y d0 d1 α α β 1 P x y ΦW cid11 Hence Proposition 51 VCSPΓ NPhard Case 3 Feasφ polymorphism Mjrty1 Mnrty3 As indicated proof Theorem 625 relations polymorphism Mjrty1 known decomposable binary relations 3 distinct types 46 types polymorphism Mnrty3 set relations form cid6x ycid7 D1 D2 x d1 y d2 d1 d2 D D1 D2 D D1 1 D2 1 Now deﬁne binary relation Rij cid6xi xj cid7 cid6x1 x2 xmcid7 Feasφ It follows observations choose pair indices j b c d D cid11 b c cid11 d cid6a ccid7 cid6b dcid7 cid6b ccid7 Rij cid6a dcid7 cid11 Rij Hence deﬁne function φcid10 setting cid12 φz1 zm x zi y zj x y min cid10 φ cid13 φcid10a c φcid10b d φcid10b c φcid10a d Now deﬁne functions cid11 ζ x φcid10b d x φcid10a c φcid10b d 1 x b 4 This stated explicitly Lemma 56 46 case D cid3 5 remaining 3 cases checked individually DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 1007 cid11 κx 2φcid10b d 1 0 cid7 0 Note τ κ ζ ImpRF Γ φcid10 Γ x c x d x y b τ x y We construct instance P VCSPΓ variables X Y Z Z cid9 constraints cid8 cid9 cid6X Y cid7 φcid10 cid8 cid6Xcid7 ζ cid8 cid6Y cid7 κ cid9 cid8 cid6Z Y cid7 φcid10 cid9 cid8 cid6Zcid7 ζ cid8 cid6Z Zcid7 τ cid9 cid9 If set W cid6X Zcid7 straightforward check cid11 ΦW P x y 2φcid10a c 4φcid10b d 2 x cid11 y x y b 2φcid10a c 4φcid10b d φcid10b c 3 x y x y b Hence Proposition 51 VCSPΓ NPhard cid2 7 The Boolean case Recall Example 29 valued constraint language set 0 1 called valued Boolean constraint language In section tractable valued Boolean constraint language costs R characterised presence certain form multimorphism In fact establish dichotomy result valued Boolean constraint language costs R speciﬁed multimorphisms tractable NPhard Theorem 71 Let Γ valued Boolean constraint language costs R If Γ following multimorphisms VCSPΓ tractable 1 cid60cid7 0 constant unary function returning value 0 2 cid61cid7 1 constant unary function returning value 1 3 cid6Max Maxcid7 Max binary function returning maximum arguments Maxx y x y 4 cid6Min Mincid7 Min binary function returning minimum arguments Minx y x y 5 cid6Min Maxcid7 6 cid6Mjrty Mjrty Mjrtycid7 Mjrty unique ternary majority function set 0 1 7 cid6Mnrty Mnrty Mnrtycid7 Mnrty unique ternary minority function set 0 1 8 cid6Mjrty Mjrty Mnrtycid7 In cases VCSPΓ NPhard To establish ﬁrst Theorem 71 valued Boolean constraint language types multimorphisms listed theorem tractable The tractability valued constraint language multimorphism cid60cid7 cid61cid7 established Theo rem 64 Furthermore tractability valued constraint language multimorphism cid6Max Maxcid7 established Theorem 615 symmetric argument domain ordering reversed establishes tractabil ity valued constraint language multimorphism cid6Min Mincid7 The tractability valued constraint language multimorphism cid6Min Maxcid7 established Theorem 67 The tractability valued constraint language multimorphism cid6Mjrty Mjrty Mjrtycid7 established Proposition 620 tractability valued constraint language multimorphism cid6Mnrty Mnrty Mnrtycid7 established 1008 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 Proposition 622 Finally tractability valued Boolean constraint language multimorphism cid6Mjrty Mjrty Mnrtycid7 follows immediately Theorem 627 To establish remaining Theorem 71 valued Boolean constraint language costs R types multimorphisms listed theorem NPhard We ﬁrst deal essentially crisp languages Lemma 72 Any valued Boolean constraint language essentially crisp multi morphisms listed Theorem 71 NPhard Proof If replace cost function φ Γ relation Feasφ obtain crisp Boolean constraint language Γ cid10 polymorphisms 0 1 Min Max Mjrty Mnrty By Schaefers Dichotomy Theorem 2642 Γ cid10 NPcomplete Γ NPhard cid2 For remaining languages strategy language multimorphisms listed Theorem 71 express certain special functions deﬁne Deﬁnition 73 A unary function σ set 0 1 0selector σ 0 σ 1 ﬁnite 0selector addition σ 1 A ﬁnite 1selector deﬁned analogously A selector 1selector 0selector A binary function φ set 0 1 NEQ function φ0 1 φ1 0 φ1 1 φ0 0 A binary function φ set 0 1 XOR function φ0 1 φ1 0 φ1 1 φ0 0 Lemma 74 Let Γ valued Boolean constraint language costs R essentially crisp If Γ contains NEQ function Γ contains ﬁnite 0selector ﬁnite 1selector Γ contains XOR function Proof Let ν Γ NEQ function First Γ contains ﬁnite 0selector σ0 contains ﬁnite 1selector To simply ﬁnite construct instance P0 variables x y constraints cid6cid6xcid7 σ0cid7 cid6cid6x ycid7 νcid7 note Φ 1selector Similarly Γ contains ﬁnite 1selector contains ﬁnite 0selector cid6ycid7 P0 Now let ζ Γ cost function arity m essentially crisp Choose tuples u v ζ u ζ v small possible ζ u ζ v Let P VCSP instance variables x00 x01 x10 x11 constraints cid8 cid6xu1v1 xumvmcid7 ζ Let W cid6x01 x11cid7 ψ ΦW P cid9 cid8 cid9 cid8 cid9 cid6x00 x11cid7 ν cid6x01 x10cid7 ν Note aritym cost function ζ applied variables repeating arguments Note ψ0 1 ζ u 2ν0 1 ψ1 1 ζ v 2ν0 1 If ψ0 1 cid11 ψ1 0 choice u ψ0 1 cid6x01cid7 ψ1 0 ψ0 1 ψ1 1 Φ ﬁnite 0selector P Hence assume ψ0 1 ψ1 0 If ψ0 0 cid11 ψ1 1 ψ0 0 function ψx x ﬁnite selector Γ contains ﬁnite 0selector ﬁnite 1selector On hand ψ0 0 construct instance P2 variables x y constraints cid6cid6x xcid7 ψcid7 cid6cid6x ycid7 ψcid7 In case Φ ﬁnite 0selector Γ contains ﬁnite 0selector ﬁnite 1selector cid6ycid7 P2 Otherwise assume ψ0 1 ψ1 0 ψ0 0 ψ1 1 By construction ψ0 1 ζ u 2ν0 1 ζ v 2ν0 1 ψ1 1 So case ψ XOR function cid2 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 1009 Lemma 75 Let Γ valued Boolean constraint language costs R essentially crisp multimorphisms cid60cid7 cid61cid7 Either Γ contains 0selector 1selector Γ contains XOR function Proof Let φ0 Γ function multimorphism cid60cid7 φ1 Γ function multimorphism cid61cid7 let m arity φ0 Choose tuple r φ0r minimal value φ0 By choice φ0 φ0r φ00 0 0 Suppose ﬁrst Γ contains 0selector σ0 Let M ﬁnite natural number larger ﬁnite values range φ0 We construct instance P VCSPΓ variables x0 x1 constraints cid6cid6xr1 xrmcid7 φ0cid7 cid6cid6x0cid7 Mσ0cid7 The cost function Mσ0 simply equivalent taking M copies cid6x1cid7 P 0 case Γ contains straint cost function σ0 It straightforward check Φ 1selector A similar argument φ1 shows Γ contains 1selector contains 0selector Hence need Γ contains selector contains XOR function If φ00 0 cid11 cid6x1cid7 P 1 Φ φ01 1 unary function σ x φ0x x Γ clearly selector result holds Otherwise construct instance P cid10 VCSPΓ variables x0 x1 single constraint cid6x0cid7 P cid10 cid6cid6xr1 xrmcid7 φ0cid7 Now considering costs possible assignments verify Φ Φ XOR function NEQ function selector ν Φ cid6x0x1cid7 P cid10 cid6x1cid7 P cid10 If ν XOR function appeal Lemma 74 complete proof cid2 Many remaining lemmas section use following construction combines given function φ arbitrary arity pair selectors order express binary function similar properties Construction 76 Let φ Dm R mary function identically inﬁnite let σ0 0selector σ1 1selector Let u v mtuples let M natural number larger ﬁnite values range φ Let P VCSP instance variables x00 x01 x10 x11 constraints cid8 cid9 cid9 cid9 cid8 cid8 cid6xu1v1 xumvmcid7 φ cid6x00cid7 Mσ0 cid6x11cid7 Mσ1 The binary function φ2 def Φ cid6x01x10cid7 P called compression φ u v Lemma 77 Let Γ valued Boolean constraint language costs R essentially crisp multimorphisms cid60cid7 cid61cid7 cid6Max Maxcid7 cid6Min Mincid7 Either Γ contains ﬁnite 0selector ﬁnite 1selector Γ contains XOR function Proof Let φ function Γ cid6Max Maxcid7 multimorphism let ψ function Γ cid6Min Mincid7 multimorphism By Lemma 75 Γ contains XOR function prove Γ contains 0selector σ0 1selector σ1 Since φ cid6Max Maxcid7 multimorphism follows Lemma 614 φ ﬁnitely antitone relation Feasφ polymorphism Max For ﬁrst case choose tuples u v u v φu φv let φ2 compression φ u v Construction 76 It straightforward check φ20 0 φ21 1 means φ2x x ﬁnite 0selector belonging Γ On hand suppose φ ﬁnitely antitone Γ contains ﬁnite 1selector τ In case know Feasφ polymorphism Max choose u v φu φv φMaxu v Let φ2 compression φ u v construct instance P VCSP Γ variables x y constraints cid6x ycid7 φ2 cid6y xcid7 φ2 cid6ycid7 τ cid8 cid9 cid9 cid8 cid9 cid8 The fact φ ﬁnitely antitone gives φu φv cid2 φMinu v This fact φu φv ﬁnite whilst φMaxu v inﬁnite Φ cid6xcid7 P ﬁnite 0selector 1010 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 So shown Γ contains ﬁnite 1selector contains ﬁnite 0selector φ ﬁnitely antitone A symmetric argument exchanging 0 1 Max Min φ ψ shows Γ contains ﬁnite 0selector contains ﬁnite 1selector Hence complete proof assume Γ contains ﬁnite selectors In case know Feasφ polymorphism Max Feasψ polymorphism Min choose tuples u v w z φu φv ψw ψz ﬁnite φMaxu v ψMinw z inﬁnite Now let φ2 compression φ u v ψ2 compression ψ w z We ρx y def φ2x y φ2y x ψ2x y ψ2y x NEQ function contained Γ We appeal Lemma 74 Γ contains XOR function cid2 Lemma 78 Let Γ valued Boolean constraint language costs R multimorphism cid6Min Maxcid7 If Γ contains ﬁnite 0selector ﬁnite 1selector Γ contains NEQ function XOR function Proof Let φ function Γ multimorphism cid6Min Maxcid7 Choose u v φMinu v φMaxu v φu φv Let φ2 compression φ u v It straightforward check binary function φ2 multimorphism cid6Min Maxcid7 It follows φ20 0 φ21 1 φ20 1 φ21 0 14 Without loss generality suppose φ20 0 cid3 φ21 1 The proof case φ20 0 φ21 1 symmetri cally equivalent From Eq 14 2φ20 0 cid22 cid21 φ20 1 φ21 0 cid22 cid21 φ20 1 φ21 0 2φ21 1 2φ20 0 φ20 1 φ21 0 0 negative rational number N M Now let σ0 Γ ﬁnite 0selector set λ σ01 σ00 Since λ 0 possible choose non 2φ20 0 cid22 cid21 φ20 1 φ21 0 N M cid21 cid22 φ20 1 φ21 0 λ 2φ21 1 Construct instance P VCSP Γ variables x u v y constraints cid9 cid8 cid9 cid8 cid9 cid9 cid8 cid6x ucid7 Mφ2 cid8 cid6u vcid7 Mφ2 cid6v ycid7 Mφ2 cid8 cid6xcid7 N σ0 cid9 cid6vcid7 2N σ0 cid9 cid8 cid9 cid9 cid8 cid6u xcid7 Mφ2 cid6v ucid7 Mφ2 cid8 cid6y vcid7 Mφ2 cid9 cid8 cid6ucid7 2Nσ0 cid9 cid6ycid7 N σ0 cid8 If set W cid6x ycid7 η ΦW P straightforward verify η0 1 η1 0 η0 0 η1 1 cid10 2φ20 0 cid21 cid22 φ20 1 φ21 0 cid22 cid21 φ20 1 φ21 0 η0 0 η0 1 M min cid25 2φ21 1 λ λ N M N M η0 1 If φ21 1 η0 0 η NEQ function If φ21 1 η0 0 η XOR function cid2 Lemma 79 Let Γ valued Boolean constraint language costs R multimorphism cid6Mjrty Mjrty Mnrtycid7 If Γ contains ﬁnite 0selector ﬁnite 1selector NEQ function Γ contains XOR function DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 1011 Proof Suppose σ0 Γ ﬁnite 0selector σ1 Γ ﬁnite 1selector ν Γ NEQ function φ Γ multimorphism cid6Mjrty Mjrty Mnrtycid7 We Γ contains XOR function By Corollary 626 2 cases φ ﬁnitely modular Feasφ polymorphisms Mjrty Mnrty In ﬁrst case choose tuples u v φu φv cid11 φMinu v φMaxu v Let φ2 compression φ u v It straightforward check φ2 ﬁnitely modular Now construct instance P variables w x y z constraints cid8 cid9 cid8 cid9 cid8 cid6x wcid7 ν cid6z ycid7 ν cid8 cid9 cid6w ycid7 φ2 It straightforward check Φ Φ cid6wycid7 P XOR function cid9 cid6x zcid7 φ2 cid6xycid7 P Next suppose Feasφ polymorphism Mjrty Mnrty In case Theorem 35 25 Feasφ decomposable binary relations words equal relational join binary projections Since Feasφ Mnrty polymorphism implies binary projections Mnrty polymorphism The binary Boolean relations Mnrty polymorphism exactly tuples Therefore projection possible construct φ binary function ψ exactly ψ0 0 ψ0 1 ψ1 0 ψ1 1 ﬁnite If ψ0 1 ψ1 0 inﬁnite let η projection variables x y ψx v νv y let η ψ The function η multimorphism cid6Min Maxcid7 exactly η0 0 η1 1 inﬁnite construction proof Lemma 78 Γ contains XOR function Suppose Feasφ polymorphism Mnrty Mjrty Since Feasφ polymorphism Mnrty afﬁne relation 10 ﬁnite ﬁeld 2 elements GF2 expressed linear equations GF2 Creignou et al deﬁne Boolean relation afﬁne width 2 expressed linear equations GF2 variables equation 10 In fact linear equations GF2 variable correspond unary relations linear equations GF2 variables correspond binary equality disequality relations The unary relations binary equality disequality relations Mjrty Mnrty polymorphisms Thus Feasφ afﬁne width 2 Hence Lemma 534 10 Feasφ construct 4ary afﬁne constraint w x y z 0 In words ψ Γ ψw x y z iff w x y z 0 Now set λ ψ0 0 1 1 ψ0 1 0 1 1 construct VCSP instance P variables w x y z constraints cid8 cid6w x y zcid7 ψ cid9 cid8 cid6wcid7 3Mσ0 cid9 cid8 cid6zcid7 λσ1 cid9 M natural number larger square ﬁnite value range ψ σ1 Let η Φ It straightforward verify η binary function η0 0 η1 1 ﬁnite multimorphism cid6Min Maxcid7 Hence construction proof Lemma 78 result follows case Finally Feasφ polymorphism Mnrty Mjrty set Boolean relations Feasφ Feasν shown essentially unary polymorphisms Theorem 412 24 By Theorem 410 24 implies case Feasφ construct 4ary afﬁne constraint w x y z 0 proceed cid2 cid6xycid7 P Lemma 710 Let Γ valued Boolean constraint language costs R multimorphisms listed Theorem 71 Either Γ essentially crisp Γ contains XOR function Proof Suppose Γ essentially crisp multimorphisms listed Theorem 71 By Lem mas 78 77 Γ contains XOR function Γ contains NEQ function ﬁnite 0selector ﬁnite 1selector In case Lemma 79 know Γ contains XOR function cid2 Combining Lemmas 72 710 Proposition 51 establishes NPhardness valued Boolean constraint language having multimorphisms listed Theorem 71 completes proof Theo rem 71 1012 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 For valued Boolean constraint languages taking ﬁnite values tractable cases identiﬁed Theo rem 71 coincide result indicates Corollary 711 Let Γ valued Boolean constraint language costs ﬁnite real values If Γ multimorphisms cid60cid7 cid61cid7 cid6Min Maxcid7 VCSPΓ tractable In cases VCSPΓ NPhard Proof Let φ function taking ﬁnite values R By Lemma 614 φ multimorphism cid6Max Maxcid7 φ antitone multimorphism cid61cid7 By symmetric argument φ multimorphism cid6Min Mincid7 φ monotone multimorphism cid60cid7 By Proposition 620 φ multimor phism cid6Mjrty Mjrty Mjrtycid7 φ constant multimorphism cid60cid7 Similarly Proposition 622 φ multimorphism cid6Mnrty Mnrty Mnrtycid7 φ constant multimorphism cid60cid7 By Corollary 626 φ multimorphism cid6Mjrty Mjrty Mnrtycid7 φ modular multi morphism cid6Min Maxcid7 The result follows Theorem 71 cid2 We Theorem 71 generalises number earlier dichotomy results particular Boolean prob lems 103042 Let S set Boolean relations problem SATS problem deciding exists assignment s V 0 1 satisﬁes given collection crisp constraints relations chosen S The problem MAXSATS problem ﬁnding assignment maximises number constraints collection simultaneously satisﬁed The problem MINONESS problem deciding exists assignment satisﬁes given collection crisp constraints relations chosen S ﬁnding assignment minimises number variables taking value 1 In slightly general weighted MINONESS problem aim minimise speciﬁed weighted sum vV wvsv wv nonnegative integers 1030 Similarly problem MAXONESS problem deciding exists assignment satisﬁes given collection crisp constraints relations chosen S ﬁnding assignment maximises number variables taking value 1 In weighted MAXONESS cid18 vV wvsv wv nonnegative integers 10 problem aim maximise speciﬁed weighted sum 30 cid18 Corollary 712 Let S set Boolean relations let ΓS φR R S corresponding crisp valued constraint language 0 1 1 SATS solved polynomial time S polymorphisms 0 1 Min Max Mnrty Mjrty Otherwise NPcomplete 2 MAXSATS solved polynomial time ΓS multimorphisms cid60cid7 cid61cid7 cid6Min Maxcid7 Otherwise NPhard 3 Weighted MINONESS solved polynomial time ΓS multimorphisms cid60cid7 cid6Min Mincid7 cid6Mjrty Mjrty Mnrtycid7 Otherwise NPhard 4 Weighted MAXONESS solved polynomial time ΓS multimorphisms cid61cid7 cid6Max Maxcid7 cid6Mjrty Mjrty Mnrtycid7 Otherwise NPhard Proof 1 Follows immediately Theorem 71 Proposition 410 2 Follows Corollary 711 Example 29 3 Let φ1 0 1 R function deﬁned φ1x x By Example 33 problem VCSPφ1 equiv vV wvsv wv nonnegative alent problem minimising linear expression form integers Hence weighted MINONESS expressed VCSPΓS φ1 The function φ1 contained exactly 4 tractable classes identiﬁed Theorem 71 cases 1 4 5 8 problem VCSPΓS φ1 tractable ΓS multimorphisms cid60cid7 cid6Min Mincid7 cid6Min Maxcid7 cid6Mjrty Mjrty Mnrtycid7 NP hard Finally Proposition 410 crisp language multimorphism cid6Min Maxcid7 multimorphism cid6Min Mincid7 cid18 4 Similar 3 function φcid10 1 deﬁned φcid10 1x 1 x cid2 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 1013 Corollary 712 gives alternative uniﬁed description tractable cases problems ones given previously 103042 Finally note dichotomy described Theorem 71 expressed concise form earlier results crisp Boolean constraints Theorem 54 Corollary 713 Let Γ valued Boolean constraint language costs R If Γ nontrivial multimor phism tractable Otherwise NPhard Proof Earlier results crisp Boolean constraint languages crisp Boolean language tractable polymorphism essentially unary NPcomplete example Corollary 229 6 Using relationship polymorphisms multimorphisms set Proposition 410 fact multimorphisms preserved addition constant implies result holds Γ essentially crisp If Γ essentially crisp Lemma 710 Γ nontrivial multimorphism tractable reasons described earlier Γ contains XOR function If Γ contains XOR function Corollary 55 multimorphism Γ trivial cid2 8 Conclusions future work In paper begun systematic investigation complexity optimisation problems resulting different forms soft constraint Since soft constraints speciﬁed functions introduced alge braic property function multimorphism shown range cases presence property sufﬁcient ensure tractability Moreover shown presence multimorphism precisely characterises number tractable prob lem classes appear surface different These tractable classes listed Section 6 indicated examples given section overlapping incomparable sense contained Fig 2 In Boolean case costs realvalued inﬁnite shown presence forms multimorphism characterises possible tractable cases cases NPhard This result generalises earlier complexity classiﬁcations SATISFIABILITY MAXSAT MINONES MAXONES problems On basis results presented conjecture multimorphisms valued constraint language ﬁnite set completely determine expressive power complexity If true multimor Fig 2 The tractable classes identiﬁed Section 6 1014 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 phisms likely play central role analysis complexity soft constraints related notion polymorphism analysis complexity crisp constraints 462628 To deﬁne form soft constraint specify set possible values costs way combined In paper adopted valued constraint framework 143 costs chosen totally ordered set For concrete classiﬁcation results Sections 5 6 7 ﬁxed set R set nonnegative real numbers inﬁnity combined standard addition One possible direction extend results investigate complexity valued constraint languages valuation structures Example 81 Consider set integers 0 1 M ﬁxed M cid3 1 We deﬁne valuation structure ΩM set taking standard ordering deﬁning aggregation operation additionwithceiling operation M deﬁned follows b 0 1 M M b mina b M This valuation structure shown useful express problems solutions violate M constraints considered equally bad 35 Changing valuation structure change set multimorphisms associated set functions example indicates Example 82 Let Γ valued constraint language ﬁnite set D containing unary cost functions range 0 1 For d D Γ contains unary cost function χd deﬁned follows χd x cid7 1 x d 0 Hence F Dk Dk multimorphism Γ x1 xk D cid4 cid5 F x1 xki χd cid2 kcid3 i1 kcid3 i1 χd xi 15 It shown Lemma 49 conservative function multimorphism Γ If costs taken functions Γ deﬁned elements R converse result holds multimorphism Γ conservative To note case Eq 15 implies d D ktuple F x1 xk contains coordinate positions equal d tuple cid6x1 xkcid7 Since true d D follows equality d D means F conservative However costs deﬁned elements valuation structure ΩM deﬁned Example 81 argument longer holds k M For example M 1 Γ language containing crisp unary cost functions multimorphism cid6Max Maxcid7 conservative Another possible extension results obtained allow costs chosen partially ordered set This additional ﬂexibility allowed semiringbased framework soft constraints 12 This framework allows operations deﬁning constitutes preferred cost simply minimum Further investigation needed determine notion multimorphism characterise interesting tractable constraint languages general framework Other future developments work include study approximability properties optimisation prob lems involving soft constraints arbitrary ﬁnite sets This build extend detailed successful investigation approximability properties completed MAXSAT related problems Boolean case 1030 References 1 S Bistarelli H Fargier U Montanari F Rossi T Schiex G Verfaillie Semiringbased CSPs valued CSPs Frameworks properties comparison Constraints 4 1999 199240 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 1015 2 S Bistarelli U Montanari F Rossi Constraint solving semirings Proceedings 14th International Joint Conference Artiﬁcial Intelligence IJCAI95 Montreal Canada 1995 pp 624630 3 E Boros PL Hammer Pseudoboolean optimization Discrete Applied Mathematics 123 2002 155225 4 AA Bulatov A dichotomy theorem constraint satisfaction problems 3element set Journal ACM 53 2006 66120 5 AA Bulatov AA Krokhin PG Jeavons The complexity maximal constraint languages Proceedings 33rd ACM Symposium Theory Computing STOC01 2001 pp 667674 6 AA Bulatov PG Jeavons AA Krokhin Classifying complexity constraints ﬁnite algebras SIAM Journal Computing 34 2005 720742 7 D Cohen M Cooper P Jeavons A Krokhin A maximal tractable class soft constraints Journal Artiﬁcial Intelligence Research 22 2004 122 8 MC Cooper DA Cohen PG Jeavons Characterising tractable constraints Artiﬁcial Intelligence 65 1994 347361 9 N Creignou A dichotomy theorem maximum generalized satisﬁability problems Journal Computer System Sciences 51 1995 511522 10 N Creignou S Khanna M Sudan Complexity Classiﬁcation Boolean Constraint Satisfaction Problems SIAM Monographs Discrete Mathematics Applications vol 7 Society Industrial Applied Mathematics 2001 11 WH Cunningham Minimum cuts modular functions matroid polyhedra Networks 15 2 1985 205215 12 E Dahlhaus DS Johnson CH Papadimitriou PD Seymour M Yannakakis The complexity multiterminal cuts SIAM Journal Computing 23 4 1994 864894 13 V Dalmau Generalized majorityminority operations tractable Proceedings 20th IEEE Symposium Logic Computer Science LICS 2005 IEEE Computer Society 2005 pp 438447 14 R Dechter Constraint Processing Morgan Kaufmann 2003 15 T Feder MY Vardi The computational structure monotone monadic SNP constraint satisfaction A study Datalog group theory SIAM Journal Computing 28 1998 57104 16 L Fleischer S Iwata Improved algorithms submodular function minimization submodular ﬂow Proceedings 32th Annual ACM Symposium Theory Computing 2000 pp 107116 17 EC Freuder R Wallace Partial constraint satisfaction Artiﬁcial Intelligence 58 1992 2170 18 S Fujishige S Iwata Bisubmodular function minimization Integer Programming Combinatorial Optimization 8th International IPCO Conference Lecture Notes Computer Science vol 2081 Springer Berlin 2001 pp 160169 19 M Garey DS Johnson Computers Intractability A Guide Theory NPCompleteness Freeman San Francisco CA 1979 20 M Grötschel L Lovasz A Schrijver The ellipsoid method consequences combinatorial optimization Combinatorica 1 1981 169198 21 G Gutin A Raﬁey A Yeo Minimum cost list homomorphisms semicomplete digraphs Discrete Applied Mathematics 154 2006 890897 22 G Gutin A Raﬁey A Yeo Level repair analysis minimum cost homomorphisms graphs Discrete Applied Mathematics 154 2006 881889 23 S Iwata L Fleischer S Fujishige A combinatorial strongly polynomial algorithm minimizing submodular functions Journal ACM 48 4 2001 761777 24 PG Jeavons On algebraic structure combinatorial problems Theoretical Computer Science 200 1998 185204 25 PG Jeavons DA Cohen MC Cooper Constraints consistency closure Artiﬁcial Intelligence 101 12 1998 251265 26 PG Jeavons DA Cohen M Gyssens Closure properties constraints Journal ACM 44 1997 527548 27 PG Jeavons DA Cohen M Gyssens How determine expressive power constraints Constraints 4 1999 113131 28 PG Jeavons DA Cohen JK Pearson Constraints universal algebra Annals Mathematics Artiﬁcial Intelligence 24 1998 5167 29 PG Jeavons MC Cooper Tractable constraints ordered domains Artiﬁcial Intelligence 79 2 1995 327339 30 S Khanna M Sudan L Trevisan D Williamson The approximability constraint satisfaction problems SIAM Journal Computing 30 6 2001 18631920 31 L Khatib PH Morris RA Morris F Rossi Temporal constraint reasoning preferences Proceedings 17th International Joint Conference Artiﬁcial Intelligence IJCAI01 Seattle US 2001 pp 322327 32 L Kirousis Fast parallel constraint satisfaction Artiﬁcial Intelligence 64 1993 147160 33 A Krokhin A Bulatov P Jeavons The complexity constraint satisfaction An algebraic approach Proceedings NATO Advanced Study Institute Structural Theory Automata Semigroups Universal Algebra NATO Science Series II Mathematics Physics Chemistry vol 207 Springer Berlin 2005 pp 181213 34 J Larrosa P Meseguer T Schiex Maintaining reversible DAC MaxCSP Artiﬁcial Intelligence 107 1999 149163 35 J Larrosa T Schiex Solving weighted CSP maintaining arc consistency Artiﬁcial Intelligence 159 2004 126 36 AK Mackworth EC Freuder The complexity constraint satisfaction revisited Artiﬁcial Intelligence 59 1993 5762 37 R Mohr G Masini Good old discrete relaxation Y Kodratoff Ed Proceedings 8th European Conference Artiﬁcial Intelligence ECAI88 Pitman 1988 pp 651656 38 U Montanari Networks constraints Fundamental properties applications picture processing Information Sciences 7 1974 95132 39 GL Nemhauser LA Wolsey Integer Combinatorial Optimization John Wiley Sons 1988 40 JK Pearson PG Jeavons A survey tractable constraint satisfaction problems Technical Report CSDTR9715 Royal Holloway Univer sity London July 1997 41 R Pöschel LA Kalužnin Funktionen und Relationenalgebren DVW Berlin 1979 42 TJ Schaefer The complexity satisﬁability problems Proceedings 10th ACM Symposium Theory Computing STOC78 1978 pp 216226 1016 DA Cohen et al Artiﬁcial Intelligence 170 2006 9831016 43 T Schiex H Fargier G Verfaillie Valued constraint satisfaction problems hard easy problems Proceedings 14th International Joint Conference Artiﬁcial Intelligence IJCAI95 Montreal Canada 1995 pp 631637 44 A Schrijver A combinatorial algorithm minimizing submodular functions strongly polynomial time JCTB Journal Combinatorial Theory Series B 80 2000 346355 45 A Schrijver Combinatorial Optimization Polyhedra Efﬁciency Algorithms Combinatorics vol 24 Springer Berlin 2003 46 A Szendrei Clones Universal Algebra Seminaires Mathematiques Superieures vol 99 University Montreal Montreal 1986 47 P van Hentenryck Y Deville A generic arcconsistency algorithm specializations Artiﬁcial Intelligence 57 1992 291321