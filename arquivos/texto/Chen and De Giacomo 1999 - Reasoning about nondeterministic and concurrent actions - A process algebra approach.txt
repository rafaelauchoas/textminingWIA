Artificial Intelligence 107 1999 6398 Artificial Intelligence Reasoning nondeterministic concurrent actions A process algebra approach Xiao Jun Chen a1 Giuseppe De Giacomo b School Computer Science University Windsor 401 Sunset Avenue Windsos Ontario Canada N9B 3S7 b Dipartimento di Informatica e Sistemistica Vniversitci di Roma La Sapienza Salaria 113 00198 Roma Italy Received 10 December 1996 received revised form 12 May 1998 Abstract actions We present processes activities complex concurrent framework reasoning constituted performed interacting agents The framework based formalism CCSlike process algebra associated distinct formalisms representation extension modal mu explicit global store reasoning logics PDL APDL logic programs calculus powerful branching logics CTL CTL The reasoning service setting temporal model checking contrast logical implication This framework directly applicable complete information behavior available interesting features reasoning actions Artificial Intelligence tools Computer Science deal complex actions treating suitably aspects area Concurrency like nonterminating interruptions 0 1999 Published Elsevier Science BV All rights reserved executions parallelism communications inherits formal practical subsumes dynamic formalism Indeed Keywords Process algebra Modal mucalculus Reasoning actions Concurrency Model checking Logical implication 1 Introduction In paper present piece research Artificial area Reasoning Actions Computer Science regarded bridge area Concurrency Intelligence A shorter version paper appeared Proceeding Thirteenth National Conference Artificial Intelligence AAAI96 Corresponding 1 Email xjchencsuwindsorca author Email degiacomodisuniromal 0004370299 PII SOOO437029800104O matter 0 1999 Published Elsevier Science BV All rights reserved On hand follow methodology typical Reasoning Actions specifying reasoning dynamic systems set facts value changes eects atomic actions set facts resulting axioms 49 We axioms change evolution general picture allow clear later Artificial Intelligence situation calculus 49 introducing evolves cf YZF 49 specifying cf effect axioms 49 devising suitable means obtain successorstate executing action current state cf successorstate introduce specification preconditions 49 However allow specification differently precondition multiple atomic actions occur resulting actions synchmnied actions instead concurrent actions 25244250 control structures introducing elementary actions suitable recursion explicit notion process describing executing actions cf precondition allow organizing axioms 49 In addition sequential composition parallel composition reasons iteration On hand use modeling Computer Science formalize concurrent processes Concurrency typically Reasoning Action Artificial order use tools need concrete level abstraction Intelligence dynamic In general choose typically adopted Reasoning Actions levels abstraction describing area instead ones logics However tools developed dynamic depending information assume available We distinguish following levels 1 At concrete evolution represented assume complete action performed level characterize unique actual sequence statesactions At level information state assume knowledge 2 At abstract In case transition performed level characterize ph graph One paths going represented instead single sequence The single evolution possible graph called evolutions level 1 transition represented actual evolution knowledge state labeled outarcs represent Each node representing transition actions current state possible successorstate We remark different outarcs labeled action alternative outcomes assume complete completely known action action going performed Moreover known alternative action In case nondeterministic At level possible evolutions state performed leads completely known state However know actions resulting states going state Each action causes including actions enabled nondeterministic information action 3 At level model selecting set transition instead unique Each transition possible behavior At level assume partial systems systems represents alternative possible information XJ Chen G De Giacomo Artzcial Intelligence 107 1999 6398 h5 evolutions state partially known states resulting performing action concrete Generally level 1 considered obtain complete order single unique run 2 Levels 2 3 instead unrealistic information modeling dynamic systems In particular level 3 usually adopted research logic situation calculus dynamic reasoning actions logic 24373841424951 represent reason dynamic problem case logic implication certain systems The typical reasoning validity form l axioms select set transition dynamic Sinit formula partial description initial state formula property want prove reachability state certain property goal holds systems represent In paper adopt level 2 Following viewpoint 27 use representation possible evolutions formalism define model checking transition formalism reasoning reactive tool describing concurrent multiprocess systems 3 Process properties want check This framework CCS 45 CSP 30 ACP 3 model generally systems They provide recognized algebras specifying approach proposed representing suitable logic typically process algebras concurrent convenient clean way express parallelism synchronizationsasynchronizations interpreted finite developed implemented satisfied process 6101144 reactivity communications interruptions Moreover finite state processes transition systems practical verify given modaltemporal coordinations processes tools logic formula The reasoning problem case model checking form 7 transition representing possible evolutions dynamic sinit initial state 7 Q formula property want prove reachability state certain property goal holds In work state called conjigurution called process passive component activities component describes subroutines set primitive propositions describes going The configuration fact evolve environment agents composed active called global store The process robots persons pieces software The global store characterized process state world activities changed activities 2 However dynamic specifying properties Lineartime Temporal Logics interpreted runs 18 3 In Artificial research considered level In contrast Intelligence searchbased planning research deductive planning including work STRIPS 8 typically carried level 3 66 XJ Chen G De Gincomo Artificial lntvllience 107 1999 6398 Making use global store associated terms difference effects action current global store resulting Properties mentioned effects kept unchanged 4 Note treatment 34 different approaches properties state resulting literature logics programs action specified explicitly process specify In order reason properties modeled dynamic suitable extension modal mucalculus subsumes dynamic CTL 181 We model checking checking efficiently setting existing verification logics PDL APDL 34 temporal logic linearly standard modal mucalculus By means reduction 32 powerful systems develop logic programs logics CTL model reuse reduced possible tools mentioned reasoning actions We discuss important additional issues 1 relationship checking logical implication dynamic 53 logical formula transition introduce suitable notion equivalence based bisimulation For device suitable notion characteristic setting 2 identify completely characterizes representations model jkwmulu For 45 main ability illustrating examples In Section 3 discuss The rest paper organized follows In Section 2 present representation feature representation reasoning properties reasoning reasoning setting formalism formalism formalism Section 5 means examples framework actions technique setting reducing Section 7 discuss relationship model checking logical implication issue equivalent descriptions possible future research directions In Section 4 present express wide variety dynamic use reasoning In Section 6 devise suitable standard proposed model checking In Section 8 draw conclusions In sketch formalism In 2 Representation formalism A process algebra global store We represent dynamic systems terms possible evolutions caused actions We conjgurution A configuration represented pair state point possible evolutions performed agents p called process o called global store Intuitively activities status activities properties characterizing performed As activities process evolve configuration changes process describes precise involve activities process performed global store current configuration The global store describes current configuration systemor In way address simplified variant frame problem arises setting XJ Chen G De Giacomo Artificial Intelligence 107 1999 6398 67 We formalize possible global stores simply propositional interpretations Let Prop logic ranged A B possibly finite set propositions propositional subscript A global store u propositional Prop Given global store o proposition A E Prop aA tt fact denoted A true o cr A ff Before elementary actions interpretation introduce fact denoted A false o formalizing process carries information actions process processes need Indeed actions possible left petiormed elementary kinds elementary We consider Atomic actions basic uninterruptible actions actions executed agent We assume set possible atomic actions finite Synchronized actions constituted nonempty agents Intuitively execute synchronized execute set atomic actions performed means execution atomic action feedback executions simultaneously synchronized action set atomic actions action unity That relies implicitly Each action effects global store The specification effects supplied separately process defining effect function The effect function specifies effects atomic action respect different conditions global store On base effect function successorstate defined action returns set 5 possible given global store atomic synchronized global stores 6 function Besides effects action typically associated preconditions conditions specified action performed action process This treatment provides capability describing preconditions depend status global store status process So process instance dynamically possibility executing action configurations certain activities performed In setting action preconditions block 2 I Atomic actions Let Act finite set possible atomic actions ranged b possibly subscript We define effect function effct associates action E Act finite set pairs premise effect efW 1cI1 El 1cr En pair Ei The premise I propositional global store satisfy corresponding formula Prop describing properties effect Ei applied 5 Recall global stores actions generally nondeterministic set single possible 6 Such approach specifying effects similar Afamily action languages 2339 68 XJ Chew G Lk Giucomo Artjficiul fmllipmr IO7 1999 6398 propositions negationsover The effect Ei set literalsatomic Prop describes possible effect execution action premise The literals Ei required eta Each pair E premise r true current global store possible execution causes literals Ei true resulting global store In words action premise E possible effect true successive global store intuitively assertion interpreted Next introduce simple update operator o given interpretation T set noncontradictory literals G returns new interpretation 0 Definition 21 Let rr interpretation literals Prop We detine update operator o infix follows VA E Prop Prop L set noncontradictory tt A EC I AEC fl I aA AgLandAC o LA Intuitively operator returns interpretation satisfies literals L retains value original interpretation o literals occurring C Making use update operator define successorstate function specifies atomic action affects global store Definition 22 Let atomic action c global store interpretation Prop The set possible global stores obtained executing u 0 denoted ala set interpretations COL c 1 E 3 st E E ta tt ti C contain contradictory literals Intuitively set DU alternative global stores resulting executing action r formed alternative updated global store effect E premise u For E resulting global store equal cr o E satisfied identical E changed E true cr values atomic propositions occurring Observe action nondeterministic singletonif respect effects global store It ta satisfied premise respect effects global storeie aa singleton au aie deterministic premise satisfied Note au singleton pmcrss evolve possible ways performing 1 rewlting configurations current XJ Chen G De Giacomo Artificial Intelligence 107 1999 6398 69 By definition premise ea satisfied aa 6 action effect performed Finally effect E cta contradictory generate possible resulting store global contradictory performing aa In particular action executed effect E premise influencing preconditions satisfied 22 Synchronized actions For synchronized actions obvious meanings notations synchronized synchronized atomic action vacuously synchronized action fact simply action action composed al E Act Observe ranged CX possibly subscript use set special case atomic action In particular denote al We extend previously defined successorstate function cope synchro nized actions follows Definition 23 Let al store interpretation obtained executing o denoted ao propositions n 2 1 synchronized action u global Prop The set possible global stores set interpretations aotUUC suchthatforil n Li I LU E 3 st E E ectai tt 0 U L contain contradictory literals Observe Intuitively aa effects synchronized atomic actions For example action sum effects participating let b atomic o A B C D actions applicable effects given configuration b That nondeterministic effect set A true set B true resulting global store b deterministic unique effect set set C D true The effect synchronized A C D true resulting global store set B C D true In words leads global store A C D true b nondeterministically atomic propositions including B remain unaffected B C D true atomic propositions including A remain unaffected action b For actions al 2 efitu etul efSctu2 easy check executing al a2 al 2 aie deterministic nondeterministic aie different effects respect singletonthen singletonthen executing Generally aa aul However nondeterminism au aa If In fact noticed state changes laws influence preconditions actions example 40 70 XJ Chen G De Giucotno Artjificiul Intelligence 107 1999 6398 increases respect uz effects furthermore allows combine effects pairs For example consider resources consumers consuming resource time Their actions effect consume resource resources taken consumer takes action resource action simultaneously If consumers taken h cr h M This means Let consider action h applicable effect u A h applicable effect b A Then set alternative global stores resulting action executing In general executed action setting effects atomic actions compatible time synchronizing perform taking Actions conflict effects synchronized For example pushing pulling handle synchronized atomic actions u h synchronized constitute synchronized order perform actions means perform action The intuition synchronized synchronized feedback account assume reasonable b difference performing synchronized independent feedback assume fully actions b b If b nondeterminism Observe account performing independent contradictory For example b try set proposition A desired value independently Nondeterministically actions word succeeds Hence resulting possible A true formulated CCS let A A applicable effect u b respectively Both u performed resolved concurrent processes setting adopting interleaving A false This intuition effects The contradiction semantics situations action actions This sufficient effects synchronized Finally note assumed actions sum purposes especially component additional modeling power processes Several alternative consider proposals actions considered literature 25244250 Many proposals compatible languages 1251 In general framework function global framework applies stores sets global stores possible provide successorstate specifying effects compound based Afamily elementary especially action 23 Processes We adopt CCSstyle constructs combine elementary actions processes CCS Calculus Communicating processes includes processes constructs restriction synchronization Systems wellknown 45 We suitably extend CCS order deal global stores multiple actions formalism expressing concurrent sequence choice parallel composition Discussions issue S XJ Chen G De Giacomo Artificial Intelligence 107 1999 6398 71 Due appearances recursions processes Here P process p process expression Each process denote set process names process equations P A p define simply process associated unique process definition We use Proc Processes follow syntax nil denotes predefined 4 denotes propositional denotes set expressions form 4 e 4 propositional propositional formula Prop denotes atomic action atomic process P process defined Pmc Act y formula Prop capable action behaves process p This term viewed precondition 4 termination process process formula Act Intuitively process constructs following meaning 1 2 nil represents 4 ap performing extension CCSterm p preconditions p1 p2 represents p1 1 p2 interleaving synchronizations py constraints process obtained p restricting 3 4 5 v alternative composition p1 2 actions p1 2 specified parallel composition p1 2 process perform allowed actions satisfying u I Vd o E yo tt implies oe tt a4 denotes truthvalue 5 aq denotes truthvalue e value tt atomic actions interpretation Act obtained assigning o ff Act The restriction construct dynamically restrict group actions synchronized extension CCS construct allowed specifying r y simply set atomic actions time Note construct possibility synchronized executing actions The semantics dynamic given terms transition relation _ _ defined relation satisfying rules following schema set structural rules Table 1 Such structural ANTECEDENT CONSEQUENT SIDECONDITION interpreted logically VANTECEDENT A SIDECONDITION k CONSEQUENT V stands universal closure free variables occurring case ANTECEDENT SIDECONDITION missing true lo In interpreted lo Observethattypically ANTECEDENT SIDECONDITION CONSEQUENT sharefreevtiables Table I Strucmral rules Det P 0 0 Pnpal P p Res p fr L CT pynpyn VI t Q E y nb tt implies cye tt The rules Table 1 following Act intuitive meaning Def Sum Int Syn Res p u executing p O synchronized action Y provided configuration precondition 5 u evolve action u provided 1 2 evolve configuration p T 4 true 6 O action Y provided p 1 2 cr evolve The configuration executing possible global store obtained executing 0 T E P P p evolve configuration The configuration executing The configuration synchronized configuration The configuration executing executing CX provided The configuration executing p executing CXI pz evolve p executing 2 The configuration executing action U provided p executing CY u allowed y Vq5 e E y 4 tr implies ae tt II 2 1 evolve evolve 1 1 synchronized executing cy Similarly pi II pi 1 evolve 2 n evolve pi G executing CX 1 11 2 evolve configuration configuration action LX U 2 provided PI I j evolve pv evolve configuration p evolve action provided synchronized synchronized p2a pi 74 XJ Chen G De Giacomo Artzl Intelligence 107 1999 639X We formalize scenario introducing set propositions model relevant facts set atomic actions change values facts Prop Loaded Alive Act load shoot spin wait The effects actions ejct load tt Loaded rfSctshoot Loaded Alive Loaded e spin Loaded Loaded Loaded Loaded ectwait_ shoot load premise having read follows Performing Performing turkey killed gun unloaded effect Performing having gun loaded having unloaded effect Finally performing wait spin If gun unloaded performing shoot gun loaded results premise having If gun unloaded performing effect cases results having gun gun loaded results having loaded spin In scenario moment I load gun shoot turkey action load preconditions requirements means following process 3 spin cylinder Loaded precondition required preconditions 4 wait That moment loaded 2 satisfied actions tt We formulate vacuously perform P k Loaded loadP It shootP tt spinP tt waitP process P simple Observe satisfied effects actions change status global store process remains status Obviously depends number possible global stores 21pr0 performs action precondition evolves case number possible configurations In words configuration The form process typical formalisms reasoning actions concentrate specification elementary actions specifying preconditions effects specify explicitly process In cases following process fact implicitly assumed note exactly form P A Cj LZi P ui actions 4i preconditions Once specified initial global store possible example ainit Alive let initial configuration Loaded process actions change global store compute possible evolutions For described Pinit Dinit Pinit P rules Table 1 From Pinit Dinit structural XJ Chen G De Giacomo Artijicial Intelligence 107 1999 6398 15 p Alive rloaded 1 Alive Loaded P 1 shoot Fig lTrausition systemfortheRussiauTurkey Shoot transition generate evolutions configurations 7 Fig 1 summarizes graph possible For example possible evolution PAliveLoaded load PAliveLoadedwaltPAliveLoaded results having killed turkey Another example sPAliveLoaded PAliveLoaded load PAliveLoaded In PAliveLoaded results having killed turkey Another sPAliveLoaded PAliveLoaded load PAliveLoadedPAliveLoaded PAliveLoaded results having killed turkey What complete information initial situation A straight deal trade lack information nondeterminism forward technique For example prefix actual process sequence dummy atomic actions nondeterministically informa lead global stores according dummy actions tion initial situation initAlive initloaded Assuming turkey alive known gun loaded In scenario introduce incomplete initially known _ specify efSctinitAlive ttAlive efScctinitLoaded ttLoadedttLoaded _ prefix process P initialization actions arbitrary getting new process sequence order dummy Q A tt initAlivett initLoadedP arbitrarily settbeinitial global storea AliveLoaded 76 XJ Chen G De Gicrcomo Artifcid Intelligence 107 1995 6398 Observe new initial configuration initialization initialization taken account Q sequence evolve according forced evolve executing original process P After executing sequence partial knowledge initial situation correctly 32 Lifting tuhk In example illustrate process denoting concurrent activities semantics agents showing parallel execution processes interpreted interleaving synchronization atomic actions Interrupts briefly discussed following A vase table If table lifted vase falls floor While sides table lifted simultaneously vase fall The scenario We formalize scenario introducing following primitive propositions atomic actions Prop VaseOnTableDownLeftSideDownRightSide Act vaseFallsdownLeftdownRightupLeftupRight The effects atomic actions obvious ones eflclvaseFallsVaseOnTable eflctdownLeftDownLeftSideDownLeftSide ctdownRight DownRightSideDownRightSide QctupLeftDownLeftSideDownLeftSide ctupRight DownRightSideDownRightSide 4 DownLeftSide A DownRightSide V YDownLeftSide A DownRightSideAVaseOnTable In scenario processes going concurrently agent Al raise left table agent A control right table environment Env makes vase fall table soon sides table risen We model concurrent activities process LT defined follows AlADownLeftSidedownLeftAi DownLeftSideupLeftAl ADownRightSide downRightA DownRightSideupRightA Env4vaseFallsEnv LTAl IIA I Env4vaseFallsAothers denotes disjunction atomic actions vaseFalls XJ Chen G De Giacomo ArtQicial Intelligence 107 1999 6398 71 L4 tv L IT IV L LT V LT L Fig 2 Transition Lifting Table ur dr Observe vase fall precondition 4 satisfied Furthermore restriction possibility vaseFalls A LT vase fall forced atomic actions blocked I2 Let initial configuration I3 pinit qinit LT VaseOnTable DownLef tSide DownRightSide By making use structural rules Table 1 possible build corresponding transition propositions Side downRight initial configuration It possible shown Fig 2 The figure uses obvious abbreviations denote actions propositions VaseOnTable DownLef tSide DownRight denoted V L R respectively t upRight actions vaseFalls denoted vf dl dr ul ur upLef downleft respectively The Pinit ginit denoted node labeled LT V L R check behavior expected For instance Instead A1 A t respectively However upLef t upRight Pinit Dinit subprocess Env execute proceed performing upLef upRight vase forced fall If synchronized performed C true vase wont fall synchronize condition C true successive configuration action upRight upLef t Note process Env LT seen process certain conditions allows action vaseFalls processes terminates More generally interrupt set actions met cJ performs interrupt execution concurrent completed truthvalue certain flags preconditions executions processes execute interferences interrupt fully handled allowing block execution reset flags resumed In way build interrupting processes A1 A processes action vaseFal disallowing interrupt Is Note weaken restriction LT vaseFallsthen wewill StillforcevaseFalls executed 0 true action vase fall allowed actions synchronize I3 Note LT behaves correctly initial global store And easy verify generates transition initial global stores obviously modulo initial configuration 78 XJ Chen G De Giacomo Artlcial Intelligence 107 lYY9 6398 continueSimilarlywecan allowing regain control I4 buildprocessesthat blocktheexecutionofotherprocesses 33 Relq ruce In example complex process constituted subprocesses plays key role The example illustrates simple effective 4850 duration synchronization technique deal actions instantaneous 591 Namely action duration running modeled 1 instantaneous 2 proposition Running completed atomic action st artRun denoting initiation action global store denoting action started 3 instantaneous The scenario relay race competing atomic action endRun denoting termination action teams composed runners The rules race following I signal given runner team start running 2 runner 100 meters line second runner start reaches running 3 runners team running runner pass baton second runner 4 team second runner arrives finish line baton wins We formalize following primitive propositions scenario introducing atomic actions I 2 denotes team j I2 denotes runner Prop RunningjlOOmLinePassed1Baton FinishLinePassed2Won ij 12 Act startRuniendRunijpasslOOmLineiIpassFinishLine2 giveBatongetBatonlwinsigo 1 ij 12 The effects atomic actions obvious ones estartRun Running Runningij efSctendRun Runningij 7Runningij ectpasslOOmLinelOOmLinePassel lOOmLinePassed efScpassFinishLineizFinishLinePassediz FinishLinePassedz efScctgiveBatonI BatonlBaton fctgetBatoni2 1Batoni Batoniz I4 Priorities processes easily modeled inserting suitable flags preconditions actions XJ Chen G De Giacomo Artificial Intelligence 107 1999 6398 79 efSctwinsi Won1 VWorqWOni efgo 0 The activities involved scenario described following processes abbreviate tt ap ap tt Q Q Runneri A startRunilpasslOOmLineilgiveBatonilendRunilnil Runneri lOOmLinePassedl startRuni2getBatoni2 Teami Runneril I Runneri2giveBatoni1 getBatoni CheckWinnerwins1 nil winsznil RRReady goTeaml 11 Team 11 CheckWinner passFinishLinel2 winslApassFinishLine22wins2 Ready AiAjlRunningij AlOOmLinePassedl A FinishLinePassedlABatonil ABatoniAWoni Let explain processes The process Runneri describes runner team runner starts running passes 100 meters passes baton second runner ends running describes The process Runneri second runner starts running provided meters line gets baton runner passes Finish line ends running activities second runner team 100 process reached The process Tern describes activities team It consists concurrent composition processes Runneri actions giveBatoni 1 getBatoni2 performed synchronously 1 Runneri restriction The process CheckWinner describes activity establishes activities line second team wins The process RR describes activities processes Teamt Team2 CheckWinner rent composition action starts race suitable preconditions tion actions passFinishLinet2 passFinishLine2z tivity described CheckWinner winsz executed synchronously winst respectively As previous examples declare true winner structural It consists concur prefixed restric actions forcing ac rules Table 1 possible explicit build transition possible evolutions scenario generated given initial configuration 34 Translating whi 1 e programs As example process description traditional programming easily represent formalism presented In like ifthenelse constructs particular programs simple sequential programming While translated processes While programs following syntax language called CI generic atomic action effects specified effect function constructs sequential respectively To define translation introduce composition ifthenelse inductively rr detined function structure Whi le programs For process 17 fru p tt ap tr61 62 p tr8l trS2 p trif 61 p 4 noptrSl p Cq5 t noptrp trwhile 4 6 p Q Q new process dehned Q A 4 noptrJ Q 4 nap nop special atomic action effects global store It reflect fact tests assumed transition Then define translation While program 6 process 6 nil Observe intuitive meaning constructs correctly captured resulting behave follows process For example whileloops processes entering condition tested condition true process behaves body followed whileloop condition false exits loop I6 translated For example following fragment control code elevator 6 GroundFloor goDownOneFloor openDoor translated Q GroundFloor noptt f goLotlOrleFloor Q GroundFloor noptt openDoornil 4 Reasoning formalism logic M Once representation dynamic use infer properties like possibility representation reach configuration certain property holds certain goal satisfied invariance certain statements If assumption translation modified accordingly One define derived structural rule comtructa While bahi asociated processes verify rules correspond usually associated constructs 1261 A thorough discussion hope paper XJ Chen G De Giacomo Artcial Intelligence 107 1999 6398 81 Among verifying properties concurrent temporal modal logics proposed logics programs called modal mucalculus process 172843 focus algebra literature 1932 powerful logic programs strictly expressive 33X573 Modal mucalculus logics like PDL APDL CTL CTL It proposed logic expressing temporal properties reactive parallel processes excellent use context concurrent processes 91236545562 We refer introduction modal mucalculus tutorial article 55 thorough systems In paper introduce extension standard modal mucalculus called M allows boolean combinations suitable verify properties systems specified atomic actions modalities representation formalism 41 The logic M The logic M _ Propositions Modalities basically constituted kinds components denote properties global store given configuration denote performing capability actions certain given configuration Least greatestfixpoint constructs denote temporal properties typically defined induction coinduction The formulae M following abstract syntax defined base action formulae generated eaIanyInoneIelelezIe1Ve2 E A fixed set A atomic actions special atomic action denoting union actions action nonexecutable A special atomic action denoting The meaning generic action formula given satisfaction relation set atomic actions denoting synchronized action general oba o iffaEcr Y ahe iffnot Q o el ne2 iffo le anda be2 11 keel Ve2 iffa keel ora be2 Note constructs A QI V 2 I A 4 action formulae independent In particular Formulae M formed inductively action formulae primitive propositions fixed set P variable symbols abstract syntax fixed set kr according following 82 XJ Chen G De Giucorno Artciul Intelligence 107 1999 6398 A primitive proposition formula A P X variable symbol Vat Q action The symbols F v considered sequel use notions scope bound free occurrences variables closed formulas The definitions notions firstorder logic treating k u quantifiers quantifiers As usual mucalculus formulae form bX0 s_wrractic monotonicity J respect X occurrence variable X scope number negation signs This requirement guarantees existence greatest fixpoints associated p uX0 require The semantics M transition 7 valuation V 7 mapping variables states 7 based notions transition valuation Given Var subsets Given valuation V denote VX valuation identical V IJXX E variable Y wxlay yy 1 Y x y _ f Let 7 S R 1 E 2A I7 transition I7 mapping propositions P subsets S V valuation 7 We assign meaning c maps M associating 7 V extension finction M formulae formulae subsets S The extension function defined inductively follows A UA c S tt s WgiM s I v 2v T I 1 u 2 c CQ s E S I 3x s Y k Q s s E R s E c Q s ES 1 Vcz s cy Q c s E R implies s E llX n E E s I w c q ww u E s s I f c q cx VX c s Intuitively following meanings extension function c assigns constructs M The boolean connectives expected meaning XJ Chen G De Giacomo Artificial Intelligence 107 1999 6398 83 The extension e includes execution action satisfying e leads successive state S included extension 0 states s E S starting S The extension e includes action satisfying e leads successive states s starting S execution extension state s included The extension pX smallest subset EP S assigning extension EP resulting extension contained leastfipoint pX respect X guarantees TarskiKnaster Theorem operator IcxE monotonicity SS unique existence fixpoint X E That extension The syntactic monotonicity o I operator Similarly extension uXQ greatest subset E S assigning X extension Ev resulting extension uX greutestfipoint monotonicity respect TarskiKnaster fixpoint contains E That extension operator MQ monotonicity The syntactic o 1 operator 58 unique existence greatest X guarantees Theorem Note M constructs tt 8 1 v 02 XX X formula independent A 2 formula obtained substituting X We use t 2 abbreviation e e In particular 8 vX free A A A XXX occurrences r v 2 Let consider interesting examples M L v extends right possible formulae assume scope 1 e tt expresses 2 efS states inability executing action satisfying e 3 anytt A elf capability executing action satisfying e inevitabilitynecessity executing indicates action 4 state 8 satisfying e exists evolution uX v anyX expresses 1 eventually holds Indeed extension E1 smallest set includes leading states extension 2 states execute action In words extension P includes successive state s exists run s leading eventually finite number steps state extension Note inductive nature property typical properties defined fixpoint XQ invariance evolutions Indeed extension E largest set states extension executable action leads successive state E In words extension includes state s state run s extension Note coinductive nature property typical properties defined greatest fixpoint v anyXexpresses I 5 uX A anyXie 6 pX0 v anytt A anyX holds Indeed evolutions 0 eventudly 1 states extension 2 states execute action executable action leads state EP In words extension EP extension EP smallest set includes expresses includes state s run s leads eventually number steps state extension finite In general M forms liweness sufetv fairness uXYu inlinite allows expressing sophisticated properties dynamic systems formula infinitely htt A X v Y expresses fairness constraint h possible length run consisting wholly actions 55 For example Finally note closed free variables present 4 examples extension I fact independent valuation V It usual u closed true irz u stute F qfthe trunsition valuation V extension fact independent V CD closed I iff s E c 42 Model checking In setting proposed paper reasoning problem model checking given transition true state The formal definition model checking following states verify certain closed formula setting Definition 41 Let 7 S R 1 E 2A L7 transition propositions free variables present M n mapping P subsets S let s E S states let Q closed verify formula The related model checking problem V valuation closed In following abbreviate s E 0 7 s simply s t referring I implicitly 5 Reasoning actions Having presented representation discuss reasoning actions model checking formalism formalism setting The basic idea use reasoning Specilically given initial configuration p q M formulae verify Pit flinit k transition transition implicitly referring pin aigenerated Let consider examples First consider Russian Turkey scenario Section 3 plnlt P oir Alive Loaded We verify yijTilr loadwaitshoottt A loadwaitshootAlive sequence actions load wait results having killed turkey Observe shoot performed necessarily typical instance called XJ Chen G De Giacomo Artcial Intelligence 107 1999 6398 projection problem given initial configuration truthvalue certain fact resulting configuration sequence actions determine The nondeterminism action spin reflected following property 85 pinirqnit b loadspinshootAlive A loadspinshootAlive sequence actions turkey However necessarily load spin results having unloaded shoot result having killed gun pinit Oinir b loadspinshoottt A loadspinshootLoaded Consider following instance model checking Pinit Dinit I PX V wX existence determined It expresses initial configuration If deterministic planning problem starting initial configuration Thus planning model checking techniques reach configuration true atomic actions allowed formalization asks sequence actionsa sequence actions starting reach goal C planto If nondeterministic atomic actions allowed weak expresses possibility goal For example Russian Turkey scenario formalization certain sequence actions achieves planning Pinit oiinit b hXAlive V anyX verified load shown Section 31 shoot spin sequence actions necessarily load achieves spin shoot execution goal having killed turkey However formalize planning problem follows Pinit Dinit k FXg v V Qtt A alX OEACf expresses initial configuration example Russian Turkey scenario existence determined necessarily starting sequence actions reaches configuration C true For Pinif 7 Qinit xXAlive V V attr aX LlEACf verified sequence actions shoot I7 load wait shoot load spin If concurrency taken account planning problem involved issues execute given plan plan agent control given atomic action agent supposed relevant Moreover forms planning closer synthesis control process generation sequence actions appropriate context Although issues tackled proposed setting discuss 86 X J Chm G Lk Giawno Artijid Intdligencu 107 I 999 6398 Next consider case discussed end Section 31 incomplete initial situation information loaded Checking property holds initial situation particular know gun reduced checking Qsyb initAlivejinitLoaded checking true configuration sequence verify exists plan kill turkey s For example know right initialization gun loaded Qsb initAliveinitLoaded ILX1AliveV V utr A aX treilct It easy possible plan load followed shoot Lifting Table scenario formalized Let consider Section 3 Let initial configuration Pini oinir Pinit LT oinlt VaseOnTable DownLef tSide DownRightSide We verify agents Al Ar raise table synchronously vase wont fall floor PinitCrinit upLeft A upRightvaseFalls Instead synchronize vase falls table Pinitfliait b upLeft AupRightV 1upLeftA upRight anyVaseOnTable We prove vase fall fall Pinitonir b YXvaseFallstt anyttA vaseFallsff A anyX Finally consider Relay Race scenario formalized configuration verify beginning Pinit ginit Pilir RR orlit Ready action executed Section 3 Let initial true We Yiiit oiinit k 7oft A lSOlf initial configuration That including executable executable executable actions In fact easy verify atomic action synchronized We verify teams win Pinitr ainit I WXWonl V anyW A WXWon2 V anyX That initial configuration exists execution team 2 wins Moreover executions team 1 team 2 wins exists execution team 1 wins Pinit init k MWonl V Won21 V bwlX I8 Note possible execute initialization Even weaken restriction LT vaseFalls sequence XJ Chen G De Giacomo Artijicial Intelligence 107 1999 6398 87 Furthermore impossible teams win Indeed verify soon team wins win anymore Pinitainit uXWonl uY7Won A anyY A Won2 uYWon1 A anyY AanyX That configuration Won1 Won2 true Won2 Won false possible configurations evolutions 6 Reasoning techniques In section derive technique perform model checking proposed setting We devising transformation functions A transformation F transition systems arcs represent systems arcs represent sets atomic single synchronized actions atomic actions actions transition A transformation H M formulae allow boolean combinations standard modal mucalculus modalities atomic actions allow single atomic actions modalities applying techniques developed The setting resulting model checking means transformations techniques transformations standard 1955 Hence F H use model checking formulae The idea base transformations F H reify transitions transformed introduce new state transition formula new state Fig 3 illustrates action formula reification _ Fig 3a illustrates original transition s t E 72 f It assigns propositional primitive proposition A E P truthvalue aI state s state t We associated s tt iff s E nA interpretation t E nA Fig 3b illustrates resulting introduced reified transition constituted transition state denoted s cx t transition state s newly s 01 t state t We require 1 s s CX t E R s t t E Rw2 2 CT propositional original transition associated s cx t assigns associated s t respectively interpretation atomic action E A truthvalue 3 Us propositional interpretations ttiffaEa Fig 3 Transition reification original b transformed 88 XJ Chen G De Giucomo Artificid htwwe IO7 1999 6398 Definition 61 Let A set actions P set propositions Given 7 S I 1 E 2d I7 I7 mapping propositions define P subsets S transition F7 ST R Rl q SFSustAAstR r I s Y t I c A s f E R R s t t Icy c A s t E R nFp s I s E l7p foreach p E P nFtIsRol USA foreachaEd In addition given valuation V I define FVX s s E VX X E Var Observe arcs transition F7 labeled WI 2 Definition 62 Given M formula define H inductively follows HA A H tt tt Hcfs f HCD HQ HQ ue A 2ff Hel lwlle wzlH HpX FXH HuX uXH HQl A 32 Hq A Hz HX X H1v2HvH2 Observe H 0 standard modal mucalculus formula single actions W 1 2 appear modalities Theorem 63 Let transition linearly bounded size 7 7 S I E 2d I7 The size F7 Proof For transition T let statenol states 7 number edges I F state_noFI 2 x edgenol statenol q edgenol denote number respectively By definition edgenoI edge_noFI Theorem 64 Let 0 u M Of jtirmula The size H linearly bounded size XJ Chen G De Giacomo Artijicial Intelligence 107 I999 6398 89 Proof Let size denote size formula It easy verify induction structure formula sizeH0 C c size q Theorem 65 Let transition Then valuation V 7 s E S 7 7 S Y E 2 A M formula Proof First induction structure Q s s E R Q iff s Y s E pi Indeed Q s s E R b aie definition FI definition s U s E LfFa converse FI s s E R E Y Y b For cases result follows immediately induction hypothesis E athen s CY s E nFa Now ready prove thesis theorem Without formulae form restrict attention loss generality A 4 1 t A 02 Q pX0 X The proof given induction number nested fixpoints constructs ILX Base case If fixpoint constructs present verify thesis holds induction structure All cases immediate case s E P iff s E 4 e A uHpi prove By definition s E Q P implies exist Y s o Q s E PT By induction iff s s E R s E Hv WJ By definition FI s CZ s s E R s s E 2vwF1 F7 Moreover s s E Rcr b Q s o s hypothesis s E PT e Fi Finally definition FI s s CZ s E R Hence concludes E wte A uJHP _ By definition I s E wte A wHPF implies exist o s s s CY s E R s s s E Ri s s E p s E Hly By induction hypothesis s E iT iff s E Hq Moreover sj o FI FV3 s s E R u k Q Hence conclude s E eFV Inductive case Let assume thesis holds formula k nested fixpoint constructs We prove J pX P k 1 We recall Tarski t Knaster Theorem fixpoints iff exists ordinal I s E PXP s E 6 X iP JL X iP defined transfinite induction puXlyc ltXPi h limit ordinal We proceed transfinite induction ordinals 6 Base case tramfinite induction p0Xq defined asfJ trivially s E peXUc iff s E jXHPj Successor cuse transjinite itzduction We want s E I XSc iff s E CLIXH definition reduces Since P contains k fixpoint constructs inductive hypothesis k So remains prove Notice valuations differ value X If holds 1 3 straightforward Let prove 3 written induction formation HP 2 holds s E FXIwXwX iff s E UXXHX By definition F valuations reduces s E weXV iff Y E ILXH holds transfinite inductive hypothesis Hence considering 1 2 conclude s E PIX iff s E MXHJ Limit case transfinitr induction Let limit ordinal s E phXPc iff exists ordinal 6 h s E ugX9 By transfinite induction hypothesis holds s E X5 iff s E XH s E jx iff s E pXHric This completes transfinite induction So ordinals 6 holds s E kcXPc iff s E pcXHF The induction nesting fixpoint constructs proven theorem q completed XJ Chen G De Giacomo Artcial Intelligence 107 1999 6398 91 Theorem 65 gives sound complete technique model checking setting proposed paper To check 7sb check F7 s b HQ Theorems 63 64 state F7 respectively allow conclude technique H linearly related 7 fact efficient formula The problem model checking standard mucalculus finite transition NP fl coNP 21 Model checking algorithms known run known 171 PI Ock 22 171 size transition I size greatest fixpoints formula k number alternating variables typically expressed small number alternating fixpoints typically model checking performed low order polynomial setting O time By Theorems 63 64 results applied immediately scope 19 Moreover properties 7 section observing allow use software practical point view tools Edinburgh Concurrency lo Concurrency Workbench North Carolina 111 implemented automated model checking standard modal mucalculus We conclude transformations Workbench formulae 7 Further issues reasoning dynamic systems In section discuss reasoning dynamic systems important issues related representation First relate model checking special case We special case simple isolate single model reducing setting information verification truthvalue formula implication implication logical showing logical Second discuss issue equivalent In context process equivalence descriptions investigated verifying tools implemented descriptions equivalences Here coincides natural extension relation deduced M bisimulation equivalence proved experimental algebras equivalence wellknown impact 2o Note transformation H change number alternating fixpoints 2AvailableathttpwwwcsbrisacukneilExternalLinkscomms94cwbcwbhtm 22AvailableathttpwwwcscncsuedueosusersrranceWWWcwbnchtml 92 XJ Chm G De tiiacomo Artijriai Intelligence 107 1999 6398 7 I Relating model checking logical implication In subsection relate model checking 25275253 Given finite transition logical implication following 7 difficult line build reasoning set formulae 07 encode 7 Let 7 S R 1 E zA n transition s E S formula form obtained including set formulae DI The set formulae DI encodes transition 7 sense given following proposition Proposition 71 Given finite s E S urzd M formulae transition 7 S I Y E 2A II Is DfO This proposition 531 applying follows directly transformations work churucteristic formulae F H defined previous section 2552 The result shows model checking seen special case logical model implication The set formulae DT seen providing essentially verification truthvalue formula checking single unique model logical reduced model information reduced implication Note practical point view generic DI logical implication inefficient EXPTIMEcomplete completeness standard mucalculus Indeed DT essentially according 19201 instead model checking highly M linearity transformation H EXFTIME 7 possible size 7 logical implication theorem prover M 72 Equivalent descriptions A question naturally arises descriptions dynamic considered descriptions necessarily equivalent Observe case asking property related properties modeled dynamic XJ Chen G De Giacomo Artcial Inrelligence 107 1999 6398 93 approach Adopting algebraic descriptions classes processes Two trace identifies systems systems run perform certain allows benefit equivalent descriptions23 literature study equivalence main notions equivalences equivalence set possible hand identifies action perform action matching 30 bisimulation equivalence runs traces Bisimulation 45 Trace equivalence process algebra proposed equivalence identify Here focus bisimulation systems base traces trace equivalence base branching behaviors interested identifying equivalence We introduce natural extension bisimulation formalism We state 1 transition representation 72 truthvalue primitive proposition sl evolve si synchronized arriving state s equivalent equivalence studied 45 71 equivalent s2 1 2 action CY s action si vice versa Formally Definition 72 Let 7 S 1 E 2d l7 7 S R I E 2d n transition systems 1 YI s S x S bisimulation r r E 8 cx E A implies 3t r t E R t t E 8 A r E nA A I I E nA b r t E R c r t E Rk implies 3 r t E Ra t t E 8 s E S s s equivalent written R s s E 8 2 s E s bisimulation s Xl s exists The bisimulation equivalence logic fixpoints firstorder mucalculus bisimulation time respect size systems l equivalence xb finite transition xb expressed simple formula firstorder verification polynomial systems performed 4647 As consequence We remark investigations equiva lence directly process descriptions time respect size process descriptions devised typical forms processes check bisimulation In particular algorithms run polynomial 29 An alternative way define equivalence descriptions use logic systems considered iff logical formula distinguish 28 Definition 73 Let 7 S FL 1 E 2d l7 7 S R I Y E 2d n systems For s E S s E S s s equivalent respect M written transition S MM S iff CD E M 7 s Q E M I I s b In fact forms equivalence xb x coincide loose condition imagejniteness A configuration p lmagenite Vo E A p I 23 Good comparisons notions systems equivalences 166061 p CF p 0 E KJ finite A imagefinite image finite reachable configurations Proposition74 Let 7 S R imagejinite transition systems s E S s E S 6 2A l7 7 S FL E 2A l7 This proposition follows analogous We remark 45 standard mucalculus equivalence defined previous section Proposition properties descriptions equivalent according words implies distinguishability respect logic M bisimulation 74 implies theorem 24 55 bisimulation transformations applying F H M sense M distinguishes bisimulation dimensioned verifying transition systems zt Or equivalence b captures exactly notion equivalence 8 Conclusion The research presented paper regarded bridge area Concurrency area Reasoning Computer Science Actions Artificial Intelligence Specifically presented model checking based framework reasoning constituted concurrent activities performed complex actions processes interacting agents We shown Computer Science Intelligence state world framework wellsuited arisen originally reasoning complex actions area Concurrency Artificial information simplified significant case having complete The strong connection area Concurrency Computer Science allowed use body results devised area decade address issues like nonterminating interrupts hardly tacked far Artificial synchronizations communications Intelligence executions Besides understanding Actions technical results issues involved Artificial Intelligence work gives better conceptual integrating concurrent processes Reasoning tools In particular referring The possibility specifying preconditions The separation specification atomic actions affect state world specification process noticed general complex actions 37 actions establishing given action executed process order control process This choice proposal The need maintain information world global store case information Such theorem NI turn extension HennessyMilner Theorem 28 1 current state current state XJ Chen G De Giacomo ArtiJcial Intelligence 107 1999 6398 95 activities executed going process remains point use singlestep new state world remains Related return process In general allows simple elegant treatment concurrency nonterminating transitions situation calculus executed 14151 use singlestep transitions transitions behaviors Further technical extensions present work possible directions We outline The extension concerns essential cr It follows 21 22 However simple form update introduced possible global store resulting performing Definitions proposed setting function form update global store In Section 2 set aat compute action o retain precisely inputs adopt complex form update based bl example notion distance global stores specify effects actions general case hold global address store Observe interpretations action simpler update theories discussed 31 Research dfamily languages semantics essentially successorstate formulae Prop instead literals Moreover indirect effects specifying domain constrains update interested based defining transition point set aat terms 252339 function relevant applies returning function Another possible extension concerns state world given point set atomic propositions form global store In present work global store That global store thought set boolean variables atomic proposition A possible extension set multivalued domain Such extension way transition verification needs extended expressed order logic plus fixpoints relevant global store fixed Indeed logic new kind properties Databases query languages based 4 systems built remains essentially l complex variables firstorder easily accommodated global store Research order account setting consider interpretation transactions Finally introduced incomplete let consider levels abstractions Section 1 We believe great mixing representations level 2 level 3 mixing process algebra approach presented usual logical approach This allow introduce better controlled way For example specify agents behavior presented agents behavior environment process algebras logics description transition completely known means process description typically partially known happens logical axioms To end research loose specification description partial 735 research interpreted 131 relevant include assertions individuals representation knowledge information 96 XJ Chen 6 De Giucomo Artificial Intelligence 107 1999 6398 Acknowledgements We deeply invaluable discussions Rocco De Nicola algebra modal mucalculus Also like thank anonymous remarks improved style content paper indebted process referees References I S Abiteboul R Hull V Vianu Foundations Databases Addison Wesley Reading MA 1995 2 C Baral M Gelfond Representing concurrent actions International Joint Conference Artificial Intelligence 131 J Bergstra J Klop Process algebra synchronous communication 137 extended logic programming IJCAI93 ChambCry France 1993 pp 86687 Proc 13th I Inform Control 60 1984 109 4 AJ Bonner M Kifer Concurrency communicauon transaction logic Proc 5th International Conference Database Theory ICDT95 1995 5 SE Bomscheuer M Thielscher Representing concurrent Pure Applied Logics IGPL Special Interest Group 1996 355368 actions solving conflicts Journal issue ESPRIT project MEDLAR 4 3 6 G Boudol R Simone V Roy D Vergamini Process calculi theory practice Verification tools Proc Workshop Automatic Verification Methods Finite State Systems Lecture Notes Computer Science Vol 407 Springer Berlin 1990 171 G Boudol K Larsen Graphical versus logical specifications Theoret Comput Sci 106 1992 320 8 T Bylander Complexity Proc 12th International results planning Joint Conference Artificial Intelligence IJCAI9 I Sydney Australia I99 1 pp 274279 9 R Cleaveland Tableauxbased model checking propositional mucalculus Acta Informatica 27 1990 725747 IO R Cleaveland J Parrow B Steffen The concurrency workbench A semanticsbased tool verification concurrent systems ACM Trans Programming Languages Syst 15 1993 3672 1 l R Cleaveland S Sims The NCSU concurrency workbench ComputerAided Verification CAV9h Lecture Notes Computer Science Vol 1102 Springer Berlin 1996 pp 394397 121 M Dam CTL ECTL fragments modal mucalculus Proc Colloquium Trees Programming Lecture Notes Computer Science Vol 581 Springer Berlin 1992 pp 14 Algebra 164 131 G De Giacomo M Lenzerini Boosting correspondence description logics propositional logics dynamic pp 2052 12 Proc 12th National Conference Artificial Intelligence AAAI94 Seattle WA 1994 14 G De Giacomo HJ Levesque Y Lesperance Reasoning interrupts exogenous action situation calculus Artificial Intelligence IJCAI97 Nagoya Japan 1997 abour concurrent executions prioritized Proc 15th International Joint Conference IS G De Giacomo R Reiter M Soutchanski Execution monitoring highlevel robot programs Proc 6th International Conference Principles Knowledge Representation Reasoning KR98 1998 161 R De Nicola Extentional equivalences 171 E Emerson J HaIpem Sometimes temporal logic J ACM 33 1 1986 151178 transition Acta Informatica 24 1987 2 I l237 revisited On branching time versus linear time 181 EA Emerson Handbook Theoretical Computer Science Vol B Elsevier Amsterdam 1990 Chapter 16 Logics Concurrency Structure 1191 EA Emerson Automated temporal reasoning reactive systems versus Automata Lecture Notes Computer Science Vol 1043 Springer Berlin 1996 pp 41101 ZO EA Emerson CS Jutla The complexity tree automata logics programs Proc 20th Annual Symposium Foundations Computer Science 1988 pp 328337 211 EA Emerson CS Jutla AP Sistla On model checking Proc 5th International Conference ComputerAided Verification Lecture Notes Computer Science Vol 697 Springer Berlin 1993 pp 385396 fragments mucalculus XJ Chen G De Giacomo Artificial Intelligence 107 1999 6398 91 22 EA Emerson CL Iei Efficient model checking fragments mucalculus Proc 1st IEEE Symposium Logics Computer Science LICS86 1986 pp 267278 23 M Gelfond V Lifschitz Representing action change logic programs J Logic Programming 17 1993 301322 24 M Gelfond V Lifschitz A Rabinov What limitations situation calculus R Boyer Ed Automated Reasoning Essays Honor Woody Bledsoe Kluwer Dordrecht 1991 pp 167179 25 S Graf J Sifakis A model characterization observational congruence finite terms CCS Inform Control 68 1986 125145 1261 FNHR Nielson Semantics Applications Wiley New York 1992 27 JY Halpem MY Vardi Model checking vs theorem proving A manifesto Intelligence Press New York 1991 pp 151176 Mathematical Theory ComputationPapers V Lifschitz Ed Artificial Honor John McCarthy Academic 28 M Hennessy R Milner Algebraic laws nondeterminism concurrency J ACM 32 1 1985 137 161 29 Y Hirishfeld F Moller Decidability results automata process theory Logics Concurrency Structure versus Automata Lecture Notes Computer Science Vol 1043 Springer Berlin 1996 pp 102 148 30 C Hoare Communicating 31 H Katsuno A Mendelzon On difference updating knowledge Sequential Processes Prentice Hall London 1985 Proc 2nd International Conference Principles Knowledge Representation 91 Cambridge MA 1991 pp 387394 base revising Reasoning KR 32 D Kozen Results propositional mucalculus Theoret Comput Sci 27 1983 333355 33 D Kozen R Pah A decision procedure propositional mucalculus Proc 2nd Workshop Logic Programs Lecture Notes Computer Science Vol 164 Springer Berlin 1983 pp 3 13325 34 D Kozen J Tiuryn Logics programs J van Leeuwen Ed Handbook Theoretical Computer Science Elsevier Amsterdam 1990 pp 790840 35 KG Larsen L XinXin Compositionality operational semantics contexts J Logic Comput 1 6 1991 761795 36 KJ Larsen Proof systems satisfiability HennessyMilner logic recursion Theoret Comput Sci 72 1990 265288 37 H Levesque R Reiter Y Lesperance F Lin R Scherl GOLOG A logic programming language dynamic domains J Logic Programming 3 1 1997 5984 38 V Lifschitz Frames space situations Artificial effects 39 V Lifshitz G Karta Actions indirect Intelligence 46 1990 365376 preliminary report Proc 4th International Conference Principles Knowledge Representation pp 341350 Reasoning KR94 Bonn Germany 1994 40 F Lin R Reiter State constraints revisited J Logic Comput Special Issue Action Processes 4 5 1994 655678 41 F Lin Y Shoham Provably correct theories action preliminary report Proc 9th National Conference Artificial Intelligence AAAI91 Anaheim CA 1991 pp 349354 42 F Lin Y Shoham Concurrent actions situation calculus Proc 10th National Conference Artificial AAAI92 43 Z Manna A Pnueli The anchored version temporal San Jose CA 1992 pp 59595 Intelligence J Bakker P Roever Eds Linear Time Branching Time Partial Order Logics Models Concurrency G Rozenberg Lecture Notes Computer Science Vol 354 Springer Berlin 1989 pp 201284 framework 44 KL McMillan Symbolic Model Checking Kluwer Dordrecht 1993 45 R Mimer Communication 46 YN Moschovakis Elementary 47 D Park Fixpoint induction proofs program properties Concurrency Prentice Hall London 1989 Induction Abstract Structures NorthHolland Amsterdam 1974 B Meltzer D Michie Eds Machine Intelligence Vol 5 Edinburgh University Press 1970 pp 5978 48 JA Pinto Temporal reasoning situation calculus PhD Thesis Department Computer Science University Toronto 1994 49 R Reiter The frame problem result Computation Papers Honor John McCarthy Academic Press New York 1991 pp 359380 Mathematical V Lifschitz Ed Artificial situation calculus A simple solution completeness Intelligence regression goal Theory 98 X J Chcn G De Giacomo Artijiciul tntdlience 107 I 999 6398 50 R Reiter Natural actions concurrency continuous time International Conference Principles Knowledge Representation Z13 situation calculus Reasoning Proc 5th KR96 1996 pp 5 I S Rosenschein Plan synthesis A logical approach Proc 8th International Joint Conference Artificial Intelligence IJCAI81 Vancouver BC 1981 52 B Steffen Characteristic formulae Proc ICALP Lecture Notes Computer Science Vol 372 Springer Berlin 1989 pp 723732 53 B Sten A Ingolfsdottir Characteristic formulae processes divergence Inform Comput 110 I 1994 149163 54 C Stirling Modal temporal logic S Abramsky DM Gabbay TSE Maibaum Eds Handbook Logic Computer Science Clarendon Press Oxford 1992 pp 477563 1551 C Stirling Modal temporal logics processes Lecture Notes Computer Science Vol 1043 Springer Berlin 1996 pp 149237 Logics Concurrency Structure versus Automata 56 RS Streett EA Emerson The propositional mucalculus elementary Proc 6th International Programming Lecture Notes Computer Science Vol 172 Colloquium Automata Languages Springer Berlin 1984 pp 465472 S7 RS Streett EA Emerson An automata Inform Control 81 1989 249264 theoretic decision procedure propositional mucalculus 58 A Tarski A latticetheoretical 59 E Temovskaia 153164 Iixpoint theorem applications Pacific I Math 5 1955 285309 Interval situation calculus Proc ECAI94 Workshop Logic Change 1994 pp 60 J van Benthem J van Eijck V Stebletsova Modal logic transition systems processes J Logic Comput 4 5 1994 81 l855 1611 R van Glabbeek The linear timebranching time spectrum CONCUR90 Lecture Notes Computer Science Vol 458 Springer Berlin 1990 pp 278297 62 G Winskel A note model checking Proc 11 th International Colloquium Programming Lecture Notes Computer Science Vol 372 Springer Berlin ilcalculus modal Automata Languages 1989 pp 761772