Artiﬁcial Intelligence 174 2010 570584 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Generalizing constraint satisfaction trees Hybrid tractability variable elimination Martin C Cooper Peter G Jeavons b András Z Salamon bc IRIT University Toulouse III 31062 Toulouse France b Computing Laboratory University Oxford Oxford OX1 3QD UK c OxfordMan Institute Quantitative Finance 9 Alfred Street Oxford OX1 4EH UK r t c l e n f o b s t r c t Article history Received 17 August 2009 Received revised form 13 February 2010 Accepted 24 March 2010 Available online 27 March 2010 Keywords Constraint satisfaction Tractability Computational complexity Arc consistency Variable ordering Variable elimination central generic problem artiﬁcial The Constraint Satisfaction Problem CSP intelligence Considerable progress identifying properties ensure tractability problems property treestructured In paper introduce brokentriangle property allows deﬁne novel tractable class problem signiﬁcantly generalizes class problems tree structure We brokentriangle property conservative preserved domain reduction arc consistency operations polynomialtime algorithm determine ordering variables broken triangle property holds determine ordering exists We present nonconservative extension brokentriangle property suﬃcient ensure tractability detected polynomial time We brokentriangle property extension eliminate variables properties provide basis preprocessing procedures yield unique closures orthogonal value elimination enforcement consistency Finally discuss possibility brokentriangle property variable ordering heuristics 2010 Elsevier BV All rights reserved 1 Introduction The Constraint Satisfaction Problem CSP central generic problem artiﬁcial intelligence instance consists collection variables assigned values subject speciﬁed constraints Each CSP instance underlying undirected graph known constraint network nodes variables instance edges connect precisely pairs variables related speciﬁed constraint Such graph called structure instance There wellknown eﬃcient algorithm solving CSP instance underlying constraint network tree 12 If establishing arc consistency leads domain wipeout solution exists solution exists backtrackfree search variables ordered designated root leaves However having tree structure restrictive property It worthwhile exploring general problem classes identify widelyapplicable properties allow eﬃcient solution algorithms Any subclass general CSP solved polynomial time identiﬁed polynomial time called tractable subclass Corresponding author Email addresses cooperiritfr MC Cooper PeterJeavonscomlaboxacuk PG Jeavons AndrasSalamoncomlaboxacuk AZ Salamon 00043702 matter 2010 Elsevier BV All rights reserved doi101016jartint201003002 MC Cooper et al Artiﬁcial Intelligence 174 2010 570584 571 There considerable research effort identifying tractable subclasses CSP past decades Most work focused general approaches identifying forms constraint suﬃciently restrictive ensure tractability matter combined 34 identifying structural properties constraint networks ensure tractability matter forms constraint imposed 25 The ﬁrst approach considerable success characterizing precisely forms constraint ensure tractability matter combined A set constraint types property called tractable constraint language In general shown tractable constraint language certain kinds algebraic properties known polymorphisms 6 A complete characterization possible tractable constraint languages established following cases conservative constraint languages constraint languages containing unary constraints 7 constraint languages 2element domain 8 3element domain 9 The second approach considerable success characterizing precisely structures constraint net works ensure tractability matter constraints imposed For class problems arity constraints bounded ﬁxed constant binary constraint problems shown subject certain technical assumptions class structures ensure tractability structures bounded treewidth 10 12 This result signiﬁcantly extends class treestructured CSPs retaining tractability In practice constraint satisfaction problems usually possess suﬃciently restricted structure use suﬃciently restricted constraint language fall tractable classes They properties ensure solved eﬃciently properties concern structure constraint network form constraints Such properties called hybrid reasons tractability 1316 widely studied wellunderstood language properties structural properties described A classical approach tractability CSPs identify conditions class CSP instances construct ordering variables allows instance solved eﬃciently Freuder introduced condition allows variable ordering polynomial time variable ordering provides backtrackfree search procedure 1 The condition amounts requiring level consistency enforced great measure called width constraint graph More generally backtracking bounded terms relationship level consistency width constraint graph 17 We note Freuders notion width equivalent notion treewidth widely graph theory 18 The basic property described paper BrokenTriangle Property BTP polynomialtime tectable property deﬁnes novel hybrid tractable class binary CSP instances The BTP viewed forbidding occurrence certain subproblems ﬁxed size CSP instance A number properties subproblems bounded size guarantee tractability previously identiﬁed literature 1920 BTP unusual incorporates variable ordering information The class CSP instances BTP respect ordering tractable instances polynomialtime procedure determine variable ordering guarantees backtrackfree search Our class contained classes considered Freuder require ﬁxed relationship treewidth consistency 117 We treestructured CSP instances satisfy BTP instances tree structured including unbounded treewidth We BTP certain generalizations deﬁne variableelimination strategy applied binary CSP Even variables eliminated strategy provide basis new form variableordering heuristic For example BTP satisﬁed subset S variables variables placed end variable ordering This guarantees search algorithm maintains arc consistency search backtrack variables S The paper structured follows Sections 2 3 introduce brokentriangle property prove tractability binary CSP instances satisfying BTP case variable ordering unknown priori Section 4 shows BTP deﬁnes tractable class properly includes known tractable classes Section 5 gives alternative characterization instances BTP Section 6 deﬁnes nonconservative generalization BTP Variable elimination means BTP extension discussed Sections 7 8 Finally Section 9 discuss possible use BTP variableordering heuristics prove intractability ﬁnding maximum subset variables CSP instance BTP 2 The brokentriangle property In paper focus binary constraint satisfaction problems A binary relation domains D D j subset D D j For binary relation R reverse relation revR deﬁned v u u v R A binary CSP instance consists set variables variable denoted number 1 n variable domain D containing possible values variable set constraints Each constraint form cid4i j Rcid5 j variables pair j called scope constraint R relation R D D j specifying allowed combinations values variables scope To simplify notation introduce notion canonical constraint relation combines speciﬁed S S set relations information pair variables j In following deﬁnition use notation denote intersection relations S cid2 572 MC Cooper et al Artiﬁcial Intelligence 174 2010 570584 Fig 1 The brokentriangle property variables j k Deﬁnition 21 Suppose j variables CSP instance Denote U j set constraint relations speciﬁed ordered pair variables j The canonical constraint relation variables j denoted R j deﬁned cid3cid4 cid5 R j U j revR cid6 cid6 R U ji cid7cid8 The canonical constraint relation R j contains precisely pairs values allowed variables j constraints j Note R j revR ji If speciﬁed constraints pair variables j pairs values allowed R j deﬁned complete relation D D j This viewed deﬁning value intersection Deﬁnition 21 D D j Throughout paper consider binary CSP instance use notation R j refer canonical constraint relation variables j Deﬁnition 22 A binary CSP instance satisﬁes brokentriangle property BTP respect variable ordering triples variables j k j k u v R j u R ik v b R jk u b R ik v R jk The brokentriangle property represented diagrammatic form implication shown Fig 1 In ﬁgure vertex represents assignment value variable variable oval drawn containing possible values Each line represents consistent assignment values pair variables A line joins element u D element v D j u v R j The BTP j k simply says brokentriangle u v b illustrated Fig 1 true triangle u v c c equal b It important note BTP satisﬁed triples j k description instance specify constraint pairs variables As noted speciﬁed constraint j R j allows pairs values We remark deﬁnition BTP similar standard deﬁnition directional path consistency 2 little stronger To directional path consistent requires triples variables j k j k u v R j exists c Dk u c R ik v c R jk implication shown Fig 1 satisﬁed c necessarily equal b We remark deﬁnition BTP similar deﬁnition hyper3consistency given 21 little weaker To hyper3consistent requires triples variables j k u v R j u R ik v b R jk u b R ik v R jk A simple reformulation Deﬁnition 22 shows BTP equivalent forbidding existence subproblems certain form MC Cooper et al Artiﬁcial Intelligence 174 2010 570584 573 Lemma 23 A binary CSP instance satisﬁes brokentriangle property respect variable ordering contain ordered triple variables j k j k values b Dk u D v D j u v R j u R ik v b R jk u b R ik v R jk For element D write R ja represent b D j b R j image relation R j The result shows BTP equivalent having certain inclusion relations certain image sets Lemma 24 A binary CSP instance satisﬁes brokentriangle property respect variable ordering triples variables j k u v R j cid8 R iku R jkv cid8 R jkv R iku 1 cid4 cid4 Proof The condition R iku R jkv R jkv R iku equivalent stating exist elements R iku b R jkv R jkv b R iku By deﬁnition image element relation turn equivalent statement exist b Dk u R ik v b R jk u b R ik v R jk Hence result follows Lemma 23 cid2 Deﬁnition 25 A class CSP instances called conservative closed domain restrictions addition arbitrary unary constraints A property called conservative deﬁnes conservative class instances Lemma 26 The brokentriangle property respect ﬁxed variable ordering conservative Proof Lemma 23 states brokentriangle property holds binary CSP instance contain certain subproblems Removing values domain variable instance create new subproblems cause brokentriangle property false cid2 This result implies brokentriangle property invariant domain reduction operations arc consis tency binary CSP instance satisﬁes brokentriangle property closure arc consistency Indeed preprocessing operation performs domain reductions arc consistency pathinverse consistency 22 neighbourhood substitution 2324 applied looking variable ordering brokentriangle property satisﬁed reduction operations destroy brokentriangle property likely hold A set CSP instances satisfy brokentriangle property structure constraint graph language constraint relations combination Example 27 Let I binary CSP instance constraint relations zerooneall ZOA relations deﬁned 25 Such relations property pair variables j u D compatible zero possible values j ZOA relations notably include relations speciﬁed 2SAT clauses An important property instances constraint relations ZOA remains true establishing arc consistency path arc consistent path consistent By arc sistency Therefore assume loss generality I consistency deﬁnition ZOA relations R ju singleton equal D j j distinct variables u D The BTP violated u D v D j R iku R jkv singletons R iku cid9 R jkv However case cid4u vcid5 deleted R j path consistency Therefore I satisﬁes BTP Further examples broad classes CSP instances satisfy BTP discussed Section 4 Theo rem 48 3 Tractability BTP instances In section CSP instance brokentriangle property respect ﬁxed variable ordering ﬁnding solution tractable Moreover problem ﬁnding suitable ordering exists tractable For binary CSP instance n variables let d maxD1 Dn let e number constraints Note assignment values cid4u1 ukcid5 ﬁrst k variables binary CSP instance called consistent ui D 1 cid2 cid2 k ui u j R j 1 cid2 j cid2 k 26 Theorem 31 For binary CSP instance satisﬁes BTP respect known variable ordering possible ﬁnd solution O d2e time determine solution exists 574 MC Cooper et al Artiﬁcial Intelligence 174 2010 570584 Proof By discussion Section 2 instance BTP respect establishing arc consistency preserves BTP Furthermore known arc consistency established O d2e time 27 If results domain instance solutions Therefore assume following CSP instance arc consistent nonempty domains We assign value u1 D1 ﬁrst variable D1 nonempty To prove result suﬃcient k 2 n consistent assignment cid4u1 uk1cid5 ﬁrst k 1 variables extended consistent assignment cid4u1 ukcid5 ﬁrst k variables The case k 2 follows arc consistency By Lemma 24 j k R ikui R jku j R jku j R ikui For ﬁxed k 2 apply Lemma 24 pair variables occurring k ordering establish set R ikui k totally ordered subset inclusion minimal element cid3 R i0kui0 R ikui ik 2 i0 k Since instance arc consistent R i0kui0 cid9 By deﬁnition R ikui follows Eq 2 cid4u1 ukcid5 consistent assignment ﬁrst k variables choice uk R i0kui0 The time taken calculate intersections 2 O ed overall value domain checked relevant constraint cid2 Theorem 32 Given binary CSP instance I polynomialtime algorithm ﬁnd variable ordering I satisﬁes brokentriangle property respect determine ordering exists Proof Given binary CSP instance I deﬁne associated CSP instance P I solution precisely exists suitable variable ordering I To construct P I let O 1 O n variables taking values 1 n representing positions ordering We impose ternary constraint O k maxO O j 3 triples variables j k I brokentriangle property fails hold u D v D j b Dk variables ordered j k The instance P I solution precisely ordering variables 1 n I satisﬁes brokentriangle property Note solution obtained represents partial order instance O O j assigned value cid9 j extended total order satisﬁes constraints lineartime topological sort For triple variables I construction corresponding constraints P I requires O d4 steps check constraints add There O n3 triples constructing instance P I takes O n3d4 steps polynomial size I The constraints P I form 3 constraints property maxclosed1 28 Maxclosed constraints tractable constraint language 28 CSP instance maxclosed constraints solved establishing generalized arc consistency 29 choosing maximum element remains variable domain Since size P I polynomial size I follows instance P I solved time polynomial size I cid2 In Section 7 alternative eﬃcient approach ﬁnding suitable variable ordering determining ordering exists Corollary 75 4 Related tractable classes In section brokentriangle property generalizes known tractable classes unbounded treewidth Deﬁnition 41 A binary relation R j sets D D j D j totally ordered said right monotone D b c D j b R j b c c R j A commonlyused right monotone constraint inequality constraint value variable cid2 value variable j The complete relation allows combination values right monotone 1 To verify constraint maxclosed need 2 tuples satisfy constraint compute maximum 2 values coordinate position tuples obtain tuple satisﬁes constraint 28 To verify holds simply note p1 maxq1 r1 p2 maxq2 r2 maxp1 p2 maxmaxq1 q2 maxr1 r2 constraints P cid14 MC Cooper et al Artiﬁcial Intelligence 174 2010 570584 575 Deﬁnition 42 A binary CSP instance renamable right monotone respect variable ordering set Dk k 2 n ordered separately R ik right monotone k Proposition 43 If binary CSP instance renamable right monotone respect variable ordering satisﬁes brokentriangle property respect Proof Suppose CSP instance renamable right monotone respect variable ordering let k variable Since instance renamable right monotone respect ordering Dk k R ik right monotone Now suppose j k variables ordering Then R ik R jk right monotone Now suppose u v R j u R ik v b R jk If b u b R ik R ik right monotone b v R jk R jk right monotone Hence Deﬁnition 22 brokentriangle property satisﬁed triple j k Since choice k arbitrary follows instance satisﬁes BTP cid2 Using Lemma 24 obtain simple suﬃcient condition brokentriangle property hold Lemma 44 A binary CSP instance satisﬁes brokentriangle property respect variable ordering triples variables j k R ik R jk complete relation Proof If R ik complete relation R iku Dk R jk complete relation R jkv Dk In case Lemma 24 instance satisﬁes BTP cid2 Proposition 45 If binary CSP instance tree structure satisﬁes brokentriangle property respect variable ordering node occurs children Proof If order nodes tree designated root leaves node connected node earlier ordering Hence CSP instance tree structure variable ordering kind property variable k variable k R ik complete relation Hence Lemma 44 instance satisﬁes BTP respect ordering cid2 To obtain class examples note CSP instance P arbitrary arity associate binary CSP instance I P called dual P 30 instance I P variable constraint P binary constraint pair variables associated overlapping constraints P The binary constraints I P deﬁned ensure variables I P values agree corresponding shared variables P 30 details Lemma 46 Let P CSP instance arbitrary arity constraint scopes E 1 E2 Em constraints allow combi nations values ﬁxed domain D The dual instance I P corresponding variables 1 2 m BTP respect ordering triples E E j Ek j k E Ek E j Ek E j Ek E Ek 4 Moreover condition holds dual instance P cid14 constraint scopes BTP respect Proof By Lemma 24 I P BTP respect triples j k u v R j R iku R jkv R jkv R iku But deﬁnition dual 30 ﬁxed pair u v range R iku determined purely overlap E Ek range R jkv determined purely overlap E j Ek Hence I P BTP respect given condition holds E Ek E j Ek Finally note dual instance P constraint scopes obtained dual instance P appropriate choice D imposing restrictions domains Hence Lemma 26 dual P BTP respect cid2 cid14 cid14 The edges tree ordered satisfy condition given Lemma 46 obtain following corollary result Corollary 47 The dual treestructured binary CSP instance BTP respect ordering Now let TREE constraint satisfaction problem consisting instances tree structure RRM CSP consisting instances renamable right monotone respect variable ordering DUALTREE CSP consisting instances duals instances tree structure Note classes incomparable example instance consisting single equality constraint belongs TREE DUALTREE 576 MC Cooper et al Artiﬁcial Intelligence 174 2010 570584 Fig 2 An instance BTP RRM TREE DUALTREE RRM Moreover RRM DUALTREE contain instances arbitrary treewidth example RRM contains instances constraint structure grid arbitrary size DUALTREE contains instances constraint structure clique arbitrary size dual instance structure star Finally let BTP CSP consisting instances brokentriangle property respect variable ordering We class BTP properly includes 3 classes Theorem 48 RRM cid2 BTP TREE cid2 BTP DUALTREE cid2 BTP Proof The inclusions follow Propositions 43 45 Corollary 47 instance shown Fig 2 establishes strict separations cid2 5 An alternative characterization BTP In section consider broad class properties conservative preserved taking sub problems We brokentriangle property property ensures following desirable behaviour guaranteed simply achieving certain level arc consistency Deﬁnition 51 A CSP instance universally backtrackfree respect ordering n variables k 2 n consistent assignment ﬁrst k 1 variables extended consistent assignment ﬁrst k variables Deﬁnition 52 Given CSP instance I variables 1 n induced subproblem Ii1 im 1 cid2 i1 i2 im cid2 n mvariable CSP instance domains D i1 D im exactly constraints I scopes subsets i1 im Deﬁnition 53 A set Σ CSP instances inclusionclosed I Σ subproblems IM subsets M variables I belong Σ Deﬁnition 54 See 2 A binary CSP instance directional arc consistent respect variable ordering pairs variables j D exists b D j b R j Given binary CSP instance I remove values domains variables achieve directional arc consistency changing set solutions 2 The result applying algorithm unique called directional arcconsistency closure I Proposition 55 Let Σ conservative inclusionclosed set binary CSP instances The directional arcconsistency closure DACI I Σ respect variable ordering universally backtrackfree respect I Σ DACI satisﬁes brokentriangle property respect Proof The argument proof Theorem 31 shows binary CSP instance satisﬁes brokentriangle property directional arcconsistency closure universally backtrackfree To prove converse suppose Σ conservative inclusionclosed set CSP instances consider I Σ Since Σ conservative DACI belongs Σ obtained I sequence domain reductions In following let D denote domain variable DACI Consider variables j k domain values u D v D j b Dk u v R j u R ik v b R jk Denote I induced subproblem DACI variables j k reduced domain b variable k Establishing directional arc consistency I reduce domains variables j delete v domain variable j support b cid14 cid14 MC Cooper et al Artiﬁcial Intelligence 174 2010 570584 577 k delete u domain variable supports variables j k If DACI universally backtrackfree consistent assignment cid4u vcid5 variables cid4i jcid5 extended consistent assignment cid4i j kcid5 cid4u v acid5 cid4u v bcid5 This corresponds exactly deﬁnition brokentriangle property DACI satisﬁes BTP cid2 cid14 6 Generalizing BTP In section weaker form brokentriangle property implies backtrackfree search This leads strictly larger nonconservative tractable class CSP instances Throughout section assume variable domains totally ordered Deﬁnition 61 A binary CSP instance minofmax extendable MME respect variable ordering triples variables j k j k u v R j cid4u v ccid5 consistent assignment cid4i j kcid5 cid4 c min max cid4 cid8 R iku cid4 cid8cid8 max R jkv The symmetrically equivalent property maxofmin extendability deﬁned similarly c maxminR iku minR jkv Lemma 62 A binary CSP instance satisﬁes brokentriangle property respect variable ordering minofmax extendable respect possible domain orderings Proof Suppose CSP instance satisﬁes brokentriangle property respect consider arbitrary ordering domains To prove minofmax extendability suﬃces apply brokentriangle property maxR iku b maxR jkv If b clearly cid4u v mina bcid5 consistent assignment cid4i j kcid5 Otherwise b maximal cid4u v maxa bcid5 consistent assignment BTP cid4u v mina bcid5 consistent assignment To prove converse suppose CSP instance minofmax extendable possible domain orderings For distinct b Dk consider ordering Dk maxDk b maxDk The brokentriangle property follows deﬁnition minofmax extendability cid2 Theorem 63 If binary CSP instance minofmax extendable respect known variable ordering possibly unknown domain orderings directional arc consistent respect universally backtrackfree respect solved polynomial time Proof Suppose cid4u1 uk1cid5 consistent assignment variables cid41 k 1cid5 By directional arc consistency k R ikui cid9 This means cid5 c min max cid4 cid8 R ikui 1 cid2 cid2 k 1 cid7 welldeﬁned Let j 1 k 1 c maxR jku j Let variable 1 k 1 j Applying deﬁnition minofmax extendability variables j k allows deduce ui c R ik It follows uk Dk uk c cid4u1 ukcid5 consistent assignment variables cid41 kcid5 This establishes instance universally backtrackfree Note ordering domain Dk prove existence consistent extension cid4u1 ukcid5 cid4u1 uk1cid5 A search algorithm ﬁnd consistent value uk information domain orderings simply checking possible value Dk Hence instance solved polynomial time domain orderings unknown cid2 Theorem 64 The problem ﬁnding variable ordering binary CSP instance ordered domains minofmax extendable respect ordering determining ordering exists solvable polynomial time Proof The requirements ordering subset requirements establishing brokentriangle property Hence result proved exactly proof Theorem 32 cid2 We use Theorem 64 following way given CSP instance ordered domains compute arc consistency closure test polynomial time reduced instance minofmax extendable ordering variables If ﬁnd ordering instance solved polynomialtime Theorem 63 However approach guaranteed ﬁnd possible useful variable orderings achieving minofmax extendabil ity minofmax extendability conservative following example shows 578 MC Cooper et al Artiﬁcial Intelligence 174 2010 570584 Fig 3 An example CSP instance directional arc consistent minofmax extendable fails minofmax extendable arc consistent Example 65 Fig 3 shows binary CSP instance dashed line values p D q D j represents fact cid4p qcid5 R j All pairs values joined dashed line consistent This instance directional arc consistent minofmax extendable respect variable ordering 1 2 3 4 ordering b c domain D 4 orderings domains However instance satisfy BTP consider broken triangle b u v c If establish arc consistency value deleted D4 support D1 The resulting CSP instance arc consistent longer minofmax extendable cid4u vcid5 R 23 extended consistent assignment variables 2 3 4 Since minofmax extendability conservative property case variable orderings directional arcconsistency closure minofmax extendable arcconsistency closure Example 65 Finally minofmax extendability strict generalization previouslyidentiﬁed hybrid tractable class Deﬁnition 66 See 31 A CSP instance rowconvex respect ﬁxed variable ordering ﬁxed domain order ings pairs variables j u D R ju interval b b D j It known directional pathconsistent rowconvex binary CSP instance universally backtrackfree tractable 31 However noted establishing directional path consistency destroy rowconvexity Our hybrid tractable class simply demonstrate special case minofmax extendability Proposition 67 If binary CSP instance directional pathconsistent rowconvex minofmax extendable max ofmin extendable Proof Consider triple variables j k suppose u v R j By directional path consistency c Dk u c R ik v c R jk By rowconvexity R iku R jkv intervals ordered domain Dk The existence c means intervals overlap Both endpoints overlap provide extensions u v consistent assignment variables cid4i j kcid5 One endpoint given minmaxR iku maxR jkv ensures minofmax extendability The ensures maxofmin extendability cid2 On hand perfectly possible binary CSP instance minofmax extendable row convex shown Example 65 consider R34v 7 Variable elimination BTP Classical techniques reducing search space CSP based domain reduction value elimination In section BTP deﬁne novel strategy variable elimination binary CSPs We investigate time complexity applying variable elimination strategy explore interaction variable value eliminations In contrast bucket elimination requires space exponential treewidth constraint network 32 scheme variable elimination BTP applied polynomial time classes CSP instances unbounded treewidth MC Cooper et al Artiﬁcial Intelligence 174 2010 570584 579 Existing techniques choosing good variable orderings focused variants smallest domain heuristic 33 probabilistic estimates likely assignments 34 dynamic variable orderings local search criterion 35 Our scheme input preprocessing search usual enforcement arc path consistency Existing variable ordering heuristics applied search variables eliminated We ﬁrst deﬁne local brokentriangle property single variable k Deﬁnition 71 A variable k binary CSP instance satisﬁes local brokentriangle property lBTP pairs distinct variables j cid9 k b Dk cid4u vcid5 R j cid4u acid5 R ik cid4v bcid5 R jk implies cid4u bcid5 R ik cid4v acid5 R jk Let nk denote set 1 n k 1 k 1 k 1 n Proposition 72 Let I arcconsistent binary CSP instance variables n variable k satisﬁes lBTP let I induced subproblem I variables nk Then I exactly projection set solutions I variables nk solution I solution Indeed set solutions I cid14 cid14 cid14 cid14 subproblem I need prove solution I cid14 Proof Since I extended solution I Let cid4a1 ak1 ak1 ancid5 solution I By arc consistency cid9 k R ikai cid9 Since k satisﬁes lBTP argument proof Lemma 24 elements R ikai nk ordered subset inclusion set totally ordered subset inclusion nonempty intersection This implies solution I extended solution I completes proof cid2 cid14 cid14 Proposition 72 tells solvability CSP instance invariant elimination variables satisfy lBTP The following proposition gives concrete example application form variable elimination Proposition 73 In path consistent binary CSP instance variables k Dk 2 satisfy lBTP elimi nated Proof Consider variable k Dk 2 Suppose contradiction j cid9 k cid4u vcid5 R j cid4u acid5 R ik cid4v bcid5 R jk cid4u bcid5 R ik cid4v acid5 R jk Then cid9 b deduce Dk b But cid4u vcid5 R j support variable k contradicts assumption path consistency cid2 Theorem 74 The closure binary CSP instance elimination variables satisfy lBTP unique O ned3 time Proof By Deﬁnition 71 variable k satisﬁes lBTP binary CSP instance I k satisﬁes lBTP subproblem I includes k Thus variables j k satisfy lBTP variable j satisfy lBTP elimination variable k It follows result eliminating variables satisfy lBTP unique variable elimination invalidate variable elimination However value eliminations arc consistency variable eliminations provoke new variable eliminations variable satisfy lBTP elimination k satisfy lBTP elimination k A variable k satisﬁes lBTP eliminated distinct j nk u v R j implies R iku R jkv R iku R jkv 5 If u D v D j Eq 5 hold j lBTP obstructionpair k Let Obk set lBTP obstructionpairs j k We assume set R iku nk u D stored direct access data structure test R iku O 1 operation Furthermore Eq 5 trivially holds constraint scope k constraint scope j k It follows Obk determined checking Eq 5 holds pair constraints scopes contain k possible choice values u v checking possible Dk This completed O e2 k d3 time d maximum domain size ek number binary constraints scope contains k Hence sets Obk k n calculated O ned3 time If set Obk variable k satisﬁes lBTP eliminated When variable k eliminated sets Obi cid9 k updated deleting obstructionpairs containing k If Obi variable eliminated updating procedure applied Since obstructionpair cid9 j deleted Obk total number deletions bounded n k1 e2 k cid2 k1 nek 2ne Therefore appropriate indexing total time complexity determine variable elimination closure lBTP O ned3 ne O ned3 cid2 k1 nekd3 2ned3 cid9 n k1 e2 cid9 n k1 Obk cid2 k d3 cid2 cid9 n cid9 n 580 MC Cooper et al Artiﬁcial Intelligence 174 2010 570584 Corollary 75 The problem ﬁnding variable ordering binary CSP instance I satisﬁes BTP determining order exists solved O ned3 time Proof To determine exists variable ordering I satisﬁes BTP simply test closure elimination variables satisfy lBTP If reverse order variables eliminated variable ordering I satisﬁes BTP Otherwise ordering exists cid2 Theorem 76 If binary CSP instance I satisﬁes BTP possibly unknown variable order MAC Maintaining Arc Consistency search solves I O ned3 time instantiation order variables search I produced domain reduc Proof Since I satisﬁes BTP BTP conservative property restriction I tions result instantiation variables arc consistency operations satisﬁes BTP By proof Theorem 31 arc consistent CSP instance satisﬁes BTP solution domain It follows MAC backtrackfree applied I provided assignment value variable accepted resulting arcconsistency closure nonempty domains In worst case variable MAC try values D This makes total O nd times arc consistency established The complexity O ned3 follows assuming MAC uses O ed2 arc consistency algorithm AC2001 27 cid2 cid14 Corollary 75 shows class binary CSP instances satisfying BTP possibly unknown variable ordering recognized O ned3 time Combining Theorem 76 possible detect binary CSP instance I satisﬁes BTP result positive actually solve I O ned3 time The advantage approach simply running MAC know advance polynomial time BTP satisﬁed search terminate polynomial time In general expect variables eliminated lBTP An important question variable elimination lBTP interacts classical value elimination techniques Eliminating values example arc consistency path inverse consistency neighbourhood substitution invalidate variable elimination lBTP provoke new variable eliminations lBTP Similarly variable elimination lBTP invalidate value eliminations techniques provoke new value elimination neighbourhood substitution However variable elimination lBTP destroy form consistency provoke new value eliminations consistency operations It known eliminating values convergent sequence neighbourhood substitution consistency operations produces CSP instance unique isomorphism 24 It follows discussion similar result holds convergent sequence variable eliminations lBTP value eliminations neighbourhood substitution consistency operations 8 Variable elimination minofmax extendability As BTP minofmax extendability eliminate variables The important difference min ofmax extendability deﬁned relative ordering domains In section ﬁrst assume orderings given domains allows generalize straightforward way results Section 7 Finally study case suitable domain orderings calculated We ﬁrst deﬁne local form minofmax extendability single variable k Deﬁnition 81 A variable k binary CSP instance locally minofmax extendable lMME ordering Dk pairs distinct variables j cid9 k u v R j implies cid4u v ccid5 consistent assignment cid4i j kcid5 cid4 c min max cid4 cid8 R iku cid4 cid8cid8 max R jkv Proposition 82 Let I arcconsistent binary CSP instance variables 1 n variable k lMME ordering Dk let I solution I solution Indeed set solutions I induced subproblem I variables nk Then I exactly projection set solutions I variables nk cid14 cid14 cid14 cid14 subproblem I need prove solution I extended solution I Let Proof Since I cid4a1 ak1 ak1 ancid5 consistent labelling nk solution I By arc consistency cid9 k R ikai cid9 Let c minmaxR ikai nk suppose c maxR i0kai0 i0 nk Since variable k lMME j i0 k cid4ai0 j ccid5 consistent assignment cid4i0 j kcid5 Hence cid4a1 ak1 c ak1 ancid5 consistent assignment variables 1 n solution I cid2 cid14 cid14 An important obvious property form variable elimination preserves arc consistency eliminating variable invalidate arc consistency MC Cooper et al Artiﬁcial Intelligence 174 2010 570584 581 Theorem 83 Given orderings domains closure arcconsistent binary CSP elimination variables lMME unique O ned2 time Proof By Deﬁnition 81 variables j k lMME variable j lMME elimination variable k It follows result eliminating variables lMME unique obtained eliminating variables order convergence Call j lMME obstructionpair k u v R j cid4u v ccid5 c minmaxR iku maxR jkv consistent assignment cid4i j kcid5 The maximum value R ju j u precomputed O ed2 time Using precomputed values calculate Obk set lMME obstructionpairs k O e2 k d2 time ek number binary constraints scope includes k Summing variables k obtain complexity O cid9 n k1 ekd2 O ned2 As proof Theorem 74 require O ne additional time propagate deletions variables Hence total time complexity calculate closure eliminations variables lMME O ed2 ned2 ne O ned2 cid2 If variable satisﬁes lBTP lMME converse true It follows eliminating variables lMME stronger asymptotically faster eliminating variables satisfy lBTP Corollary 84 For given domain orderings problem ﬁnding variable ordering arcconsistent binary CSP instance minofmax extendable determining variable ordering exists solved O ned2 time Proof Similar proof Corollary 75 An arcconsistent binary CSP instance minofmax extendable variables eliminated turn order lMME cid2 For given ordering Dk clearly test variable k lMME polynomial time We ordering values k minofmax ordering If Dk bounded constant test possible orderings Dk polynomial time An obvious question case Dk bounded constant determining existence minofmax ordering Dk tractable We complete study minofmax extendability showing problem fact NPcomplete MinofMax Ordering MMO binary CSP instance I variable k Input Question exist minofmax ordering Dk I Theorem 85 The MMO problem class CSP instances ﬁnite unbounded domain size NPcomplete Proof MMO NP checking k lMME given ordering Dk polynomialtime To prove NPcompleteness construct polynomial reduction SAT MMO Consider instance ISAT SAT n variables v 1 vn We construct 3variable binary CSP instance I D3 1 2n 2 exists minofmax ordering Dk ISAT satisﬁable Let D1 D2 place equality constraint variables cid41 2cid5 For 1 n add distinct values ai bi ci D1 D2 tuples constraints scopes cid41 3cid5 cid42 3cid5 R13ai 2n 1 R23ai n 2n 1 R13bi 2n 2 R23bi n 2n 2 R13ci n 2n 1 R23ci n 2n 2 1 n This illustrated Fig 4 This construction ensures minofmax ordering D3 1 n exactly n 2n 1 2n 2 assignment cid4ai aicid5 respectively cid4bi bicid5 variables cid41 2cid5 ensures mini n 2n 1 respectively 2n 2 assignment cid4ci cicid5 variables cid41 2cid5 ensures n 2n 1 2n 2 For minofmax ordering D3 associate truth value false v precisely 2n 1 2n 2 Clearly n associated v construction Fig 4 exactly n 2n 1 2n 2 For clause C j v i1 v ir ISAT add distinct value d j D1 D2 tuples constraints scopes cid41 3cid5 cid42 3cid5 R13d j i1 ir 2n 1 R23d j i1 ir 2n 2 This illustrated v i3 In minofmax ordering D3 i1 ir 2n 1 Fig 4 clause v i1 2n 2 corresponds imposing constraint variables v i1 v ir true If clause involves negated variable v replace value n R13d j R23d j It follows minofmax ordering D3 ISAT satisﬁable This reduction clearly completed polynomial time cid2 v i2 9 Variable ordering heuristics based BTP Even possible eliminate variable instance I lBTP described Section 7 true induced subproblem I subset variables S satisﬁes BTP ordering 582 MC Cooper et al Artiﬁcial Intelligence 174 2010 570584 b Fig 4 The construction codes vni v implies exactly values n 2n 1 2n 2 MMEP v i3 implies i1 i2 i3 2n 1 2n 2 ordering D3 b The construction codes clause v i1 MMEP ordering D3 v i2 variables In case ordering set variables X I variables S occur variables X S subproblem variables S obtained instantiation variables X S satisﬁes BTP BTP conservative In case know Theorem 76 MAC backtrackfree variables S This implies maximum number leaf nodes visited MAC search tree dnS Note argument apply minofmax extendability conservative Hence limit size search tree explored MAC algorithm desirable ﬁnd large set variables S BTP satisﬁed Once set variables S standard variableordering heuristics 3335 order variables X S Unfortunately ﬁnding largest possible set variables BTP satisﬁed NPhard problem Theorem 91 Given binary CSP instance I variables X NPhard determine maximum size subset S X induced subproblem I S satisﬁes BTP Proof The problem MAXONES problem ﬁnding solution problem SAT maximizes number boolean variables assigned value true It known 36 MAXONES NPhard fact APXcomplete restricted instances clauses form φxi x j xk φx y z x y z We instance I1 MAXONES clauses form expressed problem ﬁnding maximum size subset variables binary CSP instance I2 induced subproblem I2 S satisﬁes BTP MC Cooper et al Artiﬁcial Intelligence 174 2010 570584 583 We BTP obstruction j k u v b respect variable ordering exist j k u D v D j b Dk u R ik u v R j v b R jk u b R ik v R jk For variable xi I1 create variable I2 For clause φxi x j xk I1 create BTP obstructions imply O maxO j O k O j maxO k O O k maxO O j For example creating BTP obstruction implies O k maxO O j means adding values b Dk u D v D j satisfying u v R j u R ik v b R jk u b R ik v R jk The inequality constraints implied BTP obstructions inconsistent subset constraints consistent Therefore j k belong S Associating xi true S BTP obstructions impose constraint φxi x j xk corresponding variables I1 This reduction polynomialtime fact logspace demonstrates ﬁnding maximum induced subproblem I2 satisﬁes BTP NPhard cid2 10 Conclusion We described new tractable classes binary CSP instances signiﬁcantly generalize treestructured problems previouslyidentiﬁed languagebased classes These new classes obtained imposing requirements sets constraints imposed ordered triples variables Moreover shown problem determining variable ordering properties hold solvable polynomial time We work ﬁrst step complete characterization hybrid tractable classes constraint satisfac tion problems tractable classes obtained restricting combined properties constraint relations way interact From practical point view shown properties deﬁne tractable classes introduced paper eliminate variables binary CSPs This provides reduction technique orthogonal complementary classical value elimination techniques arc consistency Furthermore local properties BTP improve variableordering heuristics instantiating subset variables BTP holds An interesting area future research investigate variable ordering heuristics try minimize number times BTP satisﬁed Acknowledgements We like thank Chris Jefferson pointing Theorem 76 References 1 EC Freuder A suﬃcient condition backtrackfree search Journal ACM 29 1 1982 2432 doi101145322290322292 2 R Dechter J Pearl Networkbased heuristics constraintsatisfaction problems Artiﬁcial Intelligence 34 1 1987 138 doi1010160004 370287900026 3 A Bulatov P Jeavons A Krokhin Classifying complexity constraints ﬁnite algebras SIAM Journal Computing 34 3 2005 720742 doi101137S0097539700376676 4 T Feder MY Vardi The computational structure monotone monadic SNP constraint satisfaction A study Datalog group theory SIAM Journal Computing 28 1 1998 57104 doi101137S0097539794266766 Available httplinkaiporglinkSMJ28571 5 D Cohen P Jeavons M Gyssens A uniﬁed theory structural tractability constraint satisfaction problems Journal Computer System Sciences 74 5 2008 721743 doi101016jjcss200708001 6 P Jeavons On algebraic structure combinatorial problems Theoretical Computer Science 200 12 1998 185204 doi101016S0304 397597002302 7 AA Bulatov Tractable conservative constraint satisfaction problems Proceedings 18th IEEE Symposium Logic Computer Sci ence LICS 2003 Ottawa Canada 2225 June 2003 IEEE Computer Society 2003 pp 321330 Available httpcsdlcomputerorgcomp proceedingslics200318840018840321abshtm 8 TJ Schaefer The complexity satisﬁability problems STOC 78 Proceedings Tenth Annual ACM Symposium Theory Computing 1978 pp 216226 9 AA Bulatov A dichotomy theorem constraint satisfaction problems 3element set Journal ACM 53 1 2006 66120 doi10114511205821120584 10 M Grohe The structure tractable constraint satisfaction problems Proceedings 31st Symposium Mathematical Foundations Computer Science Lecture Notes Computer Science vol 4162 SpringerVerlag 2006 pp 5872 11 V Dalmau PG Kolaitis MY Vardi Constraint satisfaction bounded treewidth ﬁnitevariable logics CP 02 Proceedings 8th International Conference Principles Practice Constraint Programming Lecture Notes Computer Science vol 2470 SpringerVerlag 2002 pp 310326 12 M Grohe The complexity homomorphism constraint satisfaction problems seen Journal ACM 54 1 2007 124 doi10114512060351206036 13 R Dechter Constraint Processing Morgan Kaufmann 2003 14 D Cohen P Jeavons The complexity constraint languages F Rossi P van Beek T Walsh Eds Handbook Constraint Programming Elsevier 2006 pp 245280 15 DA Cohen MJ Green Typed guarded decompositions constraint satisfaction F Benhamou Ed CP 06 Proceedings 12th International Conference Principles Practice Constraint Programming Lecture Notes Computer Science vol 4204 SpringerVerlag 2006 pp 122136 16 TK Kumar A framework hybrid tractability results boolean weighted constraint satisfaction problems CP 08 Proceedings 14th International Conference Principles Practice Constraint Programming Lecture Notes Computer Science vol 5202 SpringerVerlag 2008 pp 282297 17 EC Freuder A suﬃcient condition backtrackbounded search Journal ACM 32 4 1985 755761 doi10114542214225 584 MC Cooper et al Artiﬁcial Intelligence 174 2010 570584 18 HL Bodlaender A lineartime algorithm ﬁnding treedecompositions small treewidth SIAM Journal Computing 25 6 1996 13051317 doi101137S0097539793251219 Available httplinkaiporglinkSMJ2513051 19 J Pearson P Jeavons A survey tractable constraint satisfaction problems Tech Rep CSDTR9715 Royal Holloway University London July 1997 Available ftpftpcsrhulacukpubconstraintssurveyps 20 P van Beek R Dechter Constraint tightness looseness versus local global consistency Journal ACM 44 4 1997 549566 doi101145263867263499 21 P Jégou On consistency general constraintsatisfaction problems AAAI 1993 pp 114119 Available httpwwwaaaiorgLibraryAAAI 1993aaai93018pdf 22 EC Freuder CD Elfe Neighborhood inverse consistency preprocessing Proc AAAIIAAI96 Portland OR vol 1 1996 pp 202208 Available httpwwwaaaiorgLibraryAAAI1996aaai96030php 23 EC Freuder Eliminating interchangeable values constraint satisfaction problems Proc AAAI91 Anaheim CA 1997 pp 227233 Available httpwwwaaaiorgLibraryAAAI1991aaai91036php 24 MC Cooper Fundamental properties neighbourhood substitution constraint satisfaction problems Artiﬁcial Intelligence 90 12 1997 124 doi101016S0004370296000185 25 M Cooper D Cohen P Jeavons Characterising tractable constraints Artiﬁcial Intelligence 65 1994 347361 doi1010160004370294900213 26 C Bessiere Constraint propagation F Rossi P van Beek T Walsh Eds Handbook Constraint Programming Elsevier 2006 pp 2983 27 C Bessière JC Régin Reﬁning basic constraint propagation algorithm Proc IJCAI01 Seattle WA 2001 pp 309315 Available httpwwwlirmmfr7Ebessierestockijcai01ps 28 PG Jeavons MC Cooper Tractable constraints ordered domains Artiﬁcial Intelligence 79 2 1995 327339 doi1010160004370295001077 29 R Mohr G Masini Good old discrete relaxation Y Kodratoff Ed Proceedings 8th European Conference Artiﬁcial IntelligenceECAI88 Pitman 1988 pp 651656 30 R Dechter J Pearl Tree clustering constraint networks research note Artiﬁcial Intelligence 38 3 1989 353366 httpdxdoiorg1010160004 370289900374 31 P van Beek R Dechter On minimality decomposability rowconvex constraint networks Journal ACM 42 3 1995 543561 doi101145210346210347 32 R Dechter Bucket elimination A unifying framework reasoning Artiﬁcial Intelligence 113 12 1999 4185 doi101016S0004370299000594 33 BM Smith The Brélaz heuristic optimal static orderings CP 99 Proceedings 5th International Conference Principles Prac tice Constraint Programming Lecture Notes Computer Science vol 1713 SpringerVerlag 1999 pp 405418 Available httpwww springerlinkcomcontent3dgkv9kgvc4h340w 34 JC Beck P Prosser RJ Wallace Toward understanding variable ordering heuristics constraint satisfaction problems Proceedings Four teenth Irish Artiﬁcial Intelligence Cognitive Science Conference 2003 pp 1116 Available httptidelmieutorontocapubspromiseaicspdf 35 C Bessière A Chmeiss L Saïs Neighborhoodbased variable ordering heuristics constraint satisfaction problem CP 01 Proceedings 7th International Conference Principles Practice Constraint Programming Lecture Notes Computer Science vol 2239 SpringerVerlag 2001 pp 565569 36 N Creignou S Khanna M Sudan Complexity Classiﬁcation Boolean Constraint Satisfaction Problems SIAM Monographs Discrete Mathematics Applications vol 7 Society Industrial Applied Mathematics Philadelphia PA 2001