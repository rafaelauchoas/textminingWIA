Artiﬁcial Intelligence 174 2010 316361 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Automated composition Web services planning asynchronous domains Piergiorgio Bertoli Marco Pistore Paolo Traverso Fondazione Bruno Kessler Sommarive 18 38100 Povo Tn Italy r t c l e n f o b s t r c t Article history Received 9 April 2008 Received revised form 13 November 2009 Accepted 26 November 2009 Available online 16 December 2009 Keywords Planning Web services Automated program synthesis The serviceoriented paradigm promises novel degree interoperability business processes leading major shift way distributed applications designed realized While novel powerful services obtained setting suitably orchestrating existing ones manually developing orchestrations highly demanding timeconsuming errorprone Providing automated service composition tools essential reduce time market services ultimately successfully enact serviceoriented approach In paper tools realized based adoption extension powerful AI planning techniques taking planning modelchecking approach stepping stone In respect paper summarizes substantially extends research line started early decade continued till Speciﬁcally work provides key contributions First novel planning framework automated composition Web services handle services speciﬁed implemented industrial standard like wsbpel Since languages business processes modeling execution languages stateful Web services rely asynchronous communication primitives distinctive aspect presented framework ability model solve planning problems asynchronous domains Second formally spell theory underlying framework provide algorithms solve service composition framework proving correctness completeness The presented algorithms signiﬁcantly extend stateoftheart techniques planning uncertainty allowing combination asynchronous domains according behavioral requirements Third provide discuss implementation approach report extensive experimental results demonstrate ability scale signiﬁcant cases manual development wsbpel composed services far trivial time consuming 2009 Elsevier BV All rights reserved 1 Introduction Since inception Web maintained fast growth rate terms quantity variety contained information reference information source billions users business entities worldwide In particular years economical impact Web grown substantially fact Web anymore present static information expose services Web user different Webexposed ser Corresponding author Email addresses bertolifbkeu P Bertoli pistorefbkeu M Pistore traversofbkeu P Traverso 00043702 matter 2009 Elsevier BV All rights reserved doi101016jartint200912002 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 317 vice actively interact This enacted range Webbased solutions commercial learning healthcare activ ities gave substantial push eCommerce eLearning eHealth initiatives 995135559280523368 This starting point emergence Service Oriented Computing paradigm envisages adoption standards publication access services Web allow interoperability inde pendently developed procedures Web In setting existing services suitably combined means Webbased orchestration services realize novel complex procedures satisfy given user busi ness requirement For instance different services taking care speciﬁc aspects related organization trip ﬂight booking lodging bank payment suitably coordinated integrated trip adviser service adoption save customer considerable time effort setting trip Indeed able build new services composing existing ones crucial actual enactment serviceoriented paradigm However task manually developing orchestrations extremely diﬃcult timeconsuming errorprone experienced designers programmers This calls design effective support techniques automated tools capable synthesizing service orchestrations starting suitable highlevel composition requirements In context planning proved promising techniques automated composition Web services Several works planning addressed different aspects problem 1005934658317738844 43 In works automated composition described planning problem services available published Web component services construct planning domain composition requirements formalized planning goals planning algorithms generate composed services plans compose component services These works provide different technical solutions share conception services stateless entities enact simple queryresponse protocols An diﬃcult challenge planning automated composition Web services process level composition component services consist stateful business processes capable establish complex multiphase interactions partners Indeed large majority real cases services considered simply atomic components given inputs return outputs single requestresponse step On contrary application domains need represented stateful processes realize interaction protocols involve different sequential conditional iterative steps For instance general interact ﬂight booking ser vice atomic step The service require sequence different operations including authentication submission speciﬁc request ﬂight possibility submit iteratively different requests acceptance refusal offer ﬁnally payment procedure In cases process published interaction ﬂow key aspect considered automatically composing services The planning problem corresponding automated composition services published processes far trivial First component services simply represented atomic actions planning domain As sequence obvious like case atomic component services planning domain corresponds composition problem Second realistic cases component services publish nondeterministic partially observ able behaviors general outputs service predicted priori internal status fully available external services For instance payment transaction succeed known priori execution seats available ﬂight known speciﬁc request submitted service Third plan coordinates component services simply sequence actions atomic components needs interleave partial execution component services typical programming language constructs conditionals loops Finally Web service interactions typically asynchronous process evolves independently unpredictable speed interacts processes asynchronous message exchanges Message queues practical implementations guarantee processes lose messages ready receive As consequence characteristics Web services far obvious automated composition adequately represented planning problem Moreover nondeterministic partially observable asyn chronous behavior poses strong requirements introduce novel problems planning techniques This led authors paper colleagues investigate research line service oriented composition started 7195 continued 7879746162 date 6063726421 While distinct technical solutions degree maturity works share general ideas The ﬁrst consists taking algorithmic technological baseline planning model checking approach devised authors paper colleagues 16773215 Such approach combines stateoftheart performance ability deal general forms nondeterminism tackling effectively critical aspects implied nature Web services The second idea face actual composition problems pragmatically considering services expressed defacto standard languages wsbpel 131 While choice renders problem complex strongly motivated objective provide usable tools This paper summarizes signiﬁcantly extends large portion corpus work presented 719578 79 74616260637264 providing ﬁrst time comprehensive survey framework underlying approach thorough account formal empirical features underlying algorithms In particular paper focus form automated processlevel composition Web services services represented ﬁnite state automata composition requirements command ﬁnite termination execution component services While extensions consider inﬁnitestate services inﬁnite component iterations possible considered 74 318 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 626021 form composition expressive cover large variety relevant service composition scenarios Focusing setting allows presentation compact selfcontained comprehensively surveying formal empirical aspects suﬃcient level In work provides following results We formalize automated processlevel composition services considering reachability composition requirements ﬁnitestate representations services planning problem The planning domain constructed processes component services results nondeterministic partially observable asynchronous domain We devise novel planning approach able work nondeterministic partially observable asynchronous mains We prove formally properties correctness completeness We embed planning framework real industrywide adopted environment describing composing execut ing Web services In environment Web services described wsbpel Business Process Execution Language Web Services 131 industrial standard languages describing executing Web services We generate automatically planning domain wsbpel speciﬁcation component services We au tomatically translate generated plans executable wsbpel processes implement composed service run standard execution engines We discuss implementation proposed framework perform extensive experimental evaluation We approach practice automatically compose Web services described wsbpel The technique scale signiﬁcant cases manual development wsbpel composite services trivial time consuming 11 Roadmap Our roadmap paper following First Section 2 informally automated composition problem introducing explanatory example paper showing component services intended orchestration expressed wsbpel language complementary wsdl interface deﬁnitions In Section 3 wsbpel speciﬁcations component services interpreted state transition systems STSs automata behavior services discuss possible perform automatically translation Based grounds Section 4 provide formal deﬁnition composition problem In particular ﬁrst introduce key notion deadlockfree controller STS identiﬁes adequacy requirements STS satisfy order act suitable orchestrator STSs Then clarify kind composition requirements considered setting mean satisfy This allows model composition problem synthesizing deadlockfree controller set concurrently executing STSs associated component services behaviors satisfy given composition requirement Once formal deﬁnition composition problem set Section 5 algorithm automated composition prove properties To ﬁrst rephrase problem way makes explicit solved constructing visiting portion speciﬁc search space In particular elements search space represent beliefs orchestration service current status STSs associated component services Our approach consists ﬁrst precomputing belieflevel search space searching means effective techniques inspired modelchecking based planning provide discuss algorithmic descriptions In Section 6 discuss implementation planning algorithm experimental evaluation For purpose reference scenario introduce variety scalable scenarios report data experiments run wrap synthesizing empirical ﬁndings features approach Finally Sections 7 8 discuss work related draw conclusions approach possible directions future work 2 The problem In section service composition problem introducing scenario reference paper The scenario allow better discuss way services taking composition expressed means standard language highlight relevant assumptions underlying approach Taking general view service composition problem amounts construct new service composed service performs desired functionality interacting available services component services In approach consider case stateful component services require complex interaction protocols form task This expressive setting enables capturing large variety reallife scenarios However single paper expose solve problem width considering fully generic components behavioral requirements We key assumptions serve constrain discussion leave Section 7 analysis relax assumptions The ﬁrst key assumption concerns nature composition requirements In work consider composition quirements constrain data exchanged orchestration ﬁnal admissible states component services P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 319 Fig 1 The PS scenario Such requirements imply execution component service terminates ﬁnite number steps setting admit component services loops proven exit ﬁnite number iterations This consequence orchestration terminates ﬁnite number steps lack generality able focus synthesis acyclic orchestration services The second assumption ability represent services terms ﬁnitestate automata Of course assumption holds immediately services number internal states ﬁnite However rule services internal states inﬁnite insofar possible identify adequate ﬁnitestate abstraction discuss Section 7 This case realistic composition scenarios described following reference example Example 1 Our goal implement composed service furniture purchasing delivering PS service composing independent existing services furniture purchase service Producer delivery service Shipper The PS service allow User ask desired products delivered desired location Fig 1 The component services atomic executed single requestresponse step stateful processes require establishing interaction protocol involve different sequential conditional steps In example Producer accepts requests given products If requested product available provides information instance size requester acknowledges buy Producer makes offer cost production time This offer accepted refused requester In cases Producer terminates execution success failure respectively Also behavior Shipper stateful Once receives request deliver object given size certain location Shipper refuse process request produce offer cost time deliver speciﬁed In case invoker conﬁrm order cancel Similarly User performs twostep interaction PS ﬁrst sends hisher request gets refusal offer ﬁnally case conﬁrms disconﬁrms request Notice shown Fig 1 user perceived analogously Shipper Producer components PS need interact assume users behavior modeled service representing software frontend human entity The goal PS sell product destination requested customer To achieve PS interact customer Producer Shipper trying reach situation interactions reach successful completion ﬁnal conﬁrmations obtained Clearly goal selling product destination achievable PS depends decisions taken parties control Producer Shipper refuse provide service requested product location product available location area service shipper customer refuse offer PS expensive If happens PS step orders commit customer Indeed want PS buy delivered want promise product destination able buy The order interactions different services interleaved implementation PS critical For instance PS gets request given item customer obtain size item producer shipper Two offers Producer Shipper necessary PS order overall offer customer Moreover offers Producer Shipper accepted PS customer accepted offer PS The necessity ﬁgure realize constraints makes implementation PS complex task simple scenarios like described 320 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 Table 1 Synopsis table wsdl Construct Meaning types message The types element encloses data type deﬁnitions relevant exchanged messages In particular types type wsdl XML schema deﬁnition XSD short Messages consist logical parts Each associated type type wsdl deﬁnes different messagetyping attributes element refers XSD element qualiﬁed XML type refers XSD simpleType complexType qualiﬁed XML portType A portType named set operations operation An operation named entity speciﬁes output input elements abstract message format solicited request response respectively wsdl deﬁnes types operation Oneway operation receive message return response Requestresponse operation receive request return response Solicitresponse operation send request wait response Notiﬁcation operation send message wait response port While portTypes deﬁne abstract functionality abstract messages ports provide actual access information including communication endpoints extension elements deploymentrelated information public keys encryption These associated means socalled bindings service A service viewed simply group ports 21 Specifying services wsbpel wsdl languages In paper assume component composed services expressed wsbpel language ws bpel Business Process Execution Language 131 defacto standard describing stateful behavior Web services In wsbpel set atomic communication operations invoke receive reply activities combined workﬂow deﬁnes process implemented stateful service The atomic communications correspond atomic Web service operations deﬁned wsdl Web Service Description Language 28 speciﬁcation wsdl extensible markup language XML format standard language describing operations implemented Web services input output data operations Table 1 reports synopsis fundamental wsdl keywords informal semantics Table 2 reports key wsbpel constructs providing informal semantics It important remark ﬂavors wsbpel executable wsbpel programs implement process deﬁning service run standard engines Active BPEL Open Engine Oracle BPEL Process Manager 369 abstract wsbpel speciﬁcations publish interaction protocol external Web services That abstract wsbpel process meant public interface executable process deﬁnes actual implementation wsbpel programs identiﬁed abstract executable appropriately setting abstractProcess attribute share vast majority constructs abstract programs possible hide details assignment variables ﬂow control conditions opaque construct Given choice speciﬁcation services general statement composition problem described follows Let W set component services interactions described abstract wsbpel speciﬁcations let ρ composition requirement describes desired functionalities composed service The problem service composition W ρ requires constructing new executable wsbpel executed satisﬁes requirements ρ interacting component services W In following prior view composition requirements reference scenario discussing component service speciﬁcations serve input composition problem case Example 2 Fig 2 presents wsdl speciﬁcation Producer abridged technical details irrelevant discus sion The wsdl speciﬁcation starts deﬁnition data types interactions In case Producer requested Item Size Cost production Delay The actual deﬁnition data types relevant purposes omitted wsdl speciﬁcation The wsdl speciﬁcation describes structure messages relevant interactions Producer According speciﬁcation requestMsg message contains requested article art The infoMsg offerMsg messages contain respectively size production cost delay article The messages unavailMsg ackMsg nackMsg carry data values Then wsdl speciﬁcation deﬁnes invocation reply operations provided service Operations collected port types associated different communication channels producer service partners In example deﬁne port types P_PT PC_PT Producer Port Type Producer Callback Port Type P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 321 Table 2 Synopsis table wsbpel Construct Meaning partnerLink variable assign In wsbpel Web service involved process modeled partnerLink Every partnerLink characterized partnerLinkType deﬁned wsdl deﬁnition The role process communication speciﬁed myRole attribute role partner speciﬁed attribute partnerRole Variables offer possibility store data The messages stored time coming partners going partners Variables offer possibility store data state based send partners There types variables wsdl message type XML Schema simple type XML Schema element It allows copy data source variable expression written XPath XML path language address combine parts variables target variable Only abstract processes assignment source opaque case target variable meant nondeterministically assigned value domain range This reﬂect nondeterministic service behavior variable control constructs Finally assign activity perform dynamic binding partners copying endpoint references partner links correlation set Each correlation set wsbpel named group properties taken serve deﬁne way identifying applicationlevel conversation business protocol instance After correlation set initiated values properties correlation set identical messages operations carry correlation set occur corresponding scope completion receive reply invoke sequence switch pick ﬂow A receive activity speciﬁes partner link expects receive port type operation expects partner invoke variable store message data received In addition receive activities play role lifecycle business process The way instantiate business process wsbpel annotate receive activity createInstance attribute set yes A reply activity send response request previously accepted receive activity Such responses meaningful synchronous interactions An asynchronous response sent invoking corresponding oneway operation partner link This construct invoke service operation Such operation synchronous requestresponse asynchronous oneway operation wsbpel uses basic syntax additional options synchronous case An asynchronous invocation requires input variable operation expect response operation A synchronous invocation requires input variable output variable A sequence activity contains activities performed sequentially order listed corresponding XML element The switch activity consists ordered list conditional branches deﬁned case elements followed optionally branch The case branches switch considered order appear The ﬁrst branch condition holds true taken provides activity performed switch If branch condition taken branch taken The activity supports repeated performance speciﬁed iterative activity The iterative activity performed given Boolean loop condition longer holds true The pick activity awaits occurrence set events performs activity associated event occurred After pick activity accepted event handling events longer accepted pick Possible events arrival message form invocation operation handled correspondent onMessage subactivity analogous receive timer alarm handled onTimer subactivity Similarly receive activity pick initiate process setting createInstance attribute case timer events permitted The ﬂow activity visible remnant WSFL language wsbpel speciﬁcation Its fundamental effect enable concurrency activities ﬂow completes activities contains completed Furthermore allow complex concurrency scenarios ﬂow construct allows expression synchronization dependencies enclosed activities In particular execution activity dependent activities certain conditions The synchronization dependencies expressed means link constructs A named link deﬁned subelement ﬂow activity attached source target activities As consequence target activity executed termination source activity respectively incoming requests outgoing messages Producer service1 Finally wsdl speciﬁcation deﬁnes bidirectional links service partners In case links P_PLT Producer customer invoking Fig 3 shows abstract wsbpel Producer abridged lowlevel technical details It starts declaration links external parties exploited process In case external partner exists client producer The type link P_PLT wsdl ﬁle Producer Partner Link Type 1 In example exploit oneway operations operations consist communication sender receiver wsdl ws bpel support invokeandresponse operations deﬁne input message output message plus failure message manage nonnominal outcomes Since invocation nonblocking behavior wsbpel invokeandresponse operations realized pairs unidirectional operations Therefore paper limit discuss unidirectional operations giving generality based possibility translation 322 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 Fig 2 The wsdl Producer process port types associated P_PC P_PT given separate roles correspond direction messages following deﬁnition Then variables inputoutput messages declared lines 513 typing referring types deﬁned wsdl ﬁle standard wsdl types xsdboolean The rest abstract wsbpel speciﬁcation lines 1455 describes interaction ﬂow The Producer activated customer request information speciﬁed product receive instruction line 15 The item speciﬁed requester stored variable reqVar The operationrequest identiﬁes wsdl operation performed The partnerLinkclient portTypeP_PT ﬁelds serve identify link P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 323 Fig 3 The abstract wsbpel Producer process request received course ﬁelds useful partners wsbpel process At lines 1719 Producer decides availability requested product We remark case marking source data opaque abstract wsbpel hides actual implementation internal logic governs Producers choice This capability abstract wsbpel crucial case business entity want disclose details internal procedures choice criteria world Web exposure Then switch activity named checkAvail service decides basis availability If Producer available signals partner activity invoke line 22 terminate prepares send information size required item lines 2629 The information size internally opaquely computed assign statement named prepareInfo After sending information Producer suspends instruction pick line 31 waiting customer ac knowledge refuse proceed buy speciﬁed product If customer refuses proceed statement onMessage line 32 Producer terminates execution If message received corresponds operation ack line 35 meaning customer conﬁrms item Producer prepares sends offer 324 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 Fig 4 The abstract wsbpel User process customer contains cost expected delivery time lines 3541 Again opaqueness hide actual way production time line 38 cost line 39 computed After sending offer Producer suspends waiting ﬁnal acknowledgment refusal offer client terminates receiving success failure respectively lines 4350 The wsdl abstract wsbpel speciﬁcations Shipper similar Producer report For purposes composition assume start situation abstract wsbpel Producer Shipper published available input potential users services composition task On assume availability description interaction protocol User intended carry composite service implementation PS depend protocols interacting partners Producer Shipper User Example 3 Fig 4 shows abstract wsbpel User After determining content request lines 1417 user invokes composite service line 18 suspends reply The reply signal request satisﬁed propose offer In ﬁrst case service simply terminates line 23 In second case user decides accept offer signals decision terminating lines 2440 22 Goal solution Considering reference example goal composition task generate executable code PS service way following criteria obeyed sell product destination possible ii possible guarantee pending commitments partners left handle consistently cases partner prevents successful selling place Of course achieving goal PS respect protocols described abstract wsbpel speciﬁcations Producer Shipper User Furthermore P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 325 impose additional crucial constraints capturing way data exchanged services related nature business PS obey constraint associates cost paid User prices proposed Producer Shipper including proﬁt margin Example 4 Fig 5 shows possible implementation PS executable wsbpel process As service features partnerLinks component services Its variables refer typed declared wsdl ﬁles associated component instance teract U_RequestVar requestMsg type declared User contains item location S_RequestVar requestMsg type declared Shipper contains size location The PS activated request customer request speciﬁes desired product delivery location line 28 The PS asks Producer information product size line 35 If item produced Producer gives PS information size cost time required service line 45 The PS asks delivery service price time needed transport object size desired locations line 58 If Shipper makes offer deliver item PS sends aggregated offer customer This offer takes account overall production delivery costs time line 93 If customer sends conﬁrmation ﬁnal acknowledgment sent Producer Shipper lines 99108 flow construct speciﬁes associated invoke activities executed concurrently As consequence component services terminate successfully While described nominal ﬂow interaction executable wsbpel PS takes account cases service succeed cases Producer provide product Shipper deliver customer accept offer canceling pending orders lines 41 6669 114123 Figs 5 6 Notice executable wsbpel PS complex abstract components Indeed abstract wsbpel s protocols exported partners executable PS implement communication component services User Producer Shipper computations internal variables computing total cost time offer customer It important remark component composed services PS example comply assumptions discussed start section First component service guaranteed terminate ﬁnite number steps trivially established case User Producer Shipper protocols completely loopfree Second requirement expressed PS service implies termination partners activated orchestration succeeding transaction unrolling commitments That kind composition requirement reachability termination orchestration certain set properties hold As consequence assumptions composed PS service loopfree Finally types variables component services explicitly reported inﬁnite range remark insofar variables manyvalued structure PS service orchestrates according requirements independent ranges concrete values Indeed observe considers components singlevalued variables possible devise PS orchestrator satisfactory speciﬁc case work general case values produced component services predictable regardless inputs PS exploit route foreseen results priori receiving Vice versa soon considers components variables values orchestration actually ask component services operate produce outputs routed accordingly considering possible cases That scenario considering binary disjoint types variables component services separate conceptually distinct behaviors components obtain generic PS orchestrator In general paper assume case needed suitable ﬁnitization component services identiﬁed preprocessing phase leave detailed discussion ﬁnitization techniques Section 8 3 Processes state transition systems In section discuss services expressed standard wsbpel language recasted known formal model easily manipulated solve composition problem approach works reference example Speciﬁcally encode wsbpel processes ﬁnite state transition systems While choice adopt ﬁnite STSs require particular care appropriately encode possibly inﬁnitestate services guaran tees possibility build effective synthesis representation techniques available inﬁnitestate transition systems In following ﬁrst formally deﬁne notion STS way services translated STSs 31 State transition systems A ﬁnite state transition STS describes dynamic possible states marked initial states A state understood collection propositional properties hold state evolve new states result performing actions In state transition actions distinguished 326 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 Fig 5 The executable wsbpel PS process pt1 input actions represent reception messages output actions represent messages sent external services special action τ called internal action The action τ represent internal evolutions visible external services fact state evolve producing output independently reception inputs A transition relation describes state evolve basis inputs outputs P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 327 Fig 6 The executable wsbpel PS process pt2 internal action τ Finally labeling function associates state set properties hold state These properties deﬁne composition requirements Deﬁnition 5 State transition A state transition Σ deﬁned set propositions Prop tuple cid3S S 0 I O R Lcid4 S ﬁnite set states S 0 S set initial states I ﬁnite set input actions O ﬁnite set output actions R S I O τ S transition relation Prop labeling function L S 2 We require I O τ I O 328 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 We recall standard deﬁnitions state transition systems 56732 We action I cid11 R A state O τ applicable state s S denoted Appla s exists state s STS ﬁnal action I O τ applicable s transition leaving s The execution STS represented set possible runs sequences states s0 s1 s0 S 0 si si1 R I O τ In general executions ﬁnite inﬁnite2 A run said completed ﬁnite state ﬁnal A state s S said reachable s0 S 0 exists state s0 S 0 sequence s0 s1 sn sn s 0 n 1 I O τ cid3si si1cid4 R We denote set reachable states STS Σ ReachableΣ S cid11 S st s s Finally state s S divergent exists inﬁnite sequence τ transitions starting s inﬁnite sequence states s s1 s2 s3 si τ si1 R cid2 1 Inﬁnite τ sequences starting divergent states correspond behaviors service interacts domain controlled accessed way For instance wsbpel implementation service originate having inﬁnite loop body performs communication Having mind main purpose services interoperate external entities clear behavior undesirable corresponds bad design service Divergent states appear adoption inappropriate abstractions encoding services terms STSs For instance consider service containing loop repeatedly increments variable v exits soon v gets ﬁxed value If encoding service abstracts away variable entry point loop mapped divergent state We assume services designed correctly case abstraction step needed encode service STS abstraction originate divergent states As rest paper assume STSs divergent states Properties combined standard propositional logical connectives adopt standard notion satisfaction identify formula corresponding combination properties valid given state Deﬁnition 6 Satisfaction property formula Let Σ cid3S S 0 I O R Lcid4 STS deﬁned set propositions Prop Let ρ φ ψ propositional formulas Prop Then state s S satisﬁes ρ denoted s cid12 ρ following holds ρ Prop ρ Ls ρ φ s cid12 φ hold ρ φ ψ s cid12 φ holds s cid12 ψ holds ρ φ ψ s cid12 φ holds s cid12 ψ holds ρ φ cid12 ψ s cid12 φ hold s cid12 ψ holds 32 Translating wsbpel services STSs We implemented translation associates STS component service starting abstract wsbpel speciﬁcation The translation currently covers signiﬁcant subset wsbpel language report Table 2 More precisely support wsbpel basic structured activities like invoke reply receive sequence switch pick onMessage terminate ﬂow links Moreover support restricted forms assignments speciﬁcally restrict expressions appear copy statements correlations3 The translation works steps conceptually simple discussed length 4957 compact comprehensive summary workings In nutshell ﬁrst step translates service automa states represented means variables range determined general inﬁnitestate automa In second step variables associated ﬁnite ranges obtaining ﬁnitestate tran sition For steps adopt convenient compact fairly standard symbolic representation states represented ﬁxed set variables actions transitions represented means schemata Speciﬁcally representation following features 1 The states STS correspond complete assignments set typed variables corresponding parts structured wsbpel variables special variable pc program counter represent current execution step service 2 We remark rely bisimulation semantics exploit bisimilarity relation deﬁne equivalent STSs based runs We use runs exclusively identify inﬁnite ﬁnite executions STS traverse states 3 The considered subset deal moment wsbpel constructs like scopes fault event compensation handlers deal runtime events concrete wsbpel speciﬁcations This choice keeps translation simple pragmatic In fact experience cases abovementioned constructs appears available abstract wsbpel speciﬁcation As considered subset appears expressive describing way business processes actually exposed abstract wsbpel Nevertheless extensions course possible discuss Section 8 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 329 2 The input output actions STS represented terms schemata composed action pos sibly set argument types In general action schema corresponds possible action instantiations inside STS combination ground values associated arguments 3 It possible declare functions taking input typed arguments returning typed argument 4 The transitions represented schematically A transition schema corresponds set transitions STS deﬁnes set preconditions input output action set postconditions Preconditions identify source states postulating value pc variable possibly values nonpc state variables An action described action nonpc variables speciﬁed argument list action declaration Similar preconditions postconditions deﬁne target states postulating values pc possibly nonpc variables assigned values variables functional expressions This schematic representation great practical help main reasons First schematic nature makes compact Second allows simple translation declaration wsbpel variables functions inputoutput actions corresponding declarations inside schematic STS More ﬁrst step translation convert service schematic representation enumerative types abstract types variables enumerative types correspond enumerative wsbpel types abstract types range deﬁned stage correspond wsbpel types range inﬁnite In step translation workﬂow body wsbpel speciﬁcation takes place compositional way activity translation pattern deﬁned recursively analyze structure process translate wsbpel activity turn More speciﬁcally basic wsbpel activity invoke reply receive onMessage assign terminate directly trans lated single loopfree STS featuring initial state ﬁnal state transitions Table 3 reports translation schemata receive synchronous asynchronous invoke activities assignments variables graphical notation depict schematic STS representation explained In graphical notation transition schema represented arc nodes The nodes labeled conditions pc variable pre postconditions nonpc variables appear labels start end transition In particular sake easier understanding use curly braces denote preconditions square brackets denote postconditions Input output actions label arcs identiﬁed prepending marks respectively Transitions feature input output actions marked internal action τ We remark STS translation basic reply onMessage terminate activities correspond invoke receive ac tivities respectively level STSs reply invoke map output actions receive onMessage map input actions terminate map τ actions The differences respective pairs activities reside exclusively syntactic wsbpel level impact level composition STSs Of course translating composed service STS wsbpel care taken translate correctly STS output invoke reply recovering information abstracted away conversion STSs Concretely realized storing simple action correspondence maps stepping wsbpel STS recovering information going wsbpel Based translations basic activities structured wsbpel activity sequence pick switch ﬂow translated ﬁrst translating subactivities linking resulting STSs initial ﬁnal states obtain single STS corresponds structured activity features single initial state entry point activity single ﬁnal state exit point Table 4 gives account translation mechanism graphical notation ﬂow activity showing case activities generic ﬂow n activities results STS allowing possible interleaving combination n activities This ﬁrst phase translation concluded simple reduction phase transitions perform inputoutput affect values variables eliminated corresponding entry exit states uniﬁed Then second step translation consists instantiation schematic representation obtained far ﬁnite STS model In representation adopted boils identify ﬁnite ranges replace abstract types concerning possibly existing interpreted functions behavior ground values In phase crucial relevant behaviors original service nonetheless captured groun dized service discuss Section 8 easy devise instantiation naive way lead problems related large model size contrary looking sizeoptimal instantiations harder In follow ing work hypothesis starting wsbpel speciﬁcation ﬁnitestate suitable ﬁnitization identiﬁed preprocessing step Once ﬁnite variable ranges interpreted function behaviors explicit schematic representation easily mapped formal model STS First interpreted functions compiled away constants uninterpreted functions mapped sets variables corresponding applications ground values values unknown remain constant transition Then set states simply consists combinatorial assignments variables transitions correspond instantiations assignments inputoutput actions concrete values variables inputoutput arguments Finally set Prop properties STS deﬁned consists simply possible value assignments typed variable ground function term labeling function obvious It important remark groundization required 330 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 Table 3 Translating basic wsbpel activities STSs wsbpel activity receive operationop variablex STS invoke operationop inputVariablex invoke operationop inputVariablex1 outputVariablex2 assign copy variablex1 partp1 variablex2 partp2 assign copy expressionfuny variablex partp theoretical development implementation largely operate schematic STS representations leverage compactness We illustrate translation example Producer abstract wsbpel introduced previous section breaking translation phases Example 7 Fig 7 shows STS abstract wsbpel process Producer represented internal language wsbpel STS translator The speciﬁcation starts list TYPEs Article Size Cost Delay exploited STS derived wsdl speciﬁcation Producer Then STATE STS deﬁned set typed variables pc program counter variable Notice values pc closely related start points activities For example pc value getRequest process waiting receive P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 331 Table 4 Translating structured wsbpel activities STSs wsbpel activity sequence activity a1 activity a2 STS translation switch case conditionc1 activity a1 case conditionc2 activity a2 activity a3 conditionc activity pick onMessage operationop1 variablevar1 activity a1 onMessage operationop2 variablevar2 activity a2 flow activity a1 activity a2 request item value checkAvail ready check item available values correspond receive switch statements lines 15 20 wsbpel Fig 3 respectively In fact wsbpel associates activity translation uses value attained program counter start activity instance line 51 associated activity named prepareInfo code Otherwise unique pc value created translator case cid3pickcid4 activity line 31 If activity takes place immediately prior termination deﬁned ﬁnal value Program Counter prepending DONE_ preﬁx instance line 59 line 60 The variables deﬁne state STS offerVar_delay offerVar_cost correspond parts wsbpel message variables In INITial states variables undeﬁned pc set initial wsbpel activity main The INPUT declarations represent schematically input actions STS modeling incoming requests process information bring request receiving product request single parameter type Article Similarly OUTPUT declarations model outgoing messages unavail 332 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 Fig 7 The STS Producer process article available stock offer bid production item particular price particular production time The schematic presentation transitions STS given terms set TRANS statements Each TRANS statements essentially corresponds arc representation Tables 3 4 discussed deﬁnes applicability conditions set source states ﬁring action corresponding destination states For instance pc main TAU pc getRequest line 45 states action τ executed state property pc main holds leading state pc getRequest holds properties retained value Transitions directly associated wsbpel activities case starting main activity transitions inserted translation mechanism link activities performed sequence instance pc seq2 TAU pc prepareOffer line 56 wsbpel assignments mapped transitions effects affect variables different program counter instance case assignment line 52 corresponding line 27 wsbpel code Notice stage opaque wsbpel assignments correspond giving variable possible value range deﬁned type denoted Values notation abstract types sets concrete values ﬁnite types Fig 8 reports graphical representation STS Producer corresponding schematic textual representation Fig 7 Once types Article Size Cost Delay instantiated ﬁnite ranges required ﬁnite ness assumption easily obtain concrete ﬁnitestate STS States S correspond assignments variables inputs I outputs O instantiations messages deﬁned INPUT OUTPUT sections Each TRANS clause Fig 7 corresponds different elements transition relation R pc checkAvail availVar False TAU pc sendUnavail generates different elements R depending values variables qVar_article offerVar_cost The properties associated STS expressions form vari P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 333 Fig 8 The graphical representation STS Producer process able value variable variables STATE declaration value possible values The labeling function obvious As remarked implementation explicitly produce groundized STS represented humanreadable language described far Rather discuss extensively Section 5 leave lowlevel symbolic mechanisms based Binary Decision Diagrams 26 enactment representation groundization A similar mapping wsbpel process STS holds Shipper User processes 334 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 33 Translating STSs wsbpel services Our composition approach requires ability convert STS wsbpel extracts desired orchestration STS This process actually easier obtaining STSs wsbpel speciﬁcations key observation nondeterministic nature services Namely general STSs resulting wsbpel conversion feature nondeterminism different natures referred external internal nondeterminism The ﬁrst external nondeterminism related fact domain interacting STS behave ways STS predict priori For instance example offer given Producer answered positively outside control Producer In cases STS able handle different requests responding adequately possible behaviors partners interact This kind nondeterminism occurs instance state pc pick1 messages ack nack received The second internal nondeterminism refers fact STS evolve different ways according internal decisions explicit STS For instance fact variable assigned values availVar state pc setAvail models presence decision variable value abstract way describing logics decision STS Of course reﬂect different STS behaviors driven basis value availVar variable Similar considerations hold states different output transitions performed Example 7 shows forms nondeterminism necessary model published services intend compose case Producer Shipper User However important remark concerns executable orchestration services aim syn thesize shall focus STS feature external nondeterminism needed respond correctly messages coming component services Indeed need avoid generating composite services featuring internal nondeterminism order service executable engine contain abstract choices runtime behavior uniquely determined We capture distinction calling STS deterministic contain internal nondeterminism contain external nondeterminism Basically deterministic STS single initial state admits state unique τ transition unique output transition nonempty set input transitions formally spelled following deﬁnition Deﬁnition 8 Deterministic STS An STS Σ cid3S S 0 I O R Lcid4 deterministic 1 S 0 1 2 state s S s τ s 3 state s S s s cid11 R transition s belongs R cid11 R O transition s belongs R The fact framework aim synthesize deterministic automata implies signiﬁcant simpliﬁcation concerns translation synthesized STSs executable wsbpel In fact deterministic loop free nature orchestration STSs generate translation turns conceptually simple The extraction inputoutput wsbpel operations immediate set wsbpel variables represent STS variables apart pc variables associated uninterpreted functions For concerns reconstruction wsbpel workﬂow starting set STS transitions ﬁrst perform simple optimization step eliminates τ transitions affect program counter Then perform recursive topdown visit transition tree starting initial state applying transformation patterns essentially invert Tables 3 4 For instance output transitions converted invoke reply depending corresponding operations wsbpel components asynchronous synchronous Assignments converted assign activities An input transition originates state converted receive activity tuples input transitions sharing starting state correspond pick tuple onMessage subactivities Transitions feature preconditions nonpc variables originate switch activities The sequence activity inserted start inside branch structured activity case switch onMessage pick 4 Modeling composition problem In section based interpretation services terms STSs formalize problem composing Web services solution means planning techniques Our modeling solution rely composition framework represented Fig 9 Its inputs consist set component services W 1 W n reachability composi tion requirement ρ output novel process W deployed run coordinate W 1 W n order achieve ρ Internally framework goes crucial steps constructing domain Σcid16 STS represents possible behaviors component services need controlled identifying suitable troller Σc Σcid16 STS interacts Σcid16 requirement ρ satisﬁed discussed previous chapter deterministic loopfree Fig 9 highlights break complexity second step preprocessing phase transforms Σcid16 intermediate STS BelΣcid16 intuitively represents behaviors P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 335 Fig 9 The approach component services recognizable external observer analyzed easily Σcid16 extract Σc The subsections introduce key formal elements performing steps discussed First Sec tion 41 discuss notion domain terms parallel product Σcid16 showing way models independently evolving components Σ1 Σn Based deﬁne means control Σcid16 STS Σc represent behaviors controlled STS Σc cid17 Σcid16 Then Section 42 deﬁne notions composition problem solution To ﬁrst formalize composition requirements conditions satisfy This allows stating conditions controller satisﬁes requirements consequently spell composition problem ﬁnding controller Σc Σc cid17 Σcid16 satisﬁes given composition requirement ρ 41 Domain controller The automated composition problem inputs Fig 9 formal composition requirement ρ set component services W 1 W n associated STSs ΣW 1 ΣW n The components ΣW 1 ΣW n evolve independently build environment behaviors need driven represent planning terms domain aim control Such domain Σcid16 obtained ﬁrst step composition combining ΣW 1 ΣW n means parallel product operation essentially follows notion asynchronous product 45 Deﬁnition 9 Parallel product Let Σ1 cid3S1 S 0 O1 I2 O2 L1 L2 The parallel product Σ1 cid16 Σ2 Σ1 Σ2 deﬁned 1 I1 O1 R1 L1cid4 Σ2 cid3S2 S 0 2 I2 O2 R2 L2cid4 STSs I1 cid2 S1 S2 S 0 1 S 0 2 I1 I2 O1 O2 R1cid16R2 L1cid16L2 cid3 Σ1cid16Σ2 cid3s1 s2 s cid3s1 s2 s1 s cid11 1 s2cid4 R1cid16R2 cid3s1 s cid11 2cid4 R1cid16R2 cid3s2 s cid11 1 cid11 2 cid4 R1 cid4 R2 L1cid16L2s1 s2 L1s1 L2s2 The representing parallel evolutions component services W 1 W n Fig 9 formally deﬁned Σcid16 ΣW 1 cid16 cid16 ΣW n We remark deﬁnition parallel product requires inputsoutputs Σ1 Σ2 disjoint This means component services communicate directly While extension case component services directly communicate possible simple consider scenario intend compose independent existing services assume aware Also notice order obtain consistent labeling Σcid16 Σ1 Σ2 deﬁned disjoint proposition sets This means essence corresponding services refer different internal variables This actually case service variables local scope clashes place homonym variables ambiguous models applying appropriate renamings The automated composition problem consists generating STS Σc controls Σcid16 executions satisfy requirement ρ according formal notion requirement satisfaction 336 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 In particular aim generating controllers executable safely restrict consider internally deterministic according Deﬁnition 8 Moreover require inputs controller coincide outputs corresponding domain vice versa situations IO appears controller domain useless cause deadlock situations Deﬁnition 10 Controller A controller Σcid16 cid3S S 0 I O R Lcid4 deterministic STS Σc cid3Sc S 0 s Sc Ls c O I Rc Lcid4 The behaviors STS Σ driven controller Σc represented STS controlled deﬁnition essentially extends standard notion synchronous product STSs 45 appropriate handling τ transitions Deﬁnition 11 Controlled Let Σ cid3S S 0 I O R Lcid4 state transition let Σc cid3Sc S 0 c O I Rc Lcid4 controller Σ The STS Σc cid17 Σ describing behaviors Σ controlled Σc deﬁned cid2 Sc S S 0 c S 0 I O Rc cid17 R L cid3 Σc cid17 Σ cid3sc s τ s cid3sc s τ sc s cid11 cid3sc s s c s cid11 c scid4 Rc cid17 R cid3sc τ s cid11cid4 Rc cid17 R cid3s τ s cid11cid4 Rc cid17 R cid19 τ cid3sc s cid11 cid4 Rc c cid11cid4 R cid11 c cid4 Rc cid3s s cid11cid4 R Notice systems connected output associated input resulting transitions Rc cid17 R labeled inputoutput actions This allows distinguish transitions correspond τ actions Σc Σ deriving communications Σc Σ In general STS Σc adequate control Σ In particular deadlocks occur case Σc performs output point time Σ able accept vice versa Of course want consider controllers prevent situations guaranteeing Σc performs output transition Σ able accept vice versa Moreover sake generality need way independent lowlevel engine dependent implementation details particular way message queuing mechanisms realized To achieve follow careful conservative approach guarantees deadlocks avoided regardless speciﬁc message queuing mechanisms place runtime engine We deﬁning deadlockfreedom condition assumes messages associated buffer rely existence speciﬁc message queuingbuffering mechanism In particular assume s accept message successor s message sent Σ perform input transition labeled Vice versa state s successor s deadlock situation reached4 cid11 S s reachable s chain τ transitions s cid11 cid11 In following deﬁnition rest paper denote τ closures set states reachable s sequence τ transitions τ closureS union τ closures states set S S remember absence divergent states chains τ transitions ﬁnite Deﬁnition 12 τ closure Let Σ cid3S S 0 I O R Lcid4 STS s S Then τ closures t n N s0 s1 sn s s0 t sn 0 n 1 cid3si τ si1cid4 R Moreover S S τ closureS cid4 sS τ closures Deﬁnition 13 Deadlockfree controller Let Σ cid3S S 0 I O R Lcid4 STS Σc cid3Sc S 0 Σ Σc deadlock free Σ states sc s ReachableΣc cid17 Σ satisfy following conditions c O I Rc Lcid4 controller 1 cid3s s 2 cid3sc s cid11cid4 R O s cid11 c cid11 c cid4 Rc I s cid11cid11 cid11 cid4 Rc s τ closuresc cid3s c s c cid11cid11cid4 R s cid11 s cid11 τ closures cid3s cid11cid11 c cid11cid11 S Sc We remark possible adopt different formulation maintains requirement 1 replaces 2 condition closely reﬂects idea τ successors states R considered cid11 2 cid3sc s cid11 c cid4 Rc I s cid11 τ closures s cid11cid11 R cid3s cid11 s cid11cid11cid4 R 4 We remark successor s s deadlock occur This happen different chain τ transitions executed s cid11 leads state s executed anymore In case deadlock recognized s cid11cid11 cid11cid11 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 337 Fig 10 Some examples deadlockprone deadlockfree controllers The formulations equivalent fact Deﬁnition 13 1 2 applied states sc s ReachableΣc cid17 Σ Independently formulation deadlockfreedom deﬁnition corresponds minimal requirement allows asynchronous execution wsbpel services guaranteed supported Webservice execution engine regardless speciﬁc implementation queuing buffering mechanisms Example 14 The section Fig 10 shows example controller Σc deadlockfree STS Σ This fact Σ nondeterministically evolve initial state s1 s2 s3 state handle output produced controller Σc That state c1 s3 controlled Σc cid17 Σ requirement 1 Deﬁnition 13 violated Vice versa shown middle section ﬁgure output controller handled state s3 deadlock occur Σc deadlockfree Σ The ﬁgure stresses fact inputs outputs play symmetric roles deﬁnition deadlockfreedom Namely case consider variation STSs Σc Σ middle section inputs turned outputs vice versa The resulting controlled middle section case controller deadlockfree situation corresponding state c1 s3 controlled handle output b Notice deﬁnitions controller deadlockfreedom rule cases controlled input output actions executed state states connected sequence τ transitions This step execution controller recall deterministic STS uniquely perform 338 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 Fig 11 Controllers inputoutput action input single output Indeed highly desirable avoid situations input outputs executed state states connected sequence τ transitions cases relative speeds IOs decide controller gets deadlocked This shown following example Example 15 Consider Fig 11 intend control Σ way dark shaded states s8 s9 reached Driving Σ s8 s9 possible incurring possibility deadlock Indeed controller STS Σc upper ﬁgure left designed order attempt driving Σ s8 s9 allowing input output state c2 However result behavior corresponding controlled Σc cid17 Σ nondeterministic critical runs occur states c2 s5 c2 s6 breaking deadlock freedom requirements Deﬁnition 13 Let relax requirement admit reaching bright shaded state s7 The deterministic controller ﬁgure satisﬁes requirement The associated controlled deadlockfree step execution fully determined apart internal evolutions step input output operation 42 Requirements problem statement To deﬁne notion composition problem ﬁrst discuss kind properties required orches tration services means example context reference scenario Example 16 A reasonable requirement PS sell product destination requested customer This means conclude successfully transaction started customer request In terms interaction ﬂows speciﬁed available abstract wsbpel means reach situation User Producer Shipper receive ﬁnal conﬁrmation This correspondence wsbpel activities instance concerning User means execute line 36 Fig 4 However requirement satisﬁable composed service depends decisions taken parties control Producer Shipper refuse provide service requested product location product available location area service shipper User refuse offer PS expensive If happens require PS P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 339 step orders want PS buy delivered want spend money delivering item buy Again terms abstract wsbpel correspondence wsbpel activities instance concerning User means terminate execution line 32 line 21 Fig 4 Requirements like formulated terms reachability sets states component services In particular structure requirements conjunction requirements ﬂow data components requirements control logics In control specify case partners available terminate successful state state ﬁnal agreement buy sell achieved PS Otherwise partner remain inactive terminate failure state partner aware agreement buysell possible b partner commitment buy sell In order compactly deﬁne requirements semantically annotate wsbpel activities annotations Fail Succ These identify ﬁnal failure success states partners inter preted sets program counter values associated failing successful terminations respectively For instance ProducerSucc Producerpc DONE_getAccepted ProducerFail Producerpc IN DONE_getRefused DONE_Nack Similarly introduce Init annotation indicates component program counter compo nent initial value This said control ﬂow ρc requirement goes follows cid5 ProdAvailVar ShipAvailVar UserAcceptsVar cid6 ProdSucc ShipSucc UserSucc cid5 cid5 ProdAvailVar ShipAvailVar UserAcceptsVar ProdFail ProdInit ShipFail ShipInit UserFail UserInit cid6cid6 The data ﬂow requirements identiﬁes data dependencies partners More speciﬁcally expect Producer Shipper receive PS request data sent User Producer provide size information Shipper costs times coherently computed communicated User PS Of course cases data actually produced circulated Producer unavailable provide item communicate location article data partners This captured stating case component responsible generating data actually provides communicated partner logical implication The data section requirement ρd follows DEFd condition holds d value different default indeﬁniteness value DEFProducerreqVar_loc ProducerreqVar_loc UserreqVar_loc DEFProducerreqVar_art ProducerreqVar_art UserreqVar_art DEFShipperreqVar_size ShipperreqVar_size ProducerinfoVar_size DEFShipperreqVar_loc ShippherreqVar_loc UserreqVar_loc DEFShipperreqVar_art ShippherreqVar_art UserreqVar_art DEFUserofferVar_delay UserofferVar_delay ShipperofferVar_delay ProducerofferVar_delay DEFUserofferVar_cost UserofferVar_cost ShipperofferVar_cost ProducerofferVar_cost Intuitively controller solution requirement ρ ρc ρd iff guarantees ρ achieved We formally express requiring execution controlled Σc cid17 Σcid16 ends state ρ holds This immediate requirement ρ fact refers values program counter values variables possibly linked means functional expressions As taking account ﬁniteness types ρ easily compiled reasoning cases case uninterpreted functions formula propositions associated Σcid16 Deﬁnition 17 Satisﬁability We STS Σ satisﬁes propositional formula p denoted Σ cid12 p exists inﬁnite run Σ ﬁnal state Σ satisﬁes p according Deﬁnition 6 340 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 Deﬁnition 18 Solution controller A controller Σc solution goal ρ iff Σc cid17 Σcid16 cid12 ρ We formally characterize Web service composition problem follows Deﬁnition 19 Composition problem Let Σ1 Σn set state transition systems let ρ composition require ment The composition problem Σ1 Σn ρ problem ﬁnding deadlockfree controller Σc Σc cid17 Σ1 cid16 cid16 Σn cid12 ρ We stress deﬁnition satisﬁability admit solutions problem trollers lead inﬁnite runs entering interaction loops guarantee terminate This kind solution strictly connected fact requirements formulated terms reachability conditions fully general composing services guaranteed terminate assume starting point Of course extensions possible meaningful relaxing assumption ﬁnite termination components considering composition requirements different nature correspondingly relaxing deﬁnition satisﬁability However order dilute presentation provide selfcontained detailed discussion approach stick deﬁnitions restrict loopfree controllers imply inﬁnite runs We stress time imply restrict composing loopfree services Indeed scenarios components feature loops composition requirement reached traverse loops ﬁnite number times approach capable build appropriate controller speciﬁcally controller handle loop traversal different portion loopfree structure 5 The synthesis algorithms The statement composition problem given Deﬁnition 19 directly exploited verify given troller Σc satisfy requirement ρ applying modelchecking techniques However purposes automatically generating controller solves problem need conveniently rephrase problem way makes explicit controller identiﬁed constructing visiting preﬁx search space This allow tackle problem ﬁrst realizing construction search space making use effective search techniques taken planning area In following ﬁrst discuss reformulation provide algorithms solving reformulated problem 51 Belieflevel search reformulation We start observing Σcid16 Σ1 cid16 cid16 Σn nondeterministic STS partially observable Σc That execution time composite service Σc general know exactly current state component services modeled ΣW 1 ΣW n This uncertainty different sources The ﬁrst presence nondeterministic transitions situation direct observation domain state impossible considered approaches planning The second source uncertainty fact modeling asynchronous framework entities evolve internally τ transitions While asynchronous behaviors known studied process algebra consequently considered different approaches program synthesis aspect considered far planning All classical approaches planning rely assumption domain discourse synchronous nature actions place possibly concurrence basis unique discrete timeline This model situation independent actors evolve unrelated uncontrollable speed Neither modeled recent planning approaches languages consider actions effects continuous time triggering actions synchronous In setting incomplete knowledge runtime state environment control taken account grouping executions perceived distinct external observer environ ment In particular step execution need consider set different states equally plausible given partial knowledge Such set states called belief state simply belief While approaches planning rely kind representation model ﬁnitestate uncertainty 18819324 remark use beliefs different absence asynchronicity models Recalling Deﬁnition 12 easy initial belief execution τ closure initial states S 0 Σcid16 consider states component reached activation means internal transitions This belief updated Σcid16 performs observable input output transition More precisely cid11 EvolveB deﬁned set B S current belief action I O applied new belief B states reachable ﬁrst applying considering possibly sequence internal transitions resulting states We remark applicable belief notion applicability simply deﬁned requiring applicability states belief reasons First state B evolve B τ transitions internal evolution recall ﬁnite absence divergent states perfectly admissible transient states traversed action handled Moreover P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 341 output actions executed states depending choice performed STS exam shall require executable state B state B Deﬁnition 20 Belief applicability evolution Let B S belief state transition Σ We action I O applicable belief B denoted ApplB iff O s B Appls I s B s cid11 τ closures Appls cid11 The evolution B action belief B cid11 EvolveB ApplB EvolveB τ closures EvolveB cid11s B I O cid3s s cid11cid4 R By starting τ closure S 0 iteratively evolving belief applicable action obtain set beliefs ReachableBΣ reachable S 0 τ closureS 0 ReachableBΣ B ReachableBΣ I O cid19 B cid11 EvolveB B cid11 ReachableBΣ To evaluate satisﬁes given reachability goal consider transient states beliefs traversed components performing internal transitions This reasons ﬁrst understand states depends unobservable events second control execute prevent internal transitions Rather need consider exclusively stable states beliefs reached possible internal evolution performed prior execution IOs This τ frontier B Deﬁnition 21 τ frontier Let B S belief τ frontier B set τ frontierB s B s I O s s cid11 S s τ s cid11 R s cid11 R cid11 S Since deal reachability goals state belief satisﬁes propositional property p considering τ frontier satisﬁes p iff state τ frontier Deﬁnition 22 Belief satisfying property Let Σ cid3S S 0 I O R Lcid4 STS p Prop property Σ B S belief We B satisﬁes p written B cid12Σ p state s τ frontierB p Ls We deﬁne belieflevel STS Σcid16 states beliefs traversed executions Σcid16 transitions belief evolutions Deﬁnition 23 Belieflevel Let Σ cid3S S 0 I O R Lcid4 STS The corresponding belieflevel STS BelΣ cid3SB s0 B I O RB LBcid4 SB ReachableBΣ B τ closureS 0 s0 transitions RB deﬁned follows EvolveB B LBB p Prop B cid12Σ p cid11 cid19 I O cid3B B cid11cid4 RB Therefore belieflevel Σcid16 STS exempt τ transitions single initial state collects possible executions Σcid16 equivalent point view external observer Σcid16 states reached means equivalent transitions viewpoint collected state BelΣcid16 This allows recast deﬁnition composition problem imposing conditions troller observable induced executions controlled domain represented BelΣcid16 This means search suitable controller identifying subset preﬁx BelΣcid16 possible execution satisﬁes composition requirement More speciﬁcally justiﬁed previous Section consider reachability goals restrict attention controllers execution loopfree corresponds searching DAG structured preﬁxes BelΣcid16 Moreover fact intend generate deterministic controllers requirement deadlockfreedom imply constraints kind subsets BelΣcid16 interested First terminism controllers imposes subtree point need consider input transition Second deadlockfreedom implies controllers discard outputs controlled subset 342 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 contains state B originates output transitions BelΣcid16 subset contain output transitions BelΣcid16 B Putting constraints conclude need consider portions BelΣcid16 structured follows Deﬁnition 24 Execution subtree Let BelΣ cid3SB S 0 B I O Rcid11 cid3S S 0 I O R Lcid4 We Σ cid11 B cid3Scid11 B S 0 B I O RB LBcid4 belieflevel domain Σ B Lcid11 Bcid4 execution subtree ΣB B SB Rcid11 1 Scid11 2 cid3B o B cid11cid4 RB o O B Scid11 outputs originates belieflevel STS B B B RB Σ cid11 B subgraph BelΣ cid11 Scid11 B cid3B o B cid11cid4 Rcid11 B belief subtree originate 3 B Scid11 cid11 B input transition starts belief B transition start B subtree cid11 SB I B B B B cid11 I B B cid19 B B cid11cid11 Rcid11 cid11 Rcid11 cid11cid11 Scid11 B cid11 B cid11 cid19 B cid11cid11 If 4 No run Σ cid11 B traverse belief belief appear path constructed concatenating transitions Σ cid11 B function restriction LB states Scid11 5 Lcid11 B This implies paths ﬁnite length B SB Lcid11 B LBScid11 B We denote Σ cid11 relation applied generic STSs use referring subtrees belieflevel systems B execution subtree BelΣ Notice subtree B BelΣ fact Σ cid11 It seen conditions 1 4 fact initial belief subtree originating belieflevel ensure subtree DAGstructured portion belieflevel condition 2 requires output generated environment disregarded condition 3 states subtree need consider uniquely determined way driving environ ment controller deterministic controller deterministic case input output transitions start state B Given acyclic structure subtree associated notion subtree depth maximal length sequences B0 B1 Bn B B i1 RB Intuitively depth subtree identiﬁes number steps needed worst case terminate execution controlled A subtree π BelΣcid16 associated controller connected Σcid16 drives way beliefs π traversed execution controlled Amongst controllers satisfy requirement focus synchronous controller immediate constructive deﬁnition structure controller mirrors subtree featuring state state subtree contraposing onetoone IO operations subtree Deﬁnition 25 Controller associated subtree Let Σ cid11 BelΣ We STS ContrΣ cid11 labeling function B cid3Scid11 B S 0 B O I Rcid11 B cid3Scid11 B S 0 B I O Rcid11 B Lcid11 B Lcid4 controller associated Σ cid11 Bcid4 BelΣ execution subtree B L denotes Lemma 26 Let Σ STS Σ cid11 B BelΣ The STS ContrΣ cid11 B controller Σ Proof Since labeling ContrΣ cid11 need ContrΣ cid11 B deterministic STS B deﬁnition inputoutputs correspond Σ Since belieflevel BelΣ single initial state execution subtree Σ cid11 B clause 1 Deﬁnition 8 satisﬁed Since belieflevel BelΣ contains τ transition subtree Σ cid11 B associated controller contain τ transition Thus clause 2 Deﬁnition 8 satisﬁed From clause 3 deﬁnition subtree immediate output transition originate state controller associated subtree Thus clause 3 Deﬁnition 8 satisﬁed cid2 Thus Σ cid11 B BelΣ ContrΣ cid11 deadlockfree Σ need ﬁrst execution ContrΣ cid11 remember states ContrΣ cid11 B beliefs Σ B control Σ However prove controller B cid17 Σcid16 traverses states B s s B P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 343 Lemma 27 Let Σ STS Let Σ cid11 s B B BelΣ cid3SB S 0 B I O RB LBcid4 Every state B s ReachableContrΣ cid11 B cid17 Σcid16 Proof The proof goes induction number inputoutput actions traversed reach B s equals length sequence beliefs subtree traversed reach B Basis 0 Thus B τ closure S 0 Since input output executed s reachable chain τ transitions initial state belongs B cid11 Rcid11 B RB B Induction step We assume theorem holds B s k prove k 1 Then action consist cid11cid11 RB b possibly sequence cid11 s B cid17 Σcid16 In particular cid11 B s0 s0 S 0 cid11 EvolveB states reachable I O B B τ closure states B progressed action That considering state s state s B s progressed s τ transitions RB leads s inductive hypothesis B s reached k inputoutput actions state S 0 reachable k 1 inputoutput actions Then set states B k 1 inputoutput actions starting states form S 0 cid11 EvolveB By deﬁnition Evolve states B cid11cid11 s s This means B cid11 s cid11 B B s0 s0 S 0 cid11 ReachableContrΣ cid11 B cid2 B B cid11 B cid11 B cid11 s cid11 s s cid11cid11 cid11 cid11 cid11 Lemma 28 Let Σ STS Let Σ cid11 free Σ B BelΣ execution subtree belieflevel Σ Then ContrΣ cid11 B deadlock Proof To prove statement prove turn Σc ContrΣ cid11 B obeys clauses 1 2 Deﬁnition 13 Concerning clause 1 recall output transition reachable state correspondent transition belieflevel belief subtree output transition appear cid11 cid11 R output O B s ReachableΣc cid17 Σ s B transition B B subtree Thus s s subtree But belongs ContrΣ cid11 B proves clause 1 Deﬁnition 13 τ closuresc sc given absence τ transitions controller Concerning clause 2 Deﬁnition 13 observe B B B B s ReachableΣc cid17 Σ cid11 Rcid11 cases possible input controller applicable s B s τ frontier B clause 2 trivially true cid11 belongs belieflevel Σ s τ frontier B In case B B sequence τ transitions s state sequence B applicable cid11 τ closures This shows clause 2 holds cid2 state s cid11cid11 R s cid11 s We ﬁnally position recast notion solution controller refer execution subtree subgraph constructively deﬁned BelΣcid16 require ﬁnal state subtree belief satisfying ρ Deﬁnition 29 Solution subtree Let Σ cid3S S 0 I O R Lcid4 domain deﬁned propositions Prop Let ρ propo sitional formula Prop The execution subtree Σ cid11 B BelΣ solution requirement ρ ﬁnal state B Σ cid11 B B cid12Σ ρ Indeed solution subtree π associated solution controller Contrπ vice versa shown following lemma Lemma 30 Let π solution subtree BelΣcid16 problem service composition requirement ρ Then Contrπ solution controller problem Proof The statement easily proved based Lemma 27 If subtree solution state ﬁnal state π goal state Lemma 27 ﬁnal state reachable execution Contrπ goal state Contrπ solution controller cid2 To associate subtree BelΣcid16 controller Σc observe following Deﬁnition 11 Σc constrains behaviors Σcid16 certain states transitions Σcid16 traversed execution Σc cid17 Σcid16 That Σc induces constrained subset Σcid16 denote Σcid16Σc We Σcid16Σc solution subtree Σc solution controller Deﬁnition 31 Induced STS Let Σcid16 cid3S S 0 I O R Lcid4 STS describing set component services let Σc cid3Sc S 0 c O I Rc Lcid4 controller Σcid16 The STS Σcid16Σc cid3S S 0 I O Rcid11 Lcid4 Rcid11 s s cid11 sc s sc s ReachableΣc cid17 Σcid16 sc s s cid11 c s cid11 cid11 c Rc cid17 R called STS induced Σc Σcid16 344 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 Lemma 32 If Σc cid17 Σcid16 cid12 ρ execution subtree corresponding controlled BelΣcid16Σc BelΣcid16 solution subtree composition problem Proof The proof relies fact restrict controllers induce ﬁnite loopfree executions controlled state controlled traversed Under proviso according Deﬁnition 17 Σc cid17 Σcid16 cid12 ρ means execution Σc cid17 Σcid16 ﬁnite ﬁnal state satisﬁes ρ according Deﬁnition 6 In turn considering Deﬁnition 31 means ﬁnal states STS Σcid16Σc induced Σc Σcid16 satisfy ρ Due deﬁnition belieflevel ﬁnal states states τ frontiers ﬁnal beliefs induced subtree BelΣcid16Σc That ﬁnal belief BelΣcid16Σc satisﬁes ρ according Deﬁnition 22 Following Deﬁnition 29 means BelΣcid16Σc solution subtree composition problem proving statement cid2 The lemmas combined associate onetoone way existence solution solution subtree Theorem 33 Composition problem belieflevel Let Σ1 Σn set state transition systems deﬁned propositions Prop1 Propn respectively Let ρ composition requirement propositional formula Prop1 Propn A solution controller problem exists solution subtree BelΣ1cid16 cid16Σn exists Proof This theorem descends directly Lemmas 30 32 Namely exists solution subtree π Lemma 30 guarantees exists solution controller Contrπ Vice versa exists solution controller Σc Lemma 32 guarantees BelΣcid16Σc solution subtree cid2 Relevant purposes automatically constructing controller Lemma 30 states solution subtree π solution controller Contrπ obtained controller Σc induces solution subtree BelΣ1 cid16 cid16 Σn solution composition problem Thus recast composition problem identifying solution subtree π BelΣ1 cid16 cid16 Σn taking loopfree controller Contrπ solution problem Based considerations approach structured follows 1 Construct component service STS Σi 2 Construct parallel product Σcid16 Σ1 Σn belieflevel counterpart BelΣcid16 3 Search execution structure BelΣcid16 identify execution tree associated solution controller 4 Extract execution tree controller Σc emit wsbpel program In following subsections core approach algorithm constructing BelΣcid16 searching solution subtree inside 52 Algorithms Following ideas stated previous section solve composition problem ﬁrst constructing belief level machine BelΣcid16 searching solution subtree π inside Once solution loopfree controller Contrπ extracted constitutes solution composition problem To construct belieflevel machine BelΣcid16 rely algorithm implements Deﬁnition 23 simple ﬁx point algorithm performs forward search space beliefs starting initial belief At iteration ﬁxpoint τ closure operator realizes Deﬁnition 12 indistinguishable states STS grouped While possible apply algorithm directly Σcid16 better In particular exploit fact BelΣ1 cid16 Σ2 BelΣ1 cid16 BelΣ2 This stems way states transitions individual STSs cohabit inde pendently Σ1 cid16 Σ2 allowing projecting constructing belieflevel Therefore separately compute belieflevel component service represent overall belieflevel sys tem modular composition BelΣi modules evolve basis parallel product semantics The impact approach effectiveness belieflevel construction clear algorithm given monolithic approach STS Σ explicitly enumerates reachable beliefs BelΣ 2 S1 2 enumerate 2 beliefs partitioned approach 2 S1Sn S Sn Once belieflevel built exploit variant algorithm strong planning presented 32 extract solution subtree Such algorithm receives input STS representing BelΣcid16 produced belieflevel construction algorithm performs symbolic regression search frontiers states BelΣcid16 manipulated We remark state BelΣcid16 corresponds belief set states component services symbolically manipulating sets states BelΣcid16 means symbolically manipulating sets sets states component services This extremely powerful technique avoids handling enumeratively large sets sets service states In difference original planning algorithm presented 32 algorithm explicitly deal straints coming way subtrees deﬁned requirement controlled deadlockfree P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 345 Fig 12 The search algorithm This speciﬁcally affects key primitive algorithm built socalled strong preimage primi tive StrongPreImage Given set S states BelΣcid16 preimage primitive returns set pairs cid3s acid4 associating state s inputoutput action Such pairs identify predecessors states S inputoutput action execution action associated s guaranteed lead states inside S regardless nondeterminism The set stateaction pairs constitutes socalled stateaction table 32 represents partial function states domain actions executed Our preimage primitive deﬁned follows cid11 cid11 StrongPreImageS R s cid6 cid11 s s cid5 cid11 S cid7 cid8 cid7 cid5 cid6 cid11 s I s s o o O s cid5 cid11 S o s cid11 O s o s cid6 cid11 R s cid11 S R s cid11 s o s cid11 S cid8 Here deadlockfreedom requirement input output actions treated differently In particular outputs correspond uncontrollable choices taken component services consider output service consider possible outputs guarantee outcome target set This necessary guarantee conditions 1 2 Deﬁnition 13 avoiding situations shown Fig 10 low output generated component handled controller Indeed deﬁnition Strong PreImage application consists generating portion execution subtree asymmetry handling inputs outputs closely corresponds requirements 2 3 Deﬁnition 24 turn derive Deﬁnition 13 We remark deadlockfreedom requirement correspondence formulation strong planning 32 controller responsible taking actions Indeed 32 relies different StrongPreImage primitive actions handled uniformly analogously treat inputs The important primitive algorithm socalled pruning primitive PruneStates exe cuting preimage remove stateaction table π pairs cid3s acid4 solution known s stored S It deﬁned PruneStatesπ S cid7 cid3s acid4 π s S cid8 This pruning important guarantee shortest solution state appears stateaction table The search algorithm depicted Fig 12 basically consists ﬁxpoint iteration incrementally constructs stateaction table The stateaction table S A initialized enriched iteration states possible control achieve states S A The algorithm terminates states added stateaction table current stateaction table includes initial states case solution The arguments proving algorithm terminates correct complete similar presented 32 In particular termination proved observing number states visited domain ﬁnite number states stateaction table grows monotonically Theorem 34 Termination Let ΣB cid3SB S 0 planI G ΣB terminates B I O RB LBcid4 belieflevel STS let I SB G SB The execution Proof We prove main loop algorithm lines 49 exists ﬁnite number iterations To ﬁrst recall SB contains ﬁnite number states Moreover observe stateaction table S A grows 346 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 monotonically line 8 algorithm This implies SB iterations main loop new state action pair added S A line 8 But soon new stateaction pair added S A line 8 main loop exits line 4 O ldS A S A condition false That main loops exits SB iterations cid2 To prove correctness completeness rely proving iteration main loop lines 49 stateaction table contains states solution tree exists tree represented portion stateaction table Indeed starting set initial states stateaction table induces STS deﬁned follows Deﬁnition 35 STS induced stateaction table Let S A cid3s acid4 s S I O stateaction table referring actions states STS Σ cid3S S 0 I O R Lcid4 Let I s I Ocid3s acid4 S A set initial states let G S set goal states The STS induced I S A denoted STSof S A I G cid3SS A I I O RS A LS Acid4 deﬁned follows 1 I SS A 2 s SS A exists sequence cid3s0 a0cid4 cid3sn ancid4 s0 s cid3si aicid4 S A 0 n 1 cid3si ai si1cid4 R sn SS A 3 SS A contains state induced conditions 1 2 4 s SS A cid3s s 5 LS A function restriction L states SS A LS A LSS A cid11cid4 R cid3s s cid11cid4 RS A Lemma 36 Invariant property stateaction table At ith iteration main loop lines 49 G StatesOfS A contains states solution subtree depth exists In particular s G StatesOfS A STSof S A I G solution subtree rooted s Proof The proof goes induction number iterations main loop algorithm lines 49 Basis 0 The stateaction table G StatesOfS A G consists exactly states solution exists requires 0 steps achieve goal solution subtree depth 0 exists Induction step We assume theorem holds ith iteration prove 1th iteration At line 5 deﬁnition StrongPreImage tuple states G StatesOfS A considered possible target starting state s input action possible output actions Due inductive hypothesis deﬁnition StrongPreImage produced stateaction pairs P r goal achievable states 1 steps cid3s acid4 P r STSof S A P r s G subtree depth 1 words given inductive hypothesis correspondence deﬁnition StrongPreImage requirements 2 3 Deﬁnition 24 application StrongPreImage extracts exactly states transitions corresponding subtree depth 1 At line 6 stateaction pairs P r goal reachable exactly 1 steps stored NewSA inductive hypothesis goal reached steps S A At line 8 stateaction pairs added S A consequence hold stateaction pairs goal reachable 1 steps cid2 Theorem 37 Correctness completeness If algorithm returns stateaction table S A S A contains solution subtree composition problem If algorithm returns Fail solution subtree composition problem exists Proof This direct consequence Lemma 36 I G StatesOfS A ﬁnite solution subtree I exists case contained SA Depending condition S A Fail returned lines 1014 cid2 The implementation algorithms belieflevel domain construction searching solution subtree rely symbolic machinery effectively represent manipulate sets states Binary Decision Diagrams BDDs 26 canonical representation formulas state variables This symbolic representation technology largely investigated areas Model Checking Diagnosis Program Synthesis Planning 135832398847 core improved performances stateoftheart tools areas 271448 While phases belieflevel construction search states symbolic representation assume different meanings uniformly adopt SMV language STSs belief construction domain given input outputted belieflevel STSs search input domain SMV native language model checking systems NuSMV 27 It rich language allowing variety constructs mechanisms compactly represent STSs On fairly standard representation states actions means state action variables allows representing transitions combining explicit enumeration corresponding trans statements description evolution variables means possibly conditional assignments Indeed representation STSs SMV schematic close depicted Section 3 Moreover relevant feature purpose stands possibility deﬁne independent modules semantically independent modules equivalent parallel product P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 347 internally disjunctively partitioned transition relation stored save signiﬁcant space computation time As mentioned useful belieflevel construction given disjointness inputoutputs component services holds BelΣ1 cid16 cid16 Σn BelΣ1 cid16 cid16 BelΣn build belieflevel independently component implicitly combine representing modules Thus belieflevel construction states input domain correspond states STS associated com ponent Web service case BDD represents set indistinguishable states service belief Based representation belieflevel construction explicitly enumerates beliefs single component service symbol ically evolves sets states represent internal inputoutput actions The resulting belieflevel domain component service emitted module SMV language featuring inputoutput variables correspond STS turn connected parts inputoutput operations original wsbpel input The state belieflevel consists single enumerative SMV variable names possible beliefs traversed component The dynamics belieflevel represented list trans statements describes way inputoutput actions connect beliefs Then modules corresponding components services simply glued unique SMV ﬁle represents overall domain searched states correspond beliefs BelΣ1 cid16 cid16 Σn tuples cid3B1 Bncid4 B BelΣi This means symbolically evolving set states performed search algorithm corresponds evolving set state sets component services extremely demanding practically unfeasible explicit enumeration states making symbolic factored representation technique virtually necessary We remark known literature binary decision diagrams 2613 symbolic repre sentations principle blowup badly enumerative ones However witnessed huge literature modelchecking diagnosis monitoring BDDs capable vast majority cases represent formulas size polynomial number propositions polynomial complexity key BDD operations manipulate effectively This result good usage advanced heuristics optimizations realization software BDD packages holds independently fact formulas feature exponentially models number propositions That BDD representations cases compact effective corresponding modelenumerative representation handled practice Naturally possible design pathological formulas cause blowup BDD representations known limited set practical cases combinatorial multiplier circuits hardware veriﬁcation BDD representations polynomial In following section empirically test approach able discuss good practical results BDDs shown literature modelchecking related areas planning modelchecking symbolic diagnosis monitoring apply problem Web service composition 6 Experimental evaluation In order test effectiveness proposed technique implemented architecture proposed Fig 9 realizing translations wsbpel STS described Section 3 belieflevel construction Deﬁnition 23 search algorithm Fig 12 Our platform makes use CUDD 85 effective BDD package offers effective primitives including highly advanced memory space optimizations 2591 On platform conducted set experiments executing 12 GHz Pentium machine equipped 4 GByte memory running Linux All tests run setting timeout 3600 seconds CPU usage Our analysis aims identifying structural dimensional features Web services impact performance composition platform way This allows discuss scalability limits approach More speciﬁcally analysis focuses composition loopfree services complexity orchestrating protocols easily analyzed observing structure tackling general scenarios starts considering set symmetric scenarios services play role These symmetric scenarios allow evaluating scalability number asynchronous component services organized follows 1 We ﬁrst consider simple services encode questionandanswer procedures simply receive message pro duce output terminate We study deterministic services answer function input nondeterministic ones return failure message based internal choice 2 Then consider complex services encoding procedures lengthy feature sources internal nondeterminism This means order satisfy requirement composed service forced complex choices depending behavior components In particular order study impact structural factors composition consider turn binary unbalanced procedures step conclusive failure signaled procedure fact procedures correspond concatenations simple nondeterministic services b binary balanced procedures possible answers possible interaction signaling conclusive failure c nary balanced procedures high level generalize binary balanced procedures terms number possible answers 348 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 Fig 13 Combining N atomic services For sets vary size sets services need composed analyzing performance phases composition task construction belieflevel domain internalization search This allow draw considerations relationship results settings structural characteristics involved services Finally example nonsymmetric realistic scenario consider performance PS example discussing relationship symmetric scenarios introduced We remark experiments comparable ﬁxed arity types objects handled component services scenarios In particular services rely disjoint binary types suﬃcient guarantee cases consider synthesized orchestration enacts fully generic protocol We leave Section 8 discussion different ways ground variable types 61 Simple services We start considering simpler services thought model fully deterministic predictable function computation component W receives input D computes noninterpreted function f iD returns output D terminating state s f cid11 Given set components composition requirement consists having nth service return nested function fn fn1 f 1D component terminate successfully In terms elements ﬁnite STSs according Section 3 goal consists formula services requires state s f b describes nested computation disjunction equalities service variables ground function terms To achieve goal insofar functions refer manyvalued ranges composed procedure suitably interleave invocations components passing step current result remark case functions feature unary domains codomains The results shown Fig 13 The lines report timings required respective phases approach service composition Bel constr refers construction belieflevel search space Readcompile refers time spent reading internalizing representation space Synthesis refers search emission orchestration service We able combine 20 services reasonable time We observe belieflevel construction signiﬁcant relative cost expected partitioned representation helps time spent phase grows linearly number component services Once belieflevel represented internalized constructing internal representation implies computing parallel product module marginal cost grows polynomially number components For large sets components relevant cost search phase grow quasi exponentially notable oscillations We remark vast majority cases exponentially large sets states represented polynomially large BDD structures manipulated polynomial time Since adopt breadthﬁrst backward search style given domain exam composing N services require computing number layers proportional N number nodes layer thought high level approximation growing polynomially backward iteration All result overall search time polynomial N However breadthﬁrst search memorydemanding N high garbage collection mechanism BDD package enters play rearrange data structures remove unused ones This inﬂuences performance search high values N particular N 15 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 349 Fig 14 Combining N branching services We step smaller possible Web services encode possibly failing procedure Web service accept request compute function fail In case service wait acknack signal depending ﬁnally fails terminates successfully Thus services feature branching points ﬁrst procedure encodes form internal nondeterminism second represents external nondeter minism necessary order capable drive service fail succeed The requirement combining number services consists asking set services compute nested function fn fn1 f 1D datum D component terminate successfully In suborder require started component terminate failure We remark allowing externally commanded refusal necessary services control lable able compose according requirement That goal similar considered previous case adds alternative formula stating services state initial associated failure The composed procedure implement following behavior com bines transferring data right order services detecting handling failure situations appropriately driving suspended service fail invoke service W computing f passing D service answers failure terminate receive Dn W invoke service W in1 computing f in1 passing Dn W in1 answers failure send nack W terminate receive D1 W i1 invoke service W i0 computing f i0 passing D1 W i0 answers failure send nack service W i1 W terminate send ack service W i0 W terminate The results test reported Fig 14 We observe possible achieve reasonable time composition high number ser vices approximately 20 In case harder phase composition consists construction belieflevel Σcid16 Again thanks modular modeling allowed SMV language weight constructing emitting Σcid16 grows linearly number component services interpretation build internal representa tion Σcid16 polynomial Both costs order magnitude higher case deterministic components The complexity searching controller grows according polynomial curve unlikely pre dictable services Indeed cost composition marginally higher predictable services This result expected cost search basically depends number states represented number N layers generated backward search N amounts length longer interaction needed compose services But test given set n components N regardless components predictable number visited states differ signiﬁcantly These ﬁrst tests simple services hint fact approach particularly suited deal nonde terministic services representation general capture nondeterminism performance composition affected marginally need handling different contingencies In fact speciﬁc case fully predictable atomic services possible adopt simpler formalisms STRIPS 38 focused search techniques forms classical heuristic planning 44 obtain better scalability We remark 350 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 Fig 15 A 3cell binary unbalanced component provide approach general encompasses practical situations services obey internal logic expose nondeterministic behavior 62 Complex services We consider services encode multiple interactions interaction possibly lead failure service large variety functions computed 621 Binary unbalanced procedures We start analyzing services generalize kind nondeterministic service simple test encod ing sequential pattern nondeterministic interaction Each cell pattern represents interaction analogous explained previous subsection request received refusal message given function f computed service suspends ack nack message As cell fail refuses computing f receives nack succeed Failure cell corresponds failure service success cell instead activates cell success service corresponds success cell We components binary unbalanced number branches grows linearly number cells length longer possible sequence queryresponse interactions depth service Fig 15 schematically component service 3 cells We ﬁrst consider combination number services containing 1 2 3 4 cells goal compute nested function component fail The results shown Fig 16 distinguishing time spent building search space time spent internalizing time spent searching In general observe similarly case simple nondeterministic services performance belieflevel construction degrades quasilinearly number involved services b internalization search degrade polynomially c search degrades polynomially higher polynomial factor On observe following Regarding belieflevel construction interpretation expected costs grow components complex approximately order magnitude additional cell Similarly previous tests belieflevel construction grows linearly number components belieflevel internalization grows polynomially The performance search phase composition chain depends mainly total number cells set components marginally cells glued large component services P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 351 Fig 16 Combining N binary unbalanced services depth 1 2 3 4 distributed small ones For instance observe compose 12 cells takes 10 seconds regardless use 12 components 1 cell 6 cells 4 cells For large numbers cells fewer complex services preferable fact case search constrained smaller variety inputoutput actions performed interaction step cell ordering inside component W constrains ordering inputoutputs concerning functions computed W When composing complex services memory consumption major issue mainly breadthﬁrst style adopted search algorithm Indeed instances services depth d cid2 3 composition large sets services depth d 2 terminated timeouts exceeding 4 GByte memory bound To study relationships sketched analyze combination ﬁxed set services vary average number cells component services Fig 17 reports results composition 2 5 services These graphics clearly belieflevel construction internalization search times grow exponentially number cells components Concerning belieflevel construction internalization fact size belieflevel component potentially exponential number states number cells Concerning search fact length composed service case proportional number cells Also observe sort step discontinuity curves refer belieflevel construction internalization times This comes fact time required larger component set dominates overall performance phases 622 Binary balanced procedures The pattern asymmetric exists successful path service As consequence similar happens simple services combination services fails soon involved services fails To model general situation different success paths exist combination services analyze combination services nontrivial branching factor generalize pattern balanced binary 352 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 Fig 17 Combining 2 3 4 5 branching services increasing depth Fig 18 A 2depth balanced branch component P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 353 Fig 19 Combining N binary balanced services ﬁxed depth 1 2 tree nondeterministic interaction cells In case interaction cell computes different functions sending different messages case awaiting acknack message terminate success fail A balanced tree cells success state cell coincides start cell success tree success leaf cell tree Fig 18 shows schema balanced component depth 2 f j A goal set Web services consists computing possible combinations functions D having component service succeed suborder service fail Again f i1 j f i0 j terms ﬁnite STS goal compiled disjunctive formula represents control ﬂow union possible combinations states components data ﬂow union possible combinations equalities values variables ground function terms To achieve goal composed service decide ﬂy order invoke component services answer service impossible achieve success determine possible combinations functions pursued We ﬁrst consider combining increasingly large sets balanced components ﬁxed depth The results shown Fig 19 Analogously seen composition unbalanced nondeterministic components computational cost performing belieflevel construction grows quasilinearly number component services similarly cost search grow polynomially The cost belieflevel construction largely predom inant search services combined services small smaller balanced components possible cost search signiﬁcant N 7 Similarly unbalanced components combine sets ﬁxed size balanced branching compo nents vary average depth average number cells The results presented Fig 20 Again witness exponential dependency performance belieflevel composition search depth component services The fact time belieflevel construction grows steps dominated larger component evident case size component exponential linear depth Indeed step introduced components depth 3 tests fail larger instances problems 623 Nary balanced procedures Finally remark services considered generalize structure simple ones combining sets interaction cells share fact binary choices involved input messages received different branches nondeterministically taken service We consider variation aspect generalizes structural dimension width In particular combine services implement short nondeterministic procedure admitting variety choices internal nondeterminism different external controls possible The ﬁrst service S1 receiving input datum D performs internal choice decides function f iD set n compute After computing returns results suspends acknack signal leads success failure states respectively The second service S2 receive m different input signals datum D depending signal receive computes m functions giD returns result After suspends acknack signal leads success failure states respectively These services composed gi f jD computed similarly case balanced requiring possible function combinations branching tree requires ontheﬂy decision composite service depends internal determinism S1 cid9 354 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 Fig 20 Combining sets 2 7 balanced branching services varying average depth The results shown Fig 21 highlight belieflevel construction crucial bottleneck kind composition growing exponentially branching factor dominating search 63 The PSscenario We tested architecture considering PS scenario introduced Example 1 considering wsbpel speciﬁ cations composition requirements discussed paper We remark PS scenario symmetric perceived direct instantiation scenarios tested far At time parts User Shipper Producer components exhibit patterns similar featured symmetric scenarios Fig 22 shows schematically PS scenario highlighting connection patterns binary balanced P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 355 Fig 21 Combining branching services increasing branching factor Fig 22 Schematic comparison PS components binary balanced service scenario As Producer Shipper look like slightly complex fully symmetric version binary balanced service User fairly different reuses twice queryresponse pattern appearing Our platform capable perform composition PS scenario reasonable time takes 08 seconds read models 84 seconds perform belieflevel construction 10 seconds synthesize PS controller The resulting executable wsbpel code appears reasonable quality size experiment asked experienced wsbpel programmer handcode PS controller scenario resulting code follows lines reducing number internal variables intelligently reusing different purposes different stages service 64 Comparative analysis results Given variety scenarios adopted tests ﬁnd convenient provide synthetic analysis results considering impact features domains performance composition task composed phases belieflevel construction internalization search This allow draw conclusions applicability approach different settings composition problem In particular Construction belieflevel STS BelΣ1 cid16 cid16 Σn scales nicely linear way number n com ponents play This essentially ability handle belieflevel construction BelΣi dependently representing product terms modules obtained representation Vice versa belieflevel construction times grow quasiexponentially size components represented number states Fig 17 This explained potentially exponential size belieflevel counterpart STS 356 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 The presence nondeterminism components minor impact need belieflevel construction consider larger number possible transitions Figs 13 14 Concerning internalization phase converts modularized representation BelΣ1 cid16 cid16 Σn internal format unique STS performance polynomial number n components shown Fig 13 Again size modules stronger impact performance degrades quasiexponentially Fig 17 In phase adoption symbolic representation techniques essentially annihilates impact having nondeterminism services composed The performance synthesis appears degrade subexponentially size components domains considered vast majority cases degrades polynomially number components This comes essentially breadthﬁrst search style adopted search conjunction fact operates symbolic representation frontiers states BelΣ1 cid16 cid16 Σn regressed Again nondeterminism components signiﬁcant impact performance The analysis results indicates approach lends particularly treat large numbers Web services description taken isolation particularly complex embed internal choices presented terms nondeterminism Dealing composition large Web services practically diﬃcult complexity obtaining belieflevel representation More general birds eye view results scenarios observe approach proves capable effectively tackle signiﬁcantly complex composition problems adhoc solution far trivial timedemanding error prone For instance automated composition dozen nondeterministic branching wsbpel services obtained couple minutes manual design implementation orchestration hours This shown performance platform PS scenario improves large time programmer spend hardcode controller Indeed performance ranks consistently complex binary scenarios considering complexity involved components A good portion effectiveness approach acknowledged symbolic BDDbased representation algorithms This conﬁrms similarly happens vast majority modelchecking diagnosis scenarios symbolic representations practically effective practical cases spite exponentially large worsecase resource requirements 7 Related work This paper presents framework composing asynchronous wsbpel processes clearly framed context longstanding research line service composition planning techniques developed IRST institute Such research line started 2004 7195 continued 7879746162606364 evolving date 7221 Indeed paper summarizes signiﬁcantly extends large portion wealth work cited acting useful pointer possible extensions studies approach Among works cited paper closely related 719578796264 signiﬁcantly differs technical choices degree maturity allows fully automated endtoend provision services expressed defacto standard language wsbpel As ﬁrst work provides clear fullﬂedged selfcontained statement underlying theory proofs correctness approach More 719578 regarded preliminary contributions provided basis approach In 71 95 general framework presented highlevel service descriptions considered ii construction belieflevel modular This fact modeling services planning domain based explicit representation message buffers leads poor practical performances In 78 formal account representation service composition terms planning presented technical discussion reported concerns adopted algorithms terms theoretical practical scalability terms correctness approach We remark 719578 stand composition requirements based EaGLelanguage 36 high expressiveness lead extremely complex proofs properties The works extended directions considered perceived relevant pointers pursue fullﬂedged analysis formalization The structuring requirements control data ﬂow sections core subject 6260 propose enact advanced methodology requirement speciﬁcation based idea data nets link means modular forms constraints inputs outputs services participating orchestration Again reported applicative papers 7264 underlying requirements rely EaGLespeciﬁcation language algorithmic account analysis presented In 74 service composition dealt modeling services requirements abstract knowledge level This allows describing relationships exchanged data conceptual level abstracts away need mention concrete values While makes approach attractive encoding problem way results nonmodular planning domain strong negative impact scalability performance In common works cited work relies expressiveness performance provided planning model checking approach 16773215 adopting technological baseline taking inspiration terms general framework approaches search In particular composition services requires coordinating non P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 357 deterministic partially observable entities conceptually close approaches 16 However speciﬁc nature service composition asynchronicity services fact orchestrate multiple independent entities control monolithic domain led design develop radically different algorith mic data representation solutions Speciﬁcally solution presented takes starting point strong planning approach 32 turn inspired Schoppers notion universal plan 82 makes use radically dif ferent search representation tools On approach applies signiﬁcant extensions required confront service composition ﬁrst nontrivial pre postprocessing phases needed recast synthesis asynchronous controller form belieflevel search second different algorithms order speciﬁc semantics message passing deadlock services Our approach related signiﬁcantly different large variety planningbased approaches proposed tackle problem service composition levels In particular automated discovery composition semantic Web services based OWLS WSML presented 905943 A similar line followed 10083 considering DAMLS 6 annotated services instead DAMLS services considered 8 recasts composition constraint satisfaction problem 65 adopts interpreter extended version ConGolog language adapt compose services 67 provides framework simulating verifying composing Web services translating Petri Nets Other works proposed support forms compositions starting wsdllike speciﬁcations Web services 7384 based description Universal ServiceSemantics Description Language USDL developed semantic Web community 50 Similar issues dealt 4 composition data access tackled obtaining workﬂow making use adapter services All works based OWLS WSML DAMLS wsdl USDL service speciﬁcations account behavioral descriptions Web services like approach wsbpel Therefore view automated composition sequential composition atomic services This true work 229 spite fact result composition expressed wsbpel That techniques adopt deal problem addressed paper domain exam consists nondeterministic partially observable asynchronous component services Recent extension works ConGolog 87 consider ﬁrstorder logic speciﬁcations services capable deal complex composition requirements analyze connections programming languages services wsbpel Within planning ﬁeld need address requirements reachability known established approaches tackle problem different means Temporal logics LTL CTL 37 planning goals constrain search 531977 The Hierarchical Task Network approach followed 87 envisages procedural format express goals In 89 procedural declarative goals fused allow better ﬂexibility expressing goals While great potential works consider problem composing Web services While general connection planning service composition clear works start signiﬁcantly different assumptions adoption approaches context service composition far trivial Planning techniques applied related orthogonal problems ﬁeld Web services The interactive composition information gathering services tackled 94 data integration techniques Works ﬁeld Data Computational Grids moving problem composing complex workﬂows means planning scheduling techniques 17 In ﬁeld eservices synthesis techniques proposed solve problems related tackle In particular work 4642 presents formal framework composing eservices behavioral descriptions given terms automata This work focuses theoretical foundations providing practical implementations Moreover considered composition problem fundamentally different seen problem coordinating executions given set available services No concrete executable processes generated approach Concerning works 91140418612 instead remarked focus fundamental aspects application current service oriented technologies Moreover considering problems conceptually related signiﬁcantly different underlying assumptions technical choices In 9114112 services described fully observable entities given different communication semantics 10 authors consider services semantic nature inspired OWLS speciﬁcation 4086 target composition different consists set decentralized orchestration entities Some different work tackle composition stateful services semiautomated way case 22 presents approach stepping conversion terms YAWL 98 workﬂows Again details possi ble implementation approach provided constrained scenario interface adaptation pairs processes 23 Considering broader perspective work conceptually close ﬁeld automatabased synthesis controllers given domain referred environment driven controller aim automatically synthesize controller 76975466575 Indeed composed service seen module controls environment consists published services Most works area focus theoretical foundations analysis high theoretical empirical complexity task unconstrained setting provide practical implementations useful automated compositions Web 358 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 services Some efforts sense attempted constraining selected forms applications Amongst work 48 start assumptions exploit techniques radically different remarkably cases 9620 technological baseline similar introduce approaches formulas represented manipulated means Binary Decision Diagrams 8 Conclusions Automated composition Web services constitutes exciting novel applicative area planning technologies While serviceoriented paradigm strongly pushed worldlevel industrial players IBM Oracle complex development environments languages provided continuously reﬁned success approach strongly depend development powerful automated support functionalities lacked far Planning identiﬁed ﬁrstclass candidate possible provide functionalities particular setting Web services poses signiﬁcant challenges require overcoming limitations current planning approaches terms expressiveness effectiveness In work provided clear formal modeling problem composing stateful Web services according complex behavioral requirements As result provided framework capable dealing signiﬁcantly diﬃcult com position services expressed standard languages wsbpel The complexity task dealt appropriate precompilation asynchronous behaviors carefully designed search algorithms rely symbol ically represented domains We provide extensive testing approach witnessing ability tackle signiﬁcantly complex problems identifying impact structural aspects composition terms performance outcomes composition The approach presented crucial step forward introduce automated support service composition standard development phases services The approach stands clearly deﬁned assumptions introduced Section 2 concerning kind services considered composition kind composition requirements applied In turn reﬂects kind orchestrations achieved As paper clearly lends extensions improve expressiveness ﬂexibility effectiveness ultimately usability approach A ﬁrst important hypothesis underlying work essentially works composition stateful services developed far services interpreted ﬁnite automata spite realized means language wsbpel allows inﬁnitelyranged variables This implies need carry preprocessing phase performs abstraction component services identifying ﬁnite ranges coordinating resulting ﬁnitelyranged wsbpel components requires fully general orchestrator behavior independent considered ranges Indeed scenarios encountered test consider variable belonging binary type ranges different types disjoint We remark kind requirements lead orchestrations executions ﬁnite easy devise ﬁnitization components ﬁnitestate orchestration structure independent type ranges Of course identifying effective ﬁnitizations ﬁnding smallest type ranges guarantee general coordination components trivial topic investigation This problem grounding tackled conceptually different way abstraction techniques encode services ﬁnite state machines directly map ws bpel operations ﬁnitely ranged wsbpel variables deﬁne behaviors services higher level In particular knowledgelevel encodings style 70 represent symbolically way variables services relate stemming away need mentioning concrete variable values Some preliminary results knowledgelevel encoding different 70 presented 74 A investigation respect combination knowledgelevel representation groundlevel representation adopted agenda The second assumption took concerns nature composition requirements We focused reachability require ments specify admissible ﬁnal conﬁgurations component services A ﬁrst implication stick component services execution guaranteed terminate ﬁnite number steps ruled services embed loop guaranteed exit A possible obvious relaxation sense consists having expressive requirements inﬁnite behaviors allowed For instance consider problems way interact components implies iterative trialanderror strategy In case keeping reachability requirements possible relax deﬁnition satisﬁability consider looping situations chance terminating exists identifying socalled strong cyclic solutions 32 This considered 78 746260 services cyclic behaviors admitted insofar admit ﬁnal conﬁgurations targets requirements Under setting possible rely speciﬁc strong cyclic search algorithms produce cyclic trialanderror strategies indeﬁnitely achieving target conﬁgurations A extension consider composition requirements different nature describing constraints evolution time compo nents services andor considering preferences For instance 7178 service composition tackled EaGLe 7736 language inspired LTL temporal logic 37 differently LTL allows expressing user preferences subgoals handling notion goal failure layering subgoals according different userdeﬁned strengths Such extensions especially interesting services partially controllable orchestrating P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 359 require dealing variety preferable situations Indeed preferences tentatively addressed 78746260 EaGLerequirement language 36 adopt embeds We took assumption language express services restricting subset defacto wsbpel standard appears suﬃcient support abstract service speciﬁcations needed input composition Never theless plan cover broader portion language This investigation appear particularly compelling theoretical perspective require substantial effort avoid huge blowups models certain speciﬁc wsbpel features exploited While extensions extremely relevant clearly pointed assumptions taken work work directions conducted remark form composition consider expressive cover large variety relevant service composition scenarios Focusing setting allows presentation reasonably compact selfcontained time comprehensively surveying formal empirical aspects suﬃcient level Of course clear direction work stands investigating techniques improving scalability In sense devising new requirement languages constrain service behaviors follow easytospecify pattern promising option Finally intend tackle issue associating semantics activities stateful Web services order able respond composition requirements speciﬁed according semantics In particular plan extend work automated composition semantic Web services described owls 30 wsmo 101 lines work 95 References 1 T Andrews F Curbera H Dolakia J Goland J Klein F Leymann K Liu D Roller D Smith S Thatte I Trickovic S Weeravarana Business Process Execution Language Web Services version 11 2003 2 V Agarwal G Chaﬂe K Dasgupta N Karnik A Kumar S Mittal Biplav B Srivastava Synthy A end end composition Web services Journal Web Semantics Science Services Agents World Wide Web 3 4 2005 311339 3 ActiveBPEL The Open Source BPEL Engine httpwwwactivebpelorg 4 JL Ambite D Kapoor Automatically composing data workﬂows relational descriptions shim services Proc ISWC07 2007 5 E Asarin O Maler A Pnueli J Sifakis Controller synthesis timed automata IFAC Symposium System Structure Control 1998 pp 469 474 6 A Ankolekar DAMLS Web service description semantic Web Proc ISWC02 2002 7 A Arnold Finite Transition Systems Semantics Communicating Systems Prentice Hall International 1994 8 R Aggarwal K Verma JA Miller W Milnor Constraint driven Web service composition METEORS Proc SCC04 IEEE Computer Society 2004 pp 2330 9 D Berardi D Calvanese G De Giacomo M Lenzerini M Mecella Automatic composition eservices export behaviour Proc ICSOC03 2003 10 D Berardi D Calvanese G De Giacomo R Hull M Mecella Automatic composition transitionbased semantic Web services messaging Proc VLDB05 2005 pp 613624 11 D Berardi D Calvanese G De Giacomo M Mecella Composition services nondeterministic observable behaviour Proc ICSOC05 2005 12 D Berardi F Cheikh G De Giacomo F Patrizi Automatic service composition simulation Int J Found Comput Sci 19 2 2008 429451 13 JR Burch EM Clarke KL McMillan DL Dill LJ Hwang Symbolic model checking 1020 states Information Computation 98 2 June 1992 142170 14 P Bertoli A Cimatti M Pistore M Roveri P Traverso MBP model based planner Proc IJCAI01 Workshop Planning Uncertainty Incomplete Information 2001 15 P Bertoli A Cimatti M Pistore P Traverso A framework planning extended goals partial observability Proc ICAPS03 2003 16 P Bertoli A Cimatti M Roveri P Traverso Planning nondeterministic domains partial observability symbolic model checking Proc IJCAI01 2001 17 J Blythe E Deelman Y Gil Planning workﬂow construction maintenance grid Proc ICAPS03 Workshop Planning Web Services 2003 18 B Bonet H Geffner Planning incomplete information heuristic search belief space Proc AIPS00 2000 pp 5261 19 F Bacchus F Kabanza Using temporal logic express search control knowledge planning Artiﬁcial Intelligence 116 12 2000 123191 20 B Bonakdarpour S Kulkarni Exploiting symbolic techniques automated synthesis distributed programs large state space Distributed Computing Systems 2007 21 P Bertoli R Kazhamiakin M Paolucci M Pistore H Raik M Wagner Control ﬂow requirements automated service composition Proc ICWS09 2009 22 A Brogi R Popescu Towards semiautomated workﬂowbased aggregation Web services Proc ICSOC05 2005 23 A Brogi R Popescu Automated generation BPEL adapters Proc ICSOC06 2006 pp 2739 24 F Bacchus R Petrick Modeling agents incomplete knowledge planning execution Proc KR08 2008 pp 432443 25 K Brace R Rudell R Bryant Eﬃcient implementation BDD package Proceedings 27th ACMIEEE Conference Design Automation 1990 pp 4045 26 RE Bryant Graphbased algorithms Boolean function manipulation IEEE Transactions Computers C35 8 1986 677691 27 A Cimatti EM Clarke F Giunchiglia M Roveri NuSMV new symbolic model checker International Journal Software Tools Technology Transfer STTT 2 4 2000 28 E Christensen F Curbera G Meredith S Weerawarana Web Service Deﬁnition Language WSDL 11 httpwwww3orgTRwsdl 2001 29 G Chaﬂe G Das K Dasgupta A Kumar S Mittal S Mukherjea B Srivastava An integrated development environment Web service composition Proc ICWS07 2007 30 OWLS Coalition OWLS Semantic markup Web services Technical White paper OWLS version 10 2003 31 OASIS Web Services Business Process Execution Language WSBPEL Technical Committee Web Services Business Process Execution Language Version 20 OASIS Standard 2007 32 A Cimatti M Pistore M Roveri P Traverso Weak strong strong cyclic planning symbolic model checking Artiﬁcial Intelligence 147 12 2003 3584 360 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 33 MD Denz Charting evolving eHealth ecosystem Proc eHealth08 2008 34 D Mc Dermott Estimatedregression planning interactions Web services Proc AIPS02 2002 pp 204211 35 A Dogac GB Laleci S Kirbas Y Kabak S Sinir A Yildiz Y Gurcan Artemis deploying semantically enriched Web services healthcare domain Information Systems 31 45 2006 321339 36 U Dal Lago M Pistore P Traverso Planning language extended goals Proc AAAI02 2002 37 EA Emerson Temporal modal logic J van Leeuwen Ed Handbook Theoretical Computer Science Volume B Formal Models Seman tics Elsevier 1990 38 RE Fikes NJ Nilsson STRIPS new approach theorem proving problem solving Journal Artiﬁcial Intelligence 2 1971 189208 39 H Foster S Uchitel J Magee J Kramer Modelbased veriﬁcation Web service compositions Proc ASE03 2003 40 G De Giacomo M Leoni M Mecella F Patrizi Automatic workﬂows composition mobile services Proc ICWS07 2007 pp 823830 41 G De Giacomo S Sardina Automatic synthesis new behaviors library available behaviors Proc IJCAI07 2007 pp 18661871 42 R Hull M Benedikt V Christophides J Su Eservices look curtain Proc PODS03 2003 43 J Hoffmann P Bertoli M Pistore Web service composition planning revisited In background theories initial state uncertainty Proc AAAI07 2007 44 J Hoffmann B Nebel The FF planning fast plan generation heuristic search Journal Artiﬁcial Intelligence Research 14 2001 253302 45 G Holzmann The Spin Model Checker Primer Reference Manual AddisonWesley November 2003 preview available httpsafari ibmpressbookscom0321228626app01close0 46 R Hull Web services composition story models automata logics Proc ICWS05 2005 47 B Jobstmann R Bloem Optimizations LTL synthesis Proc Formal Methods Computer Aided Design FMCAD06 2006 pp 117124 48 B Jobstmann S Galler M Weiglhofer R Bloem Anzu tool property synthesis Proc CAV07 2007 pp 258262 49 R Kazhamiakin Formal analysis Web service compositions PhD thesis International Doctorate School ICT DIT University Trento Trento Italy March 2007 50 S Kona A Bansal G Gupta Automatic composition semantic Web services Proc ICWS07 2007 51 T Zeng K Kim CJ Bonk Surveying future workplace elearning rise blending interactivity authentic learning eLearn Maga zine 2005 6 2005 available httpwwwelearnmagorg 52 WB Korte General practitioner use ICT eHealth Europe 20022007 Results panEuropean survey Proc eHealth08 2008 53 F Kabanza S Thiebaux Search control planning temporally extended goals Proc 15th International Conference Automated Planning Scheduling ICAPS05 2005 pp 130139 54 O Kupferman M Vardi Synthesis incomplete information Proc ICTL97 1997 55 SM Lee T Hwang J Kim An analysis diversity electronic commerce research International Journal Electronic Commerce 12 1 2007 56 SS Lam AU Shankar A relational notation state transition systems IEEE Transactions Software Engineering 16 7 1990 755775 57 A Marconi Automated processlevel composition Web services From requirements speciﬁcation process run PhD thesis International Doctorate School ICT DIT University Trento Trento Italy April 2008 58 KL McMillan Symbolic Model Checking Kluwer Academic Publ 1993 59 S McIlraith R Fadel Planning complex actions Proc NMR02 2002 60 A Marconi M Pistore P Poccianti P Traverso Automated Web service composition work AmazonMPS case study Proc ICWS07 2007 61 A Marconi M Pistore P Traverso Implicit vs explicit dataﬂow requirements Web service composition goals Proc ICSOC06 2006 62 A Marconi M Pistore P Traverso Specifying dataﬂow requirements automated composition Web services Proc SEFM06 2006 63 A Marconi M Pistore P Traverso Processlevel composition Web services semiautomated iterative approach Annals Mathematics Comput ing Teleinformatics 1 5 2007 64 A Marconi M Pistore P Traverso Automated composition Web services ASTRO approach IEEE Data Eng Bull 31 2008 65 S McIlraith S Son Adapting Golog composition semantic Web services Proc KR02 2002 66 RvD Meyden M Vardi Synthesis knowledgebased speciﬁcations Proc CONCUR98 1998 pp 3449 67 S Narayanan S McIlraith Simulation Veriﬁcation automated composition Web services Proc WWW02 2002 68 G Nemirovskij M Wolters E Heuel Distributed study semantic Web services approach modelling common educational space Proc World Conference Educational Multimedia Hypermedia Telecommunications 2008 2008 69 Oracle Oracle BPEL Process Manager httpwwworaclecomproductsiasbpel 70 R Petrick F Bacchus A knowledgebased approach planning incomplete information sensing Proc AIPS02 2002 71 M Pistore P Bertoli F Barbon D Shaparau P Traverso Planning monitoring Web service composition Proc AIMSA04 2004 72 M Pistore P Braghieri P Bertoli A Biscaglia A Marconi S Pintarelli M Trainotti At Your Service ServiceOriented Computing EU Perspec tive MIT Press 2009 Chapter 8 73 S Ponnekanti A Fox SWORD A developer toolkit Web service composition Proc WWW02 2002 74 M Pistore A Marconi P Bertoli P Traverso Automated composition Web services planning knowledge level Proc IJCAI05 2005 75 N Piterman A Pnueli Y Saar Synthesis reactive designs Proc VMCAI 2006 pp 364380 76 A Pnueli R Rosner On synthesis asynchronous reactive module Proc ICALP89 1989 77 M Pistore P Traverso Planning model checking extended goals Proc IJCAI01 2001 78 M Pistore P Traverso P Bertoli Automated composition Web services planning asynchronous domains Proc ICAPS05 2005 79 M Pistore P Traverso P Bertoli A Marconi Automated synthesis composite BPEL4WS Web services Proc ICWS05 2005 80 R Ruffolo The ultimate ecommerce software shopping list Computer World Line available httpwwwcomputerworldcomau 2008 81 T Son C Baral Formalizing sensing actions transition function based approach Artif Intell 125 12 2001 1991 82 M Schopper Universal plans robots unpredictable environments Proc 10th International Joint Conference Artiﬁcial Intelligence IJCAI87 1987 pp 10391046 83 M Sheshagiri M desJardins T Finin A planner composing services described DAMLS Proc AAMAS03 2003 84 D Skogan R Gronmo I Solheim Web service composition UML Proc EDOC04 2004 85 F Somenzi CUDD CU decision diagram package release 231 available httpvlsicoloradoedufabioCUDD 2001 86 S Sardina F Patrizi G De Giacomo Automatic synthesis global behavior multiple distributed behaviors Proc AAAI07 2007 pp 10631069 87 S Sohrabi N Prokoshyna S McIlraith Web service composition generic procedures customizing user preferences Proc ISWC06 2006 pp 597611 88 A Schumann Y Pencolè S Thièbaux Diagnosis discrete event systems binary decision diagrams Proc 15th International Workshop Principles Diagnosis DX04 2004 89 D Shaparau M Pistore P Traverso Fusing procedural declarative planning goals nondeterministic domains Proc AAAI08 2008 pp 983990 P Bertoli et al Artiﬁcial Intelligence 174 2010 316361 361 90 E Sirin B Parsia D Wu J Hendler D Nau HTN planning Web service composition SHOP2 Journal Web Semantics 1 4 2004 377396 91 J Sanghavi R Ranjan R Brayton A SangiovanniVincentelli High performance BDD package exploiting memory hierarchy Proceedings 33rd annual conference Design automation 1996 pp 635640 92 E Sakkopoulos E Sourla A Tsakalidis MD Lytras Integrated eHealth advisory Web services provision broadband networks Inter national Journal Social Humanistic Computing 1 1 2008 3652 93 L Tuan C Baral X Zhang T Son Regression respect sensing actions partial states Proc AAAI04 2004 pp 556561 94 S Thakkar C Knoblock JL Ambite A view integration approach dynamic composition Web services Proc ICAPS03 Workshop Planning Web Services 2003 95 P Traverso M Pistore Automated composition semantic Web services executable processes Proc ISWC04 2004 96 E Tronci Automatic synthesis controllers formal speciﬁcations Proc Second IEEE International Conference Formal Engineering Methods ICFEM98 1998 97 MY Vardi An automatatheoretic approach fair realizability synthesis Proc CAV95 1995 98 WMP van der Aalst AHM ter Hofstede YAWL workﬂow language Information Systems 30 4 2005 245275 99 G Vossen P Westerkamp Elearning Web service Proc IDEAS03 2003 100 D Wu B Parsia E Sirin J Hendler D Nau Automating DAMLS Web services composition SHOP2 Proc ISWC03 2003 101 WSMO The Web service modeling framework SDK WSMO working group httpwwwwsmoorg 2004