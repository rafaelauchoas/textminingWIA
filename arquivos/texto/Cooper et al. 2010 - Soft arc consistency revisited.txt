Artiﬁcial Intelligence 174 2010 449478 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Soft arc consistency revisited MC Cooper S Givry b M Sanchez b T Schiex b IRIT University Toulouse III 31062 Toulouse France b UBIA UR875 INRA F31320 Castanet Tolosan France c Center Machine Perception Czech Technical University 12135 Praha 2 Czech Republic r t c l e n f o b s t r c t M Zytnicki b T Werner c Article history Received 31 January 2009 Received revised form 25 January 2010 Accepted 28 January 2010 Available online 2 February 2010 Keywords Valued constraint satisfaction problem Weighted constraint satisfaction problem Soft constraints Constraint optimization Local consistency Soft arc consistency Graphical model Submodularity local cost functions deﬁned discrete variables The Valued Constraint Satisfaction Problem VCSP generic optimization problem It deﬁned network applications Artiﬁcial Intelligence Operations Research Bioinformatics tackle optimization problems graphical models including discrete Markov Random Fields Bayesian Networks The incremental lower bounds produced local consistency ﬁltering pruning inside Branch Bound search In paper extend notion arc consistency allowing fractional weights allowing arc consistency operations applied simultaneously Over rationals allowing simultaneous operations optimal arc consistency closure theoretically determined polynomial time reduction linear programming This deﬁnes Optimal Soft Arc Consistency OSAC To reach practical algorithm existence sequence arc consistency operations increases lower bound detected establishing arc consistency classical Constraint Satisfaction Problem CSP derived original cost function network This leads new soft arc consistency method called Virtual Arc Consistency produces improved lower bounds compared previous techniques solve submodular cost functions These algorithms implemented evaluated variety problems including diﬃcult frequency assignment problems solved optimality ﬁrst time Our implementation available open source toulbar2 platform 2010 Elsevier BV All rights reserved 1 Introduction Graphical model processing central problem AI The optimization combined cost local cost functions central valued CSP framework 52 captures problems weighted MaxSAT Weighted CSP Maximum Prob ability Explanation probabilistic networks It applications areas resource allocation 9 combinatorial auctions optimal planning bioinformatics 50 Valued constraints code classical crisp constraints cost functions Since valued constraint satisfaction NPhard heuristics required speed bruteforce exhaustive search By shifting weights cost functions soft arc consistency allows transform problem equivalent problem This problem reformulation provide strong incrementally maintainable lower bounds crucial Branch Bound search 44 Corresponding author Email addresses cooperiritfr MC Cooper simondegivrytoulouseinrafr S Givry martisancheztoulouseinrafr M Sanchez thomasschiextoulouseinrafr T Schiex matthiaszytnickitoulouseinrafr M Zytnicki wernercmpfelkcvutcz T Werner 00043702 matter 2010 Elsevier BV All rights reserved doi101016jartint201002001 450 MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 Similarly classical arc consistency CSPs constraint satisfaction problems previouslydeﬁned soft arc consistency properties enforced chaotic application local soft arc consistency operations shifting integer costs different scopes ﬁxpoint reached 193 Unlike arc consistency closure CSPs ﬁxpoint unique lead different lower bounds In paper instead consider local consistencies enforced carefully planned sequences soft arc consistency operations necessarily increase lower bound Since costs need divided parts order shifted directions resulting transformed problem contain fractional costs By allowing introduction rational multiples costs avoid intractability ﬁnding optimal soft arc consistency closure involving integer costs 19 produce strictly stronger notion soft arc consistency The new techniques presented paper aim ﬁnding reformulation original problem P op timized constant cost term c This constant cost provides explicit lower bound provided costs nonnegative Optimal soft arc consistency OSAC identiﬁes sequence soft arc consistency operations shifting costs cost functions arity greater 1 yields optimal reformulation Intermediate reformula tions contain negative costs provided costs ﬁnal version nonnegative Such operations polynomial time solving linear program 54 We considerably extend result showing polynomialtime algorithm exists presence crisp constraints coded inﬁnite costs upper bound coded additionwithceiling aggregation operator Alternatively problem Virtual Arc Consistent VAC possible ﬁnd sequence soft arc consistency operations improve lower bound intermediate problems nonnegative costs Our iterative VAC algorithm based applying arc consistency classical CSP solution P solution cost c We OSAC strictly stronger VAC However ﬁnding lower bound VAC algorithm faster establishing OSAC potentially practical applications The idea classical local consistency build lower bounds MaxCSP MaxSAT new On MaxCSP problems 48 independent arc inconsistent subproblems build lower bound For MaxSAT 45 minimal Unit Propagation inconsistent subproblems build lower bound These approaches use problem transformations rely fact inconsistent subproblems identiﬁed independent costs simply summed They lack incrementality soft consistency operations In MaxSAT 31 Unit Propagation inconsistency build sequences integer problem transformations possibly strictly arc level generating higherarity weighted clauses cost functions OSAC VAC remain arc level allowing rational costs It pointed VAC algorithm similar Augmenting DAG algorithm independently proposed 39 preprocessing 2dimensional grammars recently reviewed 56 Our approach general treat cost functions arbitrary arity inﬁnite costs ﬁnite upper bound Note special case realvalued binary VCSPs Boolean domains extensively studied quadratic pseudoBoolean function optimization 7 In case Boolean domains known ﬁnding equivalent quadratic posiform representation equivalent binary VCSP optimal value c formu lated linear programming problem 30 solved ﬁnding maximum ﬂow appropriately deﬁned network 7 It worth noting special case Boolean binary VCSPs determining exists zerocost solution instance 2SAT completely solved polynomial time The new notions presented paper optimal soft arc consistency virtual arc consistency applied optimization problems ﬁnite domains arbitrary size involving local cost functions arbitrary arity Crisp constraints coded inﬁnite costs upper bound coded additionwithceiling aggregation operator We resulting arc consistency properties attractive theoretical properties capable solving different polynomial classes weighted CSP detecting priori We strengths limitations random real problem instances Some problems considered solved ﬁrst time optimality local consistencies We begin Section 2 deﬁnition valued constraint satisfaction problem Section 3 introduces notion equivalencepreserving transformation gives basic equivalencepreserving transformations required establish forms soft arc consistency considered paper In Section 4 review previously deﬁned notions soft arc consistency These deﬁnitions necessary deﬁne soft arc consistency EDAC 43 compare theoretically experimentally new notions soft arc consistency deﬁned paper Section 5 deﬁnes OSAC Optimal Soft Arc Consistency Section 6 reports results experimental trials demonstrate potential utility OSAC preprocessing The rest paper devoted Virtual Arc Consistency VAC provides practical alternative OSAC applied search Section 7 introduces VAC shows formally connection deﬁnition existence sequence soft arc consistency operations increase lower bound Section 8 introduces VAC algorithm examples Section 9 gives necessary subroutines Section 10 shows certain tractable classes including permuted submodular functions directly solved VAC As detailed example Appendix A shows VAC algorithm enter inﬁnite loop This justiﬁes use heuristic version called VACε Section 11 reports results experimental trials VACε Finally alternative algorithm converging VAC techniques ﬁnding better bounds discussed Section 12 MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 451 2 Valued constraint satisfaction The Constraint Satisfaction Problem CSP consists ﬁnding assignment n ﬁnitedomain variables set constraints satisﬁed Crisp yesno constraints CSP replaced cost functions Valued Constraint Satisfaction Problem VCSP 52 A cost function returns valuation cost weight penalty combination values variables scope function Crisp constraints expressed example assigning inﬁnite cost inconsistent tuples In general deﬁnition VCSP costs lie valuation structure positive totallyordered monoid cid3E cid2cid5 E set valuations totally ordered cid2 combined aggregation operator In paper consider integer rational costs A Valued Constraint Satisfaction Problem seen set valued constraints simply cost functions placed particular variables Formally Deﬁnition 21 See Schiex 51 A Valued Constraint Satisfaction Problem VCSP tuple cid3 X D C Σcid5 X set n variables X 1 n variable X domain possible values di D C set cost functions Σ cid3E cid2cid5 valuation structure Each cost function cid3S c S cid5 C deﬁned tuple variables S X scope function c S Cartesian product domains dii S E Purely notational convenience suppose cost functions scope This allows identify C set scopes S cost functions c S VCSP We write ci shorthand ci ci j shorthand ci j Without loss generality assume C contains cost function ci variable X zeroarity constant cost function c Notation For S X denote Cartesian product domains dii S set possible labellings variables S cid4S Let Z Y X Y y1 yq Z z1 zp Then given assignment t t y1 t yq cid4Y t Z denotes subassignment t variables Z tz1 tzp If Z singleton z1 t Z denoted tz1 simplicity The usual query VCSP ﬁnd assignment t valuation total cost minimal Deﬁnition 22 In VCSP V cid3 X D C Σcid5 valuation assignment t cid4 X deﬁned ValV t cid2 cid3 c S cid4 tS cid5cid6 SC To solve VCSP ﬁnd assignment t cid4 X minimum valuation 21 Weighted CSP In VCSPs studied paper aggregation operator usual addition operator additionwith ceiling operator m deﬁned follows b 0 1 m m b mina b m A Weighted Constraint Satisfaction Problem WCSP 44 VCSP valuation structure Sm cid30 1 m m cid3cid5 m positive integer inﬁnity It shown WCSP framework suﬃcient model VCSPs discrete valuation structures partial inverse necessary condition soft arc consistency operations applicable 14 When m ﬁnite solutions cumulated cost reaching m considered equally absolutely bad This situation applies node branch bound search tree WCSP problem best known solution cost m The Boolean valuation structure S1 cid30 1 1 cid3cid5 allows express crisp constraints valuation 0 representing consistency 1 representing inconsistency In paper order express VCSPs CSPs common framework represent CSPs VCSPs valuation structure S1 The valuation structure S cid3N cid3cid5 N set nonnegative integers embedded valuation structure Q cid3Q cid3cid5 Q represents set nonnegative rational numbers Similarly valuation structure Sm embedded valuation structure Qm cid3Qm m cid3cid5 Qm set rational numbers α satisfying 0 cid4 α m For clarity presentation use synonym m Qm valuation represents complete inconsistency We use represent aggregation operator Q m Qm The partial inverse aggregation operator denoted cid11 deﬁned Q Qm α cid11 β α β valuations α β α cid3 β cid11 β valuations β 452 MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 In remainder paper assume stated valuation structure Σ VCSP Qm These rational valuation structures enrich set available operations costs compared solved Q integer valuation structures S Sm allowing circulation fractional weights 3 Soft arc consistency operations In section introduce basic operations allows reformulate VCSP shifting costs Deﬁnition 31 Two VCSPs V 1 cid3 X D C1 Σcid5 V 2 cid3 X D C2 Σcid5 equivalent t cid4 X ValV 1 t ValV 2 t cid7 Deﬁnition 32 The subproblem VCSP cid3 X D C Σcid5 induced F C problem VCSPF cid3 X F D F F Σcid5 X F c S F S D F di X F Deﬁnition 33 For VCSP cid3 X D C Σcid5 equivalence preserving transformation F C operation transforms subproblem VCSPF equivalent VCSP When F contains cost function c S S 1 equivalencepreserving transformation called Soft Arc Consistency SAC operation Algorithm 1 The basic equivalencepreserving transformations required establish different forms soft arc consis tency 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Precondition α cid2 minc S t t cid4S ti Procedure ProjectS α ci ci α foreach t cid4S ti c S t c S t cid11 α Precondition α cid2 ci S 1 Procedure Extendi S α foreach t cid4S ti cid8 β c c S t c S t β cid11 β α jS c j t j ci ci cid11 α Precondition α cid2 minci di Procedure UnaryProjecti α foreach di ci ci c cid11 c cid11 α c c α Algorithm 1 gives basic equivalencepreserving transformations SAC operations 19 Project projects weights cost function variables unary cost function Extend performs inverse operation sending weights unary cost function higherorder cost function Finally UnaryProject projects weights unary cost function nullary cost function c lower bound value solution For example di cia cid3 α UnaryProjecti α increases constant term c α decreasing α cia di For SAC operations given Algorithm 1 precondition given guarantees resulting costs nonnegative The addition subtraction weight β line 10 Extend allows detect certain inconsistent tuples sets c S t c S t β Similarly addition subtraction weight c line 15 UnaryProject sets cia cia c Extend UnaryProject modify cost functions argument α 0 This happens example UnaryProject valuation structure Q10 cia c 5 cia 5 5 cid11 5 cid11 0 equal 10 Q10 Of course addition real numbers costs ﬁnite Extend UnaryProject modify cost functions α 0 Indeed case ﬁnite costs Extend UnaryProject considerably simpliﬁed canceling β c respectively 4 Soft arc consistency techniques In section brieﬂy review previouslydeﬁned notions soft arc consistency particular Existential Direc tional Arc Consistency EDAC 43 EDAC strongest known polynomialtime achievable form soft arc consistency introduction notions OSAC VAC presented paper Note EDAC deﬁned special case binary 43 ternary 50 VCSPs Recall assume valuation structure VCSP Q Qm Deﬁnition 41 See Larrosa Schiex 44 A VCSP node consistent variable 1 n MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 453 1 di cia c 2 di cia 0 Node consistency established repeated calls UnaryProject convergence We assume simplicity presentation values cia automatically deleted di Node consistency determines maximum lower bound deduced unary nullary constraints transforms VCSP accordingly lower bound stored explicitly nullary constraint c A VCSP generalized arc consistent inﬁnite weights propagated weights projected unary constraints Formally Deﬁnition 42 See Cooper Schiex 19 A VCSP cid3 X D C Σcid5 generalized arc consistent S C S 1 1 t cid4S c S t c iS citi c S t 2 S di t cid4S ti c S t 0 cid8 If VCSP binary generalized arc consistency known soft arc consistency Generalized arc consistency established repeated calls Project extensions zero weights calls form Extend___0 propagate inconsistencies convergence Consider VCSP node consistent generalized arc consistent Extending nonzero weights reestablishing generalized arc consistency node consistency lead increase c 51 One way guarantee convergence process restrict direction nonzero weights extended placing total ordering variables Deﬁnition 43 See Cooper 12 A binary VCSP directional arc consistent DAC respect order variables ci j j di b d j ci ja b c jb 0 If b d j ci ja b c jb nonzero possible increase cia transferring nonzero costs c jb ci j calls Extend projecting costs ci j cia Hence establishing Directional Arc Consistency projects weights unary constraints shifts weights variables occur earlier order This tends concentrate weights variables applying node consistency tends lead increase lower bound c Consider binary VCSP e binary cost functions maximum domain size d Then directional arc consistency established Oed2 time 1944 As classical CSP DAC solves treestructured VCSP variable order built topological ordering tree Deﬁnition 44 See Cooper 12 A binary VCSP directional arc consistent FDAC respect order variables arc consistent directional arc consistent respect Full directional arc consistency established Oed2 time valuation structure Q time valuation structure Sm 44 12 Oend3 Existential arc consistency EAC independent variable order For variable turn EAC shifts costs ci lead immediate increase c UnaryProject Deﬁnition 45 See Larrosa et al 43 A binary VCSP existential arc consistent EAC node consistent di cia 0 cost functions ci j b d j ci ja b c jb 0 Value called EAC support value variable Deﬁnition 46 See Larrosa et al 43 A binary VCSP existential directional arc consistent EDAC respect order variables existential arc consistent directional arc consistent respect Over valuation structure Sm existential directional arc consistency established Oed2 maxnd m time 43 An important difference local consistency CSPs local consistency VCSPs closure corresponding local consistency operations unique CSPs general case VCSPs 51 For example 2variable VCSP domains size 2 arc consistency existential arc consistency closures necessarily unique Similarly problems variables general FDAC closure unique Fig 1a b illustrates separately techniques FDAC EAC form stronger notion EDAC In transformed equivalent VCSP right cases VCSP left valuation structure Q 454 MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 Fig 1 Examples directional arc consistency b existential arc consistency establishing respectively FDAC EAC In cases lower bound c increased 0 1 Each oval represents domain value Names values variable number written outside oval names values variable number underneath A line joining j b represents weight ci ja b 1 value α written di inside oval represents cia α The absence line absence cost domain value indicates zero cost In Fig 1a VCSP right obtained establishing FDAC lexicographic DAC ordering following SAC operations 1 Project1 21F1 Project2 33F1 moves unit costs binary cost functions c12 c23 c1F c3F establishes arc consistency 2 Extend3F1 31 send unit cost c3F binary cost function c13 c13T F c13F F 1 3 Project1 31T1 moves unit cost c13 c1T establishes directional arc consistency 4 UnaryProject11 increase lower bound c replacing c1T c1F 1 c 1 establishes node consistency In order establish EAC weights shifted variable lead immediate increase c In Fig 1b existential arc consistent VCSP right obtained shifting weights variable 3 following SAC operations 1 Extend2T2 31 Project2 33F1 send unit cost c2T c23 allows project unit cost c23 c3F 2 Extend1F1 31 Project1 33T1 entirely similar manner send unit cost c1F c3T 3 UnaryProject31 increase lower bound replacing c3F c3T 1 c 1 The VCSP left Fig 1a EAC problem left Fig 1b FDAC proves properties complementary EDAC 43 simply combination FDAC EAC represents stateoftheart soft arc consistency technique compare new techniques deﬁned paper EDAC tries ﬁnd set SAC operations increases c perform exhaustive search sets This FDAC extend nonzero weights direction EAC extend weights neighborhood variable In section somewhat surprisingly possible perform exhaustive search sets SAC operations polynomial time 5 Optimal soft arc consistency An arc consistency closure VCSP P VCSP obtained P repeated calls Project UnaryProject convergence After Project UnaryProject resulting VCSP valid sense cost functions values lying valuation structure Deﬁnition 51 An arc consistency closure VCSP P optimal maximum lower bound c arc consistency closures P In previous paper proved discrete valuation structure nonnegative integers inﬁnity problem ﬁnding optimal arc consistency closure NPhard 19 However section extending valuation structure include rationals extending notion arc consistency closure allows MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 455 Fig 2 The linear program establish optimal soft arc consistency propagation inﬁnite weights determine optimal arc consistency closure polynomial time simple reduction linear programming This practical proposition theoretical result demonstrate extending valuation structure allows produce better lower bounds avoids intractability We relax preconditions soft arc consistency SAC operations Extend Project UnaryProject operations introduce negative ﬁnite costs Over rationals restriction costs application relaxed SAC operation Deﬁnition 52 Over valuation structure Q UnaryProject resulting cost functions values Q respectively α Q α m respectively Qm relaxed SAC operation Extend Project If apply sequence relaxed SAC operations produce VCSP P order able use c lower bound ensure costs P nonnegative intermediate problems contain negative ﬁnite costs Deﬁnition 53 Given VCSP P valuation structure Q operations transforms P valid VCSP cost functions values valuation structure Qm SAC transformation sequence relaxed SAC Deﬁnition 54 A VCSP P valuation structure Q applied P increases c Qm optimal soft arc consistent OSAC SAC transformation Over valuation structure Q SAC transformation involving shifting ﬁnite costs considered set relaxed SAC operations order operations applied importance case operations Extend Project UnaryProject commute Affane Bennaceur 1 split integer costs propagating fraction w j binary cost function ci j variable fraction 1 w j variable j 0 cid4 w j cid4 1 suggested determining optimal values weights w j In recent paper Bennaceur Osmani 4 suggested introducing different weights w iajb pair domain values b di d j As paper turns assigning different weight triple j di allows ﬁnd optimal weights polynomial time Theorem 55 Let P VCSP valuation structure Q arity cost functions P bounded constant It possible ﬁnd polynomial time SAC transformation P maximizes lower bound c establishes optimal soft arc consistency Proof Firstly 12 assume inﬁnite costs propagated standard generalized arc consistency algorithm 46 Note assume c S t set citi S At point inﬁnite costs propagated VCSP operations Extend Project UnaryProject We want determine set ﬁnite SAC operations applied simultaneously maximizes increase c For S C S 1 S let p S sum weights projected c S cia minus sum weights extended cia c S Let ui sum weights projected UnaryProject ci c Thus problem maximize ui resulting cost functions nonnegative values This equivalent linear program given Fig 2 We simply ignore inequalities cia c S t necessarily satisﬁed The remaining inequalities deﬁne standard linear programming problem Oed n variables e number cost functions n number variables d maximum domain size solved polynomial time 33 Since inﬁnite weights propagated propagation ﬁnite weights increase c resulting VCSP optimal soft arc consistent cid2 cid9 Karmarkars interiorpoint algorithm linear programming ON 35 L time complexity N number variables L number bits required encode problem 33 Under reasonable assumption e cid3 n 456 MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 Fig 3 No sequence SAC operations applied VCSP set simultaneous SAC operations transforms VCSP b number variables N linear program Fig 2 Oed number bits L required code Oedr log M r maximum arity cost functions M maximum ﬁnite cost Therefore linear program solved Oe45dr35 log M time A weaker version Theorem 55 limited 3variable subproblems basis algorithm establish 3cyclic consistency 13 Note linear program Fig 2 dual linear relaxation 01integer program deﬁned thesis 3836 Both primal dual linear programs ﬁrst studied 54 It important note difference SAC transformations sequences relaxed SAC operations sequences SAC operations stronger fact intermediate problems contain negative costs When ﬁnite costs shifted Q SAC transformation equivalent set SAC operations Several SAC operations applied simultaneously produce valid VCSP individual SAC operation applied As example consider binary VCSP P domains d1 d3 b c d2 d4 c valuation structure Q illustrated Fig 3a All unary costs equal zero All edges represent unit cost c assumed zero P node consistent arc consistent cost α 0 projected unaryprojected introducing negative cost Also unary costs equal zero cost α 0 extended introducing negative cost It follows SAC operation Extend Project UnaryProject transform P valid VCSP This implies sequence SAC operations modify P particular P EDAC However perform following relaxed SAC operations 1 Extend2 c 2 3 1 virtual cost 1 c2c pairs inside c23 c23c c23c b c23c c This introduces negative cost c2c 1 2 Project2 3 3 1 Project2 3 3 b 1 moves unit costs c3a c3b 3 Extend3 3 4 1 Extend3 b 3 1 1 unit costs moved inside c34 c31 respectively 4 Project3 4 4 c 1 moves unit cost 1 c4c 5 Project3 1 1 1 Project3 1 1 c 1 moves unit costs 1 c1c c1a 6 Extend1 1 2 1 Project1 2 2 c 1 reimburse initial loan value c2c 7 Extend1 c 1 4 1 Project1 4 4 1 send unit cost value c4a 8 Finally application UnaryProject4 1 yields problem right Fig 3 lower bound c 1 If relaxed SAC operations applied order intermediate problems steps 1 6 invalid negative weight c2c 1 ﬁnal problem weights nonnegative Since costs movements ﬁnite sequence relaxed SAC operations equivalent set simultaneous relaxed SAC operations This set operations corresponds solution linear programming problem given Fig 2 p23 2c p14 p14 4a 1c 1 p23 3a We seen applying set SAC operations simultaneously leads stronger notion consistency applying set SAC operations sequentially An obvious question stronger form consistency exists transforms VCSP equivalent VCSP u4 1 variables equal zero p31 3b p23 3b p12 1a p34 3a p34 4c p12 2c p31 1a p31 1c Deﬁnition 56 A VCSP P inscope cirreducible equivalent VCSP Q set cost function scopes P c Q nullary cost functions P Q c P c P c Q The following theorem direct consequence Lemma 52 13 proved ﬁnitelybounded strictly monotonic valuation structure Q MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 457 Theorem 57 Let P binary VCSP unary binary cost functions cost functions values Q costs ﬁnite If SAC transformation applied P produces VCSP Q c Q P inscope cirreducible c P Thus costs ﬁnite rational numbers linear programming approach establish inscope cirreducibility binary VCSPs This unfortunately case inﬁnite costs occur Consider example graphcoloring problem triangle colors expressed VCSP costs 0 The problem clearly inconsistent equivalent VCSP single cost function c SAC transformation applied VCSP increase c We conclude section showing optimal soft arc consistency established polynomial time valuation structure Qm In case solve linear programs Theorem 58 Let P cid3 X D C Qmcid5 VCSP arity cost functions P bounded constant r Then possible ﬁnd polynomial time optimal soft arc consistent VCSP equivalent P Proof In following use S represent constraint scope S cid3 1 For cid3S c S cid5 C t cid4S let P St denote VCSP identical P domain variable S reduced Q singleton consisting value ti assigned tuple t variable valuation structure P St By performing operations valuation structure Q upper bound m temporarily ignored If establishing OSAC P St produces lower bound c cid3 m original valuation structure Qm represents inconsistency This means setting c S t P produces VCSP equivalent original VCSP P Denote OSACmS t establishment OSAC P St setting c S t P resulting lower bound transformed greater equal m Now consider algorithm OSACm simply repeatedly applies OSACmS t P St constraint scopes S tuples t cid4S convergence Denote P VCSP results OSACm applied P The complexity OSACm bounded time complexity edr2 times time complexity linear program Fig 2 r maximum arity cost functions P We need establish OSAC time P considered VCSP valuation structure Q It remains P σ denote corresponding sequence relaxed SAC operations establish OSAC P results sequence operations σ applied P OSAC Qm introduce new inﬁnite costs Suppose contradiction exists sequence σ cid14 SAC operations Qm applied P σ cid14 value ρ cid3 m P reduced singleton valuation structure Q cost ρ c S t c sequence σ σ cid14 P deﬁnition P optimal soft arc consistent Qm To prove suﬃcient establishing relaxed sets cost c S t Without loss generality assume St sets c S t domain variable S By adding Project UnaryProject transfer St But deﬁnition sequence exist Hence sequence relaxed SAC operations introduce inﬁnite costs P minimal c S t ﬁrst cost set σ cid14 St represents VCSP identical P expanded sets c ρ cid3 m P sequence relaxed SAC operations increase c P Then combined sequence σ σ cid14 equivalent P applied P let P Clearly P cid2 Let denote VCSP 6 Experimental trials OSAC In section linear programming problem deﬁned OSAC solved ILOG CPLEX version 913 barrier algorithm We ﬁrst evaluate strength computational cost lower bounds produced direct application OSAC different problems 61 Evaluation OSAC lower bounds Random MaxCSP The ﬁrst set instances processed random MaxCSP instances created random_vcsp generator1 usual parameter model n number variables d size domains e number randomlychosen binary constraints t percentage randomlychosen forbidden tuples inside constraint The aim ﬁnd assign ment minimizes number violated constraints Four different categories problems domain size 10 generated following protocol 44 sparse loose SL 40 variables sparse tight ST 25 variables dense loose DL 30 variables dense tight DT 25 variables These instances available Cost Function Library archive httpsmulcybertoulouseinrafrprojectscostfunctionlib Samples 50 instances Table 1 shows respectively average optimum value average values EDAC lower bound average value OSAC lower bound On loose problems OSAC EDAC leave lower bound unchanged This shows higher level local consistencies required However tight problems OSAC extremely powerful providing lower bounds times better EDAC bounds 1 httpwwwinrafrmiaftpTVCSPsrcrandom_vcspc 458 MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 Table 1 Results preprocessing random WCSPs OSAC EDAC For category problems S Sparse e 25n D Dense e nn1 T Tight average cost optimal solution average lower bound c produced EDAC OSAC reported 8 L Loose Optimum EDAC lb OSAC lb SL 284 0 0 ST 1968 426 1230 DL 222 0 0 DT 2962 996 1980 Table 2 Radio link frequency assignment problems problem problem size number values best known upper bound best known lower bound corresponding cputime needed produce These cputimes taken 49 266 GHz Intel Xeon 32 GB scen06r scen07r 21 SUN UltraSparc 10 300 MHz workstation scen08 37 DEC 2100 A500MP workstation graph11r graph13r These followed lower bounds c produced EDAC OSAC cputime needed enforce EDAC OSAC CPLEX 3 GHz Intel Xeon 2 GB Total values Best known ub Best known lb Best lb cputime EDAC lb OSAC lb EDAC cputime OSAC cputime scen06r 3196 3389 3389 cid14cid14 221 0 35 cid14cid14 1 cid14cid14 621 scen07r 4824 343592 343592 cid14cid14 386035 10000 314531 cid14cid14 1 3530 cid14cid14 scen08r 14194 262 216 cid14cid14 13452 6 48 cid14cid14 1 cid14cid14 6718 graph11r 5747 3080 3016 cid14cid14 74113 2710 2957 cid14cid14 1 cid14cid14 492 graph13r 13153 10110 9925 cid14cid14 23211 8722 97975 cid14cid14 1 cid14cid14 6254 Frequency assignment The second set benchmarks deﬁned instances Radio Link Frequency Assignment Prob lem CELAR 92 This problem consists assigning frequencies set radio links way links operate noticeable interference Some RLFAP instances naturally cast binary WCSPs These problems extensively studied current state reported FAP web site http wwwzibdefapproblemsCALMA Despite extensive studies gap best upper bound computed local search methods best lower bound computed exponential time algorithms closed instance scen06 recently instance scen07 49 The problems considered scen0678reducwcsp graph113reducmorewcsp instances different strong preprocessing Benchmarks section 22 In order differentiate equivalent unprocessed instances subscript r identify following tables As Table 2 shows OSAC offers substantial improvements EDAC especially graph11 graph13 instances 4 3 respectively The polynomial time lower bounds For instances OSAC reduces optimality gap ublb ub obtained OSAC actually close best known exponential time lower bounds 62 OSAC preprocessing tree search To actually assess practical OSAC tried solve problems treesearch algorithm maintaining EDAC OSAC preprocessing Tight random MaxCSP The ﬁrst experiment performed problems OSAC preprocessing effective random tight MaxCSPs The diﬃculty lies fact CPLEX ﬂoating point solver open source WCSP solver toolbar version 30 C language section Algorithms 22 extended OSAC deals integer costs To address issue use ﬁxed point costs WCSPs considered ﬁrst multiply costs large integer constant λ 1000 solve linear programming problem deﬁned OSAC integer variables instead ﬂoating point The ﬁrst integer solution The resulting problem integer costs tackled toolbar3 This means shift polynomial problem NPhard In practice problems obtained good linear continuous relaxation expensive solve integer problems 35 slower LP relaxation following experiments Using polytime rational LP solver allow recover polynomial time bound Fig 4 reports cputime size tree search dense tight problems increasing size The time limit set 1800 seconds Clearly small problems 29 variables OSAC expensive resolution As problem size increases OSAC effective 33 variables divides total cputime roughly 2 The number 2 We like thank French Centre Electronique lArmement making instances available 3 The code toolbar modiﬁed accordingly solution cost 2λ known example current lower bound 11λ backtrack occurs global costs original problem integer ﬁrst integer 11 2 upper bound MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 459 Fig 4 Experimental evaluation OSAC preprocessing technique random dense tight problems Three cputimes reported 1 OSAC MIP time taken ﬁrst integer solution 2 MEDAC time taken solve original problem maintaining EDAC 43 toolbar default parameters good initial upper bound 3 OSACMEDAC sum OSAC MIP time needed MEDAC solve OSAC problem default parameters upper bound Fig 5 Experimental evaluation OSAC preprocessing technique random problems binary clique tree structure The ﬁgure uses logarithmic scale cputime different constraint tightnesses 40 problems satisﬁable nodes explored cases shows strength OSAC preprocessing technique remember EDAC maintained search OSAC DAC ordering The strength OSAC compared local consistencies directional arc consistency DAC require initial variable ordering Indeed DAC directly solves treestructured problems variable ordering DAC enforcing topological ordering tree To evaluate extent OSAC overcome 460 MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 limitations random problems structured binary clique trees 23 Each clique contains 6 variables domain size 5 sharing 2 variables parent clique The overall tree height 4 leading total number 62 variables graph density 11 On cliquetree problems DAC orderings One compatible topological ordering binary tree good lower bounds inverse order considered pathological The cputimes MEDAC default toolbar parameters good initial upper bound OSACMEDAC previously shown case Fig 5 Clearly OSAC leads drastic 20 fold improvements bad DAC ordering Being preprocessing totally compensate bad ordering But good DAC ordering OSAC gives impressive 4 fold speedups especially tight problems Finally tried solve challenging open CELAR instances OSAC preprocessing Despite strength OSAC problems remained unsolvable 7 Virtual arc consistency Although OSAC optimal terms strength induced lower bound associated linear program large OSAC beneﬁcial terms resolution speed However OSAC showed instead chaotic application integer equivalencepreserving transformations planning set rational SAC operations extremely beneﬁcial In section introduce Virtual Arc Consistency VAC plans sequences rational SAC operations increase lower bound c These sequences means classical generalized arc consistency CSP BoolP derived VCSP P Over valuation structures Q Qm reasonable assumption c cid15 relations BoolP contain exactly tuples zero cost P BoolP CSP solutions exactly n tuples x ValP x c Deﬁnition 71 If P cid3 X D C Σcid5 VCSP valuation structure Q Qm BoolP classical CSP cid3 X D Ccid5 scopes S cid15 cid3S R S cid5 C cid3S c S cid5 C R S relation deﬁned x cid4S t R S c S t 0 We CSP domains set Deﬁnition 72 A VCSP P virtual arc consistent generalized arc consistency closure CSP BoolP nonempty The following theorem shows establishing arc consistency BoolP detects inconsistency possible increase c sequence soft arc consistency operations Theorem 73 Let P VCSP valuation structure Q Qm c Then exists sequence soft arc consistency operations applied P leads increase c arc consistency closure BoolP Proof Throughout proof consider BoolP VCSP Boolean valuation structure S1 cid30 1 1 cid3cid5 To differentiate cost functions BoolP P denote cost functions scope S P BoolP c S c S respectively Let O 1 O k sequence soft arc consistency operations Project Extend UnaryProject P produce equivalent VCSP c increased We assume loss generality O k UnaryProject operation cid14 increases c For 1 k O projects extends weight α let O corresponding operation BoolP α replaced α cid10 α 1 α 0 0 α 0 cid14 cid14 1 O Project S j 05 P O cid14 Extend j S 0 Let BoolP represent result applying O Extend j S 0 For example O cid14 BoolP P represent result O cid14 k decreases cost function c S 1 cid11 1 1 S1 By simple applying O 1 O P The sequence O inductive argument S cid3 1 k c S t 1 BoolP c S t 0 P cid14 i1 satisﬁed If O projection assigns nonzero weight c ja c ja 1 preconditions O cid14 Finally applying O O t unary projection increases c weight α 0 follows O cid14 If O extension assigns nonzero weight c S t c S t 1 applying O Project S j 1 BoolP O cid14 1 O Suppose exists sequence arc consistency operations lead domain wipeout BoolP We assume loss generality operations identical applying arc consistency operation twice redundant CSPs There corresponding sequence O 1 O k soft arc consistency operations Project Extend UnaryProject BoolP viewed VCSP Boolean valuation structure S1 set c 1 BoolP We assume loss generality O k UnaryProject operation sets c 1 BoolP cid14 k sets c α 1 MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 461 Let δ minimum nonzero weight occurring P δ minc S t cid3S c S cid5 C t cid4S c S t 0 For cid14 1 k let O soft arc consistency operation P identical O weight projected cid14 extended δ2i For example O Project S 1 BoolP O Project S δ2i P We divide time ensure strictly positive costs remain strictly positive Let BoolP represent result applying cid14 cid14 O 1 O BoolP P represent result applying O 1 O P By simple inductive argument mini cid14 mum nonzero cost P δ2i Since operations O O identical weight projected cid14 extended BoolP identical BoolP k preconditions O i1 satisﬁed It follows O cid14 k necessarily increases c δ2k 0 P O k sets c 1 BoolP cid2 It increasing c small increase δ2k demonstrated proof Theorem 73 worthwhile However original weights P integers c 0 actually implies ValP x cid3 1 x allowing increase lower bound branch bound 1 In case lower bound strictly greater c VAC easily shown stronger Existential Arc Consistency 43 Indeed EAC seen applying virtual arc consistency limited single iteration arc consistency BoolP In EAC weights transferred virtually variable neighbors unary projection nonzero weight possible trace actually perform necessary soft arc consistency operations Thus EAC avoids problem fractional weights applying weak form virtual arc consistency Corollary 74 If VCSP P valuation structure Q lower bound c P Qm virtual arc consistent establishing EDAC increase Proof EDAC established applying sequence SAC operations 43 Theorem 73 sequence SAC opera tions increase c P cid2 Corollary 75 If VCSP P valuation structure Q Qm optimal arc consistent P virtual arc consistent Proof Since P optimal soft arc consistent sequence relaxed SAC operations increases c Hence sequence SAC operations increases c Theorem 73 P virtual arc consistent cid2 8 Increasing lower bound VAC We know Theorem 55 Theorem 58 establish OSAC VAC polynomial time Unfortu nately time complexity OSAC limits use preprocessing In section introduce loworder polynomialtime algorithm determines sequence SAC operations necessarily increases c sequence exists By The orem 73 VCSP virtual arc consistent sequence exists VAC strictly weaker OSAC fact case VAC intermediate problems nonnegative cost functions In soft arc consistency 19 choice direction project extend weights Note virtual arc consistency comes fact instead making choices effectively project extend simultaneously virtual weights possible directions establishing arc consistency BoolP One iteration VAC algorithm consists phases 1 Establish arc consistency BoolP stopping domain wipeout occurs soon domain variable If BoolP arc consistent quit P virtual arc consistent 2 Suppose domain wipeout occurred variable BoolP σ sequence arc consistency opera tions led domain wipeout Find minimal subsequence σ provokes domain wipeout tracing variable retaining arc consistency operations strictly necessary Convert minimal sequence arc consistency operations BoolP corresponding sequence σ cid14 consistency operations P produces maximum increase λ c keeping costs nonnegative soft arc 3 Apply sequence σ cid14 operations P Consider following instance P MaxSAT X1 X1 X4 X3 X4 X2 X2 X3 This VCSP illustrated leftmost box Fig 6 A line joining j b represents cost ci ja b 1 Unary costs cia 1 noted domain element Note P existential directional arc consistent EDAC However virtual arc consistent establishing arc consistency BoolP leads inconsistency The leftmost box Fig 6 represents BoolP weights interpreted Boolean values For ease comparison corresponding VCSP P ﬁgures represent CSP BoolP VCSP Boolean valuation structure S 1 cid30 1 1 cid3cid5 0 1 1 1 1 1 0 represents consistency 1 inconsistency 1 idempotent plus operator classical 2element Boolean algebra In words BoolP line j b represents fact 462 MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 Fig 6 A VCSP P leftmost box EDAC virtual arc consistent shown establishing arc consistency BoolP Fig 7 Tracing weights λ variable 4 arrive nonzero weights original VCSP P Fig 6 b applying corresponding soft arc consistency operations P reverse order b consistent assignment variables j unary cost 1 represents fact consistent assignment variable In representation BoolP propagating inconsistencies illustrated middle righthand boxes Fig 6 means adding lines setting unary costs 1 For example inconsistency c1T 1 propagated binary cost function c12 c12T T c12T F 1 value T d4 c4T 1 shown middle box Fig 6 A domain wipeout occurs variable 4 righthand box Fig 6 c4T c4F 1 meaning elements d4 inconsistent During establishment arc consistency BoolP reason inconsistency cost changes 0 1 valuation structure S1 recorded In example inconsistency BoolP ﬁrst detected variable 4 By Theorem 73 means soft arc consistency operations P transform P equivalent VCSP x d4 c4x cid3 λ λ 0 We associate λ x d4 trace weights step reason inconsistency recorded establishment arc consistency BoolP This illustrated Fig 7a The weights λ c4x x d4 shown left box obtained projection cost functions c14 c34 illustrated second box If corresponding cost original problem P nonzero case c14F T c34T F weights need traced The remaining weights c14T T c34T F obtained projections c1T c3F illustrated box The algorithm halts weights traced nonzero costs original VCSP P All weights λ shown ﬁnal box Fig 7a correspond nonzero costs original problem P The value λ exceed original costs In example maximal value assign λ clearly 1 Tracing equivalent ﬁnding MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 463 Fig 8 An example VCSP virtual arc consistency produces better lower bound EDAC allowing fractional weights reverse order sequence soft arc consistency operations produce VCSP x d4 c4x cid3 λ The soft arc consistency operations applied right order This illustrated Fig 7b In resulting VCSP cid14 c 1 This VCSP P arc consistent shown ﬁnal box Fig 7b virtual arc consistent corresponding CSP BoolP cid14 Unfortunately establishing virtual arc consistency require introduction fractional weights following example illustrates Consider instance P MaxSAT given X1 X1 X2 X1 X3 X2 X3 This problem illustrated leftmost box Fig 8a As usual line represents cost 1 unary costs noted corresponding domain element BoolP represented ﬁgure value 1 understood element Boolean valuation structure S1 cid30 1 1 cid3cid5 0 1 1 1 1 1 1 represents complete inconsistency Fig 8a illustrates process establishing arc consistency BoolP detection inconsistency means addition line unary cost 1 ﬁgure arc consistency operations performed pairs variables 1 2 1 3 pair 2 3 leads domain wipeout variable 3 We deduce lower bound integer value 1 original problem P However example set soft arc consistency operations integer weights produces nonzero lower bound In order determine sequence soft arc consistency operations P lead increase λ 0 c retrace steps establishing arc consistency BoolP We place value λ element d3 illustrated leftmost box Fig 8b Retracing steps know weights obtained projection binary cost functions c13 c23 illustrated box Fig 8b If corresponding weight original problem P nonzero c13F F c23F T weights need traced We know weights obtained extension c1 c2 A weight λ traced c12 c1 The algorithm halts remaining weights nonzero original VCSP P shown box Fig 8b We traced combined weight 2λ c1T Since c1T 1 P maximum value assign λ 1 2 To concretely collect cost 1 Fig 8b original VCSP P λ 1 projected c2T We c2T 1 cost λ 1 virtual deletion 1 F Fig 8a In step Fig 8c c2T 1 2 c apply soft arc consistency operations reverse order 2 extended c1T c12 2 matches virtual deletion value 2 T Fig 8a The 2 matches 2 extended c23 projected c3T The 2 extended c1T c13 projected c3F We c3F 1 2 This shown Fig 8c weight λ 1 464 MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 situation matches virtual wipeout previously obtained right Fig 8a We ﬁnally project c3 c equivalent VCSP c 1 2 The example Fig 8 shows applying sequence SAC operations virtual arc consistency algorithm lead introduction fractional weights VCSP We ensure avoid inﬁnite loop smaller smaller increases c time We concrete example inﬁnite loop Appendix A A pragmatic solution problem presented Section 11 9 Virtual arc consistency subroutines In section algorithms trace value λ c reach nonzero weights P propagate forward order actually increase c We assume valuation structure Q Qm We algorithms nonbinary cost functions This means fact apply generalized arc consistency 46 arc consistency BoolP We assume generalized arc consistency algorithm applied ﬁrst phase BoolP instrumented follows time value di eliminated di BoolP support constraint relation R S recorded setting killeri S pushing value dedicated queue denoted Q A similar instrumentation dynamic CSP algorithms 5 For simplicity formal description modiﬁcation framework AC3based algorithm A timeoptimal GAC algorithm compute space time complexities implementation Algorithm 2 VAC iteration Phase 1 Instrumented AC 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Revise variable wrt constraint R S Function Revisei S change false foreach di cid3t cid4S R S st ti delete di killeri S Q Pushi change true return change Function InstrumentedAC P S c S C S P cid15 S P Pop Revisei S di return P P j S cid14 c Scid14 C S cid14 cid15 S j S cid14 j cid15 return 0 Compared traditional Revise procedure lines 7 8 added The modiﬁcations applied AC6 AC2001 based algorithm If wipeout occurs AC enforced BoolP problem VAC InstrumentedAC algorithm returns 0 Otherwise wipedout variable returned The stack Q space complexity Ond value deleted Implemented pointers cost functions killer datastructure Ond These complexities change asymptotic space complexity GAC algorithms The second phase described Algorithm 3 It exploits queue Q killer data structure rewind propagation history collect inclusionminimal subset value deletions suﬃcient explain domain wipe observed For Boolean Mi set true deletion needed explain wipeout needs traced This phase computes quantum cost λ ultimately add c Using previous killer structure possible trace cause deletions nonzero cost reached source cost λ taken However classical CSP forbidden labeling value multiple times shown example Fig 8 In order compute value λ know quanta costs requested solicited source cost original VCSP unary rary level For labeling t S scope S c S t S cid15 0 use integer kS t S store number requests quantum λ c S t S Using queue Q guarantees deleted values explored anticausal order deleted value explored deletions caused deletion Thus cost request given tuple computed c S t S based computed counts correct Ultimately able compute λ minimum kSt S t S kS t S cid15 0 This ratio represents cost constraint c S provide divided number requests cost Initially k equal 0 variable i0 wipedout quantum needed value line 5 In simplest case cost available values wiped variable backtracing MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 465 Algorithm 3 VAC iteration Phase 2 Computing λ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 Initialize k kS 0 λ i0 InstrumentedAC i0 0 return foreach D i0 ki0 1 Mi0 true ci0 cid15 0 Mi0 false λ minλ ci0 Q cid15 Q Pop Mi S killeri RPushi foreach t cid4S st ti c S t cid15 0 kS t kS t ki λ minλ c S t kSt Let j S j cid15 variable invalidates t BoolP ki kS j t j k j t j k j t j ki kS j t j kS j t j ki c j t j 0 M j t j true λ minλ c j t j k jt j required value λ updated accordingly line 6 Otherwise value extracted Q line 8 deleted arc consistency BoolP lack support constraint relation R S associated c S scope killeri S If cost needed line 9 lack support tuple t cid4S extending fact 1 t forbidden R S BoolP means c S t cid15 0 line 13 The traceback stop number quanta requested directly taken c S t The counter k associated labeling t line 14 λ line 15 updated accordingly 2 Otherwise t valid variables j S j cid15 value j t j deleted ki quanta costs needed Note different values variables S request different numbers quanta value j t j c S maximum needed extension j t j c S provides cost c S t t extending j t j To maintain maximum use data structure kS j t j store number kS j b sum S C quanta requested j t j c S We k j b j S Here new request higher known request line 18 k j t j line 19 kS j t j line 20 increased accordingly If unary cost c jt j explaining deletion means value j t j deleted GAC enforcing need trace deletion j t j inductively line 21 Otherwise traceback stop j t j λ updated line 22 cid9 The phase described Algorithm 4 actually modiﬁes original VCSP applying sequence equivalencepreserving transformations identiﬁed previous phase reverse order thanks queue R For value j b deleted BoolP needed explain wipeout identify cost function c S enabled deletion BoolP We unary costs required scope S Extend line 4 deleted value j b Project line 4 The amounts cost extended projected equal cost quantum λ multiplied number requests given k datastructure Ultimately reach wipeout variable i0 quantum cost c The new VCSP improved c Theorem 73 shows Algorithm 4 VAC iteration Phase 3 Applying equivalencepreserving transformations 1 2 3 4 5 6 7 8 R cid15 j b RPop S killer j b foreach S cid15 j D st kS cid15 0 Extendi S λ kS kS 0 ProjectS j b λ k j b UnaryProjecti0 λ 466 MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 Because kS t data structure algorithm Oedr space complexity r maximum arity cost functions P It possible round exponential number counters observing quanta requests c S t S 1 come variables S For variable S ki ti quanta requested killeri ti S Mi ti true Thus kS t need maintained removing line 14 Algorithm 3 When value kS t needed line 15 computed ﬂy cid11 kS t kS ti iS killeriti SMiti By implementing killer pointers cost functions time complexity OS instead constant time Because kS counters ultimately Oerd space complexity As time complexity iteration algorithm time complexity Oedr This true ﬁrst phase long optimal GAC algorithm instrumentation Ond The 2nd phase Ondr nd values P loop line 12 takes Odr1 An Oedr complexity applies phase 10 Problems solved virtual arc consistency When problem P virtual arc consistent known problem BoolP nonempty generalized arc consistency closure This allows VAC inherit tractable problem classes solved generalized arc consistency CSP For example VAC solve submodular minimization problems nontrivial polynomial language VCSP valuation structure Q 11 It known OSAC solves VCSPs submodular cost functions 15 In section simpler proof weaker notion VAC suﬃcient solve problems Deﬁnition 101 In valuation structure Q submodular t t applications max resp min tuples t t cid14 cid4S c S maxt t cid14 c S mint t cid14 Qm assuming given total ordering domain cost function c S cid14 max min represent componentwise cid14 cid4 c S t c S t Over valuation structure Q class submodular cost functions includes functions cid12 x2 y2 φr r cid3 1 11 cid10 φrx y x yr x cid3 y useful bioinformatics 57 captures simple temporal CSP linear preferences 34 Other wellknown examples submodular functions cut function graph 20 hypergraph 28 rank function matroid The complexity fastest known fullycombinatorial algorithm submodular function minimization Q ON 5γ N 6 N number boolean variables γ time calculate submodular function minimized 47 The standard coding VCSP submodular cost functions n variables domainssize d submodular function minimization problem requires N nd 1 Boolean variables 11 Theorem 102 Over valuation structure Q Qm let P VCSP cost functions arity bounded constant submodular given domain ordering If P VAC optimal solution P polynomial time cost given c Proof If c assignment trivially optimal solution cost c Suppose c ﬁnite It follows cid14 directly Deﬁnition 101 c S submodular t t cid14 0 Thus cost function submodularity implies following property relations BoolP R S relation c S mint t scope S t t cid14 R S t R S cid14 cid4S c S t c S t cid14 0 c S maxt t cid14 cid4S cid5 cid4 t t cid4 t t R S R S max min cid4 t cid4 cid4 cid5 cid5 cid5 cid5 cid14 cid14 operations max min applied componentwise This means relations BoolP minclosed maxclosed 32 Since VCSP P VAC BoolP nonempty generalized arc consistency closure It follows solution x BoolP exists polynomial time establishing generalized arc consistency taking maximum values domain 32 The cost x VCSP P equal c deﬁnition BoolP optimal cid2 The previous proof suggests useful simple value ordering heuristic use maintaining VAC inside branch bound algorithm making BoolP arc consistent ﬁrst value deleted arc consistent closure BoolP tried ﬁrst submodular cost functions maxclosed minclosed This speciﬁc value ordering heuristic denoted Hval experimental section Submodularity deﬁned based order domain It case cost functions VCSP submodular orders domain cost functions explicitly submodular unknown Finding MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 467 suitable domain orders socalled permuted submodular cost functions polynomial problem directly reduced 2SAT 53 Interestingly VAC directly solve VCSPs permuted submodular cost functions deter mining permutations Theorem 103 Over valuation structure Q Qm let P VCSP cost functions arity bounded constant submodular unknown domain orders If P VAC optimal solution P polynomial time cost given c Proof The VCSP P transformed unknown domain permutations VCSP P submodular cost functions The generalized arc consistency closure CSP independent domain orderings generalized arc consistency closure BoolP VAC The existence solution cost c follows directly Theorem 102 cid14 nonempty P cid14 cid14 Although solution directly identiﬁed case taking maximum values domain solution identiﬁed backtrack maintaining generalized arc consistency BoolP search This search backtrackfree provided accept assignment making assignment establishing generalized arc consistency BoolP leads nonempty closure Assigning value variable preserves maxclosed nature constraints generalized arc consistent CSP maxclosed constraints necessarily solution 32 cid2 Corollary 104 Over valuation structure Q known domain orders Then establishing virtual arc consistency cost optimal solution P given c let P VCSP cost functions submodular known Proof Because Project Extend UnaryProject preserve submodularity Q 15 establishing VAC submodular problem P produces equivalent submodular VCSP virtual arc consistent Hence Theorem 102 Theo rem 103 establishing VAC solves P cid2 The simplicity proofs highlights fact VAC solves polynomial classes corresponding CSP BoolP solved arc consistency provided property deﬁning tractable class preserved establishing VAC Very simple cases signiﬁcant VCSP case For example treestructured VCSP solved DAC directional arc consistency requires tree structure detected speciﬁc variable order speciﬁed DAC enforcing A VAC treestructured problem solved automatically arc consistency classical CSP We general result Proposition 105 Over valuation structure Q decision procedure P optimal solution cost c Qm P VAC BoolP class CSPs arc consistency Proof By deﬁnition VAC arcconsistency closure BoolP nonempty Since arc consistency decision procedure BoolP implies BoolP solution deﬁnition BoolP P solution cost c This solution necessarily optimal c lower bound cost solution cid2 Tractable classes CSP solved arc consistency include maxclosed CSPs 32 CSP instances satisfying broken triangle property hybrid class strictly generalizes treestructured CSPs 18 By Proposition 105 establish ing VAC BoolP falls tractable classes VCSP P solved As example simple case observe VCSP problem P VAC BoolP domains reduced singletons solved Note VCSP P means variable values unary cost 0 Note general properties BoolP destroyed soft arc consistency operations deﬁne tractable class recognized establishing VAC 11 Experimental trials VAC algorithm 111 Heuristic implementation VAC algorithm To study actual quality VAC bound solving VCSP restricted binary cost functions simplicity Since number iterations VAC algorithm described Section 9 unbounded shown example Appendix A enforce approximation VAC threshold ε If given number iterations improve c ε VAC enforcing stops prematurely This called VACε In Qm number iterations O m ε total complexity VACε Oed2mε When iteration increase lower bound ε bottleneck cost ﬁxed value λ identiﬁed unary binary costs corresponding variables concerned bottleneck ignored BoolP following iterations In order rapidly collect large cost contributions similarly previously maximum ﬂow algorithms 2 replaced BoolP relaxed increasingly strict variant Boolθ P A tuple t forbidden Boolθ P 468 MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 Table 3 A comparison EDAC VACε OSAC preprocessing random MaxCSP preprocessing EDAC VACε OSAC ST lb 16 25 27 time 001 s 006 s 105 s DT lb 18 28 32 time 001 s 009 s 21 s CT lb 40 49 74 time 001 s 025 s 631 s iff cost P larger θ After sorting list nonzero binary costs ci ja b ﬁxed number k buckets decreasing minimum costs observed bucket deﬁne sequence thresholds θ1 θk Starting θ1 iterations performed ﬁxed threshold wipeout occurs Then value θi1 After θk geometric schedule deﬁned θi1 θi 2 stopped θi cid4 ε 112 Value ordering heuristic When P virtual arc consistent values deleted arc consistent closure BoolP imply cost larger c This information direct search good solutions Quickly ﬁnding good necessarily optimal solution essential ingredient branch bound provides tighter upper bound optimal cost Since valuation structure branch bound Sm m current upper bound tighter upper bound lead effective pruning search In experimental section consider new value ordering heuristic selects minimum domain value deleted BoolP This value ordering heuristic informed value ordering heuris tic selects EAC support values Deﬁnition 45 toulbar2 solver It nice property Section 10 guide solver optimal solution nonpermuted submodular problems The combi nation value ordering heuristic VACε maintenance branch bound procedure known VACHval following experimental results 113 Experiment setup In section present experimental results VACε toulbar2 version 08 written C section Algorithms 22 Our implementation uses ﬁxed point representation costs To achieve initial costs problem multiplied 1 ε assumed integer To exploit knowledge original problem integer costs cid3 m m global upper bound cost best known branch bound pruning occurs soon solution As VACε incapable producing unary costs VACε enforced FDAC cid23cεcid24 ε Experiments performed 3 GHz 266 GHz submodular benchmarks Intel Xeon 16 GB Our solver includes conﬂict driven variable selection heuristic 8 elimination variable degree lower search 42 binary branching4 The default value ε VACε ε 1 Because overhead iteration VACε implies reconstruction Boolθ P convergence VACε stopped prematurely search random benchmark problems ﬁnal θ larger preprocessing This enforces VACε capable providing large improvements lower bound No non trivial initial upper bound random instances 10000 114 Evaluation VACε lower bounds In ﬁrst set experiments analyse strength lower bounds provided VACε compared lower bounds including OSAC Random MaxCSP We report results problems described Section 61 These Sparse Tight Dense Tight Complete Tight ST DT CT 32 variables 10 values 50 instances class VACε OSAC preprocessing yield nontrivial lower bounds Table 3 shows time quality lower bound lb preprocessing EDAC VACε OSAC ILP formulation solved CPLEX 110 As expected OSAC provides strongest lower bound VACε computes lower bound 8 ST 33 CT weaker OSAC orders magnitude faster These considerable speedups fairly moderate impact strengths lower bounds Frequency assignment problems The problems considered described Section 61 Considering lower bounds produced Table 4 shows VACε orders magnitude faster OSAC gives lower bounds graph11r graph13r instances 4 For small domains d cid2 10 value assigned removed Larger domains split halves MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 469 Table 4 A comparison lower bounds produced OSAC VACε different RLFAP instances preprocessing lb EDAC VACε OSAC time VACε OSAC scen07r 10000 29498 31454 211 s 3530 s scen08r graph11r graph13r 6 35 48 86 s 6718 s 2710 2955 2957 35 s 492 s 8722 9798 9798 29 s 6254 s Fig 9 A comparison eﬃciency algorithms maintaining EDAC VACε enhanced value ordering heuristic described Section 112 random permuted binary submodular problems Overall unoptimized version VACε capable producing signiﬁcantly stronger lower bounds EDAC orders magnitude faster highly optimized linear programming solver produce better lower bound VACε attractive component branch bound search 115 Submodularity In section try evaluate eﬃciency VACε submodular problems problems large submodular cost functions Random binary submodular problems The following procedure generate random binary submodular problems unary level value receives 0123 cost identical probability Binary submodular cost functions decomposed sum socalled generalized interval functions 10 A generalized interval function ηabx y deﬁned ﬁxed cost 3 bounds b variables x y cid10 ηabx y 0 x y b 3 We summed p p randomlychosen integer value 0 d d size domain generalized interval functions ηabx y uniformlysampled random values b generate submodular binary cost function The domains variables randomly permuted hide submodularity Problems n 100 n 450 variables 20 domain values n 1n8 binary constraints 50 instances class The cputime solve problems including proof optimality reported Fig 9 time limit 1 hour Fig 9 shows maintaining VACε rapidly outperforms EDAC problems Although OSAC solve permuted submodular problems polynomial time 15 degree polynomial OSAC applied problems size Thus VACε establishes approximation virtual arc consistency maintaining VACε proved faster OSAC submodular problems Similarly stateoftheart fully combinatorial polynomialtime algorithm submodular function minimization 47 applied problems size complexity Ond5e Notice speedup offered enhanced value ordering VACHval Fig 9 compared default value order ing heuristic VAC Fig 9 470 MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 Fig 10 A comparison eﬃciency algorithms maintaining EDAC VACε random dense tight problems percentage permuted binary submodular cost functions Partlysubmodular random problems To evaluate inﬂuence existence limited number submodular cost functions started random dense tight problems generated 16 replacing given percentage cost functions permuted binary submodular cost functions 100 means fully submodular instance Problems 100 variables 10 values 1237 binary constraints 50 instances class The results reported Fig 10 logarithmic scale cputime axis We set time limit 1 hour average calculated assigning 1 hour problems unsolved time limit When 90 cost functions submodular VACε VAC VACHval orders magnitude faster EDAC For 75 submodular cost functions EDAC VACε solve instances 1hour time limit As percentage submodular cost functions decreases VACHval eﬃcient VAC develops slightly search nodes This overhead maintaining complex value ordering heuristic In rest experiments enhanced VACHval value ordering heuristic submodular benchmarks Feedback arc set Given directed graph feedback arc set problem consists removing minimum subset arcs order obtain acyclic subgraph An alternative formulation ﬁnd total order vertices minimum number feedback arcs arc j j This problems NPhard 25 In order experiment submodular problems modiﬁed penalty function feedback arc j instead having cost 1 cost proportional difference ordering positions j The resulting problem similar simple temporal CSP linear preferences 34 We took instances n 50 vertices 100 900 arcs Resendes home page5 In WCSP model variable xi domain 1 n corresponding vertex For arc j cost function max0 xi x j 1 The results reported Fig 11 The time limit 2 days When number arcs 150 OSAC preprocessing solves problem search However expensive EDAC VACε As problem submodular VACε eﬃcient compared EDAC However despite submodularity VACε slower EDAC densest instances When graph density high VACε tends frequently ﬁnd cyclic arcinconsistency proofs BoolP resulting small rational cost increments cause premature termination VACε loose lower bound c As shown Fig 11 lowering value ε effectively improves lower bound c reduces search effort especially constraint graph density increases Using smaller threshold ε 1000000 VACε signiﬁcantly faster EDAC 1 Minimum cut problems Our submodular problem example s t minimum cut problem consists ﬁnding partition vertices weighted undirected graph G V E w disjoint subsets containing source node terminal node weighted sum edges end points different subsets partition minimum Our WCSP formulation associates 01 variable vertex V For edge e j E soft equality cost function returns cost xi cid15 x j 0 We ﬁx x1 0 xn 1 correspond respectively source terminal nodes Instances produced genrmf generator6 29 First DIMACS Challenge The graph succession b grids size vertex connected neighbors randomly chosen vertex grid Capacities selected uniformly random c1c2 intergrid arcs ﬁxed c2 a2 intragrid arcs Problems 5 httpwwwresearchattcommgcrdataindexhtml 6 wwwinformatikunitrierdenaeherProfessurresearchgeneratorsmaxﬂowgenrmfindexhtml MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 471 Fig 11 A comparison eﬃciency algorithms maintaining EDAC VACε different ε values OSAC submodular feedback arc set problems Fig 12 A comparison eﬃciency algorithms maintaining EDAC VACε random minimum cut problems compared stateoftheart maxi mum ﬂow general submodular algorithms 16 genrmf_long coeﬃcients 2 b a2 4 c1 1 c2 100 20736 variables 12 b 144 46 96626 binary constraints 50 instances class The results reported Fig 12 logarithmic scale cputime axis We compared EDAC VACε ε 1 dedicated maximum ﬂow algorithm GoldbergTarjan pushrelabel method H_PRF cputime interpolated 27 taking cpu clock frequency ratio 18266 general submodular stricted binary cost functions minimumnorm point algorithm 26 cputimes 26 cpu ratio applied 10 41 faster implementation The algorithms compared widely different capabilities The GoldbergTarjan algorithm capable solving MaxﬂowMincut problems arbitrary ﬁnite binary sub modular WCSPs 7 The general submodular algorithm limited submodular functions arbitrary arities EDACVACbased algorithms restricted submodular functions boolean domains present imple mentation designed binary cost functions Not surprisingly VACε faster general submodular solver 76 times faster 10 n 10000 slower dedicated ﬁnely tuned maximum ﬂow algorithm Although develops times nodes EDAC 30 times slower EDAC overhead search Interestingly arc inconsistency proofs arc consistency BoolP acyclic meaning VACε value ε solved speciﬁc problem preprocessing It surprising relatively simple generic WCSP solver EDAC solves minimum cut problems n 15 000 vertices 55 seconds considerably slower 004 seconds required specialized optimized maximum ﬂow algorithm 472 MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 Table 5 Maintaining VACε hard RLFAP instances gr11r gr11 gr13r gr13 sc06 nb var 232 340 454 458 82 nb val 5747 12820 13153 17588 3274 nb cf EDAC cpu VACε nodes 792 1425 2314 4815 327 39 min 1536 2 105 32 114 2 106 VACε cpu 182 s 217 min 62 s 254 s 155 min lbiter nb iter 25 663 48 04 96 973 26 105 1893 9486 3 106 Table 6 Comparison EDAC VACε CPLEX 110 different uncapacitated warehouse location problems EDAC VACε CPLEX mq1 2508 2279 622 mq2 3050 3312 1022 mq3 2953 2883 415 mq4 7052 4024 1266 mq5 7323 8124 2357 6179 3243 3 b 4343 45 c 2751 13 116 Solving general problems Our ﬁnal tests dedicated solving nonsubmodular problems branch bound search maintaining VACε EDAC search Since includes FDAC EDAC remove values deleted VACε It provides additional information variable value ordering heuristics In experiments toulbar2 solver selects variable smallest ratio current domain size divided current number constraints involving variable Ties broken choosing variable maximum unary cost Frequency assignment Experiments performed CELAR instances mentioned Section 114 During search VACε stopped θ 1000ε Table 5 reports results open instances graph11 graph13 fapzibdeproblemsCALMA solved optimality ﬁrst time reduced original formulation given best known upper bound Table 5 gives results instance scen06 The table gives problem number variables total number values number cost functions cputime EDAC dash 104 seconds number nodes explored VACε cputime VACε mean increase lower bound observed VACε iteration lbiter total number VACε iterations nb iter We observed value k number cost requests VACε iteration high reaching mean value 16 resolutions graph instances This shows stronger lower bound provided VACε clearly pays suﬃciently diﬃcult problems good lower bound essential prune large search tree VACε capable solving simpler problems associated overheads computationally expensive techniques EDAC outperform Uncapacitated warehouse location problem UWLP In UWLP aim decide facilities opened provide goods customers maximum proﬁt equivalently minimum cost The cost minimization variant UWLP known supermodular opposite submodular cost function Minimizing supermodular functions known NPhard The precise problem description WCSP model given 40 24 respectively We tested EDAC VACε preprocessing followed cases maintaining EDAC search instances capmq15 600 variables 300 values variable 90000 cost functions instances capa capb capc 1100 variables 90 values variable 101100 cost functions We report solving time prove optimality initial upper bound equal optimum seconds Table 6 dash 104 seconds VACε outperforms EDAC 6 8 problems Instances solved ILP solver CPLEX 110 direct formulation problem On problems CPLEX eﬃcient VACε Note given ﬂoating point representation CPLEX large range costs problems proof optimality CPLEX questionable OSAC results given LP generation overﬂows instances 117 Conclusion The lower bounds produced VACε stronger produced EDAC weaker produced OSAC Our experiments conclusively demonstrated problems maintaining VACε search best strategy This particularly true diﬃcult problems frequency assignment benchmark problems closed ﬁrst time VACε Clearly EDAC outperform VACε time devoted VACε ﬁnding better lower bound compensated suﬃcient pruning branch bound search tree This occur reasons phenomenon observed s tmincut problems reported extraction optimal plan planning graph 17 It worth pointing current implementation VACε leaves room considerable optimization MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 473 Fig 13 A VCSP corresponding 2color graphcoloring optimization problem triangle Our experiments conﬁrmed theoretical relationship VAC submodularity Although VACε approximation VAC capable taking advantage submodular nature cost functions provide good lower bound It doubt EDAC considered approximation VAC explains rapidity EDAC certain submodular problems An interesting outcome experiments VACε performs problems containing high proportion submodular cost functions specialized submodular algorithms inapplicable 12 Discussion 121 Virtual arc consistency diffusion A simpler slower algorithm known MINSUM diffusion alternative VAC algorithm described Section 9 MINSUM diffusion consists iterating convergence following operation S C S di Project S α cid13 c S t t cid4S ti cid14 min cia α 1 2 Rather sending cost possible unary constraint ci MINSUM diffusion equalizes costs unary higherarity constraints sense Project cid13 c S t t cid4S ti cia min cid14 If iteration establish node consistency easy MINSUM diffusion converges resulting VCSP VAC MINSUM diffusion generalized treereweighting TRW algorithm performs exact equalizations trees single edges 5535 In trials binary problems lowlevel vision MINSUM diffusion converge times slower TRW algorithm trees corresponded rows columns image Augmenting DAG algorithm similar VAC algorithm described Section 9 3956 122 Beyond arc consistency It mentioned forms higherorder consistency proposed VCSPs 14 ﬁnd better lower bound SAC transformation This cost introducing higherorder cost functions Consider optimization version graph coloring problem triangle colors equivalent VCSP Fig 13 line represents cost 1 The aim assign color node minimize number pairs nodes joined edge assigned color No SAC transformation applied VCSP increases c soft 3consistency produces lower bound c 1 14 One disadvantage establishing soft 3consistency weights stored ternary cost functions BoolP classical CSP solution VCSP P solution cost c In way virtual arc consistency uses inconsistencies detected establishing arc consistency BoolP determine sequence soft arc consistency operations increase lower bound c P virtual consistency techniques deﬁned based notions consistency BoolP 13 Conclusion We presented new techniques ﬁnding improved lower bounds ﬁnitedomain optimization problem VCSP based notions optimal virtual arc consistency In order establish optimal soft arc consistency OSAC propagation inﬁnite costs linear program solved determine set soft arc consistency operations shifting costs unary nonunary cost functions produces equivalent instance maximum value constant cost term This constant cost term represents natural lower bound plays essential role branch bound search When costs ﬁnite resulting constant cost term optimal equivalent instances set constraint scopes Experimental trials demonstrated potential utility establishing OSAC preprocessing 474 MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 Fig 14 Example VCSP instance VAC algorithm enter inﬁnite loop Virtual arc consistency VAC seen approximation OSAC applied preprocessing node search tree If VCSP virtual arc consistent means sequence soft arc consistency operations increase lower bound c In particular previous stateoftheart soft consistency technique EDAC Existential Directional Arc Consistency 43 increase c variable order Virtual arc consistency tested Oed2 time case binary VCSP optimal arc consistency algorithm AC2001 6 CSP BoolP It established polynomial time simply establishing OSAC The main aim soft consistency techniques rapidly ﬁnd good necessarily optimal lower bound Therefore experimental trials algorithm guaranteed loworder polynomial time complexity established relaxed version VACε virtual arc consistency order avoid problems convergence generated introduction smaller smaller fractional weights Applying VACε branch bound search allowed close longstanding open frequency assignment problems Acknowledgements We like thank Arie Koster Achemi Bennaceur discussions OSAC lower bound relation duality linear relaxation ILP formulation weighted CSP given 37 The presentation paper greatly improved thanks remarks anonymous reviewers This research partly funded Agence Nationale la Recherche STALDECOPT project Appendix A Inﬁnite loops trying enforce VAC In section example VCSP instance valuation structure Q VAC algorithm enter inﬁnite loop increasing c smaller smaller iteration We present example justify use heuristics described Section 11 experimental trials These heuristics guarantee loworder polynomial time complexity cost necessarily completely establishing VAC Denote P integers cid3 0 10variable VCSP instance shown Fig 14 values α β γ δ ε given cid5 cid4 1 4 cid4 1 4 α 2 3 α 1 γ 1 2 3 ε 4 cid4 β 1 α 1 3 cid5 δ 1 γ 1 3 1 2 cid4 cid5cid5 cid4 4 cid5 2 4 MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 475 A nonzero binary cost ci ju v ρ represented line labeled ρ joining u j v Nonzero unary costs given explicitly The original problem P 0 somewhat simpler problem P shown Fig 14 0 α γ 0 edges zero weight We iterations VAC algorithm transform P P i1 cid3 0 Hence possible algorithm enters inﬁnite loop producing sequence P 0 P 1 P 2 actually establishes virtual arc consistency There different sequences SAC operations applied P allow increase c In particular possible increase c ε shifting weight ε c10a variable 1 variable 9 following sequence SAC operations Extend10a10 9ε Project10 99bε Extend9b9 1ε Project9 11bε UnaryProject1ε This sequence SAC operations immediately produces VCSP c 1 But VAC algorithm equally successively transform P P i1 P i2 case c actually attains value 1 Imagine different cincreasing sequences SAC operations applied P algorithm determines increase c ε2 shifting weights cycle variables 1 2 3 4 5 8 9 1 In sequence σ1 SAC operations weight ε extended c1a variable 2 effectively comes c1b weight ε2 split variable 3 half sent variable 4 half variable 5 Weights sent paths variables 4 5 variable 8 order increase c8a c8b allows propagation continue variable 9 variable 1 The sequence σ1 SAC operations applied P given σ1 Extend1a1 2ε Project1 22bε Extend2b2 3ε Project2 33aε Project2 33bε Extend3a3 4ε2 Extend3b3 4ε2 Project3 44aε2 Extend3a3 5ε2 Extend3b3 5ε2 Project3 55aε2 Extend4a4 8ε2 Project4 88aε2 Extend5a5 8ε2 Project5 88bε2 Extend8b8 9ε2 Extend8a8 9ε2 Project8 99bε2 Extend9b9 1ε2 Project9 11bε2 UnaryProject1ε2 Since values α β ε deﬁned satisfy following inequalities 2 2α cid3 ε β cid3 ε2 1 cid3 ε 2 3α cid3 3ε2 Let P sequence σ1 SAC operations produces VCSP nonnegative costs Furthermore ε2 largest increase c produce sequence fact c23a c23a b ε instance P This shows σ1 operations actually carried iteration VAC algorithm cid14 denote VCSP instance results sequence σ1 SAC operations applied P A sequence cid14 increase c ε4 shifting weights cycle variables 10 9 SAC operations applied P 8 7 6 3 2 10 This rotational symmetry equivalent sequence σ1 SAC operations weights divided rotational symmetry variable j replaced variable 11 j For completeness list sequence σ2 operations Again ε4 largest increase c produce sequence fact cid14 c98b c98b b ε instance P σ2 operations actually carried VAC algorithm σ2 Extend10a10 9ε2 Project10 99bε2 Extend9b9 8ε2 Project9 88aε2 Project9 88bε2 Extend8a8 7ε4 Extend8b8 7ε4 Project8 77aε4 Extend8a8 6ε4 Extend8b8 6ε4 Project8 66aε4 Extend7a7 3ε4 Project7 33aε4 Extend6a6 3ε4 Project6 33bε4 Extend3b3 2ε4 Extend3a3 2ε4 Project3 22bε4 Extend2b2 10ε4 Project2 1010bε4 UnaryProject10ε4 476 MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 cid14cid14 cid14cid14 We denote resulting VCSP instance P jk c c j c jk denoting cost cost functions c functions P After sequences SAC operations σ1 σ2 new values cost functions given following equations cid14cid14 c cid14cid14 j c cid14cid14 c ε2 ε4 cid14cid14 1a c1a ε ε2 cid14cid14 12a c12a ε cid14cid14 12b b c12b b ε cid14cid14 23a c23a ε ε4 cid14cid14 23b c c23b c ε ε4 cid14cid14 34a b c34a b ε2 cid14cid14 34c c34c ε2 cid14cid14 10a c10a ε2 ε4 cid14cid14 87a b c87a b ε4 cid14cid14 87c c87c ε4 cid14cid14 89c b c89c b ε2 ε2 c c c c c c c c c c c c cid14cid14 c c c c cid4 cid5 3 4 4 i1 i1 1 4 1 4 cid4 4 cid4 3 2 4 3 1 4 4 cid5 1 4 cid4 ε 4 deduce γ 1 i1 cid5 3 1 4 4 cid5 4 β 1 i2 4 4 cid5 3 1 24 i4 1 4 i2 2 4 3 2 4 3 i1 For example c increased ε2 ε4 combined effect operations UnaryProject1ε2 UnaryPro ject10ε4 c1a decreased ε ε2 result operations Extend1a1 2ε UnaryProject1ε2 Reading cost function values Fig 14 c 1 ε c1a 2ε c12a 2α c12b b 2 2α c23a ε c23b c 1 ε c34a b α c34c β c10a ε c87a b γ c87c δ c89c b 1 δ 1 given α 2 cid14cid14 1 4 cid4 cid14cid14 1a 2 12a 4 cid14cid14 12b b 2 4 3 4 cid14cid14 23a 4 cid14cid14 23b c 1 4 34a b 2 cid14cid14 34c 1 2 3 4 i2 4 cid14cid14 10a 4 cid4 87a b 1 cid14cid14 87c 1 cid14cid14 89c b 1 ε2 ε2 1 i2 2 3 i2 1 3 i1 i4 1 3 i4 1 3 i4 1 4 cid4 4 cid5 1 4 cid4 1 4 cid4 i4 4 i4 4 4 cid5 4 4 1 4 1 4 1 4 2 4 2 4 1 2 1 4 i1 i1 i1 i1 i1 i1 4 4 4 cid5cid5 4 3 3 3 cid4 cid4 cid4 cid4 cid5 cid5 cid4 cid5 cid5 cid5 cid4 cid5 c c c c c c c c cid14cid14 cid14cid14 The remaining cost function values deduced values edges identical labels cid14cid14 cid14cid14 cid14cid14 cid14cid14 23a edges labeled ε Fig 14 c 91b 910a c In words c Fig 14 identical P cid14cid14 cid14cid14 cid14cid14 cid14cid14 cid14cid14 cid14cid14 cid14cid14 34a b edges labeled α c 35b b c 910b b 58a c 58a c c 48a b c 48a c c c cid14cid14 cid14cid14 cid14cid14 cid14cid14 cid14cid14 cid14cid14 cid14cid14 63a c 34c edges labeled β c 35c c 58b b c 48b c 91a b c 73a b c c cid14cid14 cid14cid14 cid14cid14 cid14cid14 cid14cid14 cid14cid14 87a b edges labeled γ c 86c 87b b c 86a b c 86b b c 63a c c cid14cid14 87c edges labeled δ Furthermore cost function values 0 represented absence edge c Fig 14 0 P cid14cid14 23a b c cid14cid14 35a b c cid14cid14 34b b c cid14cid14 210b c cid14cid14 210a b c cid14cid14 73a c c cid14cid14 63b b c cid14cid14 73b c The calculations cost functions c cid14cid14 fact exactly VCSP instance P i1 It follows jk P starting P 0 algorithm ﬁnd nonending sequence VCSP instances P 0 P 1 P 2 halt cid14cid14 c cid14cid14 j c cid14cid14 cid14cid14 MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 477 References 1 MS Affane H Bennaceur A weighted arc consistency technique MaxCSP Proc 13th ECAI Brighton United Kingdom 1998 pp 209213 2 RK Ahuja T Magnanti J Orlin Network Flows Theory Algorithms Applications Prentice Hall 1993 3 K Apt The essence constraint propagation Theoretical Computer Science 221 12 1999 179210 4 H Bennaceur A Osmani Computing lower bounds MaxCSP problems Developments Applied Artiﬁcial Intelligence vol 22718 Springer 2003 pp 217240 5 C Bessière Arcconsistency dynamic constraint satisfaction problems Proc AAAI91 Anaheim CA 1991 pp 221226 6 C Bessière JC Régin Reﬁning basic constraint propagation algorithm Proc IJCAI2001 2001 pp 309315 7 E Boros P Hammer PseudoBoolean optimization Discrete Appl Math 123 2002 155225 8 C Lecoutre L Saïs S Tabary V Vidal Reasoning conﬂicts constraint programming Artiﬁcial Intelligence 173 18 2009 15921614 9 B Cabon S Givry L Lobjois T Schiex J Warners Radio link frequency assignment Constraints 4 1999 7989 10 DA Cohen MC Cooper PG Jeavons AA Krokhin A maximal tractable class soft constraints Journal Artiﬁcial Intelligence Research 22 2004 122 11 DA Cohen MC Cooper PG Jeavons AA Krokhin The complexity soft constraint satisfaction Artiﬁcial Intelligence 170 11 Aug 2006 9831016 12 MC Cooper Reduction operations fuzzy valued constraint satisfaction Fuzzy Sets Systems 134 3 2003 311342 13 MC Cooper Cyclic consistency local reduction operation binary valued constraints Artiﬁcial Intelligence 155 12 2004 6992 14 MC Cooper Highorder consistency valued constraint satisfaction Constraints 10 2005 283305 15 MC Cooper Minimization locallydeﬁned submodular functions Optimal Soft Arc Consistency Constraints 13 4 2008 16 MC Cooper S Givry T Schiex Optimal soft arc consistency Proc IJCAI2007 Hyderabad India Jan 2007 pp 6873 17 MC Cooper M Roquemaurel P Régnier A weighted CSP approach costoptimal planning Tech Rep RR200928FR IRIT Toulouse France 2009 18 MC Cooper P Jeavons A Salamon Hybrid tractable CSPs generalise tree structure Proc ECAI08 2008 pp 530534 19 MC Cooper T Schiex Arc consistency soft constraints Artiﬁcial Intelligence 154 12 2004 199227 20 W Cunningham Minimum cuts modular functions matroid polyhedra Networks 15 2 1985 205215 21 S Givry Minorants problèmes minimisation violation contraintes recherche bonnes relaxations à laide méthodes incomplètes Proc JNPC99 Lyon France 1999 22 S Givry F Heras J Jarrosa E Rollon T Schiex The SoftCSP MaxSAT benchmarks algorithms web site 2003 carlittoulouseinrafrcgi binawkicgisoftcsp 23 S Givry T Schiex G Verfaillie Exploiting tree decomposition soft local consistency weighted CSP Proc National Conference Artiﬁcial Intelligence AAAI2006 2006 pp 2227 24 S Givry M Zytnicki F Heras J Larrosa Existential arc consistency getting closer arc consistency weighted CSPs Proc IJCAI05 Edinburgh Scotland 2005 pp 8489 25 P Festa P Pardalos M Resende Feedback set problems Handbook Combinatorial Optimization Kluwer Academic Publishers 1999 pp 209258 26 S Fujishige T Hayashi S Isotani The minimumnormpoint algorithm applied submodular function minimization linear programming Tech Rep Research Institute Mathematical Sciences Kyoto Japan 2006 27 S Fujishige S Isotani New maximum ﬂow algorithms ma orderings scaling Journal Operations Research Society Japan 46 2003 243250 28 S Fujishige SB Patkar Realization set functions cut functions graphs hypergraphs Discrete Math 226 2001 199210 29 D Goldfarb MD Grigoriadis A computational comparison dinic network simplex methods maximum ﬂow Annals Oper Res 13 1988 83123 30 P Hammer P Hansen B Simeone Roof duality complementation persistency quadratic 01 optimization Math Programming 28 1984 121 155 31 F Heras J Larrosa A Oliveras MiniMaxSat A new weighted MaxSAT solver Proc SAT2007 Lisbon Portugal May 2007 LNCS vol 4501 pp 4155 32 P Jeavons M Cooper Tractable constraints ordered domains Artiﬁcial Intelligence 79 2 Dec 1995 327339 33 N Karmarkar A new polynomial time algorithm linear programming Combinatorica 4 4 1984 373395 34 L Khatib P Morris R Morris F Rossi Temporal constraint reasoning preferences Proc 17th IJCAI Seattle WA 2001 pp 322327 35 V Kolmogorov Convergent treereweighted message passing energy minimization IEEE Trans Pattern Analysis Machine Intelligence 28 10 2006 15681583 36 A Koster S van Hoesel A Kolen The partial constraint satisfaction problem facets lifting theorems Oper Res Lett 23 35 1998 8997 37 A Koster S van Hoesel A Kolen Solving frequency assignment problems treedecomposition Tech Rep RM99011 Universiteit Maastricht Maastricht The Netherlands 1999 38 AMCA Koster Frequency assignment Models algorithms PhD thesis University Maastricht The Netherlands available wwwzibdekoster thesishtml Nov 1999 39 VK Koval MI Schlesinger Dvumernoe programmirovanie v zadachakh analiza izobrazheniy Twodimensional programming image analysis prob lems USSR Academy Science Automatics Telemechanics 8 1976 149168 Russian 40 J Kratica D Tosic V Filipovic I Ljubic Solving simple plant location problems genetic algorithm RAIRO Operations Research 35 2001 127 142 41 A Krause C Guestrin IJCAI tutorial intelligent information gathering submodular function optimization Tech Rep CaltechCMU Pasadena 2009 wwwsubmodularityorg 42 J Larrosa Boosting search variable elimination Principles Practice Constraint Programming CP 2000 Singapore Sep 2000 LNCS vol 1894 pp 291305 43 J Larrosa S Givry F Heras M Zytnicki Existential arc consistency getting closer arc consistency weighted CSPs Proc 19th IJCAI Edinburgh Scotland Aug 2005 pp 8489 44 J Larrosa T Schiex In quest best form local consistency weighted CSP Proc 18th IJCAI Acapulco Mexico Aug 2003 pp 239244 45 CM Li F Manyà J Planes Exploiting unit propagation compute lower bounds branch bound MaxSAT solvers Proc CP2005 Sitges Spain 2005 LNCS vol 3709 pp 403414 46 R Mohr G Masini Good old discrete relaxation Proc 8th ECAI Munchen FRG 1988 pp 651656 47 JB Orlin A faster strongly polynomial time algorithm submodular function minimization Mathematical Programming Ser A 118 2 2009 237 251 48 JC Régin T Petit C Bessière JF Puget New lower bounds constraint violations overconstrained problems Proc CP01 Paphos Cyprus Dec 2001 LNCS vol 2239 pp 332345 49 M Sanchez D Allouche S Givry T Schiex Russian doll search tree decomposition Proc IJCAI09 Pasadena CA USA 2009 478 MC Cooper et al Artiﬁcial Intelligence 174 2010 449478 50 M Sanchez S Givry T Schiex Mendelian error detection complex pedigrees weighted constraint satisfaction techniques Constraints 13 1 2008 130154 51 T Schiex Arc consistency soft constraints Principles Practice Constraint Programming CP 2000 Singapore Sep 2000 LNCS vol 1894 pp 411424 52 T Schiex H Fargier G Verfaillie Valued constraint satisfaction problems hard easy problems Proc 14th IJCAI Montréal Canada Aug 1995 pp 631637 53 D Schlesinger Exact solution permuted submodular MinSum problems Energy Minimization Methods Computer Vision Pattern Recogni tion LNCS vol 4679 Aug 2007 pp 2838 54 M Schlesinger Sintaksicheskiy analiz dvumernykh zritelnikh signalov v usloviyakh pomekh Syntactic analysis twodimensional visual signals noisy conditions Kibernetika 4 1976 113130 55 M Wainwright T Jaakkola A Willsky MAP estimation agreement hypertrees message passing linear programming approaches IEEE Trans Information Theory 51 11 2005 36973717 56 T Werner A linear programming approach maxsum problem A review IEEE Trans Pattern Recognition Machine Intelligence 29 7 Jul 2007 11651179 57 M Zytnicki C Gaspin S Givry T Schiex Bounds arc consistency weighted CSPs Journal Artiﬁcial Intelligence Research 35 2009 593621