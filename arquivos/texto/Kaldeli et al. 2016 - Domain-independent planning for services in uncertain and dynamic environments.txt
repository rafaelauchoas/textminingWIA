Artiﬁcial Intelligence 236 2016 3064 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Domainindependent planning services uncertain dynamic environments Eirini Kaldeli ab Alexander Lazovik b Marco Aiello b School Electrical Computer Engineering National Technical University Athens Zographou Campus 15780 Athens Greece b Johann Bernoulli Institute University Groningen Nijenborgh 9 9747 AG Groningen The Netherlands r t c l e n f o b s t r c t Article history Received 12 May 2014 Received revised form 6 March 2016 Accepted 9 March 2016 Available online 14 March 2016 Keywords AI planning Web service composition Research automated planning provides novel insights service composition contributes provision automatic compositions adapt changing user needs environmental conditions Most existing planning approaches aggregating services suffer following limitations domainindependent eﬃciently deal numericvalued variables especially sensing outcomes operator inputs disregard recovery runtime contingencies erroneous service behavior exogenous events interfere plan execution We present RuGPlanner models planning task Constraint Satisfaction Problem In order address requirements forward service domains RuGPlanner endowed number special features These include knowledgelevel representation model uncertainty initial state outcome sensing actions eﬃcient handling numericvalued variables inputs actions observational effects In addition generates plans high level parallelism supports rich declarative language expressing extended goals allows continual plan revision deal sensing outputs failures long response times timeouts activities external agents The proposed planning framework evaluated based number scenarios demonstrate feasibility eﬃciency planning domains execution circumstances reﬂect concerns different service environments 2016 Elsevier BV All rights reserved 1 Introduction Software service infrastructures enable large scale integration heterogeneous systems solve number interoperability issues A prototypical example Web Services WS programmatic access Web resources guaranteed standardized XML interfaces deﬁned Web Service Description Language WSDL wwww3orgTRwsdl Automated planning contribute realization service infrastructures basic interoperation ad hoc process speciﬁcations offering highly automated functionalities adaptable changing user needs environmental conditions The goal compose interact automatically service providers order offer value added functionalities More precisely service composition combination operations provided different services satisfy complex objectives fulﬁlled single service instance Planning process choosing organizing actions anticipating expected outcomes aim achieving prestated Email address kaldeligmailcom E Kaldeli httpdxdoiorg101016jartint201603002 00043702 2016 Elsevier BV All rights reserved E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 31 goal 42 The analogies problem Web Service composition WSC automated planning evident exploited 11089811015 actions correspond functionalities offered different services goal derived user request inferred situation calls combination services The composition method advocated driven general aim combining services automatically demand relying solely individual descriptions looselycoupled software components declarative goal language The idea maintain generic modular repository comprises number atomic service operations book ing ﬂights arranging appointments doctor serve variety objectives minimal requestspeciﬁc conﬁguration We use domainindependent planning propose extended language expressing complex goals declarative fashion detached particularities interdependencies available services This unlike previous approaches restrict applicability domain set anticipated user needs predeﬁned form procedural template 90108 11 Characteristics service domains Service domains data intensive deal variables ranging large domains prices dates product quantities If behavior service operation modeled planning operator frequently involve ﬂuents numericvalued input arguments For example operation reserve airline ticket parametrized data associated ﬂight Whether application operation intended effect depends choice correct value input parameters One account numeric properties temperature greater 0 preconditions goal able apply arithmetic operations increase account balance certain Things complicated considers numeric information output sensing operations Due operators involving variables taking values domains large cardinality input parameters outputs number ground operators consequence size search space increase enormously In service environment planner deal uncertainty initial state consider number possibilities actual values certain variables The actual value unknown variable returned invocation sensing operator referred knowledgegathering observational returns exactly outcome possibly large set choices In fact marketplaces consisting services publicly available Web usually dominated services data sources 31 planning context modeled sensing operators A successful plan conditioned outcomes actions user want ahead buying book amazoncom costs maximum price In domainindependent setting planning agent required plan sensing planner able identify knowledge lacks satisfying goal reason ﬁnd instead relying prespeciﬁed queries 110764 The planner proactively data ﬂow plan way service return values subsequent actions For example user want mail parcel address know The plan ﬁrst consult white pages service order posting passing right address value respective input parameter For data intensive service domains determining parameters action diﬃcult determining actions belong plan Since stateoftheart planners resort kind preprocessing compiling PDDL 87 domain fully grounded encoding ontheﬂy handling runtime outputs diﬃcult implement Uncertainty applies initial state nondeterminism possible values outputs sensing actions In fact service invocation behave unexpected ways mat return failure respond act way different prescribed description The actual outcomes service invocation visible runtime plan exposed actual environmental conditions Thus problem uncertainty directly related interaction planning execution The state service domain change result deliberate actions executed planning agent activity exogenous agents active environment The activity actors repercussions compositionplan execution render invalid information relies obsolete certain scheduled actions longer applicable new circumstances For example considering partially executed composition involves circumnavigation robot external actor puts obstacle robots way middle execution robot fall revises decisions With notable exceptions 41773 context dynamicity largely overlooked existing planning approaches WSC Moreover service environments dynamicity applies availability information services services offered mobile phone appear disappear depending location phone 12 Approach We choose work directly schematic level planning domain performing grounding Following socalled MultiValued Task MPT paradigm 53 use state variables predicates basic elements describing world According view state tuple values variables leading compact encoding In remainder paper use terms planning operator action interchangeably This kept 32 E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 mind comparing planning approaches service composition use number actions refer number grounded operators grounded task exponentially larger schematic Our proposal realized RuGPlanner based translating domain goal Constraint Satisfaction Problem CSP applying state art constraint solver compute solutionplan Planning CSP ﬁts aspects particular concern service domains The encoding expected constraint solver suits MPTlike schematic planning representation constraint solving supports eﬃcient handling numeric expressions variables ranging large domains Moreover encoding suited standard WS description languages WSDL based state variables predicates complex goals expressed form constraints Finally plans include parallel actions particularly useful execution time To deal uncertainty possible mismatch offline planning actual execution results proposal relies continual planning upcoming plan steps anticipated oﬄine revised execution proceeds face inconsistencies stem newly sensed information erroneous service behavior actions exoge nous agents We alternating sequence oﬄine planning online execution orchestration wellknown concept serviceoriented computing community denotes execution composition managed In service infrastructure orchestration engine central coordinator interacts component WSs ac cordance composite process speciﬁcations We reserve similar role orchestration component interacts environment informs planner data collected decides switch planning execution vice versa Depending situation reusing parts existing plan speed process plan revision Moreover nonblocking strategy adopted respect waiting response sensing actions framework planning execution actions depend expected response Continual planning nicely incorporated CSP In fact dynamic constraint solving allows eﬃcient addition removal constraints This enables planner constantly incorporate new facts environment remove obsolete ones check possible inconsistencies react accordingly 13 A motivating example Suppose user happy learn coming days singer likes making tour country lives She like book ticket hotel room nearest upcoming concert date location meet criteria including weather conditions distance hometown availability according online agenda price willing pay overnight stay These requirements expressed form declarative extended goal Satisfaction goal requires collabo ration services coming diverse business domainsrelated traveling entertainment events maps calendars weather servicesin manner hardly anticipated Depending information returned runtime clearly possible ways goal fulﬁlled For example turn location ﬁrst upcoming concert far date hotel available budget In cases original plan interrupted revised conditions whereabouts date concert need looked To complicate things moment service fail So booking service ﬁrst hotel meets users criteria happens permanent state failure alternative hotel need looked depending result goal ﬁnally satisﬁed 14 Content organization This paper provides uniﬁed comprehensive approach domainindependent planning CSP applications service composition uncertain dynamic environments The manuscript extends preliminary ideas service composition CSPbased planning extended goals ﬁrst presented 66 An orchestration algorithm based replanning scratch described 67 The oﬄine planning framework evaluated diverse settings infrastructure smart homes intelligent devices exposed services 691192468 platform Business Process recovery case processes interference 114 However papers present methodological foundations planning treated black box serviceoriented architecture speciﬁc applications In present paper set foundation applications presented previous papers ﬁrst time formal methods algorithms syntax semantics RuG planning We introduce novel orchestration algorithm based plan revision continually altering CSP Finally new extensive set evaluation experiments provides insight behavior performance RuGPlanner presented The remainder paper organized follows Section 2 contains basic deﬁnitions algorithms pertain oﬄine working RuGPlanner We representation planning domain extended additional variables model knowledgelevel representation transformation CSP syntax semantics language expressing extended goals How resulting CSP solved constraint solver example optimistic plan produced oﬄine planner presented Section 3 The interesting case oﬄine planning interleaved execution investigated Section 4 The focus design implementation E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 33 orchestration framework characterized high level nonblocking concurrency deal number inconsistencies arise uncertain dynamic nature service environment sensing outputs violate optimistic oﬄine assumptions erroneous service behaviors contradict expected effects long response times exogenous events interfere plan execution A discussion orchestration policies implementation provided Section 5 The overall framework evaluated number scenarios Section 6 demonstrate instantiation outputtoinput parameters matchings tradeoff plan reﬁnement planning scratch case dealing actions long respond To conclude Section 7 gives overview related work concluding remarks presented Section 8 Appendix A details orchestration algorithm 2 The RuGPlanner In general conditions uncertainty initial state search space longer set states domain power set The planner resort sensing operations acquire knowledge misses necessary fulﬁll goal Sensing operations return exactly outcome possibly large set deterministic choices In respect plan computed oﬄine represents traversal sets states complete descriptions states potential achieve goal state sequence arise plans execution satisﬁes goal Such plan usually referred weak 27 Finding contextdependent plan simpler task computing strong contingent plan conditional branches satisfy goal possible state sequences arise observational effects Postponing computation alternative contingent branches till information acquired environment feasible approach WS scenarios involve numeric variables outputtoinput mappings optimistic likely paid Thus sources nondeterminism actual behavior actions execution time contradicts expected effects modeled planning domain external agents alter world unanticipated ways left treated interleaving planning execution performing continual planning described Section 4 Although planning CSP competitive modern bestperforming domainindependent planners International Planning Competitions IPC noted service environments forward differ ent challenges domains IPC In service environments complexity usually stem need complex combinatorial propositional reasoning fewer interdependencies different ac tionsservice operations 31 example contrast broadly travel domain 1 PDDL domains IPC ipcicapsconferenceorg The main challenges come sources uncertainty sensing numericvalued variables expressive power domain representation dynamic nature context sup port complex goals In following present CSPbased RuGPlanner meets requirements providing highly expressive action schema endowed number features overlooked These include support parallel actions important given large response times operations especially sensing ones handling numeric variables input parameters numeric preconditions large variety effects A powerful language expressing complex goals accommodate ordering constraints maintainability proper ties numeric expressions handsoff requirements supported The planning problem modeling accommodates incomplete knowledge informationgathering realized intuitive knowledgelevel representation automatically generated given highlevel description domain goal 21 Planning domain To deal incomplete knowledge sensing planning domain description enriched knowledgelevel representation model observational actions sensing effects Conditional effects provided Moreover planning formalism accommodates numeric functions effects mere assignments increasedecrease Another characteristic planning schema input arguments actions range numericvalued domains variables Since planning problem translated constraint solver supported variable domains integer real lower upper bounds depend underlying constraint solver Section 55 details The planning domain accommodated RuGPlanner described Deﬁnition 1 Deﬁnition 1 Planning Domain PD A Planning Domain triple PD cid2Var Par Actcid3 Var ﬁnite nonempty set variables Each variable v Var ranges ﬁnite domain D v Par ﬁnite nonempty set variables play role input parameters members Act Each variable p Par ranges ﬁnite domain D p Par Var disjoint sets Act set actions An action Act quadruple cid2ida ina preconda effectsacid3 ida unique identiﬁer ina Par input parameters preconda propositional formula Var Par conforms following syntax preconda prop preconda preconda preconda preconda preconda 34 E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 prop var val var1 var2 var1 cid10 var2 val knownvar brelvar1 varn var var1 varn Var ina val constant relational operator cid11 cid10 binary operator cid10 knownvar boolean relation indicating var known brel nary Boolean relation We write precondia disjunctions precondia denote sequence conjunctions preconditions likewise cid2 cid3 effectsa conjunction following elements assignvar v v constant v Var assignvar f v1 v2 v1 v2 Var ina v1 v2 constants f addition subtraction function increasevar v decreasevar v v Var ina v constant sensevar var Var cond_effectprop effecta models conditional effect applied state prop holds current state sensecond_effectprop effecta models conditional effect applied state prop holds state Used effects materialize outcome sensing effect satisﬁes prop s x Var Par Dx Example 1 illustrates examples actions expressed terms preconditions effects Variables Var change values result action input parameters left free assigned value planner Dx D x domain x Thus A planning state s deﬁned relation s x Dx notion state adopted encompasses set traditional states representing assignments values variables allows accommodate incomplete knowledge The domain x s given statevariable function 1 x s speciﬁc value An action applicable s cid2xcid3s cid2xcid3s D x s preconditions hold s execution leads successor state s The propositions preconda refer values variables Var parameters Par state s updates instructed effectsa refer variables Var state s We preconda holds s alternatively s satisﬁes preconda preconda evaluates true possible assignments values consistent domains variables s This implies example given state s v 1 1 v 2 1 2 action precondition v 1 v 2 applicable s As Section 22 effectsa conjunction propositions hold s s s If D x x D x s s cid15 cid15 cid15 The effects sensevar called observational knowledgeproviding observe current value vari able effects worldaltering change value variable Variables sensing effects correspond WS outputs indicated respective annotations WSDL documents An action observational worldaltering effects To provide incomplete information sensing domain extended additional variables model knowledgelevel representation distinguish sensing worldaltering actions These variables generated automatically given planning domain PD First var Var Par new boolean variable var_known introduced indicates var known state s cid2var_knowncid3s true cid2var_knowncid3s false If knownvar holds state s equivalent cid2var_knowncid3s true The role knowledgebase variables evident looking effects goals translated constraints For kvar Var participates observational effect introduce new variable kvar_response placeholder value returned respective sensing operation Since value unknown execution time kvar_response ranges kvars domain kvar_response Dkvar We maintain variable cvar Var worldaltering effect boolean ﬂag var_changed true effect takes place Thus end extended set variables V Var Kb Cv Rv Kb set knowledgebase variables Cv set changeindicative variables Rv response variables States extended include variables V Par On action descriptions PD set general constraints capture simple aspect ramiﬁcation problem 33 indirect effects actions variables For RuGPlanner general constraint implication constraint stating variable var1 Var speciﬁc values unique value var2 Var var1 vi var2 v vi constants vi Dvar1 concluded A general constraint form v Dvar2 For example let consider action moves actor certain rooms Example 1 The effect action refers assignment variable robotLoc indicates location moving robot imply change variable robotRoom The modeled function knowing location infer room cid3 22 Encoding planning domain CSP Following common practice consider bounded planning problem restrict target ﬁnding plan length k Next illustrate service domain encoded CSP given integer k The process similar described 42 alternative encodings based planning graph proposed 7029 A constraint satisfaction problem solution deﬁned follows Deﬁnition 2 CSP A Constraint Satisfaction Problem triple CSP cid2 X D Ccid3 X x1 xn ﬁnite set n variables D D1 Dn set ﬁnite domains variables X xi D E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 35 C c1 cm ﬁnite set constraints variables X A constraint ci involving subset variables X proposition restricts allowable values variables Deﬁnition 3 Solution CSP A solution CSP cid2 X D Ccid3 assignment values variables X x1 v 1 xn vn v D satisﬁes constraints C Given planning domain extended knowledgelevel representation PDcid15 cid2V Par Actcid3 aim encode PDcid15 CSP cid2 X D Ccid3 First variables X derived follows variable x V Par ranging D x 0 k deﬁne CSP variable xi CSP domain D x Actions represented variables action Act 0 k 1 boolean variable ai deﬁned This way computed plan include parallel actions fact saves time execution After having derived CSP state variables X actions preconditions effects encoded constraints Given action ida ina preconda effectsa use notation precondai propi effectai indicate preconditions propositions effects state variables corresponding state Thus precondai effectai spectively results substituting variable x X appears preconda effecta corresponding state variable xi For action 0 k Constraint encoding We add constraint ai true precondai We add constraint enforces input parameters known cid2 pina p_knowni true vpreconda v_knowni true effectsa add constraint type ai true constreffectji 1 constraint derived depending type effectj ai true For effectj cid2 cid2 Case assignvar v vari 1 vi var_knowi 1 true var_changedi 1 true v_knowni true v Var ina vari 1 v var_knowi 1 true var_changedi 1 true v constant Similarly effect type assignvar f v1 v2 Case increasevar v vari 1 vari vi var_changedi 1 true v_knowni true v Var ina vari 1 vari v var_changedi 1 true v constant Similarly effect type decreasevar v Case sensevar Case cond_effectprop effect propi constreffecti 1 Case sensecond_effectprop effect propi 1 constreffecti 1 vari 1 var_responsei 1 var_knowni 1 true j constreffectji 1 The translation effects constraints entail addition constraints hold previous state precondition For example assign variable v variable var v known In cases precondi includes Boolean relation brelvar1 varni substituted proposition variables according translation rules speciﬁc relation brel Depending relation resulting constraints complex For example adjacent_same_roomloc1 loc2 Example 1 translated disjunction includes loc1 c1i loc2 c2j location values c1i c2j possible allowed value pairs variables loc1 loc2 adjacent belong room Thus cases boolean relations evaluation true false requires knowledge possible combinations value assignments expressed form constraints exhaustive enumeration combinations grounding avoided c1ic2j cid3 cid2 On domain description restrictions referring initial state expressed form conjunction prop_initi prop_initi propositions variables x X The encoding partial description propositions initial state corresponds addition constraints prop_init0 proposition prop_init refers initial state A strong requirement knowing variables involved preconditions added precondition constraints This ensures preconditions hold possible assignments variables consistent allowed domain given state On hand excludes applicability action cases admissible For example given state s v 1 2 v_known false action precondition v 3 applied s This restriction necessary prohibit undesirable situations allowing application 36 E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 s v 1 2 3 v_known false In case constraint solver able ﬁnd assignment satisﬁes constraints undesirable sure application safe given uncertainty vs actual value Only way sense v application permitted This restriction implies RuGPlanner able handle problems partial observability ones illustrated 99 actions applied variable preconditions unknown The general constraints translated level CSP variables constraints hold states For general constraint cid3 ivar1 vj var2 v 0 k following constraint added var1i vj var2i v var2_knowni true cid3 Example 1 shows constraints associated actions result constraint encoding process Example 1 ﬁndAccBalanceaccIdPar1 prec effectssenseaccBalance CSP constraints 0ik prec constraints parameters known ﬁndAccBalancei true accIdPar1_knowni true effect constraints sensing ﬁndAccBalancei true accBalance_knowni 1 true accBalancei 1 accBalance_responsei 1 payInamountPar2 accIdPar2 prec effectsincreaseaccBalance amountPar2 CSP constraints 0ik prec constraints parameters known payIni true amountPar2_knowni true accIdPar2_knowni true effect constraints worldaltering payIni true accBalance_changedi 1 true accBalancei 1 accBalancei amountPar2i moveRobotrobotLocPar robotRoomPar prec robotLoc cid11 robotLocPar adjacent_same_roomrobotLoc robotLocPar adjacent_diff _roomsrobotLoc robotLocPar door_openrobotRoom robotRoomPar effects assignrobotLoc robotLocPar Location room general constraints robotLoc LOC00 robotLoc LOC01 robotRoom ROOM0 robotLocPar LOC00 robotLocPar LOC01 robotRoomPar ROOM0 CSP constraints 0ik prec constraints moveRoboti true robotLocPar_knowni true robotRoomPar_knowni true robotLoc robotLocPar robotLoci LOC00 robotLocPari LOC01 robotLoci LOC01 robotLocPari LOC00 robotLoci LOC00 robotLocPari LOC10 doorROOM0_ROOM1i OPEN robotLoci LOC10 robotLocPari LOC00 doorROOM0_ROOM1i OPEN effect constraints moveRoboti true robotLoci 1 robotLocPari robotLoc_knowni 1 true robotLoc_changedi 1 true CSPlevel general constraints 0ik robotLoci LOC00 robotLoci LOC01 robotRoomi ROOM0 robotRoomi_known true E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 37 Frame axiom constraints guaranteeing variables change subsequent states action affects takes place added For v V Rv 0 k 1 add cid2 jactionAff vj 0 vi vi 1 actionAff vj actions affecting v actions v appears left equality involved constraints derived effects If v appears right implication general constraint actions effects involve variable left respective general constraint included actionAff vj The set constraints comprise CSP extended additional constraints constitute goal yielding planning problem form CSP passed constraint solver The handling sensing effects allows oﬄine solver assign arbitrary values unknown variables corresponding knowledge variable var_known false value validity This way planner generates optimistic plan anticipating knowledgegathering actions return information accordance users requirements 221 Implicit predicates knowledge base Although knowledgelevel variables reﬂect state variable known capture presence absence information functions The question model fact planner knows Eg hotel room booked speciﬁc location room parameters words bookedHotel true values hPlacePar hDatePar Grounding domain feasible option input parameters range large domains Therefore separate modeling required allow distinguishing information refers input parameters enables planner appropriate outputtoinput assignments As new observations execution time knowledge base facts constraints change cid2 The planner maintains structures store knowledge values variables knowlBase map keeps values variables predicated certain parameter values fact var val var Var val Dvar given set p1 c1 pn cn pi Par ci D pi knownVars stores known values variables depend parameters For entry knowlBase p1 c1 pn cn cid18 var val virtual KB action added planning domain This virtual action list p1 pn preconditions ipi ci effect called virtual assign virtAssignvar val input parameters The constraints capturing assignment ones standard assignvar val change denoting action var_changed set true Thus virtual KB action simulates sensing action output known advance In way grounding performed respect planner knows expected limited especially comparison number possible conﬁgurations exist Virtual KB actions considered formation frame axioms like actions The planner try virtual actions actual actions Regarding knownVars list var val knownVars CSP variable var0 assigned val var_known0 true The planner starts initial state variables knownVars unknown This implies plan include virtual actions transition state represents actually knows The information included knowlBase knownVars annotated timestamp expiration time removed map considered known anymore Therefore initial state set virtual KB constructed anew time planner triggered The CSP solver choose virtual action reﬂecting knowlBase map suiting purposes assign input param eters accordingly For example consider goal delivering parcel address given person Peter Pan lives If knowlBase contains entry namePar PeterPan cid18 catalAddress Neverland planner chooses respective virtual action KBSense1 input parameters namePar PeterPan retrieve desired value catalAddress proceed reservation action 23 Goal language The goal language supported RuGPlanner provides user expressive constructs stating complex goals mere statement properties hold ﬁnal state Conditions state traversals maintainability properties distinguishing wish observe environment wish change features language supports The goal language shares common concerns aspects presented 48 distinction handsoff observations accomplishment goals The goals translated set constraints constraints formulating planning domain initial state constitute ﬁnal CSP passed constraint solver 38 E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 The goal syntax deﬁned following way Goal syntax goal conditiongoal condition_or_notgoal subgoal cid2 iconditiongoali condition_or_notgoali subgoali subgoal under_condition goal subgoal under_condition_or_not goal final props all_states props achieveprops achievemaint props find_outmaint props find_out props props propositional formula preconda deﬁned Deﬁnition 1 var var1 varn Var Par All variables parameters speciﬁed goal initial state constraints assumed undeﬁned respective knowledgelevel variables set false The final subgoal satisﬁed props holds state achieve requires props true state state traversal The maint annotation adds requirement respective propositions true state remain true subsequent states plan till ﬁnal all_states imposes props true states plan usually applied input parameters values user The find_out type subgoals enforces handsoff requirement variables respective propositions involve planner tries satisfy propositions state allowing worldaltering effect variables state find_outmaint extends handsoff requirement involved variables till ﬁnal state remain intact states plan For instance goal find_outaccount_balance 100 satisﬁed sensed value variable account_balance greater 100 allowing action alter variables value sensing action On hand goal achieveaccount_balance 100 planner possible order fulﬁll proposition invoke pay_in action increases account_balance Subgoals combined condition goal constructs impose conditions assured fulﬁllment subsequent subgoal subgoal0 under_condition goal1 satisﬁed subgoal0 satisﬁed ﬁrst time state s Deﬁnition 7 goali satisﬁed state sequence preceding s under_condition imposes beforethen relation goals state traversal particularly useful cases user like ahead altering variable sensed value satisﬁes property hand under_condition_or_not allows expression seen sort soft requirements subgoal0 under_condition_or_not goal1 fulﬁlled goal1 satisﬁable subgoal0 231 Goal examples Next present simple examples demonstrate use goal language More examples goals express requirements different scenarios 68114 Example 2 Goal 1 achievemaintbookedConcert TRUE under_condition find_outmainttemperature 0 Goal 2 achievemaintbookedHotel TRUE achievemaintbookedConcert TRUE under_condition_or_not find_outmainttemperature 0 Goal 3cid2 iachieverobotLocation roomi Goal 1 accomplished s ﬁrst state bookedConcert TRUE satisﬁed find_outmaint temperature 0 holds state sequence preceding s example maintainability requirement imposed find_outmaint practice redundant way change weather If temperature 0 Goal 1 E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 39 fails On hand Goal 2 ensures bookedConcert TRUE satisﬁed temperature zero bookedHotel TRUE looked Goal 3 states robot visit rooms house leaving order visits computed planner depending house structure 232 Goals parameters We face problem representing functions goal bookedHotelhPlacePar hDatePar desired hPlacePar hDatePar speciﬁc value refer variable In approaches actions propositional functions grounded order reach ﬁnal state satisﬁes bookedHotelGroningen 12022014 respective propositional variable appear effects operators grounded instance bookHotel_Groningen_12022014 But goal expressed satisﬁed variablebased ungrounded text Actually expression bookedHotelGroningen 12022014 implies input arguments action fulﬁlls bookedHotel set Groningen 12022014 respectively The effects action satisfy proposition setting variable bookedHotel true To capture expressions introduce notation prop withParams j parj vj prop refers proposition j parj vj parj Par hold state 1 v j constant vj Dparj hold state variable vj Var According notation write Example 3 cid2 cid2 Example 3 A goal requests booking hotel rooms different dates looks like achievebookedHotel true withParams hPlacePar Groningen hDatePar 12022014 achievebookedHotel true withParams hPlacePar Rotterdam hDatePar 13022014 Outputtoinput matchings captured goal binding parameters variables Recalling example Section 221 goal look like finaldelivery true withParams destinationPar catalAddress under_condition find_outmaintknowncatalAddress withParams namePar PeterPan The second goal Example 3 expresses request deliver address Peter Pan retrieved example sensing action provided online catalog That sensing action performed right assignment namePar PeterPan delivery performed respective output goal satisﬁed concrete semantics goal constructs Section 24 If knowledge base includes entries namePar PeterPan cid18 catalAddress Neverland namePar Alice cid18 catalAddress Wonderland following virtual KB actions added planning domain described Section 221 KB1namePar prec namePar PeterPan eff virtAssigncatalAddress Neverland KB1namePar prec namePar Alice eff virtAssigncatalAddress Wonderland Given facts planner produces plan KB1namePar PeterPan deliverdestinationPar Neverland A goal requests delivery Alice Peter Pan satisﬁable plan like KB1PeterPan deliverNeverland KB2Alice deliverWonderland readability reasons directly input parameters values actions The applicability knowlBase evident Section 4 entries knowledge base change according observations execution 24 Representing planning problem Based planning domain described Deﬁnition 1 State Transition System STS cid2 evolves specifying statetransition function γ state action sets γ applied state leads set states This fact effectsa model assignments values outcomes unknown oﬄine As described process constraints derivation Section 22 effectsa entail conjunction propositions constr_effectj hold successor state Recalling state s satisﬁes formula props possible combinations values members domains variables s satisfy props follows effect type sensevar leads set states proposition var var_response hold successor state var_response Dvar amounts Dvar different states This way function γ captures incomplete knowledge oﬄine nondeterminism case knowledgegathering actions To support possibility applying multiple concurrent actions single transition able deﬁnition plan including parallel actions function γ takes set actions argument 40 E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 Deﬁnition 4 State transition A state transition based planning domain extended knowledge level representation PDcid15 cid2V Par Actcid3 triple cid2 cid2S Act γ cid3 s xn D xn S set states S s x1 D x1 Act set actions PD γ S Act S denotes powerset transition function given state s set actions A a1 Act precondai hold s ai A application effectsai s leads set successor states S s If ai precondai hold s A γ s A cid4 s x V Par D xi D xi s By generalizing sets states S deﬁne ˆcid5S A sS γ s A We proceed deﬁnition plan ning problem plan Deﬁnition 5 Planning problem A planning problem triple P cid2cid2 S0 gcid3 cid2 transition Deﬁnition 4 S0 set states satisfy conjunction propositions prop_initi g goal Deﬁnition 6 Plan A plan consists sequence action sets π cid2 A0 Ak1cid3 k length plan sequence inPars assignment relations inParsi Ai π inParsi deﬁned p cp p ina Ai c p D p A plan instructs sensing balance account ﬁrst increasing certain line actions Example 1 represented Example 4 Example 4 π cid2ﬁndAccBalance payIncid3 inPars cid2accIdPar1 14 382 amountPar2 1000 accIdPar2 14 382cid3 We extend function ˆcid5 capture set states brought forth applying actions π starting S0inPars0 S0inPars0 S0 domains input parameters updated according inPars0 Given action sequence π cid2 A0 Ak1cid3 inPars cid2inPars0 inParsk1cid3 use notation cid5S ˆcid5SinPars0 A0 cid52S ˆcid5cid5SinPars1 A1 similarly cid53S cid5kS Thus plan consisting π inPars imposes sequence state sets S cid2S0 cid5S0 cid52S0 cid5kS0cid3 We S execution path computed oﬄine Note transition function applied subset state set resulting previous transition induced sequence input parameter assignments plan In section formally plan π potential solve planning problem P application π yields S satisﬁes goal g 241 Semantics goal The notion goal satisfaction deﬁned terms execution path S cid2S0inPars0 Skcid3 induced planning problem P cid2cid2 S0 gcid3 input parameters assignment inPars sequence action sets π cid2 A0 Ak1cid3 We use notation S props state s S satisﬁes propositional formula props We plan potential solve planning problem corresponds execution path subsumes sequence states satisfy propositions inferred goal We denote index state set execution path S We ﬁrst introduce notion minimal execution path Deﬁnition 7 Minimal execution path minS props cid2S0 Sncid3 subsequence S Sn props 0 n 1 S props Thus minS props represents execution path ﬁnal state set Sn ﬁrst sequence contains state satisﬁes props For example given execution path cid2S0 S1 S2cid3 imposed plan Example 4 minimal execution path satisﬁes proposition accBalance_known true cid2S0 S1cid3 state S1 ﬁrst state proposition holds We execution path S cid2S0 cid5S0 cid5kS0cid3 potential solve planning problem P given set initial states S0 goal g write S cid21 g S cid21 finalprops Sk props_and_known props_and_known props S cid21 all_statesprops Sj S Sj props_and_known S cid21 achieveprops Sj S Sj props_and_known S cid21 achieve maintprops S cid21 achieveprops j k j lastminS props_and_known Sj props_and_known cid2 variprops vari_known true E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 41 S cid21 find_outprops cid2 S cid21 achieveprops vari props appear worldaltering effects vari_changed false S cid21 find_out maintprops cid2 S j props S cid21 sg under_condition goal S cid21 find_outprops j k j lastminS props_and_known vari props appear inworldaltering effects vari_changed false S cid21 sg minS props_and_knownsg cid21 goal props_and_knownsg propositions corresponding sg plus requirement variables involved known S cid21 sg under_condition_or_not goal S cid21 goal S cid21 sg under_condition goal cid2 Sj S Sj knowngoal knowngoal means cid2 cid2 varipropsgoal vari_known true goali iS cid21 goali S cid21 As case constraints entailed preconditions presented Section 22 extra requirement variables involved props known added This implies setting aside uncertainty stemming sensing effects plan potential solve planning problem goal satisﬁed possible assignments variables allowed prop_init Thus given prop_init imply 1 v 2 action set goal g finalv 1 g satisﬁable If hand sensing action effect sensev plan potential satisfy goal However extra requirement variables goal known exclude plans considered acceptable For example given prop_init action set goal finalv 3 satisﬁable despite fact holds possible assignments v This strong restriction necessary prevent constraint solver presenting trivial assignments acceptable solutions Thus term potential solve refers uncertainty outcomes sensing uncertainty incomplete knowledge initial state The goal translated set constraints CSPlevel state variables added set constraints formulating planning domain The details translation process 65 A webbased graphical goal editor designed assist user specifying extended declarative goal given planning domain implemented 125 3 Planning solving CSP The set constraints resulting translation planning domain propositions referring initial state goal form CSP passed constraint solver The constraint solver computes valid assignment CSP variables model planning actions assignment corresponds optimistic plan potential solve planning problem 31 Solving CSP Prior calling solver planner prunes search space actions knows advance potential contribute goal satisfaction fashion similar 94 This preliminary process identiﬁes actions ai include goal variables effects recursively ﬁnds actions include effects variables involved preconditions actions ai directly related goal The search applicable actions solving limited set possible candidates effect considerably facilitate solvers work situations actions available Along preliminary pruning value selection strategy ﬁrst tries assign false values action variables employed In way inclusion redundant sensing unwanted worldaltering actions produced plans usually avoided Yet guarantee computed plans optimal include possible number actions fulﬁll goal The solving process proceeds combination consistency techniques search branching algorithms Con straints propagated GAC3rm algorithm 82 Usually search strategies yield goodquality plans worse performance strategies lead plans include redundant actions applying random value assign ment In remainder work constrained variable selection heuristic increasing domain value iteration strategy employed testing process stated Most constrained implies selecting vari able involved largest number constraints Variables modeling virtual KB actions selected Then iteration values increasing order takes place Regarding choice k selected depending planning domain It restricted number grounded action instances high given potentially large domains input parame ters k set domain designer based maximum size expected plans For example given domain robot locations k set 3 times number locations Due high degree parallelism characterizes produced plans solutions require considerably k actions 42 E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 32 A planning example Let consider planning problem models scenario described Section 13 The planning operators simulate functionality services reside Web provide information entertainment events maps calendar weather hotels offering possibility booking concert tickets hotel rooms The actions mapped APIs real services showed 67 Let consider user lives Groningen wants book ticket hotel room nearest upcoming concert band Neutral Milk Hotel date location meet criteria weather conditions distance Groningen availability performance day according agenda price willing pay overnight stay This wish captured nested goal presented Example 5 Example 5 Entertainment goal achievemaintbookedHotel TRUE hotelPrice 80 withParams hPlacePar eventPlace hDatePar eventDate numbOfNightsPar 1 roomTypePar single under_condition achievemaintbookedTicket TRUE withParams bandNamePar NeutralMilkHotel concDatePar eventDate under_condition find_outtemperature 0 withParams wPlacePar eventPlace wDatePar eventDate busy FALSE withParams cDatePar eventDate distance 200 withParams mapsOriginPar Groningen NL mapsDestinPar eventPlace The variables eventPlace eventDate performance place unknown oﬄine knowledge gathering service eventfulcom service provide In initial optimistic plan assigned convenient value solver respective knowledgelevel variables indicate value valid An assignment variable var value var_known false signaled optimistic plan defaultVar mark By employing conservative combination constrained increasing domain selection strategies plan generated oﬄine entertainment goal Example 6 Example 6 getEventsListNeutral Milk Hotel getNextEvent checkCalendarAvaildefaultDate getDistanceGroningen defaultPlace getTemperaturedefaultPlace defaultDate getAvailHotelsdefaultDate defaultPlace 1 1 bookConcertTicketNeutral Milk Hotel defaultDate getNextHotelInfo bookHoteldefaultHotel defaultDate 1 1 For readability reasons assignment input parameters actions Actions curly brackets correspond set actions applied parallel The values defaultPlace defaultDate default Hotel correspond values unknown eventPlace eventDate hotelId sensed getNextEvent getNextHotelInfo getEventsList computes list performances given band ordered date The service deal ing hotels provides aggregated searching booking facilities wide range hotel providers like services bookingcom orders results according criteria price getNextHotelInfo returns information price hotel id hotel formed list 4 Plan orchestration alteration CSP The suitability RuGPlanner dynamic service environments lies idea delaying computation al ternative plans called new information acquired execution Continual planning performed upcoming plan steps anticipated oﬄine revised execution progresses face inconsistencies arise newly acquired information services inconsistent behaviors actions exogenous E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 43 Fig 1 Architectural overview orchestrator agents interfere plan In setting goal considered accomplished individual actions sequence updated plans successfully executed We process starts initial plan moves interweaving action invocations plan revisions orchestration Orchestration performed applying gradual modiﬁcations CSP instance models planning domain goal constantly changing textual state The modiﬁcations correspond incorporation new facts state world removal obsolete ones reﬁnements sequence actions included computed plan useful information behavior services collected inspecting operate The orchestration algorithm characterized following traits It exploits high degree parallelism plan performing concurrent invocations handling responses nonblocking way Since execution time service operations long orchestrator able continue planning proceed execution subsequent actions allowed domain goal restrictions waiting response service invocation It provides means recover failure responses timeouts Other arbitrary service outcomes contra dict expected behavior tolerated assumption consistent timely publishsubscribe mechanism It cope possible discrepancies activity exogenous agents act parallel plan execution interfere It seeks balance effort spent computing new plan scratch reﬁning existing It takes care data ﬂow instantiating numericvalued input parameters actually sensed output parame ters This performed plan reﬁnement considering history known facts form constraints goal requirements 41 Architectural overview The architecture realizes interweaving synthesis executiontime coordination presented Fig 1 Whenever request computing plan new goal issued orchestrator asks planner compute initial optimistic plan This entails adding dynamically constraints follow goal model kept RuGPlanner constraint network models planning domain The solver takes consideration current model assignments CSPlevel variables reﬂect initial planning state delivered current context The solution CSP amounts oﬄine plan exists passed orchestrator task gradually execute update according information acquires interaction environment Every step plan involves set parallel actions mapped set respective concrete service operations executed concurrently Requests reﬁnement addressed directly solver level RuGPlanner long basic model remains changes refer initial state In way search process start propagated instance model proceed state variables instantiated according uptodate context Dashed arrows Fig 1 correspond interactions available certain assumptions Change events received asynchronously supported underlying publishsubscribe mechanism OSGi framework 68 The instantiation action operation offered speciﬁc service provider taken care 44 E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 external component responsible discovering selecting appropriate service instances The process service discovery selection interesting diﬃcult problem 109101 scope current work 42 Executiontime transition orchestration path Recalling Deﬁnition 4 STS cid2 extended order capture observations external events For simplicity assume action applied effects place prescribed ii observations events refer disjoint sets variables iii observations corresponding set actions retrieved timely application sets actions plan Failed actions byzantine behaviors modeled indirectly introducing events assign certain variables application action Deﬁnition 8 Executionlevel state transition An executionlevel state transition based planning domain PDcid15 cid2V Par Actcid3 V Var Kb Cv Rv tuple cid2e cid2S Act Ev Obv ζ cid3 s xn D xn S set states S s x1 D x1 Act set actions Ev set events An event assignment variable var val var Var participate s x V Par D xi D xi s observational effect val Dvari var_response Rv val Dvar Obv set observations An observation assignment response variable var_response val ζ S Act Obv Ev S executionlevel state transition function ζ s A O E δs cid15 γ s A A Act O Obv E Ev s assignments E O refer different variables γ deﬁned Deﬁnition 4 δ S Obv Ev S function updates state s applying assignments E O For var appears sensing effect sensevar ai A var_response observation oi O cid15 O E Generalizing sets states S deﬁne ˆZS A O E cid4 sS ζ s A O E Deﬁnition 9 Orchestration problem An orchestration problem triple OP cid2cid2e S0 gcid3 cid2e executionlevel state transition S0 set states satisfy conjunction propositions prop_init_i g goal speciﬁed Section 23 cid2 Deﬁnition 10 Orchestration An orchestration sequence triples sets actions events observations orch cid2 A0 O 0 E 0 An O n Encid3 sequence inPars assignment relations inParsi deﬁned Deﬁnition 6 Ai appears orch In orchestration sequence events observations uncontrollable sequence actions input parameters selected planner We sequence actions cid2A0 Ancid3 orch inPars execution level plan πe Similarly Section 24 extend ˆZ function capture sequence set states brought forth orch inPars starting S0 Given orchestration use notation Z S ˆZ SinPars0 A0 O 0 E 0 Z 2S ˆZ Z SinPars1 A1 O 1 E 1 Thus orchestration com prising πe induces sequence state sets orch cid2 A0 O 0 E 0 An O n Encid3 Se cid2S0 Z S0 Z 2S0 Z nS0cid3 We Se orchestration path run An orchestration path Se cid2S0 Z S0 Z nS0cid3 solution orches tration problem OP cid2cid2e S0 gcid3 write Se cid21 g Se satisﬁes properties described Section 24 We executionlevel plan πe weak optimistic solution orchestration problem OP sequence O0 E0 On En E 0 En leads orchestration path solution That events occur orchestration convenient assignment response variables satisﬁes goal We πe strong plan leads orchestration path solution sequence O0 E0 On En Since sequence events observations unknown planning time plan solution transitions actually place Strong plans plans solution matter execution behaves exist systems interested event occur transition point Due uncontrollable nature events deadends avoided orchestration bring world state goal longer satisﬁable Given partially executed plan A0 Ai1 considering current E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 45 set states Si event ei lead set states S optimistic solution problem OP cid2cid2e S cid15 cid15 gcid3 computed δs ei s Si plan Ai An 5 Orchestration properties policies Next properties main policies orchestration algorithm The algorithm constructs execution plan incrementally taking ﬁrst set actions oﬄine optimistic plan computed RuGPlanner Each optimistic plan computed considering states result application δ function step At revision step planner considers new CSP instance following current version knowledge base incorporates information included latest sets observations events The behavior orchestrator encompasses following policies presented pseudocode Appendix A 51 Soundness completeness orchestration algorithm Soundness The orchestration algorithm Appendix A sound goals respect certain properties concerning soft goals maintainability goals variables affected observations events illustrated Theorem 1 Theorem 1 The orchestration algorithm sound goal include maintainability goals involve variables affected events observations ii under_condition_or_not goals Proof We prove executionlevel plan πe cid2A0 Ancid3 computed orchestration algorithm corresponds orchestration orch cid2 A0 O 0 E 0 An O n Encid3 solution orchestration problem OP cid2cid2e S0 gcid3 The al gorithm proceeds solving sequence planning problems cid2P0 Pkcid3 round replanningplan update phase orchestrator executing respective sequence plan preﬁxes Π cid2preπ0 preπk1 πkcid3 πi cid3 solution Pi preπi preﬁx πi executed new plan computed Since πk cid2A0 k Am k ˆZSm k cid3 cid21 g k Em k Om k Am k E0 k O0 k A0 plan computed algorithm means orchestration path e orchestration path corresponding preπi need prove Se cid2 cid3 cid21 g This holds Sk S0 Si If e e Lemma 1 cid2 k ˆZS0 cid2S0 Sk e k Lemma 1 Let S0 S1 sequences state sets S0 cid21 g S1 cid21 g g goal respecting assumptions Theorem 1 Let pre S0 preﬁx S0 state initial state S1 Then sequence S cid2pre S0 S1cid3 cid21 g ˆcid10S1 O0 E0 Sk ˆcid5Sk1 Akcid3 ˆcid10Sk Ok Ek ﬁrst state S1 We perform case analysis types goals semantics sS δs O E Let pre S0 cid2S0 S1 ˆcid5S0 A0 S cid15 1 Proof Let deﬁne ˆcid10S O E S described Section 241 cid15 k cid4 g finalprops Trivial S1 cid21 g g achieveprops Trivial S1 cid21 g Similarly find_outprops g all_statesprops If S g achievemaintprops If S props S cid21 g If S props cid2pre S0 S cid2 props S1 cid3 g contradiction cid3 cid21 g S cid21 g If S cid15 k cid15 k cid2 props Sk cid2 props pre S0 cid21 g S cid21 g ii Sk props happen props include variables affected Ok Ek contradiction Similarly find_outmaintprops cid15 k cid15 k cid15 k g sg under_condition cg There cases If pre S0 cid21 g let assume ad absurdum S cid3 g This means S cid3 sg contradic tion pre S0 cid21 sg S1 cid21 sg S cid2pre S0 S1cid3 cid21 sg shown types sg ii minS props_and_knownsg cid3 cg contradiction pre S0 cid21 g b If pre S0 cid3 g pre S0 cid3 sg case minS props_and_knownsg min S1 props_and_knownsg S1 cid21 g S cid21 g ii minpre S0 props_and_knownsg cid3 cg imply S0 cid3 g contradiction Remark under_condition_or_not goal satisfy lemma case satisﬁed S0 S0 cid3 cg Then S0 achieves propssg state propssg holds subsequent state minS props_and_knownsg cid3 cg cid2 If goal includes soft disjunctive under_condition_or_not goal maintainability goals variables affected sensing actions events algorithm wrongly report fulﬁlled goal semantics violated considering complete execution path In order avoid situations execution history passed CSP validation solving result decreasing performance execution path grows 46 E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 Completeness Given nondeterminism following observations external events orchestration algorithm trapped deadend incomplete Deadends avoided planner predict actual state evolution environment orchestration event observation occur If alternative oﬄine plans bias favor speciﬁc plan based model executionlevel environmental behavior In practical situations slight change goal entail outlet deadend For example user ﬂexible respect time plan chooses date close users ﬁrst preference acceptable The support soft constraints preferences goal combination replanning interesting line future research Some simple situations currently addressed disjunctions allowed goal The orchestration algorithm remains incomplete assumes external events actions execution leads set states satisfy propositions entailed actions effects To example let consider goal finalvar true actions a2 a3 having effect assignvar true a2 precondition v2 1 a3 precondition v3 true Let assume action a0 preconditions effects sensev2 assignvb false action a1 effect sensev3 precondition vb true Starting situation v2 v3 unknown vb true oﬄine plans equal length potential satisfy goal cid2a0 a2cid3 cid2a1 a3cid3 If actual world sensed execution time v2 false v3 true execution ﬁrst plan ends deadend execution a0 a1 applicable anymore Similar situations result settings actions exclusively observational exclusively worldaltering effects In order avoid trapped deadends assumption knowledge persists good practice perform sensing actions early possible wait response proceeding worldaltering actions However practice come cost performance demonstrated example Section 632 52 Plan repair vs replanning The time spent consistency checks checks establish plan valid new context plan updates dominant overall planning execution time till goal satisﬁed evaluation results 67 Even common case output sensed time instantiating subsequent input arguments depend newly acquired information inspecting leads conﬂict considerable One way perform necessary plan updates completely disregard previous solutionplan perform replanning scratch approach initially adopted 67 Another way try reuse parts existing plan building blocks constructing new plan strategies adopted 35118115 However certain circumstances effort spent modifying plan larger effort required generate new 95 It noted scenarios interested maintaining minimal perturbation plan stability 35 original plan concern se We interested computing good quality plans short time current state onwards In orchestration approach adopt try establish middleground investing effort adjusting current plan suﬃx directly proceeding computing new scratch We try time limit usually fraction time required compute original plan perform fast search reﬁning plan In terms CSP representation plan repair amounts dealing dynamic CSP problem CSP subject sequence alterations additions removals value assignments constraints There methods rely CSP solution reuse speed task ﬁnding consistent assignment altered CSP 115 exploits nogood learning These methods beneﬁcial certain assumptions context changes correspond constraintsvalue additions deletions pertain variables scope changes CSP monotonic relaxation removal constraint restriction addition constraint The reﬁning process adopt attempts construct time limit new plan adding extra actions beginning end parallel actions existing plan allows input parameters actions current plan different values In way output collected step execution taken account input arguments subsequent actions depend output instantiated accordingly updated plan At CSP level approach amounts constructing partial assignment consisting action variables participating original plan leaving rest variables assigned search strategy Performing unreﬁnement determining certain actions original plan redundant hinder goal fulﬁllment given new initial state particularly diﬃcult timeconsuming repeatedly reserving old assignments lead tremendous thrashing 118 directly resort replanning scratch augmented plan Every time bundle concurrent actions current plan executed respective responses received average expected response time elapses necessary check remainder plan valid new context Consistency checks performed step notiﬁcation mechanism available giving opportunity planning agent compare expected planning state actual state In case context encapsulates worldaltering results services invoked planning agent independently conformance expected effects worldaltering behavior probable exogenous agents Consistency inspection quick amounts passing solver complete assignment After phase parallel execution actions step completes solver passed assignment variables parameters E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 47 assignment corresponding current plan variables state 1 assigned values delivered current environmental state If notiﬁcation mechanism worldaltering effects materialized prescribed planning domain consistency check performed In case validity checked new information sensed cid15 k1 cid15 0 A cid15 1 A Regarding new information accumulated possible sensed outputs incorporated knowledge base knowlBase Section 221 At plan revision respective virtual KB actions extracted respective constraints added CSP removing ones referring obsolete knowledge base The constraints induced knowledge base ensure reﬁnement process leads appropriate outputtoinput assignments If plan suﬃx invalid respect current environmental state attempt extend plan The maximum plan length prespeciﬁed Section 22 planning attempts More speciﬁcally cid3 Deﬁnition 6 deﬁne ˆπ cid2 A0 A1 An1cid3 n k sequence let consider plan π cid2 A nonempty action sets π respecting order Assuming k selected larger maximum number plan steps phase parallel execution A0 completes depending collected outcomes ˆπ augmented adding extra actions parallel actions suﬃx cid2 A1 An1cid3 The reﬁning process shifts plan suﬃx leaving d cid24k n2cid25 places rest To constructs partial assignment solver level ad 1 1 Ai 1 n j CSPlevel action variable representing state j Input parameters left open assigned solver depending updated initial state includes uptodate variables world Any new observation value var_response returned completion A0 added knowlBase predicated speciﬁc input parameter values A0 called This entails modiﬁcation CSP model addition respective virtual KB actions The updated model partial solution passed solver search process attempts ﬁnd assignment remaining variables If process fails ﬁnd valid solution limited time instantiations action variables removed search retracts generic model instance new solution sought partial assignment reﬂecting initial state 53 Executing parallel actions dealing timeouts One advantages RuGPlanner produced plans distinguished high degree parallelism This property prove highly beneﬁcial execution time especially service compositions likely involve sensing operations performed parallel Moreover subset bundle concurrent actions complete successfully time frame enable invocation subsequent actions plan This eager optimistic strategy based assumption fulﬁlling goal desirable goal satisﬁable Actions according domain goal depend operations pending postponed till effects slow operations depend substantiated If turns way invoking alternative service providers pursuing different plan achieve effects necessary pro ceeding reliant actions orchestrator returns infeasibility notiﬁcation tasks independent unattainable effects fulﬁlled This eagertoexecute policy works following way Consider ing sequence ˆπ A0 A1 An1 actions Ai invoked parallel generating equal number concurrent futures containers act proxies unknown result respective action The futures complete response received indicating success failure predeﬁned timeout period expires The timeout reﬂects short delay average reasonably fast service expected respond Services justiﬁably need longer time searching processing data kept list pending actors respond successfully expire respective expected long response time passes In case asynchronous mechanism receiving tiﬁcations environmental changes available assumption mechanism reliable timely notiﬁcations effects completed futures received milliseconds short timeout period After short timeout elapses collected information context changes processed decide plan reﬁne ment replanning scratch The updated plan reﬁned new computed starting initial state reﬂects new context assumes successful completion pending actions Thus considering invocation parallel actions Ai state actions A p Ai respond short time limit new initial state formed assigning variables participate effects A p values solver state 1 The values variables state stored bookkeeping later recovered case failure response timeout An action updated plan executed preconda include variable effects pendEffects pending actions Moreover goal comprises goal type g1 under_condition g2 ii variable preconda effectsa involved propositions g1 iii variable pendEffects appears g2 prevented executed In case orchestration process waits respective pending action responds expires expected delay time elapses Expiration interpreted indication erroneous behavior dealt described Section 54 48 E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 54 Dealing erratic behaviors constraint violations persistent information Erroneous responses expirations handled depending type faulty service availability alter native service implementations severity reported failure Accordingly second invocation attempt alternative service provider looked plan lead results com puted A planning action corresponds abstract service service type translated different concrete service operations execution time We assume matchmaking process undertaken specialpurpose discov ery selection component 109101 returns set functionally equivalent services selects appropriate instance invoke according criteria In cases sensed output leads constraint violation seek concrete instance retry provider functionally different choice depending nature service For services output differ depending selected provider stores returning availability price requested item makes sense try alternative instances This case services provide information instancespeciﬁc weather map If received faulty response indicates permanent failure use trying invoke service instance The respective service implementation entry list candidate services marked accordingly speciﬁc instance restrained future selections If alternative implementation action constraint forbids action question chosen subsequent plans added CSP Depending policy type service ban concern action general 0 k ai 0 action combination input parameters values v p invoked 0 k pina pi vp ai 0 The underlying assumption type failure reliability service inferred services response error code combination history services behavior An external diagnostic 30 consulted purpose cid2 Byzantine services indicate successful completion delivering expected results indirectly toler ated threatening consistency plan orchestrator consistently timely informed actual state world Consistency checks performed basis latest change events step The preconditions actions checked actual instead expected environmental state In way example trying door orchestrator wait receiving change event door opened Spotting service abnormal diﬃcult task Separate dedicated monitoring techniques required decide service byzantine inspecting behavior services infer unusual patterns 91 To prevent orchestrator repeating invocations malicious services upper limit set number times certain operation consecutively called input planning state This way enforcing fairness 27 eventually exit execution loop 55 Implementation The framework interleaving planning monitoring execution implemented akka library Scala akkaio builds theory actor models 4954 Akka provides means building scal able faulttolerant concurrent applications high abstraction level based asynchronous nonblocking lightweight eventdriven programming model The orchestration component RuGPlanner service environment correspond different actors independent entities operate concurrently communicate asynchronously exchanging messages Each componentactor supervise set smaller actorschildren represents lowerlevel constituent entity responsible certain functions assigned All services participate service environment modeled individual actors overseen parent environment actor The parent actor delegates requests service calls receives orchestration com ponent respective childactor simulates requested service The servicelevel actor processes message reacts accordingly depending behavior wish simulate replying message includes output values indicates failure raising exception taking long respond sending message Each child treated separately fault handling directives stop resume restart escalate implemented parent actor depending type failure failing service actor Servicelevel actors connected real services OSGi bundle interfacing physical domotic device 68 API service available Web 120 Concurrency dealt futures retrieve results parallel invocations nonblocking way described Algorithm 1 Each futures lifecycle treated separate callback amounts generated specialpurpose actor waits reacts futures completion These callbacks executed order parallel depending service behavior entail speciﬁc modiﬁcations CSP shared Atomicity operations CSP ensured Scala Software Transactional Memory library nbronsongithubcomscalastm takes care coordinating access shared data concurrent threads Regarding constraint solving use Choco version 2 constraint programming library 25 provides large choice implemented constraints variety predeﬁned custom search methods supports dynamic addition removal constraints In current implementation supported types state variables enumera tions integers In Choco variables large domains represented lower upper bounds E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 49 propagation events concern bound updates An integer variable undeﬁned bounds corresponds interval 21 474 836 21 474 836 Real variables supported Choco investigating impact planning performance left future work 6 Evaluation To evaluate time performance planning orchestration framework complex goals planning mains execution circumstances consider test cases marketplace services Web planning agent communicates execution environment synchronous manner ii setting exogenous events present planning agent asynchronously notiﬁed We perform number tests scalability respect number factors number grounded actions variables main size need sensing All scenarios presented followings tested Core i5 250 GHz 4 GB RAM running Ubuntu 1210 61 WS marketplace Consider example attending concert presented Section 32 In setting source information context changes responses service invocations safely assume external actor interferes plan The scenario involves sensing actions plan reﬁnement process repeatedly care appropriate instantiation input parameters For example information upcoming bands performance acquired input parameters actions depend concerts date place instantiated outputs getNextEvent action instead random convenient values assigned oﬄine We presented run actual services Web employing orchestration algorithm plans scratch step 67 The run shows situation place ﬁrst upcoming concert turns far At initial state variables referring weather distance unknown included knownVars knowledge predicated input parameter values stated knowlBase Since retrieving facts included knowledge base lead solution planner adds following sensing actions plan ﬁrst retrieval performance respective actions sensing new distance weather hotel list Reﬁnement performed information performance instantiated Then information weather calendar availability distance hotel rooms new whereabouts collected parallel Since new information violate goal requirements existing plan consistent ticket booked However proceeding hotel room reservation ﬁrst hotel provider list default order increasing price returns permanent failure The policy dealing bookHotels failure response case forbid called input arguments Thus reﬁnement process enforces investigation provider list available hotels The sequence steps taken orchestrator summarized Example 7 Example 7 getEventsListNeutral Milk Hotel cid3 evList known getNextEvent cid3 eventDate 20140205 eventPlace Brussels Reﬁne plan assignment outputs inputs actions plan suﬃx In parallel checkCalendarAvail20140205 cid3 calendarAvail true getTemperatureBrussels 05 Feb 2014 cid3 temperature 11 getDistanceGroningen Brussels cid3 distance 360 getAvailHotels20140205 defaultPl 1 single cid3 hList known Sensed value 360 distance violates constraints Reﬁne plan Updated plan adding extra actions plan suﬃx getNextEvent cid3 eventDate 20140208 eventPlace Amsterdam Reﬁne plan information date place changed In parallel getDistanceGroningen Amsterdam cid3 distance 182 checkCalendarAvail20140208 cid3 calendarAvail true getTemperatureGroningen 08 Feb 2014 cid3 temperature 11 getAvailHotels20140208 Amsterdam 1 single cid3 hList known bookConcertTicketNeutral Milk fHotel 20140208 cid3 ok 50 E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 getNextHotelInfo cid3 hotelWS Chancellor Hotel hotelPrice 60 Reﬁne plan assignment outputs input parameters actions plan suﬃx bookHotelChancellor Hotel 20140208 1 single cid3 null A failure occurred Reﬁne plan banning bookHotel input parameters getNextHotelInfo cid3 hotelWS Fairmont Hotel hotelPrice 75 Reﬁne plan assignment outputs input parameters actions plan suﬃx bookHotelFairmont Hotel 20140208 1 single cid3 hBooked true The plan reﬁned response action invocation includes newly sensed output consistency check existing plan suﬃx fails This happens input parameters subsequent actions updated new information violates constraint If response indicates success ok action include knowledgeproviding effects actions executed A response indicates failure null calls plan reﬁnement The travel shopping scenario widely example 1107810267 adapt real virtual services derived variety application domains making online appointments shopping shipping traveling learning entertainment events obtaining general purpose information In test cases structurally different plancompositions achieve given goal Eg planning items purchase shipment main steps composition like selecting seller ordering paying providers offer respective services If inconsistency occurs execution usually resolved extra actions invocations looking shop shipping service Therefore time performance better planning fromscratch approach 67 Moreover support parallel execution contributes reducing overall orchestration time In total domain consists 42 operators amounting millions grounded operators 33 knowledgeproviding The results running number diverse scenarios combination goals execution behaviors summarized Table 1 goal goToConcert corresponds motivation scenario described In order avoid irregularities actual response times invocations WSs simulated Service responses sensed information erroneous behavior controlled test execution behaviors All operations simulated respond 1 second 1 second extra waiting time change events implied invocations expected received The upper time limit reﬁnement resorting replanning scratch set half time planning scratch invocation The time bootstrapping transforming planning domain goal CSP 14 seconds 62 Scalability tests We test scalability offline planner respect increasing number ungrounded actions increasing size input parameters grounded operators variables The experiments run variations domain Section 61 typical service descriptions WS marketplace The goal combination going concert renting car booking appointment doctor plan satisﬁes consists 14 actions In Fig 2 CSP plan creation time vs number actions domain plotted For evaluation create copies base domains variables actions actions logic preconditions effects different variables One notices 510 operators 690 variables 9 seconds required construct CSP 96 seconds compute plan It emphasized size domain amounts order 1012 grounded actions To test effect number grounded operators planning time number operators constant equal 42 Section 61 increase domain size input arguments variables type integer The experiments domain size input arguments variables including knowledge variables impact planning time The planning time domain 37 variables having maximum domain range advised underlying constraint solver 21 474 836 21 474 836 38 seconds variables domains Table 1 Results WS marketplace domain time seconds Goal Appointment SelectbuyCd goToConcert buyBookship Travel combinedGoal cid11 actions initial plan 5 6 9 9 15 17 Reﬁne time cid11 attempts 30 5 45 3 64 6 104 6 73 5 115 10 137 15 182 19 Plan scratch time cid11 attempts 12 1 32 2 22 1 39 2 21 1 28 2 25 2 44 4 Consistency check time cid11 attempts 56 10 62 11 35 9 74 10 45 8 116 13 163 19 216 24 Total orchestration time 25 29 23 38 32 46 62 79 E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 51 Fig 2 Time constructing CSP domain time computing plan seconds vs number actions domain Fig 3 Time plan computation seconds vs number unknowns sensing actions performed succession range 10 Considering action WS marketplace domain input parameters type integer number grounded actions case order 10343 Dealing scenario infeasible planner resorting compilation fully grounded encoding To explore impact variable domain size perform tests increasing plan lengths For evaluation construct domain consisting increasing number interdependent actions performed sequence achieve goal The experiments limit 50 number variables actions plan planning time affected variables domain range In domain consisting 80 variables respective actions affect planning time 54 seconds domain range 1 10 1255 domain range 1 104 This result conﬁrms constrainedincreasing domain selection strategy little inﬂuenced fact number possible assignments CSP exponential variable domain size An interesting line future research investigation planners performance case domains real variables To investigate impact unknown variables initial state designed domain knowledge variable observed distinct sensing action Fig 3 shows plan computation time respect increasing number variables domain range 1 100 sensed fulﬁll goal Sensing actions dependent performed sequence plan plan length equal number unknowns Because notion state RuGPlanner encloses set fully instantiated states number possible initial instantiated states knowledge variables domain size affects planning time respect number sensing actions included plan interdependencies entailed constraints This important considering compilation contingent planning problem problem solved classical planner 2 general case linear number possible initial states exponential number uncertain ﬂuents On hand approaches rely translations advantage high eﬃciency classical planners In order test planners behavior continual calls plan revision designed situation actions fail consecutively The domain instance consists copies actions preconditions effects involving variables At step execution action responds failure plan reﬁnement replanning consecutively required In ﬁrst case failure addressed adding different equivalent action copy beginning plan second case new plan consists different action copies In cases number 52 E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 Fig 4 A 3 3 grid representing rooms doors navigated robot failures affect time required plan repair replanning For situation 50 consecutive failures equivalent number action copies time reﬁning plan 08 11 seconds Similarly time computing new plan scratch time computing original plan To sum tested performance RuGPlanner respect different factors The evaluation demon strates RuGPlanner eﬃciently deal high cardinalities order 107 input parameters operators typical dataintensive WS domains The beneﬁts nongrounding clear considering main translate prohibitive number grounded action instances Moreover working level set states enables RuGPlanner accommodate large uncertainty number fully instantiated states correspond uncertain state number unknown variables 63 Robot moving grid To investigate behavior RuGPlanner environment calls continuous plan revisions use example combines single run orchestrator types runtime contingencies exogenous action interferes plan malicious service byzantine behavior operation long response time The example concerns robot moving house setting depicted Fig 4 The setting IPClike domain RuGPlanner compete approaches translate contingent version problem classical planning problem scale eﬃciently size grid However experiments domain demonstrate generality RuGPlanner deal kinds contingencies previous approaches ignore help explore tradeoff plan reﬁnement replanning scratch The rooms grid domain connected doors open closed locked The robot open door stands sides door unlocked For opening doors leading room R22 robot needs hand special password retrieve invoking slow sensing operation requires 40 seconds respond The robot instructed action presented Example 1 locations adjacent connected dashed lines Fig 4 additional requirement locations belong separate rooms intermediate door open Initially robot resides location R00_R01 goal reach location R22_R21 ﬁnal state RX_RY location room RX connected location room RY All doors initially closed unlocked The initial plan guides robot R22 R01 R11 R21 instructs calling sensing action retrieving necessary password second state plan Since sensing action takes long respond checked actions plan suﬃx depend password retrieval Indeed robot moving till door leading R22 However robot R01 locks door leading R11 R21 Such contingency requires drastic change robots planned route dealt augmenting plan The reﬁnement process fails replanning scratch performed The new plan leads robot R02 R12 Due bad luck turns door connects R02 R12 behaves unreliably opening operation responds success door actually opened As result augmented plan includes second attempt computed The door behaves way second time new reﬁned plan produced However opening door operation invoked invocations corresponding planning state attempted action turn forbidden subsequent plans Since reﬁned plan given prohibition speciﬁc door opening operation new plan computed scratch The alternative route directs robot R01 R11 R12 However E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 53 Table 2 Test results robot room scenario varying grid size time seconds Total orchestration time counts time elapsed issuing goal satisfaction failure including time required actions execute respond Test unlock3 unlock3 unlock4 unlock4 unlock5 unlock5 unlocknotInRoom3 unlocknotInRoom3 unlocknotInRoom4 unlocknotInRoom4 unlocknotInRoom5 unlocknotInRoom5 permanentlock3 permanentlock3 permanentlock4 permanentlock4 permanentlock5 permanentlock5 Reﬁne time cid11 attempts 09 3 29 5 60 7 08 3 39 5 13 7 02 3 134 8 815 12 Plan scratch time cid11 attempts 03 1 10 4 33 1 128 6 392 1 2026 10 06 1 24 4 32 1 195 6 593 1 1768 8 03 4 04 4 81 9 83 9 1471 13 1356 13 Consistency check time cid11 attempts 04 11 05 13 35 26 32 24 103 24 124 33 12 18 13 18 41 21 52 26 228 33 230 33 03 8 03 8 52 23 49 22 138 27 143 31 Total orchestration time 24 25 62 69 102 327 39 41 53 79 158 268 18 18 61 49 317 243 robot stands door leading R22 password sensing action expires responded expected maximum timeout treated failed action Since way collect password impossible satisfy goal An alternative policy try reinvoking expired actions hope provide required output During orchestration run 14 validation checks 4 attempts reﬁne plan including failed ones taking 66 seconds total 3 plans computed scratch including initial taking 18 seconds altogether One notes evolution orchestration run actually highly depends structure generated plans For example example assuming doors opened remotely independently location robot makes difference opening doors scheduled parallel beginning plan delayed till later steps Although plans consist number actions equally good desirable push actions early possible plan way erroneous service execution detected earlier Moreover operations expected long time complete preferably scheduled early stage plan 631 Reﬁnement replanning scratch The test cases presented Table 2 investigate tradeoff attempting plan reﬁnement versus planning scratch All tests variations planning domain represents robot moving adjacent rooms connected doors open closed locked In tests goal robot leftmost room rightmost room starting initial state doors closed unlocked Execution times expressed seconds total orchestration time counts time elapsed issuing goal satisfaction failure Plan scratch time includes time computing initial plan The numbers 35 indicate dimension grid refer 3 3 4 4 5 5 grid respectively Tests marked attempt plan reﬁnement updated plans step orchestration process computed resorting directly replanning scratch The upper time limit reﬁnement process set half time required planning scratch invocation In runs robot proceeds external actor repeatedly hinders route robot cross open door troublesome agent locks door All operations simulated respond 4 seconds 2 seconds extra waiting time change events implied invocations expected received The conservative mostconstrainedincreasing domain strategy planning scratch 3 3 4 4 grid tests reﬁnement process cases For tests 5 5 grid initial plan takes 15 minutes complete default search strategy random value assignment approach employed planning scratch search restarting time ﬁxed increasing node limit reached The resulting plans optimal ones include redundant actions In tests signiﬁed unlock robot open unlock rooms Thus time robot unexpectedly encounters locked door update plan ﬁrst unlocking opening door targeted exogenous agent In cases attempting plan reﬁnement instead directly planning scratch saves considerable time 4 4 5 5 grids As expected longer time plan generation takes beneﬁt gained employing plan extension simulations updated plan involve addition 54 E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 Table 3 Results tests long sensing actions time sec Test pswdOpen3opt pswdOpen3subOpt pswdOpen3worst pswdOpen4opt pswdOpen4subOpt pswdOpen4worst pswdOpen5opt pswdOpen5subOpt pswdOpen5worst Reﬁne time cid11 attempts 05 1 08 2 47 4 41 1 110 3 121 6 128 1 335 3 634 8 Consistency check time cid11 attempts 06 7 09 9 11 11 108 8 183 13 137 22 585 11 609 14 716 20 Total orchestration time 76 88 121 113 155 275 144 281 437 actions beginning fast compute The approaches lead slightly different overall sequences steps redundant actions included times especially employing random value assignment strategy To investigate performance orchestration situations elaborate plan reﬁnement required let assume robot unlock door resides room different ones door connects Whenever exogenous agent locks door robot cross robot ﬁrst adjacent room unlock door open route This situation reﬂected unlocknotInRoom tests Table 2 Also tests resorting plan reﬁnement leads considerably better performance However cases way augment plan tackle new contextual situation time devoted attempting plan reﬁnement wasted This case simulated permanentlock tests concern planning domain unlock robot capability unlock doors Thus time robot deal unexpectedly locked door reﬁnement attempt fails drastically different plan In case resorting directly replanning scratch actually saves time The experiments conﬁrm balanced approach attempting plan reﬁnement planning scratch yields best results minor changes existing plan resolve inconsistencies complete knowledge external events In cases radical plan revision required skipping plan reﬁnement phase yields better time performance The RuGPlanner adopts middleground approach based following rule thumb plan revision process takes long probably indication new situation calls plan looks different original favor replanning scratch 632 Timeout sensing actions The tests simulate situations actions justiﬁably long time respond aim demonstrating different plan structures affect overall orchestration process In tests open door robot know 3digits password speciﬁc door retrieve invoking sensing action location The robot uppermost left room rightmost starting initial state doors closed passwords unknown robot In tests simulating execution behavior password sensing actions 40 seconds respond moving actions 8 seconds opening door takes 1 second average waiting time bundle parallel actions execute 10 seconds Depending planning states sensing actions scheduled robot end waiting shorter longer time sensing action respond Table 3 summarizes results different structures initial plans passed execution monitoring orchestration algorithm All plans consist number actions state actions placed varies opt refers optimal situation password sensing actions plan concentrated ﬁrst state subOpt plan actually generated RuGPlanner employing random values assignment restarts searching strategy worst plan password sensing action scheduled respective door opening After invocation parallel actions sets validation check possibly reﬁnement attempt performed actions respond short timeout expires Given validated updated plan checked possible proceed plan actions require knowledge speciﬁc password Thus robot possible password sensed happens subOpt simulations Whenever pending action responds orchestration goes executing updated plan suﬃx The results Table 3 demonstrate large gain time actions long respond scheduled early possible plan The larger domain slow actions involved larger difference optimal worst approach 633 Discussion The evaluation demonstrates RuGPlanner performs domains large ground involve variables especially observation variables large domains E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 55 Producing shortest plan lead optimal orchestration runs The plans opted ones include actions parallel early possible However RuGPlanner produce desired structure plans cases computes suboptimal ones Moreover orchestrator trapped repeating sequence steps managing reach goal This stuck loop situation arise cases suboptimal plans certain pattern repeatedly produced malicious behavior external actions lead certain execution deadlock To example assume robot wants R00 R02 Fig 1 door leading R01 R02 opened robot resides R00 If external actor closes door leading R01 R02 time robot tries pass revised plan instructing robot R00 reopen door forth repeatedly generated The orchestrator way identify trapped loop consistent behavior exogenous actor decision follow alternative plan reach R02 rooms R10 R11 R12 hope doors route blocked A similar deadlock result case need replanning robot resides R01 planner generates suboptimal plan directs robot ﬁrst R00 forward R01 To avoid situations randomness inserted cases orchestrator repeats sequence actions repetition included current plan For example orchestrator try randomly choose set actions applicable current state hope new state planner escape deadlock situation 7 Related work A great number approaches proposed literature describing constructing executing main taining Web Service compositions research approaching topic different viewpoints including issues related service discovery matchmaking 109101 Quality Service requirements 551124 support dynamic reconﬁguration channelbased coordination language Reo 8175 Several methodologies inspired work AI planing applied deal WSCs However commonly agreed deﬁnition service composition planning problem diﬃcult compare quantitatively approaches proposed literature Some pro posals use domainindependent planners 10788 applicability limited simple service domains The PKS 100 Planning Knowledge Sensing planning generating compositions knowledge level 85 Services modeled primitive actions speciﬁed STRIPSlike formalism domainspeciﬁc design rules required capture additional effects triggered sensing actions search control constraints A Partial Order Planning approach adopted 98 60 adaptation FF Fast Forward planner 59 construct Business Processes atomic IT entities described planninglike manner Another line research builds modeling WS domain Situation Calculus 8990110111 The idea set user objectives terms suﬃciently generic Golog program task composition amounts customization generic template runtime respect speciﬁc user constraints preferences Hierarchical Task Networks HTN 37 means represent generic procedures 12110876483 SHOP2 highly optimized HTN planning decompose process models primitive operatorsatomic services SHOP2 support numeric variables tests scalability terms domain cardinality especially regard unknowns provided In 76 information gathering performed planning time issuing list appropriate queries collect information missing initial state Nonblocking strategies performing search waiting queries respond similar principle approach employed RuGPlanner utilized improve time computing plan An extension algorithm dealing information change operation composition presented 4 considering solution correct expiration time A hybrid approach combines domainindependent planning HTN adopted 7172 As opposed approaches view services atomic planning operators research track considers stateful services behavioral descriptions impose constraints possible interactions service en gaged In 1131041021031819 component services seen state transition systems derived BPEL description explained 113104 transitions correspond asynchronous message exchanges resulting atomic action execution The requirements desired composite service expressed temporal logiclike language symbolic techniques inspired model checking computing executable process In 17 approach extended support requirements handle uncontrollable events ﬂight delay Another interesting approach abstracts services transition systems socalled roman model presented 1316141528 From perspective composition problem treated problem coordinating executions given set available services described ﬁnite state automata The objective described terms target servicetransition diagram conforms desired interactions 71 Planning domains goal speciﬁcations PDDL Planning Domain Description Language standard language deﬁning planning problems It International Planning Competitions 1998 87 undergone extensions 3639 PDDL extensions represent world objects predicates numeric expressions constructed functions 56 E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 associate objects numeric values Preconditions numeric ﬂuents comparisons effects assign crease decrease scaleupdown values numeric functions numeric expressions allowed appear arguments predicates values action parameters In contrast RuG planner based variablevalue domain representation similar concept Multivalued Planning Task MPT encoding 5352 An algorithm automatically translating PDDL domain description MPT described 53 The extended declarative goal language supported RuGPlanneras described Section 23 enhances traditional speciﬁcation goal set ﬁnal states providing number additional features allow expression constraints state trajectories handsoff observational requirements A short overview basic operators presented 66 Many elements language inspired XSRL XML Service Request Language 178 formulating complex requests standard business processes PDDL3 38 extends PDDL supporting richer goal language provides state trajectory constraints respected entire sequence plan states soft goals desired necessary achieve The goal language supported RuG planner expressive PDDL3 capture preference goals under_condition_or_not goal operator seen form soft requirement parallels drawn PDDL3 modal operators sometimebefore The RuGPlannergoal language shares concerns work presented 484446 deals meeting user goals environments similar Unix operating Since incomplete information intrinsic domains distinguishing satisfaction mere observational goals essential A clear distinction achievement information gathering goals kept 98 purpose composing semantically annotated WSs transformed PDDL operators Systems follow planning Model Checking approach builtin support temporally extended goals allow imposing constraints state trajectory speciﬁcation safety liveness properties In 113104 EAGLE goal language based temporal logics extended preferences composing WSs modeled state transition systems Several goal speciﬁcations composing WSs away purely domainindependent declarative spirit require set possible solutions predeﬁned form procedural template form HTN methods 4 Golog program 110 target state automaton 12 In context runtime synthesis responsible customizing highlevel procedural speciﬁcation respect user constraints preferences From perspective work 110111 extends approach presented 110 Golog generic procedures customized based hard soft constraints yielding compositions optimal respect An interesting proposal fusing procedural declarative goals allow greater ﬂexibility expressing goals 106 The goal language supported RuGPlanner hand speciﬁes achieved search control knowledge guide planning process form control rules form task decomposition 72 Planning incomplete information sensing Service environments inherently uncertain initial state unpredictable runtime behavior In XLPLAN planning 7172 external procedure calls implemented linked callback functions return Boolean indication predicate added deleted world state In 60 nondeterminism stemming set alternative action outcomes treated determinization nondeterministic ac tion compiled set deterministic actions possible outcome Although performance acceptable binary variables strategies resort determinization effective cardinality possible outcomes creases Some approaches address problem incomplete information simulating worldaltering effects composition process assuming complete independence sensing worldaltering actions setting limitations interleaving knowledgeproviding worldaltering actions In 90110 information providing services modeled external function calls Golog programs The approach relies assumption information persists reasonable time actions use executed altered subsequent action inside outside composition It taken granted sensing actions performed worldaltering effects actions precede plan materialized simulated Similarly 764 information gathering execution treated task disconnected planning execution ceased sensing actions return Analogous assumptions 9798 subset plan consisting exclusively sensing actions extracted executed ﬁrst Algorithms searching knowledge level proposed research line focusing composing services state transition diagrams based use Binary Decision Diagrams One shortcomings initial algorithm presented 104 deal Booleanvalued data Extensions nonBoolean data considered 10218 suffer degrading performance cardinality grows As shown 19 belieflevel construction grows exponentially branching factor conditional solution Given large number possible outcomes sensing actions unforeseen contingencies planning potential circumstances appear execution recommended strategy service domains E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 57 A different knowledgelevel formulation instructed PKS 85 Although version PKS 85 deal high ranges possible outcomes interesting investigate performance extended PKS presented 99 allows generation conditional plans cover numericvalued outcomes means intervalvalued functions Since stateoftheart planners resort kind preprocessing compiling PDDL domain fully grounded encoding ontheﬂy handling runtime outputs diﬃcult implement The problem incorporating data pro duction ﬂow plan investigated 4547 Although 47 considers planning graph approach basic idea adopting CSP encoding amounts lifted grounded representation adopted RuGPlan ner In 56 data production addressed considering sets additional potential constants instantiate outputs applying adapted version conformant FF 22 Inputoutput matchings dealt based axiomatizations 5755 describing ramiﬁcations entailed sensing implications entailed outputsnewly created constants ser vicesoperators However approach limited propositional effects problem search space explosion considering output constants remains Independently problem WSC large advances performance contingent planners operate uncertainty For example subtle logical formulas applied compact representation pruning search ANDOR graphs belief state space 112 Instead explicit encoding possible states approaches advocate implicit representation beliefs keeping history actions observations inferring proposition holds 58105 Interestingly approach translating contingent conformant problems case sensing available classical planning problem state space belief state proposed 9623 However contingent planners tested domains outcome sensing actions ranges large domains passed input subsequent actions erroneous situations interference external actions considered An action language provides sensing actions probabilistically qualitatively nondeterministic effects proposed 63 belief graphs compute conditional plans However best knowledge versions contingent planning consider observational effects propositional If application domain characterized intractably large set contingencies plan monitoring repair approach probably appropriate 73 Replanning interactions environment In dynamic uncertain domains acting sensing planning intertwined imposing plan continuously adapted knowledge acquired execution CIRCA 93 earlies implementations reactive planning systems based nondeterministic ﬁnite automaton derived world model representation safety conditions possible state transitions State changes entailed events prespeciﬁed world model To deal state explosion problem method abstracting variables states 92 providing evaluation considering domains numeric aspects SimPlan 64 models set possible execution sequences stochastic automaton exogenous events represented nondeterministic transitions associated probability The method makes use extra guidelines expressed temporal logic formulas avoiding unnecessary state expansions Although evaluation provided model expected suffer state explosion Some planning approaches WSC provide simple reaction mechanisms contingencies usually handcoded domain dependent In 98 partial order planner success conditions included actions effects spec iﬁcations Replanning triggered causal link indicating interdependency actions violated inconvenient outcome runtime violated links avoided replanning search process In 73 XLPLAN planning extended event listener new facts offers replanning capabilities relying closedworld assumption In 17 exogenous events treated reaction goals state certain actions place The computed composition conditional treestructured plan including branches recoverable goal states The approach suffers performance problems branching factor grows Markov Decision Processes MDP constitute established mathematical model probabilistic planning problems planners deal probabilistic models 2012243 Replanning extensively em ployed approaches work determinized version probabilistic domains like FFReplan ﬁrst presented 59 extended 123 A common principle shared FFReplan RuG planner rely optimistic assumptions future compute solution selecting convenient outcome A strategy identifying actions unrecoverable outcomes adding precautionary actions optimistic plan avoid deadends described 34 A Monte Carlo technique approach casting problem Partially Observed MDP reevaluating utility function continuous multidimensional resource space face executionlevel contingencies proposed 11 There approaches work probabilistic domains partial observability sensing actions In 105 replanning approach determinized representation extended domains During plan execution belief states updated accordingly replanning triggered initial belief state sampling consistent world The approach tested domains numeric observation effects A framework switches classical planning planning small abstractions problem encountering sensing action uncertain outcome proposed 43 This approach deal noisy sensors set outcomes kept small 58 E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 Many approaches replanning try reuse parts existing plan guide search new The idea certain circumstances work adapting current plan requires time planning scratch sacriﬁcing quality A reﬁnement heuristic partial order plans proposed 115 involves removing potentially problematic actions current plan incrementally adding extra actions reaching valid plan An approach focuses preserving plan stability replanning minimum changes previous plans presented 35 However depending circumstances kind changes state world work required repairing old solution greater planning completely disregarding previous solution 95 A balanced approach replanning scratch plan repair proposed 21 plan bias heuristic search new problem In case search expands probabilistically choosing heuristic search new goal reuse actions goals past plan The approach speed planning time classical deterministic domains All approaches propositional Previous frameworks tightly integrate planning monitoring execution information gathering include 484446 74 concerned building planning agents dynamic uncertain environments The RuGPlanner shares principles work tractable closed world reasoning updates knowledge preconditions observation effects assign values runtime variables In 86 framework combines temporal planner ix Tex 41 execution controller plan repair replanning mechanisms presented The idea balancing plan repair replanning principle similar The ixTex planner uses CSP techniques deal timepoints numeric variables executionlevel constraint violations starting different action change model The use PartialOrder Causal Link approach limits eﬃciency framework search space grows In context WSC generic algorithm performs continual replanning scratch invocation knowledgeproviding action described 7980 More recently continual planning framework multiagent planning incomplete knowledge presented 23 Decisions depending unknown facts postponed use assertions special virtual actions trigger replanning knowledge preconditions achieved execution time Replanning annotations context lead postponing sensing till actions need information observed ineﬃcient terms total execution time lot timeconsuming sensing required Interestingly assertions learn new operators available planning agent execution Similarly representation adopted RuGPlanner multivalued state variables model domain propositional encoding 74 Planning CSP Constraintbased techniques extensively scheduling problems reason time resources 261077 Applications constraint satisfaction approaches planning like use mature 7 A direct transformation planning problem CSP presented 42 constraints preconditions effects actions frame axioms Alternatively 84 authors propose formulation based successor state constraints similar ones captured planning graph yielding improved performance In 8 enhanced reformulations based multivalued state variables transformations adhoc tabular constraints applied Several techniques aim reducing search space improving eﬃciency search strategies investigated 9 A CSP encoding producing parallel plans proposed 6 use constraints model synchronization transitions possible assignments state variable A compilation GraphPlans planning graph CSP use constraint satisfaction search techniques improve Graphplans backward search proposed 7029 Constraints context partial order planners 116 Mixed CSPs distinguish controllable decision variables uncontrollable parameters corresponding environmental uncertainty contingent events modeling domains incomplete knowledge contingent events 3250 In 50 mixed CSP solving control problem aerospace domain Although planning problem particular deﬁned terms constraintbased automata environmental constraints interesting online solution followed New contingent plans built scratch incrementally increasing planning horizonspoints time plans provide decisions increasing subset possible world states A CSP encoding conformant probabilistic planning problem observability probabilistic actions 6162 An ap proach integrates constraintbased reasoning planning graph temporal domains predictable exogenous events happen known times described 40 To best knowledge CSPbased planners far generating oﬄine plans grounded propositional domains decoupled execution environment The suitability constraint solving techniques domainindependent planning setting combines uncertainty sensing unpredictable external events investigated In context dynamic CSP solution reuserepair techniques use information collected previous searches speed search altered CSP prove helpful This method makes use nogood recording proposed 115 Performance improves solving CSP differs constraint added removed previously solved In 118117 heuristics exploit information certain important features CSP affected alterations yielding considerably better performance randomly changed CSPs E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 59 8 Conclusions In order function service domains planning equipped number special features en able dispose uncertainty deriving open world assumption unexpected service behaviors deal abundance dataintensive operations overcome inconsistencies changes caused exogenous factors Most importantly applicability planning tailored speciﬁcs particular domain task position fulﬁll variety diverse objectives minimal manual reconﬁgura tion To meet requirements proposed described RuGPlanner planning framework uses constraint satisfaction techniques accommodates complex goals knowledgelevel representation model lack informa tion proactive sensing presence variables range large domains algorithm monitoring execution revising plans seamlessly changing environment The approach relies domainindependent representation consists set looselycoupled atomic ser vice operations described planning operators Dataintensive domains involve operations work numericvalued variables including case numericvalued sensing outputs effectively dealt Regarding goal expressivity RuGPlanner supports number constructs impose constraints state traversal accommodate preferences No restrictive assumptions interdependencies sensing wordaltering actions composition sensing actions proactively planned The approach performs continuous plan revisions dispose failure responses long responses timeouts exogenous events The orchestration algorithm address effectively problematic situations certain assumptions kind goal point contingency occurs execution Experimental evaluation conﬁrms feasibility approach situations complex goals diverse combinations unknowns failures runtime inconsistencies Al work inspired applications ﬁeld Web Services essence planning methodologies general touches issues concern series problems domainindependence uncer tainty dynamicity stake To improve performance RuGPlanner consider planningoriented CSPbased heuris tics manage extract additional constraints reﬂect particular properties underlying planning problem Some reformulation techniques proposed 8 speed search The RuGPlanner generates plans usually characterized high degree parallelism special heuristics need investigated plan optimality stake Extending planning deal noisy data sensing actions return set possible values interesting direction future work To end techniques similar intervalvalued function described 99 sort casebased reasoning adopted The capabilities orchestration framework improved extended For example exploiting techniques context dynamic CSP intelligent solution reuse probably beneﬁt performance Appendix A Orchestration algorithm The orchestrator realized actor 4954 object seamlessly reacts concurrent manner mes sages receives asynchronously Algorithm 1 The message newModeldomain related construction new CSP model encodes planning domain domain The resulting constraints propagated propagated generic world instance stored starting point subsequent solving requests long service new functionalities installed case model reconstructed Each time request satisfying new goal issued newPlangoal constraints modeling goal added constraint network removing constraints modeling previously handled goals CSP propagated stored goalspeciﬁc world instance search start reﬁnement replanning attempts till goal satisﬁed solution Other messages concern receipt change event indication service type unavailable appearance new service type contextChangevar val removeActiona addActiona respectively In case description respective action exists planning domain constraints represent preconditions effects CSP remove constraint banned solver level Otherwise new service type offers new functionalities encountered addition place dynamic manner CSP reconstructed state variables frame axioms associated new action taken account The message monitorplan si refers core orchestrating process The algorithm represents general case considers asynchronous context changes accommodates particular kind byzantine behavior maintains evolving set alternative service instances action The pieces code curly brackets indicate critical sections Since concurrent futures work CSP context entity time allowed access CSP context critical requests actors suspended lock respective object released 60 E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 Algorithm 1 Orchestrating actor asynchronous context changes concurrent execution continual reﬁnement plan replan depending latest context function receive case newModeldomain form_CSPdomain case contextChangevar val update_contextvar val var effects f pendingActors bookKeepValuesf var val case removeActiona case addActiona exists CSP Add constraint ai 0 0 k model level Remove constraints ai 0 0 k Create new CSP model including new action description case newPlangoal set_goal_constraintgoal return solve_CSP case monitorplan s A getNext_Parallel_Actsplan s F execute_par_actsA s Form futures sequence f serv F f concerning service instance serv on_future_completef s end F onAllComplete short timeout expired futures responded check_planplan s end function function on_future_completef s f onComplete case success Future return timeout run parallel response contains sensed output update_contextout persistent info bookKeepBehaviorf inParamsf s f pendingActors Add f pendingActors f long timeout returned case short timeout service f justiﬁably longTimeout pendingActors response longTimeout expires f Add f pendingActors Proceed effects materialized update_contexteffectVarsasuccs bookKeepValuesf effectVarsas case failure f pendingActors Remove f pendingActors f long timeout returned bookKeepBehaviorf inParamsf s failure end function function execute_par_actsA s pf pendingActors Returns set futures F longTimeoutpf expired Remove pf pendingActors undo_effectspf check_planplan s return F addpf end A dependent action pendingActors AND scheduled s serv get_next_instancea inParamsa s F addexecuteserv inParamsa s scheduled s Detected malicious action bookKeepBehaviorf inParamsf s failure end return F end function E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 61 function check_planplan s Partial assignment solver level complete solution updPlan reﬁne_planplan s updPlan cid11 send monitorupdPlan 0 Reﬁnement failed replan scratch newPlan replan newPlan cid11 send monitornewPlan 0 notify client Goal satisﬁable end function function reﬁne_planplan s Instantiation known variables solver level copy_context_to_init_state planSuﬃx consistentplan s emptyplanSuﬃx CSPlevel action variables plan suﬃx s set 1 Input parameters rest action variables left unassigned assign_partial_solutionplan s return solve_CSP return x6planSuﬃx end function References 1 M Aiello M Papazoglou J Yang M Carman M Pistore L Seraﬁni P Traverso A request language webservices based planning constraint satisfaction VLDB Workshop Technologies EServices TES LNCS Springer 2002 pp 7685 2 A Albore H Palacios H Geffner A translationbased approach contingent planning Proc 21st International Joint Conference Artiﬁcial Intelligence IJCAI 2009 pp 16231628 3 A Albore M Ramírez H Geffner Effective heuristics belief tracking planning incomplete information Proc 21st International Conference Automated Planning Scheduling ICAPS AAAI 2011 4 T Au U Kuter D Nau Web service composition volatile information 4th International Semantic Web Conference ISWC Springer 2005 pp 5266 FLAIRS 2011 5 F Baligand N Rivierre T Ledoux A declarative approach QoSaware web service compositions Proc 5th International Conference ServiceOriented Computing ICSOC AAAI 2007 pp 422428 6 R Barták A novel constraint model parallel planning Proc 24th International Florida Artiﬁcial Intelligence Research Society Conference 7 R Barták MA Salido F Rossi New trends constraint satisfaction planning scheduling survey Knowl Eng Rev 25 3 2010 249279 8 R Barták D Toropila Reformulating constraint models classical planning Proc 21st International Florida Artiﬁcial Intelligence Research Society Conference FLAIRS AAAI 2008 pp 525530 Society Conference FLAIRS AAAI 2009 9 R Barták D Toropila Enhancing constraint models planning problems Proc 22nd International Florida Artiﬁcial Intelligence Research 10 JC Beck MS Fox Constraintdirected techniques scheduling alternative activities Artif Intell 121 12 2000 211250 11 E Benazera Alternatives replanning methods plan reevaluation runtime Workshop Plan Execution A Reality Check 15th Interna tional Conference Automated Planning Scheduling ICAPS 2005 12 D Berardi D Calvanese G De Giacomo R Hull M Mecella Automatic composition transitionbased semantic web services messaging Proc 31st International Conference Very Large Data Bases 2005 pp 613624 13 D Berardi D Calvanese G De Giacomo M Lenzerini M Mecella Automatic composition eservices export behavior Proc 1st International Conference ServiceOriented Computing ICSOC Springer 2003 pp 4358 14 D Berardi D Calvanese G De Giacomo M Lenzerini M Mecella Automatic service composition based behavioral descriptions Int J Coop Inf Syst 14 4 2005 333376 15 D Berardi F Cheikh G De Giacomo F Patrizi Automatic service composition simulation Int J Found Comput Sci 19 2 2008 429451 16 D Berardi G De Giacomo M Lenzerini M Mecella D Calvanese Synthesis underspeciﬁed composite eservices based automated reasoning Proc 2nd International Conference ServiceOriented Computing Springer 2004 pp 105114 17 P Bertoli R Kazhamiakin M Paolucci M Pistore H Raik M Wagner Continuous orchestration web services planning Proc 19th International Conference Automated Planning Scheduling ICAPS AAAI 2009 18 P Bertoli M Pistore P Traverso Automated web service composition ontheﬂy belief space search Proc 16th International Conference Automated Planning Scheduling ICAPS AAAI 2006 pp 358361 19 P Bertoli M Pistore P Traverso Automated composition web services planning asynchronous domains Artif Intell 174 2010 316361 20 J Blythe Planning uncertainty dynamic domains PhD thesis Carnegie Mellon University 1998 21 D Borrajo M Veloso Probabilistically reusing plans deterministic planning Proc ICAPS12 Workshop Heuristics Search Domain Independent Planning 2012 pp 1725 22 RI Brafman J Hoffmann Conformant planning heuristic forward search new approach Proc 14th International Conference Automated Planning Scheduling ICAPS 2004 pp 355364 23 M Brenner B Nebel Continual planning acting dynamic multiagent environments Auton Agents MultiAgent Syst 19 3 2009 297331 24 M Caruso CD Ciccio E Iacomussi E Kaldeli A Lazovik M Mecella Service ecologies homebuilding automation Proc 10th IFAC Symposium Robot Control 2012 25 Choco Choco library documentation wwwemnfrzinfochocosolver 2012 26 G Chu S Gaspers N Narodytska A Schutt T Walsh On complexity global scheduling constraints structural restrictions Proc 23rd International Joint Conference Artiﬁcial Intelligence IJCAI 2013 62 E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 27 A Cimatti M Pistore M Roveri P Traverso Weak strong strong cyclic planning symbolic model checking Artif Intell 147 12 2003 3584 28 G De Giacomo F Patrizi S Sardiña Automatic behavior composition synthesis Artif Intell 196 2013 106142 29 MB Do S Kambhampati Planning constraint satisfaction solving planninggraph compiling CSP Artif Intell 132 2001 151182 30 S Duan S Babu K Munagala Fa automating failure diagnosis Proc 25th International Conference Data Engineering ICDE 2009 pp 10121023 31 J Fan S Kambhampati A snapshot public web services SIGMOD Rec 34 1 2005 2432 32 H Fargier J Lang JM Lang T Schiex Mixed constraint satisfaction framework decision problems incomplete knowledge Proc 13th AAAI Conference Artiﬁcial Intelligence 1996 pp 175180 33 J Finger Exploiting constraints design synthesis PhD thesis Stanford University 1987 34 J Foss N Onder D Smith Preventing unrecoverable failures precautionary planning Proc 10th Workshop Moving Planning Scheduling Systems Real World 2007 Planning Scheduling 2006 pp 212221 35 M Fox A Gerevini D Long I Serina Plan stability replanning versus plan repair Proc 16th International Conference Automated 36 M Fox D Long Pddl21 extension PDDL expressing temporal planning domains J Artif Intell Res 20 2003 61124 37 I Georgievski Hierarchical planning deﬁnition language Technical report University Groningen 2013 JBI 2013123 38 A Gerevini P Haslum D Long A Saetti Y Dimopoulos Deterministic planning ﬁfth international planning competition PDDL3 experi mental evaluation planners Artif Intell 173 56 2009 619668 39 A Gerevini D Long Preferences soft constraints PDDL3 16th ICAPS Workshop Planning Preferences Soft Constraints 2006 40 A Gerevini A Saetti I Serina An approach temporal planning scheduling domains predictable exogenous events J Artif Intell Res 25 1 2006 187231 Planning Systems 1994 41 M Ghallab H Laruelle Representation control IxTeT temporal planner Proc 2nd International Conference Artiﬁcial Intelligence 42 M Ghallab D Nau P Traverso Automated Planning Theory Practice Morgan Kaufmann Amsterdam 2004 43 M Göbelbecker C Gretton R Dearden A switching planner combined task observation planning Proc 25th AAAI Conference Artiﬁcial Intelligence AAAI 2011 Planning Systems AIPS 1998 pp 7077 44 K Golden Leap look information gathering PUCCINI planner Proc 6th International Conference Artiﬁcial Intelligence 45 K Golden A domain description language data processing ICAPS Workshop Future PDDL AAAI 2003 46 K Golden O Etzioni D Weld Planning execution incomplete information Technical Report 971105 UW CSE 1996 47 K Golden W Pang A constraintbased planner applied data processing domains Proc 10th International Conference Principles 48 K Golden DS Weld Representing sensing actions middle ground revisited Proc 5th International Conference Principles Knowl Practice Constraint Programming CP 2004 p 815 edge Representation Reasoning KR 1996 pp 174185 49 I Greif Semantics communicating parallel processes PhD thesis MIT 1975 50 C Guettier N YorkeSmith Enhancing anytime behaviour mixed CSPbased planning Proc ICAPS Workshop Planning Under Uncer tainty Autonomous Systems 2005 pp 2938 ISWC2006 2006 pp 130143 51 AB Hassine S Matsubara T Ishida A constraintbased approach horizontal web Proc 5th International Semantic Web Conference 52 M Helmert The fast downward planning J Artif Intell Res 26 2006 191246 53 M Helmert Concise ﬁnitedomain representations PDDL planning tasks Artif Intell 173 2009 503535 54 C Hewitt P Bishop R Steiger A universal modular actor formalism artiﬁcial intelligence Proc 3rd International Joint Conference 55 J Hoffmann Towards eﬃcient belief update planningbased web service composition 18th European Conference Artiﬁcial Intelligence 56 J Hoffmann P Bertoli M Helmert M Pistore Messagebased web service composition integrity constraints planning uncertainty new 57 J Hoffmann P Bertoli M Pistore Web service composition planning revisited background theories initial state uncertainty Proc 21st AAAI Conference Artiﬁcial Intelligence AAAI 2007 pp 10131018 58 J Hoffmann RI Brafman Contingent planning heuristic forward search implicit belief states Proc 15th International Conference Automated Planning Scheduling ICAPS AAAI 2005 pp 7180 59 J Hoffmann B Nebel The FF planning fast plan generation heuristic search J Artif Intell Res 14 2001 253302 60 J Hoffmann I Weber F Kraft SAP speaks PDDL Proc 4th AAAI Conference Artiﬁcial Intelligence AAAI 2010 61 N Hyaﬁl F Bacchus Conformant probabilistic planning CSPs Proc 13th International Conference Automated Planning Scheduling 62 N Hyaﬁl F Bacchus Utilizing structured representations CSPs conformant probabilistic planning Proc 16th Eureopean Conference Artiﬁcial Intelligence IJCAI 1973 ECAI 2008 pp 558562 connection J Artif Intell Res 35 2009 49117 63 L Iocchi T Lukasiewicz D Nardi R Rosati Reasoning actions sensing qualitative probabilistic uncertainty ACM Trans Comput 64 F Kabanza M Barbeau R StDenis Planning control rules reactive agents Artif Intell 95 1997 67113 65 E Kaldeli Domainindependent planning services uncertain dynamic environments PhD thesis University Groningen 2013 66 E Kaldeli A Lazovik M Aiello Extended goals composing services Proc 19th International Conference Automated Planning Scheduling ICAPS 2009 AAAI 2009 Intelligence AAAI 2011 67 E Kaldeli A Lazovik M Aiello Continual planning sensing web service composition Proc 25th AAAI Conference Artiﬁcial 68 E Kaldeli E Warriach A Lazovik M Aiello Coordinating web services smart home ACM Trans Web 7 2 2013 10 69 E Kaldeli EU Warriach J Bresser A Lazovik M Aiello Interoperation composition simulation services home 8th International Con ference Service Oriented Computing ICSOC LNCS vol 6470 Springer 2010 pp 167181 70 S Kambhampati Planning graph dynamic CSP exploiting EBL DDB CSP search techniques GraphPlan J Artif Intell Res 12 2000 71 M Klusch A Gerber Semantic web service composition planning OWLSXplan Proc 1st International AAAI Fall Symposium Agents 72 M Klusch A Gerber Fast composition planning OWLS services application Proc 4th IEEE European Conference Web Services 134 Semantic Web 2005 pp 5562 ECOWS 2006 pp 181190 ICAPS 2003 pp 205214 Artiﬁcial Intelligence ECAI 2004 pp 10331034 Log 10 1 2009 E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 63 76 1 2011 2336 183205 2003 151188 2007 pp 398403 2008 pp 629643 73 M Klusch KU Renner Fast dynamic replanning composite OWLS services Proc IEEEWICACM International Conference Intelligent 74 CA Knoblock Planning executing sensing replanning information gathering International Joint Conference Artiﬁcial Intelligence Agent Technology IAT Workshops 2006 pp 134137 IJCAI Morgan Kaufmann 1995 pp 16861693 75 C Krause Z Maraikar A Lazovik F Arbab Modeling dynamic reconﬁgurations Reo highlevel replacement systems Sci Comput Program 76 U Kuter E Sirin B Parsia DS Nau JA Hendler Information gathering planning web service composition J Web Semant 3 23 2005 77 P Laborie Algorithms propagating resource constraints AI planning scheduling existing approaches new results Artif Intell 143 2 78 A Lazovik M Aiello R Gennari Encoding requests web service compositions constraints 11th International Conference Principles 79 A Lazovik M Aiello M Papazoglou Planning monitoring execution web service requests Proc 1st International Conference Practice Constraint Programming CP Springer 2005 ServiceOriented Computing ICSOC Springer 2003 pp 335350 80 A Lazovik M Aiello M Papazoglou Planning monitoring execution web service requests Int J Digit Libr 6 3 2006 235246 81 A Lazovik F Arbab Using Reo service coordination Proc 5th International Conference ServiceOriented Computing ICSOC Springer 82 C Lecoutre Constraint Networks Targeting Simplicity Techniques Algorithms WileyISTE 2009 83 N Lin U Kuter E Sirin Web service composition user preferences Proc 5th European Semantic Web Conference ESWC Springer 84 A Lopez F Bacchus Generalizing GraphPlan formulating planning CSP Proc 18th International Joint Conference Artiﬁcial Intelligence IJCAI Morgan Kaufmann 2003 pp 954960 85 E Martínez Y Lespérance Web service composition planning task experiments knowledgebased planning Proc ICAPS Work shop Planning Scheduling Web Grid Services AAAI 2004 86 FI Matthieu Gallien S Lemai Robot actions planning execution control autonomous exploration rovers Workshop Plan Execution A Reality Check 15th International Conference Automated Planning Scheduling ICAPS 2005 87 D McDermott AIPS98 Planning Competition Committee PDDL planning domain deﬁnition language Technical Report CVC TRR98003DCS 88 DV McDermott Estimatedregression planning interactions web services Proc 6th International Conference Artiﬁcial Intelli gence Planning Systems AIPS AAAI 2002 pp 204211 89 S McIlraith TC Son Adapting Golog composition semantic webservices D Fensel F Giunchiglia D McGuinness M Williams Eds Proc 8th International Conference Principles Knowledge Representation KR Morgan Kaufmann 2002 pp 482496 90 SA McIlraith Towards declarative programming web services Proc 11th International Symposium Static Analysis SAS Springer 91 S Murugan V Ramachandran Aspect oriented decision making model byzantine agreement J Comput Sci 8 2012 382388 92 DJ Musliner Using abstraction nondeterminism plan reaction loops Proc 12th National Conference Artiﬁcial Intelligence AAAI TR1165 1998 93 DJ Musliner EH Durfee KG Shin World modeling dynamic construction realtime control plans Artif Intell 74 1995 83127 94 B Nebel Y Dimopoulos J Koehler Ignoring irrelevant facts operators plan generation Proc 4th European Conference Planning 2004 p 21 AAAI 1994 pp 10361041 1997 pp 338350 95 B Nebel J Koehler Plan reuse versus plan generation theoretical empirical analysis Artif Intell 76 12 1995 427454 96 H Palacios H Geffner Compiling uncertainty away conformant planning problems bounded width J Artif Intell Res 35 2009 623675 97 J Peer A PDDL based tool automatic web service composition Proc 2nd International Workshop Principles Practice Semantic Web Reasoning Lecture Notes Computer Science vol 3208 Springer 2004 98 J Peer A POPbased replanning agent automatic web service composition Proc 2nd European Semantic Web Conference ESWC Springer 2005 pp 4761 99 RPA Petrick An extension knowledgelevel planning intervalvalued functions AAAI Workshop Generalized Planning 2011 100 RPA Petrick F Bacchus Extending knowledgebased approach planning incomplete information sensing Proc 14th International Conference Automated Planning Scheduling ICAPS 2004 pp 211 101 T Pilioura A Tsalgatidou Uniﬁed publication discovery semantic web services ACM Trans Web 3 3 2009 11 102 M Pistore A Marconi P Bertoli P Traverso Automated composition web services planning knowledge level 19th International Joint 103 M Pistore L Spalazzi P Traverso A minimalist approach semantic annotations web processes compositions Proc 3rd European Conference Artiﬁcial Intelligence 2005 pp 12521259 Semantic Web Conference ESWC 2006 pp 620634 104 M Pistore P Traverso P Bertoli Automated composition web services planning asynchronous domains Proc 15th International Conference Automated Planning Scheduling ICAPS AAAI 2005 pp 211 105 G Shani RI Brafman Replanning domains partial information sensing actions Proc 22nd International Joint Conference 106 D Shaparau M Pistore P Traverso Fusing procedural declarative planning goals nondeterministic domains Proc 23rd AAAI 107 M Sheshagiri M DesJardins T Finin A planner composing services described DAMLS Proc 13th ICAPS Workshop Planning Artiﬁcial Intelligence IJCAI IJCAIAAAI 2011 pp 20212026 Conference Artiﬁcial Intelligence AAAI 2008 pp 983990 Web Services 2003 108 E Sirin B Parsia D Wu JA Hendler DS Nau HTN planning web service composition shop2 J Web Semant 1 4 2004 377396 109 D Skoutas D Sacharidis A Simitsis T Sellis Serving Sky discovering selecting semantic web services dynamic skyline queries 2nd IEEE International Conference Semantic Computing 2008 pp 222229 110 S Sohrabi N Prokoshyna SA McIlraith Web service composition generic procedures customizing user preferences Proc 5th International Semantic Web Conference ISWC Springer 2006 pp 597611 111 S Sohrabi N Prokoshyna SA McIlraith Web service composition customization Golog programs user preferences Conceptual Modeling Foundations Applications vol 5600 Springer 2009 pp 319334 112 ST To TC Son E Pontelli Contingent planning andor forward search disjunctive representation Proc 21st International Confer ence Automated Planning Scheduling ICAPS AAAI 2011 113 P Traverso M Pistore Automated composition semantic web services executable processes Proc 3rd International Semantic Web Conference Springer 2004 pp 380394 114 N van Beest E Kaldeli P Bulanov J Wortmann A Lazovik Automated runtime repair business processes Inf Sci 39 2014 4579 64 E Kaldeli et al Artiﬁcial Intelligence 236 2016 3064 115 R van der Krogt M Weerdt Plan repair extension planning Proc 15th International Conference Automated Planning Scheduling AAAI 2005 pp 161170 116 V Vidal Branching pruning optimal temporal POCL planner based constraint programming Artif Intell 170 2004 570577 117 RJ Wallace D Grimes Problemstructure vs solutionbased methods solving dynamic constraint satisfaction problems Proc 22nd 118 RJ Wallace D Grimes EC Freuder Solving dynamic constraint satisfaction problems identifying stable features Proc 21st International International Conference Tools Artiﬁcial Intelligence 2010 Joint Conference Artiﬁcial Intelligence 2009 pp 621627 119 EU Warriach E Kaldeli J Bresser A Lazovik M Aiello A tool integrating pervasive services simulating composition Demo Session 8th International Conference ServiceOriented Computing ICSOC LNCS Springer 2010 pp 726727 120 K Westra Web service composition connecting web cloud Bachelors thesis University Groningen 2010 121 D Wu B Parsia E Sirin JA Hendler DS Nau Automating DAMLS web services composition SHOP2 Proc 2nd International 122 SW Yoon A Fern R Givan FFReplan baseline probabilistic planning Proc 17th International Conference Automated Planning 123 SW Yoon A Fern R Givan S Kambhampati Probabilistic planning determinization hindsight Proc 23rd AAAI Conference Semantic Web Conference 2003 pp 195210 Scheduling AAAI 2007 p 352 Artiﬁcial Intelligence 2008 pp 10101016 124 T Yu Y Zhang KJ Lin Eﬃcient algorithms web services selection endtoend QoS constraints ACM Trans Web 1 2007 125 S Yumatov Webbased interface smart home Bachelor thesis 2011