Artiﬁcial Intelligence 173 2009 392412 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Algorithms coalitional manipulation problem Michael Zuckerman a1 Ariel D Procaccia b2 Jeffrey S Rosenschein School Engineering Computer Science The Hebrew University Jerusalem Jerusalem 91904 Israel b Microsoft Israel RD Center 13 Shenkar Street Herzeliya 46725 Israel r t c l e n f o b s t r c t We investigate problem coalitional manipulation elections known hard variety voting rules We forward eﬃcient algorithms problem Borda Maximin Plurality Runoff analyze windows error Speciﬁcally given instance algorithm fails bound additional power manipulators need order succeed We ﬁnally discuss implications results respect popular approach employing computational hardness preclude manipulation 2008 Elsevier BV All rights reserved Article history Received 15 December 2007 Received revised form 17 November 2008 Accepted 20 November 2008 Available online 24 November 2008 Keywords Computational social choice Voting Manipulation Computational complexity 1 Introduction Social choice theory extremely wellstudied subﬁeld economics In recent years computational aspects social choice particular computational aspects voting sharply increased In election set voters submit linear preferences rankings set candidates The winner election designated voting rule basically mapping space possible preference proﬁles candidates A thorn social choice theory formulated famous GibbardSatterthwaite Theorem 1526 This theorem essentially states voting rule dictatorship elections voters beneﬁt lying A dictatorship voting rule votersthe dictatorsinglehandedly decides outcome election Since 1970s impossibility result established enormous effort invested discovering ways circumvent Two prominent wellestablished ways allowing payments 41629 restricting voters preferences 20 In paper wish discuss paththe path taken willwhich explored scientists The GibbardSatterthwaite Theorem implies theory voters able manipulate elections bend advantage lying But practice deciding lie employ prove hard computational problem superpolynomial number possibilities ranking candidates A signiﬁcantly shorter version paper proofs omitted appeared Proceedings Nineteenth ACMSIAM Symposium Discrete Algorithms SODA08 This work presented Dagstuhl Workshop Computational Issues Social Choice October 2007 Corresponding author Email addresses michezcshujiacil M Zuckerman arielprogmailcom AD Procaccia jeffcshujiacil JS Rosenschein 1 The author thanks Noam Nisan generous grant supported work 2 The author supported work Adams Fellowship Program Israel Academy Sciences Humanities 00043702 matter 2008 Elsevier BV All rights reserved doi101016jartint200811005 M Zuckerman et al Artiﬁcial Intelligence 173 2009 392412 393 Indeed Bartholdi et al 3 forward voting rule manipulation N P hard In important paper Bartholdi Orlin 2 greatly strengthened approach proving important Single Transferable Vote STV rule hard manipulate This line research enjoyed new life recent years thanks inﬂuential work Conitzer Sandholm Lang 73 The foregoing paper studied complexity coalitional manipulation In setting coalition potentially untruthful voters attempting coordinate ballots favorite candidate elected The authors assume votes weighted voters power Conitzer et al variety prominent voting rules coalitional manipulation N P hard constant number candidates details Section 2 This work extended numerous directions different authors 58121825 Elkind Lipmaa 9 example strengthened abovementioned results coalitional manipulation employing cryptographic techniques In short computational complexity wellestablished method circumventing GibbardSatterthwaite Theorem Unfortunately shortcoming results mentioned worstcase hardness results provide poor obstacle potential manipulators Recent work frequency manipulation argued worstcase hardtomanipulate voting rules potential manipulator able compute manipulation typical settings 613 In particular Procaccia Rosenschein 2324 established theoretical results frequency success algorithm coalitional manipulation problem The matter discussed Erdélyi et al 11 In spite question tractability manipulation problem particular coalitional manipulation problem typical settings wideopen Our approach results We wish convince reader coalitional manipulation problem eﬃ ciently solved typical settings prominent voting rules approach differs previous work We present eﬃcient heuristic algorithms problem provide theoretical guarantees Indeed characterize small windows instances algorithms fail algorithms proven succeed instances Speciﬁcally prove following results prominent voting rules coalitional manipulation known N P hard constant number candidates Theorem 1 In Borda rule exists manipulation instance certain weights Algorithm 2 succeed given extra manipulator maximal weight 2 In Plurality Runoff rule exists manipulation instance certain weights Algorithm 3 succeed given extra manipulator maximal weight 3 In Maximin rule exists manipulation instance certain weights Algorithm 1 succeed given copies set manipulators Signiﬁcance Artiﬁcial Intelligence The sharply increased computational aspects voting motivated numer ous applications voting techniques paradigms problems Artiﬁcial Intelligence AI These applications include work AI subﬁelds diverse Planning 10 Automated Scheduling 17 Recommender Systems 14 Collaborative Fil tering 22 Information Extraction 27 Computational Linguistics 21 Unfortunately application voting AI problems investigated Social Choice Theory par ticular issue manipulation especially acute Indeed multiagent systems inhabited heterogeneous selfinterested agents Such agents unlike human beings designed rational constantly engaged com putations meant increase utility In particular selfinterested agent seize opportunity manipulate election beneﬁt opportunity computationally easy recognize speciﬁcally programmed The agenda circumventing GibbardSatterthwaite Theorem computational complexity relevant compelling voters software agents populate multiagent effective bounded rationality agents practically governed laws computational complexity This agenda prominent AI numerous papers subject published major AI conferences ﬁve years As papers frequency manipulation worstcase complexity We feel line work frequency manipulation inﬂuence entire direction computational social choice research agenda Section 5 details work frequency manipulation Structure article In Section 2 major voting rules formulate coalitional manipulation problem In Section 3 present analyze algorithms subsections Borda Plurality Runoff Maximin We provide results unweighted setting Section 4 In Section 5 related work length Finally discuss approach Section 6 3 Historical note cite JACM 2007 paper work originated AAAI 2002 paper 394 M Zuckerman et al Artiﬁcial Intelligence 173 2009 392412 2 Voting rules manipulation problems An election consists set C c1 cm candidates set S v 1 vS voters Each voter provides total order candidates To differently voter submits ranking candidates The voting setting includes voting rule function set possible combinations votes C We shall discuss following voting rules voting rule based scores candidate highest score wins Scoring rules Let cid3α cid4α1 αmcid5 vector nonnegative integers α1 cid2 α2 cid2 cid2 αm For voter candidate receives α1 points ranked ﬁrst voter α2 ranked second The score candidate total number points candidate receives The scoring rules consider Borda cid3α cid4m 1 m 2 0cid5 Veto cid3α cid41 1 1 0cid5 Plurality cid3α cid41 0 0cid5 Maximin For distinct candidates x y let Nx y number voters prefer x y The maximin score x σ x min ycid6x Nx y Copeland For distinct candidates x y let Cx y 1 Nx y N y x case x beats y pairwise election Cx y 0 Nx y N y x Cx y 1 Nx y N y x The Copeland score candidate x σ x Plurality Runoff In rule ﬁrst round eliminates candidates highest plurality scores ycid6x Cx y cid2 The second round determines winner pairwise election In settings voters weighted A weight function mapping w S N When voters weighted rules applied considering voter weight l l different voters Deﬁnition 21 1 In Constructive Coalitional Weighted Manipulation CCWM problem voting rule F given set C candidates distinguished candidate p C set weighted voters S cast votes truthful voters list weights W set voters T cast votes manipulators We asked way cast votes T p wins election voting rule F 2 Constructive Coalitional Unweighted Manipulation CCUM problem special case CCWM problem weights equal 1 Remark 22 We implicitly assume questions manipulators knowledge votes Unless explicitly stated assume ties broken adversarially manipulators p ties candidate p loses The assumption equivalent formulating manipulation problems unique winner version assumes candidates maximal score win asks p winner Theorem 23 See 7 The CCWM problem Borda Veto Maximin Copeland Plurality Runoff N P complete number candidates constant Throughout paper use convention C m S N T n Whenever voting rule based scores denote σS jc accumulated score candidate c voters S ﬁrst j voters T ﬁxing order voters T Whenever clear context S ﬁxed use simply σ jc Also G C 0 cid3 j cid3 n write σ jG σ jg g G For lists A B ordered multisets denote A B list obtained B appended A 3 Weighted coalitional manipulation We begin contribution presenting general greedy algorithm coalitional manipulation problem Some main results concern algorithm restriction scoring rules The greedy algorithm given Algorithm 1 It works follows manipulators according descending weights rank p ﬁrst rank candidates way minimizes maximum score This algorithm general ization appeared Bartholdi et al 3 Deﬁnition 31 We refer iteration main loop lines 412 algorithm stage algorithm We use fact voting rules exists manipulation coalition manipulators weight cid10 W Normally list W exists manipulation coalition manipulators weight list W coalition small manipulation algorithm report On hand coalition large greedy algorithm ﬁnd manipulation So remains window W cid10 M Zuckerman et al Artiﬁcial Intelligence 173 2009 392412 395 1 procedure GreedyC p X S W weights voters T W T n cid2 X S set preferences voters S W list cid2Sort weights descending order cid2Will contain preferences T cid2Iterate voters descending weights cid2Put p ﬁrst place jth preference list cid2Iterate places jth preference list cid2Evaluate score candidate j available place Pick c argmincCP j P j P j c Score c X S X P j c cid2Add c js preference list Score c based X S X T p cid2 p wins P j p t 2 m sortW X j 1 n 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 end procedure end X T X argmaxcC return false end return true end X X P j Algorithm 1 Decides CCWM 1 procedure ScoringrulesGreedyC p σ0C W cid2σ0C list scores candidates distributed voters S W list weights voters T W T n cid2Go voters T cid2Put p ﬁrst place jth preference list σ j p σ j1p w jα1 Let t1 t2 tm1 st l σ j1ctl1 cid3 σ j1ctl j votes p cid16 ct1 l 1 m 1 cid16 cid16 ctm1 σ j ctl σ j1ctl w jαl1 σnc p j 1 n end 2 3 4 5 6 7 8 9 10 11 12 13 14 end 15 end procedure end argmaxcC return true return false cid2Update scores cid2 p wins Algorithm 2 Decides CCWM Scoring rules error coalitions exist manipulation algorithm ﬁnd We interested bounding size window We ﬁrst formulate monotonicity property described Deﬁnition 32 In context CCWM problem voting rule said monotone weights satisﬁes following property manipulation making p win manipulator set T weight list W manipulation making p win manipulator set T weight list W cid10 T W cid10 W T cid10 cid10 Monotonicity weights prerequisite type analysis wish present However surprisingly basic voting rules property particular prominent Copeland rule possess We example Appendix A 31 Borda In subsection analyze performance Algorithm 1 respect Borda voting rule Note context scoring rules Algorithm 1 reduces Algorithm 2 This algorithm ﬁrst appeared Procaccia Rosenschein 24 In speciﬁc instantiation Algorithm 1 require sorting manipulator weights play analysis Lemma 33 Scoring rules monotone weights Proof Let C candidate set p C preferred candidate S set truthful voters W weights manipulators T Denote C m S N W T n It manipulation cid10 W w w cid2 1 set T instance manipulators T integer manipulation rest follow induction cid10 T v weight list W 396 M Zuckerman et al Artiﬁcial Intelligence 173 2009 392412 Let cid3α cid4α1 αmcid5 score vector rule Let X S preference orders voters S X T preference orders voters T p win Fix order voters T By deﬁnition c C p σnc σnp Let additional voter T rank p ﬁrst place report arbitrary order candidates Then c C p σn1p σnp wα1 σnc wα1 cid2 σn1c Hence p wins cid2 cid10 We ready present theorem Borda rule Theorem 34 In CCWM problem Borda let C set candidates p C preferred candidate S set voters cast votes Let W weight list set T Then 1 If ballot making p win election Algorithm 2 return false 2 If exists ballot making p win election instance weight list W w cid2 k i1 w cid10 cid2 maxW Algorithm 2 return true cid10 1 w cid10 k k cid2 1 Before proceed theorems proof short discussion order Despite mathematical formulation think Item 2 theorem saying algorithm fails instance succeed Rather theorem implies algorithm succeeds given instance smaller instance manipulators weight success possible Here monotonicity weights property comes play Also note Item 1 theorem true constructive algorithm item appears subsequent theorems trivially satisﬁed Another interesting point theorem viewed implying Algorithm 2 gives sort additive approximation ratio Formally unnatural adopt notion approximation algorithms context CCWM problem However exact way theorem yields approximation guarantees apparent discuss unweighted setting Section 4 argmaxgCpσ0g induction s 1 2 G s A key notion proof theorem deﬁnition set G W Let W list weights ﬁne G W follows Run algorithm n 1 stages weights W w w arbitrary weight cid10 Let G 0 W G s1 W stage l 1 cid3 l cid3 n 1 Finally let G W W Informally G W constructed taking candidates initially maximum score inductively adding candidates ranked algorithm candidates added set Since algorithm ranks stronger candidates weaker candidates strong candidates ultimately members G W The additional arbitrary weight w existence stage n 1 fact n manipulators weights W formality interested way algorithm rank candidates manipulators cast ballots care scores ﬁnal virtual ranking g g ranked g G s1 0cid3s G s cid3 W W W Observe indices s 1 directly related stages l 1 n candidate c added G s cid10 G s1 ranked candidate c W stage l 1 n necessarily stage s Notice deﬁnition independent weight w weight stage n 1 C p Gm2 W impact preferences voters impact G W From deﬁnition G 0 W Furthermore C p m 1 follows exists 0 cid3 s cid101 W G W G s cid10 cid3 m 2 st G s W G 1 W G s W cid10 cid10 We ready unfold proof Theorem 34 The proof relies Lemmata 35313 The general intuition proof follows Consider candidates G W exists manipulation possible score p higher average score The diﬃcult average score candidates G W relatively close maximal ﬁnal score As result additional manipulators suﬃcient push p maximal score In ﬁrst lemmata Lemmata 3537 candidates G W ones highest scores connection average score success algorithm ﬁnding manipulation The straightforward lemma formalizes intuition strong candidates G W ranked algorithm Lemma 35 Given W candidates G W ranked stage l 1 cid3 l cid3 n 1 G W places granted points G W 1 0 Proof If way contradiction exists c C G W ranked stage G W places g G W ranked c stage Let s cid2 0 g G s c G W contradiction cid2 W By deﬁnition c G s1 W Lemma 36 directly building Lemma 35 states algorithm terminates candidates G W scores higher candidate outside set p Lemma 36 For c C G W p holds σnc cid3 mingG W σng M Zuckerman et al Artiﬁcial Intelligence 173 2009 392412 397 Proof Suppose contradiction c C G W p g G W st σnc σng Then stage n 1 c W Then c G s1 ranked g Let s cid2 0 st g G s c G W contradiction cid2 W The lemma clariﬁes connection deﬁnition G W Theorem 34 Indeed links average score candidates G W algorithm terminates answer returned algorithm cid2 Lemma 37 Given W W n let G W Denote qW average score candidates G W n stages qW 1 G W σng Then gG W 1 If σnp cid3 qW manipulation makes p win election algorithm return false 2 If σnp maxgG W σng manipulation makes p win algorithm ﬁnd Proof We ﬁrst prove 1 Denote W w 1 wn We set G W suppose σnp cid3 qW Let consider ballot X T votes T let σ cid10 nc scores candidates c C implied ballot including votes S Since Algorithm 2 p placed preference voter T σnp σ0p ncid4 j1 w jm 1 cid2 σ cid10 np 1 On hand Lemma 35 Algorithm 2 candidates G W ranked voters T G W places follows cid5 qW 1 G W cid4 σ0g ncid4 G W 1cid4 w j gG W i0 Combining 1 2 σ cid10 cid10 X T average scores σ cid10 q j1 np cid3 q np cid3 σ cid10 cid6 cid3 1 G W cid4 gG W σ cid10 ng q cid10 X T cid10 X T There g G W σ cid10 ng cid2 q ng p win X T applied 2 cid10 X T Also note Algorithm 2 returns true constructs valid ballot makes p win case σnp cid3 qW algorithm return false We prove 2 lemma If σnp maxgG W algorithm ﬁnd manipulation cid2 σng Lemma 36 c C p σnp σnc Lemma 38 independent lemmata directly proof Theorem 34 It gives connection average score candidates G W w G W w weight additional manipulator In words bounds effect adding manipulator average score strong candidates Lemma 38 Let G W qW Then w cid2 1 qW w qW cid3 w m2 2 G s Proof First G W G W w s cid2 0 G s W ﬁrst n 1 stages candidate G W g σng cid3 1 G W 1 G W w qW σng cid4 cid4 cid10 gG W w gcid10G W W w Now g G W w G W g ranked cid10 G W σng cid3 σng cid10 Now proceed cid7 q W w cid8 1 G W w 1 G W w cid4 gG W w cid4 σn1g σng w G W w G W w1cid4 i0 cid3 qW w qW w gG W w m2cid4 m 1 i0 m 2 2 2 cid2 And qW w qW cid3 w m2 σ j1g cid2 σ j1g σ j2g cid3 σ j2g cid10 398 M Zuckerman et al Artiﬁcial Intelligence 173 2009 392412 maxW m2 The purpose Lemmata 310313 weight list W W n holds maxgG W σngqW cid3 2 This fact stated Lemma 313 directly proof Theorem 34 First need scores candidates G W concentrated sense This intuitive algorithm doesnt allow score candidate G W escape ranking close score high stage We require following deﬁnition Deﬁnition 39 For integer w cid2 0 ﬁnite nonempty set integers A called wdense sort set nonincreasing order b1 cid2 b2 cid2 cid2 bk b1 bk A holds 1 cid3 j cid3 k 1 b j1 cid2 b j w So formally want Lemma 312 σnG W w maxdense w max max W This accom plished number technical steps Lemma 310 Let W list weights W n Let G W cid10 G s1 g W X C p X j 0 cid3 j cid3 n st σ jg σ jg 0cid3s G s W Then s cid2 1 g G s W G s1 W exist cid10 σ j X w maxdense w max maxW cid3 Proof Let s cid2 1 g G s W ranked g cid10 Case 1 j 1 In case g ranked g cid10 stage j 1 So stage j We distinguish cases G s1 W By deﬁnition exist g cid10 G s1 W minimal j 1 cid3 j cid3 n 1 g cid10 3 4 Denote αdh m place h C preference list voter d Further denote wd weight voter d cid10 Denote stage d h gets wdαdh points g ranked g cid10 g0 g1 gl g candidates got stage j 1 points cid10 w w j1 Let g l α j1g α j1g cid10 l respectively Our purpose σ j1g0 σ j1gl w cid10 1 wα j1g cid10 wα j1g wα j1g dense w maxdense By deﬁnition algorithm stage j 1 α j1g α j1g cid10 σ j2g0 cid2 σ j2g1 cid2 cid2 σ j2gl Denote ut σ j2gt wα j1g cid10 0 cid3 t cid3 l Then t 0 cid3 t cid3 l σ j1gt ut wt So need ut wt 0 cid3 t cid3 l wdense It 5 6 For t 0 cid3 t cid3 l ut wt u0 exists t b For t 0 cid3 t cid3 l ut wt u0 exists t cid10 cid10 t t 0 cid3 t cid10 cid3 l st ut wt utcid10 wt cid10 t st ut wt 1 cid3 utcid10 wt cid10 cid3 ut wt 1 cid10 ut wt Proof From 5 u0 cid2 cid2 ul 7 Also 3 6 u0 cid3 ul wl Let 0 cid3 t cid3 l 1 st ut wt u0 Let consider sequence ut wt ut1 cid10 cid10 cid3 l st ut wt utcid10 wt wt 1 ul wl Since ut wt u0 cid3 ul wl follows minimal index t Then utcid101 wt utcid101 wt cid10 1 cid3 ut wt cid10 cid3 ut wt 1 cid10 t t 8 From 7 utcid10 cid3 utcid101 cid10 cid10 cid3 utcid101 wt utcid10 wt Combining 8 9 utcid10 wt cid10 analogous choosing t maximal index utcid10 wt cid10 ut wt 9 cid10 cid3 ut wt 1 This concludes proof The proof b cid10 G 0 W σ0g cid2 σ0g Case 2 j 1 We proceed essentially reducing case Case 1 In Case 2 s cid2 2 W cid10 cid2 σ jcid101g cid10cid10 By s 1 g deﬁnition g G s1 σ jcid101g combining arguments σ jcid101g cid3 σ jcid101g cid10 maxhCpσ0h g G 0 W st g g G s1 cid10 W follows σ jcid101g cid3 σ jcid101g cid10cid10 g ranked g W Therefore exists g W contradiction g ranked g stage j cid10cid10 G s2 cid10 G s2 cid10cid10 cid10cid10 cid10 cid10 Let j0 minimal st σ j0 g cid3 σ j0 g σ0g σ0g cid10 σ0g σ0g cid10 As stage 1g ranked g cid10 cid10 0dense particular w maxdense Otherwise j0 cid6 0 holds σ j01g σ j01g cid10 minimality j0 So holds σ0g cid2 σ0g cid10 If j0 0 cid10 σ j0 g cid2 σ j0 g M Zuckerman et al Artiﬁcial Intelligence 173 2009 392412 399 σ j01g cid10 cid3 σ j01g These inequalities analogous 3 4 j 1 replaced j0 roles g g point proceed exactly Case 1 keeping mind cosmetic changes cid2 cid10 exchanged From The following lemma asserts dense set scores candidates stage j replaced dense set ﬁnal scores considering possibly larger set candidates Lemma 311 Let W list weights W n w max maxW Let H C p st σ jH w maxdense 0 cid3 j cid3 n Then exists H cid10 C p st σnH cid10 w maxdense cid10 H H Proof We H C p 0 cid3 j cid3 n st σ jH w maxdense Denote H j H Deﬁne inductively t j j 1 n 1 Ht1 g C p minhHt σth Of course t Ht Ht1 It easy j cid3 t cid3 n 1 σtHt w maxdense σt1Ht1 w maxdense So induction σnHn w maxdense H Hn C p cid2 σth cid3 σtg cid3 maxhHt Lemma 312 Let W list weights W n w max maxW Let G W Then set σnG W w maxdense G s1 W g G s W s cid2 1 By Lemma 310 exist g1 G s1 Proof Let g g0 G W If g G 0 W X1 cid10 C p st σ jg0 σ jg1 σ j X1 w maxdense 0 cid3 j cid3 n By Lemma 311 exists X C p 1 X1 X W exist g2 G s2 cid10 st σng0 σng1 σn X 1 Similarly g1 G 0 cid10 X 2 Thus build sequence sets Z1 Z s1 st 1 cid3 t cid3 s 1 σnZt w maxdense g g0 Z1 1 cid3 t cid3 s exists gt G st st gt Zt Zt1 particular gs G 0 cid3 cid10 2 w maxdense Denote Z2 g1 g2 X cid10 1 w maxdense Denote Z1 g0 g1 X cid10 2 st σng1 σng2 σn X cid10 cid6 A A A A W cid10 1 W W W cid10 cid10 wdense Z g ˆZ C p st σn ˆZ w max W w maxdense exists ˆZ G 0 W It easy wdense sets A A s1 t1 Zt w maxdense Note σ0G 0 dense Hence σnZ g ˆZ w maxdense The sets Z g ˆZ g G W intersect ˆZ union ˆZ cid3 cid3 ˆZ σnG W w maxdense cid2 Z g w maxdense By Lemma 36 h ˆZ gG W gG W Z g h G W σnh cid3 mingG W Z g We deduce σng g σng gG W cid3 Lemma 313 Let W list weights W n w max maxW Let G W denote qW 1 G W Then maxgG W σng qW cid3 w max m2 2 cid2 gG W σng Proof Sort members G W scores nth stage G W g1 gG W st 1 cid3 t cid3 G W 1 σngt cid2 σngt1 Denote 1 cid3 t cid3 G W ut σng1 w maxt 1 let U u1 uG W U G W max U σng By Lemma 312 easy 1 cid3 t cid3 G W σngt cid2 ut Consequently qW cid2 σng1 maxgG W cid2G W 1 G W t1 ut cid9 cid10 σng max gG W qW u1 qW cid3 u1 1 G W G W cid4 t1 ut w max G W 1 2 cid3 w max m 2 2 cid2 We ﬁnally ready prove Theorem 34 Proof Theorem 34 Regarding 1 Algorithm 2 returns true constructs valid ballot makes p win ballot making p win Algorithm 2 return false We prove 2 theorem Suppose exists ballot making p win weight list W W n Let cid10 W w cid2 maxW By Lemma 37 σnp qW From Lemma 38 induction k cid2 1 cid2 k i1 w cid10 1 w cid10 cid10 k W cid10 qW cid3 qW kcid4 i1 w cid10 m 2 2 By Lemma 313 10 10 400 M Zuckerman et al Artiﬁcial Intelligence 173 2009 392412 cid9 cid10 σnkg max gG W cid10 cid3 qW cid10 maxW cid10 m 2 2 kcid4 cid3 qW cid10 cid3 qW σnp i1 kcid4 i1 kcid4 i1 w cid10 m 2 2 w cid10 m 2 w cid10 m 1 σnkp Lemma 37 algorithm ﬁnd ballot making p win set T This completes proof Theorem 34 cid2 cid10 weights W cid10 return true The following example manipulation weight list W Algorithm 2 ﬁnd manipulation weight list W w cid10 cid10 1 actually talking special case unweighted Example 314 In example W 1 1 1 1 w coalitions Consider set C p 1 2 3 4 5 6 m C 7 N S 5 3 voters S voted 6 cid16 5 cid16 4 cid16 3 cid16 2 cid16 p cid16 1 2 voters S voted 2 cid16 3 cid16 4 cid16 5 cid16 6 cid16 p cid16 1 When applying Algorithm 2 input voters T award candidates following scores denote α jc points voter j gives candidate c4 Candidate c C σ0c α1c α2c α3c α4c α5c p 5 6 6 6 6 6 So cumulative scores follows Candidate c C σ0c σ1c σ2c σ3c σ4c σ5c p 5 11 17 23 29 35 1 0 5 5 5 5 5 1 0 5 10 15 20 25 2 18 4 0 4 0 4 2 18 22 22 26 26 30 3 19 3 1 3 1 3 3 19 22 23 26 27 30 4 20 2 2 2 2 2 4 20 22 24 26 28 30 5 21 1 3 1 3 1 5 21 22 25 26 29 30 6 22 0 4 0 4 0 6 22 22 26 26 30 30 Note 4 stages algorithm ﬁnd manipulation σ4p 29 30 σ46 However change votes fourth voters T ﬁnd appropriate ballot Candidate c C σ0c α1c α2c αcid10 3c αcid10 4c p 5 6 6 6 6 1 0 5 5 5 5 2 18 4 0 3 3 3 19 3 1 4 1 4 20 2 2 0 4 5 21 1 3 1 2 6 22 0 4 2 0 Now cumulative scores 4 We assumed candidates scores certain stage current voter award fewer points candidate lower index tiebreaking rule results M Zuckerman et al Artiﬁcial Intelligence 173 2009 392412 401 Candidate c C σ0c σ1c σ2c σ cid10 3c σ cid10 4c p 5 11 17 23 29 1 0 5 10 15 20 2 18 22 22 25 28 3 19 22 23 27 28 4 20 22 24 24 28 5 21 22 25 26 28 6 22 22 26 28 28 Evidently c C p σ cid10 4p 29 σ cid10 4c 32 Maximin In subsection Algorithm 1 respect Maximin rule Lemma 315 Maximin monotone weights Proof Let X S preference orders voters S let X T preference orders voters T cid10 W w p win We need preference orders T w cid2 1 integer p win Fix order voters T By deﬁnition c C p σnc σnp Let vote p ﬁrst place arbitrary order candidates Then additional voter T c C p σn1p σnp w σnc w cid2 σn1c got ballot votes T cid10 T v weight list W p win cid2 cid10 cid10 Theorem 316 In CCWM Maximin let C set candidates p C preferred candidate S set voters cast votes Let W weight list set T Then 1 If ballot making p win election Algorithm 1 return false 2 If ballot making p win election instance weight list W cid10 st W cid10 W W W cid10 contains copies W Algorithm 1 return true Let introduce notation For candidates g g voters j stages including voters S prefer g g g C 0 cid3 j cid3 n MIN jg cid10 cid9 h C g N jg h σ jg cid10 C 0 cid3 j cid3 n denote N jg g cid10 So σ jg mingcid10Cg N jg g cid10 total weight cid10 We denote In words MIN jg set candidates constitute worst opponents g pairwise elections stage j Put differently candidates competition g deﬁnes Maximin score g stage j Fixing set C p C order weight list W denote f j maximal score ps opponents distributed Algorithm 1 j stages f j max gCp σ jg In Algorithm 1 p placed preference voter score grows weight voter In lemma forward upper bound growth rate scores ps opponents Lemma 317 Consider Algorithm 1 applied Maximin rule Denote w j weight jth voter processed algorithm Then 0 cid3 j cid3 n 2 f j 2 cid3 f j maxw j1 w j2 To intuitively lemma implies Theorem 316 notice copies W score p wW w wW w lemma score strongest candidate increase increase 2 We prove lemma theorem follow easily cid2 cid2 Proof Let 0 cid3 j cid3 n 2 Let g cid6 p candidate By deﬁnition σ jg cid3 f j We like σ j2g cid3 f j maxw j1 w j2 If σ j1g cid3 f j σ j2g cid3 σ j1g w j2 cid3 f j maxw j1 w j2 So let assume σ j1g f j Deﬁne directed graph G V E V g cid9 cid10 x C p x ranked g stage j 1 x y E iff y MIN jx There outgoing edge g E g voter j 1 ranked g σ j1g σ jg cid3 f j contradiction cid10 MIN jg 402 M Zuckerman et al Artiﬁcial Intelligence 173 2009 392412 Fig 1 The induced subgraph Gg In addition claim x V g outgoing edge x E Indeed cid10 MIN jx ranked g stage j 1 Hence x σ j1x σ jx cid3 f j σ j1g cid10cid10 This implies Algorithm 1 ranked x g stage j 1 contradiction fact x V g For x V denote V x vertices y V exists directed path x y Denote Gx cid10 U cycle subgraph G induced V x It easy Gg contains cycle Let U cycle Let g vertex ranked highest vertices U stage j 1 Let g cid10 g cid10cid10 g Suppose contradiction σ j2g f j maxw j1 w j2 g ranked j 2 place t stage j 1 follows σ j1g cid10cid10 cid10cid10 σ jg vertex g cid10 U Since g ranked g cid10cid10 cid3 f j Then g cid10cid10 cid10cid10 cid10 ranked j 2 t f j w j2 σ j2g instead ga contradiction reached place t pick g cid10cid10 score σ j2g cid10cid10 cid3 Denote X1 vertices V g outgoing edge g Gg For x X1 g cid10cid10 All x X1 ranked j 2 g x X1 st place t σ jx N jx g added preference list evaluating score place t N j1x g cid10cid10 w j1 σ jx w j1 σ j2g x instead g σ j2x cid3 N j2x g cid10cid10 cid3 N jx g Denote X2 vertices V g outgoing edge vertex x X1 In manner vertices X2 ranked stage j 2 g We continue manner deﬁning sets X3 set Xl contains vertices V g outgoing edge vertex Xl1 argument shows elements sets ranked g stage j 2 As path g g Gg eventually reach g way l Xl contains vertex g0 edge g g0 Fig 1 cid10cid10 cid10cid10 MIN jx cid10cid10 Thus σ j2g cid3 N j2g g0 N j1g g0 cid3 N jg g0 w j1 σ jg w j1 cid3 f j maxw j1 w j2 σ j2g contradiction cid2 We ready prove Theorem 316 Proof We prove 1 Algorithm 1 returns true constructs valid ballot makes p win ballot making p win Algorithm 1 return false We prove 2 Suppose exists ballot Z T making p win weight list W w 1 wn Let σ cid10 jg scores implied Z T Then f 0 σ cid10 np cid3 σ0p ncid4 i1 w 11 cid10 W W X X list weights possibly We need σW cid10p f W cid10 In equal weights copies W adjacent order cid10 Let W Algorithm 1 sorting weights W weights W form cid10 x1 xq1 w 1 w 1 xq11 xq2 w 2 w 2 wn wn xqn1 x X By Lemma 317 prove induction cid7 W cid8 cid10 f cid3 f 0 Xcid4 ncid4 w xi i1 i1 12 M Zuckerman et al Artiﬁcial Intelligence 173 2009 392412 403 And 11 12 σW cid10p σ0p Xcid4 i1 xi 2 ncid4 i1 w f 0 Xcid4 ncid4 w cid2 f cid7 W cid8 cid10 xi cid2 i1 i1 In Appendix B simple algorithm tailormade Maximin enjoys implications The orem 316 However algorithm extend voting rules Algorithm 1 Moreover believe Algorithm 1 better comes unweighted manipulation Sections 4 6 33 Plurality runoff In subsection present heuristic algorithm CCWM problem Plurality Runoff The algorithm receives parameter size window 0 cid3 u cid3 maxW wrong answer Its running time depends size input u We begin noting Lemma 318 Plurality Runoff monotone weights Proof Let C candidates p C preferred candidate S set truthful voters W weights manipulators T Suppose ballot votes T makes p win election We need cid10 W w w cid2 1 Let g candidate proceeds p ballot making p win set W second round winning ballot W Let additional voter vote p cid16 Then plurality score p g decrease plurality score candidate remain p g proceed round new ballot In second round p beat g new ballot total weight voters prefer p g increased total weight voters prefer g p remained Thus p win election new ballot cid2 We informal description algorithm We candidates p To candidate g try assign voters minimal total weight voters place g ﬁrst g continues second round rest voters rank p ﬁrst If succeeded way g p survive ﬁrst round second round p beats g valid ballot making p win election If candidate g way report ballot A formal description algorithm Algorithm 3 given The following additional notations required Denote β X g plurality score g voter set X sum weights voters X g preferences We use N X g g w v weight voter v Finally g g vU w v U set voters X prefer g g broken favor g cid10 C denote g cid19 g tie g g cid10 cid2 cid10 cid10 cid10 Remark 319 In Algorithm 3 rely assumption g cid6 p g cid19 p In fact algorithm deal tiebreaking mechanism distinct candidates x y x cid19 y y cid19 x regardless manipulators cast votes An example tiebreaking mechanism favor candidates smaller indices according order candidates This necessarily reasonable way break ties political elections roughly speaking general asking p unique winner assumption underlying previous results More precisely Plurality Runoff differs Borda Maximin sense different rounds different scores Hence unique winner model interpreted ambiguously context If break ties p algorithm supports p tied candidate second ticket second round lose interpretation p advanced second round won second round vast majority unique winner In theorem prove correctness Algorithm 3 analyze time complexity We getting exact answer u 0 need running time polynomial maxW rest input As weights W speciﬁed binary representation requires exponential time However size error window increases complexity decreases u Ω maxW logmaxW complexity algorithm polynomial input Theorem 320 In CCWM Plurality Runoff let C set candidates p C preferred candidate S set voters cast votes Let W weight list set T let u cid2 0 error window Then 1 If ballot making p win election Algorithm 3 return false 2 If ballot making p win election problem voter set T W cid10 W wn1 wnl l cid2 0 j1 wn j cid2 u Algorithm 3 return true cid2 l cid10 T vn1 vnl weight list 404 M Zuckerman et al Artiﬁcial Intelligence 173 2009 392412 1 procedure PluralitywithrunoffC p X S W S W u cid2 X S set preferences voters S W S weights voters S W w 1 wn weights voters T u size error window g C p exists g cid2Go candidates C p cid10 cid19 g cid10 cid6 g st g cid10 g continue cid10 βS g end λg λg maxgcid10Cp βS g λg maxgcid10Cp βS g cid2x 0 1n minimizes cid2 n i1 w cid10 argmaxgcid10CpβS g cid10 βS g 1 end x subsetofweightsapproximateW λg u All voters j st x j 1 vote g cid16 All voters j st x j 0 vote p cid16 g 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 end 23 end 24 25 return false 26 end procedure 27 28 procedure subsetofweightsapproximateW λg u cid10 C p g st βS g βS g cid10 βS p βT p cid10 βS p βT p g return true continue continue cid2If g pass round cid2Go candidate main loop cid2 j1 w j x j j1 w j x j cid4 λg j x j 0 1 n cid2Order candidates g arbitrary cid2 n cid10 cid19 p cid2 p pass round cid2No appropriate g cid2W w 1 wn weights end N ST p g N ST g p N ST p g N ST g p p cid19 g cid2 p beats g second round voters T λg minimum total sum desired weights u size error window 31 cid22 1 29 30 Check 0 cid3 u cid3 maxW ku cid21 u 2n j1 w j x j cid3 Solve dynamic prog max Let x 0 1n vector maximizes sum 32 return cid31 x 33 34 end procedure cid2 n j1 cid21 w j ku cid22x j cid2 n cid2 n j1 w j λg j x j 0 1 cid2cid31 vector n 1s Algorithm 3 Decides CCWM Plurality Runoff desired accuracy 3 On input C p X S W S W u C m S N W n u integer st 0 cid3 u cid3 maxW running time Algorithm 3 polynomial m N logmaxW S n maxW u1 Proof We start 1 Note x x1 xn satisﬁes ncid4 j1 w j x j cid3 ncid4 j1 w j λg x cid31 x satisﬁes ncid4 j1 w j x j cid2 λg 13 λg deﬁned Algorithm 3 total weight votes g needs order proceed second round x binary vector length n computed algorithms subroutine Thus voters corresponding weights returned function SUBSETOFWEIGHTSAPPROXIMATE Algorithm 3 vote g cid16 ensure g proceeds second round It easy Algorithm 3 returns true actually ﬁnds valid ballot making p win election ballot algorithm return false We 2 Let A W instance problem weight list W Suppose exists ballot X T Y g cid10 w v XT cid10 W wn1 wnl cid10 u votes T st combined preferences X S voters S makes p win election A W We denote βcid10 plurality score g voter set Y preferences X S X T Also denote N U X S X T set voters Y prefer g g l cid2 0 cid10 Y g g X S X T Let 0 cid3 u cid3 maxW W j1 wn j cid2 u We need Algorithm 3 return true input W There candidate g cid6 p passes p second round applying preferences X T cid10 cid10 p g c p g c cid19 g βcid10 cid10 βcid10 vU X S cid2 l cid2 cid10 cid10 S c βcid10 T c cid2 βcid10 S g T g X S A W candidate g g cid10 cid19 c βcid10 cid10 βcid10 T c βcid10 S c βcid10 T g S g cid10 Also β cid10 T p β cid10 T g cid3 ncid4 j1 w j 14 M Zuckerman et al Artiﬁcial Intelligence 173 2009 392412 405 Now consider Algorithm 3 applied A W cid10 If reach g main loop exit earlier returning true meaning ﬁnd desired ballot making p win Otherwise reach candidate g λg minimal sum weights ensures g continue second round λg cid3 β cid10 T g cid3 ncid4 j1 w j cid3 nlcid4 j1 w j 15 We reach function SUBSETOFWEIGHTSAPPROXIMATE enter arguments W vector x x1 xnl returned SUBSETOFWEIGHTSAPPROXIMATE satisﬁes round Now p continue round Denote H maximization problem cid10 λg u By 13 nl j1 w j x j cid2 λg g continue cid2 nlcid4 max w j x j j1 nlcid4 w j x j cid3 st nlcid4 w j λg j1 j1 x j 0 1 j x j 1 x x1 xnl optimal solution H Denote P j 1 n l Let J maximization problem 16 cid2 j J w j Let Hk scaled version max cid21 w j k cid22x j nlcid4 j1 nlcid4 st w j x j cid3 j1 x j 0 1 nlcid4 j1 w j λg 17 j 1 n l J k j x j 1 x x1 xnl optimal solution Hk Let P k Let obtained SUBSETOFWEIGHTSAPPROXIMATE satisﬁes ku cid21 u 2nl cid22 1 cid2 j J k w j Now x x1 xnl nlcid4 j1 cid4 cid4 cid11 ku w j cid2 w j x j cid12 cid2 cid11 cid4 ku w j ku cid12 cid2 cid4 cid7 j J cid8 w j ku 1 w j ku j J ku cid4 j J ku w j ku 1 J j J j J ku 1 J P Hence vector x cid31 x returned function satisﬁes nlcid4 j1 w j x j cid3 cid3 cid3 nlcid4 j1 nlcid4 j1 nlcid4 j1 w j P ku 1 J cid11 cid11 w j P w j P cid12 n l u 2n l cid12 u 2 By deﬁnition P nlcid4 j1 w j P min cid13 nlcid4 cid13 j1 ncid4 j1 cid3 min cid3 β cid10 T g cid14 w j x j cid2 λg x j 0 1 1 cid3 j cid3 n l w j x j cid2 λg x j 0 1 1 cid3 j cid3 n cid14 w j x j w j x j nlcid4 j1 ncid4 j1 18 19 20 406 M Zuckerman et al Artiﬁcial Intelligence 173 2009 392412 Combining 19 20 vector x returned function SUBSETOFWEIGHTSAPPROXIMATE βT cid10 g nlcid4 j1 w j x j cid3 β cid10 T g cid11 cid12 u 2 In algorithm voters j st x j 0 vote p cid16 βT cid10 p nlcid4 j1 ncid4 j1 w j nlcid4 j1 ncid4 w j x j cid2 cid15 w j u β cid10 T g cid12cid16 cid11 u 2 w j β cid10 T g cid17 u 2 j1 cid18 cid2 β cid10 T p cid17 cid18 u 2 21 22 For candidate c c p g c ranked preference lists Algorithm 3 βST cid10 c βS c cid3 βcid10 ST c On hand 22 βST cid10 p βS p βT cid10 p cid2 βS p β cid10 T p cid17 cid18 β cid10 ST p cid18 cid17 u 2 cid2 β cid10 ST p u 2 Recall p beats c ﬁrst round X T It follows p beats c ﬁrst round Algorithm 3 p continue round We prove p beats g round If g cid19 p winning ballot X T N cid10 S g p N cid10 T g p From 21 cid10 T g p N N cid10 S p g N cid12 cid11 cid10 cid10 T p g cid2 N S g p N cid11 cid12 cid10 S p g N cid10 T p g N T cid10 g p βT cid10 g cid3 β cid10 T g Thus 23 u 2 cid3 N cid10 T g p u 2 N T cid10 p g nlcid4 j1 w j N T cid10 g p cid2 cid15 w j u N cid10 T g p cid12cid16 cid11 u 2 N cid10 T p g cid17 cid18 u 2 ncid4 j1 So g cid19 p N cid10 S p g N T cid10 p g cid2 N cid10 S p g N cid10 T p g N cid10 S g p N cid10 T g p cid2 N cid10 S g p N T cid10 g p In way p cid19 g N cid10 S p g N T cid10 p g cid2 N cid10 S g p N T cid10 g p cid18 cid12 cid17 cid11 u 2 u 2 Therefore p wins second round election entire election algorithm return true Next prove 3 Using notation previous let P k maximum sum weights W w 1 wn solving scaled maximization problem Hk5 There wellknown dynamic programming algo rithm solving knapsack problem Hk time O n P k 19 Chapter 9 Furthermore P k cid3 cid22 cid3 cid22 1 cid2 u1 ncid21 maxW k The algorithm sets ku cid21 u 2n 2n cid22 cid3 n maxW cid2 n j1 cid21 w j k k P ku cid3 n maxW ku cid3 n maxW u1 2n 2n2 maxW u 1 27 Thus solve Hku O n P ku O n3 maxW u1 polynomial inputs proof completed cid2 It easy steps Algorithm 3 5 We slightly abuse notation deﬁned optimization problems weight set W cid10 w 1 wnl deﬁnition set W analogous 23 24 25 26 M Zuckerman et al Artiﬁcial Intelligence 173 2009 392412 407 4 Unweighted coalitional manipulation In section discuss application results given unweighted coalitional manipulation CCUM problem present new theorem We theorems translated approximation classical sense results natural setting It known CCUM problem tractablewith respect voting rule computed polynomial timewhen number candidates constant 7 However best knowledge time submission results complexity problem number candidates constant cases STV Second Order Copeland CCUM hard single manipulator 23 We conjecture CCUM Borda Maximin N P complete In context unweighted manipulation consider following optimization problem Deﬁnition 41 In Constructive Coalitional Unweighted Optimization CCUO problem given unweighted votes truthful voters We ﬁnd minimum number manipulators needed order p win minimum number manipulators cast unweighted votes way makes p win Then theorems directly imply following corollary Corollary 42 1 Algorithm 2 approximates CCUO Borda additive error 1 2 Algorithm 1 2approximation algorithm CCUO Maximin Proof It minimum number manipulators needed order p win Borda Max imin polynomial rest input Indeed case apply bruteforce search Algorithms 2 1 respectively order approximate answer In words run algorithm number manipulators k 0 pn polynomial p The minimum k gives true answer Borda resp Maximin guaranteed larger 1 resp twice large optimal answer Theorem 34 resp Theorem 316 So suﬃcient prove following lemmata Lemma 43 Let cid4α1 αmcid5 scoring protocol α1 αm 0 In CCUO problem let C c1 cm1 p candidates S set truthful voters S N n minimal number manipulators exists ballot making p win Then n cid3 N 1m 1 N 1m 1 Let manipulator 1 cid3 j cid3 N 1m 1 Proof We exists ballot making p win n vote p cid16 cid16 ci1 j 1 modm 1 0 cid3 cid3 m 2 rest order arbitrary With m 1 voters difference scores candidate c j p decreases α1 αm Moreover 1 cid3 j cid3 m 1 σ0c j cid3 σ0p Nα1 αm σN1m1c j cid3 σN1m1p α1 αm σN1m1p Hence p win election cid2 Lemma 44 Consider CCUO problem Maximin protocol In notation Lemma 43 n cid3 N 1 N 1 Let manipulator vote p cid16 Then Proof We exists ballot making p win n candidate c j σN1c j cid3 N N1c j p cid3 N Moreover candidate c j cid6 p N N1p c j cid2 N 1 σN1p cid2 N 1 Hence candidate c j σN1c j σN1p implying p win cid2 This concludes proof corollary cid2 On hand following results Corollary 45 Algorithm 3 eﬃciently solves CCUM problem Plurality Runoff Proof Follows special case Theorem 320 error window u 0 number additional voters l 0 weights equal 1 cid2 Theorem 46 Algorithm 2 eﬃciently solves CCUM problem Veto A short discussion order CCUM Veto Indeed problem solved eﬃciently trivial algo rithm The fact manipulator veto single candidate interpreted follows manipulator picks 408 M Zuckerman et al Artiﬁcial Intelligence 173 2009 392412 candidate score p increases 1 relative candidate changing respect candidate Thus simply count number manipulators needed guarantee p points candidate Formally denote σ0c score candidate c based votes S clearly exists vote T making p win cid4 max cCp cid8 cid7 σ0c σ0p 1 0 cid3 T In context CCUM Veto Algorithm 2 sense instantiation simple scheme described However direct proof Theorem 46 given Appendix C simpler analogous version proof Theorem 34 Finally note Corollary 45 Theorem 46 imply CCUO Plurality Runoff Veto P 5 Relation work frequency manipulation At point like indepth exposition previous work frequency manipulation connect paper An interesting approach abovementioned issue presented Conitzer Sandholm 6 They noticed election instance manipulated eﬃciently satisﬁes properties weak monotonicitya property satisﬁed prominent voting rulesand arguable property manipulators able exactly candidates win election Conitzer Sandholm empirically showed second property holds high probability different standard voting rules This empirical validation carried respect small coalitions voters skewed distributions election instances Procaccia Rosenschein 23 leveraged intuitions provided Conitzer Sandholm They analyzed probability manipulators able affect outcome election candidates win conditioned fraction manipulators They general distributions election instances n o N manipulators affect outcome high probability opposite true n ω N These results extended previous work asymptotic strategy proofness 128 Another result recently presented Friedgut Kalai Nisan 13 They showed single manipulator ﬁnd manipulation relatively good probability simply switching randomly chosen linear preferences particular high probability success achieved repeating process polynomial number times This true provided voting rule question far dictatorial welldeﬁned sense The proof theorem beautiful sadly current proof works 3 candidates Most closely related paper work Procaccia Rosenschein 24 attempted establish framework enable showing manipulations typically easy For purpose deﬁned tion junta distributions intuitively arguably hard manipulate election instances coalitional manipulation setting Moreover deﬁned voting rule susceptible manipulation algorithm decides CCWM high probability success instances distributed according junta distribution The rationale algorithm respect especially hard junta distributions respect reasonable distributions Procaccia Rosenscheins main result scoring rules susceptible manipulation according foregoing deﬁnition Technically Procaccia Rosenscheins result fact loose bound window error Algo rithm 2 Although analysis holds scoring rule suffers major shortcomings First looser given paper consequently allow corollaries unweighted coalitional manipula tion In contrast result Borda far stronger window error accurately characterized The stronger result allowed Corollary 42 A second major disadvantage Procaccia Rosenscheins analysis applies constant number candidates m O 1 However result Procaccia Rosen schein deals scoring rules general Scoring rules deal Borda Veto result strictly subsumes Erdélyi et al 11 discuss notion junta distributions length They idea junta distributions applied SAT problem suﬃcient classify hardtodecide distributions Their work inconclusive comes application junta distributions hardness manipulation problems Still point lack link mathematical framework dealing frequency manipula tion hardness average In light shall shortly consider intuitive frequency manipulation implications results formal Our theorems imply algorithms err speciﬁc conﬁgurations voters weights It productive imagine points real line representing total weight T In case Borda algorithm correct negative answer points left point x correct positive answer points right x max W The range x x max W window error This simpliﬁcation situation useful nonetheless Now intuitively consider reasonable distribution instances CCUM problem weights randomly selected The fact distribution reasonable guarantees manipulators total weight distributed large range Therefore probability hitting tiny window error extremely small This intuitively means high probability algorithms correctly decide manipulation problem M Zuckerman et al Artiﬁcial Intelligence 173 2009 392412 409 6 Discussion We like devote ﬁnal section short discussion extensions results applications voting rules We noted elaborate Appendix A Copelands rule monotone weights This preclude type analysis presented Nevertheless possible obtain similar results endows manipulators option abstain voting In way voting rule monotone weights additional manipulators abstain This major departure model manipulators coordinate votes natural assume agree vote The prominent Single Transferable Vote STV rule discussed In STV election proceeds rounds voter casts vote candidate ranks ﬁrst remaining candidates candidate lowest score eliminated It diﬃcult apply approach STV reasons First notion score true Plurality Runoff Second hard voting rule manipulate Indeed known STV hard manipulate single manipulator 2 However theory STV amenable type analysis remains fascinating direction future research Finally conjecture analysis performance Algorithm 1 respect CCUM Maximin tight possible lower bound 2 32 close variant algorithm Acknowledgements The authors like thank Vincent Conitzer excellent comments draft paper particular pointing alternative 2approximation algorithm Maximin given Appendix B The authors thank anonymous AIJ reviewers insightful comments This work partially supported Israel Science Foundation grant 89805 Appendix A Copeland monotone weights When discussing Scoring rules Maximin Plurality Runoff motivated look approximate solutions CCWM problem fact voting rules monotone weights In contrast Copeland monotone weights The example illustrates fact Consider following setting C p 1 2 3 N S 6 All weights equal 1 The votes voters S shown following table Voter S 1 2 3 4 5 6 Vote p cid16 1 cid16 2 cid16 3 p cid16 2 cid16 1 cid16 3 3 cid16 p cid16 1 cid16 2 3 cid16 p cid16 2 cid16 1 1 cid16 2 cid16 3 cid16 p 2 cid16 1 cid16 3 cid16 p The pairwise results given table In cell corresponding row candidate g column preferred g b voters write b indicate g preferred g voters g cid10 cid10 cid10 candidate g N0g g cid10 b N0g cid10 g p 24 24 42 1 42 33 24 2 42 33 24 p 1 2 3 3 24 42 42 From table calculate σ0p 1 σ01 σ02 0 σ03 1 p wins election setting However add voter weight 1 matter vote p win election additional voter puts 1 2 1 win 2 win Remark A1 It easy manipulation coalition weights W manipulation coalition weights W w w w cid2 1 integer ﬁrst additional voter makes arbitrary vote second additional voter reverses ﬁrsts ranking 410 M Zuckerman et al Artiﬁcial Intelligence 173 2009 392412 Appendix B Alternative algorithm CCWM maximin Consider following simple algorithm refer Algorithm 4 Given list weights W let W w 1 wk maximal respect set inclusion list weighted votes W contains copies W W 1 W 2 W W 1 W 2 W 6 Each manipulator W 1 votes p cid16 c1 cid16 cid16 cm1 manipulator W 2 votes p cid16 cm1 cid16 cid16 c1 The remaining manipulators rank p ﬁrst candidates arbitrarily The algorithm returns true iff ballot makes p win cid10 cid10 cid10 We easily Theorem 316 applies Algorithm 4 Theorem B1 In Maximin rule let C set candidates p C preferred candidate S set voters cast votes Let W weight list set T Then 1 If ballot making p win election Algorithm 4 return false 2 If ballot making p win election instance weight list W cid10 st W cid10 W W W cid10 contains copies W Algorithm 4 return true Proof Item 1 obvious algorithm constructive For item 2 let σ c candidate cs Maximin score based votes S manipulator weights W p win Let σ cid10c cs Maximin score based votes S votes W W according algorithm notice W W 1 W W 2 Finally let σ c cs score according algorithm weight list W cid2 k i1 wk cid10 C c p w multiset W exactly manipulator W 1 W 2 weight w ranks c c c i1 wk Moreover clearly c C p σ cid10c cid3 σ c Since σ p σ c c C p conclude As denote W w 1 wk First note σ cid10p cid2 σ p cid2 k cid10 cid10 c C p σ cid10 p σ cid10 c 28 In order complete proof note σ p σ cid10p cid2 σ c σ cid10c c C p manipulators weights W cid10 W 1 W 2 rank p ﬁrst Together σ p σ c c C p cid2 Appendix C Proof Theorem 46 We prove theorem Lemmata C1C4 The proof technique similar Theorem 34 proof easier First deﬁne set Xn x C p x ranked stage j 1 cid3 j cid3 n In addition deﬁne Yn y C p σn y cid2 minσn Xn From deﬁnition Xn Yn Also deﬁnition cid8 cid7 g Yn p σng min σnYn 29 We denote α jx number points x awarded stage j Lemma C1 For y1 y2 Yn σn y1 σn y2 cid3 1 Proof Let x σnx Xn st σnx minσn Xn Let y Yn By deﬁnition σnx 1 Suppose contradiction σn y σnx cid2 2 Let 1 cid3 j cid3 n maximal st α jx cid3 σn y We like σn y cid3 0 Then cid19 σ j y σ jx σn y ncid4 cid20 cid19 αk y σnx ncid4 cid20 αkx k j1 cid21 cid22 σn y n j cid21 cid2 σnx k j1 cid22 n j σn y σnx cid2 2 Therefore σ j1 y σ j1x cid3 σn y cid3 σnx σnx cid2 1 σ j1 y σ j1x contradiction α jx 1 y1 y2 Yn σn y1 σn y2 cid3 1 cid2 0 We showed y Yn Lemma C2 Deﬁne qn 1 Yn cid2 yYn implied Z T including votes S Then q cid2 cid10n 1 Yn σ cid10 n y cid2 qn yYn σn y Let Z T preference list voters T σ cid10 ng scores g C 6 To simplify notation overload W identify list manipulators It straightforward set eﬃciently Indeed weight list W simply check copy place W 1 W 2 cid10 M Zuckerman et al Artiﬁcial Intelligence 173 2009 392412 411 Proof The fact true algorithm stage j x Xn Yn α jx 0 jg number points candidate g j sum gets voter j Z T Then α j y Yn 1 minimal Formally let denote αcid10 yYn cid2 qn 1 Yn cid3 1 Yn 1 Yn cid15 cid4 yYn cid15 cid4 yYn cid4 yYn cid16 cid8 cid7 Yn 1 σ0 y n σ0 y cid16 αcid10 j y ncid4 cid4 j1 yYn σ cid10 n y q cid10 n cid2 Lemma C3 If σnp maxσnYn Algorithm 2 ﬁnd manipulation makes p win Proof By Eq 29 g C p σng cid3 maxσnYn σnp maxσnYn g C p σnp σng algorithm ﬁnd manipulation cid2 Lemma C4 If σnp cid3 maxσnYn exists manipulation jp follows σnp cid2 σ cid10 Proof Let Z T set preferences voters T let σ cid10 1 cid2 αcid10 By Lemma C1 cid27qncid28 maxσnYn Combining foregoing steps obtain cid8 cid7 σnYn np There g0 Yn st σ cid10 cid2 σnp cid2 σ cid10 cid10n αcid10 cid23 qn ng q max cid23 q σ cid10 ng0 cid2 cid2 cid24 cid24 cid10 np We conclude p win Z T ballot votes T makes p win election cid2 n jg Lemma C2 As j α jp cid10ncid28 cid2 cid27qncid28 cid10ncid28 By Lemma C2 cid27q ng0 cid2 cid27q The proof Theorem 46 completed References 1 E Baharad Z Neeman The asymptotic strategyproofness scoring Condorcet consistent rules Review Economic Design 4 2002 331340 2 J Bartholdi J Orlin Single transferable vote resists strategic voting Social Choice Welfare 8 1991 341354 3 J Bartholdi CA Tovey MA Trick The computational diﬃculty manipulating election Social Choice Welfare 6 1989 227241 4 EH Clarke Multipart pricing public goods Public Choice 11 1971 1733 5 V Conitzer T Sandholm Universal voting protocol tweaks manipulation hard Proceedings Eighteenth International Joint Conference Artiﬁcial Intelligence IJCAI03 Acapulco Mexico 2003 pp 781788 6 V Conitzer T Sandholm Nonexistence voting rules usually hard manipulate Proceedings TwentyFirst National Conference Artiﬁcial Intelligence AAAI06 Boston 2006 pp 627634 7 V Conitzer T Sandholm J Lang When elections candidates hard manipulate Journal ACM 54 3 2007 133 8 E Elkind H Lipmaa Hybrid voting protocols hardness manipulation ISAAC Lecture Notes Computer Science SpringerVerlag 2005 pp 206215 9 E Elkind H Lipmaa Small coalitions manipulate voting FC Lecture Notes Computer Science SpringerVerlag 2005 10 E Ephrati JS Rosenschein A heuristic technique multiagent planning Annals Mathematics Artiﬁcial Intelligence 20 1997 1367 11 G Erdélyi LA Hemaspaandra J Rothe H Spakowski On approximating optimal weighted lobbying frequency correctness versus averagecase polynomial time Fundamentals Computation Theory Lecture Notes Computer Science vol 4639 SpringerVerlag 2007 pp 300311 12 P Faliszewski E Hemaspaandra LA Hemaspaandra The complexity bribery elections Proceedings TwentyFirst National Conference Artiﬁcial Intelligence AAAI 2006 Boston 2006 13 E Friedgut G Kalai N Nisan Elections manipulated Proceedings FortyNinth Conference Foundations Computer Science FOCS08 2008 press 14 S Ghosh M Mundhe K Hernandez S Sen Voting movies The anatomy recommender Proceedings Third Annual Conference Autonomous Agents Seattle 1999 p 434435 15 A Gibbard Manipulation voting schemes Econometrica 41 1973 587602 16 T Groves Incentives teams Econometrica 41 1973 617631 17 T Haynes S Sen N Arora R Nadella An automated meeting scheduling utilizes user preferences Proceedings First Annual Conference Autonomous Agents Marina del Rey California 1997 pp 308315 18 E Hemaspaandra LA Hemaspaandra J Rothe Anyone The complexity precluding alternative Artiﬁcial Intelligence 171 56 2007 255285 19 DS Hochbaum Approximation Algorithms NPHard Problems PWS Publishing Company 1997 20 H Moulin On strategyproofness single peakedness Public Choice 35 1980 437455 21 K Oﬂazer G Tür Morphological disambiguation voting constraints Proceedings 8th Conference European Chapter Association Computational Linguistics EACL 1997 1997 pp 222229 22 D Pennock E Horvitz L Giles Social choice theory recommender systems Analysis axiomatic foundations collaborative ﬁltering Proceedings 17th National Conference Artiﬁcial Intelligence AAAI 2000 2000 pp 729734 23 AD Procaccia JS Rosenschein Averagecase tractability manipulation elections fraction manipulators The Sixth International Joint Conference Autonomous Agents Multiagent Systems AAMAS 2007 Honolulu Hawaii May 2007 pp 718720 412 M Zuckerman et al Artiﬁcial Intelligence 173 2009 392412 24 AD Procaccia JS Rosenschein Junta distributions averagecase complexity manipulating elections Journal Artiﬁcial Intelligence Re search 28 2007 157181 25 AD Procaccia JS Rosenschein A Zohar Multiwinner elections Complexity manipulation control winnerdetermination The Twentieth International Joint Conference Artiﬁcial Intelligence IJCAI 2007 Hyderabad India January 2007 pp 14761481 26 M Satterthwaite Strategyproofness Arrows conditions Existence correspondence theorems voting procedures social welfare func tions Journal Economic Theory 10 1975 187217 27 G Sigletos G Paliouras C Spyropoulos M Hatzopoulos Combining information extractions systems voting stacked generalization Journal Machine Learning Research 6 2006 17511782 28 A Slinko How large coalition manipulate election Mathematical Social Sciences 47 3 2004 289293 29 W Vickrey Counter speculation auctions competitive sealed tenders Journal Finance 16 1 1961 837