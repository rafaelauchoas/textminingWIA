Artiﬁcial Intelligence 172 2008 15791604 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint Heuristics planning penalties rewards formulated logic computed circuits Blai Bonet Héctor Geffner b Departamento Computación Universidad Simón Bolívar Caracas Venezuela b Departamento Tecnología ICREA Universitat Pompeu Fabra 08003 Barcelona Spain r t c l e n f o b s t r c t Article history Received 17 August 2007 Received revised form 2 March 2008 Accepted 6 March 2008 Available online 29 March 2008 Keywords Planning Planning heuristics Planning rewards Knowledge compilation The automatic derivation heuristic functions guiding search plans fundamental technique planning The type heuristics considered far deal simple planning models costs associated actions states In work address limitation formulating expressive planning model corresponding heuristic preferences form penalties rewards associated ﬂuents The heuristic generalization wellknown deleterelaxation heuristic admissible informative intractable Exploiting correspondence heuristics preferred models property formulas compiled dDNNF suitable relaxation domain expressed strong completion logic program time indices horizon compiled dDNNF heuristic computed search state time linear size compiled representation This representation deﬁnes evaluation network circuit maps states heuristic values lineartime While circuit exponential size worst case OBDDs necessarily We report empirical results discuss application framework settings goals preferences illustrate versatility account developing new heuristic overcomes limitations deletebased relaxations use valid implicit plan constraints In particular Traveling Salesman Problem new heuristic captures exact cost deleterelaxation heuristic exponential worst case captures Minimum Spanning Tree lower bound 2008 Elsevier BV All rights reserved 1 Introduction The automatic derivation heuristic functions problem descriptions Strips action languages key developments recent planning research 1451 Provided heuristics search plans comes focused heuristics admissible overestimate optimality plans ensured 55 The type heuristics considered far limitations Basically nonadmissible 1240 suﬃciently informative 39 case restricted cost functions plan costs depend actions states As result tradeoffs expressed limited particular possible state preference achieving avoiding atom p way goal preference account searching plans Corresponding author Email addresses bonetldcusbve B Bonet hectorgeffnerupfedu H Geffner 00043702 matter 2008 Elsevier BV All rights reserved doi101016jartint200803004 1580 B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 In work address limitations formulating derivation heuristic functions logical framework We shown heuristic represented planning graph 11 understood precise form deductive inference stratiﬁed theory encodes problem 31 Here goal reconstruct existing heuristic use logical formulation producing new The advantages logical framework derivation heuristic information inference problem transparent tools logic powerful algorithms developed certain types logical inferences particularly effective The includes algorithms checking satisﬁability 52 computing answer sets 61 compiling CNF formulas tractable representations 25 Here consider preferences actions ﬂuents p expressed terms real costs ca cp Action costs assumed nonnegative ﬂuent costs positive negative Negative costs express rewards The cost plan assumed given sum action costs plus sum atom costs atoms true plan We interested computing plan minimum cost This deﬁned task remains welldeﬁned goals preferences In case best plans simply try collect rewards avoiding penalties rewards action costs nonnegative best plan The cost model fully general considerably expressive underlying classical planning As model generalizes recent formulations deal oversubscription soft goals 6064 setting modeled terminal rewards rewards collected propositions hold end plan On hand costs rewards combined additively unlike recent frameworks 8 partiallyordered preferences handled c The deﬁnition planning model motivated desire additional expressive power principled feasible computational approach dealing For want useful heuristic clear semantics capable capturing interesting cost tradeoffs feasible algorithm computing We able express model example navigation problems coins different values collected avoiding possible certain cells blocksworld problems tallest tower constructed number blocks touch table minimized In order test effectiveness approach consider classical planning tasks assess approach empirically relation existing heuristics planners c The heuristic h develop simple corresponds optimal cost relaxed problem deletelists actions ignored 12 Since searching heuristic classical setting involves intractable computation state s visited 15 planners HSP FF resort polynomial nonadmissible approximations 1240 In work considering general cost structure different approach search state pay price intractable computation preprocessing compute heuristic h This preprocessing yields deemed evaluation network circuit plug search state obtain heuristic value linear time Of course time construct evaluation network size network exponential necessarily The evaluation network directed acyclic graph results compiling relaxation planning theory dDNNF form akin OBDDs introduced 2122 renders eﬃcient number intractable queries transformations 25 The heuristic values obtained cost best models computed linear time relaxed theory compiled dDNNF 26 The framework deﬁned formulation heuristic h terms logic computation terms compiled dDNNF representations evaluated empirically broad set problems heuristic guide search optimal plans c An important characteristic logical encoding deleterelaxation heuristic unlike standard logical encodings planning problem 44 explicit temporal stratiﬁcation form time indices horizons needed This follows use positive logic programs expressing effects actions intermediate representation focus models minimal sense true ﬂuents wellfounded justiﬁcation Such minimal models capture implicit stratiﬁcation correspondence explicit temporal stratiﬁcation adopted standard logical approaches planning A concrete result implicit stratiﬁcation resulting heuristic estimates true optimal cost problem optimal cost given speciﬁc temporal horizon The paper revised version 13 results extended new class heuristics complement use deleterelaxation valid plan constraints1 Valid plan constraints formulas deﬁned set action ﬂuent symbols satisﬁed optimal plan Making valid plan constraints explicit problem affect true cost problem boost value heuristic keeping admissible We example new heuristic optimal problems like Traveling Salesman Problem TSP deleterelaxation c exponential worst case P NP yields Minimum Spanning Tree MST heuristic h lower bound references TSP MST 184856 The plan paper following present order cost model heuristic h c correspondence c rank suitable propositional theory computation heuristic state terms h 1 We correct mistake 13 planning language conditional effects results apply Strips cid2 cπ cid2 cπ B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 1581 suitable dDNNF compilation theory We deal search algorithm handle negative costs present experimental results consider powerful heuristic arises plan constraints taken account We summarize main contributions discuss related work open problems 2 Planning cost model We consider Strips planning problems P cid3F I O Gcid4 F set relevant atoms ﬂuents I F G F initial goal situations O set grounded actions precondition add delete lists Prea Adda Dela A plan π problem P cid3F I O Gcid4 applicable action sequence a0 a1 ai O 0 n transforms initial state s0 associated I ﬁnal state sn1 goal G holds States sets ﬂuents initial state s0 I state si1 follows action ai state si si1 si Addai Delai stand set union difference respectively The action ai applicable si Preai si action sequence a0 a1 applicable action applicable state results previous actions sequence We interested plans π P minimize cost measure cπ The cost cπ plan π classical planning associated number actions plan cost measure usually written π expressed c ai π 1 c positive constant equal 1 This cost structure limited An immediate generalization obtained assuming actions nonuniform nonnegative cost ca cost plan cai ai π 2 The classical cost structure follows setting action costs ca 1 Interestingly heuristics developed classical planning including additive 12 hm heuristics 39 deal easily nonuniform action costs heuristics underlying Graphplan 11 FF planner 40 deﬁned terms planning graphs A generalization obtained making costs dependent actions plan states traversed cid2 cπ cai si ai π 3 Here cai si stands cost executing action ai state si results execution previous actions plan In general cost model captured 3 costs depend actions states 2 depend actions 1 depend In work deal plan costs depend actions states restricted form cid2 cid2 cπ cai cp 4 ai π pF π F π set ﬂuents true plan π time point plan execution cp cost ﬂuent p F In comparison 3 cost model given 4 deﬁnes costs cai si additively terms action costs cai ﬂuent costs cp The costs ca actions assumed nonnegative costs cp ﬂuents positive negative zero default Positive ﬂuents costs called penalties negative ﬂuents costs called rewards For optimal plans bounded cost plan cost measure cπ deﬁned 4 counts ﬂuent costs cp once2 Without restriction plan inﬁnite reward achieving atom p negative cost cp waiting irrelevant Given cost plans cπ captured 4 interested plans π minimize cπ optimal best plans If plan optimization problem deﬁned best plan necessarily P cost best plan problem P respect cost function c actions unique We denote c ﬂuents c P def min cid3 cπ π plan P cid4 5 2 This restriction makes model nonmarkovian sense contribution action ai state si cai plus cost cp atoms p state si1 true earlier states We discussing search optimal solutions model information kept search nodes 1582 B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 P P admits plan Clearly ca 1 cp 0 actions ﬂuents p cost set c P measures minimum number actions needed solve P The criterion classical planning obtained c resulting framework general costs actions ﬂuents expressed positive negative Indeed possible model problems goals preferences expressed form rewards In case plan optimal rewards action costs assumed nonnegative plans smaller negative cost rewards present In general best plans achieve goal trading action ﬂuent costs We planning cost model captured 4 penalties reward model abbreviated pr This cost model similar oversubscription planning constraints preferences possible convenient achieve goals 6064 There important differences The ﬁrst pr atoms rewarded achieved anytime execution plan achieved end plan The second atoms express penalties rewards If express penalties positive costs atoms achieved avoided execution In order capture preferences end states opposed preferences intermediate states required sider use special End action zero cost terminate plans preconditions goals G problem effect dummy goal In order action terminate plans suﬃcient additional ﬂuent not_done initially true precondition actions deleted action End With convention representation preferences end states possible simply adding conditional effects action End While assume language Strips conditional effects accommodated generalization extension ﬁnal action conditional effects straightforward supported planner 3 Modeling The cost model planning formulated simple ﬂexible Some preference patterns easily ex pressed Terminal Costs atom p rewarded penalized true end plan introducing new atom p cid8 initialized false conditional effect p p captures reward penalty p end plan In case cp terminal atom action End A reward penalty cp cid8 terminal cost p p cid8 p Goals costs terminal states expressed goals strictly required Semantically hard goal modeled suﬃciently high terminal reward Computationally ﬁrst option usually yield better results Soft Goals soft goals modeled terminal rewards best plans achieve depending costs cid8 cid8 cid8 involved Preferences Literals model assumes costs associated positive literals p negative ones true exactly p false standard planning transformation techniques add new atom p 3353 Preferences negation p expressed preferences p Rewards Conjunctions possible reward states set atoms p1 pn true means action Collectp1 pn preconditions p1 pn effect p p new atom rewarded The trick work expressing penalties conjunctions The reason optimal plans choose collect free reward possible choose collect free cost required atom p penalty reward cid8 cid8 As illustration blocksworld problem number blocks touch table kept minimum price obtaining possibly longer plan obtained penalizing atoms onx table blocks x More interestingly problem building tallest possible tower results assigning terminal rewards atoms onx y blocks x y nonterminal rewards instead best plans blocks placing block block collect rewards associated atoms onx y If actions positive costs best plans ones achieve tallest tower minimum number steps choosing existing tallest towers basis Likewise problems agent supposed pick coins avoiding dangerous wumpus modeled rewarding atoms havecoini penalizing atoms atx y x y position wumpus3 Among preference patterns pr cost model capture natural way positive costs sets atoms mentioned partial preferences certain costs comparable 68 The pr model extended deal repeated penalties rewards cost paid time atom true We consider extension work reasons semantically repeated 3 The Wumpus problem 59 interesting involves uncertainty partial observability issues addressed pr model B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 1583 rewards problems welldeﬁned cost cyclic plans accumulate inﬁnite reward4 computa tionally proposed heuristics capture speciﬁc features model remain admissible 4 Heuristic h c Heuristics fundamental searching large spaces In classical setting effective heuristics proposed deﬁned terms deleterelaxation simpliﬁcation problem delete lists operators dropped Deletefree planning simpler planning sense plans generated polynomial time optimal deletefree planning intractable 15 Thus relaxation heuristics classical planners rely simpliﬁcations formulation 40 drops optimality requirement relaxed problem 1451 assumes subgoals independent In cases resulting heuristics admissible The heuristic formulate pr model builds extends optimal deleterelaxation heuristic proposed deleterelaxation problem P planning problem obtained dropping c P provides estimate cost solving P given cost classical planning If P deletelists actions P heuristic h function c deﬁned P c P def c P h 6 optimal cost deleterelaxation For 01 cost function characterizes classical planning c cost atoms 0 cost actions 1 deﬁnition yields optimal deleterelaxation heuristic provides estimate number steps goal This heuristic admissible tends informative empirical analysis 41 Expression 6 generalizes heuristic larger class cost functions actions nonuniform costs atoms rewarded penalized remains admissible too5 Proposition 1 Admissibility The heuristic h c P admissible h c P cid2 c P If let P I s P G g refer planning problems like P initial goal situations I s G g respectively optimal forward heuristicsearch planners aimed solving P need compute c P I s states s encountered regression planners need compute heuristic values heuristic values h c P G g encountered subgoals g Since computation intractable 01 cost function h classical planners like HSP FF settle polynomial nonadmissible approximations In work different path use h c heuristic general cost setting performing intractable computation search state encountered perform intractable computation For establish correspondence heuristic values ranks propositional theory computed polynomial time provided theory compiled suitable form 5 Heuristics preferred models dDNNF Following 4344 propositional encoding sequential planning problem P cid3F I O Gcid4 horizon n obtained introducing ﬂuent action variables pi ai ﬂuent p action time step theory TnP comprised following formulas 1 Init p0 p I q0 q F I 2 Goal pn p G 3 Actions For 0 1 n 1 O ai pi p Prea ai qi1 positive effect q Adda ai qi1 negative effect q Dela 4 Frame For 0 n 1 p F ai cid5cid6 apDela pi1 cid7 cid5cid6 cid7 apAdda ai pi1 pi pi 5 Seriality For 0 1 n 1 cid12 cid8 ai cid8 For suﬃciently large horizon n models propositional theory TnP correspondence plans P model encodes plan plan determines model 4 This problem arises Markov Decision Processes usual work discount future costs 10 5 Formal proofs results paper Appendix A 7 8 T 1584 B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 For cost function c deﬁne rank rM model M cost cπ plan model M makes T theory T rank best model true deﬁne rank r r T def min Mcid13T rM T T models follows cost P rank propositional encoding TnP r related follows Proposition 2 Costs Ranks For suﬃciently large time horizon n exponential worst case c rank rM model M TnP given cost plan deﬁned M P r TnP This correspondence cost planning problem rank propositional theory follows directly deﬁnitions way derive theory ranks effectively A result T eﬃciently r literalranking function direction comes 26 shows compute theory ranks r theory T dDNNF 22 A literal ranking function ranks models terms rank literals l render true6 rM def cid2 rl lMcid13l For literalranking functions r propositional theories T compiled dDNNF Darwiche Marquis Theorem 3 Darwiche Marquis If propositional theory T dDNNF r literalranking function rank r computed time linear size T This result suggests compute optimal cost c P P compiling ﬁrst theory TnP d TnP time linear size compilation There obstacles DNNF computing rank r The ﬁrst model ranking function rM cπ M Theorem 2 deﬁned terms cost atoms true execution plan terms literals true model exactly literalranking function 8 The second critical horizon n needed ensuring Theorem 2 normally large TnP compile We problems handled better computation heuristic h P considered instead c P approximates real cost c Before focusing logical encodings required computing heuristics h c P I s G g state s subgoal g lineartime suitable dDNNF compilation let brieﬂy recall dDNNF formulas T represented T deﬁned 7 8 computed A formula T dDNNF rooted DAG Directed Acyclic ranks r Graph leaves positive negative literals associated variables T constants true false internal nodes stand conjunctions disjunctions AND OR nodes respectively The formula wff n associated root node n dDNNF formula read recursively leaves follows wff n L cid6 cid11 wff ni wff ni n leaf associated literal L n AND node children ni n OR node children ni 9 A dDNNF formula Negated Normal Form NNF contains connectives conjunctions disjunctions negations negation occurs literals 4 The dDNNF formula NNF formula represented DAG satisﬁes conditions The ﬁrst decomposability accounts D dDNNF requires subformulas associated children AND node share variables The second determinism accounts d dDNNF requires subformulas associated children OR node mutually exclusive These conditions enable large number intractable queries transformations time T n computed recursively linear size DAG representation 25 For example procedure computing rank r formula T dDNNF expressed terms value function r follows 26 r n 0 rL cid13 r mini r ni ni n true n false n L L literal different true false n AND node children ni n OR node children ni 6 Darwiche Marquis use normal weighted bases literalranking functions 10 B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 1585 The DAG representing theory T dDNNF arithmetic circuit leaves replaced numbers 0 rL according leaf constant true false nonconstant literal L internal nodes replaced sums minimizations according stand AND OR nodes The output circuit T S computed time linear size circuit theory rank r theory extends T set S literals language bottomup procedure working compiled representation T treating leaves n L true L S false L S 26 T For computing turn rank r Any formula compiled dDNNF 23 The time build compiled representation size compiled representation exponential worst case like compilation OBDDs compiled logical representation commonly automated veriﬁcation 16 closely related dDNNFs 25 necessarily general Indeed compilation theory exponential time space worst case struc tural parameter associated theory known treewidth measures degree interaction variables 2124 Once correspondence heuristic h T suitable propositional encoding estab c P rank r lished arithmetic circuit like described map state s subgoal g heuristic value h c P I s G g 51 Stratiﬁed encodings Since heuristic h c P deﬁned terms optimal cost relaxed deletefree problem P natural relaxed problem We consider computation heuristic terms theory TnP dropping seriality constraints longer needed deletefree ﬁrst simplify theory TnP init setting parallel Strips plan serialized retaining cost In addition drop TnP c P G g possible initial goal clauses want able compute heuristic values h state s subgoals g arise progression regression search respectively We set clauses left TnP n P Later consider encoding involve temporal stratiﬁcation stratiﬁed relaxed encoding denote T c P I s h The ﬁrst crucial difference problem P deletefree relaxation P horizon needed having correspondence models plans For P optimal plans exponential length number different states plan visit On hand optimal plans P linear length deletes actions add atoms number different states visited bounded linearly number ﬂuents The second difference optimal cost deletefree problem correspondence rank propositional encoding simple literalranking function compatible Theorem 3 atom achieved deletefree plan remains true end plan If let I0 Gn stand init goal clauses theory TnP capture initial goal situations I s G g respectively following correspondence heuristic values theory ranks established Proposition 4 Heuristics Ranks For suﬃciently large horizon n linear worst case initial goal situations s g cid5 c h P I s G g r n P I0 Gn T cid7 cid5 cid7 r literal ranking function rpn cp ﬂuent p rai ca action 0 n 1 rl 0 Exploiting Theorem 3 ability dDNNF formulas conjoined literals lineartime Theorem 5 Compilation Heuristics Let ΠnP refer compilation theory T large horizon linear worst case Then heuristic values h cost function c computed ΠnP linear time n P dDNNF n suﬃciently c P I s G g initial goal situations s g This theorem tells single compilation suﬃces computing huge set heuristic values time linear c P I s G g provide estimates cost achieving goal c P I s needed regression c P G g needed The formulation yields larger number heuristic values size compilation The heuristic values h g initial state s During forward search values h search values h example bidirectional search 52 Logic programming encodings The encoding TnP computing optimal cost c case encoding T n P computing heuristic h P P requires horizon n exponential worst c P requires horizon linear Still 1586 B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 compact encoding computing h obtained set positive Horn clauses 47 c requires time horizon obtained We LP encoding The LP encoding planning problem P computing heuristic h form c obtained propositional LP rules p Prea 11 positive effect p Adda associated action preconditions Prea P For convenience explain atom p P introduce dummy action setp unique effect p precondition encoded p setp 12 c P I s These actions formal devices setting initial situation s computing heuristic values h progression search No encoding trick needed goals g regression search The LP encoding enable compute h c heuristic effective way features distin guish previous stratiﬁed encodings The ﬁrst time indices These indices necessary focus class minimal models program implicit stratiﬁcation correspondence temporal stratiﬁcation Such minimal models grounded actions ﬂuents required wellfounded support based The second distinctive feature actions imply preconditions This problem actions nonnegative costs encoding require preconditions order effect So models actions true preconditions possible models preferred models actions false affect rank theory For planning problem P let LP refer collection rules 11 12 encoding effects actions P including setp actions let wffcLP stand wellfounded ﬂuent completion LP completion formula deﬁned forces ﬂuent p wellfounded support Then let Is refer collection unit clauses variables setp represent situation s setp Is iff p s setp Is iff p s obtain correspondence heuristic values LP encodings Proposition 6 Heuristics Ranks For initial situation s goal g cost functions c h P I s G g Is g r literal ranking function rl cl positive literals l rl 0 r cid7 cid5 cid5 wffc cid7 LP cid7 cid5 c From result properties dDNNF formula obtain Theorem 7 Main Let ΠP refer compilation theory wffcLP dDNNF Then initial goal situations s g cost function c heuristic value h c P I s G g computed ΠP linear time The wellfounded ﬂuent completion wffcLP picks models logic program LP minimal set ﬂuents given actions model minimal models logic program LP A set actions A actions A treated facts In models ﬂuents noncircular support based actions true model In particular LP acyclic program wffcLP Clarks completion applied ﬂuents 117 The program LP acyclic directed graph formed connecting atom appears body rule atom appears head acyclic Clarks completion applied ﬂuent literals adds formulas p B1 Bn ﬂuent p rules p B 1 n LP formula p rules p In presence cycles LP wellfounded ﬂuent completion wffcLP reduce Clarks completion exclude circular supports In order rule circular supports ensure ﬂuents model stratiﬁed temporal encodings stronger completion needed Fortunately problem addressed literature Answer Set Programming 2534 techniques developed translating cyclic acyclic logic programs propositional theories models correspondence Answer Sets 949 The logic program LP positive logic program unique minimal model set actions coincides unique Answer Set The strong completion wffcLP obtained translation scheme provision ﬂuent atoms completed actions In current implementation follow scheme presented 50 introduces new atoms new rules provide consistent partial ordering ﬂuents LP resulting models ﬂuents wellfounded noncircular justiﬁcations This polynomial transformation illustrated example From wffcLP refer result translation B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 1587 6 Example As illustration logical formulation deleterelaxation heuristic h c consider simple problem P involves locations A B C agent A B B C directly A C This problem modeled actions form movex y precondition atx effects y atx x y ranging A B C resulting actions correspond allowed transitions For action P LP contains rules y atx movex y aty set cid7 cid5 y Consider initial state s A goal g atC cost function ca 1 actions A B cost cmove A B 10 The best plan stategoal pair deleterelaxation π A B moveB C best plan relaxation cid7 cid5 c h P I s G g cid5 c P I s G g cid7 11 Proposition 6 says heuristic value correspond rank wellfounded ﬂuent completion LP wffcLP extended set literals given Is set cid3 cid7 cid5 set A cid7 cid5 atB set cid7cid4 cid5 atC cid3 cid4 atC g In order intuition completion let illustrate ﬁrst stronger Clarks completion For problem Clarks completion ﬂuent atoms gives theory atC atB A cid7 cid5 atB moveB C cid7 cid5 A A B cid7 cid5 atB moveB A cid5 cid7 atC cid7 cid5 atB cid7 cid5 A set set set cid5 cid7 atC moveC B For literal ranking function r corresponds c7 best ranked model Clarks completion extended c P I s G g 11 In model costly A B ac literals Is g rank 2 different h tion avoided ﬂuent atC circular justiﬁcation involves cheaper actions moveB C moveC B This arises program LP contains cycle involving atoms atB atC In wellfounded completion deﬁned 50 Clarks completion applied program different LP circularities broken For example rule instance y atx movex y LP replaced collection rules rk NOTat y atx atx movex y y rk atx y rk atz y rk atz atx z ranges locations A B C NOT stands negation failure The new rules introduce new predicates rk stands unique identiﬁer original rule instance LP represents precedence constraint atoms A atB atC form loop LP ensures supports resulting models wellfounded Thus ﬁrst pair rules allows atoms atx movex y support atom y atx precede y rule ensures support makes atx precede y rule precedence relation closed transitivity The wellfounded ﬂuent completion wffcLP result applying Clarks completion ﬂuents resulting transformed program The best model theory extended set literals Is g contains 7 From Proposition 6 rl cl l positive literal rl 0 1588 B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 c P I s G g The actions A B moveB C rank 11 agreement heuristic value h interpretation contains actions moveB C moveC B instead model theory requires justiﬁcation atB terms atC justiﬁcation atC terms atB The implies atC atB requires atB atC implies atB atC requires atC atB The justiﬁcations inconsistent It worth pointing heuristic h coincide state goal cost function coincide general combinations For example goal g end initial location s A atom atC given cost 20 positive reward 20 optimal plan c P I s G g A C collect reward A total cost c hand 9 The reason deleterelaxation actions moveC B moveB A needed order agent A needed P I s G g 7 The heuristic h c optimal cost c 7 From heuristics search The scenario illustrates example heuristics costs negative initial situation represents goal state optimal plan For search optimal plans implies plug heuristic algorithm like A expect algorithm produce optimal solution Indeed scenario heuristic admissible root node goal node plan optimal In order use heuristic h guide search plans pr model need consider issue We focus ﬁrst use heuristic progression search initial state brieﬂy mention needs changed regression search First pr model search node needs track state s set ﬂuents t nonzero costs achieved way s This penalties rewards associated atoms paid once8 Thus search nodes n pairs cid3s tcid4 heuristic hn nodes set c hn def h ct s 13 ctx cx actions ﬂuents x ctx 0 x t As A evaluation function f n node n set sum gn hn gn accumulated cost path n0 a0 ai ni1 root n0 n ni1 gn cn0 ca0 n0 ca1 n1 cai ni cai ni cai cid2 psi1 p ti cp cn0 cid2 ps0 cp The root node n0 search pair cid3s0 t0cid4 s0 initial state t0 set atoms p s0 nonzero costs node ni1 pair cid3si1 ti1cid4 si1 state follows action ai state si ti1 union ti atoms si1 nonzero costs Due presence negative heuristics costs search algorithm standard A algorithm Dijkstra Yet simple variant A algorithm suﬃces provided heuristic monotonic Recall heuristic h monotonic condition hni cid2 cai ni hni1 holds condition ensures evaluation function f n gn hn decrease search path 55 The heuristic hn deﬁned 13 monotonic Proposition 8 Monotonicity h c The heuristic hn h ct s n cid3s tcid4 monotonic In revised A algorithm nodes n minimum evaluation function f n selected iteratively OPEN list A loop terminate goal node selected OPEN Rather algorithm maintains accumulated cost gn best solution n far terminates cost solution greater cid8 best node OPEN It returns n solution node It simple evaluation function f n c monotonic costs heuristic negative revised A algorithm optimal heuristic like h values 8 This implies ﬂuent penalties rewards pr model markovian action ai plan π makes atom p true contributes cost cp cost plan π p true See 63 general discussion nonmarkovian rewards general setting Markov Decision Processes B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 1589 Negative Costs Monotone Heuristics The bestﬁrst search algorithm evaluation function f n gn hn terminates cost gn best solution node n far greater cid8 best node OPEN optimal presence negative edge costs provided heuristic Proposition 9 A A evaluation function f n h monotonic Unlike A If heuristic h monotonic evaluation function f n decrease path root cid8 node OPEN gn solution cost gn greater f n greater solutions nodes represents optimal solution revised algorithm terminate reporting node n CLOSED list solution This happens example goals heuristic hn0 deems certain reward worth cost obtaining For example ﬂuent p cost 10 estimated real cost achieving 9 11 respectively best plan cost 0 However initially gn0 0 hn0 9 10 1 0 cost best solution far n0 cost gn0 greater evaluation function f n0 gn0 hn0 0 1 1 best node OPEN As result algorithm cid8 cid3 gn0 0 At point terminate expands n0 keeps going best node n returns n0 solution node representing plan In 64 termination condition A modiﬁed dealing terminal rewards soft goals proposed termination condition ensure optimality particular report solution node CLOSED list OPEN satisﬁes f n cid8 Most discussion carries directly regression search classical regression needs modiﬁed slightly classical setting action regress subgoal g adds atom p g penalties reward setting adds atom p g negative cost cp 0 8 Empirical results We report empirical results illustrate range problems handled proposed tech niques We derive heuristic LP encodings Theorem 7 The compilation dDNNF Table 1 Compilation data logistic problems 2nd IPC serialized having plans 40 actions Time refers compilation time seconds size size resulting DAGs Problem Backward theory time 40 41 42 50 51 52 60 61 62 63 70 71 80 81 90 91 100 101 110 111 120 121 130 131 140 141 150 151 01 01 01 01 01 01 01 01 01 01 07 07 07 07 07 07 33 32 32 32 33 33 13907 13243 12795 15448 13403 14644 size 62K 62K 59K 59K 59K 62K 59K 59K 62K 62K 24K 23K 24K 24K 24K 24K 94K 91K 91K 89K 94K 94K 46M 43M 43M 48M 43M 46M Forward theory time 07 07 08 07 07 07 07 08 07 07 307 307 315 317 312 318 16037 15632 15977 15884 15783 15590 size 271K 267K 285K 266K 263K 265K 255K 276K 252K 272K 11M 11M 11M 11M 11M 11M 434M 418M 427M 424M 418M 423M 1590 B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 Table 2 Search results serialized logistics problems heuristics h2 h complemented structural mutexes The ﬁrst column problem instance second optimal cost length groups h2 h c heuristics backward forward search containing heuristic value initial state number expanded nodes search time seconds A dash means search ﬁnish limits 2 hour 2 Gb memory c For regression search heuristic h c Problem P c h2 backward h2P 40 41 42 50 51 52 60 61 62 63 70 71 80 81 90 91 100 101 110 111 120 121 130 131 140 141 150 151 20 19 15 27 17 8 25 14 25 24 36 44 31 44 36 30 45 42 48 42 12 10 10 12 9 4 10 9 10 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 nodes 4295 7079 537 118389 7904 143 316175 1489 301054 99827 time 01 01 00 40 02 00 131 00 128 40 h h nodes c backward mutex c P 19 17 13 40 109 25 25 15 8 23 13 23 21 33 39 29 41 33 29 41 39 45 55 39 63 67 57 55 67 71 63 490 103 8 668 19 517 727 4973 175886 591 13299 3083 81 157051 20220 20143 23556 time 00 00 00 00 00 00 01 00 00 01 46 2241 05 113 26 00 7420 699 939 878 forward h h c c P 19 17 13 25 15 8 23 13 23 21 33 39 29 41 33 29 41 39 45 55 39 63 nodes time 76 259 72 1075 212 8 932 33 516 537 10693 3685 14088 705 02 08 02 36 06 00 30 01 16 16 53472 17330 68274 3543 Darwiches c2d compiler9 We actually consider forward theory guiding progression search backward theory guiding regression search The ﬁrst obtained compilation formula wffcLP G G goal P second obtained compilation formula wffcLP Is0 s0 initial situation P This progression search goal remains ﬁxed search regression search true initial situation The heuristic h regression search complemented structural mutex information meaning heuristic values associated subgoals g contain pair structurally mutex ﬂuents set The mutex information needed regression search tends generate impossible states detected heuristics based deleterelaxation 12 All experiments carried Linux machine Xeon processor running 180 GHz 2 Gb RAM terminated taking 2 hours 2 Gb memory c Logistics Table 1 shows time taken compilation forward backward logistic theories size resulting dDNNF formula These serialized instances 2nd International Planning Competition IPC2 3 packages cities trucks airplanes having plans 40 steps Almost instances compile backward theories initial state ﬁxed time yield smaller representations Table 2 provides information quality effectiveness heuristic h classical 01 cost function relation classical admissible heuristic h2 39 generalization heuristic Graphplan 11 The table shows heuristic realcost values associated root nodes search time taken regression search number nodes expanded It seen h c heuristic informed h2 case scales problems h2 solve c It important emphasize theories compiled evaluate state cost function So logistics theories settings example packages different priorities loading trucks involves different costs This applies domains 9 At httpreasoningcsuclaeduc2d B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 1591 Table 3 Search results IPC4 instances heuristics h2 h regression search latest extended structural mutexes The ﬁrst column reports problem instance domain second optimal cost equal plan length problems remaining columns value heuristic initial state number nodes expanded overall time For h2 dash means search ﬁnish c search PSR48 compilation Airport8 Airport9 PSR9 Satellite4 Satellite5 Satellite6 limits 2 hours h ﬁnish c n P c airport h2 h2P 1 2 3 4 5 6 7 8 9 psr 43 44 45 46 47 48 49 50 satellite 1 2 3 4 5 6 8 9 17 20 21 41 41 62 71 20 19 20 34 27 23 9 13 11 17 8 9 16 20 21 40 40 41 41 7 7 4 5 4 8 9 4 7 7 6 7 6 7 nodes 8 9 53 20 21 332 318 9412 57549 1263 3446 2033 7139967 32863 26249 15 559 1099 163746 time 000 000 000 000 000 012 011 874 6955 004 017 006 81005 172 127 000 002 013 3080 c backward mutex c P nodes h h 8 9 17 20 21 41 41 4 5 4 5 4 5 6 8 12 10 8 9 30 20 21 41 73 1763 3715 2323 6023893 31219 17927 20 110 25 time 000 000 001 000 000 167 368 023 232 020 159502 382 369 016 3836 2976 c pay Blocks world Blocks instances compile logistic instances We report actual ﬁgures managed compile ﬁrst 8 instances 2nd IPC These small instances having 6 blocks use heuristic h IPC problems Tables 3 4 report results regression search guided heuristic h2 heuristic h c domains IPC4 IPC5 respectively Airport PSR Satellite TPP Pathways Rovers For heuristic h2 dashes table mean search ﬁnish 2 hour time limit h c compilation ﬁnish 8 cases search ﬁnish 4 cases Overall heuristic h2 yields 2 instances solved Airport domain 1 Satellite heuristic h c yields 2 instances solved Rovers 1 TPP In domains shown PSR Pathways heuristics solve number problems Usually heuristic h c ends expanding nodes taking time The results compilation shown Brieﬂy problems solved h c heuristic compilation ﬁnishes second 4 problems Airport6 Airport7 PSR48 Satellite3 taking 2 minutes problem Satellite3 taking 16 minutes The computation heuristic h2 hand expensive informed taking 2 minutes solved instances Airport6 Airport7 We considered Storage domain c heuristic works 2 smallest IPC5 shown table compilation computing h instances The heuristic h2 hand yields solutions ﬁrst 8 instances Elevator The domain consists building n ﬂoors m positions ﬂoor ordered linearly k elevators There hard goals rewards penalties associated certain positions All actions cost 1 Fig 1 shows instance 1051 10 ﬂoors 5 positions ﬂoor 1 elevator aligned position 1 left We consider instance 1052 additional elevator right position 5 larger instance involving 10 ﬂoors 10 positions ﬂoor 2 elevators The problem modeled actions moving elevators ﬂoor getting elevator moving unit left right ﬂoor These actions affect ﬂuents f p ine f insidee f p e denote ﬂoor position elevator respectively The optimal plan instance 1051 shown Fig 1 performs 11 steps collect rewards ﬂoors 4 5 total cost 11 14 3 On hand instance 1052 elevator right performs 32 steps obtains better cost 5 The LP encoding computing h c P heuristic doesnt compile domain cid8 obtained relaxing problem P slightly small instances However good admissible approximation h simply dropping ﬂuent insidee operators socalled patterndatabase relaxation 19 c P 1592 B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 Table 4 Search results IPC5 instances heuristics h2 h regression search latest extended structural mutexes The ﬁrst column reports problem instance domain second optimal cost equal plan length problems remaining columns value heuristic initial state number nodes expanded overall time For h2 dash means search ﬁnish limits 2 hours h c search TPP7 TPP8 Rovers6 Rovers8 compilation Pathways5 Pathways6 ﬁnish c n tpp 1 2 3 4 5 6 7 8 pathways 1 2 3 4 5 6 rovers 1 2 3 4 5 6 7 8 P c h2 h2P nodes time c backward mutex c P nodes h h 5 8 11 14 19 25 6 12 18 17 10 8 11 8 22 18 5 7 7 7 8 9 10 10 6 10 11 11 11 13 7 5 8 6 7 8 6 7 5 9 34 292 36207 6 47 9296 7969 229 73 281 55 000 000 000 000 126 000 000 035 032 000 000 001 000 4 7 10 13 17 21 26 30 6 12 16 15 9 7 9 8 18 27 15 21 5 9 15 25 137 68174 6 12 861 327 93 33 118 8 755704 118937 time 000 000 000 000 001 54068 000 001 1366 3861 001 000 005 000 311857 350300 Fig 1 Elevator instance 1051 10 ﬂoors 5 positions ﬂoor 1 elevator position 1 Penalties rewards associated positions shown Instance 1052 second elevator position 5 right The best plan instance shown length 11 cost 3 1052 length 32 cost 5 certain atoms dropped problem 2937 Using technique able compile theories 10 ﬂoors 10 positions second The problem Fig 1 solved optimally milliseconds expanding 65 nodes As reference blind search based noninformative admissible heuristic h0 adds uncollected rewards takes 27 seconds expands 445 956 nodes More results appear Table 5 shown heuristic costeffective case enables optimal solution problems trivial B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 1593 Table 5 Search results Elevator h0 relaxed h instance optimal cost shown h0 h expanded nodes search time seconds A dash means search ﬁnish limits 2 hours 2 Gb memory c heuristics Instance nmk refers problem n ﬂoors m positions k elevators Problem c value heuristic initial state length optimal plan number Problem P c h0 backward mutex 442 662 663 1051 1052 10102 1 6 6 3 5 7 h0P 14 28 28 42 42 63 len 6 15 15 11 nodes 3399 67722 472446 445956 time 00 35 317 270 relaxed h relaxed h 3 13 15 6 21 22 c backward mutex c P len 6 15 15 11 32 23 nodes 15 499 2505 65 66486 194069 time 00 00 06 00 167 1096 9 Boosting heuristic Plan constraints The formulation deletebased relaxation heuristic logic computational model based compiled dDNNF formula extended natural way powerful class heuristics bound limitations deleterelaxation We consider particular extension results taking constraints plans account constraints sets actions ﬂuents allowed plan plans violate constraints ruled assigning inﬁnite cost We interested plan constraints valid problem sense satisﬁed optimal plan Making constraints explicit effect optimal cost problem boost heuristic function obtained capturing information lost delete relaxation For example suitable plan constraints new heuristic optimal Traveling Salesman c exponential worst case P NP yields Problem TSP deleterelaxation heuristic h poorer Minimum Spanning Tree MST lower bound 91 Syntax semantics A plan constraint C propositional formula sets actions ﬂuents A F A plan π problem P satisﬁes constraint C written π cid13 C C true interpretation makes true actions ﬂuents π F π π cid13 C C A F iff C π C F π π cid13 C iff π cid12cid13 C π cid13 C C π cid13 C C cid8 cid8 iff π cid13 C π cid13 C cid8 iff π cid13 C π cid13 C cid8 Intuitively constraint p q p q ﬂuents satisﬁed π π makes p q true point execution Similarly constraint p q satisﬁed p q true π These plan constraints confused mutex constraints p q 11 express constraint truth p q time point Plan constraints deﬁned expressive modal temporal formulas simple suﬃcient illustrating basic deleterelaxation heuristic improved Plan constraints modify deﬁnition plans costs plans comply constraints inﬁnite cost Deﬁnition 10 Constrained Plan Costs The constrained cost cπ C plan π planning problem P extended set plan constraints C cid14 cπ C def π cid13 C cπ Deﬁnition 11 Constrained Costs The constrained optimal cost c P C c P C def min π cπ C π ranges plans P c P C plan P satisﬁes C 14 15 Plan constraints increase expressive power planning language interested plan constraints implicit sense effect cost problem 1594 B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 Deﬁnition 12 Valid Plan Constraints A plan constraint C implicit valid problem P given cost function c C satisﬁed optimal plan problem admits plan Clearly C valid constraint problem P cost function c c P A suﬃcient condition C valid P cost function C satisﬁed plans P optimal For example constraint prevents moves away city true plans solve Traveling Salesman Problem On hand constraint block needs unstacked different blocks valid constraint Blocks World classical 01 cost function true plans optimal plans optimal plan moves block table moves block target destination transformed optimal plan block ﬁrst moved irrelevant block instead P C c The key point valid plan constraints C affect optimal cost problem P potentially increase value deleterelaxation heuristic Deﬁnition 13 Constrained Heuristic The constrained deleterelaxation heuristic planning problem P extended plan constraints C deﬁned c P C def c h P C P deleterelaxation P 16 The constrained deleterelaxation heuristic h c P remaining lower bound true cost c h P c P C informed plain deleterelaxation heuristic Theorem 14 Admissibility Boosting Let C plan constraint valid P cost function c Then c P cid2 h c P C cid2 c h P C c P inequalities strict The ﬁrst inequality h plans π relaxation P value increase h c P cid2 h c P C direct true second heuristic simply pushes cost P true validity C The heuristic c P C C constraint valid P invalid deleterelaxation P inﬁnite equality c c P h P C c Theorem 14 important says value deleterelaxation heuristic h c increased preserving admissibility simply making explicit certain valid implicit plan constraints Before showing account c P let illustrate new heuristic h difference heuristics concrete example c P C semantic computational framework laid h Consider problem P agent initially location L pick package p location L return L package If available actions allow agent location pick package location package plan like cid8 moveL L cid8 pickp L cid8 moveL cid8 L optimal cost c deletes action moveL c P 2 h P 3 The optimal cost relaxation P 2 absence cid8 L needed order return L This means deleterelaxation heuristic hand c P P cid8 moveL Consider constraint C moveL L cid8 L This constraint valid P agent moves away goal location The deleterelaxation heuristic constrained C shown 2 This c P C c c P c h cid8 constraint C forces action plan P cid8 L plan moveL C 3 strictly greater normal deleterelaxation heuristic h include actions moveL L cid8 pickp L The example shows value deleterelaxation heuristic h c P boosted making explicit certain constraints implicit We consider paper problem deriving learning constraints automatically Our goal instead constraints naturally incorporated framework presented signiﬁcant difference relation heuristics based deleterelaxation P 92 Logical formulation computation Proposition 6 established relation heuristic value h c P I s G g initial state s goal wffcLP Is g propositional theory obtained logic program LP encoding P literals Is g encoding state s goal g The extension correspondence g rank r relaxation P presence plan constraints C straightforward B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 1595 Proposition 15 Constrained Heuristic Ranks For initial situation s goal g cost function c plan constraint C cid5 c h P I s G g C cid7 cid5 cid5 wffc cid7 LP r C Is g cid7 r literal ranking function rl cl positive literals l rl 0 In words actions mapped logic programming rules suitably closed plan constraints mapped socalled integrity constraints constraints simply ﬁlter models 36 From result properties formulas dDNNF obtain Theorem 16 Computing Constrained Heuristics Let ΠP C refer compilation theory wffcLP C dDNNF Then c P I s G g C computed initial goal situations s g cost function c heuristic value h ΠP C linear time This means order compute constrained h c values need add plan constraints C CNF theory obtained logic program LP CNF formula compiled Nothing needed The differences resulting theory ranks resulting heuristic values signiﬁcant 93 Examples We analyze differences deleterelaxation heuristic h c P C considering known combinatorial problems Assignment Problem AP tractable Traveling Salesman Problem TSP From theoretical point view simple valid plan constraints P deleterelaxation heuristic C constrained heuristic h P exponential worst case From experimental point view addition h implicit constraints happens SAT help computationally c P C optimal problems equal c c P constrained heuristic h c P h The differences constrained unconstrained heuristics h c P C illustrated Sokobanlike problem shown Fig 2 In problem stones grid shown diamonds moved cid8 stone t location l free location goal cells shown letter G means actions movet l l cid8 cid8 cost equal Manhattan Distance l l l This problem simpler Sokoban existing domainindependent heuristic aware captures actual cost problem For instance shown c P 6 The underestimation results ﬁgure optimal cost c assuming cells initially free remain free ignoring stones end goal c P C making C stand valid plan cell This constraint enforced constrained heuristic h cid8 different stones t1 t2 constraint disallows pairs actions movet1 l1 l cell l Provided plans containing pairs actions disallowed relaxation best plans cost 16 constrained heuristic h P 16 deleterelaxation heuristic h c P C 16 like optimal problem cost cid8 movet2 l2 l l cid8 cid8 931 Assignment problem The heuristic h P C similar heuristic specialized optimal Sokoban solver described 42 based Assignment Problem 56 problem ﬁnding injective mapping f X Y cid13 x X costx f x minimized given positive elements X distinct elements Y cost cost function costx y x X y Y loss generality assume positive cost function positive positive increment added pairs affecting solutions Our simpliﬁed version Sokoban Assignment Problem X set stones Y set goal locations costx y Manhattan Distance current location stone x y Fig 2 A Sokobanlike problem 4 stones moved corners actions movet l l cid8 l C valid constraint movet1 l1 l movet2 l2 l prevents moving stones cell cost given Manhattan Distance l l The optimal cost c P 16 heuristics h cid8 cid8 stone t location l free location c P C 16 c P 6 h 1596 B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 Any assignment problem formulated planning problem encoding ﬂuents assignedx free y x X y Y actions mapx y precondition add delete lists P free y A assignedx D free y Initially free y true y Y assignedx true x X goal It easy plan resulting encoding corresponds assignment cost function cmapx y costx y optimal plans corresponds optimal assignments Furthermore making explicit valid plan constraint C cid8 mapx y mapx y cid8 cid8 X x cid12 x y Y x x xs mapped y heuristic h c P C optimal Theorem 17 Assignment Problem Let P planning problem encoding arbitrary assignment problem let C valid c P C optimal plan constraint prevents assigning domain elements target element Then heuristic h c P C equal cost optimal assignment h The deleterelaxation heuristic h signment Indeed h c P yields minimum functions f X Y injective f X Y h c P C yields minimum c P hand optimal reﬂect cost x X costx f x injective onetoone functions cid13 This class problems shows valid plan constraints capturing structural information lost deleterelaxation need bringing time indices formulation We happens combinatorial problem unlike Assignment Problem intractable 932 The Traveling Salesman problem We consider problem harder Assignment Problem Traveling Salesman Problem TSP wellknown combinatorial problem surfaces number applications known intractable 56 Once c P C encode TSP planning problem prove simple valid plan constraints C constrained heuristic h c P exponential worst case Moreover optimal unconstrained heuristic h captures Minimum Spanning Tree MST lower bound unlike TSP solved eﬃciently 56 The TSP problem ﬁnding minimum cost tour given directed graph G V E extended cost infor mation cx y edges x y E assume positive positive increments added edges affecting solutions A tour path starts ends vertex visiting vertices graph exactly The TSP problem encoded planning problem ﬂuents atx cid8 visitedx notvisitedx cid8 V x f x f x V tour chosen arbitrarily V The actions movex y x V y V additional dummy vertex stands copy ﬁrst vertex x0 x cid12 y precondition add delete lists V cid8 P atx notvisited y A y visited y D atx notvisited y The action costs cmovex y set costx y x y E y cid12 x f costx x0 y x f x x0 E 0 x x0 y x f If graph sparse compact encoding results set edges E exclude actions movex y x y E The theoretical results apply encoding Finally initial situation set atoms atx0 visitedx0 notvisited y y V y cid12 x0 goal situation set visited y y V cid8 cid8 It easy encoding correct x0 x1 xn x0 optimal solution TSP action sequence cid3movex0 x1 movexn x f cid4 optimal solution cost corresponding planning c P C optimal provided C constraint rules problem More interestingly prove heuristic h moves away vertex Theorem 18 Optimality Constrained h valid plan constraint c TSP Let T TSP P c stand planning encoding let C stand movex y movex y cid8 actions P x y cid12 y solution cid8 Then heuristic h c P C optimal h c P C equal cost optimal TSP B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 1597 cid8 This result reﬂects correspondence plans deleterelaxation P comply constraints C TSP tours In absence C deleterelaxation heuristic intractable worst case captures tractable Minimum Spanning Tree bound A Spanning Tree directedundirected graph G V E directedundirected subgraph G cid8 includes vertices V subset E edges E deﬁning directedundirected tree V 1856 A Spanning Tree minimum cost Minimum Spanning Tree G sum costs associated selected edges minimized For directed graph G V E distinguished root vertex v V MST Spanning Tree minimum cost rooted v Finding MST directed undirected graphs eﬃciently 32 Also cost Minimum Spanning Tree G lower bound cost optimal TSP tour respect root vertex path results removing edge tour Spanning Tree G While heuristic h c P C Theorem 18 captures exactly cost optimal TSP tour graph G heuristic c P based exclusively deleterelaxation captures cost MST G rooted location x0 selected h initial location planning encoding cid8 V E Theorem 19 Unconstrained h unconstrained deleterelaxation heuristic h x0 selected initial location P c MST Lower Bound Let T TSP let P c stand planning encoding Then value c P equal cost Minimum Spanning Tree T rooted location 94 Experiments plan constraints We seen making explicit certain valid plan constraints lead improved heuristic structural information lost deleterelaxation recaptured Here aim test computation use new heuristic empirically We addition constraints yields accurate bounds necessarily making computation expensive We consider variant TSP problem number rocks different classes locations goal analyze rock class The optimal plan involves minimum cost path visits set locations contain rocks classes visit locations The problem combines intractable tasks solutions coupled selection rock class visit Set Cover selection path visit TSP Later consider variation adds level complexity hard goal having rocks classes analyzed replaced soft rewards classes rocks worth analyzing selected We refer hard version Rock Analyst problem soft version This domain variation domain considered 60 Fig 3 displays instance problem 5 locations 15 rocks 10 different classes agent initially location 1 The classiﬁcation rocks 10 classes rewards soft version problem shown right For modeling problem extend planning model TSP ﬂuents typer c containsx r analyzedc specify class location rock rock given class analyzed actions analyzer x c precondition add delete lists P atx containsx r typer c A analyzedc D analyze rock r class c located x In hard version problem goal rocks classes analyzed goal includes atoms analyzedc class c In soft version problem Fig 3 Rock Analyst instance 5 locations 15 rocks classiﬁed 10 classes n 5 tables The map shows locations rocks location edge costs The class rock rewards soft version problem shown right Location 1 initial location An optimal plan hard soft versions problem involves path 1 3 2 5 rocks r1 r9 r5 r8 r10 r11 r14 r7 r12 r13 analyzed total cost 18 18 respectively 1598 B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 Table 6 Compilation results Rock Analyst hard goals problem instance optimal costs shown value heuristic initial state time compute heuristic h2 h c constraint C rules moves away location For c size compilation bytes shown A dash means theory compile limits 1 hour 1 Gb memory heuristics h n 4 5 6 7 8 9 10 11 12 P c 13 18 18 22 23 26 29 31 h2 h2P 7 10 6 8 7 8 7 7 7 time 02 08 21 50 106 207 379 659 1076 h h c unconstrained c P 12 17 18 21 22 25 time 00 00 01 13 183 3676 size 22K 92K 56K 587K 63M 73M h h c constrained c P C 13 18 18 22 23 26 time 00 00 02 14 163 12177 size 32K 12K 65K 392K 39M 22M atoms given positive rewards negative costs We consider random problems n locations 2n nonempty classes 3n rocks n 4 5 12 Table 6 shows compilation results hard version problem rocks classes analyzed c P C C constraint The table displays costs optimal tour values heuristics h prevents moves away location10 time size compilation dDNNF In addition reference value h2 heuristic 39 time computing heuristic atom pairs reported P As seen table theory constraints results optimal heuristic values h P instances accurate The theory constraints gives lower bounds h compilation theory constraints scales problem number locations n 9 producing smaller dDNNF formula time The heuristic h2 hand quadratic scales larger problems informed results search explores exponentially larger number nodes c P C c c P h c P cid2 c Table 7 shows results regression search guided heuristics The search algorithm A revised termination condition ensures optimality presence negative costs monotone heuristic11 The heuristics extended structurally mutex information states regression include c P G g C unreachable atom pair immediately pruned Not surprisingly search constrained heuristic h yields best results number expanded nodes Yet compilation effort taken account standard h2 heuristic best managing solve instances n 10 n 11 heuristics solve expand lower number nodes In cases table shows lengths optimal plans plans optimal cost length c P G g C optimal problem g goal It noted heuristic h necessarily optimal subgoals g arise regression This explains number nodes expanded heuristic regression larger number actions optimal plan cid8 We considered soft version problem ﬂuents analyzedc removed goal given rewards negative costs randomly chosen 6 1 Table 8 shows results compilation Once constraints improve size compilation necessarily time The heuristic reference heuristic h0 admissible simply adds uncollected rewards The heuristic values h0P informed h c P C cheaper compute c P C best expanding smaller c P h number nodes time The heuristic h0 heuristic h2 hard version problem requires expo nentially larger number nodes explored scaling problems n 7 The heuristics scale compilation n 9 Table 9 shows results search In case h c P h 10 This constraint valid provided locations connected direct path locations costly indirect path These conditions true problems 11 The search optimal plans heuristic function h c extended set constraints C raises additional issues need addressed mention brieﬂy First heuristic remain consistent search constraints search nodes triplets n cid3s t vcid4 s t stand progressed state set atoms p encountered path n root cost cp cid12 0 new P I s C v component v set atoms p encountered path occur C The heuristic hn node n h ct cost function like c cp 0 p t C v constraint like C p replaced boolean true similar representation c P I s G g C needed regression search Second compilation theory wffcLP C ensures heuristic values h P I s C v linear computed linear time state s subgoal g cost function c constraint C order compute hn h time n cid3s t vcid4 theory wffcLP C C variables x cid8 replaced copies x slightly different wffcLP C needs compiled C We omit details proofs extensions implemented planner cid8 implications x x ct ct cid8 cid8 B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 1599 Table 7 Search results Rock Analyst hard goals problem instance optimal cost shown plan length number nodes expanded plan time seconds heuristics h2 h c constraint C A dash means search ﬁnish limits 1 hour 2 Gb memory n 4 5 6 7 8 9 10 11 12 P c 13 18 18 22 23 26 29 31 h2 len 11 14 16 19 22 24 27 30 nodes 190 1982 5901 26548 75758 452155 1612766 4213661 time 00 00 02 16 57 463 1976 6208 h len 11 14 16 19 22 23 unconstrained nodes 43 161 191 283 456 667 time 00 00 00 09 432 7292 h c constrained len nodes 11 13 16 19 22 23 12 13 79 19 38 23 time 00 00 00 00 36 188 Table 8 Compilation results Rock Analyst soft goals problem instance optimal cost shown value heuristic initial state time seconds needed compute heuristic h0 sum uncollected rewards h c valid constraint C rules c size compilation bytes shown A dash means theory compile moves away location For heuristics h limits 1 hour 1 Gb memory n 4 5 6 7 8 9 10 11 12 c 5 18 19 19 25 19 h0 h0s0 18 36 37 40 48 44 54 76 64 time 00 00 00 00 00 00 00 00 00 h c unconstrained c P h 6 19 19 20 26 19 time 00 00 01 13 182 3667 size 22K 92K 56K 587K 63M 73M h c constrained c P C h 5 18 19 19 25 19 time 00 00 02 14 164 9103 size 32K 12K 65K 392K 39M 23M Table 9 Search results Rock Analyst soft goals problem instance optimal cost shown plan length number nodes expanded plan time seconds heuristics h0 h c constraint C A dash means search ﬁnish limits 1 hour 2 Gb memory n 4 5 6 7 8 9 10 11 12 P c 5 18 19 19 25 19 10 Discussion h0 len 4 11 13 12 nodes 7959 119729 1461436 8175484 time 03 73 1689 13637 h c unconstrained len nodes 8 14 14 17 21 19 53 168 461 131 1653 168 time 00 00 03 12 2625 6114 h c constrained len nodes 4 13 14 17 20 19 5 13 77 33 36 19 time 00 00 01 02 79 353 In work propositional logic forms CNF Logic Programs dDNNF deﬁning admissible heuristic planning presence costs rewards computed means circuits map situations values time linear circuit size This circuit simple transformation dDNNF formula encoding domain ANDs ORs replaced Adders Min Operators output situation encodes cost best model In worst case dDNNF formula evaluation circuit size exponential treewidth CNF encoding 21 While worstcase bound experiments number nontrivial problems solved heuristics deﬁned computed way nonetheless expresses practical limitation formulation current form A possible way overcome limitation use additional relaxations able map CNF theories weaker theories bounded treewidth compiled polynomial time space This approach taken recently 58 solving MinCostSAT problems This type relaxation planning setting results family tractable admissible heuristics computable circuits capture information delete lists problem form valid plan constraints Preliminary experiments heuristics reported 57 1600 B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 The effective use propositional logic classical planning championed Kautz Selman 4345 Strips problems P mapped CNF theories T n planning horizon n fed stateoftheart SAT solvers The encoding ensures correspondence logical models T n plans P A similar approach context Logic Programming proposed 274662 CNF encodings planning problems replaced Logic Programs Answer Sets computed stateoftheart ASP Solvers correspondence target plans Logic programs allow concise encodings translate necessarily faster solutions speed current SAT solvers The differences use logic planning approaches basically First use logic deﬁning computing heuristics planning computing plans This allows use compact encodings require time indices planning horizons This important complexity encodings grows exponentially horizon plan metric deﬁned horizon optimality plans obtained conditional horizon Second resulting logical encoding solved SAT ASP solver dDNNF compiler Once problem compiled heuristic values search state time linear compiled representation Incidentally dDNNF compiler thought SAT solver suitable form caching computes solutions leaves trace enables solution problems 38 Another use dDNNF planning reported 54 heuristics planning incomplete information sensing conformant planning obtained projections model counts computable lineartime dDNNF representations 25 Third heuristics handle richer cost structure actions nonuniform costs penalties rewards associated ﬂuents The computation optimal plans rich cost structures pursued recently 8 3035 planning problems mapped optimization variants SAT Answer Sets CSPs Constraint Satisfaction Problems like Weighted MaxSAT Weighted ASP Weighted CSPs A limitation approaches optimality resulting plans conditional horizon Moreover increasing planning horizon alternative clear stop plans larger makespan potentially decrease overall cost Approaches planning preferences form soft goals reported 76064 The approaches optimal reasons cases heuristic mechanisms select soft goals search algorithm pursue ﬁxed planning horizon assumed ﬁnally suboptimal Anytime A The work 7 hand presents optimal planner dealing temporally extended preferences based branchandbound search lower bounds utilized suﬃciently informed search run completion general The problems selecting subset soft goals pursue estimation cost achieving tightly coupled The heuristics developed paper tackle time best model theory selects soft goals pursued time estimates cost achieving The heuristic optimal task deletes 11 Summary We combined ideas number areas including search planning knowledge compilation answer set programming develop 1 cost model planning accommodates ﬂuent penalties rewards 2 generalization admissible deleterelaxation heuristic h 3 account heuristic terms rank best models suitable propositional theory obtained informing search model c strong completion logic program require time indices horizons 4 approach exploits formulation properties dDNNF formula computing heuristic values h c needed search time linear size compilation 5 bestﬁrst algorithm able use heuristic capable handling negative heuristics costs ensuring opti mality 6 extension framework based use valid plan constraints boosting values heuristic overcoming limitations deletebased relaxation We analyzed properties resulting heuristics admissibility monotonicity c P C showing example c P constrained heuristic h semantic differences heuristic h produces optimal costs problems Traveling Salesman Problem yields Minimum Spanning Tree lower bound heuristics exponential worst case We implemented ideas planner tested number problems producing nontrivial results including best results aware domains The computational bottleneck approach compilation CNF translation logic program dDNNF formula In 58 57 report preliminary results additional relaxation method maps CNF formula weaker formula bounded treewidth compiled eﬃciently B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 1601 The results taken single package particular possible replace compilation step explicit computation best models states arise search Weighted SAT ASP solver The appeal compilationbased approach yields deemed circuit evaluation network input situation output produced lineartime appraisal situation form heuristic value Some authors associated evaluations type role played emotions real agents 2028 Acknowledgements We thank Adnan Darwiche useful discussions dDNNF making compiler available anony mous reviewers useful comments H Geffner partially supported grant TIN200615387C0303 MECSpain B Bonet grant DIDUSBVenezuela Our planner built planner Patrik Haslum Preliminary experiments run Hermes Computing Resource Aragon Institute Engineering Research I3A University Zaragoza Appendix A Proofs We include proofs results paper derivation direct text Proof Proposition 1 Any plan π P plan relaxation P respectively clearly F π F atoms true π P P P relaxation P cost h c P c F π F π stand set π It follows plan π P plan higher c P cid2 Proof Proposition 2 The correspondence plans length n models TnP suﬃciently large n established 44 In worst case horizon exponential 15 cid2 I s G g The models M T n P I0 Gn Proof Proposition 4 The proposition follows correspondence models T I s G plans P g suﬃciently large n Moreover literalranking function given proposition rM cπ action occurs time plan ai true model contribution action cπ rM In addition ﬂuent p true plan point absence deletes p true end plan pn true model Since rpn cp ﬂuents contribute terms cπ rM cid2 n P I0 Gn 11 correspondence plans π P I s G g models Proof Proposition 6 We establish correspondence plans π P wffcLP Is g An interpretation theory T wffcLP Is g expressed pair A F actions A ﬂuents F Moreover models A F wffcLP set ﬂuents F determined set actions A deﬁnition wffcLP F unique minimal model logic program LP A The set ﬂuents F true model F A stratiﬁed sets F 0 A F 1 A F 0 A contains heads p rules p Prea LP A Prea F i1 A contains heads rules A Prea true Prea true q Prea F A atoms r Prea Fk A k cid2 cid8 F T A cid8 F encodes parallel plan π P Now A F best model T actions A preconditions true F cid8 A actions construction LP ca cid3 0 possible construct model A eliminated set ﬂuents good A F preconditions satisﬁed We want I s G g cost In delete model A relaxation parallel Strips plan serialized keeping cost sequential plan parallelized cid8 F moving actions ﬁrst time point preconditions hold The parallel plan π corresponds A deﬁned sequence action sets A0 A1 Ai set actions A preconditions true cid8 set actions setp excluded Clearly π parallel plan maps I s G g preconditions F A action plan true s added earlier action action deletes P deletefree cid8 F model g This shows model A F include g adds ﬂuents A wffcLP Is g plan P I s G g cost We left converse plans π P I s G g translate models wffcLP Is g cost For need interpretation A F A contains actions π set actions Is F set atoms added actions model wffcLP Is g equivalently A F minimal model program LP A Is satisﬁes g The clear g goal added action π F For shown ﬂuents p F partitioned sets F 0 F 1 p F 0 head rule p Prea LP A Prea p F i1 head rule A Prea true For suﬃcient cid8 cid5 h ct P I s cid7 cid2 cid15 ca cid13 The expression ca cid8cid8 Now state s cid7 cid5 h ct P I s cid2 1602 B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 parallelize plan π sets actions A0 An deﬁning F 0 set ﬂuents p true s F i1 set ﬂuents true action Ai applied Since plan π problem P I s G g ﬁnd model theory wffcLP Is g cost vice versa cost problem equal cost theory cid2 Proof Theorem 7 Direct Theorem 3 Proposition 6 cid2 Proof Proposition 8 Let n cid3s tcid4 n action Let cid4t set t cid8 t ﬂuents Then monotonicity means cid13 cid5 cid16 pcid4t cp h cid8 ct P I s cid8 cid7 cid8 cid3s cid8 t cid8cid4 nodes n cid8 successor n application pcid4t cp stands cost applying action plus cost atoms p cid4t introduces triangle inequality result applying s relaxation P cid15 cid5 ca cid16 pcid4t cp P I s h cid7 cid13 cid8cid8 cid8 ct hold deﬁnition heuristic h min value righthand expression actions applicable s At time s atoms true s possibly deleted It follows h c principle optimality cost best plan s corresponds cid8 cid8cid8 s s cid8 I s cid8 s cid8cid8 cid8 plan P cid8 P I s ct cid8cid8 greater cost The ﬁrst inequality follows second cid2 plan P I s cid8 P I s ct cid8cid8 cid2 h Proof Proposition 9 We need A monotone heuristic revised termination condition produces optimal plans presence negative costs Monotonicity implies evaluation function f n gn hn decrease search path n1 n2 n3 f n1 cid2 f n2 cid2 f n2 cid2 node expanded twice Otherwise ni expanded path evaluation function f ni C second path n0 n1 ni strictly cost ni fully expanded node nk path OPEN f nk C monotonicity expanded instead Then number nodes ﬁnite revised A algorithm eventually terminate solution problem solution From deﬁnition termination condition solution best cost solutions far monotonicity cost good best solutions nodes currently OPEN list cid2 Proof Theorem 14 The nontrivial expression prove h C simply pushes cost plans relaxation P C For proving h plan relaxation P result application plan π P P c P cid2 h c P C direct given P follows validity P C suﬃces note plan π P complies constraints C complies C cost set ﬂuents F π true c P C cid2 c c P C h P C c c P C cid2 c cid2 Proof Proposition 15 Similar proofs Proposition 6 Theorem 7 cid2 Proof Theorem 16 Direct Theorem 3 Proposition 15 cid2 Proof Theorem 17 We assignment encodes plan relaxation complies constraints cost plan relaxation complies constraint C minimum cost encodes assignment cost So cost best assignment cost best plan relaxation complies constraints The ﬁrst statement direct actions mapx y x assigned y ordered complies C way form plan relaxation complies C For second best plan P cid8 y y action mapx y x goal actions mapx y mapx cid8 x better plan obtained dropping C actions mapx y mapx y actions assumed positive costs The result x mapped unique y cid2 comply Proof Theorem 18 We correspondence TSP tours plans P movexn xn1 xn x f action sequence movex0 x1 constraints C theorem If tour x0 x1 xn1 x f clearly plan complies C cost Indeed ﬁrst action applicable initial state action movexi xi1 adds precondition atxi1 required following action precondition notvisitedxi1 initially true remains ﬁrst action movexk xi1 applied add atoms visitedx goal action deletes In direction need edges x y actions movex y plan π P complies C form tour For let τ stand longest path cid3x0 x1 xmcid4 starting x0 movexi xi1 B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 1603 plan This path unique constraint C prevents path splitting paths We 1 path contains xi 2 vertex xi 0 m appears 3 actions π For ﬁrst let assume vertexes reached path let atxk ﬁrst atom true π vertex xk τ Now xk x0 τ action movexi xk π precondition atxi xi τ atxk ﬁrst atom true π τ Yet xi τ m possible actions movexi xi1 movexi xk incompatible C m append vertex xk τ contradiction τ longest sequence So vertex xk 1 proved For 2 path τ unique visits vertices including x f successors include loop Last 3 actions movexi y y cid12 xi1 π movexi y movexi xi1 contradict C At time x f successors problem includes actions movex f y cid2 Proof Theorem 19 We correspondence Minimum Directed Spanning Trees rooted x0 given graph best relaxed plans deleterelaxation P The relaxed plan associated Directed Spanning Tree rooted x0 obtained including actions movex y edges x y Spanning Tree taking structure tree partial order ac tions It simple verify actions ordered way compatible partial order renders plan P actions applicable given initial situation previous actions sequence goals visitedxi achieved end Likewise G V E graph associated relaxed plan π P setting V set vertices xi atoms atxi achieved π P E edges xi xk movexi xk π follows G Directed Spanning Graph rooted x0 original graph includes vertexes paths x0 In addition π optimal plan P G actually Spanning Tree original graph positive costs edges actions π accommodate actions movexi xk movex j xk leading vertex xk Thus vertex original graph reachable x0 single path Finally directed spanning tree translates plan P cost optimal plan P translates directed spanning tree cost min directed spanning trees rooted x0 cost best plans P cid2 References 1 KR Apt M Bezem Acyclic programs DHD Warren P Szeredi Eds Proc 7th Int Conf Logic Programming MIT Press 1990 pp 617633 2 C Anger K Konczak T Linke T Schaub A glimpse answer set programming Künstliche Intelligenz 19 1 2005 1217 3 F Bacchus The 2000 AI planning systems competition Artiﬁcial Intelligence Magazine 22 3 2001 4756 4 J Barwise Ed Handbook Mathematical Logic NorthHolland 1977 5 C Baral Knowledge Representation Reasoning Declarative Problem Solving Cambridge University Press 2003 6 C Boutilier R Brafman C Domshlak H Hoos D Poole CPnets A tool representing reasoning conditional ceteris paribus preference statements Journal Artiﬁcial Intelligence Research 21 2004 135191 7 J Baier F Bacchus S McIlraith A heuristic search approach planning temporally extended preferences M Veloso Ed Proc 20th Int Joint Conf Artiﬁcial Intelligence 2007 pp 18081815 8 RI Brafman Y Chernyavsky Planning goal preferences constraints S Biundo K Myers K Rajan Eds Proc 15th Int Conf Automated Planning Scheduling AAAI Press 2005 pp 182191 9 R BenEliyahu R Dechter Propositional semantics disjunctive logic programs Annals Mathematics Artiﬁcial Intelligence 12 12 1994 5387 10 D Bertsekas Dynamic Programming Optimal Control Athena Scientiﬁc 1995 2 vols 11 A Blum M Furst Fast planning planning graph analysis Artiﬁcial Intelligence 90 1997 281300 12 B Bonet H Geffner Planning heuristic search Artiﬁcial Intelligence 129 12 2001 533 13 B Bonet H Geffner Heuristics planning penalties rewards compiled knowledge P Doherty J Mylopoulos C Welty Eds Proc 10th Int Conf Principles Knowledge Representation Reasoning AAAI Press 2006 pp 452462 14 B Bonet G Loerincs H Geffner A robust fast action selection mechanism planning B Kuipers B Webber Eds Proc 14th National Conf Artiﬁcial Intelligence AAAI Press 1997 pp 714719 15 T Bylander The computational complexity propositional STRIPS planning Artiﬁcial Intelligence 69 1994 165204 16 E Clarke O Grumberg D Peled Model Checking MIT Press 1999 17 K Clark Negation failure H Gallaire J Minker Eds Logic Data Bases Plenum 1978 pp 293322 18 T Cormen C Leiserson R Rivest Introduction Algorithms MIT Press 1990 19 J Culberson J Schaeffer Pattern databases Computational Intelligence 14 3 1998 318334 20 A Damasio Descartes Error Emotion Reason Human Brain Quill 1995 21 A Darwiche Decomposable negation normal form Journal ACM 48 4 2001 608647 22 A Darwiche On tractable counting theory models applications belief revision truth maintenance Journal Applied NonClassical Logics 11 12 2001 1134 23 A Darwiche A compiler deterministic decomposable negation form R Dechter M Kearns R Sutton Eds Proc 18th National Conf Artiﬁcial Intelligence AAAI Press 2002 pp 627634 24 R Dechter Constraint Processing Morgan Kaufmann 2003 25 A Darwiche P Marquis A knowledge compilation map Journal Artiﬁcial Intelligence Research 17 2002 229264 26 A Darwiche P Marquis Compiling propositional weighted bases Artiﬁcial Intelligence 157 12 2004 81113 27 Y Dimopoulos B Nebel J Koehler Encoding planning problems nonmonotonic logic programs S Steel R Alami Eds Proc 4th European Conf Planning LNCS Springer 1997 pp 169181 28 D Evans P Cruse Eds Emotion Evolution Rationality Oxford 2004 1604 B Bonet H Geffner Artiﬁcial Intelligence 172 2008 15791604 29 S Edelkamp Planning pattern databases A Cesta D Borrajo Eds Proc 6th European Conf Planning LNCS Toledo Spain Springer 2001 pp 1324 30 T Eiter W Faber N Leone G Pfeifer A Polleres Answer set planning action costs Journal Artiﬁcial Intelligence Research 19 2003 2571 31 H Geffner Planning graphs knowledge compilation D Dubois C Welty M Williams Eds Proc 4th Int Conf Principles Knowledge Representation Reasoning AAAI Press 2004 pp 662672 32 H Gabow Z Galil T Spencer R Tarjan Eﬃcient algorithms ﬁnding minimum spanning trees undirected directed graphs Combinatorica 6 2 1986 109122 33 B Gazen C Knoblock Combining expressiveness UCPOP eﬃciency Graphplan S Steel R Alami Eds Proc 4th European Conf Planning LNCS Springer 1997 pp 221233 34 M Gelfond V Lifschitz The stable model semantics logic programming RA Kowalski K Bowen Eds Proc 5th Int Conf Logic Program ming The MIT Press 1988 pp 10701080 35 E Giunchiglia M Maratea Planning satisﬁability preferences RC Holte A Howe Eds Proc 22nd National Conf Artiﬁcial Intelligence AAAI Press 2007 pp 987993 36 H Gallaire J Minker J Nicolas Logic databases A deductive approach ACM Computing Surveys 16 2 1984 153185 37 P Haslum B Bonet H Geffner New admissible heuristics domainindependent planning M Veloso S Kambhampati Eds Proc 20th National Conf Artiﬁcial Intelligence AAAI Press 2005 pp 11631168 38 J Huang A Darwiche DPLL trace From SAT knowledge compilation LP Kaelbling A Saﬃotti Eds Proc 19th Int Joint Conf Artiﬁcial Intelligence 2005 pp 156162 39 P Haslum H Geffner Admissible heuristic optimal planning S Chien S Kambhampati C Knoblock Eds Proc 6th Int Conf Artiﬁcial Intelligence Planning Scheduling AAAI Press 2000 pp 140149 40 J Hoffmann B Nebel The FF planning Fast plan generation heuristic search Journal Artiﬁcial Intelligence Research 14 2001 253302 41 J Hoffmann Utilizing Problem Structure Planning A Local Search Approach Lecture Notes Computer Science vol 2854 Springer 2003 42 A Junghanns J Schaeffer Sokoban Enhancing general singleagent search methods domain knowledge Artiﬁcial Intelligence 129 12 2001 219251 43 H Kautz B Selman Planning satisﬁability Proc 10th European Conf Artiﬁcial Intelligence 1992 pp 359363 44 H Kautz B Selman Pushing envelope Planning propositional logic stochastic search W Clancey D Weld Eds Proc 13th National Conf Artiﬁcial Intelligence AAAI Press 1996 pp 11941201 45 H Kautz B Selman Unifying SATbased Graphbased planning T Dean Ed Proc 16th Int Joint Conf Artiﬁcial Intelligence Morgan Kaufmann 1999 pp 318325 46 V Lifschitz Answer set programming plan generation Artiﬁcial Intelligence 138 2002 3954 47 JW Lloyd Foundations Logic Programming SpringerVerlag 1984 48 E Lawler A RinnooyKan Eds The Traveling Salesman Problem A Guided Tour Combinatorial Optimization Wiley 1985 49 F Lin Y Zhao ASSAT Computing answer sets logic program sat solvers R Dechter M Kearns R Sutton Eds Proc 18th National Conf Artiﬁcial Intelligence AAAI Press 2002 pp 112117 50 F Lin J Zhao On tight logic programs translation normal logic programs propositional logic G Gottlob Ed Proc 18th Int Joint Conf Artiﬁcial Intelligence Morgan Kaufmann 2003 pp 853858 51 D McDermott Using regressionmatch graphs control search planning Artiﬁcial Intelligence 109 12 1999 111159 52 MW Moskewicz CF Madigan Y Zhao L Zhang S Malik Chaff Engineering Eﬃcient SAT Solver S Malik D Blaauw Eds Proc 38th Design Automation Conf ACM Press 2001 53 B Nebel On compilability expressive power propositional planning Journal Artiﬁcial Intelligence Research 12 2000 271315 54 H Palacios B Bonet A Darwiche H Geffner Pruning conformant plans counting models compiled dDNNF representations S Biundo K Myers K Rajan Eds Proc 15th Int Conf Automated Planning Scheduling AAAI Press 2005 pp 141150 55 J Pearl Heuristics Morgan Kaufmann 1983 56 C Papadimitriou K Steiglitz Combinatorial Optimization Algorithms Complexity Dover Publications 1998 57 M Ramírez B Bonet H Geffner Logical encodings time indexes deﬁning computing admissible heuristics planning Proc 2007 ICAPS Workshop Heuristics DomainIndependent Planning 2007 58 M Ramírez H Geffner Structural relaxations variable renaming compilation solving MinCostSAT C Bessiere Ed Proc 13th Int Conf Principles Practice Constraint Programming Lecture Notes Computer Science vol 4741 Springer 2007 pp 605619 59 S Russell P Norvig Artiﬁcial Intelligence A Modern Approach Prentice Hall 1994 60 DE Smith Choosing objectives oversubscription planning S Zilberstein S Koenig J Koehler Eds Proc 14th Int Conf Automated Planning Scheduling AAAI Press 2004 pp 393401 61 P Simons I Niemela T Soininen Extending implementing stable model semantics Artiﬁcial Intelligence 138 12 2002 181234 62 VS Subrahmanian C Zaniolo Relating stable models AI planning domains L Sterling Ed Proc 12th Int Conf Logic Programming MIT Press 1995 pp 233247 63 S Thiebaux C Gretton J Slaney D Price F Kabanza Decisiontheoretic planning nonmarkovian rewards Journal Artiﬁcial Intelligence Re search 25 2006 1774 64 M Van den Briel R Sanchez Nigenda MB Do S Kambhampati Effective approaches partial satisfaction oversubscription planning DL McGuinness G Ferguson Eds Proc 19th National Conf Artiﬁcial Intelligence AAAI Press 2004 pp 562569