Artiﬁcial Intelligence 244 2017 629 Contents lists available ScienceDirect Artiﬁcial Intelligence wwwelseviercomlocateartint MiningZinc A declarative framework constraintbased mining Tias Guns Department Computer Science KU Leuven Belgium b LIACS Universiteit Leiden Netherlands c Faculty IT Monash University National ICT Australia NICTA Australia Anton Dries Siegfried Nijssen ab Guido Tack c Luc De Raedt r t c l e n f o b s t r c t Article history Received revised form 17 September 2015 Accepted 20 September 2015 Available online 26 September 2015 Keywords Constraintbased mining Itemset mining Constraint programming Declarative modeling Pattern mining We introduce MiningZinc declarative framework constraintbased data mining MiningZinc consists key components language component execution mechanism First MiningZinc language allows highlevel natural modeling mining problems MiningZinc models similar mathematical deﬁnitions literature It inspired Zinc family languages systems supports user deﬁned constraints functions Secondly MiningZinc execution mechanism speciﬁes compute solutions models It solver independent supports standard constraint solvers specialized data mining systems The highlevel problem speciﬁcation ﬁrst translated normalized constraint language FlatZinc Rewrite rules add redundant constraints solve subproblems specialized data mining algorithms generic constraint programming solvers Given model different execution strategies automatically extracted correspond different sequences algorithms run Optimized data mining algorithms specialized processing routines generic solvers automatically combined Thus MiningZinc language allows model constraintbased itemset mining problems solver independent way execution mechanism automatically chain different algorithms solvers This leads unique combination declarative modeling highperformance solving 2015 Elsevier BV All rights reserved 1 Introduction The ﬁelds data mining constraint programming successful subﬁelds artiﬁcial intelligence Signiﬁcant progress past years resulted important theoretical insights development effec tive algorithms techniques systems enabled numerous applications science society industry In recent years increased approaches combine integrate principles ﬁelds 1 This paper intends contribute bridging gap Corresponding author S Nijssen guidotackmonashedu G Tack lucderaedtcskuleuvenbe L De Raedt Email addresses tiasgunscskuleuvenbe T Guns antondriescskuleuvenbe A Dries siegfriednijssencskuleuvenbe snijssenliacsleidenunivnl httpdxdoiorg101016jartint201509007 00043702 2015 Elsevier BV All rights reserved T Guns et al Artiﬁcial Intelligence 244 2017 629 7 It motivated observation methodologies constraint programming data mining dif ferent Constraint programming focused declarative modeling solving approach constraint satisfaction optimization problems Here problem speciﬁed socalled model consisting variables possible values constraints need satisﬁed possibly optimization function Solutions computed general purpose solver model Thus user speciﬁes problem constraint programming determines solve problem This summarized slogan constraint programming model solvers The declarative constraint programming approach contrasts typical procedural approach data mining The focused handling large complex datasets arise particular applications focusing special purpose algorithms speciﬁc problems This typically yields complex code hard develop reuse applications Data mining devoted attention constraint programming issue general generic solution strategies Today little support formalizing mining task capturing problem speciﬁcation declarative way Developing implementing algorithms labor intensive limited reuse software The typical iterative nature knowledgediscovery cycle 2 complicates process problem speciﬁcation change iterations turn require changes algorithms The aim paper contribute bridging methodological gap ﬁelds data mining straint programming applying model solver approach data mining In constraint programming highlevel languages Zinc 3 Essence 4 OPL 5 model problem general purpose solvers compute solutions Motivated particular solverindependent modeling languages devise modeling language data mining problems expressed constraint satisfaction optimization problems Furthermore contribute accompanying framework infer eﬃcient execution strategies involving specialized mining systems generic constraint solvers This contribute making data mining approaches ﬂexible declarative easy change model reuse existing algorithms solvers As ﬁeld data mining diverse focus paper popular tasks constraintbased pattern mining Even restricted data type sets binary databases settings supervised unsuper vised corresponding systems proposed literature makes itemset mining ideal showcase declarative approach data mining The key contribution paper introduction generalpurpose declarative mining framework called Min ingZinc The design criteria MiningZinc support highlevel natural modeling pattern mining tasks MiningZinc models closely corre spond deﬁnitions data mining problems literature support userdeﬁned constraints criteria common elements building blocks abstracted away easing formulation existing problems variations thereof solverindependent best execution strategy selected problem data hand Supported methods include general purpose solvers specialized eﬃcient mining algorithms combinations thereof build extend existing constraint programming data mining techniques capitalizing extending stateoftheart ﬁelds In data mining date framework supports design criteria Especially combination userdeﬁned constraints solverindependence uncommon defer detailed discussion related work Section 6 In constraint programming community design Zinc 36 family languages frameworks line criteria The main question answer paper extend framework support constraintbased pattern mining We contribute 1 novel library functions constraints MiniZinc language support modeling itemset mining tasks terms set operations constraints 2 ability deﬁne capabilities generic solvers specialized algorithms terms constraints solve predeﬁned combination constraints input output variables 3 rewrite mechanism add redundant constraints determine applicability deﬁned algorithms solvers 4 automatic composition execution strategies involving multiple specialized generic solving methods The language MiniZinc 7 version 20 extended library functions constraints tailored pattern mining The execution mechanism elaborate standard MiniZinc For speciﬁc constraint solver translate constraint individually constraint supported said solver Our method automatically compose execution strategies multiple solvers 8 T Guns et al Artiﬁcial Intelligence 244 2017 629 The MiningZinc framework builds earlier CP4IM framework 8 showed feasibility constraint pro gramming pattern mining This work started modeling experience obtained CP4IM contained contributions tied Gecode solver consisted lowlevel encoding constraints The present paper extends earlier publication MiningZinc 9 respects It considers modeling solving wider range data mining tasks including numeric probabilistic data multiple databases pattern sets The biggest change execution mechanism longer restricted single algorithm generic solver Instead uses rewrite rules automatically construct execution plans consisting multiple solveralgorithm components We perform elaborate evaluation including comparison automatically composed execution strategies novel combination tasks Structure text Section 2 introduces modeling MiningZinc basic problem frequent itemset mining Section 3 illustrates wide range constraintbased mining problems expressed MiningZinc In Section 4 execution mechanism MiningZinc explained Section 5 experimentally demonstrates capabilities approach Section 6 describes related work Section 7 concludes 2 Modeling MiningZinc builds MiniZinc modeling language suitable data mining problems ex pressed constraint satisfactionenumeration optimization problems We ﬁrst introduce itemset mining constraint based mining Using frequent itemset mining example demonstrate formulated constraint satisfaction problem MiniZinc relates MiningZinc framework More advanced problem formulations related tasks given section 21 Pattern mining itemset mining Pattern mining subﬁeld data mining concerned ﬁnding patterns regularities data Examples patterns include products people buy words appear frequently abstracts papers recurring combinations events log ﬁles common properties large number observations etcetera Typical pattern mining pattern substructure appearing data single words events collections thereof measure interestingness pattern based frequently appears data We focus pattern mining problems patterns expressible sets called itemsets Itemset mining introduced Agrawal et al 10 technique customer transaction databases sets items products people buy From unexpected associations products discovered Since introduction itemset mining extended directions including structured types patterns sequences trees graphs A common issue pattern mining techniques number patterns overwhelming In respect research use constraints avoid ﬁnding uninteresting patterns ways removing redundancy patterns different interestingness measures An overview recent book 11 The input itemset mining algorithm itemset database containing set transactions consisting identiﬁer set items We denote set transaction identiﬁers S 1 n set items I 1 m An itemset database D maps transaction identiﬁers t S sets items Dt I Deﬁnition 1 Frequent itemset mining Given itemset database D threshold Freq frequent itemset mining problem consists ﬁnding itemsets I I φDI Freq φDI tI Dt The set φDI called cover itemset It contains transaction identiﬁers itemset subset respective transaction The threshold Freq called minimum frequency threshold An itemset I φDI Freq called frequent itemset Example 1 Consider transaction database hardware store t 1 2 3 Dt Hammer Nails Saw Hammer Nails Wood File Saw Screws Wood t 4 5 6 Dt Nails Screws Wood File Saw Hammer Nails Pliers Wood With minimum frequency threshold 3 frequent patterns Hammer Nails HammerNails Wood NailsWood T Guns et al Artiﬁcial Intelligence 244 2017 629 9 Constraintbased pattern mining methods leverage additional constraints pattern discovery process cf 101213 This lead research topic constraintbased itemset mining 14 Section 3 present different constraintbased mining problems context MiningZinc 22 Constraint programming Constraint Programming CP generic method solving combinatorial constraint satisfaction optimization problems It declarative method separates speciﬁcation problem actual search solu tion On language number declarative convenient languages developed On solver generic constraint solvers available including industrial ones We refer Handbook Constraint Programming extensive overview technologies applications 15 More formally Constraint Satisfaction Problem CSP characterized declarative speciﬁcation constraints variables Deﬁnition 2 Constraint Satisfaction Problem CSP A CSP P V D C speciﬁed ﬁnite set variables V domain D mapping variable V V set possible values DV ﬁnite set constraints C A variable V V called ﬁxed DV 1 An assignment variables V domain D variables called stronger domain D Dcid7V DV V V A constraint CV 1 V k C ﬁxed A domain Dcid7 arbitrary Boolean function variables V 1 V k V A solution CSP assignment variables constraints satisﬁed domain D variable V assigned element DV assignment stronger D D cid7 cid7 Example 2 Imagine going boat trip There room 2 friends Of 4 sailing friends Sjarel Kaat better boat Kaat wants Nora goes Raf ﬁne This modeled set variable F domain Sjarel Kaat Nora Raf constraints F 2 Sjarel Kaat cid2 F Kaat F Nora F A range practical modeling languages exist aid user formulating CSP Example languages MiniZinc 3 Essence 4 OPL 5 Such languages deﬁne variable types Booleans integers sets ﬂoats deﬁne large number constraints speciﬁed They typically provide number modeling conveniences syntactic sugar accessing element array looping sets forall exists mathematicallike operators sums products 23 MiniZinc itemset mining MiniZinc We build MiniZinc 6 modeling language version 20 A MiniZinc model describes constraint problem sequence expressions include parameter declarations declarations decision variables function predicate declarations constraints A model describes parametric problem class instantiated providing values parameters typically separate data ﬁle An important feature MiniZinc models solverindependent They translated nonparameterized instantiated lowlevel format called FlatZinc contain solverdependent constructs This format understood wide range different types solvers 16 CP solvers MIP Mixed Integer Linear Programming solvers SAT Boolean Satisﬁability SMT SATModuloTheories solvers The solver reads interprets FlatZinc computes solutions The compiler achieves specialization particular solver use solverspeciﬁc library predicate declarations Such library declares basic constraint solver builtin understood natively target solver decomposition simpler constraints supported solver Listing 1 shows MiniZinc model nQueens problem Hello World constraint programming The task place n queens n n chess board queens attack Line 1 declares n parameter model Line 2 declares array n decision variables corresponding row chessboard Each decision variable domain 1n represents column queen row placed queens row deﬁnition The requirement attack implemented conjunction written calls all_different predicate constrain arguments arrays expressions pairwise different The second constraints use array comprehensions way compactly constructing arrays corresponding diagonals chess board derived observation Q Q j cid9 j forbids lefttoright diagonals Q Q j cid9 j forbids righttoleft diagonals Finally solve output items instruct solver ﬁnd solution satisfy output values queens array Note CP solver declare supports all_different constraint natively library library MIP solver deﬁne decomposition linear inequalities 10 T Guns et al Artiﬁcial Intelligence 244 2017 629 Listing 1 A simple MiniZinc model n t n array 1 n var 1 n queens c o n s t r n t l l _ d f f e r e n t queens l l _ d f f e r e n t queens l l _ d f f e r e n t queens n 1 n n 1 n solve s t s f y output queens Listing 2 Constraintbased mining n t N r I array 1 NrT set 1 N r I TDB n t Freq n t NrT var set 1 N r I Items c o n s t r n t card cover Items TDB Freq solve s t s f y output Items function var set n t cover var set n t Items array n t set n t D Listing 3 Constraintbased mining cover l e t var set c o n s t r n t t n Cover n d e x _ s e t D Cover f o r l l n ub Cover t n Cover Items subset D t 1 2 3 4 5 6 7 1 2 3 4 5 6 1 2 3 4 5 6 Itemset mining MiniZinc Pattern mining problems modeled directly MiniZinc A MiniZinc model frequent itemset mining problem shown Listing 2 Lines 1 2 deﬁne parameters data provided separate data ﬁle The model represents item transaction identiﬁers I S natural numbers 1 NrI 1 NrT respectively The dataset D implemented array TDB mapping transaction identiﬁer corresponding set items The set items looking modeled line 3 set variable upper bound restricted set 1 NrI The minimum frequency constraint posted line 4 corresponds closely formal notation φDI Freq The cover function line 4 corresponds φDI A distinguishing feature MiniZinc support user deﬁned predicates version 20 userdeﬁned functions 7 A MiniZinc predicate parametric constraint speciﬁcation instantiated concrete variables parameters like all_different Listing 1 A MiniZinc function generalization allow arbitrary return values A declaration cover function shown Listing 3 Recall formal deﬁnition cover φDI tI Dt The implementation achieves function introducing auxiliary set variable Cover line 3 constraining contain exactly transactions subsets Items The let construct introduce auxiliary variables post constraints returning value case newly introduced Cover keyword line 6 Other MiniZinc functions include index_set returns set indices array similarly index_set_1of2 returns index set ﬁrst dimension twodimensional array ub returns valid upper bound variable In particular case Cover set variable ubCover returns ﬁxed set guaranteed superset valid assignment Cover variable Documentation MiniZincs constructs available online1 In cover function Listing 3 introduced Cover variable constrained equal cover let statement lines 45 This constraint states values t declared upper bound Cover values possibly Cover value t included Cover element cover set Items contained transaction t While implementation cover verbatim translation mathematical deﬁnition MiniZinc enables deﬁne abstraction library hide implementation details users 1 http wwwminizinc org 2 0 doclib doc html T Guns et al Artiﬁcial Intelligence 244 2017 629 11 Listing 4 Key abstractions provided MiningZinc For brevity write set set int array arrayint function var set cover var set Items array set TDB function var set cover var set array Items n t TDB function var set c o v e r _ n v var set Cover array set TDB function var n t weighted_sum array var n t Weights var set Items function array s t r n g p r n t _ t e m s e t var set function array s t r n g p r n t _ t e m s e t W c o v e r var set Items Items array set TDB predicate m n f r e q _ r e d u n d n t var set Items array set TDB n t Freq function ann predicate ann enumerate function ann query s t r n g db s t r n g s q l t e m s e t _ s e r c h var set Items function var set n t cover var set n t Items array n t n t n t DN Listing 5 cover constraint numeric data l e t var set c o n s t r n t t n Cover n d e x _ s e t _ 1 o f 2 DN Cover n ub Cover n Cover Items subset f o r l l t row DN t function set n t row array n t n t n t DN n t t n n d e x _ s e t _ 2 o f 2 DN DN t 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 1 2 3 4 5 6 7 8 This example demonstrates appeal modeling language like MiniZinc pattern mining formulation highlevel declarative close mathematical notation allows userdeﬁned constraints like cover relation items transactions independent actual solution method 24 MiningZinc In example deﬁned cover function primitives present MiniZinc An important feature MiniZinc common functions predicates placed libraries facilitate reuse different models In way MiniZinc extended different application domains need developing new language The language component MiningZinc framework library Listing 4 lists signatures key functions predicates provided MiningZinc library discuss turn The key building blocks MiningZinc library cover cover_inv functions Given dataset cover function determines itemset transaction identiﬁers cover φDI tI Dt given Listing 3 The cover function deﬁned numeric data following Boolean interpretation transaction covered itemset item nonzero value transaction Listing 5 shows MiniZinc speciﬁcation uses helper function determine items transaction nonzero value This constraints actual numeric data following section The cover_inv function computes set transaction identiﬁers items common transactions identiﬁed Let Dcid7 transpose D database maps items sets transaction identiﬁers Dcid7i consists transactions item appears Dcid7i t Si Dt cover_inv deﬁned similarly cover follows ψDT iT Dcid7i The MiningZinc speciﬁcation similar cover given Listing 6 includes helper function calculate Dcid7i The library includes helper functions weighted_sum different ways print item transaction sets The itemset_search function deﬁnes search annotation placed solve item specify heuristic solver use For MiningZinc function deﬁned solverspeciﬁc libraries enable use different search heuristics different solvers 12 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 T Guns et al Artiﬁcial Intelligence 244 2017 629 Listing 6 cover_inv function col helper function function var set n t c o v e r _ n v var set n t Cover array n t set n t D l e t var set min D max D Items c o n s t r n t n Items f o r l l n ub Items n Items Cover subset c o l D function set t t n t c o l array n t set n D t n n d e x _ s e t D n t D n t predicate m n f r e q _ r e d u n d n t var set n t Items Listing 7 Redundant minimum frequency constraint array n t set n t Freq n t D n t Cover cover Items D n n t e r s e c t c o l D Freq var set n ub Items n Items card Cover l e t f o r l l Finally library includes predicates express redundant constraints added automatically execution mechanism A redundant constraint implied model express actual restric tion solution space potentially improve solver performance contributing additional constraint propagation A predicate implementing redundant constraint minimum frequent itemset mining shown List ing 7 It uses insight itemset frequent item frequent items appear transactions removed searching This encoded constraint performs lookahead items Listing 7 line 6 See 8 detailed study constraint Another type redundant information available library search annotation Listing 4 line 15 This annotation added search keyword speciﬁes order search variables An ex ample search order shown work itemset mining occurrence 8 We added enumerate search annotation differentiate model satisfaction solution enumeration lutions problems The annotation query keyword added variable declaration example array set TDB querymydbsql SELECT tiditem FROM purchases The execution mechanism automatically typecheck expression execute query add data assignment variable In way directly load data database common data mining A second instance library exists signatures set variables internally rewritten arrays Boolean variables constraints functions expressed Boolean variables This alternative formulation improve solving performance enables use CP solvers support set constraints natively The MiningZinc library needing constructs offers modeling convenience specifying itemset mining problems demonstrated section Its elements framework described Section 4 detecting known mining tasks adding redundant constraints 3 Example problems Modeling mining problem MiningZinc follows methodology modeling constraint program express problem terms variables domain constraints variables example set variable minimum frequency constraint data From data mining perspective kind problem expressed enumeration optimization problems formulated variable types available MiniZinc Booleans integers sets ﬂoats constraints variables Many itemset mining problems ﬁt requirement exception greedy postprocessing mechanisms Krimp 17 incomplete methods We illustrate model range diverse representative itemset mining problems MiningZinc 31 Itemset mining constraints Listing 8 contains examples constraintbased mining constraints added frequent itemset min ing model Listing 2 Line 6 Items cover_invcoverItemsTDBTDB represents popular closure constraint I ψDφDI This closure constraint minimum frequency constraint represents closed itemset mining problem 18 T Guns et al Artiﬁcial Intelligence 244 2017 629 13 Listing 8 Constraintbased mining 1 2 3 4 n t N r I array 1 NrT set 1 N r I TDB n t Freq n t NrT var set 1 N r I Items c o n s t r n t card cover Items TDB Freq 5 Closure c o n s t r n t 6 Items c o v e r _ n v cover Items TDB TDB 7 Minimum cost 8 9 array 1 N r I c o n s t r n t sum item_c n t n Items n t Cost 10 solve s t s f y enumerate item_c Cost Listing 9 High utility itemset mining n t NrT var set 1 N r I Items n t N r I 1 2 Utility data 3 4 array 1 N r I array 1 NrT 1 N r I n t I t e m P r c e n t U t l n t UTDB 5 6 7 8 9 c o n s t r n t sum t n cover Items UTDB sum n Items I t e m P r c e UTDB t U t l solve s t s f y enumerate Lines 89 represent common costbased constraint 13 constrains itemset cost Cost item_cost Cost usersupplied array costs cost threshold We use expressive power MiniZinc deﬁne constraints This includes constraints propositional logic example expressing dependencies groups itemstransactions inclusionexclusion relations elements Two settings involving external data studied section 32 Itemset mining additional numeric data Additional data available different sources quantities products items purchases transactions measurements elements items physical experiments transactions probabilistic knowledge item transaction pairs We look settings high utility itemset mining probabilistic itemset mining uncertain data In high utility mining 19 goal search itemsets total utility certain threshold Assumed given external utility e individual item example price utility matrix U contains transaction local utility item transaction example quantity item transaction The total utility itemset cid2 cid2 Listing 9 shows MiningZinc model corresponding task Lines 3 4 declare data lines 5 8 constrain utility It uses cover function numeric data Listing 5 checks covered item 0 actual data compute utility iI eiU t tφDI Another setting probabilistic itemset mining uncertain data 20 Listing 10 shows MiningZinc model task It similar problem exception data real valued including numeric cover function constraint lines 3 6 sumproduct 33 Multiple databases When dealing multirelational data consider relation separate transaction database We distin guish different cases relations star schema example items related different transaction databases traditional multirelational setting identify chains relations When dealing multiple transaction databases set items impose constraints databases separately For example searching itemset minimum frequency α database maximum frequency β A advanced setting discriminative itemset mining This task given databases ﬁnding itemset appearance data strongly correlated databases Consider example transaction 14 1 2 3 4 5 6 7 1 2 3 4 5 6 T Guns et al Artiﬁcial Intelligence 244 2017 629 Listing 10 Itemset mining uncertain data n t N r I array 1 NrT 1 N r I n t NrT var set 1 N r I Items f l o t ProbTDB f l o t Expected c o n s t r n t sum t n cover Items ProbTDB p r o d u c t ProbTDB t Expected n Items solve s t s f y enumerate Listing 11 Discriminative itemset mining accuracy n t N r I array n t set 1 N r I D_fraud array n t set 1 N r I D_ok var set 1 N r I c o n s t r n t Items c o v e r _ n v Items cover Items D_fraud D_fraud var 7 Optimization function 8 9 10 solve maximize Score n t Score card cover Items D_fraud card cover Items D_ok Listing 12 Multirelational itemset mining authors papers topics 1 2 3 4 5 6 7 8 n t NrP n t NrA array 1 NrA set 1 NrP AuthorPapers array 1 NrP set 1 NrT PaperTopics n t Alpha n t NrT var set 1 NrT Topics var set 1 NrP Papers cover Topics PaperTopics var set 1 NrA Authors c o n s t r n t f o r l l n 1 NrA Authors e x s t s p n Papers AuthorPapers p 9 10 c o n s t r n t card Authors Alpha solve s t s f y enumerate database fraudulent transactions nonfraudulent ones task ﬁnding itemsets correlating fraudu lent behavior Many different measures deﬁne good correlation This led tasks known discriminative itemset mining correlated itemset mining subgroup discovery contrast set mining 21 A discriminative itemset mining task shown Listing 11 This optimization problem score optimize deﬁned line 8 One constrain score instead optimizing add threshold score enumerate patterns score better The score p n p number positive transactions covered n number negative ones Optimizing score line 10 corresponds optimizing accuracy measure 22 details An additional constraint ensures patterns closed transactions fraudulent transactions closed itemset maximizes score Note reuse cover cover_inv functions Listing 8 Multirelational itemset mining consists extraction patterns multiple relations Consider database authors writing papers certain topics A multirelational mining task example popular related topics topics α authors written paper covering topics Listing 12 lists MiningZinc model problem Line 5 constrains set papers covering topics line 8 states authors paper Note existential relation line 8 changed variations setting example requiring authors β papers Authorsa sump Papers AuthorPapersp Beta Other constraintbased multirelational mining tasks 23 expressed T Guns et al Artiﬁcial Intelligence 244 2017 629 15 Listing 13 Concept learning 1 2 3 4 n t K n t N r I array n t set 1 N r I D_fraud array n t set 1 N r I D_ok array 1 K var set 1 N r I Items 5 closed D_fraud 6 7 c o n s t r n t f o r l l k n 1 K Items k c o v e r _ n v cover Items k D_fraud D_fraud n t Score total fraud total tok var 8 9 10 11 1 2 3 4 5 card union k n 1 K card union k n 1 K cover Items k D_fraud cover Items k D_ok solve maximize Score Listing 14 Lex_less array sets lex_less arrays MiniZinc global constraint predicate l e x _ l e s s array n t var set n t S f o r l l k n 1 l e n g t h S1 set elems union ub S k ub S k 1 n l e t l e x _ l e s s n S k n S k 1 n elems n elems Listing 15 High utility discriminative itemset mining n t NrNeg var set 1 N r I Items array 1 NrPos set 1 N r I Pos array 1 NrNeg set 1 N r I Neg n t N r I n t NrPos 1 2 Transaction data 3 4 5 Utility data positives 6 7 8 array 1 N r I n t M n U t l array 1 NrPos 1 N r I n t n t MinAcc I t e m P r c e n t UPos 9 10 11 12 13 14 15 c o n s t r n t sum t n cover Items UTDB sum n Items I t e m P r c e UTDB t M n U t l c o n s t r n t c o n s t r n t card cover Items Pos Items c o v e r _ n v cover Items Pos Pos card cover Items Neg MinAcc 16 solve s t s f y enumerate 34 Mining pattern sets Instead mining individual patterns formulate mining problems set patterns For example Listing 13 shows speciﬁcation concept learning kpattern set mining setting 24 The goal ﬁnd k patterns best fraudulent transactions covering transactions It similar discriminative itemset mining setting difference assumed multiple patterns needed ﬁnd good descriptions fraudulent transactions Other problems studied context kpattern set mining nary pattern mining 2425 formulated similar highlevel way Pattern sets symmetric solutions 24 slow search Symmetry breaking constraints added overcome example lexicographically ordering itemsets MiniZinc offers predicates lexico graphic constraints arrays array sets Using helper function Listing 14 add symmetry breaking constraint concept learning problem Listing 13 follows constraint lex_lessItems 16 T Guns et al Artiﬁcial Intelligence 244 2017 629 35 Combinations Fig 1 Overview MiningZinc toolchain Using MiningZinc formulate complex models Listing 15 shows example model combine discriminative pattern mining Listing 11 highutility mining Listing 9 We use model ﬁnd itemsets high utility discriminate positive negative transactions To knowledge combined problem studied specialized algorithm exists In Section 5 strategies exist solve model MiningZinc 4 MiningZinc execution mechanism The MiniZinc language previous section declarative solverindependent impose kind algorithm solving technique We discuss solving MiningZinc Fig 1 shows overview overall execution mechanism The starting point process MiningZinc model When highlevel language like MiniZinc possible model problem equivalent ways differing syntactic constructs The ﬁrst step analysis process transform model mediumlevel FlatZinc program Section 23 use normalized form analysis This FlatZinc program suitable solving uses highlevel MiningZinc predicates functions Given set algorithms rewrite rules FlatZinc program transformed possible sequences algorithms solve original problem sequence algorithms called execution plan Multiple execution plans generated ranked simple heuristic ranking scheme When plan chosen user automatic selection highest ranked plan algorithms plan executed obtain required output We components turn 41 Normalization The purpose converting highlevel FlatZinc enable reasoning set constraints simplify detection equivalent overlapping formulations FlatZinc ﬂattened normalized representation MiniZinc instance model data A MiniZinc instance transformed FlatZinc program operations loop unrolling introduction auxiliary variables global scope simplifying constraints removing constants rewriting constraints terms simple builtins possible It performs common subexpression elimination global scope identical calls expression present eliminated For example Listing 15 contains twice function coverItemsPos In FlatZinc code X coverItemsPos remain variable X shared expressions contained More details procedure described 7 Finally FlatZinc supports annotations example enumerate Listing 4 During ﬂattening process anno tation written MiniZinc passed FlatZinc Furthermore variable mentioned output statement receives output_var annotation We use concept output variables versus nonoutput variables later For purpose normalization use special version MiningZinc library deﬁnes MiningZinc pred icates functions builtins giving deﬁnition terms simpler expressions The resulting FlatZinc suitable solving solver supports builtins natively analyzed easily original MiniZinc It compact FlatZinc generated CP solver cases constraints need unrolled row dataset An important observation FlatZinc program seen CSP V D C possible form straints C limited More speciﬁcally constraints form p X1 Xn p P predicate symbol Xi variable CSP constant Examples include int_leY 1 set_subsetS 2 4 notational convenience examples represent constraints inﬁx notation Y 1 S 2 4 X f X1 Xn f F function symbol Xi variable CSP constant Examples Y set_cardS T coverI D set_cardS function calculates cardinality set S coverI D deﬁned Section 2 We refer constraints functional deﬁnitions T Guns et al Artiﬁcial Intelligence 244 2017 629 17 Consequently FlatZinc functions occur righthand equality constraint Function predicate symbols builtin symbols userdeﬁned Example 3 Consider problem ﬁnding frequent itemsets given dataset minimum frequency 20 containing 3 items Listing 2 constraint cardItems 3 We represent datasets indicate constant After automatic ﬂattening process FlatZinc model obtained following leaving domain implicitly deﬁned V Items T SI ST C T coverItems ST cardT SI cardItems ST 20 SI 3 annotations Items output_var This normalized model needs transformed execution plan 42 Generation plans An execution plan speciﬁes parts MiningZinc model handled algorithms solving techniques Concretely execution plan sequence algorithms handle constraints present model produce required output For example possible execution plan model Example 3 run LCM algorithm 26 frequent itemset mining generate itemsets given frequency use general purpose CP solver Gecode ﬁlter solutions allowing itemsets elements This section ﬁrst different algorithms MiningZinc rewrite rules construct plans ﬁnally plans generated rules 421 Algorithms We distinguish types algorithms specialized algorithms capable solving speciﬁc combinations constraints inputoutput vari ables CP systems capable solving arbitrary combinations constraints expressed FlatZinc In execution plan execution algorithm represented atom consisting predicate applied variables constants Specialized algorithms These represented predicates ﬁxed arity Such predicates declared mode statements kind p1 V 1 n V n p algorithm indicates mode parameter V parameter variable identiﬁer The interpretation modes follows input mode indicates algorithm evaluating predicate run parameter grounded value known output mode indicates algorithm evaluating predicate produce groundings pa rameter Example 4 The LCM algorithm frequent itemset mining characterized mode statement LCMF D I F represents support threshold D dataset I itemset The predicate LCMF D I true itemset I frequent dataset D support threshold F A speciﬁc atom expressed predicate LCM10 Items In MiningZinc framework specialized algorithm registered following information predicate deﬁnition p1 V 1 n V n set FlatZinc constraints V 1 V n specify problem algorithm solve multiple sets given case multiple equivalent formulations binary executable algorithm 18 T Guns et al Artiﬁcial Intelligence 244 2017 629 way map input parameters predicate FlatZinc command line arguments input ﬁles algorithm way map output algorithm output parameters FlatZinc Example 5 Version 5 LCM algorithm implements frequent closed itemset mining problems additional support number constraints constraints size itemset size support minimum maximum We consider combination constraints different algorithm For example instance LCMv5 closed itemset mining additional constraint minimum size itemset speciﬁed follows predicate lcm5_closed_minsize TDB MinFreq MinSize Items constraints C coverItemsTDB S cardC int_leMinFreq S iC cover_inv C TDB set_eqItemsiC Sz cardItems int_leMinSize Sz command pathtolcm5 C l MinSize infileTDB MinFreq outfileItems conversion infile outfile convert FIMI format FZN format In practice provide syntax describing multiple instances algorithm succinct way CP systems In contrast specialized algorithms CP systems operate arbitrary number variables straints A predicate representing CP arbitrary number variables parameter furthermore assume parameterized set constraints Example 6 A predicate GecodeC V 1 V n represents Gecode CP V 1 V n variables occur ring constraint set C parameterized A speciﬁc atom expressed predicate GecodeC I T ST C T coverI D ST cardT ST 20 predicate true combinations I T ST given constraints true A CP capable ﬁnding groundings variables grounded mode restrictions parameters Typically variables occurring constraints grounded requiring CP search In case variables grounded calling CP check constraints true In MiningZinc framework CP registered following information predicate Gecode set FlatZinc constraints supports including global constraints binary executable CP optionally set variables translated Boolean encoding executing CP Section 423 Execution plans With types algorithm predicates introduced deﬁne execution plan se quence atoms algorithm predicates Sequences mode conform algorithm input variables instantiated called Example 7 For model Example 3 following valid execution plan uses LCM Gecode predicates Examples 4 6 LCM10 I GecodeSIcardISI3I The main challenge transform initial FlatZinc program execution plan The rewrite rules described section 422 Rewrite rules We use rewriting transform FlatZinc program execution plan Speciﬁcally state rewrite process tuple T Guns et al Artiﬁcial Intelligence 244 2017 629 19 L C L execution plan C set constraints annotations The initial state rewrite process C C set FlatZinc constraints set indicates initially execution plan ﬁnal state rewrite process L L represents valid execution plan initial set constraints C set indicates constraints evaluated execution plan modulo optional annotations Rewrite rules transform states states exhaustive search possible rewrites produce possible execution plans A key concept rewrite rules substitutions Formally substitution θ V 1t1 function maps variables variables constants If C expression Cθ denote expression variables V replaced corresponding values ti according θ If substitution θ holds Cθ C set constraints C said θ subsume set constraints C In exposition predicates variables untyped ease presentation FlatZinc typed language practice allow variables type mapped cid7 cid7 We deﬁne types rewrite rules rules adding redundant constraints executing specialized algorithms executing CP systems Let C1 C2 sets constraints variables let C1 C2 hold C1 Rules redundant constraints entails C2 Since C2 true C1 set constraints C2 added redundant constraints C C1 Taking substitutions account following rewrite rule IF THEN C1θ subsumes set constraints C L C cid12 L C C2θ Example 8 Past work showed execution frequent itemset mining task eﬃcient CP sys tems lookahead constraint added Let C2 minfreq_redundantI D V represent lookahead constraint Section 24 This constraint set entailed set constraints C1 A coverI D B card A V B Then model Example 3 depicted C M following rewrite C M cid12 C M minfreq_redundancyI 20 Redundant constraints registered following information set constraints C1 function takes input substitution θ produces constraint set C2 variables θ output Rules specialized algorithms Recall specialized algorithms registered predicate deﬁnition p1 V 1 n V n set constraints C deﬁne problem solved algorithm Note variables C need parameter predicate auxiliary variables Let L C M state rewriting execution plan The key idea set constraints C algorithm subsumes given set constraints C M wish append predicate p execution plan L More formally L current plan C subsumes C M substitution θ add pV 1θ V nθ L Example 9 If model constraints T coverI ST cardT SI cardI ST 20 SI 3 current cid7 subsumes model execution plan LCMs constraint set T cid7 cid14 I D substitution T cid7 cardT cid7 cid14 20 Hence add LCM20 I execution plan cid7 cid14 V cid7 coverI cid7 cid14 T I cid7 ST cid7 ST cid7 V cid7 D Removing subsumed constraints C M The important step remove subsumed constraints possible C M avoid unnecessarily recomputed veriﬁed Indeed running algorithm ensure constraints satisﬁed unfortunately remove subsumed constraints Example 10 If model constraints T coverI ST cardT ST 20 ST 40 use LCM algorithm solve model remove constraints ST cardT T coverI D subsumed reason constraint ST 40 subsumed requires ST value output LCM algorithm This problem caused auxiliary variables occur constraint deﬁnition algorithm mode deﬁnition When Cθ set constraints subsumed algorithm set C M Cθ contains remaining constraints remaining constraints constraints rely functionally deﬁned variables 20 T Guns et al Artiﬁcial Intelligence 244 2017 629 mode deﬁnition algorithm remove constraints functional deﬁnition constraints necessary calculate variables More precisely assume given state L cid7 FlatZinc program constraints C output variables Voutput variables V output_var annotation Then let V Lcid7C cid7 set variables occurring C free variables later execution plan Let cid7 c C c functionally deﬁnes variable V Lcid7C cid7 function adds functional deﬁnitions F L The inclusion missing deﬁnitions trigger need include variables deﬁnitions missing C cid7 C deﬁnitions repeated application function yield ﬁxed point F Voutput occur L cid7 C L cid7 cid7 C cid7 C L cid7 C cid7 C cid7 cid7 This function deﬁne following rewrite rule IF THEN subsumes constraints C M mode declaration Cθ p1 V 1 n V n L pV 1θ V nθ substitution conform modes p L pV 1θ V nθ C M Cθ C M L C M cid12 F Continuing Example 10 functional deﬁnition constraints variables ST T removed The constraint ST 20 removed Examples specialized algorithms The following additional examples rewriting speciﬁc algorithms available MiningZinc Example 11 Let calcfreqI F D specialized algorithm calculates frequency F itemset I database D The constraint set corresponding algorithm T coverI D F cardT Assume fol lowing state LCM20 D I T coverI D F cardT F 40 substitution constraint set T coverI D F cardT subsumes model Furthermore variable F output algorithm calcfreqI F D variable T outside subsumed set constraints remove functional deﬁnition constraints Hence rewrite state LCM20 D I calcfreqI F D F 40 Example 12 Let maxsupI V D specialized algorithm determines frequency itemset I database D lower given threshold V algorithm checks constraint output The constraint set corresponding algorithm T coverI D F cardT F V Assume following state LCM20 D I T coverI D F cardT F 40 Then rewrite state LCM20 D I maxsupI 40 D solution LCM checked specialized maxsup algorithm Rules CP systems The ﬁnal rewrite rule registered CP systems We use following rewrite rule state L C IF THEN cp CP constraints C supported CP cp let V 1 V n variables occurring C L C cid12 L cpC V 1 V n Currently CP solve remaining constraints An alternative rule subset remaining constraints selected processing CP enable diverse combinations specialized algorithms CP systems However reasons simplicity lack practical need consider option Translating set variables Boolean variables MiningZinc models typically expressed set variables CP solvers support constraints set variables In previous work solvers support set variables usually eﬃcient Boolean encoding set variables constraints example constraining cardinality subset variable requires 2 constraints expressed sets 1 linear constraint Boolean encoding T Guns et al Artiﬁcial Intelligence 244 2017 629 21 Hence CP solvers provide transformation translates set variables arrays Boolean variables For potential value original set introduce Boolean variable represents value included set Constraints set variables translated accordingly replacing subset constraint implica tions pair corresponding Boolean variables This Boolean transformation directly FlatZinc representation transparently execution mechanism When registering CP MiningZinc framework indicate set variables translated Booleans execution CP For systems support set variables typically register predicates Boolean transformation ﬂag 423 Generation plans So far focused individual rewrite rules rewrite set constraints C possibly add step execution plan L We different rewrite rules combined create complete execution plans As mentioned sequences execution steps mode conform More speciﬁcally parameter atom following needs hold input conform parameter input mode ground instantiated variable output mode earlier atom sequence output conform parameter output mode instantiated variable output mode earlier atom sequence The search execution plans operates depthﬁrst manner In node search tree conditions rewrite rules checked including mode conformity Rules substitutions identical rule applied parents node ignored The search branches applicable rules This continues rules applicable If point set constraints C state L C modulo annotations L valid execution plan In practice rules redundant constraint add constraints framework restrict considered current plan L Furthermore rules specialized algorithms remove constraints rule applicable node search tree considered descendant nodes One observe presence rewrite rules redundant constraints process guaranteed termi nate sets rewrite rules One use bound depth search Currently work simpliﬁed assumption rewrite rules provided user lead inﬁnite rewrite process This sumption holds examples article 43 Ranking plans In previous step possible execution plans enumerated leaving choice execution plan choose open user In relational databases query optimizer attempts select eﬃcient execution plan query plans Typically cost number tuples produced calculated step plan plan overall smallest cost selected 27 In MiningZinc complicated dealing combinatorial problems computing esti mating number solutions hard problem Furthermore different algorithms different strengths weaknesses leading varying runtimes depending size properties input data hand This studied algorithm selection portfolio literature 28 In MiningZinc complicated having chains algorithms A MiningZinc formulation lead new execution plans observed complicating approach plan treated metaalgorithm learn performance Additionally different chaining algorithms lead differences runtime depending data generated previous algorithms Nevertheless input algorithm chain known predecessor algorithms run The purpose paper solve hard problem However MiningZinc built idea specialized algorithms eﬃcient generic systems Hence discriminate types execution plans 1 Specialized plans plans consisting specialized algorithms 2 Hybrid plans plans consisting mix specialized generic CP systems 3 Generic plans plans consisting generic CP systems We propose heuristic approach ranking assumes specialized plans preferred hybrid ones hybrid ones preferred generic plans Once plans categorized groups rank plans group example provided 22 T Guns et al Artiﬁcial Intelligence 244 2017 629 For specialized plans adopt simple heuristic plans fewer algorithms preferred plans The idea fewer algorithms probably constraints pushed respective algorithms Ties ranking typically caused having multiple algorithms solve problem frequent itemset mining One use algorithm selection approach choosing plan best ﬁrst algorithm chain We investigate instead assume global ordering algorithms order registered break ties based order Hybrid plans ﬁrst ordered number constraints handled generic systems fewer better number algorithms fewer better ﬁnally break ties global order algorithms Choosing plans fewer CP constraints ﬁrst prefer solutions specialized algorithms solve larger problem penalizes use redundant constraints unfortunately Note assume global order CP systems example based latest MiniZinc competition results Finally generic plans consist CP solves entire problem Differences category come use different redundant constraints different CP systems As involves CP apply algorithm selection techniques As ranking generic plans important case specialized hybrid plans use simple ranking ﬁrst based number constraints naive assumption redundant constraints better global order CP systems Example 13 Assume wish solve earlier model T coverI D S cardT 20 S S 40 available algorithms LCM FPGrowth specialized itemset mining algorithms maxsup frequency specialized algorithms Gecode generic CP order Then ranked execution plans Specialized LCM20 D I maxsupI 40 D FPGrowth20 D I maxsupI 40 D Hybrid LCM20 D I frequencyI S D GecodeS40S FPGrowth20 D I frequencyI S D GecodeS40S LCM20 D I GecodeT coverIDScardT S40I S T FPGrowth20 D I GecodeT coverIDScardT S40I S T Generic GecodeT coverIDScardT 20SS40minfreq_redundantID20I S T GecodeT coverIDScardT 20SS40I S T In assume LCM FPGrowth aware redundant constraint minfreq_redundant If variants specialized hybrid strategies redundant constraints ranked nonredundant equivalent constraints CP Note proposed heuristic way ordering strategies based common sense principles In experiments investigate difference runtime different strategies 44 Execution plan One plan executed similar way Prolog query The execution proceeds lefttoright If variables ground algorithm simply checks current grounding assignment variables satisﬁes inherent straints algorithm outputs grounding Otherwise algorithm ﬁnd groundings nongrounded variables Each grounding passed turn algorithm The evaluation backtracks groundings predicates evaluated Note executing specialized algorithm accompanying mapping ground FlatZinc variables input ﬁles command line arguments applied After execution mapping output algorithm previously nonground FlatZinc variables performed Example 14 In execution plan Example 7 LCM10 I GecodeSIcardISI3I database transformed LCMs ﬁle format minimum frequency threshold 10 given argument LCM executable LCM searches groundings I variable frequent itemsets Each itemset processed Gecode variable I grounded simply check constraints SI cardI SI 3 giving groundings I speciﬁc itemset All assignments I variable satisfy constraints constitute output execution plan T Guns et al Artiﬁcial Intelligence 244 2017 629 23 Table 1 Left dataset statistics Tr nr transactions It nr items D density Right time taken MiningZinc analysis 3 different tasks normal ization FlatZincexecution plan generation seconds Tr 101 336 630 1000 3247 8124 49 046 88 162 100 000 100 000 It 36 31 50 110 86 112 2088 16 470 870 942 D 44 48 32 35 50 19 24 01 12 42 Freq 00520007 00690007 00980008 02020012 05780024 07800032 134890546 51320235 56920262 162850746 FrClo 00520009 00690009 00910010 01950014 05780027 08000036 138950563 52900243 58210271 167070763 FrCloMincost 00940010 01090011 01310012 02290015 05940027 07990035 134590541 50860233 56330259 160570723 Dataset zoo1 primarytumor soybean germancredit hypothyroid mushroom pumsb_star retail T10I4D100K T40I10D100K 5 Experiments In experiments use ability MiningZinc enumerate execution strategies compare different strategies MiningZinc supports We focus following main questions 1 computational overhead MiningZincs model analysis execution plan generation 2 strengths weaknesses different solving strategies The MiningZinc framework implemented Python key components libminizinc2 MiniZinc FlatZinc conversion written C Our implementation supports multiple algorithms executing parts model All CP solvers corresponding rewrite rule specialized algorithms rewrite rule task support We use rewrite rule redundant constraints case minimum frequency constraint The constraint solvers Gecode 29 Opturions CPX 30 Google ortools 31 g12 solvers MiniZinc 16 distribution 6 We provide custom version Gecode fast checking given solutions FlatZinc model We use solver default solver highest ranked solver case generic CP needed merely constraint checking The constraintbased mining algorithms LCM version 2 5 26 Christian Borgelts implementations Apriori v573 Eclat v374 FPGrowth v448 32 stateofthe art eﬃcient constraintbased mining In experiments HUIMine algorithm 33 high utility mining SPMF framework 34 For correlated itemset mining corrmine algorithm 35 Inputoutput mapping algorithms written Python specialized checking algorithms like calcfreq maxsup The datasets UCI Machine Learning repository 363 FIMI repository 37 Experiments executed Linux computers quadcore Intel i7 processors Unless stated timeout 900 seconds limit memory usage 6 Gb The MiningZinc datasets downloaded http dtai cs kuleuven CP4IM miningzinc version described work available acceptance paper 51 Computing execution strategies An important MiningZinc consists analyzing given model determining available execution plans In ﬁrst experiment focus execution analyze time needed process Table 1 shows increasingly large datasets time 1 normalizing model data intermediate FlatZ representation 2 generating ranking available execution plans The models combinations constraints shown Listing 2 FreqFr Listing 8 CloMinCost Solving times shown depend threshold supplied typically range seconds hours following sections The table shows normalization quick small datasets seconds large datasets In fact time spent reading data libminizinc tool uses standard MiniZinc parser read data verbose text ﬁles optimized parsing large matrices data This sidestepped loading data directly database query annotation The actual plan generation time low increase size data complexity task The key subsumption check rewrite rules case complex constraint networks large datasets bit time 52 CP solver performance MiningZinc ability automatically add redundant constraints transform set variables Boolean variables From earlier work 8 know reformulations improve runtime behavior solvers 2 http wwwminizinc org 2 0 3 Downloaded http dtai cs kuleuven CP4IM datasets 24 T Guns et al Artiﬁcial Intelligence 244 2017 629 Table 2 Frequent itemset mining runtime seconds averaged different thresholds red indicates redundant constraints added Lowest average runtime solver bold Gecode set 265 214 332 9285 58067 38688 52358 56866 75583 setred 402 1161 1348 22076 30830 44616 58250 59544 75756 bool 204 130 234 21653 60441 38557 44638 48294 67409 boolred 201 161 224 21136 8152 37607 31030 42574 58025 CPX set 058 265 416 11085 4642 41524 38435 54458 56578 setred 320 3320 3940 24137 23937 57333 58766 69337 76122 bool 308 966 2033 21618 25888 47814 42215 55637 64244 ortools boolred bool boolred 462 648 728 22201 25902 40242 47199 56127 73572 189 107 205 21125 25727 38110 40128 45669 64324 155 157 201 20522 9031 37499 36682 42864 58540 soybean primarytumor vote lymph mushroom hepatitis germancredit heartcleveland australiancredit Table 3 Closed frequent itemset mining runtime seconds averaged different thresholds red indicates redundant constraints added Lowest average runtime solver bold Gecode set 062 186 285 190 17792 7858 27361 36457 48928 setred 154 915 1167 1168 13842 31216 44312 46467 61058 bool 236 320 567 450 43267 11829 33236 38053 50954 boolred 225 331 550 359 12703 10623 26093 29325 42279 CPX set 054 194 342 531 2182 38487 35388 42742 55105 setred 192 2292 3067 7016 5920 55934 56418 59948 73846 bool 406 897 2302 816 27364 40583 44607 55628 61800 ortools boolred bool boolred 398 775 1073 763 16814 24712 41582 41023 57933 216 327 576 355 11187 9759 29100 31558 44450 240 369 597 386 13579 12955 31255 31750 45561 soybean primarytumor vote lymph mushroom hepatitis germancredit heartcleveland australiancredit The solverindependence MiningZinc allows easy comparison different solvers reformulations We com pare different reformulations stateoftheart CP solvers won medals 2013 MiniZinc challenge Gecode Opturions CPX Googles ortools The comparison range datasets standard mining tasks frequent itemset mining closed itemset mining Ortools support constraints set variables requires set Boolean transformation Table 2 shows average runtimes different reformulations One immediately type reformulation use depend solver Gecode ortools Boolean variables redundant constraints yields lower average runtimes CPX reformulation fastest CPX uses lazy clause generation technique includes lazy transformation set Boolean variables Looking difference adding adding redundant constraints case set variables adding constraints slows process The redundant constraints added compute subset itemset transaction requires time auxiliary set variable created This overhead overshadow potential gain propagation This case Boolean transformation subset variables need created instead slice Boolean array representing itemset directly Table 3 shows results closed itemset mining Interestingly closed itemset mining ortools consistently performs faster redundant constraints Gecode performs faster larger datasets As known constraint programming reformulation adding redundant constraints beneﬁcial depending problem instance hand This depend solver observed number typical mining problems These experiments suggest potential algorithm selection techniques help user choosing best generic solver problem In section compare different solvers specialized mining algorithms 53 Standard tasks On wellstudied data mining tasks expect specialized mining algorithms eﬃcient generic CP solvers Indeed case frequent closed itemset mining Fig 2 shows number representative datasets results Gecode ortools CPX compared mining algo rithms Apriori Eclat LCMv2 One observe gap runtime CP solvers mining algorithms Among solvers CPX faster high threshold values runtime grows somewhat quicker solvers lower values The miners highly optimized little difference runtime noticed T Guns et al Artiﬁcial Intelligence 244 2017 629 25 Fig 2 Comparison single algorithm strategies frequent itemset mining Fig 3 Comparison single algorithm strategies closed frequent itemset mining Fig 3 plots comparison task closed frequent itemset mining Again gap solvers miners observed CPXs faster growth lower thresholds Note traditional Apriori algorithm performs gradually worse depthﬁrst Eclat LCM algorithms certain datasets While MiningZinc convenient tool perform comparisons algorithms novelty lies ability combine different algorithms automatic way This experimentally investigated sections 54 Variations standard tasks In previous experiments compared behavior different execution plans consisted single stage Now focus execution plans consist multiple stages First address problem ﬁnding closed itemsets satisfy minimum size constraint size itemset Fig 4 shows comparison 5 approaches solve problem 1 Using CP solver Gecode redundant constraints Boolean encoding 2 Using specialized algorithm LCMv2 followed Gecodebased checking CP checks constraints model 3 Using specialized algorithm LCMv2 followed Gecodebased checking CP checks constraints checked ic size constraint 4 Using specialized algorithm LCMv2 followed specialized algorithm postprocessing set cardinality straints 5 Using specialized algorithm Eclat capable solving complete problem Across datasets observe following trends 26 T Guns et al Artiﬁcial Intelligence 244 2017 629 Fig 4 Comparison hybrid solve strategies closed frequent itemset mining size constraint size 4 Fig 5 Comparison runtimes different execution plans selection representative datasets Unsurprisingly specialized algorithm usually fastest followed closely specialized postprocessor The difference negligible cases cases specialized postprocessor faster In cases specialized algorithm followed generic CP checker faster pure CP approach especially satisﬁed constraints removed We experimented larger datasets mentioned instance accidents dataset available FIMI repository4 For datasets pure CP approach work complexity ﬂattening model data postprocessing based approaches able solve problem Hence large datasets CPbased approach possible MiningZinc continue advantage generic CP technology postprocessing step case subset constraints need checking 55 Combinations tasks In previous experiments focused mainly solving models specialized algorithm exists In order analyze power MiningZinc focus complex model involves solving wellstudied prob lems constraintbased mining highutility mining discriminative pattern mining This combined problem introduced Section 3 Listing 15 MiningZinc provides strategies solving model 1 use CP solver solve entire model 2 use specialized algorithm mining discriminative itemsets postprocess results CP solver 3 use specialized highutility mining algorithm postprocess result CP solver 4 http ﬁmi ua ac T Guns et al Artiﬁcial Intelligence 244 2017 629 27 For data selection UCI datasets augmented randomly generated utilities These util ities generated procedure described 33 item utilities generated lognormal distribution μ 0 σ 1 amounts generated uniformly 1 10 Results shown Fig 5 datasets In general single best strategy However strategy high utility mining algorithm typically performs worse This surprising 1 typically high utility itemsets discriminative ones 2 remaining constraints highutility strategy computationally harder verify include calculating cover set itemset case requires computing simple cost function Overall direct CP solver approach offers tradeoff strategies To conclude choosing best strategy solving complex models nontrivial task problem depends number solutions subproblem solving ﬁrst In settings restrictive algorithm ﬁrst case discriminative pattern mining best choice When little known expected output subproblems pure CP approach offer good tradeoff problem 6 Related work In data mining ﬁeld work related inductive databases 38 databases data patterns ﬁrstclass citizens queried Most inductive query languages 3940 extend SQL primitives pattern mining They restricted language expressing mining problems usually tied mining algorithm A advanced development mining views 41 provides lazy access patterns virtual table Standard SQL querying implementation materialize patterns table relevant query This achieved traditional mining algorithm Work constraint solving itemset mining 842 existing modeling languages However approaches lowlevel solver dependent The use higherlevel modeling languages primitives studied 43 24 tied particular solving technology MiningZinc hand enables use general constraint solvers highly optimized mining algorithms Best practices solverspeciﬁc studies use SAT solvers itemset mining 4445 ASP 46 incorporated MiningZinc This require adding rewrite rules speciﬁc encodings constraints SATASP Other pattern mining settings studied CP framework sequences wildcards 4749 sequential patterns 50 expressed MiningZinc The main difference deﬁnition cover relation add relations MiningZinc library reusable functions Recently range constraint solving techniques pattern mining developed incorporate order preference patterns topk preferred patterns 51 soft sky patterns 52 dominance relations 53 These typically employ form dynamic CSP solving solution solver new constraints added problem This requires ﬁnergrained reasoning investigated paper Other tasks clustering studied declarative constraintbased setting 5455 While different type data mining problem interesting incorporate MiningZinc We chose Zinc 6 basis work line design criteria Other modeling lan guages Essence 4 Comet 56 OPL 5 limited support building libraries userdeﬁned constraints andor tied speciﬁc solver We employ automatic model transformations MiniZinc FlatZinc transformation 7 set Boolean transformation Model transformations wellstudied topic constraint programming 5758 ModRef workshop series 59 Even Zinc family languages range transformations exist 60 ranging ones employ transformations solving technology like SAT 61 SMT 62 compilation executable machine code 63 By building MiniZinc framework able advantage future developments model transformations language Rewrite rules context constraint modeling Constraint Handling Rules 64 For Zinc ACD term rewrite introduced 63 specifying model transformations The difference approach distinction rewriting model adding redundant constraints specialized algorithms solve constraints In case certainly constraints need recomputed later Conjure 58 uses rewrite rules transform CP speciﬁcations ability add redundant symmetry breaking constraints perform algorithmmodel selection main difference rewrite process creates compositions different algorithms instead single CP model Finally use multiple algorithms solving constraint satisfaction problems studied constraint pro gramming notable hybridization generic constraint programming optimizationOR tech niques 65 Several approaches studied including incorporate algorithms CP solvers means global constraints incorporate information algorithm relaxations IP solvers constraints CP 66 add CP propagation inside integer programming 67 68 nice overview hybrid algorithms CP The idea chaining specialized algorithms enumeration problems automatic detection execution strategies best knowledge studied 28 T Guns et al Artiﬁcial Intelligence 244 2017 629 7 Conclusions MiningZinc aims bringing beneﬁts declarative modeling solving approach ﬁeld constraint programming ﬁeld data mining It extends modeling language MiniZinc library constraintbased itemset mining Furthermore execution mechanism designed support wide range general purpose specialized solvers allow different execution strategies Its implementation incorporates stateoftheart constraint programming data mining solvers specialized algorithms The resulting architecture ﬂexible extensible The experiments shown leads execution strategies stateoftheart performance known novel constraintbased mining tasks The beneﬁts modeling solving approach data mining manyfold First allows natural declarative modeling solving constraintbased data mining problems Second provides uniform interface data mining systems It expressive use constraint programming technology tackle wide spectrum constraintbased mining tasks This facilitate comparison different algorithms reuse software A potential beneﬁt modeling solving approach data mining possible emergence standard languages integrated systems data mining constraint programming Current limitations problem expressed integer set variables explicit data structures search assumed exhaustive greedyheuristic approximations Data mining raises new challenges constraint programming solutions offered modeling solving approach need competitive standard data mining algorithms This nontrivial data mining algo rithms highly optimized speciﬁc tasks large datasets generic constraint solvers struggle particular size problems The approach taken MiningZinc provide rewrite mechanism generating different execution plans involve different algorithms addressing task Experiments shown performance different ex ecution plans vary greatly invites automatic algorithm selection techniques However breadth problems formulated different execution plans produced sensitivity problems sin gle threshold raises challenges Other directions future work include investigation heuristic search strategies extension framework complex pattern types data mining tasks clustering 55 Acknowledgements This work supported Research Foundation Flanders means Postdoc grant European Com mission project Inductive Constraint Programming contract number FP7284715 KU Leuven GOA 13010 Declarative Modeling Languages Machine Learning Data Mining NICTA funded Australian Department Broadband Communications Digital Economy Australian Research Council References 1 L De Raedt S Nijssen B OSullivan P Van Hentenryck Constraint programming meets machine learning data mining Dagstuhl seminar 11201 2 J Han M Kamber Data Mining Concepts Techniques Morgan Kaufmann 2000 3 K Marriott N Nethercote R Rafeh PJ Stuckey M Garcia De La Banda M Wallace The design Zinc modelling language Constraints 13 3 4 A Frisch W Harvey C Jefferson BM Hernández I Miguel Essence constraint language specifying combinatorial problems Constraints 13 3 5 P Van Hentenryck The OPL Optimization Programming Language MIT Press 1999 6 N Nethercote PJ Stuckey R Becket S Brand GJ Duck G Tack MiniZinc standard CP modelling language CP LNCS vol 4741 Dagstuhl Rep 1 5 2011 6183 2008 229267 2008 268306 Springer 2007 pp 529543 7 P Stuckey G Tack MiniZinc functions Integration AI OR Techniques Constraint Programming Combinatorial Optimization Problems LNCS vol 7874 Springer Berlin Heidelberg 2013 pp 268283 8 T Guns S Nijssen L De Raedt Itemset mining constraint programming perspective Artif Intell 175 1213 2011 19511983 9 T Guns A Dries G Tack S Nijssen L De Raedt MiningZinc modeling language constraintbased mining Proceedings TwentyThird International Joint Conference Artiﬁcial Intelligence AAAI Press 2013 pp 13651372 10 R Agrawal T Imielinski AN Swami Mining association rules sets items large databases Proceedings 1993 ACM SIGMOD International Conference Management Data ACM Press 1993 pp 207216 11 CC Aggarwal J Han Eds Frequent Pattern Mining Springer 2014 12 H Mannila H Toivonen Levelwise search borders theories knowledge discovery Data Min Knowl Discov 1 3 1997 241258 13 F Bonchi C Lucchese Extending stateoftheart constraintbased pattern discovery Data Knowl Eng 60 2 2007 377399 14 JF Boulicaut B Jeudy Constraintbased data mining Data Mining Knowledge Discovery Handbook 2nd edition Springer 2010 pp 339354 15 F Rossi Pv Beek T Walsh Handbook Constraint Programming Foundations Artiﬁcial Intelligence Elsevier Science Inc New York NY USA 2006 16 PJ Stuckey R Becket J Fischer Philosophy MiniZinc challenge Constraints 15 3 2010 307316 17 J Vreeken M Leeuwen A Siebes Krimp mining itemsets compress Data Min Knowl Discov 23 1 2011 169214 18 N Pasquier Y Bastide R Taouil L Lakhal Discovering frequent closed itemsets association rules Database Theory LNCS vol 1540 Springer 19 R Chan Q Yang YD Shen Mining high utility itemsets ICDM 2003 pp 1926 20 CK Chui B Kao E Hung Mining frequent itemsets uncertain data Advances Knowledge Discovery Data Mining Proceedings 11th PaciﬁcAsia Conference PAKDD 2007 Nanjing China May 2225 2007 2007 pp 4758 1999 pp 398416 T Guns et al Artiﬁcial Intelligence 244 2017 629 29 21 PK Novak N Lavrac GI Webb Supervised descriptive rule discovery unifying survey contrast set emerging pattern subgroup mining J Mach Learn Res 10 2009 377403 22 J Fürnkranz PA Flach ROC n rule learning better understanding covering algorithms Mach Learn 58 1 2005 3977 23 S Nijssen A Jimenez T Guns Constraintbased pattern mining multirelational databases Proceedings 11th IEEE International Conference Data Mining Workshops IEEE 2011 pp 11201127 24 T Guns S Nijssen L De Raedt kPattern set mining constraints IEEE Trans Knowl Data Eng 25 2 2013 402418 25 M Khiari P Boizumault B Crémilleux A generic approach modeling mining nary patterns ISMIS 2011 pp 300305 26 T Uno M Kiyomi H Arimura LCM ver 2 eﬃcient mining algorithms frequentclosedmaximal itemsets FIMI CEUR Workshop Proceedings vol 126 CEURWSorg 2004 27 R Elmasri S Navathe Fundamentals Database Systems 6th edition AddisonWesley Publishing Company USA 2010 28 L Kotthoff Algorithm selection combinatorial search problems survey AI Mag 35 3 2014 4860 29 C Schulte G Tack M Lagerkvist Gecode generic constraint development environment wwwgecodeorg 2013 30 Opturion CPX httpwwwopturioncomcpxhtml 2014 31 N van Omme L Perron V Furnon ortools users manual Tech rep Google 2014 32 C Borgelt Frequent item set mining WIREs Data Min Knowl Discov 2 6 2012 437456 33 M Liu J Qu Mining high utility itemsets candidate generation Proceedings 21st ACM International Conference Information Knowledge Management ACM 2012 pp 5564 34 P FournierViger A Gomariz A Soltani T Gueniche Spmf opensource data mining platform httpwwwphilippefourniervigercomspmf 2013 35 S Nijssen T Guns L De Raedt Correlated itemset mining ROC space constraint programming approach KDD ACM 2009 pp 647656 36 A Frank A Asuncion UCI machine learning repository available httparchiveicsucieduml 2010 37 B Goethals MJ Zaki Advances frequent itemset mining implementations report FIMI03 SIGKDD Explorations vol 6 2004 pp 109117 38 H Mannila Inductive databases condensed representations data mining ILPS 1997 pp 2130 39 R Meo G Psaila S Ceri A new SQLlike operator mining association rules VLDB 1996 pp 122133 40 T Imielinski A Virmani MSQL query language database mining Data Min Knowl Discov 3 1999 373408 41 H Blockeel T Calders É Fromont B Goethals A Prado C Robardet An inductive database based virtual mining views Data Min Knowl 42 M Järvisalo Itemset mining challenge application answer set enumeration Logic Programming Nonmonotonic Reasoning LNCS 43 JP Métivier P Boizumault B Crémilleux M Khiari S Loudni A constraint language declarative pattern discovery ACM Symposium Applied Discov 24 1 2012 247287 vol 6645 Springer 2011 pp 304310 Computing ACM 2012 pp 119125 44 R Henriques I Lynce VM Manquinho On use SAT frequent itemsets CoRR arXiv12076253 45 E Coquery S Jabbour L Sais Y Salhi et al A SATbased approach discovering frequent closed maximal patterns sequence European Conference Artiﬁcial Intelligence ECAI vol 242 2012 pp 258263 46 M Järvisalo Itemset mining challenge application answer set enumeration Logic Programming Nonmonotonic Reasoning Proceedings 11th International Conference LPNMR 2011 Vancouver Canada May 1619 2011 2011 pp 304310 47 S Jabbour L Sais Y Salhi Boolean satisﬁability sequence mining Proceedings 22nd ACM International Conference Information 48 E Coquery S Jabbour L Sais A constraint programming approach enumerating motifs sequence IEEE 11th International Conference Knowledge Management ACM 2013 pp 649658 Data Mining Workshops ICDMW 2011 IEEE 2011 pp 10911097 49 A Kemmar W Ugarte S Loudni T Charnois Y Lebbah P Boizumault B Cremilleux Mining relevant sequence patterns CPbased framework IEEE 25th International Conference Tools Artiﬁcial Intelligence ICTAI 2013 IEEE Computer Society 2014 pp 552559 50 JP Métivier S Loudni T Charnois A constraint programming approach mining sequential patterns sequence database ECMLPKDD 2013 Workshop Languages Data Mining Machine Learning 2013 available arXiv13116907 51 S Jabbour L Sais Y Salhi The topk frequent closed itemset mining topk SAT problem Machine Learning Knowledge Discovery Databases Springer 2013 pp 403418 52 W Ugarte P Boizumault S Loudni B Crémilleux A Lepailleur Soft threshold constraints pattern mining Eleventh International Conference Integration Artiﬁcial Intelligence AI Operations Research OR Techniques Constraint Programming CPAIOR14 2014 53 B Negrevergne A Dries T Guns S Nijssen Dominance programming itemset mining 13th IEEE International Conference Data Mining IEEE 54 JP Métivier P Boizumault B Crémilleux M Khiari S Loudni Constrained clustering SAT Advances Intelligent Data Analysis XI Springer 55 KC Duong C Vrain et al A declarative framework constrained clustering ECMLPKDD Machine Learning Knowledge Discovery 56 P Van Hentenryck L Michel ConstraintBased Local Search MIT Press 2005 57 P Flener J Pearson M Ågren Introducing ESRA relational language modelling combinatorial problems LOPSTR LNCS vol 3018 Springer 58 A Frisch C Jefferson BM Hernández I Miguel The rules constraint modelling IJCAI Professional Book Center 2005 pp 109116 59 A Frisch et al International workshops constraint modelling reformulation httpwwwuserscsyorkacukfrischModRef 60 R Becket S Brand M Brown GJ Duck T Feydy J Fischer J Huang K Marriott N Nethercote J Puchinger R Rafeh PJ Stuckey G Wallace The roads leading Rome solving Zinc models solvers 2008 61 J Huang Universal Booleanization constraint models P Stuckey Ed Principles Practice Constraint Programming LNCS vol 5202 Springer Berlin Heidelberg 2008 pp 144158 62 M Boﬁll M Palahí J Suy M Villaret fzn2smt httpimaudgeduRecercalapfzn2smtindexhtml 2011 63 GJ Duck L De Koninck PJ Stuckey Cadmium implementation ACD term rewriting ICLP LNCS vol 5366 Springer 2008 pp 531545 64 T Frühwirth Constraint Handling Rules Cambridge University Press 2009 65 F Ajili M Wallace Hybrid problem solving eclipse M Milano Ed Constraint Integer Programming Operations ResearchComputer 66 F Focacci A Lodi M Milano Exploiting relaxations cp Constraint Integer Programming Operations ResearchComputer Science Interfaces Science Interfaces Series vol 27 Springer 2004 pp 169206 Series vol 27 Springer 2004 pp 137167 67 T Achterberg T Berthold T Koch K Wolter Constraint integer programming new approach integrate cp mip L Perron MA Trick Eds Integration AI OR Techniques Constraint Programming Combinatorial Optimization Problems LNCS vol 5015 Springer Berlin Heidelberg 2008 pp 620 68 M Wallace Hybrid algorithms constraint programming F Azevedo P Barahona F Fages F Rossi Eds Recent Advances Constraints LNCS vol 4651 Springer Berlin Heidelberg 2007 pp 132 Computer Society 2013 pp 557566 2012 pp 207218 Databases Springer 2013 pp 419434 2003 pp 214232