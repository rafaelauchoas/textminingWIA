Artificial Intelligence 246 (2017) 118–151Contents lists available at ScienceDirectArtificial Intelligencewww.elsevier.com/locate/artintLocalising iceberg inconsistenciesGlauber De Bona∗, Anthony HunterDepartment of Computer Science, University College London, WC1E 6BT, UKa r t i c l e i n f oa b s t r a c tArticle history:Received 3 August 2016Received in revised form 16 February 2017Accepted 19 February 2017Available online 28 February 2017Keywords:Propositional logicInconsistency managementInconsistency analysisInconsistency localisationIn artificial intelligence, it is important to handle and analyse inconsistency in knowledge bases. Inconsistent pieces of information suggest questions like “where is the inconsis-tency?” and “how severe is it?”. Inconsistency measures have been proposed to tackle the latter issue, but the former seems underdeveloped and is the focus of this paper. Minimal inconsistent sets have been the main tool to localise inconsistency, but we argue that they are like the exposed part of an iceberg, failing to capture contradictions hidden under the water. Using classical propositional logic, we develop methods to characterise when a formula is contributing to the inconsistency in a knowledge base and when a set of formulas can be regarded as a primitive conflict. To achieve this, we employ an abstract consequence operation to “look beneath the water level”, generalising the minimal inconsistent set concept and the related free formula notion. We apply the framework presented to the problem of measuring inconsistency in knowledge bases, putting forward relaxed forms for two debatable postulates for inconsistency measures. Finally, we discuss the computational complexity issues related to the introduced concepts.© 2017 Elsevier B.V. All rights reserved.1. IntroductionThe occurrence of inconsistencies in data and knowledge is an important issue for the application of knowledge repre-sentation and reasoning technologies that are based on standard logics. To develop ways of dealing with an inconsistent set of formulas, it is important to understand the inconsistency, analysing its properties. Given an inconsistent knowledge base (a set of formulas), natural questions that arise are “where is the inconsistency?” and “how severe is it?”. To answer the second question in a qualitative way, inconsistent knowledge bases were classified by the severity of their inconsistency [17]. Recently, to numerically quantify the extent to which a knowledge base is inconsistent, many inconsistency measures have been proposed [29,24,25,19,28,27,20,42,43]. In contrast, the first question appears quite underdeveloped, and it is the subject of the present work.Inconsistency localisation can mean different things. One may want for instance to spot which part of the language is “contaminated” by the inconsistency, looking for the logical variables involved in contradictions (see e.g. [22,25]). Alterna-tively, one might assign numeric inconsistency values for formulas in a knowledge base, indicating the extent to which they are involved in the inconsistency, according to a given definition (e.g. [23,25]). In this paper, we focus on localising the inconsistency in a knowledge base, showing how it unfolds among the formulas.1 That is, given an inconsistent knowledge * Corresponding author.E-mail addresses: glauberbona@gmail.com (G. De Bona), anthony.hunter@ucl.ac.uk (A. Hunter).1 Note that logically closed theories are equal to the whole logical language when inconsistent, hence we focus on (possibly non-closed) knowledge bases.http://dx.doi.org/10.1016/j.artint.2017.02.0050004-3702/© 2017 Elsevier B.V. All rights reserved.G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151119base, we are interested in discovering which subsets of formulas are contributing to the inconsistency, being its causes, and which formulas are not involved whatsoever.Fig. 1. Inconsistency as icebergs.1.1. MotivationWhen a knowledge base is inconsistent, it is not necessarily the case that its inconsistency is spread over all its formulas. For example, consider the set formed by the propositions: “Alice is a cat”, “Alice is not a cat” and “Bob is a dog”. Even though the whole set is inconsistent, intuition tends towards regarding the first two propositions as controversial and the third one as free of inconsistency somehow. To capture such intuition, minimal inconsistent sets (inconsistent sets whose all proper subsets are consistent) have been construed as the “purest form of inconsistency” [24,25]. Accordingly, a formula not contained in any minimal inconsistent set — a free formula — has been regarded as “uncontroversial”. As the first two propositions are already contradicting each other, the whole base is not a minimal inconsistent set. Furthermore, the third proposition contradicts neither the first nor the second proposition, hence “Bob is a dog” is indeed technically free, for not being in a minimal inconsistent set. Such a simple solution to the problem of localising the inconsistency probably is the reason for the lack of a systematic investigation of this issue. Nonetheless, the situation is more complex than might at first appear, since minimal inconsistent sets are alike the exposed part of the iceberg, ignoring all the inconsistency hidden under the water, as illustrated in Fig. 1.The recognition of these iceberg inconsistencies can find application in different areas where inconsistent pieces of information have to be dealt with. For instance, in software engineering, requirements extraction might reveal users’ expec-tations that cannot hold together, calling for a method for localising the conflicts. In data integration/fusion, as well as in belief merging, the proper identification of the sources of information, or the agents, that are conflicting each other allows one to narrow its attention to the focus of the problem, ignoring uncontroversial data/beliefs. In formal argumentation, in-consistency can be localised in order to show how a set of arguments is conflicting. Inconsistency localisation may also bring important clues in fraud investigation, for instance in the analysis of contradicting tax forms of a given taxpayer. In general, any decision making under inconsistent information might benefit from localising the inconsistency. For example, a physi-cian facing several different medical tests of a given patient with inconsistent results might need to choose which ones should be performed again. Example 1.1 brings a concrete situation where a decision can be influenced by inconsistency localisation.Example 1.1. The police is investigating a robbery on a jewellery shop that occurred on a weekday, during working hours. The investigators have taken testimony from all employees that were working on the day of the crime. The witnesses’ statements include the following:• salesperson: “I did not open the safe, and the criminals carried no guns!”• security chief: “Only the manager or the salesperson could have opened the safe, and the criminals carried guns.”• manager: “I did not open the safe.”As the police conceives the possibility of some of the employees having been complicit, they look for contradictions among the versions given. Inconsistent testimonies would imply some witnesses are lying, raising suspicions of complicity against them. The security chief and the salesperson are clearly contradicting each other, but is the manager involved in some contradiction? From the statements above, can one infer that it is possible that the manager is lying?To answer the questions raised in the example above, we need a tool to tell the “uncontroversial” from the “controversial” formulas in a knowledge base, since we are only interested in knowing whether the manager’s testimony is involved in the inconsistency, raising suspicion that he/she lied. This can be regarded as the relaxed form of the problem of localising inconsistency, whose solution is a partition of the inconsistent knowledge base into “controversial” and “uncontroversial” formulas. Free formulas are intended to encompass all and only “uncontroversial” formulas in a knowledge base, but we 120G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151shall argue that they are not suitable for all contexts. For instance, in the example above, the manager’s testimony is free (because it is not in any minimal inconsistent set), but it also seems to contradict the others in some way.A harder problem is identifying the atomic inconsistencies, or the primitive conflicts, in a knowledge base and can be illustrated by the following situation:Example 1.2. A university has hired a company to design a library management software to be used by all its members. In order to extract the design specifications, the company has collected requirements from the head of each department, which include:• Ecology: “The software should be open source, contributing to the whole academic community.”• Marketing: “It can’t be freely available, we need to keep our university edge in IT systems as a differential that attracts new students.”• Philosophy: “Both graduate and undergraduate students shall have the same rights in the system and it must be re-motely accessible.”• Economy: “Due to their different demands, graduate students need some privileges. If the system is to be remotely accessible, its software should not be open source, otherwise it could be vulnerable.”• Theology: “Department heads shall have no exclusive privileges.”• Arts: “I have no specific requirements.”The project manager, while reading such requirements, notes two contradictions: one between the heads of the Ecology and Marketing departments, on whether the software should be open source, and another between the heads of Philosophy and Economy departments, about the graduate and undergraduate students rights. The manager plans to arrange meetings with the department heads to discuss — and maybe relax — their requirements in order to enable them to be jointly realisable. Nevertheless, heads of departments are very busy, making it impossible to make a single meeting with all stakeholders. The manager then intends to schedule two separate meetings to try to resolve the contradictions: one involving the Ecology and Marketing heads, and the other with the Philosophy and Economy heads. Is this sufficient to reconcile all requirements? If each meeting succeeds in yielding relaxed requirements that are free from contradiction, will the whole set of requirements become compatible? If not, how should the meetings be arranged to achieve that?Within a set of controversial formulas, not every subset is essentially forming a conflict, thus inconsistency can be further analysed. This notion of conflict primitiveness, or inconsistency atomicity, is strongly linked to the procedure of restoring the consistency of — or consolidate — the knowledge base. The rationale behind it is that consolidating a knowl-edge base is resolving its primitive conflicts, or atomic inconsistencies. For these reasons, the atomic inconsistencies have been characterised via minimal inconsistent sets, as removing a formula from each consolidates the knowledge base. How-ever, withdrawing formulas may be an unsuitable way of achieving consistency in some situations. In Example 1.1, that approach would lead to the loss of valuable information, since a police investigation is not about having a consistent set of witnesses, but it is about fully analysing what they say. Therefore, minimal inconsistent sets may fail to spot all problematic sets of formulas in a base. For instance, while the only two minimal inconsistent subsets in Example 1.2 are the contradic-tions Ecology vs Marketing and Philosophy vs Economy, apparently Ecology, Philosophy and Economy requirements are also conflicting.1.2. Our approachIn a nutshell, the problem with Examples 1.1 and 1.2 is that parts of the propositions are conflicting, and this is not captured by minimal inconsistent sets. If a set of inconsistent formulas is like an iceberg, we need a way to look under the water, or “inside” the formulas. To achieve that, one can use an arbitrary consequence operation Cn(cid:2) that can return “parts” of the formulas. Another way of seeing the issue with the aforementioned examples is considering an underlying consolidation procedure. If the testimonies or the requirements are to be consolidated via discarding witnesses or depart-ments, minimal inconsistent sets indeed encode all causes of inconsistency, and free formulas are indeed “uncontroversial”. Nevertheless, other consolidation procedures, which allow for formula weakening instead of withdrawal, yield different characterisations of atomic inconsistency or primitive conflicts and of “uncontroversial” formulas. Once more, a generic consequence operation Cn(cid:2) can be used to formalise these consistency restoring procedures, as we shall see.Using a generic consequence operation Cn(cid:2) to look under the water level, we put forward methods for telling controver-sial from uncontroversial formulas and characterising the atomic inconsistencies in a knowledge base, revealing the hidden iceberg conflicts. We introduce the concepts of (cid:2)-innocuous formulas, (cid:2)-free formulas and (cid:2)-conflicts, all parameterised by an arbitrary consequence operation Cn(cid:2), in order to generalise the free formula and minimal inconsistent set notions.Apart from its intrinsic interest, localising inconsistency in knowledge bases can be useful in measuring inconsistency, to which we draw our attention in the second part of the paper. A straightforward method to assess the inconsistency in a knowledge base is to count its primitive conflicts. Thus, while presenting new primitive conflict characterisations, we are implicitly defining inconsistency measures, which will be explored.G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151121The devising of inconsistency measures has been influenced by a set of rationality postulates proposed by Hunter and Konieczny [25]. Among these basic requirements, the postulates of (Independence) and (Dominance) have been subject to debate [8,27,11]. The postulate of (Independence) is strongly related to minimal inconsistent sets as the primitive conflict characterisation [8,11], and such a link may be undesirable sometimes. As to (Dominance), it fails to hold for most syntactic inconsistency measures [27], including the one that simply counts minimal inconsistent sets. Applying the framework here developed, we propose parameterising (Independence) and (Dominance) by a consequence operation Cn(cid:2), yielding two spectra of properties that have the original postulates as the strongest particular cases.1.3. Organisation of the paperAfter fixing notation in Section 2, we show in Section 3 how minimal inconsistent sets and free formulas do no exhaust the problem of localising inconsistency in knowledge bases. In Section 4, we generalise the notion of free formula by considering an underlying consolidation procedure based on an abstract consequence operation. Section 5 explores the use of such consequence operation to generalise minimal inconsistent sets. Related works and how they interact with the concepts we introduce are discussed in Section 6. Section 7 presents applications of the framework we put forward to the problem of measuring inconsistency in knowledge bases, introducing new measures and flexibilising rationality postulates. Computational complexity issues related to the introduced concepts are discussed in Section 8.2. PreliminariesIn this work, we deal mainly with knowledge bases formed by propositions from classical logic. A propositional logic language is a set of formulas formed by atomic propositions combined with logical connectives, possibly with punctuation elements (parentheses). We assume a countably infinite set of symbols X = {x1, x2, x3, . . . } corresponding to atomic propo-sitions (atoms). Formulas are constructed inductively with connectives (¬, ∧, ∨, →), atomic propositions as usual, possibly with parentheses. The set of all these well-formed formulas is the propositional language over X , denoted by L. Addition-ally, (cid:6) denotes xi ∨ ¬xi for some xi ∈ Xn, and ⊥ denotes ¬(cid:6). A formula ϕ ∈ L is a literal if either ϕ = xi or ϕ = ¬xi for some xi ∈ X . For any ϕ ∈ L, Lit(ϕ) denotes the set of literals that are subformulas of ϕ. A clause is a formula in L formed by the disjunction of literals. A knowledge base (KB) is a set (cid:4) ⊆ L, and K is the set of all knowledge bases. For any (cid:4) ∈ K, Lit((cid:4)) denotes the set {Lit(ϕ)|ϕ ∈ (cid:4)}.A valuation (or truth assignment) is a function v : X → {0, 1}, where 1 and 0 denote TRUE and FALSE, respectively. Each valuation can be extended to the whole set L following the classical semantics of the connectives, as usual. A formula ϕ ∈ L is consistent (or satisfiable) if there is a valuation v such that v(ϕ) = 1, when we say v satisfies ϕ. A formula ϕ ∈ L is said to be valid if ¬ϕ is unsatisfiable. A knowledge base (cid:4) ∈ K is consistent (satisfiable) if there is a valuation satisfying all ϕ ∈ (cid:4). Deciding whether a knowledge base is satisfiable is the Boolean satisfiability problem (SAT). The classical consequence operation is the function Cn : K → K such that, for all (cid:4) ∈ K and ϕ ∈ L, ϕ ∈ Cn((cid:4)) iff (cid:4) ∪ {¬ϕ} is inconsistent.(cid:2)3. Minimal inconsistent sets and free formulasThe task of localising the inconsistency in a knowledge base can be split into two subtasks, in increasing order of difficulty:• discriminating the “controversial” formulas from the “uncontroversial” ones;• identifying the atomic (or primitive) conflicts.The first subproblem can indeed be seen as a relaxed version of the second. By identifying “controversial” formulas as those involved in some primitive conflicts (according to a given characterisation), finding the “uncontroversial” formulas in a knowledge base (solving the first subproblem) means finding, via set complement, the union of such conflicts. Meanwhile, solving the second subtask, identifying the primitive conflicts, leads to a solution to the first task by considering whether or not a formula is involved in a conflict. In fact, the commonest way of localising inconsistency tackles directly the hardest problem, through minimal inconsistent sets:Definition 3.1 (Minimal inconsistent set). A knowledge base (cid:4) ∈ K is a minimal inconsistent set (MIS) if (cid:4) is inconsistent and every set (cid:4)(cid:11) (cid:2) (cid:4) is consistent.When a minimal inconsistent set (cid:5) is a subset of a base (cid:4) ∈ K, we say (cid:5) is a minimal inconsistent subset of (cid:4) — a MIS of (cid:4). The set of all MISes in a base (cid:4) ∈ K is denoted by MIS((cid:4)). A derived definition intend to capture when a formula is “uncontroversial”, not causing the inconsistency in a base:Definition 3.2 (Free formula). A formula ϕ in a base (cid:4) ∈ K is said to be free in (cid:4) if, for all (cid:5) ∈ MIS((cid:4)), ϕ /∈ (cid:5).122G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151Fig. 2. Iceberg inconsistency in Example 3.3. Above the water line, we see the formulas in the knowledge base, while their consequences (including themselves) are under the water. As the salesperson suspends the belief on ¬g, the conflict below the water line becomes apparent.Despite the widespread employment of MISes and free formulas in order to localise inconsistency in a knowledge base, there are situations where such concepts are not suitable, failing to capture all causes of inconsistency and identifying as “uncontroversial” some “controversial” formulas.Example 3.3. Recall the situation of Example 1.1 and consider the following atomic propositions:• s stands for “the salesperson opened the safe”;• m stands for “the manager opened the safe”;• g stands for “the criminals carried guns”.Now we can formalise the testimonies:• salesperson: ϕ = ¬s ∧ ¬g;• security chief: ψ = (s ∨ m) ∧ g;• manager: θ = ¬m.This triple of propositions forms a knowledge base (cid:4) = {ϕ, ψ, θ}, which is clearly inconsistent, so some people must be lying. Suppose now the investigators want to localise the inconsistency, finding which propositions (and witnesses) are causing the contradiction. Using minimal inconsistent sets, one can note that MIS((cid:4)) = {{ϕ, ψ}}, and θ = ¬m is free. In other words, using MISes, we can conclude that the salesperson and the security chief are contradicting each other, but the manager’s testimony is not contributing to cause the inconsistency. Under this view, the police could focus on the salesperson and the security chief in the search for the complicit employees, for at least one is lying, ignoring the manager. Consequently, the police could take measures to guarantee the suspects do not run away, whilst doing nothing about the manager. However, note that the salesperson’s testimony implies ¬s, while the security chief’s entails s ∨ m. Taking ¬s and s ∨ m, one can conclude m, contradicting the manager’s statement. In practice, the investigators could meet the salesperson and the security chief in order to discuss whether or not the criminals carried guns. The security could point out that there were pistols held in their pockets and the salesperson could admit the possibility of not having noticed them. As the salesperson suspends such judgement, his/her testimony becomes ϕ(cid:11) = ¬s. The updated knowledge base encoding the information given by the witnesses would be (cid:4)(cid:11) = {ϕ(cid:11), ψ, θ}, which is a MIS (see Fig. 2). As a conclusion, ϕ(cid:11)and ψ could be true, with both the salesperson and the security chief having always been telling the truth about the safe opening, implying the manager was lying — but he/she could then be lying on a nice beach far away (pun intended).From the example above, we can conclude that, under some circumstances, the concept of free formula may misguide the localisation of “uncontroversial” pieces of information in a knowledge base. Dually, we could say that not every “con-troversial” formula takes part in a minimal inconsistent set. Even in cases where minimal inconsistent sets capture all controversial formulas, they might not properly identify which sets of formulas are actually conflicting, as the example below indicates.Example 3.4. Back to Example 1.2, let us formalise the system requirements suggested by the heads of the departments via the following atomic propositions:• o stands for “the software is open source”;• g stands for “graduate students have more rights than undergraduate students”;• r stands for “the system can be remotely accessed”;• h stands for “heads of departments have exclusive privileges”.G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151123Fig. 3. Iceberg inconsistency in Example 3.4. Above the water line, we see the formulas in the knowledge base, while their consequences (including themselves) are under the water. When the Economy head gives up his requirement on special rights for graduate students, the conflict under the water is revealed.Now we can formalise the requirements given by the heads:• Ecology: o;• Marketing: ¬o;• Philosophy: ¬g ∧ r;• Economy: g ∧ (r → ¬o);• Theology: ¬h;• Arts: (cid:6).The set of these six propositions forms the knowledge base (cid:4) = {o, ¬o, ¬g ∧ r, g ∧ (r → ¬o), ¬h, (cid:6)} in K. The only minimal inconsistent sets in (cid:4) are (cid:5) = {o, ¬o} and (cid:8) = {¬g ∧ r, g ∧ (r → ¬o)}, thus ¬h and (cid:6) are the only free formulas in (cid:4). Using MISes to identify the conflicting requirements, it seems that the project manager could safely schedule a meeting between Ecology and Marketing heads and another meeting with Philosophy and Economy heads to solve the contradictions, reconciling the requirements. Imagine these meetings happen and consider the following scenario. The Ecology and the Marketing heads gather along with the project manager, and the Marketing head is convinced to accept the possibility that the software could be open source, updating its requirement to ¬o ∨ o.2 The Philosophy head persuades the Economy head to the idea that graduate students do not need special rights, so the latter’s requirement is relaxed to r → ¬o. Updating the whole set of requirements, we have the knowledge base (cid:4)1 = {o, ¬o ∨ o, ¬g ∧ r, r → ¬o, ¬h, (cid:6)}. Note that {o, ¬g ∧ r, r →¬o} ⊆ (cid:4)1 is a MIS, so (cid:4)1 is inconsistent. That is, even though each meeting led to relaxed, compatible requirements, the whole set of requirements is still inconsistent. This points to a conflict between the heads of Ecology, Philosophy and Economy that was not captured by minimal inconsistent sets (see Fig. 3).These examples motivate our quest for new tools for localising inconsistency in a knowledge base. We are interested in alternative ways of both telling the “uncontroversial” formulas from the “controversial” ones and identifying the primitive conflicts within the latter. Every definition of primitive conflict yields a notion of “uncontroversial” formulas as being those not involved in a conflict. Nevertheless, it is in principle possible to define the latter without introducing the former, solving only the problem of localising the controversial formulas, but not discriminating them into atomic inconsistencies. For the sake of presentation, we follow this path, firstly looking independently for refinements of the free formula concept to then investigate characterisation of conflicts afterwards.4. Refining the notion of free formulasBefore proceeding to develop the free formula concept refinement, we take a quick look at an existing proposal. A stronger form of free formula has already been suggested in the literature. Hunter and Konieczny [25] defined a safeformula as a consistent one whose atomic propositions are disjoint from those in the rest of the base. The intuition is that a safe formula cannot be “controversial” in a base since its atomic propositions are not used in other formulas in the base, thus it is logically independent in some sense. Although safe formulas are easily recognisable, we expect them to be rare in practice, due to the natural logical dependencies among propositions within a knowledge base. Furthermore, safe formulas are a primitive concept, not derived from a characterisation of atomic inconsistencies — as free formulas are derived from MISes. Hence, the problem of localising inconsistency would only partially be solved, with the set of safe for-mulas being the “uncontroversial” ones, but without means to discriminate the conflicts within the possibly “controversial” 2 We avoid using (cid:6) here to enable both these requirements and the Arts heads’ to be different elements in the base.124G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151part. More importantly, not every non-safe formula seems to be “controversial”: consider for instance x1 in the knowledge base {x1, x1 ∧ x2, ¬x2}. That is, the safe formula concept is too conservative, failing to spot most “uncontroversial” formu-las. We are looking for a weaker, more useful notion of “uncontroversial” formulas, between safe and free, for which the “controversial” formulas could indeed be regarded as such — for instance, via some primitive conflict characterisation.A way of understanding what is happening in Example 3.3 is via the way the conflict between the salesperson and the security chief was solved. Once the contradiction has been spotted, one does not need to completely ignore one of the witnesses, because he/she was lying, but consistency can be achieved by discarding only part of some testimony. In Example 1.1, the salesperson could have misled, by not noticing the guns, and his/her statement about not having opened the safe (¬s) could still be believed. This connection between a conflict characterisation and a procedure to restore consistency is clear in the case of MISes and free formulas.The concept of free formula is based on the idea that minimal inconsistent sets are the causes of inconsistencies. Such an idea can be understood by noting that the classical way of handling inconsistency is through ruling out formulas, as Reiter proposed in his diagnosis problem [36] and as the standard AGM paradigm of belief revision – named after Alchour-rón, Gärdenfors and Makinson [1] – defines base contraction (see [21] for a general view of the AGM paradigm). Reiter’s hitting sets technique views a repair of some inconsistency set of formulas as giving up of at least one element from each minimal inconsistent set. For such a repair to be minimal, no free formula should be discarded. In the AGM paradigm, the consolidation process of a belief base can be interpreted as the contraction of ⊥, the contradiction. The inclusion postulate claims that the result of a contraction is a subset of the belief base in question, and the success postulate states that, while contracting by ⊥, the result should be consistent. That is, to perform a consolidation in the AGM framework, we can only discard formulas, and again focus on the MISes if we want to minimally do so. Indeed, the relevance postulate forces the contraction of ⊥ to contain all free formulas of the base. This is due to the fact that free formulas are consistent with any consistent subset of the knowledge base, which is a consolidation in the AGM theory:Definition 4.1 (AGM-consolidation). Let (cid:4) be a knowledge base in K. An AGM-consolidation of (cid:4) is any consistent subset (cid:4)(cid:11) ⊆ (cid:4).Using AGM-consolidations, free formulas could be alternatively defined.3Proposition 4.2. Consider a knowledge base (cid:4) ∈ K and a formula ϕ ∈ (cid:4). ϕ is free in (cid:4) iff, for any AGM-consolidation (cid:4)(cid:11)is consistent.of (cid:4), (cid:4)(cid:11) ∪ {ϕ}The result above provides a new way of equivalently defining a free formula without mentioning minimal inconsistent sets, but using AGM-consolidations. If other forms of restoring consistency are conceived, different notions of “uncontrover-sial” formulas might arise.While consolidating a knowledge base, we could preserve part of the information conveyed by the formulas being dis-carded, instead of completely forgetting them. Hence, we conceive more general consolidation procedures than the one employed by Reiter and the AGM framework. We are interested in consolidation procedures that allow for formulas being weakened, not only deleted. Different methods can be employed to weaken a formula: discarding conjuncts or adding dis-juncts [18], employing prime implicates [27], applying dilation [19], etc. To generally encompass all these procedures, we employ an arbitrary consequence operation Cn(cid:2) : K → K. Some properties a consequence operation can enjoy are listed in the following:Definition 4.3. Consider arbitrary bases (cid:4), (cid:5) ∈ K, an arbitrary formula ϕ ∈ L and a Cn(cid:2) : K → K. Cn(cid:2) satisfies• Monotonicity if (cid:4) ⊆ (cid:5) implies Cn(cid:2)((cid:4)) ⊆ Cn(cid:2)((cid:5));• Idempotence if Cn(cid:2)(Cn(cid:2)((cid:4))) ⊆ Cn(cid:2)((cid:4));• Inclusion if (cid:4) ⊆ Cn(cid:2)((cid:4));• (Strict) Subclassicality if Cn(cid:2)((cid:4)) ⊆ Cn((cid:4)) (Cn(cid:2)((cid:4)) (cid:2) Cn((cid:4)));• Modularity if Cn(cid:2)((cid:4)) ={Cn(cid:2)({ϕ})|ϕ ∈ (cid:4)}.(cid:2)If Cn(cid:2) satisfies monotonicity, inclusion and idempotence, we say it is Tarskian [40]. For instance, the classical consequence operation Cn is Tarskian, but not modular.Using a consequence operation with some properties, we can define a more general sort of consolidation operation that allows some, but not all consequences of a knowledge base to be present in its consolidation, following ideas from [39] and [12].Definition 4.4 ((cid:2)-consolidation). Let (cid:4) be a knowledge base in K and Cn(cid:2) be a subclassical, Tarskian consequence operation. A (cid:2)-consolidation of (cid:4) is any consistent set (cid:4)(cid:11) ⊆ Cn(cid:2)((cid:4)).3 Ideas and results similar to this section’s were already developed for probabilistic logic [11].G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151125Of course not all subclassical, Tarskian consequence operations yields interesting (cid:2)-consolidation definitions. For instance, using the classical consequence operation Cn, an inconsistent (cid:4) ∈ K would imply Cn((cid:4)) = L, and any consistent knowledge base could be the (cid:2)-consolidation of (cid:4). That is why we focus on strictly subclassical Cn(cid:2) .If we want to restrict (cid:2)-consolidations to contain only formulas that are weaker than those in the original knowledge base, Cn(cid:2) must be modular. In this case, the consequence operation is dual to a (weakening) relation on pairs of formulas:Definition 4.5 (Modular consequence relation (cid:12)(cid:2)). For a given modular consequence operation Cn(cid:2) : K → K, (cid:12)(cid:2) ⊆ L × L is such that, for every ϕ, ψ ∈ L, (cid:13)ϕ, ψ(cid:14) ∈ (cid:12)(cid:2) (denoted by ϕ (cid:12)(cid:2) ψ ) iff ψ ∈ Cn(cid:2)({ϕ}). We say (cid:12)(cid:2) is a modular consequence relation.We use (cid:12) to denote the classical entailment relation between formulas ϕ, ψ ∈ L: ϕ (cid:12) ψ iff ψ ∈ Cn({ϕ}). Note that any given modular consequence relation (cid:12)(cid:2) ⊆ L × L also uniquely determines a modular consequence operation Cn(cid:2) via Cn(cid:2)({ϕ}) = {ψ ∈ L|ϕ (cid:12)(cid:2) ψ} and Cn(cid:2)((cid:4)) ={Cn(cid:2)({ϕ})|ϕ ∈ (cid:4)}. That is, a given modular consequence operation Cn(cid:2) defines a modular consequence relation (cid:12)(cid:2) that in turn uniquely characterises Cn(cid:2). Due to this bijection, we sometimes use (cid:12)(cid:2) to refer to the corresponding modular Cn(cid:2).(cid:2)Throughout the paper, Cn(cid:2) will be instantiated often as one of the following modular consequence operations:Definition 4.6. CnId : K → K, Cnfor any ϕ ∈ L, as:∧ : K → K, Cn∧2: K → K and Cnmod : K → K are modular consequence operators, defined, • CnId({ϕ}) = {ϕ};∧({ϕ}) = {ψ | ϕ = ψ, ϕ = ψ ∧ γ , ϕ = θ ∧ ψ or ϕ = θ ∧ ψ ∧ γ };• Cn∧2 ({ϕ}) = {ψ ∈ Cn• Cn• Cnmod({ϕ}) = Cn({ϕ}).∧({ϕ}) | {ψ} = Cn∧({ψ})};The consequence operation CnId is simply an identity function. Informally, ψ ∈ Cninstance, if (cid:4) = {x1 ∧ x2 ∧ x3}, Cnconjuncts, and Cnclassical consequence operation Cn. From their definition, one can see that CnId , CnTarskian.∧{ϕ} if ψ is a conjunct of ϕ. For ∧2 considers only the smallest ∧2 ((cid:4)) = (cid:4) ∪ {x1, x2, x3}. Also note that Cnmod = Cn(cid:2) implies (cid:12)(cid:2)= (cid:12), so Cnmod is a modular version of the ∧2 and Cnmod are subclassical and ∧((cid:4)) = {x1, x2, x3, x1 ∧ x2, x2 ∧ x3, x1 ∧ x2 ∧ x3}. In contrast, Cn, Cn∧Example 4.7. Back to Example 3.3, consider the knowledge base (cid:5) = {¬s ∧ ¬g, (s ∨ m) ∧ g}, which encodes the testimonies given by the salesperson and the security chief. The knowledge base (cid:5)(cid:11) = {¬s, (s ∨ m) ∧ g} can be seen as a (cid:2)-consolidation of (cid:5) if Cn(cid:2) = Cn∧.Using these concepts, a new notion of “uncontroversial” formula arises:Definition 4.8 (Innocuous formula). Let (cid:4) be a knowledge base in K. A formula ϕ ∈ (cid:4) is (cid:2)-innocuous in (cid:4) if, for every (cid:2)-consolidation (cid:5) of (cid:4), (cid:5) ∪ {ϕ} is consistent.Example 4.9. Recall from Example 3.3 that the knowledge base (cid:5) = {¬s ∧ ¬g, (s ∨ m) ∧ g} is the only MIS in (cid:4) = (cid:5) ∪ {¬m}, , we have that (cid:5)(cid:11) = {¬s, (s ∨ m) ∧ g} is a (cid:2)-consolidation of (cid:4), and thus θ = ¬m is free in (cid:4). Nevertheless, taking Cn(cid:2) = Cn(cid:5)(cid:11) ∪ {θ} = {¬s, (s ∨ m) ∧ g, ¬m} is inconsistent, so θ is not (cid:2)-innocuous.∧The reason why (cid:2)-innocuous formulas can be taken as uncontroversial is that one can ignore them while (cid:2)-consolidating a knowledge base. Given an inconsistent knowledge base (cid:4), to AGM-consolidate it — discarding formulas —, one can focus on the non-free part of the base, withdrawing formulas until consistency is reached, and then concatenate the free formulas again, due to Proposition 4.2. Using (cid:2)-consolidation instead of AGM-consolidation, (cid:2)-innocuous formulas can be ignored (or bypassed), as they can be consistently added in the end:Proposition 4.10. Consider a subclassical, Tarskian consequence operation Cn(cid:2) : K → K, a knowledge base (cid:4) ∈ K and a (cid:5) ⊆ (cid:4) that contains only formulas that are (cid:2)-innoucuous in (cid:4). If (cid:8)(cid:11)is a (cid:2)-consolidation of (cid:8) = (cid:4) \ (cid:5), then (cid:8)(cid:11) ∪ (cid:5) is a (cid:2)-consolidation of (cid:4).Since (cid:2)-consolidations are AGM-consolidations, we can prove:Proposition 4.11. Let (cid:4) be a knowledge base in K. If a formula ϕ ∈ (cid:4) is (cid:2)-innocuous in (cid:4), then ϕ is free in (cid:4).The concept of (cid:2)-innocuous formula is parameterised by the entailment relation Cn(cid:2), which has two extreme instances, due to monotonicity and subclassicality:126G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151Fig. 4. Iceberg Inconsistency in Example 4.12. Above the water line, we see the formulas in the knowledge base, while their consequences (including themselves) are under the water. The Philosophy and the Economy heads weaken their requirements in a way that they conflict with the requirement of the Theology head.• Cn(cid:2) = CnId and (cid:2)-consolidations are AGM-consolidations;• Cn(cid:2) = Cn, and for any inconsistent (cid:4) ∈ K, any consistent (cid:5) ⊆ Cn(cid:2)((cid:4)) = L is a (cid:2)-consolidation.In the first case, Cn(cid:2) is the identity function, and (cid:2)-innocuous formulas are equal to free formulas, due to the charac-terisation given by Proposition 4.2. In the second case, no falsifiable (i.e., non-valid) formula ϕ can be (cid:2)-innocuous in an inconsistent (cid:4), for {¬ϕ} ⊆ Cn((cid:4)) is a (cid:2)-consolidation. Conversely, for any subclassical Cn(cid:2), every valid formula is (cid:2)-innocuous, for it is consistent with any (cid:2)-consolidation. Hence, in the second case, the (cid:2)-innocuous formulas in any inconsistent knowledge base are exactly its tautologies, a rather conservative definition.When we limit our attention to modular Cn(cid:2), two extreme cases arise as well. The weakest modular consequence op-eration is Cn(cid:2) = CnId, just discussed above. Since we assume subclassicalility, the strongest modular consequence operation is Cn(cid:2) = Cnmod, because (cid:12)(cid:2)= (cid:12). Although Cnmod is weaker than the classical consequence operation Cn, it can also yield undesired consequences:Example 4.12. Recall the scenario of Example 3.4, where (cid:4) = {o, ¬o, ¬g ∧ r, g ∧ (r → ¬o), ¬h, (cid:6)} is the base containing the original requirements. Suppose the Marketing head had weakened his requirement (¬o) to ¬o ∨ o as before, but the second meeting had taken a different course, as follows. Both department heads (Philosophy and Economy) are very reluctant to weaken their requirements (¬g ∧ r and g ∧ (r → ¬o), respectively). In order to end the conflict, they find a solution that pleases both: or their original requirements have to be met, or department heads must have exclusive rights in the system. That is, the Philosophy head’s new requirement is (¬g ∧ r) ∨ h, and the Economy head’s is (g ∧ (r → ¬o)) ∨ h. Now, the knowledge base containing the updated requirements is (cid:4)2 = {o, ¬o ∨ o, (¬g ∧ r) ∨ h, (g ∧ (r → ¬o)) ∨ h, ¬h, (cid:6)}. It happens that {(¬g ∧ r) ∨ h, (g ∧ (r → ¬o)) ∨ h, ¬h} ⊆ (cid:4)2 is a MIS, and (cid:4)2 is inconsistent.Note that each head’s new requirement is a logical consequence of his/her old one. Thus, considering Cn(cid:2) = Cnmod, (cid:8) ={o, ¬o ∨ o, ¬g ∧ r ∨ h, (g ∧ (r → ¬o)) ∨ h, (cid:6)} ⊆ Cn(cid:2)((cid:4)) is consistent and is a (cid:2)-consolidation of (cid:4). Hence, as (cid:8) ∪ {¬h} = (cid:4)2 is inconsistent, ¬h is not (cid:2)-innocuous in (cid:4) (see Fig. 4). Nonetheless, it is somewhat against the intuition that the requirement of the head of the Theology department be “controversial”, since it is the only one about head’s privileges — it is safe. The problem is that such a Cn(cid:2) is too strong, allowing the department heads to weaken their requirements by including arbitrary alternative possibilities, not related to their original ones.In fact, the strange situation in the example above can be generalised, showing that allowing any classical consequences of each formula in a (cid:2)-consolidation yields a trivial notion of (cid:2)-innocuous formula.Theorem 4.13. Consider the modular consequence operation Cn(cid:2) = Cnmod. Given an inconsistent (cid:4) ∈ K, a formula ϕ ∈ (cid:4) is (cid:2)-innocuous in (cid:4) iff ϕ is valid.Since the notion of free formula has been shown to be sometimes unsuitable to identify the “uncontroversial” elements in a knowledge base, we put forward the more general notion of (cid:2)-innocuous formula, which is parameterised by a con-sequence relation Cn(cid:2). The intuition behind “uncontroversial” here is based on an underlying consolidation procedure. The choice of a method to restore the consistency of a knowledge base will yield the definition of its (cid:2)-innocuous formulas, which can be bypassed (in the sense of Proposition 4.10) during the consolidation procedure. Although this new concept can in a sense tell “uncontroversial” formulas from the “controversial” ones, it cannot identify the atomic inconsistencies, or the primitive conflicts, in the latter. To achieve that, we generalise the notion of minimal inconsistent subsets.G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–1511275. Refining the notion of minimal inconsistent setsThe question of where is the inconsistency in a knowledge base is only partially answered by the non-(cid:2)-innocuous formulas. Even though these formulas are involved in the inconsistency somehow, we cannot still tell which subsets are producing the inconsistency or which are the primitive conflicts. Note that the union of minimal inconsistent sets is the complement of the set of free formulas in a knowledge base, so all (and only) non-free formulas can be assigned to the MISes that contains them. In other words, a formula is said to be “uncontroversial” (in some sense) if it belongs to no atomic inconsistency, understood as a MIS. Preferably, we would like to define a primitive conflict in such a way that a formula is (cid:2)-innocuous iff it is not involved in such a conflict. Furthermore, we expect that a conflict be an inconsistent subset of the base. We could artificially define a conflict that is the set containing all formulas that are not (cid:2)-innocuous in a knowledge base. Even though such a set could be proven to be always inconsistent when not empty (in inconsistent bases), it would lack the atomicity we are looking for. Such a set would be analogous to the union of all minimal inconsistent sets, but we search for a more fundamental, atomic notion of conflict. As modular consequence operations allow a straightforward conflict characterisation, we first investigate them before the general case.5.1. Modular consequence operationsIn order to derive a method for characterising primitive conflicts, we can recall Example 3.4, where (cid:4) = {o, ¬o, ¬g ∧r, g ∧ (r → ¬o), ¬h, (cid:6)}. A way of grasping the hidden inconsistencies in (cid:4) is by noticing how the parts of the requirements are conflicting. The fact that a formula does not belong to a minimal inconsistent subset of a knowledge base does not mean that such a formula cannot contradict parts of the formulas in that MIS. What happens with the knowledge base (cid:4) is that a part of each formula in {o, ¬g ∧ r, g ∧ (r → ¬o)} is essentially involved in a conflict, forming the MIS {o, ¬g ∧ r, r → ¬o}. In other words, even though o is not in the MIS {¬g ∧ r, g ∧ (r → ¬o)}, it is essentially involved in an inconsistency with the subformulas ¬g ∧ r and r → ¬o. A natural idea for characterising conflicts is thus to inspect “inside” the formulas, searching for “hidden” minimal inconsistent sets.To look at the “parts” of a formula, we can employ an arbitrary relation (cid:12)(cid:2): L × L, which corresponds to a modular consequence operation Cn(cid:2) : K → K. Once more, we require that Cn(cid:2) be Tarskian and subclassical. As a consequence, when we look “inside” a formula, we can never see logically stronger formulas, but we can always see the formula itself. For a given Cn(cid:2), the set Cn(cid:2)((cid:4)) contains all “parts” of the formulas, so one can look at the knowledge bases in MIS(Cn(cid:2)((cid:4))) to find the formulas that have “parts”4 essentially forming a conflict. Now we can generalise the concept of minimal inconsistent set, considering a given modular Cn(cid:2) and the corresponding (cid:12)(cid:2):Definition 5.1 ((cid:2)-weakening). Consider a modular subclassical Tarskian consequence operation Cn(cid:2) : K → K. A knowledge base (cid:5) is a (cid:2)-weakening of (cid:4) if there is a surjective function f : (cid:5) → (cid:4) such that f (ψ) (cid:12)(cid:2) ψ for all ψ ∈ (cid:5).Definition 5.2 ((cid:2)-conflict). A knowledge base (cid:4) is a (cid:2)-conflict if it has a (cid:2)-weakening (cid:5) that is a minimal inconsistent set.Intuitively, for a (cid:4) to be a (cid:2)-conflict, each formula ϕ ∈ (cid:4) must have at least one “part” involved in a conflict (cid:5) ∈in the definition above is surjective guarantees that. Furthermore, f being a is not required to be injective, the same formula MIS(Cn(cid:2)((cid:4))); and the fact that the function ffunction means that each ψ ∈ (cid:5) corresponds to exactly one ϕ ∈ (cid:4). As fϕ ∈ (cid:4) may contribute more than one “part” to form the MIS.Example 5.3. Let Cn(cid:2) be the modular, subclassical, Tarskian consequence operation Cn. Consider the knowledge base (cid:4) = {x1, x1 ∧ x1, ¬x1} in K. Note that (cid:5) = {x1, ¬x1} is in MIS(Cn(cid:2)((cid:4))). Even though ¬x1 (cid:12)(cid:2) ¬x1, x1 ∧ x1 (cid:12)(cid:2) x1 and x1 (cid:12)(cid:2) x1, this does not entail that (cid:4) is a (cid:2)-conflict, for there is no surjective function f : (cid:5) → (cid:4). In other words, x1 ∈ (cid:5) can count as a “part” of either x1 ∈ (cid:4) or x1 ∧ x1 ∈ (cid:4), but not both.Now let Cn(cid:2) be the modular, subclassical, Tarskian consequence operation Cn∧2 , which breaks formulas into their smallest conjuncts. Consider the knowledge base (cid:4) = {x1 ∧ x2 ∧ x3, (x1 → x4) ∧ ¬x3, x2 → ¬x4} in K. We have that (cid:5) = {x1, x2, (x1 →x4), x2 → ¬x4} is a minimal inconsistent subset of Cn(cid:2)((cid:4)). We can construct a surjective function f : (cid:5) → (cid:4), defined as f (x1) = f (x2) = x1 ∧ x2 ∧ x3, f (x1 → x4) = (x1 → x4) ∧ ¬x3 and f (x2 → ¬x4) = x2 → ¬x4, such that f (ψ) (cid:12)(cid:2) ψ for all ψ ∈ (cid:5); therefore, (cid:4) is a (cid:2)-conflict. Note that x1 ∧ x2 ∧ x3 contributes two parts in the conflict (cid:5).∧Due to the properties required of the modular Cn(cid:2), we have:Proposition 5.4. Consider a modular subclassical Tarskian consequence operation Cn(cid:2) : K → K. If a (cid:4) ∈ K is a minimal inconsistent set, (cid:4) is a (cid:2)-conflict.4 We refrain from using “subformula”, as by “part” we mean a more general, semantic notion. For example, ¬x1 could be regarded as a “part” of x1 → x2 ∧ ¬x2, although it is not a subformula.128G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151Proposition 5.5. Consider a modular subclassical Tarskian consequence operation Cn(cid:2) : K → K. If a (cid:4) ∈ K is a (cid:2)-conflict, it is incon-sistent.Example 5.6. Recall from Example 4.9 that the knowledge base (cid:5) = {¬s ∧ ¬g, (s ∨ m) ∧ g} is the only MIS in (cid:4) = (cid:5) ∪ {¬m}. , the base (cid:4)(cid:11) = {¬s, (s ∨ m) ∧ g, ¬m} is Therefore, (cid:5) is also a (cid:2)-conflict, by Proposition 5.4. Nevertheless, taking Cn(cid:2) = Cnin MIS(Cn(cid:2)((cid:4))). As each formula in (cid:4) contributes one formula in (cid:4)(cid:11)is a (cid:2)-weakening of (cid:4). Therefore, (cid:4) is a (cid:2)-conflict., (cid:4)(cid:11)∧Example 5.7. Back to Example 3.4, consider the knowledge base (cid:4) = {o, ¬o, ¬g ∧ r, g ∧ (r → ¬o), ¬h, (cid:6)} in K. Remember that the only minimal inconsistent sets in (cid:4) are (cid:5) = {o, ¬o} and (cid:8) = {¬g ∧ r, g ∧ (r → ¬o)} and that ¬h and (cid:6) are the only free formulas in (cid:4). Depending on how we look “inside” formulas, we have different conflicts. For instance, the following two scenarios correspond to Examples 3.4 and 4.12, respectively:• Scenario I: Consider the modular consequence operation Cn(cid:2) = Cn. Note that {o, ¬g ∧ r, r → ¬o} is a MIS and a (cid:2)-weakening of (cid:10)1 = {o, ¬g ∧ r, g ∧ (r → ¬o)}, which is a (cid:2)-conflict. Nevertheless, (cid:10)2 = {¬g ∧ r, g ∧ (r → ¬o), ¬h} has no (cid:2)-weakening that is a MIS, so it is not a (cid:2)-conflict.• Scenario II: Consider the modular consequence operation Cn(cid:2) = Cnmod. Note that {(¬g ∧ r) ∨ h, (r → ¬o) ∨ h, ¬h} is a ∧MIS and a (cid:2)-weakening of (cid:10)2 = {¬g ∧ r, g ∧ (r → ¬o), ¬h}, which is a (cid:2)-conflict.As the example above shows, different modular Cn(cid:2) may yield different notions of (cid:2)-conflict. This new definition of conflict also has two extreme cases that arise from the choice of (cid:12)(cid:2) (or the modular Cn(cid:2)). If Cn(cid:2) = CnId, then we are not looking strictly “inside” the formulas, and (cid:2)-conflicts are MISes, for (cid:4) = Cn(cid:2)((cid:4)). At the other end, when Cn(cid:2) = Cnmod ((cid:12)(cid:2)=(cid:12)), we obtain a (cid:2)-conflict notion that is too general, thus not interesting, as hinted in the second scenario of Example 5.7. Consider the following example:Example 5.8. Let (cid:4) = {x1, ¬x1, x1 ∧ x1} be a knowledge base in K and consider the consequence operation Cn(cid:2) = Cn. We want to prove that (cid:4) is a (cid:2)-conflict, by showing a (cid:2)-weakening that is a MIS. Note that {x1, ¬x1} (cid:2) (cid:4) is already MIS. We can try to employ the strategy from the second scenario of Example 5.7, adding the disjunct “ ∨¬(x1 ∧ x1)” to the first two formulas in (cid:4), as “ ∨h” was added to the requirements of the Philosophy and the Economy heads. Doing so, we have the (cid:2)-weakening {x1 ∨ ¬(x1 ∧ x1), ¬x1 ∨ ¬(x1 ∧ x1), x1 ∧ x1}, which is not a MIS, for the last two formulas are already contradicting each other. Nevertheless, we can apply a more general technique to show a (cid:2)-weakening of (cid:4) that is indeed a MIS. Firstly, we need |(cid:4)| = 3 “disjoint” formulas that are not related to the formulas in (cid:4). We employ atomic propositions not occurring in (cid:4), x2, x3, x4, to form them. Consider the following formulas in L: ψ1 = x2 ∧ ¬x3 ∧ ¬x4, ψ2 = ¬x2 ∧ x3 ∧ ¬x4and ψ3 = ¬x2 ∧ ¬x3 ∧ x4. Note that each valuation satisfies at most one of these formulas. Now, let ϕ1, ϕ2 and ϕ3 denote x1, ¬x1 and x1 ∧ x1, respectively, so that (cid:4) = {ϕ1, ϕ2, ϕ3}. Then, consider the formulas:∧12= ϕ1 ∨ (ψ2 ∧ ¬ϕ2) ∨ (ψ3 ∧ ¬ϕ3)= ϕ2 ∨ (ψ1 ∧ ¬ϕ1) ∨ (ψ3 ∧ ¬ϕ3)= ϕ3 ∨ (ψ1 ∧ ¬ϕ1) ∨ (ψ2 ∧ ¬ϕ2)ϕ(cid:11)ϕ(cid:11)ϕ(cid:11)3For instance, ϕ(cid:11)1Therefore, (cid:4)(cid:11) = {ϕ(cid:11){ϕ(cid:11)consistent. Similar reasoning applies to both (cid:5)2 = (cid:4)(cid:11) \ {ϕ(cid:11)is satisfied by a given valuation v. Since (cid:4) is inconsistent, v(ϕi) = 0 for some ϕi ; say v(ϕ2) = 0. As v satisfies (cid:4)(cid:11)that v(ϕ(cid:11)for v(ϕ1) = 0, v(ϕ(cid:11)= (x1 ∨ ¬x2 ∧ x3 ∧ ¬x4) ∧ ¬(¬x1) ∨ (¬x2 ∧ ¬x3 ∧ x4) ∧ ¬(x1 ∧ x1). Note that, for any 1 ≤ i ≤ 3, ϕi (cid:12) ϕ(cid:11)i . 1, ϕ(cid:11)2, ϕ(cid:11)} =2 and ϕ(cid:11)3 have ψ1 ∧ ¬ϕ1 = (x2 ∧ ¬x3 ∧ ¬x4) ∧ ¬x1 as a disjunct. Since this formula is satisfiable, (cid:5)1 is is a inconsistent, suppose it , it follows 2) = 1, thus v(ψ1 ∧ ¬ϕ1) = 1 or v(ψ3 ∧ ¬ϕ3) = 1. If v(ψ1 ∧ ¬ϕ1) = 1, then v(x2) = 1 and v(ψ2) = v(ψ3) = 0 and, 1) = 0, a contradiction. If v(ψ3 ∧ ¬ϕ3) = 1, a contradiction would follow in the same manner.is a MIS, consider its proper subset (cid:5)1 = (cid:4)(cid:11) \ {ϕ(cid:11)} is a (cid:2)-weakening of (cid:4). To prove that (cid:4)(cid:11)} and (cid:5)3 = (cid:4)(cid:11) \ {ϕ(cid:11)}. To see that (cid:4)(cid:11)}. Both ϕ(cid:11)2, ϕ(cid:11)23133To characterise the (cid:2)-conflicts derived from (cid:12)(cid:2) = (cid:12), we need the following intermediate result, which generalises the example above:Lemma 5.9. Consider the modular consequence operation Cn(cid:2) = Cnmod. Every finite, inconsistent (cid:4) ∈ K that does not contain valid formulas has a (cid:2)-weakening that is a MIS.Theorem 5.10. Consider the modular consequence operation Cn(cid:2) = Cnmod. Any finite knowledge base (cid:4) ∈ K is a (cid:2)-conflict iff it is inconsistent and it does not contain valid formulas.As the concept of minimal inconsistent set induces the definition of “uncontroversial” formulas (i.e., the free formulas), we can also characterise “uncontroversial” formulas using (cid:2)-conflicts, which would contain the “controversial” ones. Consid-ering Examples 4.9 and 5.6, we note that θ is not (cid:2)-innocuous in (cid:4), which is a (cid:2)-conflict. Additionally, Theorems 4.13 and G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–1511295.10 also point to such duality, as does the observation that (cid:2)-conflicts are MISes for the same Cn(cid:2) = CnId that collapses (cid:2)-innocuous and free formulas. Indeed, (cid:2)-conflicts could be used to define (cid:2)-innocuous formulas:Theorem 5.11. Consider a knowledge base (cid:4) ∈ K and a modular Cn(cid:2) : K → K. A formula ϕ ∈ (cid:4) is (cid:2)-innocuous in (cid:4) iff it is in no (cid:2)-conflict of (cid:4).The result above shows that, given a modular consequence operation Cn(cid:2), the formulas in a knowledge base (cid:4) can be split into two groups: the formulas involved in some (cid:2)-conflict; and the (cid:2)-innocuous formulas, which are consistent with any (cid:2)-consolidation (cid:4)(cid:11) ∈ Cn(cid:2)((cid:4)). As a consequence, due to Proposition 4.10, while (cid:2)-consolidating a knowledge base, one can focus on the formulas involved in the (cid:2)-conflicts, ignoring (cid:2)-innocuous formulas, in the same way that AGM-consolidation can focus on the union of the MISes, ignoring free formulas:When we force a (cid:2)-consolidation to be a (cid:2)-weakening, where consistency is restored by weakening each formula, the analogy between MISes and (cid:2)-conflicts is more evident. To consolidate via withdrawal of formulas, it suffices to discard at least one formula of each MIS, so consolidating each MIS implies consolidating the whole knowledge base. Similarly, a (cid:2)-weakening solving each (cid:2)-conflict (cid:2)-consolidates the whole base:Proposition 5.12. Suppose (cid:4)(cid:11) ∈ K is a (cid:2)-weakening of (cid:4) ∈ K. If, for each (cid:2)-conflict (cid:5) ⊆ (cid:4), all (cid:2)-weakenings (cid:5)(cid:11) ⊆ (cid:4)(cid:11)consistent, then (cid:4)(cid:11)is a (cid:2)-consolidation of (cid:4).of (cid:5) are For a modular consequence operation Cn(cid:2), the introduced concept of (cid:2)-conflict holds several desirable properties, being a plausible way of characterising primitive conflicts. For instance, every (cid:2)-conflict is an inconsistent knowledge base, and every inconsistent base contains a (cid:2)-conflict. As a consequence, the (cid:2)-conflict concept generalises the notion of a minimal inconsistent set. Furthermore, (cid:2)-conflicts dually define (cid:2)-innocuous formulas, which can be ignored while (cid:2)-consolidating a base, and capture the intuition that parts of formulas are conflicting. Now we turn our attention to a general, possibly non-modular Cn(cid:2), looking for a conflict characterisation with the same desirable properties.5.2. General consequence operationsWhen we consider a possibly non-modular consequence operation, the derivation of a conflict characterisation is not straightforward. For modular Cn(cid:2), a (cid:2)-conflict was defined via taking some “part” of each formula in a base (cid:4) ∈ K to form a minimal inconsistent set, using a relation (cid:12)(cid:2) intended to capture the “parts” of formulas. In the general case, a conflict can be formed not only through weakening each formula, but also using consequences of sets of formulas, so (cid:2)-weakenings are not sufficient to grasp which conflicts can be derived from the base. To exemplify this, we define a non-modular consequence operation:Definition 5.13. Cn→ : K → K is such that, for all (cid:4) ∈ K, Cn→((cid:4)) is defined as the smallest set satisfying:→((cid:4)) and• (cid:4) ⊆ Cn• {ϕ | ψ, ψ → ϕ ∈ Cn∧(Cn→((cid:4)))} ⊆ Cn→((cid:4)).One can think of Cnconjuncts. For example, if (cid:4) = {x1 ∧ (x2 → x3), x2 ∧ (x3 → x4)}, CnCn→((cid:4)). From its definition, one can see that Cn→is subclassical and Tarskian.→((cid:4)) as the result of starting with the formulas in (cid:4) and recursively applying modus ponens to their →((cid:4)) = (cid:4) ∪ {x3, x4}, but note that x2, x2 → x3, x3 → x4 /∈Example 5.14. Consider the knowledge base (cid:4) = {ϕ1, ϕ2, ϕ3, ϕ4}, with ϕ1 = x1, ϕ2 = x1 → x2, ϕ3 = x1 ∧ (x2 → x3) and ϕ4 = ¬x3, and the consequence operation Cn(cid:2) = Cn. The only two MISes of Cn(cid:2)((cid:4)) are (cid:8) = {x1 → x2, x1 ∧ (x2 → x3), ¬x3}(which is also a MIS of (cid:4)) and (cid:5) = {x2, x1 ∧ (x2 → x3), ¬x3}. Note that (cid:5) is not a (cid:2)-weakening of (cid:4), for no formula (cid:2)-implies x2 on its own.→To (cid:2)-consolidate a base (cid:4) ∈ K, one can compute its closure Cn(cid:2)((cid:4)) and then discard formulas to construct a consistent (cid:4)(cid:11) ⊆ Cn(cid:2)((cid:4)). That is, a (cid:2)-consolidation of (cid:4) is an AGM-consolidation of Cn(cid:2)((cid:4)) (see [39,12] for more on this). Therefore, to (cid:2)-consolidate (cid:4), one can focus on the MISes in Cn(cid:2)((cid:4)), withdrawing at least one formula from each one of them. The next result show the relation between (cid:2)-innocuous formulas and the MISes in the closure Cn(cid:2)((cid:4)):Proposition 5.15. A formula ϕ is (cid:2)-innocuous in a base (cid:4) ∈ K iff, for all (cid:5) ∈ MIS(Cn(cid:2)((cid:4))), ϕ /∈ (cid:5).Consequently, to perform a (cid:2)-consolidation, the conflicts that really matter are in MIS(Cn(cid:2)((cid:4))). However, these conflicts are not generally in the base (cid:4), where we in fact want to localise the inconsistency. Following the iceberg analogy, the conflicts in MIS(Cn(cid:2)((cid:4))) are those under the water line in Figs. 2, 3 and 4. We need somehow to project those conflicts 130G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151onto the knowledge base, finding the formulas in the base responsible for them. When the hidden conflict is simply a (cid:2)-weakening, as in the situations illustrated in Figs. 2, 3 and 4, such projection is trivial, for each formula under the water line is derived from a single formula in the knowledge base. In contrast, with non-modular consequence operations, a set of formulas may be needed to derive each element in the hidden conflict, as it happens with x2 in Example 5.14. Thus, given a (cid:5) ∈ MIS(Cn(cid:2)((cid:4))), we look for the premises in (cid:4) involved in the derivation of each formula in (cid:5) in order to project the conflict onto the knowledge base. We would like the subset of the base onto which the conflict is projected to be inconsistent, and such projection should provide a concept that has (cid:2)-conflict, for modular Cn(cid:2), as a particular case.For a knowledge base (cid:4) ∈ K, consider a (cid:5) ∈ MIS(Cn(cid:2)((cid:4))) and a (cid:8) ⊆ (cid:4). In the modular case, a surjective function f : (cid:5) → (cid:8) from the (cid:2)-weakening definition can be seen as linking each ψ ∈ (cid:5) to a minimal set of premises { f (ψ)} entailing is (cid:8) ⊆ (cid:4), it is somehow projecting the conflict (cid:5) ∈ MIS(Cn(cid:2)((cid:4))) into the it, which will be a singleton. As the range of fsubset (cid:8) ⊆ (cid:4). In the general case, for (cid:8) to be projection of (cid:5), we need a function that links each ψ ∈ (cid:5) to a general subset (not necessarily a singleton) of (cid:8) implying it, thus we employ an f : (cid:5) → 2(cid:8) . To avoid blaming “innocent” formulas, we require that f (ψ) be a minimal subset implying ψ . Additionally, for (cid:8) ⊆ (cid:4) to reflect the conflict (cid:5) ∈ MIS(Cn(cid:2)((cid:4))), every formula in (cid:8) ⊆ (cid:4) should be employed to derive an element of (cid:5) ∈ MIS(Cn(cid:2)((cid:4))). The following definition captures both notions:Definition 5.16 ((cid:2)-mapping). Given two knowledge bases (cid:5), (cid:4) ∈ K, we say f : (cid:5) → 2(cid:4) is a (cid:2)-mapping if for all ψ ∈ (cid:5), ψ ∈ Cn(cid:2)( f (ψ)) and (cid:8) (cid:2) f (ψ) implies ψ /∈ Cn(cid:2)((cid:8)).(cid:2)ψ∈(cid:5)f (ψ) = (cid:4) and, In fact, (cid:2)-mappings could be used to define (cid:2)-weakening, thus (cid:2)-conflict, for modular Cn(cid:2):Proposition 5.17. Consider a knowledge base (cid:4) ∈ K, a minimal inconsistent set (cid:5) ∈ K and a modular, subclassical, Tarskian Cn(cid:2). (cid:5) is a (cid:2)-weakening of (cid:4) iff there is a (cid:2)-mapping f : (cid:5) → 2(cid:4) .Given the result above, we can safely extend the definition of (cid:2)-conflicts in order to consider also non-modular conse-quence operations:Definition 5.18 ((cid:2)-conflict). Consider a base (cid:4) ∈ K and a subclassical, Tarskian Cn(cid:2). (cid:4) is a (cid:2)-conflict if there are a minimal inconsistent set (cid:5) ∈ Cn(cid:2)((cid:4)) and a (cid:2)-mapping f : (cid:5) → 2(cid:4) .Example 5.19. Recall Example 5.14, where (cid:4) = {ϕ1, . . . , ϕ4} = {x1, x1 → x2, x1 ∧ (x2 → x3), ¬x3}, Cn(cid:2) = Cnand Cn(cid:2)((cid:4)) =(cid:4) ∪ {x2}. The only MISes of Cn(cid:2)((cid:4)) are (cid:5) = {x2, ϕ3, ϕ4} and (cid:8) = (cid:4) \ {x1}. Remember that x2 is both in Cn(cid:2)({ϕ1, ϕ2})(cid:11) : (cid:5) → 2(cid:4) , defined and in Cn(cid:2)({ϕ2, ϕ3}), but, for all ϕi ∈ (cid:4), x2 /∈ Cn(cid:2)({ϕi}). Consider two (cid:2)-mappings, f : (cid:5) → 2(cid:4) and f(cid:11)}, as f (ϕ3) = f(cid:11)(ψ) = (cid:8), both (cid:4) and (cid:8)for all ψ ∈ (cid:5), ψ ∈ Cn(cid:2)(g(ψ)) and (cid:8) (cid:2) g(ψ) implies ψ /∈ Cn(cid:2)((cid:8)). As (cid:11)(x2) = {ϕ2, ϕ3}. Note that, for any g ∈ { f , ff (ψ) = (cid:4) and f(cid:11)(ϕ4) = {ϕ4}, f (x2) = {ϕ1, ϕ2} and f(cid:2)(cid:11)(ϕ3) = {ϕ3}, f (ϕ4) = f(cid:2)→are (cid:2)-conflicts. That is, the “blame” for x2 in the MIS (cid:5) ⊆ Cn(cid:2)((cid:4)) can be assigned to either {x1, x1 → x2} ⊆ (cid:4) (via f ) or {x1 → x2, x1 ∧ (x2 → x3)} ⊆ (cid:4) (via f), leading to two different (cid:2)-conflicts.(cid:11)ψ∈(cid:5)ψ∈(cid:5)When Cn(cid:2) is modular, Proposition 5.17 makes Definitions 5.2 and 5.18 equivalent, but the latter also allows for non-modular Cn(cid:2) in the definition of (cid:2)-conflicts. Henceforth, unless differently stated, (cid:2)-conflict refers to Definition 5.18.As desired, (cid:2)-conflicts are always inconsistent subsets of a given knowledge base, and Proposition 5.5 can be generalised:Proposition 5.20. Consider a subclassical, Tarskian consequence operation Cn(cid:2) : K → K. If a (cid:4) ∈ K is a (cid:2)-conflict, it is inconsistent.This more general concept also generalises minimal inconsistent sets, so we can prove Proposition 5.4 for the extended notion of (cid:2)-conflict.Proposition 5.21. If a knowledge base (cid:4) ∈ K is a minimal inconsistent set, then it is (cid:2)-conflict.Once more, the choice of the subclassical, Tarskian consequence operation Cn(cid:2) yields two extreme instances for the (cid:2)-conflict concept:• At one extreme, Cn(cid:2) = CnId is the identity function (the weakest modular case), and (cid:2)-conflicts are simply MISes;• At the other extreme Cn(cid:2) = Cn, the classical consequence operation.Using Lemma 5.9, we can show that the second case is not interesting, leading to the (cid:2)-conflict related to Cn(cid:2) = Cnmod(see Theorem 5.10):G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151131Table 1Extreme cases of Cn(cid:2) and the characterisation of the related (cid:2)-conflict. The given char-acterisation of (cid:2)-innocuous/free concepts holds for inconsistent bases, as in consistent ones every formula is (cid:2)-innocuous/free.Cn(cid:2)CnIdCnmodCn(cid:2)-conflict(cid:2)-innocuous(cid:2)-freeminimal inconsistent setinconsistent base with no tautologyinconsistent base with no tautologyfree formulatautologytautologyfree formulatautologytautologyTheorem 5.22. Consider the consequence operation Cn(cid:2) = Cn. Any finite knowledge base (cid:4) ∈ K is a (cid:2)-conflict iff it is inconsistent and it does not contain valid formulas.In the same way that minimal inconsistent sets are used to define free formulas, we can employ (cid:2)-conflicts to intro-duce a new sort of “uncontroversial” formula, defined as not taking part in these conflicts. For a modular consequence operation Cn(cid:2), formulas out of any (cid:2)-conflict are exactly the (cid:2)-innocuous formulas (see Theorem 5.11), dispensing with the introduction of a new concept. Nonetheless, the next example shows this may be not the case with a non-modular Cn(cid:2) .Example 5.23. Recall Examples 5.14 and 5.19 and the corresponding Cn(cid:2) = Cn. As (cid:4) = {x1, x1 → x2, x1 ∧ (x2 → x3), ¬x3}is a (cid:2)-conflict. Nevertheless, x1 is not involved in any MIS of Cn((cid:4)) = (cid:4) ∪ {x2}, which are (cid:8) = {x1 → x2, x1 ∧ (x2 → x3), ¬x3}and (cid:5) = {x2, x1 ∧(x2 → x3), ¬x3}; thus x1 is (cid:2)-innocuous, despite being in a (cid:2)-conflict. How “controversial” is x1? On the one hand, it is consistent with any (cid:2)-consolidation of (cid:4), for it is (cid:2)-innocuous, and may be ignored if one is to (cid:2)-consolidate (cid:4). On the other hand, x1 can be used together with x1 → x2 to derive x2 in the MIS {x2, x1 ∧ (x2 → x3), ¬x3} ⊆ Cn(cid:2)((cid:4)).→The situation in the example above motivates the introduction of a new concept to capture this type of “uncontroversial” formulas.Definition 5.24 ((cid:2)-free). A formula ϕ in a base (cid:4) ∈ K is said to be (cid:2)-free in (cid:4) if, for all (cid:2)-conflict (cid:5) in (cid:4), ϕ /∈ (cid:5).Corollary 5.25. If a formula ϕ is (cid:2)-free in a base (cid:4) ∈ K, then ϕ is free in (cid:4).Corollary 5.26. Consider a modular consequence operation Cn(cid:2). A formula ϕ is (cid:2)-free in a base (cid:4) ∈ K iff ϕ is (cid:2)-innocuous in (cid:4).When we consider a general consequence operations Cn(cid:2), (cid:2)-free formula is a stronger concept than (cid:2)-innocuous.Proposition 5.27. If a formula ϕ is (cid:2)-free in (cid:4) ∈ K, then ϕ is (cid:2)-innocuous in (cid:4).In the end, for a general Cn(cid:2), we put forward two distinct ways of telling the controversial from the uncontroversial formulas in a knowledge base.• (cid:2)-innocuous formulas: those that can be ignored while performing a (cid:2)-consolidation, since they might be consistently added after (cid:2)-consolidating the rest of the base;• (cid:2)-free formulas: those not involved in the derivation of (i.e., that do not belong to a minimal set of premises for deriving) a formula in a minimal inconsistent subset of the Cn(cid:2)-closure.As we have shown, both concepts are equivalent for a modular consequence operation Cn(cid:2), which seems to be the most useful case. For non-modular Cn(cid:2), deciding which definition of controversial/uncontroversial formulas to use depends on the application one is addressing.The key results on localising inconsistency related to the choice of the consequence operation Cn(cid:2) ∈ {CnId, Cnmod, Cn}are summarised in Table 1, where the entailed (cid:2)-conflict and (cid:2)-innocuous/free formula concepts are described. For the other consequence operations presented, we could not provide a brief characterisation for the yielded (cid:2)-conflicts and (cid:2)-innocuous/free formulas concepts, which follow from their definitions. Fig. 5 organises all particular instances of Cn(cid:2)discussed here by their strength.6. Related approachesBefore presenting how the machinery introduced in the previous sections can be deployed in measuring inconsistency, we explore some works from the literature that explicitly or implicitly characterise conflicts in a knowledge base and show how they can be related to our framework.132G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151Fig. 5. Instances of consequence operations Cn(cid:2) with arcs oriented towards the stronger. Cn P I , Cn Pm and Cn PmSection 7.2.2are defined in Section 6; and CnDalal , in 6.1. Prime implicatesJabbour et al. investigate the problem of measuring inconsistency in knowledge bases via counting conflicts [27]. The sort of atomic inconsistency they propose to count has clear similarities to the (cid:2)-conflicts we put forward. Two key differences are that they fix a modular consequence operation, allowing formulas to be weakened only via discarding prime implicates, and conceive a conflict as a pair, in which only one element is a subset of the base. To summarise their approach, we need some definitions:Definition 6.1 (Prime implicate). A clause ψ is a prime implicate of a formula ϕ ∈ L if• ϕ (cid:12) ψ and• for every clause ψ (cid:11), if ϕ (cid:12) ψ (cid:11)and ψ (cid:11) (cid:12) ψ , then ψ and ψ (cid:11)are equivalent.Intuitively, prime implicates can be seen as the strongest clauses implied by a formula. For a given ϕ ∈ L, we denote by P I(ϕ) the set of all prime implicates of ϕ.Example 6.2. Consider the formula ϕ = x1 ∧ (x1 ∨ x2) ∧ (¬x1 ∨ x3) ∧ (x3 ∨ x4) in L. Note that each conjunct in ϕ is a clause implied by it: x1, x1 ∨ x2, ¬x1 ∨ x3, x3 ∨ x4 ∈ Cn({ϕ}). As x1 implies x1 ∨ x2, the latter is not a prime implicate of ϕ. Applying resolution to x1 and ¬x1 ∨ x3, we can see that ϕ (cid:12) x3. As x3 implies both ¬x1 ∨ x3 and x3 ∨ x4, these two clauses are not prime implicates either. As there are no stronger clauses implied by ϕ, P I(ϕ) = {x1, x3}.Jabbour et al. [27] then employ prime implicates to define a type of conflict, generalising MISes5:Definition 6.3 (DMIS). Let (cid:4) ∈ K be a knowledge base and M = (cid:13)(cid:5), (cid:8)(cid:14) be such that (cid:5) = {ϕ1, . . . , ϕm} ⊆ (cid:4) and (cid:8) ={ψ1, . . . , ψm} ⊆ K. M is a MIS modulo logical deduction DMIS if:• ϕi (cid:12) ψi for all 1 ≤ i ≤ m;• P I(ψi) ⊆ P I(ϕi) for all 1 ≤ i ≤ m;• (cid:8) is a MIS;• For all ψ ∈ (cid:8), there is no ψ (cid:11) ∈ L such that, P I(ψ (cid:11)) ⊆ P I(ψ),6 but ψ (cid:11) (cid:3) ψ and– ψ (cid:12) ψ (cid:11)– ((cid:8) \ {ψ}) ∪ {ψ (cid:11)} is a MIS.As the authors point out, the idea is to capture conflicts between subformulas, where the latter are understood via prime implicates. The last condition imposes a kind of minimality for the MIS (cid:8), where further weakening a ψ ∈ (cid:8) would make (cid:8) consistent.5 Jabbour et al. actually use the term “MUS” (minimal unsatisfiable subset), but we continue with our notation, knowing both concepts are equivalent.6 The authors originally do not require such a relation between the sets of prime implicates [27]. Nevertheless, it seems to be intended, for without it only singletons could be DMISes. This is due to the fact that the MIS (cid:8) in the definition could be weakened to ((cid:8) \ {ψ1}) ∪ {ψ1 ∨ ¬ψ2} and would still be a MIS.G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151133Example 6.4. To illustrate how DMISes work, consider again Example 3.3, where (cid:4) = {¬s ∧ ¬g, (s ∨ m) ∧ g, ¬m}. Recall that (cid:5) = {¬s ∧ ¬g, (s ∨ m) ∧ g} is the only MIS in (cid:4). One can see that (cid:13)(cid:5), {¬g, g}(cid:14) satisfies the definition of DMIS. Besides, note that ¬s, s ∨ m and ¬m are consequences and prime implicates of ¬s ∧ ¬g, (s ∨ m) ∧ g and ¬m, respectively. Furthermore, (cid:8) = {¬s, s ∨ m, ¬m} is a MIS satisfying the last condition in the definition above. Hence (cid:13)(cid:4), (cid:8)(cid:14) is also a DMIS.A working assumption in the present work is that conflicts must be localised in the knowledge base; i.e., that every con-flict of a knowledge base should be its subset. DMIS is defined as a pair, where the first element is a subset of the knowledge base, while the second is a minimal inconsistent set that can be derived from it. Therefore, to present a correspondence between the framework we introduced and DMISes, we consider only their first element:Definition 6.5 (DMIS-conflict). A knowledge base (cid:4) ∈ K is a DMIS-conflict if there is a DMIS (cid:13)(cid:4), (cid:5)(cid:14).Now we can investigate the relation between DMIS-conflicts and (cid:2)-conflicts. Since DMIS-conflicts employ prime im-plicates to find the parts of formulas forming a conflict, we employ a corresponding consequence operation Cn(cid:2). Let Cn P I : K → K be a modular consequence operator such that, for all ϕ, ψ ∈ L, ψ ∈ Cn P I ({ϕ}) iff ϕ (cid:12) ψ and P I(ψ) ⊆ P I(ϕ).Proposition 6.6. Consider the consequence operation Cn(cid:2) = Cn P I and a knowledge base (cid:4) ∈ K. If (cid:4) is a DMIS-conflict, then (cid:4) is a (cid:2)-conflict.The equivalence between DMIS-conflicts and (cid:2)-conflicts, for Cn(cid:2) = Cn P I , does not hold, due to the fact that DMIS-conflicts are defined via weakening each formula once, while (cid:2)-weakenings allow multiple consequences of the same formula.Example 6.7. Consider the consequence operation Cn(cid:2) = Cn P I , the formulas ϕ = (x1 ∨ x2) ∧ (¬x2 ∨ x3 ∨ x4) ∧ (x1 ∨ x3), ψ = ¬x1 ∧ ¬x3 and θ = ¬x4 in L and the knowledge base (cid:4) = {ϕ, ψ, θ} in K. Computing the prime implicates of each formula in (cid:4), we have:• P I(ϕ) = {x1 ∨ x2, ¬x2 ∨ x3 ∨ x4, x1 ∨ x3};• P I(ψ) = {¬x1, ¬x3};• P I(θ) = {¬x4}.Note that x1 ∨ x2, ¬x2 ∨ x3 ∨ x4 ∈ Cn(cid:2)({ϕ}), ¬x1 ∧ ¬x3 ∈ Cn(cid:2)({ψ}) and ¬x4 ∈ Cn(cid:2)({θ}). Therefore, the knowledge base (cid:5) ={x1 ∨ x2, ¬x2 ∨ x3 ∨ x4, ¬x1 ∧ ¬x3, ¬x4} is a (cid:2)-weakening of (cid:4). Using resolution on x2, one can see that (cid:5) is inconsistent, but note that each proper subset of it is consistent; thus (cid:5) is a MIS, and (cid:4) is a (cid:2)-conflict. However, as |(cid:5)| > |(cid:4)|, the pair (cid:13)(cid:4), (cid:5)(cid:14) is not a DMIS. One can use conjunction to achieve |(cid:5)| = |(cid:4)|, grouping the consequences of ϕ: (cid:5)(cid:11) = {(x1 ∨ x2) ∧(¬x2 ∨ x3 ∨ x4), ¬x1 ∧ ¬x3, ¬x4}. Applying resolution again, one can note that (x1 ∨ x3 ∨ x4) ∈ P I((x1 ∨ x2) ∧ (¬x2 ∨ x3 ∨ x4), is a MIS, (cid:13)(cid:4), (cid:5)(cid:11)(cid:14) is not a DMIS. but (x1 ∨ x3 ∨ x4) /∈ P I(ϕ), for (x1 ∨ x3) ∈ P I(ϕ) implies (x1 ∨ x3 ∨ x4) Hence, even though (cid:5)(cid:11)In fact, there is no DMIS (cid:13)(cid:4), (cid:8)(cid:14), so (cid:4) is not a DMIS-conflict.What happens in the example above is that more than one Cn P I -consequence of ϕ is needed to form a MIS together with ψ, θ , and, due the nature of prime implicates, their conjunction is not necessarily in Cn P I ({ϕ}). While (cid:2)-conflicts can capture this, DMIS-conflicts fall short, for imposing that each formula in a conflict contributes exactly one formula in the derived MIS. Depending on the application and on the context, one or the other conflict characterisation can be preferred. For instance, if a knowledge base (cid:4) is to be consolidated via weakening each formula exactly once, then DMIS-conflicts are more suitable than (cid:2)-conflicts. Indeed, we could define a different type of (cid:2)-weakening, forcing each formula to be weakened exactly once (using a bijective f in Definition 5.1), to derive a notion of (cid:2)-conflict notion that is equivalent to the DMIS-conflict concept.6.2. Minimal proofs for opposite literalsAnother conflict characterisation is implicitly proposed by Jabbour and Raddaoui [28]. They introduced an inconsistency measure (presented in Section 7.2) based on minimal proofs for opposite literals, xi ∈ X and ¬xi . In this section we focus on the notion of conflict underlying their inconsistency measure, relating it to the (cid:2)-conflicts we propose.While characterising atomic inconsistencies in a knowledge base, instead of looking for minimal subsets implying ⊥, one could search for two minimal sets entailing xi and ¬xi , respectively, for some xi ∈ X . Formally, given a (cid:4) ∈ K, π ⊆ (cid:4) is a minimal proof for a literal y if [28]:• y ∈ Lit(π );• y ∈ Cn(π );• π (cid:11) (cid:2) π implies y /∈ Cn(π (cid:11)).134G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151For a given knowledge base (cid:4) ∈ K, let P (cid:4)m( y) ⊆ 2(cid:4) denote the set of the minimal proofs (in (cid:4)) of the literal y.Example 6.8. Consider the base (cid:4) = {¬s ∧ ¬g, (s ∨ m) ∧ g, ¬m} from Example 3.3. For each atomic proposition involved, we list the minimal proofs for the corresponding literals:• P (cid:4)• P (cid:4)• P (cid:4)m(s) = {{(s ∨ m) ∧ g, ¬m}}, P (cid:4)m(g) = {{(s ∨ m) ∧ g}}, P (cid:4)m(m) = {{¬s ∧ ¬g, (s ∨ m) ∧ g}}, P (cid:4)m(¬s) = {{¬s ∧ ¬g}};m(¬g) = {{¬s ∧ ¬g}};m(¬m) = {{¬m}}.Jabbour and Raddaoui [28] proceed to define an inconsistency measure that counts in how many different ways xiand ¬xi can be proved from a base, for every xi appearing in the base. Putting it differently, they suggest the degree of inconsistency of a knowledge base is the number of pairs (cid:13)(cid:5), (cid:5)(cid:11)(cid:14) such that (cid:5) is a minimal proof for xi and (cid:5)(cid:11)is a minimal proof for ¬xi . Even though the authors do not explicitly define it, each such pair can be regarded as a sort of conflict in the base. As we want a conflict to be simply a subset of the base, we can take the union of such minimal proofs:Definition 6.9 (Opposite-literals conflict). A knowledge base (cid:4) ∈ K is an opposite-literals conflict if there are (cid:5), (cid:5)(cid:11) ⊆ (cid:4) and a xi ∈ X such that (cid:5) and (cid:5)(cid:11)are minimal proofs of xi and ¬xi , respectively, and (cid:4) = (cid:5) ∪ (cid:5)(cid:11).Minimal inconsistent sets are naturally opposite-literals conflicts, but the converse does not hold, as the following exam-ple shows:Example 6.10. Back to Examples 3.3 and 6.8, where (cid:4) = {¬s ∧ ¬g, (s ∨ m) ∧ g, ¬m}, recall that (cid:8) = {¬s ∧ ¬g, (s ∨ m) ∧ g} is the only MIS in (cid:4). Nevertheless, taking the minimal proofs of s and ¬s, we have (cid:5) = {(s ∨ m) ∧ g, ¬m} and (cid:5)(cid:11) = ¬s ∧ ¬g, respectively. Since (cid:4) = (cid:5) ∪ (cid:5)(cid:11), (cid:4) is an opposite-literals conflict. Considering the literals m, ¬m, we would arrive at the same conclusion.Contrarily to minimal inconsistent sets, opposite-literal conflicts take into account the path to prove the contradiction. In the example above, premises for the contradiction to be proved via g and ¬g are strictly contained on the premises used to prove ⊥ through s and ¬s, making MISes unable to capture the larger conflict.To relate conflicts based on contradicting atomic propositions to our framework, we need a consequence operation that derives these pairs of opposite literals. Let Cn Pm : K → K be a consequence operation defined as Cn Pm ((cid:4)) = { y ∈Cn((cid:4))| y is a literal} for any (cid:4) ∈ K. As Cn Pm ((cid:4)) contains only literals, every minimal inconsistent subset Cn Pm ((cid:4)) has the form {xi, ¬xi}, for some atomic proposition xi ∈ X . For a given (cid:8) = {xi, ¬xi} in MIS(Cn Pm ((cid:4))), we can employ a function f : (cid:8) → (cid:4) to trace back the minimal set of premises in (cid:4) used to derive each literal in (cid:8). Each opposite-literals conflict corresponds then to a (cid:2)-conflict yielded by the range of such a function.Proposition 6.11. Consider the consequence operation Cn(cid:2) = Cn Pm . If a knowledge base (cid:4) ∈ K is an opposite-literals conflict, then it is a (cid:2)-conflict.Note that the converse is not true. Consider for instance the base (cid:4) = {x1 ∧ ¬x1, x2 ∧ ¬x2}. As x1 ∈ Cn Pm ({x1 ∧ ¬x1})and ¬x1 ∈ Cn Pm ({x2 ∧ ¬x2}), (cid:4) is a (cid:2)-conflict. Nevertheless, as x1 does not appear in x2 ∧ ¬x2, the latter is not a minimal proof of a literal involving the former. Analogously, x1 ∧ ¬x1 is not a minimal proof of x2 or ¬x2. Therefore, (cid:4) is not a opposite-literals conflict.In order to find a (cid:2)-conflict definition that is equivalent to the opposite-literals conflict concept, we can try to adapt : K → K be a consequence 2 ((cid:4)) = { y ∈ Cn((cid:4))| y ∈ Lit((cid:4))}. The next example points out the difference between Cn Pm and Cn Pm , forcing an entailed literal to appear in the premises, as minimal proofs do. Let Cn Pm2operation defined as Cn PmCn Pm2 .Example 6.12. Consider the knowledge base (cid:4) = {x1 ∧ ¬x1, x2 ∨ x3}. As (cid:4) is inconsistent, Cn((cid:4)) = L. Therefore, Cn Pm ((cid:4)) ={ y ∈ L| y is a literal}, and x1, x2, · · · ∈ Cn Pm ((cid:4)). In contrast, to be in Cn Pm2 ((cid:4)), a literal must additionally appear in (cid:4). Hence, x1, x2, x3 ∈ Cn Pm2 ((cid:4)). Taking (cid:8) = {x1 ∧ ¬x1}, we have again that Cn Pm ((cid:8)) = { y ∈ L| y is a literal}, but Cn Pm2 ((cid:4)), but x4, x5, . . . /∈ Cn Pm2 ((cid:8)) = {x1, ¬x1}.Using Cn(cid:2) = Cn Pm2 , we can also prove that opposite-literal conflicts are (cid:2)-conflicts:Proposition 6.13. Consider the consequence operation Cn(cid:2) = Cn Pmis a (cid:2)-conflict.2 . If a knowledge base (cid:4) ∈ K is an opposite-literals conflict, then it G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151135Again, the converse does not hold. Consider (cid:4) = {x1 ∧ ¬x1, x2 ∨ x3, ¬x2}. Note that x2 is in Cn Pm2 ({x1 ∧ ¬x1, x2 ∨ x3})2 ((cid:4)) corresponds to the (cid:2)-conflict (cid:4). Nonetheless, there is no but not in Cn Pm2 ({x1 ∧ ¬x1}). Thus, the MIS {x2, ¬x2} ⊆ Cn Pmminimal proof of x2 in (cid:4), and {x1 ∧ ¬x1} is its only opposite-literals conflict.The reason for no (cid:2)-conflict concept having been shown equivalent to the opposite-literals conflict notion is the fact that minimal proofs of y must imply y and contain y, but the minimality is required only for the implication. Nevertheless, since each (cid:2)-conflict presented, Cn(cid:2) = Cn Pm and Cn(cid:2) = Cn Pm2 , encompass all opposite-literals conflicts, their usefulness shall be clear in Section 7.2.7. Applications to inconsistency measuringLocalising the controversial portion of an inconsistent knowledge base, as well as each primitive conflict, may be an end in itself or useful for some consolidation procedures, as Examples 4.9 and 5.7 indicate. Furthermore, via straightforward applications to measuring inconsistency, the role of conflict characterisation in inconsistency handling becomes evident. New primitive conflict characterisations automatically give new inconsistency measures. Additionally, controversial postulates for inconsistency measures can also be reworked on the basis of the framework introduced here.7.1. New inconsistency measuresThe problem of measuring inconsistency in knowledge bases over logical languages has increasingly received attention during recent years (for a survey, see [42,43]). An inconsistency measure is a function I : K → [0, ∞) ∪ {∞}.7 which takes knowledge bases and returns non-negative real numbers or ∞. Additionally, one expects that such a function hold basic properties, which were proposed by Hunter and Konieczny [24,25] in their basic inconsistency measure definition and became rationality postulates:Definition 7.1. Let I : K → [0, ∞) ∪ {∞} be an inconsistency measure:• (Consistency) For any (cid:4) ∈ K, I((cid:4)) = 0 iff (cid:4) is consistent.• (Monotonicity) For any (cid:4) ∪ {α} ∈ K, I((cid:4) ∪ {α}) ≥ I((cid:4)).• (Independence) For any (cid:4) ∈ K and ϕ ∈ (cid:4), if ϕ is free in (cid:4), then I((cid:4) \ {ϕ}) = I((cid:4)).• (Dominance) For any (cid:4) ∈ K and ϕ, ψ ∈ L, if ϕ (cid:12) ψ and ϕ (cid:3) ⊥, then I((cid:4) ∪ {ϕ}) ≥ I((cid:4) ∪ {ψ}).A direct approach to try to satisfy these postulates is measuring the inconsistency of a knowledge base through its minimal inconsistent subsets. The underlying rationale is that the more MISes a base contains, the more inconsistent it is. The simplest MIS-based measure just counts the MISes in the base [24]:IM I S ((cid:4)) = |MIS((cid:4))| .Despite the fact that IM I S considers the number of minimal inconsistent sets, it does not assess their severity. A way to accomplish that is grounded in the idea that the larger the MIS, the less inconsistent it is. Based on this, the following inconsistency measure is defined in a way that each MIS’s contribution to the whole inconsistency is inversely proportional to its size [24]:IM I S C ((cid:4)) =(cid:3)(cid:5)∈MIS((cid:4))1|(cid:5)|.Even though IM I S and IM I S C satisfy (Consistency), (Monotony) and (Independence) but not (Dominance), they clearly fail to capture conflicts different from minimal inconsistent sets.Example 7.2. Consider again (cid:4) = {¬s ∧ ¬g, (s ∨ m) ∧ g, ¬m} from Example 3.3. The single MIS in (cid:4) is (cid:5) = {¬s ∧ ¬g, (s ∨m) ∧ g, }. Hence, IM I S ((cid:4)) = IM I S ((cid:5)) = 1 and IM I S C ((cid:5)) = 1/2. In fact, since ¬m is free in (cid:4), (Independence) requires that its withdrawal from the base does not alter the inconsistency measurement. Therefore, any inconsistency measure I satisfying (Independence) is such that I((cid:4)) = I((cid:5)). Nevertheless, as we argued in Example 3.3, ¬m is somehow contributing to the inconsistency.M I S C ((cid:4)) = IAs minimal inconsistent sets have been generalised to (cid:2)-conflicts, parameterised by a consequence operation Cn(cid:2), new inconsistency measures naturally arise.7 We allow inconsistency measurements to be infinite in order to deal with infinite knowledge bases.136G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151I(cid:2)((cid:4)) = |{(cid:5) ⊆ (cid:4)|(cid:5) is a (cid:2) -conflict}| .(cid:3)(cid:2)C ((cid:4)) =I.1|(cid:5)|(cid:5)⊆(cid:4) is a (cid:2)-conflictGiven a consequence operation Cn(cid:2), I(cid:2) and I(cid:2)C are measures designed to capture the derived (cid:2)-conflicts. Consequently, these inconsistency measures are capable of discriminating the knowledge bases (cid:4) and (cid:5) presented in Example 7.2, which is not achieved by any measure satisfying (Independence), such as the recently proposed IC C , IW and Ic f [26] for instance. This is due the fact that (cid:5) = (cid:4) \ {¬m}, with ¬m being free in (cid:4), hence I((cid:4)) = I((cid:5)) for any I satisfying (Independence).Example 7.3. Recall from Example 5.6 that (cid:4) = {¬s ∧ ¬g, (s ∨ m) ∧ g, ¬m} is a (cid:2)-conflict if ¬s ∈ Cn(cid:2)(¬s ∧ ¬g). By Proposi-tion 5.21, the MIS (cid:5) = {¬s ∧¬g, (s ∨m) ∧ g, } is also a (cid:2)-conflict. As the other subsets of (cid:4) are consistent, and Cn(cid:2) is subclas-sical, (cid:4) and (cid:5) are the only (cid:2)-conflicts in (cid:4). Hence, I(cid:2)((cid:4)) = 2 > 1 = I(cid:2)((cid:5)) and I(cid:2)C ((cid:5)).(cid:2)C ((cid:4)) = 1/2 + 1/3 = 5/6 > 1/2 = IProposition 7.4. Consider a subclassical Tarskian consequence operation Cn(cid:2) : K → K. I(cid:2) and Itonicity).(cid:2)C satisfy (Consistency) and (Mono-The postulates of (Independence) and (Dominance) can be either satisfied or violated by I(cid:2) and I(cid:2)C , depending on the choice of the consequence operation Cn(cid:2). In Sections 7.2 and 7.3, these postulates are parametrised by Cn(cid:2), yielding properties that will be shown to hold for I(cid:2) and I(cid:2)C for any Tarskian Cn(cid:2).To better characterise I(cid:2) and I(cid:2)C , we consider some additional properties for inconsistency measures from the literature [41]:Definition 7.5. Let I : K → [0, ∞) ∪ {∞} be an inconsistency measure:• (Super-additivity) For any (cid:4), (cid:5) ∈ K, if (cid:4) ∩ (cid:5) = ∅, then I((cid:4) ∪ (cid:5)) ≥ I((cid:4)) + I((cid:5)).• (Penalty) For any (cid:4) ∈ K and ϕ ∈ (cid:4), if ϕ is not free in (cid:4), then I((cid:4) \ {ϕ}) < I((cid:4)).• (Attenuation) For any (cid:4) ∈ K, if (cid:5)1, (cid:5)2 ∈ MIS((cid:4)) and I((cid:5)1) < I((cid:5)2), then |(cid:5)1| > |(cid:5)2|.• (Equal-conflict) For any (cid:4) ∈ K, if (cid:5)1, (cid:5)2 ∈ MIS((cid:4)) and I((cid:5)1) = I((cid:5)2), then |(cid:5)1| = |(cid:5)2|.Proposition 7.6. Consider a subclassical Tarskian consequence operation Cn(cid:2) : K → K. I(cid:2) and Iand (Attenuation). (Equal-conflict) is satisfied by I(cid:2)C and violated by I(cid:2).(cid:2)C satisfy (Super-additivity), (Penalty) Another way of assessing the behaviour of an inconsistency measure is through its expressivity power. Thimm [42]proposes a method to quantify this expressivity in four dimensions, defined via bounding either the size of, or the num-ber of atoms in, either the whole knowledge base or each formula. Although we do not formally present Thimm’s whole framework, it can be proved that, for any Tarskian Cn(cid:2), I(cid:2) and IM I S C , have the highest possible expressivity for three of out the four dimensions. This is due to the fact that every minimal inconsistent set is a (cid:2)-conflict. The remaining dimension is when the size of knowledge bases is fixed, when both I(cid:2) and I(cid:2)C , similarly to IM I S and I(cid:2)C have finite range.Inconsistency measures can be employed to guide the repair of inconsistent knowledge bases. For instance, Grant and Hunter [18] presented a stepwise inconsistency resolution procedure where at each step a formula is weakened, split or deleted, aiming at reducing the inconsistency degree of the knowledge base. Although a detailed discussion of such methods is out of the scope of this work, a modular consequence operation Cn(cid:2) can formalise a particular way of weakening formulas, yielding measures I(cid:2) and I(cid:2)C that could drive a repair method for knowledge bases.7.2. New independence propertiesApart from enabling us to put forward new inconsistency measures, the concepts introduced in the present work allow us to generalise some postulates for inconsistency measures. From Example 7.3, where discarding the free formula ¬mdecreases the inconsistency measurement, one can note that the corresponding I(cid:2) and I(cid:2)C fail to satisfy (Independence). This is not surprising, since this postulate is strongly linked to minimal inconsistent sets being conceived as the primitive conflicts or atomic inconsistencies in a knowledge base. The (Independence) postulate has been criticised for this [8,11], and a relaxed version was proposed in the probabilistic logic context [11]. Actually, the proponents of (Independence) have acknowledged that it may be too strong a property to require in some cases [25], suggesting a weaker version:Postulate 7.7 (Weak independence). For any (cid:4) ∈ K and ϕ ∈ (cid:4), if ϕ is safe in (cid:4), then I((cid:4) \ {ϕ}) = I((cid:4)).Considering the possibility of I(cid:2) and I(cid:2)C satisfying (Weak Independence) for any subclassical, Tarskian Cn(cid:2), Theorem 4.13points to a negative answer as well. For instance, consider a modular consequence operation such that (cid:12)(cid:2)= (cid:12). In the base (cid:4) = {x1 ∧ ¬x1, x2}, x2 is safe, and (Weak Independence) implies I((cid:4)) = I((cid:4) \ {x2}). Nevertheless, by Theorem 4.13, x2 is G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151137not (cid:2)-innocuous, for it is not valid — note that {x1 ∧ ¬x1 ∨ ¬x2, x2} is a MIS and (cid:2)-weakening of (cid:4). By Theorem 5.11, x2must be in a (cid:2)-conflict of (cid:4), thus discarding x2 should impact the inconsistency degree given by I(cid:2) and I(cid:2)C . Indeed, (cid:4) and (cid:4) \ {x2} are the only (cid:2)-conflicts in (cid:4), so I(cid:2)((cid:4)) > I(cid:2)((cid:4) \ {x2}) and I(cid:2)C ((cid:4) \ {x2}).(cid:2)C ((cid:4)) > ISince the problem with (Independence) is its strong dependency on minimal inconsistent sets, and these are generalised by (cid:2)-conflicts, a natural idea is to parameterise the postulate by the conflict characterisation.Property 7.8 ((cid:2)-Independence). For any (cid:4) ∈ K and ϕ ∈ (cid:4), if ϕ is (cid:2)-free in (cid:4), then I((cid:4) \ {ϕ}) = I((cid:4)).We call ((cid:2)-Independence) a property, and not a postulate, due to the fact that we do not intend to impose any instance of it as a rationality constraint on inconsistency measures.Recall that a formula is (cid:2)-free in a knowledge base (cid:4) if it does not belong to any (cid:2)-conflict in (cid:4). If Cn(cid:2) is the iden-tity function, then (cid:2)-conflicts are the minimal inconsistent subsets of the base, and ((cid:2)-Independence) is equivalent to (Independence). In the other extreme, if Cn(cid:2) is the classical consequence operation Cn, or even a modular consequence operation such that (cid:12)(cid:2)= (cid:12), then only valid formulas are (cid:2)-free in inconsistent bases. In that case, ((cid:2)-Independence) be-comes independence from tautologies, which is the weakest instance of the property. Arguably, the raising of this instance of ((cid:2)-Independence) to a postulate would be the least disputable.Naturally, measures entirely based on (cid:2)-conflicts enjoy ((cid:2)-Independence):Proposition 7.9. Consider a subclassical, Tarskian consequence operation Cn(cid:2) : K → K. I(cid:2) and I(cid:2)C satisfy ((cid:2)-Independence).Given a consequence operation Cn(cid:2), we have both a pair of inconsistency measures I(cid:2) and I(cid:2)C and a ((cid:2)-Independence) property that holds for them. That is, each possible ((cid:2)-Independence) property is satisfied by some inconsistency measure. This can be regarded as a rather trivial achievement, for both the measures and the property are based on (cid:2)-conflicts. Nevertheless, we put forward ((cid:2)-Independence) properties to be employed as a tool to classify inconsistency measures that do not satisfy the original (Independence), capturing the sort of atomic inconsistencies they are independent from. To illustrate that usefulness, we analyse two measures from the literature.Grant and Hunter [19,20] introduce a family of inconsistency measures based on distance from consistency. They consider the set of valuations satisfying each formula in a knowledge base and then measure how much these sets should be modified for their intersection to be non-empty. Formally, if V is the set of valuations v : L → {0, 1}, the Dalal distance [9]is a function d : V × V → [0, ∞) ∪ {∞} defined as:d(v, v(cid:11)) =(cid:4)(cid:5)(cid:4)xi ∈ X|v(xi) (cid:19)= v(cid:11)(cid:6)(cid:4)(cid:4)(xi)In other words, d(v, vdisagree. Using this distance between valuations, a distance D : V × 2V → [0, ∞) ∪ {∞} can be defined, for any v ∈ V and any non-empty set W ⊆ V , as:(cid:11)) counts the number of atomic propositions on which the valuations v and v(cid:11)D(v, W ) = min{d(v, v(cid:11))|v(cid:11) ∈ W }Given an inconsistent knowledge base (cid:4) that is formed by consistent formulas, one can compute the distance between a given valuation v ∈ V and the set of valuations satisfying each ϕ ∈ (cid:4). By looking for the valuation v ∈ V minimising the sum or the maximum of such distances, two inconsistency measures arise. Let Kc denote the set of knowledge bases in K containing only consistent formulas. For any ϕ ∈ L, define [[ϕ]] = {v ∈ V , v(ϕ) = 1}. For any (cid:4) ∈ K, the inconsistency measures I sumDalal: Kc → [0, ∞) are defined as:: Kc → [0, ∞) and ImaxDalalDalal((cid:4)) = minI sumDalal((cid:4)) = minImax⎧⎨(cid:3)⎩(cid:13)ϕ∈(cid:4)maxϕ∈(cid:4)⎫⎬⎭(cid:14)(cid:4)(cid:4)v ∈ VD(v, [[ϕ]])(cid:4)(cid:4)v ∈ VD(v, [[ϕ]])Example 7.10. Let (cid:4) = {x1 ∧ x2 ∧ x3 ∧ x4, ¬x1 ∧ ¬x2 ∧ x5 ∧ x6, (¬x3 ∨ ¬x5) ∧ (¬x4 ∨ ¬x6)} be a knowledge base in K. Consider the valuation v : L → {0, 1} such that v(x1 ∧ ¬x2 ∧ x3 ∧ x4 ∧ x5 ∧ x6) = 1. Computing the Dalal distances, we have:D(v, [[x1 ∧ x2 ∧ x3 ∧ x4]]) = D(v, [[¬x1 ∧ ¬x2 ∧ x5 ∧ x6]] = 1 andD(v, [[(¬x3 ∨ ¬x5) ∧ (¬x4 ∨ ¬x6)]] = 2 .(cid:15)ϕ∈(cid:4)Consequently, D(v, [[ϕ]]) = 4 and maxϕ∈(cid:4)D(v, [[ϕ]]) = 2. The reader can check that there is no other valuation yielding a lesser sum (or maximum) for the Dalal distances. Intuitively, the conflicts {x1, ¬x1}, {x2, ¬x2}, {x3, x5, ¬x3 ∨ ¬x5} and (cid:11) : L →{x4, x6, ¬x4 ∨ ¬x6} are each responsible for a unitary summand in D(v, [[ϕ]]) = 4. Therefore, any valuation v(cid:15)ϕ∈(cid:4)138G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151(cid:15){0, 1} is such that D(v(cid:11), [[ϕ]]) ≥ 4. Hence, at least a ϕ ∈ (cid:4) must be such that D(v(cid:11), [[ϕ]]) ≥ 2, for any v(cid:11). So we have ϕ∈(cid:4)Dalal((cid:4)) = 4 and ImaxI sumDalal((cid:4)) = 2.Now note that (cid:5) = {x1 ∧ x2 ∧ x3 ∧ x4, ¬x1 ∧ ¬x2 ∧ x5 ∧ x6} is the only minimal inconsistent subset of (cid:4). Using the same (cid:15)D(v, [[ϕ]]) = 1. Again, the reader can check that these are the minimum valuation, we have D(v, [[ϕ]]) = 2 and maxϕ∈(cid:5)ϕ∈(cid:5)attainable values, thus I sumDalal((cid:5)) = 2 and ImaxDalal((cid:5)) = 1.In the example above, one can tell that (Independence) is violated by both I sumDalal and ImaxDalal: θ = (¬x3 ∨¬x5) ∧(¬x4 ∨¬x6)is free in (cid:4), but I sumDalal((cid:4) \ {θ}).A (cid:2)-conflict whose corresponding ((cid:2)-Independence) is satisfied by I sumDalal((cid:4) \ {θ}) and ImaxDalal((cid:4)) > I sumDalal((cid:4)) > ImaxDalal can be constructed via analysing the underlying consolidation procedure of the measures. These measures dilate the set of valuations satisfying each formula until the knowledge base is satisfiable. Such dilation in the models is dual to a weakening in the formulas, which can be encoded into a modular consequence operation.Dalal and ImaxFormally, for any ϕ ∈ L and n ∈ N ∪ {∞}, let ϕn ∈ L denote an arbitrary formula such that [[ϕn]] = {v ∈ V |D(v, [[ϕ]]) ≤n}. Let CnDalal : K → K be a modular consequence operation such that ψ ∈ CnDalal(ϕ) iff ψ is equivalent to ϕn for some n ∈ N ∪ {∞}.8 Since CnDalal is modular, the corresponding (cid:2)-conflicts can be defined via (cid:2)-weakenings, using Definition 5.2, and the derived definition of (cid:2)-free yields a suitable version of ((cid:2)-Independence):Proposition 7.11. Consider the consequence operation Cn(cid:2) = CnDalal. I sumDalal and ImaxDalal satisfy ((cid:2)-Independence).For instance, recall the situation in Example 7.10, where (cid:4) = {ϕ, ψ, (¬x3 ∨ ¬x5) ∧ (¬x4 ∨ ¬x6)}, where ϕ = x1 ∧ x2 ∧ x3 ∧ x4and ψ = ¬x1 ∧ ¬x2 ∧ x5 ∧ x6. Using Cn(cid:2) = CnDalal, we can weaken ϕ and ψ to form:ϕ1 = x1 ∧ x2 ∧ x3 ∨ x1 ∧ x2 ∧ x4 ∨ x1 ∧ x3 ∧ x4 ∨ x2 ∧ x3 ∧ x4ψ 1 = ¬x1 ∧ ¬x2 ∧ x5 ∨ ¬x1 ∧ ¬x2 ∧ x6 ∨ ¬x1 ∧ x5 ∧ x6 ∨ ¬x2 ∧ x5 ∧ x6is modular. The base (cid:5) =Note that ϕ1 ∈ CnDalal({ϕ}) and ψ1 ∈ CnDalal({ψ}), thus ϕ1, ψ1 ∈ CnDalal((cid:4)), for CnDalal{ϕ1, ψ 1, (¬x3 ∨ ¬x5) ∧ (¬x4 ∨ ¬x6)} ⊆ CnDalal((cid:4)) is a (cid:2)-weakening of (cid:4). As (cid:5) is a MIS, (cid:4) is a (cid:2)-conflict. Therefore, θ = (¬x3 ∨ ¬x5) ∧ (¬x4 ∨ ¬x6) is not (cid:2)-free in (cid:4). Consequently, the fact that I sumDalal((cid:4)) >ImaxDalal((cid:4) \ {θ}) does not imply violating ((cid:2)-Independence).Another example of inconsistency measure in which (cid:2)-conflicts can be suitably applied to find the “uncontroversial” for-mulas is due to Jabbour and Raddaoui [28]. They introduced an inconsistency measure based on minimal proofs for opposite literals — which are presented in Section 6.2. Their measure intuitively counts in how many different ways a contradiction of the form {xi, ¬xi} can be proved from an inconsistent (cid:4), in terms of the premises for deriving each conflicting literal.Dalal((cid:4) \ {θ}) and ImaxDalal((cid:4)) > I sumFormally, recall from Section 6.2 that P (cid:4)authors then define the inconsistency measure IPmm( y) ⊆ 2(cid:4) denotes the set of the minimal proofs (in (cid:4)) of the literal y. The : K → [0, ∞) ∪ ∞, for all (cid:4) ∈ K, as [28]9:(cid:3)IPm ((cid:4)) =|P (cid:4)m(xi)|.|P (cid:4)m(¬xi)|xi ∈ XExample 7.12. Jabbour and Raddaoui [28] provide the following example: (cid:4) = {x1 ∧ ¬x1, x1}. There are two minimal proofs of x1, {x1 ∧ ¬x1} and {x1}, and only one minimal proof of ¬x1, {x1 ∧ ¬x1}. As no other literal appears in (cid:4), in order to compute IPm ((cid:4)) one can ignore other atomic propositions than x1:IPm ((cid:4)) = |P (cid:4)m(x1)|.|P (cid:4)m(¬x1)| = 2 × 1 = 2 .If one considers the singleton (cid:5) = {x1 ∧ ¬x1}, there is only one minimal proof for each y ∈ {x1, ¬x1}, and IPm ((cid:5)) = 1.Jabbour and Raddaoui [28] note that IPm does not satisfy (Independence), pointing to the counterexample above — note that x1 is free in (cid:4). Using the consequence operations Cn(cid:2) = Cn Pm or Cn(cid:2) = Cn Pm2 , introduced in Section 6.2, we can again employ the (cid:2)-free formula concept to identify the formulas that do not contribute to the base’s degree of inconsistency. As proved in Section 6.2, the corresponding (cid:2)-conflict definitions captures the subsets of a base that are the union of minimal proofs of both xi and ¬xi , for some xi . Consequently, the corresponding (cid:2)-free formulas yield ((cid:2)-Independence) properties suitable for IPm :Proposition 7.13. If either Cn(cid:2) = Cn Pm or Cn(cid:2) = Cn Pm2 , then IPm satisfies ((cid:2)-Independence).8 The possibility of n = ∞ allows any formula to be weakened to a tautology.9 The original definition is different, but we employ a characterisation given by the authors [28].G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151139In this section, to derive new versions of the (Independence) postulate, we have replaced “free formula” by “(cid:2)-free formula” in its definition. Alternatively, we could have used (cid:2)-innocuous formulas to define another form of (Independence):(cid:11)Property 7.14 ((cid:2)-Independence). For any (cid:4) ∈ K and ϕ ∈ (cid:4), if ϕ is (cid:2)-innocuous in (cid:4), then I((cid:4) \ {ϕ}) = I((cid:4)).Corollary 7.15. If Cn(cid:2) is a modular, subclassical, Tarskian consequence operation, ((cid:2)-Independence) and ((cid:2)-Independence’) are equiv-alent.In some contexts, this might be a more useful property. For instance, if one considers (cid:2)-consolidating a knowledge ) will ignore exactly those ((cid:2)-innocuous) formulas that can be (cid:11)base, an inconsistency measure satisfying ((cid:2)-Independencebypassed while restoring consistency (see Proposition 4.10).A postulate related to (Independence) is (Ind-Decomposability) [26], which requires that inconsistency measures be ad-ditive over partitions of the knowledge base that do not break any minimal inconsistent set. Replacing minimal inconsistent sets by (cid:2)-conflicts in the definition of (Ind-decomposability) we could similarly obtain a property parameterised by Cn(cid:2), which would hold for instance for I(cid:2) and I(cid:2)C .7.3. New dominance propertiesAn arguably more problematic postulate is (Dominance). This postulate seems sensible to the extent that it requires that replacing a consistent formula in a knowledge base by a logically weaker one should not increase its inconsistency degree. Besnard [8] argues against (Dominance), analysing its behaviour on disjunctions. Jabbour et al. [27] note that the measure IM I S , based on minimal inconsistent sets, does not satisfy (Dominance), and that it would be “rarely (be) satisfied by syntactic measures”. They propose a weaker version of the postulate, claimed as more rational, that is satisfied by an inconsistency measure they also introduce. What neither author criticise is the following consequence of (Dominance) along with (Monotonicity), which was noted by Besnard, but not remarked on as a problem [8]:Proposition 7.16. Let I : K → [0, ∞) ∪ {∞} be an inconsistency measure that satisfies (Monotonicity) and (Dominance) and consider a (cid:4) ∈ K. If a ψ ∈ L is such that ψ ∈ Cn(ϕ) for some consistent ϕ ∈ (cid:4), then I((cid:4)) = I((cid:4) ∪ {ψ}).i /∈ (cid:4) be a formula equivalent to ϕi , for 1 ≤ i ≤ m, and define (cid:5) = {ϕ(cid:11)To grasp the consequences of the proposition above, consider an inconsistent base (cid:4) = {ϕ1, . . . , ϕm} formed by consistent formulas. Let ϕ(cid:11)}. Any measure I satisfying (Dominance) and (Monotonicity) must be such that I((cid:4)) = I((cid:4) ∪(cid:5)). In other words, the fact that all conflicts of (cid:4) (MISes or (cid:2)-conflicts) are duplicated in (cid:4) ∪ (cid:5) does not impact the inconsistency degree. Iterating this argument, a base could have its conflicts arbitrarily replicated without having its inconsistency measurement affected. Even though this consequence might be conceivable under some circumstances, we cannot see the case for this being a strict requirement, implied by rationalitypostulates. As (Monotonicity) naturally has a great appeal to intuition, (Dominance) seems too strong to be demanded. Fortunately, this issue can be easily fixed by strictly encoding the intuition that replacing a consistent formula for a weaker one should not increase the inconsistency degree10:1, . . . , ϕ(cid:11)mPostulate 7.17 (Dominance(cid:11)). For any (cid:4) ∈ K and ϕ, ψ ∈ L \ (cid:4), if ϕ (cid:12) ψ and ϕ (cid:3) ⊥, then I((cid:4) ∪ {ϕ}) ≥ I((cid:4) ∪ {ψ}.(cid:11)Besnard’s [8] objections to (Dominance) also apply to (Dominance), although we do not endorse them. His argument considers a knowledge base (cid:4) = {x1 ∧ x2 ∧ · · · ∧ xn} and the formulas ϕ = ¬x1 and ψ = ¬x1 ∨ (¬x2 ∧ ¬x3 ∧ · · · ∧ ¬xn) in L, for some large n ≥ 3. He states that the inconsistency in (cid:4) ∪ {ϕ} is x1 versus ¬x1, while the inconsistency in (cid:4) ∪ {ψ} is either the same (x1 versus ¬x1) or x2 ∧ x3 ∧ . . . xn versus ¬x2 ∧ ¬x3 ∧ . . . ¬xn, and the latter inconsistency could be viewed as more severe than the former. He concludes that it is conceivable that I((cid:4) ∪ {ϕ}) < I((cid:4) ∪ {ψ}), violating (Dominance) and (Dominance). To address this, Besnard proposes a system of postulates that does not include (Dominance) but implies it. To replace (Dominance), Besnard suggests a postulate he calls (Conjunction Dominance), which implies, in his objection, I((cid:4) ∪ {ϕ ∧ ψ}) ≥ I((cid:4) ∪ {ψ}). This postulate, together with I((cid:4) ∪ {ϕ}) < I((cid:4) ∪ {ψ}) (claimed as conceivable), would imply I((cid:4) ∪ {ϕ}) < I((cid:4) ∪ {ψ}) ≤ I((cid:4) ∪ {ϕ ∧ ψ}). Nevertheless, note that ϕ is equivalent to ϕ ∧ ψ in his objection, and thus it does not seem reasonable that I((cid:4) ∪ {ϕ ∧ ψ}) > I((cid:4) ∪ {ϕ}).(cid:11)As for the objections from Jabbour et al. [27], (Dominance) is satisfied by some measures from the literature that arguably possess syntactic traits, as Inc presented in [42] (adapted from [13]), Thimm’s Ihs [42], Knight’s η-(in)consistency ) still does not hold for the arguably basic measure IM I S , [29],11 and Grant and Hunter’s Ihitdas the next example shows.[19,20]. However, (Dominance(cid:11)(cid:11)10 Ammoura et al. [2] propose a similar postulate called Weak-Dominance.11 Knight [29] actually defines a consistency value η ∈ [0, 1] for inconsistent bases, which naturally yields an inconsistency degree 1 − η.140G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151Example 7.18. Consider the knowledge base (cid:4) = {x1, x2, x2 ∧ x3} in K and the formulas ϕ = ¬x1 and ψ = x2 → ¬x1 in L. The only MIS in (cid:4) ∪ {ϕ} is {x1, ¬x1}, thus IM I S ((cid:4) ∪ {ϕ}) = 1. The knowledge base (cid:4) ∪ {ψ} has two MISes, {x1, x2, x2 → ¬x1} and {x1, x2 ∧ x3, x2 → ¬x1}, hence IM I S ((cid:4) ∪ {ψ}) = 2. As ϕ, ψ /∈ (cid:4), ϕ is consistent and ϕ (cid:12) ψ , but IM I S ((cid:4) ∪ {ϕ}) < IM I S ((cid:4) ∪ {ψ}), (Dominance) does not hold for IM I S .(cid:11)Jabbour et al. [27] put forward both a weaker version of (Dominance) and a new measure via counting conflicts in order to achieve compatibility. Their approach is based on prime implicates, as indicated in Section 6.1. Using the consequence operation Cn P I , introduced in Section 6.1, and departing from (Dominance),12 their postulate can be stated as:(cid:11)Postulate 7.19 (Weak dominance). For any (cid:4) ∈ K and ϕ, ψ ∈ L \ (cid:4), if ψ ∈ Cn P I ({ϕ}) and ϕ (cid:3) ⊥, then I((cid:4) ∪ {ϕ}) ≥ I((cid:4) ∪ {ψ}.Jabbour et al. [27] prove that an inconsistency measure based on DMISes (see section 6.1) satisfies this postulate. Since Cn P I can be replaced, in the postulate above, by a general modular consequence operation Cn(cid:2), we can define a more general property:Property 7.20 ((cid:2)-Dominance). For any (cid:4) ∈ K and ϕ, ψ ∈ L \ (cid:4), if ϕ (cid:12)(cid:2) ψ and ϕ (cid:3) ⊥, then I((cid:4) ∪ {ϕ}) ≥ I((cid:4) ∪ {ψ}.Adopting the consequence operation Cn(cid:2) = Cn P I , the ((cid:2)-Dominance) property becomes equivalent to the (Weak Dom-inance) postulate. Therefore, the inconsistency measure proposed by Jabbour et al. [27] also satisfies this instance of ((cid:2)-Dominance).The motivations of Jabbour et al. [27] apparently include the search for one way of reconciling a version of (Dominance) with an inconsistency measure based on counting conflicts. Towards that aim, we can prove that the general inconsistency measures I(cid:2) and I(cid:2)C , based on arbitrary (cid:2)-conflicts, satisfy the corresponding version of the dominance property, for the corresponding Cn(cid:2). Putting it differently, each modular, subclassical Tarskian consequence operation Cn(cid:2) gives us a way of reconciling (Dominance) with conflict-based measures.Proposition 7.21. Consider a modular, subclassical, Tarskian consequence operation Cn(cid:2) : K → K. I(cid:2) and I(cid:2)C satisfy ((cid:2)-Dominance).As done for (Independence) in Section 7.2, ((cid:2)-Dominance) properties form a scale parameterised by the modular con-sequence operation Cn(cid:2). The stronger the consequence operation, the more ((cid:2)-Dominance) requires from an inconsistency ). At the other extreme, ϕ (cid:12)(cid:2) ψ implies measure. At one extreme, (cid:12)(cid:2)= (cid:12) and ((cid:2)-Dominance) is equivalent to (Dominanceϕ = ψ and ((cid:2)-Dominance) is vacuous. In the middle, there is a myriad of properties including those deriving from CnDalaland Cn P I , for instance. Furthermore, for each ((cid:2)-Dominance), we have a pair of measures — I(cid:2) and I(cid:2)C — satisfying it, show-ing the whole spectrum is populated. Within this entire range, we do not see sufficient reason to lift a single ((cid:2)-Dominance) property, and its logical consequences, to the status of postulate, for the choice of the corresponding Cn(cid:2) would be arbitrary if not inside with respect to a given context.(cid:11)(cid:11)The weakening of (Dominance) proposed by Jabbour et al. [27] was formulated in a way that enabled it to be satis-fied by an inconsistency measure based solely on the number of conflicts in the bases. That raises the question of why both the postulate and the conflict characterisation had to be modified. In principle, there could be a weaker version of ) that holds for IM I S . Alternatively, counting another sort of conflict could yield an inconsistency measure sat-(Dominance) or even (Dominance), which could support the corresponding postulate endorsement. We proceed to isfying (Dominanceinvestigate both possibilities.Suppose one wants to weaken somehow the (Dominance) postulate for it to hold for IM I S , the measure that simply counts minimal inconsistent subsets in a base. Considering the possible instances of ((cid:2)-Dominance), we find that only a trivial (cid:12)(cid:2) renders a property satisfied by IM I S :(cid:11)(cid:11)Proposition 7.22. Let Cn(cid:2) : K → K be a modular, subclassical, Tarskian consequence operator. IM I S satisfies ((cid:2)-Dominance) iff ϕ (cid:12)(cid:2)ψ implies ϕ and ψ are equivalent for all consistent, non-valid ϕ, ψ ∈ L.In other words, the version of dominance satisfied by IM I S is based on a very weak modular consequence operation: for a consistent ϕ, Cn(cid:2)({ϕ}) contains only tautologies besides formulas equivalent to ϕ. It is hard to conceive a sensible inconsistency measure violating such ((cid:2)-Dominance). This can be assessed as enough evidence supporting the promotion of this specific ((cid:2)-Dominance) to a postulate. Although it is a reasonable requirement indeed, the strength of the related Cn(cid:2)barely justifies the term “dominance”.Instead of justifying some weakening of (Dominance) via IM I S , one might wonder which conflict characterisation could ) or the original (Dominance), arguing in its favour. Let C denote lead to an inconsistency measure satisfying (Dominance(cid:11)12 The original postulate from Jabbour et al. [27] actually allows for ϕ, ψ ∈ (cid:4), but it happens to be violated by the inconsistency measure they devise to satisfy it.G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151141a set of knowledge bases in K that can be regarded as atomic inconsistencies according to some definition. We define IC : K → [0, ∞) ∪ {∞} as the inconsistency measure such that, for all (cid:4) ∈ K:IC((cid:4)) = |{(cid:5) ⊆ (cid:4)|(cid:5) ∈ C}| .For IC to satisfy (Consistency), we need to require that it contains only inconsistent bases and all MISes in K. For instance, if C is the set of all (cid:2)-conflicts, IC = I(cid:2). Now, we can abandon the idea of finding a set C of conflicts whose counting gives an inconsistency measure satisfying (Dominance) in its strongest form.Proposition 7.23. Let C be a set of inconsistent knowledge bases such that MIS(L) ⊆ C. IC does not satisfy (Dominance).Corollary 7.24. There is no subclassical Tarskian consequence operation Cn(cid:2) : K → K such that I(cid:2) satisfies (Dominance).We can then focus on looking for conflict characterisations that suit the weaker (Dominancerather uninteresting set C of conflicts whose counting satisfies the property.(cid:11)). In fact, we can show a Proposition 7.25. Let C ⊆ K be the set of all inconsistent knowledge bases not containing valid formulas. IC satisfies (Dominance(cid:11)).(cid:11)), the characterisation looks quite loose. Hence, this does not seem to prove the case for (DominanceRecall from Theorems 5.10 and 5.22 that any Cn(cid:2) ∈ {Cnmod, Cn} yields the definition of (cid:2)-conflict as being inconsistent bases with no valid formulas. That is, for such Cn(cid:2), I(cid:2) satisfies (Dominance), which is equivalent to the corresponding ((cid:2)-Dominance). Even though we have provided a definition of conflict that induces an inconsistency measure satisfying ). But, it (Dominancemust be remarked that we are not showing that there is no more meaningful conflict notion that could be the basis for an inconsistency measure satisfying (Dominance). Furthermore, the existence of such a conflict definition is not a strict requirement for endorsing (Dominance), thus we are not thoroughly rejecting this postulate. We are just suggesting that the whole spectrum of ((cid:2)-Dominance) properties can be used to provide a more refined description of the behaviour of (cid:11)inconsistency measures, in case they do not enjoy (Dominance).(cid:11)(cid:11)(cid:11)(cid:11)8. Computational complexityThe possibility of applying the introduced concepts of (cid:2)-free/innocuous formula and (cid:2)-conflict to a real-world problem depends on the computational cost with which their instances can be recognised/computed. In this section, we discuss this matter, providing computational complexity bounds for the problems of recognising (cid:2)-free/innocuous formulas and (cid:2)-conflicts, given some assumptions on the corresponding consequence operation Cn(cid:2).We focus on three decision problems: recognising whether a given ϕ ∈ L is (cid:2)-free in a given knowledge base (cid:4) ∈ K, whether ϕ is (cid:2)-innocuous in (cid:4), and whether a given knowledge base (cid:4) is a (cid:2)-conflict. Computational complexity bounds for these decision problems imply bounds for the corresponding tasks of actually finding the (cid:2)-conflicts and (cid:2)-innocuous/free formulas in a knowledge base. Formally, these decisions problems are encoded via languages, which are sets of strings; i.e., we are interested in the problem of deciding whether a given input (string) is in a set (language):Definition 8.1. Consider a subclassical, Tarskian consequence operation Cn(cid:2).• (cid:2)-FREE is the language formed by the pairs (cid:13)ϕ, (cid:4)(cid:14) ∈ L × K such that ϕ is (cid:2)-free in (cid:4).• (cid:2)-INNOCUOUS is the language formed by the pairs (cid:13)ϕ, (cid:4)(cid:14) ∈ L × K such that ϕ is (cid:2)-innocuous in (cid:4).• (cid:2)-CONFLICT is the language formed by the knowledge bases (cid:4) ∈ K that are (cid:2)-conflicts.• (cid:2)-CONSEQUENCE is the language formed by the pairs (cid:13)ϕ, (cid:4)(cid:14) ∈ L × K such that ϕ ∈ Cn(cid:2)((cid:4)).We denote by FREE and MIS the particular cases of (cid:2)-FREE and (cid:2)-CONFLICT, respectively, where Cn(cid:2) = CnId. The fourth language in the definition above captures the computational complexity of the consequence operation Cn(cid:2), to which the complexity of the other languages are clearly tied.To classify these decision problems, we employ the standard complexity classes P, NP, coNP, PSPACE, (cid:14) pi , for i ∈ N, and the notion of completeness for a class (see for instance [5] for a computational complexity introduction). As usual, PNP and NPNP are the classes of problems that are in P or NP, respectively, if an oracle for Boolean satisfiability (SAT) is given. Additionally, we use DP [35] to denote the class containing the languages A ∩ B where A is a language in NP and Bis a language in coNP. As these computational complexity classes relate the time/space usage to the size of the input, we (cid:20)ϕ(cid:20) and (cid:20)ϕ(cid:20) is the use (cid:20)x(cid:20) to denote the length of string x where, for any (cid:13)ϕ, (cid:4)(cid:14) ∈ L × K, (cid:20)(cid:13)ϕ, (cid:4)(cid:14)(cid:20) = (cid:20)ϕ(cid:20) + (cid:20)(cid:4)(cid:20), (cid:20)(cid:4)(cid:20) =i and (cid:15)p(cid:15)ϕ∈(cid:4)quantity of symbols (variables, connectives, parentheses) used in ϕ.In order to obtain complexity results, some assumption on Cn(cid:2) is needed. Consider the language (cid:2)-CONFLICT. By defini-tion, a given (cid:4) is in (cid:2)-CONFLICT iff there if there are a (cid:5) ∈ MIS(Cn(cid:2)((cid:4))) and a (cid:2)-mapping f : (cid:5) → 2(cid:4) . That is, to confirm that a knowledge base (cid:4) is a (cid:2)-conflict, we have to find such a (cid:5) in Cn(cid:2)((cid:4)). Without any restriction on the size of (cid:5), we 142G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151cannot give any bound on the time and space required to decide whether (cid:4) is in (cid:2)-CONFLICT. This is due to the fact that in principle the smallest (cid:5) ∈ MIS(Cn(cid:2)((cid:4))) enjoying the sought-after properties can be arbitrarily large since Cn(cid:2)((cid:4)) can indeed be infinite. As (cid:2)-free formulas are defined through (cid:2)-conflicts, this issue inflicts the complexity analysis of (cid:2)-FREE as well, which is equal to (cid:2)-INNOCUOUS for modular Cn(cid:2). In order to circumvent this situation in such a way that these decisions problems stay within the polynomial hierarchy, we impose some restrictions on Cn(cid:2):Definition 8.2 (p-bounded). A subclassical, Tarskian consequence operation Cn(cid:2) is p-bounded if there is a polynomial q : R →R such that, for every (cid:2)-conflict (cid:4) ∈ K, there are a (cid:5) ∈ MIS(Cn(cid:2)((cid:4))), with (cid:20)(cid:5)(cid:20) ≤ q((cid:20)(cid:4)(cid:20)), and a (cid:2)-mapping f : (cid:5) → 2(cid:4) .Informally, for p-bounded consequence operations Cn(cid:2), a (cid:2)-conflict is characterised as the union of the minimal sets of premises used to derive each element in a minimal inconsistent set whose size is polynomially bounded. In the modular case, a consequence operation is p-bounded simply if every (cid:2)-conflict has a polynomially size-bounded (cid:2)-weakening that is a minimal inconsistent set. Most consequence operations presented here are in fact p-bounded:Proposition 8.3. Cn, Cnmod, Cnid, Cn∧, Cn→∧2 , Cn, Cn Pm and Cn Pm2are p-bounded.Now we are ready to provide some complexity bound to (cid:2)-CONFLICT and (cid:2)-FREE, linked to a bound for the corresponding (cid:2)-CONSEQUENCE:Proposition 8.4. Consider a subclassical, Tarskian consequence operation Cn(cid:2) that is p-bounded. If (cid:2)-CONSEQUENCE is in (cid:14) p2or (cid:2)-CONSEQUENCE is in (cid:14) p2 and Cn(cid:2) is modular, then (cid:2)-CONFLICT is in (cid:14) p2 , and (cid:2)-FREE is in (cid:15)p2 .∩ (cid:15)p2 , Regarding space complexity, just recall that (cid:14) p2 , (cid:15)p2⊆ PSPACE, thus Proposition 8.4 also implies polynomial-space bounds.When Cn(cid:2) is modular, (cid:2)-FREE and (cid:2)-INNOCUOUS are the same language, thus in the same complexity class. In the 2 , though an extra restriction general case, however, the Cn(cid:2) being p-bounded seems not enough to put (cid:2)-INNOCUOUS in (cid:15)pcould suffice: that for any (cid:2)-innocuous formula ϕ in (cid:4) there is a polynomial-sized (cid:5) ∈ MIS(Cn(cid:2)((cid:4))) containing ϕ.As Proposition 8.4 points out, for modular consequence operations, the restriction on (cid:2)-CONSEQUENCE can be slightly relaxed for the same complexity bounds to follow. Note that even for a general Cn(cid:2) the conditions imposed on (cid:2)-CONSEQUENCE to obtain the results above are not very strong. For instance, (cid:2)-CONSEQUENCE is coNP-complete for the ∩ (cid:15)pclassical consequence operation Cn = Cn(cid:2), and coNP ⊆ (cid:14) p2 . In fact, that condition holds for most consequence opera-2tions presented in this work:Proposition 8.5. If Cn(cid:2) is Cn, Cnmod, Cn Pm, Cn Pm2 , CnId, Cn∧, Cn→∧2 , Cnor Cn P I then (cid:2)-CONSEQUENCE is in (cid:14) p2∩ (cid:15)p2 .To have an idea of how hard it is to recognise (cid:2)-conflicts and (cid:2)-free/innocuous formulas, we can recall the computational complexity analysis of their classical counterparts: minimal inconsistent sets (the language MIS) and free formulas (the language FREE). MIS is DP-complete [34], and we have that NP ⊆ DP ⊆ PNP ⊆ (cid:14) p2 [35]. That is, DP is 2between the first and second levels of the polynomial hierarchy, hence deciding MIS can be regarded as slightly less costly than deciding (cid:2)-CONFLICT, for a p-bounded Cn(cid:2). It is worth noting that, if the polynomial hierarchy collapses in the first level (NP = coNP), then it will follow that DP = (cid:14) p2 , and deciding (cid:2)-CONFLICT, for a p-bounded Cn(cid:2), will be no harder than deciding MIS. It is clear that FREE is in (cid:15)p2 , as a particular case of (cid:2)-FREE, and we could find no better bound for it. Hence, to the best of our knowledge, recognising a (cid:2)-free ((cid:2)-innocuous) formula, for a p-bounded (modular) Cn(cid:2), is theoretically as hard as verifying if the formula is free in the knowledge base. In practice, the proof provided for Proposition 8.4 can form the basis for naive algorithms, based on guessing and verifying, that find (cid:2)-conflicts and (cid:2)-free formulas, although further research should reveal more efficient methods.⊆ NPNP = (cid:14) p∩ (cid:15)p29. Conclusion and future workLocalising inconsistency in knowledge bases is an important step towards better managing inconsistency. Additionally, methods for both measuring and repairing inconsistency can benefit from its localisation. Inconsistent knowledge bases can hide conflicts that are not captured by minimal inconsistent sets. Dually, some formulas regarded as free may be involved in conflicts together with parts of other formulas. To circumvent these issues, we presented (cid:2)-innocuous formulas and (cid:2)-conflicts — which indirectly define (cid:2)-free formulas — as alternative ways to localise the controversial formulas in an inconsistent knowledge base and identify its atomic conflicts. We showed how these concepts generalise free formulas and minimal inconsistent sets and how they relate to an underlying consolidation procedure. We proved that, for modular consequence operations Cn(cid:2), (cid:2)-innocuous and (cid:2)-free formula concepts are extensionally equivalent. We also showed that allowing classical consequences (Cn(cid:2) = Cn or (cid:12)(cid:2)= (cid:12)) yields the trivial notion of (cid:2)-conflict that encompasses all inconsistent bases without tautologies. Applying our framework to measuring inconsistency, we introduced new general inconsistency G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151143measures defined via (cid:2)-conflicts. We investigated the debatable postulates of (Independence) and (Dominance), proposing a formal method to relax them into properties parameterised by the consequence operation Cn(cid:2). In particular, we analysed the possibility of reconciling a version of (Dominance) with an inconsistency measure based on counting conflicts.How one define Cn(cid:2) depends on the application. Though, as a general rule, the expressivity of Cn(cid:2) should reflect the degree to which those considering the knowledge will deconstruct and/or synthase it. For instance, Santos et al. [39] describe different scenarios in belief revision that, for the desirable results to follow, require different subclassical consequence operations to be applied before performing a contraction. Our framework can then be instantiated via these consequence operations in the corresponding situations.Dealing with inconsistency is needed in different areas, for instance in descriptive logic [30] and ontologies [31]. Thus, iceberg inconsistencies may appear in several contexts, under different formal languages. Using classical propositional logi-cal as a prototype, we provided a general framework that can be applied to many different formalisms, such as description logics, probabilistic logics, mathematical constraints, etc. Wherever there is a minimal inconsistent subset, there might be inconsistencies hidden under the water. Once these submerged conflicts are spotted via a consequence operation, (cid:2)-conflicts brings them to the surface, localising its possible causes. Dually, (cid:2)-free formulas are those that do not contribute to these hidden inconsistencies. If inconsistency is to be resolved through a given formal procedure, then (cid:2)-innocuous for-mulas can be safely ignored during the consolidation. In general, formalising a consistency restoring procedure through a (cid:2)-consolidation yields, via our proposal, methods for localising (via (cid:2)-conflicts) and measuring (via I(cid:2)) inconsistency. Due to this flexibility, the ideas we put forward can be adapted to problems in a variety of areas, such as belief revision (see [12]), belief merging, requirements engineering, constraints satisfaction, incoherence measuring in formal epistemology and so on.In requirements engineering, we can envisage that when inconsistencies are found in sets of requirements, our techniques can be used to determine who should be invited to discussions on resolving the inconsistencies (as suggested by Example 3.4and 5.6). Our results show how choices for instance for Cn(cid:2) can affect the identification of (cid:2)-conflicts, which in turn can affect how we can identify participants to the discussions. Similarly, if we want to invoke a procedure for resolving inconsistencies in the set of requirements, and at each stage, we want to reduce the degree of inconsistency, we need to be clear about the notion of inconsistency we are measuring, and that in turn calls for clarity over the properties we expect of our inconsistency measure (such as whether ((cid:2)-Dominance) holds). In general, if the management of inconsistent requirements is logic-based, as in [37], our framework might be employed to improve the data analysis. We therefore see that with the proposals in this paper, there is a range of conceptual tools for better managing the subtleties in iceberg inconsistencies that arise in diverse domains of computer science.Inconsistency management policies [32,33] offer context-dependent mechanisms for managing inconsistencies. To illus-trate, consider a client database with information on salaries, and for a particular individual, there are different tuples giving different values for the salary. Different users of the database might require different policies for resolving the incon-sistency. For example, a tax inspector might take the maximum value as the salary, whereas a loan risk assessor might take the lowest value. Localising and assessing inconsistencies is an important aspect of applying such policies, and they could be enhanced by considering iceberg conflicts. Furthermore, as acknowledged in Martinez et al. [32], inconsistency measures may be a useful tool for helping to decide which inconsistency management policy to use. For instance, if an inconsistency management policy involves weakening some of the information (represented as formulae), it may be prudent to first check whether weakening the formulae would actually reduce the degree of inconsistency where this measure takes into account iceberg conflicts.Multi-context systems [14,10] also offer context-dependent mechanisms for managing and resolving inconsistencies. They harness heterogeneous information sources using bridge rules which specify how information can be pooled from these sources. When inconsistencies arise in the pooled information, explanations can be used to localise and assess them. These explanations are subsets of the information, and in [16], an adaptation of an inconsistency measure based on minimal incon-sistent subsets is used to assess inconsistency. This approach to assessing inconsistency can be augmented by considering iceberg conflicts. Also in [15] these inconsistency explanations are formalised via logic, possibly enabling the application of our framework.For relational databases, there is a range of repair techniques for resolving consistency [3,7,44,6,38]. These include delet-ing tuples, inserting null values, and attribute-based repairs (i.e. changing attributes in tuples), and they can be harnessed according to context using distance-based methods [4]. Depending on the precise specification of the repair technique, con-sideration of iceberg conflicts could be important in determining whether a particular approach to repair is appropriate. The need to consider iceberg conflicts could also arise in other options for resolving inconsistency in databases such as revising tuples (e.g. for values in conflict, taking an interval of the values), and weakening integrity constraints.Future work includes exploring different forms of localising inconsistency in knowledge bases by instantiating the framework introduced here. For instance, the consequence operation could be defined by classical elimination rules, by paraconsistent logics or by substructural logics. Another future task is to characterise primitive conflicts via a set of ratio-nality postulates that they should satisfy, in the style of the AGM-operations.AcknowledgementsGDB is supported by CNPq grant PDE 200780/2015-8. AH is partly supported by EPSRC grant EP/N008294/1.144G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151Appendix A. Proofs of technical resultsProposition 4.2. Consider a knowledge base (cid:4) ∈ K and a formula ϕ ∈ (cid:4). ϕ is free in (cid:4) iff, for any AGM-consolidation (cid:4)(cid:11)is consistent.of (cid:4), (cid:4)(cid:11) ∪ {ϕ}Proof. (→) Suppose ϕ is free in (cid:4). Consider an arbitrary AGM-consolidation (cid:4)(cid:11)and adding ϕ cannot create a MIS, for it would be a MIS in (cid:4) containing ϕ, which is free. Thus, (cid:4)(cid:11) ∪ {ϕ} is consistent.of (cid:4). As (cid:4)(cid:11) ⊆ (cid:4) is consistent, it has no MIS, (←) Suppose ϕ is not free in (cid:4). Then, there is a (cid:5) ∈ MIS((cid:4)) such that ϕ ∈ (cid:5). Now consider the base (cid:8) = (cid:5) \ {ϕ}, which is consistent, and a AGM-consolidation (cid:4), but (cid:8) ∪ {ϕ} = (cid:5) is inconsistent. (cid:2)Proposition 4.10. Consider a subclassical, Tarskian consequence operation Cn(cid:2) : K → K, a knowledge base (cid:4) ∈ K and a (cid:5) ⊆ (cid:4) that contains only formulas that are (cid:2)-innoucuous in (cid:4). If (cid:8)(cid:11)is a (cid:2)-consolidation of (cid:8) = (cid:4) \ (cid:5), then (cid:8)(cid:11) ∪ (cid:5) is a (cid:2)-consolidation of (cid:4).is a (cid:2)-consolidation of (cid:8) = (cid:4) \ (cid:5). That is, (cid:8)(cid:11)Proof. Suppose (cid:8)(cid:11)is a consistent subset of Cn(cid:2)((cid:4) \ (cid:5)). Since Cn(cid:2) satisfies monotonicity, Cn(cid:2)((cid:4) \ (cid:5)) ⊆ Cn(cid:2)((cid:4)), and (cid:8)(cid:11)is also a (cid:2)-consolidation of (cid:4). If (cid:5) = ∅, the result is trivial, so suppose (cid:5) ={ϕ1, ϕ2, . . . } — (cid:5) can be either finite or infinite. Now define (cid:8) = (cid:8)0. For each ϕi ∈ (cid:5), define (cid:8)i = (cid:8)i−1 ∪ {ϕi}. As each ϕiis (cid:2)-innocuous in (cid:4), if (cid:8)i−1 is a (cid:2)-consolidation of (cid:4), so is (cid:8)i−1 ∪ {ϕi} = (cid:8)i . As (cid:8)0 = (cid:8)(cid:11)is a (cid:2)-consolidation of (cid:4), (cid:8)i also is, for all i such that ϕi ∈ (cid:5). (cid:2)Proposition 4.11. Let (cid:4) be a knowledge base in K. If a formula ϕ ∈ (cid:4) is (cid:2)-innocuous in (cid:4), then ϕ is free in (cid:4).Proof. It follows directly from Proposition 4.2, as Cn(cid:2) is assumed to be Tarskian. (cid:2)Theorem 4.13. Consider the modular consequence operation Cn(cid:2) = Cnmod. Given an inconsistent (cid:4) ∈ K, a formula ϕ ∈ (cid:4) is (cid:2)-innocuous in (cid:4) iff ϕ is valid.Proof. The (←)-part is trivial, for a valid formula is consistent with any consistent set, so we focus on the (→)-direction of the proof. Suppose ϕ ∈ (cid:4) is (cid:2)-innocuous in (cid:4) and consider a (cid:5) ∈ MIS((cid:4)). By Proposition 4.11, ϕ is free, hence ϕ /∈ (cid:5). Define (cid:5)(cid:11) = {ψ ∨ ¬ϕ|ψ ∈ (cid:5)}, noting that ψ ∨ ¬ϕ ∈ Cn(cid:2)(ψ) for any ψ ∈ L. To prove by contradiction, suppose ϕ is not valid. Hence, ¬ϕ is satisfiable, and so is (cid:5)(cid:11) ⊆ Cn(cid:2)((cid:4)), which is a (cid:2)-consolidation of (cid:4). Nevertheless, (cid:5)(cid:11) ∪ {ϕ} is inconsistent, thus ϕ is not (cid:2)-innocuous, a contradiction. (cid:2)Proposition 5.4. Consider a modular subclassical Tarskian consequence operation Cn(cid:2) : K → K. If a (cid:4) ∈ K is a minimal inconsistent set, (cid:4) is a (cid:2)-conflict.Proof. Suppose (cid:4) is a MIS. Since Cn(cid:2) is monotonic, (cid:4) ∈ MIS(Cn(cid:2)((cid:4))). Just consider the function f : (cid:4) → (cid:4) as the identity function for (cid:4) to be a (cid:2)-conflict by definition. (cid:2)Proposition 5.5. Consider a modular subclassical Tarskian consequence operation Cn(cid:2) : K → K. If a (cid:4) ∈ K is a (cid:2)-conflict, it is incon-sistent.Proof. Suppose (cid:4) is a (cid:2)-conflict. Thus, there is an inconsistent (cid:5) ∈ MIS(Cn(cid:2)((cid:4))) and a surjective function f : (cid:5) → (cid:4) such that f (ψ) (cid:12)(cid:2) ψ for all ψ ∈ (cid:5). As Cn(cid:2) is subclassical, a valuation v satisfying a ϕ ∈ (cid:4) would satisfy any ψ ∈ (cid:5) such that f (ψ) = ϕ. Hence, any valuation satisfying (cid:4) also satisfies (cid:5). As (cid:5) is inconsistent, so must be (cid:4). (cid:2)Lemma 5.9. Consider the modular consequence operation Cn(cid:2) = Cnmod. Every finite, inconsistent (cid:4) ∈ K that does not contain valid formulas has a (cid:2)-weakening that is a MIS.m(cid:16)j=1; j(cid:19)=i1, . . . , ϕ(cid:11)¬ y j for all 1 ≤ i ≤ m. For all 1 ≤ i ≤ m, define ϕ(cid:11)Proof. Suppose (cid:4) = {ϕ1, . . . , ϕm} is inconsistent and contains no valid formulas. Let y1, . . . , ym be atomic propositions not occurring in (cid:4) and define ψi = yi ∧¬ϕ j ∧ ψ j and note that ϕi (cid:12)(cid:2) ϕ(cid:11)i . Note that (cid:4)(cid:11) = {ϕ(cid:11)i ) = ϕi , such that f (ψ) (cid:12)(cid:2) ψ for all ψ ∈ (cid:4)(cid:11)} for some 1 ≤ i ≤ m. As no ϕ j ∈ (cid:4)is valid, every ¬ϕ j is satisfiable. Consequently, for any 1 ≤ j ≤ m, ¬ϕ j ∧ ψ j is consistent, for ψ j is consistent and formed from different atomic propositions. By construction, ¬ϕ j ∧ ψ j is disjunct in ϕ(cid:11)i with i (cid:19)= j. Therefore, a valuation satisfying ¬ϕ j ∧ ψ j also satisfies (cid:4)(cid:11)j , which must be consistent, regardless of the value of 1 ≤ j ≤ m. To prove by contradiction that (cid:4)(cid:11). As (cid:4) is inconsistent, v(ϕi) = 0 for some 1 ≤ i ≤ m. Thus, v(ϕ(cid:11)(cid:11) ≤ m. Therefore, we finally have that v(ϕ(cid:11)is inconsistent, suppose there is a valuation v satisfying (cid:4)(cid:11)i ) = 1 implies v(¬ϕ j ∧ ψ j) = 1 for some 1 ≤ j ≤ m. Note that v(ψk) = 1 implies v(ψk(cid:11) ) = 0 for all k} is in Cn(cid:2)((cid:4)) and there is a surjective function f : (cid:4)(cid:11) → (cid:4), defined as f (ϕ(cid:11)is MIS. Consider the set (cid:4)(cid:11)j. Now we prove (cid:4)(cid:11)j) = 0, a contradiction; thus (cid:4)(cid:11)(cid:11) (cid:19)= k, 1 ≤ kis a MIS. (cid:2)= (cid:4)(cid:11) \ {ϕ(cid:11)j= ϕi ∨j=1; j(cid:19)=im(cid:17)miG. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151145Theorem 5.10. Consider the modular consequence operation Cn(cid:2) = Cnmod. Any finite knowledge base (cid:4) ∈ K is a (cid:2)-conflict iff it is inconsistent and it does not contain valid formulas.Proof. (→) Suppose (cid:4) is a (cid:2)-conflict. By Proposition 5.5, (cid:4) must be inconsistent. Suppose ϕ ∈ (cid:4) is valid, so any ψ ∈Cn(cid:2)({ϕ}) is valid. Nevertheless, no MIS (cid:5) ⊆ Cn(cid:2)((cid:4)) can contain a valid formula, and any ψ in a MIS is not in Cn(cid:2)(ϕ). Thus, for any MIS (cid:5) ⊆ Cn(cid:2)((cid:4)) there can be no surjective function f : (cid:5) → (cid:4) such that f (ψ) (cid:12)(cid:2) ψ for all ψ ∈ (cid:5). This contradicts the fact that (cid:4) is a (cid:2)-conflict.(←) Direct consequence of Lemma 5.9. (cid:2)Theorem 5.11. Consider a knowledge base (cid:4) ∈ K and a modular Cn(cid:2) : K → K. A formula ϕ ∈ (cid:4) is (cid:2)-innocuous in (cid:4) iff it is in no (cid:2)-conflict of (cid:4).Proof. (→) Let ϕ be (cid:2)-innocuous in (cid:4). Suppose there is a (cid:2)-conflict (cid:5) ⊆ (cid:4) such that ϕ ∈ (cid:5). Since (cid:5) = (cid:8) ∪ {ϕ} is a (cid:2)-conflict, it must have a (cid:2)-weakening (cid:8)(cid:11) ∪ {θ}, with ϕ (cid:12)(cid:2) θ , that is a MIS. Thus, (cid:8)(cid:11) ⊆ Cn(cid:2)((cid:8)) ⊆ Cn(cid:2)((cid:4)) is consistent and it is a (cid:2)-consolidation of (cid:4). Due to the fact that ϕ is (cid:2)-innocuous in (cid:4), (cid:8)(cid:11) ∪ {ϕ} is consistent. However, since (cid:8)(cid:11) ∪ {θ} is inconsistent, θ ∈ Cn(ϕ) implies that (cid:8)(cid:11) ∪ {ϕ} is inconsistent; a contradiction.(←) Suppose ϕ is not innocuous in (cid:4). Then there is a (cid:2)-consolidation (cid:4)(cid:11) ⊆ Cn(cid:2)((cid:4)) such that (cid:4)(cid:11) ∪ {ϕ} is inconsistent. As is consistent, there must be a MIS (cid:5) ⊆ (cid:4)(cid:11) ∪ {ϕ} such that ϕ ∈ (cid:5). Construct a function f : (cid:5) → (cid:4) such that f (ϕ) = ϕbe the range of f , and define a function (cid:4)(cid:11)and, for each ψ ∈ (cid:5) \ {ϕ}, make f (ψ) = θ for some θ such that θ (cid:12)(cid:2) ψ . Let (cid:5)(cid:11)(cid:11)(ψ) = f (ψ) for all ψ ∈ (cid:5). As f(cid:11) : (cid:5) → (cid:5)(cid:11)fis a (cid:2)-conflict containing ϕ. (cid:2)is surjective, (cid:5)(cid:11)such that f(cid:11)Proposition 5.12. Suppose (cid:4)(cid:11) ∈ K is a (cid:2)-weakening of (cid:4) ∈ K. If, for each (cid:2)-conflict (cid:5) ⊆ (cid:4), all (cid:2)-weakenings (cid:5)(cid:11) ⊆ (cid:4)(cid:11)consistent, then (cid:4)(cid:11)is a (cid:2)-consolidation of (cid:4).of (cid:5) are Proof. We prove via the contrapositive. If (cid:4)(cid:11)is not a (cid:2)-consolidation of (cid:4), (cid:4)(cid:11)is inconsistent and must contain at least one minimal inconsistent set, that we denote by (cid:8). For each θ ∈ (cid:8), take a ϕ ∈ (cid:4) such that ϕ (cid:12)(cid:2) θ , and let (cid:5) be the set of such ϕ’s in (cid:4) — that is, (cid:8) ⊆ (cid:4)(cid:11)is a (cid:2)-weakening of (cid:5) ⊆ (cid:4). By definition, (cid:5) is an (cid:2)-conflict. (cid:2)Proposition 5.15. A formula ϕ is (cid:2)-innocuous in a base (cid:4) ∈ K iff, for all (cid:5) ∈ MIS(Cn(cid:2)((cid:4))), ϕ /∈ (cid:5).Proof. (→) Suppose there is a (cid:5) ∈ MIS(Cn(cid:2)((cid:4))) such that ϕ ∈ (cid:5). Then, (cid:5) \ {ϕ} is a consistent subset of Cn(cid:2)((cid:4)), so it is a (cid:2)-consolidation. However, ((cid:5) \ {ϕ}) ∪ {ϕ} = (cid:5) is inconsistent, so ϕ cannot be (cid:2)-innocuous.(←) Suppose now ϕ is not (cid:2)-innocuous in (cid:4). Then, there is a (consistent) (cid:2)-consolidation (cid:4)(cid:11) ⊆ Cn(cid:2)((cid:4)) such that (cid:4)(cid:11) ∪ {ϕ}is inconsistent. Therefore, all minimal inconsistent subsets in (cid:5) = (cid:4)(cid:11) ∪ {ϕ} must contain ϕ. (cid:2)Proposition 5.17. Consider a knowledge base (cid:4) ∈ K, a minimal inconsistent set (cid:5) ∈ K and a modular, subclassical, Tarskian Cn(cid:2). (cid:5) is a (cid:2)-weakening of (cid:4) iff there is a (cid:2)-mapping f : (cid:5) → 2(cid:4) .Proof. (→) Suppose (cid:5) is a (cid:2)-weakening of (cid:4), so (cid:5) ∈ MIS(Cn(cid:2)((cid:4))) and there is a surjective function f(cid:11)(ψ) (cid:12)(cid:2) ψ for all ψ ∈ (cid:5). Consider the function f : (cid:5) → 2(cid:4) defined as f (ψ) = { ff(cid:2)(cid:11) : (cid:5) → (cid:4) such that is surjective, f (ψ) = (cid:4). Furthermore, as (cid:5) is a MIS, it should contain no valid formula, and ψ ∈ (cid:5) implies ψ /∈ Cn(cid:2)(∅), for Cn(cid:2) is (cid:11)(ψ)}, for all ψ ∈ (cid:5). As f(cid:11)ψ∈(cid:5)subclassical. Therefore, (cid:8) (cid:2) f (ψ) implies ψ /∈ Cn(cid:2)((cid:8)).(←) Now suppose there is (cid:2)-mapping a f : (cid:5) → 2(cid:4) . Hence, f (ψ) = (cid:4) and, for all ψ ∈ (cid:5), ψ ∈ Cn(cid:2)( f (ψ)) and (cid:8) (cid:2) f (ψ) implies ψ /∈ Cn(cid:2)((cid:8)). As (cid:5) is a MIS, it has no valid formulas, so ψ /∈ Cn(cid:2)(∅) for every ψ ∈ (cid:5), since Cn(cid:2) is subclassical. Furthermore, Cn(cid:2) is modular and (cid:8) (cid:2) f (ψ) implies ψ /∈ Cn(cid:2)((cid:8)), thus f (ψ) is a singleton for every ψ ∈ (cid:5). is Consider the function f(cid:11)(ψ) = ϕ, where f (ψ) = {ϕ}. Finally, since (cid:11) : (cid:5) → (cid:4) such that, for all ψ ∈ (cid:5), ff (ψ) = (cid:4), f(cid:2)(cid:11)(cid:2)ψ∈(cid:5)ψ∈(cid:5)surjective and (cid:5) is a (cid:2)-weakening of (cid:4). (cid:2)Proposition 5.20. Consider a subclassical, Tarskian consequence operation Cn(cid:2) : K → K. If a (cid:4) ∈ K is a (cid:2)-conflict, it is inconsistent.Proof. Suppose (cid:4) is a (cid:2)-conflict, thus there is a MIS (cid:5) ⊆ Cn(cid:2)((cid:4)). As Cn(cid:2) is subclassical, (cid:5) ⊆ Cn(cid:2)((cid:4)) implies (cid:5) ⊆ Cn((cid:4)). Since (cid:5) is inconsistent, ⊥ ∈ Cn((cid:5)). As Cn is Tarskian, ⊥ ∈ Cn((cid:5)) implies ⊥ ∈ Cn((cid:4)); therefore, (cid:4) is inconsistent. (cid:2)Proposition 5.21. If a knowledge base (cid:4) ∈ K is a minimal inconsistent set, then it is (cid:2)-conflict.Proof. Recall that Cn(cid:2) must be monotonic. Hence, (cid:4) ∈ MIS(Cn(cid:2)((cid:4))). Consider the function f : (cid:4) → 2(cid:4) such that f (ϕ) = {ϕ}is such that for all ψ ∈ (cid:4), ψ ∈ Cn(cid:2)( f (ψ)) = Cn(cid:2)({ψ}) and (cid:8) (cid:2) f (ψ) = {ψ} implies ψ /∈ Cn(cid:2)((cid:8)), because ψfor all ϕ ∈ (cid:4). fis a (cid:2)-mapping and (cid:4) is a (cid:2)-conflict. (cid:2)is not valid (ψ /∈ Cn(cid:2)(∅) ⊆ Cn(∅)). Therefore, f146G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151Theorem 5.22. Consider the consequence operation Cn(cid:2) = Cn. Any finite knowledge base (cid:4) ∈ K is a (cid:2)-conflict iff it is inconsistent and it does not contain valid formulas.Proof. (→) Suppose (cid:4) is a (cid:2)-conflict. By Proposition 5.20, (cid:4) must be inconsistent. Suppose a ϕ ∈ (cid:4) is valid. There must f (ψ) = (cid:4) and, for all ψ ∈ (cid:5), ψ ∈ Cn(cid:2)( f (ψ)) and (cid:8) (cid:2)be a (cid:5) ∈ MIS(Cn(cid:2)((cid:4))) and a function f : (cid:5) → 2(cid:4) such that (cid:2)f (ψ) implies ψ /∈ Cn(cid:2)((cid:8)). Hence, there is a ψ ∈ (cid:5) such that ϕ ∈ f (ψ). Nevertheless, Cn((cid:8) \ {ϕ}) = Cn((cid:8)), for ϕ is valid; a contradiction.(←) Now suppose (cid:4) is inconsistent and it does not contain valid formulas. By Lemma 5.9, if Cn(cid:2) = Cnmod, (cid:4) has a (cid:2)-weakening (cid:5) that is a MIS. Hence (cid:5) ∈ MIS(Cnmod((cid:4))) ⊆ Cn((cid:4)) and, by Proposition 5.17, there is a (cid:2)-mapping f : (cid:5) → 2(cid:4)(for Cn(cid:2) = Cnmod). For any ψ ∈ (cid:5), Cnmod( f (ψ)) ⊆ Cn( f (ψ)). Additionally, since Cnmod is modular, f (ψ) is a singleton for each ψ ∈ (cid:5), and (cid:8) (cid:2) f (ψ) implies (cid:8) = ∅. Therefore, (cid:8) (cid:2) f (ψ) implies ψ /∈ Cn((cid:8)) = Cn(∅), as ψ is non-valid, for any ψ ∈ (cid:5). Thus, f : (cid:5) → 2(cid:4) is also a (cid:2)-mapping for Cn(cid:2) = Cn and (cid:4) is a (cid:2)-conflict for Cn(cid:2) = Cn. (cid:2)ψ∈(cid:5)Corollary 5.25. If a formula ϕ is (cid:2)-free in a base (cid:4) ∈ K, then ϕ is free in (cid:4).Proof. Direct consequence of Proposition 5.21. (cid:2)Corollary 5.26. Consider a modular consequence operation Cn(cid:2). A formula ϕ is (cid:2)-free in a base (cid:4) ∈ K iff ϕ is (cid:2)-innocuous in (cid:4).Proof. Direct consequence of Theorem 5.11. (cid:2)Proposition 5.27. If a formula ϕ is (cid:2)-free in (cid:4) ∈ K, then ϕ is (cid:2)-innocuous in (cid:4).Proof. Suppose ϕ is not (cid:2)-innocuous in (cid:4). By Proposition 5.15, there must be a minimal inconsistent subset (cid:5) ⊆ Cn(cid:2)((cid:4))that contains ϕ. Consequently, ϕ is not valid and ϕ /∈ Cn(cid:2)(∅), for Cn(cid:2) is subclassical. Define a function f : (cid:5) → 2(cid:4) in the following way: f (ϕ) = {ϕ} and, for each ψ ∈ (cid:5) \ {ϕ}, f (ψ) = (cid:8) for a minimal (cid:8) ⊆ (cid:4) such that ψ ∈ Cn(cid:2)((cid:8)). Define (cid:5)(cid:11) =is a (cid:2)-conflict, , defined as g(ψ) = f (ψ) for all ψ ∈ (cid:5), is a (cid:2)-mapping. Hence, (cid:5)(cid:11)f (ψ). Note that g : (cid:5) → 2(cid:5)(cid:11)(cid:2)ψ∈(cid:5)ϕ ∈ (cid:5)(cid:11)is not (cid:2)-free. (cid:2)Proposition 6.6. Consider the consequence operation Cn(cid:2) = Cn P I and a knowledge base (cid:4) ∈ K. If (cid:4) is a DMIS-conflict, then (cid:4) is a (cid:2)-conflict.Proof. Suppose that (cid:4) is a DMIS-conflict. Hence, there is a DMIS (cid:13)(cid:4), (cid:5)(cid:14). Just note that the MIS (cid:5) is a (cid:2)-weakening of (cid:4), thus, by Proposition 5.17, (cid:4) is a (cid:2)-conflict. (cid:2)Proposition 6.11. Consider the consequence operation Cn(cid:2) = Cn Pm . If a knowledge base (cid:4) ∈ K is an opposite-literals conflict, then it is a (cid:2)-conflict.Proof. Suppose (cid:4) ∈ K is an opposite-literals conflict. Then, there are (cid:5), (cid:5)(cid:11) ⊆ (cid:4) and a literal y such that (cid:5) and (cid:5)(cid:11)minimal proofs of y and ¬ y, respectively, and (cid:4) = (cid:5) ∪ (cid:5)(cid:11)and f (¬ y) = (cid:5)(cid:11)y /∈ Cn(cid:2)((cid:8)) (¬ y /∈ Cn(cid:2)((cid:8)(cid:11))). Finally, for are . Hence, { y, ¬ y} ∈ Cn(cid:2)((cid:4)). Define f : { y, ¬ y} → 2(cid:4) as f ( y) = (cid:5)is such that (cid:8) (cid:2) f ( y) = (cid:5) ((cid:8)(cid:11) (cid:2) f (¬ y) = (cid:5)(cid:11)) implies is a (cid:2)-mapping and (cid:4) is a (cid:2)-conflict. (cid:2)are minimal proofs of y and ¬ y, ff (ψ) = (cid:5) ∪ (cid:5)(cid:11) = (cid:4), f. Since (cid:5) and (cid:5)(cid:11)(cid:2)ψ∈{ y,¬ y}Proposition 6.13. Consider the consequence operation Cn(cid:2) = Cn Pmis a (cid:2)-conflict.2 . If a knowledge base (cid:4) ∈ K is an opposite-literals conflict, then it Proof. Suppose (cid:4) ∈ K is an opposite-literals conflict. Then, there are (cid:5), (cid:5)(cid:11) ⊆ (cid:4) and a y ∈ Lit((cid:5)) such that (cid:5) and (cid:5)(cid:11)minimal proofs of y and ¬ y, respectively, and (cid:4) = (cid:5) ∪ (cid:5)(cid:11). The remaining is the same as the proof of Proposition 6.11. (cid:2)are Proposition 7.4. Consider a subclassical Tarskian consequence operation Cn(cid:2) : K → K. I(cid:2) and Itonicity).(cid:2)C satisfy (Consistency) and (Mono-Proof. (Monotonicity) holds trivially, for the fact that the (cid:2)-conflicts in a (cid:4) ∈ K are also present in any knowledge base (cid:5) ⊇ (cid:4). To see that (Consistency) holds, note that any (cid:2)-conflict is inconsistent, by Proposition 5.20, thus a consistent (cid:4) ∈ Kmust contain no (cid:2)-conflict and I(cid:2)((cid:4)) = I(cid:2)C ((cid:4)) = 0. Conversely, if (cid:4) ∈ K is inconsistent, it must contain at least a MIS (cid:5) ⊆ (cid:4). By Proposition 5.21, (cid:5) is also a (cid:2)-conflict and I(cid:2)((cid:4)), I(cid:2)C ((cid:4)) ≥> 0. (cid:2)G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151147Proposition 7.6. Consider a subclassical Tarskian consequence operation Cn(cid:2) : K → K. I(cid:2) and Iand (Attenuation). (Equal-conflict) is satisfied by I(cid:2)C and violated by I(cid:2).(cid:2)C satisfy (Super-additivity), (Penalty) Proof.• (Super-additivity): Consider (cid:4), (cid:5) ∈ K with (cid:4) ∩ (cid:5) = ∅. Note that any I ∈ {I(cid:2), I(cid:2)C } is such that I((cid:4) ∪ (cid:5)) =(cid:8) ⊆ (cid:4) ∪ (cid:5) is a (cid:2) -conflict}. As each (cid:2)-conflict in either (cid:4) or (cid:5) are also in (cid:4) ∪ (cid:5), I((cid:4) ∪ (cid:5)) ≥ I((cid:4)) + I((cid:5)).• (Penalty): Consider a (cid:4) ∈ K and a ϕ ∈ (cid:4) such that ϕ is not free in (cid:4). Hence, there is a (cid:5) ∈ MIS((cid:4)) such that ϕ ∈ (cid:4). By Proposition 5.4, (cid:5) is a (cid:2)-conflict. Therefore, the set of (cid:2)-conflicts in (cid:4) \ {ϕ} is strictly included in the set of (cid:2)-conflicts in (cid:4), and I((cid:4) \ {ϕ}) < I((cid:4)) for any I ∈ {I(cid:2).• (Attenuation) and (Equal-conflict): Consider a (cid:4) ∈ K with (cid:5)1, (cid:5)2 ∈ MIS((cid:4)). By Proposition 5.4, (cid:5)1 and (cid:5)2 are (cid:2)-conflicts. As every proper subset of (cid:5)1 or (cid:5)2 is consistent, it is not a (cid:2)-conflict, by Proposition 5.20. Therefore, (cid:5)i is the only (cid:2)-conflict in (cid:5)i , yielding I(cid:2)((cid:5)i) = 1 and I(cid:2)C = 1/|(cid:5)i|, for i ∈ {1, 2}. Consequently, (Attenuation) holds for I(cid:2) and I(cid:2)C , and the latter also enjoys (Equal-conflict). To see that (Equal-conflict) is violated by I(cid:2) , note that I(cid:2)((cid:5)1) = 1 = I(cid:2)((cid:5)2) even when |(cid:5)1| < |(cid:5)2|. (cid:2)(cid:15){I((cid:8)) |Proposition 7.9. Consider a subclassical, Tarskian consequence operation Cn(cid:2) : K → K. I(cid:2) and I(cid:2)C satisfy ((cid:2)-Independence).Proof. It follows direct from the definition of the measures and the property. (cid:2)Proposition 7.11. Consider the consequence operation Cn(cid:2) = CnDalal. I sumDalal and ImaxDalal satisfy ((cid:2)-Independence).Dalal((cid:4)) ≥ I sum]] = {v ∈ V |D(v, [[ψi]]) ≤ ji}. If I sumProof. Consider a knowledge base (cid:4) ∈ K, let ϕ ∈ (cid:4) be (cid:2)-free in (cid:4) and define (cid:5) = (cid:4) \ {ϕ}. One can note that I sumDalal and ImaxDalal satisfy (Monotonicity), so I sumi be a formula such that [[ψ jiDalal((cid:5)) = ∞, the corresponding results follow trivially, so iwe focus on the finite case. Consider the enumeration (cid:5) = {ψ1, ψ2, . . . }. If I sumDalal((cid:5)) = k), then, each ψi ∈ (cid:5) can be weakened to a ψ ji|ψi ∈ (cid:5)} is iconsistent. As Cn(cid:2) is modular and ϕ is (cid:2)-free, ψ is also (cid:2)-innocuous, by Theorem 5.11. Since (cid:5)(cid:11) ⊆ Cn(cid:2)((cid:5)) ⊆ Cn(cid:2)((cid:4)), (cid:5)(cid:11)is a (cid:2)-consolidation of both (cid:5) and (cid:4), and (cid:4)(cid:11) = (cid:5)(cid:11) ∪ {ϕ} must be consistent. Hence, there is valuation v : L → {0, 1} satisfying (cid:5)(cid:11){D(v, [[ψi]])|ψi ∈ (cid:5)} = k (max{D(v, [[ψi]])|ψi ∈ (cid:5)} = k) and D(v, [[ϕ]]) = 0. Finally, (cid:15){ ji|ψi ∈ (cid:5)} = k (max{ ji|ψi ∈ (cid:5)} = k) and (cid:5)(cid:11) = {ψ jiDalal((cid:5)) and ImaxDalal((cid:5)) = ∞ or ImaxDalal((cid:5)). For each ψi ∈ (cid:5), let ψ jiDalal((cid:5)) = k (or Imaxin such a way that Dalal((cid:4)) ≥ Imax(cid:15)(cid:15)isuch that v(ϕ) = 1. Note that {D(v, [[θ ]])|θ ∈ (cid:4)} = k and I sumDalal((cid:5)) = k (max{D(v, [[θ ]])|θ ∈ (cid:4)} = k and ImaxDalal((cid:5)) = k). (cid:2)Proposition 7.13. If either Cn(cid:2) = Cn Pm or Cn(cid:2) = Cn Pm2 , then IPm satisfies ((cid:2)-Independence).Proof. Suppose Cn(cid:2) = Cn Pm or Cn(cid:2) = Cn Pm2 . Consider a knowledge base (cid:4) ∈ K, consider a (cid:2)-free ϕ in (cid:4) and define (cid:5) =(cid:4) \ {ϕ}. One can note that IPm satisfy (Monotonicity), so IPm ((cid:4)) ≥ IPm ((cid:5)). If IPm ((cid:5)) = ∞ the result follows trivially, so we focus on the finite case. To prove by contradiction, suppose IPm ((cid:4)) > IPm ((cid:5)). Then, there must be some literal y such that there is minimal proof π y ⊆ (cid:4) of y and a minimal proof π ¬ y ⊆ (cid:4) of ¬ y such that ϕ ∈ π y ∪ π ¬ y . Therefore, π y ∪ π ¬ y is an opposite-literals conflict. By Propositions 6.11 and 6.13, π y ∪ π ¬ y is a (cid:2)-conflict, contradicting the fact that ϕ ∈ π y ∪ π ¬ yis (cid:2)-free. (cid:2)Corollary 7.15. If Cn(cid:2) is a modular, subclassical, Tarskian consequence operation, ((cid:2)-Independence) and ((cid:2)-Independence’) are equiv-alent.Proof. Direct consequence of Corollary 5.26. (cid:2)Proposition 7.16. Let I : K → [0, ∞) ∪ {∞} be an inconsistency measure that satisfies (Monotonicity) and (Dominance) and consider a (cid:4) ∈ K. If a ψ ∈ L is such that ψ ∈ Cn(ϕ) for some consistent ϕ ∈ (cid:4), then I((cid:4)) = I((cid:4) ∪ {ψ}).Proof. By (Monotonicity), I((cid:4)) ≤ I((cid:4) ∪ {ψ}). By (Dominance), I((cid:4)) ≥ I((cid:4) ∪ {ψ}), as (cid:4) = (cid:4) ∪ {ϕ}. (cid:2)Proposition 7.21. Consider a modular, subclassical, Tarskian consequence operation Cn(cid:2) : K → K. I(cid:2) and I(cid:2)C satisfy ((cid:2)-Dominance).Proof. Consider a base (cid:4) ∈ K and suppose there are formulas ϕ, ψ ∈ L \ (cid:4) such that ψ ∈ Cn(cid:2)({ϕ}). We prove that (cid:4) ∪ {ϕ}has at least the same number of (cid:2)-conflicts of size k as (cid:4) ∪ {ϕ} for any positive k ∈ N — this would imply I((cid:4) ∪ {ϕ}) ≥I((cid:4) ∪ {ψ}) for any I ∈ {I(cid:2), I(cid:2)C }. Let (cid:5) be a (cid:2)-conflict in (cid:4) ∪ {ψ}. There are two cases to consider: ψ ∈ (cid:5) and ψ /∈ (cid:5). If ψ /∈ (cid:5), then (cid:5) ⊆ (cid:4) and (cid:5) ⊆ (cid:4) ∪ {ϕ}. Thus, we focus on an arbitrary (cid:2)-conflict (cid:5) ⊆ (cid:4) ∪ {ψ} such that ψ ∈ (cid:5). We prove that (cid:5)(cid:11) = ((cid:5) \ {ψ}) ∪ {ϕ} is a (cid:2)-conflict in (cid:4) ∪ {ϕ}, noting that |(cid:5)| = |(cid:5)(cid:11)|. Since (cid:5) is a (cid:2)-conflict, it has a (cid:2)-weakening 148G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151(cid:11)(θ) = f (θ) if f (θ) (cid:19)= ψ , otherwise f (θ) = ϕ, for all θ ∈ (cid:8). As f(cid:8) ∈ MIS(Cn(cid:2)((cid:4) ∪ {ψ})) and there exists a surjective function f : (cid:8) → (cid:5) such that f (θ) (cid:12)(cid:2) θ for all θ ∈ (cid:8). As Cn(cid:2) satisfies inclusion and monotonicity, (cid:4) ⊆ Cn(cid:2)((cid:4) ∪ {ϕ}), and as ψ ∈ Cn(cid:2)({ϕ}), monotonicity implies (cid:4) ∪ {ψ} ⊆ Cn(cid:2)((cid:4) ∪ {ϕ}). Due to (cid:11) : (cid:8) → (cid:5)(cid:11)monotonicity and idempotence, Cn(cid:2)((cid:4) ∪ {ψ}) ⊆ Cn(cid:2)((cid:4) ∪ {ϕ}). Hence, (cid:8) ⊆ Cn(cid:2)((cid:4) ∪ {ϕ}). Consider the function fon (cid:5)(cid:11). Since defined as f(cid:11)(θ) (cid:12)(cid:2) θ for all θ ∈ (cid:8). Cn(cid:2) satisfies monotonicity and idempotence, f (θ) = ψ implies θ ∈ Cn(cid:2)({ψ}) ⊆ Cn(cid:2)({ϕ}). Hence, fTherefore, (cid:8) ∈ MIS(Cn(cid:2)((cid:4) ∪ {ϕ})) is a (cid:2)-weakening of (cid:5)(cid:11) ⊆ (cid:4) ∪ {ϕ}, and the latter is a (cid:2)-conflict. Note that, if (cid:5)1 and (cid:5)2are different (cid:2)-conflicts of (cid:4) ∪ {ψ}, (cid:5)(cid:11)= ((cid:5)1 \ {ψ}) ∪ {ϕ} are different (cid:2)-conflicts of (cid:4) ∪ {ϕ}. 1Consequently, each (cid:2)-conflict (cid:5) in (cid:4) ∪ {ψ} corresponds to a different (cid:2)-conflict (cid:5)(cid:11)of (cid:4) ∪ {ϕ} such that |(cid:5)| = |(cid:5)(cid:11)|, finishing the proof. (cid:2)= ((cid:5)1 \ {ψ}) ∪ {ϕ} and (cid:5)(cid:11)is surjective on (cid:5), so is f2(cid:11)Proposition 7.22. Let Cn(cid:2) : K → K be a modular, subclassical, Tarskian consequence operator. IM I S satisfies ((cid:2)-Dominance) iff ϕ (cid:12)(cid:2)ψ implies ϕ and ψ are equivalent for all consistent, non-valid ϕ, ψ ∈ L.Proof. (→) To prove via the contrapositive, suppose there are consistent, non-valid ϕ, ψ ∈ L such that ϕ (cid:12)(cid:2) ψ but ϕ and ψare not equivalent. As Cn(cid:2) is subclassical, ϕ (cid:12)(cid:2) ψ implies ϕ (cid:12) ψ , thus ψ (cid:3) ϕ. Consider the knowledge base (cid:4) = {¬ϕ, ψ →ϕ, ψ → ϕ ∧ (cid:6)}. Note that {¬ϕ, ϕ} is the only MIS in (cid:4) ∪ {ϕ} but (cid:4) ∪ {ψ} contains two MISes, {¬ϕ, ψ → ϕ, ψ}, {¬ϕ, ψ →ϕ ∧ (cid:6), ψ}, since {¬ϕ, ψ} is consistent, for ψ (cid:3) ϕ. Therefore, IM I S ((cid:4) ∪ {ϕ}) = 1 < 2 = IM I S ((cid:4) ∪ {ψ}), violating ((cid:2)-Dominance).(←) Now suppose Cn(cid:2) is such that ϕ (cid:12)(cid:2) ψ implies ϕ and ψ are equivalent for all consistent, non-valid ϕ, ψ ∈ L. Consider a knowledge base (cid:4) ∈ K and two formulas ϕ, ψ ∈ L \ (cid:4) such that ϕ (cid:12)(cid:2) ψ and ϕ (cid:3) ⊥. We prove that each MIS in (cid:4) ∪ {ψ}corresponds to a different MIS in (cid:4) ∪ {ψ}. Let (cid:5) be a MIS in (cid:4) ∪ {ψ}. There are two cases to consider: ψ ∈ (cid:5) and ψ /∈ (cid:5). If ψ /∈ (cid:5), then (cid:5) ⊆ (cid:4) and (cid:5) ⊆ (cid:4) ∪ {ϕ}. Thus, we suppose that ψ ∈ (cid:5). As ψ is in a MIS, it is not valid, thus neither is ϕ, since Cn(cid:2) is subclassical. As ϕ is consistent, so is ψ , for Cn(cid:2) is subclassical. Hence, by supposition, ϕ and ψ are equivalent, and (cid:5)(cid:11) = ((cid:5) \ {ψ}) ∪ {ϕ} is a MIS in (cid:4) ∪ {ϕ}. (cid:2)Proposition 7.23. Let C be a set of inconsistent knowledge bases such that MIS(L) ⊆ C. IC does not satisfy (Dominance).Proof. Consider the inconsistent knowledge base (cid:4) = {x1, ¬x1} in K and the formulas ϕ = x1 and ψ = x1 ∧ x1. For any C, IC((cid:4)) = 1, for (cid:4) contain only one inconsistent subset (itself) and it is a MIS. Note that (cid:4) ∪ {ψ} contains two MISes, (cid:4) and {¬x1, x1 ∧ x1}, thus IC((cid:4) ∪ {ψ}) ≥ 2. As (cid:4) ∪ {ϕ} = (cid:4), IC((cid:4) ∪ {ϕ}) < IC((cid:4) ∪ {ψ}), violating (Dominance). (cid:2)Corollary 7.24. There is no subclassical Tarskian consequence operation Cn(cid:2) : K → K such that I(cid:2) satisfies (Dominance).Proof. Direct consequence of Proposition 7.23 and Proposition 5.21. (cid:2)Proposition 7.25. Let C ⊆ K be the set of all inconsistent knowledge bases not containing valid formulas. IC satisfies (Dominance(cid:11)).Proof. Consider a knowledge base (cid:4) ∈ K and two formulas ϕ, ψ ∈ L \ (cid:4) such that ϕ (cid:12) ψ and ϕ (cid:3) ⊥. We prove that each (cid:5) ⊆ ((cid:4) ∪ {ψ}) in C corresponds to a different (cid:5)(cid:11) ⊆ ((cid:4) ∪ {ϕ}) in C. Let (cid:5) ∈ C be a subset of (cid:4) ∪ {ψ}. There are two cases to consider: ψ ∈ (cid:5) and ψ /∈ (cid:5). If ψ /∈ (cid:5), then (cid:5) ⊆ (cid:4) and (cid:5) ⊆ (cid:4) and (cid:5) ⊆ (cid:4) ∪ {ϕ}. Thus, we focus on an arbitrary (cid:5) ⊆ (cid:4) ∪ {ψ}such that ψ ∈ (cid:5). As (cid:5) ∈ C, it is inconsistent and contains no valid formulas. Since ψ is in a (cid:5), it is not valid, and neither is ϕ, for ϕ (cid:12) ψ . Hence, (cid:5)(cid:11) = ((cid:5) \ {ψ}) ∪ {ϕ} contains no valid formulas. Furthermore, as ϕ (cid:12) ψ , (cid:5)(cid:11)is also inconsistent and in C. Finally, (cid:4) ∪ {ϕ} has at least the same number of subsets in C as (cid:4) ∪ {ψ} has, IC((cid:4) ∪ {ϕ}) ≥ IC((cid:4) ∪ {ψ}) and (Dominance) is satisfied. (cid:2)(cid:11)Proposition 8.3. Cn, Cnmod, Cnid, Cn∧, Cn→∧2 , Cn, Cn Pm and Cn Pm2are p-bounded.∧, Cn∧2 , Cn→}, note that, for any (cid:4) ∈ K, (cid:20)Cn(cid:2)((cid:4))(cid:20) = (cid:20)(cid:4)(cid:20), (cid:20)Cn(cid:2)((cid:4))(cid:20) ≤ (cid:20)(cid:4)(cid:20)2, (cid:20)Cn(cid:2)((cid:4))(cid:20) ≤Proof. In the case of Cn(cid:2) ∈ {Cnid, Cn2(cid:20)(cid:4)(cid:20) and (cid:20)Cn(cid:2)((cid:4))(cid:20) ≤ ((cid:20)(cid:4)(cid:20) + 1)2 (see proof of Proposition 8.5), respectively. When Cn(cid:2) ∈ {Cn Pm, Cn Pm}, (cid:5) ∈ MIS(Cn(cid:2)((cid:4)))implies (cid:5) = {xi, ¬xi} for some atomic proposition xi , so (cid:20)(cid:5)(cid:20) would actually be constant. Consider now that Cn(cid:2) ∈{Cn, Cnmod}. Using Theorems 5.10 and 5.22, a given (cid:2)-conflict (cid:4) = {ϕ1, . . . , ϕm} is inconsistent with no valid formulas. In the proof of Lemma 5.9, a minimal inconsistent set (cid:4)(cid:11) = {ϕ(cid:11)1, . . . , ϕ(cid:11)} is provided as a (cid:2)-weakening (for Cn(cid:2) = Cnmod) for (cid:4). Hence, (cid:4)(cid:11) ∈ MIS(Cnmod((cid:4))) ⊆ MIS(Cn((cid:4))) and, by Proposition 5.17, there is a (cid:2)-mapping f : (cid:4)(cid:11) → 2(cid:4) (for Cn(cid:2) = Cnmod), , ψ ∈ Cnmod( f (ψ)) ⊆ Cn( f (ψ)) and (cid:8) (cid:2) f (ψ) implies ψ /∈ Cn(cid:2)((cid:8)) ⊆ Cn((cid:8)). As Cnmod is such that f (ϕ) = (cid:4) and ψ ∈ (cid:4)(cid:11)(cid:2)m2. Thus, is a (cid:2)-mapping also for Cn(cid:2) = Cn. Finally, because (cid:20)(cid:4)(cid:11)(cid:20) is polynomial in (cid:20)(cid:4)(cid:20), by construction, both Cn and Cnmod are modular, each f (ψ) is a singleton, and (cid:8) (cid:2) f (ψ) implies (cid:8) = ∅. Thus, (cid:8) (cid:2) f (ψ) implies ψ /∈ Cn((cid:8)) for any ψ ∈ (cid:4)(cid:11)fp-bound. (cid:2)ϕ∈(cid:4)(cid:11)Proposition 8.4. Consider a subclassical, Tarskian consequence operation Cn(cid:2) that is p-bounded. If (cid:2)-CONSEQUENCE is in (cid:14) p2or (cid:2)-CONSEQUENCE is in (cid:14) p2 and Cn(cid:2) is modular, then (cid:2)-CONFLICT is in (cid:14) p2 , and (cid:2)-FREE is in (cid:15)p2 .∩ (cid:15)p2 , G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151149j2∩ (cid:15)p2 . As (cid:2)-CONSEQUENCE is in (cid:14) pProof. (cid:2)-CONFLICT, General case. Our proof for (cid:2)-CONFLICT employs polynomial reductions to the satisfiability of quantified Boolean formula with two alternations of quantifiers (∃x1, . . . , xn, ∀xn+1, . . . , xmϕ, ϕ ∈ L), (cid:14)2SAT (see e.g. [5]), which is (cid:14) p2 -complete. Suppose (cid:2)-CONSEQUENCE is in (cid:14) p2 , it can be polynomially reduced, via a function f(cid:14) , to (cid:14)2SAT. Similarly, as (cid:2)-CONSEQUENCE is in (cid:15)p2 , its complement, NOT-(cid:2)-CONSEQUENCE, can also be polynomially reduced, via a function f(cid:15), to (cid:14)2SAT. Thus, for a given (cid:13)ϕ, (cid:4)(cid:14) ∈ L × K, there are quantified Boolean formulas f(cid:14)(ϕ, (cid:4)) and f(cid:15)(ϕ, (cid:4)) (in the form ∃x1, . . . , xn, ∀xn+1, . . . , xn(cid:11) θ ), with (cid:20) f(cid:14)(ϕ, (cid:4))(cid:20), (cid:20) f(cid:8) (ϕ, (cid:4))(cid:20) being polynomial in (cid:20)(cid:13)ϕ, (cid:4)(cid:14)(cid:20), such that ϕ ∈ Cn(cid:2)((cid:4)) iff f(cid:14)(ϕ, (cid:4)) ∈ (cid:14)2SAT and ϕ /∈ Cn(cid:2)((cid:4)) iff f(cid:15)(ϕ, (cid:4)) ∈ (cid:14)2SAT. As Cn(cid:2) is p-bounded, there is a polynomial q such that a given (cid:4) = {ϕ1, . . . , ϕm} is in (cid:2)-CONFLICT iff there are a (cid:5) = {ψ1, . . . , ψk} ∈ MIS(Cn(cid:2)((cid:4))), with (cid:20)(cid:5)(cid:20) ≤ q((cid:20)(cid:4)(cid:20)), and a (cid:2)-mapping f : (cid:5) → 2(cid:4) . There exists a (cid:2)-mapping f : (cid:5) → 2(cid:4) iff there are subsets (cid:4)1, . . . , (cid:4)k ⊆ (cid:4) such that ∪kj=1(cid:4) j =(cid:4) and, for each 1 ≤ j ≤ k, ψ j ∈ Cn(cid:2)((cid:4) j) and (cid:4)(cid:11)⊆ (cid:4) j implies ψ j /∈ Cn(cid:2)((cid:4)). The idea is to encode these conditions using f(cid:14) and f(cid:15), then deciding if the resulting formulas are in (cid:14)2SAT by guessing truth values for ∃-bound variables and calling a SAT-oracle. Note that a given quantified Boolean formula ∃x1, . . . , xn, ∀xn+1, . . . , xn(cid:11) θ(x1, . . . , xn(cid:11) ) is true if there are y1, . . . , yn ∈ {(cid:6), ⊥}n such that ∀xn+1, . . . , xn(cid:11) θ( y1, . . . , yn, xn+1, . . . , xn(cid:11) ) is true (θ( y1, . . . , yn, xn+1, . . . , xn(cid:11) ) is a propositional tautology). Assume we have an oracle to Boolean satisfiability (SAT), which also recognises a tautology ϕ, for ¬ϕ would be unsatisfiable. A given (cid:4) is a (cid:2)-conflict iff we can guess a (cid:5) = {ψ1, . . . , ψk} ∈ K, subsets (cid:4)1, . . . , (cid:4)k ⊆ (cid:4) with ∪kj=1(cid:4) j = (cid:4), and the truth values for ∃-bound variables in f(cid:14)(ψ j, (cid:4) j) and in f(cid:15)(ψ j, (cid:4) j \ {ϕ ji}), for each 1 ≤ j ≤ k and 1 ≤ i ≤ |(cid:4) j|, and then verify, using the SAT-oracle, that (cid:5) is a minimal inconsistent set ((cid:5) is unsatisfiable and each (cid:5) \ {ψ j} is satisfiable), f(cid:14)(ψ j, (cid:4) j) and in f(cid:15)(ψ j, (cid:4) j \ {ϕ ji}) are true, for each 1 ≤ j ≤ k and 1 ≤ i ≤ |(cid:4) j|. Note that (cid:5) and each (cid:4) j have all polynomial size on (cid:20)(cid:4)(cid:20). Furthermore, each f(cid:14)(ψ j, (cid:4) j) and each f(cid:15)(ψ j, (cid:4) j \ {ϕ ji}) can be computed in polynomial time. Hence, (cid:2)-CONFLICT is in NPNP = (cid:14) p2 .(cid:2)-CONFLICT, Modular case. Suppose now Cn(cid:2) is modular and (cid:2)-CONSEQUENCE is in (cid:14) p2 . As Cn(cid:2) is p-bounded, there is a polynomial q such that a given (cid:4) = {ϕ1, . . . , ϕm} is in (cid:2)-CONFLICT iff it has a (cid:2)-weakening (cid:5) = {ψ1, . . . , ψk} ∈ MIS(Cn(cid:2)((cid:4)))satisfying (cid:20)(cid:5)(cid:20) ≤ q((cid:20)(cid:4)(cid:20)). (cid:5) = {ψ1, . . . , ψk} is a (cid:2)-weakening of (cid:4) iff we can guess an onto function g : (cid:5) → (cid:4) such that, for each ψ j ∈ (cid:5), g(ψ j) (cid:12)(cid:2) ψ j (ψ j ∈ Cn(cid:2)({g(ψ j)})). Again, this consequence relation can be encoded via f(cid:14) . Hence, (cid:4) is a (cid:2)-conflict iff we can guess a (cid:5) = {ψ1, . . . , ψk} ∈ K, an onto function g : (cid:5) → (cid:4) and the truth values for ∃-bound vari-ables in f(cid:14)(ψ j, g(ψ j)) for each 1 ≤ j ≤ k and then verify, using the SAT-oracle, that (cid:5) is a minimal inconsistent set and f(cid:14)(ψ j, g(ψ j)) is true, for each 1 ≤ j ≤ k. Note that an onto function g : (cid:5) → (cid:4) can be encoded in polynomial size in (cid:20)(cid:4)(cid:20)and (cid:20)(cid:5)(cid:20) ≤ q((cid:20)(cid:4)(cid:20)). Hence, as in the case for general Cn(cid:2), we can conclude that (cid:2)-CONFLICT is in (cid:14) p2 .(cid:2)-FREE, Both cases. To see that (cid:2)-FREE is in (cid:15)p∩ (cid:15)p2 , in both cases (modular and general Cn(cid:2), with (cid:2)-CONSEQUENCE respec-2 ), consider the problem of verifying whether a given ϕ ∈ L is not (cid:2)-free in a given (cid:4)(cid:11) ∈ K. tively in (cid:14) p2 and in (cid:14) pJust add the guessing of a (cid:4) ⊂ (cid:4)(cid:11), with ϕ ∈ (cid:4), to the corresponding procedure above (modular or general Cn(cid:2)) and repeat the other steps to verify whether this (cid:4) is a (cid:2)-conflict. Note that this extra guessing has polynomial size, since (cid:20)(cid:4)(cid:20) ≤ (cid:20)(cid:4)(cid:11)(cid:20). Therefore, checking that a formula is not (cid:2)-free is also in (cid:14) p2 , and (cid:2)-FREE is in (cid:15)p2 . (cid:2)2Proposition 8.5. If Cn(cid:2) is Cn, Cnmod, Cn Pm, Cn Pm2 , CnId, Cn∧, Cn→∧2 , Cnor Cn P I then (cid:2)-CONSEQUENCE is in (cid:14) p2∩ (cid:15)p2 .2∩ (cid:15)p∩ (cid:15)p2 .Proof. Consider a given pair (cid:13)ϕ, (cid:4)(cid:14) ∈ L × K. For Cn(cid:2) = Cn, (cid:2)-CONSEQUENCE is in coNP ⊆ (cid:14) p2 , as ϕ ∈ Cn((cid:4)) iff (cid:4) ∪ {¬ϕ}2is unsatisfiable. Hence, for Cn(cid:2) = Cnmod, to decide whether (cid:13)ϕ, (cid:4)(cid:14) is in (cid:2)-CONSEQUENCE, one can check whether ψ ∈Cn({ϕ}) for each ϕ ∈ (cid:4), and (cid:2)-CONSEQUENCE is in PNP ⊆ (cid:14) p2Since Cn Pm((cid:4)) = {ψ ∈ Cn((cid:4)) | ψ is a literal} and Cn Pm}, deciding whether (cid:13)ϕ, (cid:4)(cid:14) ∈ (cid:2)-CONSEQUENCE can be done via deciding whether ϕ ∈ Cn((cid:4)), employing an SAT-oracle (see proof of Proposition 8.4), and whether ϕ is a literal (in (cid:4)), which can be done in polynomial time. Therefore (cid:2)-CONSEQUENCE is in PNP ⊆ (cid:14) p22 is this case as well.∧∧, Cn}, it is clear that ϕ ∈ Cn(cid:2)((cid:4)) can be verified in a polynomial number of steps, thus 2(cid:2)-CONSEQUENCE is in P ⊆ (cid:14) p∩ (cid:15)p2 .2→. Let f→ : K → K be defined as f→((cid:5)) = (cid:5) ∪ {ψ | θ, θ → ψ ∈ CnNow consider Cn(cid:2) = Cn2 ((cid:4)) = {ψ ∈ Cn((cid:4)) | ψ ∈ Lit((cid:4))}, for Cn(cid:2) ∈ {Cn Pm, Cn Pm∩ (cid:15)pFor Cn(cid:2) ∈ {CnId, Cnthat f→ can be computed in polynomial time. For any positive n ∈ N, let f n→((cid:5)) = f→( f→( f→((cid:5))))). Note that ϕ ∈ Cn(cid:2)((cid:4)) iff there is an n ∈ N such that ϕ ∈ f nf 3→ in (cid:4) is limited by (cid:20)(cid:4)(cid:20), Cn(cid:2)((cid:4)) = fany (cid:5) ∈ K and positive n ∈ N. Therefore, one can compute ftime in (cid:20)(cid:4)(cid:20), and (cid:2)-CONSEQUENCE is in P ⊆ (cid:14) p2(cid:20)(cid:4)(cid:20)→ ((cid:4)). Thus, ϕ ∈ Cn(cid:2)((cid:4)) iff ϕ ∈ f∧((cid:5))} for any (cid:5) ∈ K. Note → denote the n-th iterated of f→ (for instance, →((cid:4)). As the number of connectives →((cid:5))(cid:20) ≤ (n + 1)(cid:20)(cid:5)(cid:20), for (cid:20)(cid:4)(cid:20)→ ((cid:4)) = Cn(cid:2)((cid:4)) and check whether ϕ ∈ Cn(cid:2)((cid:4)) in polynomial (cid:20)(cid:4)(cid:20)→ ((cid:4)). By construction, (cid:20) f nIf Cn(cid:2) = Cn P I , then ϕ ∈ Cn(cid:2)((cid:4)) iff ϕ is a prime implicate of some ψ ∈ (cid:4). Hence, to decide whether ϕ ∈ Cn(cid:2)((cid:4)), after verifying in polynomial time that ϕ is a clause, one can check, for each ψ ∈ (cid:4), if the following conditions hold: (i) ψ (cid:12) ϕ); (ii) if θ is a clause in Cn({ψ}) and θ (cid:12) ϕ, then ϕ and θ are equivalent. Condition (i) can be checked with a single call to a SAT-oracle. To check condition (ii), it suffices to test the clauses θ formed by discarding a disjunct from ϕ, ensuring they are not in Cn({ϕ}). Hence, as deciding ψ (cid:12) θ takes one call to a SAT-oracle and there are linear number of θ to be tested for each ψ ∈ (cid:4), conditions (i) and (ii) take a polynomial number of SAT-oracle calls for each ψ ∈ (cid:4). Therefore, with a SAT-oracle, we can decide (cid:2)-CONSEQUENCE in polynomial time, and (cid:2)-CONSEQUENCE is in PNP ⊆ (cid:14) p2∩ (cid:15)p2 .2 . (cid:2)∩ (cid:15)p2011, pp. 2632–2637.vol. 7958, Springer, 2013, pp. 230–241.2016.04.004, in press.150G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151References[1] C.E. Alchourrón, P. Gärdenfors, D. Makinson, On the logic of theory change: partial meet contraction and revision functions, J. Symb. Log. 50 (2) (1985) 510–530.[2] M. Ammoura, B. Raddaoui, Y. Salhi, B. Oukacha, On measuring inconsistency using maximal consistent sets, in: European Conference on Symbolic and Quantitative Approaches to Reasoning and Uncertainty, Springer, 2015, pp. 267–276.[3] M. Arenas, L.E. Bertossi, J. Chomicki, Consistent query answers in inconsistent databases, in: Proceedings of the Eighteenth ACM SIGACT–SIGMOD–SIGART Symposium on Principles of Database Systems, May 31–June 2, 1999, Philadelphia, Pennsylvania, USA, 1999, pp. 68–79.[4] O. Arieli, A. Zamansky, A graded approach to database repair by context-aware distance semantics, Fuzzy Sets Syst. 298 (2016) 4–21.[5] S. Arora, B. Barak, Computational Complexity: A Modern Approach, Citeseer, 2009.[6] L. Bertossi, Database Repairing and Consistent Query Answering, Synthesis Lectures on Data Management, Morgan and Claypool Publishers, 2011.[7] L. Bertossi, C. Schwind, Analytic tableaux and database repairs: foundations, in: Proceedings of the Second International Symposium on Foundations of Information and Knowledge Systems, FoIKS 2002, in: Lecture Notes in Computer Science, vol. 2284, Springer, 2002, pp. 32–48.[8] P. Besnard, Revisiting postulates for inconsistency measures, in: Logics in Artificial Intelligence, Springer, 2014, pp. 383–396.[9] M. Dalal, Investigations into a theory of knowledge base revision: preliminary report, in: Seventh National Conference on Artificial Intelligence, 1988, pp. 475–479.[10] M. Dao-Tran, T. Eiter, M. Fink, T. Krennwallner, Distributed evaluation of nonmonotonic multi-context systems, J. Artif. Intell. Res. 52 (2015) 543–600.[11] G. De Bona, M. Finger, Measuring inconsistency in probabilistic logic: rationality postulates and Dutch book interpretation, Artif. Intell. 227 (2015) 140–164.[12] G. De Bona, M. Finger, M.M. Ribeiro, Y.D. Santos, R. Wassermann, Consolidating probabilistic knowledge bases via belief contraction, in: Proceedings, Fifteenth International Conference on the Principles of Knowledge Representation and Reasoning, KR 2016, 2016, pp. 125–134.[13] D. Doder, M. Raškovi ´c, Z. Markovi ´c, Z. Ognjanovi ´c, Measures of inconsistency and defaults, Int. J. Approx. Reason. 51 (7) (2010) 832–845.[14] T. Eiter, M. Fink, G. Ianni, P. Schüller, The impl policy language for managing inconsistency in multi-context systems, in: Applications of Declarative Programming and Knowledge Management, in: Lecture Notes in Computer Science, vol. 7773, Springer, 2013, pp. 3–26.[15] T. Eiter, M. Fink, P. Schüller, A. Weinzierl, Finding explanations of inconsistency in multi-context systems, Artif. Intell. 216 (2014) 233–274.[16] T. Eiter, M. Fink, A. Weinzierl, Preference-based inconsistency assessment in multi-context systems, in: Logics in Artificial Intelligence – 12th European Conference, JELIA 2010, in: Lecture Notes in Computer Science, vol. 6341, Springer, 2010, pp. 143–155.[17] J. Grant, Classifications for inconsistent theories, Notre Dame J. Form. Log. 19 (3) (1978) 435–444.[18] J. Grant, A. Hunter, Measuring the good and the bad in inconsistent information, in: International Joint Conference on Artificial Intelligence, IJCAI’11, [19] J. Grant, A. Hunter, Distance-based measures of inconsistency, in: Symbolic and Quantitative Approaches to Reasoning with Uncertainty, in: LNCS, [20] J. Grant, A. Hunter, Analysing inconsistent information using distance-based measures, Int. J. Approx. Reason. (2016), http://dx.doi.org/10.1016/j.ijar.[21] S.O. Hansson, A Textbook of Belief Dynamics, Springer, 1999.[22] A. Hunter, Measuring inconsistency in knowledge via quasi-classical models, in: Eighteenth National Conference on Artificial Intelligence, AAAI, 2002, pp. 68–73.[23] A. Hunter, Logical comparison of inconsistent perspectives using scoring functions, Knowl. Inf. Syst. 6 (5) (2004) 528–543.[24] A. Hunter, S. Konieczny, Measuring inconsistency through minimal inconsistent sets, in: 11th International Conference on Principles of Knowledge Representation and Reasoning, KR’08, 2008, pp. 358–366.[25] A. Hunter, S. Konieczny, On the measure of conflicts: Shapley inconsistency values, Artif. Intell. 174 (14) (2010) 1007–1026.[26] S. Jabbour, Y. Ma, R. Badran, L. Sais, Y. Salhi, A mis partition based framework for measuring inconsistency, in: Proceedings, Fifteenth International Conference on the Principles of Knowledge Representation and Reasoning, KR 2016, 2016, pp. 84–93.[27] S. Jabbour, Y. Ma, B. Raddaoui, L. Sais, On the characterisation of inconsistency measures: a prime implicates based framework, in: International Conference on Tools with Artificial Intelligence, ICTAI’14, 2014, pp. 146–153.[28] S. Jabbour, B. Raddaoui, Measuring inconsistency through minimal proofs, in: Symbolic and Quantitative Approaches to Reasoning with Uncertainty, in: LNCS, vol. 7958, Springer, 2013, pp. 290–301.[29] K. Knight, Measuring inconsistency, J. Philos. Log. 31 (1) (2002) 77–98.[30] D. Lembo, M. Lenzerini, R. Rosati, M. Ruzzi, D.F. Savo, Inconsistency-tolerant semantics for description logics, in: Web Reasoning and Rule Systems – Fourth International Conference, RR 2010, Bressanone/Brixen, Italy, September 22–24, 2010, Proceedings, 2010, pp. 103–117.[31] T. Lukasiewicz, M.V. Martinez, G.I. Simari, Inconsistency handling in datalog+/- ontologies, in: ECAI 2012 – 20th European Conference on Artificial Intelligence. Including Prestigious Applications of Artificial Intelligence (PAIS-2012) System Demonstrations Track, Montpellier, France, August 27–31, 2012, 2012, pp. 558–563.[32] M. Martinez, F. Parisi, A. Pugliese, G.I. Simari, V.S. Subrahmanian, Inconsistency management policies, in: Principles of Knowledge Representation and Reasoning: Proceedings of the Eleventh International Conference, KR 2008, 2008, pp. 367–377.[33] M. Martinez, F. Parisi, A. Pugliese, G.I. Simari, V.S. Subrahmanian, Policy-based inconsistency management in relational databases, Int. J. Approx. Reason. 55 (2) (2014) 501–528.[34] C.H. Papadimitriou, D. Wolfe, The complexity of facets resolved, J. Comput. Syst. Sci. 37 (1) (1988) 2–13.[35] C.H. Papadimitriou, M. Yannakakis, The complexity of facets (and some facets of complexity), J. Comput. Syst. Sci. 28 (2) (1984) 244–259.[36] R. Reiter, A theory of diagnosis from first principles, Artif. Intell. 32 (1) (1987) 57–95.[37] A. Russo, B. Nuseibeh, J. Kramer, Restructuring requirements specifications for managing inconsistency and change: a case study, in: Third International Conference on Requirements Engineering, 1998, Proceedings, IEEE, 1998, pp. 51–60.[38] B. Salimi, L. Bertossi, From causes for database queries to repairs and model-based diagnosis and back, in: Marcelo Arenas, Martín Ugarte (Eds.), Proceedings of the 18th International Conference on Database Theory, ICDT 2015, in: LIPIcs. Leibniz Int. Proc. Inform., vol. 31, Schloss Dagstuhl–Leibniz-Zentrum fuer Informatik, 2015, pp. 342–362.[39] Y.D. Santos, M.M. Ribeiro, R. Wassermann, Between belief bases and belief sets: partial meet contraction, in: International Workshop on Defeasible and Ampliative Reasoning, DARe-15, 2015, pp. 50–56.[40] A. Tarski, The concept of truth in formalized languages, in: Logic, Semantics, Metamathematics, 1956, pp. 152–278.[41] M. Thimm, On the compliance of rationality postulates for inconsistency measures: a more or less complete picture, Künstl. Intell. (August 2016) 1–9.G. De Bona, A. Hunter / Artificial Intelligence 246 (2017) 118–151151[42] M. Thimm, On the expressivity of inconsistency measures, Artif. Intell. 234 (2016) 120–151.[43] M. Thimm, J.P. Wallner, Some complexity results on inconsistency measurement, in: Proceedings, Fifteenth International Conference on the Principles of Knowledge Representation and Reasoning, KR 2016, 2016, pp. 114–123.[44] J. Wijsen, Database repairing using updates, ACM Trans. Database Syst. 30 (3) (2005) 722–768.