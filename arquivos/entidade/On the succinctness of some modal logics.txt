Artificial Intelligence 197 (2013) 56–85Contents lists available at SciVerse ScienceDirectArtificial Intelligencewww.elsevier.com/locate/artintOn the succinctness of some modal logicsTim French a, Wiebe van der Hoek b,∗, Petar Iliev b, Barteld Kooi ca School of Computer Science and Software Engineering, University of Western Australia, Australiab Department of Computer Science, University of Liverpool, UKc Faculty of Philosophy, University of Groningen, The Netherlandsa r t i c l ei n f oa b s t r a c tArticle history:Received 24 February 2012Received in revised form 12 February 2013Accepted 16 February 2013Available online 18 February 2013Keywords:Knowledge representationModal logicSuccinctnessEpistemic logicFinite model theory of modal logicDescription logicsBoolean modal logicOne way of comparing knowledge representation formalisms that has attracted attentioni.e., we can ask whether one ofrecently is in terms of representational succinctness,the formalisms allows for a more ‘economical’ encoding of information than the other.Proving that one logic is more succinct than another becomes harder when the underlyingsemantics is stronger. We propose to use Formula Size Games (as put forward by Adlerand Immerman (2003) [1], but we present them as games for one player, called Spoiler),games that are played on two sets of models, and that directly link the length of a playin which Spoiler wins the game with the size of a formula, i.e., a formula that is true inthe first set of models but false in all models of the second set. Using formula size games,we prove the following succinctness results for m-dimensional modal logic, where one hasa set I = {i1, . . . , im} of indices for m modalities: (1) on general Kripke models (and alsoon binary trees), a definition [∀Γ ]ϕ =[i]ϕ (with Γ ⊆ I) makes the resulting logicexponentially more succinct for m > 1; (2) several modal logics use such abbreviations[∀Γ ]ϕ, e.g., in description logics the construct corresponds to adding role disjunctions,and an epistemic interpretation of it is ‘everybody in Γ knows’. Indeed, we show that onepistemic models (i.e., S5-models), the logic with [∀Γ ]ϕ becomes more succinct for m > 3;(3) the results for the logic with ‘everybody knows’ also hold for a logic with ‘somebodyknows’, and (4) on epistemic models, Public Announcement Logic is exponentially moresuccinct than epistemic logic, if m > 3. The latter settles an open problem raised by Lutz(2006) [18].i∈Γ(cid:2)© 2013 Elsevier B.V. All rights reserved.1. IntroductionThe study of the expressive power of logics is one of the major topics in mathematical logic and computer science. Thegeneral framework for such investigations can be described as follows. We begin with the question of whether a particularformalism can express some property on some class of models or not. The intuitive notion of property is given a formalexpression through the concept of query and, therefore, the formal version of our initial question is whether a particularquery is definable in some logic under investigation. Such questions are of great theoretical interest. However, it has beenargued in [10] that, as far as knowledge representation formalisms are concerned, the comparison of two such formalisms,L1 and L2, cannot be meaningfully accomplished just in terms of expressive power or the computational complexity of theirinference problems. This is due to the fact that often we have the following situation:1. L1 and L2 are equally expressive, and/or2. L1 and L2 have the same complexity of the satisfiability problem, or* Corresponding author.E-mail addresses: tim@csse.uwa.edu.au (T. French), wiebe@csc.liv.ac.uk (W. van der Hoek), pvi@liverpool.ac.uk (P. Iliev), B.P.Kooi@rug.nl (B. Kooi).0004-3702/$ – see front matter © 2013 Elsevier B.V. All rights reserved.http://dx.doi.org/10.1016/j.artint.2013.02.003T. French et al. / Artificial Intelligence 197 (2013) 56–85573. The complexities of L1 and L2 are different but so high that it cannot be honestly claimed to be of any practicalrelevance.Therefore, the authors of [10] suggest that a better comparison criterion is the representational succinctness of such for-malisms. Intuitively, if we are interested in some particular query Q that is expressible with formulae ϕ1 and ϕ2 fromL1 and L2 respectively, we can ask if there is a significant difference in the lengths of ϕ1 and ϕ2. Hence, the notion ofsuccinctness is a refinement of the notion of expressivity.In this paper we present a number of succinctness results related to three well-known extensions of multimodal logic(ML) which have a popular epistemic and knowledge representation interpretation. A brief overview of our main theoremsis as follows.(cid:2)Adding formulae of the form [∀Γ ]ϕ to ML results in exponential succinctness on the well-known class of equivalencemodels S5, the typical semantics for epistemic logic. Intuitively, a formula [∀Γ ]ϕ is best thought of as an abbreviation[i]ϕ. Such an abbreviation arises naturally in many branches of modal logic. For example, inof the ML-formulaepistemic logic [6,25], [∀Γ ] is called the ‘everybody knows’-modality. In boolean modal logic [9], [∀Γ ] corresponds to amodality of the form [i1 ∪ · · · ∪ in], where {i1, . . . , in} = Γ ; in the parlance of Description logics [2], [∀Γ ] corresponds toadding role disjunctions to the description logic ALC (as in ‘sibling’ being defined as the role disjunction of ‘brother’and ‘sister’). Finally, in dynamic logic [11], [∀Γ ]ϕ expresses that after every execution of any program from Γ , ϕ holds(demonic non-determinism).i∈Γ(cid:3)Similarly, adding formulae of the form [∃Γ ]ϕ to ML results in exponential succinctness on S5. A formula [∃Γ ]ϕ can be[i]ϕ. Again, such formulae arise naturally in epistemic logic wherethought of as an abbreviation of the ML-formulathe modality [∃Γ ] is called the ‘somebody knows’ modality. In Dynamic logic, this modality would represent angelicnon-determinism: there is choice of a program from Γ , such that ϕ will hold after every execution of it.Finally, adding formulae of the form [ψ]ϕ to ML again results in exponential succinctness on S5, which answers aquestion left open in [18]. The modal operator [ψ] was introduced in [21] as a means for formalising the intuitive notionof ‘public announcement’. Intuitively, a formula [ψ]ϕ is evaluated at a point w in a Kripke model by first discarding allpoints that do not satisfy ψ and then, if w has survived this procedure, we see whether ϕ is true at w in the newlyobtained model.i∈ΓThe first of the above results can be explained in the following way. We show that for every natural number n, thereis a set of S5 models Mn and a property P of these models such that there is formula of the form [∀Γ ]ϕ, whose lengthis linear in n, that expresses P but every equivalent formula from ML has length exponential in n. Similarly for the secondand third results. This highlights the crucial importance of the class of models we use in our proofs. Intuitively, provingsuch a result with respect to a set of models N for which we have no special requirements for the nature of the relationsseems easier than when we impose additional conditions on the models. This is so, because the more conditions we imposeon our models, the greater the chance to find a formula of sub-exponential length equivalent to [∀Γ ]ϕ. Later we will seethat such results depend not only on the class of models used but on the number of variables and relation symbols in thelanguage, too.The paper is organised as follows. In Section 2, we briefly introduce some classes of functions needed to define thenotion of succinctness, or, better what it means that one logic is exponentially more succinct than another. We also providea lemma (Lemma 1) which offers a sufficient condition to decide this: all our proofs of succinctness rely on this lemma. Inthis section, we also define the four modal languages ML, [∀Γ ]ML, [∃Γ ]ML and [ϕ]ML that we deal with in this paper. Howdo we demonstrate that any formula equivalent to ψ ∈ L2 must have at least a certain length? In Section 2.3, we proposeto use (an adaptation of) Formula Size Games (FSGs) introduced in [1]. FSGs establish a direct link between the number ofmoves needed for one player to win a game, and the length of formulae associated with the game (Theorem 1). We alsoprove the principle of diverging pairs (Theorem 2), which guarantees under which condition the number of moves neededto win certain sub-games, contribute to the number of moves to win the overall-game.Then, Section 3 presents our succinctness results. In particular, in Section 3.1, we employ FSGs to show that both [∀Γ ]MLand [∃Γ ]ML are exponentially more succinct than ML, on the general class of Kripke models K (Theorem 3). The theorem alsoestablishes this for [ϕ]ML, but the proof for this is in [18]. Finally, Theorem 4 generalises this result of succinctness of thesethree modal languages to the class of models S5, i.e., models where the underlying accessibility relations are equivalences.We conclude in Section 4, stating some open problems and conjectures.The present paper is a greatly extended version of [8].2. Preliminaries2.1. Defining succinctnessWhen studying succinctness, we want to say that, in order to express a certain sequence of properties, the length offormulae in one language grows faster than in another language. To reason about relative growth of functions, one oftenuses either the so-called o-notation (also called asymptotic analysis), or a notation based on limits: both approaches are58T. French et al. / Artificial Intelligence 197 (2013) 56–85equivalent (see e.g., [5]). We feel that the latter notation is often intuitively more clear, but on the other hand the o-nota-tion enables us to prove Lemma 1. (The latter lemma provides a sufficient condition for proving succinctness: the readerinterested in our succinctness results may start reading Lemma 1 and use that as a working definition of succinctness forthe present paper.) For this reason, we present both notations, without here dwelling on their equivalence.The sets of the natural, the positive natural and the positive real numbers are denoted N, N+, respectively.All functions we consider are mappings from R+to N+,as functions that measure growth of size of formulae in a sequence). We use the following standard notation (see forexample [5]). Let f (x), g(x) denote functions of one variable, for which we will sometimes also write f and g. Unless statedotherwise, the variables c, z0 and z range over R+.(cid:7)(cid:8)(cid:7) there are c, z0 such that for all z (cid:2) z0: f (z) (cid:3) cg(z)f (x)(cid:7)(cid:8)(cid:7) for all c there is z0 s.t. for all z (cid:2) z0: f (z) < cg(z)(later, we will instantiate them as functions from N+(cid:5)g(x)(cid:5)g(x), and R+to R+=(cid:6)f (x)(1.b)(1.a)O(cid:4)=(cid:6)o(cid:4)So, a function f (x) is in O (g(x)) if there is a constant c ∈ R+constant times g. Using the alternative lim-notation, we can rewrite (1.a) and (1.b) as (2.a) and (2.b), respectively:, such that from some point z0 ∈ R+on, fis bounded by thef (x) ∈ O(cid:4)(cid:5)g(x)iff for some c ∈ R+:limx→∞f (x)g(x)(cid:3) c(2.a)For f to be in o(g(x)) the requirement is much stronger: no matter how small the real number c is, after some pointz0, the function f will be bound by c times g, i.e., be smaller. Equivalently:f (x) ∈ o(cid:4)(cid:5)g(x)ifflimx→∞f (x)g(x)= 0(2.b)As usual, the class poly(x) of (single-variable) polynomial functions is defined as follows.poly(x) =(cid:4)(cid:5)xc(cid:9)Oc∈NThe class of exponential functions is denoted EXP and is identified with the class 2poly(x). The class of sub-exponentialfunctions, denoted SUBEXP, is identified with the class 2o(x). That is,h(x) ∈ SUBEXP iff h(x) = 2 f (x)for some f (x) ∈ o(x)Using the alternative notation, we have h(x) ∈ SUBEXP if h(x) = 2 f (x) for some f (x) with limx→∞we derive:h(x) ∈ SUBEXP ifflimx→∞h(x)2x= 0(1.c)f (x)x= 0, from which(2.c)The idea of SUBEXP is that it represents a class of functions that may grow faster than polynomials, yet not as fast as a√‘proper’ exponential function. Examples of functions in SUBEXP are polynomial functions, log(x), and 2x.Next, we define the notion of logic in a way that is sufficient for our purposes. For a more precise definition, the readeris invited to consult some of the standard textbooks on mathematical logic, e.g., [14].Definition 1 (Logic). A logic L = (cid:11)Φ, |(cid:12)L, M(cid:13) is a triple where Φ is a non-empty set of formulae, M is a non-empty class ofmodels, and |(cid:12)L ⊆ M × Φ is a non-empty binary relation called truth relation. If the pair (M , ϕ) ∈ |(cid:12)L, we write M |(cid:12)L ϕand say that the formula ϕ is true in the model M .Note that we have not yet defined formulae, the truth relation |(cid:12)L, and the class of models M. They are treated asparameters to be specified for the case at hand. Our only assumptions at this point are:• Formulae are finite strings over a countable alphabet and the length of any formula ϕ, denoted |ϕ|, is the sum of thenumber of appearances of characters occurring in ϕ;• If L1 = (cid:11)Φ1, |(cid:12)1, M1(cid:13) and L2 = (cid:11)Φ2, |(cid:12)2, M2(cid:13) are two logics such that Φ1 ⊆ Φ2 and M1 ⊆ M2, then M |(cid:12)1 ϕ if and onlyif M |(cid:12)2 ϕ for any M ∈ M1 and ϕ ∈ Φ1.Of course, later, when we study specific logics, we will formally define formulae, the truth relation, the class of models,and formula length.Definition 2 (Expressivity). Let L1 = (cid:11)Φ1, |(cid:12)1, M(cid:13) and L2 = (cid:11)Φ2, |(cid:12)2, M(cid:13) be two logics. We say that L2 is at least as expressiveas L1 on the class of models M, and write L1 (cid:3)M L2, if and only if for every formula ϕ1 ∈ Φ1, there is a formula ϕ2 ∈ Φ2such that for every M ∈ M, it is true that M |(cid:12)1 ϕ1 if and only if M |(cid:12)2 ϕ2. We say that the formula ϕ2 is equivalent toϕ1 on M, and write ϕ1 ≡M ϕ2.L1 and L2 are said to be equally expressive on M, written L1 =M L2, if both L1 (cid:3)M L2 and L2 (cid:3)M L1 hold. As the readerwould expect, L1 <M L2 is short for L1 (cid:3)M L2 and L2 (cid:2)M L1T. French et al. / Artificial Intelligence 197 (2013) 56–8559The next definition, first given in [12] and [13], introduces the notion of succinctness as a refinement of expressivity.Definition 3 (Succinctness). Let L1 = (cid:11)Φ1, |(cid:12)1, M(cid:13) and L2 = (cid:11)Φ2, |(cid:12)2, M(cid:13) be two logics such that L1 (cid:3)M L2. Let F be a class offunctions.• We say that L1 is F -succinct in L2 on M, and write L1 (cid:3)Fϕ1 ∈ Φ1 there is a formula ϕ2 ∈ Φ2 which is equivalent to ϕ1 on M such that |ϕ2| (cid:3) f (|ϕ1|). We write L1 (cid:2)Fnot the case that L1 is F -succinct in L2 on M.M L2, if and only if there is a function f ∈ F such that for everyM L2 if it is• We say that L1 is exponentially more succinct than L2 on M if and only if L1 (cid:2)SUBEXPL2.MIntuitively, when we say that L1 is F -succinct in L2 on M, not only do we mean that L2 is at least as expressive as L1 onM, but, in addition, we can give an F -upper bound on the size of L2-formulae needed to express all of L1 on M. However,if the length of the L2-formulae expressing all of L1 on M cannot be bounded from above by a sub-exponential function,we say that L1 is exponentially more succinct than L2 on M. We would like to stress that L1 (cid:2)FM L1 can beboth true at the same time (see for example [24] for one such result). Likewise, it is possible for three languages that L1 isexponentially more succinct than L2 which in turn is exponentially more succinct than L3, without L1 being exponentiallymore succinct than L3. This is the case when some properties are more economically expressed in L1 than in L2, and some(other) properties are more economically expressed in L2 than in L3.M L2 and L2 (cid:2)FThe simple proposition below follows immediately from Definitions 1, 2, 3, and our assumption about the properties ofthe relation |(cid:12).Proposition 1. Let L1 = (cid:11)Φ1, |(cid:12)1, K(cid:13), L2 = (cid:11)Φ2, |(cid:12)2, K(cid:13), and L3 = (cid:11)Φ3, |(cid:12)3, M(cid:13), L4 = (cid:11)Φ4, |(cid:12)4, M(cid:13) be four logics for which thefollowing are true:• L1 (cid:2)FK L2;• Φ1 ⊆ Φ3;• Φ2 = Φ4;• K ⊆ M.Then L3 (cid:2)FM L4.It follows in particular from Proposition 1, in the case that Φ1 = Φ3, and F = SUBEXP, that if a logic L1 is exponentiallymore succinct than L2 on a restricted class of models K, the same language L1 is also exponentially more succinct than L2on a class of models M such that K ⊆ M.Next, we state a lemma that provides us with a sufficient condition for proving that a logic L1 is exponentially moresuccinct than another logic L2.Lemma 1. Let L1 = (cid:11)Φ1, |(cid:12)1, M(cid:13) and L2 = (cid:11)Φ2, |(cid:12)2, M(cid:13) be two logics such that L1 (cid:3)M L2 and let f (x) ∈ O (g(x)) be a strictlyincreasing function. Suppose that for every n ∈ N, there are two formulae αn ∈ Φ1 and βn ∈ Φ2 satisfying the properties:1. |αn| = f (n);2. |βn| (cid:2) 2g(n);3. βn is the shortest formula in Φ2 that is equivalent to αn on M.Then L1 (cid:2)SUBEXPML2.Proof. We have to prove that for every function i(x) ∈ SUBEXP there is a formula ϕi ∈ Φ1 such that |θ| > i(|ϕi|) for anyformula θ ∈ Φ2 that is equivalent to ϕi on M.Since f (x) ∈ O (g(x)), there are natural numbers c and z0 such that f (z) (cid:3) cg(z) for all z (cid:2) z0. Hence 1c f (z) (cid:3) g(z) forc m for all m (cid:2) m0. Sinceall z (cid:2) z0. Suppose now that i(x) ∈ SUBEXP. Then there is a natural number m0 such that i(m) < 2|αi|f (x) is strictly increasing, there is a natural number i (cid:2) n0, such that |αi| = f (i) (cid:2) m0. Therefore, i(|αi|) < 2. Now, thestatement follows from the condition that βi is the shortest formula that is equivalent to αi, the fact that |βi| (cid:2) 2g(i), andg(i) (cid:2) 11c1c f (i) = 1c|αi|. (cid:2)Corollary 1. Suppose the conditions of Lemma 1 are met. Then there are infinitely many pairwise non-equivalent formulae on Mamong the formulae αn, n (cid:2) 1.formulae on M αi, . . . , αk among the formulaeProof. Suppose thatα1, . . . , αn, . . . . Let βi, . . . , βk be the respective equivalent formulae on M in the sequence β1, . . . , βn, . . . . Since any otherthere are only finitely many non-equivalent60T. French et al. / Artificial Intelligence 197 (2013) 56–85formula α j , where j /∈ {i, . . . , k} in the sequence α1, . . . , αn, . . . is equivalent on M to one of the formulae αi, . . . , αk, itfollows that every αl formula is equivalent on M to one of the formulae βi, . . . , βk. Therefore, for any sufficiently largeindex l, it is not true that βl is the shortest formula that is equivalent on M to αl and at the same time |βl| (cid:2) 2l. (cid:2)We finish this subsection with some comments on Lemma 1 and Definition 3.Note that the condition f (x) ∈ O (g(x)) in the statement of the lemma is essential and cannot be replaced by g(x) ∈O ( f (x)). To see this, consider the following example:Example 1. Suppose that for every n ∈ N, there are two formulae αn ∈ Φ1 and βn ∈ Φ2 satisfying the properties:(cid:15)1(cid:15)2(cid:15)3. |αn| = n3;. |βn| = 2n;. βn is the shortest formula in Φ2 that is equivalent to αn on K.It is obvious that n ∈ O (n3). In this case however, we cannot use these two sequences of formulae to prove that there is anx bounds the length ofexponential succinctness gap between the logics L1 and L2 because the sub-exponential function 2. Hence, we must impose a stronger condition on the length of |βn|, namely,each βn in the length of αn, i.e., |βn| = 2|βn| = 2 f (n) where n3 ∈ O ( f (n)).|αn|√3√3To the best of our knowledge, [12] and [13] are the first papers that gave an explicit general definition of the notionof one logic being exponentially more succinct than another. Some articles (e.g. [16,18–20,22]) use instances of Lemma 1implicitly, while others define explicitly ‘exponentially more succinct’ as some particular instance of Lemma 1. For example,the following definition is used in [23].If two languages, L1 and L2, are equally expressive, we say that L1 is exponentially more succinct than L2 if there is an infinite se-quence of L1 expressions R1, R2, . . . where the length of Rk is polynomial in k, such that for every sequence of equivalent L2-expressionsP 1, P 2, . . . , the length of P k is exponential in k.Undoubtedly, such a definition provides a sufficient condition1 for L1 to be exponentially more succinct than L2, but,unfortunately, it does not fit results like the one in, e.g., [22], where, in the wording above, the length of the expression Rkis logarithmic in k while the length of P k is linear in k. Of course this case is covered by Lemma 1.2.2. Multimodal logicIn this subsection, we define the logics that we study in the rest of the paper.Definition 4 (Formulae). A signature is a pair Σ = (cid:11) A, I(cid:13), where A = {p1, p2, . . .} is a countable set of propositional (or‘atomic’) symbols and I = {i1, i2, . . . , in} is a finite set2 of indices. Let p, i and Γ vary over A, I , and the non-empty subsetsof I , respectively. The formulae of the Multimodal Logic ML and its extensions [∀Γ ]ML, [∃Γ ]ML, and [ϕ]ML in the signatureΣ = (cid:11) A, I(cid:13) are built as follows.• The set ΦML of formulae of Multimodal Logic ML consists of all strings ψ constructed according to the rule:ϕ := p | ¬ϕ | (ϕ ∨ ϕ) | [i]ϕ;• The set of formulae Φ[∀Γ ]ML of the logic [∀Γ ]ML consists of the strings:ϕ := p | ¬ϕ | (ϕ ∨ ϕ) | [i]ϕ | [∀Γ ]ϕ;• The set Φ[∃Γ ]ML of formulae of the logic [∃Γ ]ML, consists of the strings:ϕ := p | ¬ϕ | (ϕ ∨ ϕ) | [i]ϕ | [∃Γ ]ϕ;• The set Φ[ϕ]ML of formulae of the logic [ϕ]ML consists of the strings:ϕ := p | ¬ϕ | (ϕ ∨ ϕ) | [i]ϕ | [ϕ]ϕ;1 Provided that we are careful what ‘exponential in k’ means in this case as explained in Example 1.2 We follow a common convention in modal logic that the number of modalities, or indices is finite. Allowing for infinite sets of indices would notnegatively affect our main results, however. In that case, we would have two options: (1) while allowing I to be infinite, we would require that the subsetsΓ that occur in the formulas must be finite. In that case, we would still have ML =K [∀Γ ]ML and ML =K [∃Γ ]ML. Alternatively, (2) we also allow the Γ ’sthat occur in formulas to be infinite. In that case, we would have ML (cid:2)K [∀Γ ]ML and ML (cid:2)K [∃Γ ]ML (rather than =K in both cases), a condition that is apre-requisite for succinctness (see Definition 3). Under the second alternative, we would also need to specify that for instance |[∀Γ ]ϕ| is infinite wheneverΓ is.T. French et al. / Artificial Intelligence 197 (2013) 56–8561We will also refer to sets of formulae as just defined as languages.As suggested in the introduction, there are plenty of examples of such languages. Let us here restrict ourselves to anepistemic or doxastic setting. Then, I represents a set of agents, [i]ϕ (which would be typically written K iϕ) would denotethat agent i knows ϕ, in a doxastic setting [i]ϕ (B iϕ) would express that i believes that ϕ. In an epistemic context, theformulae of the form [ϕ]ψ are to be read as ‘after a public announcement that ϕ, property ψ holds’. Likewise, in the samecontext, [∀Γ ]ϕ (typically written EΓ ϕ) means that everybody in Γ knows ϕ, whereas [∃Γ ]ϕ denotes that somebody in Γknows that ϕ.Definition 5 (Length of formulae). The length of a formula ϕ is denoted |ϕ|. It is defined as follows: |p| = 1, |(ϕ1 ∨ ϕ2)| =|ϕ1| + |ϕ2| + 1, |¬ϕ| = |[i]ϕ| = |[∃Γ ]ϕ| = |[∀Γ ]ϕ| = 1 + |ϕ|, and |[ϕ1]ϕ2| = |ϕ1| + |ϕ2|.As usual, we have the following abbreviations (cid:17) = p ∨ ¬p, ⊥ = ¬(cid:17), (ϕ ∧ ψ) = ¬(¬ϕ ∨ ¬ψ), (cid:11)i(cid:13)ϕ = ¬[i]¬ϕ, and (cid:11)ϕ(cid:13)ψ =¬[ϕ]¬ψ . It is important to note though that by defining the languages as we did, succinctness results are given in the mostgeneral way, in the following sense.Definition 6. Let Φ be a set of formulae, and L = (cid:11)Φ, |(cid:12), M(cid:13) a logic. We say that Φ(cid:15)is a mapping τ : Φ(cid:15) → Φ such thatadds linear definitions in L to Φ if there1. τ (α) is equivalent to α on M for all α ∈ Φ;2. ∃k ∈ N∀α ∈ Φ |τ (α)| (cid:3) k|α|.The smallest k for which the second item holds is called the scalar for Φ(cid:15)(with respect to Φ).As an example, take Φ to be any of the sets of formulae defined above, and L = (cid:11)Φ, |(cid:12), K(cid:13), the set of formulae Φ(cid:15)obtained from Φ by adding the definitions of ϕ ∧ ψ, ⊥ and (cid:11)i(cid:13)ϕ. Then Φ(cid:15)adds linear definitions in L to Φ. In this case,k (cid:2) 5. Note that if |τ (α)| (cid:3) 5|α| and |τ (β)| (cid:3) 5|β|, we have |τ (α ∧ β)| = |¬(¬τ (α) ∨ ¬τ (β))| (cid:3) 5 + |τ (α)| + |τ (β)| (cid:3)5 + 5|α| + 5|β| = 5|α ∧ β|, while |τ (⊥)| = |¬(¬p ∨ p)| = 5 (cid:3) 5|⊥|).Proposition 2. Let Φ1, Φ2 be any of the languages defined in Definition 4, and let L1 = (cid:11)Φ1, |(cid:12)1, M(cid:13) and L2 = (cid:11)Φ2, |(cid:12)2, M(cid:13) be twologics. Suppose Φi adds linear definitions in Li with scalar ki (i = 1, 2). Let Li , |(cid:12)i, M(cid:13) (i = 1, 2). Then:= (cid:11)Φ(cid:15)(cid:15)iL1 is exponentially more succinct than L2 on M iff(cid:15)(cid:15)2 on M1 is exponentially more succinct than LL(cid:5)(cid:4)|ϕ1|(cid:5)(cid:4)|ϕ(cid:15)Proof. Let k = max{k1, k2}. Then, for i = 1, 2, we have that for every ϕ(cid:15)i on M and |ϕi| (cid:3) k|ϕ(cid:15)ϕ(cid:15)|. Now, recall that L1 is exponentially more succinct than L2 on M iff∈ Φ(cid:15)iii there is ϕi ∈ Φi , such that ϕi is equivalent to∀ f ∈ SUBEXP ∃ϕ1 ∈ Φ1 ∀ϕ2 ∈ Φ2 ϕ1 ≡M ϕ2 ⇒ |ϕ2| > f(1)Assume (1) holds and take an arbitrary g ∈ SUBEXP. Define f (x) = kg(x). Then f ∈ SUBEXP and hence ∃ϕ1 ∈ Φ1 ⊆ Φ(cid:15)that ∀ϕ2 ∈ Φ2 we have ϕ1 ≡M ϕ2 ⇒ |ϕ2| > f (ϕ1). Now fix this ϕ1 and choose ϕ(cid:15)2 such that ϕ(cid:15)(cid:15)have |ϕ(cid:15)k f (|ϕ1|) = g(|ϕ1|), which proves that L1 is exponentially more succinct than L21 such≡M ϕ1 arbitrarily. We(cid:15)2 on M.|ϕ2| > 1| (cid:2) 1k∈ Φ(cid:15)22For the other direction, suppose(cid:15)12(cid:15)1∈ Φ∈ Φ∀ϕ(cid:15)2 ϕ(cid:15)∀g ∈ SUBEXP ∃ϕ(cid:15)| > gTake an arbitrary f ∈ SUBEXP and define f 1(x) = max{ f ( y) | y (cid:3) x}. Then we have that f 1(x) is a non-decreasing func-∈ Φ(cid:15)11 and consider its equivalent ϕ1 ∈ Φ1tion3 in SUBEXP such that f (cid:3) f 1. Next, define f 2(x) = f 1(kx). Again, f 2 ∈ SUBEXP and f 2 (cid:2) f 1. By (2), we have that ∃ϕ(cid:15)such that ∀ϕ(cid:15)2with k|ϕ(cid:15)1|) holds. Take this ϕ(cid:15)12 that is equivalent on M to ϕ1. We then have2, the implication ϕ(cid:15)| (cid:2) |ϕ1|. Take an arbitrary ϕ2 ∈ Φ2 ⊆ Φ(cid:15)(cid:4)| > f 2(|ϕ(cid:15)≡M ϕ(cid:15)2⇒ |ϕ(cid:15)2∈ Φ(cid:15)∈ Φ(cid:15)≡M ϕ(cid:15)⇒ |ϕ(cid:15)(2)(cid:4)(cid:5)(cid:5)(cid:5)|2121111|ϕ2| > f 2|ϕ(cid:15)1|(cid:2) f 1|ϕ1|(cid:2) f(cid:4)|ϕ1|Since this holds for arbitrary f ∈ SUBEXP, this shows that L1 is exponentially more succinct than L2 on M. (cid:2)The class of models for the logics of Definition 4 and the respective truth relations are defined in the usual way (e.g.,see [3]), i.e, using Kripke models.3 I.e., ∀x, y ∈ R+(x (cid:3) y ⇒ f 1(x) (cid:3) f 1( y)).62T. French et al. / Artificial Intelligence 197 (2013) 56–85Definition 7 (Kripke model). A Kripke model for the signature Σ = (cid:11) A, I(cid:13) is a triple M = (cid:11)M, R, V (cid:13), where M is a non-emptyset, the members of which we will refer to as points, R : I → 2M×M is a mapping that assigns a binary relation on M toevery i ∈ I , and V : A → 2M is a function that assigns a subset of M to every p ∈ A. We write sR it for (s, t) ∈ R(i) and saythat t is an i-successor of s or that s and t are i-connected, or connected with an edge labelled i.The model M = (cid:11)M, R, V (cid:13) is said to be finite if M is finite. M is called image-finite if for every w ∈ M and every R(i),the set {v | w R i v} is finite. The pair (M , w), where w ∈ M, is called pointed model. Sets of pointed models are denotedA, B, . . . . The class of all pointed models is denoted K. Other important classes of models in this paper are KD45 and S5:they provide the most popular models for languages that interpret [i] as belief and knowledge of an agent i, respectively.Models M = (cid:11)M, R, V (cid:13) in KD45 are such that every R(i) is serial (i.e., ∀x ∈ M ∃ y ∈ M xR i y), transitive and Euclidean(∀xyz((xR i y & xR i z) ⇒ y R i z)). Finally, in models M = (cid:11)M, R, V (cid:13) in S5, every R(i) is an equivalence relation.Definition 8 (Truth). Let (M , w) ∈ K and ϕ be a formula. The relation “ϕ is true in the pointed model (M , w)”, written(M , w) |(cid:12) ϕ, is defined inductively on the structure of ϕ as follows.(M , w) |(cid:12) pif and only if w ∈ V (p);(M , w) |(cid:12) ¬ψ(M , w) |(cid:12) ψ1 ∨ ψ2(M , w) |(cid:12) [i]ψ(M , w) |(cid:12) [∃Γ ]ψ(M , w) |(cid:12) [∀Γ ]ψ(M , w) |(cid:12) [ψ1]ψ2if and only if not (M , w) |(cid:12) ψ;if and only ifif and only ifif and only ifif and only ifif and only if(M , w) |(cid:12) ψ1 or (M , w) |(cid:12) ψ2;for all v, w R i v implies (M , v) |(cid:12) ψ;there is an i ∈ Γ such that (M , w) |(cid:12) [i]ψ;for all i ∈ Γ , (M , w) |(cid:12) [i]ψ;If (M , w) |(cid:12) ψ1, then (M |ψ1 , w) |(cid:12) ψ2.Intuitively, the model M |ψ1 used to define the |(cid:12) relation for the formula [ψ1]ψ2 is the restriction of the model M to(cid:15)(cid:13),the points in which ψ1 is true. Formally, for any formula ϕ, and any model M = (cid:11)M, R, V (cid:13), the model M |ϕ = (cid:11)M(cid:15). We will, in Section 3, alsois such that Muse the dual (cid:11)ϕ(cid:13) of [ϕ], where (cid:11)ϕ(cid:13)ψ is defined as ¬[ϕ]¬ψ : in other words, (M , w) |(cid:12) (cid:11)ϕ(cid:13)ψ if and only if (M , w) |(cid:12) ϕand (M |ϕ, w) |(cid:12) ψ . In words: it is possible to announce ϕ (which in turn means that ϕ holds), and after announcing it, ψholds. Some properties of (cid:11)ϕ(cid:13) are given in the proof of Proposition 5.(cid:15) = {v ∈ M | (M , v) |(cid:12) ϕ}, and Rare the restrictions of R and V to Mand V(cid:15), V(cid:15), RIf A is a set of pointed models and ϕ is a formula of one of the logics above, we write A |(cid:12) ϕ to mean that for all(cid:15)(cid:15)(M , w) ∈ A, (M , w) |(cid:12) ϕ.We were not completely precise in defining the truth relation |(cid:12), because, technically speaking, we have to specify fourtruth relations corresponding to the four logics ML, [∀Γ ]ML, [∃Γ ]ML, and [ϕ]ML. Such precision, however, will unnecessarilycomplicate our exposition; moreover, it will always be clear from the context which of the truth relations we mean.2.3. Formula size gamesFormula Size Games or Adler–Immerman games were introduced in the seminal [1] as a generalisation of Ehrenfeucht–Fraïssé games that enable us to reason not only about the quantifier depth of a first-order formula but about its length,too. The versatility of these games stems from the fact that we can formulate a suitable version for practically any logic.However, it was noted already in [1] that unlike Ehrenfeucht–Fraïssé games, they are not truly two-player games becausethe second player, has in a sense an “optimal” answer to every move by the first player (the player we call Spoiler). Thisoptimal answer can be incorporated in the definition of the game and, therefore, there is no need for a second player. Whatis more, these games can be replaced completely by the so-called extended syntax trees defined in the important [13].Here, we will adopt the middle ground position and define a suitable one-player version. We opted to keep the intuitivelyappealing games and give complete proofs of the properties we need. For another application of formula size games toobtaining lower bounds on the size of modal logic formulae, the reader is invited to consult [7].Definition 9 (Formula size games). The one-person (called Spoiler) formula size game (FSG) on two sets of pointed modelsA and B is played as follows. During the course of the game, a game tree is constructed in such a way that each node islabelled with a pair (cid:11)C, D(cid:13) of sets of pointed models and one symbol from the set Σ = {p, ¬, ∨, [i]}. A node labelled withthe pair (cid:11)C, D(cid:13) is denoted (cid:11)C ◦ D(cid:13). The models in C are called the models on the left. Similarly, the models in D are calledthe models on the right.A node in the tree can be declared either open or closed. Once a node has been declared “closed”, no further game-movescan be played at it. Moves can be played only at open nodes. The game begins with the root of the game tree (cid:11)A ◦ B(cid:13) thatis declared “open”.Let an open node (cid:11)C ◦ D(cid:13) be given. Spoiler can make one of the following moves at this node:atomic-move: Spoiler chooses a propositional symbol p such that C |(cid:12) p and D |(cid:12) ¬p. The node is declared closed andT. French et al. / Artificial Intelligence 197 (2013) 56–8563not-move: Spoiler labels the node with the symbol ¬ and adds one new open node (cid:11)D ◦ C(cid:13) as a successor to the nodelabelled with the symbol p.(cid:11)C ◦ D(cid:13).or-move: Spoiler labels the node with the symbol ∨ and chooses two subsets C1 ⊆ C and C2 ⊆ C such that C = C1 ∪ C2.Two new open nodes are added to the tree as successors to the node (cid:11)C ◦ D(cid:13), namely (cid:11)C1 ◦ D(cid:13) and (cid:11)C2 ◦ D(cid:13).(cid:15)(cid:15)) such that v R i v[i]-move: Spoiler labels the node with the symbol [i] and, for each pointed model (D, v) ∈ D, he chooses a pointed model(if for some (D, v) ∈ D this is not possible, Spoiler cannot play this move). All these new(D, vpointed models are collected in the set D1. A set of models C1 is then constructed as follows. For each pointedmodel (C , w) ∈ C, all the possible pointed models (C , ware added to C1. If for some (C , w),the point w does not have an R i -successor, nothing is added to C1 for the pointed model (C , w). A new opennode (cid:11)C1 ◦ D1(cid:13) is added as a successor to the node (cid:11)C ◦ D(cid:13). In this case, we also say that Spoiler has played anindex-move.(cid:15)) such that w R i w(cid:15)Definition 10 (Winning condition for FSG). We say that Spoiler wins the FSG starting at (cid:11)A ◦ B(cid:13) in n moves if and only if thereis a game tree T with root (cid:11)A ◦ B(cid:13) and precisely n nodes such that every leaf of T is closed.The next theorem connects the formula size games with the length of formulae of ML.Theorem 1. Spoiler can win the FSG starting at (cid:11)A ◦ B(cid:13) in less than k moves if and only if there is some n < k and a formula ϕ ∈ ΦMLsuch that A |(cid:12) ϕ, B |(cid:12) ¬ϕ, and |ϕ| = n.Proof. (If) Suppose that there is a formula ϕ of size n < k such that A |(cid:12) ϕ and B |(cid:12) ¬ϕ. We prove by induction on thestructure of ϕ that Spoiler can win the game starting in (cid:11)A ◦ B(cid:13) in n moves by playing according to ϕ.Base caseIf ϕ is the propositional variable p, then Spoiler plays the atomic-move and the tree is closed, as required. It is obviousthat the tree has just one node, i.e., Spoiler can win the game in |ϕ| moves by playing according to ϕ.Induction step• If ϕ is ¬ψ , then Spoiler plays the not-move by adding the node (cid:11)B ◦ A(cid:13) as a successor to (cid:11)A ◦ B(cid:13). Clearly, B |(cid:12) ψ ,A |(cid:12) ¬ψ , and |ψ| = n − 1. Applying the induction hypothesis, Spoiler can win the sub-game starting at (cid:11)B ◦ A(cid:13) in n − 1moves by playing according to ψ , hence Spoiler can win in n moves the game starting at (cid:11)A ◦ B(cid:13) by playing accordingto ¬ψ .• If ϕ is ψ1 ∨ ψ2, then Spoiler plays the or-move and adds two new leaves to the tree, namely (cid:11)A1 ◦ B(cid:13) and (cid:11)A2 ◦ B(cid:13),where A = A1 ∪ A2, A1 |(cid:12) ψ1 and A2 |(cid:12) ψ2. Applying the induction hypothesis, we see that Spoiler can win in |ψ1|moves the sub-game starting at (cid:11)A1 ◦ B(cid:13), and he can win in |ψ2| moves the sub-game starting at (cid:11)A2 ◦ B(cid:13). Therefore,he can win the game starting at (cid:11)A ◦ B(cid:13) in |ψ1 ∨ ψ2| = |ψ1| + |ψ2| + 1 = n moves by playing according to ϕ.• If ϕ is a formula of the form [i]ψ , then for each model (B, v) ∈ B, Spoiler chooses a model (B, v(cid:15)) such that v R i v(cid:15)(cid:15)) |(cid:12) ¬ψ . Let B1 be the set of models Spoiler has chosen. For each pointed model (A , w) ∈ A, all possibleand (B, vpointed models (A , ware collected in the set A1. A new node (cid:11)A1 ◦ B1(cid:13) is added as a successor of(cid:11)A ◦ B(cid:13). Clearly, A1 |(cid:12) ψ and B1 |(cid:12) ¬ψ . Applying the induction hypothesis, we see that Spoiler can win the sub-gamestarting at (cid:11)A1 ◦ B1(cid:13) in |ψ| moves. Therefore, Spoiler can win the FSG starting at (cid:11)A ◦ B(cid:13) in |ϕ| = |[i]ψ| = |ψ| + 1 = nmoves by playing according to ϕ.(cid:15)) such that w R i w(cid:15)(Only if) Suppose that Spoiler has won the formula size game starting at (cid:11)A ◦ B(cid:13) in n < k moves. We claim that theresulting closed game tree is a parse tree of a formula ϕ of length n such that A |(cid:12) ϕ and B |(cid:12) ¬ϕ (in such a case, wewill also say that Spoiler plays ‘according to ϕ’). In order to prove this, we label the nodes of the tree step by step withformulae, starting with the leaves. These were labelled during the game with the propositional variables p that Spoiler usedto close them. Then the rest of the nodes are labelled successively. If a node has a ¬ label and its successor is labelled withψ , then that node is labelled with ¬ψ . If a node has an ∨ label and its two successors are labelled with ψ and χ , thenthat node is labelled with ψ ∨ χ , respectively. If a node has a [i] label and its successor is labelled with ψ , then that nodeis labelled with [i]ψ .By a straightforward backward induction on the tree we can see that for each node (cid:11)C ◦ D(cid:13), the following are true.• The string of symbols labelling the node is indeed a formula of ML.• The formula labelling the node is true in all the models in C and false in all the models in D. Therefore, the formulalabelling the root of the tree is true in all the pointed models in A and false in all the pointed models in B.It is obvious that the game tree is a parse tree for the formula labelling the root. (cid:2)64T. French et al. / Artificial Intelligence 197 (2013) 56–85Fig. 1. A 4-round FSG starting in node (cid:11){(M1, s1), (M2, s2)} ◦ {(M3, s3), (M4, s4)}(cid:13). A point s in a pointed model (M , s) is denoted in black, so e.g., s1 isdenoted by the black circle in M1 at the top node.Clearly, suitable game moves can be formulated also for the defined symbols (cid:17), ⊥, ∧, and (cid:11)i(cid:13). However, this is notessential since we are using FSG to obtain lower bounds on formula size and the introduction of these defined symbolsdoes not lead to a substantial reduction in the size of the formulae that contain them relative to the equivalent formulaebuilt using only the operators ¬, ∨, [i]: see Proposition 2.Example 2. Fig. 1 shows a 4-round FSG starting in a node with two models on each side: (cid:11){(M1, s1), (M2, s2)} ◦{(M3, s3), (M4, s4)}(cid:13). Only the atoms true at a given point are mentioned. There is only one index i. The big circles repre-sent the nodes in the game tree. The current points in the models are solid. Spoiler starts by playing an or-move. He wantsto exploit the fact that in one of the models on the left, q is false in the current point, whereas in the other pointed modelon the left, all i-successors satisfy p. In the left branch of the or-move, all pointed models on the left satisfy ¬q, whereasall on the right satisfy q. In order to close this branch using an atomic-move, Spoiler first needs to swap the models fromleft to right with a not-move. In the right branch, Spoiler plays an [i]-move: he manages, for every pointed model on theright, to find a successor that fails to verify p, whereas on the left all successors do verify p. Note that the latter pointedmodel gives rise to two pointed models in the successor of the node. In that node, Spoiler can play an atom-move to closethis branch. Note that the game tree represents a game that is played along the formula ¬q ∨ [i]p.Consider a node (cid:11)C ◦ D(cid:13). It is worth noting that the or-move does not specify that Spoiler splits the set C from the pairinto two disjoint sets C1 and C2. If Spoiler plays according to ϕ1 ∨ ϕ2 for instance, the models in C that verify both ϕ1 andϕ2 may well appear in both C1 and C2. Also, it may be that one of those sets C1 and C2 is empty: the same can happenwith C1 if it results from C when Spoiler plays an [i]-move at (cid:11)C ◦ D(cid:13): this takes care of the case that no pointed model inC has an i-successor.Definition 11 (Isomorphism of branches). A branch B in a closed game tree is any path leading from the root of the tree to aclosed leaf.1. Let two, not necessarily distinct, closed game trees T 1 and T 2 be given and let the branch B 1, consisting of the nodesη0, η1, . . . , ηk, and the branch B 2, consisting of the nodes η(cid:15)l (where the nodes in each branch have beennumbered in increasing order starting from the root of the tree), belong to T 1 and T 2, respectively. We call B1 and∼= B2, iff k = l and the symbols from the set Σ = {p, ¬, ∨, [i]} labelling the nodes η j , η(cid:15)B2 isomorphic, and write B 1(0 (cid:3) j (cid:3) k) are the same.2, . . . , η(cid:15)1, η(cid:15)0, η(cid:15)2. For any branch B, let I(B) = π1π2 . . . πn be a word over I such that π1 is the index of the first index-move occurringalong B (also for index moves, we assume that they have been numbered in increasing order starting from the root ofthe tree), π2 is the index of the second index-move, etc. For instance, the branch B (right) of the game tree of Fig. 1jT. French et al. / Artificial Intelligence 197 (2013) 56–8565satisfies I(B) = i. If we have a game tree induced by the formula [a](p ∨ [b]([a]q ∨ ¬[c]¬p)), then this tree has threebranches where I(B1) = a, I(B2) = aba and I(B3) = abc.Intuitively, isomorphism of branches means that the branches are equally long and they look the same provided that wej (0 (cid:3) j (cid:3) k). It is obvious thatdo not take into account the two sets of pointed models labelling the respective nodes η j , η(cid:15)if a game tree T has two non-isomorphic branches B 1 and B2, then T has at least two different branches.Let Br(T ) denote the set of branches of a closed game tree T .Definition 12 (Isomorphism of game-trees). Two closed game-trees T 1 and T 2 are called isomorphic, written T 1only if they are both parse trees of the same formula from ML.∼= T 2, if andThe reader may think about this notion in the following way. If we have two closed game-trees that look identicalprovided that we do not take into account the sets of pointed models labelling each node, then these trees are calledisomorphic.Some properties of formula-size games are listed in the next lemma. Note that only the second item has a “modal”flavour. The rest are general properties that apply to any logic.4We assume the reader is familiar with the notion of bisimulation and the fact that two image-finite pointed models aremodally equivalent if and only if they are bisimilar, i.e., the Hennessy–Milner theorem. For the relevant definitions, we referto [3]. We are going to use the following notation. For any pair of pointed models (cid:11)A, B(cid:13), the set of all closed game treeswith root (cid:11)A ◦ B(cid:13) is denoted T ((cid:11)A ◦ B(cid:13)).Lemma 2 (Properties of FSG). For any FSG starting at a node (cid:11)A ◦ B(cid:13),1. If there are two bisimilar models (A , w) ∈ A and (B, v) ∈ B, then Spoiler cannot win this game in any number of steps.2. If A and B are finite sets of image-finite models and Spoiler cannot win this game in any number of steps, then there are twobisimilar models (A , w) ∈ A and (B, v) ∈ B.3. If A = ∅ and B (cid:24)= ∅, then Spoiler can win this game by playing according to any formula ϕ such that B |(cid:12) ¬ϕ.4. If A (cid:24)= ∅ and B = ∅, then Spoiler can win this game by playing according to any formula ϕ such that A |(cid:12) ϕ.5. If A = B = ∅, then Spoiler can win this game in any number of steps n (cid:2) 1.6. If Spoiler can win this game in n moves, then he can also win in n moves the FSG starting at (cid:11)A1 ◦ B1(cid:13), where for every A1 ∈ A1,there is an A ∈ A that is bisimilar to A1 and, similarly, if B1 ∈ B1, then there is a B ∈ B that is bisimilar to B1; what is more,for every T ∈ T ((cid:11)A ◦ B(cid:13)), there is a T 1 ∈ T ((cid:11)A1 ◦ B1(cid:13)) such that T ∼= T 1.7. Suppose that Spoiler can win this game in n moves. Let A1 ⊆ A, B1 ⊆ B and let k be the smallest possible number of moves thatSpoiler needs to win the FSG starting at (cid:11)A1 ◦ B1(cid:13), then k (cid:3) n.Proof. 1. Since bisimilar models satisfy the same formulae of ML, there is no formula ϕ such that A |(cid:12) ϕ and B |(cid:12) ¬ϕ.Therefore, using Theorem 1, we see that Spoiler cannot win the FSG starting at the node (cid:11)A ◦ B(cid:13) in any number of stepsn (cid:2) 1.2. Let A and B be finite sets of image-finite models and suppose that Spoiler cannot win the game. Then we claim thatthere are two models (A , w) ∈ A and (B, v) ∈ B such that for all formulae ϕ ∈ ΦML,(A , w) |(cid:12) ϕ if and only if(B, v) |(cid:12) ϕLet us assume otherwise. Let A = {(A1, w 1) . . . (An, wn)} and B = {(B1, v 1) . . . (Bk, vk)}. According to our assumption, forevery pair of models (Ai, w i) ∈ A and (B j, v j) ∈ B, there is a formula κ +i− j such that(Ai, w i) |(cid:12) κ +i− jFor 1 (cid:3) i (cid:3) n, define αi =It is then obvious thatand (B j, v j) |(cid:12) ¬κ +i− j(cid:2)− j . By definition of κ +i1(cid:2) j(cid:2)k κ +i− j and αi , we have (Ai, w i) |(cid:12) αi but (B j, v j) |(cid:12) ¬αi (cf. Table 1).(cid:10)A |(cid:12)1(cid:2)i(cid:2)nαi while B |(cid:12) ¬(cid:10)αi1(cid:2)i(cid:2)nUsing Theorem 1, we see that Spoiler can win the game starting at (cid:11)A ◦ B(cid:13) which is a contradiction. Therefore, there aretwo models (A , w) ∈ A and (B, v) ∈ B that agree on all formulae ϕ ∈ ΦML. Since (A , w) and (B, v) are image-finite, wecan apply the Hennessy–Milner theorem. Therefore, (A , w) and (B, v) are bisimilar.4 This applies to items 1 and 6, too. We can replace the word “bisimilar” with any notion that captures the fact that the models satisfy the same formulaee.g., “elementary equivalent”, and 1 and 6 will remain true.66T. French et al. / Artificial Intelligence 197 (2013) 56–85Table 1(Ai , w i ) |(cid:12) κ +i(i (cid:2) n, j (cid:2) k).− j , but (B j , v j ) |(cid:12) ¬κ +i− j(A1, w 1) |(cid:12) κ +1(A1, w 1) |(cid:12) κ +1−1 , (B1, v 1) |(cid:12) ¬κ +1−1−2 , (B2, v 2) |(cid:12) ¬κ +1−2...(A1, w 1) |(cid:12) κ +1(A2, w 2) |(cid:12) κ +2(A2, w 2) |(cid:12) κ +2−k , (Bk, vk) |(cid:12) ¬κ +1−k−1 , (B1, v 1) |(cid:12) ¬κ +2−1−2 , (B2, v 2) |(cid:12) ¬κ +2−2...(A2, w 2) |(cid:12) κ +2−k , (Bk, vk) |(cid:12) ¬κ +2−k...(An, wn) |(cid:12) κ +n(An, wn) |(cid:12) κ +n−1 , (B1, v 1) |(cid:12) ¬κ +n−1−2 , (B2, v 2) |(cid:12) ¬κ +n−2...(An, wn) |(cid:12) κ +n−k , (Bk, vk) |(cid:12) ¬κ +n−k3. Suppose B |(cid:12) ¬ϕ. Since A = ∅, ϕ is trivially true in all the pointed models in A. Hence, Spoiler can win the FSGstarting at (cid:11)A ◦ B(cid:13) by playing according to ϕ.at (cid:11)A ◦ B(cid:13) by playing according to ϕ.4. Suppose A |(cid:12) ϕ. Since B = ∅, ϕ is trivially false in all the pointed models in B. Hence, Spoiler can win the FSG starting5. Let A = B = ∅. Then, for any formula ψ , it is trivially true that A |(cid:12) ψ and B |(cid:12) ¬ψ . Therefore, if |ψ| = n, then Spoilercan play according to ψ and win the FSG starting at (cid:11)A ◦ B(cid:13) in n moves. It is obvious that for any natural number n (cid:2) 1we can find a formula of length n. One such formula is ¬n−1 p, i.e., n − 1 occurrences of ¬ followed by the propositionalsymbol p.6. Since for every A1 ∈ A1, there is an A ∈ A that is bisimilar to A1 and, similarly, for B1 and B, we have that, for allformulae ψ , A |(cid:12) ψ ⇒ A1 |(cid:12) ψ and B |(cid:12) ψ ⇒ B1 |(cid:12) ψ . Suppose that Spoiler can win the FSG starting at (cid:11)A ◦ B(cid:13) in n moves.Then, according to Theorem 1, there is a formula ϕ of length n such that A |(cid:12) ϕ and B |(cid:12) ¬ϕ. By the observation above,A1 |(cid:12) ϕ whereas B1 |(cid:12) ¬ϕ. Therefore, Spoiler can win the FSG starting at (cid:11)A1 ◦ B1(cid:13) in n moves by playing according to ϕ.Moreover, every T ∈ T ((cid:11)A ◦ B(cid:13)) is a parse tree of some formula ψ such that A |(cid:12) ψ and B |(cid:12) ¬ψ , and by the argument justgiven, there is a game tree T 1 ∈ T ((cid:11)A1 ◦ B1(cid:13)) (T 1 being the parse tree of the same ψ ) for which T ∼= T 1.7. Suppose that k > n. It follows immediately from the previous item that Spoiler can win the FSG starting at (cid:11)A1 ◦ B1(cid:13)in n moves. Therefore, k is not the minimal number of moves that Spoiler needs to win the FSG starting at (cid:11)A1 ◦ B1(cid:13). (cid:2)The formula size games will be the main tool for obtaining our exponential succinctness results formulated in the nextsections. There, we apply the general recipe based on Lemma 1 that can be informally described as follows. Suppose thatwe want to prove that the logic L1 = (cid:11)Φ1, |(cid:12)1, M(cid:13) is exponentially more succinct than the logic L2 = (cid:11)Φ2, |(cid:12)2, M(cid:13) on M.5Then, we can apply the following strategy.1. All the results in this paper concern cases where L2 = ML. So we can use our version of Adler–Immerman games for L2as defined in Definition 9 and use the result of Theorem 1.2. For every n ∈ N, find a formula ϕn ∈ Φ1 such that |ϕn| = f (n), where f (x) is some strictly increasing function.3. For every n ∈ N, find two sets of pointed models An, Bn ⊆ M, such that An |(cid:12)1 ϕn and Bn |(cid:12)1 ¬ϕn and prove thatSpoiler cannot win G(L2) starting at (cid:11)An ◦ Bn(cid:13) in less than 2g(n) moves, where g(x) grows asymptotically at least as fastas f (x).Then, all the conditions from Lemma 1 are fulfilled and hence, L1 (cid:2)SUBEXPML2.The two main difficulties in this strategy come from item 3. The first one is finding the right models which requires anintuitive understanding of the type of properties that are expressed more succinctly by L1 than by L2. For example, it isclear that a formula of the form ¬[∀{a,b}]¬p is equivalent to the formula (cid:11)a(cid:13)p ∨ (cid:11)b(cid:13)p. Therefore, intuitively, the first formulaexpresses more efficiently that we can make either an a or b-step from the current point and reach a point that satisfies p.Hence, by stacking n boxes, as in the formula¬ [∀{a,b}] . . . [∀{a,b}](cid:14)(cid:12)(cid:13)(cid:11)¬pn times5 Of course, we assume that L1 (cid:2)M L2.T. French et al. / Artificial Intelligence 197 (2013) 56–8567we actually describe a number of different paths starting at the current point such that at least one of them leads to apoint that satisfies p, and moreover, this number is exponential in n. Indeed, this is one of the properties we are goingto exploit later. The second difficulty is proving lower bounds on the number of moves in Adler–Immerman games. This isan underdeveloped area and there are currently just two known techniques which we explain below using examples frommodal logic. We would like to stress however that the main ideas are applicable to any other logic.Diverging Pairs: This technique was introduced in [1]. It can be roughly explained as follows. Let us assume that Spoiler canwin the game starting at (cid:11){(M1, w 1), (M2, w 2)} ◦ {(N1, v 1), (N2, v 2)}(cid:13). We want to know the size (i.e., numberof nodes) of the smallest closed game tree T with root (cid:11){(M1, w 1), (M2, w 2)} ◦ {(N1, v 1), (N2, v 2)}(cid:13). However,when proving lower bounds, we are not really interested in the precise size of T but whether it is below or abovesome threshold. One possible answer then is not to look for the precise number of nodes but for the numberof different branches. We can try to prove for example that T has at least two branches. One way to do this isthe following. If for any pair of trees T 1 ∈ T ((cid:11)(M1, w 1) ◦ (N1, v 1)(cid:13)) and T 2 ∈ T ((cid:11)(M2, w 2) ◦ (N2, v 2)(cid:13)), we canprove that there are two branches B 1 ∈ Br(T 1) and B2 ∈ Br(T 2), such that B1 (cid:3) B2, then, applying Lemma 2(6), weobtain the desired result (see also Theorem 2). We call the pairs (cid:11)(M1, w 1), (N1, v 1)(cid:13) and (cid:11)(M2, w 2), (N2, v 2)(cid:13)diverging because, intuitively, Spoiler cannot “keep them in the same branch” if he wants to win the game startingat (cid:11){(M1, w 1), (M2, w 2)} ◦ {(N1, v 1), (N2, v 2)}(cid:13). It is obvious that the number of mutually divergent pairs gives alower bound on the branches of T and, therefore, its size, too.Weight Function: The weight-function technique was introduced in [13]. The main idea is the following. Suppose thatSpoiler can win the game starting at (cid:11)A ◦ B(cid:13). Again, we want to prove a lower bound on the size of the smallestT ∈ T ((cid:11)A ◦ B(cid:13)). One way to do this is to define a weight function w : 2K × 2K → R+with the following properties.w = ((cid:11)A, B(cid:13)) = n (cid:2) 0 and for any pair of sets of pointed models (cid:11)C, D(cid:13),1. w((cid:11)C, D(cid:13)) = w((cid:11)D, C(cid:13));2. w((cid:11)C, D(cid:13)) = w((cid:11)C1, D(cid:13)) + w((cid:11)C2, D(cid:13)), where C1 ⊆ C, and C2 ⊆ C;3. w((cid:11)C1, D1(cid:13)) = w((cid:11)C, D(cid:13)) − 1, where C1 and D1 are defined as in the last item of Definition 9;4. If C |(cid:12) p and D |(cid:12) ¬p for some propositional symbol p, then w((cid:11)C, D(cid:13)) = 0.Let T be an arbitrary closed game tree with root (cid:11)A ◦ B(cid:13). The weight of the root of T is n, the weight of eachleaf is 0. Items 1, 2, and 3 specify how the weight of nodes increases from the leaves to the root, when not-, or-,and [i]-moves are played. Then, it is obvious that each closed tree with weight n will have at least n nodes where[i]-moves were played.We would like to stress that this artificial and very simple example was chosen so that we can showcase themain idea behind the weight function technique. We invite the reader to consult [13] for a technically sophisticatedapplication of this method to proving lower bounds on the size of first-order formulae on the class of linear orders.All our proofs in the next sections are based on the diverging-pairs technique and that is why we formulate it hereexplicitly in its full generality.Theorem 2 (Principle of diverging pairs). Let T ∈ T ((cid:11)A ◦ B(cid:13)). If A1, A2, . . . ,A k are subsets of A and B1, B2, . . . ,B k are subsetsof B and for every k trees T 1 ∈ T ((cid:11)A1 ◦ B1(cid:13)), T 2 ∈ T ((cid:11)A2 ◦ B2(cid:13)), . . . , Tk ∈ T ((cid:11)Ak ◦ Bk(cid:13)), there are k branches B1 ∈ Br(T 1), B2 ∈Br(T 2), . . . , Bk ∈ Br(Tk) such that B i (cid:3) B j for all 1 (cid:3) i < j (cid:3) k, then T contains at least k different branches.Proof. Suppose that T ∈ T ((cid:11)A ◦ B(cid:13)). It follows from Lemma 2(6) that for 1 (cid:3) i (cid:3) k, there is a T i ∈ T ((cid:11)Ai ◦ Bi(cid:13)) such thatT ∼= T i . According to the assumption, there are k branches B i ∈ Br(T i) such that B j (cid:3) Bl for 1 (cid:3) j < l (cid:3) k. Therefore, thereare k branches B∼= B i . Hence, T has at least k different branches. (cid:2)∈ Br(T ) such that B(cid:15)i(cid:15)i3. Main resultsLet Σ = (cid:11) A, I(cid:13) be some arbitrary but fixed signature. We consider the logics ML = (cid:11)ΦML, |(cid:12), M(cid:13), [∀Γ ]ML = (cid:11)Φ[∀Γ ]ML,|(cid:12), M(cid:13), [∃Γ ]ML = (cid:11)Φ[∃Γ ]ML, |(cid:12), M(cid:13), and [ϕ]ML = (cid:11)Φ[ϕ]ML, |(cid:12), M(cid:13) in the signature Σ , where M ⊆ K. Since I is finite, it is easyto see that for any pointed model (M , w) ∈ M,(M , w) |(cid:12) [∀Γ ]ϕ if and only if(M , w) |(cid:12)(M , w) |(cid:12) [∃Γ ]ϕ if and only if(M , w) |(cid:12)(cid:15)i∈Γ(cid:10)i∈Γ[i]ϕ;[i]ϕ.(3)(4)Hence, ML, [∀Γ ]ML, and [∃Γ ]ML are equally expressive on every M ⊆ K, i.e., ML =M [∀Γ ]ML =M [∃Γ ]ML. Using the well-known equivalences below [21], we see that ML =M [ϕ]ML, too: occurrences of [ϕ] in [ϕ]ψ can be ‘pushed inside’ ψ to thepropositional atoms, and when such an atom is reached, the occurrence of [ϕ] can be omitted:68T. French et al. / Artificial Intelligence 197 (2013) 56–85Table 2Formulae in [∀Γ ]ML and [∀Γ ]ML, with Γ = {a, b}.[∀Γ ]ML¬[∀Γ ]¬p¬[∀Γ ][∀Γ ]¬p[∃Γ ]ML[∃Γ ]p[∃Γ ][∃Γ ]p¬ [∀Γ ] . . . [∀Γ ](cid:14)(cid:12)(cid:13)(cid:11)¬pn times[∃Γ ] . . . [∃Γ ](cid:11)(cid:14)(cid:12)(cid:13)pn times1.2....n....(M , w) |(cid:12) [ϕ]p(M , w) |(cid:12) [ϕ](ψ1 ∨ ψ2)(M , w) |(cid:12) [ϕ]¬ψ(M , w) |(cid:12) [ϕ][i]ψ(M , w) |(cid:12) [ϕ1][ϕ2]ψif and only ifif and only ifif and only ifif and only ifif and only if(M , w) |(cid:12) ϕ → p;(M , w) |(cid:12) [ϕ]ψ1 ∨ [ϕ]ψ2;(M , w) |(cid:12) ϕ → ¬[ϕ]ψ;(M , w) |(cid:12) ϕ → [i][ϕ]ψ;(M , w) |(cid:12) [ϕ1 ∧ [ϕ1]ϕ2]ψ.Therefore, all these logics are equally expressive on any class of models M ⊆ K; moreover, it is obvious that:1. [∀Γ ]ML (cid:3)EXP2. [∃Γ ]ML (cid:3)EXP3. [ϕ]ML (cid:3)EXPM ML;M ML;M ML.Our main result is that the above succinctness statements cannot be improved for the case where M is replaced byS5 (the class of models whose relations are relations of equivalence), i.e., any of the logics [∀Γ ]ML, [∃Γ ]ML, [ϕ]ML isexponentially more succinct than ML on S5. Using Proposition 1, we see that we have exponential succinctness results onany class of models L ⊆ K, such that S5 ⊆ L. However, we begin by presenting a proof of exponential succinctness on a classof models that is considerably simpler than S5 first, because it provides us with the opportunity to make the main ideabehind all of our proofs explicit in this more transparent setting.3.1. Succinctness on KIn this subsection, we work with a signature Σ = (cid:11) A, I(cid:13) such that I contains at least two indices a and b and A containsat least one propositional symbol p. The main result we are going to prove is the following theorem.Theorem 3. For any logic L ∈ {[∀Γ ]ML, [∃Γ ]ML, [ϕ]ML} in the signature Σ , it is true that L (cid:2)SUBEXPKML.The case [ϕ]ML (cid:2)SUBEXPKin the previous section.ML was proven in [18]. Our proof of the two remaining statements follows the strategy describedConsider the two sequences of formulae, where Γ = {a, b}.We will show that every formula ψn ∈ ΦML that is equivalent to one of the formulae ¬ [∀Γ ] . . . [∀Γ ](cid:14)(cid:12)(cid:13)(cid:11)¬p or [∃Γ ] . . . [∃Γ ](cid:14)(cid:12)(cid:13)(cid:11)phas length at least 2n. Since the length of the latter formulae is linear in n, we will have our exponential succinctnessresult. To show that their equivalents in ML have exponential size, we begin by defining for each n (cid:2) 1, two sets of pointed¬p and Bn |(cid:12)models An and Bn such that An |(cid:12) ¬ [∀Γ ] . . . [∀Γ ](cid:14)p whereas Bn |(cid:12) [∀Γ ] . . . [∀Γ ](cid:14)¬p and An |(cid:12) [∃Γ ] . . . [∃Γ ](cid:14)(cid:12)(cid:13)(cid:12)(cid:13)(cid:12)(cid:13)(cid:11)(cid:11)(cid:11)n timesn times¬ [∃Γ ] . . . [∃Γ ](cid:14)(cid:12)(cid:13)(cid:11)p.n timesn timesn timesn timesDefinition 13 (Words over an alphabet (cid:15)). Let (cid:15) be a set of symbols. The set of words W((cid:15)) over (cid:15), and their length, aredefined as follows. There is a word of length 0, denoted by ε ∈ W((cid:15)). Moreover, if δ ∈ (cid:15) and w ∈ W((cid:15)) is a word of lengthn, then wδ is a word in W((cid:15)) of length n + 1. Given a word w of length k > 0, with w = w 1, w 2, . . . , wk, we say thatw 1 ∈ (cid:15) is the first element of the word, and wk is the last, while w i is the element at the i-th position in w. By W (cid:2)n((cid:15))we denote all words in W((cid:15)) of length at most n.Definition 14 (Tree-models). For any n (cid:2) 1 and any word w of length n from W({a, b}), the model A nwconstructed as follows:= (cid:11) An, R, V w (cid:13) isT. French et al. / Artificial Intelligence 197 (2013) 56–8569Fig. 2. The model (A 3abb, ε).• An = W (cid:2)n({a, b}), the set of words over {a, b} of length at most n;• u R i v if and only if v = ui;• V w (p) = {w} and V w (q) = ∅ for all other propositional symbols in A.The set An consists of all the 2n different pointed models (A nw , ε). The set Bn contains the only pointed model (Bn, ε),where Bn = (cid:11) An, R, V ∅(cid:13) is constructed as above with the only exception that V ∅(p) = ∅.Fig. 2 shows the model (A 3abb, ε) ∈ A3. It is obvious that A3 contains 8 models: (A 3aaa, ε), where V aaa(p) = aaa; (A 3aab, ε),where V aab(p) = aab, etc. The only model in Bn has no point where p is true.Proposition 3. For every n (cid:2) 1, the following are true.(a) An |(cid:12) ¬ [∀Γ ] . . . [∀Γ ](cid:11)(cid:14)(cid:12)(cid:13)¬p and Bn |(cid:12) [∀Γ ] . . . [∀Γ ](cid:11)(cid:14)(cid:12)(cid:13)¬p;n times(b) An |(cid:12) [∃Γ ] . . . [∃Γ ](cid:11)(cid:14)(cid:12)(cid:13)n timesp and Bn |(cid:12) ¬ [∃Γ ] . . . [∃Γ ](cid:11)(cid:14)(cid:12)(cid:13)p.n timesn timesProof. The proof of both items is by an easy induction on n. We prove only item (a). If n = 1, then A1 contains justthe two pointed models (A 1a , ε) |(cid:12) (cid:11)a(cid:13)p and(A 1b , ε) |(cid:12) (cid:11)b(cid:13)p and the formula ¬[∀Γ ]¬p is equivalent to the formula (cid:11)a(cid:13)p ∨ (cid:11)b(cid:13)p, we see that A1 |(cid:12) ¬[∀Γ ]¬p. It is obviousthat B1 |(cid:12) [∀Γ ]¬p. Let us assume that the statement is true for n and let us consider the case n + 1. For every model(A n+1w , ε) ∈ An+1, we have that ε Raa and ε Rbb and exactly one of the following is true:b , ε), whereas B1 consists of the single model (B1, ε). Since (A 1a , ε) and (A 1• (A n+1• (A n+1w , a) is bisimilar to the model (A nw , b) is bisimilar to the model (A nu , ε) ∈ An where w = au oru , ε) ∈ An where w = bu.At the same time, for the only model (Bn+1, ε) ∈ Bn+1, we have that ε Raa and ε Rbb and both (Bn+1, a) and (Bn+1, b)are bisimilar to (Bn, ε). Since ¬ [∀Γ ] . . . [∀Γ ]¬p, the statement(cid:14)¬p is equivalent to (cid:11)a(cid:13)¬ [∀Γ ] . . . [∀Γ ](cid:14)¬p ∨ (cid:11)b(cid:13)¬ [∀Γ ] . . . [∀Γ ](cid:11)(cid:14)(cid:12)(cid:13)(cid:12)(cid:13)(cid:11)(cid:11)follows from the induction hypothesis and the items above. (cid:2)n timesn times(cid:12)(cid:13)n+1 timesProposition 3 and the fact that [∀Γ ]ML, [∃Γ ]ML and ML are equally expressive on every class of models imply thatSpoiler can win the formula size game starting at (cid:11)An ◦ Bn(cid:13). Therefore, in order to complete the proof of Theorem 3, wehave to show that the size of the smallest tree T ∈ T ((cid:11)A ◦ B(cid:13)) is at least 2n. The next lemma is crucial because it providesus with enough diverging pairs for that.Lemma 3. For every (A nI(B) = w.w , ε) ∈ An and every n (cid:2) 1, it is true that every tree T ∈ T ((cid:11)(A nw , ε) ◦ (Bn, ε)(cid:13)) has a branch B such thatProof. The fact that Spoiler can win the game starting at (cid:11)An ◦ Bn(cid:13) and Lemma 2(6) imply that T ((cid:11)(A nnon-empty, which in turn implies that T ((cid:11)(Bn, ε) ◦ (A nw , ε) ◦ (Bn, ε)(cid:13)) ∪ T ((cid:11)(Bn, ε) ◦ (A nT ∈ T ((cid:11)(A nw , ε) ◦ (Bn, ε)(cid:13)) isw , ε)(cid:13)) is non-empty, too. We prove the stronger statement that anyw , ε)(cid:13)) contains a branch B, such that I(B) = w. The proof is by induction on n.70T. French et al. / Artificial Intelligence 197 (2013) 56–85Base caseLet n = 1 and T ∈ T ((cid:11)(A 1w , ε) ◦ (B1, ε)(cid:13)) ∪ T ((cid:11)(B1, ε) ◦ (A 1w , ε)(cid:13)), where w is either a or b. The required branch B isdefined inductively. The first point of B is the root of T . It is obvious that Spoiler cannot begin the game with an atomicmove. Therefore, he starts by playing either a not-move, an or-move or an [i]-move. If a not-move is played, then eitherw , ε) ◦ (B1, ε)(cid:13) is added to the game tree. Let this be the second node of thethe node (cid:11)(B1, ε) ◦ (A 1w , ε)(cid:13) or the node (cid:11)(A 1branch B. If an or-move was originally played, at least one node (cid:11)(A 1w , ε)(cid:13) was added. Letthis be the second node of B. It is obvious that Spoiler still cannot play an atomic move at a node (cid:11)(B1, ε) ◦ (A 1w , ε)(cid:13) orw , ε) ◦ (B1, ε)(cid:13). Hence, Spoiler again plays either a not-move, an or-move or an [i]-move. If Spoiler this time again plays(cid:11)(A 1a not-move or an or-move, we repeat the procedure above and add the third node to B which is either (cid:11)(B1, ε) ◦ (A 1w , ε)(cid:13)or (cid:11)(A 1w , ε) ◦ (B1, ε)(cid:13). It is obvious that this branch cannot end in a closed leaf if Spoiler does not play at least one [i]-movesuch that i ∈ {a, b}.w , ε) ◦ (B1, ε)(cid:13) or (cid:11)(B1, ε) ◦ (A 1Playing an [i]-move at a node (cid:11)(B1, ε) ◦ (A 1w , ε) ◦ (B1, ε)(cid:13) where i (cid:24)= w leads to loss for Spoiler becausew , i) ◦ (B1, i)(cid:13) contain bisimilar models, one on the left and one on the right. Hence,w , w)(cid:13) orw , w) ◦ (B1, w)(cid:13) to the tree, respectively. We add this node to B. Note that no [i]-moves can be played at the nodesw , w) ◦ (B1, w)(cid:13). Therefore, all paths leading from this node to a closed leaf contain justboth nodes (cid:11)(B1, i) ◦ (A 1Spoiler plays an [w]-move at (cid:11)(B1, ε) ◦ (A 1(cid:11)(A 1(cid:11)(B1, w) ◦ (A 1not-moves, or-moves or atomic-moves. Hence we have the desired branch B and the statement is true for n = 1.w , ε) ◦ (B1, ε)(cid:13) thus adding the node (cid:11)(B1, w) ◦ (A 1w , w)(cid:13) and (cid:11)(A 1w , i)(cid:13) and (cid:11)(A 1w , ε)(cid:13) or (cid:11)(A 1w , ε)(cid:13) or (cid:11)(A 1Induction stepAssume now that the statement is true for n. Let T ∈ T ((cid:11)(A n+1w , ε) ◦ (Bn+1, ε)(cid:13)) ∪ T ((cid:11)(Bn+1, ε) ◦ (A n+1w , ε)(cid:13)), wherew = jk with k a word over {a, b} of length n and j ∈ {a, b}. The desired branch B is again defined inductively with itsfirst node being the root of T . The reasoning we used in the base case shows that the root of T lies on a branch inwhich the first [i]-move is a [ j]-move played at a node (cid:11)(A n+1, ε)(cid:13) thus leadingto the node (cid:11)(A n+1, j)(cid:13), respectively. Since T is closed, its subtree T 1 with root(cid:11)(A n+1, j)(cid:13) must also be closed. We add the root of T 1 to B. Given the fact that(A n+1k , ε) and (Bn+1, j) is bisimilar to (Bn, ε) we can apply Lemma 2(6). Therefore, there is ajk(cid:15) ∈ T ((cid:11)(A nT, j) ◦ (Bn+1, j)(cid:13) or (cid:11)(Bn+1, j) ◦ (A n+1, j) is bisimilar to (A nand we can apply the induction hypothesis. (cid:2), ε) ◦ (Bn+1, ε)(cid:13) or (cid:11)(Bn+1, ε) ◦ (A n+1, j) ◦ (Bn+1, j)(cid:13) or (cid:11)(Bn+1, j) ◦ (A n+1k , ε) ◦ (Bn, ε)(cid:13)) ∪ T ((cid:11)(Bn, ε) ◦ (A nk , ε)(cid:13)), such that T 1∼= Tjkjkjkjkjkjk(cid:15)Now we are ready to complete the proof of Theorem 3. Using Lemma 3, we see that for every n (cid:2) 1, the pair (cid:11)An, Bn(cid:13)contains 2n diverging pairs. It follows from Theorem 2 that every T ∈ T ((cid:11)An ◦ Bn(cid:13)) is of size at least 2n. Therefore, the proofis complete.As an aside, note that our proof in fact demonstrates something stronger than Theorem 3: we have shown that both[∀Γ ]ML and [∃Γ ]ML are exponentially more succinct than ML, even on the class of binary trees BT ⊆ K (where the under-lying relation on the binary trees is Ra ∪ Rb).3.2. Succinctness on S5For M ⊆ K, results like Theorem 3 are more difficult to prove, since there are more candidates for formulae to be equiv-alent to either formulae in [∀Γ ]ML or [∃Γ ]ML. Consider once again the models ( A3w , ε) = (cid:11) A3, R, V s(cid:13) from K as depicted inFig. 2 for instance. Suppose we are interested in proving a similar result on models where R(i) are equivalence relationsand let therefore Cl(R(i)) be the smallest equivalence relation that includes R(i). We would then have that the models A3on the left of the game tree would all satisfy (cid:11)a(cid:13)(cid:11)b(cid:13)(cid:11)a(cid:13)(cid:11)b(cid:13)(cid:11)a(cid:13)(cid:11)b(cid:13)p, which is linear in n: the new relations allow transitionslabelled a or b that stay in the same point (or even go ‘back’).We proceed now to our main result, namely, the following theorem.Theorem 4. Let Σ = (cid:11) A, I(cid:13) be a signature such that I contains at least 4 indices {a, b, c, d} and A contains at least 3 propositionalsymbols {a, b, c}. For any logic L ∈ {[∀Γ ]ML, [∃Γ ]ML, [ϕ]ML} in the signature Σ , it is true that L (cid:2)SUBEXPML.S5The proof of this theorem follows the same strategy as before. Let Γ = {a, b} and let ϕ0 be the formula (cid:11)a(cid:13)a ∨ (cid:11)b(cid:13)b.6Consider the sequences of formulae ϑn, σn, ϕn (n = 1, 2, . . .) as given in Table 3. As an aside, note that we use conjunctionand diamonds (cid:11)i(cid:13) (i ∈ I ) and (cid:11)ϕ(cid:13) in some of the definitions, but we know from Proposition 2 that this does not affect thesuccinctness results stated in Theorem 4.It is easy to see that the lengths of ϑn, σn and ϕn are linear in n. We will prove that every ML-formula that is equivalentto one of these formulae has length at least 2n.6 In this section, it is convenient to use the same symbols for propositional variables and indices. Still, to distinguish them in writing, we use boldfacefor variables from A.T. French et al. / Artificial Intelligence 197 (2013) 56–8571Table 3Formulae.[∀Γ ]MLϑ1...ϑn...¬[∀Γ ]¬c¬[∀Γ ][c][d]¬ϑn−1[∃Γ ]MLσ1...σn...[∃Γ ]c[∃Γ ](c ∧ [c][d]σn−1)[ϕ]MLϕ1...ϕn...(cid:11)c(cid:13)(c ∧ (cid:11)d(cid:13)(d ∧ ϕ0))(cid:11)ϕn−1(cid:13)ϕ13.2.1. Defining suitable modelsWe are now going to define sets of pointed models, on which we will play FSGs. More precisely, we build sets An andBn to show that the equivalent in ML of ϑn is exponential in size, sets Cn and Dn for the equivalents in ML of σn, and Enand Fn for those equivalent to ϕn. To talk about all those three cases in general terms, let the pair (Xn, Yn) be a variableover {(An, Bn), (Cn, Dn), (En, Fn)}.From now on, all models will be S5-models, i.e., the underlying relations are equivalence relations. In our drawings, wewill not include reflexive edges, and, since relations are now symmetric, we will not use arrows when denoting edges. Whenconceptualising our models to be defined next, it may be useful for the reader to think of them in terms of ladders. Thefollowing terminology will also be used in their description. We introduce this terminology on the basis of the model onthe left of Fig. 4. We will refer to the point `x2 as the left foot of the ladder, and point ´x2 as the right foot. Similarly, `y1 isthe left top, and ´y1 the right top. The points `x2, `y2, `z2, `x1, `y1 form the left support of the ladder, the points ´x2, ´y2, ´z2, ´x1, ´y1form the right support. The left support is comprised of a path acda of indices. This is a path from `x2 to `y1: there are ofcourse many other paths between those points (recall that there is a reflexive edge between any point and itself). Horizontaledges in the ladder will be called rungs. For instance, the points `z2 and ´z2 form the left and right end of a rung that islabelled with the indices I \ {c, d}.For all our models, points at the left support of the ladder are taken from {`xi, `yi, `zi}, while points at the right supportare from {´xi, ´yi, ´zi}. A point `xi is only horizontally connected, and hence forms a rung, with ´xi . Likewise for `yi and ´yi ,and for `zi and ´zi . Hence, if we use `p as an arbitrary point on the left support, by ´p we mean the only point that forms arung with it, on the right support. The classes of models C and D are ladders with a ‘third, middle support’: the points onthis support are indicated as ¯xi, ¯yi and ¯zi (see Fig. 6). On such models, we will still say that `xi, ´xi and ¯xi are horizontallyconnected, so are `yi, ´yi and ¯yi , and another horizontal rung is formed by `zi, ´zi and ¯zi . On such models, if `p is a point onthe left support, then ´p is connected to it through a rung on the right support, and ¯p is the point connected to it on themiddle of the rung.Recall that {a, b, c, d} ⊆ I . The pairs of sets of models (Xn, Yn) ∈ {(An, Bn), (Cn, Dn), (En, Fn)} are all such that for aw , `xn) to Xn, andw , one for each word w, and we add one pointed model (M ngiven n, we define 2n different models M nw , ´xn) in Yn. The word w is such that it encodes a path from `xn, the left foot of the ladder, toanother pointed model (M nthe left top. This path uses n steps labelled with indices from Γ = {a, b}. The indices {c, d} are used to ensure that everytwo occurrences of an index from Γ are separated by at least one occurrence of cd in that path. So we will not use allwords to generate models: for the models in An, Bn, Cn and Dn, we use words from WnΓ (cdΓ )∗ (see Definition 15), while for(cdΓ )∗ (Definition 19). In any model, for any two points `p and ´p on the leftthe models in Enand right support respectively, there is a step ‘up’ labelled i from `p iff there is a step ‘up’ labelled i from ´p. Moreover, theonly i’s that qualify for such a vertical transition are indices from {a, b, c, d}, and, for every point `p and ´p, it is exactly oneindex that labels a transition ‘up’. Points `p and ´p on a rung are connected using all indices j such that there is no verticaltransition possible from `p or ´p with the labelj. (We’ll explain later when, in the models Cn ∪ Dn, the three points on arung `p, ¯p and ´p are connected.)w we use words from Wn2 and FnIn terms of the formula size games, they will be played on the node (cid:11)Xn ◦ Yn(cid:13). We now know Xn will contain 2n models,and for each model (M , `xn) ∈ Xn there is a model (M , ´xn) ∈ Yn. Consider a node in the game with (M , `xn) on one side,and (M , ´xn) at the other. The models are constructed in such a way, that for any `p on the left support, if a game nodecontains a model (M , `p) on one side of the node, and (M , ´p) at the other, Spoiler cannot play an [i]-move if `p and ´p areconnected with a rung labelled i in the model: doing so would yield a node in the game tree with two bisimilar modelson one side. At the same time, except for the top points in the ladder M , all points `p and ´p verify the same propositionalvariables. The left top in the models in An ∪ Bn ∪ Cn ∪ Dn is the point `y1: it satisfies a designated atom c, whereas theright top point is ´y1: this does not satisfy c. In the models En ∪ Fn, the left top point is `z0, while the top right point is ´z0.The points `z0 satisfy either a or b, while the points ´z0 satisfy neither of those. All this together implies for the formula sizegame with a node with (M , `xn) on one side, and (M , ´xn) at the other, that if Spoiler wins this game then there is a branchsuch that, for every `p in the left support of M , the models (M , `p) and (M , ´p) will appear each at a side of a node in thebranch, and the branch can be only closed once (M , `q) and (M , ´q) are reached, where `q and ´q are the left and right topof the ladder defined by M , respectively.Definition 15 (Γ (cdΓ )∗{a, b, c, d} is defined as follows:-alternating words). For each n (cid:2) 1, the set WnΓ (cdΓ )∗ of Γ (cdΓ )∗-alternating words over the alphabet72T. French et al. / Artificial Intelligence 197 (2013) 56–85Fig. 3. The models (A 1a , `x1) (left) and (A 1b , ´x1) (right).• W 1• Wn+1Γ (cdΓ )∗ = {a, b} = Γ ;Γ (cdΓ )∗ = {acdw | w ∈ WnΓ (cdΓ )∗ } ∪ {bcdw | w ∈ WnΓ (cdΓ )∗ }.So Γ (cdΓ )∗-alternating words are words over {a, b, c, d} of length 3n − 2, with a c occurring at every position 2 + 3k, a dΓ (cdΓ )∗ has n occurrencesΓ (cdΓ )∗ The notationΓ (cdΓ )∗ is inspired by the fact that the set contains expressions of the form Γ ; (cdΓ )n, that is, an element from Γ ,at every position 3k, and at every other position there is one element from {a, b}. A word w ∈ Wnof a’s and b’s, and every two occurrences are separated by a number of cd’s, cf. w = acdbcdbcda ∈ W 4Wn+1followed by n iterations of the form cdγ , with γ ∈ Γ .Definition 16 (Closure). If W is a set and R ⊆ W × W a relation, we denote the reflexive, transitive and symmetric closureof R by Cl(R).We now define the sets of models A n and Bn. The reader may wish to combine reading the definition together withthe text that explains it, which follows the definition.Definition 17 (An and Bn). The two sets of pointed model An, Bn are constructed by induction on n.w , ´x1) | w ∈ W 1Γ (cdΓ )∗ } where A 1w= (cid:11) A1, R1w , V 1(cid:13) is such that (see alsow , `x1) | w ∈ W 1Γ (cdΓ )∗ } and B1 = {(A 1• A1 = {(A 1Fig. 3):– A1 = {`x1, ´x1, `y1, ´y1};– For any i ∈ I , if i = w, then R1– V (c) = { `y1} and V (p) = ∅ for any p ∈ A such that p (cid:24)= c.w , `xn) | w ∈ WnΓ (cdΓ )∗ } and Bn = {(A n• Let n > 1. An = {(A nw (i) is Cl({(`x1, `y1), (´x1, ´y1)}); if i (cid:24)= w, then R1w (i) is Cl({( `y1, ´y1), (`x1, ´x1)});w , ´xn) | w ∈ WnΓ (cdΓ )∗ } where A nw= (cid:11) An, Rnw , V n(cid:13) is such that(see also Fig. 4):– An = An−1 ∪ {`xn, ´xn, `yn, ´yn, `zn, ´zn};– Rnw ( j) = Cl(Rn−1w is defined as follows. Since w ∈ Wn∗ Then Rnw (c) = Cl(Rn−1∗ Rnw (d) = Cl(Rd ∪ (Rn−1∗ Rn∗ For any i /∈ { j, c, d}, Rnw (i) = Cl(Rn−1– V n = V n−1.Γ (cdΓ )∗ , it is of the form jcdw(cid:15), where j ∈ {a, b}, and w(cid:15) ∈ Wn−1Γ (cdΓ )∗ .w(cid:15) ( j) ∪ R j), with R j = {(`xn, `yn), (´xn, ´yn), (`zn, ´zn)};w(cid:15) (c) ∪ Rc), with Rc = {( `yn, `zn), ( ´yn, ´zn), (`xn, ´xn)};w(cid:15) (d) \ {(`xn−1, ´xn−1), (´xn−1, `xn−1)})), with Rd = {(`zn, `xn−1), (´zn, ´xn−1), ( `yn, ´yn), (`xn, ´xn)};w(cid:15) (i) ∪ R i), with R i = {(`xn, ´xn), ( `yn, ´yn), (`zn, ´zn)}.a , `x1) ∈ A1 and (A 1Fig. 3 shows a pointed model (A 1Intuitively, in the pointed model (A nw , `x2) ∈ B2 with w = acda ∈ W 2w , `xn), the word w encodes the shortest path from `xn to `y1, the only point in themodel that makes c true. The two models of Fig. 3 show one model from A1 (left) and one from B1 (right): the points witha thick edge denote the point of the pointed model. Note that both A1 and B1 contain each two models.a , ´x1) ∈ B1, where Fig. 4 shows pointed models (A 2bcda, `x2) ∈A2 and (A 2cd. Given n and w = w 1 w 2 . . . wn, the left support of the ladder comprises of thepoints `xn, `yn, `zn, `xn−1, . . . , `y2, `z2, `x1, `y1 (note there is no `z1) and w encodes a path along those points: one can go from `xn,the foot of the left rail, to `y1, the top of that rail, by the edges labelled w 1, w 2, . . . , wn. There is exactly the same path totravel from ´xn, the foot of the right support, to the top of that support, ´y1. In every `x j and ´x j (1 (cid:3) j (cid:3) n) the only way up isthrough an index from Γ , in every `y j and ´y j (1 < j (cid:3) n), the only way up is through c, and in every `z j and ´z j (1 < j (cid:3) n),the only way up is through d. Two models A nw(cid:15) with w (cid:24)= wdiffer in the following sense: there must be at leasta j (cid:2) 2 such that in one model, the points `x j and `y j−1 are connected by the index a (in that model, ´x j and ´y j−1 areconnected by a as well), while in the other model, these points are connected by the index b.w , `x2), (A 2w and A nThe rungs of the ladder connect either pairs `xi and ´xi , or `yi and ´yi (1 (cid:3) i (cid:3) n) or pairs `z j and ´z j (2 (cid:3) j (cid:3) n). A rungbetween two points s and t is labelled with all indices that are not used as a label on any other edge with s as a vertex.In any model, `y1 is the only point where c is true. This implies, for any n and w ∈ WnΓ (cdΓ )∗ , that the shortest path fromw , ´xn) to a c-world is of lengthany (A nw , `xn) to a world satisfying c is of length 3n − 2, whereas the shortest path from (A n(cid:15)T. French et al. / Artificial Intelligence 197 (2013) 56–85733n − 1. As a consequence, for every w and n we have (A n(A 2acda, `x2) |(cid:12) ¬[∀Γ ][c][d][∀Γ ]¬c, because (A 2The next observation states that, by taking the closure of each accessibility relation R i , we never add edges that are notacda, `x2) |(cid:12) (cid:11)a(cid:13)(cid:11)c(cid:13)(cid:11)d(cid:13)(cid:11)a(cid:13)c.w , `xn) |(cid:12) ϑn and (A nw , `xn) |(cid:12) ¬ϑn. In Fig. 4 for example, we havepart of the ladder construction.Observation 1. For every n, all models in An ∪ Bn are S5-models with the property that, for any two points p and pfor any i ∈ I : if p (cid:24)= pnot added because of the transitive closure).in the model, and(cid:15), p) was explicitly added to R i in the definition of the model (i.e., they are, then either (p, pand p R i p(cid:15)) or (p(cid:15)(cid:15)(cid:15)w , `xn) in An and (A nw and Bnw , ´xn) in Bn only differ in their specific points `xn and ´xn, theProof. Since two pointed models (A nunderlying structure in any two models A nw is the same. So it suffices to prove the observation for An only. This,in turn, can be easily seen using induction on n. The claim is such that it suffices to show that the construction of themodel does not force us to add any edge due to transitivity. For n = 1, all models in A1 are depicted in Fig. 3, and it iseasily checked that for each i ∈ I , the relation R i is an equivalence relation: no edges need to be added. So suppose thatAn satisfies our observation. Take a model (A n+1w , `xn+1), with w = jcdwΓ (cdΓ )∗ . We needw , `xn+1), we do not have to add edges to restore transitivity.to show that by adding points to (A nThe model A n+1has at the bottom the two points `xn and ´xn. From each of them, one can go ‘up’ using a j step, then(cid:15) ∈ Γ .a c-step, and then a d-step, after we have reached either `xn or ´xn from which the first step ‘up’ is through some jWhat is important here is that there are no two consecutive steps ‘up’ using the same index, so that no edge needs tobe added to restore transitivity. By the induction hypothesis, no edges are added ‘above’ `xn−1 and ´xn−1. Moreover, for any`p ∈ {`xn+1, `yn+1, `zn+1, `xn}, the points `p and ´p are horizontally connected by exactly those indices which cannot be used togo ‘up’ or ‘down’ from `p or ´p, so that also here there is no situation where we are forced to add an additional edge in orderto keep transitivity. (cid:2)w(cid:15) , `xn) to obtain (A n+1, for some j ∈ Γ and w(cid:15) ∈ Wnw(cid:15)acda, `x2), (A 2acda, `x2), (A 2acda, ´x2) and (A 2acda, ´x2)(cid:13) and (cid:11)(A 2bcda, ´x2)(cid:13) are diverging pairs. To see this, suppose (A 2Here is another feature of our construction, which we will informally demonstrate using the models of Fig. 4 andbcda, `x2),which will be formalised in Lemma 5. We will argue that for instance the pairs (cid:11)(A 2bcda, `x2) occur on one side of a node in the tree of an FSG(A 2bcda, ´x2) (the latter model is not shown in Fig. 4) occur on the other side. For Spoiler to wingame, and (A 2the game, he needs to reach the points `y1, and then play an atom move. We claim that, in order to reach this goal, Spoilerbcda, `x2) so that they appearneeds to play at some point in the game a move that either splits the models (A 2bcda, ´x2). Thus, Spoilerat different nodes in the successor nodes of the game, or he has to split the models (A 2will need to play an or-move. If he likes, Spoiler can first play some not-moves and swap the models from side, but at someacda, ´x2) occurs on the right side ofpoint he will play an [i]-move for some i. There are a number of possibilities. Suppose (A 2acda, ´x2)the tree, together with (A 2acda, `x2). But in both cases, in the resulting node we would obtain a model at theas the b-successor itself, or otherwise (A 2acda, `x2), respectively. And we knowacda, ´x2) or (A 2left of the node that is bisimilar to the model thus obtained, namely (A 2that if two bisimilar models appear on either side of a node, Spoiler loses. Hence, in the current node, given the presencebcda, `x2), he will not play anof (A 2[a]-move either. This implies he plays an [i]-move for some i ∈ I \ {a, b}, but it is easy to see that for every i-successor of(A 2bcda, ´x2). If Spoiler were to play a [b]-move in the current node, he would either choose (A 2acda, `x2), Spoiler will not play a [b]-move, and, by symmetry, given the presence of (A 2acda, `x2) and (A 2acda, ´x2) and (A 2acda, ´x2) that Spoiler will chose, there is a bisimilar i-successor of (A 2A similar argument demonstrates that the pairs (cid:11)(A 2acdb, ´x2)(cid:13) are diverging pairs:acda, `x2), (A 2Spoiler can postpone splitting the pairs by first playing some or-moves that do not split the pairs, not-moves interleavedacda, ´x2)with an [a]-move, a [c]-move and a [d]-move (this would yield a node in the game tree with the pairs (A 2acdb, ´x2) on the other side), but from this node on, before playing a index-move,on one side of the node, and (A 2Spoiler had to split the pairs. This argument will be formalised and proven in Lemmas 5 and 6.acdb, `x2), (A 2acdb, `x2), (A 2acda, `x2), (A 2acda, `x2).acda, ´x2)(cid:13) and (cid:11)(A 2Definition 18 (Cn and Dn). The two sets of pointed models Cn, Dn are constructed as follows.Γ (cdΓ )∗ } and D1 = {(C 1w , ´x1) | w ∈ W 1Γ (cdΓ )∗ } where C 1w= {C 1, R1w , V 1} is such that (see alsow , `x1) | w ∈ W 1• C1 = {(C 1Fig. 5):– C 1 = {¯x1, `x1, ´x1, `y1, ´y1}.– For any i ∈ I , if i = w, then R1(`x1, ¯x1)}); and if i /∈ W 1Γ (cdΓ )∗ , then R1– V (c) = C 1\{ ´y1, ¯x1} and V (p) = ∅ for any p ∈ P such that p (cid:24)= c.w , `xn) | w ∈ WnΓ (cdΓ )∗ } and Dn = {(C n• Now let n > 1. Cn = {(C nw (i) = Cl({(`x1, `y1), (´x1, ´y1)}); if i ∈ W 1w (i) = Cl({( `y1, ´y1), (`x1, ´x1)}).that (see also Fig. 6):– C n = C n−1 ∪ {`xn, ´xn, `yn, ´yn, `zn, ´zn, ¯xn, ¯yn, ¯zn}.– Rnw is defined in the following way. Since w ∈ WnΓ (cdΓ )∗ , it is of the form jcdw(cid:15), where j ∈ {a, b}, and w(cid:15) ∈ Wn−1Γ (cdΓ )∗ .w , ´x1) | w ∈ WnΓ (cdΓ )∗ } where C nw= {C n, Rnw , V n} is suchΓ (cdΓ )∗ \{w}, then R1w (i) = Cl({( `y1, ´y1), (`x1, ´x1),74T. French et al. / Artificial Intelligence 197 (2013) 56–85Fig. 4. The models (A 2acda, `x2) (left) and (A 2acda, ´x2) (right) for w = acda ∈ W 2Γ (cdΓ )∗ . In the middle: (A 2bcda, `x2).Fig. 5. The models (C 1a , `x1) (left) and (C 1b , ´x1) (right).w ( j) = Cl(Rn−1∗ Rn∗ If i ∈ {a, b}\{ j}, then Rnw(cid:15) ( j) ∪ R j), where R j = {(`xn, `yn), (´xn, ´yn), (`zn, ´zn)};w (i) = Cl(Rn−1R i = {(`xn, ´xn), (`xn, ¯xn), ( `yn, ´yn)( `yn, ¯yn), (`zn, ´zn), (`zn, ¯zn)};w (c) = Cl(Rn−1w (d) = Cl(Rd ∪ (Rn−1Rd = {(`zn, `xn−1), (´zn, ´xn−1), ( `yn, ´yn), (`xn, ´xn)};w(cid:15) (c) ∪ Rc), where Rc = {( `yn, `zn), ( ´yn, ´zn), (`xn, ´xn)};w(cid:15) (d)\{(`xn−1, ´xn−1), (´x−1n, `xn−1)})), wherew(cid:15) (i) ∪ R i), where∗ Rn∗ Rn∗ For any i ∈ I\{a, b, c, d}, RnR i = {(`xn, ´xn), ( `yn, ´yn), (`zn, ´zn)}.w (i) = Cl(Rn−1w(cid:15) (i) ∪ R i), where– V n(c) = V n−1(c) ∪ {`xn, ´xn, `yn, ´yn, `zn, ´zn}; V n(p) = ∅ for any p ∈ P such that p (cid:24)= c.Again, in the pointed model (C nThe models (C nw , `xn), the word w encodes the shortest path from `xn to `y1.w , `xn) and (C nw , ´xn) can be informally described as follows (see also Figs. 5 and 6). They are based onthe ladder models (Aw , `xn) and (Bw , ´xn) respectively, but there are two differences. This time, for every rung (except forw , ´xn)the top one), we connect the points `p and ´p on the rung with a third point, ¯p. That is, the models (C 1only have one such point, ¯x1, and it is connected with `x1 and ´x1 using the index i ∈ {a, b} for which one cannot go ‘up’from `x1, i.e., with i = w. Let ( `pn, ´pn) ∈ {(`xn, ´xn), ( `yn, ´yn), (`zn, ´zn)} be a pair on a new rung of the ladder model (C nw , `xn) orw , ´xn). Then we add a point m ∈ {¯xn, ¯yn, ¯zn} and the points `pn and ´pn are connected with ¯pn through an edge labelled(C n, or in other words, the index from {a, b} that is not used to go ‘up’ in `pn. The otherwith i ∈ {a, b} such that w (cid:24)= j wdifference between the models in Cn ∪ Dn and the models in An ∪ Bn is the valuation for the propositional variable c: forw , ´xn) this variable is false in ´y1 (the right top of the ladder) and in all points in the middle:the models in (C n{¯x1} ∪ {¯xi, ¯yi, ¯zi | 2 (cid:3) i (cid:3) n}.w , `xn) and (C 1w , `xn) and (C n(cid:15)The following observation can be proven along the lines of Observation 1.T. French et al. / Artificial Intelligence 197 (2013) 56–8575Fig. 6. The models (C 2acda, `x2) (left) and (C 2acdb, `x2) (right).Observation 2. For every n, all models in Cn ∪ Dn are S5-models with the property that, for any two points p and pfor any i ∈ I : if p (cid:24)= pnot added because of the transitive closure).in the model, and(cid:15), p) was explicitly added to R i in the definition of the model (i.e., they are, then either (p, pand p R i p(cid:15)) or (p(cid:15)(cid:15)(cid:15)Proposition 4. Recall that Γ = {a, b}. For all n (cid:2) 1, it is true that1. An |(cid:12) ϑn and Bn |(cid:12) ¬ϑn;2. Cn |(cid:12) σn and Dn |(cid:12) ¬σn.Proof. We prove the slightly more complicated second item. The proof of item 1 is analogous. The proof works as follows.First of all, we will quickly verify that all points in the middle of the ladder (the points ¯xi, ¯yi, ¯zi ) all verify ¬σ j , for all1 (cid:3) j (cid:3) n. Then, for all σ j (1 (cid:3) j (cid:3) n) and all points pi at a support of the ladder, i.e., for pi ∈ {`xi, ´xi, `yi, ´yi, `zi, ´zi}, we showthat all σ j with j < i are true in pi , while `x j verifies σ j , but ´x j does not.Let us consider an arbitrary pointed model C nww , V n}. Note that ¬σn+1, which is ¬[∃{a,b}](c ∧ [c][d]σn) is equiv-alent to (cid:11)a(cid:13)(¬c ∨ (cid:11)c(cid:13)(cid:11)d(cid:13)¬σn) ∧ (cid:11)b(cid:13)(¬c ∨ (cid:11)c(cid:13)(cid:11)d(cid:13)¬σn). Since all relations in our models are reflexive and for every middlepoint m ∈ {¯x1} ∪ {¯xi, ¯yi, ¯zi | 2 (cid:3) i (cid:3) n} it is true that (C nj (cid:2) 1, we have(C nw , m) |(cid:12) ¬c, it follows immediately that for all= {C n, Rnw , m) |(cid:12) ¬σ j .Next we show thatA: for every 1 (cid:3) j (cid:3) n, it is true thatA1: if j < i (cid:3) n, and pi ∈ {`xi, ´xi, `yi, ´yi, `zi, ´zi} then (C nA2: if j = i, then (C nw , `xi) |(cid:12) σ j , whereas (C nw , ´xi) |(cid:12) ¬σ j .w , pi) |(cid:12) σ j , andThe proof is by induction on j.Base caseLet j = 1. It is obvious that σ1 is equivalent to [a]c ∨ [b]c. Suppose that 1 < i. It follows from the definition of the modelsw that {`xi, ´xi, `yi, ´yi, `zi, ´zi} ⊆ V n(c); moreover, there is an l ∈ {a, b} such that `xi Rl´yi and there is no point p suchC nw , p) |(cid:12) ¬c and p is an l-successor of one of the points {`xi, ´xi, `yi, ´yi}. Hence,that (C n`yi , ´xi Rl• (C n• (C n• (C n• (C nw , `xi) |(cid:12) σ1;w , ´xi) |(cid:12) σ1;w , `yi) |(cid:12) σ1;w , ´yi) |(cid:12) σ1.Let us consider now the points `zi and ´zi . Again, the construction of the model C nthat `zi Rl´zi and there is no point p that is an l-successor of one of these points and at the same time (C nw is such that there is an l ∈ {a, b}, suchw , p) |(cid:12) ¬c.76T. French et al. / Artificial Intelligence 197 (2013) 56–85w , ´zi) |(cid:12) σ1 and (C nTherefore, (C nand (C nand ´x1 Rkand there is no point p such that `x1 Rl p and p /∈ V n(c). Therefore, (C nw , ´x1) |(cid:12) ¬σ1. The construction of the models is such that { `y1, `x1} ⊆ V n(c) and {¯x1, ´y1} ∩ V n(c) = ∅; moreover, ´x1 Rlw , ´x1) |(cid:12) ¬σ1. At the same time `x1 Rlw , `x1) |(cid:12) σ1.w , `zi) |(cid:12) σ1. To complete the base case, we have to prove A2 which says that (C n¯x1 for some l (cid:24)= k and l, k ∈ {a, b}. Hence, (C nw , ´x1) |(cid:12) (cid:11)a(cid:13)¬c ∧ (cid:11)b(cid:13)¬c, i.e., (C nw , `x1) |(cid:12) [a]c ∨ [b]c, i.e., (C nw , `x1) |(cid:12) σ1´y1`y1,Induction stepSuppose that j + 1 < i (cid:3) n and let us assume that the statement A is true for j. It is obvious that σ j+1 is equivalent tothe formula [a](c ∧ [c][d]σ j) ∨ [b](c ∧ [c][d]σ j). We first prove that A1 is true for the points `xn and ´xn. All the other casesare analogous.According to the induction hypothesis, it is true that• (C n• (C n• (C n• (C nw , `xn) |(cid:12) σ j and (C nw , `yn) |(cid:12) σ j and (C nw , `zn) |(cid:12) σ j and (C nw , `xn−1) |(cid:12) σ j and (C nw , ´xn) |(cid:12) σ j ;w , ´yn) |(cid:12) σ j ;w , ´zn) |(cid:12) σ j ;w , ´xn−1) |(cid:12) σ j .w , `yn) |(cid:12) [d]σ j and (C nw , `xn) |(cid:12) c ∧ [c][d]σ j and (C nw , p) |(cid:12) ¬σ j , we see that (C n´yn, and there is no other point p that is a d-successor of either `yn or ´yn and (C n´xn, `xn Rc ´xn and there is no other point p that is either a d- or a c-successor of `xn or ´xn and at the same timeSince `xn Rdw , ´xn) |(cid:12) c ∧ [c][d]σ j . On the other hand, the induction hypothesis(C nand the fact that `yn Rdw , p) |(cid:12) ¬σ j imply`xn−1,that (C nw , `zn) |(cid:12) [d]σ j´zn Rdw , ´yn) |(cid:12) c ∧ [c][d]σ j .and (C nWe know that for some l ∈ {a, b}, `yn is an l-successor of `xn, ´yn is an l-successor of ´xn and there is no other point p thatw , ´xn) |(cid:12)is an l-successor of either `xn or ´xn and (C n[l](c ∧ [c][d]σ j). Hence, (C nw , ´yn) |(cid:12) [d]σ j . In a similar fashion, the induction hypothesis and the fact that `zn Rd´xn−1, and there is no point p that is a d-successor of either `zn or ´zn and (C nw , ´zn) |(cid:12) [d]σ j . Given the shape of the model C nw , p) |(cid:12) ¬(c ∧ [c][d]σ j). Therefore, (C nw , `xn) |(cid:12) [l](c ∧ [c][d]σ j) and (C nw , `yn) |(cid:12) c ∧ [c][d]σ j and (C nw , p) |(cid:12) ¬σ j imply that (C nw , we obtain that (C nw , `xn) |(cid:12) σ j+1 and (C nw , ´xn) |(cid:12) σ j+1.w , `xn) |(cid:12) σn can be established in the same way as above. Next, we show A2, i.e., that (C nw , ´xn−1) |(cid:12) ¬σn−1. Additionally, we have ´xn Rlw , ´xn) |(cid:12) ¬σn.´yn for some l ∈ {a, b}, ´yn Rc ´zn, andThe fact that (C nAccording to the induction hypothesis, (C n´zn Rd´xn−1. Therefore, (C nOn the other hand, we know already that (C n¯xn. Hence, (C nthat k (cid:24)= l and ´xn Rkw , ´xn−1) |(cid:12) (cid:11)l(cid:13)(¬c ∨ (cid:11)c(cid:13)(cid:11)d(cid:13)¬σn−1).w , ¯xn) |(cid:12) ¬σn−1. Given the shape of the model C nw , there is a k ∈ {a, b} suchw , ´xn−1) |(cid:12) (cid:11)k(cid:13)(¬c ∨ (cid:11)c(cid:13)(cid:11)d(cid:13)¬σn−1) and, therefore, (C nw , ´xn) |(cid:12) ¬σn. (cid:2)We now turn our attention to the formulae ϕn, and the models En ∪ Fn for them. Before defining those models though,we show that, indeed, the sequence of formulae ϕn has equivalents ψn in ML. This was easily seen for the sequences usingϑn and σn, and, although this equivalence is not needed for the sequel (after all, we are interested in the shortest formulaeχn in ML equivalent to ϕn), it may give the reader an additional way of looking at the models to be defined.Proposition 5. Define ψn ∈ ML as follows:(cid:4)ψ1 = (cid:11)c(cid:13)c ∧ (cid:11)d(cid:13)ψn+1 = ψn ∧ (cid:11)c(cid:13)(cid:4)(cid:4)d ∧(cid:4)ψn ∧ c ∧ (cid:11)d(cid:13)(cid:11)a(cid:13)a ∨ (cid:11)b(cid:13)bψn ∧ d ∧Then, even on K, for all n, ϕn and ψn are equivalent.(cid:5)(cid:5)(cid:5)(cid:4)(cid:4)(cid:11)a(cid:13)(ψn ∧ a) ∨ (cid:11)b(cid:13)(ψn ∧ b)(cid:5)(cid:5)(cid:5)Proof. First note that, by definition of ϕ1 and ϕ0, we have(cid:4)(cid:5)(cid:5)(cid:5)ϕ1 = (cid:11)c(cid:13)(cid:4)c ∧ (cid:11)d(cid:13)(cid:4)d ∧(cid:11)a(cid:13)a ∨ (cid:11)b(cid:13)bWhich settles the claim for n = 1. Now suppose, we have proven that ϕn and ψn are equivalent on K.Our next step is to show that for all n (cid:2) 1 we have:(5)(cid:4)ϕn ∧ (cid:11)c(cid:13)(cid:4)ϕn ∧ c ∧ (cid:11)d(cid:13)(cid:4)ϕn ∧ d ∧(cid:4)(cid:11)ϕn(cid:13)ϕ1 ≡(cid:11)a(cid:13)(ϕn ∧ a) ∨ (cid:11)b(cid:13)(ϕn ∧ b)We use the following equivalences for public announcements, for more details of those, see [25, Chapter 4]. Let ϕ and ψ(6)(cid:5)(cid:5)(cid:5)(cid:5)be arbitrary formulae, e ∈ I and e ∈ A. Then(cid:11)ϕ(cid:13)ψ ≡ ϕ ∧ (cid:11)ϕ(cid:13)ψ(cid:11)ϕ(cid:13)(cid:11)e(cid:13)ψ ≡ ϕ ∧ (cid:11)e(cid:13)(cid:11)ϕ(cid:13)ψ(cid:11)ϕ(cid:13)(ψ1 ∧ ψ2) ≡ (cid:11)ϕ(cid:13)ψ1 ∧ (cid:11)ϕ(cid:13)ψ2(cid:11)ϕ(cid:13)(ψ1 ∨ ψ2) ≡ (cid:11)ϕ(cid:13)ψ1 ∨ (cid:11)ϕ(cid:13)ψ2(cid:11)ϕ(cid:13)e ≡ ϕ ∧ e(7)(8)(9)(10)(11)T. French et al. / Artificial Intelligence 197 (2013) 56–85Using (7), (8) and (11), we get(cid:4)(cid:11)ϕ(cid:13)(cid:11)e(cid:13)(e ∧ ψ) ≡ ϕ ∧ (cid:11)e(cid:13)ϕ ∧ e ∧ (cid:11)ϕ(cid:13)ψ(cid:5)We then obtain the following equivalences, using (5) and (12), respectively:(cid:4)(cid:5)(cid:5)(cid:5)(cid:11)ϕn(cid:13)ϕ1 ≡ (cid:11)ϕn(cid:13)(cid:11)c(cid:13)(cid:4)c ∧ (cid:11)d(cid:13)≡ ϕn ∧ (cid:11)c(cid:13)(ϕn ∧ c ∧ (cid:11)ϕn(cid:13)(cid:11)d(cid:13)(cid:4)d ∧(cid:11)a(cid:13)a ∨ (cid:11)b(cid:13)b(cid:4)(cid:4)d ∧(cid:5)(cid:5)(cid:11)a(cid:13)a ∨ (cid:11)b(cid:13)bWe also have, by (12) again,(cid:4)d ∧(cid:11)ϕn(cid:13)(cid:11)d(cid:13)(cid:11)a(cid:13)a ∨ (cid:11)b(cid:13)d(cid:4)(cid:5)(cid:5)≡ ϕn ∧ (cid:11)d(cid:13)(cid:4)ϕn ∧ d ∧ (cid:11)ϕn(cid:13)(cid:4)(cid:11)a(cid:13)a ∨ (cid:11)b(cid:13)d(cid:5)(cid:5)Using (10) and (12) (with ψ = (cid:17)), we also have(cid:5)(cid:4)(cid:11)ϕn(cid:13)(cid:11)a(cid:13)a ∨ (cid:11)b(cid:13)d≡ (cid:11)ϕn(cid:13)(cid:11)a(cid:13)a ∨ (cid:11)ϕn(cid:13)(cid:11)b(cid:13)b(cid:5)(cid:4)∨ϕn ∧ (cid:11)a(cid:13)(ϕn ∧ a)≡(cid:4)(cid:5)ϕn ∧ (cid:11)b(cid:13)(ϕn ∧ b)77(12)(13)(14)(15)(16)(17)The equivalence (6) now follows by combining (14), (15) and (17).Since ϕn+1 is by definition (cid:11)ϕn(cid:13)ϕ1, we use (6) and the induction hypothesis to conclude the equivalence of ϕn+1 andψn+1. (cid:2)We proceed by defining suitable sets of models for the formulae ϕn.Definition 19. For each n (cid:2) 1, the set Wnfollowing way:(cdΓ )∗ of (cdΓ )∗-alternating words over the alphabet {a, b, c, d} is defined in the• W 1• Wn(cdΓ )∗ = {cda, cdb};(cdΓ )∗ = {cdaw | w ∈ Wn−1(cdΓ )∗ } ∪ {cdbw | w ∈ Wn−1(cdΓ )∗ }, for n > 1.So (cdΓ )∗{acd, bcd}.-alternating words in Wn(cdΓ )∗ contains expressions from (cdΓ )n,i.e., n concatenations of strings fromDefinition 20 (En and Fn). The two sets of pointed model En, Fn are constructed by induction on n. (See also Figs. 7 and 8.)w , ´x1) | w ∈ W 1(cdΓ )∗ } where E 1w= {E 1, R1w , V 1w} is such that (see also Fig. 7):w ( j) = Cl({(`z0, ´z0), (`z1, ´z1), ( `y1, ´y1), (`x1, ´x1)});w (i) = {`z0} V 1(cdΓ )∗ } and Fn = {(E nw (p) = ∅ for any p ∈ A such that p /∈ {i, c, d}.w , ´xn) | w ∈ Wn(cdΓ )∗ } where E nw= {En, Rnw , V nw} is(cdΓ )∗ , it is of the form cdj w(cid:15), where j ∈ {a, b}, and w(cid:15) ∈ Wn−1(cdΓ )∗ .• E1 = {(E 1(cdΓ )∗ } and F1 = {(E 1w , `x1) | w ∈ W 1– E 1 = {`x1, ´x1, `y1, ´y1, `z1, ´z1, `z0, ´z0}.Now assume w = cdi, with i ∈ {a, b}, then– R1– R1– R1– If j /∈ {i, c, d}, then R1– V 1w (i) = Cl({(`z1, `z0), (´z1, ´z0), ( `y1, ´y1), (`x1, ´x1)});w (c) = Cl({(`z0, ´z0), (`z1, ´z1), (`x1, `y1), (´x1, ´y1)});w (d) = Cl({(`z0, ´z0), (`z1, `y1), (´z1, ´y1), (`x1, ´x1)});w (c) = { `y1, ´y1, `z1, ´z1}, V 1• Now assume n > 1, then En = {(E nw (d) = {`z1, ´z1} and V 1w , `xn) | w ∈ Wnsuch that (see also Fig. 8):– En = En−1 ∪ {`xn, ´xn, `yn, ´yn, `zn, ´zn};– Rnw is defined as follows. Since w ∈ Wn∗ Then Rnw ( j) = Cl((Rnw(cid:15) ( j) \ {(`xn−1, ´xn−1), (´xn−1, `x−1n)}) ∪ R j),∗ Rn∗ Rnwhere R j = {(`zn, `xn−1), (´zn, ´xn−1), ( `yn, ´yn), (`xn, ´xn)};w (c) = Cl(Rn−1w(cid:15) (c) ∪ Rc), whereRc = {(`zn+1, ´zn+1), (`xn+1, `yn+1), (´xn+1, ´yn+1)};w (d) = Cl(Rnw(cid:15) (d) ∪ Rd), whereRd = {( `yn, `zn), ( ´yn, ´zn), (`xn, ´xn)};∗ For any i /∈ { j, c, d}, Rnw (i) = Cl(Rn−1w(cid:15) (i) ∪ R i), whereR i = {(`xn, ´xn), ( `yn, ´yn), (`zn, ´zn)}.w (c) = V n−1– V nw (i) = V n−1V nw(cid:15) (c) ∪ { `yn, ´yn, `zn, ´zn}, V nw(cid:15) (i); V nw(cid:15) (d) ∪ {`zn, ´zn}, V nw (d) = V nw (p) = ∅ for any p ∈ P such that p /∈ {a, b, c, d}.w (j) = V n−1w(cid:15) (j) ∪ {`xn−1, ´xn−1}; if i ∈ {a, b}\{j}, then78T. French et al. / Artificial Intelligence 197 (2013) 56–85Fig. 7. The models (E 1cda, `x1) (left) and (E 1cdb, ´x1) (right).Fig. 8. The models (A 1cdacdb, `x2) (left) and (A 1cdacda, ´x2) (right).w , `x) and (E nSo, again, models (E nw , ´x) are models with the shape of a ladder: there is a path labelled with the indicesin w from `xn, the left foot of the ladder, to `z0 the left top, labelled with indices according to w. There is an identical pathfrom ´xn to ´z0. From every `xi and ´xi , there is a c-step ‘up’, from every `yi and ´yi there is a d-step ‘up’, and in every `zi and´zi there is a step ‘up’ labelled either a or b (i (cid:2) 1). Two points on a rung `pi and ´pi are labelled with all indices i such thatthere is no step ‘up’ or ‘down’ in either `pi or ´pi . The atom d is true in all points `zi and ´zi with i (cid:2) 1, atom c is true in all`yi, ´yi, ´zi, `zi (i (cid:2) i) and, finally, for j ∈ {a, b}, this atom j is true in exactly those points p on the left or right support, if pcan be reached from a point q by going one step ‘up’ using the label j. In general, it is the case, for any j ∈ {a, b, c, d}, thatif it is possible to reach a point p from q by going ‘up’ using an edge labelled j, then j is true in p (and on top of that, c isalso true when d is true).We have again the following.T. French et al. / Artificial Intelligence 197 (2013) 56–8579Observation 3. For every n, all models in En ∪ Fn are S5-models with the property that, for any two points p and pfor any i ∈ I : if p (cid:24)= pnot added because of the transitive closure).in the model, and(cid:15), p) was explicitly added to R i in the definition of the model (i.e., they are, then either (p, pand p R i p(cid:15)) or (p(cid:15)(cid:15)(cid:15)Proposition 6. For all n (cid:2) 1, it is true that En |(cid:12) ϕn and Fn |(cid:12) ¬ϕn.Proof. The proof proceeds along the lines of the proof of Proposition 4, i.e., we prove by induction on j that for everymodel E nwB: for every 1 (cid:3) j (cid:3) n, it is true that} we have= {En, Rnw , V nwB1: if j < i (cid:3) n, then for all pi ∈ {`xi, ´xi, `yi, ´yi, `zi, ´zi}, then (E nw , `xi) |(cid:12) ϕ j , whereas (E nB2: if j = i, then (E nw , ´xi) |(cid:12) ¬ϕ j .w , pi) |(cid:12) ϕ j , andWe assume that 1 < n. The case n = 1 is covered in the base case below which we prove in detail. The induction step is leftto the reader.Base caseLet j = 1. We are going to argue that ϕ1 = (cid:11)c(cid:13)(c ∧ (cid:11)d(cid:13)(d ∧ ((cid:11)a(cid:13)a ∨ (cid:11)b(cid:13)b))) is true in any (E nw , `yi) with i > 1as long as `yi, `zi and `xi−1 are present, and it is true in (E nw , `zi) as long as `zi and `xi−1 are present. As a special case, ϕ1 istrue in `x1, since we can make a c-step to `y1 (where c is true), from where there is a d-step to `z1 (where d is true), andfrom there, depending on w, either an a or a b-step to `z0, where either a or b is true. For the right support, ϕ1 is true inw , `zi) as long as `zi and `xi−1any (E nare present. As a special case, ϕ1 is false in ´x1: to make a c-step to a point where c is true, we must go to ´y1, and fromthere, to make a d-step to a point where d is true, we must go to `z1. However, from there, there is neither an a-step to apoint where a is true, nor a b-step to a point where b holds. The following proves this argument a little more formally:w , `yi) with i > 1 as long as `yi, `zi and `xi−1 are present, and it is true in (E nw , ´xi) and (E nw , `xi) and (E nB1: Let j < i. For every 1 < k (cid:3) n, we have:1. `xk Rc `yk and ´xk Rc ´yk, and `yk, ´yk ∈ V n´zk, and `zk, ´zk ∈ V n2. `yk Rd3. There are l ∈ {a, b} and l ∈ {a, b}, such that `zk Rl`zk and ´yk Rdw (c);w (d);Therefore, (E n((cid:11)a(cid:13)a ∨ (cid:11)b(cid:13)b))).w , `xk) |(cid:12) (cid:11)c(cid:13)(c ∧ (cid:11)d(cid:13)(d ∧ ((cid:11)a(cid:13)a ∨ (cid:11)b(cid:13)b))) and the same is true about (E nw , ´xk) |(cid:12) (cid:11)c(cid:13)(c ∧ (cid:11)d(cid:13)(d ∧`xk−1 and ´zk Rl´xk−1, and `xk−1, ´xk−1 ∈ V nw (l);w , ´xk), i.e., (E nThe proof of the statement for `yk and ´yk is similar. Indeed, given the shape of E n1. `yk Rc `yk and ´yk Rc ´yk, and `yk, ´yk ∈ V nw (c);´zk, and `zk, ´zk ∈ V n2. `yk Rdw (d);3. There are l ∈ {a, b} and l ∈ {a, b}, such that `zk Rlw , `yk) |(cid:12) ϕ1 and (E n`xk−1 and ´zk RlTherefore, (E nw , ´xk) |(cid:12) ϕ1.`zk and ´yk Rd´xk−1, and `xk−1, ´xk−1 ∈ V nw (l);w , the following are true:Similarly,1. `zk Rc `zk and ´zk Rc ´zk, and `zk, `zk ∈ V nw (d);2. There are l ∈ {a, b} and l ∈ {a, b}, such that `zk Rlw (c) ∪ V nHence, (E nw , `zk) |(cid:12) ϕ1 and (E nw , ´zk) |(cid:12) ϕ1.B2: To complete the base case, we have to prove that (E n1. `x1 Rc `y1 and `y1 ∈ V nw (c);2. `y1 Rd`z1 and `z1 ∈ V nw (d);3. There are l ∈ {a, b} and l ∈ {a, b}, such that `z1 Rl`xk−1 and ´zk Rl´xk−1, and `xk−1, ´xk−1 ∈ V nw (l);w , `x1) |(cid:12) ϕ1 whereas (E nw , ´x1) |(cid:12) ¬ϕ1. Indeed, we have`z0 and `z0 ∈ V nTherefore, (E nw (l);w , `x1) |(cid:12) (cid:11)c(cid:13)(c ∧ (cid:11)d(cid:13)(d ∧ ((cid:11)a(cid:13)a ∨ (cid:11)b(cid:13)b))) and, thus, (E nw , `x1) |(cid:12) ϕ1.It is easy to see that ¬ϕ1 is equivalent to [c](¬c ∨ [d](¬d ∨ ([a]¬a ∧ [b]¬b))).Again, given the shape of the model E n1. (E n2. (E n3. (E n4. ´y1 Rdw , ´x1) |(cid:12) ¬c;w , ´z1) |(cid:12) ([a]¬a ∧ [b]¬b);w , ´y1) |(cid:12) ¬d;w , it is easy to see that the following are true´z1, and there is no point p that is a d-successor of either ´y1 or ´z1 and such that (E nTherefore, we see that (E nw , ´y1) |(cid:12) [d](¬d ∨ ([a]¬a ∧ [b]¬b)).w , p) |(cid:12) (d ∧ ((cid:11)a(cid:13)a ∨ (cid:11)b(cid:13)b)).Given all the items above, the fact that ´x1 Rc ´y1 and there is no point p such that p is a c-successor of either ´x1 orw , ´x1) |(cid:12) [c](¬c ∨ [d](¬d ∨ ([a]¬a ∧ [b]¬b))) and, thus,´y1 and (E n(E nw , p) |(cid:12) (cid:11)c(cid:13)(c ∧ (cid:11)d(cid:13)(d ∧ ((cid:11)a(cid:13)a ∨ (cid:11)b(cid:13)b))), we see that (E nw , ´x1) |(cid:12) ¬ϕ1.Induction stepSuppose that j + 1 < i (cid:3) n and let us assume that the statement B is true for j. So, we have80T. French et al. / Artificial Intelligence 197 (2013) 56–85Table 4Nodes.(cid:11)H1 ∪ {(H n(cid:11)H1 ∪ {(H n(cid:11)H1 ∪ {(H n(cid:11)H1 ∪ {(H nw , pi )} ◦H 2 ∪ {(H nw , `xi )} ◦H 2 ∪ {(H nw , `yi )} ◦H 2 ∪ {(H nw , `zi )} ◦ H2 ∪ {(H nw , qi )}(cid:13)w , ´xi )}(cid:13)w , ´yi )}(cid:13)w , ´zi )}(cid:13)(cid:11)H2 ∪ {(H n(cid:11)H2 ∪ {(H n(cid:11)H2 ∪ {(H n(cid:11)H2 ∪ {(H nw , qi )} ◦ H1 ∪ {(H nw , ´xi )} ◦H 1 ∪ {(H nw , ´yi )} ◦ H1 ∪ {(H nw , ´zi )} ◦H 1 ∪ {(H nw , pi )}(cid:13)w , `xi )}(cid:13)w , `yi )}(cid:13)w , `zi )}(cid:13)B1: If j < i (cid:3) n, then for all pi ∈ {`xi, ´xi, `yi, ´yi, `zi, ´zi}, then (E nw , `xi) |(cid:12) ϕ j , whereas (E nB2: If j = i, then (E nw , ´xi) |(cid:12) ¬ϕ j .w , pi) |(cid:12) ϕ j , andTo prove B1 for j + 1, assume j + 1 < i (cid:3) n. By definition, ϕ j+1 = (cid:11)ϕ j(cid:13)ϕ1, which using (5), is equivalent to (cid:11)ϕ j(cid:13)(cid:11)c(cid:13)(c ∧(cid:11)d(cid:13)(d ∧ ((cid:11)a(cid:13)a ∨ (cid:11)b(cid:13)b))). Recall that (cid:11)ϕ j(cid:13)ϕ1 is shorthand for ¬[ϕ j]¬ϕ1, so that(cid:5)(cid:5)(cid:4)(cid:4)(cid:5)(cid:4)E nw , p|(cid:12) (cid:11)ϕ j(cid:13)ϕ1iffE nw , p|(cid:12) ϕ jandE nw|ϕ j , p|(cid:12) ϕ1From the induction hypothesis, we know that ϕ j is true in the following points of the left support of E nw :`P = {`xn, `yn, `zn, . . . , `x j+1, `y j+1, `z j+1, `x j}and those at the right support:´P = {´xn, ´yn, ´zn, . . . , ´x j+1, ´y j+1, ´z j+1}(Crucially, ´x j is not present in ´P .) Thus, we have(cid:4)(cid:5)E nw , p|(cid:12) ϕ jiff p ∈ `P ∪ ´P(18)(19)This implies that if ϕ j is announced, the points `P ∪ ´P will re-appear in the updated model E ntions. It is easy to verify, given the construction of our model, that ϕ1 = (cid:11)c(cid:13)(c ∧ (cid:11)d(cid:13)(d ∧ ((cid:11)a(cid:13)a ∨ (cid:11)b(cid:13)b))) holds in E nwpoint `p from {`xi, `yi, `zi} iff all of `yi, `zi and `xi−1 are present. Likewise, ϕ1 holds in E nwall of ´yi, ´zi and ´xi−1 are present. Together, this shows that (cid:11)ϕ j+1(cid:13)ϕ1 is true in any point in the model E nw|ϕ j , and so will their connec-|ϕ j in any|ϕ j in any point ´p from {´xi, ´yi, ´zi} iff|ϕ j from the setw`Q = {`xn, `yn, `zn, . . . , `x j+2, `y j+2, `z j+2, `x j+1}together with´Q = {´xn, ´yn, ´zn, . . . , ´x j+2, ´y j+2, ´z j+2}(Point ´x j+1 /∈ ´Q because, in order for ϕ1 to be true in it, it needs `x j , which is not present in ´P , and hence not in E nHencew|ϕ j .)(cid:4)E nw|ϕ j , p(cid:5)|(cid:12) ϕ1iff p ∈ `Q ∪ ´QUsing (18), (19) and (20), we see that(20)(cid:4)(cid:5)E nw , p|(cid:12) (cid:11)ϕ j(cid:13)ϕ1iff p ∈ ( `P ∩ `Q ) ∪ ( ´P ∩ ´Q ) = ( `Q ∩ ´Q )(21)From this, and the fact that ϕ j+1 = (cid:11)ϕ j(cid:13)ϕ1, we obtain B1 for j + 1 < i (cid:3) n, i.e., for all pi ∈ {`xi, ´xi, `yi, ´yi, `zi, ´zi}, we havew , ´x j+1) |(cid:12) ¬ϕ j+1,(E ni.e., B2 holds for j + 1 = i.w , pi) |(cid:12) ϕ j+1. And we also obtain (since x j+1 ∈ `Q ) that (E nw , `x j+1) |(cid:12) ϕ j+1 but (since ´x j+1 /∈ ´Q ) that (E nϕ j ∧ (cid:11)c(cid:13)(cid:4)ϕ j ∧ c ∧ (cid:11)d(cid:13)(cid:4)ϕ j ∧ d ∧(cid:4)(cid:11)a(cid:13)(ϕi−1 ∧ a) ∨ (cid:11)b(cid:13)(ϕi−1 ∧ b)(cid:5)(cid:5)(cid:5)(cid:2)Propositions 4 and 6 imply that Spoiler can win any one of the games starting at (cid:11)An ◦ Bn(cid:13) or (cid:11)Cn ◦ Dn(cid:13) or (cid:11)En ◦ Fn(cid:13).3.2.2. Number of moves needed for FSGs on our modelsWe proceed to proving that winning any of the games starting at (cid:11)An ◦ Bn(cid:13) or (cid:11)Cn ◦ Dn(cid:13) or (cid:11)En ◦ Fn(cid:13) cannot be done in}. The nextw will denote some arbitrary but fixed model from the set {A nless than 2n moves. From now on, H nproperty of the models in An, Bn, Cn, Dn, En, and Fn is essential.w , C nw , E nwLet us consider the nodes in Table 4.w range over {A nProposition 7. Let H n(i (cid:2) 2 in case of A nw , ´pi)} ◦H 1 ∪ {(H n{(H nthen T cannot be closed (i.e., Spoiler loses the formula size game).w and i (cid:2) 0 in case of E nw , ´pi)}(cid:13) or (cid:11)H2 ∪ {(H nw , C nw , `pi)} ◦H 2 ∪ {(H nw , C nw , E nw}, and let the pairs ( `pi, ´pi) range over {(`xi, ´xi), ( `yi, ´yi)} (1 (cid:3) i (cid:3) n) and {(`zi, ´zi)}w ). Let r ∈ I . For any game tree T that contains at least one of the nodes (cid:11)H1 ∪w , `pi)}(cid:13), if Spoiler plays an [r]-move while `pi is an r-successor of ´pi ,T. French et al. / Artificial Intelligence 197 (2013) 56–85Proof.This follows immediately from the definition of the [r]-move, which if played at a node of this shape, and H nww , E n}, will result in adding to the game tree one of the following nodesw{A n81∈• (cid:11)H(cid:15)1• (cid:11)H(cid:15)2∪ {(H n∪ {(H nw , `pi)} ◦ H(cid:15)w , ´pi)} ◦ H(cid:15)21∪ {(H n∪ {(H nw , `pi)}(cid:13) or (cid:11)H(cid:15)w , ´pi)}(cid:13) or (cid:11)H(cid:15)12∪ {(H n∪ {(H nw , ´pi)} ◦ H(cid:15)w , `pi)} ◦ H(cid:15)22∪ {(H n∪ {(H nw , ´pi)}(cid:13);w , `pi)}(cid:13);or, if H nw is C nw and ¯mi ∈ { ¯yi, ¯zi, ¯xi}, this leads to either adding one node of the forms above or• (cid:11)H(cid:15)1• (cid:11)H(cid:15)2∪ {(H n∪ {(H nw , ¯mi)} ◦ H(cid:15)w , ¯mi)} ◦ H(cid:15)21∪ {(H n∪ {(H nw , ¯mi)}(cid:13);w , ¯mi)}(cid:13).Given the fact that in any one of these nodes we have two bisimilar models, one on the left and one on the right, we seethat Spoiler cannot close T . (cid:2)We now define the notion of a path in a model, and, more specially, of an (cid:21)-path in our ladder-like models: intuitively,an (cid:21)-path is a sequence of steps, which leads one from the left bottom point to the left top point, and in which only pointson the left support of the model are visited. In other words, the individual steps in the sequence can only be ‘up’, ‘down’, or‘stay in the current point’. However, if one stays in the current point using the index i, then it would not have been possibleto take a horizontal step using i.Definition 21 (Paths and (cid:21)-paths).• Let w ∈ Wn• Let M = (cid:11)M, R, V (cid:13) be a model over a signature (cid:11) A, I(cid:13). A path π in M is a sequence π of indices π1, π2 . . . , πk such thatthere is a sequence of points p1, . . . , pk+1 in M, for which p1 = p, pk+1 = q, and for any pair of points (pi, pi+1) (i (cid:3) k),we have pi Rπi pi+1. We also say that this path runs from p1 to pk+1. Moreover, the sequence ε = p1π1 p2 . . . pkπk pk+1is called an extended path for π . Note that a path π can give rise to several extended paths ε for π , but an extendedpath over π uniquely determines the path π . If we refer to an (extended) path in a pointed model (M , p), it is alwaysa path that runs from p.Γ (cdΓ )∗ ∪ Wnw , `xn)}. We define the left sup-port `Pn of (M nw , `xn)},w , `xn). In the former case, we define top( `P ) = `y1,and `Pn = {`xn, `yn, `zn, . . . , `x1, `y1, `z1, `z0} in the case that (M nand in the latter case, top( `P ) = `z0. In both cases, bot( `P ) = `xn. Given (M nw , `xn), an (cid:21)-path π over w is a sequence ofindices i = π1, π2, . . . , πk such that there is a sequence of points `p1, `p2, . . . , `pk+1 satisfying { `p1, `p2, . . . , `pk+1} = `P with`p1 = bot( `P ) and `pk+1 = top( `P ), and for every pair of points ( `pi, `pi+1), we have `pi Rπi`pi+1. Moreover, it is not the case,for any i, that `pi Rπiw , `xn) to consist of all the points {`xn, `yn, `zn, . . . , `x2, `y2, `z2, `x1, `y1} in case (M n`pk+1 is called an extended (cid:21)-path for π .(cdΓ )∗ , and the pointed model (M n´pi . In this case, ε = `p1π1 `p2 . . . `pkπkw , `xn) ∈ {(A nw , `xn) ∈ {(A nw , `xn) = (E nw , `xn), (C nw , `xn), (C nw , `xn), (E nNote that a path can connect several points (in particular, since all the accessibility relations are reflexive, every pathconnects every point with itself). The following lemma formalises the fact that in all our models, if an (cid:21)-path contains asubstring xx, then a point must be visited twice. Similarly for (cid:21)-paths containing a substring xyx.Lemma 4. Take any w ∈ Wnthen any extended (cid:21)-path `p1π1 `p2 . . . `pkπk(cdΓ )∗ ∪ WnΓ (cdΓ )∗ , and let π = π1, π2, . . . , πk be an (cid:21)-path over w. If π contains a substring xx or xyx,`pk+1 must have a j with π j = x and either `p j = `p j+1 or `p j = `p j+2.Proof. An (cid:21)-path is a sequence of indices that takes one form the bottom of the left support `xn to the top on that support,only visiting points in `P and never using an index, at `p, that is an index connecting it to ´p. The definition of our modelsis such that, when traversing from bottom to top, every two different occurrences of an index x at the left support, arealways separated by at least two other indices (every two different occurrences of a are separated by a c and a d, everytwo different occurrences of b are separated by c and d, every two occurrences of c are separated by a d and an index from{a, b}, and every two occurrences of b are separated by c and an index from {a, b}). From this the lemma follows directly.More specifically, we have the following cases:1. Suppose πm = πm+1 = x. Then the extended (cid:21)-path contains one of the following sequences:(a) `pmx `pm (the path stutters in `pm, the claim is true with m = j);(b) `pmx `pm+1x `pm with `pm (cid:24)= `pm+1 (the path re-visits `pm, the claim is true with m = j);(c) `pmx `pm+1x `pm+1 with `pm (cid:24)= `pm+1 (the path stutters in `pm+1, the claim is true for j = m + 1);2. Suppose πmπm+1πm+2 = xyx with x (cid:24)= y. Then the extended (cid:21)-path contains one of the following sequences:(a) `pmx `pm (the path stutters in `pm, the claim is true with m = j);(b) `pmx `pm+1 y `pm with `pm (cid:24)= `pm+1 (the path re-visits `pm, the claim is true with m = j);82T. French et al. / Artificial Intelligence 197 (2013) 56–85(c) `pmx `pm+1 y `pm+1 with `pm (cid:24)= `pm+1 (the path stutters in `pm+1, the claim is true for j = m + 1);These are all the possibilities in this case, in particular, it is impossible to have a sequence `pmx `pm+1 y `pm+2x with`pm (cid:24)= `pm+1, `pm+1 (cid:24)= `pm+2 and `pm (cid:24)= `pm+2. (cid:2)We also have the following simple proposition, which says that in any model H nwword w is an (cid:21)-path.∈ An ∪ Bn ∪ Cn ∪ Dn ∪ En ∪ Fn, theProposition 8. Suppose that w ∈ Wn{a, b}. Then the sequence of indices πw = icdjcd . . . cdl (or πw = cdicdj . . . cdl) is an (cid:21)-path over w in the pointed models (A nand (C n(cdΓ )∗ ) and the word w = icdjcd . . . cdl (or w = cdicdj . . . cdl), where i, j, l ∈w , `xn)Γ (cdΓ )∗ (or w ∈ Wnw , `xn) (in the model (E nw , `xn)).Proof. It is obvious that there is a sequence of points, namely `xn, `yn, `zn, . . . , `x2, `y2, `z2, `x1, `y1 (or `xn, `yn, `zn, . . . , `x1, `y1, `z1, `z0)such that the requirements of Definition 21 are fulfilled. (cid:2)Definition 22 (Canonical (cid:21)-paths). For any word w ∈ Wn(cdΓ )∗ , the (cid:21)-path πw defined in Proposition 8 is called thecanonical (cid:21)-path over w. Let π = π1 . . . πk be an (cid:21)-path over w ∈ WnΓ (cdΓ )∗ and let p1, p2, . . . , pk+1 be the points satisfyingDefinition 21. Recall that p1π1 p2, . . . , pkπk pk+1 is called the extended (cid:21)-path over w. If π = πw , then this word is calledthe extended canonical (cid:21)-path. Similarly, we define extended (cid:21)-paths and the extended canonical (cid:21)-path over w ∈ Wn(cdΓ )∗ .Γ (cdΓ )∗ ∪ WnNote that the extended canonical (cid:21)-path is unique, i.e., the point p1 is always `xn, the point p2 is always `yn, the pointAs we said earlier, intuitively, the word w encodes the shortest (cid:21)-path from `xn to `y0 in the case of the models (A nw , `xn)w , `xn). Using Definitions 21 and 22, we can express thisw , `xn) and the shortest (cid:21)-path from `xn to `z0 in the model (E np3 is always `zn etc.and (C nmore formally as follows.Proposition 9. If w ∈ WnWn(cdΓ )∗ , then πw is the shortest (cid:21)-path over w in the model (E nw , `xn).Γ (cdΓ )∗ , then πw is the shortest (cid:21)-path over w in the models (A nw , `xn) and (C nw , `xn) and, similarly, if w ∈Proof. Using Definition 21, it is easy to see that each one of the points `xn, `yn, `zn, . . . , `x2, `y2, `z2, `x1, `y1 (and `z0 in the casew , `xn)) must appear at least once in any extended (cid:21)-path over w. Each one of these points appears exactly once in theof (E nw , `xn) (or in theextended canonical (cid:21)-path πw . Hence, there is no shorter (cid:21)-path over w in the models (A nmodel (E nw , `xn) and (C nw , `xn)). (cid:2)Lemma 5. Every T ∈ T ((cid:11)(H nw , `xn) ◦ (H nw , ´xn)(cid:13)) has a branch B such that I(B) is an (cid:21)-path over w in (H nw , `xn).Proof. As in the proof of Lemma 3, B is constructed inductively. This time, however, the induction is not on n but it is aninductive procedure for specifying B as a branch consisting of points with certain properties. To present the main idea ofthe proof in its full generality, we assume that n > 1, w ∈ Wnw . The casew is E nn = 1 or w ∈ Wnw is one of the models A nw is completely analogous.Γ (cdΓ )∗ and H nw or C n(cdΓ )∗ and H nDuring the construction, certain pointed models (H nw , p) will be declared marked. Once a model has been marked, itw , p) on the leftw , q) on the right, then playing an or-move at η will result in adding at least one node η1 as successor of η thatw , q) on the right. Playing a not-move will result in adding a successor ofremains marked until the end of the game. If we have a node η that contains two marked models, (H nand (H ncontains the marked (H nη that contains the same marked models but this time (H nw , p) on the left and (H nw , q) on the left and (H nLet us construct the desired branch B. Suppose that w = icdjcd . . . cdk, where i, j, k ∈ {a, b}. The first point η0 of B is thew , ´xn) are marked. If some number 0 (cid:3) l of not or or-moves were played first,root of T and both models (H nw , ´xn). The above considerations show that there are nodes η0, . . . , ηl,we “follow” the marked models (H nthat contain them. We add η0, . . . , ηl to B. Since these models satisfy the same propositional symbols, ηl cannot be closedand, therefore, an [r]-move is played. It follows from Proposition 7, that r = i. There are two casesw , `xn), and (H nw , `xn), and (H nw , p) on the right.• (H n• (H nw , `xn) is on the left and (H nw , `xn) is on the right and (H nw , ´xn) is on the right;w , ´xn) is on the left.For each one of these cases, there are two possibilities for playing an [r]-move. We consider these two possibilities forthe first case. The second case follows by symmetry.1. Spoiler has chosen (H nw , ´xn) on the right. This is possible because all the relations in H nfollows immediately that one of the chosen models on the left is (H nadd the node ηl+1 to B;w , including i, are reflexive. Itw , `xn). We declare these two models marked andT. French et al. / Artificial Intelligence 197 (2013) 56–85832. Spoiler has chosen (H nchosen models on the left is (H nw , ´yn) on the right. This is possible because ´yn is an i-successor of ´xn. It follows that one of thew , `yn). These models are declared marked and we add the node ηl+1 to B.Since the marked models in ηl+1 satisfy the same propositional symbols, ηl+1 cannot be closed. Again, we “follow” thenewly marked models to a node where a [i]-move is played.In general,• If a node ηl contains marked models of the form (H nw , ´x j) on the right (or vice versa) and an[r]-move was played at this node then, using Proposition 7, we see that `x j and ´x j are not r-connected. Hence r is eitherd or r ∈ {a, b} and `y j and `x j are r-connected. Therefore, there are not more than three possibilities for the successornode ηl+1.1. ηl+1 contains (H n2. ηl+1 contains (H n3. ηl+1 contains (H nw , `x j) on the left and (H nw , `z j+1) on the left and (H nw , `y j) on the left and (H nw , ´z j+1) on the right (or vice versa) and these models are marked;w , ´y j) on the right (or vice versa) and these models are marked.w , ´x j) on the right (or vice versa) and these models are marked;w , `x j) on the left and (H n• If a node ηl contains marked models of the form (H nw , ´y j) on the right (or vice versa) and an[r]-move was played at this node, then Proposition 7 implies that `y j and ´y j are not r-connected. Hence,j is either cor j ∈ {a, b} and `y j is a j-successor of `xn. As before, there are not more than three possibilities for the successor nodeηl+1.1. ηl+1 contains (H n2. ηl+1 contains (H n3. ηl+1 contains (H nw , ´y j) on the right (or vice versa) and these models are marked;w , ´z j) on the right (or vice versa) and these models are marked;w , `y j) on the left and (H nw , `z j) on the left and (H nw , `x j+1) on the left and (H nw , ´x j+1) on the right (or vice versa) and these models are marked.w , `y j) on the left and (H n• If a node ηl contains marked models of the form (H nw , ´z j) on the right (or vice versa) andan [r]-move was played at this node then Proposition 7 tells us that `z j and ´z j are not r-connected. Therefore, r ∈ {c, d}and, again, there are not more than three possibilities for the successor node ηl+1.1. ηl+1 contains (H n2. ηl+1 contains (H n3. ηl+1 contains (H nw , ´z j) on the right (or vice versa) and these models are marked;w , ´y j) on the right (or vice versa) and these models are marked;w , `z j) on the left and (H nw , `y j) on the left and (H nw , `x j−1) on the left and (H nw , ´x j−1) on the right (or vice versa) and these models are marked.w , `z j) on the left and (H nIt is obvious that every node of B contains a marked pair of one of the following forms• (H n• (H n• (H nw , `x j) on the left and (H nw , `z j) on the left and (H nw , `y j) on the left and (H nw , ´x j) on the right or vice versa;w , ´z j) on the right or vice versa;w , ´y j) on the right or vice versa.Given the construction of the models H ndifferent from the pair (H nThe reader can easily check that I(B) is an (cid:21)-path over w in the model (H nlabelled with [i] contains a marked model of one of the forms (H nw , `y1) on the left and (H nw , we see that no node of T can be closed if it contains a marked pair that isw , ´y1) on the right. It is obvious that B ends with a node of this form.w , `xn). This follows from the fact that every nodew , `x j) or (H nw , `z j) or (H nw , `y j). (cid:2)Since for every n > 0, we have that both WnΓ (cdΓ )∗ and Wn(cdΓ )∗ contain 2n different words, the next lemma is crucial forthe proof of Theorem 4.Lemma 6. For any two words w, w ∈ WnFor any two pointed models (A nw , `xn) and (A nπ (cid:24)= π . Similarly, for any two pointed models (C n(E nw , `xn).Γ (cdΓ )∗ or w, w ∈ Wn(cdΓ )∗ the following holds.w , `xn), if w (cid:24)= w, then for any two (cid:21)-paths π over w and π over w, it is true thatw , `xn) andw , `xn) and (C nw , `xn), and also, similarly for any two pointed models (E nThe proof of Lemma 6 follows the steps below.Step 1. We begin with the observation that for any w ∈ WnΓ (cdΓ )∗ ∪ Wn(cdΓ )∗ , it is true that w does not contain any sub-word of the form xx or xyx, where x, y ∈ {a, b, c, d}. Therefore, the canonical (cid:21)-path πw does not contain twosuccessive indices πk, πk+1 such that πk = πk+1 or three successive indices πk−2, πk−1, πk, such that πk−2 = πk.We now argue that πw is the only (cid:21)-path over w with this property: Suppose π (cid:24)= πw satisfies the sameproperties: it gives rise to some extended (cid:21)-path un = `p1π 1`pm+1. We know that πw is the shortest(cid:21)-path over w, so, since π is different, there is a `pi such that either `pi+1 = `pi , or else `pi+2 = `pi . Consider thefirst `pi in the sequence for which this is the case. We consider two cases.`xn or as `xnπ 1`xn. Since an (cid:21)-path only allows one`xnπ 1 (and hence the path starts as π 1π 1), or as`xnπ 1 (in which case the path starts as π 1π 2π 1). In other words, π does not satisfy the properties westep in `xn, in the first case the extended path will start like `xnπ 1`ynπ 2`xnπ 1assumed.(1) If `p1 is `xn, the extended path starts as either `xnπ 1`p2, . . . , `pkπ m`ynπ 284T. French et al. / Artificial Intelligence 197 (2013) 56–85(2) The second case is that `p (cid:24)= `xn. In that case, the extended path starts as either `p1π 1`p2 . . . `pi−1π i−1or as `p1π 1`pi+1π i+1π i−1 represents a step ‘up’ in the left support: if `pi = `x j then π i−1(depending on w), and if `pi = `z j then π i−1This means that π i−1`piπ i`pi`pi , where all of `p1, `p2, . . . , `pi are different. This implies that the index= d, if `pi = `y j then π i−1 is either a or b= c. Let us assume `pi = `z j for some j (the other cases are similar).`p2 . . . `pi−1π i−1`piπ i= c. Also, note that the only allowed steps from `z j in an (cid:21)-path are by using c or d.(2a) In the case that `pi+1 = `pi = `z j , the sequence π i−1contains a string cc), or π iAgain, it was assumed that π did not contain such a string.= d and π i+1`pi+1π i+1 either satisfies π i= c (in which case π∈ {c, d}, in which case π either contains the string cdc or the string cdd.`piπ i(2b) If `pi+2 = `pi , we obtain the sequence π i−1`pi+2 in the extended (cid:21)-path. We may assume that`pi+1 (cid:24)= `pi (since this was dealt with under (2a)). Since we assume `pi = `z j , and that `pi is the first in the extended`pi+2 must be equal to c`z jd`x j−1d`z j . This`pi+1π i+1path that is visited twice, we have that the sequence π i−1means that π contains we substring dd, which we assumed it not to have.`pi+1π i+1`piπ i`piπ iStep 2. We formulate a rewriting rule as follows.Let an (cid:21)-path π = π1π2 . . . πn over a word w be given. Reading π from left to right, if a substring of the form xx or xyxis encountered, we replace it with x, and continue with the symbols following xx or xyx (if any). Having reached the end ofπ , we go back to the leftmost symbol of the newly obtained word and repeat the procedure. This algorithm terminates if nosubstring of the form xx or xyx is encountered.It is obvious that this algorithm always terminates; moreover it has the following important properties.1. If π is an (cid:21)-path over w, then replacing a substring of the form xx or xyx with x in π results in a new (cid:21)-pathπ1 over w;2. The procedure terminates with an (cid:21)-path π ∗Therefore, using Step 1, we see that π ∗ = πw .over w that does not contain any substring of the form xx or xyx.To see item 1, we use the cases of the proof of Lemma 4. Take an (cid:21)-path π = π1π2 . . . πk over w, and let ε =`p1π1 `p2π2 . . . πk1. Suppose πm = πm+1 = x. Define an extended (cid:21)-path ε(cid:15)`pk+1 be an extended (cid:21)-path for π .as follows:(a) if ε contains a string e = `pmx `pm, then replace e with `pm and call the result ε(cid:15)(b) if ε contains e = `pmx `pm+1x `pm with `pm (cid:24)= `pm+1, replace e with `pmx `pm and call the result ε(cid:15)(c) if ε contains e = `pmx `pm+1x `pm+1 with `pm (cid:24)= `pm+1, replace e with `pmx `pm+1 and call the result ε(cid:15);.2. Suppose πmπm+1πm+2 = xyx with x (cid:24)= y. Define an extended (cid:21)-path ε as follows:(a) if ε contains `pmx `pm suppose first that ε contains the substring e = `pmx `pm y `pmx `pm+3. In this case, replace ewith `pmx `pm+3 and call the result ε(cid:15). This is the only case to consider here, since if ε would have a substringe = `pmx `pm y `pm+2 with `pm (cid:24)= `pm+2, then, given the definition of (cid:21)-path and the definition of words w, it isimpossible to extend e with an x-step (it would take a step that is also horizontally possible);(b) if ε contains e = `pmx `pm+1 y `pm with `pm (cid:24)= `pm+1 replace e with `pm and call the result ε(cid:15)(c) finally, suppose ε contains e = `pmx `pm+1 y `pm+1 with `pm (cid:24)= `pm+1. Since e is to be followed by an x, it mustin ε withbe that the substring in ε is of the form f = `pmx `pm+1 y `pm+1x `pm. Obviously, we can replace f`pmx `pm and call the result ε(cid:15)It should be clear that the extended path ε(cid:15)is exactly π with either xx replaced by x (in case (1)) or xyx replaced by x (in case of (2)).w , `xn) such that there are two (cid:21)-paths π over w andSuppose that there are two pointed models (H nπ over w respectively, for which π = π . We apply the rewriting rule to π and obtain πw . Since π is equal to π ,we see that πw = πw . Hence w = w.thus obtained is an extended (cid:21)-path, and the (cid:21)-path π (cid:15)w , `xn) and (H nthat ε(cid:15)induces;.Step 3.Having established these steps, the proof of Theorem 4 now follows directly, which, for the completeness’ sake, weformulate once more.Theorem 5. Let Σ = (cid:11) A, I(cid:13) be a signature such that I contains at least 4 indices {a, b, c, d} and A contains at least 3 propositionalsymbols {a, b, c}. For any logic L ∈ {[∀Γ ]ML, [∃Γ ]ML, [ϕ]ML} in the signature Σ , it is true that L (cid:2)SUBEXPML.S5w , `xn) ∈ Hn1 satisfies the formula, while each (H nProof. In each case, we use Lemma 1 as a sufficient condition for proving succinctness. The formulae αn in this lemma aredefined in Table 3 by ϑn in case of L = [∀Γ ]ML, as σn in case of [∃Γ ]ML, and as ϕn in case of [ϕ]ML. From Propositions 4and 6, we know that for each of those formulae, and for each n, there are classes of pointed models Hn2 such thateach (H n2 falsifies it, where w is a word over a given alphabet.w , `xn) ◦ (H nw , ´xn)(cid:13)) has a branch B such that I(B) is an (cid:21)-path over wBy Lemma 5 we know that every tree T ∈ T ((cid:11)(H nw , `xn). Since for every two words w and win (H n, the (cid:21)-paths over them are different, and for every n we have 2n many, ´xn)(cid:13)), . . . , T 2n ∈, `xn) ◦ (H nwords, we can apply Theorem 2, the principle of diverging pairs, to all trees T 1 ∈ T ((cid:11)(H nw1w1w2n , ´xn)(cid:13)), to conclude that any game tree T ∈ T ((cid:11)HnT ((cid:11)(H n(cid:13)) has at least 2n different branches. Thisimplies that in order to win the game starting at (cid:11)Hn(cid:13), Spoiler needs at least 2n moves, so, by Theorem 1, every1formula βn in the logic ML equivalent to the given αn has length at least 2n. (cid:2)w2n , `xn) ◦ (H nw , ´xn) ∈ Hn1 and Hn◦ Hn2◦ Hn21(cid:15)T. French et al. / Artificial Intelligence 197 (2013) 56–85854. ConclusionWe presented several succinctness results on three extensions of multimodal logic. Clearly, we left some open questionswhich we think are worthwhile studying. In particular, we do not know whether our bounds on the number of relationsand propositional symbols are optimal or not, i.e., to prove that the logic [ϕ]ML is exponentially more succinct than MLon S5, we needed a signature with at least 4 relation indices and 3 propositional variables, whereas the same result for Kwas achieved with only two relation indices and one propositional letter. Similarly, we needed a signature with 4 relationindices and one propositional variable to prove that [∀Γ ]ML and [∃Γ ]ML are exponentially more succinct than ML on S5,whereas this could be done with only two indices and one propositional variable in the K case.It was proven in [24] that [∀Γ ]ML is exponentially more succinct than [∃Γ ]ML (and vice versa) on K. We conjecture thata similar succinctness result can be obtained with respect to S5. Similarly, it was shown in [15] that [ϕ]ML is exponentiallymore succinct than both [∃Γ ]ML and [∀Γ ]ML on K. Again, we conjecture that the same is true on S5, too. We do not knowwhether one of [∃Γ ]ML or [∀Γ ]ML is exponentially more succinct than [ϕ]ML either on K or S5.On a more general note, some of the currently known succinctness gaps between different logics are conditional oncertain assumptions (be it rather common ones) on computational complexity, e.g., [4,10,12,17]. It remains to be seenwhether Adler–Immerman games or other techniques can be used to eliminate the use of such conjectures on computationalcomplexity in the proofs of the results mentioned above.AcknowledgementsWe are grateful to the anonymous reviewers whose detailed comments and suggestions helped greatly improve thepresentation of our results.References[1] M. Adler, N. Immerman, An n! lower bound on formula size, ACM Transactions on Computational Logic 4 (3) (2003) 296–314.[2] F. Baader, D. Calvanese, D. McGuinness, D. Nardi, P. Patel-Schneider (Eds.), The Description Logic Handbook: Theory, Implementation, and Applications,Cambridge University Press, 2003.[3] P. Blackburn, M. de Rijke, Y. Venema, Modal Logic, Cambridge University Press, 2001.[4] M. Cadoli, F. Donini, P. Liberatore, M. Schaerf, The size of a revised knowledge base, Artificial Intelligence 115 (1) (1999) 25–64.[5] T. Cormen, C. Leiserson, R. Rivest, C. Stein, Introduction to Algorithms, 3 ed., The MIT Press, 2009.[6] R. Fagin, J. Halpern, Y. Moses, M. Vardi, Reasoning About Knowledge, The MIT Press, 1995.[7] S. Figueira, D. Gorín, On the size of shortest modal descriptions, Advances in Modal Logic 8 (2010) 114–132.[8] T. French, W. van der Hoek, P. Iliev, B. Kooi, Succinctness of epistemic languages, in: T. Walsh (Ed.), Proceedings of the 22nd International JointConference on Artificial Intelligence (IJCAI 2011), 2011, pp. 881–886.[9] G. Gargov, S. Passy, T. Tinchev, Modal environment for boolean speculations, in: D. Skordev (Ed.), Proceedings of The Advanced International SummerSchool and Conference on Mathematical Logic and Its Applications, 1987, pp. 480–490.[10] G. Gogic, C. Papadimitriou, B. Selman, H. Kautz, The comparative linguistics of knowledge representation, in: Proceedings of the 9th International JointConference on Artificial Intelligence (IJCAI 1995), 1995, pp. 862–869.[11] R. Goldblatt, Logics of Time and Computation, CSLI Lecture Notes, vol. 7, CSLI, Stanford, CA, 1987 (distributed by Chicago University Press).[12] M. Grohe, N. Schweikardt, Comparing the succinctness of monadic query languages over finite trees, Theoretical Informatics and Applications 38 (4)(2004) 343–373.[13] M. Grohe, N. Schweikardt, The succinctness of first-order logic on linear orders, Logical Methods in Computer Science 1 (2005) 1–25.[14] P. Hinman, Fundamentals of Mathematical Logic, A.K. Peters Ltd., 2005.[15] P. Iliev, W. van der Hoek, Public announcements are exponentially more succinct than everybody knows and somebody knows, 2012, unpublished.[16] F. Laroussinie, N. Markey, P. Schnoebelen, Temporal logic with forgettable past, in: Proceedings of the 17th Annual IEEE Symposium on Logic inComputer Science (LICS 2002), 2002, pp. 383–392.[17] H. Liu, C. Lutz, M. Milicic, F. Wolter, Foundations of instance level updates in expressive description logics, Artificial Intelligence 175 (18) (2011)2170–2197.[18] C. Lutz, Complexity and succinctness of public announcement logic,JointConference on Autonomous Agents and Multiagent Systems (AAMAS 2006), 2006, pp. 137–144, extended version at http://lat.inf.tu-dresden.de/research/reports.html.in: P. Stone, G. Weiss (Eds.), Proceedings of the Fifth International[19] C. Lutz, U. Sattler, F. Wolter, Modal logic and the two-variable fragment, in: L. Fribourg (Ed.), Proceedings of the 15th International Workshop onComputer Science Logic (CSL 2001), 2001, pp. 247–261.[20] N. Markey, Temporal logic with past is exponentially more succinct, Bulletin of the EATCS 79 (2003) 122–128.[21] J.A. Plaza, Logics of public communications, in: M.L. Emrich, M.S. Pfeifer, M. Hadzikadic, Z.W. Ras (Eds.), Proceedings of the 4th International Symposiumon Methodologies for Intelligent Systems: Poster Session Program, Oak Ridge National Laboratory, 1989, pp. 201–216.[22] A. Rabinovich, Succinctness gap between monadic logic and duration calculus, Fundamenta Informaticae 42 (2) (2000) 201–210.[23] B. ten Cate, M. Marx, Navigational xpath: calculus and algebra, SIGMOD Record, Database Principles Column 36 (2) (2007) 19–26.[24] W. van der Hoek, P. Iliev, B. Kooi, On the relative succinctness of two extensions by definitions of multimodal logic, in: S. Barry Cooper, A. Dawar,B. Löwe (Eds.), Proceedings of the Turing Centenary Conference and Eighth Conference on Computability in Europe (CiE 2012), 2012, pp. 323–333.[25] H. van Ditmarsch, W. van der Hoek, B. Kooi, Dynamic Epistemic Logic, Springer, 2007.