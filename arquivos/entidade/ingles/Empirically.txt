Artificial Intelligence 105 (1998) 47-75 Artificial Intelligence Empirically-derived estimates of the complexity of labeling line drawings of polyhedral scenes P. Parodi *, R. Lancewicki, A. Vijh, J.K. Tsotsos University of Toronto, Department of Computer Science, 6 King’s College Road, Room 283, Toronto, Ontario, Canada MS 3H5 Received 10 September 1996; received in revised form 16 December 1997 Abstract Several results have been obtained in the past about the complexity of understanding line drawings scenes. Kirousis and Papadimitriou (1988) have shown that the problem of labeling line of polyhedral drawings of trihedral scenes is NP-complete. The human brain, however, seems to grasp at a glance the 3D structure associated with a line drawing. A possible explanation of this discrepancy, offered is that the worst-case complexity does not reflect the real by Kirousis and Papadimitriou difficulty of labeling line drawings, which might be far less in the average or in “typical” cases. However, no statistical analysis has ever been carried out to test this conjecture. themselves, The core of this paper is an algorithm for the generation of random instances of polyhedral scenes. Random instances of line drawings are then obtained as perspective projections of these scenes, and can be used as an input to standard labeling algorithms so as to derive experimental estimates of the complexity of these algorithms. The results indicate that the median-case complexity is linear in the number of junctions. This substantiates instances of line drawings are easy to label, and may help explain the ease by which the brain is able to solve the problem. 0 1998 Elsevier Science B.V. All rights reserved. the conjecture that “typical” Keywords: Line drawings; Computational complexity; Random polyhedral scenes 1. Introduction The problem of understanding the three-dimensional structure of an object from a two-dimensional concise in computer vision and artificial attempts to tackle the problem description (e.g., a line drawing) of it has intrigued intelligence since from a computational the early seventies, when standpoint were independently researchers the first put * Corresponding author. Email: parodi@sissa.it. 00043702/98/$ PII: SOOO4-3702(98)00077-O - see front matter 0 1998 Elsevier Science B.V. All rights reserved 48 I? Parodi et al. /Art&ial Intelligence 105 (1998) 47-75 to represent for a line drawing forward by Huffman condition arrangement of polyhedral objects was labelability, that is the consistent assignment segments of the line drawing of a label (+, -, +, convexity, concavity, occlusion. The work of Huffman and Clowes was extended directions and sufticient condition that, given a labeled line drawing, instance of Linear Programming. [lo] and Clowes [4]. They both showed that an important necessary the perspective or planar projection of an actual to the such 3D properties as in several [30-321 that a necessary for the realizability of a line drawing was found. Sugihara showed into an [ 11,16,29,34], but it was not until the work of Sugihara problem could be translated the realizability describing t) algorithm that there is an efficient line drawings, at least qualitatively the 3D structure of a scene from a single More recently, several efforts have been concentrated on complexity even for the simple case of trihedral, solid scenes. This unexpected issues. As our brain image with is very efficient at reconstructing (i.e., no texture, color or shading, one might be led to conclude (by labeling that interprets polynomial-time) [ 131, however, have proved that this is unlikely their segments). Kirousis and Papadimitriou that both the labeling problem and the realizability problem are to be the case, by showing result Af?-complete in order to find special cases for which the labeling problem has stimulated much research solvable. In the same paper [ 131, Kirousis and Papadimitriou proved that was polynomially the labeling problem has polynomial for line drawings of Legoland scenes, i.e., scenes made of objects whose 3D edges can only have one of three possible orthogonal in [23] to show that once the location of the vanishing directions. This result was extended the labeling problem points of the line drawing of a trihedral, is known, becomes that the brain may exploit of a scene from a line drawing. geometrical to break It was also shown [21] that the information the NP-completeness drastically reduces the number of legal labelings associated with a line drawing. line drawing of Origami scenes, although this information in order to find a 3D reconstruction time. These results suggests on vanishing points is not sufficient in polynomial solid scene complexity regularities of labeling solvable between for the discrepancy information which the NP-completeness the brain uses geometric Thus, a possible explanation result in natural might be that scenes. Another possible explanation, which was offered by Kirousis and Papadimitriou is that the distribution of natural scenes might be such that the average-case themselves, for the set of line drawings extracted from real scenes is polynomial, unlike the complexity exists also. For a related visual complexity for general visual search and that visual of unbounded [33] proved problem, search becomes linear in the image size when a target is used to guide the matching process. The claim there is that the brain can optimize visual processing by using known appearance of objects and thus for the set of well-known objects, visual processing line drawings. A third possibility the NP-completeness is efficient. is often found As it is well known for other problems instances of a problem are often elusive and can only be found with a careful some characteristic parameters. Furthermore, heuristics have been presented-such relaxation procedure devised by Waltz [34]-which search methods and allegedly provide an efficient way to deal with line drawing (such as SAT [19,25] and CSP [3,9,35]), hard tuning of as the can be used in conjunction with tree- The objective of this paper is to provide a method line drawings with a useful distribution, to the complexity of understanding to generate so as to shed light on several questions random labeling. instances of related scenes: what is the average- images of polyhedral I? Parodi et al. /Art$cial Intelligence 105 (1998) 47-7.5 49 techniques tree-search? More generally, our line drawings by relaxation before performing satisfaction complexity of labeling? How much do we gain techniques which achieve some kind are the available techniques competitive with the performances of the the general notion Is this still true when case (either mean-case or median-case) by pre-processing of local consistency computational brain? And can these performances be assessed more precisely, beyond that images of natural scenes are perceived at a glance by humans? scenes display a more random character? to the is organized line drawings. random labeling problem. Section 3 addresses scenes; line A method drawings are obtained by projecting image plane. These line drawings are then used in Section 4 to estimate the complexity of some tree-search methods and other heuristics. for labeling Section 5 draws the conclusions previous works in line drawing analysis. the problem of generating instances of polyhedral these scenes on an arbitrary line drawings and to assess the efficiency of relaxation as follows. Section 2 provides a general of the work and discusses the relation of this paper to the random introduction to generate The paper is devised random 2. The labeling problem The first mathematical results about the interpretation of line drawings date back to [lo] and Clowes [4], who independently an important for the realizability of a line drawing as the 2D projection introduced (lubelability) the works of Huffman necessary condition of a polyhedral Labeling scene. a line drawing means assigning the is the properties of the corresponding projection of a visible convex edge, “-” means that it is the projection of a visible concave edge, and “-+” means that it is the projection of a convex edge such that only one face (the one at the right of the arrow) is visible. 3D edge. The label “+” means to every segment describing that the segment a label see, for example, Huffman and Clowes focused on the case of trihedral scenes (exactly 3 faces meeting that shapes (Y, E, L, T) are possible and that only a few as the (see of a few different of labels are allowed at junctions form the so-called junction dictionary at every vertex; only junctions combinations projection of 3D vertices; Fig. 1 (B)). the line drawing of Fig. these legal labelings to be realizable if they were l(A)). They found A line drawing is said to be labelable iff a label can be assigned to every segment so that every junction is labeled according to this dictionary. in the past for labeling Several methods have been proposed man [lo] and Clowes [4] proposed a reduction algorithm which reported good average running segments). The algorithm achieves local consistency junctions all legal labelings of the junction which is compatible with it. Repeat this procedure until no further progress can be made. To label a line drawing, and then achieve global consistency by tree searching with depth-first backtracking. a line drawing. Huff- to SAT. Waltz [34] devised a filtering in the number of time (roughly rule out for which there is no labeling of the neighbor first achieve local consistency in this way: given a junction, linear 50 t! Parodi et al. /Artijicial Intelligence IO5 (1998) 47-75 A Fig. 1. (A) An example of a trihedral scene. (B) The Huffman-Clowes vertices. catalogue of legal labelings for trihedral The work on line drawings has stimulated (CSP; Satisfaction Problem the analysis of a more general problem, see Mackworth and Freuder [15] for a the Constraint retrospective): we have a set of variables X1, . . . , X, each of which may assume a finite set of values, and there is a set of constraints of the kind “value a of variable Xi is not compatible with value b of variable Xj”. The problem for each variable complete. Labeling problem and is called, in this framework, “arc consistency”. is to find a set of assignments that satisfies all constraints. This problem has been shown to be NP- is a special case of CSP. Waltz’ procedure can be used to simplify this algorithm used by Waltz takes indeed The reason why the algorithm performed with linear average running time is that the arc time in the number of segments linear [14]), and it is often the case that at the end of the relaxation procedure labeled, at least in the trihedral world with is worst- consistency (see Mackworth only a few segments are not already uniquely cracks and shadows studied by Waltz. Even this approach case exponential. to labeling, however, The CSP approach is now the standard one used for labeling to line drawings of polyhedral applied (see Malik [ 161). Although meaningful the constraints and efficient sequential and parallel algorithms trihedral world In this paper we will use both the basic as well as piecewise cases the constraints this approach is in general worst-case exponential, are of a kind which allows unique propagation line drawings. smooth curved It has been line objects in several rules for (Kirousis [12]). introduced by Huffman and less Clowes and a slight extension of it which is both more realistic and makes the problem trivial in the case of random line drawings. l? Parodi et al. /Art$cial Intelligence 105 (1998) 47-75 interpretation of the only T-junction Fig. 2. (A) The natural vertex of the polyhedron. This interpretation object with an AST-junction incident segments). This object does not have an interpretation only includes junctions of degree 2 and 3. (C) The dictionary of the legal labelings Both (A) and (B) can be labeled according in this image is not as an occlusion but as an actual table of Fig. 1 (B). (B) An (the one with four trihedral world, which tribedral scenes. (the one with six incident segments) and with a cl/-junction is not allowed by the Huffmar-Clowes in the HuffmanClowes to this catalogue. for extended It will be called extended trihedral world and will include all objects which are (i) solid (ii) opaque (iii) such that only three planes meet at a vertex. To this definition the Huffman- Clowes world adds that only three planar faces meet at a vertex. This unduly eliminates common objects like the one depicted in Fig. 2(A) and the one depicted in Fig. 2(B). The T-junction in Fig. 2(A) is the projection of a 3D vertex at which three different planes and four different planar faces (two of which are parallel) meet. The complete dictionary there is also a 6-degree that there are no 5-degree junctions. junction, for this world is given in Fig. 2(C), where it can be noticed that [l 11). Also notice that we will call AST (after Kanade Since a line drawing of an extended trihedral scene can now be defined to be labelable iff it is possible to assign a label to every segment so that all junctions to Fig. 2(C), it is maybe useful to point out that the NP-completeness Papadimitriou [ 131 also applies to this case: are labeled according result of Kirousis and Proposition 1. It is NP-complete to determine whether a line drawing is labelable according to the extended Hufman-Clowes table of Fig. 2(C). Proof. First, notice (BTW) still holds that the NP-completeness if the set of the possible proof in [ 131 for the basic trihedral world to labelings for a T-junction is extended 52 P Parodi et al. /Art&ial Intelligence 105 (1998) 47-75 in the extended used in the proof do not make use of the fact that the head-segments include all labelings permitted the components a T-junction must labeled as an arrow leaving call MTW (modified this scheme. Secondly, notice that MTW is the special case of ETW where no four-degree junctions and six-degree junctions also NP-complete by restriction this kind of reduction). trihedral world (ETW). This is because of the foot of the T on the left side. Let us to appear. Therefore, since MTW is NP-complete, ETW is [7] for a more detailed explanation of trihedral world) the problem of labeling a line drawing according (see, for example, q 3. Line drawings of random instances of scenes to explore the average-case complexity. From a theoretical the worst-case complexity of labeling In the previous section we have discussed line the structure of the labeling problem by drawings. We are now going further this is an extremely studying standpoint, difficult problem. It is arguably more feasible to tackle it experimentally large samples of instances of the labeling problem and performing a statistical analysis on these samples so as to extract useful statistics such as the mean, the median, and the estimated errors on these quantities as a function of the size of the line drawing. In order to do so, we need a method to generate random by producing instances of line drawings. are a very special case of planar graphs. Random line drawings drawings of scenes from the basic trihedral world of Huffman and Clowes, viewed as embeddings nodes can only have two or three incident segments. There exist several methods which generate of planar graphs such that all arcs are straight random graphs according In the case of line they can be line segments and to a uniform the distribution. However, no method has so far been exhibited probability same result for the special case of planar graphs. The even harder problem of generating them so that they can be drawn on the plane by means of straight lines is beyond the scope of this paper. that achieves that the labeling problem to the arcs of a graph so that certain distribution. Another possibility, which of labeling is perhaps more A possible way out is to analyze the complexity planar graphs with is interesting, is essentially combinatorial. Proper are a nonuniform suggested by the observation labels must be assigned the specific junction constraints. satisfied, and geometry only enters the picture in defining the case in which the problems of embedding It seems therefore meaningful is kept. The problem of labeling a line are ignored and only the combinatorial drawing the arcs of a random graph whose nodes have degree two or three and whose 3-degree nodes are classified at random as T, Y, or E. that random planar graphs with a specified degree sequence cart be It is to be noticed generated with uniform distribution. fashion, we can generate random graphs having the same combinatorial properties as the line drawings of extended trihedral scenes, with nodes of degree 2,3,4, or 6. structure is replaced with the problem of labeling In a completely to analyze constraints analogous junction This analysis, however, leads to rather unsatisfactory results: most of the line drawings generated (e.g., pairwise in this fashion have local inconsistencies inconsistent junctions) are eliminated; even if the most trivial inconsistencies the average-case as a consequence, t? Parodi et al. /Art$cial Intelligence IO5 (1998) 47-75 53 remains complexity increase. A more detailed discussion of the experiments in [22]. roughly constant as the number of junctions of the line drawings showing these results can be found The results on the complexity of labeling random graphs with the same combinatorial in give insight as an abstract combinatorial line drawings which are known scenes. These line drawings are labelable by definition; properties as the line drawings we are interested the labeling problem considered more relevant problem of labeling of polyhedral is not a decision problem anymore, but a search problem: an actual solution this section we adopt the following approach to the generation of random first, we will construct perspective projections of these scenes to obtain instances of line drawings. instances of polyhedral random to be the projection the labeling problem In is required. line drawings: scenes; secondly, we will construct in the best of cases on problem but not on the random to generate the random the properties Before describing instances of polygons (Section 3.2), so as to prepare scene generator, we briefly discuss that this generator should possess (Section 3.1). We then describe a simpler algorithm, which generates for trihedral scenes from the extended the description of the algorithm to which Section 3.3 is devoted. trihedral world and Section 3.4 mentions (angle, length, location) of edges and vertices of random polyhedral scenes. Section 3.5 describes how a line drawing can be obtained as a projection of a random scene. Section 3.6 shows some examples of line drawings constructed by this method. Section 3.7 shows how this method can be modified so as to generate random (also called Manhattan, or orthohedral) random line drawings of these scenes, some facts about the distribution of some properties instances of Legoland the ground scenes. 3.1. Properties of a good random scenes generator An ideal algorithm A for the generation of random trihedral scenes should have the following properties: (a) completeness: by A, every possible polyhedron P (or set of polyhedra) can be generated d; (b) uniformity: all possible polyhedra appear with the same probability; (c) polynomial polynomial complexity: in the number of vertices of the polyhedron. the cost of generating a random polyhedron should be Property (a) is a minimal requirement for any procedure aiming at generating random scenes. It is analogous and M be able to generate any number to require that a random generator of integer numbers between 1 in that range with nonzero probability. every Property integer number between 1 and M is equally (b) is trickier. It is clear what “uniformity” means for a generator of random to occur. It is not for generators of that on our needs. As to polyhedra, numbers: obvious, however, how to generalize more complex objects, such as polyhedra. Work on random graphs [2,20] suggests many different definitions may be adequate depending it is first of all necessary generated, think of generating clear what features we are supposed to limit the region of space into which the polyhedra must be limiting also their size. We cannot do without that more than we can it is not to extract to check against randomness. Some obvious random integer numbers with no limitations of range. Secondly, likely to define uniformity this property therefore 54 t? Parodi et al. /Artz$cial Intelligence 105 (1998) 47-75 are that each direction for the planar faces should be equally requirements likely, that the length of the edges and the areas of the planar faces should have a wide spectrum of values and so on, but these are merely necessary conditions. See Section 3.4 for some additional comments and a sketchy presentation of some properties of our random scenes generator. It is very general should be noted that this difficulty with generating useful random [ 191 for and affects many other problems in AI, such as SAT and CSP (see, for example, instances If this is satisfied, within is TS (n) same time is, it terminates than the successfully time E of the is given the time TS (n) (n)) to of the or it aborted one successful 1 = -T,(n) p(n) 1 -TS(n), pmin Vn. 3.2. Generating random instances of polygons The description of the algorithm for generating if prefaced by the description that of generating two dimensions, describes a way of generating random closed sequence of pairwise adjacent straight line segments such that: of the algorithm which solves instances of polygons. A ‘polygon’ random namely random scenes will perhaps be clearer in instances of polygons. This section is defined as a the analogous problem (i) There are exactly two incident segments (ii) Segments never intersect unless at their endpoints. That is, they do not cross or for every vertex of the polygon. touch one another and they do not overlap. The case of two segments which cross each other and that of vertices with more than two incident segments will both be referred to as knots. For some applications it may be useful to include polygons with polygonal holes in the definition. That is easily achieved by allowing more than one closed sequence. We must that these sequences do not intersect, and that there exists a sequence also add the condition which encircles all the others. Polygons inside polygonal holes are admitted but they are not considered part of the polygon within which they are enclosed. A possible strategy to generate random instances of polygons of ‘size’ n, or rather sets of polygons, is the following: (1) Choose the support S of the generating 2D plane where the polygon introduced among the directions radius M: algorittm, is bound to lie. So that distortions of uniformity that is the closed region of the are not in space, the support region S should be a circle of S := {(x, y) E R2 1 x2 y2 < F! Parodi et al. /Artl$cial Intelligence 105 (1998) 47-75 55 Fig. 3. (A) The support region and a certain number of lines drawn at random. (B) The graph after the intersection points falling outside of the support S have been removed, along with the edges incidents to them. (C) Filling elementary polygons at random may cause the creation of knots. (D) The polygon after the elimination of the knot. (2) Draw lines on at random plane at (Fig. 3(A)). by choosing points (xi, yi) (i = 1, . . , n) inside the support region, and . . , n). The angle 0; at random can be by choosing uniformly gives the orientation of line ri with respect to the x-axis of a Cartesian coordinate system arbitrarily chosen. It will then be possible to write the equations of the lines as rz angles (9, E [O, n) (i = 1, (3) (4) sin&(x-xi)+cos&(y-yi)=O, i=l,...,n (1) line). region and the possible angles. We must that 8 = 0 yields a horizontal to discretize both the support (observe We need therefore choose: (a) a quantity 61 such that xi = ni61, yi = mi81 for some integers ni and mi, and (b) a quantity 68 such that @ = ki60 for some integer ki . The value of 61 and 68 should be smaller and smaller as n increases, so as to prevent three different lines from meeting at the same point (see next step). Compute all the intersection points ri n rj of the lines ri and rj created in step (2) (the maximum is n(n - 1)/2). The discretization of the grid should be tine enough as to prevent two intersection points from coinciding. If this should happen, however, the construction The computation of the intersection points takes 0(n2) steps where n is the number of lines. For every line, order all the intersection points that belong to it by fixing an arbitrary direction on the line. Construct the graph such that: (i) its nodes are all the intersection points the support region (all the other number of intersection points not at infinity is aborted [22]. inside points will be discarded), and (ii) there is an arc between two nodes iff the corresponding intersection points are adjacent to each other in one of the lines ri (see Fig. 3(B)). This graph is planar by construction, in the specific embedding where the nodes occupy the same location in the 2D plane as the intersections points. In practice, this simply means that our graph is the collection of line segments and points inside the support region enhanced by an explicit graph structure. The construction of the graph takes O(n*> steps where n is the number of lines. and we are interested 56 (5) (6) R Parodi et al. /Arhjicial Intelligence 105 (1998) 47-75 techniques Find all the elementary polygons of the planar graph constructed can be done by standard the graphs, which is of order O(n2) where n is the number of generated find the outer boundary of the graph: this will be called the outerpolygon. This step, too, takes time 0(n2), where n polygons in time proportional that respects in step (4). This to the number of nodes of lines. Also the section is a random instance polygon, or of a set of polygons. It is understood adjacent elementary polygons are included polygon resulting construction iff it is included removed. We will say that an elementary polygons at the general from the presence knots. Many strategies simple strategy: (a) Fill each p = l/2). generate collections adopted to this end. We have chosen polygons with no the following ni (i = 1, . . . , Npol) with probability p (we have chosen (b) In the collection of elementary polygons thus constructed, which will be called P, it may happen that four pairwise collinear segments meet at a point, forming a knot: see, for example, Fig. 3(C). Therefore, once P all to detect the presence of knots. vertices of P are traversed is constructed, it is easy to propagate two filled and two unfilled polygons. Once knots have been detected, they can be eliminated as follows. Notice that each knot ’ We fill one of the two unfilled polygons at in the same way. the addition of to check to fill is aborted. This happens and is less is divides random. This may cause other knots to form, and they must be eliminated However, this information an elementary polygon has caused the creation of other knots. It is not necessary the whole structure again after the elimination elementary polygons so as to eliminate when both the unfilled regions meeting and less likely as the number of generating shown in Fig. 4. all knots, in the knot are part of the background, lines increases. An example of this situation of a single knot. If it is not possible and to ascertain whether the procedure If the procedure terminates successfully, the polygon (or the set of polygons) is defined as P’ = P U {n such that rr is filled by the knot-rejection procedure}. The filling-in procedure and the knot-rejection An example of output is given in Fig. 3(D). procedure take time O(n2). that the worst-case complexity of CompEexity. By summing all contributions, we obtain the algorithm described lines. O(n2) is the time that it takes to generate a random polygon or to abort the procedure. There instance of is also experimental is O(n2) where IZ is the number of generating time to generate a successful that the expected in steps (l)-(6) evidence I This is tree if the knot does not lie on the boundary. That case, however, is simpler than the general case: there is a single unfilled polygon, which must be filled to remove the knot. P Parodi et al. /Arr$cial Intelligence IO5 (I 998) 47-75 57 Fig. 4. In this simple example, step (6a), a knot is formed, and the knot cannot be removed because knot both belong to the background. there are only two elementary polygons. If both of them happen to be filled after the two unfilled regions which meet at the random polygon of Section 3.3). is 0(n2> (a more detailed discussion on this point can be found at the end Is the algorithm for generating random instances of polygons described above complete and uniform? The completeness question can easily be answered by the following Proposition 2. The procedure to generate random instances ofpolygons described (l)-(6) is complete. in steps and we will call the lines containing one simply has to prove that, given an arbitrary polygon P that the procedure described above generates P as an output. its edges the target is a circle the n random that these lines coincide with the target lines. lines do coincide with the target lines. Let lines. Proof. To prove completeness, with n edges, it is possible We will call P the targetpolygon lines. Suppose that the support region we use for generating of radius M capable of containing lines of step (2), there is a finite probability Assume us now fill each elementary polygon of the tessellation produced by the generated Once more there is a finite probability either at the first attempt or after the knot-rejection proof. (See [22] for a more detailed proof including probability of reproducing procedure. This concludes our sketchy on the the target polygon which takes into account discretization.) the target polygon. When we generate that such filling will reproduce that the randomly generated estimation of a lower-bound the random polygons the target polygon- therefore q The uniformity question is far more delicate to answer. We are unable to prove that every likely to occur. In thinkable polygon whose vertices are inside the support region is equally order to do so, one should be able first of all to provide an appropriate model for polygons, that should be distributed uniformly. Different specifying what are exactly choices lead to different distributions. There are some quantities which should certainly be distributed uniformly, would maybe be more appropriate such as the tilt angle of each edge of the polygon, whereas that the length of the edges be distributed the quantities as l/l”, it 58 l? Pamdi et al. /Art$cial Intelligence 105 (1998) 47-75 so that the number of edges as a function of length keeps its form over different scales; alternatively, one might accept a world in which edge lengths are distributed exponentially, line process (see [ 18,281 and the discussion as when considering in Section 3.4). This being the case, we might be content with the completeness property of polygons has good distribution with the additional properties, distributed according that is, that a number of selected quantities to a reasonable probability distribution. such as angles and lengths be intersections of a Poisson that the distribution requirement 3.3. Generating random instances of polyhedral scenes This section describes a way to generate random trihedral world defined all objects which obey these requirements: in Section 2. We recall that the extended instances of scenes from the extended trihedral world includes (i) they are solid, i.e., there are no hanging edges or faces; (ii) they are opaque; (iii) exactly three planes meet at a vertex; (iv) (v) there are no knots, there are no isolated contact edges; exactly two planar faces meet at every edge; i.e., isolated contact points between different portions of the scene. The definition above includes The algorithm which generates the possibility of having polyhedra with polyhedral holes. to that instances of polygons. The number n is related to the number of instances of scenes of ‘size’ n is similar random which generates vertices, edges and planar faces of the polyhedral random scene. (1) (2) (3) the support S of the scenes generator, that is the closed region of the 3D the polyhedra must be contained. So that distortions of uniformity among the directions in space, the support region S should be Choose space where are not introduced a sphere of radius M: S:={(X,Y,Z)ERsI x*+y*+&M*). in the 3D space at random. To do this, we (a) choose uniformly at Pick n planes random n points Pi = (xi, yi , zi) inside the support region; (b) choose uniformly at random n unit vectors iii. Details on the generation of the Pi’s and the iii’s, dealing with discretization issues, can be found in [22]. The equations of the planes ~1, . . . , pn will then be written as and precision n’i . (P - Pi) =O, i = 1, . . .,n. (2) and pk created in step (2). * Discard the n random planes is O(n). points pi f? pj The complexity of generating Compute all the intersection pj, support region. As in the 2D case, discretization two intersection construction The computation of the intersection points takes 0(n3) steps where n is the number of planes. f? pk of triplets of the pkCti% pi, that lie outside of the to prevent the that happens, however, point is aborted. should be fine enough from collapsing those points together-if 2 The maximum number of intersection points not at infinity is n(n - l)(n - 2)/6. P. Parodi et al. /ArtiJcial Intelligence IOS (1998) 47-75 59 (4) Compute all the intersection step (2). For each line rij, consider lines rij = pi n pj of the planes pi, pj created in the set of intersection points found in step (3) which belong to rij, and order them by assigning an arbitrary direction on rij. This takes time O(n3) where iz is the number of planes. (5) Construct the graph such that: (i) its nodes are all the intersection points inside the support region; (ii) there is an arc between two nodes iff the corresponding intersection points are in 3D space as the intersections points pi f3 pj fl pk _ to each other in one of the lines pi f~ pj. in the specific embedding of the graph in 3D space in which the this simply means that our graph is the collection of line segments and adjacent We are interested nodes occupy the same location In practice, points inside the support region enhanced by an explicit graph structure. This graph is in general not planar, but can be viewed as a collection of n planar in the 3D graphs on II different planes. These planar graphs are interconnected: space embedding associated specified above, the graphs Gi and Gj, respectively, lying on the line with the two planes pi and pj share all the intersections pi n pj . This structure than that of a planar graph but it will be useful in subsequent The number of nodes of the graph and the number of arcs are of order O(n3), where of the II is the number of planes generated graph, too, takes time O(n3). (6) For every plane pi independently, is more complicated steps of the algorithm. in step (2). Therefore, the construction points in step (4). A subset of these polygons will correspond find all the elementary polygons of the planar to the that we are constructing. This takes time 0(n3) where n is graph constructed faces of the polyhedra the number of planes. (7) Find all the elementary polyhedra of the graph constructed the standard time proportional techniques to find elementary in step (4). This can in planar to the number of nodes of the graph. Before the following polyhedra, we make regions the procedure to find elementary be done by mimicking graphs, and requires sketching observation. Observation. Each polygon found in step (6) is on the boundary of two different elementary polyhedra, unless it lies on the outer hull containing all elementary in which case it belongs to a single elementary polyhedron. We assume polyhedra, that the unit normal vector of a face of a polyhedron points inside the polyhedron itself. Therefore, given a polygon ni, there are two unit normal vectors Zi, iii = -iii associated with it, each of which correspond to a different elementary polyhedron. The procedure to find the elementary polyhedra is as follows: l We construct the graph such that: (i) its nodes are the pairs (ri, two unit vectors, and iii), where ni is a planar face and $ is one of its (ii) there is an arc between and node (nj , iij) iff (a) there exists 3D edge ek to both ni 60 I! Parodi et al. /Artijicial Intelligence 105 (1998) 47-75 (b) by rotating xi around t?k according to the direction of n’i , iii being viewed force applied to a point in the inside 3 of xi, the first planar as a pulling face which is met is nj. (8) outer hull, i.e., the boundary of the polyhedron (ni, the graph and finding iii) such that a’i points its connected components in fact, to the into the complexity in step (2). all the elementary polyhedra. The outer hull corresponds, includes all nodes component which containing connected empty space. The complexity of constructing is O(n, + n,), where IZ~ is the number of planar faces and n, is the number of edges. Since both n, and ne are of order O(N), where N is the number of intersection of this step is 0(n3), where R is the number of planes points, generated Every collection of elementary polyhedra beginning of this section is a random polyhedra are included adjacent elementary they share is removed. We will say that an elementary polyhedron included may suffer in general a special fill all the elementary of (b) knots, property polyhedra, introduced that is able to generate collections of elementary polyhedra with no knots and no X’s. To this end, we have chosen the following, (a) Fill each polyhedron Di (i = 1, since the random generator would not have the completeness in Section 3.1. We therefore need a complete procedure from the presence of (a) X’s, i.e., isolated contact edges of faces meeting at an edge, and stated at the that when two the planar face that isJiZZed iff it is i.e., isolated contact points. Also, we cannot type, with four pairwise collinear planar trihedral scene. It is understood If we fill polyhedra at random, that respects the assumptions the resulting construction . , NpOl) with probability p (we chose p = in the collection, in the collection. simple strategy: l/2). polyhedra (b) The set of elementary is not necessarily undesirable geometrical constructions are likely to appear: - four planes, pairwise coplanar, meeting at an edge (X’s); - a polyhedron nor a proper polyhedral isolated contact points (knots). thus constructed, which will be called P, scene. Two types of Therefore, once P is constructed, we have to check for these irregular constructions. This can be done immediately by traversing all edges to check whether they are the crossing edges of an X, and all the vertices to check whether they are knots. Once X’s and knots have been detected, that the crossing edge divides In case there are two unfilled polyhedra, we fill one of them at random; they can be eliminated as follows: as for the two filled polyhedra and at most two unfilled X’s, notice polyhedra. if there is only one unfilled polyhedron, we fill it. This may cause other X’s to form, which must be eliminated and to ascertain whether the addition of an elementary polyhedron has caused the creation of in the same fashion. However, it is easy to propagate this information 3 This is not ambiguous. The elementary polyhedra are all convex by construction, and therefore all points in the inside of ni lie on the same side of ek P. Pamdi et al. /Artificial Intelligence 105 (1998) 47-75 61 Table 1 The percentage the knot- and X-rejection scenes due procedure, as a function of the number of planes. For each different number of planes a sample of 100 scenes was produced of aborted to Number of planes Aborted 10 33% 15 23% 20 7% 25 4% 30 0% other X’s It is not necessary single X. We proceed analogously with knots: we pick one polyhedron the ones that meet at the vertex, and we fill it. This creates an X, which is eliminated explained above. Notably, the two procedures are intertwined, X might cause the appearance of knots and vice versa. If it is not possible is aborted. polyhedra so as to eliminate all knots and X’s, the procedure successfully, we can define the new scene to check the whole structure again after the elimination of a at random among as of an since the elimination to fill elementary If the procedure terminates P’ = P U { I7 such that n is filled by the X- and knot-rejection procedure]. The filling-in procedure and the knot- and X-rejection procedure take time 0(n3). that is bounded to terminate in steps (l)-(8) it takes either is the number of steps or to abort it. To show that 0(n3) By summing over all contributions we obtain that the worst-case complexity is 0(n3), where n is the number of generating the procedure Complexity. of the algorithm described planes. This successfully instance, we also need to show that the probability successful aborted from below by a number different number of planes (see Section 3.1). We have estimated frequency of abortive instances Observe that the percentage of aborted scenes decreases as the number of planes increases, that there as expected in exists a lower bound on the probability scenes with 10 planes or more) and we can state that the expected time is 0(n3). time to generate a is not of the the for different values of n. The results are reported in Table 1. there is strong experimental (around 100 - 33 = 67% if we are interested that the procedure from zero and independent this probability by measuring (see Section 3.2). Therefore is also the expected evidence Analogously to the 2D case, we can state the following Proposition 3. The procedure complete. to generate random polyhedra described in steps (l)-(8) is Proof. The proof proceeds as in the 2D case: it is shown that given a polyhedron polyhedral steps (l)-(8), with finite probability. scene) it is possible for it to be the output of the random generator described q (or a in 3.4. Distribution properties So far we have proved is complete and we have given experimental complexity. A good generator, however, should have the uniformity property as well, that is, all possible to occur. As we have previously polyhedral instances of scenes that it has expected polynomial scenes should have the same probability that our generator of random evidence 62 l? Parodi et al. /Artificial Intelligence 105 (1998) 47-75 it is not clear what uniform means when discussed, however, polyhedral scenes. Nonetheless, geometric elements of our random generator not go into the details of this analysis here limiting ourselves (see to the set of of several (e.g., vertices, edges, planar faces). We do to quoting a few results referred the distribution it is interesting to analyze is line drawings can theoretically not uniform. Uniformity of the lengths of the edges-which of the directions of the edges of the generated [22] for more details): The distribution uniform, as expected. go from 0 to The distribution is not expected. An the diameter of the support region-is analysis of our data reveals that the distribution is well fitted by a function of the form eCpa’) with o - 5.6 x 10m4. This is consistent with the distribution of edge lengths for the intersections line process in a 2D space (i.e., the process formed lines in the plane), which gives rise to a Poisson process on by randomly drawing each line, and therefore to an exponential distribution of edge lengths (see Miles [ 181, Stoyan et al. [28]). The density of vertices except close to the boundary where there are fewer possible terminate more or less linearly as the distance up to about 85% of the radius, where the density starts falling more steepily. to be more or less uniform, lengths of edges which results show that the density of vertices decreases from the center of the support region increases, in the support region is expected into it. The experimental of a Poisson l l 0 3.5. The line drawing For our experiments on complexity we are interested line drawings of instances of scenes rather than the scenes themselves. This can be easily achieved and then In more detail, random by projecting removing all the hidden edges so as to render the opacity of the polyhedra. the procedure the scene onto an arbitrary plane by a perspective projection,4 is as follows: in obtaining (1) (2) f and an image plane are also chosen. to which the scene is described. Let (0; X, Y, Z) be the coordinate system according in these coordinates. The The center of the support region is the point 0 = (0, 0,O) support region is a sphere of radius M centered in 0. A center of projection 0’ is chosen at an appropriate distance D from the center of the support region. A focal In the actual experiments, D was length - f). The image plane is defined by the equal to 2M + f, so that 0’ = (0, 0, -2M equation Z = -2M. The scene is projected onto the image plane, regardless of visibility questions. Every vertex of the scene, V = (V,, V,, V,), is projected onto a 2D junction v whose coordinates on the image plane are VX VY ‘=’ Vz+2M+f’Vz+2M+f > 4 Most works on line drawings deal with orthographic projection, which can be viewed as a special case of perspective projection. Perspective projection results which are valid for orthographic projections of polyhedral and vice versa. is the correct modelization of the vision process. All the complexity scenes are also valid for perspective projections, P Pamdi et al. /Artt@zl Intelligence 105 (1998) 47-75 63 (3) This can be done in O(N) steps, where N is the number of vertices in the scene. All the hidden edges can be removed by one of the many existing techniques puter graphics and computational which suits our case well. The algorithm has complexity 0( N log N). geometry. We have used Appel’s algorithm in com- [ 1,6], The overall complexity of the algorithm for obtaining is therefore O(N log N), where N is the number of vertices number n of generating planes, the complexity is 0(n3 logn), since N = 0(n3). the line drawings from the scene in the scene. In terms of the 3.6. Examples Examples of line drawings generated by the algorithm described above are given in Figs. 5 and 6. For every line drawing a legal labeling of it is also given. Since the labeling labels by a different code than was generated automatically, the usual one consisting of putting a label (chosen close to the segment. Here, a “+“-segment is drawn as a dashed segment. Segments labeled with an arrow are simply drawn as arrows. is drawn as a dotted segment, while a “-“-segment it was necessary in the set {+, to represent t}) +, -, 3.7. Generating random instances of Legoland scenes scene rather The generator of random instances of scenes described so that its output be a Legoland modified Legoland is a world of trihedral polyhedra whose planar faces are oriented according one of three orthogonal axes. It is a very simple world but it is often powerful enough capture been widely discussed relevance. From the theoretical point of view, they represent one of the few examples which the labeling problem in Section 3 can be easily scene. to to scenes have [13,26,27], because of their simplicity and practical for the main features of simple scenes in a man-made world. Legoland in the literature than a general is polynomial trihedral [ 131. To generate a random Legoland scene of size n, we first choose an arbitrary triplet then proceeds as for general 61, n323 Zg) of orthogonal unit vectors. The algorithm Fig. 5. An example of a line drawing of a random of junctions the picture) Origami) object. is 121. Notice to a human observer to understand that it takes a while (and a sort of Necker’s reversal trihedral scene (left), and a legal labeling (right). The number limited to the top-right part of to that this line drawing can be interpreted as a solid (as opposed 64 P Parodi et al. /Artificial Intelligence 105 (1998) 47-75 Fig. 6. An example of a line drawing of a random of junctions is 282. The labeling has been performed using the labeling rule for boundaries. trihedral scene (left), and a legal labeling (right). The number Fig. 7. An example of a line drawing of a random Legoland scene. The number of junctions is 127. trihedral scenes, except that the unit vector of each of the n planes among G I,;*, in Fig. 7. is chosen at random and z3. An example of a line drawing of a random Legoland scene is shown 4. Experiments on the complexity of labeling In this section we use the line drawings generated as explained 3.5 to perform experiments on the complexity of labeling in Sections 3.3 and line drawings and to assess the i? Parodi et al. /Art$icial Intelligence 105 (1998) 47-75 65 heuristics. Labeling is performed by standard satisfaction problems. The core of these techniques stage during which local consistency techniques is a tree search, is achieved, as in search with informed by knowledge on the ‘blind’ depth-first and a more sophisticated two kinds of tree search: search best-first [34]. We will consider efficiency of some well-known for solving constraint usually preceded by a relaxation Waltz backtracking structure of the problem. As for the relaxation Mackworth and Freuder stage, we will use the simple algorithm in [ 141: referred to as AC-l by junctions For each pair of adjacent there is no labeling operation for all pairs of junctions junctions once without deleting a single labeling. in 52 which is compatible with it, and vice versa. Repeat Jl and 52, remove all labelings of J1 for which the through all the pairs of until we have gone adjacent instances (sometimes and is labeled This procedure to check again junctions If, e.g., a line drawing constructed exist: one of them is Waltz’ procedure of line drawings having approximately to junctions whose set of legal labelings anyway), and we have therefore implemented are described (most of the time is spent during (or of junctions) necessary modified. Better techniques to as AC-2), which has complexity O(n); other techniques case the difference is of no consequence backtracking takes in the worst case time O(n2), where n is the number of segments it does not take advantage of the fact that it is only in the line drawing; is referred in [14]. In our the depth-first the simpler and slower version. that we are going to describe have been The experiments on the complexity of labeling carried out by producing a number of line drawings for different numbers of planes. This gives a number of samples each of which refers to a fixed number of planes. It is, however, to refer to a fixed number of junctions. Therefore we create transformed more useful the samples each of which contains same number of junctions. out of 16 initial planes in 1338 steps, we add the number 1338 to the sample has 122 junctions associated with a number of junctions equal to 120, which might actually include instances a is called pooling. Before associating having, e.g., from 115 to 124 junctions. This that there is median an accumulation in the range [N - $ AN, N + i AN - 11 (usually AN = 10, or AN = 5, in which case we take intervals of the type [N - 3, N + 21). After completing the set for a certain range of values for N we do not accept any more entries. This indeterminacy must be taken into account when assessing are computed. This allows to the number of junctions, which is a more useful us to pass from the number of planes variable since it is a property of the line drawing and not of the way we produce it. After the median number of steps for each interval and the the experiment that appear in the plots. Estimates of the error on the median, and these are the quantities and median-time reflect more clearly what are the time requirements item which is unusually hard can throw off the mean-case estimate, while it has little impact on the median. The error on the median can be estimated by the bootstrap procedure to each number of junctions N we require of 100 line drawings which have a number of junctions complexity, of the “typical” case. A single the error by which the various statistical quantities than those of the mean-time is over, we compute are more reliable computational complexity time [5]. We now consider several methods to label line drawings and we analyze their performance. 66 J? Parodi et al. /Art$cial Intelligence IO5 (1998) 47-75 logarithm of the median-case Fig. 8. The base-10 trihedral scenes as a function of the number of junctions. The error bars give the error on the median estimated by the search. The plot is bootstrap procedure fitted reasonably well by the line logto T(N) = UN + b where a = 0.089 A 0.003, b = 0.6 f 5.9 (x2 = 11.2, P(x2 > 11.2) = 0.082). We have not plotted on the values of N on the x-axis since that is systematic and independent of N, but it gives a decisive contribution to the computation of the x2-statistic. is performed by a simple depth-first standard deviation). Labeling line drawings of random the indeterminacy of labeling complexity (kl to them have not been visited) Fig. 8 shows the computational labeling method: (1) we achieve arc-consistency In the first experiment we are going to use Simple depth-jirst search with backtracking. by the relaxation algorithm the following (2) we perform a depth-first search on the constraint network. Time for the search AC-l; all stage is computed as the number of times that the depth-first-search nodes which have been visited (that is, touched at least once) but not explored (that is, such that all the nodes adjacent is updated. time employed by the depth-first search as a function of the number of planes. Each point in the plot refers to a sample of 100 line drawings and time is the median number of steps for the sample. A first look at the data the reported (that is, a linear dependence of loglo T(N) on reveals a seemingly N). This is consistent with the fact that the general form of the worst-case complexity for is O(AN), where A a depth-first search with backtracking when applied and N is the is a constant number of junctions. related to the maximum number of legal labelings of a junction to our algorithm stack containing exponential behavior To test the hypothesis that the functional dependence equation T(N) = B . AN where N is the number of junctions number of steps (specifically, methods: the median), we proceed according can indeed be described by the is the average to standard statistical and T(N) . We plot Y = logro(T(N)) aX + b. The parameters quantity: against X = N and we fit the results with a line: Y = the as those which minimize of the line are computed m (Yi - uX~ - b)* q* ~*(a, b) = c i=l !? Parodi et al. /Art&ial Intelligence 105 (1998) 47-75 67 two successive values of N in the experiment data, m is the number of pairs, and o; where (Xi, Yi) are the pairs of experimental is usually the estimated error on Yi . In the present case, however, we must also take into account the error on the Xi variables, which is not neglectable. The average error where AN on Xi is the same for all i and can be estimated as oix = AN/(2&), is the interval between (AN = 5 in the present case) and n, is the size of the sample. The errors on the Yi ‘s are computed the original data 100 times by the bootstrap procedure, specifically by resampling (this is sufficient under ordinary circumstances the median for each the standard deviation of the set composed by all set and then computing resampled the medians. See [5] for details on the bootstrap procedure sketched here. A workable the errors on Xi and Yi is first to compute an estimate Z of Q and way to combine the final values of a and b then to choose CT? = (a,‘)* + Z* (cix)* in order to compute [5]), computing and to estimate which minimize ~*(a, b), we can compute A and B as A = lOa*, B = lob*. the X2 (see next point). Once we have obtained the values a* and b* l Letx*(a*,b*) betheminima1valueof~*(a,b).~*(u*,b*)obeystotheso-ca11ed~‘- distribution which has an expected value equal to the number u = m - 2 of degrees (which is in turn equal to the number of experimental of freedom of the distribution points minus distribution we can directly compute is greater gives the probability discarded lit is not good enough), or if it is above a certain good and the errors have probably been overestimated). the number of parameters computed by using the data). From the x2 the probability P(x 2 > x * (a*, b*)) that the x * in the experiment. The number P(x* > ~*(a*, b*)) is if P(X* > ~“(a*, b*)) is below a certain threshold, usually around 5% (the threshold, e.g., 95% (the fit is toa that x2 is greater than the value we have found. A hypothesis than the value found In the specific case, we have found u* = 0.089 f 0.03, b* = 0.6 f 5.9. For these values, we have ~*(a*, b*) = 11.2, which means that the fit is not very good (the expected value is 7), but it is still acceptable, since P(x* > 11.2) = 0.082. (In the following we will omit the star and we will simply write a, b to indicate The procedure described above uses pooling the parameters of the best-fit line.) (gathering all line drawings with similar it is difficult to obtain large samples of the same number of junctions. This can be annoying because indeterminacy into the same sample) because number of junctions line drawings with exactly it adds a source of error-the reflects on the precise estimation of the coefficient of the regression pooling which does not require using far larger samples techniques techniques, of the conclusions quantity such as those described specifically in the preceding reached on the exact number of junctions-which line. An alternative to is that of using robust regression in [8,17]. As a result, we have employed one of these least median of squares (LMS), to provide secondary confirmation analysis. LMS consists of minimizing the MS(U, b) = mediani(Yi - aXi -b)*, where (Xi, Yi) is a single experimental pair and not a sample of 100 elements as in the classical regression analysis discussed above. The minimum of MS(u, b) can be obtained by generating the one, denoted as (aLMs, bLMS), that gives the smallest value of MS(u, 6) (see [5]). Trial values can be generated by sampling a number (100 in our case) of random pairs of experimental points (Xi, Yi), (Xj , Yj) without trial values for (a, b) and choosing 68 l? Parodi et al. /ArtQicial Intelligence 105 (1998) 47-75 and computing the coefficients (a, b) of the line passing replacement through the different pairs of experimental points [5]. An estimate of the error on (ULMs, bLMS) can be obtained pairs by repeating even for (Xi, Yi) from the original data set [5]. The method is computationally a small number of bootstrap and the errors on the estimated coefficients with repetitions, this method are often quite high. this procedure a number of times (50 in our case) by bootstrapping demanding The regression coefficients obtained with LMS performed on the unpooled data for the experiment of Fig. 8 described above are: al&$ = 0.08 f 0.01, bLMs = 0.9 f 0.3. These values are consistent with those obtained by classical (least sum of squares). regression analysis that the complexity of labeling line drawings by a simple depth-first search We conclude with backtracking the median- case complexity has therefore the same form as the worst-case complexity. The use of more sophisticated search methods, however, yields drastically different results. in N, where N is the number of junctions: is exponential In the depth-first search with backtracking. search method with simple Best-Jirst backtrack, junctions are chosen blindly as deeper and deeper layers of the depth-first search [24]) is the so-called tree are explored. A more refined search method (see, for example, best-first search, which exploits to label the junctions the fact that it is more convenient the search is which have the smallest possible set of permissible guided by the a priori knowledge about the structure of the problem, and labelings which are more “likely” this refined search uses the following heuristic are tried first. Specifically, labelings. Furthermore, for certain junctions rules: l At a given point during into the search, nodes can be subdivided three classes: unvisited, visited, explored. Unvisited nodes are those that have yet to be considered by the search; visited nodes are those that to have not been visited yet; explored nodes are those that have they are adjacent been visited and the nodes adjacent to them have been visited as well. The nodes that have been visited have already been labeled. The set of those nodes which are adjacent labeled to visited nodes is the set in which the next node to be tentatively must be chosen. Best-first search chooses the node which has the smallest set of legal labelings, breaking touched but the nodes that have been ties arbitrarily. l T-junctions have six possible labelings. Four of them are common trihedral world, the other two only appear in the extended to the basic and the trihedral world, extended and they appear more seldom. Therefore, labelings and only successively try first the labeling with the middle-segment remaining In addition labeled as arrows. to these heuristic segments the remaining it is convenient to try first the “conventional” two labelings. For E-junctions, we labeled as a convex segment and the rules we adopt the usual relaxation stage before starting the search. Fig. 9(right) shows the median computational time versus number of junctions for the best-first search method. The error bars are computed by the bootstrap procedure. Fig. 9(left) shows the 50% (median), 75%, 90%, 95% percentiles of the distribution of the computational time, so as to give an idea of the scatter of the data. We see the first clear signs of the emergence of the exponential behavior at the 95% percentile. I? Parodi et al. /Artijicial Intelligence 105 (1998) 47-75 69 800 - 600 - v) tit Ii5 500 - . 250. Ei 4 200 B j 150. z IOO- 100 200 number of junctions 300 -0 100 200 3;;o number of junctions the 50% (median), 75%. 90%, 95% percentiles of the distribution of the computational Fig. 9. (Left) Showing time. (Right) Time (number of steps) versus best-fitted by the line T(N) = UN + b, a = 1.26 zk 0.01, b = 3.3 f 0.4, where N is the number of junctions. Forthesevalues wetind,y* =22.1, P(x* > 22.1)=0.46. the number of junctions search. The graph for the best-first is appears to be linear The computational always very close to the number of junctions complexity the median number of steps-measured in the number of junctions; more as the number of time the search stack precisely, line through is updated-is the data is T(N) = UN + b (N being the number of junctions) with a = 1.26 Z!Z 0.01, b = 3.3 f 0.4. where N is the number of junctions. The fit is good: we find x2 = 22.1, P(x * > 22.1) = 0.46, corroborating that the number of steps grows linearly the hypothesis in the number of junctions. These values of the regression coefficients are to be compared with those obtained by least median of squares: ULMs = 1.22 f 0.06, bLMs = 7.0 f 3.8. n. The best-fit Under ordinary conditions, the labeling rule for boundaries. the field of view, are visible. However, Adding through a “window”: only those objects which are projected image plane, consists of a finite set of polyhedra all of which are inside a useful rule of thumb can be labeled with arrows extensively used in the past in works on line drawings. certainly use it in our case because the support region of the polyhedra therefore we can always choose the viewing window so as to include that we can use for labeling: that leave the background a scene is viewed into a certain portion of the that the scene the field of view, then there is if we may assume segments which lie on the boundary on their left. This rule has been It is not always justified, but we can is fixed and known: the support region. of the random scenes generator, which introduces Notice that a simple modification viewing window artificially, enables us to deal-if most general case, and to generate cannot be applied: an example is shown in Fig. lO(right). the circumstances demand so-with line drawings for which the labeling rule for boundaries a the 70 P. Parodi et al. /Artijicial Intelligence 105 (1998) 47-75 Fig. 10. (Left) An example of a line drawing of a random through a viewing window. The labeling for the line drawing on the right. scene. (Right) The same line drawing seen rule for boundaries can be used for the line drawing on the left but not trihedral It is interesting to study the effect of this rule for labeling boundaries on the complexity a line drawing. Fig. 11 shows the computational in case this rule is adopted. The slope of the best-fitting of labeling number of junctions aN + n, a = 1.22 Z!Y 0.01, b = 3.9 f 0.4, is slightly smaller rule for boundaries. For these values we have x2 = 29.2, with a search without the labeling confidence value of P(x* > 29.2) = 0.14. The fit is therefore acceptable. These values are also to be compared with those obtained by least median of squares: ULMs = 1.19 f 0.05, bLMs = 5.5 f 2.5. time as a function of the line T(N) = than that for the best-first Observe that the labeling rule for boundaries helps narrow the distribution of values of the ratio r between the optimal the number of steps and the number of junctions value r = 1, as an inspection of the 50% (median), 75%, 90%, 95% percentiles of the distribution of the computational time shows. around The role of relaxation. relaxation determine whether computational algorithm AC-l the use of this pre-processing time is linear in the number of junctions. In the previous as a pre-processing experiments stage stage is crucial on labeling we have used to the search. We now want the to that the to the finding (with no labeling We therefore perform another experiment on the complexity of labeling, rule for boundaries), again using this time switching off the relaxation best-first stage. The results are shown in Fig. 12: the number of steps still appears to be linear in the and can be best-fitted by the line T(N) = a N + b, a = 1.34 f 0.02, number of junctions, b = 2.2 f 0.6. For these values we have x2 = 19.2, with a corresponding confidence value of P(x* > 19.2) = 0.63. These values are to be compared with those obtained by least median of squares: aLMs = 1.28 f 0.08, bLMs = 5.7 f 5.6. 450 400 350 g 300 Q) ; 250 ; 200 z 150 100 50 0 0 P: Parodi et al. /Art$cial Intelligence 105 (1998) 47-75 71 350 300 250 % +! 200 6 g 150 2 100 50 100 200 300 number of junctions 0 0 100 200 300 number of junctions the 50% (median), 75%, 90%, 95% percentiles of the distribution of the computational Fig. Il. (Left) Showing time. (Right) Time (number of steps) versus the number of junctions rule for the boundaries b = 3.9 f 0.4, where N is the number of junctions. The fit is acceptable: x2 = 29.2, P(x2 > 29.2)) = 0.14. for the best-first search, when the labeling is applied. The data are best-fitted by the line T(N) = aN + b, a = 1.22 f 0.01, - 90% IF%- El 75% median - - (Right) Time (number of steps) versus the 50% (median), 75%, 90%, 95% percentiles of the distribution of the computational Fig. 12. (Left) Showing the for time. is not applied, and no relaxation is performed labeling line is T(N) = aN + b, a = 1.34f0.02, b = 2.2 f0.6, where N is the number ofjunctions. The fit is good (x2 = 19.2, P(x2 > 19.2) = 0.63). the number of junctions in advance. The best-fit rule for the boundaries search, when the best-first 72 I! Parodi et al. /Artificial Intelligence IO5 (1998) 47-75 is used. However, The slope of the best-fit line for the present case is not much different from that for the the data are far more spread, as an inspection of shows (see Fig. 12(left): observe that in this in that it was too irregular and too high- the width of the distribution of case where relaxation the percentiles of the distribution case it was not possible reaching). Relaxation the computational indispensable time and tame the ‘bad minority’ of cases. to draw the 95% percentile, immediately is therefore to control The importance of the relaxation labelings of a junction, among stage can also be evaluated by the amount of legal that have been discarded by the those possible a ptiori, relaxation procedure. Suppose that after the relaxation performing the relaxation procedure that each junction Ji has an initial set of 1~10) labelings, and stage this number has gone down to pi. A measure of the gain in is given by the ratio R= llini ni np. The product of the number of labelings for each junction is related to the complexity of ni) = is the (see, for example, algorithm, which is O(Eni ni), where N is the number of junctions of the line drawing and E = O(N) the worst-case complexity of the depth-first backtracking O(Nni number of segments of the trivial algorithm which tries every possible combination junction Therefore, worst-case, or with the trivial algorithm) by pre-processing algorithm before performing of legal labelings it finds one for which all segments are uniquely [ 141). Also, O(ni ni) is the worst-case complexity for each labeled. time (in the the line drawing with a filtering the ratio R is a measure of how much we gain and stops whenever in processing the search. Fig. 13 shows the behavior of the base-10 of the number of junctions. Each point corresponds logarithm of the pruning ratio R as a function to a sample of 100 line drawings and 301 I I 30 I 40 number of junctions 50 60 70 logarithm of the pruning as the median ratio for a set of 100 line drawings. The plot ratio R, versus the number of junctions N. For each value is best-fitted by the x2 = 12.4, f 4.2. The fit is acceptable: loglo R(N) = aN + b with a = 0.46 f 0.01, b = -1.7 Fig. 13. The base-10 of N, R is computed line P(x2 > 12.4) = 0.13. P. Parodi et al. /ArtiJicial Intelligence 105 (1998) 47-75 73 reports the median of each sample. Of course this measure methods by which one performs loglo R(N) = UN + b, with a = 0.46 & 0.01, b = -1.7 x2 = 12.4, with a corresponding an acceptable smaller number of hard cases that are found in the distribution is independent of the successive line labeling. The best-fit f 4.2. For these values we have confidence value of P(x2 > 12.4) = 0.13, which makes for the far is huge, and accounts if relaxation fit. The gain in the worst-case complexity the search for a legal global is used. 5. Discussion the average-case In this paper we have analyzed complexity of labeling to generate scenes. Such a method has enabled us to generate random random instances of line drawings which to be the projection of an actual scene. Afterwards, we have tested several (The labeling problem To carry out this analysis, we have devised a method polyhedral are guaranteed different search methods to label the line drawings so constructed. is in this case not the problem of deciding whether a labeling exists, but that of finding a labeling. This problem resembles more closely that which the brain solves well, particular from a drawing.) namely the extraction of 3D information line drawings. The experimental analysis carried out in this paper has allowed us to reach the following conclusions: (1) The computational complexity of labeling in the number of junctions, line drawings as long as an appropriate is, in the median case, linear is used. This is probably due to the highly constrained nature of the labeling problem line drawings containing for trihedral scenes. Although components which are difficult to label (see [ 13]), randomization in the construction of scenes makes these components unlikely conjecture for typical instances of the problem in [ 131 that the complexity of labeling line drawings might be polynomial to appear. This work substantiates (the mean or median case). search method it is possible to construct the (2) Relaxation plays an obvious role when the line drawing contains local inconsisten- are found out during the relaxation in the average computational for random graphs with possible cies: it is often the case that these inconsistencies time (see [22], stage and this means a huge saving where an analysis of the labeling problem incon- sistencies has been carried out). In the case of line drawings derived as projections of (random) scenes, which by definition do not contain any inconsistencies, is still useful but for different reasons: complexity of the problem, but it is indispensable the values of the computational values are close to the median-case; complexity, as clarified by the high values of the pruning so as to narrow the distribution of so that most also, it has a strong effect on the worst-case ratio. relaxation it does not strongly affect the median-case time over the set of random instances 5.1. Relation to previous work Our method for generating random instances of polyhedral scenes was inspired by Sugihara’s work [30-321, in which realizability of a line drawing is checked by associating a plane to every polygon of the line drawing and solving a linear system where the 74 l? Parodi et al. /Artificial Intelligence 105 (1998) 47-75 equations are the plane equations this work the process is reversed: we generate we construct a scene from them. and the variables are the parameters of the planes. In the equations of the planes at random, and the linear complexity Our work should also be compared with that by Waltz [34], who reported linear-time performances for his labeling strategy, based on a number of examples generated manually. In that case, however, depended on the fact that in his examples relaxation was by itself usually enough labeling. This might depend on the fact that the world considered in [34] includes shadows and cracks, has a far In our wider junction dictionary. Therefore case, the linear complexity of the median-case does not seem to depend on the relaxation stage, although the results cannot be immediately to give an almost unique the performances if relaxation compared. increase is used. Acknowledgements We would like to thank David Mitchell, Michael Molloy, Stephen A. Cook, Hector James McLean, Martin Held and Thomas Auer for helpful discussion. The Levesque, referees have given us important advice on the statistical analysis of our data. We would also like to thank Mario Portoraro, Fernando Nuflo and Domenico Ma& for their technical help. This project was partially in Toronto and by the Institute for Robotics and Intelligent Systems, a Network of Centres of Excellence of the Government of Canada. funded by the IBM Centre of Advanced Studies References [l] A. Appel, The notion of quantitative invisibility and the machine rendering of solids, in: Proceedings of the ACM National Conference, Thompson Books, Washington, DC, 1967, pp. 387-393. [2] B. Bollobas, Random Graphs, Academic Press, London, 1985. [3] P. Cheeseman, B. Kanefsky, W.M. Taylor, Where the really hard problems are, in: J. Mylopoulos, R. Reiter (Eds.), Proceedings IJCAI-91, Sydney, Australia, 1991, pp. 331-337. [4] M.B. Clowes, On seeing things, Artificial [5] B. Efron, R.J. Tibshirani, An Introduction [6] J.D. Foley, A. van Dam, SK. Feiner, J.F. Hughes, Computer Graphics: Principles and Practice, Addison- Intelligence 2 (1971) 79-l 16. to the Bootstrap, Chapman and Hall, London, 1993. Wesley, Reading, MA, 1990. [7] M.R. Garey, D.S. Johnson, Computers and Intractability, W.H. Freeman, New York, 1979. [8] E.M. Hampel, F.R. Ronchetti, P.J. Rousseeuw, Robust Statistics: The Approach Based on Influence Functions, Wiley, 1986. [9] T. Hogg, C.P. Williams, The hardest constraint problems: a double phase transition, Artificial Intelligence 69 (1994) 359-377. [lo] D.A. Huffman, Impossible objects as nonsense sentences, in: B. Meltzer and D. Michie (Eds.), Machine Intelligence 6, Edinburgh University Press, Edinburgh, 1971, pp. 295-323. [ 111 T. Kanade, A theory of Origami world, Artificial Intelligence 13 (1980) 279-3 11. [ 121 L.M. Kirousis, Fast parallel constraint [13] L.M. Kirousis, C.H. Papadimitriou, System Sciences 37 (1988) 14-38. The complexity of recognizing polyhedral satisfaction, Artificial Intelligence 64 (1993) 147-160. scenes, J. Computer and [14] A.K. Mackworth, E.C. Freuder, The complexity of some polynomial network consistency algorithms for constraint Intelligence 25 (1985) 65-74. [ 151 A.K. Mackworth, E.C. Freuder, The complexity of constraint satisfaction satisfaction problems, Artificial revisited, Artificial Intelligence 59 (1993) 57-92. P. Parodi et al. /Ar@cial Intelligence 105 (1998) 47-75 75 [16] J. Malik, Interpreting [17] P. Meer, D. Mintz, D.Y. Kim, A. Rosenfeld, Robust line drawings of curved objects. Intemat. J. Computer Vision 1 (1987) 73-103. regression methods for computer vision: a review, Intemat. J. Comput. Vision 6 (1) (1991) 59-70. [I81 R.E. Miles, Random polygons determined by random lines in the plane, in: Proceedings of the National Academy of Science 52 (1964) 901-907. [19] D.G. Mitchell, H.J. Levesque, Some pitfalls for experimenters with random SAT, Artificial Intelligence 81 (l-2) (1996) 111-125. [20] E.M. Palmer, Graphical Evolution, Wiley, New York, 1985. [21] P. Parodi, The complexity of understanding of origami scenes, Intemat. J. Computer Vision 18 (2) (1996) 139-170. [22] P. Parodi, R. Lancewicki, A. Vijh, J.K. Tsotsos, Empirically-derived estimates of the complexity of labelhng line drawings. Technical Report RBCV-TR-96-52, Department of Computer Science, University of Toronto. Toronto, September 1996. [23] P. Parodr, V. Tom, On the complexity of labeling line drawings of polyhedral scenes, Artificial Intelligence 70 (1994) 239-276. [24] J. Pearl, Heuristics, Addison-Wesley, Reading, MA, 1984. [25] B. Selman, D.G. Mitchell, H.J. Levesque, Generating hard satisfiability problems, Artificial Intelligence 8 I (l-2) (1996) 17-29. [26] M. Straforini, C. Coelho, M. Campani, Extraction of vanishing points of images of indoor and outdoor scenes, Image Vision Computing 11 (2) (1993) 91-100. [27] M. Stmforini, C. Coelho, M. Campani, V. Torre, The recovery and understanding of a line drawing from indoor scenes, IEEE Trans. Pattern Analysis and Machine Intelligence 14 (2) (1992) 298-303. [28] D. Stoyan, W.S. Kendall, J. Mecke, Stochastic Geometry and its Applications, Wiley, 1996. [29] K. Sugihara, Picture for skeletal polyhedra, Computer Graphics and Image Processing 8 (1978) language 382-405. [30] K. Sugihara, Mathematical structures of line drawings of polyhedrons, IEEE Trans. Pattern Analysis and Machine Intelligence 4 (5) (1982) 458-469. [31] K. Sugihara, An algebraic approach [32] K. Sugihara. A necessary and sufficient condition to shape-from-image problems, Artificial Intelligence 23 (1984) 59-95. scene, IEEE Trans. for a picrure to represent a polyhedral Pattern Analysis and Machine Intelligence 6 (5) (1984) 578-586. [33] J.K. Tsotsos, The complexity of perceptual search tasks, in: Proceedings International Joint Conference on Artificial Intelligence (IJCAI-89), Detroit, MI, 1989, pp. 1571-1577. [34] D. Waltz, Understanding line-drawings of scenes with shadows, in: PH. Winston (Ed.), The Psychology of Computer Vision, McGraw-Hill, New York, 1975, pp. 19-91. [35] C.P. Williams, T. Hogg, Exploiting the deep structure of constraint problems, Artificial Intelligence 70 (1994) 73-l 17. 