ELSEVIER Artificial Intelligence 83 (1996) 229-239 Artificial Intelligence Off-line reasoning for on-line efficiency: knowledge bases * Yoram Moses a,*, Moshe Tennenholtz b il Department r;lf Applied Mathematics and Computer Science, The Weizmann Institute of Science, Rehovot, 76100 Israel h Faculty of Industrial Engineering and Management, Technion, Israel Institute of Technology, Haifa, 32000 Israel Received November 1993; revised July 1994 Abstract The complexity of reasoning is a fundamental issue in AI. In many cases, the fact that an intelligent system needs to perform reasoning on-line contributes to the difficulty of this reasoning. This paper considers the case in which an intelligent system computes whether a query is entailed by the system”s knowledge base. It investigates how an initial phase of off-line preprocessing and design can improve the on-line complexity considerably. The notion of an eficient basis for a query language is presented, and it is shown that off-line preprocessing can be very effective for query languages that have an efficient basis. The usefulness of this notion is illustrated by showing that a fairly expressive language has an efficient basis. A dual notion of an eficient disjunctive basis for a knowledge base is introduced, and it is shown that off-line preprocessing is worthwhile for knowledge bases that have an efficient disjunctive basis. 1. Introduction Many activities concerned with a system representation. include planning The reasoning representation the following of knowledge in the framework task: an intelligent aspect of the world), and reasoning agent has a given representation are of to this relatively efficiently. Typical examples and computing whether a query is entailed by a given knowledge base. reasoning: when an in both of these cases can be thought of as on-line Its task is to solve this problem and a problem that relates (or of a relevant * Part of the material presented in this paper appeared in Proceedings IJCAI-93 [ 91. * Corresponding author. E-mail: yoram@cs.weizmann.ac.il. 0004-3702/96/$15.00 @ 1996 Elsevier Science B.V. All rights reserved SSDf0004-3702(95)00015-l 230 X Moses, M. TennenhoWArtificial Intelligence 83 (1996) 229-239 its on-line performance in a is should find a solution is given, our algorithm reason about to the problem. schemes of knowledge input instance, and should researchers often use general logic [6], then often carried out using general schemes of reasoning proving, Prolog for logic programs, etc. Consider [4], semantic networks the following question: logic programs [lo], can our agent improve the problem the system and about In order to handle such problems, such as first order representation is the reasoning for theorem etc. Moreover, such as resolution system, Intuitively, there should of the world) the complexity to this system? to this particular is not very useful invariably be special-purpose algorithms instead of using general the on-line activity. In such a case the agent should be allowed to the agent, without our providing algorithms. Our aim the problem of how an initial phase of off-line preprocessing to reduce of the agent’s on-line behavior. We are especially in systems where agents might be presented with many potential problems rather case where the system it uses (e.g., its knowledge base or representation fixed, and we know ahead of time that the agent is to be asked to solve many problems it is clear that the answer should be positive; with respect for solving given a fixed system problems with respect schemes of reasoning. This answer, however, the agent with a way in which it can obtain such special-purpose in this paper is to consider can serve interested during extensive preprocessing without Specifically, we shall investigate system knowledge base. We present show query efficient disjunctive basis for a knowledge base, and show that off-line preprocessing very effective Reactive for knowledge bases that have an efficient disjunctive basis. to planning, [ 1,2] ) . Some other works suggested [ 1 l] ). However, have been to compile suggested reactive behaviors on-line behavior does not need to concentrate only on “real” reactive behavior. On-line behavior that faces various problems might to the behavior of an agent task is to identify areas where off-line after the initialization processing for each such area. can be helpful and to suggest a particular In this work, we apply this idea to query evaluation increasing the amortized cost per solution significantly. the following central context. We consider an intelligent are entailed by its language, and for the notion of an is the notion of an eficient basis for a query in greatly in a number of works (see in advance that off-line preprocessing languages that have an efficient basis. In addition, we consider to compute whether particular improved on-line behavior of the system. The main in AI, related especially the task of improving refer more generally to problems approaches to perform that needs can result (queries) formulas (see type of solution in knowledge bases. a high-level This paper is organized as follows. Section 2 contains can be used. In Section 3 we discuss that makes preprocessing languages effective. Section 4 presents a fairly expressive query discussion of the notion of an efficient of knowledge bases for lan- in which off-line additional examples languages that has an efficient basis, and considers bases worthwhile. A fairly natural in the context of knowledge bases. In Section 5 we present a of for representing that makes preprocessing the contents for representing the desired property. Finally, Section 6 con- knowledge bases language to have is shown for useful off-line processing, and provides some concluding reasoning how off-line basis, a property of query extremely these guage preprocessing property of languages knowledge of a knowledge siders other possibilities remarks. is useful base ( 1) Replacing that represent a model, base. (2) Decreasing The first approach retical computer expressiveness case of multi-agent I: Moses, M. Tennenholtz/Art@cial Intelligence 83 (1996) 229-239 231 2. Off-line versus on-line reasoning Consider the well-known problem of determining whether queries are entailed by a for example in some logical in [ 51. We assume knowledge base, as discussed base KB expressed concerning KB are formulated. Given a query (Y, we are interested This problem verification process might be very inefficient. There are two main approaches discussed that we have a knowledge language, and a query language QL in which queries in whether KB + a. the that are in the general case. Moreover, even for tractable queries, in the AI literature for overcoming this difficulty: is intractable problem solving by model checking [ 31: discuss knowledge bases specific models, so that a query only needs to be checked against it is logically entailed by a knowledge rather than computing whether the expressive power of the knowledge base and of the query language in order to have more tractable queries. science. The second is in fact the way in which relational databases are treated in theo- is concerned with finding good tradeoffs between (as is done in the knowledge base case by [ 51, or in the and complexity activity by [ 171). in time t where complexity but polynomial is the following. Assume t might be large but still feasible Another potential way for decreasing in the size of the knowledge base KB). The question that any (e.g., is for each amount in order to make the on-line behavior more In the next sections we illustrate how this approach can be useful. We point to specific query can be verified super-linear whether we can find a subset QL’ c QL of a feasible member LY of QL’ whether KB b a (all of this might of time), and use this off-line processing efficient. a general sel: of queries Notice However, of retrieval (off-line preprocessing will be diffe.rent from classical multiple query optimization by knowledge bases instead it is performed instead of clever retrieval of a set of queries after their arrival) in this way, and discuss specific examples. can be treated as a type of multiple query optimization. size, verify off-line take a considerable the context of our query optimization the actual way in which that can be handled from relational this approach (cf. [ 121) . databases), (entailment that and The program described above allows efficient processing of many queries made to a fixed query made with respect a fixed knowledge base. A similar approach can be used for treating a dual problem: bases. We shall processing describe a general class of knowledge bases that can be handled in this way. Although this may be somewhat to off-line processing of a query language, there are contexts where this does make good sense. to different knowledge than our approach less powerful 3. Query lamguages with an efficient basis In this section we concentrate on off-line reasoning knowledge base, and queries each query formulated in the query regarding it arrive in a dynamic language QL can be verified in the case where we have a fixed that fashion. We assume in time t (generally, 232 Y Moses, M. TennenholtdArtQicial Intelligence 83 (1996) 229-239 t might be a function of the size of the knowledge base and of the size of the current that the knowledge base KB and every query). For ease of exposition we will assume logic. 1 query (Y E QL are formulas in the language C of propositional Let us denote the set of primitive propositions in this logic by X = {xi, x2,. . . , xn, . . .}. We use ,Ci to denote are a subset of {xi, x2, . . . ,xi}. We will associate with every query language QL an infinite sequence QL1 C QL2 C . . ., where QLi = QL n .Ci. We say that a query language QL’ is of polynomial size if there exists a fixed polynomial p, such that lQL:I < p(i), where in QLf. IQL(I denotes the set of formulas of L: whose primitive propositions the number of elements time base, appearing to identify to encounter that it takes As usual, we define a large number of queries the size of a formula in the formula. We assume (Y, denoted by 1~~1, to be the number of r( /CT/) to compute to the same to compute each one of them from scratch. a small set of queries which, once let us in a query LY as the canfinality the cardinality of the knowledge base is its cardinality when viewed as In any given case we can make the cardinality of the knowledge base that appear in KB, by appropriate simpler. More specifically, it may be very costly symbols any given query LY. If we expect knowledge In such a case it would be desirable computed, make computing other queries considerably refer to the largest index m of a proposition x, appearing of cr. Similarly, a single formula. KB coincide with the number of different propositions renaming of the propositions. formula “polynomial” obtain can be obtained Our choice is mainly many queries, stage preliminary scratch. As a result, evaluating more efficient with the off-line processing to do so, we need the following definitions. is significantly more efficient or “exponential”. We remark In the sequel, we shall implicitly take the cardinality of a the terms to the ones we will if, instead, we used the size of the formula (or knowledge base). for ease of exposition. Our goal will be to evaluate polynomially in the from number of queries will be made In order (or of the knowledge base) as the complexity parameter when using so that the on-line evaluation of a query using a super-polynomial this preprocessing. the data obtained than it is without that very similar the evaluation of a query results than Definition 3.1. A set B G QL of queries will be called a basis for QL if every query in QL is equivalent of elements of B. A basis is called an eficient basis if its size (as a sublanguage of QL) is polynomial. to a conjunction Given these definitions, we can now show: Theorem 3.2. Let QL be a query language, and let QL’ be an eficient basis for QL. Moreover, let KB be a knowledge base of cradinality m (i.e., KB E &,,). Finally, let t be an upper bound on the time it takes to compute whether KB k a’ for an arbitrary a’ E QL:,,. Then there exists an off-line computation of complexity 0( t . poly(m)), where poly is a fixed polynomial, after which on-line testing whether KB b cr can be per$ormed in time O(size( cu) ’ logm) for every a E QLm. ’ The ideas presented in this paper can be generalized to other types of representation as well. We briefly mention such a representation in Section 4. I! Moses, M. Tennenholtz/Artifcial Intelligence 83 (1996) 229-239 233 for verifying all the basis queries there are only polynomially many such queries, and we have assumed t. After verifying tree which is 0( t .poly( m) ) , that each the results of to the names of the in each node the information of whether or not the is entailed by KB. Now, we can evaluate each query by the the appropriate basis queries, and taking Proof. The amount of time required since of them can be verified the off-line processing queries appropriate extracting conjunction in the basis and that contains (query in the basis values. This would be satisfactory in time in a binary them we can arrange of the corresponding is sorted according the relevant information about since KBk((aAj3) iff bothKBkoandKB+B. the information about each query in the basis can be done in time which in the depth of the tree, which, in turn, can be made logarithmic is in the size of Extracting linear the basis. I1 We remark that the size of the knowledge base KB in Theorem 3.2 plays a role only is done, the knowledge base can be in the size of entailment of a query is linear t. Once the preprocessing the function in affecting ignored, and the complexity of computing the query and in logm. Notice that, assuming the size of a query knowledge base KB and that t is super-linear that in the above-mentioned efficient case we are able to get on-line than what can be achieved without appropriate off-line computations. reasoning is negligible in the size of a query, relative to the size of the this result shows that is much more 4. Efficient on-line reasoning language. Recall In the previous section we showed that off-line preprocessing can be very effective for that have an efficient basis. One wonders, however, whether this family that can be used in practice. We now present such of clauses each of which is a primitive proposition or the negation of is a CNF formula where each clause contains no more than k It is not hard to query languages contains any natural query languages a query contains a disjunction one.) A k-CNF formula literals. We use k-CNF show: the language of all k-CNF formulas. that a CNF formula is a conjunction of literals. (A literal to denote Theorem 4.J. For every k > 0, the language k-CNF has an eficient basis. Proof. The basis QL’ consists, is a disjunction consist of all k-clauses of cardinality appearing in QL;, are xl,. a constant, this is O(mk) which in this case, of all the k-clauses. Recall that each k-clause of k literals, each of which can be either positive of negative. Let QLk no greater . . ,x,,.) The number of formulas than m. (Thus, the only propositions in QLh is 2k(T). Since k is is a polynomial in m, as desired. (cid:144)i Recall In particular, thlat every formula of propositional logic is equivalent every formula is equivalent to a k-CNF formula to a CNF for a sufficiently formula. large 234 Y Moses, M. Tennenholtz/Art@ial Intelligence 83 (1996) 229-239 to a knowledge to be for a rather small k. The language k-CNF is thus a is a useful for which off-line preprocessing in general, in a query can be approximated base are likely by k-CNF for approximations is complementary to approaches that serve as queries formulas as k-CNF formulas language any propositional k. Moreover, expressible fairly expressive query procedure. In addition, natural way. Hence, our approach recently discussed which preprocessing Our work is complementary the system-the ideas can be used when the dynamic element in the AI literature is performed [ 131. In existing work in AI the element for is a static element, namely a fixed knowledge base. the more dynamic element of query language as a whole. In Sections 5 and 6 we will see how similar in the sense that we process is the knowledge base. it applies We remark that Theorem 4.1 can be extended somewhat beyond to universal the purely proposi- formulas of the predicate calculus of the tional case. In particular, form \dx,, . . . ,xJj (D(x,, . . . , x,,), where 40 may contain but is syntactically formula. only primitive propositions, proof are the same as in the propositional a polynomial symbols and relations, function (Here we allow as literals not but any term of the predicate calculus.) The result and the the existence of case. The key point remains of the form of a k-CNF a concrete class of knowledge bases for which stage on a basis for k-CNF described above can be performed using feasible and can yield considerable case in which the knowledge base KB consists of a formula (DNF). In this case we can show: amortized savings in the on-line computations. Consider in disjunctive normal the preprocessing resources, the form basis. We now consider Proposition base KB is polynomial in /(ol . IKBI. 4.2. Testing whether a k-CNF formula q is entailed by a DNF knowledge Proof. First observe entails all the conjuncts entails a formula the above we obtain that a knowledge in the formula. base entails a CNF formula In addition, observe if and only if it that a DNF knowledge base that formula. Combining if and only if each one of its disjuncts entails the desired result. I7 Notice that considering very large knowledge bases and the need for close to real- the on-line to the fact that the above proposition points time response during in this case might still be rather inefficient. However, Theorem 3.2 reasoning the on-line guarantees testing that with appropriate off-line processing whether a k-CNF formula 40 is entailed by a DNF knowledge base is linear in Ipl.log( m). This is significantly better than what can be achieved without off-line processing. (before any query arrives) activity, that decides so far illustrate the fact that off-line The results presented the on-line performance of useful AI applications to use such off-line can greatly involving knowledge bases. improve However, a designer reasoning must be careful. A possible drawback of such reasoning might appear when we consider knowledge bases of off-line processing that need to be updated depends on the frequency of updates and on the cost of updating the preprocessing step. Suppose same language, that we have two separate knowledge bases KBl and KBz that use the for both of them is k-CNF, and that appropriate In such cases the contribution that the query language frequently. reasoning E Moses, M. TennenhoWArtijicial Intelligence 83 (1996) 229-239 235 it is worthwhile reasoning has been performed for each knowledge base separately. If we want the respective to investigate to compute all the off-line queries again, or whether off-line to combine these knowledge bases, there is no general way for combining off-line data on which much effort was spent. The designer will have in the whether results. It should be specific case it is possible and worthwhile emphasized that this problem does not arise when the knowledge base is fixed. In some cases, large parts of the knowledge base can often be considered as fixed, and the above- approach can then be used in a fairly straightforward manner. Nevertheless, mentioned form of systems where this problem can be handled it is of interest form efficiently of knowledge bases for which this is appropriate. the case in which even when the knowledge base is not fixed. We now show a particular In the next section we will discuss to show a particular is fixed and the knowledge base may vary. for discussing knowledge bases that consist of propositions One motivation the off-line to combine the query and not of is the need to represent uncertainty it is often reasonable the degree of uncertainty increase specific models in [ 51) . Therefore, updates edge base might contain a hypothesis there might be another knowledge relationships. Combining sitional formulas. combined. off-line entailed can combine efficiently. computations, if it might be the case In such cases and would :Formally, their off-line computations like about (this between xi,. that represents the relationships another alternative issue is thoroughly discussed to consider knowledge bases in contexts where in the knowledge base. For example, a knowl- . . , x,,,, and for these to taking a disjunction of propo- can be easily using is is true), they the on-line queries their hypotheses (to see what computations (hypotheses) off-line then to combine that only one of the hypotheses in order to answer easily base these alternatives corresponds If two scientists worked on different knowledge bases this can be formulated as follows: the appropriate Theorem 4.3. Let KBI and KB2 be knowledge bases, let QL be a query language, and let QL’ c QL be an eficient basis for QL. Finally, suppose that the cardinality of the (KB, V KB2) is m (thus, (KBl V KB2) E Cc,,). Then computing the relevant formula off-line data for QL with respect to (KBl V KB2) given the data with respect to KBI and the data with respect to KB2 can be done in time polynomial in IQLk\. Proof. Consider for both K131 and KB2. The proof follows from the fact that the construction presented in Theorem 3.2. We have such constructions (KB, ‘J KB2) b a iff KB, j= (Y and KB2 k a. Given the above, we can verify is entailed by KB1 V KB;? by extracting results regarding computed) for each element q of the basis whether or not it and taking the conjunction of the (already the entailment of q by KB, and KB2 respectively. 0 5. Knowledge bases with an efficient basis Knowledge bases and queries play dual roles in the problem we have been considering. Indeed, Theorem 4.3 makes use of this duality to a limited extent. In this section we 236 E Moses, M. Tennenholt~/Arrl~ciol Intelligence 83 (1996) 229-239 intend processing of queries off-line processing of (changing) that we are identifying to go further and show how almost everything we have said about off-line for to a fixed knowledge base has a precise analogue relative knowledge bases relative knowledge bases with (possibly to a fixed query. language. As for query Recall in languages, we will associate with every language some logical KBL for expressing knowledge bases, an infinite sequence KBLl & KBL2 C . . ., where in which knowledge bases KBLi = KBL n &. Again, we say that a language KBL’, are expressed, p, such that IKBL;~ < p(i). size if there exists a fixed polynomial is of polynomial formulas large) Definition 5.1. A set DB c KBL of knowledge bases will be called a disjunctive basis of elements of DB. A for KBL of disjunctive KBL) is called an eficient disjunctive basis if its size (as a sublanguage basis is polynomial. in KBL is equivalent to a disjunction if every query in a given application, what is is that the knowledge base can be treated as if it is a disjunction One may wonder whether and when the notion of a disjunctive basis for a knowledge that for it to be relevant base may be of interest. Notice of elements, required for the purpose of answering queries. There are cases of relevance to AI in which this is reasonable. Consider a knowledge base that is built from a set of examples of an a in verifying whether a property priori unknown concept C, for which we are interested theory (Y holds. This [ I8 1. In order to check whether C entails LY, we need to check whether (Y is entailed to the test of whether by each known example of C. Formally, the set the disjunction the of examples) query for disjunctive of the examples entails a. Therefore, in a disjunctive it must be interpreted disjunctively. This gives a general and nontrivial the knowledge base (i.e., form, but in order to answer in the context of computational need not be represented this test is equivalent is a frequent incentive scenario learning representations. the above definitions Given and motivation, we can now state and prove the following analogue of Theorem 3.2: in which that the cardinal@ of a is m (i.e., a E I$,). Finally, the content of a knowledge base KB Theorem 5.2. Let KBL be a language let CI be a query can be expressed, and let KBL’ be an efficient basis for KBL. Moreover, let t be an upper and assume bound on the time it takes to compute whether KB’ /= LY for an arbitrary KB’ E KBLL,. Then there exists an OR-line computation of complexity 0( t . poly( m) ) , where poly is a in time jixed polynomial, after which on-line testing whether KB k CY can be performed 0( 1 KBI . log m) for every KB E KBL,. to that of Theorem 3.2. The amount of time required Proof. The proof is analogous for verifying entailment of Q by all the knowledge bases in the basis is 0( t .poly( m) ), since that each there are only polynomially many such knowledge bases, and we have assumed these basic entailments, we can such entailment tree which is sorted according arrange the to the names of the knowledge bases can be verified in time t. After verifying in a binary the results of the off-line processing in the basis and that contains in each node E Moses, M. TennenholtdArtifcial Intelligence 83 (1996) 229-239 237 information we can evaluate about corresponding of whether the appropriate knowledge base in the basis entails (Y or not. Now, (Y for a given knowledge base by extracting the relevant information the appropriate knowledge bases the conjunction of the values. This would be satisfactory in the basis, and taking since (KBI ‘1 KB2) t= LY iff KBI b cy and KB2 k a. the information Extracting which size of the basis. q is linear in the depth of the tree, which, in turn, can be made logarithmic about each knowledge base in the basis can be done in time in the In Section 4 we presented a useful query which off-line pro- to a fixed knowledge base was effective. We now consider an for which off-line processing of knowledge bases is plausible. Re- language-k-CNF-for is a disjunction of terms each of which contains a conjunction is a DNF formula where each term contains no more than It is not hard the language of all k-DNF formulas. to denote language cessing of queries relative analogous call that a :DNF formula of literals. A k-DNF formula k literals. TNe use k-DNF to show: Theorem 5.3. For every k > 0, the language k-DNF has an eficient disjunctive basis. Proof. The proof is completely reader. (cid:144)i analogous to that of Theorem 4.1. Details are left to the to a DNF (which constitutes a for this part of the study) can be interpreted as a term, and the set of is equivalent learning settings formula. logic formula of propositional that every recall that an example in computational Recall Moreover, major motivation examples can therefore be interpreted queries entries purposes. The language k-DNF contents of a knowledge base, for which off-line preprocessing [ 181) which makes k-DNF an appealing is thus a fairly expressive regarding (see as a DNF formula a concept). (for the purpose of answering some unprescribed In many cases the examples contain language for expressing type of representation is a useful procedure. for our the As was case. In particular, the purely propositional calculus of the form Vxt, the case for Theorem 4.1, Theorem 5.3 can also be extended beyond the predicate function (Again, we allow here as literals not only primitive propositions, predicate calculus.) The result and the proof are the same as in the propositional The key point remains somewhat formulas of . .,x,,), where cp may contain formula. but any term of the case. s:ymbols and relations, but is syntactically the existence of a polynomial of the form of a k-DNF . . . ,xn p(xl,. to universal it applies As in the case of off-line processes of query to a knowledge the use of off-line processing of KB languages when the queries of interest may form of the off-line data for two different systems where we would entails a base, occasionally systems where queries) like to ch’eck whether change must be carefully the related problem c.an be handled efficiently. These are, for example, evaluated. We now show a particular the current examples of a concept) (i.e., combining the concept (i.e., disjunctive basis. languages with respect 238 E Moses, M. Tennenhoitz/Art@cial Intelligence 83 (1996) 229-239 conjunction the off-line data. of queries, for each of which we have already spent much time on obtaining Theorem 5.4. Let a and p be queries, let KBL be a language in which the contents of a knowledge base KB are described, and let KBL’ c KBL be an eficient disjunctive basis for KBL. Finally, let m be the cardinality of (a A p). Then computing the relevant off-line data for KBL with respect to (a A p> given the data with respect to a and the data with respect to /3 can be done in time linear in JKBLLI. Proof. Consider for both a and ,0. The proof follows from the fact that the construction presented in Theorem 5.2. We have such constructions KB+aAP iff KBkaandKBkP. Given by extracting the entailment the above, we can verify for each element K of the basis whether or not K k aAj3 regarding of the (already computed) results and taking the conjunction of cr and the entailment of p by K. 0 6. Conclusions This paper suggests in this approach that the use of off-line processing before the initiation of a system issues for a query that arise naturally that it may be applicable language k-CNF suggests the fact that this approach applies language has the potential of improving in knowledge bases, and is a new approach of query evaluation In particular, the on-line behavior of artificial systems. We investigated to for the case of the in practice. We order to improve in the specific framework of entailment of queries by knowledge bases. We believe the notion of an efficient basis actual performance query optimization. expressive query believe for knowledge theory learning The general bases with respect is also worthy of further investigation. idea of using off-line processing that the connection made in Section 5 between off-line processing of languages to fixed queries and for on-line efficiency can find uses in in the context of AI. One such context is the framework of artificial many other problems for the design of shared multi- social systems, which have been suggested as a paradigm [ 7,8]. An artificial social system can be thought of as a legal system agent environments in for artificial agents. The purpose of this legal system fashion. which the agents are able to pursue to attain a majority of their goals with a limited These rules should enable amount of interference their actions explicitly. The design of a social law can be thought of as an instance of off-line preprocessing whose role is to improve their goals on-line. A bad set of to plan in, or might make the agents arrive at rules may leave the world to resolve conflicts. deadlocks and bottlenecks, A good social and trouble. Motivations examples of the application of off-line design of social laws appear in [ 7,8,14-161. too complex and perhaps need extensive negotiations their individual goals in a fairly compatible and a minimal need to coordinate law will help the agents minimize is to provide an environment the agents’ ability to better attain such on-line the agents in Z Moses, M. Tennenholtz/Art@ial Intelligence 83 (1996) 229-239 239 Acknowledgements This work was supported in part by a grant from the US-Israel Binational Science Foundation. The first author was supported by a Helen and Milton A. Kimmelman Career in part by an Eshkol fellowship Development Chair. The second author was supported and later by the Air Force Office of the Israeli Ministry of Science and Technology, of Scientific Research. Part of the research was carried out while the second author was in the Department of Applied Mathematics and Computer Science at the Weizmann Institute of Science, Stanford University. and part while he was in the Computer Science Department at References ( I 1 F? Agre, The Dynamic Structure of Everyday Life (Cambridge University Press, Cambridge, 12 1 P. Agre and D. Chapman, Pengi: an implementation of a theory of activity, in: Proceedings AAAI-87, 199 I ). Seattle, WA (1987) 268-272. 13 1 J.Y. Halpem and M.Y. Vardi, Model checking vs. theorem proving: a manifesto, in: Proceedings Second lnternatlonal Conference on Principles of Knowledge Representation and Reasoning, Cambridge, MA ( 199 I ) .325-334. 14 I R. Kowalski, Predicate ( 1974) 569-574. in: Proceedings IFIP Conference, Stockholm logic as a programming language, IS I H.J. Levesque, Logic and the complexity of reasoning, Tech. Rept. KRR-TR-89-2, University of Toronto, Toronto, Ont. ( 1989). 16 I J. McCarthy and P. Hayes, Some philosophical intelligence, in: B. Meltzer and D. Michie, eds., Machine intelligence 4 (Edinburgh University Press, Edinburgh, 1969) 463-502. from the standpoint of artificial problems I7 I Y. Moses and M. Tennenholtz, Artificial social systems part I: basic principles, Tech. Rept. CS90-12, Weizmann Institute ( 1990). 18 I Y. Moses and M. Tennenholtz, Artificial social systems, Compur. Art$ Intell. 14 (1995) 533-562. / 9 I Y. Moses and M. Tennenholtz, Off-line reasoning ( 1993) 490-495. for on-line efficiency, Chambery in: Proceedings IJCAI-93, I IO I M. Quil lian, Word concepts: a theory and simulation of some basic semantic capabilities, Behav. Sci. 12 ( 1967) 41 O-430. I I I I M.J. Schoppers, Universal plans for reactive robots in unpredictable environments, in: Proceedings AAAI-87, Seattle, WA ( 1987) 1039-1046. I I2 I T.K. Sellis, Multiple-query I I3 I B. Selman and H. Kautz, Knowledge complilation using Horn approximations, optimization, ACM Trans. Database Syst. 13 (1988) 23-52. in: Proceedings AAAI-91, Anaheim, CA ( I99 I ) 904-909. I I4 ) Y. Shoham and M. Tennenhohz, On the synthesis of useful social laws for artificial agent societies, in: Proceedings AAAI-92, San Jose, CA ( 1992) 276-28 I. I IS 1 Y. Shoham and M. Tennenholtz, On social laws for artificial agent societies: off-line design, Artif: Well. 73 ( 19%) 23 l-252. [ I6 I M. Tennenholtz, On computational social laws for dynamic non-homogeneous social structures, JETAI 7 ( 199s) 379-390. I I7 I M. Tennenholtz and Y. Moses, On cooperation in a multi-entity model, in: Proceedings IJCAI-89, Detroit, MI (1989) 918-923. I I8 I L.C. Vahant, A theory of the learnable, Commun. ACM 27 (1984) 1134-l 142. 