Artificial Intelligence 104 ( 19YX) 2 I I-764 Artificial Intelligence Generating multiple new designs from a sketch Thomas F. Stahovich a-‘,*, Randall Davis b, Howard Shrobe b Received 13 August 1997; received in revised form 2 I May I YY8 Abstract that a single transforms a program We describe called SKETCHIT device a into multiple families of new designs. It represents each of these families with a “BEP-Model”. the desired behavior. parametric model augmented with constraints The program that captures mechanical behavior while abstracting away its implementation. The program employs a then uses a paradigm of abstraction and resynthesis: library of primitive mechanical Elsevier Science B.V. All rights reserved. that ensure the device produces space (qc-space). is based on qualitative configuration a novel representation to map from qc-space to new implementations. C 1YYX sketch of a mechanical the initial sketch into qc-space, interactions it abstracts &ww&; Sketch understanding; Design generalization: Mechanical design: Qualitative geometric reasoning 1. Introduction SKETCHIT is a computer program capable of taking a single sketch of a mechanical device and generalizing stylized sketch of the design and a description of the desired behavior; from this it generates multiple it to produce multiple new designs. The program’s families of new designs. input is a The program does this by first transforming the sketch into a representation the behavior of the original design while abstracting away its specific implementation. program representation to multiple new families of implementations. then uses a library of primitive mechanical interactions that captures The to map from this abstract This representation, which * Corresponding ’ Support author. Email: stahov@andrew.cmu.edu. for this project was provided by the Advanced Research Projects Agency of the Department of Defense under Office of Naval Research contract NO00 14-9 I-J-4038. 0004.3702/98/$ PII: SOOO4-3702(98)00058-7 - see front matter 0 1998 Elsevier Science B.V. All rights reserved 712 FIN. I. A pencil sketch of a circuit breaker. we call qualitative configuration tasks. space, is the key tool allowing SKETCHIT to perform its that ensure the geometry produces the desired behavior. ’ Our program The program represents each of the new families of implementations with what we call a a parametric model augmented with thus behavior ensuring parametric model (“BEP-Model”): constraints takes as input a single sketch of a device and produces as output multiple BEP-Models, each of which will produce the desired behavior. As we illustrate below. SKETCHIT’S ability to generalize a single sketch into multiple for a variety of reasons. During conceptual design, a large number of alternatives. families of new designs for example, a high premium SKETCHIT aids in this case by automatically generating a large variety of designs. Later in the design process SKETCHIT can assist the designer in adapting an initial design to meet other design requirements such as those on size or performance. is placed on examining is useful The next section uses the design of a circuit breaker to illustrate from the program. Later, Section 9 uses the design of a dwell mechanism device) meet specific performance to illustrate how the program assists the designer requirements. the input to and output (yoke and rotor to in refining an initial design in action designing the desired behavior. We conclude In this section we show SKETCHIT a circuit breaker. We begin input: a stylized sketch of the device and a state transition diagram with the program this section with three of the new designs that describing SKETCHIT produces when it finally maps the circuit breaker’s qc-space back to geometry. for a circuit breaker. In normal use, flows from the lever to the hook; current overload causes the bimetallic hook to the current flow. After the hook cools. Fig. 1 shows a pencil sketch of one implementation current heat and bend, releasing pressing and releasing the lever and interrupting the pushrod resets the device. 2 A parametric model i\ a geometric model in which the shapes are controlled by a set of parameters. Fig. 2. Stripping away the non-functional part\ of Fig. I. ! actuator _-____d pushrod (fixed surface) lever ” '16 ’ f2h f3 f4 p t 4 hook: bimetallic strip Fig. 3. Stylized sketch of the circuit breaker as actually input to program. Engagement faces are bold lines. The actuator applied to the pushrod represents the reset motion imparted by the user. For our convenience we use labels to refer to engagement pairs: (fl f6) = push-pair. (f2 f5) = can-follower. (f3 f3) = lever-stop. tf7 fX) = puahrod+top. SKETCHIT is concerned with only the functional parts of the sketch: springs, actuators, kinematic joints, and the faces where parts meet and through which force and motion are transmitted. Fig. 2 shows what is left when we peel away all but the functional parts of the in the stylized sketch that pencil sketch. This is the sort of information SKETCHIT takes as input. that is contained Our software currently provides a mouse driven sketching sketches.’ Fig. 3 shows the stylized version of the circuit breaker interface for creating stylized that the designer 3 Eventually we will develop a pen based sketching to sketch directly on a digitizmg pad with a stylus. The designer will draw the usual sort of sketch (i.e.. like the one in Fig. 1) and then annotate it with the stylus to indicate the functional part\. the designer allowing interfxe 214 ZE Stuhmkh et ul. /ArtiJicid Intelligence 104 (1998) 21 i-264 lever-stop pushrod-stop hook=cold Hook Heats push-pair pushrod-stop 1 2 hook=hot Reset 3 Hook Cools push-pair pushrod-stop hook=cold ii Fig. 4. The desired behavior of the circuit breaker. (a) Physical of the three states. the hook is either at its hot or cold neutral position. interpretation. (b) State transition diagram. In each creates with this interface. ’ Line segments are used for part faces; focuses on just the part-faces springs, joints, and actuators. SKETCHIT consideration of the connective geometry (the surfaces that connect make complete solids) is put off until later in the design process. The designer annotates the stylized sketch to indicate which pairs of faces are intended to engage each other (the annotations icons are used for that are functional; are listed in the table contained in the figure). the functional faces to The designer describes the desired behavior of a device transition diagram. Each node in the diagram that are relaxed. s The arcs are the external and the springs Fig. 4(b), for instance, describes how the circuit breaker should behave heating and cooling using a state to SKETCHIT is a list of the pairs of faces that are engaged that drive the device. in the face of the hook and pressing the reset pushrod. inputs that SKETCHIT Fig. 5 shows a portion of one of the BEP-models derives from the sketch of the circuit breaker and the desired behavior. The top of the figure shows the parameters that define the sloped face on the lever (f2) and the sloped face on the hook (f5). The bottom shows the constraints the overall desired behavior: the hook down until the lever the hook springs back to its rest position. As moves past the point of the hook, whereupon one example of how the constraints enforce the desired behavior, this pair of faces plays its role in achieving the lever clockwise pushes the ninth equation, i.e., moving that ensure 0 > R14/TAN(PSI17) + H2_12/SIN(PSIl7). constrains This in turn ensures always increases the deflection of the hook. the geometry so that the contact point on face f2 never moves tangent to face f5. rotation of the lever that when the two faces are engaged, clockwise The parameter values shown in the top of Fig. 5 are solutions of the desired behavior. The values the BEP-Model, hence this particular geometry provides were computed by a program called DesignView, a commercial parametric modeler based equation on variational geometry. to interactively solver which is also capable of drawing lines and arcs.) Using DesignView (For our purposes, DesignView is simply a non-linear to the constraints 1 In the remainder of this document, we use the term sketch to refer to the kind of stylized sketch shown in Fig. 3. 5 The pairs of faces not listed at a node are by default disengaged, the springs not listed are by default not relaxed. I L15 0.142 PSI17 134.702 Hi-11 > 0 HZ-12 > 0 S13 > Hl_11 L15 > 0 PHI16 > 90 PHI16 < 180 PSI17 > 90 PSI17 < 180 0 > R14/TAN(PSI17) + H2_12/SIN(PSI17) R14 = SQRT(S13-2 + L15-2 - 2*S13*L15*COS(PHI16)) Fig. 5. Output from the program parameter parameters and constraints IS the current value of that parameter. Bottom: for faces f2 and f5 are shown (a BEP-Model). Top: the parametric geometry; the decimal number next to each the constraints on the parameters. For clarity, only the 0 I f6 fl \ n fa // f3\” I \f5 f4 Fig. 6. Another solution to the BEP-Model of Fig. 5. Shading to flesh out the components. This solution shows that neither the pair of faces at the end of the lever (f2 and f.3) nor the pair of faces at the end of the hook (f4 and f5) need be contiguous. indicates how the faces might be connected adjust parameter values we can easily explore the family of designs defined by the BEP- these Model. Fig. 6. for example, the parameter values satisfy the BEP-Model, desired behavior. As this example the family of designs defined by a BEP- Model includes a wide range of design solutions, many of which would not be obtained with conventional even this rather unusual geometry provides to this BEP-Model. Because shows another solution approaches. illustrates, 216 TF: Stahovich rt al. /Artificial Intelligence IO4 (1998) 211-264 Ah.waction QC-Spaces BEP-models BEP-11 BEP-12 BEP-21 BEP-22 BEP-31 BEP-32 ? \ Implementa’ns IMP-111 IMP-112 1 1 a IMP-311 IMP-312 IMP-313 .decr: cm~traint tolution (SKETCH) Fig. 7. Overview of SKETCHIT’S abstraction or more qc-spaces, each of which can produce one or more BEP-models. solutions to its set of constraints. and instantiation process. The initial sketch is abstracted into one each of which may have one or more hook Fig. 8. A design variant obtained by replacing the rotating lever with a translating part hook \t Fig. 9. A design variant obtained by using different shown. the pushrod is pressed so that the hook is just on the verge of latching the lever. implementations for the engagement faces. In the position TIT Stahovich rt al. /Art@ial Intelligence IO4 (1998) 211-264 217 and by selecting different types (rotation or translation) by selecting different motion Figs. 5 and 6 show members of just one of the families of designs for the circuit breaker. SKETCHIT produces other families of designs produces other BEP-Models) components (Fig. 7). For example, Fig. 8 shows a design obtained by selecting a new motion the lever: in the original design shows an example of selecting different In the original f2 is roughly perpendicular motions are parallel. Conversely, now perpendicular. that the program (i.e., for the faces type for it translates. Fig. 9 faces: engagement pair, the motion of face to the motion of face f.5; in the new design of Fig. 9, the the motions of faces fl and f6, originally parallel, are for the pairs of interacting for the pairs of interacting of the cam-follower in the new design the lever rotates, implementations implementations implementation 2. Representation: qc-space SKETCHIT’S task is to generalize a single design into multiple new designs. The new designs should provide the same behavior as the original but employ new implementations. Our approach the original design while abstracting opportunity to this task was to develop a representation away its particular that captures implementation, to select new implementations. the behavior of the providing For the class of devices that SKETCHIT is concerned with, rigid body devices with inertia, slipping and holds For many the components. the overall behavior It is not possible to determine is determined by the interactions the behavior of a single component the other components with which it interacts. For example, the component springs and negligible between without knowing in Fig. 10 can exhibit a wide range of behaviors depending on what it interacts with: if it interacts with a broom handle and a stop as in Fig. 1 l(a) its behavior friction which prevents translating flat face as in Fig. 1 l(b) it provides cam and follower behavior. such as classical transistors are typically to electrical the possible kinds of behavior a given component can exhibit. For exhaustively enumerate example, idealized as having just a few distinct operating modes. However, the kinds of devices we are considering do not afford this same compactness of can exhibit a very large number of possible description. A given mechanical behaviors because it two of possible kinds of behavior of the curved, could pivoted object.) Thus, instead of attempting to represent behavior at the level of individual components, we instead focus directly on the interactions between components. is a near infinite variety of other components with which If it interacts with a (Fig. 11 shows just types of devices, is self energizing it is possible the handle component in place. interact. circuits, there Fig. 10. A curved object with a pivot 218 T:F: Stohovich et al. /ArtiJicial Intelligrnce 104 (IWK) 2/l-264 Fig. 1 I. (a) A broom handle holder. (b) A cam and translating flat-face follower. Our search for a representation began with configuration space (c-space), which used to represent the behaviors we are interested commonly representing their implementations, implementations. We discovered the desired effect; hence we call SKETCHIT’S configuration space” (qc-space). this kind of behavior. But, while c-space in, it does not adequately and thus does not provide adequate opportunity that abstracting c-space into a qualitative behavioral representation is is capable of abstract away for selecting new form produces “qualitative This section begins with a description of c-space, then describes how we abstract c-space to produce qc-space. 2.1. C-space Consider the rotor and slider in Fig. 12. If the angle of the rotor L/k and the position of the slider Us are as shown, the faces on the two bodies will touch. These particular values of r/R and Us are termed a conjiguration of the bodies in which the faces touch, and can space plane (cs-plane), shown be represented as a point in the plane, called a configuration in Fig. 13. If we determine all of the configurations of the bodies in which the faces touch and plot points in the cs-plane the corresponding space curve (cs-curve). The shaded region “behind” configurations of the curve represents free space, configurations the curve indicates blocked space, in which one body would penetrate the other. The unshaded region “in front” (Fig. 13) we get a curve, called a configuration in which the faces do not touch. the configurations In general, c-space represents of a device in which the bodies do not touch (free space), the configurations (blocked free space), and the configurations and blocked space). The axes of the c-space are the position parameters of the bodies; the dimension of the c-space is the number of degrees of freedom of the set of bodies. in which the bodies would interpenetrate in which the bodies just touch (the boundary between reasoning To simplify geometric in c-space, we assume that devices are fixed-axis. That that each body either translates along a fixed axis or rotates about a fixed is, we assume axis. Hence in our world the c-space for a pair of bodies (i.e., a “pairwise c-space”) will always be two-dimensional and the boundary between blocked and free space will always be a curve (a cs-curve). T.E Stuhovich et al. /Art$cial Intelligence 104 (1998) 21 I-264 219 Fig. 12. A rotor and slider. The slider translates horizontally. The interacting faces are shown with bold lines. I Rotor Angle. UR Fig. 13. The c-space of the rotor and slider. The inset figures show the configuration corresponding to selected points on the cs-curve. of the rotor and slider Although a pairwise c-space will always be two-dimensional, its topology will be planar If one of the bodies if both rotate through full if the rotor and slider in Fig. 12 start from (with the slider far from the rotor), and the rotor angle increases the device will be back in its initial configuration. only if both bodies either rotate less than a full revolution or translate. rotates through full revolutions, revolutions some initial configuration through a full revolution, happen, form a cylinder, as shown in Fig. 14. the right edge of the cs-plane must wrap around and connect For this to to the left edge to it will be a torus. For example, the c-space will be a cylinder; 220 Fig. 14. If the rotor turns through a full revolution, the c-space becomes a cylinder. SKETCHIT represents non-planar, pairwise c-spaces by flattening them out into planes (see Section 4.3.1). ’ We use the term cs-plane those that are naturally planar as well as those that are and imposing periodic boundary conditions to refer to all pairwise c-spaces: flattened out representations of non-planar c-spaces. 2.1. I. Representing springs, actuators, and,fixed surjkes The devices that SKETCHIT is intended interactions with fixed surfaces section describes how c-space represents in addition to handle may contain springs, actuators, and faces described above. This to the moving the behavior of these other kinds of components. the device in Fig. 15, consisting of two blocks, A and B, that interact through faces. A spring is attached to block A, an actuator (an external to block B, and there is a fixed surface with which B may Consider a pair of sloped engagement motion source) is attached collide. (assume in the positive direction, to obtain a representation is a point on the cs-curve the techniques of the previous section the faces of A and B. In the configuration We start by applying of the interaction between touching, and thus this configuration If A moves a small distance the positive direction in this new configuration, this fashion we obtain a diagonal cs-curve with positive slope, as the cs-plane shows. If the faces are touching and A moves fixed, the faces will penetrate each other. Hence, the space to the right of the cs-curve blocked space. (Alternatively, the faces will penetrate. Hence, the space below the cs-curve we compute shown, the faces are for the engagement pair. in is turned off). The faces will still be engaged in in Fig. 15 in the positive direction while B is held is if B moves in the negative direction while A is held fixed. is blocked space. Either way, and hence we have another point on the cs-curve. Continuing it will push B a small distance the same blocked space.) the actuator Next consider the spring will be at its neutral position the spring attached to block A. At some position of block A (call it np). (i.e., the position at which the spring is relaxed). ’ We have implemented procedure\ for handling cylindrical pairwise c-spaces but not toroidal ones. However. the technique5 for handling toroidal c-spaces are a direct extension of those we use for cylindrical c-space\. T.E Stahovich et al. /Art$cial Intelligence 104 (1998) 211-264 221 Fig. 15. A simple mechanical system and its configuration space. the neutral position depends only on the position of A, it can be viewed Because cs-plane as the vertical line UA = np. in the The neutral position of a spring always appears as a vertical or horizontal line in the in SKETCHIT’S world a spring always has one end fixed, and hence the cs-plane, because relaxed state of a spring depends on the position of only one body. the motion In SKETCHIT’S world, actuators apply a motion the body reaches a this the actuator turns off, no longer applying any force or motion to the body. Because limit line in particular position called position the motion similarly appears as a vertical or horizontal Fig. 15. limit of an actuator depends on the position of only one body, a motion line in the cs-plane, e.g., the horizontal limit of the actuator. When the body reaches to a body until Finally, consider turns off.) Because the interaction between the fixed surface and block B. (Because the actuator pushes B away from the fixed surface, this interaction will not happen until after (the fixed the actuator line in the cs- surface does not move), the corresponding plane. Because the fixed surface limits B’s motion in the positive direction, there is blocked space above the cs-curve. As Fig. 15 illustrates, this interaction depends only on B’s position a cs-plane may contain both finite cs-curves is an infinite horizontal cs-curve the a pair of faces between interaction representing spring neutral positions, motion limits of actuators, and interactions with fixed surfaces. As a means of differentiation, we use solid lines for finite cs-curves and dashed lines for infinite boundaries. For convenience we refer to both finite cs-curves and infinite boundaries as cs-curves. (the diagonal cs-curve), and representing infinite boundaries 2. I .2. Computing motion using c-space The previous sections described how c-space represents the behavior of all the different is how to determine kinds of parts that compose the devices in our world. Our next concern the overall behavior of a device from the description of the part behaviors. For mechanical devices composed of rigid bodies and springs, time history of the motion of each rigid body in the device. the overall behavior is characterized by the 222 T:F: Stuhovich et al. /Art$cial Intelligencr 104 (1998) 2/i-264 Fig. 16. Force F pushes the slider to the left. We compute the time history of the motion by applying Newton’s in c-space using what we call the particle metaphor. We illustrate the process with the device in Fig. 16 consisting of a rotor and slider. To provide a point of reference, we first compute from their structure. Then, we the motion of the rotor and slider by reasoning directly the motion directly to compute this time using the particle metaphor repeat the process, from the c-space description of the device. laws directly Imagine that the rotor and slider are in the initial positions shown in Fig. 16 and that a force (F) pushes the slider to the left. As it moves, the slider will strike the rotor and the rotor and slider will begin to push it out of the way. Assuming remain in contact, and the slider will continue the slider will push the rotor far enough that the two parts disengage. Assuming of the rotor is inertia-free, to push the rotor out of the way. Eventually the motion the rotor will then stop and the slider will continue the collision is inelastic, to move. We can describe the motion of the rotor and slider as a sequence of configurations the trujecton, to the motion described above. In the initial configuration in c-space. We call this sequence trajectory corresponding rotor and slider are not touching, hence the initial configuration motion begins, only the slider moves, and the trajectory the rotor, the configuration curve. Once the engagement vertical. through c-space. Fig. 17(a) shows the the is in free space. When the is vertical. While the slider pushes the is once again is a point on the cs-curve and thus the trajectory is broken, only the slider moves; the trajectory follows In the physical world forces cause bodies to move, cause the configuration the configuration Cs-curves act like physical surfaces that deflect the particle. to change. To compute dynamics directly in the cs-plane and apply forces directly as a particle the c-space view is that forces from c-space we treat to this particle. Using the particle metaphor we can now compute the motion of the rotor and slider to the structure of the device. Fig. 17(b) directly from their c-space, without any reference shows the particle we use to represent of the rotor and slider. The force applied to the slider appears in the cs-plane as a force in the direction of the slider’s c-space (vertical). Similarly, any forces applied to the rotor would appear in the cs-plane coordinate the configuration TF Stahovich c’t 01. /Art$cial lntrllipwcr 104 (1998) 211-264 223 I Rotor Angle, U, b I I Rotor Angle, U, (cid:228) Fig. 17. (a) The motion of the rotor and slider can be represented as a trajectory configuration is shown as a dot. (b) The motion of the rotor and slider can be computed by treating as a particle with forces applied to it through c-space. The initial the co&ctration A 1, Rotor Angie, U, Rotor Angle, U, -- Fig. IX. (a) The trajectory of the rotor-slider device if collisions are elastic. (b) The trajectory of the rotor-shder device if there is appreciable inertia. in the direction of the rotor’s c-space coordinate of the rotor and slider defines the initial location of the particle. The net force on the particle causes it to move vertically, until it strikes the cs-curve. The cs-curve deflects the particle as it continues the particle reaches the end of the cs-curve and once again moves directly upward. (horizontal). The initial configuration to move upward. Eventually, This example to compute possible description. illustrates a general principle: using it is always the motion of the bodies in a device directly from the device’s c-space the particle metaphor, awumptions. is inertia-free, As the example about the motion of bodies. We assume that collisions are inelastic, (we did not explicitly mention Simplifying ing assumptions motion frictionless assumption in this example). elastic, the rotor would bounce off the slider and the trajectory Fig. 18(a). If there were appreciable in Fig. 17(b) demonstrated, we make simplify- that the the slider and rotor were in c-space might look like to move after it disen- and that contacts are frictionless inertia, the rotor would continue If the collision between 224 T.:F: Stahovich et al. /Art$cial Intelligence 104 (199X) 2/l-264 gaged the slider, producing a trajectory friction between device would jam. the rotor and slider, the slider might not be able to push the rotor and the like the one in Fig. 18(b). If there were substantial We make these assumptions about the motion of bodies because through c-space and hence simplify are not overly restrictive: Sacks and Joskowicz they greatly simplify the trajectories. [39] examined 2500 and found that 80% could be modeled accurately reasoning about in a catalog of mechanisms the trajectories These assumptions mechanisms with these assumptions. 2.2. Abstracting to q-space C-space has many of the properties we require of a behavioral the behavior of all of the components represent to reason about behavior, allowing us to compute from the c-space description of its parts. it can in SKETCHIT’S domain, and it can be used the overall behavior of a device directly representation: To facilitate synthesizing new designs we require a behavioral the design by abstracting representation with the away one other essential property: implementation of the behaviors. it must generalize C-space does this to a small degree. Any pair of faces that produces in Fig. 13 will produce as the original pair of faces in Fig. 12. For example the slider’s face can be extended upward. Thus, each cs-curve represents a family of interacting faces that all produce the same behavior. (i.e., the same dynamics) the same behavior the cs-curve the numerical cs-curves We can, however, identify a much larger family of faces that produce the same behavior to obtain a qualitative c-space. In qualitative c-space by abstracting slopes and the locations of the (qc-space) cs-curves are represented by their qualitative curves relative to one another. By qualitative slope we mean the obvious notion of labeling monotonic curves as diagonal (with positive or negative slope), vertical, or horizontal; by relative location we mean relative location of the curve end points. 7 of slope captures To see how even a qualitative the behavior, we return is that the slider can push the rotor: positive displacement essential to the rotor and slider. The essential behavior of this about device of the slider causes positive displacement of the rotor, and negative displacement of the rotor causes negative in this displacement their cs-curve must be a diagonal fashion, any geometry that maps to a diagonal curve with positive slope will produce the same behavior as the original design. of the slider. If the motions of the rotor and slider are to be related curve with positive slope. Conversely, representation something Their are eight types of qualitative cs-curves curves always correspond to what we call “stop behavior”, the position of another. Each qcs-curve represents a family of monotonic cs-curves have the same qualitative slope. (qcs-curves) as shown in Fig. 19. Diagonal to pushing behavior; vertical and horizontal curves correspond in which the extent of motion of one part is limited by that all In c-space cs-curves and infinite boundaries have absolute locations, but in qc-space locations are relative. A pair of landmark values defines the location of each end point of ’ We restrict qcs-curves to be monotonic to facilitate qualitative simulation of a qc-space. See Section 5 TIT Stahovich et al. /Art$cial lnrvlligence lo-1 (19YK) 211-264 225 GBCD E FGH*Q Fig. 19. There are eight types of qcs-curves. For ~on~enie~~e, the diagonal curves are drawn as straight they represent any diagonal, monotonic curve. lines. but a qcs-curve; ane landmark value defines the axis crossing of each infinite boundary. The ordering of the landmark values encodes the relative locations of all qcs-curves and infinite bound~ies. 2.2,1. Qc-space a design space for behavior An important consequence of generalizing is that the qualitative each cs-curve to a family consisting entirely locations completely slopes and the relative the first order dyn~ics of the device. By first order dynamics we mean the of monotonic curves dateline dynamic behavior obtained when the motion is assumed to be inertia-free and the collisions to be inelastic and frictionless. 8 Thus qc-space captures alE of the relevant are assumed It is a physics of the overall device, and hence serves as a design space for behavior. particularly slope it has only two properties: qualitative and relative location. important convenient design space because is that it is constructed feature of qc-space Another types of qcs-curves to new implementations from a very small number in Fig. 19. As a consequence using precomputed of building blocks, viz., the different we can easily map from qc-space back implementations for each of the building blocks. We show how to do this in Section 8. 3. System the abstraction Fig. 20 illustrates that SKETCHIT uses to and resynthesis transform a sketch into multiple new designs. In the abstraction phase SKETCHIT reverse engineers and generalizes space representation phase SKETCHIT generates multiple impieme~tations for the design by working from the qc-space representation the original design, producing a qualitative configuration in the resynthesis of the design. it created. paradigm SKETCHIT uses abstraction to simplify enormous amount of geometric detail, much of which is irrelevant abstraction process strips away the irrelevant detail to expose what is essential. the reasoning process: a sketch contains an to the behavior. The * “Inertia-free” refers to the circumstance to the other terms, perhaps due to high friction. in which the inertia terms in the equations of motion are negligible low mass, or large applied forces. One important is also called is that there are no oscillations. This set of physical assumptions compared property of inertia-free motion quasi-statics. 226 TIT Stuhovich et ul. /Artijicial Infelligencr 104 (199X) 21 l-264 Fig. 20. The problem solving paradigm Fig. 21. Overview of the SKETCHIT syslem Fig. 21 illustrates SKETCHIT’S implementation. Reverse engineering and generalization using generate and test. The qc-space generator produces candidate of the sketch and passes them to the simulator. Each candidate pair should provide. The first representations is a guess at what behavior each engagement is an abstraction of the numerical c-space of the sketch; the rest are modifications are implemented qc-space qc-space candidate of the first. The simulator computes compares to the desired behavior described continues until the tester finds all qc-spaces the overall behavior of each candidate, which the tester then in the state transition diagram. This process that behave as desired. 9 The synthesis process is implemented with two modules. The first selects a motion type for each component; the second selects a geometric implementation for each engagement ’ Section 4 describes the range of candidates that the program considers TX Stahovich et al. /Artijicial lntelligencr IO4 (1998) 21 l-264 221 pair from a library of interactions. Each library entry contains a pair of parameterized and constraints assembles Model. faces that ensure that the faces implement a specific kind of behavior. SKETCHIT into a BEP- the parametric geometry and constraints from the library selections The bulk of SKETCHIT’S effort is spent reverse engineering and generalizing new designs by using a library of interactions, and computationally inexpensive. the design. the Because synthesizes synthesis process is straightforward the program 4. The qc-space generator The first step in reverse engineering and generalization is the generation of a qc-space the numerical c-space of the slope of each qcs-curve by abstracting from the sketch. The qc-space generator begins by computing sketch, then abstracts each numerical cs-curve the qualitative numerical cs-curve: points of the cs-curve and matches gets the relative the numerical c-space diagram. the numerical it computes locations of the qcs-curves directly from the locations of the cs-curves slope of a straight line connecting the end this to one of the eight curves in Fig. 19. The program in into a qcs-curve. The generator determines the slope of the corresponding in the relative in the candidate qc-space the push-pair curve and the pushrod-stop location of landmark E (the abscissa value for the intersection from specific numerical curves to qualitative in Fig. 22 there As with any abstraction process, moving curves can introduce ambiguities. For example, is ambiguity between curve). This value is not ordered with respect to landmarks B and C (the abscissa values of the end points of the lever-stop and In qc-space E may be less than B, greater cam-follower than C, or between B and C, lo while in the numerical c-space E could be compared to B and C. When the generator encounters all possible interpretations, Physically, passing each of them to the simulator. the configuration its stop; the ambiguity landmark E denotes is against curves in the hook-lever cs-plane). this kind of ambiguity, it enumerates is whether the lever in which pushrod and the pushrod configuration (B < E < C), or (c) to the right of the hook (C < E). the lever is (a) to the left of the hook (E < B), (b) contacting the is against in this particular the hook is that it offers a means of generalizing rather than taking the locations directly from the unambiguous There are several reasons why SKETCHIT computes all possible these landmarks, c-space. One reason locations may be just one of the possible working designs; by enumerating generate a wide range of design alternatives we want to generalize each cs-curve largest possible family of monotonic cs-curves. Ambiguity single curves into families of curves. pay for generalizing locations of numerical the original the program can find others in order to to the is the price we and testing all the possible relative locations. Said differently, in the locations the design: relative A second, perhaps more interesting locations relative sketch. These flaws arise from interactions is because this enables reason the program enumerates and tests all possible in the original for flaws correct, but whose global it to compensate that are individually “I WC do not consider the case where E = B or E = C 228 T.E Stahovich rt al. /Artijicial Intelligence 104 (1998) 211-264 1 Hook Pushrod ‘osition F ISI ;21 LI 2; motion limit 2 1 -__‘,‘_;6___________‘____ c %. ‘I. q \ oushrod-stoo _______r ,___‘__.._,__1 _____L________ hook=hot \ C D Lever Angle t ‘A E D Lever Anglt for the circuit breaker. Only Fig. 22. A candidate qc-space Pushrod-Hook qcs-plane provides no additional the neutral positions of the hook corresponding and “pushrod-spring” “motion-limit” faces from Fig. 3. (Diagonal are monotonic.) (The information.) The “hook = cold” and “hook = hot” curves are to its normal and over-heated curves are the neutral positions of the springs attached temperatures. The “lever-spring” to the lever and the pushrod. The the lines are drawn straight for convenience, but they can have any shape as long as they curve is the extent of the reset stroke. The remaining four curves are the interactions between two of the three qcs-planes are shown, is incorrect. For example, arrangement the interaction between and its stop may all be individually the left, so that the lever always remains of these three interactions prevents enumerating possible qcs-curves. SKETCHIT will correct this flaw. the pushrod and the lever, and the interaction between in Fig. 3 the interaction between the lever and hook, the pushrod correct, but the pushrod-stop may be sketched too far to to the left of the hook (i.e., the global arrangement the lever from actually locations for the intersection between interacting with the hook). By the pushrod-stop and push-pair the relative (bodies, springs, actuators, and engagement pairs); As the generator abstracts the numerical c-space, it preserves four properties: the number slopes of components between locations of the cs-curves; of the cs-curves; the cs-curves, because we take these properties as the intended meaning of the sketch. these properties Consequently, constant. for a sketch consists in the abstraction. The simulator of the ambiguities of all possible and tester identify which of these interpretations inherent produce the desired behavior. t’ The set of candidate qc-spaces as the program generates the generator produces and the intersections the qualitative interpretations alternative it holds designs, 4. I. Preserving intersections 4.1. I. Intersections of$nite qcs-curves If two finite cs-curves intersect in c-space, we want to ensure intersect qcs-curves the qcs-curves will naturally explicit constraints are necessary in qc-space. If one of the cs-curves intersect. However, if one or both of the cs-curves to ensure intersection. that the corresponding is horizontal and the other vertical, is diagonal, ’ ’ We could have used another definition by choosing from the numerical c-hpace. By preserving more properties we would generate a narrower range of design alternatives, and vice versa. to preserve more or fewer properties TF: Stahovich et al. /Artijicial Intelligence IO4 (1998) 21 I-264 229 (4 03 Fig. 23. (a) Depending on their particular ends of Q 1 and Q2 are removed, the curves intersect at a common end point. shapes, the qcs-curve may or may not intersect. (b) When the usele5r Consider the intersection of the two diagonal qcs-curves Ql and Q2 shown in Fig. 23(a). Ql and Q2 can have any shape as long as they are monotonic. Depending on the actual if Ql curves up (thin line) and shape, the curves may or may not intersect. For example, Q2 is straight, the curves will miss each other. We use a trimming operation to ensure that finite qcs-curves curves intersect, one end of each curve will be useless because of the other curve (i.e., during simulation of the curve). In the example in Fig. 23(a), the portions of the curves below the intersection If we discard them there will be no change in the behavior point are the useless portions. can never reach these portions. However of the device because to intersect because (Fig. 23(b)). l2 intersect. When two such it lies in the blocked space in qc-space cannot reach that part the two curves now have a common end point, they are guaranteed the device configuration the trajectory 4.1.2. Ensuring thatjinite qcs-curves do not intersect qcs-curves If two finite cs-curves do not intersect in c-space, we want to place constraints on in qc-space. Explicit the corresponding are necessary only when the bounding boxes of the curves overlap, because constraints otherwise of intersection. Diagonal curves are the only kinds of curves that can have overlapping bounding boxes and still not intersect. Hence, our problem reduces to the single case of diagonal curves with overlapping bounding boxes. that they do not intersect there is no possibility to ensure in Fig. 24 to show how SKETCHIT (A, B) of curve Ql We use the example constraints. End point curve, QT. SKETCHIT must ensure facilitate points are established by passing a vertical and intersecting constraints expressed as: A’ < B and B’ > A. These constraints are then added to the BEP-Model. box of the other lies above and to the left of Q2. To (A, A’) and (B’, B), on Q2. These line through point (A, B) are constructs non-intersection them with Q2. Using line and a horizontal two special points, the non-intersection this, SKETCHIT that this point the bounding these points, lies inside labels I2 In the examples we tried, none of the curves required trimming, and hence we did not implement a subroutine to trim qcs-curves. However, this is a straightforward extension of the program. 230 u, 4 Fig. 24. Two non-intersecting, finite qcc-curves with intersecting bounding boxes 4.1.3. Intersections with injinite boundaries intersect If a pair of infinite boundaries qc-space. Hence SKETCHIT intersections during abstraction. in c-space, need not perform any special operations they will naturally intersect to preserve in the 4.2. Enumerating possible locutions of intersection points Even though SKETCHIT preserves intersection points, the locations of intersections may curve the push-pair curve and pushrod-stop the latter curve is an infinite boundary), but in qc-space. For example, to intersect (because still be ambiguous in Fig. 22 are guaranteed as we described above, the location The efficient way to handle is ambiguous. this kind of ambiguity location of the intersection. the bounding box of the diagonal curve. When and if this happens is to wait and see if the simulator through needs the precise the qc-space enters locations of the intersection point and branch simulator can enumerate all of the possible to consider each possibility. about the location (i.e., the trajectory never enters the bounding box), the precise location has no influence on the overall behavior of the device. It will need this if the trajectory If the simulator never requires information For example, if the trajectory Fig. 22, the simulator must enumerate this qcs-curve and the infinite boundary are three possible would have to branch the current candidate qc-space locations reaches the possible the bounding box of the push-pair qcs-curve in locations of the intersection between for the pushrod-stop. As described above, there (A < E < B, B < E < C, and C < E < D) and the simulator to consider all three. In effect, the simulator would be specializing into three new candidates. If the trajectory never reaches the bounding box, the program need not branch because in this the same behavior. Hence, the set of new, specialized candidates will all produce case, by leaving the location ambiguous, to compute specialized qc-spaces). the behavior of a set on unambiguous the program would be using a single simulation candidate qc-spaces (i.e., the set of new, TE Stahovich et a/. /Art$cial lntelligencv 104 (1998) 2/i-264 231 4.3. Implementation notes The previous sections described and locations of intersection points. The current version of the program enumerating possible actually uses simpler techniques, which although inefficient, are much easier to implement. and vertical The program extends horizontal efficient methods for preserving intersections lines (just as we did in Fig. 24) and intersects qcs-curve qcs-curves. The program creates a new landmark Similarly, boundary and a diagonal qcs-curve. the program creates a new landmark through the end points of each these with each of the diagonal points. for each intersection between an infinite for each of the intersection The coordinates of an intersection point are defined by one old landmark (i.e., a that denotes the end point of a finite qcs-curve or the axis crossing of an infinite landmark boundary) and one new landmark. Thus, the intersection points for any particular qcs-curve are partially ordered: those points whose x-coordinate form one ordered set. those whose y-coordinate form another. The program enumerates all possible relative locations of the intersections by simply enumerating of interleaving orderings). the elements of these two sets (while, of course, maintaining all possible ways the two partial is an old landmark is an old landmark After enumerating all possible out those choices that do not satisfy the non-intersection then simulates and tests all of the remaining program completely unambiguous. locations of the intersection points, the program filters constraints described above. The is choices. Each of these choices 4.3.1. Periodic boundary conditions the periodicity of the cylinder. To do this, it first constructs boundaries As Section 2.1 described, a pairwise qc-space will wrap around of the bodies rotates more than a full revolution. During abstraction, preserve numerical cs-curves. The program the cylinder) and unrolls it into a plane. Finally, the program abstracts this plane, including the boundaries and their intersections, if one the generator must in the them and the (which coincide on then cuts the cylinder along the boundaries c-space at 0 and 2n and computes into a qcs-plane. the intersections into a cylinder between During simulation, when the trajectory simply moves the simulator reaches 2n the simulator changes the angle to 0, or vice versa). the trajectory through the plane reaches one of the boundaries, the angle to the other boundary (i.e., when The yoke and rotor device which we will discuss in Section 9 provides an example of c-space. Fig. 36 shows the flattened out version of the qc-space SKETCHIT the and the cylinder. Curves Al and B2 intersect hence one piece of each of these curves is just above the 0 boundary a cylindrical obtains by adding boundaries boundaries, another piece is just below the 2rr boundary in the flattened out version. and unrolling 4.3.2. Repuiringjiaws By enumerating in the sketch system can repair a limited arrangement of interactions the possible locations of intersection range of flaws in the original points, the current SKETCHIT sketch (i.e., incorrect global to work on that are all individually correct). We are continuing 232 T/7E Stahovich et al. /Artijcial Intelligence 104 (1998) 2/i-264 techniques locally (as well as globally) defective. for repairing more serious kinds of flaws such as individual interactions that are Because there are only two properties the qualitative slopes of the qcs-curves, task is to find the correct relative locations and qualitative slopes for the qcs-curves. in qc-space that matter-the relative locations and to repair a sketch, even one with serious flaws, the We can do this using the same generate and test paradigm described earlier. In this case, (i.e., all possible orderings of the curve there are often many that map to a single change in qc-space, our search space is much to the geometry. Repairing a design by our search space is all possible end points) and all possible choices of qualitative changes to the geometry smaller repairing is thus more efficient than directly repairing than the space of possible modifications slopes. Because the geometry. its qc-space locations relative However, the use of debugging several ways to minimize for realistic designs, even this search space is far too large for exhaustive search. We are, for example, search. Thus, we are exploring exploring rules that examine why a particular qc-space fails to produce the correct behavior, based on its topology. The desired behavior of a mechanical device through its qc-space. The topology of the qc-space can be described as a desired trajectory is can have a strong influence on whether the desired trajectory easy, or even possible. For example, that topology If we can diagnose “traps” the device, preventing it from traversing these kinds of failures, we may be able to generate a new qc-space by judicious repair of the current one. the qc-space may contain a funnel-like (and the desired behavior) the desired trajectory. Another possible way to reduce search those parts of the qc-space is by identifying to be correct, so that the repair effort can be focused on the other parts. to the the parts of the qc-space used in that transition are likely to be correct. the parts of the that are likely For example, we could simulate each arc of the state transition diagram see which arcs produce desired transition, Conversely, qc-space used in that transition are likely to need repair. individually If a particular arc does produce if a particular arc does not produce the desired state transition, the desired state transitions. 5. Simulator Qc-space represents the device’s kinematics, the to determine which sequences of device’s parts can occupy. We use a qualitative simulator positions (motions) to the applied inputs specified with the state transition diagram. This section provides a brief, high-level overview of our simulator. the parts will actually exhibit in response that is, it describes all possible positions The simulator operates using the particle metaphor described the net force on each body. In an inertia-free world, the velocity by computing direction of the net force and continues until some event (e.g., a collision) nature of the forces. I3 When this happens the simulator stops, recomputes continues simulating. in Section 2.1.2. It begins is in the the changes the forces, then I3 With inertia, the acceleration is in the direction of the net force, but the velocity need not be. ZE Stahovich et al. /Artificial Intelligence 104 (1998) 21 l-264 233 Each possible kind of event corresponds the boundary between a boundary-either boundary to determine what events happen next, the simulator must examine qc-space. a spring neutral position or a motion representing in qc-space reaching or leaving to the trajectory free and blocked space (i.e., a qcs-curve) or a limit of an actuator. Hence, through the trajectory We make a number of assumptions the task of is inertia- are inelastic. As a result, until an event the motion of a body remains either strictly positive, strictly negative, or zero. reasoning about trajectories. We assume that qcs-curves are monotonic, motion and collisions free. contacts are frictionless, occurs, Consequently, in qc-space are monotonic over any given time step. that greatly simplify about devices all trajectories We assume also that devices are fixed-axis and as a result we can examine qc-space by examining through a multi-dimensional of the space, i.e., the qcs-planes. We compute events would happen in that plane, and we then use constraint propagation predicted by the individual planes can happen first. if the trajectory the trajectories the trajectory through 2D projections the next event by first determining which in each qcs-plane continued until an event occurs to determine which of the events Because the simulation is qualitative, ambiguities can arise concerning what will happen all possible sequences of by determining next: our simulator produces an envisionment events. As mentioned above, the simulator begins each step of simulation by computing the program must use a qualitative resultant of all the forces applied to a body in order to determine event. Because qc-space is qualitative, for forces. The obvious approach, a significant amount of ambiguity vector Because a qualitative vector has many scalar components, sum of qualitative vectors to be ambiguous. Hence, we developed special techniques representing representing in the force sums: each component of a qualitative to ambiguity. there are many ways for a for a force as a qualitative vector, results scalar and a sum of qualitative and reasoning about forces. is a qualitative representation is subject scalars in First, we represent a force by its projection on the degree of freedom of the body to is the only component of the force that has introduces no inaccuracies. The in force sums. which it is applied. Because any effect on the motion of the body, this simplification advantage of this simplification is that it greatly reduces ambiguity this projection forces (the forces that engagement for example, to faces apply Second, we represent engagement each other) by the type of constraint the three blocks in Fig. 25. The spring pushes block A to the right. the actuator pushes block C to the that is, they left. In SKETCI~IT’S world, all actuators are assumed two assign position as a function of time. Block B, the block in the middle, experiences engagement the forces are in opposite directions, forces, one from A and one from C. Because the qualitative sum of these forces is ambiguous. they impose. Consider, to be motion sources, the its motion until the next However, we know that B will move to the left. Why is this? We know that the force its assigned motion. We the force is necessary a “motion constrained engagement” because for C to achieve it constrains C applies to B is whatever call this kind of engagement motion of the body to which it is applied. to Hooke’s According spring’s force on A. In an inertia-free world A will transmit law, the spring’s deflection determines of the the magnitude the spring force to B. Thus, 234 iYl7 Stahovich et ul. /Artijiciul Intelligencr 104 (I 998) 2 I l-264 actuator . positive Fig. 25. Three blocks sliding on a frictionlesq. horiLonta1 surface. A applies a force of known magnitude force which assigns a known motion, this kind of force assigns a known magnitude. We call this type of force a “compliant engagement in the same way that a compliant member (e.g., a spring) produces a force of known magnitude. to B. In contrast to a motion constrained engagement force” because it has a known magnitude One of our basic principles is that a motion constrained engagement compliant engagement. Hence, B moves to the left. In our experience, proven very useful in resolving ambiguities in force sums. a overpowers this principle has A complete description of our simulator, can be found in [43] and [46]. ambiguities, including our other techniques for reducing 6. The tester The tester compares the simulated behavior of the candidate qc-spaces behavior specified with the state transition diagram, accepting the desired behavior. those candidates to the desired that provide by computing all possible motions The simulator produces an envisionment can exhibit in response sequence of states specified by the state transition diagram, the desired behavior. On the other hand, if none of the branches pass through sequence of states, the candidate branches do and others do not, the candidate will produce other behaviors the desired behavior. I4 The tester accepts those candidates behavior. the device to the applied inputs. If all of the branches pass through the desired the candidate will provide only the desired If some to that produce only the desired is incapable of providing the desired behavior. in addition 7. The motion type selector The motion type selector’s task is to select a motion type of either rotation or translation the body’s for each part in the device. If the qc-space coordinate of a body is non-periodic, ” These device will provide the desired behavior only for specific choices of masses, springs, and actuators. We to verify that they produce the desired behavior once could accept these designs and then use numerical simulation for conceptual design and progress these choices have been made. Hence, we would use qualitative to more precise numerical (which are computationally more expensive) as more of the design details techniques are selected. An alternative approach would be to construct additional constraints on the masses, springs. and actuators to ensure that only the desirable branches of the simulation are possible. These constraints would be added to the BEP-Models computed from the qc-space. simulation T.E Stcrhuvich it al. /Artijicial lntelligencu 104 (19981 2/i-264 235 type can be either translation or rotation, but if rotation If the body’s qc-space coordinate the only possible motion type is rotation. is selected the body will is periodic (i.e., wraps In this case the body motion rotate less than a full revolution. around to form a cylinder) will rotate through full revolutions. This distinction can be cast in more physical in a single direction, turns far enough revolutions it started, without ever having translating direction of motion. Hence, a translating through full revolutions. part can return to reverse to the place from which terms. If a part that rotates through full it will return to the position from which its direction of motion. The only way that a its replace a rotating part that turns is if the part reverses part cannot it started By selecting new motion types for each body. SKETCHIT can generate a rich assortment in Fig. 8. The new designs are completely consistent with the given in the state the sequence of engagements they produce of new designs, as illustrated desired behavior because transition diagram. 8. Interaction library The general from qc-space translating to be constructed such building blocks. I5 task of translating from c-space [2]. However, is carefully designed is tractable because qc-space from a small number of basic building blocks (qcs-curves). There are 40 is intractable to geometry to geometry for each qcs-curve. Because there is only a small number of basic building blocks, we were able to construct the for each of them. To ti-anslate a qc-space to geometry, a library of implementations program simply selects from the library an implementation Each library entry contains a pair of parameterized that ensure the faces implement a monotonic cs-curve with the desired qualitative slope and the desired choice of blocked space. Each library entry also contains algebraic expressions for the coordinates of the cs-curve end points. faces and a set of constraints For example, Fig. 26 shows a library entry for qcs-curve F in Fig. 19, for the case in in the negative direction causes to be monotonic, which q1 is rotation and q2 is translation translation have the correct slope, and have blocked constraints must be satisfied (see Appendix A for the derivation): in the negative direction). For the corresponding space on the correct side, the following (i.e., rotation qcs-curve UI > 0 L>O h>O ten (1) (3) (3) " The origin of 32 of these can be seen by examining Fig. 19: there are four choices of qualitative slope; for each slope, there are two choices for blocked space: and the qc-apace axes yt and 92 can represent either qualitative interactions of rotating or translating bodies rotation or translation. The remaining 8 building blocks represent with stationary bodies. These interactions produce horizontal and vertical qcs-curves that are infinite versions of curves A, C, E, and G in Fig. 19. The number 8 comes from the fact that for each of these four types of infinite qcs-curves. one of the interacting bodies can either rotate or translate while the other body is fixed. 236 Tl? Stahovich et al. /Art$icial Intelligence 104 (1998) 211-264 Fig. 26. Library entry F- 1: an implementation as thick lines. The rotating positive counterclockwise, for curve F (“cam and otfset follower”). The two faces are shown face translates horizontally. 0, measured face rotates about the origin; the translating is the angle of the rotor: x, measured positive to the left, is the position of the slider. r = ($2 + L2 - 2sL cos(C#l)) 1’2 r>h s<h 4 > n/2 arccos ((L2 + r2 - s2)/(2Lr)) + arccos(h/r) < n/2 4671 @ < arcsin(h/r) + n/2 *>o The coordinates of the cs-curve end points are: I6 81 = arcsin(h/r) XI = -r cos(61) 82 = r - arcsin(h/r) x2 = Y cos(81) Fig. 27 shows a second way to generate qcs-curve F, using the constraints: L>O h, >0 ‘e (Ht. xt ) is the lower left end of the curve. x is measured positive to the left in Fig. 26 (4) (5) (6) (7) (8) (9) (10) (11) (12) (13) (14) (15) (16) (17) Fig. 27. Library entry F-2: an implementation for curve F (Yam and centered follower”). The two faces are shown as thick lines. The rotating face rotates about the origin; the translating face translates ht~rizon~lly. 8, measured positive counterclockwise, is the angle of the rotor; x. measured positive to the I@. is the position of the slider. 1Q >o I) > x/2 Q<x 4 > n/2 @CT I^ = (s’ fLZ -22sLcosi&)y2 s>hl 0 > r/tan($) + hz/ sin(+) The coordinates of the cs-curve end points are: I7 641 = - arcsin(hz/r) rj = -rcos(@) + ~~/tan~~~ 02 = arcsin(h1 /s) + arccas ((s2 + rz - L”)/(2sr)) ~-2 = -s cos(arcsin(h 1 /s)) - h 1 /tan($) (18) (19) (20) 121) (22) (231 (24) (25) (26) (27) (281 (29) The slider in Fig. 26 does not pass cough design the motion of the slider is approximately in the second the motion of the slider is approximately perpendicular rotor. The first of these is a cam with offset follower, thus represent qualitatively follower. The two designs same qcs-curve. the pivot, the one in Fig. 2’7 does. In the first to the motion of the rotor, while to the motion of the is a cam with centered for the the second different implementations parallel I7 fN1. x1 ) is the lower left end of the curve. x is measured positive to ihe fuf, in Fig. 27. To generate a BEP-Model for the sketch, for each qcs-curve. and transforms an implementation of the parameters actual components. The relative constraints geometry geometry and constraints of the BEP-Model. the program ‘* For each selection the coordinate systems locations of the qcs-curves on the end points of the cs-curves. SKETCHIT assembles to produce fragments and constraints of the library selections to match first selects from the library it creates new instances those used by the into the parametric the parametric in qc-space are turned Our library contains geometries that use flat faces, ” although we have begun work faces. We have at least one library entry for each of the 40 kinds of on using circular interactions By selecting different and are continuing to generate new entries. library entries for a given qcs-curve, SKETCHIT is able to produce families of designs). For example, Fig. 5 shows a (i.e., different different BEP-Models BEP-Model SKETCHIT generates by selecting qcs-curve. Fig. 9 shows a solution instead using F- 1. As these examples library entries can encompass a wide variety of design solution. library entry F-2 for the cam-follower to a different BEP-Model SKETCHIT generates by the designs generated by selecting different illustrate, 8.1. Constructing a BEP-Model This section describes BEP-Model. We illustrate a BEP-Model in more detail how SKETCHIT uses the library this process by an example, showing how SKETCHIT constructs to construct a in Fig. 28. for the circuit breaker qc-space SKETCHIT can construct many different BEP-Models translation for this particular qc-space. For types of the hook for the motion if the motion type selector chooses example, and pushrod and rotation for the lever, the program will derive four different BEP-Models. Here we show how it constructs to the geometry in Fig. 9. just one of the four, the one corresponding To construct this particular BEP-Model, SKETCHIT uses library entry F-l (Fig. 26) to the cam-follower implement transformations FSS-1 (Fig. 30) for the pushrod-stop. to Fig. 27 but using the coordinate in Appendix 12) for the push-pair, TRS- 1 (Fig. 29) for the lever-stop, and qcs-curve, D-2 (similar To use library entry F-l for the cam-follower, SKETCHIT creates new instances of the as shown in Fig. 31. SKETCHIT creates new instances by appending a unique integer to the end of each parameter name. For the constraints parameters and instantiates parameter example, ~-7 is a new instance of the parameter L. The first four constraints follower qcs-curve using Eqs. (12)-( 15). *” These constraints in Fig. 3 1 assign values to the end point landmarks of the cam- include a pair of parameters, Ix The neutral positions of springs and the motion limits of actuators produce qcs-curves. but do not describe implementation. faces, and hence require no geometric interacting I9 Circular faces are used when rotors act as stops. ‘(’ To be rigorous we must constrain bodies that are intended than a full revolution, implementation will actually a flattened out representation the landmarks of rotating bodies to be between 0 and 2n This is true for to rotate more that the is actually In the latter case. the device’s q-space to be between 0 and 2rr ensures rotate lea\ than a full revolution. of a cylinder or torus (see Section 4.3. I). In this flattened out representation to rotate less than a full revolution as well as for bodies that are intended In the former case, constraining the landmarks al1 LM, 4, Lb LM, ‘4, LM, LM, I LM, I LM, I LM, I LM,, ‘T LM, ~ + A Lever ” Angle I Hook Fig. 28. A circuit breaker qc-space that provides the desired behavior. and of f-2, that allow the faces to be attached to the hook and lever at arbitrary of f-1 locations (subject, of course, to the other constraints). repeats this process for the push-pair, SKETCHIT the lever-stop, and the pushrod-stop producing the constraints in Fig. 32. landmarks are explicitly constrained SKETCHIT did not explicitly constrain the yoke and rotor example. to be between the boundaries at 0 and 27r. For the circuit breaker example, the landmarks of the lever to be between 0 and 27r. but it did do this in 240 T.:F: Stahovlch et rd. /Artijicial Intelligrncr 104 (1998) 2/l-264 L, tran.slaOng face Constraints: 4w L,, R > 0 End Points: 8, =o x, = R - L,5 0? = 0 x2 = R + L, Fig. 29. Left: library entry TRS-1: geometry used to implement qcs-curve C in Fig. 19, for the case in which rotor-stop). The position of the rotor is measured positive 41 is rotation and 42 is translation face translates horizontally with position x. Right: constraints on counterclockwise with angle 8. The translating the geometry to ensure a monotonic cs-curve with correct qualitative slope and with blocked space on the correct side: the end points of the cs-curve. (i.e., a translating I fixed face translating face Constraints: L,, e > 0 O<@<x Axis Crossing: x=0 Fig. 30. Left: library entry FSS-1: geometry used to implement an infinite version of qca-curve A in Fig. 19, slider-stop). The for the case in which 42 is translation and y1 is either rotation or translation translating to ensure a monotonic cs-curve with correct qualitative slope and with blocked space on the correct side; the position at which the infinite boundary crosses the coordinate axis. face translates horizontally with position x. Right: constraints on the geometry (i.e.. a stationary Next, SKETCHIT develops expressions for the landmarks the point defined by the intersection for the points of intersection of the horizontal between qcs-curves. Consider “hook=cold” this intersection constraint with determines the statement ) “, indicating the horizontal FOLLOWER) between Hence, to compute BEP-Model) must compute line line and the cam-follower curve the value of landmark in the top of Fig. 28. The location of this LME. SKETCHIT instantiates “ (LM_E = (INTERSECT CAM- that the value of landmark LME is defined by the intersection cs-curve. the located at landmark LMle and the cam-follower that evaluates = LM_16) (HOOK the value of LME the constraint solver (the program the horizontal line and the cs-curve. There are 5 intersection points in Fig. 28 (shown as dots). Each one produces a constraint the intersection between similar to that defining LME. Fig. 33 shows these constraints. T.E Stuhovich et 01. /Art&id lntrlligencr 104 (1998) 21 l-264 241 (R-6 (H-4 + off-l / R-6) * COS (ASIN (H-4 / R-6))) + off-2 LM_9 = ASIN LM_8 = - LM_11 = 180 - ASIN (H-4 / R-6) + off-1 LM_lO = - (- R-6 * COS (ASIN (H-4 / R-6))) + off-2 W-8 > 0 L-7 > 0 H-4 > 0 R-6 = SQRT (S-5 -2 + L-7 -2 - 2* S-5 * L-7 * COS (PHI-911 R-6 > H-4 S-5 < H-4 PHI-9 > 90 ACOS (H-4 / R-6) + ACOS((L_7 -2 + R-6 -2 - S-5 -2) / (2 * L-7 * R-6)) < 90 PHI-9 <= 180 < ASIN PSI-10 PSI_10 > 0 (H-4 / R-6) + 90 Fig. 3 I. The constraints for the portion of the BEP-Model describing the cam-follower interaction. To complete the constraints of the BEP-Model, on the landmark orderings as shown in Fig. 34. ” SKETCHIT instantiates the constraints in Figs. 26,27,29, (i.e., the geometry Figs. 3 l-34 constitute as shown in Fig. 35. There are two coordinate the complete set of constraints produces also contains parametric geometry. SKETCHIT geometry from each of the library selections for this BEP-Model. The model the parametric this by assembling and 30). the geometry, SKETCHIT must first establish coordinate systems for Before assembling frames associates each of the components with each component: one is fixed to the body, the other is fixed to ground. The motion type of a body determines the to the stationary XL-G - XL - Yt frame, which is attached the lever’s pivot YL-G frame. The former frame represents (the origins of the two frames remain coincident). ** Dimension XL measures the lever’s angle. The coordinate systems of the pushrod and hook are defined similarly, except that the body fixed frames translate rather than rotate. the lever, the latter represents its two frames. For example, the relative motion between to the lever, rotates relative These pairs of coordinate initially be placed arbitrarily that they assume positions frames, which represent can in the plane. The constraints of the BEP-Model will ensure the correct behavior. For sake the locations of the components, that allow the device to provide ” The generator assigns a total ordering have a numeric subscript each individual diagonal qcs-curve instantiates For example. of cam-follower landmarks. However, causes no difficulties. the constraints this later constraint the constraints curve while to the landmarks of the end points and axis crossings (these landmarks in Fig. 28). It also assigns a total ordering (these landmarks have an alphabetic to the landmarks of the intersection points of in Fig. 28). When SKETCHIT subscript imposed by the various redundant constraints. totally ordered sets. it may instantiate (LM_E < LM_11) and ( LM_9 < LM_E) come from the intersection points the ordering of the end point the constraint (LM_9 < LM_11) comes form is subsumed by the other two. Fortunately, this kind of redundancy ” The “U’ in the subscript stands for lever, the “G” stands for “guide”. (We use the term guide to refer to both the pivot of a rotating body and the axi, of translation of a translating body.) ‘. push-pair G-2 = - (ASIN (Hi-30 / S-32) + ACOS ((S-32 -2 + R-33 -2 - L-34 -2) / (21: S-32 * R-33))) + Off-3 *COS (ASIN LM_l = - S-32 LM_4 = ASIN (H2_31 / R-33) + off-3 LM_3 = - R-33 * COS (ASIN (H2_31 (HI-30 / S-32)) / R-33)) - Hl_30 / TAN (PSI_36) + off-4 t H2_31 / TAN (PSI-361 + off-4 L-34 > 0 Hl_30 > 0 H2_31 > 0 PSI-36 > 90 PSI-36 < 180 PHI-35 < 180 PHI-35 > 90 R-33 = SQRT (S-32 -2 + L-34 -2 - 2* S-32 * L-34 * COS (PHI_35)) S-32 > Hl_30 0 > R-33 / TAN (PSI_36) + H2_31 / SIN (PSI_36) ;; lever-stop LM_9 = off-5 LM_8 = R-21 - LS_19 + off-6 LM_5 = R-21 + LR_18 + off -6 LS_19 > 0 LR_18 > 0 R-21 > 0 ; ; pushrod-stop LM_12 = off-7 E-3 > 0 PHI-2 > 0 PHI-2 < 180 Ll_l > 0 Fig. 32. The constraint> t’or the portions of the BEP-Model describing the push-pair, lever-stop, and pushrod-stop interactions. LM_E = (INTERSECT (HOOK = LM_16) CAM-FOLLOWER) LM_B = (INTERSECT (PUSHROD = LM_18) PUSH-PAIR) LM_C = (INTERSECT (LEVER = LM_9) PUSH-PAIR) LM_D = (INTERSECT (LEVER = LM_11) PUSH-PAIR) LM_A = (INTERSECT (PUSHROD = LM_12) PUSH-PAIR) Fig. 33. The intersection points for the circuit breaker qc-space. LM_C and LM_D are artifacts of the way SKETCHIT computes intersections between diagonal qca-curves and infinite boundaries (see Section 4.3). LM_18 < LM_i LM_12 < LM_D LM_12 < LM_18 LM_11 < LM_A LM_B < LM_9 LM_2 < LM_9 LM_16 < LM_lO LM_C < LM_18 LM_3 < LM_12 LM_4 < LM_14 LM_E < LM_ll LM_2 < LM_B LM_ll < LM_4 LM_8 < LM_16 LM_D < LM_C LM_15 < LM_3 LM_A < LM_4 LM_9 < LM_E LM_9 < LM_il LM_lO i LM_5 LM_17 < LM_8 Fig. 34. The landmark ordering< for the circuit breaker qc-space A 233 Y P-G _Y, YP Pushrod X, r X PG Lever X, XL X LOG Y L-G YL i,,. Y H-G Yti XH Hook ‘. X, x,, (cid:228) Fig. 35. Pairs of coordinate frames defining the locations of the components in the circuit breaker. frames in positions that are likely to provide of presentation, Fig. 35 shows the coordinate the correct behavior After establishing (i.e., satisfy the constraints of the BEP-Model). the coordinate is ready to the fragments of parametric geometry from the library selections. This geometry in each library entry. Hence. from the local, library coordinate assemble is defined with respect to local coordinate systems contained to assemble systems to the coordinate systems of the components. the geometry, SKETCHIT must transform systems of the components, SKETCHIT 8.2. Periodic boundary conditions To facilitate simulation, SKETCHIT flattens out cylindrical qc-spaces boundaries cylindrical qc-space from the flattened representation. at 0 and 2n. During synthesis SKETCHIT must into planes with the in effect reconstruct The reconstruction In the flattened out representation, are split into two pieces: one piece just above the 0 boundary and another just below the 2~ boundary. To facilitate synthesis, SKETCHIT must join these pieces back together. process focuses on the qcs-curves the boundary-crossing that cross the boundaries. qcs-curves 243 LM2F LM12 LMll LMlO LM9 LM6 LM7 LM6 LM5 LM4 LM3 LM2 LMl LMO 2n Boundarv LM13 LM14 LM15 0 Boundary .____ l LM16 Yoke Position Fig. 16. The q-space for the yoke and rotor flattened to produce a plane. The labels on the qcs-curves indicate the names of the interacting face A on the yoke and face I on the rotor (see Fig. N(a)). Because curves Al and B2 cross the houndaries, one piece of each of these the 2,~ boundary. The small black circle\ wrves is just above the 0 boundary and another piece is just below faces. For example. curve Al is the interaction between with accompanyin coordinate tuples are intersection points (not all intersection points are labeled). Although the qcwurves are drawn as straight lines, they can have any shape as long as they are monotonic. SKETCHIT joins the two pieces of a split curve by subtracting 2n from the ordinates of (here the end points and intersection points of the piece of the curve near the 2n boundary we assume that the ordinate to form a cylinder). For example, Fig. 36 shows the flattened qc-space for the yoke and rotor from the next section, and Fig. 37 shows the result of joining curves back together. the boundary-crossing that wraps around is the dimension To construct a BEP-Model. SKETCHIT re-joined boundary-crossing between library entries for them without any additional effort. the boundaries of the flattened out representation, qcs-curves. Because selects appropriate the remaining library entries qcs-curves for the lie entirely can directly select SKETCHIT 9. Using the BEP-model to refine a concept As we have noted, the constraints in each BEP-Model the geometric parameters can take on and still provide represent the behavior originally the range of values that specified. lY:F: Stuhovich et cd. /Artificial Intelligence 104 (1998) 21 l-264 24s i I LM2 LMl LM12 2n LMll 277 LMIO 2n 0 Boundary (LMH. LMll 271) LM13 LM14 LMIS LM16 b Yoke Position of the boundary-crossing curves near the 2n boundary Fig. 37. A reconstruction boundary-crossing in Fig. 36 have been moved below the 0 boundary by subtracting 2rr from the ordinates of their end points and intersection points. The small black circles with accompanyinf coordinate shape as long as they are monotonic. from the yoke and rotor qc-space. The pieces of the tuples are intersection points. Although the qcs-curves are drawn as straight lines. they can have any qcs-curves Fig. 38. The yoke and rotor device thus define an entire family of solutions a designer can explore in order to The constraints adapt an initial conceptual design to meet the design requirements. this with a new example concerning We illustrate the design of the yoke and rotor device rotation of the rotor causes the yoke to shown in Fig. 38. Continuous oscillate counter-clockwise left and right with a brief dwell between each change in direction. We describe the device to SKETCHIT with the stylized sketch in Fig. 39(a). The desired is to have each of the rotor blades engage each of the yoke faces in turn as shown behavior in Fig. 39(b). From this input SKETCHIT generates The designer now has available a large family of designs specified by the BEP-Model the BEP-Model in Fig. 40. and can at this point begin to specify additional design requirements. Imagine that one requirement achieve this is to add additional constraints is that all strokes have the same length. A simple way to the yoke and to the BEP-Model to constrain 246 T.lT Stahovich et ~1. /Artijciul Intrlli~mce I04 (1998) 21 I-264 (4 Fig. 39. (a) The stylized sketch of the yoke and rotor device. (b) The desired behavior. The letter and number the rotor is the in each node indicate which yoke face and which rotor face are engaged external input that causes each of the transitions. in that state. Turning PSI > 0 PSI < ASIN (H i R) + 90 PHI <= 180 ACOS (H / R) + ACOS((L “2 + R “2 - S “2) i (2 ’ L * R)) < 90 AOFFP 118332 , R 3936 ./ - --- AOFFl 238 332 . . \ AOFFB 358 332 PHI > 90 R>H H>O L>O w>o Fig. 40. A BEP-Model for the yoke and rotor; a representative shown. For simplicity, new variable names have been substituted example, because all three rotor blades are constrained for sets of variables constrained to have equal length, R replaces R 1, R2, and RX. sample of the parameters and constraints are to be equal. For rotor to be symmetric. For example, we constrain the rotor blades to be of equal length and to have equal spacing: the rotor to be symmetric by constraining Rl=R2=R3, AOFFl - AOFF = 120”, TF Srahovich et a/. /Artijicial Intrllipvm 104 (199X) 21 l-264 241 AOFF - AOFFI = 120” Imagine further that all strokes are required to be 1 .O cm long. We achieve this by adding the additional constraint: *’ LM29 - LM27 = 1 .O. Finally, imagine to be 40”, i.e., between each stroke, the rotor turns 40” while the yoke remains stationary. We can achieve this by adding one additional constraint: 24 that the dwell is required LMG - LM8 = 40”. We can now invoke DesignView to find a solution set of constraints; to produce both the basic desired behavior and the desired refinement to this augmented this design characteristics. We have been able to accomplish the solution will be guaranteed performance simply by adding additional constraints to the BEP-Model. 10. Related work into multiple Our task is to use a description of desired behavior to turn a sketch of a mechanical families of working geometries. No previous work has directly task. The work that comes closest to ours is the work in design the approaches based on bond graphs and kinematic building the work in shape design, and the work in sketch understanding. The first three these three areas of research. device addressed automation blocks), subsections of this section describe this particular (specifically The remaining subsections describe supporting work, such as the work in qualitative physics and simulation, our task, such as the work in component connection models and geometric and work that indirectly touches on some of the issues involved features. in 10.1. Design automation 10.1.1. Bond graph approaches Our techniques can be viewed as a natural complement to the bond graph techniques discussion of bond of the sort developed by Ulrich [51]. (See [28] for a comprehensive that provides a specified graphs.) Our techniques behavior, but because of the inertia-free employed by our simulator, our techniques are effectively blind to energy flow. Bond graph techniques, on the other hand, explicitly represent energy flow but are incapable of representing geometry. for computing assumption are useful geometry that SKETCHIT assigns 23 LM29 and LM27 are variables names of these variables by using a graphical browser we have constrained ” LMG and LM8 are the variables ending of one the dwells. Because we have constrained have the same duration. that SKETCHIT assigns to the extreme positions of the yoke. We obtain the to inspect SKETCHIT’S simulation of the device. Because to the position of the rotor at the beginning and all six dwells the yoke and the rotor to be symmetric. the yoke and the rotor to be symmetric, all strokes have the same length. Prabhu and Taylor 1371 and Welch and Dixon the bond graph design to allow specification of positions and orientations of components, but they still [52] extend approach do not design the shapes of interacting parts. then use library Their techniques synthesize a design using an abstract representation of behavior (bond to map to implementation. We use a similar paradigm, graphs), however, because our library contains includes complete faces, while theirs interacting components, we can design interacting geometry, while they cannot. Like our techniques, their techniques produce design variants. lookup IO. 1.2. Kinematic building blocks Our techniques focus on the geometry of devices that have time varying engagements (i.e., variable kinematic well known design linkage design techniques Although these well known topology). Therefore, our techniques for fixed topology mechanisms, techniques are complementary to the such as the gear train and in Erdman and Sandor [9]. be used to construct mechanism al. [38] demonstrate. They describe a knowledge-based mechanisms based on cams, gears, and linkages. techniques design are not applicable they can tools for fixed topology devices as Rosen et tool capable of designing dwell to our problem, recently in automating There has been a lot of interest task is the synthesis of a device into a specified output motion: Kota and Chiou [29] use a matrix to represent the design of fixed topology input devices. A common the motion this into basic desired motion transformation, search to compose building blocks. Subramanian that achieves the desired motion transformation. The a sequence of “abstract mechanisms” to this task. All of bond graph based design techniques described above are also applicable these approaches are capable of producing design variants, but again, these techniques are not suitable for designing variable then use matrix decomposition and Wang [50] use iteratively deepening topology devices. that transforms to decompose a specified 10.2. Shape design Although our work crosses many research boundaries, it is most closely related to the work in shape design. Joskowicz and Addanki [24] describe an automated two interacting then modify the part shapes by adding and deleting produce qc-space instance, tool for shape design. They start with shapes (2D profiles) and the desired behavior described as a c-space. They line segments and arcs until the shapes the desired c-space. While they take the desired c-space as input, we compute a that will provide the desired behavior. Their techniques produce a single design rather than a family of designs as SKETCHIT does. Joskowicz 1231 uses a set of local and global operators the c-space for a device in order to reduce irrelevant details. For example, one of the operators first divides into monotonic pieces and then replaces those pieces with straight line segments. Another operator eliminates parts of the c-space that cannot be reached because of a particular choice of external inputs to the device. The closest application of these operators the behavior of two devices: if their simplified and abstracted c-spaces are the same, the two devices provide the same to simplify and abstract to our task is comparing the c-space boundaries (cs-curves) T:F: Stahovich et al. /Artificial Intelligence 104 (199x1 211-264 249 qualitative behavior. Our task is still recognizably that all produce the same qualitative behavior rather than recognizing designs the same behavior. different: we want to generate designs that provide [2] and Joskowicz and Sacks [26] describe Caine the designer lookup be computationally techniques families of designs. Finally, to modify shape by modifying to geometry, to map changes to map from qc-space expensive, a single design produce interactive design tools that allow c-space or vice versa. While we use library techniques, which can they use numerical in geometry. Their produce multiple to changes techniques in c-space instance, while our their techniques are interactive while ours are automatic. the mapping between tolerance space (an extension of c-space) shape and behavior. to examine task is to in shape affects behavior, ours is to determine what in the shapes of parts affect their kinematic behavior. Their Joskowicz et al. [27] use kinematic how variations determine how a specified variation constraints on shape are sufficient There is some recent work in exploring to ensure the desired behavior. Faltings [ 13) examines how much a single geometric parameter can change, when all (topology of c-space). the the constraints on all the parameters sufficient others are held constant, without changing Their task is to determine how much a given parameter can change without altering current behavior, while ours is to determine to obtain a desired behavior. Our task is most similar to that of Faltings and Sun [15]. They describe an interactive the place vocabulary design system that modifies a user selected geometric parameter until there is a change the place vocabulary, and hence a change simulation desired behavior. They use the techniques to change the place vocabulary. in behavior. Their system then uses qualitative if the new behavior of the modified geometry matches a specified just as we do.) for specifying desired behavior in [ 131 to determine how much a parameter must change in order (They have a language to determine in They modify c-space by modifying geometry, we modify qc-space directly. Because there are many changes their search space is larger than ours. Also, our tool is automatic while theirs is interactive, and we can generate design variants while they cannot. that map to the same change in c-space, in geometry Gupta and Jakiela [ 1 S] describe a novel technique by which a known component “carves out” the shape of an unknown mating component. They require that one of the interacting shapes is known, but we do not. Also, they require a complete description of the desired motion of each component, while we do not. 10.3. Sketch understunding There is little previous work in sketch understanding.25 Narayanan et al. [34] use a to reason about its behavior, but they use a pre-parsed description diagram of a device of the behaviors of each component while we reason directly interacting Faltings faces. [ 121 suggests that a sketch represents a family of precise models. He demonstrates is not a single qualitative model but instead that, taking a sketch as a qualitative from the geometry of the 25 See 1491 for a discussion of common sketching techniques used in engineering 250 ZE Stahovich et al. /Artijicinl lntdligencr 104 (1998) 21 i-264 topology. Kinematic metric diagram (i.e., a line drawing with approximate dimensions), what he calls kinematic of the free space regions of the device’s c-space. Kinematic of place vocabulary suggest behaviors However, methods for determining which modifications will yield these other behaviors still an open issue. it is possible to compute the topology is an abstraction [ 111 and as such, it often contains ambiguities. These ambiguities the geometry of the device. is that might possibly be obtained by modifying topology 1141 characterizes topology 10.4. Qualitutive physics Our work builds upon the large and growing body of research in the field of qualitative to provide sampling overview of the field. Here, techniques, we discuss a representative physics. Weld [53] provides a comprehensive background of the work in qualitative physics. for our qualitative simulation De Kleer a program [5] describes of the small signal behavior of electric circuits. The program computes behavior by using constraint the circuit. These propagation techniques [48]. We use a simplified version of these propagation to the work of Stallman and Sussman techniques are related causal explanations that produces to propagate the circuit’s through inputs techniques De Kleer [6] describes a qualitative to compute simulator based on confluences, the motion of the bodies in a device. i.e., qualitative in de Kleer’s world is characterized the behavior in each qualitative computes in a device, and all possible all possible transitions state consistent from one set states (operating differential equations. The behavior of each component by a set of qualitative is described by a set of confluences. The simulator qualitative of consistent qualitative just as ours does. states of the components regions); states to another. Hence, the simulator computes an envisionment De Kleer’s simulator must be provided with an enumeration of the possible qualitative regions) of a component. states (operating enumerate depends on the shapes of the other components with which it interacts. to states of a component because a component’s behavior In our domain, however, the possible qualitative it is not possible Williams [54] describes a simulator that can reason about both the small signal and the large signal behavior of an electric circuit. The simulator computes the small signal model that applies in a particular operating mode, then predicts which parameters change, possibly causing a transition then uses constraint analysis provides underpinnings similar to the way our simulator computes in each individual qcs-plane, events can happen first. transitions actually happens first. (Kuipers for these kinds of techniques.) This the next event: it computes [ 3 I ] is very the possible events to determine which of these to another operating mode. The simulator to determine which of the possible then uses constraint propagation the mathematical Forbus [ 171 views the world from a process centered perspective rather than a device like boiling which centered perspective. These techniques are suited to modeling processes do not involve a fixed collection of “stuff”: as the boiling process evolves, water turns to steam and leaves the system. However, the behavior of the kinds of mechanical devices we are interest in cannot be conveniently into a set of processes. decomposed Tl? Stahovich et al. /Artijcial Intelligence 104 (199X) 21 l-264 251 10.5. Simulation the equations of motion of the device. Because we use a qualitative to compute the behavior of a candidate c-space. (e.g., [36], [ 191, and [47]) predict motion by numerically represen- and hence must use a qualitative integration, simulation SKETCHIT uses dynamic Conventional dynamic simulators integrating tation (qc-space), we cannot use numerical simulator. Faltings simulator [l l] describes a qualitative for fixed-axis devices. The simulator the free space regions of a cs-plane the pair of components is called place vocabulary, which is a qualitative version of c-space. regions is uniform. There are three kinds of regions with no contacts, segments of cs-curves 26 (one contact (two contact points exists). Place vocabulary between cs-curves based on a representation Place vocabulary decomposes in which the contact between places: two-dimensional exists), and intersections also encodes qualitative, response to the applied inputs. In this case, their simulator computes all possible transitions. simulator, and hence has a limited to be a kinematic ability to reason about forces. 27 Our simulator, on the other hand, is a dynamic simulator, i.e., a simulator this representation transitions will actually occur ambiguities may arise as to which place the places. Because the motion resulting transitions between that computes into “places”, the allowed is intended simulator Faltings’ is in Forbus et al. [16] extend Faltings’ simulator. Their simulator models inertia, while we assume that motion is inertia-free. They represent forces as qualitative vectors, we do not. Our representation the ambiguity of the simulation. force vectors, thereby reducing branching that occurs when summing qualitative for forces is designed to eliminate techniques from applied forces. to produce a dynamic IO.6 Computing numericul C-spuce We obtain the first candidate qc-space by abstracting the numerical c-space of the special purpose information. There are many general purpose sketch. Because the abstraction process requires only a partial description of the numerical that compute c-space of the sketch, we developed simplified, just the required for computing [32], for example, describes the complete numerical an algorithm in the plane without rotation. Brost [l] and Caine [2] describe algorithms for the case in which rotate as well as translate. More suited to our needs is the work of Joskowicz the polygons and Sacks [25]. They compute the cs-plane for each pair of interacting parts in the device. the full c-space for a fixed-axis device by computing c-space of a device. Lozano-Perez space of two polygons the configuration for computing that translate techniques techniques 10.7. Component-connection models A common abstraction component-connection used is the model: each component has a set of ports; each port is associated about physical in qualitative reasoning systems ” They use the term constraint curve rather than cs-curve. ” Kinematics is commonly used to analyze is the study of motion without reference to the forces that cause that motion. Kinematic simulation the motion of devices that have a motion source applied to each degree of freedom. 252 TIT Stuhwich et 01. /Arti$cid Inrelli+yncr 104 (I 99X/ 21 I-264 characterizes the parameters of a particular component’s ports. Components with a parameter such as voltage or fluid flow rate. A set of constraints relationships between connected at their ports; when two ports are connected, of the interesting behavior occurs inside the components; parameter values. the are they share a common parameter. All simply propagate the connections By contrast, for the devices we are interested two components the component-connection the interaction between Although in SKETCHIT’S domain, describes several examples of work in the area. a structure Doyle’s [8] task is to hypothesize (i.e., the interaction in. all of the interesting behavior occurs at between a pair of faces). to the problems this section issues. Therefore, techniques do not apply directly they do address some relevant that achieves a set of observable events; that achieves a desired behavior. He constructs hypotheses by together primitive mechanisms ours is to find geometry connecting has a quantity mechanisms for limiting serves as a primary source of constraint work, the sketch is the primary source of constraint devices that are similar to the initial sketch. Each primitive mechanisms (components). type associated with its cause (input) and effect (output). Two primitive types. This In our the generation of hypotheses. for limiting search: we consider only together only if they have compatible quantity can be connected Falkenhainer and Forbus [lo] describe a program that uses a library of model fragments and a description of the structure of a device to construct a model suitable for answering a to answer the user query about the device. The goal is to find the simplest model adequate (i.e.. query. Each of the model fragments describes one possible behavior of a component one possible set of constraints task is to determine which of the possible behaviors actually occurs in the context of the overall device. the parameters at the ports). The program’s relating Nayak [35] describes a similar system. His task is to construct a model that provides a causal explanation constraint described thermistor determine of a device’s behavior. The expected behavior of the device provides is of the for limiting as a desired causal path, for example, for an adequate model. The expected behavior the temperature “how does the search Mashbum and Anderson [33] extend the methods of Falkenhainer the angular deflection of the pointer?’ i.e., that there are enough equations and Forbus to produce to a system that guarantees that the model is complete, solve for the desired quantity. Davis [4] describes a system that performs circuit diagnosis. His task is to determine which components, observed behavior of a device and the correct behavior. Said differently, if malfunctioning, could account for the discrepancy the between the task is to find a model that predicts the observed behavior rather than the correct (intended) behavior. task of each of these systems in achieving The primary the device plays generalization part of the device plays in achieving the techniques used engineeringire-synthesis process, SKEKHIT paradigm the overall behavior. During has a similar the desired overall behavior the reverse engineering is to determine what role each part of and task of determining what role each (see Fig. 21). Hence, reverse to extend SKETCHIT’S domain. in these systems could be used to the component-connection TIT Stahovich et al. /Art$cial Intelligence 104 (1998) 211-264 253 10.8. Reverse engineering Before SKETCHIT can synthesize new designs for a device, it must reverse engineer the the task of reverse engineering, but his work original sketch. Shrobe [42] has also examined the kinematics of the linkages using is in the domain of linkages. He numerically Kramer’s TLA [30], then parses the simulation to identify a set of common behaviors such as dwell and frequency doubling. These techniques might be used to extend SKETCHIT’S reverse engineering/re-synthesis to the linkage domain. paradigm simulates 10.9. Geometric features In SKETCHIT’S domain, shapes interact with each other. However, there are other domains features of individual consider some of those domains. components determine important the behavior of a device is determined by how the component in which the geometric design properties. Here we For example, Hirschtick [20] describes a knowledge based tool that assists in the design and works in the domain of extrusions extrusions. The tool is rule-based of aluminum (cross-sections) geometric at a corner should have a fillet. The program begins by identifying of the extrusion: walls, corners, hollow cavities, produce manufacturing built from line segments and arcs. The rules trigger off of patterns of features. One rule, for example, states that a thick wall and a thin wall that meet features to fillets, etc., then applies the rule-base the important advice. Dixon et al. [7] describe a similar manufacturing based geometric design recognizing aluminum extrusions, castings, and injection molded plastic. they use a feature tool to construct a geometric model of the device, rather than is in a conventional CAD model of the device. Their domain advisor. However, features Wolter and Chandrasekaran [55] describe a feature-oriented design system capable of a wide range of functions. They represent geometry with a hierarchy of representing structures called geomes. A geome is a collection of geometric elements with constraints for which it is on how those elements are combined. They label a geome with the function commonly used for. For example, a geome consisting of a cylindrical rod inside a round hole of the same diameter would be labeled a pivot. The designer constructs a design by assembling geomes that provide the desired functions. They also provide abstract geomes, geomes the designer revolute-constraint can later refine implementations. to describe the intended geome, for example, the abstract geomes allowing that have no implementation, function of a device rather than the structure. The The designer that do have geometric is a pivot with no implementation. to more specific geomes Their functional (e.g., a pin in a hole or a rack and pinion). They cannot handle intermittent contact such as the function of the lever and hook in the circuit breaker. language can represent static features (e.g., a slot) or constant contact that require functions IO. 10. Representing function There is a wealth of research in representing for example, describes a representation for capturing and reasoning about function. Hodges [2 I], the behavior and function of the parts 1-54 TnE Stuhovich et ~1. /Art$cial lntdligencr 104 (199X) 211-264 of mechanical devices. This representation useful for a task for which it was not originally a language record how the device is supposed thereby enabling services is used to determine when a device may be Iwasaki et al. [22] also describe the function of the parts of a device. Their goal is to explicitly the device’s structure, like automated design verification. to work in addition for representing to recording intended. During reverse engineering, in achieving plays description of the function of each part. Hence, our work is complementary that reason from a representation the desired overall behavior. The program of function in order to perform other useful tasks. to approaches SKETCHIT determines what role each part of the device a is in effect computing 10. I I. Algebraic constraints in the form of a BEP-Model, the desired behavior. Serrano and Gossard SKETCHIT produces output that ensure constraints called MATHPAK Similarly, Serrano 1411 describes a system like those contained constraints that is suitable in a BEP-Model. for solving the constraints for efficiently solving a parametric model with [40] describe a system in a BEP-Model. 28 systems of algebraic found 11. Future work SKETCHIT can currently repair a limited Section 4 described, we are continuing kinds of flaws. to develop techniques range of flaws in the original sketch. As for repairing more serious language to specify that is more like the verbal language We currently use state transition diagrams the desired behavior of a device like to develop a behavior in terms of a desired sequence of engagements. We would specification that engineers use to describe the behavior of devices. For example, we would like to specify the desired behavior using that common engineering the state transition diagram this terms, such as “ratchet”, have a direct better language. For example, many engineering translation and hence are simply a macro on top of the state transition diagram terms like “ratchet ” “clutch”, or “trip mechanism”. We believe is a good substrate upon which to implement into a desired sequence of engagements, language. language , We are also working Currently, our techniques significant portion of the variable would like extend our techniques to expand are restricted the class of devices to fixed-axis devices. Although that SKETCHIT can handle. a topology devices used in actual practice (see [39]), we to handle particular kinds of non-fixed-axis this constitutes We are currently exploring a commonly occurring class of devices parts has three degrees of freedom These devices have switchable degrees of freedom: one of the degrees of freedom degrees of freedom are active. SKETCHIT could represent (rather is switched off so that, at any given than two) but the qc-space devices. in which a pair of is still tractable. for each different mode of operation time, at most two these kinds of devices with a set 2x DesignView, the syqtern we use to solve the constraints of a BEP-Model. is based on MATHPAK T:F: Stahovich et 01. /Artificial lntrlligencr 104 (1098) 21 I-264 15.5 Fig. 41. A device with switchable degrees of freedom. The device employ< two rotors. labeled A and B. Rotor A has a spring-loaded from it. B hay a spring pushing plunger protruding it toward a stop. Fig. 41. The first mode of operation and the corresponding off. qc-space. The plunger’s degree of freedom is switched Fig. 4.1. The second mode of operation and the corresponding off. q-space. Rotor B’s degree of freedom is switched of qcs-planes, one for each mode of operation. The simulator would select the appropriate qcs-plane for each step of simulation. from it, B has a spring pushing Fig. 41 shows an example consisting of two rotors, the plunger has no degrees of freedom. As rotor A turns clockwise labeled A and B. Rotor A has a it toward a stop. Devices to index the film advance in cameras. In the first mode it pushes and B’s spring pushes B rotor B has no degrees of freedom while the plunger to be depressed by rotor B as shown in Fig. 43. In normal use, the device would alternate between spring-loaded plunger protruding similar to this are used, for example, of operation rotor B as shown against its stop. In the second mode of operation, the plunger has one: rotor A turns counterclockwise engaging these two modes. in Fig. 42. Eventually the rotors disengage causing Fig. 42 shows the qc-space for the first mode. The qc-space degrees of freedom of the rotors. Because the plunger has zero degrees of freedom is a plane detined by the in this 256 1717 Stuhovich et ml. /At@icial Intelligence 104 (1998) 21 l-264 mode, it does not appear in the qc-space. Fig. 43 shows the qc-space for the second mode. This qc-space is also a plane, but this time it is defined by the degrees of freedom of rotor A and the plunger. At any point in the simulation, one or the other of these qcs-planes will for each step of the be active. The simulator’s new task is to select the applicable qcs-plane simulation. We would also like to relax the restriction to frictionless approach would be to model friction as a force that either dominates negligible. Using this model the simulator would have an additional property when computing the other forces applied to a body. Once SKETCHIT determines which engagements provide high friction and which should not, it must add appropriate constraints Model. force balances: whether or not the friction from an engagement dominates should to the BEP- engagements. One simple the force balance or is to branch on These constraints can be expressed in terms of the friction cone, which defines the range of forces (i.e., the range of orientations of a force) that a surface can resist without slipping. The size of the friction cone is a function of the coefficient of friction and the geometric faces. To ensure that an engagement provides high friction, parameters of the interacting forces are SKETCHIT must add constraints inside the friction cone. Conversely, the program must add constraints After making these techniques reported here. 29 forces are outside the friction cone. the next task is to determine how well than the two working examples these extensions scale to design problems more complex to the BEP-Model to ensure that ensure the engagement that ensure the engagement that the friction to our system, is negligible, We are beginning to explore how our techniques can be applied that the BEP-Model will be useful domains. For example, we believe tolerance analysis (see [3] for an overview of tolerancing). Here the task is to determine given set of variations the desired behavior. A possible approach are contained a simplistic number of designs randomly the BEP-Model. in the shapes and locations of the parts of a device will compromise if the variations in the family of working designs defined by the BEP-Model. For example, if a large selected from the specified set all satisfy the constraints of implementation would use Monte Carlo simulation to this task is to determine to determine if a We have also begun to explore design rationale capture. We believe that the constraints serving as a link the geometry and the desired behavior. The constraints might, for example, be in a way that of the BEP-Model will be a useful between used to prevent subsequent redesign efforts from modifying compromises hard won design features in the original design. form of design documentation, the geometry to other problem for kinematic 12. Conclusion We have demonstrated that SKETCHIT a single sketch and that it can repair a limited can generate multiple families of designs from range of flaws in the initial design. 2’) We have tested the program on three examples: here and a tiring mechanism from a single action revolver. the circuit breaker and yoke and rotor examples described T.F Stahovich rt al. /Artificial Intelligence 104 (1998) 21 l-264 257 that ensure SKETCHIT represents each of the new families with a BEP-Model, parametric geometry the desired behavior. SKETCHIT with constraints and by selecting creates different families by changing the new designs different geometries that SKETCHIT produces the motion types of the components illustrate, include a wide range of new design alternatives. the geometry produces faces. As our examples for the engagement between connection to select new implementations. shape and behavior, design of mechanical in shape are attempts is quite complex SKETCHIT is able to perform these tasks because of qc-space, a new representation for the behavior of a device but abstracts away its the opportunity implementation, the intimate is typically conceived of as the modification of shape to achieve behavior. But to change behavior, and if the mapping between shape mechanical behavior. Qc-space captures thus providing particular Given artifacts if changes and behavior of behavior‘? Our qualitative complete and yet offers a far smaller search space. It is complete because any change shape will produce a c-space at most changes far smaller precisely because to a single change isolates the differences are changes that it is in from the original by is to the geometry map it slopes it is qualitative: often many changes it is an appropriate is just such a representation. We suggest [2], then, we suggest, why not manipulate in the relative locations and qualitative that maps to a new qc-space differing slopes of the qcs-curves. Qc-space level of abstraction because locations and qualitative in qc-space. Finally, that matter: changes a representation in behavior. in relative c-space One reason this work is important and efficient way both to capture and communicate a convenient working directly speak the engineer’s natural language. from a sketch, SKETCHIT is that sketches are ubiquitous in design. They are information. By takes us one step closer to CAD tools that design Appendix A. Deriving the library In this appendix we describe the interaction library, providing the library entries. We use as our example a library entry that implements in Fig. 19, for the case in which q1 is rotation and q2 is translation negative direction causes translation in the positive direction). 3o This implementation uses the two flat faces whose parameterization a derivation of one of qcs-curve H in the (i.e., rotation is the same as that to the right. Our goal is to derive a set of a monotonic qcs-curve with the in Fig. 26, except that x is measured positive constraints on the parameters same slope as qcs-curve H. such the faces implement As Fig. 26 shows, there are 7 parameters that characterize the pair of faces (we do not count H and x because not geometric qcs-curve H, we must identify the faces produce a monotonic they measure positions, parameters). To obtain constraints ensuring the regions in the 7-dimensional i.e., they are position parameters that implement the faces parameter space for which all such regions, and curve of correct slope. Finding “‘We focus on curve type H, rather than types F or D which are used in the circuit breaker example, because the coordinate into implementations frames are more convenient. We do, however. show how to transform for curves of type F and D. this implementation the result as a set of algebraic constraints expressing Instead, we look for individual regions we can identify, is a difficult, for which the constraints the more ways the program will have to implement a design. if not intractable, task. are simple. The more regions To guide us in the search for the simple regions, we take inspiration from the kinds that designers commonly use to achieve a particular kind of interaction. For curve H using the geometry of Fig. 26 is if the face does the pivot of the rotating face. With this as our inspiration, our goal is to to a cam with of geometry example, a common way to implement geometry acts like a cam and offset follower: a design for which the translating not pass through find a set of constraints which describe offset follower. the class of solutions corresponding is that the two faces exist, that is, they have non-zero length. Defining face and L as the length of the rotating face, we trivially Our first constraint 11) as the length of the translating obtain: UJ > 0 L>O (A.11 (A.21 To ensure that the translating face does not pass through the pivot (a hallmark of cam- and-offset-follower behavior), we define the follower offset, h, subject to the constraint: h > 0 (A.3) We define h such that when one looks down the positive s-axis, the left. the translating face is to To ensure that the rotor can actually engage the slider, we must ensure that the rotor is the distance from the pivot to each face. The longer of the two distances we label Y, the other we label s is always larger than long enough to reach the slider. To this end we construct end of the rotating (because of the constraint expressed by Equation the other). r and s are related to the length of the rotating face by: (A.7), one distance r = (s2 + L* - 2sL cos(CJ5)) “? For the rotor to be long enough to engage the slider, Y must satisfy: r>h (A.4) (A.5) Ifs is sufficiently large, when the rotor is vertical and pointing upward (0 M 7r/2), the slider face will be able to pass under the rotor face. As a result, there will be two separate ranges of angle for which the rotor and slider will be able to engage, one range to the In this case, the interaction between right of vertical and another to the left of vertical. and thus this geometry will not be the rotor and slider will be two disjoint cs-curves, that this kind of a valid implementation is a single curve. To ensure of curve H which T.F Stahovich rt al. /Artijicial lr~telligence 104 (199X) 211-264 39 Fig. A. 1. The leading edge of the rotor is shorter than the trailing edge. Turning the rotor counterclockwise the slider to the right. pushes disjointed constraint, which we use for its simplicity, interaction does not occur, we must constrain is: length s. 3 ’ An overly conservative s < h C.4.6) A less restrictive, but equally effective constraint is s < h + w cos(+ constraint ensures higher than the bottom of the rotor face. For historical conservative constraint. that when the rotor is vertical (0 = n/2) reasons, - n/2). This the top of the slider face is the program uses the more Defining rotation positive counterclockwise, we can refer to the line labeled r in Fig. 26 as the leading edge of the rotor, and the line labeled s as the trailing edge. in which the bottom end of the slider face touches If the leading edge is shorter that the trailing edge, the cs-curve will not have the desired slope.. ” Consider a configuration the as shown in Fig. A. 1. If the middle of the rotor face and the rotor turns counterclockwise leading edge is shorter than the trailing edge, the radius from the pivot to the contact point will get longer. Because this radius gets longer, the rotor will push the slider to the right. In this case, the cs-curve will have (at least locally) a slope like qcs-curve B in Fig. 19, the leading edge to be longer than rather than like qcs-curve H. Hence, we must constrain the trailing edge. We express this constraint the trailing edge and the rotor face: in terms of the angle 4 between 4 ’ n/2 (A.7) Consider the configuration in which the tip of the rotor is touching the bottom of the (it is not slider face as shown in Fig. A.2. If the rotor face is horizontal horizontal in the figure), then the pair of faces will act as a stop: the slider face will be able to slide freely along the rotor face, but the rotor will be prevented from rotating clockwise. like qcs-curve H. Hence. The corresponding qcs-curve will locally be vertical, not diagonal in this configuration j’ We can use the disjointed solution if we know that during the normal operation of the device, from only one range of engagement. Although assumes configurations can explicitly constrain against multiple ranges of engagement, like that in Fig. 27. That implementation of curve H that uses geometry that case. it is necessary to place additional constraints on the design engagement occurs during normal operation of device. These additional constraints are described for this implementation exhibits to ensure two ranges of engagement, In that only the desired range of in [43]. this is not possible for our other implementation the device of curve H we 32 We assume that 0 6 @ 6 E 260 TE Siahovich et al. /Artificial Intelligence 104 (IWi) 211-264 h Fig. A.2. When in this configuration, the rotor face must not be horizontal we must constrain we define c as the angle between constraint is: the rotor face so that it is not horizontal when in this configuration. If the rotor face and vertical (see Fig. A.2), the appropriate c < n/2 Our task now is to express c in terms of the parameters of the faces. Fig. A.2 shows variables we use in the derivation. We start triangle e-f-g shown in the figure, Because a and h are two angles of this the parameters as well as some intermediate by considering triangle, and c is the complement of the third angle: c=a+b Using the law of cosines we obtain for a : a = arccos ((L2 + r2 - s2)/2Lr) By inspection of the figure we obtain for h: h = arccos(h/r) Combining the previous four expressions, we obtain the desired constraint: arccos ((L2 + r2 - s*)/2Lr) f arccos(h/r) < n/2 (A.81 Our expression for a assumes we require an explicit constraint that 0 < 4 < n. Eq. (A.7) enforces for the upper bound: the lower bound, but $<n For the qcs-curve to be monotonic, slider face. This in turn requires that the angle between of the rotor must always be greater than n/2. the constraint is: the tip of the rotor must never move tangent to the the slider face and the leading edge If we label this angle Z, as shown in Fig. A.3, (A.9 lYE Stuhovich et al. /Art$cial Intelligence 104 (1998) 211-264 261 Fig. A.3. The rotor face must not move tangent to the slider face. The worst case is when the rotor angle is at its smallest, which occurs when the tip of the rotor touches the lower end of the slider face as shown in Fig. A.3. If we define +’ as the complement of the angle of the slider face, then by inspection of the figure: :=I@‘+8 Because @’ is the complement of @ we can write: @=TC-3 For the tip of the rotor to touch the bottom of the slider face, B’S value must be: 8 = arcsin(h/r) Combining the previous four expressions we obtain the final form of the constraint: Q < arcsin(h/r) + n/2 (A.lO) If the slider face angle + is equal to 0, only one end of the slider face will touch the rotor. If @ is less than 0, the rotor can touch the back side of the slider face, but this should not happen because contact is allowed only on the outside surface of a part. To ensure that the rotor cannot touch the back side of the rotor face, and that the contact can actually be face contact (rather than contact at just one end of the face) we enforce the constraint: !!f>O Eq. (A.l) through Eq. (A.1 1) are the complete in Fig. 26 implements qcs-curve H. Now to complete set of constraints to ensure this library entry, for the end point coordinates of the qcs-curve. One end point in Fig. A.3. This end point is the upper left end point of sufficient that the geometry we must derive expressions corresponds curve H. Its coordinates are: to the configuration 81 = arcsin(h/r) (A.12) (A.ll) 262 iYE Stuhovich rt al. /Artijcid lntelli~mce I04 (IYW) 21 l-264 of a pair of faces used to implement qcs-curve B. The rotating its position measured positive counterclockwise with angle 8. The translating Fig. A.4. The parameterization about the origin, horizontally, the sides that are inside the solids containing the faces. its position measured positive to the right with x. Shading indicates face rotates face translates the back sides of the faces, i.e.. x1 = r cos(H1) (A.13) The second end point corresponds that x2 = -XI): to the configuration in Fig. A.2. Its coordinates are (note 02 = n - arcsin(h/r) x1 = -r cos(&) (A. 14) (A.15) For example, if we measure several other qcs-curves.“” By appropriate use of coordinate to the left rather than to the right, we have an implementation transformations, we can use this pair of faces to the position of the for curve F. the rotor angle positive for curve B. If we flip the geometry over to the left rather than to the right, we have an for curve D. Thus, with the same basic geometry and constraints, we can all four kinds of diagonal curves for the case in which q1 is rotation and q2 is to and q2 implement slider positive If we flip the geometry over as in Fig. A.4, still measuring counterclockwise, we have an implementation and measure implementation implement translation. By the obvious coordinate implement all four kinds of diagonal curves for the case in which qi is translation is rotation. transformation, we can also use this geometry the slider position positive 3x The coordinate curve end points (e.g.. Eq. (A. 12)) but they do not affect the constraints proper slope (e.g., Eq. (A. 1)). (there are sign changes) transformations change the expressions for the coordinates of cs- that ensure the curve is monotonic with T./T Stahovich et ul. /Artijiciul lntelligencr 104 (1998) 211-264 2h3 References l] 1 R.C. Brost. Analysis and planning of planar manipulation tasks, Technical Report CMU-CS-91-149. Carnegie Melon University, Pittsburgh , PA. 199 I. [2] M.E. Caine, The design of shape from motion constraints, Technical Report 1425, MIT AI Lab.. Cambridge. MA, September 1993. [ 3 1 K.W. Chase, A.R. Parkinson, A survey of research in the application of tolerance analysis to the design of mechanical assemblies, Research in Engineering Design 3 (1991) 23-37. 141 R. Davis, Diagnostic [5] J. de Kleer, Causal and teleological reasoning based on structure and behavior, Artificial Intelligence 24 (1984) 347-410. reasoning in circuit recognition. Ph.D. thesis. Massachusetts Institute of Technology, Cambridge, MA, September 1979. (61 J. de Kleer. J.S. Brown, A qualitative physics based on confluences. Artificial Intelligence 24 (1984) 7-83. [7] J.R. Dixon. E.C. Libardi Jr., S.C. Luby, M. Vaghul, Expert systems for mechanical design: examples of symbolic representations of design geometries, Engineering with Computers 2 (I) (1987) l-10. [8] R.J. Doyle, Hypothesizing device mechanisms: opening up the black box, Technical Report 1047, MIT Al Lab., Cambridge, MA, 1988. [9] AC. Erdman, G.N. Sandor, Mechanism Design: Analysis and Synthesis. Vol. I. Prentice-Hall. Englewood Cliffs, NJ. 1983. 1 IO] B. Falkenhainer, K.D. Forbus, Compositional modeling: lindin g the right model for the job, Artificial Intelligence 51 (1991) 95-143. [ 1 l] B. Faltings, Qualitative kinematics [ 121 B. Faltings. Qualitative models in mechanisms. Artificial Intelligence 44 (1990) 89-1 19. in conceptual design: a case study, in: Reasoning with Diagrammatic Representations, pp. 69-74. Papers from the I992 Spring Symposmm. Technical Report SS-92-02, AAAI Press. 1992, [ 131 B. Faltings. A symbolic approach [ 141 B. Faltings, E. Baechler, J. Primus. Reasoning about kinematic to qualitative kinematics, Artificial Intelligence 56 (1992) 139-170. topology. in: Proc. IJCAI-X9, Detroit. Ml. 1989. pp. 1331-1336. [ 151 B. Faltings. K. Sun. Computer-aided creative mechanism design, in: Proc. IJCAI-93. Chambery. France. 1993. pp. 1451-1457. ( 161 K.D. Forbus. P. Nielsen, B. Faltings, Qualitative spatial reasoning: the clock project, Technical Report 9. Northwestern University, The Institute for the Learning Sciences, Evanston, 1171 K.D. Forbua. Qualitative process theory, Artificial Intelligence 24 (1984) 85-168. I IX] R. Gupta, M.J. Jakiela, Simulation and shape synthesis of kinematic pairs via small-scale IL, 199 I. interference detection, Research in Engineering Design 6 (1994) 103-123. [ IO] E.J. Haug, Computer-Aided Kinematics and Dynamics of Mechanical Systems. Volume I: Basic Methods, Allyn and Bacon, Boston, MA. 1989. [201 J.K. Hirschtick, Geometric feature extraction using production rules. Master’s thesis. Massachusetts Institute r>fTechnology. Cambridge. MA. 1986. [2 I] J. Hodges, Naive mechanics, a computational model of device use and function in design improvisation, IEEE Expert 7 (1) (1992) 1427. [22] Y. Iwasaki. R. Fikes, M. Vescovi, 8. Chandrasekaran, How things are intended to work: capturing functional knowledge in device design, 1231 I.. Joskowicz, Simplification pp. 1337-1342. in: Proc. IJCAI-93, Chambery, France, 1993. pp. 15 16-1522. and abstraction in kinematic behaviors, in: Proc. IJCAI-89, Detroit. MI, 1989. 1241 L. Joskowicz. S. Addankt, From kinematics to shape: an approach to Innovative design, in: Proc. AAAI-XX. St. Paul, MN, 1988, pp. 347-352. 1251 I,. Joskowicz. E. Sacks, Computational 1261 1~. Jojkowicz. E. Sacks, Configuration and Automation Conference, 1994. kinematics, Artificial Intelligence 51 (1991) 381416. space computation for mechanism design, in: Proc. IEEE Robotics 1271 I-. Joskowica, E. Sacks, V. Srinivasan. Kinematic tolerance analysis. in: 3rd ACM Symposium on Solid Modeling and Applications, 1995. 1281 D. Kamopp, R. Rosenberg, System Dynamics: A Unitied Approach, 1291 S. Kota. S.-J. Chiou, Conceptual design of mechanisms based on computational John Wiley. New York, 1975. synthesis and simulation of hinematic building blocks. Research in Engineering Design 4 (1992) 75-87. 264 T.lT Stahovich et al. /Am&id Intelligence 104 (1998) 211-264 [30] G.A. Kramer, Solving geometric constraint 1311 B.J. Kuipers, Qualitative simulation, Artificial 1321 T. Lozano-Perez, C-32 (2) (1983). Spatial planning: systems, in: Proc. AAAI-90, Boston, MA. 1990, pp. 7088714. Intelligence 29 (1986) 2899388. space approach. a configuration IEEE Transactions on Computers [33] T.A. Mashbum, D.C. Anderson. Automatically deriving behavior constraints for performance variables in mechanical design, Research in Engineering Design 6 (1994) 85-102. [34] N.H. Narayanan, M. Suwa, H. Motoda, How things appear to work: predicting behaviors from device diagrams, in: Proc. AAAI-94. Seattle, WA, 1994, pp. 1161-l 167. [35] PP. Nayak, L. Joskowicz, S. Addanki, Automated model selection using context-dependent behaviors, in: Proc. AAAI-92, San Jose. CA, 1992, pp. 710-716. [36] P.E. Nikravesh, Computer-Aided Analysis of Mechanical Systems. Prentice-Hall. Englewood Cliffs, NJ, 1988. [37] D.R. Prabhu, D.L. Taylor, Synthesis of systems form specifications containing orientations in Design Automation, Vol. I, Computer-Aided and positions and flow variables, associated with Computational Design, 1989, pp. 273-279. [38] D. Rosen, D. Riley. A. Erdman, A knowledge Mechanical Design 113 ( 199 I ) 205-2 12. in: Advances based dwell mechanism assistant designer, Journal of [39] E. Sacks, L. Joskowicz, Automated modeling and kinematic simulation of mechanisms, Computer-Aided Design 25 (2) (1993) 106-l 18. [40] D. Serrano, D.C. Gossard, Combining mathematical models with geometric models in CAE systems. in: Proc. 1986 ASME International Computers in Engineering Conference and Exhibition, 1986. pp. 277-284. (411 D. Serrano, Constraint management in conceptual design, Ph.D. thesis, Massachusetts Institute of Technology, Cambridge, MA. 1987. 1421 H. Shrobe, Understanding [43] T.F. Stahovich, SKETCHIT: a sketch interpretation linkages, in: Proc. AAAI-93, Chambery, France, 1993, pp. 62&625. tool for conceptual mechanical design, Technical Report 1573, MIT AI Lab., Cambridge, MA, March 1996. 1441 T.F. Stahovich, R. Davis, H. Shrobe, Turning sketches ASME Conference on Design Theory and Methodology, into working geometry. in: Proc. 7th International 1995. [45] T.F. Stahovich, R. Davis. H. Shrobe, Generating multiple new designs from a sketch, in: Proc. AAAI-96. Portland, OR, 1996, pp. 1022-1029. [46] T.F. Stahovich. R. Davis, H. Shrobe, Qualitative rigid body mechanics, in: Proc. AAAI-97, Providence, RI, 1997. 1471 T.F. Stahovich, Computational tools for conceptual design, Master’s thesis, Massachusetts Institute of Technology, Cambridge, MA. 1990. [4X] R.M. Stallman, G.J. Sussman, Forward computer-aided 1976. in a system for circuit analysis, Technical Report Memo 380, MIT AI Lab., Cambridge, MA, September reasoning and dependency-directed backtracking [49] R.F. Steidel Jr., J.M. Henderson. The Graphic Languages of Engineering. [50] D. Subramanian, C.-S. (E.) Wang, Kinematic synthesis with configuration John Wiley, New York, 1983. spaces, in: Proc. 7th International Workshop on Qualitative Reasoning about Physical Systems, May 1993, pp. 228-239. [5 I] K.T. Ulrich. Computation and pre-parametric design, Technical Report 1043, MIT AI Lab., Cambridge. MA, 1988. [52] R.V. Welch, J.R. Dixon. Guiding conceptual design through behavioral reasoning, Research in Engineering Design 6 (1994) 1699188. 1531 D.S. Weld, J. de Kleer (Eds.), Readings in Qualitative Reasoning about Physical Systems, Morgan Kaufmann, San Mateo, CA, 1990. ( _%I] B.C. Williams, Qualitative analysis of MOS circuits, Artificial Intelligence 24 (I-3) (1984) 28 l-346. [.55] J. Wolter, P. Chandrasekaran, A concept for a constraint-based representation of functional and geometric and CAD/CAM Applications. design knowledge, ACM Press, New York, 199 I, pp. 4099418. in: Proc. Symposium on Solid Modeling Foundations 