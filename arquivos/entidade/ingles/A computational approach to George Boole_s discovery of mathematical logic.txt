Artificial Intelligence 9 I ( 1997) 28 l-307 Artificial Intelligence A computational approach to George Boole’s discovery of Mathematical Logic Luis de Ledesmaa-*, Aurora Phez”,‘, Daniel Borrajo b*2, Luis M. Laitaa,3 a Facultad de Informdtica, Universidad Politknica de Madrid, 28660 Boadilla de1 Monte, Madrid, Spain h Escuela Politknica Superior; Universidad Carlos Ill de Madrid, 28911 Legant%, Madrid, Spain Received December 1995; revised September 1996 Abstract This paper reports a computational model of Boole’s discovery of Logic as a part of Mathemat- ics. George Boole ( 1815-1864) found that the symbols of Logic behaved as algebraic symbols, and he then rebuilt the whole contemporary theory of Logic by the use of methods such as the solution of algebraic equations. Study of the different historical factors that influenced this achievement has served as background for our two main contributions: a computational repre- sentation of Boole’s Logic before it was mathematized; and a production system, BOOLE2, that rediscovers Logic as a science that behaves exactly as a branch of Mathematics, and that thus validates to some extent the historical explanation. The system’s discovery methods are found to be general enough to handle three other cases: two versions of a Geometry due to a contemporary of Boole, and a small subset of the Differential Calculus. @ 1997 Published by Elsevier Science B.V. 1. Introduction In 1847, George Boole found that, by adequately representing Logic, it became a in a precise sense: all known results branch of Algebra could be obtained by the use of standard mathematical techniques. Our objective has been to provide a coherent detailed account of this surprising discovery, both from the in Logic (and some unknown) * Corresponding author. E-mail: ledesma@fi.upm.es. ’ E-mail: aurora@fi.upm.es. * E-mail: dborrajo@grial.uc3m.es. .7 E-mail: laita} @fi.upm.es. 00043702/97/$17.00 @ 1997 Published by Elsevier Science B.V. All rights reserved PII SOOO4-3702(97)00017-9 282 L. de Ledesma et al. /Artijicial Intelligence 91 (I 997) 281-307 and the computational historical cause even though a full formalization, ematical point of view and applied genuine mathematical Section 2.2). point of view. Boole’s discovery was surprising be- to mathematize Logic, nobody had reached from a strict math- (see because no one regarded Logic there had been attempts tools, as Boole did presumably (MSS). This was the contemporary We have studied how, plausibly, Boole arrived at his knowledge of the Method of name for a method which formalization. Also, we have studied in several branches of Calculus and Probability. some and in the U.K., Separation of Symbols is a precursor of today’s abstract mathematical how Boole extensively used the method The practice of applying mathematicians but always within recognized branches of Mathematics of the 18th and 19th centuries, both on the Continent the method had been and remained common among (see Section 2). in Logic was just one more application of the discipline: Logic. Our next step was to in Boole’s Logic character of of Logic as it was presented that could discover the algebraic We concluded that Boole’s discovery method, but this time devise a computational writings, in order Logic by examining to a non mathematical representation to write a program Two facts were crucial the change (i) First, it under viewpoint of the MSS. for Boole’s discovery: in representation complex structure of syllogisms from a philosophical and conditional view of Logic as an to a view statements, the general scheme for any branch of Algebra. Sim- that are subjected the scheme consists of a set of very simple objects enormous of it as (possibly) plistically, to operations on numbers. fitting (ii) The second fact was the successful application of the MSS to Logic, which meant subset of properties of the operations on numbers held it possible to use the powerful tools of Mathematics (interesting) that some also for Logic. This made on this new domain of Logic. Our work on representation is based on fact (i) . In all his Logic texts, Boole provided the remark below, and in terms that were susceptible descriptions Sections 2.2 and 5.4). We have tried a representation which is given as input BOOLE (see Sections 4 and 5.4). The system execution applies Logic is actually a branch of Algebra. to a computational to the MSS to model (see this part of the history by designing system which we named to find that the method It is a frame-based production The first version of the BOOLE system dealt with the task in fact (ii) above (applying the successive to follow Boole’s account of as revealed by his writings on Logic and the writings about him by his [ lo], “Home MSS to Logic). states of its working memory, and its outputs are supposed his discovery contemporaries. side of a scientific mind” the “Memoir of Augustus De Morgan” [ 121, or Boole’s first biography system whose productions, See, for instance, [ 161. idea that motivated But the whole of Boole’s writings (on Logic as well as on Mathematics) provides step in our work. In Boole’s view, the process another the applies of finding whether this idea in the design of BOOLE2, same (see, for instance, which incorporates that refer to the MSS; this is the generic part of the system. However, BOOLE2 can deal not only with Logic, but with the following the MSS successfully the features of the previous version [ 2 1 ] ) . We have exploited to a branch of science is always L. de Ledesma et al./Art$cial Intelligence 91 (1997) 281-307 283 that was proposed by a contemporary it handles Logic, two different versions of a subset (see the remark below), other branches of science. Currently, of Geometry and the first principles of Differential Calculus. The result to those in Logic hold for the first version of Geometry and the Calculus, although not for reasons Thus, BOOLE2 the second version of Geometry because of a non-commutativity. from the input representation that some properties hold or not hold in that science of a science and verifies is that properties (see Section 3). of Boole similar This work can be summarized as follows. We construe the historical discovery of is to follow is the application of Logic. The second the ideas expressed reproduce not only that led to it, and so BOOLE2 nature of Logic as the sum of two sudden changes. The first one of the MSS. BOOLE2 the algebraic the representation designed system process historical discovery Boole’s results explanation abstract sciences such as Mathematics or Logic. is in Boole’s writings. We have tried to make the the result of the discovery, but also Boole’s account of the the to parallel in several branches of Mathematics. BOOLE2 constitutes a computational in a linguistic way to reproduce are reached also by trying reasons in Logic. Other discoveries in Logic, and opens a path for the study of discoveries of the discovery in the terms symbolize and symbolization are equivalent in the sense of verifying In this paper, Remarks. malize and formalization instance of some formal system. We use symbolize rather follow Boole, whose writings employ phrases such as “the use of symbols”, expression”, “the symbolical for the basis of a Calculus”. “algebra of symbols”, . . . are sufficient that a science subject matter language”, “symbolic forms than formalize in order “let us use the symbols”, or to for- is an to “symbolic the trace of a point moving ; and selecting a class of individuals idea of operator. For instance, differentiation close to the modern taking (“transference”) Also, the terms operation and combination depart here from common usage, because in Boole’s time. Thus, an operation means is an oper- is an operation is an from a universe in these three examples are (identified with a set of in in Logic two successive acts of yield the trace of a is a parallelogram. 4 we wish to reflect the conception of sciences something ation of Calculus; of Geometry operation of Logic the well known concepts of derivative, individuals). On the other hand, we use the term combination (of operations) much the sense of today’s algebraic operation. For instance, selecting the class of the individuals which are both x and y. Similarly, point subjected Finally, first from class x and then from class y (“class succession”) (“class”). The effects of the operations two successive differentiations yield a second derivative. two different directions segment, and predicate through a segment to two movements in Geometry individuals through 2. The actual historic discovery Boole was an able developer of a methodological the second half of the 18th century, and continued tradition begun in Britain during in France during the first half of 4 This original presentation of elementary Geometry is due to Gregory [ 141. 284 L. de Ledesma et al./ArtQkial Intelligence 91 (1997) 281-307 of the method, and Boole who developed in our opinion the 19th century. Arbogast, Lagrange Murphy, Greatheed, Hershel method [30], but philosophy involved dition subjects of application, The method was called at the heart of Boole’s discovery pline. the methodological and others were British mathematicians in France and others worked [ 11, Chapter 21. the who used the it was Gregory who more clearly expressed tra- [6,21]. This their these symbols as with algebraic entities. of Symbols it was (MSS) of Logic as an algebraic disci- idea of separating symbols of operations it most fully from and the Method of Separation and development and operating with 2.1. An example of the application of the Method of Separation of Symbols An example from one of Gregory’s articles [ 13) serves to illustrate the MSS: Gregory determines the symbolic laws used in Newton’s binomial, (a + b)” = an + na”-‘b + “‘y ,” an-*b2 + . . . + b” and notes symbols are necessary that according to Euler only the following three laws of combination of for the general application of the binomial development: the symbols a, b, n in (a + b)” represent other entities, provided law: ab = ba. of the binomial, which law: c(a + b) = cu + cb. law: un’un = a”‘+“. the development l Commutative l Distributive l Index Therefore, is valid when fulfill of Differential Calculus laws, it can be assumed which means us consider an example application derivative of a product of functions u o. The known equality and of the Calculus of Finite Differences that Newton’s binomial development to repeat that it is not necessary from Gregory’s article: three laws. Gregory states that since these in principle it can be proved refers to numbers, they that the operations to these are subject is valid for such Calculi, case. Let of the nth the determination the proof for each particular d(u.v) -----=~--+~- dx du dx du dx may be written as follows, ’ u) d(u dx= (;+~),u,u,, where d’/dx but not upon U. Gregory states: is an operation upon L! but not upon u, and d/dx is an operation upon u and, as they are independent . . . these operations, of each other, they must be commutative, hence they come under the circumstances to which the binomial from their nature, are distributive theorem applies. So, the nth derivative may be considered as a power, the result being: L. de Ledesma et al./Artijciul Intelligence 91 (1997) 281-307 285 &“(u. 0) = ($ + A)“@. 0) = {(g)” +n(g)n-‘(&) + “‘r’,‘)(~)~-‘(~)‘+...}(u.“) = ud”v dx” I n&d”-‘r: -+ dx dx”-’ n(n - 1) d*U d”-‘v 1 * 2 __+...~ dx* dx”-2 Gregory says “separates” that the result the subjects of application and operates with the former as with algebraic entities, applying is also valid when II is fractional or negative. Thus, of to for derivatives the symbols from Gregory those derivatives, them Newton’s binomial formula in this particular case. Even though Gregory’s contribution to the method is usually recognized as substantial, only Boole dared historical research, which works according to try it on a previously and detailed explanation non mathematical of this process has been a substantial discipline: Logic. The part of our that a program introduce this Section 2 briefly summarizes. We then to our reconstruction of Boole’s discovery. The historical development of the method has been studied in [ l&19,30] as part of the history of Symbolic Calculi. More detailed accounts on Boole are in [ 6,21-23,291. 2.2. Boole und the birth of Mathematical Logic Prior to Boole, Lambert (1667-1733), (1728-1777), in which the idea of membership there had been attempts to mathematize Logic by Leibniz (1646- and others, but the results were for instance, produced an abstract calculus of terms, attributes, in a class was related to logical concepts. between [ 17, Chapter V] . Boole cited but did not cite the first approach. This approach was not actually known until among many other limitations [5, p. 2401 in a context of the principle of contradiction, his calculus could not take account of negation and conjugation and disjunction, 1716), Saccheri very limited. Leibniz, and classes, Nevertheless, conjunction Leibniz once Leibniz’s mathematical half of the 20th century. from their interpretation. use of symbolism, the necessity of a systematic and Gregory saw with astonishment the use of symbols founded Boole’s awareness of the power of Mathematics of and on the possibility In 1839, Boole met Gregory, the Cambridge Mathematical Journal. Boole submitted several that Boole had developed by as a calculus of symbols began early. In 1835, at the age of twenty, he gave an address on Newton which already contained ideas on separating who had recently papers for publication himself an approach acquainted Boole with the properties of the MSS. Boole later acknowledged was one of his inspirers, but he surpassed Gregory by making Symbolic Calculus, particularly Boole’s to the one developed at Cambridge. Gregory that Gregory that the -influenced only by his readings of Lagrange and other French mathematicians- the MSS, could be applied outside Mathematics, in Logic dated from much earlier: “... I was induced by the interest thread of former it (the controversy) and specifically the bold guess to Mathematics very similar the almost to resume to Logic. forgotten inspired, interest which 286 L. de Ledesma et aL/Arti@ial Intelligence 91 (1997) 2X1-307 inquires” tween However, [ 3, p. 11. He renewed his interest be- the philosopher William Hamilton and the mathematician Augustus De Morgan. that Gregory had been interested in Logic because of the controversy there is no evidence in Logic. Boole’s exposition Mathematical Analysis between Logic and Language: of the first principles of Logic at the start of his book “The of Logic” [3] reveals his awareness of the interdependence is the existence to conceive of a class, and That which renders Logic possible, our ability a common name. The theory of Logic Language. A successful attempt to express logical propositions by symbols, of whose combinations should be founded upon which . . . [3, pp. 4-51. in our minds of general notions, its individual members by connected with that of the laws the laws of the mental processes language they represent, would, so far, be a step toward a philosophical is thus intimately to designate Thus, Logic is a language with signs and rules for combining to which a name (a label or a sign) to classes belonging the laws which the idea of a class, assigned determine mental processes which carry out these acts of classification. 5 The goal of determining laws then led to the discovery of Mathematical Logic, which Boole formulated Mathematical Analysis of Logic” laws are found by investigating to a universe of discourse, signs. The mind forms is given. Once signs have been the necessary next step is to the the signs follow. These [3] as follows: in “The in succession, to select from let us conceive shall be supposed . . . When no subject of the class X as are contained from the class Y of such individuals a class of symbols x, y, z, possessed of the following it contains to be the subject understood, individuals that subject all the X’s [individuals Further, character. The symbol x, operating upon any subject comprehending classes, some class] which 1 (The Universe) the product xy will represent, selection it, the result being an act of election Thus select from We may express is indifferent symbolic performed performed once x” = x . . . (These) these it appears or of is expressed, we shall suppose so that we shall have x = x( 1) . . . the selection of the class Y, and the in the class whose members are both X’s and Y’s . . . The result of of the subject. of the grouping or classification is independent as a whole, we from a group of objects considered the group the X’s the results by the equation x(u + u) = xu + xu . . . It ,.. The expression of this law is xy = yx. The result of a given act of election is the result of the same act to be n times performed, we have for the basis of a calculus. From the first of that they are from the second in common with symbols of quantity, it is indifferent whether the class X, or whether we divide and then connect them separately, this law mathematically into two parts, select in one aggregate conception. in what order two successive acts of election are performed twice or any number of times in succession that elective symbols are distributive, properties which they possess the same operation laws are sufficient . . . supposing commutative; 5 Similar ideas are found Science” 141, a lecture delivered at Cork. These, the only published works of Boole on the subject. in “The Laws of Thought” [ 5 I, his second book on Logic, and “The Claims of together with “The Mathematical Analysis of Logic”, are L. de L.edesma et al./Art$cial Intelligence 91 (1997) 281-307 281 and in virtue of which, all the processes of common algebra are applicable . . . The third law X” = x we shall denominate present system peculiar to elective symbols and will be found of great importance the index . . . to the law. It is This quotation explains that Logic is a calculus governed by algebraic [ 31 completely develops an Algebraic Logic based on precisely laws (distribu- and index), which is the starting point for the use of the MSS. Boole’s tive, commutative, those three entire book the solution of sys- laws. This special Algebra the somewhat it is powerful: tems of algebraic (Boole proved of the existence of combinations level of Boole’s contemporary Logic premises no medium of comparison). Also, his Algebra is absolutely should not be confused with Boolean Algebra, a different discipline, built up by Jevons, Peirce, Venn, and others after Boole’s death. its main procedure being equations. However, it even surpasses is elementary, in which there Boole’s discovery was the realization tion, meaning as some of the families that its basic operations in Symbolic Algebra. that Logic is a science amenable follow the same laws of combination to symboliza- of symbols 3. Overview of BOOLE2 Our first program BOOLE~ succeeded in applying the same conclusions [ 71. Logic” as Boole at the beginning the MSS to Logic, and it reached of of his “Mathematical Analysis Since we believed (whether that-in Boole’s view-ascertaining to it) is always whether a science the same, we undertook izable heuristics of generalizing as well. Gregory’s Geometry 6 was chosen as a first test case. the MSS is applicable ~00~~1% to make the program applicable is symbol- the task to other sciences interesting level of detail for several, and further cases. The separation-of-symbols that, even though it does capture an able to handle used since the 19th century under the name of formalization We emphasize of case studies, potentially consistently Whenever a portion of knowledge from the particular meaning way as those of, say, Logic, Algebra, Graph Theory, etc., a separation-of-symbols has been carried out. In this sense, any science could be a candidate There would always be an output, appropriate Boole’s contemporary study. the system does not currently handle a large number it is heuristic has been or abstraction. (separated are found to behave in the same process input for the system. if we could devise an to their than others to the spirit of the present is symbolically they have in their domain) of the science. Due sciences are more suitable low degree of formalization, it is or is not symbolizable, represented and its symbols representation Our subsequent representing and reasoning of Differential Calculus are symbolizable is not symbolizable Geometry version, BOOLE2, uses a uniform and plausibly humanoid way of that Logic, Geometry, and a subset of Gregory’s because of its lack of commutativity. BOOLE2’s repre- [ 81, and that the generalization and is able to discover h A brief description can be found in the remark of Section I 288 L. de Ledesma et al./Artijicial Intelligence 91 (1997) 281-307 Given: A science in terms of: l Set of operations of the science l Set of combinations if the science otherwise of the science is symbolizable, Return: l True False or l Laws that are fulfilled Fig. I. Formalization of BOOLE:! discovery task and reasoning provided sentation symbolization, generic part of the system concerns science as input: operations, combinations becomes applicable to domains besides Logic. For simplicity of exposition, most examples tools are intended its basic contents can be made accessible to handle any science as a candidate for to the system. The to receive some specific laws thereof. Thus the system the MSS and is designed and the possible in this paper are drawn from Logic, but BoOLE2’s there are parallel examples starting point science being symbolizable incorporating of a science algebraic properties task. the discovery the science in terms of its operations and whether in the other domains is the knowledge or not, and it decides whether that BOOLE2 and goals prior has handled. to the discovery of a laws allow sciences. The input is a description the discovered to the set of symbolizable and combinations; the output is a record of its Fig. 1 is a formalized depiction of it is symbolizable. BOOLE2 is designed in a human-like manner and to be consistent with Boole’s account of his reasoning process. The program’s problem space consists of these elements: to operate and laws of a science, and set of combinations in which some combinations of a science, the MSS fulfill is symbolizable, the science initial operations, that is, determine whether state space: sets of instances of operations, combinations initial state: set of generic goal: find out whether a state exists requirements; operators: l apply a combination l check whether a combination heuristics: instance, when a combination to perform a different context, when two mathematical a factoring process. a set of techniques used by a human agent to two operations, fulfills a law, in a discovery process. For has been performed with operations 01 and 02, try the same combination with 02 and 01 to test for commutativity. Or, in try are tested for equality, expressions the initial goal depends on reaching a number of subgoals, Fulfilling other subgoals, and so on. The achievement discovery process. Fig. 2 shows the top part of the subgoaling reasoning. 7 This heuristic-guided insightful reasoning method of Boole. that in turn need of each goal simulates one step of the backward process is an interpretation of the seemingly structure of BOOLE2’s ’ The numbers conclude that a science in parentheses indicate is symbolizable. the number of instances of those laws that have to appear in order to L. de Ledesma et al./Artijiciol Intelligence 91 (1997) 281-307 289 Incorporate science, if possible, to symbolization and Qicorcl laws 2 Fig. 2. Top part of the subgoaling structure generated by BOOLE2 when reasoning. For example, the initial state in the case of Logic is: is only one simple operation, called logic-class. three instances of this concept are generated: x, y, and z, which describe the generic act of there in Logic. Each one represents in the quotation of Section 2.2. Set of simple operations: Initially, three simple generic operations idea of Boole expressed election Set of combinations: tion 2.2 and correspond roughly succession and aggregation, which are also described in classical and disjunction to conjunction in Sec- logics. 4. Representation in BOOLE2 A key issue in BOOLE2 is representing in this section, but there are also science-dependent are described concepts and a production tool for generating production an overview of the frames hierarchy the input science. Most aspects are described and heuristics which representation for using a frame-based systems, FRULEKIT [ 3 11. Fig. 3 shows, as an example, for actions, both implemented in Section 5. We have chosen a frame-based for the science Logic. procedures system below The hierarchy of frames has three parts: (a) static science-independent, its frames correspond to generic descriptions of concepts, without and (c) dynamic. The static science-independent science-dependent, all sciences; that every science will possess an instance of every frame. The static science-dependent to a science, but also consists of frames and instances part is specific before execution of the production system. Finally, by the production combinations. that are created are created system. The next subsections discuss how to represent operations and part is common the dynamic instances implying (b) static to 290 L. de Ledesma et ul./Art@ciat Inteltigence 91 (1997) ZRI-307 SCIENCE-------------LOGIC SIMPLE-OPERATION ___--- __l-~-=f~~=~~~~l~~l~- ----x Y z i _“=~~~II~~.--_---.---, -----______ ’ - Result1 j - Result ” LOGIc_CLASS RESULT-CLASS i PROTOTYPE-COMBINATION _. Succession _ ’ _. Aggregation j I_ COMBINATION Combination I COMB~ATION_~STANCE ---.-XC-~--- - - - - - - - - - i - Combination a __--- __---: _ _ + - Commutative 1 b C is the static science-independent Pa& (h) is the static CONTROL---------- - ContrOl a Fig, 3. Hierarchy science-dependent frames in BOOLE2 ,,f part, and (c) is the dynamic Part. for Logic. (a) Frame simple-operation Slot Comments name science identifier of the operation science to which it belongs notat ion linguistic representation of the operation Fig. 4. Representation of the frame simple-operation. 4. I. Representing operations The operations of any science are defined in terms of subclasses of a predefined frame called simple-operation. simple operation logic-class. in Calculus, and linguistic notation representation is explained (partial) In Logic, Similarly, differentiation. there is transference, the subclass of simple-operation in Geometry is the and Fig. 4 shows the definition of this frame The slot notation a the name of the operation. The describes of the operation that parallels in detail in Section 4.2.2. its slots. The first two slots are self-explanatory. L. de Ledesma et al./Artificial Intelligence 91 (1997) 281-307 291 Frame transference is-a simple-operation I Slot Comments I magnitude number of dimensions of the transference direction directions of the transference Fig. 5. Representation of the frame transference Slot name science Frame combination Comments name of the combination science to which it belongs arithmetic-name name given to its arithmetic role Fig. 6. Representation of the frame combination. Besides inheriting all slots from their respective superclasses, hierarchy can define new local slots. For instance, slots of simple-operation and defines generic examples of the simple operation of the science are generated. two new ones, as shown the frame transference all subclasses of the the in Fig. 5. Initially, inherits Also, for each science, and result-transference operations unlike are used the so-called result operations in Geometry) (e.g., result-class in Logic, are defined as simple operations. Result two simple operations, to represent the outcome of combining the other simple operations which are defined at the initial state. 4.2. Representing combinations The second input to BOOLE2 is the combinations for a given science. Combinations require more representation do when combining space). The static character of combinations whereas tions. two operations features, since one must describe what the system should of the first operator of the problem is defined by the frames, in terms of rules and func- the dynamic (application is defined they are) they do) character (what (what 4.2.1. DeJinition of combinations Fig. 6 shows the static definition of the frame combination. The arithmetic-name that the combination will receive in Algebra, once the system discovers science can be symbolized, and, therefore, into Algebra and transformed using algebraic that that its formulae can be tools. The allowed slot values is the name the corresponding translated are times and plus. 292 L. de Ledesma et al./Art@cial Intelligence 91 (1997) 281-307 Frame prototype-combination is-a combination Comments set of laws that the combination fulfills generator of notation for each operation an alternative way of generating notations generator of the resulting notation Slot laws notation-generator-l notation-generator-2 result-generator Fig. 7. Representation of the frame prototype-combination. I Frame combination-instance is-a combination Slot Comments -I simple-operation1 the first simple-operation that is combined simple-operation2 the second simple-operation that is combined simple-operation3 sometimes there is a third optional operation result result of combining two simple-operations Fig. 8. Representation of the frame combination-instance. For each science, two subclasses of this frame are defined: the combinations themselves; its definition laws that the combination Represents in Logic slots refer to how the combination the two instances of the frame prototype- have values for the slot name of succession and aggregation, respec- applies to two operations in Section 4.2.2. The system fills the slot laws prototype-combination. is in Fig. 7. For example, combination tively. The generator (how it works) ; they are explained when discovering combination-instance. tion the succession of x and y, it generates an instance of the frame result-class, and an instance of the frame combination-instance cation of this combination. Among other things, avoid repeating the combination der. Fig. 8 shows represent combination. of the frame. The slots simple-operation* in the corresponding the appli- to easily in the same or- to different pairs of operations. For example, of a combina- in Logic on the same pair of operations if BOOLE2 performs that were combined instance of the the description that represents the successive the operations the program applications this allows Represents fulfills. The value of the slot result is the notation that results from applying the combination. Section 4.2.2 explains this in more detail. L. de Ledesma et al./Artijicial Intelligence 91 (1997) 281-307 293 operationl,operation2) Function Succession-Notation-Generator( name1 := operation-name(operation1); name2 := operation-name(operation2); If operation2 Then Return simple-operation-notation(operation2) Else If name1 = name2 Then Return Else Return ( (ALL THAT ARE name1 ) ) ( (name2 THAT ARE namel) is a result-class (name2 THAT ARE NOT name1 ) ) Fig. 9. Function that computes notations for performing the succession of operations in Logic. 4.2.2. Dejinition of notations One must also define how the combinations by Boole and Gregory for Logic and Geometry, textbooks, motivated our representation and combinations. For instance, based on Boole’s description of Logic, we generated a set of notations in form and meaning, to Boole’s own sentences. Thus, two functions need to be defined and of a science can be computed. The the open- of their respective of perform- in English which to perform the notations of opera- to describe described notations ing chapters of Calculus operations ing the two combinations are similar, both a combination, tions: and for combinations the output of the notation generator (notation-generator). for succession We de- in Logic, but equivalent and Cal- function when applying in Geometry for representing the input operations the notations generated Notations scribe here only work has been done for aggregation culus. Fig. 9 shows succession For example, suppose BOOLE2 applies succession the function Succession-Notation-Generator and y (instances an instance of result-class, generates the following notation to two operations of logic-class) in Logic. with the frames representing the frame and since x and y are not the same, for y: to the operations x and y. It calls x for y is not the function as arguments. Since ((Y THAT ARE X) (Y THAT ARE NOT X)) the result for representing (result-generator). while x is just represented by its name. Notations as input both the name of the first operation second operation from applying function name and notation consists of all the notation elements element, or that have name as the last element and the atom ARE as the next-to-last. For instance, For example, Fig. 10 shows the result-generator to the two operations and the notation generated it returns for succession. The result of applying takes for the that results that have name as the first for the second operation by notation-generator; the combination. This function the notation the notation succession suppose is: N=((YTHATAREX) (YTHATARENOTX)) 294 L. de L.edesmu et nl./Art@kd Intelligence 91 (1997) 281-307 Function Succession-Result-Generator( namelqotation) Result := {}; For n in notation do If name1 = first-element(n) (name1 = last-element(n) previous-to-last-element(n) Then Result := Result U {n}; OR AND = ARE) Return Result J Fig. 10. Function that computes the resulting notation after performing a succession of operations in Logic. Rule Succession If 01 is a logic-class 02 is a logic-class there is no instance of combination-instance with nl := name AND with n2 := name AND with: name = succession; simple-operationl=ol; simple-operation2=02 Thenn:=Succession-Notation-Generator(ol,o2); r := Succession-Result-Generator( Create a new instance of combination-instance nl, n); with: name = succession; simple-operation1 simple-operation2=02; = r; result Create a new instance of result-class = 01; notation = r with: J Fig. 11. Rule that performs the succession of two operations in Logic. The output of Succession-Result-Generator(x, N) would be: ((Y THAT ARE X)) 4.2.3. Dejinition of rules for the combinations to actually compute These to two operations” of the problem the combinations. rules space to be instantiated are: combination, rules are all very similar. The left-hand side (initial or the result of a previous combination) and a combination, rules needs production the operator “apply a combination in Section 3. The operator variables BooLE2 implement as defined operation 1, and operation2. The combination finds two operations such that the combination The right-hand new instances: of the science succession of two classes side generates notations the corresponding involved), and a combination-instance in Logic. has not yet been applied result-* in this order. to the two operations for the operations and the result, and defines two frame (the * stands for the simple-operation frame. Fig. 11 illustrates the L. de L.edesma et al./Art@cial Intelligence 91 (1997) 281-307 295 BOOLEZ Working Memory (WM) Rules Set (RS) Specific Rules Generic Rules Common WM Gen. Geometry RS Common RS Geometry RS Diff. Calculus RS Other Sciences WM Other Sciences RS Fig. 12. Architecture of BOOLE2. 5. BOOLEZ as a production system ~00~~2 is a production rule set, and control. scriptions common rules and frame descriptions specific the inputs is advantageous, Its generic knowledge to any science, while its specific knowledge system with three classical components: working memory, consists of a set of rules and frame de- is composed of a set of into generic and for each science, given it allows creating a discoverer science. This partition for each particular since for that science. Fig. 12 shows the system architecture. and final states represent The initial facts in working memory describe its algebraic character. The intermediate states of the scientist during his or her reasoning. The generic production whether a given science can be symbolized how to perform combinations towards the science-specific an input. the input science prior to any test of the plausible mental rules determine rules describe guides BOOLE2 though it has the role of in the science. The control mechanism in G. Boole’s writings. Even the same kind of reasoning in BOOLE2, conceptually or not, while that is found the specific is contained knowledge Working memory and a set of frame in BOOLE2 consists of a set of frame descriptions instances. For example, Fig. 3 shows the hierarchy of frames in Logic. Working memory rules was already discussed and control. in Section 4. The next two sections describe the production 5.1. Rule set The rules can be classified into the following groups: Recording rules. These collect all laws that are found to hold in a given science. 296 L. de Ledesrna et al./Art$cial Intelligence 91 (1997) 281-307 Rule Symbolizable If s is a science AND AND is a prototype-combination cl cl1 is commutative with combination = cl AND c2 is a prototype-combination cl2 is commutative with combination = c2 AND d is distributive AND with combination1 = cl; combination2 = ~2; = True; Then Modify s with symbolizable Modify cl with arithmetic-name Modify c2 with arithmetic-name = Times; = Plus Fig. 13. Rule that decides whether a science is symbolizable. independent General rules. These control the abstract reasoning for considering a science symbol- since they embody knowledge of the MSS. For izable. They are all science instance, Fig. 13 shows an example of the rule that states whether a science is sym- bolizable or not. It tests whether and jointly distribute. renames plus. The renaming will allow a future system symbolizable If so, it concludes the combinations with their respective algebraic and it times and to operate with any that the science can be symbolized, in the algebraic problem space. there are two combinations that are each commutative (under development) (arithmetic) science names: laws for the sciences, such as commututivity, and index-idempotence. When a law rule fires, the system to that law (see Fig. 3, part (c) ) , which that a given does not fulfill a law, as in the case of the Generalized Geometry. The test, which we except for the equality of notations the law. Other rules discover the common that the given combination Law rules. These check distributivity, idempotence, creates an instance of the frame corresponding asserts combination law rules are science-independent, discuss below. For example, instance, combination-instance, order, such that rl the result r of applying a combination n to operations opl and 0~2, and another in reverse the result rl of applying n to the same combinations the rule that tests commutativity looks for one combination- fulfills The science-dependent function equal-notation returns True if two notations is equal to Y. boolean are equal returns True if: in the given science. For instance, in Logic, the function equal-notation l The two notations are identical, or l The difference between the sets notation1 and notation2 is empty. The difference that are equal. Two notation elements, is computed by removing notation elements nl and n2, are equal if they are identical (nl = n2), or if the first element of n1 the last element of nl, the last element of n2, the first element of n2 equals equals and NOT does not appear in either of the notation elements. For instance, of the following notation elements, only 1, 2 and 3 are equal. L. de Ledema et al./Artificial Intelligence 91 (1997) 281-307 297 Notation Element 1: (X THAT ARE Y) Notation Element 2 : (X THAT ARE Y) Notation Element 3 : (Y THAT ARE X) Notat ion Element 4 : (X THAT ARE NOT Y) Notation Element 5: (Y THAT ARE NOT X) The following two notations are equal: Notation 1: ((X THAT ARE Y) (X THAT ARE NOT Y)) Notation 2 : ((X THAT ARE NOT Y) (Y THAT ARE X) ) As another example, that requires (or a subset of them) Calculus operators the equality of two notations the successive application (formulae) of 17 mathematical in the Differential transformation to one notation yield the second notation. Combination erations of a science; rules. These science-dependent these rules were already described rules perform combinations in Section 4.2.3. over the op- the heuristic of two operations rules. These science-dependent the combination, in Logic they do not just cede control rule forced-succession Forced combination tics by selecting which combination peform ample, the two operations 02 and 01, if it already has performed 01 and 02. If the results of both combinations then fire. This is human-like over, this commutative. is the likely way that one would try to prove reasoning which Boole employed rules act as problem space heuris- rules should be tried. These rule. For ex- to combine to a combination guides the system are the same, the commutativity the opposite combination of rule will in his writings. More- is that a given combination Continuation They prevent using be applied rules. These heuristic rules lead to uniformly applying the combinations. the same combination twice in a row when other combinations can instead, by giving priority to rules that did not fire during the last cycle. 5.2. Control mechanism is controlled by means of an agenda mechanism. Rules are organized Execution six priority levels with the more abstract rules at lower priority. In order of decreasing priority, general rules. law rules, forced combination rules, in rules at higher priority, and the more detailed rules, the rule types are: recording rules, combination rules, and continuation Beginning with the highest priority, fire. If none, fires, control with the forced combination then the next lower priority returns to highest priority the rules are matched’ to select a rule that can rules are matched, and so on. When a rule can be overriden rules. The agenda mechanism rules and the continuation rules. ’ FRULEKIT uses a Rete net for efficiently matching the rules. 298 L. de Ledesmu et al./Artijicial Intelligence 91 (1997) 281-307 5.3. Execution of the program BOOLE~ is initiated by loading (into working memory followed by loading part of the program, independent to Appendix A). A set of instances of the simple operations of the science so that they can be combined. Guided by the control mechanism, combination Execution ends after the genera1 rules have produced a definitive answer of symbolizability, leads to firing other combination, rules have filed the discovered the science-dependent and the recording rule fires, which laws. and rules) the science- part (refer is defined the first applicable rules. to the question law and control 5.4. Recapitulation on the input science in BOOLE2 how an input science We now recapitulate the previous is represented For Boole and his contemporaries, subsections in BOOLE~, using Logic for illustration. in order to provide a unified vision of lacked algebraic meaning the theory of Logic was similar. Except for minor syllogism and the theory of the conditional. differences, Logic consisted of Aristotelian language Texts other than Boole’s were purely philosophical: they used mostly natural symbols, and, for the sake of a clearer and shorter look, some occasional mathematical but these symbols involved operations and no mathematical [ 151 or [ 91) . In his “Mathematical Analysis of Logic”, Boole them (see, for instance, the whole edifice of Logic. Instead, he chose one fundamental did not try to mathematize and aggrega- operation, (the tion (see Section 2.2). This is not an oversimplification, equivalent to recre- in modern the entire content of Boole’s ate and enlarge classical Logic. This captures essentially in book. Operations his book, which we therefore mode1 in BOOLE2. the act of election, and two ways of combining are the starting point for the reasoning terms) and their combinations since the acts of election and combinations it, succession are sufficient to predicates reported The act of election in Logic is represented frame, and its representation simple-operation linguistic way of reasoning, which becomes compute particular deductive strategies (or notation) in BOOLE2 as a subclass of the predefined the so-called to is used to reflect reflects the notation apparent when is allowed, the effect of combinations. A choice of different notations Two combination-instance and aggregation. Their result-generator tion of the English sentences Some of the heuristics independent. However, domain and is a law rule in BOOLE2, is a science-dependent equal-notation ends in the discovery of a law (see Section 5.1). boolean that represent frames represent functions the operations that are found in Logic (see Sections 4.1, and 4.2.2). the combinations rely on a sophisticated to be combined of Logic, succession examina- (Section 4.2). the algebraic character of Logic are testing for equality, which is a basic tool in Boole’s Logic as the that function, and it is the final step of any logical reasoning It is implemented that lead to discovering heuristic. 6. Future research There are two open questions on which we are beginning work, corresponding to the two traditional AI approaches: L. de Ledesma et al./Artijicial Intelligence 91 (1997) 281-307 299 that science as a suitable the concepts of their field or by designing Cognitive approach. We intend This approach has a cognitive represent represent would be interesting common discovers that is sketched as follows. representation that a science to match to consider focus because further sciences as inputs to the system. first input to the system, either by studying how scientists to use a new science, one must the representations entailed by the MSS and embedded is symbolizable, a wholly new representation. used in specific sciences against It the in BOOLE2. Once the system that science could be input to a future system equivalent to Algebra, Engineering approach. The goal would be to automate Boole’s Logic. Since Logic is abstractly it can be manipulated and reasoning. Therefore, one could build an algebraic theorems by ~00~~2, the same “algebraic ferent sciences using the common a theorem equations. in terms of algebraic properties system for proving sciences, as tested in dif- in BOOLE2. For example, proving to solving a system of linear theorem prover” could be applied structure defined in one of those sciences would be equivalent reasoning symbolizable there are many potentially in Logic. Since to reason 7. Related work laws, such as BACON, GLAUBER, STAHL and DALTON [24,25], The main difference between BOOLE2 and other systems dealing with the discovery AM is that i.e., it is not a data, but an abstract i.e., in which Boole reported his discovery of mathematical Logic. of historical and EURISKO [ 26-281, KEKADA [ 20,331, ARE [ 321 or CDP [ 1, pp. 46-5’73, BOOLE2 is exclusively data-driven discovery representation from the precise symbolic of some science. Further, many of its heuristics system. BOOLE2's input is not experimental instead of experimentation, stem from theory, guided by theory, 8. Conclusions it, bears on four significant fields: Boole’s work, as we understand l From Logic operations l As concerns that Boole probably This understading terms and background the viewpoint of Scientific Discovery, Boole’s achievement was finding is symbolizable, and that its symbolic operations belong that to the family of that obey commutative, distributive the History of Mathematics, we have first understood and human historical had, and the scientific and (special) index laws. the knowledge circumstances. has informed our acount of his historic discovery using the same that he reported. l In terms of Cognitive Science, our contribution to abstract a theory of an intelligent seeking to some of Finite Differences. He seemed convinced calculus truly difficult problems applicable not only in has focused on human process. Boole applied intelligence, the method the Calculus that the method was a symbolical and the Differential Calculus to other branches of Mathematics, but also to other 300 L. de Ledesrna et al./Art@cial Intelligence 91 (1997) 281-307 that he called “elective” that human (since if they had any promise of being based on similar laws. branches of knowledge, thought could be expressed in terms Boole’s boldness was to imagine they represent “the act of election of of operators these a set of individuals laws. It is not by mere operators could be combined treatise “The Laws of Thought”, and that chance in his first public appearance, in an 1835 lecture on Newton, well before he met Gregory, he stated that his aim was to deal with Newton’s mind rather than with Newton’s biography from a universe of discourse”), that he entitled his main and to check whether in laws similar to algebraic [ 2, p. 11. logical Our main research contributions l We have performed l Fourth, in terms of AI, we have found another example of an AI system and deduction resembles how humans work in representing report the use of abstraction and generalization driven reasoning, as symbolizable. The kind of representation process of discovery in a linguistic way, i.e., in terms of natural to yield truly general was powerful enough of such representations and methods is very important: he explained that and solving problems. Boole’s writings (between Algebra and Logic), goal- to “classify” a science that appears to be used by Boole in the the idea of operation in Logic language sentences. This representation rules. These reasons motivated the use from a given generalization in our computer programs. can be summarized as follows: a detailed study of George Boole’s discovery of Logic as an algebraic discipline by means of his application of the MSS that, at that time, had been used only within Mathematics. l This study part of BOOLE2 informed our computational model BoOLE2 of the steps recounted by is a computa- of the subset of Logic that Boole chose to start his reasoning. that the system can proceed logical definition of the act of election and the logical the conclusions reached by Boole him- to the program suffices for a plausible and, therefore, Boole in his Logic writings. The science-dependent tional representation The execution of BOOLE2 with Logic as input suggests from the starting point-the rules for combining instances of this act-to self. This shows that the knowledge given explanation that BOOLE2 of how George Boole might have made his discovery to a theory of this scientific discovery. itself is an approximation w ~00~~2’s methods suggest that the process is general enough their initial description. Evidence other sciences, by just entering is provided by BOOLE2’s execution with Gregory’s Geometry of the Differential Calculus, which are found symbolizable, Gregory’s Geometry, which is not. to to be applied for this generality and a small subset of and a generalization Acknowledgments We owe thanks to Professor Herbert A. Simon for encouraging the task of creating the BOOLE systems and for many subsequent fruitful discussions prior to this paper. We also thank Dr Rati1 E. Valdts-Perez reviewers, whose helpful comments have contributed to improve our us in the past to and ex- undertake tremely and anonymous work. L. de Ledesma et al./Artijicial Intelligence 91 (1997) 281-307 301 Luis de Ledesma, Aurora Perez and Luis M. Laita were supported of Madrid, projects DGCYT-PB910036 in part by the and Spanish Government 375192. and the Government Appendix A Below is a detailed removing unimportant are available at http: //grial. trace of the execution of BOOLE2 on Logic steps). Commentary (but simplified by is provided. Traces for other input sciences uc3m.es/Ndborrajo/boole/. > (load-boole 'logic) function This initial part corresponding generic simple operations of the science. loads the science-independent to Logic. It also stores in working memory part of the system and the specific the instances X, I: Z of ----------> Firing production AGGREGATION-l ****** Making the aggregation of Z and Z. The input notation is: ((ALL THAT ARE Z>> and ((ALL THAT ARE Z> The result is: ((ALL THAT ARE Z>> general, (recording, laws, and forced-combinations) the simple operations Z and Z. To apply the aggregation, This rule is the first from the list of rules ready to fire. The rules at higher priority can not yet be matched. the rule and then it generates a notation levels This rule aggregates first generates a notation for their aggregation. The notation operation-name), is the union of the input notations, in which repeated or subsumed notation elements have been removed. Finally, a new simple-operation Z + Z is added to the working memory. for an input simple operation for the two input operations, the result notation is (ALL THAT ARE whereas ----------> Firing production IDEMPOTENCE ****** Verified the idempotence of the combination AGGREGATION Since the result of aggregating Z and Z is equal to Z, the rule relative to idempotence fires. ----------> Firing production AGGREGATION-2 ****** Making ****** the for making aggregation succession of X and Z with Z. 302 L. de Ledesna et al./Artijicial Intelligence 91 (1997) 281-307 The input notation is: ((X THAT ARE Z> (X THAT ARE NOT Z>> and ((ALL THAT ARE Z>> The result is: ((ALL THAT ARE Z> (X THAT ARE NOT Z>> The system is still at the combination rule by the continuation level. Control has been transferred priority rules. For each combination, to the there may be more aggregation-2 than one rule, corresponding For the example case of aggregation, for the input operations. The first way has appeared before, and this rule corresponds the second way. This rule is used when BOOLE2 plans to apply succession of the aggregation of two operations, to different ways of the intended use of the combination. there are two different ways to generate notations to to the result to test distributivity. ----------> Firing production FORCED-AGGREGATION-l ****** Making the input forced notation aggregation of Z and X. is: The ((ALL THAT ARE Z)) ((ALL THAT ARE X>> and The result is: ((ALL THAT ARE X> (ALL THAT ARE Z)) Since the system has earlier aggregated X and Z, AGGREGATION-l sequently matches, and applies the aggregation to test the commutativity of aggregation. the heuristic rule FORCED- to Z and X, in order sub- ----------> Firing production COMMUTATIVE ****** The commutative holds for the combination AGGREGATION Since the aggregation of X and 2 has the same resulting notation as the aggregation is commutative. Note that checking whether two notations are of Z and X, aggregation the same is not trivial step. ----------> Firing production SUCCESSION-l ****** Making the input succession notations of Z and Z. are: The Z and ((ALL THAT ARE Z>) The result is: ((ALL THAT ARE Z>> Succession works like aggregation: it generates input notations, and to generate a result notation. The input notations are the operation-name succession the first operation, and (ALL THAT ARE operation-name-2) are the same. when the two operations then applies of L. de Odesma et al./Art$cial Intelligence 91 (1997) 281-307 303 ----------> Firing production IDEMPOTENCE ***+** Verified the idempotence of the combination SUCCESSION Since the result of Z succession Z is Z, the rule for idempotence fires for the combi- nation succession. ----------> Firing production SUCCESSION-2 ****** Making the succession of 2 ****** and ((ALL THAT ARE Z) (X THAT ARE NOT Z)). The input notations are: Z and ((ALL THAT ARE Z> (X THAT ARE NOT Z>> The result is: ((ALL THAT ARE Z>> This rule is similar to SUCCESSION-l but it need not generate a notation for the second operation initially generated) since it is just a previous result (instead of one of the operations and so a notation already exists for it. ----------> Firing production AGGREGATION-l ****** Making the aggregation of Z and Y. The input notation is: ((ALL THAT ARE Z>> and ((ALL THAT ARE Y>> The result is: ((ALL THAT ARE Y> (ALL THAT ARE Z>> ----------> Firing production FORCED-AGGREGATION-l ****** Making the forced aggregation of Y and Z. The input notation is: ((ALL THAT ARE Y>> and ((ALL THAT ARE Z)) The result is: ((ALL THAT ARE Z> (ALL THAT ARE Y>> ----------> Firing production AGGREGATION-2 ****** Making the aggregation of X and Z ****** for making succession with Y. The input notation is: ((X THAT ARE NOT Y) (X THAT ARE Y>> and ((Z THAT ARE NOT Y> (Z THAT ARE Y>> The result is: ((Z THAT ARE NOT Y> (Z THAT ARE Y> (X THAT ARE NOT Y> (X THAT ARE Y>> 304 L. de Ledesma et al./Artijicial Intelligence 91 (1997) 281-307 ----------> Firing production SUCCESSION-l ****w Making the succession of 2 and Y. The input notations are: 2 and ((Y THAT ARE 2) (Y THAT ARE NOT Z>> The result is: ((Y THAT ARE Z>> ----------> Firing production FORCED-SUCCESSION-l ****** Making the forced succession of Y and Z. The input notations are: Y and ((Z THAT ARE Y> (Z THAT ARE NOT Y>> The result is: ((Z THAT ARE Y>> For similar reasons as in FORCED-AGGREGATION-I, once the succession of Z and Y is obtained, the succession of Y and Z must be performed. ----------> Firing production COMMUTATIVE ****** Commutativity holds for the combination SUCCESSION ----------> Firing production FORCED-SUCCESSION-2 ****** Making the forced succession of Y and X. The input notations are: Y and ((X THAT ARE Y> (X THAT ARE NOT Y)) The result is: ((X THAT ARE Y>> ----------> Firing production FORCED-AGGREGATION-2 ****** Making the forced aggregation of YX and YZ. The input notation is: ((X THAT ARE Y>> and ((Z THAT ARE Y>> The result is: ((Z THAT ARE Y> (X THAT ARE Y>> ----------> Firing production FORCED-SUCCESSION-3 ****** Making the forced succession of Y and X+Z. The input notations are: Y and ((Z THAT ARE NOT Y> (Z THAT ARE Y> L. de Ledesma et al. /Art@cial Intelligence 91 (1997) 281-307 305 (X THAT ARE NOT Y) (X THAT ARE Y>> The result is: ((Z THAT ARE Y> (X THAT ARE Y>> ----------> Firing production DISTRIBUTIVE-l ****** The distributive holds for the ****** combinations AGGREGATION and SUCCESSION ----------> Firing production SYMBOLIZABLE ****** Science LOGIC is symbolizable ----------> Firing production INCORPORATE-SCIENCE ****** We add science LOGIC to symbolizable sciences ----------> Firing production INDEX-IDEMPOTENCE ----------> Firing production RECORD-IDEMPOTENCE ----------> Firing production RECORD-INDEX-IDEMPOTENCE ----------> Firing production RECORD-DISTRIBUTIVE ----------> Firing production RECORD-COMMUTATIVE ----------> Firing production INDEX-IDEMPOTENCE ----------> Firing production RECORD-IDEMPOTENCE ----------> Firing production RECORD-INDEX-IDEMPOTENCE ----------> Firing production RECORD-COMMUTATIVE BOOLE2 records the laws of LOGIC using its record rules, and then summarizes its work as follows: The science LOGIC is symbolizable. Its laws are: COMMUTATIVE, with respect to the combination SUCCESSION INDEX IDEMPOTENCE, with respect to the combination SUCCESSION IDEMPOTENCE, with respect to the combination SUCCESSION COMMUTATIVE, with respect to the combination AGGREGATION DISTRIBUTIVE, the SUCCESSION with respect to the AGGREGATION 336 L. de Ledesma et al/Artificial Intelligence 91 (1997) 281-307 INDEX IDEMPOTENCE, with respect to the combination AGGREGATION IDEMPOTENCE, with respect to the combination AGGREGATION ----- All combinations made (in order of creation) ----- Z+Z ==> ((ALL THAT ARE Z)) x+z (Z) ==> ((ALL THAT ARE Z) (X THAT ARE NOT Z)) 'RESULTl' z+x ==> ((ALL THAT ARE X) (ALL THAT ARE Z)) Z*Z ==> ((ALL THAT ARE Z)) Z*RESULT ==> ((ALL THAT ARE Z)) Z*RESULTl Z+Y ==> ((ALL THAT ARE Y) (ALL THAT ARE Z)) Y+Z ==> ((ALL THAT ARE Z) (ALL THAT ARE Y)) X+Z (Y) ==> ((Z THAT ARE NOT Y) (Z THAT ARE Y) (X THAT ARE NOT Y) (X THAT ARE Y)) 'RESULT2' Z*Y ==> ((Y THAT ARE Z)) y*z ==> ((Z THAT ARE Y)) Y*X ==> ((X THAT ARE Y)) RESULT+RESULT ==> ((Z THAT ARE Y) (X THAT ARE Y>> RESULT4+RESULT3 Y*RESULT ==> ((Z THAT ARE Y) (X THAT ARE Y)) 'RESULT3' 'RESULT4' Y*RESULT:! References [ 1 ] Working Notes of the AAAI Spring Symposium on Systematic Methods of Scienttj?c Discovery, Stanford University, Stanford, CA ( 1995). [ 21 G. Boole, An Address on the Genius and Discoveries of Sir Isaac Newton (Gazete Office, Mechanics Institution, Lincoln, 1835). 131 G. Boole, The Mathematical Analysis of logic, Being an Essay towards a Calculus of Deductive Reasoning (Macmillan, Barclay and Macmillan, 1847). [ 41 G. Boole, The Claims of Science, Especially as Founded in its Relation to Human Nature (Taylor, Walton and Maberley, London, 185 1). [ 5 ] G. Boole, An Investigation of the Laws of Thought, On Which Are Founded the Mathematical Theories of Logic and Probabilities (Walton and Maberley, London and Cambridge, [ 6 1 L. de Ledesma and L.M. Laita, G. Boole. From differential equations (Publicaciones de h Reunion Matemdtica en Honor de A. Dou, Madrid de Madrid, 1989) 341-352. 1854). to mathematical logic, in: Acras de la Universidad Complutense 17 1 L. de Lcdesma, L.M. Laita, A. Perez and D. Borrajo, Descubrimiento artificial, in: Real Academia de Ciencias Exactas, Fisicas y Naturales, Proceedings of the Segundo Curso de Conferencias Sobre Inteligencia Artificial (1993) 115-132. cientffico e inteligencia [8] L. de Ledesma, A. Perez, D. Borrajo and L.M. Laita, La logica de Boole coma consecuencia de1 de simbolos de Gregory Boole. Studio mttodo de separation in: Contra 10s titanes de la rutina. Contre les titans de la routine. Proceedings of the Congreso Hispano-Frances Sobre la Historia y la Filosofia de la Matematica (Comunidad 1994) 287-300. historico y su emulation por computador, de MadridfCSlC, [ 9 ) A. De Morgan, Formal Logic or The Calculus of Inference Necessary and Probable (Taylor and Walton, London, 1847). [ lo] S. De Morgan, Memoir of Augustus De Morgan (Longman, Essex, 1882). [ 11 ] S. Bachir Diagne, Boole: L’Oiseau de Nuit en Plein Jour (Belin, Paris, 1989). [ 121 M. Everest, Home side of a scientific mind, The Dublin University Magazine 91 ( 1878) 103-l 14, 173-183, 327-336.456-460; Reprinted in Mary Everest Collected Works. L. de Ledesma et al./ArtiJicial Intelligence 91 (1997) 281-307 307 [ I3 1 D.F. Gregory, Demonstrations, by the method of separation of symbols of theorems in the differential calculus and calculus of finite differences, Cambridge Math. J. 1 ( 1838) 232-244. principles of the application the elementary [ 141 D.F. Gregory, On of algebraic symbols to geometry, Cambridge Math. J. 2 ( 1839) 1-9. I I.5 I W. Hamilton, Lectures on Metaphysics and Logic, Vol. 4 (W. Blackwood and Sons, Edinburgh and London, 1862). 1 161 R. Harley, G. Boole, British Quarterly Review (July 1886); Reprinted and Probability. BooleS Collected Logical Works, pp. 425-472. in: R. Harley, Studies in Logic 1 17 1 W. Kneale and M. Kneale, The Development of Logic (Clarendon Press, Oxford, 1961). 1 18 I E. Knobloch, Symbolik 20. in: Mathematical Perspectives, Essays on Mathematics and its Historical Development im mathematischen Denken des 19. und beginnenden und Formalismus Jahrhunderts, (J.M. Dauben, New York, 198 I ) 208-216. I 19 ) E. Koppelman, The calculus of operations and the rise of abstract algebra, Archive for the History of Exact Sciences 8 ( I97 1) I20 1 D. Kulkarni and H.A. Simon, The processes of scientific discovery: the strategy of experimentation, Cognitive Sci. 12 (1988) 139-175. 12 I ] L.M. Laita. The influence of Boole’s search for a universal method in analysis on the creation of his logic, Annuls of Science ( 1977) 163- 176. I22 ] L.M. Laita, Influences on Boole’s logic, The controversy Hamilton-De Morgan, Annals of Science (1979) 45-65. I23 1 L.M. Laita. Boolean algebras and its extralogical sources, History and Philosophy of Logic ( 1980) 37-60. 1241 P.W. Langley, of scientific discovery, J.M. Zytkow, H.A. Simon and G.L. Bradshaw, The search four aspects in: R.S. Michalski, T.M. Mitchell and J.G. Carbonell, eds., Machine Learning 2 for regularity: (Morgan Kaufmann, Los Altos, CA, 1986) 425-469. 125 I PW. Langley, J.M. Zytkow, H.A. Simon and G.L. Bradshaw, Scientijic Discovery. Computational Explorations of the Creative Processes (MIT Press, Cambridge, MA, 1987). I26 1 D.B. Lcnat. Automated theory formation in mathematics, in: Proceedings IJCAI-77, Cambridge, MA (1977). I27 I D.B. Lenat, The nature of heuristics, Artificial Intelligence 19 ( 1982) 189-249. [ 28 I D.B. Lenat, Eurisko: A program that learns new heuristics and domain concepts, Art@cial Intelligence 21 (1983) 61-98. [29 I D. MacHale, G. Boole, His Life and Work (Boole Press, Dublin, 1985). / 301 M. Panteki, Relationships and Ph.D. Thesis, Council for National Academic Awards, UK ( 199 I ). between algebra, differential equations logic in England, 1800-1860, I 3 1 I P Shell and J.G. Carbonell, FRuleKit: A frame-based production system, User’s manual, Internal paper (1989). I32 I W.M. Shen, Functional transformations in AI discovery systems, Artificial Intelligence 41 ( 1990) 257- 272. [ 33 I J. Shrager and P Langley, Compufationul Models of Scientific Discovery and Theory Formation (Morgan Kaufmann, Los Altos, CA, 1990). 