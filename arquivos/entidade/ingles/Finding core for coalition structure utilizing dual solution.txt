Artificial Intelligence 222 (2015) 49–66Contents lists available at ScienceDirectArtificial Intelligencewww.elsevier.com/locate/artintFinding core for coalition structure utilizing dual solution ✩Atsushi Iwasaki a,∗a Graduate School of Information Systems, University of Electro-Communications, Tokyo, Japanb Graduate School of Information Science and Electrical Engineering, Kyushu University, Fukuoka, Japanc National Institute of Informatics, Tokyo, Japan, Suguru Ueda c, Naoyuki Hashimoto b, Makoto Yokoo ba r t i c l e i n f oa b s t r a c tArticle history:Received 21 December 2013Received in revised form 13 January 2015Accepted 19 January 2015Available online 24 January 2015Keywords:Game theoryCooperative gamesCoreCoalition structureWhen forming the grand coalition is not possible or optimal, agents need to create a coalition structure. The idea of the core can be extended to such a case. In this paper, we propose an innovative exact algorithm called CoreD to check core-non-emptiness for coalition structures. A more straightforward exact algorithm based on existing techniques, which we call CoreP, first obtains the value of optimal coalition structure by solving an integer programming problem. Then, it checks whether that value can be divided without making a blocking (dissatisfied) coalition. In contrast, CoreD first finds a minimal value of the optimal coalition structure so that there exists no blocking coalition. Next, it checks whether the optimal value equals the minimal value We empirically show that when the core is empty, CoreD is by far superior to CoreP. Also, to find a second-best payoff vector +when the core is empty, we propose a new solution concept called the weak ε-core, which can utilize the approximate value of the optimal coalition structure. Based on the idea of CoreD, we further develop an algorithm for checking the non-emptiness of the weak ε-core+.© 2015 Elsevier B.V. All rights reserved.1. IntroductionCoalition formation is an important capability in automated negotiation among self-interested agents. As a result, coali-tional game theory has attracted much attention from AI and multi-agent systems (MAS) researchers [7,12]. In a traditional model of coalitional game theory, it is assumed that all coalitions are possible and that the characteristic function is super-additive; when two coalitions are merged, the merged coalition can obtain at least the sum of the values of the two original coalitions. However, organizing a large coalition can be costly, e.g., such coordination overhead as communication costs. If time is limited, the agents may not have time to carry out the communications and the computations required to coordinate effectively within the composite coalition, and so component coalitions may be more advantageous.Furthermore, in many real-world applications, there can be inherent constraints on possible coalitions. For example, in many countries, antitrust laws prohibit the formation of certain coalitions of companies (cartels) that can dominate an entire market. Constraints may be placed on coalition sizes to permit or prohibit particular sizes. There can be some underlying graphical structure that determines the possible communication patterns among agents. Therefore, it is natural to assume ✩This paper is an extended version of a conference paper that appeared as [17].* Corresponding author.E-mail addresses: iwasaki@is.uec.ac.jp (A. Iwasaki), s-ueda@nii.ac.jp (S. Ueda), hashimoto@agent.inf.kyushu-u.ac.jp (N. Hashimoto), yokoo@inf.kyushu-u.ac.jp (M. Yokoo).http://dx.doi.org/10.1016/j.artint.2015.01.0010004-3702/© 2015 Elsevier B.V. All rights reserved.50A. Iwasaki et al. / Artificial Intelligence 222 (2015) 49–66that making a coalition is possible only when its members can communicate with each other. There exist several works that have considered such constraints on possible coalitions [41,11,29,35,31,21].When the grand coalition, i.e., the coalition of all agents, is not possible or optimal, the agents should be divided into smaller coalitions; agents need to create a coalition structure to maximize the reward they can obtain [37]. Furthermore, to make a coalition structure stable, agents need to agree how to divide among themselves the reward obtained by the coalition structure. The core [13], which is a prominent solution concept in the traditional model of coalitional game theory, can be extended to such a case when the grand coalition is not possible or optimal and agents form a coalition structure [2].For instance, consider a coalitional form game with three agents: A = {a, b, c}. The characteristic function v represents a mapping from a coalition S (a subset of agents) to the worth or the value earned by the coalition: v({a}) = v({b}) = 0, v({c}) = 3, v({a, b}) = 12, v({b, c}) = v({c, a}) = 8, and v({a, b, c}) = 15. A payoff vector y = ( ya, yb, yc) that belongs to the core can be computed by linear programming in such a way that for every coalition S, v(S) does not exceed the total payoff of the agents in S and such that the total payoff equals v( A). In this example, the core payoff vector is y = (p, 12 − p, 3), where p ∈ [5, 7]. Let us turn to a case where the grand coalition is prohibited in the above example. The concept of the core can be extended to this situation. The agents can create coalition structure CS = {{a, b}, {c}} and obtain 15 reward and share it efficiently. The coalition structure {{a, b}, {c}} is optimal in the sense that the total payoff V (CS) is maximized. The payoff vector in the core for the coalition structure is the same as in the first example.Checking whether the core is non-empty or not in itself is done in polynomial time in the number of allowed coalitions because it is formulated as a linear programming problem. However, Conitzer and Sandholm [8] pointed out that it requires many constraints for all the subcoalitions and the size of the representation (input) is exponential in the number of agents. Any algorithm for computing the core payoff vector requires time exponential as long as it reads all the input. If a coalition is prohibited or if its value is not explicitly specified, the algorithm may need to compute every value of such coalitions. Computing a value of a coalition is not necessarily straightforward because the agents must solve a complex collaborative planning problem.In general, as we noted below, computing an optimal coalition structure is known to be NP-hard and checking whether there exists a core for the (optimal) coalition structure or not is NP-complete unless its value is explicitly provided. Thus, our research goal is to develop an exact algorithm whose average runtime is much faster than traditional methods, although the worst-case complexity is doomed to be exponential in the number of explicitly given coalitions. Based on existing techniques, we can construct an algorithm to check core-non-emptiness for coalition structures, which we call CoreP. In this ∗) is obtained by solving an integer programming (IP) problem [25]. algorithm, the value of optimal coalition structure V (CS∗) can be divided without making a blocking (dissatisfied) coalition by solving a linear The algorithm checks whether V (CSprogramming (LP) problem [8].In this paper, we propose an exact algorithm called CoreD, which utilizes the dual problem of the linear relaxation of the above IP problem. Experimental evaluations show that CoreD is by far superior to CoreP when the core is empty. To find a +second-best payoff vector when the core is empty, we introduce a new approximate solution concept called weak ε-corefor the weak ε-core for the optimal coalition structure. The weak ε-core is defined for a particular coalition structure that may or may not be not optimal, relaxes only the non-blocking condition with parameter ε, and efficiently distributes the does not specify a particular coalition rewards that the coalition structure earns. On the other hand, the weak ε-corestructure beforehand. It then relaxes the efficiency condition of the weak ε-core (for the optimal coalition structure), in addition to the non-blocking condition, and efficiently distributes the reward that the dual solution provides. Thus, the sum of the elements in the payoff vector, i.e., the sum of the rewards distributed to agents, can be less than the value of the optimal coalition structure, but the difference must be at most ε · n, where n is the number of agents. Based on the idea of CoreD, we also develop an algorithm for checking the non-emptiness of the weak ε-corecalled ECore+(ε).++This paper is organized as follows. Section 2 briefly describes the basic terms and notations and Section 3 introduces an existing technique for checking core-non-emptiness, proposes our proposed technique, and derives an associated theorem. Based on the our technique, Section 4 develops a novel solution concept, which we call weak ε-core. Section 5 empirically examines our proposed algorithm from some criteria. Section 6 describes four issues to our contributions, and Section 7concludes this paper.+1.1. Related worksThis subsection briefly explores related works. In traditional models of coalitional game theory, it is assumed that all coalitions are possible and that the characteristic function is super-additive. Forming the grand coalition is guaranteed to be optimal and the main research topic is how to divide the gain of the grand coalition among agents. The traditional theory of coalitional games provides a number of solution concepts, such as the core [13], the Shapley value [39], and the nucleolus [38].More recently, AI and MAS researchers have been considering the case where forming the grand coalition is not possible or not optimal. In such cases, agents should form a coalition structure to maximize the reward they can obtain. This problem is called the coalition structure generation (CSG) problem and has been an active research topic in AI and MAS.Sandholm et al. [37] show that the worst-case complexity of CSG problems is O (nn) in general. Rahwan et al. [30]develop a state-of-the-art algorithm based on dynamic programming, whose complexity is O (3n). Furthermore, in several class of games [6,3,15,42,5], the complexity of CSG problems has been examined and several tractable classes have been A. Iwasaki et al. / Artificial Intelligence 222 (2015) 49–6651identified. For instance, Bachrach et al. [6] identify coalitional skill games where the complexity is polynomial for the games with a constant number of skills and a constant length of tree width. Many faster and scalable algorithms have also been designed [30,34,25,22,32,33].CSG is deeply related to the winner determination (WD) problem that has been scrutinized in the literature of combina-torial auctions, see Part III [9] for an extensive survey. In combinatorial auctions, agents (bidders) are interested in buying a bundle of objects (goods) that may have some level of complementarities, i.e., an agent wants a set of objects simultane-ously and submit higher bid to it than to a single object. The WD problem finds the allocation (combination of bids) that maximizes the sum of the value of the objects. Both the CSG and WD problems are essentially the set packing problem, which divides distinct objects into several non-overlapping subgroups such that the sum of the payoffs/values of the objects in each subgroup is maximized (see [23] for example). Since the seminal paper by Sandholm [36] reveals that the complex-ity of the WD problem is NP-hard in standard assumptions, it has been analyzed in a variety of settings of combinatorial auctions. Several tractable classes of problems are identified and some concise bidding languages (representations) are pro-posed that practically mitigate the complexity hurdle in the presence of the complementarities. In this context, the main idea of this paper is similar to Nisan [24].In most of the existing literature on CSG, there exists no restriction on possible coalitions, that is, all coalitions are allowed. There exist several works that have considered constraints on possible coalitions. From the perspective of game theory Demange [11] characterizes the core on games where arbitrary coalitions are prohibited. From the perspective of computer science, Shehory and Klaus [41] and Rahwan and Jennings [29] examine a situation where the size of possible coalitions is limited. Ramchurn et al. [35] consider spatial and temporal constraints for the coalition formation problem of emergency responders and robots. Meir et al. [21] restrict a coalition where agents are not connected on a graph. Rahwan et al. [31] propose a very general framework for constrained coalition formation and develop an algorithm for the CSG problems. This paper considers a special case called locally constrained games in their framework.To make a coalition structure stable, agents need to agree how to divide among themselves the reward obtained by the coalition structure. Aumann and Dreze [2] extend the core [13] when agents form a coalition structure. Assuming the number of possible coalitions is a constant, and the value of the grand coalition (or the value of an optimal coalition structure) is known, checking core-non-emptiness is easy, since the problem is reduced to a linear programming problem (see e.g., Osborne and Rubinstein [27]). However, when the value of the grand coalition (or the value of an optimal coalition structure) is not explicitly given, the problem is NP-complete1 even if we assume the number of possible coalitions is a constant [8].Since the core can be empty, in traditional models of coalitional game theory, several relaxed solution concepts have been proposed, e.g., strong or weak ε-core [40]. Based on the idea of the weak ε-core, we develop a new solution concept , in which the efficiency condition is also relaxed by parameter ε. This idea is similar to the cost of called weak ε-corestability, which is the minimal amount of money provided by an outside source to make the coalition structure stable [4]. We will discuss this point in Section 6.3.+Another line of popular research topic in AI and MAS is compact representation schemes for a characteristic function [8,16]. By naively representing a characteristic function as a table, we need to describe 2n entries. A compact representation scheme tries to reduce the representation size of a characteristic function. In particular, a representation scheme called Synergy Coalition Group (SCG) [8] is closely related to the constrained coalition formation we consider. We will discuss the connection with SCG in Section 6.1.2. ModelWe model a coalitional form game with constraints on possible coalitions according to locally constrained coalition form games [31]. Let A be a set of agents, where | A| = n. We assume a characteristic function game, where the value of coalition S ⊆ A is given by characteristic function v : 2 A → R. Without loss of generality, we assume ∀S ⊆ A, v(S) ≥ 0 and v(∅) = 0. Assume a set of allowed coalitions is given as AC ⊆ 2 A . If coalition S is not in AC , we assume the value of v(S) is −∞ (or if all values are positive, setting v(S) to zero works as well).One commonly used assumption about a characteristic function is super-additivity. We say characteristic function v is super-additive if for any two disjoint coalitions S1 and S2, v(S1 ∪ S2) ≥ v(S1) + v(S2) holds. However, we assume v is not necessarily super-additive. Even if we assume the original v is super-additive, considering AC , it is no longer super-additive.Although Rahwan et al. [31] provide more elaborated compact representations, we use this simple representation of the locally constrained game since we require that all possible allowed coalitions, i.e., AC , are explicitly represented in order to develop an efficient algorithm for checking core-non-emptiness. A similar model is used [8] to compactly represent a standard super-additive characteristic function. We assume the number of these allowed coalitions is relatively small.Definition 1 (Coalition structure). Coalition structure CSS of agents S is a partition of S into disjoint and exhaustive coalitions, where CSS = {S1, S2, . . .} satisfies the following conditions: ∀i, S i ∈ AC , ∀i, j (i (cid:11)= j), S i ∩ S j = ∅, and (cid:2)S i ∈CSS S i = S.1 Greco et al. [14] show that checking core-non-emptiness is co-NP-complete in a different model, in which obtaining the value of the grand coalition can be done in polynomial time but the number of possible coalitions is not a constant.52A. Iwasaki et al. / Artificial Intelligence 222 (2015) 49–66We also assume every singleton coalition is allowed so that at least one CSS , i.e., the singleton coalition structure, exists. Otherwise, no coalition structure CSS may exist. The value of coalition structure CSS , denoted as V (CSS ), is given by: V (CSS ) =is a coalition structure of all agents A satisfying the following condition: ∀CS A, V (CSS i ∈CSS v(S i). The optimal coalition structure CS∗) ≥ V (CS A).(cid:3)∗Example 1. Consider a coalitional game with four agents A = {a, b, c, d}. Assume that all possible coalitions are allowed. The characteristic function is given by(cid:5)= 3,(cid:5)(cid:4){a}(cid:4){a, b}(cid:4){a, b, c}vvv= 6,(cid:5)= 8,(cid:5)= 3,(cid:5)(cid:4){b}(cid:4){a, c}(cid:4){a, b, d}vvv= 5,(cid:5)= 8,(cid:5)= 2,(cid:5)(cid:4){c}(cid:4){a, d}(cid:4){a, c, d}vvv= 5,(cid:5)= 5,(cid:5)= 2,(cid:5)(cid:4){d}(cid:4){b, c}(cid:4){b, c, d}vvv= 5,(cid:5)= 5,(cid:5)(cid:4){b, d}(cid:4){a, b, c, d}= 5,(cid:5)(cid:5)(cid:4){c, d}v= 2,= 5.vvIn this case, the optimal coalition structures CS∗are {{a, b, c}, {d}}, {{a, b, d}, {c}}, and so on. The payoff V (CS∗) is 10.When agents create a coalition structure, we need to consider its stability. The concept of the core can be extended to cases where agents create an optimal coalition structure [2]. Let y = ( y1, y2, . . . , yn), where yi ≥ 0, be a payoff vector; each i∈ A yi ≤ V (CS A) holds. We also say payoff yi represents the reward given to agent i. We say payoff vector y is feasible if vector y is efficient if i∈ A yi = V (CS A) holds. If payoff vector y is efficient, then y is feasible, but not vice versa.The core [13] is a prominent solution concept in coalitional game theory. Aumann and Dreze [2] extend the concept for (cid:3)(cid:3)considering coalition structures. In this paper, we extend their definition for our coalitional form game.Definition 2 (Core for coalition structure). The core for coalition structure CS A of all agents A is the set of payoff vectors, where each element (denoted as y) satisfies the following two conditions:(cid:3)• ∀S ∈ AC, •(cid:3)i∈S yi ≥ v(S) (non-blocking condition),i∈ A yi = V (CS A) (efficiency condition).The core is non-empty only for the optimal coalition structure CSfor standard coalitional games [2], i.e., AC contains all possible coalitions. Also, from the definition, there should be no monetary transfers (side payments) across different coalitions, even if such transfers are not prohibited. Thus, we concentrate on finding the core for optimal coalition structure CS∗.∗Example 2. Let us consider the same example in Example 1. The core for the optimal coalition structure is non-empty. For instance, a payoff vector y = (3, 3, 2, 2) is in the core.Definition 2 requires that an efficient payoff vector should not be blocked by any coalition in AC . However, one might think that a set of agents S, which is not in AC , creates its own coalition structure CS S . Such S can be a blocking coalition structure if V (CSS ) exceeds the sum of their payoffs. Nevertheless, Conitzer and Sandholm [8] show that this is not possible.2Proposition 1 (Lemma 2 in [8]). For payoff vector y, if for all S ∈ AC , (cid:3)(cid:14)is any coalition structure of S.) also holds, where CSSi∈S(cid:14) yi ≥ V (CSS(cid:14)(cid:14)(cid:3)i∈S yi ≥ v(S) holds, then for all S(cid:14) ⊆ A, where S(cid:14) /∈ AC , 3. Core-non-emptiness3.1. Traditional methodWe are going to present CoreP, which is based on existing techniques [8,25]. First, it finds the value of optimal coalition ∗) by solving the following IP problem. Ohta et al. [25] showed that this simple IP-based method is com-structure V (CSpetitive against the state-of-the-art coalition structure generation techniques. Also, when we deal with locally constrained games, we cannot directly apply the elaborated techniques [31], since their algorithm utilizes their own complicated repre-sentation structure.2 To be more precise, they do not deal with coalition formation. However, as described in Section 6.1, by a transformation technique called super-additive cover, we can directly apply their results to the problem setting in this paper.A. Iwasaki et al. / Artificial Intelligence 222 (2015) 49–6653Definition 3 (IP-PRIMAL: IP for finding the CS(cid:6)∗value).maxsubject tox j · v(S j),S j ∈ AC(cid:6)x j ≤ 1, ∀i,j|i∈S j ∈ ACx j ∈ {0, 1}, ∀ j.Here, x j is a decision variable for coalition S j where j ∈ [1, | AC|]. If S j is included in CS, x j is 1, otherwise, x j is 0. Strictly speaking, there is a chance that the obtained coalition structure does not contain all of the agents. However, since we assume the value of a coalition is non-negative, if agent i is not included in the obtained coalition structure, we can add a coalition {i} without reducing the value of the coalition structure. When the size of AC is large, we cannot find an optimal solution of the above IP in a reasonable amount of time even with the state-of-the-art optimization package, e.g., CPLEX.∗Second, CoreP gives a payoff vector in the core by the following LP problem [8].Definition 4 (LP-CNE: LP for checking core-non-emptiness).findsubject toy,(cid:6)i∈ A(cid:6)yi = V(cid:4)(cid:5)∗,CSyi ≥ v(S j), ∀S j ∈ AC,i∈S jyi ≥ 0, ∀i.In summary, CoreP, which returns one payoff vector in the core if it is non-empty, is described as follows.Algorithm CoreP1. Solve IP-PRIMAL to obtain the value of optimal coalition structure V (CS2. Check whether there exists payoff vector y that satisfies the efficiency and non-blocking conditions by solving LP-CNE ∗).with V (CS∗).3. If such a y exists, return it as an element of the core. Otherwise, report that the core is empty.3.2. Our methodLet us consider the linear relaxation of IP-PRIMAL and its dual problem.Definition 5 (LP-PRIMAL: LP relaxation of IP-PRIMAL).maxsubject to(cid:6)x j · v(S j),S j ∈ AC(cid:6)x j ≤ 1, ∀i,j|i∈S j ∈ AC0 ≤ x j, ∀ j.Definition 6 (LP-DUAL: Dual problem).(cid:6)i∈ A(cid:6)minsubject toyi,yi ≥ v(S j), ∀S j ∈ AC,i∈S jyi ≥ 0, ∀i.Before constructing our algorithm, let us define one more decision problem called IP-EFF. Our algorithm effectively to a decision problem that checks whether the CS∗) is equal to Vvalue V (CSbridges solution (cid:3)∗∗∗.i yi denoted as V54A. Iwasaki et al. / Artificial Intelligence 222 (2015) 49–66Definition 7 (IP-EFF: IP for checking the efficiency condition).findsubject tox,(cid:6)x j · v(S j) = V∗,S j ∈ AC(cid:6)x j ≤ 1, ∀i,j|i∈S j ∈ ACx j ∈ {0, 1}, ∀ j.Now, we are ready to construct CoreD, our newly developed algorithm, that utilizes LP-DUAL and IP-EFF. Note that a sim-ilar idea is applied for finding an approximate solution of the winner determination problem in combinatorial auctions [24].Algorithm CoreD1. Solve LP-DUAL to obtain dual solution y∗2. Check whether y3. If ysatisfies it, return y∗∗∗.satisfies the efficiency condition by solving IP-EFF with Vas an element of the core. Otherwise, report that the core is empty.(cid:3)∗ =i∈ A y∗i .When V (CS∗) is equal to the lower bound V∗that is, the optimal value of the linear relaxation happens to be identical to the original IP problem. When V (CSthan Vdiscussed in Section 6.3.obtained from LP-DUAL, there exists an integer solution for LP-PRIMAL, ∗) is smaller ∗) is called the cost of stability [4], which will be , the core is empty. Then the difference between Vand V (CS∗∗Theorem 1. Algorithm CoreD is correct; if it returns y∗∗, yis in the core, and if it reports that the core is empty, the core is empty.Proof. If CoreD returns yy∗satisfies the efficiency condition. Thus, yIf CoreD reports that the core is empty, IP-EFF does not have a solution. Let xis in the core.∗∗, from Definition 6, y∗satisfies the non-blocking condition for all S ∈ AC . Also, from Definition 7, ∗∗∗ = (x2, . . .) be the optimal solution of 1, x∗n) be the optimal solution of LP-DUAL. From the strong duality principle, the solutions of holds. Since LP-PRIMAL is a linear relaxation of · v(S j) == V(cid:3)∗i∈ A y∗i∗ = ( yLP-PRIMAL and ythese problems must be identical, i.e., IP-PRIMAL, its optimal value cannot exceed V∗1, . . . , y(cid:3)∗S j ∈ AC xj∗.∗Here, yis a payoff vector, which satisfies the non-blocking condition, but it might not satisfy the efficiency condition, and the sum of its elements is minimized. If IP-EFF does not have a solution, then IP-PRIMAL does not have a solution . Thus, there exists no payoff vector that simultaneously satisfies the efficiency whose value is better than or equal to Vand non-blocking conditions. Thus, the core is empty. (cid:2)∗CoreD first solves LP-DUAL (the optimization problem) and then solves IP-EFF (the decision problem). On the other hand, CoreP first solves IP-PRIMAL (the optimization problem) and then solves LP-CNE (the decision problem). When the core is non-empty, we expect that the performances of these algorithms are almost equivalent. However, when the core is empty, , we expect that IP-PRIMAL (which finds the optimal value) becomes much especially when V (CSharder than IP-EFF (which simply checks whether V (CS). We empirically confirm these expectations in Section 5. Furthermore, for a class of games where the optimal coalition structure can be found in polynomial time [6,3,42,5], we expect that the performance of CoreP and CoreD would improve as much as IP-PRIMAL and IP-EFF, which become done in polynomial time, save the runtime. Thus, the average difference of the performance does not change so much, though both algorithms improve much.∗) is much smaller than V∗) can be equal to V∗∗4. Weak ε-core+Since the core can be empty, in the traditional model of coalitional game theory, several solution concepts that relax the non-blocking condition are proposed based on the core. Representative solution concepts based on the core are the strong and the weak ε-core [40]. The former minimizes the total excess of each coalition, while the latter minimizes the average one. Although we can extend both concepts for a coalition structure in general,3 with our model of locally con-strained games, we cannot guarantee the property similar to Proposition 1 with respect to the strong ε-core. Accordingly, we concentrate on the weak ε-core to utilize the idea of CoreD.3 We can, of course, extend other solution concepts as Airiau and Sen [1] extended the kernel [10] for a coalition structure.A. Iwasaki et al. / Artificial Intelligence 222 (2015) 49–6655Let us remark another important issue before introducing the weak ε-core and proposing our new solution concept. To define a feasible or allowed payoff vector with a coalition structure, we need to consider whether monetary transfers (side payments) across different coalitions are possible or not. We did not need to consider this issue for the core, since, from the non-blocking condition, no monetary transfers among coalitions are possible. However, if we relax the non-blocking condi-tion, allowing monetary transfers among coalitions extends the space of the feasible payoff vectors. We thus concentrate on the case where transfers among coalitions are possible.4This assumption can be considered fairer in some case. Consider the problem of assigning managers to departments and a very talented manager, who is as successful as the managers in any other department. Also, assume she is the only person who can reduce the deficit of one particular department. Then, assigning her to that department will maximize the total profit of the company. In this case, it is clearly unfair to withhold her bonus just because her department shows a deficit. That being said, the case where such transfers are not possible is more computationally challenging. We will revisit this topic in Section 6.2.Now we are ready to introduce average excess and the weak ε-core.Definition 8 (Average excess). For coalition S and payoff vector y, let d( y, S) be the average excess of coalition S defined as follows:(cid:3)d( y, S) = v(S) −|S|i∈S yi.Definition 9 (Weak ε-core). The weak ε-core for CS A is the set of payoff vectors, where each element (denoted as y) satisfies the following two conditions:(cid:3)• ∀S ∈ AC, d( y, S) ≤ ε (relaxed non-blocking condition),•i∈ A yi = V (CS A) (efficiency condition).From this definition, it is clear that if the weak ε-core is non-empty for one coalition structure CS A , it is also non-empty . Similar to the core, we can show that there will be no blocking coalition structure, ∗for the optimal coalition structure CSand the following theorem holds:Theorem 2. If payoff vector y satisfies d( y, S) ≤ ε for all S ∈ AC , then V (CSScoalition structure CSS.(cid:14)(cid:14)(cid:3))−|S(cid:14)|i∈S(cid:14) yi≤ ε holds, for all S(cid:14) /∈ AC and its arbitrary Proof. From the definition of a coalition structure, CSS(cid:14) = {S1, . . . , Sk}, where each S j ∈ AC is non-overlapping, (cid:2)(cid:14) S j =S i ∈CSS(cid:14)S, and V (CSS(cid:14)) = v(S1) + v(S2) + . . . + v(Sk) holds. Also, from the assumption,d( y, S j) =v(S j) −i∈S jyi(cid:3)|S j|≤ ε(cid:3)i∈S jyi ≤ ε · |S j|. Then,holds for all S j . This means v(S j) −(cid:3)(cid:14)V (CSS) −|S(cid:14)|i∈S(cid:14) yi=v(S1) + . . . + v(Sk) −yi − . . . −(cid:3)i∈Skyi(cid:3)i∈S1|S(cid:14)|≤ ε · |S1| + . . . + ε · |Sk||S(cid:14)|= ε.(cid:2)Intuitively, this theorem holds in conjunction with Proposition 1 because the worth of any coalition is scaled proportion-ally to its size by a factor ε.The weak ε-core for the optimal coalition structure CS∗payoff vector, we need to know the exact value of V (CSapproximate, semi-optimal solution against the weak ε-core for CSε-core, which can be obtained by an approximate value of V (CS+requires that the payoff vector be efficient. To find an efficient ∗). Since finding its exact value is NP-hard, it is natural to utilize an . We introduce a new solution concept called the weak ∗∗), and define it as follows.Definition 10 (Weak ε-corefollowing two conditions:+). The weak ε-core+is a set of payoff vectors, where each element (denoted as y) satisfies the 4 Although this assumption is non-standard, it is examined by Kamien and Zang [18] and Perez-Castrillo [28] in addition to Aumann and Dreze [2].56A. Iwasaki et al. / Artificial Intelligence 222 (2015) 49–66Fig. 1. Example of weak ε-core+(ε = 3).(cid:3)• ∀S ∈ AC, d( y, S) ≤ ε (relaxed non-blocking condition),•∗) (relaxed efficiency condition).i∈ A yi ≤ V (CS(cid:3)We relax the efficiency condition so that i∈ A yi can be less than V (CSis not directly linked with a particular coalition structure. The existing solution concepts, along with the model of Aumann +and Dreze [2], require the agents to agree with a coalition structure that they form beforehand. However, the weak ε-coredoes not explicitly specify a coalition structure from the fact that computing the optimal coalition structure is NP-hard. i∈ A yi must be n · ε at maximum by the re-Furthermore, this definition indicates that the difference between V (CSlaxed non-blocking condition. We will discuss more when we introduce an algorithm for this approximate solution concept. It is clear that for any ε(cid:14) ≤ ε, the weak ε-coreis a superset of the weak ε(cid:14)and is a superset of the weak ε-core as +becomes empty for ε < 0). Thus, if the weak ε-core is non-empty, the weak long as ε is non-negative (the weak ε-coreε-coreis also non-empty. The converse is also true:∗). The condition implies that the weak ε-core∗) and -core(cid:3)++++Theorem 3. If the weak ε-core+is non-empty, there exists a coalition structure CSA where the weak ε-core for CS A is non-empty.∗is non-empty. Assume the weak ε-coreProof. It is sufficient to show that if the weak ε-coreCSthen y is also an element of the weak ε-core for CSand σ , create another payoff vector y, such that yfollowing condition holds.+(cid:14)i(cid:14)+is non-empty. Thus, we can choose one element y in it. If is non-empty, the weak ε-core for the optimal coalition structure ∗), i∈ A yi . Here, σ > 0 holds. From y∗) holds. Also, for each S ∈ AC , the . Otherwise, choose σ as V (CS= yi + σ /n. Then, i∈ A yi = V (CS∗) −= V (CS(cid:3)(cid:3)(cid:3)∗i∈ A y(cid:14)i(cid:5)(cid:4)d(cid:14)y, S=v(S) −i∈S y(cid:14)i<v(S) −i∈S yi≤ ε.(cid:3)|S|(cid:3)|S|Thus, y(cid:14)is in the weak ε-core for CS∗; it is non-empty. (cid:2)Notice that this theorem implies that there may exist a non-optimal coalition structure CS A with the weak ε-core for such a coalition structure CS A is non-empty.(cid:3)i∈ A yi ≤ V (CS A) and Example 3. Let there be three agents, a, b, and c, and let(cid:7)AC ={a}, {b}, {c}, {a, b}, {b, c}, {a, c}(cid:8),is {{a, b}, {c}}, where v({a}) = v({b}) = v({c}) = 0, v({a, b}) = v({b, c}) = v({a, c}) = 12. Optimal coalition structure CS∗) is 12. The core for the coalition structure of this game is empty because {{a}, {b, c}}, or {{a, c}, {b}} and value V (CSthe coalition structure can not sufficiently provide enough value to make the payoff vector stable. At least one agent always has some excess as long as the coalition of the remaining two agents receives enough payoff so that it has no excess.(cid:3)of this game. For the given ε = 3, choose ε(cid:14) ≤ ε and relax the efficiency condition: becomes identical to the weak 3-core for CS. When coalition +Fig. 1 illustrates the weak 3-corei∈ A yi + n · ε(cid:14) = V (CS∗). When ε(cid:14) = 0, the weak 3-core∗) = 12, the linear programming problem for the weak 3-core(structure value V (CS) is given by++∗∗A. Iwasaki et al. / Artificial Intelligence 222 (2015) 49–6657findysubject to y S jy S jya + yb + yc = 12.+ 3 ≥ 0, ∀S j ∈+ 2 · 3 ≥ 0, ∀S j ∈(cid:7)(cid:8){a}, {b}, {c},{a, b}, {b, c}, {c, a}(cid:7)(cid:8),∗+By solving this problem, each agent obtains a payoff of at most 6, and the sum does not exceed 12: y = (6, 6, 0), y =(6, 0, 6), or y = (0, 6, 6). Some coalitions with two agents have an average excess of at most 3. Alternatively, y = (4, 4, 4). The region of the payoff vector is represented by the smaller shaded is in the weak 3-core∗). Each point triangle in the larger triangle in the leftmost of Fig. 1. Here, the height of the larger triangle is equal to V (CStherein represents an efficient payoff vector.and the weak 3-core for CSWhen ε(cid:14) = 2/3, the coalition structure value is reduced to 10. The weak 3-coreis equivalent to the weak 3-core ∗) − n · ε(cid:14) = 10, which is illustrated by the with total payoffs of 10. We compute the payoff vector with height of the larger triangle in the middle of Fig. 1. Each agent obtains a payoff of at most 6, and the sum does not exceed 10. Total payoff 10 is exactly shared. The region is represented by the smaller shaded triangle in the larger triangle. y = (10/3, 10/3, 10/3) is in the weak 3-core. Here if we equally distribute the sacrificed amount of efficiency to the agents, we obtain (4, 4, 4), which is in the weak 3-core.Finally, let us further relax the efficiency condition up to ε(cid:14) = 1. Now we sacrifice the efficiency of 3 and the height of is uniquely determined the larger triangle in the rightmost of Fig. 1 is 9. In this case, the payoff vector in the weak 3-coreas (3, 3, 3).i∈ A yi = V (CS(cid:3)+++In summary, the weak 3-coreis represented as a shaded triangular prism in Fig. 1. The payoff vector belongs to each +cross section of the triangular prism, which corresponds to the case with 0 < ε(cid:14) < 3.To show an algorithm that checks the weak ε-core+-non-emptiness for any given ε, let us introduce two mathematical programming algorithms.Definition 11 (Dual problem with the relaxed non-blocking condition).(cid:6)minyi,i∈ A(cid:6)subject toyi + ε · |S j| ≥ v(S j), ∀S j ∈ AC,i∈S jyi ≥ 0, ∀i.Definition 12 (IP for checking the relaxed efficiency condition).findsubject tox,(cid:6)x j · v(S j) ≥ V∗,S j ∈ AC(cid:6)x j ≤ 1, ∀i,j|i∈S j ∈ ACx j ∈ {0, 1}, ∀ j.Definitions 11 and 12 are constructed by slightly modifying Definitions 6 and 7. With them, we introduce the following algorithm.Algorithm ECore+(ε)1. Solve the dual LP problem in Definition 11 for ε to obtain dual solution ysatisfies the feasibility condition (V2. Check whether ysatisfies the relaxed efficiency condition, return y3. If y∗ ≤ V (CS∗∗∗∗)) by solving the IP problem in Definition 12 for ε.as an element of the weak ε-core. Otherwise, report that the +∗and V(cid:3)∗ =i∈ A y∗i .weak ε-coreis empty.+∗(cid:3)If the algorithm reports a payoff vector y(cid:3)CS A . Notice here that than or equal to weak ε-core for CS A . A slight modification can improve the efficiency of the weak ε-coredistributing the difference between the resulting coalition structure value V (CS A) and the weak ε-core for CS A ., the IP problem in Definition 12 also returns a particular coalition structure is not always equal to the reward that CS A provides. V (CS A) is just guaranteed to be larger does not always choose the payoff vector which is equivalent to the . More precisely, by uniformly (cid:3)∗i to the agents, we can obtain i∈ A y∗i . Thus, the weak ε-corei∈ A yi∈ A y∗i++58A. Iwasaki et al. / Artificial Intelligence 222 (2015) 49–66Fig. 2. Runtime for checking core-non-emptiness.Theorem 4. Algorithm ECore+weak ε-coreis empty.+(ε) is correct; if it returns y∗∗, yis in the weak ε-core+, and if it reports the weak ε-core+is empty, the Proof. The proof is basically similar to that of Theorem 1. The only additional issue is to show that V (CSi∈ A yiholds. If the set of agents A has a unique optimal coalition structure, it implies that A ∈ AC . Thus, this fact is derived from the constraint in Definition 11. Otherwise, it is done from Theorem 2. (cid:2)(cid:3)∗) − n · ε ≤Notice that we can use a simple modification of CoreP for checking the non-emptiness of the weak ε-core. In this case, ∗) and then payoff vector y that satisfies the relaxed non-blocking and efficiency conditions. ∗), and thus its runtime would become too long when the the algorithm first finds V (CSHowever, regardless of the value of ε, it needs to find V (CSnumber of elements in AC becomes large.+5. Evaluation5.1. SettingsWe experimentally evaluate our proposed algorithms. All of the tests were run on a Core i7-4770 processor with 16 GB RAM. The test machine runs Windows 7 Professional SP1 x64 Edition. We used CPLEX 12.6 for solving the linear or integer programming problem instances.To understand the features of our algorithms, we concentrate on three simple and typical cases that is likely to be observed in practice: (i) AC tends to include small coalitions; (ii) AC tends to include large coalitions; and (iii) there is no bias on the size of each coalition in AC . Unfortunately, there exist no widely accepted standard benchmark instances for locally constrained games. We borrowed the way to generate instances [25]. To generate problem instances, we chose one of three distributions, decay, normal, and uniform, and determine the size of each coalition in AC according to the chosen distribution.5 The instances made by using the decay distribution capture case (i). The normal distribution corresponds to case (ii), and the uniform distribution corresponds to case (iii). We believe that any of them are quite likely to occur in practical situations. Considering them is useful to deepen understanding of the features of our proposed technique, though we admit that this classification is slightly rough.Let us further explain how we construct the instances for each case. For case (i), using the decay distribution we create coalitions included in AC . Create a coalition with one randomly chosen agent. Then repeatedly add a new random agent with probability α until an agent is not added or the coalition includes all the agents, where α = 0.55. Then we choose value v(S) from uniform distribution (0, |S| × 10]. For case (ii), we fix the mean and the variance of the normal distribution to 900 and 502. The size of a coalition |S| is drawn from N(μ, σ 2), then we randomly add agents to a coalition so that the number of agents who belong to each coalition is equals to |S|. For case (iii), we use the uniform distribution so that |S|is consistent with the uniform distribution of [1, n]. Notice that for any of the distributions, the value of each coalition is drawn from uniform distribution (0, |S| × 10]. We generate 100 problem instances and calculate the geometric average of these problem instances.5.2. CoreD and CorePFig. 2 compares the runtime of algorithm CoreD with CoreP for each distribution. Each data point represents the geo-metric average of 100 problem instances (left y-axis) and also shows the ratio of instances where the core is non-empty (right y-axis). In these experiments, we set #agents = 1000 and vary the number of elements in AC , i.e., | AC| from 1000 to 10 000 (the x-axis).5 For convenience, we partly use the Combinatorial Auction Test Suite [19] to create coalitions with an arbitrary distribution.A. Iwasaki et al. / Artificial Intelligence 222 (2015) 49–6659Fig. 3. Runtime ratio for the least core value.First, in Fig. 2a the ratio decreases rapidly. In fact, when the number of elements in AC exceeds 3000, in the generated instances, the core is always empty. Let us examine the average runtimes of CoreD and CoreP for problem instances where the core is empty or non-empty for the decay distribution. When the core is empty (denoted as CoreD(E) and CoreP(E)), CoreD is by far superior to CoreP. CoreD can check core-non-emptiness within 104 msec even when | AC| = 10 000, while the runtime of CoreP increases very rapidly as | AC| increases. As a result, CoreP cannot check core-non-emptiness within 106 msec when | AC| exceeds 5000. On the other hand, when the core is non-empty (denoted as CoreD(N) and CoreP(N)), the average runtimes of CoreD and CoreP are almost equivalent. For randomly generated problem instances, the core is always empty when | AC| > 3000. We artificially created problem instances so that the core is non-empty for large | AC|, and confirmed that the average runtimes of CoreD and CoreP are almost equivalent for these problem instances. Notice that we also investigate the normal distributions of N(100, 502) and N(500, 502) as similar cases to the decay distribution where the size of the coalitions in AC is relatively small. In this case, we confirm almost the same tendency as the decay distribution, except that the core is always empty and these runtimes are basically longer regardless of the number of allowed coalitions.Next, Figs. 2b and 2c illustrate the results for normal distribution N(900, 502) and the uniform distribution, which are substantially different from the first distribution. In the instances, the core is almost non-empty regardless of the number of allowed coalitions for both distributions and these runtimes are much larger than the decay distribution. As we see in the decay distribution when the core is non-empty, the average runtimes of CoreD are almost equivalent to those of CoreP. When | AC| > 5000 for the normal distribution, CoreD is slightly worse than CoreP. This may be because the LP-DUAL part requires more time as | AC| increases, while IP-EFF remains as hard as IP-PRIMAL. Here we are not able to extract results when the core is empty, because we have very few instances when it is empty.∗or not in CoreD.In summary, when the core is non-empty, the average runtimes of CoreD and CoreP are almost equivalent for any dis-tribution. When the core is empty, the average runtimes of CoreD significantly outperform CoreP for the decay distribution. ∗) in CoreP, is much This suggests that when the core is empty, IP-PRIMAL, which computes the optimal solution of V (CSharder to solve than IP-EFF, which decides whether V (CS∗) is equal to VSo far, we have illustrated the runtimes of CoreD and CoreP by varying the number of allowed coalitions and the proba-bility distribution over their sizes. Let us next focus on the runtime relation between how “unstable” the game is and how much time is saved when moving from CoreP to CoreD. There are several ways to measure the stability level of a game instance. We consider the least core value, which is the minimal value of ε such that the (weak) ε-core is non-empty [20]. As we already confirmed, in almost all instances for the normal and uniform distributions, the core is non-empty. We focus on the decay distribution where the core is empty and compute the least core value. We obtained 440 of 100 × 10 instances such that we could compute the least value within 105 msec. If the size of AC exceeds 5000, we obtain no exact solution within the time limit. Otherwise, we could successfully obtain the exact least values except when | AC| is 1000 or 2000, for which we could solve 45/100 and 95/100 instances, respectively. Fig. 3 scatters the runtime ratios of CoreD against CoreP in the least core value. It is clear that as the least core value is larger, CoreD is significantly better. If that value exceeds 0.05, CoreD is approximately twice as fast as CoreP. In contrast, when the least value is small, the runtime fluctuates within wide ranges, i.e., for some instances CoreD still performs well, and vice versa.5.3. ECore+(ε)+Next, Fig. 4 investigates the runtime for ECore+(ε) by varying ε and examines the ratio of instances where the weak is non-empty. The x-axis indicates the value of ε, and the y-axis on the left and right sides shows the average ε-coreruntime and the ratio of the instances, respectively. Through this experiment, we set #agents = 1000, | AC| = 10 000 and +(ε) exceeds this time limit, we vary ε from 0.01 to 10. We set the time limit to 105 msec; if the runtime of ECoreterminate the algorithm and exclude this problem instance when calculating the average runtimes and the ratios for this ε. As described below, the algorithm is terminated only when ε is slightly less than 0.1 for the decay distribution.60A. Iwasaki et al. / Artificial Intelligence 222 (2015) 49–66Fig. 4. Runtime for checking non-emptiness of weak ε-core+.Fig. 5. Runtime for obtaining εl and εr .+In general, when the core is empty, and if we make ε sufficiently large, the weak ε-corewill eventually become non-+(ε) exhibits an easy–hard–easy transition for the runtime by increasing ε for the decay distribution in Fig. 4a empty. ECore+(ε) exceeds and shows that the hardest region lies between 0.05 and 0.1. For the decay distribution, the runtime of ECorethe time limit only when the values of ε are 0.05 (100%) and 0.08 (100%), where each number within the parentheses is the ratio of the instances that exceed the time limit. This is the only such case across this experiment. On the other hand, the simple modification of CoreP in the previous section cannot solve any problem instances in this setting, since we cannot ∗) within the time limit of 105 msec for any distribution. Let us turn to the normal and uniform distributions obtain V (CS+(ε) hardly changes varying ε up to 1. When ε exceeds 1, the runtime depicted in Figs. 4b and 4c. The runtime of ECoregradually becomes faster and faster. Note that the weak ε-core+From these results, especially for the decay distribution, we expect that there exist three regions: (i) 0 ≤ ε ≤ εl, where +(ε) does not terminate within a is non-empty. Ideally, is , the weak ε-coreECorereasonable amount of time, and (iii) εr ≤ ε, where ECorewe hope to identify value ε∗empty. However, such ε∗lies in region (ii). As a result, identifying ε∗+(ε) can efficiently check that the ε-core+(ε) can efficiently check that the ε-core+, while for any ε < ε∗is empty, (ii) εl < ε < εr , where ECoreis non-empty for any ε ≥ ε∗is always non-empty for each ε.is too time-consuming., s.t., the weak ε-coreAlternatively, we can use a standard binary search procedure to identify εl and εr , when εl < ε∗ < εr holds. More +(ε) with a predefined time limit by varying ε. We keep the largest (smallest) value of ε where specifically, we run ECoreis empty (non-empty) as candidates of εl (εr ). Also, we keep the smallest and largest we found that the weak ε-core+(ε) did not terminate within the predefined time limit. If the difference values of ε (denoted as cl and cr ), where ECorebetween cl and the candidate of εl (as well as the difference between cr and the candidate of εr ) becomes smaller than δ, we terminate the procedure and return the current candidates of εl and εr .Fig. 5 shows the runtime of the binary search procedure and its obtained bound εr − εl by varying precision δ. We set +(ε) to half a minute, i.e., 30 000 msec. The other parameter settings are identical to the time limit of each run of ECoreFig. 4. For the decay distribution in Fig. 5a, the runtime does not increase very rapidly by decreasing δ. The obtained bound of εr –εl, when δ is large, becomes smaller by decreasing δ, i.e., by increasing the precision, but eventually εr –εl does not change by decreasing δ due to the time limit. In contrast, for the normal and uniform distributions, as we observed so far, the runtime and its bound are almost constant in Figs. 5b and 5c.++++5.4. EfficiencyWe have empirically shown that ECore∗).However, it must sacrifice the efficiency (social surplus) against the weak ε-core for the optimal coalition structure up to n · ε in the worst case. When it is impossible to compute the exact value of the optimal coalition structure, we can-+(ε). Nevertheless, we can derive not directly investigate how far from optimal is the sum of payoffs obtained by ECorea non-optimal coalition structure, compute its value, and obtain the weak ε-core for it. We investigate how much effi-+(ε) effectively removed the complexity hurdle of exactly knowing V (CSA. Iwasaki et al. / Artificial Intelligence 222 (2015) 49–6661ciency is achieved in the sum of payoffs obtained by ECoremanner.+(ε) and the value of a coalition structure computed in a greedy Let us briefly describe the greedy algorithm. We sort the allowed coalitions in decreasing order by value, check whether a coalition can be utilized one by one according to that order, and obtain a coalition structure and its worth that may not be optimal. The agents form the coalition structure and share the value efficiently so that every coalition S tolerates the excess up to |S|ε. The greedy algorithm guarantees no lower bound with respect to efficiency, while our algorithm bounds efficiency by the difference between the optimal value and n · ε. We fix the number of agents and the allowed coalitions to +is non-empty, if the greedy 1000 and 10 000. In this setting, exactly knowing V (CS+(ε), we share the value of the coalition structure so that algorithm finds a coalition structure whose value exceeds ECorethe payoff vector is in the weak ε-core for the obtained coalition structure. We observe the ratio of the coalition structure value obtained by the greedy algorithm to the sum of payoffs obtained by ECore∗) is impossible. When the weak ε-core+(ε) varying with ε.+chosen by ECoreFor the decay distribution, for which the core is always empty as shown in Section 5.2. For sufficiently small ε, the weak +(ε) outperforms the weak ε-core for the coalition structure chosen by the greedy procedure in ε-core+(ε) is only terms of the sum of payoffs (efficiency). In fact, when ε = 0.1, the average ratio of the greedy algorithm to ECoreabout 0.87. As ε increases, the efficiency ratio linearly increases and when ε reaches 1.0, it is about 0.95. For 100 instances +(ε) significantly outperforms the greedy algorithm. However, it is of each ε, the weak ε-core+(ε) as the number of agents a case that the coalition structure by the greedy algorithm can earn more than that by ECoreor the value of ε increases. When ε exceeds one, the ratio also exceeds one. The greedy algorithm achieves better efficiency than ECore+(ε). However, each agent must face relatively high excess.is always non-empty. ECore+For the normal and uniform distributions, for which the core is always non-empty (except very few instances for the uniform distribution). Note that CoreD finds a payoff vector so that every agent has no excess. In this case, for any ε, the +(ε). For the uniform distribution, when ε = 0.1, the ratio is 1.01, the ratio linearly greedy algorithm outperforms ECoreincrease, and it is 1.11 for ε = 1.0. The same trend is observed for the normal distribution. This is because the size of some coalition is relatively larger than the decay distribution. the greedy algorithm can choose some large coalitions with the higher value and can find the coalition structure whose value is larger than the value that the linear relaxation problem finds, though the degree is approximately 1.0% for sufficiently small ε.6. Discussions6.1. Super-additive coverAumann and Dreze [2] presented a conceptual transformation method called super-additive cover, which transforms an original game with a non-super-additive characteristic function, into a new game with a super-additive one. More specifi-cally, for an original characteristic function v and AC , a new super-additive one ¯v is defined as follows.• If S ∈ AC , ¯v(S) is given as v(S).• Otherwise, ¯v(S) is given as maxCSS {(cid:2)and S i ∈CSS S i = S, and ∀S i ∈ AC .(cid:3)S i ∈CSS v(S i)}, where CSS = {S1, S2, . . .} is a partition of S, i.e., all S i are disjoint (cid:3)S i ∈CS A v(S i) holds. Thus, V (CSis identical to partition Based on this conceptual transformation, the optimal coalition structure in the original game CS∗) = ¯v( A) holds. In summary, the problem of finding an optimal CS A , such that ¯v( A) =coalition structure (and the core for the coalition structure) in the original game, is equivalent to that of finding the value of the grand coalition (and the standard core) in the transformed game. Actually, Conitzer and Sandholm [8] dealt with this transformed game, where the characteristic function is explicitly given only for the elements of AC , which they call the Synergy Coalition Group. Greco et al. [15] introduce a concept called cohesive cover, in which the transformation is applied only for the grand coalition. The result presented in this subsection holds also for cohesive cover.∗6.2. Monetary transfers among coalitionsWhen monetary transfers among coalitions are not allowed and the core is empty, forming an optimal coalition structure is not necessarily best for minimizing ε.Example 4. Let there be three agents, a, b, and c, and assume v({a, b, c}) = v({a, b}) = v({b, c}) = v({a, c}) = 30, v({c}) = 3, and v({a}) = v({b}) = 0. Here, the optimal coalition structure is {{a, b}, {c}}. Assume that transfers across coalitions are not allowed and that agents choose payoff vector y = (15, 15, 3). Coalition S = {a, c} will be unsatisfied, since they can obtain 30 if they work together, i.e., v(S) = 30, but they obtain only 18. The average excess d( y, S) = v(S)−i∈S yi|S|is 6. On the other hand, if the grand coalition is formed (which is not optimal), agents can choose payoff vector y = (10, 10, 10). Then, any average excess is at most 5. Thus, this sub-optimal coalition structure is better for minimiz-ing ε.(cid:3)62A. Iwasaki et al. / Artificial Intelligence 222 (2015) 49–66∗), and (2) finding y that satisfies When monetary transfers among coalitions are allowed, we can separately solve the following problems (1) finding ∗) and optimizes some criteria, e.g., minimizing an average excess. V (CSOn the other hand, when monetary transfers among coalitions are not allowed, we need to find a desirable pair of a coalition structure and a payoff vector.i∈ A yi = V (CS(cid:3)In fact, the following is the mixed integer programming (MIP) formulation:Definition 13 (MIP where monetary transfers are not allowed).findsubject toy,(cid:6)x j ≤ 1, ∀i,j|i∈S j ∈ AC(cid:6)yi + ε · |S j| ≥ v(S j), ∀S j ∈ AC,i∈S j(cid:6)i∈ A(cid:6)yi =(cid:6)S j ∈ ACx j · v(S j),yi = x j · v(S j), ∀S j ∈ AC,i∈S jxi ∈ {0, 1}, ∀S j ∈ AC,yi ≥ 0, ∀i.Given ε, this MIP finds a pair of a coalition structure CS A and a payoff vector y that is in the weak ε-core for CS A . The notations and constraints here are basically borrows from Definitions 3 and 4. The fourth constraint highlights the assump-tion that monetary transfers among coalition are not allowed; all the value that a coalition S j earns must be distributed among its members.It is clear that the MIP in Definition 13 cannot be separated in the same manner that monetary transfers among coalition are allowed. The fourth constraint connects the first constraint that explores a coalition structure with the second and third ones that find an appropriate payoff vector. Also, the MIP must search every coalition structure, including the non-optimal ones, as Example 4 describes. Therefore, when monetary transfers are not allowed, the idea of CoreD is no longer applied. Though developing such an algorithm is admittedly our immediate future work, we need an entirely different technique from the dual solution.Note a case where a given instance has the core for the optimal coalition structure. For such instances, the payoff vector in the core does not change regardless whether monetary transfers among coalitions are allowed [2]. We do not need to transfer the payoffs among coalition to make the payoff vector stable, since each sub-coalition only has non-positive excess.6.3. Cost of stabilityThis subsection discusses the connection between the weak ε-coreand cost of stability (CoS), which is the minimal amount of money provided by an outside source to make the coalition structure stable [4]. CoS is defined as the difference ∗) with an optimal CS. If an outside source, e.g., a ∗between the lower bound V∗government, provides CoS = Vso that there exists no blocking coalition.obtained from LP-DUAL and the value V (CS∗) when agents form CS∗ − V (CS, they can divide V (CS∗) + CoS = V∗+Definition 14 (Cost of stability). Fix characteristic function v and the optimal coalition structure CSis defined as the solution of the following problem:∗The cost of stability CoSminsubject to Δ ≥ 0,Δ,yi ≥ 0 ∀i ∈ A,(cid:6)∗yi = V (CS) + Δ,i∈ A(cid:6)i∈Syi ≥ v(S) ∀S ∈ AC.When the core is non-empty, CoS is clearly zero. For the weak ε-core+and CoS, the following theorem holds:A. Iwasaki et al. / Artificial Intelligence 222 (2015) 49–6663Theorem 5. If the weak ε-core+is non-empty, CoS ≤ n · ε holds.Proof. Assume the weak ε-coresuch that ynew payoff vector y(cid:14)+(cid:14)iis non-empty. Then we can choose one element y in the weak ε-core= yi + ε. From the definition of the weak ε-core. Next, consider , the following conditions are satisfied.++(cid:3)• v(S) −• V (CS∗) ≤i∈S y(cid:3)(cid:14) ≤ 0, ∀S ∈ AC ,≤ V (CSi∈ A y(cid:14)i∗) + n · ε.Both conditions imply that y(cid:14)is in the core in the game with v(cid:14)such that (cid:3)j Δ j = n · ε. CoS ≤ n · ε holds. (cid:2)We can obtain a lower-bound of ε where the weak ε-core+is non-empty based on CoS.Theorem 6. The weak ε-core+is non-empty for ε = CoS/n.Proof. From the definition of CoS, there exists y such that is, y is in the core in the game with v(cid:3)=the weak ε-corenon-empty. (cid:2)i∈ A yi − n · ε = V (CSi∈ A yi = V (CS(cid:14). Now, consider new payoff vector y(cid:3)because i∈ A y+(cid:14)i∗) + CoS and ∀S ∈ AC, (cid:14)(cid:14)∗) and ∀S ∈ AC, d( y, S) ≤ ε hold. Thus, the weak ε-core= yi − ε where ε = CoS/n. ysuch that yi∈S yi ≥ v(S) hold. That is in +is (cid:14)i(cid:3)(cid:3)From these two theorems, we obtain the following theorem.Theorem 7. Choose ε as the least value of ε, where the weak ε-core+is non-empty. Then, ε is equal to CoS/n.6.4. NucleolusThis subsection discusses the relation between the weak ε-coreand the nucleolus [38]. Since the nucleolus always exists and is uniquely determined, we focus on the weak least core [20] for the optimal coalition structure and the weak least core, i.e., the solution concepts with the least value ε with which they are guaranteed to exist.++Lemma 1. The least value ε of the weak least core for the optimal coalition structure is equivalent to that of the weak least core+.+. First assume ε1 < ε2. Consider a weak ε(cid:14)Proof. Let ε1 and ε2 be the least values of the weak least core (for the optimal coalition structure) and the weak least must be empty. From the coreassumption, the weak ε1-core must be empty. However, from its definition, since the weak ε1-core is a superset of the weak ε1-core, it must be non-empty. This contradicts that the weak ε1-corewith ε(cid:14) < ε2. Then the weak ε(cid:14)with ε1 < ε2 is empty.-core-core++++) with ε(cid:14) < ε1. From the assumption, the weak ε2-core must -core (not -coreis non-empty, Theorem 3 derives that the weak ε2-core must be non-empty. +Next, assume ε1 > ε2. Consider a weak ε(cid:14)be empty. However, since the weak ε2-coreThis is a contradiction. Accordingly, ε1+= ε2. (cid:2)From this lemma, the next theorem is derived straightforwardly.Theorem 8. The weak least corethe weak least core+∗is also in the weak least core for CSand vice versa.+∗is identical to the weak least core for the optimal coalition structure CS, i.e., any payoff vector in Proof. From the definitions and Lemma 1, the weak least corecoalition structure CS+least coreviolate the efficiency condition of the weak least core. Here, let us construct another payoff vector yis a superset of the weak least core (for the optimal ). Assume there exists a payoff vector y such that it is not in the weak least core, but in the weak . Since the non-blocking conditions are the same across these two solution concepts, this payoff vector y must such that∗(cid:14)+= yi + V (CS(cid:14)iy∗) − y( A)nfor all i.The payoff vector y(cid:14)inevitably satisfies the efficiency condition because y(cid:3)(cid:14)( A) =i∈ A y(cid:14)i= y( A) + V (CS∗)− y( A)n× n = V (CS∗).∗. (cid:2)+A. Iwasaki et al. / Artificial Intelligence 222 (2015) 49–66be the least value of the weak least core. For any coalition S and payoff vector y,∗) − y( A)(cid:14)(S)+ V (CSn≤ ε∗.64Let ε∗= v(S) − y|S|v(S) − y(S)|S|(cid:14)(S)Then, we obtain v(S)− y|S|contradicts the fact that ε∗Accordingly, the weak least core+≤ ε∗ − V (CSis in the weak ε(cid:14)is the least value of the weak ε-core because the weak ε(cid:14)-core with ε(cid:14). y(cid:14)∗)− y( A)nwhich is equal to ε∗ − V (CS-core with ε(cid:14) < ε∗∗)− y( A)n. This is non-empty. is identical to the weak least core for CS∗This theorem shows that when ε reaches the least value, the weak ε-core(cid:3)i∈ A yi converges to V (CSis, the dual solution the agents do not produce enough value. As such, if CSneeded. However, as long as finding CSgiven ε from the (unknown) least value. Thus, the weak ε-coreε-core for CS∗∗.∗). As a result, the agents in the weak ε-core. That , otherwise, is no longer and its value are exactly computed, the weak ε-coreis hard, the least value is difficult to obtain in practice. We cannot justify how far a is useful as an approximate solution concept for the weak converges to the weak ε-core for CSmust form CS+++∗∗Next, we briefly explain the traditional nucleolus [38]. For any payoff vector and coalition, let us consider the excess of the coalition. Also, consider the vector of all the coalitions’ excesses, sorted in descending order. The nucleolus chooses the payoff vector that lexicographically minimizes this vector; it first minimizes the greatest excess, then the second-greatest excess, etc. The nucleolus has some desirable properties. For a transferable utility game, it always exists, is unique (even if the core of the game is empty), is in the core if the core is non-empty. Furthermore, it is known that if the core is empty, the nucleolus is in the (strong) least core. The same property holds when we use the average excesses, i.e., if the weak core is empty, the weak nucleolus is in the weak least core (see [43] for example).Before formally defining the weak nucleolus for our games with constraints on the possible coalitions, let us introduce several notations. Let θ( y) for each payoff vector y be the | AC|-vector whose components are the corresponding average excess d( y, S) of each allowed coalition S ∈ AC , sorted in descending order: θi( y) ≥ θ j( y) whenever 1 ≤ i ≤ j ≤ | AC|. i is associated with coalition S such that θi( y) = d( y, S). The lexicographic order between such excess vectors is defined as follows. We represent θ( y(cid:5), which holds if and only if there exists an integer i(cid:14)) ≺ θ( y) if y is preferred to ysuch that(cid:4)(cid:4)(cid:5)∗(cid:14)(cid:14)θiy= θi( y)∗(cid:14)for all i < iand θi∗(cid:14)) (cid:16) θ( y), it indicates that θ( y> θi∗ ( y).yAlso, when we write θ( ynucleolus.(cid:14)) (cid:17) θ( y) does not hold. Now we are ready to define the weak Definition 15 (Weak nucleolus). The weak nucleolus for coalition structure CS A of all agents A is in the set of payoff vectors where each element y satisfies(cid:5)(cid:7)(cid:8)(cid:4)(cid:9)(cid:9)θy(cid:14)y(cid:16) θ( y) for all y(cid:14).This definition implies the efficiency condition by minimizing the largest average excess. If no coalition is constrained, it is of course equivalent to the original weak nucleolus. Furthermore, the weak nucleolus does minimize the largest excess of both the members and the non-members of AC . However, it does not lexicographically minimize the excess vector. Precisely, it lexicographically minimizes the excess vector for the members of AC , not for its non-members.6 Therefore, this weak nucleolus may provide a different payoff vector from the conventional one if the use of some coalition is prohibited. Nevertheless, when an optimal coalition structure is given, the weak nucleolus is guaranteed to be in the weak least core for that coalition structure.Theorem 9. The weak nucleolus for the optimal coalition structure is in the weak least coreoptimal coalition structure.+, as well as in the weak least core for the Proof. Assume there exists a payoff vector y such that it is not in the weak least core (for the optimal coalition structure), be a payoff vector from the weak least core. From but in the weak nucleolus (for the optimal coalition structure). Let ythe assumption, the largest excess θ1( y) in the excess vector of y must exceed θ1( yis preferred to y. This fact contradicts that y is in the weak nucleolus. (cid:2)(cid:14)). That is, y(cid:14)(cid:14)Finally, let us briefly describe what happens if we relax the efficiency condition of the weak nucleolus. We can define ∗). However, this does not distinguish the weak nucleolus from the weak at all because the latter automatically achieves its efficiency due to its definition which minimizes the largest i∈ A yi ≤ V (CSby imposing (cid:3)+the weak nucleolus+nucleolusexcess in y.6 A similar argument in the context of the synergy coalition group representation was previously discussed in [26].7. ConclusionsA. Iwasaki et al. / Artificial Intelligence 222 (2015) 49–6665When forming the grand coalition is not possible or optimal, agents need to create a coalition structure and to decide how to divide its gain among themselves. We developed an innovative algorithm called CoreD to check the core-non-emptiness for coalition structures. Since checking core-non-emptiness is NP-complete, we set our research goal to develop an algorithm whose average runtime is much faster than a traditional algorithm called CoreP. We showed that the perfor-mance of our newly developed algorithm called CoreD is much better than CoreP when the core is empty.Furthermore, we proposed a new solution concept called the weak ε-corethe optimal coalition structure CSalgorithm for checking the non-emptiness of the weak ε-core. It can utilize an approximate CS+called ECore+(ε).∗+, which is based on the weak ε-core for value. Based on the idea of CoreD, we developed an ∗AcknowledgementsThis research was partially supported by KAKENHI 23500184, 24220003, and 26280081. We wish to thank Yukihiko Funaki, Takumi Kongo, Reshef Meir, and Dengji Zhao for their valuable comments. Makoto Kitaki provided excellent research assistance. We also highly appreciate the associated editor and three anonymous reviewers for their fruitful comments.References[1] S. Airiau, S. Sen, On the stability of an optimal coalition structure, in: Proceedings of the 19th European Conference on Artificial Intelligence (ECAI), 2010, pp. 203–208.[2] R.J. Aumann, J.H. Dreze, Cooperative games with coalition structures, Int. J. Game Theory 3 (1974) 217–237.[3] H. Aziz, B. de Keijzer, Complexity of coalition structure generation, in: Proceedings of the 10th International Conference on Autonomous Agents and Multiagent Systems (AAMAS), 2011, pp. 191–198.[4] Y. Bachrach, E. Elkind, R. Meir, D.V. Pasechnik, M. Zuckerman, J. Rothe, J.S. Rosenschein, The cost of stability in coalitional games, in: Proceedings of the 2nd International Symposium on Algorithmic Game Theory (SAGT), 2009, pp. 122–134.[5] Y. Bachrach, P. Kohli, V. Kolmogorov, M. Zadimoghaddam, Optimal coalition structure generation in cooperative graph games, in: Proceedings of the 26th Conference on Artificial Intelligence (AAAI), 2013, pp. 81–87.[6] Y. Bachrach, R. Meir, K. Jung, P. Kohli, Coalitional structure generation in skill games, in: Proceedings of the 24th Conference on Artificial Intelligence (AAAI), 2010, pp. 703–708.[7] G. Chalkiadakis, E. Elkind, M. Wooldridge, Computational Aspects of Cooperative Game Theory, Morgan and Claypool Publishers, 2011.[8] V. Conitzer, T. Sandholm, Complexity of constructing solutions in the core based on synergies among coalitions, Artif. Intell. 170 (2006) 607–619.[9] P. Cramton, Y. Shoham, R. Steinberg, Combinatorial Auctions, MIT Press, 2006.[10] M. Davis, M. Maschler, The kernel of a cooperative game, Nav. Res. Logist. Q. 12 (1965) 223–259.[11] G. Demange, The strategy structure of some coalition formation games, Games Econ. Behav. 65 (2009) 83–104.[12] E. Elkind, T. Rahwan, N.R. Jennings, Computational coalition formation, in: Multiagent Systems, 2nd edn., MIT Press, 2013, pp. 329–380.[13] D. Gillies, Some theorems on n-person games, Ph.D. thesis, Princeton University, 1953.[14] G. Greco, E. Malizia, L. Palopoli, F. Scarcello, On the complexity of core, kernel, and bargaining set, Artif. Intell. 175 (2011) 1877–1910.[15] G. Greco, E. Malizia, L. Palopoli, F. Scarcello, On the complexity of the core over coalition structures, in: Proceedings of the 22nd International Joint [16] S. Ieong, Y. Shoham, Marginal contribution nets: a compact representation scheme for coalitional games, in: Proceedings of the 6th ACM Conference Conference on Artificial Intelligence (IJCAI), 2011, pp. 216–221.on Electronic Commerce (ACM EC), 2005, pp. 193–202.[17] A. Iwasaki, S. Ueda, M. Yokoo, Finding the core for coalition structure utilizing dual solution, in: Proceedings of the 2013 IEEE/WIC/ACM International Conference on Intelligent Agent Technology (IAT), 2013, pp. 114–121.[18] M.I. Kamien, I. Zang, The limits of monopolization through acquisition, Q. J. Econ. 105 (1990) 465–499.[19] K. Leyton-Brown, M. Pearson, Y. Shoham, Towards a universal test suite for combinatorial auction algorithms, in: Proceedings of the 1st ACM Conference on Electronic Commerce (ACM EC), 2000, pp. 66–76.[20] M. Maschler, B. Peleg, L.S. Shapley, Geometric properties of the kernel, nucleolus, and related solution concepts, Math. Oper. Res. 4 (1979) 303–338.[21] R. Meir, J.S. Rosenschein, E. Malizia, Subsidies, stability, and restricted cooperation in coalitional games, in: Proceedings of the 23rd International Joint Conference on Artificial Intelligence (IJCAI), 2011, pp. 301–306.[22] T.P. Michalak, J. Sroka, T. Rahwana, M. Wooldridge, P. McBurney, N.R. Jennings, A distributed algorithm for anytime coalition structure generation, in: Proceedings of the 9th International Conference on Autonomous Agents and Multiagent Systems (AAMAS), 2010, pp. 1007–1014.[23] T.D. Nguyen, A fast approximation algorithm for solving the complete set packing problem, Eur. J. Oper. Res. 237 (2014) 62–70.[24] N. Nisan, Bidding and allocation in combinatorial auctions, in: Proceedings of the 1st ACM Conference on Electronic Commerce (ACM EC), 2000, pp. 1–12.[25] N. Ohta, V. Conitzer, R. Ichimura, Y. Sakurai, A. Iwasaki, M. Yokoo, Coalition structure generation utilizing compact characteristic function representa-tions, in: Proceedings of the 15th International Conference on Principles and Practice of Constraint Programming (CP), 2009, pp. 623–638.[26] N. Ohta, A. Iwasaki, M. Yokoo, K. Maruono, A compact representation scheme for coalitional games in open anonymous environments, in: Proceedings of the 21st Conference on Artificial Intelligence (AAAI), 2006, pp. 697–702.[27] M. Osborne, A. Rubinstein, A Course in Game Theory, MIT Press, 1994.[28] D. Perez-Castrillo, Cooperative outcomes through noncooperative games, Games Econ. Behav. 7 (1994) 428–440.[29] T. Rahwan, N.R. Jennings, An algorithm for distributing coalitional value calculations among cooperative agents, Artif. Intell. 171 (2007) 535–567.[30] T. Rahwan, N.R. Jennings, An improved dynamic programming algorithm for coalition structure generation, in: Proceedings of the 7th International Conference on Autonomous Agents and Multiagent Systems (AAMAS), 2008, pp. 1417–1420.[31] T. Rahwan, T.P. Michalak, E. Elkind, P. Faliszewski, J. Sroka, M. Wooldridge, N.R. Jennings, Constrained coalition formation, in: Proceedings of the 25th AAAI Conference on Artificial Intelligence (AAAI), 2011, pp. 719–725.[32] T. Rahwan, T.P. Michalak, N.R. Jennings, Minimum search to establish worst-case guarantees in coalition structure generation, in: Proceedings of the 22nd International Joint Conference on Artificial Intelligence (IJCAI), 2011, pp. 338–343.[33] T. Rahwan, T.P. Michalak, N.R. Jennings, A hybrid algorithm for coalition structure generation, in: Proceedings of the 26th AAAI Conference on Artificial Intelligence (AAAI), 2012, pp. 1443–1449.66A. Iwasaki et al. / Artificial Intelligence 222 (2015) 49–66[34] T. Rahwan, S.D. Ramchurn, N.R. Jennings, A. Giovannucci, An anytime algorithm for optimal coalition structure generation, J. Artif. Intell. Res. 34 (2009) 521–567.[35] S.D. Ramchurn, M. Polukarov, A. Farinelli, N.C. Truong, N.R. Jennings, Coalition formation with spatial and temporal constraints, in: Proceedings of the 9th International Conference on Autonomous Agents and Multiagent Systems (AAMAS), 2010, pp. 1181–1188.[36] T. Sandholm, Algorithm for optimal winner determination in combinatorial auctions, Artif. Intell. 135 (2002) 1–54.[37] T. Sandholm, K. Larson, M. Andersson, O. Shehory, F. Tohmé, Coalition structure generation with worst case guarantees, Artif. Intell. 111 (1999) 209–238.[38] D. Schmeidler, The nucleolus of a characteristic function game, SIAM J. Appl. Math. 17 (1969) 1163–1170.[39] L.S. Shapley, A value for n-person games, in: Contributions to the Theory of Games, Princeton University Press, 1953, pp. 307–317.[40] L.S. Shapley, M. Shubik, Quasi-cores in a monetary economy with nonconvex preferences, Economitrica 34 (1966) 805–827.[41] O. Shehory, S. Kraus, Methods for task allocation via agent coalition formation, Artif. Intell. 101 (1998) 165–200.[42] T. Voice, M. Polukarov, N. Jennings, Coalition structure generation over graphs, J. Artif. Intell. Res. 45 (2012) 165–196.[43] H.P. Young, N. Okada, T. Hashimoto, Cost allocation in water resources development, Water Resour. Res. 18 (1982) 463–475.