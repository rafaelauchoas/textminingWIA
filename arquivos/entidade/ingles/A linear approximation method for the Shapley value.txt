Artificial Intelligence 172 (2008) 1673–1699Contents lists available at ScienceDirectArtificial Intelligencewww.elsevier.com/locate/artintA linear approximation method for the Shapley valueShaheen S. Fatima a,∗, Michael Wooldridge b, Nicholas R. Jennings ca Department of Computer Science, Loughborough University, Loughborough LE11 3TU, UKb Department of Computer Science, University of Liverpool, Liverpool L69 3BX, UKc School of Electronics and Computer Science, University of Southampton, Southampton SO17 1BJ, UKa r t i c l ei n f oa b s t r a c tArticle history:Received 2 December 2007Received in revised form 22 May 2008Accepted 27 May 2008Available online 7 July 2008Keywords:Coalitional game theoryShapley valueApproximation methodThe Shapley value is a key solution concept for coalitional games in general and votinggames in particular. Its main advantage is that it provides a unique and fair solution, butits main drawback is the complexity of computing it (e.g., for voting games this complexityis #p-complete). However, given the importance of the Shapley value and voting games,a number of approximation methods have been developed to overcome this complexity.Among these, Owen’s multi-linear extension method is the most time efficient, being linearin the number of players. Now,in addition to speed, the other key criterion for anapproximation algorithm is its approximation error. On this dimension, the multi-linearextension method is less impressive. Against this background, this paper presents a newapproximation algorithm, based on randomization, for computing the Shapley value ofvoting games. This method has time complexity linear in the number of players, but has anapproximation error that is, on average, lower than Owen’s. In addition to this comparativestudy, we empirically evaluate the error for our method and show how the differentparameters of the voting game affect it. Specifically, we show the following effects. First, asthe number of players in a voting game increases, the average percentage error decreases.Second, as the quota increases, the average percentage error decreases. Third, the erroris different for players with different weights; players with weight closer to the meanweight have a lower error than those with weight further away. We then extend ourapproximation to the more general k-majority voting games and show that, for n players,the method has time complexity O(k2n) and the upper bound on its approximation erroris O(k2/n).√© 2008 Elsevier B.V. All rights reserved.1. IntroductionCoalition formation is a key form of interaction in multi-agent systems. It is the process of bringing together two ormore agents so as to achieve goals that individuals on their own cannot, or to achieve them more efficiently [2,18,22,23].Often, in such situations, there is more than one possible coalition and a player’s payoff depends on which one he joins.Given this, there are two key problems in this area. First, to ensure that none of the parties in a coalition has any incentiveto break away from it and join another coalition. Second, to determine how the players split the gains from cooperationbetween themselves.In this context, cooperative game theory deals with the problem of coalition formation and offers a number of solutionconcepts that possess desirable properties like stability, fair division of joint gains, and uniqueness [23,27]. Cooperative gametheory differs from its non-cooperative counterpart, in that, it allows the players to form binding agreements, and so there is* Corresponding author.E-mail addresses: S.S.Fatima@lboro.ac.uk (S.S. Fatima), M.J.Wooldridge@csc.liv.ac.uk (M. Wooldridge), nrj@ecs.soton.ac.uk (N.R. Jennings).0004-3702/$ – see front matter © 2008 Elsevier B.V. All rights reserved.doi:10.1016/j.artint.2008.05.0031674S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–1699often an incentive to work together to receive the largest total payoff. Also, unlike non-cooperative game theory, cooperativegames are not specified through a description of the strategic environment (including the order of the players’ moves andthe set of actions at each move) and the resulting payoffs. Instead, cooperative game theory reduces this collection of datato the coalitional form, where each coalition is represented by a single real number. In short, there are no actions, moves, orindividual payoffs. The chief advantage of this approach, at least in multiple agent environments, is its practical usefulness.Specifically, it allows the abstraction of dealing with groups, rather than the individuals, and so much larger problems canbe handled.In more detail, cooperative game theory offers a number of solution concepts (such as the core, kernel, and Shap-ley value [23]) and a number of multi-agent systems researchers have used and extended these to facilitate automatedcoalition formation [26,31,33,34]. In so doing, a key challenge, from the multi-agent systems perspective, is to study thecomputational aspects of the solutions that game theory provides. This is important because many of these solutions arecomputationally hard to find and so of limited use in building actual systems. For example, computing the core is oftennp-complete [10], while computing the Shapley value is often #p-complete [12].To this end, this paper is concerned with efficiently computing the Shapley value [32]. In more detail, a player’s Shapleyvalue reflects how much that player contributes to a coalition—that is, how much value the agent adds to a coalition. Anagent who never adds much has a small Shapley value, while an agent that always makes a significant contribution has ahigh Shapley value. Now, the main advantage of the Shapley value, over solution concepts such as the core and the kernel, isthat it provides a solution that is both unique and fair. The former is desirable because it leaves no ambiguity; there is onlyone possible solution for a game and so the players know what they will gain from playing it. The latter property relates tohow the gains from cooperation are split between coalition members. In this case, a player’s Shapley value is proportionalto the contribution he makes as a member of a coalition; the greater the contribution, the higher its value. Thus, from aplayer’s perspective, both uniqueness and fairness are desirable properties.However, while uniqueness and fairness are both desirable properties, the Shapley value has one major drawback: formany coalitional games, it cannot be determined in polynomial time. One of the most common coalitional games is thevoting game (which is a means for the players to reach a consensus) and for this game, finding the Shapley value is #p-complete [12] (meaning that it is as hard as counting satisfying assignments of propositional logic formulae [25, p. 442]).Since #p-completeness subsumes np-completeness, this implies that computing the Shapley value for the voting game willbe intractable in general. In other words, it is practically infeasible to try to compute the exact Shapley value. However, thevoting game has practical relevance not only in the context of multi-agent systems [28,34], but also in human settings, as itis an important means of reaching consensus between multiple parties.Against this background, a number of approximation methods have been developed in order to overcome the problem ofcomputational hardness of finding the exact Shapley value (see Section 3 for details). These methods vary in terms of theirtime complexities. Among these, however, Owen’s multi-linear extension method [24] for a weighted voting game is one ofthe most time efficient, requiring time linear in the number of players. However, the accuracy with which it approximatesthe real value can be an issue in some cases (the method works well for those games for which all the players havesmall weights). To combat this, this paper presents a new approximation algorithm for computing the Shapley value for aweighted voting game. Our method is based on the technique of randomization and has time complexity that is linear inthe number of players, but has a lower approximation error than Owen’s method. In addition to this comparative study, weempirically evaluate the error for our method in a range of environments and show how the different parameters of thevoting game affect the error. We then extend our approximation method (for a weighted voting game) to the more generalk-majority voting games. For this, we show that for n players, the time complexity of our extended method is O(k2n) andthe upper bound on its approximation error is O(k2/n).√By undertaking this work, this paper makes a number of important contributions to the state of the art. First, and mostimportantly, it presents a new computationally efficient approximation algorithm for the Shapley value for weighted vot-ing games. The proposed method has linear time complexity, and is better than Owen’s method in terms of its error ofapproximation. Second, we extend our approximation method for a weighted voting game to the more general k-majorityvoting games. This is the first such method for this game. Finally, we provide a comprehensive error analysis of our approx-imation method. As mentioned earlier, we not only consider the worst case and obtain the upper bound on the error, butwe also consider a general case and show how the different parameters of the voting game affect this error. This analysisdistinguishes our work from the existing literature on approximation methods in that these have no error analysis1 (neitherfor the worst, nor the general case). Nevertheless, we believe such analysis is essential because it enables us to present acomplete picture of our method’s performance in terms of how far the approximation can be from the exact Shapley valueand how the different parameters of the voting game affect it.The remainder of the paper is organized as follows. Section 2 defines the Shapley value more formally and detailsvoting games studied in this paper. Section 3 discusses related literature. In Section 4, we present our method for findingthe approximate Shapley value and analyze its approximation error in Section 5. In Section 6, we experimentally evaluateour method’s approximation error and compare it with that of Owen’s method. Section 7 concludes. Appendix A gives1 Error bounds for approximate coalition structure generation have been studied in [30], but there has been no such study in the context of finding theapproximate Shapley value.S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–16991675a summary of notation employed throughout the paper. Appendices B to F provide proofs of theorems. Appendices G and Hgive details on the results and data used for our experiments.2. BackgroundWe begin by introducing coalitional games and the Shapley value. We then define a weighted voting game and, itsgeneralized form of a weighted k-majority game.2.1. Coalitional games and the Shapley valueA coalition game is where groups of players (‘coalitions’) may enforce cooperative behavior between their members.Hence, the game is a competition between coalitions of players, rather than between individual players (cf. non-cooperativegame theory). Now, depending on how the players measure utility, coalitional game theory is split into two parts. If theplayers measure utility or the payoff in the same units and there is a means of exchange of utility, such as side payments,we say the game has transferable utility; otherwise it has non-transferable utility. More formally, a coalitional game withtransferable utility, (cid:4)N, v(cid:5), consists of [23]:(1) a finite set, N = {1, 2, . . . , n}, of players and(2) a function, v, that associates with every non-empty subset S of N (i.e., a coalition) a real number v(S) that indicatesthe worth of S.For each coalition S, v(S) is the total payoff that is available for division among the members of S. Note that, viewed in thisabstract way, a coalitional game gives no indication of how a coalition’s value might or should be divided amongst coalitionmembers. Coalitional games with non-transferable payoffs differ from those with transferable payoffs in that they associatewith each coalition, a set of payoff vectors that is not necessarily the set of all possible divisions of some fixed amount. Thefocus of this paper is on weighted voting games (described in Section 2.2) which have transferable payoffs.In a voting game, the players will only join a coalition if they expect to gain from it. Here, the players are allowedto form binding agreements, and so there is often an incentive to work together to receive the largest total payoff. Theproblem then is how to split the total payoff between the players. In this context, Shapley [32] constructed a solution usingan axiomatic approach. In particular, he defined a value for games to be a function that assigns to a game (cid:4)N, v(cid:5), a numberϕi(N, v) for each i in N. This function satisfies three axioms [29,32]:(1) Symmetry: The names of the players play no role in determining the value. That is, two players who are identical withrespect to what they contribute to a coalition should have the same Shapley value.(2) Carrier: The sum of ϕi(N, v) for all players i in any carrier C equals v(C). Here carrier C is simply a subset of N suchthat v(S) = v(S ∩ C) for any subset of players S ⊂ N.(3) Additivity: This specifies how the values of different games must be related to one another. It requires that for any(cid:8)) = ϕi(N, v + vgames ϕi(N, v) and ϕi(N, v(cid:8)), ϕi(N, v) + ϕi(N, v(cid:8)) for all i in N.Shapley showed that there is a unique function that satisfies these three axioms. This value gives a fair division of the gainsof cooperation between the members of a coalition. Thus, one can think of the Shapley value as a measure of the utility ofrisk neutral players in a game [29].Having given these intuitions, we now turn to their formalization. Specifically, we first introduce notation and then definebe a random variable that takes its values in the set ofthe Shapley value. Let S denote the set N − {i} and f i : S → 2N−{i}all subsets of N − {i}, and has the probability distribution function (g) defined as:(cid:2)gf i(S) = S(cid:3)=|S|!(n − |S| − 1)!n!.The random variable f i is interpreted as the random choice of a coalition that player i joins. Then, a player’s Shapley valueis defined in terms of its marginal contribution. Thus, the marginal contribution of player i to coalition S with i /∈ S is afunction (cid:3)i v that is defined as follows:(cid:3)i v(S) = v(cid:2)(cid:3)S ∪ {i}− v(S).(1)This means a player’s marginal contribution to a coalition S is the increase in the value of S as a result of i joining it.A player’s Shapley value is defined in terms of its marginal contribution as follows [29,32]:Definition 1. The Shapley value (ϕi ) of the game (cid:4)N, v(cid:5) for player i is the average of its marginal contribution to all possiblecoalitions:ϕi =(cid:4)S⊂N|S|!(n − |S| − 1)!n!× (cid:3)i v(S).(2)1676S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–1699The Shapley value may be interpreted as follows. Suppose that all the players are arranged in some order, all orderingsbeing equally likely. Then ϕi(N, v) is the expected marginal contribution, over all orderings, of player i to the set of playerswho precede him.Now, the method for finding a player’s Shapley value depends on the definition of the value function (v). This function isdifferent for different games, but here we focus specifically on the voting game because the computation of its Shapley valueis computationally hard. Furthermore, voting games are an important way of modeling situations where there are multipleagents, different agents have different preferences, and they want to reach a consensus. For these games, the Shapley valuegives an indication of how much influence each agent has on reaching a consensus.2.2. Weighted voting gamesLet n be a set of players that may, for example, represent shareholders in a company or members in a parliament.A weighted voting game [23] is then a game G = (cid:4)N, v(cid:5) in which:(cid:5)v(S) =1 if w(S) (cid:2) q,0 otherwisefor some q ∈ R+ and w i ∈ R+, where:w(S) =(cid:4)w ii∈Sfor any coalition S. Thus, w i is the number of votes that player i has and q is the number of votes needed to win the game(i.e., the quota).For this game (denoted (cid:4)q; w 1, . . . , wn(cid:5)), a player’s marginal contribution is either zero or one. This is because the valueof a coalition is either zero or one. A coalition with value zero is called a “losing coalition” and with value one a “winningcoalition”. If a player’s entry to a coalition changes it from losing to winning, then the player’s marginal contribution forthat coalition is one; otherwise it is zero. A coalition S is said to be a swing for player i if S is losing but S ∪ {i} is winning.A well known example of weighted voting is the Electoral College of the United States, where the players are the 50states plus the District of Columbia; each player casts a number of votes equal to the number of that state’s representativesplus senators. Another example is a company of shareholders where each shareholder casts a number of votes proportionalto the number of shares he owns.Speaking more broadly, however, a weighted voting game is just a special case of a more general setting called a k-ma-jority game (for k = 1, we have the weighted voting game). This general version is defined as follows.2.3. k-majority gamesFor the set N of n players, a weighted k-majority game (v 1 ∧ · · · ∧ vk) is a situation in which vt = [qt; wt1, . . . , wtn] for1 (cid:3) t (cid:3) k are weighted voting games and(cid:6)(v 1 ∧ · · · ∧ vk)(S) =(cid:7)where wt(S) =i∈S wti .1 if wt(S) (cid:2) qt for 1 (cid:3) t (cid:3) k,0 otherwise,The k-majority game finds application, for example, in the European Union enlargement. The Council of ministers of theEuropean Union represents the national governments of the member states. The Council uses a voting system of qualifiedmajority to pass new legislation. The Nice European Council established two decision rules for the European Union enlargedto 27 countries. One of these two rules is a weighted triple majority game v 1 ∧ v 2 ∧ v 3 described in the following example(taken from [5]):Example 1. Each member state represented in the future Council is considered an individual player. The players in the Coun-cil of the European Union enlarged to 27 countries are: {Germany, United Kingdom, France, Italy, Spain, Poland, Romania,The Netherlands, Greece, Czech Republic, Belgium, Hungary, Portugal, Sweden, Bulgaria, Austria, Slovak Republic, Denmark,Finland, Ireland, Lithuania, Latvia, Slovenia, Estonia, Cyprus, Luxembourg, Malta}. The decision rule is a weighted triple ma-jority game v 1 ∧ v 2 ∧ v 3, where the three weighted voting games corresponding to votes, countries, and population are thefollowing:v 1 = {255; 29, 29, 29, 29, 27, 27, 14, 13, 12, 12, 12, 12, 12, 10, 10, 10, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 3},v 2 = {14; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},v 3 = {620; 170, 123, 122, 120, 82, 80, 47, 33, 22, 21, 21, 21, 21, 18, 17, 17, 11, 11, 11, 8, 8, 5, 4, 3, 2, 1, 1}.The game v 3 is defined by assigning to each country, a number of votes equal to the rate per thousand of its populationover the total population and the quota represents 62% of the total population. So a vote will be favorable if it counts onthe support of 14 countries with at least 255 votes, and at least 62% of the population.S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–16991677Although voting games have so far mostly been used in human contexts, they are now being increasingly studied in thecontext of multi-agent systems [28,31,34]. In systems composed of autonomous agents, each agent has a range of problemsolving capabilities and resources at its disposal. While such agents are typically self interested, often there are benefits tobe obtained from pooling resources. In such cases, the agents need to cooperate and coordinate their activities to achievejoint goals. Since the individual agents are autonomous, different agents may have different preferences over these jointgoals. In such scenarios, voting is an effective mechanism for the agents to reach consensus on what goals to achieve. Giventhis, in what follows, we will analyze voting games in the abstract without reference to their different contexts.3. Related workFor a weighted voting game, a number of methods have been proposed for finding the Shapley value. These methods canbe divided into two types. The first compute the exact value. The second compute the approximate value. These methods varyin their approach and in their computing requirements. None is universally ideal. Given this, in what follows, we discussthe main methods in each category and highlight their main advantages and limitations.3.1. Exact methodsThe following are the four main methods that can be classified as exact:(1) Direct enumeration.(2) Generating functions [8,21,35].(3) Conitzer and Sandholm’s method [9].(4) Ieong and Shoham’s method [16,17].In more detail, the direct enumeration method directly applies Eq. (2) to compute the Shapley value for player i. Thealgorithm for doing this is described in Table 1. Since the number of subsets of the set (N = {1, 2, . . . , n}) of players is 2n,evaluating the Shapley value for player i has time complexity O(2n). The disadvantage of this method is that it has expo-nential time complexity, but its advantage is that it is a simple algorithm and it can reasonably be applied for finding theexact value for games with a small number of players.The generating functions method [20,21] was proposed by Mann and Shapley. This finds the exact Shapley value in termsof the coefficients of a polynomial generated by a function (see [38] for details on generating functions). The disadvantageof this method is that it uses a substantial amount of memory, but its advantage is that it has polynomial time complexity—O(Cn2)—where C is the number of possible vote totals [6]. For games where every player has the same weight, thereare n + 1 possible vote totals. For games where each player has a unique weight, the number of possible vote totals maybe 2n. Therefore, this method is practical for games in which many players have the same weights. Methods based ongenerating functions have also been proposed in [1,8,35]. Generally speaking, these methods also trade-off memory spacefor computation time and so cannot easily scale to larger numbers of agents.Conitzer et al. [9] use a method to find the exact value. However, their method can be used only if a characteristicfunction game is represented in a specific decomposed form. Also, this method has exponential time complexity and so itdoes not scale well.Finally, the method proposed by Ieong et al. [16,17] assumes that the Shapley value of a component of a given coalitionalgame is given by an oracle. Then, on the basis of this assumption, it aggregates these values to find the value for the overallgame. The advantage of this method is that it has polynomial time complexity. However, its disadvantage is that it can beused only if the coalitional game is represented as a “marginal contribution net”.To summarize, all the above methods give the exact Shapley value, but they each have disadvantages; including requiringexponential time (as in the case with direct enumeration and, in some cases, with Mann and Shapley’s), a large memoryspace (as in the case of Mann and Shapley), or a specific representation2 for the voting game (as is the case with Conitzeret al. and Ieong et al.). In order to overcome these problems, a number of approximation methods were developed.Table 1Direct enumeration algorithm to find the Shapley value for player iDE-ShapleyValue1. For each S ⊂ N do the followingFor i from 1 to n do the followingIf i ∈ N − S and q − w i (cid:2) w(S) < q then ϕi ← ϕi + |S|!(n − |S| − 1)!/n!2. Return ϕi2 Note that transforming a voting game into these specific forms requires additional computational time.1678S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–16993.2. Approximation methodsThe methods that have been proposed to approximate the Shapley value are as follows:(1) Monte Carlo simulation method [20].(2) Multi-linear extension (MLE) method [24].(3) Modified MLE method [19].(4) Random permutation method [39].The earliest approximation method was proposed by Mann and Shapley [20]. This method is based on Monte Carlo simu-lation and estimates the Shapley value from a random sample of coalitions. This is done as follows. Suppose a coalition Sis selected by randomly sampling the players. Define a random variable X for each player. This X is one for player i if it isthe swing player for the coalition, and zero otherwise. Then, the expectation of X is(cid:8)E[ X] = E|S|!(n − 1 − |S|)! Xn!(cid:9)= ϕiand the variance is(cid:8)Var( X) = Var(cid:9)|S|!(n − 1 − |S|)! Xn!= ϕi(1 − ϕi).Now take a sequence of m independent drawings, X1, . . . , Xm, with corresponding coalition sizes |S1|, . . . , |Sm|. Then, theestimated Shapley value ( ˆϕi ) for i is:ˆϕi = 1mm(cid:4)j=1|S j|!(n − |S j| − 1)!n!X jwith variance Var( ˆϕi) = ϕi(1 − ϕi)/m. The variance decreases as m increases. The disadvantage of this method is that it doesnot give details of how the samples are to be drawn, which has a significant impact on the method’s effectiveness. Giventhis, it is hard to assess the accuracy of this method. However, the advantage is its linear time complexity.For the sampling approach, Bachrach and Rosenschein provide an analysis of the error bounds and minimum number ofsamples required to achieve a given accuracy [4]. In more detail, they give randomized approximation methods for powerindices such as the Shapley value, which can be used for any simple coalitional game. They show that their approximationmethods approach the optimal, and give lower bounds for both deterministic and randomized approaches to computingpower indices.The MLE approximation method proposed by Owen [24] works as follows. Consider player i. Let T i be a coalition suchthat T i is losing, but T i ∪ {i} is winning. Then, as per Eq. (2), i’s Shapley value is:ϕi =(cid:4)T i|T i|!(n − |T i| − 1)!n!.Eq. (3) for the Shapley value can be rewritten by noting that the term inside the summation is a beta function:B(t + 1, n − t) = t!(n − t − 1)!n!1(cid:10)=xt(1 − x)n−t−1 dx,0(3)(4)where t = |T i| is the number of players in T i . The integrand on the right-hand side of Eq. (4), xt(1 − x)n−t−1, can be inter-preted as the probability that the random subset T i appears, when x is the probability that any member joins T i , assumedj ∈ N − {i}. Summing this expression over all swings gives the probability of aconstant and independent for all players j,swing for i. Call this probability f i(x):(cid:4)f i(x) =xt(1 − x)n−t−1.T iIntegrating x out of Eq. (4) gives the Shapley value, because substituting Eq. (4) in Eq. (3) gives:ϕi =1(cid:10)(cid:4)T i0xt(1 − x)n−t−1 dx =1(cid:10)(cid:11)(cid:4)0T i(cid:12)1(cid:10)xt(1 − x)n−t−1dx =f i(x) dx.0(5)(6)Thus, the Shapley value can be evaluated by integrating f i(x). But as per Eq. (5), this requires evaluating a function whosesize doubles every time a new player is added. Obviously, this method has exponential time complexity. In order to over-come this problem, Owen approximated f i(x) as follows. Assuming that each player votes in the same way as i with(7)(8)S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–16991679probability x, independently of others, a random variable v i(x) is defined that counts the number of votes cast by others onthe same side as i. Its mean ( ¯μi ) and variance ( ¯νi ) are:(cid:2)(cid:2)(cid:3)¯μi(x) = E(cid:3)v i(x)= xwN − {i}= xw(N) − xw iand¯νi(x) = Var(cid:2)(cid:3)v i(x)= x(1 − x)h(cid:2)(cid:3)N − {i}= x(1 − x)h(N) − x(1 − x)w 2i ,where h(T ) =(cid:7)i∈T w 2iis the sum of squared weights.In large games with many small weights and no large weights, v i(x) will be approximately normally distributed, and thedesired swing probability:(cid:13)q − w i (cid:3) v i(x) < qf i(x) = Pr(cid:14)can be obtained approximately using the normal distribution function N (.) as follows:q − ¯μi(x) − w i¯νi(x)q − ¯μi(x)¯νi(x)f i(x) ≈ N− N(cid:11)(cid:11)(cid:12)(cid:12).(9)(10)The advantage of this method is its linear time complexity.The modified MLE method [19] is an extension of the above described MLE method that trades-off computational timein order to improve the error of approximation. In more detail, the modified MLE method combines the essential featuresof direct enumeration and MLE in order to improve the accuracy of the MLE method. Specifically, the players are dividedinto two subsets: major players with large weights L = {1, 2, . . . , l}, and minor players N − L. This combined method treatsthe major players using enumeration as in the direct approach, but treats minor players using Owen’s MLE approximationtechnique. Large values of l will improve accuracy, but will also increase computation time. The advantage of this methodis that it generates a better approximation than Owen’s MLE method, but its disadvantage is that it has exponential timecomplexity: O(2l).Finally, an approximation method was proposed by Zlotkin and Rosenschein [39]. This is a random permutation mechanismwhere the players choose a random permutation and form the full coalition, one player after another, according to thechosen permutation. Here each player gets a utility equal to its contribution to the coalition at the time of joining it. Ifeach permutation has equal chance of being chosen, then this mechanism gives each player an expected utility equal toits Shapley value. This method requires the players to agree on an all-or-nothing deal. The advantage of this method is itslinear time complexity. However, for weighted voting games, getting the players to agree on an all-or-nothing deal may bean issue because, for these games, there is only one swing player for each possible coalition. So only one player gets a utilityof one and all others get zero utility.In summary, the existing literature on methods for finding the Shapley value have two key drawbacks. First, it only de-scribes methods for finding an approximate Shapley value, but there is no associated error analysis available. Second, noneof these methods can easily be extended to the generalized k-majority game. In order to overcome these drawbacks, wepresent new approximation methods for both weighted voting games and k-majority games. These methods are computa-tionally efficient and have polynomial time complexity. Furthermore, we provide a comprehensive error analysis in terms oftheir worst and average case performance.4. A new method for the approximate Shapley valueThis section details the main contribution of the paper, namely a new method for finding the approximate Shapley value.As already stated, our approach is based on randomized algorithms, which are one of the most commonly used approachesfor finding approximate solutions to problems whose exact solutions are hard to compute. In short, these algorithms trade-off accuracy for computational time. More specifically, a randomized algorithm is one that, during some of its steps, makesrandom choices [3]. Moreover, since such algorithms generate approximate solutions, their performance is typically evalu-ated in terms of two criteria [3]: their time complexity and their error of approximation (i.e., the difference between theexact solution and its approximation).Against this background, we present a new randomized algorithm for finding the approximate Shapley value for aweighted voting game. We then extend this method to k-majority games. Finally, we evaluate the approximation errorfor these algorithms; both theoretically to obtain an upper bound (in Section 5) and experimentally in order to obtain amore typical average case (in Section 6).4.1. For a weighted voting gameThe intuition behind the proposed method is as follows. As per Definition 1, in order to find a player’s Shapley value,we first need to find its marginal contribution to all possible coalitions. For n players, there are 2n−1 possible coalitions.1680S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–1699Finding a player’s marginal contribution to each of these 2n−1 possible coalitions is computationally infeasible. So we donot attempt to find the marginal contribution to each possible coalition. Rather, we consider n random coalitions. The firstcoalition is of size one, the second is of size two, and so on. We find a player’s approximate marginal contribution to each ofthese n coalitions. The average of all these marginal contributions gives the player’s approximate Shapley value. Theorem 1characterizes a player’s approximate marginal contribution to a random coalition of size X , and Theorem 2 characterizes itsapproximate Shapley value.In what follows, ϕi ( ¯ϕi ) denotes the exact (approximate) Shapley value for player i for a weighted voting game. Also, theapproximate marginal contribution of player i to a random coalition of size X is denoted E(cid:3) Xi .Theorem 1. For an n player weighted voting game with mean weight μ and variance ν, player i’s approximate marginal contribution(E(cid:3) Xi ) to a random coalition of size X (1 (cid:3) X (cid:3) n) is:b(cid:10)E(cid:3) Xi=1√(2πν/ X)(x−μ)22ν− Xeadx,(11)where a = (q − w i)/ X , b = (q − (cid:6))/ X , and w i is player i’s weight.Proof. To find a player’s approximate marginal contribution to a random coalition, we use the following rule from samplingtheory. Let the players’ weights in N be denoted w 1, w 2, . . . , wn. Irrespective of how these weights are distributed, let themean weight be μ and the variance ν. From this set (N) if we randomly draw a sample coalition, then the mean of theplayers’ weights in the sample coalition is given by the following rule [15]:R1: If w 1, w 2, . . . , w X is a random sample of size X drawn from ‘any distribution’ with mean μ and variance ν, then theX (the larger thei=1 w i ) has an approximate Normal distribution, N , with mean μ and variance ν(cid:7)Xsample mean (i.e., 1XX the better the approximation3).From Section 2.2, we know that for a weighted voting game, the marginal contribution of player i to a random coalitionof size X is one if the total weight of the X players in the coalition is greater than or equal to q − w i but less than q − (cid:6)(where (cid:6) is an infinitesimally small quantity). Otherwise, its marginal contribution is zero. Thus, the approximate marginalcontribution of player i to a random coalition is the area under the curve defined by N (μ, νX ) in the interval [a, b] wherea = (q − w i)/ X and b = (q − (cid:6))/ X . This area is shown as the region B in Fig. 1 (the dotted line in the figure is μ—the meanof the weights for a coalition of size X ). If the mean weight in a coalition of size X is a, then the sum of weights of thecoalition is q − w i . Likewise, if the mean weight of a coalition of size X is b, then the sum of weights of the coalition isq − (cid:6). Hence, i’s approximate marginal contribution to X is:E(cid:3) Xi=1√(2πν/ X)b(cid:10)a− Xe(x−μ)22νdx.(cid:2)Note that, in order to find E(cid:3) Xi , we do not actually draw sample coalitions. Rather, we use rule R1 to find the probabilitydistribution (i.e., normal), the mean (i.e., μ), and the error (i.e., ν/ X ) in the approximate weight in a random coalition ofFig. 1. A normal distribution for the players’ weights in a coalition of size X .3 Also, for large X , any measurement done on a sample drawn with replacement is the same as that for a sample drawn without replacement [15].S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–16991681size X . The advantage of not having to draw samples will be explained in detail after presenting our method for finding anapproximate Shapley value.We now formulate the approximate Shapley value of player i in terms of its marginal contribution. This is done inTheorem 2.Theorem 2. For an n player weighted voting game, player i’s approximate Shapley value is:¯ϕi = 1nn(cid:4)X=1E(cid:3) X−1i,where E(cid:3) Xiis as defined in Theorem 1.(12)Proof. Consider player i. In order to find i’s Shapley value, we must consider all possible ways in which i can join in acoalition. For a game of n players, i can join a coalition as the X th member where 1 (cid:3) X (cid:3) n. If i joins as the X th member,there are X − 1 players that precede it. Then i joins and then the remaining n − X players join in. From Section 2.2, we knowthat the value of a coalition for a weighted voting game depends on the sum of weights of the players in the coalition. Inother words, this value does not depend on the order in which the players joined the coalition. It follows that i’s marginalcontribution to the coalition of X − 1 players that precede it depends on the weights of these players and not on the orderin which they formed a coalition. Also, according to rule R1, the approximate weight in a random coalition of size X − 1depends on the coalition size X − 1 and not on the actual players in it. Consequently, E(cid:3) X−1also depends only on X .Now, there are P (n − 1, X − 1) possible coalitions of X − 1 players (where P (n − 1, X − 1) denotes the number ofpermutations of X − 1 players drawn from the set of n − 1 players excluding player i) that precede i. Also, the remainingn − X players that join after i can do so in (n − X)! ways. Thus, there are P (n − 1, X − 1) × (n − X)! possible coalitions wherei joins as the X th member. Since i’s approximate marginal contribution to a random coalition of size X − 1 is E(cid:3) X−1, itstotal marginal contribution to all possible coalitions where i joins a the X th member is P (n − 1, X − 1)(n − X)!E(cid:3) X−1this, i’s approximate total marginal contribution to all possible coalitions (i.e., for all possible values of X ) isX − 1)(n − X)!E(cid:3) X−1ipossible coalitions (see Definition 1) is:. GivenX=1 P (n − 1,. It follows that i’s approximate Shapley value, which is its average marginal contribution to all n!(cid:7)niii¯ϕi = 1n!n(cid:4)X=1P (n − 1, X − 1)(n − X)!E(cid:3) X−1i= (n − 1)!n!n(cid:4)X=1E(cid:3) X−1i= 1nn(cid:4)X=1E(cid:3) X−1i.(cid:2)Having got the approximate Shapley value, we are now ready to present this computation in Algorithm 1. In moredetail, Step 1 does the initialization. In Step 2, we vary X between 0 and n − 1 and repeatedly do the following. Playeri’s approximate marginal contribution to a random coalition of size X is found in Step 4. Step 5 finds the sum of these nmarginal contributions. The average of these marginal contributions is found in Step 7—and this is an approximate Shapleyvalue for player i.The key advantages of the method used in Algorithm 1 are as follows. First, it does not require making measurementson randomly drawn samples. This is because our method is based on R1 which gives an approximate distribution for theweights in a random coalition. Contrast our method with that of Mann and Shapley [20,21] which estimates an approximateShapley value by making measurements on randomly drawn samples. The key disadvantage of actually drawing samples isthat the estimate depends on how the samples are drawn; if we change the way in which samples are drawn, then theestimate changes. The method we propose is independent of any such details because it does not require the actual drawingof samples. The second advantage of our method is that it only requires the number of players, the quota, the mean weights,and the variance in the weights—the weights of the individual players are not needed. The third advantage of our methodis that it can easily be extended to k-majority games. Having detailed the algorithm, we now consider its complexity.n: Number of playersq: Quota for the gameμ: Mean weight of the players in Nν: Variance in the weights of the players in Nw i : Player i’s weight1: T i ⇐ 02: for X = 0 to n − 1 do3:a ⇐ (q − w i )/ X; b ⇐ (q − (cid:6))/ X(cid:15)bE(cid:3) Xa e2Πν/ XiT i ⇐ T i + E(cid:3) Xi⇐ 1√2ν dx(x−μ)2−X4:5:6: end for7:8: return ¯ϕi¯ϕi ⇐ T i /nAlgorithm 1. ShapleyValueWVG(n, q, μ, ν, w i ).1682S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–1699Theorem 3. For a game of n players, the time complexity of computing a player’s approximate Shapley value ( ¯ϕi) using Algorithm 1 isO(n).Proof. From Eq. (11), we know that E(cid:3) Xmust be computed ntimes. This is done in the for loop of Step 2 in Algorithm 1. Since this for loop is repeated n times, the time complexity ofcomputing a player’s approximate Shapley value ( ¯ϕi ) using Algorithm 1 is O(n). (cid:2)i can be found in constant time. As per Eq. (12), E(cid:3) X−1i4.2. For a k-majority gameWe now extend the method described in Algorithm 1 to k-majority games. The intuition behind the proposed method isas follows. As described in Section 2.3, a k-majority game is defined in terms of k weighted voting games v g (1 (cid:3) g (cid:3) k). Sowe first find a player’s approximate marginal contribution to v g (1 (cid:3) g (cid:3) k). Given these k marginal contributions, we findthe marginal contribution and then the Shapley value for a k-majority game. Before doing so, we introduce some notation.For game v g , let μg denote the mean weight of the players, ν g the variance in their weights, and q g the quota. Fori (S X ) denote the probability that the coalition S X is losing but S X ∪ {i} is winning. And, fori (S X ) denote the probability that the coalition S X ∪ {i} is winning. Also, for a k-majority game, let kE(cid:3) Xii ) denote thegame v g and player i, let PLgame v g , let PWdenote the approximate marginal contribution of player i to a random coalition S X of size X . Finally, let ϕkexact (approximate) Shapley value for player i for a k-majority game.i ( ¯ϕkggTheorem 4 characterizes a player’s approximate marginal contribution, and Theorem 5 a player’s approximate Shapleyvalue.Theorem 4. For an n player k-majority game with mean weight μg and variance ν g (1 (cid:3) g (cid:3) k), player i’s approximate marginalcontribution (kE(cid:3) Xi ) to a random coalition S X of size X is:(cid:16)(cid:2)1 − PL(cid:3)gi (S X )× PLj+1i(S X ) ×k(cid:17)f = j+2kE(cid:3) Xi=k−1(cid:4)j(cid:17)j=0g=1whereandPLgi (S X ) =1√(2πν g / X)(qg −(cid:6))/ X(cid:10)(qg −wgi )/ X− Xe(x−μg )22ν gdxPWgi (S X ) =1√(2πν g/ X)∞(cid:10)− Xe(x−μg )22ν gdx.(qg −wgi )/ X(cid:18)PWfi (S X ),(13)(14)(15)Proof. Consider player i. From Section 2.3, we know that the approximate marginal contribution of player i to a coalitionS X for the game v 1 ∧ · · · ∧ vk is 1 if the following conditions hold:(1) there is at least one game v g (1 (cid:3) g (cid:3) k) for which i is the swing player, and(2) for each game v g (1 (cid:3) g (cid:3) k), the value of S X ∪ {i} is 1.We find the probabilities PLdistribution N(μg, ν g/ X) between the limits (q g − wi using the sampling rule R1. As per this rule, PLi )/ X and (q g − (cid:6))/ X :gi and PWgggi (S X ) is the area under the normalPLgi (S X ) =1√(2πν g / X)(qg −(cid:6))/ X(cid:10)(qg −wgi )/ X− Xe(x−μg )22ν gdx.And PWgi (S X ) is the area under the normal distribution N(μg, ν g/ X) between the limits (q g − wgi )/ X and ∞:PWgi (S X ) =1√(2πν g/ X)∞(cid:10)− Xe(x−μg )22ν gdx.(qg −wgi )/ X(16)(17)S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–16991683i by considering all possible ways in which i can be swing player. For 0 (cid:3) j (cid:3) k − 1,Given Eqs. (16) and (17), we find kE(cid:3) Xthe probability that i is not swing player for games 1 to j, it is swing player for game j + 1, and may or may not be swingplayer for games j + 2 to k is:(cid:2)1 − PL(cid:3)gi (S X )× PLj+1i(S X ) ×j(cid:17)g=1k(cid:17)f = j+2PWfi (S X ).By summing the above expression over all possible j (i.e., between zero and k − 1) we get i’s approximate marginal contri-bution given in Eq. (13). (cid:2)We now formulate an approximate Shapley value for player i in terms of its marginal contribution. This is done inTheorem 5.Theorem 5. For an n player k-majority game with mean weight μg and variance ν g (1 (cid:3) g (cid:3) k), player i’s approximate Shapley valueis:¯ϕki= 1nn(cid:4)X=1kE(cid:3) X−1i,where kE(cid:3) Xiis as defined in Theorem 4.Proof. As Theorem 2. (cid:2)(18)The steps for computing ¯ϕki are detailed in Algorithm 2. The time complexity of this method is formulated in Theorem 6.Theorem 6. The time complexity of Algorithm 2 is O(k2n).Proof. The time to execute the for loop in Step 4 of Algorithm 2 is O(k2). Since this for loop is within the for loop of Step 2(which is executed n times), the time complexity of Algorithm 2 is O(k2n). (cid:2)As already noted, the quality of an approximation method is evaluated on the basis of both its running time and itsapproximation error. To this end, we will now provide a comprehensive error analysis. This is done in three steps. First, wek: The number of weighted voting gamesn: Number of playersq: A k-element vector containing the quotas for the gamesμ: A k-element vector containing the mean weight of the players for the k gamesν: A k-element vector containing the variance in the weights of the players for the k gamesw i : A k-element vector containing player i’s weight for the k gamessum ⇐ 0for j = 0 to k − 1 do1: T i ⇐ 0;2: for X = 0 to n − 1 do3:4:5:6:7:prod ⇐ 1for g = 1 to j doa ⇐ (q g − wgprod ⇐ prod ×(cid:11)i )/ X ; b ⇐ (q g − (cid:6))/ X(cid:15)1√b(cid:19)a e21 −ν g / X−X(x−μg )22ν g(cid:12)dxend fora ⇐ (q j+1 − wj+1i1√prod ⇐ prod ×(cid:19)2for f = j + 2 to k do)/ X ; b ⇐ (q j+1 − (cid:6))/ X(cid:15)(x−μ j+1 )2b2ν j+1a e−Xν j+1/ Xdxa ⇐ (q f − wprod ⇐ prod ×fi )/ X ; b ⇐ ∞1√(cid:19)2ν f / X(cid:15)ba e−X(x−μ f )22ν fdx8:9:10:11:12:13:14:end forsum ⇐ sum + prodend for⇐ sumkE(cid:3) XiT i ⇐ T i + E(cid:3) Xi15:16:17:18:19:20: end for¯ϕk21:i22: return ¯ϕki⇐ T i /nAlgorithm 2. ShapleyValue-KMG(k, n, q, μ, ν, w i ).1684S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–1699analytically find the upper bound on the error. This upper bound gives an indication of how our method performs in theworst case. Second, we provide an experimental analysis of the error in the general case. Third, we experimentally comparethe error for our method with that for Owen’s. In the following section, we first derive the formulae for error and carry outits worst case analysis for the methods proposed in Algorithms 1 and 2.5. Worst case analysis of the approximation errorWe first formalize the idea of error and then derive the formula for measuring it. The concept of error relates to anapproximate measurement made of a quantity which has an exact value [7,36]. Obviously, it cannot be determined exactlyhow far off an approximation is from the exact value; if this could be done, it would be possible to just give the moreaccurate, corrected value. Thus, error has to do with uncertainty (i.e., variance or standard error) in measurements thatnothing can be done about. If a measurement is repeated, the values obtained may differ and none of the results can bepreferred over the others. However, although it is not possible to do anything about such an error, it can be characterizedin terms of two essential components [7,36]:(1) a numerical value giving the best “estimate” possible of the quantity measured, and(2) an error, i.e., the degree of uncertainty or variance associated with this estimated value.For example, if the approximate measurement of a given quantity is x and the approximation error is e(x), the quantitywould lie in the interval x ± e(x). For sampling based experiments, approximation error is defined as follows [36]:Definition 2. The approximation error (i.e., sampling error) in a set of measurements on random samples is the standarddeviation for the set of measurements divided by the square root of the number of measurements.Since the exact value that corresponds to an approximation lies in the range x ± e(x), the term standard error is analogousto the algorithmic term absolute error which is defined as follows [3]:Definition 3. The absolute error of an approximation is the absolute difference between the approximate and its exactcounterpart.The following section defines this error and uses it to evaluate the performance of the proposed randomized method.We first find this error for a weighted voting game and the k-majority game. Then we find the upper bound on these errors.5.1. Absolute errorWe first consider our approximation method for the weighted voting game. The error for this method depends on theerror in the approximation rule R1 defined in the proof for Theorem 1. This error is defined as follows [7,36]:Definition 4. For rule R1, the absolute error (e(σ X )) in a player’s weight in a coalition S X of size X is:e(σ X ) =(cid:20)(ν/ X)/(cid:20)( X) =(cid:20)(ν)/ X.(19)On the basis of Definition 4, we find the absolute error in a player’s approximate marginal contribution (e(E(cid:3) Xi )) and itsapproximate Shapley value (e( ¯ϕi)).Theorem 7. For an n player weighted voting game with mean weight μ and variance ν, the absolute error in E((cid:3) Xits exact counterpart (denoted (cid:3) Xi ) with respect toi ) is:(cid:3)(cid:2)eE(cid:3) Xi(cid:2)= absE((cid:3) Xi ) − (cid:3) Xi(cid:3)=1√(2πν/ X)×(cid:16)a(cid:10)a−e(σ X )− X(x−μ)22νedx +(cid:18)− X(x−μ)22νdx,b+e(σ X )(cid:10)eb(20)where a = (q − w i)/ X and b = (q − (cid:6))/ X .Proof. See Appendix B. (cid:2)On the basis of the e(E(cid:3) Xi ), Theorem 8 characterizes the absolute error in the Shapley value for player i.S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–16991685Theorem 8. For an n player weighted voting game, if ¯ϕi denotes player i’s approximate Shapley value that corresponds to the exact ϕi ,then the absolute error of ¯ϕi with respect to ϕi is:e( ¯ϕi) = abs(ϕi − ¯ϕi) = 1n(cid:2)eE(cid:3) X−1i(cid:3).n(cid:4)X=1Proof. See Appendix C. (cid:2)Given Theorem 8, the percentage error, PEi , in player i’s Shapley value for a weighted voting game is:PEi = 100 × e( ¯ϕi)/ϕi.(21)(22)On the basis of Theorem 8, we now obtain the error for our approximation method for a k-majority game. Let e(σ Xg )gi (S X )) denote the errors ini ) in Theorem 7.be the error in the approximate weight of players in S X for game g. Let e(PLgi (S X ) and PWPLThus, we have:i (S X ), respectively.4 These two errors are obtained in the same way as we obtained e(E(cid:3) Xgi (S X )) and e(PWg(cid:2)PL(cid:3)gi (S X )e=1√(2πν g / X)(cid:16)(qg −w(cid:10)gi )/ X− Xe(x−μg )22ν gdx +(qg −(cid:6))/ X+e(σ Xg )(cid:10)− Xe(cid:18)(x−μg )22ν gdx(qg −wgi )/ X−e(σ Xg )(qg −(cid:6))/ Xand(cid:2)PWe(cid:3)gi (S X )=1√(2πν g/ X)(qg −w(cid:10)gi )/ X×(qg −wgi )/ X−e(σ Xg )− Xe(x−μg )22ν gdx.(23)(24)For a k-majority game, let e(kE(cid:3) Xe( ¯ϕki ) denote the absolute error in i’s Shapley value.i ) denote the absolute error in i’s marginal contribution to a random coalition S X , and leti denotes player i’s approximate Shapley value that corresponds to the exact (ϕki ),Theorem 9. For an n player k-majority game, if ¯ϕkthen the absolute error of ¯ϕki is:i with respect to ϕkn(cid:4)(cid:3)= 1neX=1i(cid:3)(cid:2)¯ϕkie= abs(cid:2)ϕki− ¯ϕki(cid:2)kE(cid:3) X−1(cid:3).(25)Proof. See Appendix D. (cid:2)Having formulated e( ¯ϕi) and e( ¯ϕki ), we now find the upper bound on these absolute errors.5.2. Upper bound for weighted voting gameTheorem 10 characterizes the upper bound for e( ¯ϕi).Theorem 10. For a weighted voting game of n players, the upper bound for the absolute error in the approximate Shapley value (e( ¯ϕi))is O(1/n). Also, as n → ∞, e( ¯ϕi) → 0.√Proof. See Appendix E. (cid:2)Theorem 10 shows that, as n increases, the upper bound on the error decreases (Fig. 2 shows how 1/n varies with n).This happens because as n increases, the error in Eq. (19) decreases and, consequently, the error in the Shapley valuedecreases with n.5√4 See Eqs. (16) and (17) for a definition of PL5 Note that we have found the bound for the absolute error for the Shapley value and this bound decreases with n. Here, it is interesting to note that arelated concept for characterizing the quality of an approximation is performance ratio. Roughly speaking, this is the ratio of an approximate solution andits exact counterpart [3]. The problem of approximating the Shapley value such that the approximation ratio is bounded by a constant is intractable unlessP = NP [13]. In future, it would be interesting to obtain a similar result for the absolute error as well.gi (S X ) and PWgi (S X ).1686S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–1699Fig. 2. Approximating sum ((cid:7)nX=11√X) with definite integral.5.3. Upper bound for k-majority gamesOn the basis of Theorem 10, we get the upper bound for the error for our randomized method for k-majority games.Theorem 11. For an n player k-majority game, the upper bound for e( ¯ϕki ) is O(k2/Proof. See Appendix F. (cid:2)√n). Also, as n → ∞, e( ¯ϕki ) → 0.Here the error increases in k because, as per the method described in Section 4.2, we make k approximate measurementson a random coalition of size X (1 (cid:3) X (cid:3) n). For a weighted voting game, k = 1 (see Section 4.1), so we make a singleapproximate measurement on a coalition of size X . As k increases, the number of approximate measurements also increasesand so does the error.6. Experimental analysis of approximation errorFor a weighted voting game, Theorem 10 gives the error in the worst case. However, in general, the error may well beless than this upper bound. Hence, we now focus on the general case and conduct an empirical analysis of the error for ourapproximation method. There are two objectives to this analysis:(1) To compare the error for our method with that of Owen’s.(2) To analyze the effect of the parameters of a voting game on the error for our method.We describe the former analysis in Section 6.2 and the latter in Section 6.3. For both, we focus on weighted votinggames and not k-majority games. There are two reasons for this. First, from Section 5, we know the effect of k on theapproximation error; e( ¯ϕki ) increases in k (see Eq. (D.1)). Given this, we nowwant to find how the parameters n, q, and μ affect the percentage error P E i (see Eq. (22)). The second reason for our focuson weighted voting games is that there are no pre-existing approximation methods for k-majority games. Hence, we canonly compare the performance of these existing methods with our method for weighted voting games.i ) increases with k. This is because e(kE(cid:3) XGiven this, Section 6.1 describes the notation and experimental setting for the results presented in Sections 6.2 and 6.3.6.1. Experimental settingWe evaluate the approximation error for a range of voting games. Let G denote the set of all the games we consider.These are defined as follows. Recall that a weighted voting game is defined in terms of the parameters n, q, and w i(1 (cid:3) i (cid:3) n). Also, recall that, for a given game, μ and ν denote the mean weight and the variance in weights, respectively.Given this, in what follows, we consider a range of games by varying n, q, and μ such that the variance, ν, is always closeto 1. In more detail, we vary the number of players between n = 20 (since approximation methods do not produce goodresults for games with a smaller number of players and, in any case, they are not necessary in such cases) and n = 70(since the method in [21] becomes extremely slow for games with a larger number of players). For 20 (cid:3) n (cid:3) 70, the players’weights are generated randomly in such a way that the variance in the weights is always between ν = 1 and ν = 1.5.Keeping the variance in this range, for each n, we generate a range of games by varying the mean weight between μ = 20and μ = 100. Thus, in all, we consider 54 different cases (varying n between 20 and 70 in increments of 10, and for each nvarying the mean weight between 20 and 100 in increments of 10).S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–16991687The players’ weights for the range of games for each of the 54 cases are shown in Figs. H.1 to H.6 in Appendix H. Forinstance, Fig. H.1(a) shows the player’s weights for a range of games with μ = 21.1 and ν = 1. Likewise, for other figures inthe appendix. For each of these 54 cases, we consider different games by varying the quota between q > nμ/2 (i.e., a halfmajority weighted voting game) and q > 2nμ/3 (i.e., a two thirds majority weighted voting game). Thus, we have a set ofgames for each of the 54 cases and G denotes the union of the sets of games for all the 54 cases).We now introduce some notation for describing our experimental results. Recall that ϕi denotes player i’s exact Shapleyvalue. As before, for player i, let ¯ϕi , e(ϕi), and PEi denote the approximate Shapley value, the absolute error of approxima-tion, and the percentage error respectively for our method. Analogously, let ¯ϕ Oi denote the approximateiShapley value, the absolute error, and the percentage error respectively for Owen’s method. Then we have:, e O (ϕi), and PEO(cid:2)ϕi − ¯ϕ Oi(cid:3)ande O (ϕi) = absPEOi= e O (ϕi) × 100/ϕi.For a game G ∈ G, the average percentage error across all the players for our method is:APEG = 1nn(cid:4)i=1PEi.For Owen’s method, APEOG is defined analogously.6.2. Comparison with Owen’s method(26)(27)(28)Recall that Owen’s method is defined in terms of a random variable given in Eqs. (7) and (8), while our method isdefined in terms of a random variable given by the rule R1. Here we want to determine how this difference in the methodsaffects their performance in terms of their approximation errors.For each game, G ∈ G, we compare the exact Shapley value for each player with its approximate Shapley value generatedby our method and by Owen’s MLE method. For each game, we find the percentage error in the Shapley value for eachplayer. Then, for each game, we find the average percentage error across all the players. Finally, for each n, we find theaverage percentage error across all the games.Having outlined the experimental setting and process, we now turn to the actual results. For all G ∈ G, APEG and APEOGare shown in Appendix G. This appendix is comprised of 6 figures: G.1 to G.6. Each of these 6 figures is, in turn, comprisedof 9 tables. Thus, in all there are 54 tables in Appendix G which correspond to the 54 cases mentioned Section 6.1. Eachrow of each table represents a game. Thus, G is the set of all the rows (i.e., games) in all the tables of Appendix G. Theresults of these 54 cases are shown Figs. G.1 to G.6 of Appendix G. The players’ weights for each of the 54 cases are shownin Figs. H.1 to H.6 in Appendix H. Thus, the player’s weights for Fig. G.1 are as given in Fig. H.1, for Fig. G.2 in Fig. H.2, andso on. For each game in Appendix G, the quota is given in the first column of the table, μ and ν are given at the top ofthe table, n is given at the bottom of the figure, and the players’ weights are given in Appendix H. Note that, the gamesrepresented in a given table differ only in terms of their quotas. But the players’ weights, n, μ, and ν are the same for allthe games in a given table. In more detail, for each table in Appendix G, there is a corresponding graph in Appendix H thatshows the players’ weights. For instance, for all the games in G.1, the players’ weights are as shown in H.1. Likewise, for thetables in G.2 to G.6, the players’ weights are shown in H.2 to H.6, respectively.Consider the table in G.1(a) by way of explanation. For this table, n = 20, μ = 21.1, ν = 1, and the players’ weights areas shown in Fig. H.1(a) in Appendix H. For these fixed values of n, μ, ν, and weights, the quota is varied between 220and 320. Likewise for each of the remaining figures in Appendix G. The last two columns of each table in Appendix G showa comparison of errors APEG and APEOG . For each n, we find the average percentage error (for our method) across all thegames in G:APEn = 1|Gn|(cid:4)G∈GnAPEG ,(29)where Gn ⊂ G denotes the set of games in G with n players. For Owen’s method, APEOn is defined analogously. For differentn, a comparison of APEn and APEOn is shown in Fig. 3. Recall that for our experiments, we vary the quota between q > nμ/2(i.e., a half majority weighted voting game) and q > 2nμ/3 (i.e., a two thirds majority weighted voting game). Thus, fora given n and a given μ, the percentage error shown in Fig. 3 is the average taken over this range of quotas. As seen inthe figure, for each n and each μ, the error for our method is no worse than that for Owen’s. These results show that, incomparison to Owen’s method, our’s performs better in terms of approximation error.6.3. Effect of the voting game parametersWe analyze the effect of ν, n, q, and w i on the approximation error for our method. The effect of ν on PEi is evident fromi ) (see Theorem 8),Eq. (22). As per this equation, PEi depends on the absolute error e( ¯ϕi ). The error e( ¯ϕi) depends on e(E(cid:3) X1688S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–1699Fig. 3. A comparison of the average percentage error (for our method and Owen’s) across all games with n players.which, in turn, depends on e(σ X ) (see Eq. (19)). As ν increases, e(σ X ) increases. As a result, e( ¯ϕi), and consequently PEiincreases.Now consider the effect of n on approximation error. The error in the weights of a random coalition of size X (i.e., e(σ X )given in Eq. (19)) decreases in X and so does the error e(E(cid:3) Xi ) (see Eq. (20)). Consequently PEi decreases in n.The effect of the other parameters (i.e., q and w i ) are not so immediately obvious from this equation for e( ¯ϕi). Hence,for these, we conduct an experimental analysis.• Effect of q. Recall from Section 4.1, that a = (q − w i)/ X and b = (q − (cid:6)) X . Thus, as q increases, both a and b increase.The error e(E(cid:3) Xi ) is either the area of A or the area of C in Fig. 1. As q increases, the three regions marked A, B, andC move to the right. As a result, e(E(cid:3) Xi ) may increase or decrease depending on the coalition size X . Whether e(E(cid:3) Xi )increases or decreases is not obvious from Eq. (20). Thus, we conduct an experimental analysis to determine the effectof q on PEi . The setting for these experiments is as follows. We fix n and ν, and vary μ between 20 and 100. For each μ,we consider a range of games with different q. Specifically, we vary q between nμ/2 (i.e., a half majority voting game)and 2nμ/3 (i.e., a two thirds majority voting game). For each game, we determine PEi (where 1 (cid:3) i (cid:3) n) and the average1PEi . We then split the set of all games into 1 (cid:3) j (cid:3) 4 classes with class j containing those gamespercentage error 1nfor which the quota lies in the range nμ/2 + nμ( j − 1)/24 to nμ/2 + nμ j/24. We then find the average percentageerror for the games in each class. We then repeated the above experiments for different n in the range 20 (cid:3) n (cid:3) 70.The effect of quota on the average percentage error was found to be the same for all n: the error decreased with q.The results of these experiments for n = 50 (corresponding to the data in the tables shown in Fig. G.4) are plotted inFig. 4(a).(cid:7)n• Effect of w i . Consider Eq. (20), for which the limits of integration depend on e(σ X ). These limits are a = (q − w i)/ Xand b = (q − (cid:6))/ X . As w i increases, a decreases but b remains unchanged. Also as w i increases, the area of region C(see Fig. 1) remains unchanged, the area of region B increases, and the area of region A may increase or decrease. Therelation between this change in the areas A and B is again not obvious from the equations. Hence, we computed e( ¯ϕi)for each voting game G ∈ G. For each game, the error PEi was found to increase with abs(μ − w i). Consequently, fora given n, APEn also increases with abs(μ − w i). The results of experiments for n = 30, μ = 22.33, and ν = 0.96 areplotted in Fig. 4(b). For these fixed values of n, μ, and ν, and a range of different quotas, the figure shows how PEivaries with w i .This analysis gives us the following key insights. First, as the number of players (n) increases, the average percentageerror decreases. Second, as the quota (q) increases, the average percentage error decreases. Third, the error is different forplayers with different weights; players with weight closer to the mean weight (μ) have a lower error than those withweight further away from μ.S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–16991689Fig. 4. The effect of the parameters of a voting game on the average percentage error.7. Conclusions and future workThe main advantage of the Shapley value as a solution concept in cooperative games is that it provides a solutionthat is both unique and fair. However the problem of finding this value for the voting game is #p-complete. In order toovercome this computational complexity, we presented a new approximation algorithm for computing the Shapley value fora weighted voting game. Like the current state of the art, our method has linear time complexity, but it is better in terms ofits approximation error. We also empirically evaluated the error for our method and showed how the different parametersof a voting game affect it. Specifically, we showed the following effects. First, as the number of players in a voting gameincreases, the average percentage error across the players decreases. Second, as the quota increases, the average percentageerror decreases. Third, the error is different for players with different weights; players with weight closer to the meanweight have a lower error than those with weight further away. We then extended our approximation method to the moregeneral k-majority voting game and showed that, for n players, the method has time complexity O(k2n) and the upperbound on its approximation error is O(k2/n).√The results are important because by devising a computationally efficient approximation method, that has a high degreeof accuracy, we make it more attractive to use the Shapley value as the basis for computing solutions in a range of practicalcontexts. In particular, coalition formation techniques lie at the heart of virtual organizations, collective robotics, and agentteams. Thus, by providing such an algorithm, we start to open up the possibility of applying the principle approaches ofcooperative game theory to such practical problems.There are several interesting directions for future work. First, this work extended our approximation method for weightedvoting games [14] to k-majority games. In future, we would like to generalize our method so that it works not just for thevoting game, but also for other coalitional games. Second, although we found the upper bound on the approximation errorfor our method, it would be interesting to determine whether or not it is possible to find an approximate Shapley valuein linear time, but with a better error bound. Third, the accuracy of our approximation method can be improved at theexpense of computation time (using an approach similar to the MLE extension method). Thus, we would like to investigatehow much time needs to be traded off in order to arrive at a more accurate result and whether an agent could make thistrade-off at run-time in order to reflect its current goals and available resources.AcknowledgementsWe are very grateful to the anonymous reviewers of this paper. Their insightful and informative comments helped hasto substantially improve the technical content and presentation of the paper.Appendix A. A summary of notationNnN−iqSSsThe set of playersNumber of players in NThe set of players excluding player iQuota for a gameA subset of NThe set N − {i} where i ∈ NNumber of players in S1690S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–1699v(S)w iw(S)(cid:3)i v(S)ϕiT itμνE(cid:3) XikE(cid:3) Xiϕki¯ϕi¯ϕkigPLThe value of coalition SThe weight of player iThe weight of coalition SThe marginal contribution of player i to coalition SThe exact Shapley value for player i for a weighted voting gameA coalition such that T i is losing but T i ∪ {i} is winningThe number of players in T iThe mean weight of playersThe variance in players’ weightsThe approximate marginal contribution of player i to coalition X for a weighted voting gameThe approximate marginal contribution of player i to coalition X for a k-majority gameThe exact Shapley value for player i for a k-majority gameApproximate Shapley value (for player i) generated by the proposed method for a weighted voting gameApproximate Shapley value (for player i) generated by the proposed method for a k-majority gamegAbsolute error in the sum of weights of a random coalition S X of size Xi (S X ) For game v g and player i, the probability that the coalition S X is losing but S X ∪ {i} is winningi (S X ) For game v g , the probability that the coalition S X ∪ {i} is winningi ) Absolute error in i’s marginal contribution to coalition S X for a weighted voting gamei ) Absolute error in i’s marginal contribution to coalition S X for a k-majority gamePWe(σ X )e(E(cid:3) Xe(kE(cid:3) X¯ϕ Oie(ϕi)e O (ϕi) Absolute error in i’s approximate Shapley value generated by Owen’s method for a weighted voting gamePEiPEOiGPlayer i’s approximate Shapley value generated by Owen’s method for a weighted voting gameAbsolute error in i’s approximate Shapley value generated by the proposed method for a weighted voting gamePercentage error in i’s approximate Shapley value generated by the proposed method for a weighted voting gamePercentage error in i’s approximate Shapley value generated by Owen’s method for a weighted voting gameThe set of all games on which the experiments are conductedAn element of the set GAverage percentage error in the approximate Shapley value generated by the proposed method for a weightedvoting game; the average is taken over all the players in N for the game GAverage percentage error in the approximate Shapley value generated by Owen’s method for a weighted votinggame; the average is taken over all the players in N for the game GAverage percentage error in the approximate Shapley value generated by the proposed method for a weightedvoting game; the average is taken over all the players over all the games in G for which there are n playersAverage percentage error in the approximate Shapley value generated by Owen’s method for a weighted votinggame; the average is taken over all the players over all the games in G for which there are n playersGAPEGAPEOGAPEnAPEOnAppendix B. Proof of Theorem 7The error (e(E(cid:3) Xi )) is obtained by propagating the error in Eq. (19) to the error in a player’s approximate marginalcontribution given in Eq. (11). In this equation, a and b are the lower and upper limits for the approximate mean of theplayers’ weights for a coalition of size X . Since the error in this mean is e(σ X ), the actual values of a and b lie in theintervals a ± e(σ X ) and b ± e(σ X ), respectively. Hence, the error in Eq. (11) is either the probability that the mean weightlies between the limits a − e(σ X ) and a (i.e., the area under the curve defined by N (μ, νX ) between a − e(σ X ) and a, whichis the region A in Fig. 1) or the probability that the mean weight lies between the limits b and b + e(σ X ) (i.e., the areaunder the curve defined by N (μ, νThe area of region A in Fig. 1 is:X ) between b and b + e(σ X ), which is the region C in Fig. 1).1√(2πν/ X)a(cid:10)×a−e(σ X )− Xe(x−μ)22νdxand that of C is:1√(2πν/ X)×b+e(σ X )(cid:10)− Xe(x−μ)22νdx.bMore specifically, the error e(E(cid:3) Xi ) is at most the sum of the two areas A and C .S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–16991691Appendix C. Proof of Theorem 8We obtain the error e( ¯ϕi) by propagating the error e(E(cid:3) X−1) to all coalitions between size X = 1 to X = n. This isidone using the following error propagation rules [36]. Let x and y be two random variables with errors e(x) and e( y),respectively. Then, from [36] we have the following propagation rules:R2 The error in the random variable z = x + y is:e(z) = e(x) + e( y).R3 If z = kx where the constant k has no error, then the error in z is:e(z) = |k|e(x).R4 The error in the random variable z = x × y is:e(z) = e(x) + e( y).Note that for X = 1 (i.e., player i is the first member of a coalition), e(E(cid:3) X−1) = 0 since we know that a one playercoalition can never win and i’s marginal contribution to such a coalition is therefore known to be zero. Also, recall fromTheorem 2, that a player’s approximate Shapley value is the average of its approximate marginal contributions to coalitionsof size 1 (cid:3) X (cid:3) n. Hence, as per rules R2, R3, and R4, the absolute error (e( ¯ϕi)) is the average of the approximation errorse(E(cid:3) X−1) for all coalitions between the sizes X = 1 and X = n.iiAppendix D. Proof of Theorem 9We obtain the error e( ¯ϕki ) by propagating the error e(kE(cid:3) X−1ie(kE(cid:3) Xi ) is obtained using the error propagation rules R2, R3 and R4:) to all coalitions between size X = 1 to X = n. The error(cid:3)(cid:2)kE(cid:3) Xie=(cid:16)k−1(cid:4)j(cid:4)j=0g=1(cid:2)(cid:2)eP L(cid:3)(cid:3)gi (S X )(cid:2)+ eP Lj+1i(cid:3)(S X )+(cid:18)(cid:3)fi (S X ).k(cid:4)(cid:2)eP Wf = j+2(D.1)Given Eq. (D.1) and the fact that player i’s approximate Shapley value is the average of its approximate marginal contributionto coalitions between size X = 1 and X = n, we get(cid:3)(cid:2)¯ϕkie= 1nn(cid:4)X=1(cid:2)kE(cid:3) X−1i(cid:3).eAppendix E. Proof of Theorem 10We find a bound for the error in Shapley value by finding a bound for Eq. (20). A bound for Eq. (20) is found by firstfinding a bound for1√(2π ν/ X)×(cid:15)aa−e(σ X ) e− X(x−μ)22ν dx and then for1√(2π ν/ X)×(cid:15)b+e(σ X )b− Xe(x−μ)22ν dx and then summing themboth. In order to obtain a bound on1√(2π ν/ X)×(cid:15)aa−e(σ X ) e− X(x−μ)22ν dx we use the following rule from [37]:On some interval [¯a, ¯b], suppose that functions ¯f and ¯g are integrable, ¯g never changes sign, and m (cid:3) ¯f (x) (cid:3) M. Then¯b(cid:10)m¯g(x) dx (cid:3)¯a¯b(cid:10)¯a¯f (x) ¯g(x) dx (cid:3) M¯b(cid:10)¯a¯g(x) dx.We use this result to find the bound for e( ¯ϕi) as follows. Let h = e(σ X ), ¯g(x) = 1, ¯f (x) = e, and M = eThis gives¯g(x) dx = h, m = e(a−h−μ)22ν(a−μ)22ν− X− X. Then using the above rule from [37], we get:− X(x−μ)22ν, ¯a = a − h, and ¯b = a.(cid:15)aa−ha(cid:10)a−e(σ X )− Xe(x−μ)22νdx (cid:3) he− X(a−h−μ)22ν.(E.1)1692S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–1699Since the upper bound for e− X(a−h−μ)22νis 1, we get:a(cid:10)a−e(σ X )− Xe(x−μ)22ν dx (cid:3) h (cid:3) e(σ X ).Also, from Eq. (19), we know that e(σ X ) =√√(ν/ X)/( X). Hence, Eq. (E.2) can be rewritten as:− Xe(x−μ)22νdx (cid:3)(cid:20)(ν)/ X.a(cid:10)a−e(σ X )It follows that1√(2πν/ X)a(cid:10)a−e(σ X )− Xe(x−μ)22νdx (cid:3)1√(2π X).In the same way we get1√(2πν/ X)×b+e(σ X )(cid:10)− Xeb(x−μ)22νdx (cid:3)1√(2π X).From Eqs. (20), (E.4), and (E.5) we get:(cid:2)eE(cid:3) Xi(cid:3)(cid:3)2√(2π X).(E.2)(E.3)(E.4)(E.5)(E.6)Recall that e(E(cid:3) X−1as:i) = 0 for X = 1. Given this and Eqs. (21) and (E.6), we get the bound for the error in Shapley valuee( ¯ϕi) (cid:3) 1nn−1(cid:4)X=12√(2π X)(cid:3)√n2(2π )n−1(cid:4)X=11√( X).Approximating summation with definite integral [11], we get the bound for(cid:7)nX=11√Xas follows (see Fig. 2):n(cid:4)X=11√X(cid:3)n(cid:10)01√x√dx (cid:3) 2n.Substituting Eq. (E.8) in Eq. (E.7), we get:(cid:21)e( ¯ϕi) (cid:3) 22nπ.In other words, e( ¯ϕi) = O(1/√n). Also, from Eq. (E.9), it follows that as n → ∞, e( ¯ϕi) → 0.(E.7)(E.8)(E.9)S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–16991693Appendix F. Proof of Theorem 11From Eqs. (23), (E.4), and (E.5), we get(cid:2)eP L(cid:3)gi (S X )(cid:3)2√(2π X).And from Eqs. (24), (E.4), and (E.5), we get(cid:2)(cid:3)P W g(S X )e(cid:3)1√(2π X).Substituting these two inequalities in Eq. (D.1), we get:(cid:3)(cid:2)kE(cid:3) Xie(cid:3) 2k2√(2π X).Substituting Eq. (F.1) in Eq. (25), we get:(cid:3)(cid:2)¯ϕkie(cid:3) 2k2(cid:21)2nπ.Therefore, e( ¯ϕki ) = O(k2/√n). It also follows that as n → ∞, e( ¯ϕki ) → 0.(F.1)(F.2)Appendix G. Experimental resultsResults of experiments: a comparison of the error for our method and that for Owen’s for the 54 cases mentioned inSection 6.2.Fig. G.1. A comparison of the average percentage errors for games with 20 players.1694S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–1699Fig. G.2. A comparison of the average percentage errors for games with n = 30 players.Fig. G.3. A comparison of the average percentage error for games with n = 40 players.S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–16991695Fig. G.4. A comparison of the average percentage errors for games with n = 50 players.Fig. G.5. A comparison of the average percentage errors for games with n = 60 players.1696S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–1699Fig. G.6. A comparison of the average percentage errors for games with n = 70 players.Appendix H. Players’ weights for the gamesData for experiments: the players’ weights for the 54 cases mentioned in Section 6.2. This is data for the results given inAppendix G.Fig. H.1. Players’ weights for n = 20 players.S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–16991697Fig. H.2. Players’ weights for n = 30 players.Fig. H.3. Players’ weights for n = 40 players.Fig. H.4. Players’ weights for n = 50 players.1698S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–1699Fig. H.5. Players’ weights for n = 60 players.ReferencesFig. H.6. Players’ weights for n = 70 players.[1] E. Algaba, J.M. Bilbao, J.R. Garcia, J.J. Lopez, Computing power indices in weighted multiple majority games, Mathematical Social Sciences 46 (2003)63–80.[2] R. Aumann, Acceptable Points in General Cooperative n-Person Games, Contributions to the Theory of Games, vol. IV, Princeton University Press, 1959.[3] G. Ausiello, P. Crescenzi, G. Gambosi, V. Kann, A. Marchetti-Spaccamela, M. Protasi, Complexity and Approximation: Combinatorial Optimization Prob-lems and their Approximability Properties, Springer, 2003.[4] Y. Bachrach, J. Rosenschein, Approximating power indices, in: Proceedings of the Seventh International Conference on Autonomous Agents and Multi-Agent Systems, 2008.[5] J.M. Bilbao, J.R. Fernandez, N. Jimenez, J.J. Lopez, Voting power in the European union enlargement, Journal of Operational Research 143 (2002) 181–196.[6] J.M. Bilbao, J.R. Fernandez, A.J. Losada, J.J. Lopez, Generating functions for computing power indices efficiently, Top 8 (2) (2000) 191–213.[7] P. Bork, H. Grote, D. Notz, M. Regler, Data Analysis Techniques in High Energy Physics Experiments, Cambridge University Press, 1993.[8] S. Brams, P.J. Affuso, Power and size: A new paradox, Theory and Decision 7 (1976) 29–56.[9] V. Conitzer, T. Sandholm, Computing Shapley values, manipulating value division schemes, and checking core membership in multi-issue domains, in:Proceedings of the National Conference on Artificial Intelligence, San Jose, California, 2004, pp. 219–225.[10] V. Conitzer, T. Sandholm, Complexity of constructing solutions in the core based on synergies among coalitions, Artificial Intelligence Journal 170(2006) 607–619.[11] T.H. Cormen, C.E. Leiserson, R.L. Rivest, C. Stein, An Introduction to Algorithms, The MIT Press, Cambridge, MA, 2003.[12] X. Deng, C.H. Papadimitriou, On the complexity of cooperative solution concepts, Mathematics of Operations Research 19 (2) (1994) 257–266.[13] E. Elkind, L.A. Goldberg, P. Goldberg, M. Wooldridge, Computational complexity of weighted threshold games, in: Proceedings of the National Confer-ence on Artificial Intelligence (AAAI-2007), 2007.S.S. Fatima et al. / Artificial Intelligence 172 (2008) 1673–16991699[14] S.S. Fatima, M. Wooldridge, N.R. Jennings, A randomized method for the Shapley value for the voting game, in: Proceedings of the Sixth InternationalConference on Autonomous Agents and Multi-Agent Systems, 2007, pp. 955–962.[15] A. Francis, Advanced Level Statistics, Stanley Thornes Publishers, 1979, p. 425.[16] S. Ieong, Y. Shoham, Marginal contribution nets: A compact representation scheme for coalitional games, in: Proceedings of the Sixth ACM Conferenceon Electronic Commerce, Vancouver, Canada, 2005, pp. 193–202.[17] S. Ieong, Y. Shoham, Multi-attribute coalition games, in: Proceedings of the Seventh ACM Conference on Electronic Commerce, Ann Arbor, Michigan,2006, pp. 170–179.[18] J.P. Kahan, A. Rapoport, Theories of Coalition Formation, Lawrence Erlbaum Associates Publishers, 1984.[19] D. Leech, Computing power indices for large voting games, Management Science 49 (6) (2003) 831–837.[20] I. Mann, L.S. Shapley, Values for large games IV: Evaluating the electoral college by Monte Carlo techniques, Technical report, The RAND Corporation,Santa Monica, 1960.[21] I. Mann, L.S. Shapley, Values for large games IV: Evaluating the electoral college exactly, Technical report, The RAND Corporation, Santa Monica, 1962.[22] A. MasColell, M. Whinston, J.R. Green, Microeconomic Theory, Oxford University Press, 1995.[23] M.J. Osborne, A. Rubinstein, A Course in Game Theory, The MIT Press, 1994.[24] G. Owen, Multilinear extensions of games, Management Science 18 (5) (1972) 64–79.[25] C.H. Papadimitriou, Computational Complexity, Addison Wesley Longman, 1994.[26] T. Rahwan, N.R. Jennings, An algorithm for distributing coalitional value calculations among cooperating agents, Artificial Intelligence Journal 171 (2007)535–567.[27] A. Rapoport, N-Person Game Theory: Concepts and Applications, Dover Publications, Mineola, NY, 2001.[28] J.S. Rosenschein, G. Zlotkin, Rules of Encounter, MIT Press, 1994.[29] A.E. Roth, Introduction to the Shapely value, in: A.E. Roth (Ed.), The Shapley Value, University of Cambridge Press, Cambridge, 1988, pp. 1–27.[30] T. Sandholm, K. Larson, M. Andersson, O. Shehory, F. Tohme, Coalition structure generation with worst case guarantees, Artificial Intelligence Journal 111(1999) 209–238.[31] T. Sandholm, V. Lesser, Coalitions among computationally bounded agents, Artificial Intelligence Journal 94 (1) (1997) 99–137.[32] L.S. Shapley, A value for n person games, in: A.E. Roth (Ed.), The Shapley Value, University of Cambridge Press, Cambridge, 1988, pp. 31–40.[33] O. Shehory, S. Kraus, A kernel-oriented model for coalition-formation in general environments: Implementation and results, in: Proceedings of theNational Conference on Artificial Intelligence (AAAI-96), 1996, pp. 131–140.[34] O. Shehory, S. Kraus, Methods for task allocation via agent coalition formation, Artificial Intelligence Journal 101 (2) (1998) 165–200.[35] P. Tanenbaum, Power in weighted voting games, The Mathematica Journal 7 (1997) 58–63.[36] J.R. Taylor, An Introduction to Error Analysis: The Study of Uncertainties in Physical Measurements, University Science Books, 1982.[37] W.V. Underhill, Finding bounds for definite integrals, The College Mathematics Journal 15 (5) (1984) 426–429.[38] H.S. Wilf, Generatingfunctionology, Academic Press, 1994.[39] G. Zlotkin, J. Rosenschein, Coalition, cryptography, and stability: mechanisms foe coalition formation in task oriented domains, in: Proceedings of theNational Conference on Artificial Intelligence (AAAI-94), 1994, pp. 432–437.