Artificial Intelligence 91 (1997) 131-154 Artificial Intelligence Networked bubble propagation: a polynomial-time hypothetical reasoning method for computing near-optimal solutions Yukio Ohsawa a**, Mitsuru Ishizuka b*l a Department of Systems Engineering, Osaka University l-3 Machikaneyama, Toyonaka City, Osaka 560, Japan b Department of Information and Communication Engineering, Universiry of Tokyo, 7-3-l Hongo, Bunkyo-ku, Tokyo 113, Japan Received March 1996; revised November 1996 Abstract Hypotheucal reasoning (abduction) is an important knowledge processing framework because of its theoretical basis and its usefulness for solving practical problems including diagnosis, de- sign, etc. In many cases, the most probable hypotheses set for diagnosis or the least expensive one for design is desirable. Cost-based abduction, where a numerical weight is assigned to each hypothesis and an optimal solution hypotheses set with minimal sum of element hypotheses’ weights is searched, deals with such problems. However, slow inference speed is its crucial prob- lem: cost-based abduction is NE-complete. In order to achieve a tractable inference of cost-based abduction, ‘we aim at obtaining a nearly, rather than exactly, optimal solution. For this approach, an approximate solution method exploited in mathematical programming is quite beneficial. On the other hand, from the standpoint of knowledge processing, it is also important to realize inference on a network which reflects knowledge structure. Knowledge structure is a fruitful information for an efficient inference. In this paper, we propose an inference method which works on a knowledge network, based on a mechanism similar to the pivot and complement method, an efficient approxi- mate O-1 integer programming method to find a near-optimal solution within a polynomial time of O(p) , where N is the number of variables or hypotheses. We refonnalize this method by a new type of network on which inference is executed by propagating bubbles. This method achieves an inference time of 0( N’) by executing each bubble propagation within a small sub-network, i.e., by taking aldvantage of the knowledge structure. @ 1997 Elsevier Science B.V. Keywords: Hypothetical reasoning; Knowledge network; Approximate solution method; Polynomial-time inference * Corresponding author. E-mail: osawa@sys.es.osaka-u.ac.jp. 1 E-mail: is,hizuka@miv.t.u-tokyo.ac.jp. 0004-3702/!)7/$17.00 @ 1997 Elsevier Science B.V. All rights reserved. PIISOOO4-3702(96)00061-6 132 E Ohsawa, M. IshizukdArtifcial Intelligence 91 (1997) 131-154 1. Introduction Hypothetical reasoning (abduction) is a useful knowledge in [ 21,221, where knowledge such as diagnosis, design, etc. Its logic-based into two components, ble to many practical problems is presented ground knowledge 2 and hypothetical and facts which are always false and may contradict with others. If _Z is not sufficient i.e., what is observed and wished to be explained, hypothetical hypotheses That is, the function of hypothetical the following system framework applica- framework i.e., back- rules true, while H consists of hypotheses which may be true or for deriving a given goal G, searches for a reasoning .Z and supports G if combined with X. set h that satisfies knowledge H. 2 is composed of inference is to find a hypotheses set h 2 H, which is consistent with constraints. is divided reasoning h C H, Zuht-G, 2 U h y 0 (empty clause). (2) (3) hypotheses each hypothesis We call h a solution associating and G with a set of observed a model-based observations. Also, by associating components) connection (between designing perform a model-based diagnosis symptoms, set or simply in H with a possible by hypothetical a solution set. As an example, by in one system state of a component reasoning we can perform (h) consistent with the each hypothesis with a possible or a component and G with a given system specification, we can for finding a set of fault hypotheses [ 171. to obtain a hypotheses likely diagnosis In many cases, we wish i.e., the most is assigned set with the minimal for a design. Cost-based of the goal, solution Here, a numerical weight hypotheses of element hypotheses the greatest posterior probability probability of the corresponding for diagnosis solution system, the lowest cost product the weight of each possible hypothesis. in h. According set which for a system to each hypothesis abduction deals with this type of problem is the best explanation fault, or the least expensive solving. in H and an optimal solution cost is searched, where cost is sum of the weights set is of where p is the likely a as abduction. Also, for designing the cost of each component if each weight element hypothesis. This means to [ 41, this minimal is given as -log(p), cost hypotheses that the most is available by assigning can be obtained by cost-based However, a crucial problem of hypothetical reasoning time nonmonotonic speed. That is, consistency is the slow inference makes the computation nentially with the number of possible hypotheses has been proven many symbolic goal, like [ 161 which employs useful portion of knowledge parallel from the hypotheses, to be NP-complete for proving inference starting [ 15,271. To overcome approaches have been proposed. Top-down including (N). The computational cost-based abduction checking among possible hypotheses time to grow expo- complexity speed, from the to the and [ 111, this slow inference inference [28], can focus the search [ 61 or MGTP starting as seen in ATMS the goal. On the other hand, bottom-up and causes the inference the QSQR approach E Ohsawa, M. lshizuka/ArtificiaI Intelligence 91 (1997) 131-154 rank vu?-(X) = Cw(X,Si)var(Si), kl 143 (10) (11) The first row of Eq. ( 11) is the variation second to the (rank) th rows mean their boundary values (this matrix computation after Procedure 3 (see Appendix B), so that there are rank - 1 zeroes in the right-hand side of Eq. (11)). that other I nodes stays non-basic, in the value of the source node, and the i.e., stays with is possible because rank is equal to rank’ For the example is var(Sl) Eq. (11) computed by Eq. (10) as in Fig. 6, var( Sl) - var(S2) = 0. Then : var( S2) = 1 : 1, because row of ratios among all the nodes are the second the variation var( i’l ) : var( S1) : var( S2) : var( P) : var( Q) : var( R) =--$:l:l:l:l:l. (12) 51.3. The calculation of relative depths is determined The relcztive depth, denoted by depth(X), varies if the value of node X changes or increases according upper bound, the basic node X with the smallest value of Idepth( X) 1 as the destination corresponds If var(T2) # 0, this depth(X) denote indicates how much the source node’s value to its upper or lower bound. Whether X decreases is in the lower or the source value to whether region. We select the search point should be kept in the feasible node. This shift of the search point from 1 not to 2’ but to 2 in Fig. 1. is defined by Eqs. (13)-( 15>, where up(X) and Zw(X) the upper and the lower bounds of node X, respectively. to the minimum since if if if - - - > 0 then depth(X) = < 0 then depth(X) = UP(X) -X var(X) ’ /w(X) - x var(X) ’ = 0 then depth(X) = +oo. (13) (14) (1% Z Ohsawa, M. IshizukdArh~cial Intelligence 91 (1997) 131-154 (1) Attachment of ruling arrows before procedure 3. (2) The extracted propagation path with respect to Tl from the network of (1). + --) : mows attached while rank=1 in the procedure of Fig.8. : arrows attached when rank=2 in the procedure of Fig.8. (3) The bubble propagated from 7’1 to P. Fig. 6. An example of computing influence degrees. (14) in Eqs. indicate inequalities (13) and the value of X, respectively. Eq. ( 15) means and The that a basic node X cannot be decreasing the destination node if var( X) is 0 (the first bracket cannot be 0, because 7’1 = up( Tr ) or Iw( Z’r ) but up( 7’1) # Iw( Tt ) , since we do not count the nodes of goal or inc whose upper and lower bounds are equal, as 2’1). Also, if var(Tl) = 0, any 0 node is allowed to be selected since the source node’s bounds will never be violated. the value change of source node TI supposing In Fig. 6, consider that the bubble at the conditions for increasing Tl propagates to node P. Assume the values before the bubble propagation: (Tl,S1,S2,P,Q,R) =(0,0.1,0.7,0.7,0.3,0.5). Since Tl = up(Tl) depth(P) calculated TI propagates variables is computed as at this time and var(P)/vur(T~) is computed as 0.3 from Eq. ( 13). Similarly, as (1,0.9,0.3,0.3,0.7,0.5). (12), the relative depths of nodes are the bubble at to P, with an increase of 0.3 in the value of P. Thus the variance of the jdepth( P) ( is the smallest, < 0 according to Eq. Since 1! Ohsawa, M. lshizuka/Artijicial Intelligence 91 (1997) 131-154 133 can avoid backtracking. There are also approaches are combined, such as the inference based on an extension forts, the inference against N. path network method of the upside-down meta-interpretation time of hypothetical reasoning in which both of the above merits [ 201 these ef- [ 121, or a method [3]. Despite remains intractable, i.e., exponential represented near-optimal intractability, for computing in propositional solution which This computational abduction problem in O-l research integer programming logic can be translated however, can be overcome has been developed (PC, hereafter), where N is the number of variables. Hence the key insight solutions in operations finds a near-optimal if we search for a near- rather than the exactly optimal one in cost-based abduction. An efficient (also NP- [2]. This method, pivot and is quite close to the in a polynomial-time method. The overall procedure of the PC method in [ 131: into problem. Then a solution set with the minimal optimal solution method complete) complement optimal solution takes time O(p), a cost-based integer programming an equivalent O-l or a near-minimal cost can be obtained quickly by the PC method one of the best among existing methods, both in solution quality and the computation time [ 131). However, the standpoint considering of effective mathematical cessing, we obtain a bridge predicate a knowledge network to fast approximate O-l research from operations anism, we can achieve executing each operation within a focused sub-network the inference the meaning from a viewpoint of knowledge pro- such as them to a richer knowledge [ 191. Thus, we wish to develop an inference method which works on similar this bridge to knowledge processing, using such a network-based mech- even faster than the original PC method. That is, by rather than the overall network, is a sort of black box from the procedure by integer programming. Also, apart from constructing of knowledge particular knowledge of the PC method it is difficult structures. Moreover, by understanding programming to extend structure using a mechanism time can be reduced. (this performance the knowledge the numerical representing to improve calculations expression, processing; heuristics inference logic is In this paper, we translate briefly, propositions tions are defined as real numbers as a method are represented for propagating time of [ 131 (in The inference is reduced to O(N*) performance proposed exactly optimal in [2] are employed). Also, in practical cases. [ 131, the matrix-based the PC mechanism process. Very into a network-based as nodes in the network and truth values of proposi- in the range of [ 0, 1 ] . We introduce bubble propagation truth values along the arcs in the network. or less, which is faster the 0( N4) calculations of the original PC method are as good as [ 131, i.e., almost than the solutions is translated into an integer programming is outlined. Section 4 explains how the PC method The remainder of the present paper is as follows. In Section 2, we show how a cost- one. Then, in Section i.e., is networked, from the runs on this network by and the solution (Section 7), and based abduction problem 3, the PC method how a constraint network called a bubble propagation network is constructed knowledge base. In Section 5, we illustrate how the inference our new networked bubble propagation method. The time performance quality are estimated both some conclusional remarks are given in Section 8. (Section 6) and empirically theoretically 134 1 Ohsawa, M. IshizukdArtijicial Intelligence 91 (1997) 131-154 2. Translation of cost-based abduction into O-l integer programming knowledge is represented We consider cost-based abduction of propositional Horn clauses as a single atom with a weight value. For example, in this paper. Each possible hypothesis let .Z and the set of possible weighted hypotheses H represent the background the following knowledge base (Knowledge Base 1) , where G is the goal and inc stands in this case that X2 and X5 for “inconsistent”. cannot coexist to 1 (both to be 1) and 0, the upper and the lower bounds of the truth value of G are defined respectively. The clause with inc in the head means The values of G and inc are anchored in one environment. Knowledge Base 1. 2: G:-X3, G:-X4. X,:-X1,X2,X5, X4:-X5,X6, inc:-X2,X5. H: X1,X2,X5,X6. The solution hypotheses without violating (given set h (s H) is expected to be optimal, in Eq. (4) ) of h is wanted the constraints of inc. i.e., the sum of weights of member and must also support G to be minimal, weight(Xl) = 1, weight( X2) = 2, weight( X5) = 1, weight( x6) = 2. (4) In order to make an integer programming method applicable, we translate edge base into inequality-constraints. Xi (i= 1,2,...) of same-named We transform into Eq. (5). Also, a set of Horn clauses sharing sionalatom) likeY:-Xt,Y:-X2,..., (propositions) the knowl- In the first place, let us define structural variables to true/false Xi and Y. Their values are restricted (AND-rule to [ 0, 1 ] . hereafter) the same head (Y, i.e., the conclu- into Y :- X,, (OR-rule hereafter) is transformed and Y, as variables which take l/O values corresponding atoms a propositional Horn clause Y :- Xi, X2, . . . , X, Eq. (6). Sal-n, ‘I;: < 0. s < 0, lq 2 0. (5) (6) Here, the slack variables are variables which take the values of the slacks of inequality constraints, . . , n) which are defined as like S and z (i = 1,2,. S=Y- 2xi , cI;:=Y-Xi. i=l ( ) (7) We set the value of goal G as 1, inc as 0. That is, inconsistency among hypotheses like inc :- X2, X5 are taken for Horn clauses with false heads (the empty clause). Under of all the truth values of thus defined constraints, lattice point (assignment a feasible E Ohsawa, M. Ishizuka/ArtiJCcial Intelligence 91 (1997) 131-154 135 Fig. 1. A vi.sual illustration of the PC for three variables, X, Y and 2 (the vertices with larger black dot marks are lattice points). atoms to an integer value of 1 or 0) with the optimal (minimal) cost (the sum of weights of element hypotheses in the solution set h) is searched. The set of element hypotheses with truth values of 1 is interpreted as the solution hypotheses set h. Thus cost-based abduction is translated into O-l integer programming. 3. Outliue of the pivot and complement (PC) Our approach is based on a networked reformalization of the PC method [ 21, which is an efficient approximate solution method for O-l integer programming. Since the PC method is an approximate method, its output solution may not be exactly optimal (i.e., of minimum cost). However, solutions obtained are quite near the optimal ones; the detailed results in [2] show that for nearly 1000 involved variables, the difference between <the optimal and the near-optimal solutions are within low2 ordered magnitude against the optimal value of the object function. This performance is highly ranked among existing O-l integer programming methods so far. Let us outline the PC method, referring to the example illustrated in Fig. 1, where three structural variables X, Y and Z exist. In Fig. 1, the solid line polyhedron is the 136 E Ohsawa, M. Ishkuka/Artifcial Intelligence 91 (1997) 131-154 is the bound integer programming function feasible region where all the constraints are satisfied, and whose surfaces are the equality constraints. For example, 2X - Y - 22 = 1.4 (the striped surface bounds of inequality for the constraint U (E 2X - Y - 22 - 1.4) < 0. The task denoted as u), is to search for a lattice point in this feasible region, where of O-l is minimized. a defined objective A search point is an intersection of as many surfaces as the dimension of the search (surfaces U, y and z to form vertex 1 in Fig. 1) . Variables for surfaces that touch a search point are (for vertex 1, non-basic variables are V (E X + Y + Z - 0.5)) to surfaces u: X + Y + Z = 0.5, y: Y = 0, and z: Z = 0, space, which corresponds intersect called non-basic variables Y and 2 which correspond respectively). Variables other than non-basic variables are called basic variables. to the number of structural variables The PC method is a local search method consisting of two phases. The search begins point time (the method of [5] IS,14 ] within polynomial time for most cases) (vertex 1 in Fig. at the point of exact optimal cost, which can be found quickly by a linear programming method is not strictly polynomial, but runs in polynomial likely a non-lattice to vertex of the polyhedron, local search phase). to find a better solution. That complementing tural variables Fig. 1). is most l), so the search point moves from vertex (the (vertex 6 in Fig. 1) is reached is made is reduced by the values of struc- from vertex 6 to vertex 7 in the current from 0 to 1 and vise versa the improvement phase, an attempt (see also [ 241). The initial point is, the value of the objective lattice point solution, until a lattice point In the next phase, i.e., by flipping (moving function Moving from vertex as to change the search point in the search phase the value of the non-basic to vertex a non-basic with a basic variable which changes is executed by the value of the to stay in the feasible region. Here, the basic one should one by the least variation. For in Fig. 1, it moves to prevent violation of the constraint V 3 0. In this case, the not up to vertex 2’ ( 1, O,O), because vertex the non-basic is bounded by surface U. Thus, from vertex 1 (0.5,0,0) the search point moves pivoting, exchanging non-basic one, in the direction be selected example, when in the direction of +X, search point moves 2’ violates variables becomes basic at vertex 2 and U changes to vertex 2 (0.7,0,0), the constraint U < 0 which from V, Y, Z to U, Y, Z, i.e., V which was non-basic from basic to non-basic. change at vertex 1 In the search phase, that the next vertex cannot be found nearer it may occur than the current position. lattice point through and the search continues, 3 to 4 in Fig. I) and then going back into the feasible or two O-l improvement total time taken for this search phase. to a is broken chiefly by violating some constraint once (from vertex one in the takes most of the region by complementing is also executed (4 and 5 in Fig. 1). Complementing (7 in Fig. 1). Pivoting In the PC procedure, such a standstill the cost value integer values to reduce phase For easy comprehension of later sections, we confess here that our main strategy is to replace is similar variables pivoting a single propagation path. the time-consuming pivoting with the propagation of bubbles, whose function to pivoting but which runs faster. That is, the pairs of basic and non-basic to be exchanged in the matrix-based PC method, due to the restriction of pivoting operations faster by the propagation than by to are selected of bubbles I! Ohsawa, M. IshizukdArtijicial Intelligence 91 (1997) 131-154 137 // (X1+X2+....+&), s =Y- Ti =Y- Xi. ) : struchml node 1 4 u : slack node Fig. 2. A unit constraint network of BPN. 4. Netwo’rked bubble propagation (NBP) method In this section, we translate the search phase we call networked bubble propagation (NBP hereafter). We focus on how pivoting realized by network-based operations. into a networked mechanism, which is 4.1. Construction of a bubble propagation network (BPN) Our NBP method works on a bubble propagation network (BPN), which unit networks each corresponding corresponds is con- the knowledge. The possible are attached as the leaves. We first show a unit constraint network of BPN, structed by connecting BPN thus constructed hypotheses and then an overall BPN in this subsection. to one AND- or OR-rule; to the overall background as shown Eqs. (5) and (6) can be networked called structural nodes associated with structural variables, which are called slack nodes like S or ‘I;: (i = 1,2,. variables. The values of nodes are constrained the slack nodes are constrained Arcs connect p( B, A) from a structural node A to a slack node B is the variation with respect from A. That is, the propagation the coefficients of Eq. (7), e.g., in Fig. 2, where circular nodes are i.e., atoms. Square nodes . . , n) are associated with slack i.e., [0, 11. rate in the value of B in node A via the arrow which directly points B to slack nodes are determined on structural and slack nodes and have propagation rates. A propagation by Eqs. (5) or (6) and the structural nodes by by their upper and lower bounds, to a unit value variation rates from structural PCS Xi> = -19 p(S,Y) = 1, P(l;,Xi) = -1, P(T,Y) = 1, (8) for i= 1,. . . , n. The propagation rate p( A, B) in the opposite direction is defined as - 1 /p( B, A) (see Appendix A). (from B to A) 138 E Ohsawa, M. Ishizuka/Art@cial Intelligence 91 (1997) 131-154 c1) inc Q) Fig. 3. Networked representations of Knowledge Base 1. ( 1) Traditional network. (2) Bubble propagation network (BPN) . Let us show how a BPN to Knowledge Base 1. Fig. 3( 1) shows a traditional inference methods such as [ 121, for Knowledge Base 1. The same knowledge base is represented by a BPN in Fig. 3(2) by combining type of knowledge network used in previous unit BPNs like Fig. 2. is constructed, referring is referred As illustrated in Fig. 4 (this figure 0 for a basic structural, l for a non-basic slack node. We call the black color of a node, which means representation and I for a non-basic node is in its non-basic a constant number of non-basic variables a BPN is determined by the location of bubbles Fig. 4, there are eight structural nodes which correspond in the PC method. Thus a search point is determined by eight intersecting means to in Section 5.3), we use the node structural, q for a basic slack the state, a bubble. The position of a search point is determined by (as many as structural variables). A state of in space surfaces. This that there are eight non-basic variables. in our NBP method. In the example to an eight-dimensional The initial state of the BPN determined by linear programming is shown in Fig. 4( 1) . like the one propagated the search phase, the BPN transits from the initial to the final state by propagating During from state 1 to 2 in bubbles, to a pivot in the PC method, as stated Fig. 4. The propagation of a bubble later in Section 5. The search phase ends when all the bubbles gather at the structural nodes. from node A to Xi in changing is equivalent 4.2. Ruling arrows and propagation path The most important key to the fast inference of the NBP method is that bubbles move the time for bubble in the direction of ruling arrows, which considerably reduces only I! Ohsawa, M. Ishizuka/Art$cial Intelligence 91 (1997) 131-154 Fig. 4. Transitions of BPN stated during the inference. propagation. That is, the destination node to which a bubble moves (equivalent to a basic variable with which a non-basic variable is exchanged in a pivot) is restricted within a small sub-network (propagation path) determined by ruling arrows. A ruling arrow indicates that its initial node rules the value of the terminal node. More specifically, a l node determines its own value as 0 or 1 and rules the values of neighboring nodes. On the other hand, the value of a 0 node is determined according to its neighboring I nodes. For example, in Eq. (7), Xi is determined after all the values X,+1> are determined, if S is I (i.e., S = 0). Also, the (I:Xl,X2~~...,Xi-l,Xi+l,...~ value of the 0 node is fixed after all of its neighboring nodes are determined. This ordering of ruling among nodes is given by the following procedure (Procedure 1), and depicted by ruling arrows in the network. Fig. 5 illustrates how ruling arrows are attached t’o the BPN in Fig. 4( 1) by Procedure 1. Procedun~ 1 (Attaching ruling arrows). 1. 2. 3. 4. 5. 6. Attach out-going arrows from 0 nodes to all their adjacent nodes. From each I node to which in-coming arrows are attached from all the adjacent nodes except one, attach an out-going arrow to this excepted node. From each 0 node to which an arrow is in-coming from an adjacent node, attach out-going arrows to all other adjacent nodes. Attach in-coming arrows to 0 nodes from all their adjacent nodes. To each 0 node from which out-going arrows are attached to all the adjacent nodes except one, attach an in-coming arrow to this excepted node. To each I node from which an arrow is out-coming to an adjacent node, attach in-coming arrows from all other adjacent nodes. In Fig. 4(l), ruling arrows are attached to all edges except the six bold lined edges. Since there exists no directed path between X2 and Xs, neither of these two nodes rules the other’s value. 140 L Ohsawa, M. Ishizuka/Artijicial Intelligence 91 (1997) 131-154 Fig. 5. Attaching ruling arrows to the BPN in Fig. 4( 1) (the numbers indicate the step in Procedure 1, by which arrows are attached). A propagation path is a sequence of edges starting from a source node, the non- basic node from which a bubble propagates following ruling arrows (edges without arrows may also be traced). Specifically, a propagation path is given by Procedure 2. A bubble propagates from a source node only to a basic node in its propagation path, because the ruling relation among nodes must be consistent. For example, if the bubble at node A propagates to node inc in Fig. 4( 1 ), then inc would have two bubbles. This is inconsistent or redundant. Also, values of the eight structural nodes will not be determined uniquely because the number of bubbles would be reduced to only seven. On the other hand, the bubble propagation from node A to X2 or Xi is free from this problem since X1 and X2 are both in the propagation path of node A. Each step of bubble propagation from a non-basic node (0 or I) is thus focused into a propagation path. Procedure 2 (Determining a propagation path). 1. 2. 3. Propagation path = source node. Select one node in propagation path not yet traced, and call it 2. If there is no such node, stop. Add E: {edges touching Z, except those with ruling arrows received by Z} and V: {nodes on the edges in E} to propagation path. Set Z as traced, and go to 2. E Ohsawa, M. Ishizuka/Art$cial Intelligence 91 (1997) 131-154 141 5. Mechanism of the NBP method The mechanism of the NBP method is explained in this section. We explain the bubble. propagation process in Section 5.1, and supplement our method with some other minor improvements in Section 5.2. Then in Section 5.3, we illustrate an example of NBP process for Knowledge Base 1. 5. I. Numerical calculation for bubble propagation A destination node, a basic node to which a bubble moves from a source node, should be selected so as to change the value of the source node in the least (see Section 3). To select the destination node, the following calculations are necessary. ( 1) Zke calculation of influence degrees. The influence degree, defined by w( X, Si) the variation in the value of X with respect to a unit variation representing in node Si (i = 1,2,..., rank) (some representative 0 nodes, where rank is later determined in Procedure 3), can be computed by summing the products of propagation rates of edges along the path from Si to X. (2) Th,e calculation of variation ratio. The variation ratio is the ratio among var( Si) (i = 1,2,... ), the variations in basic structural nodes Si (i = 1,2, . . .) on the: propagation path. This variation ratio is computed by solving simultaneous equations whose coefficients are given by influence degrees, under the constraint that the values of n nodes other than the source node do not vary by the bubble propagation. The variation ratio among variables other than Si (i = 1,2,. . .) in the: propagation path is obtained later using w(X, Si) for var(X). (3) The calculation of relative depths. From the variation ratio, we can tell which node reaches its own lower or upper bound for the minimal simultaneous change in the source, or which basic node is of the minimal relative depth. In the following, we explain some details of items ( 1) -( 3) above. 5.1.1. The calculation of infIuence degrees w( X, St) is computed by summing all the influences from Si to X via the paths of arrows (not only ruling arrows but also ones temporarily attached here), where influence is the product of propagation rates of the edges along a path. This computation goes on until these arrows cover the propagation path. More specifically, Procedure 3 is executed. Here, sets Z and .Z are the sets of nodes by which some arrows are received in this procedure, and nodes from which no arrows are spouted yet in this procedure, respective.ly. Procedure 3 (Computing inf?uence degrees (the source node is given as Tl and its propagation path I7 determined by Procedure 2) ) . 1. rank = 1, rank’ = 1. Let St E ZZ be a 0 node adjacent to TI and let Z be {St, TI}. Detach all the arrows in 17 and let J be the set of all nodes in ZZ. Regard Tl as a basic node temporarily until the end of the procedure. 2. w(Srank,Srank) = 1, and w(X,,!&) =0 for any node X E ZZ (X # &,,k). 142 E Ohsawa. M. Ishizuka/Art@ial Intelligence 91 (1997) 131-154 3. Select a 0 node in I rl .Z and call it A. If such a node does not exist, select a I node with ngb or ngb - 1 in-coming arrows and call it B, where ngb is the number of edges touching B. Then remove B from J and go to 5. If there is no such node B, go to 7. 4. Attach out-going arrows to all the non-arrowed edges touching A. For each I node (call this node C) at the ends of these arrows, w(C,Si) =w(C,Si) +P(C,A)w(A,Si) (i= 1,2,...,~~nk), and add C to I. Go to 3. 5. If (ngb - 1) arrows are in-coming to B, attach an arrow to the remaining one edge touching B. Call this arrow’s end 0 node D. Then add D to I, and w(D,Si) = w(D,Si) +p(D,B)w(B,Si). 6. If ngb arrows are in-coming 7. If there is an adjacent 0 node in I to a node in I, call it node E. Then rank = to B, rank = rank’ + 1 and Trankt = B. Go to 3. rank + 1, &a& = E, add E to Z and go to 2. Otherwise, stop. An example of Procedure 3 is illustrated form the propagation path of source Tl . This path is extracted and magnified Let us assume rate values of each edge as depicted the propagation in Fig. 6. The bold solid lines in Fig. 6( 1) in Fig. 6( 2). While rank = 1, beginning with w(St,Si) = 1, we obtain w(Tl,Sl) = -$ and p( U, St ) = 1. Below, we denote and the variation w(U,Sr) = 1, from p(Tl,Sl) in the value of node X as var(X). Next, while rank = 2, node S2 is selected in step 7 = 1 of Procedure 3. We obtain w(VS2) = -1 from p( P, V) = - 1 (see Appendix A for how to determine p( P, V) ) . The sequence of such operations proceeds until w( U, SZ ) = -1 is obtained and then T2 = U in step 6. As a result, influence degrees are obtained and Procedure 3 stops. from p(VS2) = -1, and then w(P,&) the following in the figure. = -$ 5.1.2. The calculation of variation ratio The variation ratio is the ratio among the value variations of nodes on the propagation as vur( X) it becomes basic after for a basic node or source node Tl (Tl is path, each variation denoted the the bubble propagates included because ratio of all the nodes can be computed by Eq. ( 10) (X is an arbitrary node in variation : - . . : var( &!$a&), we the propagation first obtain var( St ) : vur( S2) : . . . : var( &&) by solving Eq. ( 11) on the influence degrees obtained by Procedure 3. ratio vur( Sl) : vur( &) from the variation from Tl). Since path) E Ohsawa, M. Ishizuka/Art$cial Intelligence 91 (1997) 131-154 145 (var(Tl),var(&),var(S2),vur(P),var(Q),vur(R)) = (-0.15,+0.3,+0.3,+0.3,+0.3,+-0.3). Eventually, after being changed by these variances, the values become (Tl,&,&,P,Q,R)=(-0.15,0.4,1.0,1.0,0.6,0.8). The goal of these calculations is to find constraints. lower bounds. Fig. 6(3) attaching of ruling arrows step 1 of Procedure 3). the destination In fact, the values obtained here satisfy node (of influence degrees, variation ratios, and relative depths) the to which a bubble propagates without violating the constraints of their upper and and re- in in the propagation path (which were detached state after all above operations the network shows to edges 5.2. Other rejinements in the NBP method Along with our main strategy of realizing pivoting by propagation described above, some refinements have been incorporated inference. as for faster and more accurate of bubbles Device 1. We prefer I nodes we execm:e bubble propagation following reasons. ( 1) If a 0 node becomes if the source nine basic nodes ones. to 0 nodes from 0 in selecting sources to 0 only if none from I is possible, (T, in Fig. 6). That is, for the is node A in Fig. 6( l), we have to select the destination the source node, the propagation path is large. For example, from the in the area of all the bold lines including both solid and dotted (2) Turning a node from l to 0 and returning it to l afterwards is a round-about way, which can also be done by complementing [ 2.1, pivoting between is prevalent I and 0 in the PC method. its value. In fact, according to Device 2. In the search phase we focus the complement, if any, on the 0 nodes which can be reached by tracing edges, not in the direction of ruling arrows starting from (i.e., l nodes whose propagation path includes) its constraint. the violation This is because is due only to such a l node. a 0 node which is violating Device 3.. For the improvement cutable time against in linear phase, we employ a bottom-up the network size N, as shown below. inference process exe- a Improvement phase (revised). Test whether whose truth value is now 1 is denied. If derived, and Perform those atoms which are denied accordingly with for each true hypothesis. this action iteratively the goal is derived if one hypothesis then actually deny this hypothesis in the test. this hypothesis can improve the solution This procedure the original improvement 0( N3) (.the PC method phase of the PC method, as well as the time reduction to a better one than one to be obtained by from to O(N). That is, at most three variables) tries complementing 146 k: Ohsawa, M. Ishizuka/Artifcial Intelligence 91 (1997) 131-154 if there are more than 3 atoms between the goal and a hypothesis, complementing less than 4 atoms set in the PC method may violate the constraint. Our new step improves the cost of the solution set in such a case too. 5.3. An example behavior of the NBP method We see below how the NBP method works for the problem of Knowledge Base 1. It reaches the initial state 1 of Fig. 4 by solving a linear programming problem. The transition from state 1 to the final state 3 is shown in Fig. 4. l State 1 to 2: In state 1, the values are (Xl,X2,Xs,X&X5,X6) = (0.5,0.5,0.5,1,0.5,1). A bubble propagates from the source Ti = A. X2 becomes the 0 node St in Procedure 3. While rank = 1 for this source, influence rates are obtained as W(X3rX2) =p(X3rC)p(C,X2) w(X5,X2) =P(&.B)P(B,&) = 1, = -1, Then var(XI) : var( X2) : var(X5) : var( A) : var(other white nodes E n) = 1: 1: 1: -2 : -1, where lT is the propagation path of node A (nodes and edges which can be traced without opposing ruling arrows starting from A, so that ZL7 includes the bold lined non-art-owed edges in Fig. 4( 1) ) . var( X1 ) is one of the least variation, so that the bubble in A propagates to Xt and reaches state 2. At this moment, the values become (x1,X2,X3,X4,&,X6) = (o,o,o, 1,1,1). l State 2 to 3: Change 0 nodes which take values of 0 or 1 into 0. Since the solution obtained at this moment is the exactly optimal, i.e., X5, X6, the improvement phase does not run and the inference stops here. 6. The complexity of NBP and the knowledge structure The hypothetical reasoning can be classified into problems of different complexity as reported in [ 15,271. One of their important conclusions is that the computational complexity of the inference depends on the knowledge structure. A singly connected graph is a graph which includes no closed paths. If a knowledge network is singly connected, no inconsistencies exist among elementary hypotheses. As well as the search the inference time of hypothetical time of a constraint satisfaction problem [7,8], I! Oksawa, M. Ishizuka/Amj?cial Intelligence 91 (1997) 131-154 141 reasoning is polynomial against the number of possible hypotheses if the knowledge network is singly connected [ 151. In this section, we show that the computational complexity depends on the knowledge structure in our NBP. The main point is covered by Theorem 1. Theorem 1. If the original knowledge network is singly connected, then all 0 nodes take 0 or 1 as their values. This theorem means that if the knowledge network is singly connected, all the struc- tural varia,bles take values of 0 or 1 as the output of the initial linear programming procedure, so that it is needless to execute the search phase (to be accurate, our BPN differs from the primal or dual constraint network employed in [ 7, S] in that a singly connected BPN may not be translated into a singly connected primal or dual network, i.e., wider range of problems can be put into singly connected BPNs). Theorem 1 is derived from Lemmas 2 and 3, which are proven in Appendix C. Lemma 2. Zf a ruling arrow is attached to every edge in a BPN, then all the 0 nodes take values of 0 or 1. Lemma 3. A ruling arrow is attached to every edge in a BPN if the overall knowledge network is singly connected. Besides deriving Theorem 1, Lemma 2 means that the NBP method reduces a problem into easier ones, because ruling arrows increases with the number of l nodes as bubbles propagate from 0 to 0 nodes. For example in Fig. 4, all the values of 0 nodes are already 0 or 1 in state 2 since all the edges in the BPN are attached ruling arrows. Such a structure dependency of inference time is itself a good feature of our method since it does not take unnecessarily long time regardless of the problem structure. Note that Theorem 1 can be extended to the one in [ 251, when no inconsistencies exist between hypotheses. 7. Experimental evaluation of the NBP method 7.1. Solur-ion quality for test cases We have implemented the NBP method on a Sun SPARCstation 10 in C. The maxi- mum main (virtual) memory used for experiments reported here was about 83 Mbytes. We applied the NBP method to hypothetical reasoning problems including from 10 to 300 possilble hypotheses. We generated test problems randomly, under the condition that each body of the Horn clauses in the background knowledge were within 5 atoms. An atom appeared at most 10 times in the overall background knowledge. These restrictions were for unity of density-we want to know the dependency of time on the problem size not on other factors. 148 r Ohsawa, M. Ishizuka/Art@cial Intelligence 91 (1997) 131-154 to the feasible three cases, both region after temporarily (like vertex 4 in Fig. 1) . the solutions obtained were among We evaluated the solutions obtained in each test case by cost. For all the cases except the best three solutions. the PC method and the NBP method could not to break a three out of 250 problems, For these excepted recover back standstill in the PC Since method the PC and the NBP methods obtained exactly same solutions by the search phase for all the problems. However, due to Device 3 in Section for all the 13 problems 5.2, the NBP method successfully obtained for which the improvement solution set including better solutions the NBP method was invented by reformalizing to networked operations, the optimal one. Thus we can say that the NBP method is capable of obtaining phase of the PC method stopped by a redundant than the PC method. the optimal solutions pivoting operations a constraint violating 7.2. Evaluation of the computation time of the NBP method 7.2.1. An analytical estimation of the inference time of NBP As stated that a couple of sub-BPNs are connected in the last section, we can focus on a propagation path for each bubble propagation. The size of this propagation path does not increase with the overall knowl- edge size. That is, suppose to generate a new that the ratios of the number of 0, Cl, 0 and I nodes and larger one. If we assume then the ratios are also equal in the combined BPN. Since the in both BPNs are equal, average size of a propagation of extending a propagation resultant BPN after the combination). path is determined the propagation path on encountering in these three graphs by these ratios-via a I or 0 node, the average size of (the original pair of BPNs and the the probability path is equal This leads to a faster inference by the NBP method than even the PC method, because to 0 in the matrix- involved to a constant propagation path. 0(N2) matrix elements must be computed or checked for equality based original PC method (i.e., the number of atoms). order since each bubble propagation in each pivoting where N is the number of variables time is reduced down In NBP, this 0( N2) into a constant-sized The total computation is reduced time T,WP can be formulated as TNBP = Cttit + %ch + Timpr (16) where Tinif, Tsrch and I;:mpr denote improvement phases respectively. Tsrch is estimated below: time required for the linear programming, search and Tsrch = a (the number of bubbles which propagate) . b (average number of source candidates in one bubble propagation) . c (searching time for a bubble’s destination cx average size of one propagation path). (17) Here, a CC N, since bubble propagation back-propagation (propagation from 0 nodes) of bubbles from a I node to a 0 node is prevalent and seldom occurs. b is nearly L Ohsawa, M. Ishizuka/Art$cial Intelligence 91 (1997) 131-154 149 Inference-time (CPU-time [set]) 10000 1000 100 10 1 0.1 1 0 0 0 X 10 100 200 Number of possible element hypotheses : Hypothetical reasoning by the NBP method. : Hypothetical reasoning by the PC method. : Hypothetical reasoning by implicit enumeration method. : Hypothetical reasoning by Prolog-based reasoning. Fig. 7. CPU time of hypothetical reasoning by the NBP and other methods. proportional to N and c is of constant order if the evaluation above is correct. Tsrch is thus in the order of 0( N2). In NBP, Timp,. is in the order of O(N) due to Device 3 of Section 5.2, and the absolute value of cnit (time of linear programming) is shorter than Tsrch and Timpr* As a conclusion, we can estimate Tn~p as 0( N2). The main difference between T~sp and the total time 0(N4) of the PC method comes from the difference between the bubble propagation and the matrix calculation of pivoting. This is a merit coming from reflecting the knowledge structure by a network-based mechanism. 7.2.2. Experimental results Computational speeds of Prolog-based reasoning, an implicit enumeration method [ 11, the I?C method and the present NBP method are depicted in Fig. 7, where each dot 150 E Ohsawa, M. Ishizuka/Arti&ial Intelligence 91 (1997) 131-154 inference estimations the average time of ten problems of a certain problem of 0( N4) and 0( N2), respectively. Although depicts of the PC and the NBP methods are close to (or slightly theoretical the Prolog-based and the implicit enumeration methods allow the obtainment of a strictly optimal solution, time. these two methods cannot time; The PC and the NBP methods can compute near-optimal to O(N2) this is obviously important particularly achieved by the NBP method for practical adoption of an automatic their computation within a practical or tractable in polynomial for large problems. Also, jumping size. The data the less in the case of NBP) is a significant improvement from 0(N4) inference. solutions finish 8. Conclusions Recently, the usefulness of local search has been re-recognized as seen in [ 9,18,23,26]. are: Unlike these methods, the salient for efficient inference features of the PC method ( 1) the use of the optimal real domain initial solution obtained quickly by a linear (2) programming method, and the sophisticated knowledge network local search mechanism which works in the real domain on the rather than just in the binary (O/ 1) domain. On the other hand, a network-based the structure of the knowledge base. This structure reflects fast inference. By merging both merits, network-based where N is the number of possible hypotheses. This is considerably methods. inference on the BPN, we achieved 0( N2) time hypothetical approach is important since a knowledge network for i.e., the fast search by the PC method and the is a fruitful information reasoning faster than previous This improvement in inference region for each bubble propagating operation network to the pivoting operation). This base is important type of focusing on a limited in dealing with large-scale knowledge bases. time in our new method comes from restricting (which is functionally the equivalent in a knowledge region We are now developing a predicate with predicate Horn clauses with recursion by extending (BPN) advantage of our approach of handling networked knowledge. and stepwise expansion manner in a top-down logic version of NBP which can efficiently deal the bubble propagation network another [ 191; this indicates Appendix A. Propagation rate from a slack node to a structural node Definition of p(A, B) from p(B, A). For a structural node A and a slack node B pointed the valueof from A via an arrow, we definep(A,B) as p(A,B)p(B,A) = -1, given p(B,A). Reason for this definition.. the variance from before in V is equal to after the bubble propagation, to ~(Y&)var(&). In Fig. 6( 2), if the value of S2 varies by vur( S2), then However, since node V stays non-basic i.e., it stays in its upper or lower bound, E Ohsawa, M. Ishizuka/Artijkial Intelligence 91 (1997) 131-154 151 var( V) = 0. Thus, the variance at the same time in the value of P must offset this effect from S2 to V, i.e., p(VP)vur(P) +p(YS2)vur(S2) =O, i.e., var( P) = -var(S2)p(YS2)p(YP). Accordingly, by defining p(eV) p( P, V)p(Y&)vur(&). obtained by a calculation along ruling arrows starting from $2. = From this equation, the variance in the value of node P is = -1 we obtain vur(P) as p(P,V)p(yP) Appendix B. Proof of rank = rank’, at the end of Procedure 3 The number of 0 nodes is equal to the number of I nodes (call this number K) because there are the same number of bubbles (0 and I) as the number of structural in a BPN. Also, by Procedures 1 and 3, each 0 node except nodes (0 and 0) receives one arrow and each I node except TI , T2, . . . , Tronp spouts one Sl,S2,...9&mk arrow. Therefore, K - rank (the number of arrows received by structural nodes) is equal to K - rank’ (the number of arrows spouted by slack nodes) because all the arrows spouted from slack nodes are received by structural nodes and those received by structural nodes are spouted by slack ones. It follows that rank is equal to rank/. Appendii: C. Proofs of the lemmas Lemma Z!. If u mling arrow is attached to every edge in a BPN, then all the 0 nodes take values of 0 or 1. Proof. Every node (specifically 0 nodes) in a BPN, all of whose element edges are attached ruling arrows, can be traced back to l nodes in the opposite direction of the ruling arrows, if there is no loop of arrows (we cannot go out of a loop of arrows by tracing this way). However, a loop L of arrows cannot exist for the following reasons. ( 1) If the first node in L to spout arrows to edges in L is a 0 node A, the edges in L which are adjacent to A are all spouted from A. (2) The first node in L to spout arrows cannot be a I node because a I node cannot spout an arrow to an edge until it receives arrows from all other edges. (3) L cannot include a 0 or a 0 node, because a 0 and a 0 node is a spouter and a receiver of arrows, respectively. Therefore, any 0 node’s value is ruled by l nodes via ruling arrows. Also, iE a I node P receives (number of P’s adjacent edges - 1) ruling arrows, then the value of the single remaining adjacent structural node of P to which a ruling arrow from P outgoes is equal to 0 or 1 because the coefficients of Eq. (7) are all 1 or -1 and the value of each 0 node is restricted to [ 0, 1 ] . 152 I! Ohsawa, M. Ishizuka/Artifcial Intelligence 91 (1997) 131-154 Thus, by tracing ruling arrows beginning with 0 nodes along ruling arrows, we can conclude that all 0 nodes’ values are 0 or 1. q In the proof of Lemma 3, we use Lemma 4 below, so let us precede with the proof of Lemma 4. Lemma 4. Every edge in the BPN is attached a ruling arrow if the overall BPN is singly connected. Proof. Here we prove that the negation of Lemma 4 is false. That is, we suppose a BPN is singly connected but includes be attached by Procedure 1. that r, a set of edges to which ruling arrows cannot If this assumption is true, there exists a directed subgraph G, which is connected (i.e., is pruned off the BPN, it contradicts with the if all the connected subgraphs are connected with each other via more or equal to two edges any pair of nodes in G are connected by edges in G) even if r and which is connected to only one edge e in r. This is because assumption (and directed) in r, i.e., if a limitless or looped graph is included that the overall knowledge network in the overall BPN. is singly connected, Thus, all the edges touching a node P E e n G except one (e) are arrowed according to the definition of G. Therefore, whichever 0, 0, 0, or I node P is, e is arrowed by Procedure 1. This contradicts with the assumption e E r. 17 Lemma 3. A ruling arrow is attached to every edge in the BPN if the overall knowledge network is singly connected. Proof. In the first place, let us classify slack nodes as that nodes S and I;: in Fig. 2 are of type S and T, respectively. For example, in Fig. 3, the thin lined squares are type S and the bold lined are type T. network that the knowledge is knowledge Now assume this closed path If a closed path exists in a BPN for such knowledge, singly connected. shares I nodes of both types S and T (see Section 4.1 for the definition of these types) including only one with some single AND- or OR-rule R. (This type of slack nodes, S or T, is singly connected, is isomorphic with the given knowledge network which is supposed is because a sub-BNP i.e., such a sub-BPN to be singly connected here.) for the given background Call these I nodes of T type and S type (shared between the closed path and R) nodes T and S respectively. Then, XI = Y where Xt and Y are the two adjacent nodes of T, since T = 0. Therefore, the sum of values of all other nodes is equal than Xt and Y in R (for example, lower bound of to n - 1 if S = 1 - n (the to 0 if S = 0 (the upper bound of S in Eq. (6)). The only . . ,l) for S = 1 - n and S = 0 are (l,l,. . . ,X,) respectively, because the value of a structural node is in the range of . . , X, are all l nodes, so that there are at least (n - 1) structural in R. This is of redundant or X,) and two slack nodes (S and T) which are non-basic, i.e., (n + 1) non-basic nodes for n structural nodes, and equal . ’ * + X, of Fig. 2) x2 + x3 + S in Eq. (5)) possible values sets of (X2,X3,. and (O,O,. [0, 11. Thus, X2,X3,. nodes (X2,X3,..., state of nodes, . . , 0), E Ohsawa, M. lshizuka/Artifcial Intelligence 91 (1997) 131-154 1.53 inconsistent constraints, so the assumption that a closed path exists in the overall BPN is negated. Thus, the overall BPN is singly connected if the overall knowledge network is singly connected. This, combined with Lemma 4, derives the lemma. 0 References [I] E. Baha, An additive algorithm for solving linear programs with zero-one variables, Opsearch 13 (1965) 517-546. [2] E. Balas and C. Martin, Pivot and compliment-a heuristic for O-l programming, Manage. Sci. 26 (1980) 86-96. [ 31 E Bry, Query evahrtion in recursive databases, bottom-up and top-down reconciled, Data Knowledge Eng. 5 (1990) 289-312. [4] E. Chamiak and SE. Shimony, Cost-based abduction and MAP explanation, Art$ Intell. 66 ( 1994) 345-374. [5] G.B. Dantzig, Linear Programming and Extension (Princeton University Press, Princeton, NJ, 1963). [6] J. de Kleer, An assumption-based TMS, Art$ Intell. 28 (1986) 127-162. [7] E.C. Freuder, A sufficient condition of backtrack-free search, J. ACM 29 (1982) 24-32. [8] H. Geffner and J. Pearl, An improved constraint-propagation algorithm for diagnosis, in: Proceedings IJCAI-07, Milan ( 1987) 1105-l 111. [9] J. Gu, Local search for satisfiability (SAT) problem, IEEE Trans. Syst. Man Cybern. 23 (1993) 1108- 1129. [ lo] J.N. Hooker, A quantitative approach to logical inference, Deck Support Syst. 4 (1988) 45-69. [ 111 K. Inoue, Y. Ohta and R. Hasegawa, Hypothetical reasoning systems on the MGTP, ICOT Tech. Rept. TR-763 ( 1992). [ 121 M. Ishizuka and F. Ito, Fast hypothesetical reasoning system using inference-path network, in: Proceedings IEEE Conference on Tools for AI (1991) 352-360. [ 131 M. Ishxzuka and T. Okamoto, A polynomial-time hypothetical reasoning employing an approximate solution method of O-l integer programming for computing near-optimal solution, in: Proceedings IOth Bienniul Conference of the Canadian Society for Computational Studies of Intelligence, Banff, Alta. (1994) 179-186. [ 141 N. Karmarkar, A polynomial-time algorithm for linear programming, Combinatorics 4 ( 1984) 373-395. [ 151 H.A. Kautz and B. SeIman, Hard problems for simple default logics, in: Proceedings First International Conference on Principles of Knowledge Representation and Reasoning, Toronto, Ont. ( 1989) 189-197. [ 161 A. Kondo, T. Makino and M. Ishizuka, An efficient hypothetical reasoning for predicate-logic knowledge- base, in: Proceedings IEEE International Conference on Tools for AI (1991) 360-367. [ 171 T. Makino and M. Ishizuka, A hypothetical reasoning system with constraint handling mechanism and its applications to circuit-block synthesis, in: Proceedings Pacific Rim International Conference on Artijcial Intelligence ‘90, Nagoya ( 1990) 122-127. [ 181 S. Minton, Minimizing conflicts: a heuristic repair method for constraint satisfaction and scheduling problems, Artc Intell. 58 (1992) 161-205. [ 191 Y. Ohsawa and M. Ishizuka, Networked bubble propagation: a polynomial-time predicate-logic hypothetical reasoning by networked bubble propagation method, in: G. McCalla, ed., Advances in Arti$icial Intelligence (Proceedings Eleventh Canadian Conference on AI), Lecture Notes in Artificial Intelligence 1081 (Springer, Berlin, 1996) 375-387. [20] Y. Ohia and K. Inoue, A forward-chaining hypothetical reasoner based on upside-down meta- interpretation, in: Proceedings International Conference on Fjih Generation Computer Systems (1992) 522-529. [21] D. Poole, A logical framework for default reasoning, Artif: Intell. 36 (1988) 27-47. [22] D. Poole, R. Aleliunas and R. Goebel, Theorist: a logical reasoning system for defaults and diagnosis, in: N.J. Cercone and G. Macaha, eds., Knowledge Frontier: Essays in the Knowledge Representation (Springer, New York, 1987). 154 Z Ohsawa, hf. Ishizuka/Artijicial Intelligence 91 (1997) 131-154 [23] B. Selman and H. Kautz, An empirical study of greedy search for satisliability testing, in: Proceedings AAAI-93, Washington, DC (1993) 46-51. [24] E. Santos Jr, A linear constraint satisfaction approach to cost-based abduction, Artif: Intell. 65 (1994) l-28. [25] E. Santos Jr and ES. Santos, Polynomial solvability of cost-based abduction, Artif: Intell. 86 (1996) 157-170. [ 261 B. Se.lman and H. Kautz, Domain-independent extensions to GSAT: solving large structured satisfiability problems, in: Proceedings IJCAI-93, Chambery (1993) 290-295. [27] J. Stillman, It’s not my default: the complexity of membership problems in restricted propositional default logics, in: Proceedings AAAI-90, Boston, MA ( 1990) 571-578. [ 281 L. Vieille, From QSQ towards QoSaQ: global optimization of recursive queries, in: Proceedings Expert Database Systems (1988) 421-435. 