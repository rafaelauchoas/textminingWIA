Artificial Intelligence 175 (2011) 1092–1121Contents lists available at ScienceDirectArtificial Intelligencewww.elsevier.com/locate/artintContracting preference relations for database applications ✩Denis Mindolin, Jan Chomicki∗Department of Computer Science and Engineering, 201 Bell Hall, University at Buffalo, Buffalo, NY 14260-2000, USAa r t i c l ei n f oa b s t r a c tArticle history:Received 27 February 2009Received in revised form 17 September2010Accepted 17 September 2010Available online 1 December 2010Keywords:Preference contractionPreference changePreference query1. IntroductionThe binary relation framework has been shown to be applicable to many real-lifepreference handling scenarios. Here we study preference contraction: the problem ofdiscarding selected preferences. We argue that the property of minimality and thepreservation of strict partial orders are crucial for contractions. Contractions can be furtherconstrained by specifying which preferences should be protected. We consider preferencerelations that are finite or finitely representable using preference formulas. We presentalgorithms for computing minimal and preference-protecting minimal contractions forfinite as well as finitely representable preference relations. We study relationships betweenpreference change in the binary relation framework and belief change in the belief revisiontheory. We evaluate the proposed algorithms experimentally and present the results.© 2010 Elsevier B.V. All rights reserved.A large number of preference handling frameworks have been developed [16,7,20]. In this paper, we work with thebinary relation preference framework [10,22]. Preferences are represented as ordered pairs of tuples, and sets of preferencesform preference relations. Preference relations are required to be strict partial orders (SPO): transitive and irreflexive binaryrelations. The SPO properties are believed to capture the rationality of preferences [16]. This framework can deal with finiteas well as infinite preference relations, the latter represented using finite preference formulas.Working with preferences in any framework, it is naive to expect that they never change. Preferences can change overtime: if one likes something now, it does not mean one will still like it in the future. Preference change is an active topicof current research [11,17]. It was argued [15] that along with the discovery of sources of preference change and elicitationof the change itself, it is important to preserve the correctness of the preference model in the presence of change. In thebinary relation framework, a natural correctness criterion is the preservation of SPO properties of preference relations.An operation of preference change – preference revision – has been proposed in [11]. We note that when a preferencerelation is changed using a revision operator, new preferences are “semantically combined” with the original preferencerelation. However, combining new preferences with the existing ones is not the only way people change their preferences inreal life. Another very common operation of preference change is “semantic subtraction” from a set of preferences anotherset of preferences one used to hold, if the reasons for holding the contracted preferences are no longer valid. That is, we aregiven an initial preference relation (cid:3) and a subset CON of (cid:3) (called here a base contractor) which should not hold. We wantto change (cid:3) in such a way that CON does not hold in it. This is exactly opposite to the way the preference revision operatorschange preference relations. Hence, such a change cannot be captured by the existing preference revision operators.In multi-agent scenarios, a negotiation between different agents may involve giving up individual agents’ preferences [1]. Inmore complex scenarios, preferences may be added as well as given up.✩Research partially supported by NSF grant IIS-0307434. This paper is an extended version of Mindolin and Chomicki (2008) [23].* Corresponding author.E-mail addresses: mindolin@buffalo.edu (D. Mindolin), chomicki@buffalo.edu (J. Chomicki).0004-3702/$ – see front matter © 2010 Elsevier B.V. All rights reserved.doi:10.1016/j.artint.2010.11.011D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–11211093Fig. 1. Example 1. Mary’s preferences.Another reason for contracting user preferences in real-life applications is the need for widening preference query results.In many database applications, preference relations are used to compute sets of the best (i.e. the most preferred) tuples,according to user’s preferences. Such tuples may represent objects like cars, books, cameras, etc. The operator which is usedin the binary relation framework to compute such sets is called winnow [10] (or BMO in [22]). The winnow operator isdenoted as w(cid:3)(r), where r is the original set of tuples, and (cid:3) is a preference relation. If the preference relation (cid:3) is large(i.e. the user has many preferences), the result of w(cid:3)(r) may be too narrow. One way to widen the result is by discardingsome preferences in (cid:3). Those may be the preferences which do not hold any more or are not longer important.In this paper, we address the problem of contraction of preference relations. We consider it for finitely representableand finite preference relations. We illustrate now preference contraction for finite (Example 1) and finitely representable(Example 2) preference relations.Example 1. Assume a car dealer has a web site showing his inventory of cars, and Mary is a customer interested in buying acar. Assume also that Mary has a previous purchase history with the dealer, so her preferences (possibly outdated) over carsare known: she prefers every car ti to every car t j (denoted ti (cid:3)1 t j ) with i > j (i, j ∈ [1, 5]). Let the inventory r1 consist offour cars (r1 = {t1, t3, t4, t5}), while t2 is currently missing. The preference relation is illustrated in Fig. 1 by the set of alledges, where an edge from ti to t j shows that ti is preferred to t j . The set of the best cars according to Mary’s preferencerelation is w(cid:3)1 (r1) = {t1}.Assume that the dealer observes that while Mary is browsing the web site, she indicates equal interest in three cars: t1(as expected according to (cid:3)1), t3, and t5. As a result, her preference relation (cid:3)1 has to be changed so that t1, t3, and t5are all among the best cars, i.e., they must not be dominated by any car in the inventory. That implies that the preferencesin the set CON1 consisting of the following preferences: the preference of t1 over t3, and the preference of t1, t3, and t4over t5 do not hold any more and need to be contracted (removed from (cid:3)1). Those preferences are shown as dashed arrowsin Fig. 1. Notice that since t2 is not in the inventory, and Mary has not explicitly provided any information regarding herpreferences involving t2, the preferences of t1 over t2 and t2 over t3, t4 and t5 remain unchanged.In the example above, we showed a simple scenario of preference contraction. The user preference relation there is afinite relation; and preferences to be contracted are elicited from the user-provided feedback. Variations of this scenarioare possible. First, the user’s preference relation may be infinite but representable by a finite preference formula. Second,a possibly infinite set of preferences to discard may also be defined by a formula.Example 2. Assume that Bob prefers newer cars, and given two cars made in the same year, the cheaper one is preferred.t (cid:3)2 t(cid:5) ≡ t.year > t(cid:5).year ∨ t.year = t(cid:5).year ∧ t.price < t(cid:5).pricewhere >, < denote the standard orderings of rational numbers, the attribute “year” defines the year when the car wasmade, and the attribute “price” – its price. The information about all cars which are in stock now is shown in the table r2below:idt1t3t4t5makeKiaVWKiaVWyear2007200720062006price12 00015 00015 0007000Then the set of the most preferred cars according to (cid:3)2 is w(cid:3)2 (r2) = {t1}. Assume that having observed the set w(cid:3)2 (r2),Bob understands that it is too narrow. He decides that the car t3 is not really worse than t1. He generalizes that by statingthat the cars made in 2007 which cost 12 000 are not better than the cars made in 2007 costing 15 000. Hence, the set ofpreferences the user wants to discard can be represented by the relation CON2(cid:3)(cid:5)(cid:2)t, tCON2≡ t.year = t(cid:5).year = 2007 ∧ t.price = 12 000 ∧ t(cid:5).price = 15 000The scenarios illustrated in the examples above have the following in common: we have a (finite or finitely representableinfinite) SPO preference relation (cid:3) and a set CON, finite of infinite, of preferences to discard. Our goal is to modify (cid:3), sothat the resulting preference relation is an SPO, and the preferences in CON do not hold anymore.1094D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–1121Another important property of preference relation change is minimality. Indeed, a simple way of removing a subset of apreference relation without violating its SPO properties is to remove all the preferences from this relation. However, mostlikely it is not what the user expects. Hence, it is important to change the preference relation minimally.Fig. 2. Example 3.Example 3. Take Mary’s preferences from Example 1. A naive way to discard CON1 (CON1 = {t1t3, t1t5, t3t5, t4t5}) from (cid:3)1 isto represent the contracted preference relation as (cid:3)(cid:5)1 is not transitive1(and thus not an SPO): t1 (cid:3)(cid:5)1 t3, but t1 (cid:2)(cid:5)1 t5. Hence, this change does not preserveSPO. To make the changed preference relation transitive, some other preferences have to be discarded in addition to CON1.At the same time, discarding too many preferences is not a good solution since some of them may be important. Therefore,we need to discard a minimal subset of (cid:3)1 which contains CON1 and preserves SPO in the modified preference relation. Two= {t1t2} ∪ CON1 (Fig. 2(b) shows the contractedsolutions are possible here: in the first case, we remove the preferences Prelation); in the second – the preferences P= (cid:3)1 − CON1 (Fig. 2(a)). However it turns out that (cid:3)(cid:5)= {t2t3, t2t4, t2t5} ∪ CON1 (Fig. 2(c) shows the contracted relation).1 t5, but t1 (cid:2)(cid:5)1 t3; t1 (cid:3)(cid:5)1 t2, t2 (cid:3)(cid:5)1 t2, t2 (cid:3)(cid:5)−1−2Similarly, take (cid:3)2 and CON2 from Example 2. The relation (cid:3)(cid:5)(cid:5)(cid:5) ≡t (cid:3)∗2 t(VW, 2007, 12 000), t6 = (VW, 2007, 14 000), and t7 = (VW, 2007, 15 000), then t5 (cid:3)(cid:5)preference relation which is minimally different from (cid:3)2 and does not contain CON2 is shown below:(cid:3)(cid:2)t. y > t(cid:2)¬t. y = tAs we can see, the relation (cid:3)∗2 is different from the naive solution (cid:3)(cid:5)costing 12 000 is not better than a car made in 2007 costing from 12 000 to 15 000. We note that (cid:3)∗minimally different from (cid:3)2 and not containing CON2..p (cid:2) 15 0002 in the sense that (cid:3)∗. y = 2007 ∧ t.p = 12 000 ∧ t. y ∨ t. y = t(cid:5)2 t6 and t6 (cid:3)(cid:5).p > 12 000 ∧ t. y ∧ t.p < t.p∧(cid:3)(cid:5)(cid:5)(cid:5)(cid:5)2≡ ((cid:3)2 − CON2) is not transitive: if we take t5 =2 t7. An SPO2 t7 but t5 (cid:2)(cid:5)2 implies that a car made in 20072 is not the only relationThe examples above show that when a subset of an SPO preference relation is discarded, the resulting relation may loseits SPO properties: while it is always irreflexive, the transitivity axiom may not be preserved. A possible way to remedythe problem is to relax the SPO requirements imposed on preference relations and allow non-transitive preference relations.However, there is a number of reasons why all SPO axioms are important to preserve. First, the SPO properties are believedto capture the rationality of preferences. The second reason is related to the usage of preferences in database applications:There are many efficient algorithms for preference query evaluation which assume preference relations to be transitive[12,6].Example 4. A popular preference query evaluation algorithm SFS [12] works as follows. Given a database table r and apreference relation (cid:3), SFS 1) sorts r according to a weak order consistent with (cid:3), 2) picks every tuple o from r in sorted(cid:5) (cid:3) o. If there at least one such tuple, thenorder and checks if there is any tuple oin r that appeared before o such that oo /∈ w(cid:3)(r) (i.e., not among the best in r according to (cid:3)) and is discarded, and otherwise o ∈ w(cid:3)(r).Take r = {o1, o3}, and (cid:3) = {o1o2, o2o3} (i.e., not transitive). Applying SFS to r and (cid:3) results in w(cid:3)(r) = {o1, o3}. Notethat SFS fails to return the correct answer (which is w(cid:3)(r) = {o1}) due to the intransitivity of (cid:3): the tuple o2, the onlytuple that dominates o3, is discarded before it can prevent o3 from being output.(cid:5)Hence, relaxing the SPO properties of preference relations would require developing new preference query evaluationalgorithms that are likely to be less efficient [8]. Moreover, the approach of contracting preference relations we proposein this paper has the property of closure: both the original and the contracted preference relations are SPOs. Closure isimportant because it makes iterating contraction (or revision [11]) possible.As illustrated in Examples 1 and 2, the essence of the preference contraction approach we propose here is the following:when discarding a subset CON of a preference relation (cid:3), some preferences additional to CON should be discarded to make the resultingof (cid:3) which contains CON and whose removal from (cid:3) preserves the SPO propertiespreference relation an SPO. A subset Pof the modified preference relation is called a full contractor of (cid:3) by CON. The set Pm of alternative minimal full contractorsfor a given (cid:3) and CON may contain a large or even infinite number of elements. How to perform contraction in such cases?−There are essentially two possibilities:• Minimal contraction: The user does not care which full contractor from Pm is chosen; the goal is to change the prefer-ence relation minimally.• Meet contraction: The user does not know (or does not want to reveal) which full contractor from Pm to choose. So itis only safe to remove all P− ∈ Pm from (cid:3). In this case, the minimality of change may be sacrificed.D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–11211095Fig. 3. Meet contraction.We notice that the two approaches to preference contraction are similar to minimal contraction and meet contraction usedin belief revision [19]. They are justified by similar reasons. Section 8 contains a comparison analysis of the frameworkproposed here and preference change in belief revision.Example 5. Consider Example 3 and the contraction of (cid:3)1 by CON1. The set of all minimal full contractors Pm of (cid:3)1 by−CON1 is {P2 from (cid:3)1. The result of themeet contraction is shown in Fig. 3.}. The meet contraction corresponds to picking and removing both P−1 and P−1 , P−2The operators of preference contraction – minimal contraction and meet contraction – describe two extreme cases.However, they share an important property: after specifying CON and the type of the contraction (minimal or meet), theuser has no further control over the result.To overcome this disadvantage, we also introduce two variants of these contraction operators: preference-protecting min-imal contraction and preference-protecting meet contraction. These operators require the user to provide a set of preferences+ ⊆ (cid:3) which she believes must hold after the contraction (i.e., none of them should be contracted). This gives the userPlimited control over the result of the contraction.• Preference-protecting minimal contraction: We choose some Pfrom (cid:3). The minimality of change is preserved in this case because Pof Pm).− ∈ Pm that protects P−+ = ∅) and remove itis a minimal full contractor (i.e., a member− ∩ P(i.e., P+• Preference-protecting meet contraction: We choose all P− ∈ Pm protecting P+(i.e., P− ∩ P+ = ∅) and remove themfrom (cid:3).Example 6. Take the set of minimal contractors Pm = {Ppreference set Pprotecting minimal contraction will return Pset of all minimal full contractors protecting Pprotecting meet contraction.} from Example 3. Assume that the user wants to protect the−+ = {t2t3} from contraction. Out of the full contractors {P}, only P1 protects it. Hence, the preference-−1 , and the result of the contraction is shown in Fig. 2(b). Similarly, since theis a singleton, Fig. 2(b) also shows the result of applying the preference-−1 , P−2+−1 , P−2We observe that the operators of minimal contraction and meet contraction are special cases (i.e., P+ = ∅) of preference-protecting minimal contraction and preference-protecting meet contraction, respectively.+Above we showed some simple use cases of preference contraction. In real-life applications, preference contraction canbe done in a step-by-step manner by collecting user feedback and elaborating contraction: the user can change the sets CON, undo contraction, or vary the contraction parameters and operators. Such feedback may be collected from the usersand Pdirectly, by asking them questions about relationships of certain objects [4], or indirectly, e.g., by analyzing users’ clicks onweb pages or critiques of various parameters of objects [9]. However, the details of such usage scenarios are beyond thescope of this work.The main results of the paper are as follows:1. We present necessary and sufficient conditions for minimality of full contractors.2. We propose two algorithms for minimal preference contraction: the first for finitely representable preference relationsand the second for finite preference relations. The algorithms require that CON be finitely stratifiable.3. We show that for the class of preference formulas studied in this paper checking finite stratifiability can be performedusing quantifier elimination.4. We show how to reduce minimal preference-protecting contraction to minimal contraction.5. We show how meet and preference-protecting meet contraction can be accommodated in our framework.6. We study the relationship of preference contraction to belief contraction and revision.7. We perform experimental evaluation ofthe proposed framework and presentthe results ofthe experiments(Appendix A).2. Basic notionsThe preference relation framework we use in the paper is a variation of the one proposed in [10]. Let A = { A1, . . . , Am}is associated with a domain Di . We consider here two kinds of infinitebe a fixed set of attributes. Every attribute Aidomains: C (uninterpreted constants) and Q (rational numbers). Then the universe U of tuples is defined as1096D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–1121U =(cid:4)Ai ∈ADiWe assume that two tuples o and o(cid:5)are equal iff the values of their corresponding attributes are equal.Definition 1. A binary relation (cid:3) ⊆ U × U is a preference relation, if it is a strict partial order (SPO) relation, i.e., transitiveand irreflexive.Binary relations R ⊆ U × U considered in the paper are finite or infinite. Finite binary relations are represented as finitesets of pairs of tuples. The infinite binary relations we consider here are finitely representable as formulas. Given a binary(cid:5)). A formula representation F (cid:3) of arelation R, its formula representation is denoted by F R . That is, R(o, opreference relation (cid:3) is called a preference formula.We consider two kinds of atomic formulas here:(cid:5)) iff F R (o, o• Equality constraints: o. Ai = o(cid:5). Ai , o. Ai (cid:13)= o(cid:5). Ai , o. Ai = c, or o. Ai (cid:13)= c, where o, o(cid:5)are tuple variables, Ai is a C -attribute,and c is an uninterpreted constant;• Rational-order constraints: o. Aiθo(cid:5). Ai or o. Aiθ c, where θ ∈ {=, (cid:13)=, <, >, (cid:2), (cid:3)}, o, o(cid:5)are tuple variables, Aiis a Q -attribute, and c is a rational number.A preference formula whose all atomic formulas are equality (resp. rational-order) constraints will be called an equality(resp. rational order) preference formula. If both equality and rational-order constraints are used in a formula, the formulawill be called an equality/rational-order formula or simply ERO-formula. Without loss of generality, we assume that allpreference formulas are quantifier-free because ERO-formulas admit quantifier elimination.We also use the representation of binary relations as directed graphs, both in the finite and the infinite case.Definition 2. Given a binary relation R ⊆ U × U and two tuples x and y such that xR y (xy ∈ R), xy is an R-edge from x to y.A path in R (or an R-path) from x to y is a finite sequence of R-edges such that the start node of the first edge is x, theend node of the last edge is y, the end node of every edge (except the last one) is the start node of the next edge in thesequence, and no R-edge appears more than once in it. The sequence of nodes participating in an R-path is an R-sequence.The length of an R-path is the number of R-edges in the path. The length of an R-sequence is the number of nodes in it.An element of a preference relation is called a preference. We use the symbol (cid:3) with subscripts to refer to preferencerelations. We write x (cid:4) y as a shorthand for (x (cid:3) y ∨ x = y). We also say that x is preferred to y and y is dominated by xaccording to (cid:3) if x (cid:3) y.In this paper, we present several algorithms for finite relations. Such algorithms are implemented using the relationalalgebra operators: selection σ , projection π , join (cid:14)(cid:15), set difference −, and union ∪ [24]. Set difference and union in relationalalgebra have the same semantics as in set theory, provided the argument relations are compatible. The semantics of theother operators are as follows:• Selection σC (R) picks from the relation R all the tuples for which the condition C holds. The condition C is a Booleanexpression involving comparisons between attribute names and constants.• Projection πL(R) returns a relation which is obtained from the relation R by leaving in it only the columns listed in Land dropping the others.• Join of two relations R and SR(cid:14)(cid:15)R. X1=S.Y 1,...,R. Xn=S.YnScomputes a product of R and S, leaves only the tuples in which R. X1 = S.Y 1, . . . , R. Xn = S.Yn, and drops the columnsS.Y 1, . . . , S.Yn from the resulting relation.When we need more than one copy of a relation R in a relational algebra expression, we add subscripts to the relationname (e.g. R1, R2, etc.).3. Preference contractionPreference contraction is an operation of discarding preferences. We assume that when the user intends to discardsome preferences, he or she expresses the preferences to be discarded as a binary relation called a base contractor. Theinterpretation of each pair in a base contractor is that the first tuple should not be preferred to the second tuple. Werequire base contractor relations to be subsets of the preference relation to be contracted. Hence, a base contractor isirreflexive but not necessary transitive. Apart from the containment in the original preference relation, we impose no otherrestrictions on the base contractors (e.g., they can be finite or infinite), unless stated otherwise. Throughout the paper, basecontractors are typically referred to as CON.D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–11211097Fig. 4. (cid:3) and CON from Example 7.Fig. 5. (cid:3) and CON from Example 8. Transitive edges are omitted.Definition 3. A binary relation Ppreference relation (i.e., an SPO). The relation ((cid:3) − PA relation Pcontractor P−is a minimal full contractor of (cid:3) by CON if P−.of (cid:3) by CON s.t. P(cid:5) (cid:3) P(cid:5)−−is a full contractor of a preference relation (cid:3) by CON if CON ⊆ P− ⊆ (cid:3), and ((cid:3) − P−) is a−) is called the contracted relation.is a full contractor of (cid:3) by CON, and there is no other fullDefinition 4. A preference relation is minimally contracted if it is contracted by a minimal full contractor. Contraction is theoperation of constructing a full contractor. Minimal contraction is the operation of constructing a minimal full contractor.(cid:5)We notice that the requirement of CON being a subset of (cid:3) introduced above is imposed solely for the sake of simplifyingthe discussion. Indeed, if according to the user preference relation (cid:3), a tuple o is not better than o, then removing thefrom (cid:3) is trivial. Moreover, our definition of preference contraction guarantees that such a preferencepreference of o over ocannot appear in the contracted (cid:3), because a contracted preference relation is always a subset of the original one. Therefore,contracting (cid:3) by some CON. At the same time,if preference contraction is used in conjunction with preference revision [11] (which may result in adding new preference∗ − (cid:3)). However, theto the revision preference relation), some special care has to be taken of the preferences in (CONdiscussion of such techniques is outside of the scope of the current paper.not contained in (cid:3) is equivalent to contracting (cid:3) by CON = (cid:3) ∩ CON∗∗(cid:5)According to Definition 3, minimality of full contractor is defined in terms of set containment. Obviously, other definitionsare possible. For instance, minimality can be defined in terms of the cardinality of a full contractor. However, in this paper,we focus on developing techniques of preference contraction which would work for finite as well as finitely representable(i.e., possibly infinite) preference relations. It is clear that the minimality-as-minimum-cardinality criterion cannot be usedin the latter case.The notion of a minimal full contractor narrows the set of full contractors. However, as we illustrate in Example 7,a minimal full contractor is generally not unique for the given preference and base contractor relations. Moreover, thenumber of minimal full contractors for infinite preference relations can be infinite. Thus, minimal contraction differs fromminimal preference revision [11] which is uniquely defined for given preference and revising relations.Example 7. Take the preference relation (cid:3) which is a total order of {x1, . . . , x4} (Fig. 4). Let the base contractor relation CONbe {x1x4}. Then the following sets are minimal full contractors of (cid:3) by CON: P= {x3x4, x2x4, x1x4},P= {x1x2, x1x3, x1x4}, P= {x1x2, x3x4, x1x4}, and P= {x1x3, x2x4, x2x3, x1x4}.−2−1−4−3The number of minimal full contractors can be rather large. As the following example illustrates, it is in some casesexponential in the number of edges in base contractor.Example 8. Let a preference relation (cid:3) be a total order of {x1, . . . , x2n+1} for some n (i.e., xi (cid:3) x j for 1 (cid:2) i < j (cid:2) 2n + 1),and CON = {x2i+1x2i+3 | i ∈ [0, n − 1]}, consisting of n edges. To remove an edge x2i+1x2i+3 from (cid:3) and make the resultingrelation transitive, we also need to remove either x2i+1x2i+2 or x2i+2x2i+3 from it. Thus, we have 2n possible full contractors.It is easy to show that each of them is minimal.Another important observation here is that the contracted preference relation is defined as a subset of the originalpreference relation. We want to preserve the SPO properties – transitivity and irreflexivity – of preference relations. Sinceany subset of an irreflexive relation is also an irreflexive relation, no additional actions are needed to preserve irreflexivityduring contraction. However, not every subset of a transitive relation is a transitive relation. We need to consider paths inthe original preference relation, which, by transitivity, may produce CON-edges to be discarded. We call such paths CON-detours.Definition 5. Let (cid:3) be a preference relation, and P ⊆ (cid:3). Then a (cid:3)-path from x to y is a P -detour if xy ∈ P .First, let us consider the problem of finding any full contractor, not necessary a minimal one. As we showed above,a contracted preference relation cannot have any CON-detours. To achieve that, some additional edges of the preference1098D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–1121Fig. 6. Φ(xy) for Example 9.relation have to be discarded. However, when we discard these edges, we have to make sure that there are no paths in thecontracted preference relation which produce the removed edges. Hence, a necessary and sufficient condition for a subsetof a preference relation to be its full contractor can be formulated in an intuitive way.Lemma 1. Given a preference relation (i.e., an SPO) (cid:3) and a base contractor CON, a relation Piff CON ⊆ P−) contains no paths from x to y., and for every xy ∈ P, ((cid:3) − P−−− ⊆ (cid:3) is a full contractor of (cid:3) by CON, ((cid:3) − P−−) follows from the irreflexivity of (cid:3). Assume ((cid:3) − PProof. ⇐ Prove that if for all xy ∈ Pof ((cid:3) − P−xy /∈ ((cid:3) − Pthen the assumption of transitivity of (cid:3) is violated.⇒ First, CON (cid:4) Px to y in ((cid:3) − P−−) for xy ∈ Pimplies that ((cid:3) − P−). If xy ∈ Pimplies that P−−then the path xz, zy is not disconnected, which contradicts the initial assumption. If xy /∈ P−) contains no paths from x to y, then ((cid:3) − P−) is not transitive, i.e., there are xz, zy ∈ ((cid:3) − P−) is an SPO. The irreflexivity−) but−,is not a full contractor of (cid:3) by CON by definition. Second, the existence of a path from−) is not transitive, which violates the SPO properties. (cid:2)−Now let us consider the property of minimality of full contractors. Let Pbe any minimal full contractor of a preferencerelation (cid:3) by a base contractor CON. Pick any edge xy of P. An important question which arises here is why is xy a member? The answer is obvious if xy is also a member of CON: every CON-edge has to be removed from the preferenceof Prelation. However, what if xy is not a member of CON? To study this problem, we introduce the notion of the outer edge setof an edge belonging to a full contractor relation.−−Definition 6. Let CON be a base contractor of a preference relation (cid:3), and Pxy ∈ (P− − CON), and−be a full contractor of (cid:3) by CON. LetΦ0(xy) = {xy},Φi(xy) =(cid:5)ui v i ∈ Pand(cid:6)(cid:6) ∃ui−1 v i−1 ∈ Φi−1(xy).ui = ui−1 ∧ v i−1 v i ∈−(cid:2)v i−1 = v i ∧ ui ui−1 ∈for i > 0(cid:3) − P(cid:3)(cid:7)−,(cid:2)(cid:3)−∨(cid:3) − PThen the outer edge set Φ(xy) for xy is defined asΦ(xy) =∞(cid:8)i=0Φi(xy)−Intuitively, the outer edge set Φ(xy) of an edge xy ∈ (Pwhich(i.e., added back to the preference relation (cid:3)) to preserve the full contractor property of theshould be removed from P(i.e., added back to the preference relation). The reasoning here is as follows. Whenresult, should xy be removed from P−for some i, Φi(xy) is removed from P. Otherwise, for every edge inΦi+1(xy), there is a two-edge path in (cid:3), one of whose edges is in Φi(xy) while the other is not contracted. Hence, if theSPO properties of ((cid:3) − Prequires recursively removing the entire Φ(xy)from P−) need to be preserved, removing xy from P, then Φi+1(xy) has also to be removed from P− − CON) contains all the edges of a full contractor P−−−−−.The next example illustrates the inductive construction of an outer edge set. Some properties of outer edge sets areshown in Lemma 2.Example 9. Let a preference relation (cid:3) be the set of all edges in Fig. 6, and Pconstruct Φ(xy) (assuming that xy is not an edge of the base contractor CON).−be defined by the dashed edges. Let us• Φ0(xy) = {xy};• Φ1(xy) = {xv, xz};• Φ2(xy) = {uv, uz}.Thus, Φ(xy) = {xy, xv, xz, uv, uz}.D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–11211099Lemma 2. Let Phas the following properties:−be a full contractor of a preference relation (cid:3) by a base contractor CON. Then for every xy ∈ (P− − CON), Φ(xy)1. for all uv ∈ Φ(xy), u (cid:4) x and y (cid:4) v;2. for all uv ∈ Φ(xy), ux, yv /∈ P3. if (Φ(xy) ∩ CON) = ∅, then P−;(cid:5) = (P− − Φ(xy)) is a full contractor of (cid:3) by CON.Proof. First, we prove that Properties 1 and 2 hold. We do it by induction on the index of Φi(xy) used to construct Φ(xy).Since by definition {xy} = Φ0(xy), Properties 1 and 2 hold by the construction of Φ0. Now let Properties 1 and 2 hold forΦn(xy), i.e.,∀un vn ∈ Φn(xy) → un (cid:4) x ∧ y (cid:4) vn ∧ unx,y vn /∈ P−Pick any un+1 vn+1 ∈ Φn+1(xy). By construction of Φn+1(xy), we have∃un vn ∈ Φi(xy).un+1 = un ∧ vn (cid:3) vn+1 ∧ vn vn+1 /∈ P− ∨un+1 (cid:3) un ∧ vn = vn+1 ∧ un+1un /∈ P−(1)(2)−is implied by (1),Note that un+1 (cid:4) x and y (cid:4) vn+1 follow from (1), (2), and transitivity of (cid:4). Similarly, un+1x, yvn+1 /∈ P(2), and transitivity of ((cid:3) − P−). Hence, Properties 1 and 2 hold for(cid:9)ni=0 Φi(xy) for any n.. The latter follows from CON ⊆ P(cid:5)) is an SPO and CON ⊆ P(cid:5)). Transitivity of ((cid:3) − PNow we prove Property 3: ((cid:3) − P(cid:5)) follows from irreflexivity of (cid:3). Assume ((cid:3) − PIrreflexivity of ((cid:3) − Puz, zv ∈ ((cid:3) − Pthat exactly one of uz, zv is in Φ(xy) and the other one is not in Φ(xy) and thus in ((cid:3) − Pzv ∈ ((cid:3) − Pcontradiction is derived in the case uz ∈ ((cid:3) − Pof (cid:3) by CON. (cid:2)and Φ(xy) ∩ CON = ∅.(cid:5)) and−) implies that at least one of uz, zv is in Φ(xy). However, Property 1 implies−). However, uz ∈ Φ(xy) and(cid:5)), i.e., we derive a contradiction. A similaris a full contractor(cid:5)) is not transitive, i.e., there are uv /∈ ((cid:3) − P−) imply uv ∈ Φ(xy), and thus uv ∈ ((cid:3) − (P−) and zv ∈ Φ(xy). Therefore, ((cid:3) − P− − Φ(xy))) = ((cid:3) − P(cid:5)) is an SPO and P−(cid:5)(cid:5)Out of the three properties shown in Lemma 2, the last one is the most important. It says that if an edge xy of a fullcontractor is not needed to disconnect any CON-detours, then that edge may be dropped from the full contractor alongwith its entire outer edge set. A more general result which follows from Lemma 2 is formulated in the next theorem. Itrepresents a necessary and sufficient condition for a full contractor to be minimal.Theorem 1 (Full-contractor minimality test). Let P−CON iff for every xy ∈ P−, there is a CON-detour in (cid:3) in which xy is the only Pbe a full contractor of (cid:3) by CON. Then P-edge.−−is a minimal full contractor of (cid:3) by−is a minimal full contractor.Proof. ⇐ The proof in this direction is straightforward. Assume that for every edge of the full contractor Pthere exists−at least one CON-detour in which only that edge is in Ploses a subset P containing that edge, then there is a. If P− − P ) is not a full contractor of (cid:3) by CON by Lemma 1. Hence,− − P ), and thus (PCON-detour in (cid:3) having no edges in (P−P⇒ Let P, 1) there is no CON-detour-edge. If 1) holds, then Φ(xy) has nowhich xy belongs to, or 2) any CON-detour xy belongs to has at least one more P− − Φ(xy)) is a full contractor of (cid:3) by CON. Since Φ(xy) isedges in CON by construction. Thus, Lemma 2 implies that (Pnot empty, we get that Pis not a minimal full contractor which is a contradiction. If 2) holds, then we use the sameargument as above and show that Φ(xy) ∩ CON = ∅. If Φ(xy) ∩ CON is not empty (i.e., some uv ∈ Φ(xy) ∩ CON), then byLemma 2,be a minimal full contractor. For the sake of contradiction, assume for some xy ∈ P−−−−−u (cid:4) x ∧ x (cid:3) y ∧ y (cid:4) v ∧ ux,y v /∈ P−and thus there is a CON-detour going from u to v in which xy is the only Ption. (cid:2)−-edge. This contradicts the initial assump-Note that using directly Definition 3 to check the minimality of a full contractor Prequires checking the full contractor. In contrast, the minimality checking method shown in Theorem 1 requires checking properties−properties of all subsets of Pof distinct elements of P−with respect to its other members.−Sometimes a direct application of the minimality test from Theorem 1 is hard because it does not give any bound onthe length of CON-detours. Hence, it is not clear how the test can be formulated in terms of validity of finite formulas.Fortunately, the transitivity of preference relations implies that the minimality condition from Theorem 1 can be stated interms of paths of length at most three.Corollary 1. A full contractor Pedges among which only xy is in P.−of (cid:3) by CON is minimal iff for every edge xy ∈ P−−, there is a CON-detour consisting of at most three1100D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–1121Fig. 7. Checking minimality of a full contractor.−, pick any CON-detour T in which the only PProof. ⇐ Trivial.⇒ For every xy ∈ P-edge is xy. If its length is less or equal to three, thenthe corollary holds. Otherwise, x is not the start node of T , or y is not the end node of T , or both. Let the start node u ofT be different from x. Since the only common edge of T and Pis xy, every edge in the path from u to x is an element of−) for the end node of T if y is different((cid:3) − P. (cid:2)from v. Hence, there is a CON-detour of length at most three in which xy is the only element of P−). Similarly, yv ∈ ((cid:3) − P−). Transitivity of ((cid:3) − P−) implies ux ∈ ((cid:3) − P−−−As a result, the following tests can be used to check the minimality of a full contractor P−. In the finite case, P−isminimal if the following relational algebra expression results in an empty set(cid:10)πP 2. X,P 2.Y(cid:2)P −(R1 − P 1)πP 2. X,P 2.Y (P 2(cid:14)(cid:15)P 2.Y =R3. X(cid:2)πP 2. X,P 2.Y(cid:14)(cid:15)R1.Y =P 2. X(R3 − P 3)P 2(cid:14)(cid:15)P 2.Y =R3. X(cid:14)(cid:15)P 2. X=C. X, R3.Y =C.Y(R3 − P 3)(cid:14)(cid:15)R1. X=C. X, R3.Y =C.YC(cid:3)∪(cid:11)C) ∪(cid:3)C∪ C(R1 − P 1)(cid:14)(cid:15)R1.Y =P 2. XP 2(cid:14)(cid:15)R1. X=C. X, P 2.Y =C.Yfor the tables R, C and P with columns X and Y , storing (cid:3), CON, and Prenamings of R and P , respectively. Applying the minimality test to finite relations is illustrated in the next example.correspondingly. R1, R3, and P 1, P 2, P 3 refer to−Example 10. Take a preference relation represented by the table R, and a base contractor represented by the table C(Fig. 7(a)). Consider the table P representing a full contractor of R by C . Then the result of the relational algebra expressionabove evaluated for these tables is shown in the table D. Since it is not empty, the full contractor represented by P is notminimal. The minimality of P can be achieved by removing from it any (but only one) tuple from D.In the finitely representable case, P−is minimal if the following formula is valid∀x, y(cid:2)(cid:2)(cid:3)F P − (x, y) ⇒ F (cid:3)(x, y) ∧ ∃u, v.F CON(u, v) ∧F (cid:3)(u, x) ∨ u = x(cid:3)∧ ¬F P − (u, x) ∧ ¬F P − ( y, v)F (cid:3)( y, v) ∨ y = v(cid:3)(cid:2)∧We note that when the relations are definable using ERO-formulas, checking minimality of a full contractor can be doneby performing quantifier elimination on the above formula.Example 11. Let a preference relation (cid:3) be defined by the formula F (cid:3)(o, obase contractor CON of (cid:3) be defined by the formula(cid:3)(cid:2)o, o(cid:5)≡(cid:2)F CON1 (cid:2) o.d (cid:2) 2 ∧ o(cid:5).d = 4(cid:3)(cid:2)o.d = 0 ∧ o(cid:5)∨.d = 3(cid:3)(cid:5)) ≡ o.d < o(cid:5).d, where d is a Q -attribute. Let a(Fig. 7(b)). Denote the relation represented by the first and second disjuncts of F CON as CON1 and CON2 correspondingly.The relation P−defined by F P − is a full contractor of (cid:3) by CON(cid:3)(cid:2)(cid:3)≡1 (cid:2) o.d (cid:2) 2 ∧ 2 < o.d (cid:2) 4∨(cid:5)(cid:2)o.d = 0 ∧ 0 < o(cid:3)(cid:5).d (cid:2) 3(cid:2)o, o(cid:5)F P −D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–11211101Fig. 8. Preference contraction.−2 correspondingly. We. By the corollary, we need to consider CON-detours of length at most three.−1 -edge starts a one- or two-edge CON-detour with the corresponding CON1-edge. Moreover, the second−1 -edges.−2 -edges. All CON-detours, which these edges belong to, correspond to CON2-edges and are started bywith the value. However,is not minimal by Corollary 1. To minimize it, we constructSimilarly, denote the relations represented by the first and the second disjuncts of F P − as P−use Corollary 1 to check the minimality of PNote that every Pedge of all such two-edge detours is not contracted by PNow we consider PPof d in (0, 1) and (2, 3], the second edge in the corresponding two-edge CON2-detour is not contracted by Pwhen d is in [1, 2], the second edge is already in PPwhich end in o(cid:2)o.d = 0 ∧−2 -edges. Hence, we need to consider only CON2-detours of length at most two. When a Pby removing the edges from P(cid:2). Hence, the minimal full contractor test is satisfied for P. Hence, Pwith d in [1, 2]−2 -edge ends in o1 (cid:2) o.d (cid:2) 2 ∧ 2 < o< 1 ∨ 2 < o−1 and P(cid:2)o, o.d (cid:2) 3.d (cid:2) 40 < o.d(cid:3)(cid:3)≡∨(cid:3)(cid:3)(cid:2)−−−−−∗(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)F P ∗4. Construction of a minimal full contractor(cid:9)nIn this section, we propose a method of computing a minimal full contractor. An approach for minimally contracting apreference relation (cid:3) by CON that seems intuitive is incremental contraction. Namely, one may try to partition CON arbitrarily−into subsets CON =i of the−intermediate preference relation ((cid:3) − P i−1) by CONi (given that P −1 = ∅), expecting that Pi will be a minimal−full contractor of (cid:3) by the entire CON. However, in the following example we show that to guarantee the minimality of P,the ways in which CON is partitioned and the intermediate preference relations are contracted by individual partitions haveto be chosen carefully.i=0 CONi , and in every i-th iteration (i = 0, . . . , n), compute a minimal full contractor P(cid:9)ni=0 P− =Example 12. Let the preference relation (cid:3) be a total order shown in Fig. 8(a), and a base contractor CON be {x1x3, x2x4}. Let−0 of (cid:3) by CON0 is {x1x3, x1x2}, andus partition CON into CON0 = {x1x3} and CON1 = {x2x4}. Then a minimal full contractor P−−∪ Pa minimal full contractor P1 is not a minimal full contractor0of (cid:3) by CON because its subset {x1x3, x2x4, x2x3} is a full contractor.−0 is {x2x4, x2x3}. However, the relation P−1 of (cid:3) − P− = PIn the algorithms for computing minimal full contractors proposed in this section, we essentially follow the approachdescribed above. First, we show a method of computing a full contractor of (cid:3) by CON. Then we show why such fullcontractor may fail to be minimal. Subsequently, we propose a method for partitioning CON into strata, such that an iterativecontraction of (cid:3) stratum-by-stratum results in a minimal full contractor.4.1. Stratification of base contractorWe illustrate the idea of computing full contractors using the set Pfollows: we took the CON-edge x1x4 and put in Prelation (cid:3) in Example 7, Pall edges starting CON-detours is a full contractor by CON.−−1 was constructed as1 from Example 7. The set P−1 all the edges which start some path from x1 to x4. For the preference−1 turned out to be a minimal full contractor. As shown in the next lemma, the set consisting ofLemma 3. Let (cid:3) be a preference relation and CON be a base contractor relation of (cid:3). Then− :=P(cid:5)xy(cid:6)(cid:6) ∃x(cid:5)v ∈ CON.x(cid:5) = x ∧ x(cid:5) (cid:3) y ∧ y (cid:4) v(cid:7)is a full contractor of (cid:3) by CON.Proof. By construction of Pfrom x to y is disconnected by its starting edge. Hence, P−is a full contractor of (cid:3) by CON. (cid:2)−, CON ⊆ P−. Lemma 1 implies that ((cid:3) − P−) is an SPO. Indeed, given any xy ∈ P−, every path1102D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–1121Fig. 9. Preference contraction.However, in the next example we show that such a full contractor is not always minimal. Recall that by Theorem 1,for every edge of a minimal full contractor there should be a CON-detour which shares only that edge with the contractor.However, it may be the case that an edge starting a CON-detour does not have to be discarded because the CON-detour isalready disconnected by another edge of the full contractor.−be defined as in Lemma 3. That is P−Example 13. Let a preference relation (cid:3) be a total order of {x1, . . . , x5} (Fig. 9(a)). Let a base contractor CON be {x1x4, x2x5}.−) is shown in Fig. 9(b) asLet P− − {x1x2}) (Fig. 9(c)) is also a full contractor of (cid:3) by CON. In fact,the set of solid edges. P(Pis not necessary. First, itis not a CON-edge. Second, the edge x2x4 of the CON-detour x1 (cid:3) x2 (cid:3) x4 is already in P− − {x1x2}) is a minimal full contractor of (cid:3) by CON. As we can see, having the edge x1x2 in P− = {x1x2, x1x3, x1x4, x2x3, x2x4, x2x5}. Then ((cid:3) − Pis not minimal because (P−−.As we have shown in Example 13, a minimal full contractor can be constructed by including in it only the edges whichstart some CON-detour, if the detour is not already disconnected. Thus, before adding such an edge to a full contractor, weneed to know if an edge in the detour but not starting it is already in the full contractor. So instead of contracting (cid:3) byCON at once, we split CON into strata, and contract (cid:3) incrementally by the strata of CON. Essentially, a stratum of CONconsists of the edges whose detours can be disconnected in a single iteration without violating the minimality of the fullcontractor computed so far. The method of splitting a base contractor into strata we propose to use is as follows.Definition 7. The stratum index of xy ∈ CON is the maximum length of a (cid:3)-path started by y and consisting of the end nodes ofCON-edges. A stratum is the set of all CON-edges with the same stratum index.This method of stratification has the following useful property. If a preference relation is minimally contracted by thestrata with indices of up to n, then minimally contracting that relation by the stratum with the index n + 1 guarantees theminimality of the entire contraction.Clearly, if a preference relation is infinite, a tuple can start (cid:3)-paths of arbitrarily large lengths. Therefore, the stratumindex of a CON-edge may be undefined. We exclude such cases here, so we can assume that for each edge of CON relations,the stratum index is defined.Definition 8. Let CON be a base contractor of a preference relation (cid:3). Let K CON = { y | ∃x.xy ∈ CON}, and (cid:3)CON = (cid:3) ∩ KCON ×KCON. Then CON is stratifiable iff for every y ∈ KCON there is an integer k such that all the paths started by y in (cid:3)CON are oflength at most k. CON is finitely stratifiable iff there is a constant k such that all paths in (cid:3)CON are of length at most k.The intuition beyond the definition above is as follows. The K CON defines the set of all the end nodes of CON-edges, i.e.,all the nodes which will lose incoming edges after the contraction. The relation (cid:3)CON is the restriction of (cid:3) to the set KCON.Definition 8 implies that for every edge of a stratifiable CON, the stratum index is defined. Since the shortest path in(cid:3)CON is of length 0, the least stratum index for stratifiable relations is 0.Example 14. Take a preference relation (cid:3)2t (cid:3)2 t(cid:5) ≡ t.price < t(cid:5).pricewhere the domain is the set of rational numbers Q , and base contractors CON1 and CON2(cid:3)(cid:3)(cid:5)(cid:5)(cid:2)t, t(cid:2)t, tCON1CON2= t.price < 10 000;= t.price < t.price ∧(cid:5)(cid:2)t(cid:5).price = 5000 ∨ t(cid:5).price = 6000(cid:3)Then KCON1 and KCON2 are defined by F CON K1(cid:3)CON1 and (cid:3)CON2 are defined by(cid:5)(cid:5)(cid:3)(cid:2)t, t(cid:2)t, tF (cid:3)CON1F (cid:3)CON2= t.price < t= t.price = 5000 ∧ t.price(cid:3)(cid:5)(cid:5).price = 6000(x) = (cid:22) and F CON K2(x) = x.price = 5000 ∨ x.price = 6000, respectively. Hence,D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–11211103Clearly, the length of paths in (cid:3)CON1 is unbounded. Hence, CON1 is not finitely stratifiable. The relation CON2 is finitelystratifiable – the longest path in (cid:3)CON2 is of length 1.Above we illustrate the finite stratifiability property of a base contractor. The preference relation and the base contractorsare represented as ERO-formulas. It is an open question whether there are stratifiable relations, defined using ERO-formulas,which are not finitely stratifiable.4.2. Computation of minimal full contractorBelow we present an approach of constructing a minimal full contractor for a stratifiable relation CON.Theorem 2 (Minimal full contractor construction). Let (cid:3) be a preference relation, and CON be a stratifiable base contractor of (cid:3). Let−Li be the set of the end nodes of all CON-edges of stratum i. Then P, defined as follows, is a minimal full contractor of (cid:3) by CON− =P∞(cid:8)i∈0E iwhereE i =−−1P(cid:5)xy(cid:6)(cid:6) ∃v ∈ Li.xv ∈ CON ∧ x (cid:3) y ∧ y (cid:4) v ∧ y v /∈(cid:2)(cid:3)(cid:7)P−i−1∪ CON= ∅P−i=i(cid:8)j=0E iIntuitively, the set E i contains all the CON-edges of stratum i along with the edges of (cid:3) which need to be discarded tocontract the preference relation by that stratum. Pis the union of all such sets up to stratum i.−iProof of Theorem 2. Every E i contains the CON-edges of stratum i. Thus, Pis an SPO. Its irreflexivity follows from the irreflexivity of (cid:3). Transitivity is proved by induction on stratum index.contains CON. Now we prove that ((cid:3) − P−−)It is given that (cid:3) is transitive. Assume ((cid:3) − P−n ) is transitive. Prove that ((cid:3) − P−n+1) = ((cid:3) − (P−n∪ En+1)) is transitive.For the sake of contradiction, assume∃x, y, z.xy /∈(cid:2)(cid:3) − P−n+1(cid:3)∧ xz,zy ∈(cid:2)(cid:3) − P−n+1(cid:3)which impliesTransitivity of ((cid:3) − P−nxz, zy /∈ En+1 ∪ P−n ) and (1) imply xy ∈ ((cid:3) − P(cid:2)∃v ∈ Ln.xv ∈ CON ∧ x (cid:3) y ∧ y (cid:4) v ∧ y v /∈P−n ) and thus xy ∈ En+1. Hence,−n∪ CON(cid:3)(1)(2)(3)According to (3), y (cid:4) v. If y = v, then (2), (1) and (3) imply xz ∈ En+1 which is a contradiction. If y (cid:3) v, then xz /∈ En+1−∪ CON by the construction of En+1. Note that zv ∈ CON implies zv is a CON-edge of stratum index n + 1 andimplies zv ∈ Pn−thus either zy ∈ En+1 or yv ∈ Pn implies intransitivity of−)((cid:3) − Pis not transitive. The violation of transitivity means that there is an edge xy ∈ Psuch that there exists a path from x to−n ),y none of whose edges is in Pwhich is a contradiction. Thus P−n ), which contradicts the inductive assumption. Thus, ((cid:3) − P−n+1) is transitive by induction. Assume that ((cid:3) − P−n for some n, that implies intransitivity of ((cid:3) − P(Lemma 1). Since xy must be in Pis a full contractor of (cid:3) by CON.∪ CON, which contradicts (2) and (3). If zv ∈ P−n , then zy, yv /∈ P−n−−−Now we prove that Pis a minimal full contractor. If it is not, then by Theorem 1, there is xy ∈ Pis no CON-detour which shares with PEn, there is a CON-detour x (cid:3) y (cid:4) v which shares with P−Pevery CON-detour which may be started by yv must have the stratum index not greater than n. (cid:2)for which thereonly the edge xy. Note that xy ∈ Pimplies xy ∈ En for some n. By definition of−n only xy. Since all CON-detours which xy belongs to have other−n , there must exist k > n such that yv ∈ Ek. However, that is impossible by construction:-edges, yv ∈ P. Since yv /∈ P−−−−−Example 15. Let (cid:3) and CON be as in Example 13 (Fig. 10(a), the transitive edges are omitted for clarity). We use Theorem 2to construct a minimal full contractor of (cid:3) by CON. The relation CON has two strata with the end nodes L0 = {x5}, L1 = {x4}.−Then E0 = {x2x3, x2x4, x2x5}, P= E0 ∪ E1, and a minimal full contractor of (cid:3) by CON is1P= E0, E1 = {x1x3, x1x4}, P− = P−0−1 .1104D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–11214.3. Prefix and suffix full contractorsFig. 10. Using Theorem 2 to compute a minimal full contractor.It is easy to observe that the minimal full contractor Pconstructed in Theorem 2 has the property that its every edgexy starts at least one CON-detour in which xy is the only P-edge. Full contractors which have this property are calledprefix. Prefix full contractors are minimal by Theorem 1. It turns out that for a given preference relation and a given basecontractor, a prefix full contractor is unique.−−Proposition 1. Given a preference relation (cid:3) and a stratifiable base contractor CON, there exists a unique prefix full contractor P(cid:3) by CON.−ofProof. The existence of a prefix full contractor follows from Theorem 2. The fact that every prefix full contractor is equal to−constructed by Theorem 2 can be proved by induction on the stratum index of CON. Namely, we show that for every n,P−n is contained in every prefix full contractor of (cid:3) by CON. Clearly, the set E 0 contracting (cid:3) by the 0th stratum of CONP−n is in any prefix full contractor of (cid:3) by CON. If an edgehas to be in any prefix full contractor. Assume every edge in Pxy ∈ En+1 − CON, then there is a CON-detour x (cid:3) y (cid:3) v in which xy is the only P-edge (i.e., yv /∈ P). Hence if xy is not(cid:5)in some prefix full contractor Pis enough to disconnect everyCON-detour with index up to n, and yv can only start a CON-detour with the stratum index up to n. Hence Pis not aminimal full contractor and Pis a unique prefix full contractor. (cid:2)by Lemma 1. However, P, then yv has to be in P(cid:3) P−n−−−(cid:5)(cid:5)(cid:5)A natural question which arises after the discussion of prefix full contractors is whether the suffix full contractor can beof (cid:3) by CON is suffix if every edgeconstructed similarly to the prefix full contractor above. Analogously, a full contractor Pxy of P-edge. Note that as in the case of the prefix fullcontractor, the suffix full contractor is minimal by Theorem 1. It turns out that the connection between prefix and suffixfull contractors is straightforward. To define it, we use the notion of the inverse of a binary relation.ends at least one CON-detour of (cid:3) in which xy is the only P−−−Definition 9. Given a binary relation R ⊆ U × U , the inverse Rinv of R isRinv = {xy | yx ∈ R}Take a preference relation (cid:3) and its base contractor CON. It is clear that (cid:3)inv is a preference relation (i.e., an SPO), andCONinv is a base contractor of (cid:3)inv (i.e., CONinv ⊆ (cid:3)inv).Proposition 2. Take a preference relation (cid:3) and its base contractor CON. Let PPinv is the suffix full contractor of (cid:3) by CON.−−be the prefix full contractor of (cid:3)inv by CONinv. ThenProof. The fact that Prelation. To prove that Pevery edge xy of Pinverse of that detour and is the only P−−inv is a full contractor of (cid:3) by CON follows from the definitions of SPO and the inverse of a binary−implies thatends theinv is the suffix full contractor of (cid:3) by CON, recall that the prefix property of Pstarts some CONinv-detour of (cid:3)inv in which xy is the only P-edge. In (cid:3), the edge yx ∈ P−−−−inv-edge in it. (cid:2)Note that Proposition 2 and the fact that the inverse of the inverse of a relation R is R itself imply that the suffix fullcontractor of (cid:3) by CON is unique. To compute the suffix full contractor of (cid:3) by CON, one may compute (cid:3)inv and CONinv,use Theorem 2 to compute the prefix full contractor P. At the sametime, it is important to remember that one of the preconditions of that theorem is that CON must be stratifiable w.r.t. (cid:3).By definition of inverse, CON being stratifiable w.r.t. (cid:3) does not imply that CONinv is stratifiable w.r.t. (cid:3)inv and vice versa.of (cid:3)inv by CONinv, and compute the inverse of P−−5. Contraction by finitely stratifiable base contractorsIn this section, we consider the practical issues of computing minimal full contractors. In particular, we show howthe method of constructing a prefix full contractor we have proposed in Theorem 2 can be adapted to various classes ofpreference and base contractor relations.D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–11211105(x, y) := falseAlgorithm 1. minContr(F (cid:3), F CON)1: i = 02: F P−−13: F KCON ( y) := QE(∃x.F CON(x, y))4: F (cid:3)CON (x, y) := F CON(x, y) ∧ F KCON (x) ∧ F KCON ( y)5: F Li ( y) := getStratum(F (cid:3)CON , F KCON , i)6: while F Li is defined do7:F E i (x, y) := QE(∃v.F Li (v) ∧ F CON(x, v) ∧ F (cid:3)(x, y) ∧−i( y = v ∨ F (cid:3)( y, v) ∧ ¬(F P(x, y) ∨ F E i (x, y)(x, y) := F PF Pi := i + 1;F Li ( y) := getStratum(F (cid:3)CON , F KCON , i)−i−1−i−18:9:10:11: end while12: return F P−i( y, v) ∨ F CON( y, v))))Due to the connection between prefix and suffix full contractors discussed in the previous section, the same methodscan be used to compute suffix full contractors (with the overhead of computing inverses). From now on, we focus on prefixfull contractors only.Observe that the definition of the minimal full contractor in Theorem 2 is recursive. Namely, to find the edges we needto discard for contracting the preference relation by the stratum n + 1 of CON, we need to know which edges to discard forcontracting it by all the previous strata. It means that for base contractor relations which are not finitely stratifiable (i.e.,CON has infinite number of strata), the corresponding computation will never terminate.Assume that CON is a finitely stratifiable relation. First we note that any base contractor of a finite preference relation isfinitely stratifiable: all paths in such preference relations are not longer than the size of the relation, and base contractorsare required to be subsets of the preference relations. At the same time, if CON is a base contractor of an infinite preferencerelation, then it can be finitely stratifiable without being finite. In particular, it may be the case that the length of all pathsin (cid:3)CON is bounded, but the number of paths is infinite.Below we consider the cases of finite and finitely representable, finitely stratifiable base contractors separately.5.1. Computing the prefix full contractor: finitely representable relationsHere we assume that the relations CON and (cid:3) are represented by finite ERO-formulas F CON and F (cid:3). We aim to constructa finite ERO-formula F P − which represents the prefix full contractor of (cid:3) by CON. The function minContr(F (cid:3), F CON) shownabove exploits the method of constructing prefix full contractors from Theorem 2, adapted to formula representations ofrelations. All the intermediate variables used in the algorithm store formulas. Hence, for example, any expression in theform “F (x, y) := · · ·” means that the formula-variable F is assigned the formula written in the right-hand side, which hastwo free tuple variables x and y. The operator QE used in the algorithm computes a quantifier-free formula equivalent to itsargument formula. For ERO-formulas, the operator QE runs in time polynomial in the size of its argument formula (if thenumber of attributes in A is fixed), and exponential in the number of attributes in A.The function minContr (Algorithm 1) starts with an empty full contractor P−−1 (line 2), then the formulas F KCON andF (cid:3)CON representing KCON and (cid:3)CON are computed (lines 3 and 4) by definition of those sets. To get the 0-th stratum ofCON, the function getStratum is used (line 5). After that, in every iteration of the while-loop, we compute the formuladefining E i (line 7) as in Theorem 2, compute the formula representing the intermediate full contractor F P(line 8), andcompute the formula F Li representing the next stratum. The while-loop terminates when the next stratum contains noedges (i.e., F Li is not defined). Finally, the full contractor of (cid:3) by CON is returned.To compute formulas representing different strata of CON, getStratum (Algorithm 2) is used. It takes three parameters:the formula F (cid:3)CON representing the relation (cid:3)CON, the formula F KCON representing the set of the end nodes of CON-edges,and the stratum index i. It returns a formula which represents the set of the end nodes of CON-edges of stratum i, orundefined if the corresponding set is empty. That formula is computed according to the definition of a stratum.Proposition 3. Let CON be a finitely stratifiable base contractor of a preference relation (cid:3). Then Algorithm 1 terminates and computesthe prefix full contractor of (cid:3) by CON.−iProposition 3 holds because Algorithm 1 uses the construction from Theorem 2. Below we show an example of comput-ing the prefix full contractor for a finitely representable preference relation.Example 16. Let a preference relation (cid:3) be defined by the following formula(cid:3)(cid:2)o, o(cid:5)F (cid:3)≡ o.price < o(cid:5).priceand a base contractor CON (Fig. 11) be defined by1106D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–1121Algorithm 2. getStratum(F (cid:3)CON , F KCON , i)Require: i (cid:2) 01: if i = 0 then2:3: else4:F Li ( y) := QE(F KCON ( y) ∧ ¬∃x1(F (cid:3)CON ( y, x1)))F Li ( y) := QE((∃x1, . . . , xi .F (cid:3)CON ( y, x1) ∧ F (cid:3)CON (x1, x2) ∧ · · ·∧ F (cid:3)CON (xi−1, xi )) ∧ (¬∃x1, . . . , xi+1.F (cid:3)CON ( y, x1)∧ F (cid:3)CON (x1, x2) ∧ · · · ∧ F (cid:3)CON (xi , xi+1)))5: end if6: if QE(∃ y.F Li ( y)) then7:return F Li8: else9:10: end ifreturn undefined(cid:3)(cid:2)o, o(cid:5)≡F CON(cid:2)11 000 (cid:2) o.price (cid:2) 13 000 ∧ o(cid:5)(10 000 (cid:2) o.price (cid:2) 12 000 ∧ o.price = 15 000.price = 14 000)∨(cid:5)Fig. 11. Example 16.(cid:3)where price is a Q -attribute. Then F KCON (o) ≡ o.price = 14 000 ∨ o.price = 15 000 and F (cid:3)CON (o, o(cid:5)) (Fig. 11). The end nodes of the CON strata are defined by the following formulas:F KCON (o(cid:5)) ≡ F (cid:3)(o, o(cid:5)) ∧ F KCON (o) ∧F L0 (o) ≡ o.price = 15 000F L1 (o) ≡ o.price = 14 000The relations contracting all CON strata are defined by the following formulas(cid:3)(cid:3)(cid:2)o, o(cid:2)o, o(cid:5)(cid:5)F E0F E1≡ 11 000 (cid:2) o.price (cid:2) 13 000 ∧ 13 000 < o≡ 10 000 (cid:2) o.price (cid:2) 11 000 ∧ 13 000 < o(cid:5)(cid:5).price (cid:2) 15 000.price (cid:2) 14 000Finally, a full contractor P−of (cid:3) by CON is defined by F P − (o, o(cid:5)) ≡ F E1 (o, o(cid:5)) ∨ F E2 (o, o(cid:5)).The finite stratifiability property of CON is crucial for the termination of the algorithm: the algorithm does not terminatefor relations which are not finitely stratifiable. Hence, given a base contractor relation, it is useful to know if it is finitelystratifiable or not. Let us consider the formula F (cid:3)CON . Without loss of generality, we assume it is represented in DNF. Bydefinition, CON is a finitely stratifiable relation iff there is a constant k such that all (cid:3)CON-paths are of length at most k. Inthe next theorem, we show that this property can be checked by a single evaluation of the quantifier elimination operator.Theorem 3 (Checking finite stratifiability property). Let F R be an ERO-formula, representing an SPO relation R, in the following form(cid:3)(cid:2)o, o(cid:5)F R(cid:3)(cid:2)o, o(cid:5)= F R1∨ · · · ∨ F Rl(cid:3)(cid:2)o, o(cid:5)where F R i is a conjunction of atomic formulas. Then checking if there is a constant k such that the length of all R-paths is at most k canbe done by a single evaluation of QE over a formula of size linear in |F R |.In Theorem 3, we assume that each atomic formula using the operators (cid:2), (cid:3) is transformed to a disjunction of twoformulas, one which uses the strict comparison operator and the other using the equality operator. The proof of Theorem 3and the details of the corresponding finite stratifiability property test are provided in Appendix B.5.2. Computing prefix full contractor: finite relationsIn this section, we consider finite relations (cid:3) and CON. We assume that the relations are stored in separate tables: thepreference relation table R and the base contractor table C , each having two columns X and Y . Every tuple in a tablecorresponds to an element of the corresponding binary relation. Hence, R has to be an SPO and C ⊆ R. Here we presentan algorithm, Algorithm 3, for computing the prefix full contractor of a preference relation (cid:3) by CON represented by suchtables. Essentially, the algorithm is an adaptation of Theorem 2.D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–11211107Algorithm 3. minContrFinite(R, C)Require: R is transitive, C ⊆ R1: P ← C2: /* Get the end nodes of all C -edges */3: K ← πY (C)4: /* RC is related to R as (cid:3)CON to (cid:3) in Definition 8 */5: RC ← πR. X,R.Y (K1K2)R(cid:14)(cid:15)K1.Y =R. X(cid:14)(cid:15)K2.Y =R.Y6: while K not empty do7:8:9:10:11:/* Get the end nodes of the next stratum C -edges */E ← K − π X (RC)/* Prepare K and RC for the next iteration */K ← K − ERC ← RC − RCE(cid:14)(cid:15)RC.Y =E.Y12:13:/* Add to P the R-edges contracting the current stratum of C */(cid:14)(cid:15)P ← P ∪ πR1. X,R1.Y (R1C.Y =E.Y(cid:14)(cid:15)R1. X=C. X,R2.Y =C.Y(cid:14)(cid:15)R1.Y =R2. X(R2 − P )(CE))14: end while15: return PThe function minContrFinite takes two arguments: R and C . The function is implemented in terms of relationalalgebra operators. First, it constructs the table K with one column Y storing the end nodes of all C -edges. K correspondsto KCON (Definition 8) and is computed analogously. Second, it computes the table RC storing a restriction of the originalpreference relation R to K (as (cid:3)CON in Definition 8). These two tables are needed for obtaining the strata of C . After that,the function picks all strata of C one by one and contracts the original preference relation by each stratum in turn, as shownin Theorem 2. In every iteration of the while-loop, it computes the end nodes E of the current stratum (line 8), removesthem from K (line 10) and removes the C -edges of the current stratum from RC , to prepare them for the next iteration. Inline 13, we compute the table P with two columns X and Y , which represents the minimal full contractor computed so far.The while-loop terminates when the table K is exhausted (i.e., all strata have been processed).The extraction of the strata of CON in the order of the stratum index is performed as follows. It is clear that the nodesending CON-edges of stratum 0 do not start any edge in RC . The set E computed in line 8 is the difference of the set K ofnodes ending C -edges and the set of nodes starting some edges in RC . Hence, the initial value of E contains all the nodesending C -edges of stratum 0. To get the end nodes of the next stratum of C , we need to remove all the edges from RCwhich end in members of E, and remove E from K . After the stratum with the highest index is obtained, the relation Kbecomes empty.Algorithm 3 uses two renamings of K (K1 and K2) and two renamings of R (R1 and R2).Proposition 4. Algorithm 3 computes the prefix full contractor of R by C . It can be implemented in O(|C|2 · |R| · log |R|) time.The correctness of Proposition 4 holds because Algorithm 3 follows from Theorem 2. To compute the running time,we assume that the cost of binary operation (join, union, difference) of two relations T and S to be O (|T + S|) if botharguments are sorted on the same key, and O (|T| · log |S|) otherwise. That cost can be clearly reduced with an appropriateuse of indexing and hashing. All the input arguments and the intermediate relations used in Algorithm 3 are kept sorted.The relation P , containing the intermediate full contractor edges, and the relation R are stored as a single relation, in whichedges belonging to P are marked.In line 1, the relation C is sorted on ( X, Y ) and copied to P . In line 3, the projection of C is computed, the result issorted on Y and copied to K . The relation RC computed in line 5 is sorted on ( X, Y ). The processing of lines 1–5 takes timeO (|R · log |R|) (given that |C| (cid:2) |R|). The running time of the body of the while-loop is clearly dominated by the runningtime of line 13, which is O (|C| · |R| · log |R|). Finally, since the size of K is O (|C|), the running time of the algorithm is asstated in Proposition 4.6. Preference-protecting contractionofHere we propose an operator of preference-protecting contraction. In addition to a base contractor CON, a subset Pthe original preference relation to be protected from removal in the contracted preference relation may also be specified.Such a relation is complementary with respect to the base contractor: the relation CON defines the preferences to discard,whereas the relation Pdefines the preferences to protect.++Definition 10. Let (cid:3) be a preference relation and CON be a base contractor of (cid:3). Let a relation P+ ∩ PA full contractor P− = ∅ is called a Pcontractor Pof (cid:3) by CON such that P+ ∩ Pof (cid:3) by CON such that P+ ⊆ (cid:3).-protecting full contractor of (cid:3) by CON. A minimal full-protecting minimal full contractor of (cid:3) by CON.− = ∅ is called a Pbe such that P++−+−Given any full contractor P−of (cid:3) by CON, by Lemma 1, P−must contain at least one edge from every CON-detour.Thus, if Pcontains an entire CON-detour, protecting P++while contracting (cid:3) by CON is not possible.1108D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–1121Fig. 12. Proof of Theorem 5.Theorem 4. Let CON be a stratifiable base contractor relation of a preference relation (cid:3) such that P+contractor of (cid:3) by CON that protects PTC is the transitive closure of P∩ CON = ∅, where Piff P+TC++ ⊂ (cid:3). There exists a minimal full+.As we noted, the necessary condition of the theorem above follows from Lemma 1. The sufficient condition follows fromTheorem 5 that we prove further.+) and then adding P((cid:3) − Pbecomes problematic.A naive way of computing a preference-protecting minimal full contractor is by finding a minimal full contractor P+to P−. However, ((cid:3) − P+) is not an SPO in general, thus obtaining SPO of (cid:3) − (P−− ∪ Pof+)The solution we propose here uses the following idea. First, we find a base contractor CONis equivalent to minimal contraction of (cid:3) by CON with protected Psuch that minimal contraction. After that, we compute a minimal full+(cid:5)of (cid:3) by CONcontractor of (cid:3) by CON(cid:5)using Theorem 2.+−Recall the full contractor Pconstructed using Theorem 2. The prefix property of P+ = ∅. Otherwise, assume that an edge xy ∈ P− ∩ Pstart CON-detours in (cid:3), then P−any P-protecting full contractor Pxy. For a CON-detour of length two started by xy, Pedges can be defined as follows:(cid:6)(cid:6) ∃u: u (cid:3) x (cid:3) y ∧ u y ∈ CON ∧ ux ∈ Pdo notstarts a CON-detour in (cid:3). By Lemma 1,has to contain an edge (different from xy) which belongs to a CON-detour started byhas to contain the edge ending the CON-detour. The set of all suchimplies that if edges of PQ =xy(cid:5)(cid:7)++−+−(cid:5)It turns out that the set Q has a very useful property: it is not only contained in any P+-protecting full contractor, butit can also be used to construct a P-protecting minimal full contractor as shown in the next theorem.+Theorem 5. Let (cid:3) be a preference relation, and CON be a stratifiable base contractor of (cid:3). Let also Pthat PCON.+ ∩ CON = ∅. Then the prefix full contractor of (cid:3) by CON ∪ Q is a P+ ⊆ (cid:3) and P++be a transitive relation such-protecting minimal full contractor of (cid:3) by−−−(cid:5) = CON ∪ Q . We prove that Pbe the prefix full contractor of (cid:3) by CON. For−+ ∩ P. Since. We show that this contradicts the prefix property of P-detour from x to some v in (cid:3), started by xy and having only the edge. We have two choices: either it is a CON-detour or a Q -detour. Consider the first case. Clearly, y (cid:13)= v, otherwise, xv ∈ CON and the constructionis a full contractor of (cid:3) by CON ∪ Q . ThatProof. Let Pthe sake of contradiction, assume there is xy ∈ P(cid:5)Pis the prefix full contractor, there is a CONxy in PPof Q . Note that every path from y to v in (cid:3) contains a Pimplies that no CON-detour from x to v started by xy has only xy in P+ ∩ CON (cid:13)= ∅. Thus, xv ∈ CON and x (cid:3) y (cid:3) v (Fig. 12(a)). yv ∈ Q follows from xy ∈ P, which contradicts the initial assumption.+ = ∅, i.e., Pprotects P−-edge because P− ∩ P−Consider the second case, i.e., there is a Q -detour from x to some v started by xy and having only the edge xy in P. u y ∈ P(Fig. 12(b)). ux, xy ∈ Pby transitivity of Pimply u y ∈ P++−−−++−++.+is a full contractor of (cid:3) by CON ∪ Q implies that every path−.Since xv ∈ Q , there is uv ∈ CON such that ux ∈ Pand uv ∈ CON imply yv ∈ Q . That along with the fact that Pin (cid:3) from y to v contains a PThat contradicts the initial assumption about xy.−−−-edge. Hence, there is no Q -detour from x to v started by xy and having only xy in PNow we prove that Pfrom the fact that it is a full contractor of (cid:3) by a superset CONprefix full contractor of (cid:3) by CONwhich xy is the only PQ -detour, then there is a CON-edge uv such that ux ∈ P−obtained by joining the edge ux and T has only xy in Pis a minimal full contractor of (cid:3) by CON. The fact that it is a full contractor of (cid:3) by CON followsis thesuch that there is a corresponding detour T in-edge. If it is a CON-detour, then xy satisfies the minimality condition from Theorem 1. If it is a. Hence, the CON-detour. We showed above that P−. Therefore, Pis a minimal full contractor of (cid:3) by CON. (cid:2)of CON. We prove now its minimality. Since P, there is xv ∈ CON, for every xy ∈ Pprotects P−+−−+−(cid:5)(cid:5)(cid:5)Note that the sets of the end nodes of (CON ∪ Q )-edges and the end nodes of CON-edges coincide by the constructionof Q . Therefore, (CON ∪ Q ) is stratifiable or finitely stratifiable iff CON is stratifiable or finitely stratifiable, correspondingly. Hence,if CON is a finitely stratifiable relation, Algorithms 1 and 3 can be used to compute a preference-protecting minimal fullcontractor of (cid:3) by CON. If the relations (cid:3) and CON are finite, then Q can be constructed in polynomial time in the size of(cid:3) and CON by a relational algebra expression constructed from its definition. If the relations are finitely representable, thenQ may be computed using the quantifier elimination operator QE.D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–11211109Fig. 13. Using Theorem 5 to compute a preference-protecting minimal full contractor.Fig. 14. (cid:3) (transitive edges omitted), CON, and P+n .+++For Theorem 5 to apply, the relation Phas to be transitive. Non-transitivity of Pimplies that there are two edgesxy, yz ∈ Pwhich should be protected while transitive edge xz is not critical. However, a relation obtained as a result ofpreference-protecting contraction is a preference relation (i.e., SPO). Hence, the edge xz will also be protected in the resultingpreference relation. This fact implies that protecting any relation is equivalent to protecting its minimal transitive extension: itstransitive closure. Therefore, if Pis not transitive, one needs to compute its transitive closure to use Theorem 5. For finiterelations, transitive closure can be computed in polynomial time [13]. For finitely representable relations, Constraint Datalog[21] can be used to compute transitive closure.+Another important observation here is that the P+-protecting minimal full contractor of (cid:3) by CON computed accordingto Theorem 5 is not necessarily a prefix full contractor of (cid:3) by CON. This fact is illustrated in the following example.Example 17. Let a preference relation (cid:3) be a total order of {x1, . . . , x5} (Fig. 13(a), the transitive edges are omitted forclarity). Let a base contractor CON be {x1x4, x2x5}, and P+ = {x1x3, x2x3, x4x5}.The existence of a minimal Pconstruct it. The set Q is equal to {x3x4, x3x5} and CON(cid:3) by CONPCON. However, P-protecting full contractor of (cid:3) by CON follows from Theorem 4. We use Theorem 5 to(cid:5) = {x1x4, x2x5, x3x4, x3x5}. We construct the prefix full contractor ofhas two strata whose end nodes are L0 = {x5}, L1 = {x4}. Then E0 = {x2x4, x3x4, x2x5, x3x5},-protecting minimal full contractor of (cid:3) by−is not a prefix full contractor of (cid:3) by CON, because the edges x3x4, x3x5 do not start any CON-detour.−1 . By Theorem 5, P= E0, E1 = {x1x4}, P= E0 ∪ E1, and P. The relation CON− = Pis a P−1−0−++(cid:5)(cid:5)In conclusion of this section, we formally show that the number of minimal full contractors by stratifiable base contractorcan be infinite. We have mentioned that fact several times above, but (even though it seems reasonable) we have not proved(cid:5).p (for a Q -domain attribute p) and a baseit yet. To do that, we use Theorem 5. Take a preference relation t (cid:3) tcontractor CON(t, t(cid:2)t, t(cid:5).p = 1. Take a subset P+b of (cid:3), defined as.p (cid:13)= n ∨ t.p = n ∧ t(cid:5)) = t.p = 0 ∧ t≡ t.p = 0 ∧ t(cid:5) ≡ t.p < t.p < 1 ∧ t.p > 0 ∧ t.p = 1P(cid:3)(cid:5)(cid:5)(cid:5)(cid:5)(cid:5)+bfor some b such that 0 < b < 1 (Fig. 14). It is easy to check that P+b -protecting minimal full contractor of (cid:3) by CON. Denote it as PTheorem 5, there is a PP . Since the number of rational numbers b between 0 and 1 is infinite, the set P is of infinite size. By Lemma 1, Pcontains the edge (0, b) that is not in Pdifferent minimal full contractors.is transitive and does not intersect (cid:3). Hence by−b for all b as∈ P+a . Hence, P contains an infinite number of∈ P for a (cid:13)= b, because (0, b) ∈ P−b and the set of P−b−a+b7. Meet preference contractionIn this section, we consider the operation of meet preference contraction. In contrast to the preceding sections, wherethe main focus was the minimality of preference relation change, the contraction operation considered here changes apreference relation not necessarily in a minimal way. A full meet contractor of a preference relation is the union of allminimal full contractors. When a certain set of preferences is required to be protected while contracting a preferencerelation, the operation of preference-protecting meet contraction may be used.1110D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–1121Definition 11. Let (cid:3) be a preference relation, CON a base contractor of (cid:3), and Pcontractor of (cid:3) by CON iff+ ⊆ (cid:3). The relation P meet is a full meetFig. 15. Example 18.P meet =(cid:8)−PP −∈P meetfor the set P meet of all minimal full contractors of (cid:3) by CON. The relation P meetP +by CON iffis a full P+-protecting meet contractor of (cid:3)P + =P meet(cid:8)−PP −∈P meet+Pfor the set P meetP + of all P+-protecting minimal full contractors of (cid:3) of CON.Note that the relations ((cid:3) − P meet) and ((cid:3) − P meetP + ) can be represented as intersections of preference (i.e., SPO) relationsand thus are also preference (i.e., SPO) relations. Let us first consider the problem of constructing full meet contractors.By the definition above, an edge xy is in the full meet contractor of a preference relation (cid:3) by CON if there is a minimalfull contractor of (cid:3) by CON which contains xy. Theorem 1 implies that if there is no CON-detour in (cid:3) containing xy, thenxy is not in the corresponding full meet contractor. However, the fact that xy belongs to a CON-detour is not a sufficientcondition for xy to be in the corresponding full meet contractor.Example 18. Let a preference relation (cid:3) be a total order of {u, x, y, v}. Let also CON1 = {uv} (Fig. 15(a)) and CON2 = {uv, yv}(Fig. 15(b)). There is only one CON1- and CON2-detour containing xy: u (cid:3) x (cid:3) y (cid:3) v. There is also a minimal full contractor= {u y, xv, xy, uv}. However, there is no minimal full contractor of (cid:3) by CON2 whichof (cid:3) by CON1 which contains xy: Pcontains xy because the edge yv of the CON2-detour u (cid:3) x (cid:3) y (cid:3) v is in CON2.−1In Theorem 6, we show how full meet contractors can be constructed in the case of finitely stratifiable base contractors.of (cid:3)-edge in some CON-detour. We use Theorem 4 to show that there is a minimal fullAccording to that theorem, a (cid:3)-edge xy is in the full meet contractor of (cid:3) by CON iff there is a full contractor Pby CON such that xy is the only Pcontractor of (cid:3) by CON which contains xy while the other edges of the detour are protected.−−Theorem 6. Let CON be a finitely stratifiable base contractor of a preference relation (cid:3). Then the full meet contractor P meet of (cid:3) byCON isRmeet =(cid:5)xy(cid:6)(cid:6) ∃uv ∈ CON.u (cid:4) x (cid:3) y (cid:4) v ∧(cid:2)(cid:3)ux ∈ ((cid:3) − CON) ∨ u = x∧(cid:2)y v ∈ ((cid:3) − CON) ∨ y = v(cid:3)(cid:7)−(cid:5)−of (cid:3) by CON, iff there is a CON-detour of at most threeProof. By Corollary 1, an edge xy is in a minimal full contractor Pedges in (cid:3) in which xy is the only P-edge. Hence any minimal full contractor is a subset of Rmeet. Now take every edgexy of Rmeet and show there is a minimal full contractor of (cid:3) by CON which contains xy. Let u (cid:4) x (cid:3) y (cid:4) v for uv ∈ CON.Let us construct a set P⎧{ux, y v}⎪⎪⎨{ux}{ y v}∅as follows:if u (cid:3) x ∧ y (cid:3) vif u (cid:3) x ∧ y = vif u = x ∧ y (cid:3) vif u = x ∧ y = v(cid:5) =⎪⎪⎩P(cid:5)(cid:5) ∩ CON = ∅, and Pis transitive, P−protects PPby CON. Since P−xy ∈ P. (cid:2)(cid:5)(cid:5) ⊆ (cid:3). Theorem 4 implies that there is a P(cid:5), there is a CON-detour in (cid:3) from u to v in which xy is the only P-protecting minimal full contractor Pof (cid:3)-edge. This implies that−−Now consider the case of PP meet defined above and P++-protecting full meet contractors. A naive solution is to construct it as the difference of. However, in the next example we show that such solution does not work in general.D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–11211111Fig. 16. (cid:3), CON, and P+from Example 19.+Example 19. Let a preference relation (cid:3) be a total order of {u, x, y, v} (Fig. 16). Let also CON = {u y, xv} and PNote that yv /∈ Pmust be a member of every PCON-detour in which yv is the only edge of the full contractor, and yv is not a member of any Pcontractor.+ = {ux}.implies that xy-protecting full contractor in order to disconnect the path from u to y. Hence, there is no-protecting minimal full, and by Theorem 6, yv ∈ P meet. Hence, yv ∈ (P meet − P+). However, note that ux ∈ P+++The next theorem shows how a P-protecting full contractor may be constructed. The idea is similar to Theorem 6.However, to construct a full meet contractor, we used the set CON as a common part of all minimal full contractors. In-protecting full meet contractor, a superset C P + of CON is contained in all of them. Such a set C P + may bethe case of Pviewed as a union of CON and the set of all edges of (cid:3) that must be discarded due to the protection of P++.+Theorem 7. Let CON be a finitely stratifiable base contractor of a preference relation (cid:3), and Pand P-protecting full meet contractor P meet+ ∩ CON = ∅. Then the P+P + of (cid:3) by CON is+a transitive relation such that P+ ⊆ (cid:3)P + =Rmeet(cid:5)xywhere(cid:6)(cid:6) xy /∈ P(cid:2)+ ∧ ∃uv ∈ CON.u (cid:4) x (cid:3) y (cid:4) v ∧(cid:3)ux ∈ ((cid:3) − C P + ) ∨ u = x(cid:2)∧y v ∈ ((cid:3) − C P + ) ∨ y = v(cid:3)(cid:7)(cid:5)xy(cid:6)(cid:6) ∃uv ∈ CON.u (cid:4) x (cid:3) y (cid:4) v ∧(cid:2)ux ∈ P(cid:3)+ ∨ u = x∧(cid:2)y v ∈ P+ ∨ y = v(cid:3)(cid:7)C P + =-protecting full contractor of (cid:3) by CON. It is constructedProof. First, it is easy to observe that C P + is a subset of any Pfrom the edges xy which participate in CON-detours of length at most three where all the other edges have to be protected.Since every CON-detour has to have at least one edge in a full contractor, xy has to be a member of every full contractor.P + . If some xy ∈ P-protecting minimal full contractor PSecond, we show that every Pof (cid:3) by CON is a subset of Rmeet−+−−+. We show that xy ∈ Rmeet,P + . Thatthen by Corollary 1 there is an edge uv ∈ CON such that u (cid:4) x (cid:3) y (cid:4) v and ux, yv /∈ Pholds if xy /∈ P(cid:2)(which holds for P(cid:2)by definition) and(cid:3)+−(cid:3)ux ∈ ((cid:3) − C P + ) ∨ u = x∧y v ∈ ((cid:3) − C P + ) ∨ y = v−If both u = x and y = v hold then the expression above holds. Assume u (cid:3) x (the case y (cid:3) v is similar). If ux ∈ C P + then,which is a contradiction. Hence, ux ∈ ((cid:3) − C P + ) and xy ∈ Rmeetas we showed above, ux ∈ PP + is contained in some PThird, we show that every xy ∈ Rmeetis similar to the proof of Theorem 6. By definition of Rmeetthe proof of Theorem 6. We show that for the set PFor the sake of contradiction, assume PHaving only Pdetour implies that the edge (either ux or yv) is in C P + , which contradicts the definition of Rmeetin the detour implies that xy ∈ Pthere is a PSince there is a CON-detour in which xy is unprotected by P-protecting minimal full contractor of (cid:3) by CON. The proof(cid:5)P + , xy is such that u (cid:4) x (cid:3) y (cid:4) v. Construct the set Pfor xy as in(cid:5)(cid:5) ∩ CON = ∅.(cid:5)) we have Pwhich is the transitive closure of (P(cid:5)(cid:5)(cid:5) ∩ CON (cid:13)= ∅. This implies that there is a CON-detour consisting of P-edges.- and P(cid:5)+ ∩ CON = ∅. Having a single edge of Pin theP + . Having both ux and yv(cid:5)(cid:5) ∩ CON = ∅, and by Theorem 5,-protecting minimal full contractor.of (cid:3) by CON which is also a P−-edges in the detour contradicts the initial assumption that Pwhich also contradicts the definition of Rmeet-protecting minimal full contractor PP + . Hence, P, xy ∈ P+ ∪ P. (cid:2)P + . Finally, P− ⊆ RmeetP + .+−+++−+(cid:5)(cid:5)(cid:5)(cid:5)We note that given the expressions for the meet and P-protecting full meet contractors in Theorems 6 and 7, one caneasily obtain such contractors for finite and finitely representable relations: by evaluation of a relational algebra query inthe former case and by quantifier elimination in the latter case.+Example 20. Let a preference relation (cid:3) be a total order of {x1, . . . , x5} (Fig. 17(a), the transitive edges are omitted forclarity). Let a base contractor CON be {x1x3, x2x3, x2x5}, and P+ = {x2x4}.A full meet contractor P meet of (cid:3) by CON is {x1x3, x2x3, x2x5, x2x4, x3x4, x4x5}. The resulting contracted preference re--protecting full meet contractor of (cid:3) by CON is {x1x3, x2x3, x2x5, x4x5}. The resultinglation is shown in Fig. 17(b). A Pcontracted preference relation is shown in Fig. 17(d). Note that C P + here is CON ∪ {x4x5}.+1112D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–1121Fig. 17. Computing full meet contractor and P+-protecting full meet contractor.8. Binary preference relations vs. preference statesThe topic of the current paper is preference contraction in the binary preference relation framework. However, our paper isnot the only one touching the subject of contracting preferences. Some relevant papers are considered in Section 9. One ofthe most fundamental works in this area is [18], where Hansson introduced the preference state framework, which is basedon the belief revision theory. Even though the preference state and the binary preference relation frameworks are quitedifferent, the fundamental principles of preference change operators in both are similar. Below we present some connectionsbetween the frameworks. In particular, we show an adaptation of the preference state framework to the preference relationframework. As a result, we obtain a framework that encompasses preference contraction and restricted preference revision.User preferences in [18] are represented as preference states. A preference state is a logically closed set of sentencesdescribing the preferences of an agent. Every preference state has an underlying set of preference relations. The connectionbetween states and relations is as follows. A preference relation (which is an order on tuples) is an unambiguous descriptionof the preferences of an agent. A preference relation induces a set of logical sentences which describe the relations. However,it is not always the case that the preferences of an agent are unambiguous. Hence, every preference state is associated witha set of possible preference relations.Definition 12. An alternative is an element of U (the universe of tuples). Nonempty subsets of U are called sets of alternatives.The language LU of sentences is defined as• if A, B ∈ U then A > B ∈ LU ,• if A > B ∈ LU then ¬( A > B) ∈ LU ,• no other sentence is in LU .A subset of LU is called a restricted preference set. The language defined above is a very restricted version of the lan-guage in [18] since the only Boolean operator allowed is negation. Throughout the discussion, we assume that the set ofalternatives is fixed to be a nonempty subset Ur of U .Definition 13. Let R be a subset of Ur × Ur . The set [R] of sentences is defined as follows:• A > B ∈ [R] iff A B ∈ R,• ¬( A > B) ∈ [R] iff A, B ∈ Ur and A > B /∈ [R].Definition 14. A binary relation R ⊆ Ur × Ur is a restricted preference model iff it is a strict partial order. Given a restrictedpreference model R, the corresponding [R] is called a restricted preference state.A relation R S is a minimal representation of a restricted preference state S iff R S is a minimal relation such that S ⊆ [R S ].In contrast to the definition above, the preference model in [18] is defined as a set of SPO relations, and a preferencestate is an intersection of [R] for all members R of the corresponding preference model.We define two operators of change of restricted preference states: revision and contraction. Restricted states are changedby sets of sentences. In [18], a change of a preference state by a set of sentences is defined as the corresponding change bythe conjunction of the corresponding statements. Moreover, a change by any set of sentences is allowed. In the adaptationof that framework that we define here, conjunctions of statements are not a part of the language. Moreover, preferencerevision [11] only allows for adding new preferences, and preference contraction we have proposed in this paper allowsD. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–11211113only discarding existing preferences. Here we aim to define the operator of restricted preference set revision which capturesthe semantics of those two operators.Definition 15. A restricted preference set S is called positive iff it contains only sentences of the form A > B for someA, B ∈ Ur . Analogously, S is negative iff it contains only sentences of the form ¬( A > B) for some A, B ∈ Ur .A restricted preference set is a complement of S (denoted as S) if for all A, B ∈ Ur , A > B ∈ S iff ¬( A > B) ∈ S and¬( A > B) ∈ S iff A > B ∈ S.Positive and negative restricted preference sets are used to change restricted preference states. Intuitively, a positivepreference set represents the existence of preferences while a negative set represents a lack of preferences.Definition 16. Let R be a restricted preference model. Then the operator ∗ on R is a restricted preference revision on R iff for(cid:16)all positive or negative restricted preference sets S, R(cid:5)} for all Rsuch thatS ={R∗(cid:5)(cid:5)],1. S ⊆ [R(cid:5)2. Ris an SPO,3. there is no SPO R(cid:5)(cid:5)with S ⊆ [R(cid:5)(cid:5)] such that R ⊆ R(cid:5)(cid:5) (cid:3) R(cid:5)(if S is positive) or R(cid:5) (cid:3) R(cid:5)(cid:5) ⊆ R (if S is negative).The last condition in the definition above expresses the minimality of restricted preference state change. This conditionis different for positive and negative sets: when we add positive statements, we do not want to discard any existing positivesentences, and when negative statements are added, no new positive sentences should be added. The restricted preferencerevision operator defined above is different from preference state revision in [18]. First, preference state revision allows forrevision by (finite) sets of arbitrary sentences, not only positive or negative sets of sentences, as here. Second, the minimalitycondition here is defined using set containment while in [18] it is defined as a function of symmetric set difference of theoriginal preference relations and R. The last difference is due to the preference state representation: the result of preferencerevision in [18] is the union of relations Rwhile in our case it is the intersection.Below we define the operator of contraction for restricted preference states which is similar to the contraction of prefer-(cid:5)(cid:5)ence states.Definition 17. Let R be a restricted preference model. Then the operator ÷ on R is restricted preference contraction on R ifffor all positive or negative restricted preference sets S, R ÷ S = RS.∗Given the operators on restricted preference states we have defined here, their relationships with the preference changeframework are straightforward.Proposition 5. Let R be a restricted preference model, S be a positive or negative restricted preference set, and R S be a minimalrepresentation of S. Then RS is∗1. ∅, if S is a positive restricted preference set and R ∪ R S has a cyclic path,2. TC(R ∪ R S ), if S is a positive restricted preference set and R ∪ R S has no cyclic paths,3.is a minimal full contractor of R by R S }, if S is a negative restricted preference set,{R − P− | P(cid:16)−where TC is the transitive closure operator.Proof. When a restricted preference model is revised by a positive preference set, the resulting relation Rintersection of all minimal SPO extensions Rof R and R S (i.e., Ran extension Rsuch a minimal extension Rthis result is equivalent to the result of the union preference revision [11].S is thehas to contain an edge from A to B if A > B ∈ S). Suchdoes not exist if there is a cyclic path in R ∪ R S . However, if no cyclic paths exist, then there is only oneS = TC(R ∪ R S ). We note thatwhich is equal to the transitive closure of R ∪ R S . Hence, R∗(cid:5)(cid:5)(cid:5)(cid:5)When a restricted preference model is revised by a negative preference set, the resulting relation Rsubset of R. Moreover, for all ¬( A > B) ∈ S, the pair ( A, B) should not be in RS. Hence, Rminimal contractions of R by R S , which is the result of the full meet contraction of R by R S . (cid:2)∗∗∗S has to be aS is the intersection of∗Below we list some properties of the revision and contraction operators of restricted preference states.Proposition 6. Let R be a restricted preference model and S be a positive or negative restricted preference set. ThenS is an SPO (closure),∗1. R∗2. S ⊆ [R3. if S ⊆ [R], then R = R∗S (vacuity).S] unless S is positive and R S ∪ R has a cyclic path (limited success),1114D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–1121Proof. All the properties here follow from Proposition 5. Namely, Property 1 follows from the fact that the result of RS isan SPO in every case of Proposition 5. Property 2 follows from Proposition 5 and the definition of [RS]. Property 3 followsfrom Proposition 5 and 1) S ⊆ [R] implies R S ⊆ R (if S is positive), and 2) a minimally contracted preference relation isequal to itself if contracted by non-existent edges (if S is negative). (cid:2)∗∗Proposition 7. Let R be a restricted preference model and S be a restricted positive or negative preference set. Then1. R ÷ S is an SPO (closure),2. S ⊆ [R ÷ S] unless S is negative and R S3. if S ∩ [R] = ∅, then R = R ÷ S (vacuity),∗4. R5. R ÷ S = RS = (R ÷ S) ∗∗S (Harper identity, by definition).∪ R has a cyclic path (limited success),S unless S is positive and R S ∪ R has a cyclic path (limited Levi identity),Proof. Properties 1, 2, and 3 follow from Proposition 6. Property 4 follows from the fact that R ÷ S = Rand Proposition 6 implies RS by definition,S when either S is negative or S is positive but R S ∪ R has no cyclic path. (cid:2)S = (RS) ∗∗∗∗An important difference between the restricted preference-set change operators and the corresponding change operatorsfrom [18] is that the restricted versions are not always successful (Property 2 in Proposition 5), and Levi identity holds fora certain class of restricted preference sets. In addition to that, the operator of preference set contraction in [18] has theproperty of inclusion (R ⊆ R ÷ S) and recovery (if S ⊆ [R], then R = (R ÷ S) ∗S). As for the restricted framework definedhere, inclusion does not hold due to the representation of a preference model as a single SPO relation. Recovery does nothold here due to the restrictions on the language (namely, not allowing disjunctions of sentences).We note that one of the main targets of our current work was the development of an efficient and practical approachto contracting preference relations in the binary relation framework for the finite and the finitely representable cases. Inaddition to defining the semantics of the preference contraction operators, we have also developed a set of algorithms whichcan be used to compute contractions. We have tested them on real-life data and demonstrated their efficiency. In contrast,[18] focuses more on semantical aspects of preference change and does not address computational issues of preferencechange operators. In particular, finite representability is not addressed.9. Related work9.1. Other operators of preference relation changeA number of operators of preference relation change have been proposed in the literature. An operator of preferencerevision is defined in [11]. A preference relation there is revised by another preference relation called the revising relation. Theresult of revision is still another preference relation. [11] defines three versions of preference revision – union, prioritized,and Pareto – which are different in the way the original and the revising preference relations are composed. For all of thesesemantics, [11] identifies cases (called 0-, 1-, and 2-conflicts) when the revision fails, i.e., when there is no SPO preferencerelation satisfying the operator semantics. This work considers revising preference relations only by preference relations.Although it does not address the problem of discarding subsets of preference relations explicitly, revising a preferencerelation using Pareto and prioritized revision operators may result in discarding a subset of the original preference relation.It has been shown in [11] that the revised relation is an SPO for limited classes of the composed relations.(cid:5)w.r.t. every attribute and better than tAnother operator of preference relation change is defined in [5]. This work deals with a special class of preferenceaccording to a skyline preference relation iff t is notrelations called skylines [6]. (A tuple t is preferred to another tuple tw.r.t. to at least one attribute.) Preference relations in [5] are changedworse that tby equivalence relations. In particular, the modified preference relation is an extension of the original relation in which pairsof equivalent or incompatible tuples are ordered according to the new preferences. This preference change operator onlyadds new edges to the original preference relation, and thus, preference relation contraction cannot be expressed using thisoperator.(cid:5)(cid:5)In [23], we introduced the operation of minimal preference contraction for preference relations. We studied propertiesof this operation and proposed algorithms for computing full contractors and preference-protecting full contractors forfinitely stratifiable base contractors. In the current paper, we generalize this approach and develop a method of checkingthe finite stratifiability property for finitely representable base contractors. We introduce the operations of meet and meetpreference-protecting contraction, and propose methods for computing them. We also provide experimental evaluation ofthe framework and a comprehensive discussion of related work.9.2. Belief revision and contractionPreferences can be considered as a special form of human beliefs, and thus their change may be modeled in the contextof belief change theory. The approach is to represent beliefs as truth-functional logical sentences. A belief set is the set ofD. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–11211115sentences believed by an agent. A common assumption is that belief sets are closed under logical consequence. The mostcommon operators of belief set change are revision and contraction [3]. A number of versions of those operators have beenproposed [19] to capture various real-life scenarios.This approach is quite different from the preference relation approach. First, the language of truth functional sentencesis rich and allows for rather complex statements about preferences: conditional preferences (a > b → c > d), indefinite(a > b ∨ c > d), etc. In contrast, preferences in the preference relation framework used in this paper are certain: given apreference relation (cid:3), it is only possible to check if a tuple is preferred (or not) to another tuple. In addition, belief revisionis generally restricted to finite domains. We have proposed here algorithms for contracting finite and infinite preferencerelations.9.3. Other frameworksAn approach to preference change is proposed in [9]. Preferences are changed via interactive example critiques. This paperidentified three types of common critique models: similarity-based, quality-based, and quantity-based. However, no formalframework is provided. [17] describes revision of rational preference relations over propositional formulas. The proposedrevision operator satisfies the postulates of success and minimal change. The author shows that the proposed techniqueswork in case of revision by a single statement and can be extended to allow revisions by multiple statements.[14] proposes algorithms of incremental maintenance of the transitive closure of graphs using relational algebra. Thegraph modification operations are edge insertion and deletion. Transitive graphs in [14] consist of two kinds of edges: theedges of the original graph and the edges induced by its transitive closure. When an edge xy of the original graph iscontracted, the algorithm also deletes all the transitive edges uv such that all the paths from u to v in the original graph gothrough xy. As a result, such contraction is not minimal according to our definition of minimality. Moreover, [14] considersonly finite graphs, whereas our algorithms can work with infinite relations.10. Conclusions and future workIn this paper, we have presented an approach to contracting preference relations. We have considered several operatorsof preference contraction: minimal preference contraction, minimal preference-protecting contraction, and (preference-protecting) meet contraction,inspired by different scenarios of preference change. We have proposed algorithms andtechniques for computing contracted preference relations given finitely stratifiable base contractors. We have also evaluatedthe proposed algorithms experimentally (Appendix A) and showed that they can be used in real-life database applications.One of the areas of future work is to relax the finite stratifiability property property and consider more general basecontractors.Another interesting direction of future work is to design an operator of generalized preference relation change thatallows to change preference relations by discarding existing as well as adding new preferences at the same time. Thecurrent approaches of preference relation change are restricted to only one type of change.As we showed in the discussion of related work, the existing preference revision approach [11] fails to work in thepresence of conflicts (cycles). A promising direction here is to use the preference contraction operators presented here toresolve such conflicts.In this paper, we assume that the relations defining the preferences to discard are explicitly formulated by the user.However, such an assumption hardly works in practical scenarios of preference change: formulating such a relation requiresa full knowledge of his or her preferences, which may not be the case. Hence, a promising direction is to perform interactivepreference contraction or change.AcknowledgementsWe greatly appreciate the conversations with Matteo Cristani and the comments of the anonymous reviewers.Appendix A. Experimental evaluation+-MIN), meet contraction (MEET), and preference-protecting meet contraction ( PIn this section, we present the results of an experimental evaluation of the preference contraction framework proposedhere. We implemented the following operators of preference contraction: prefix contraction (denoted as PREFIX), preference--MEET).protecting minimal contraction ( P+-MEETPREFIX was implemented using Algorithm 3, Paccording to Theorem 7. We used these operators to contract finite preference relations stored in a database table R( X, Y ).The preference relations used in the experiments were finite skyline preference relations [6], defined in Section 9. Skylinepreference relations are often used in database applications. We note that such relations are generally not materialized (asdatabase tables) when querying databases with skylines. However, they may be materialized in scenarios of preference elic-itation [4]. To generate such relations, we used the NHL 2008 Player Stats dataset [2]. Each tuple has 18 different attributesout of which we used 5. All algorithms used in the experiments were implemented in Java 6. We ran the experiments onIntel Core 2 Duo CPU 2.1 GHz with 2.0 GB RAM. All tables were stored in a PostgreSQL 8.3 database.-MIN according to Theorem 5, MEET according to Theorem 6, and P++1116D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–1121Fig. 18. Contraction performance. Small base contractors.We have carried out two sets of experiments with the preference contraction algorithms. In the first set, we modelthe scenario where base contractors are manually constructed by user. Thus, we assume that such base contractors are ofcomparatively small size. In the second set of experiments, we assume that base contractors are constructed automaticallyand hence may be of larger size.A.1. Small base contractorsThe aim of the experiments shown here is twofold. First, they demonstrate that the algorithms of preference contractionwe have proposed have good performance (given base contractors of small size). Second, they show that the differencebetween the sizes of full contractors computed by different algorithms may be significant. It implies that in real-life appli-cations, an appropriate contraction algorithm needs to be selected carefully depending on the required semantics.The skyline preference relations we use here consist of 51 887, 80 612, and 116 411 edges. To generate them, we used400, 500, and 600 tuples, respectively, out of 852 tuples in [2].The size of base contractors ranges from 1 to 30 edges. We did not pick more than 30 edges, assuming that in thisscenario the user is unlikely to provide a large set of preferences to be discarded. For every base contractor size, werandomly generated 10 different base contractors and computed the average time spent to compute full contractors andtheir average size. The relations P, storing preferences to protect, were transitive relations containing from 1% to 5% ofedges of the corresponding preference relation.+Fig. 18 shows how the running time of contraction operators depends on the size of the preference relation to contract-MIN is slightly-MEET is worsecontains 1% of (cid:3). As we can observe, the performance of Pand the size of the base contractor. Here, Pworse than the one of PREFIX, due to the need of computing the set Q . Similarly, the running time of Pthan the running time of MEET, due to the computation of C P + .++++Fig. 19 shows the dependency of the minimal full contractor size on the size of the preference relation and the size ofthe base contractor. For every value of the base contractor size, the charts show the average size of the corresponding fullcontractor. Notice that preference protection does not much affect the size of the full contractors computed by PREFIX andP-MIN – they almost always coincide. That is due to the fact that even though the full contractors computed by thesealgorithms have different properties, they are both minimal. The size of full contractors computed by MEET is strictly lessthan the size of full contractors computed by P-MEET. This is justified by the semantics of those full contractors: a fullmeet contractor is a union of all minimal full contractors of (cid:3) by CON, while a full P-protecting meet contractor is asubset of full meet contractor.++Another important observation is that the size of minimal full contractors (PREFIX and P-MIN) and the size of full-MEET) differ significantly. Hence, minimality has a significant effect on the size of full++meet contractors (MEET and Pcontractors when base contractors are small.Fig. 20 shows how the algorithm performance and the size of computed full contractors depend on the size of the-MEET,-MEET) involves-MIN. Fig. 20(b) shows how the-protecting minimal full contractor isprotected preference set Pwhile the running time of Pmore joins of the tables representing Psize of a full contractor varies with the size of P-MIN grows slowly. The reason is that the computation of C P + (used in P. As we can observe in Fig. 20(a), the size of P+and (cid:3) than the computation of Q used in Pmostly affects the running time of P. As expected, the size of a P++++++++D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–11211117Fig. 19. Full contractor size. Small base contractors.Fig. 20. Small base contractors. Varying |P+|.almost always the same. The size of the full Pminimal full contractors protect P+.+-protecting meet contractor goes down when P+grows, because then fewerA.2. Medium size base contractorsWe notice that according to Fig. 18, the time spent to compute a full contractor using any algorithm does not exceed3 seconds. In Fig. 21(a), we show the running time of the algorithms versus the relative size of CON, which is larger in thisis 1% of | (cid:3) |, and theexperiment than in the previous one. The size of the preference relation here is 80 612, the size of Psize of CON varies from 1% (806 edges) to 5% of (4030 edges) of | (cid:3) |. As we can see, the running time grows quadraticallywith the size of CON, which is consistent with Proposition 4. Fig. 21(b) shows how the size of the full contractors changeswith |CON|. Notice that the size of the minimal full contractors grows significantly slower with |CON|: when |CON| is 5% of| (cid:3) |, the size of the full meet contractor exceeds 40% of | (cid:3) |, while the size of the minimal full contractors is not greaterthan 10% of | (cid:3) |. As in the case of small CON, the sizes of minimal and meet full contractors differ greatly. Hence, inreal-life scenarios, it is important to know the semantics of preference contraction the user intends, since that has a higheffect on the contraction result.+In the experiments above, we use the data set [2]. As preference relations, we use skylines. As we have observed, withCON of small size, the time spent to compute any full contractor did not go beyond a few seconds, regardless of the sizeof (cid:3). Hence, the algorithms we proposed to contract finite relations can be used efficiently in such scenarios in databaseapplications. However, when CON is large, additional optimization techniques are needed.1118D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–1121Appendix B. Proof of Theorem 3Fig. 21. Medium size base contractors.Theorem 3 (Checking the finite stratifiability property). Let F R be an ERO-formula in DNF, representing an SPO relation R, of thefollowing form(cid:3)(cid:2)o, o(cid:5)F R(cid:3)(cid:2)o, o(cid:5)= F R1∨ · · · ∨ F Rl(cid:3)(cid:2)o, o(cid:5)where F R i is a conjunction of atomic formulas. Then checking if there is a constant k such that the length of all R-paths is at most k canbe done by a single evaluation of QE over a formula of size linear in |F R |.Let R i be a binary relation represented by the formula F R i for all i ∈ [1, l]. We split the proof of Theorem 3 into severallemmas. In Lemma 4, we show that the length of all R-paths is bounded by a constant iff the length of all R i -paths isbounded by a constant for every disjunct F R i of F R . Lemma 5 shows that the length of all R i -paths is bounded by aconstant iff there is a bound on the length of all paths in the graph of a binary relation represented by at least one conjunctof F R i . In Lemma 6, we show how to check if the length of all paths in the graph represented by F R i is bounded.To prove the first lemma, we use the following idea. Let a sequence S = (o1, . . . , on) of n (cid:3) 2 tuples be an R-sequence,i.e.,(o1, o2), . . . , (on−1, on) ∈ RThe transitivity of R implies that there is an R-edge from o1 to all other tuples in S, i.e.,(1)(o1, o2), . . . , (o1, on) ∈ R(cid:9)Note that (2) contains only edges started by o1. Since R =i=1 R i , for every R-edge in (2), there is i ∈ [1, l] such that it islalso an R i -edge. Let R j (not necessarily unique) for some j ∈ [1, l] be such that the number of R j -edges in (2) is maximum.(cid:5)Such R j is called a major component of S. Let the sequence Sconsist of the end nodes of all these R j -edges in the orderthey appear in S. Such Sis called a major subsequence of S.(cid:5)(2)Observation 1. Let S be an R-sequence, R i∗ a major component of S, and S(cid:5)the corresponding major subsequence of S. Then(cid:5)is an R-sequence,1. S2. if the length of S is n, then the length of S(cid:5)is at least (cid:25) n−1l(cid:26).The first fact of Observation 1 follows from transitivity of R, and the second fact follows from the definition of majorsubsequence. Note that a major subsequence is an R-sequence too. Hence, if it has at least two tuples, we can construct itsmajor subsequence.Observation 2. Let S0, . . . , St be R-sequences such that for all i ∈ [1, t], S i is a major subsequence of S i−1 with the correspondingmajor components R ji . Let o0, ot be the first tuples of S0 and St correspondingly. Then R j1 (o0, ot).D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–11211119Observation 2 follows from the definition of major subsequence.Fig. 22. Major subsequences.Example 21. Let S0 = (x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12) be an R-sequence. Fig. 22 illustrates a possible constructionof a major subsequence S1 of S0, a major subsequence S2 of S1, and a major subsequence S3 of S2. The edges in Fig. 22correspond to the major-component edges. In every sequence, a node is dark if it is in the major subsequence of thesequence. Note that S3 does not have a major subsequence because a subsequence has to have at least two nodes.Lemma 4. There is a constant bounding the length of all R-paths iff for all i ∈ [1, l], there is a constant bounding the length of allR i -paths.(k+2)l+1i=1ing R-sequence. The length of S0 isR-sequence, and its length is at leastli − 2. For the sake of contradiction, let there be an R-path of length(k+2)l+1i=0(k+2)li=0Proof. In the case when l = 1, the lemma trivially holds. Further we assume l > 1.⇒ If for some i ∈ [1, l], the length of R i -paths cannot be bounded, neither can the length of R-paths.⇐ Assume that for all i ∈ [1, l], all R i -paths are of length at most k. Show that the length of all R-paths is not more than(cid:17)(k+2)l+1li − 1. Let S0 be the correspond-i=1li . Let S1 be a major subsequence of S0. By Observation 1, S1 is also anli . Following that logic, let St be a major subsequence of St−1 with the corre-(k+2)l−t+1li . Such computation may continue while the size ofsponding major component R jt−1 . The size of St is at leasti=0St is greater than one, i.e., while t (cid:2) (k + 2)l. Let the major components of S 1, . . . , S(k+2)l be R j1 , . . . , R j(k+2)l correspondingly.Note that there are at most l possible different major components. Thus, at least k + 2 major components in R j1 , . . . , R j(k+2)lare the same. Let us denote the first k + 2 of them as Rt1 , . . . , Rtk+2 and the tuples which start the corresponding majorsequences as ot1 , . . . , otk+2 . By Observation 2,(cid:17)(cid:17)(cid:17)(cid:17)Rt1 (ot1 , ot2 ) ∧ Rt2 (ot2 , ot3 ) ∧ · · · ∧ Rtk+1 (otk+1 , otk+2 )Since all Rt1 , . . . , Rtk+2 are the same, the expression above implies that there is an R i -path of length k + 1 for some i ∈ [1, l]which is a contradiction. (cid:2)In Lemma 4, we showed that the problem of checking the bounded-length property of all R-paths can be reduced tothe problem of testing the same property for R i -paths. Note that R i is represented by a formula F R i which is a conjunctionof atomic formulas. Let the set of all attributes which are present in the formula F R i be defined as AF Ri. Then F R i can berepresented as(cid:3)(cid:2)o, o(cid:5)=F R i(cid:18)(cid:3)(cid:2)o, o(cid:5)λ AA∈AF Riwhere λ A(o, opreference formula language implies that every atomic formula belongs to exactly one λ A .(cid:5)) is a conjunction of all atomic formulas in which the attribute A is used. Note that the structure of theDenote the relation represented by λ A as Λ A . In the next lemma, we show that the problem of checking the finitestratifiability property of all R i -paths can be reduced to the same problem for Λ A -paths.Lemma 5. There is a constant bounding the length of all R i -paths iff for some A ∈ AF RiΛ A -paths., there is a constant bounding the length of allProof. ⇐ Let for every k, there be an R i -path of length at least kR i(o1, o2) ∧ R i(o2, o3) ∧ · · · ∧ R i(ok, ok+1)1120D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–1121Then for all A ∈ AF Ri, we have a Λ A -path of length at least kΛ A(o1, o2) ∧ Λ A(o2, o3) ∧ · · · ∧ Λ A(ok, ok+1)⇒ Let for every k and A ∈ AF Ri, there be a Λ A -path of length at least k(cid:3)(cid:3)(cid:3)(cid:2)1 , o Ao A2Λ A∧ Λ A(cid:2)2 , o Ao A3∧ · · · ∧ Λ A(cid:2)k , o Ao Ak+1Construct a sequence of tuples (o1, o2, o3, . . .) as follows. Let o j. A = o Athe domain D A of A. Clearly, the following R i -path is of length at least kj . A if A ∈ AF Ri. Otherwise, let o j. A be any value fromR i(o1, o2) ∧ R i(o2, o3) ∧ · · · ∧ R i(ok, ok+1)(cid:2)Lemma 6. There is a constant bounding the length of all Λ A -paths iff there is no Λ A -path of length three, i.e.,¬∃o1, o2, o3, o4 ∈ U.Λ A(o1, o2) ∧ Λ A(o2, o3) ∧ Λ A(o3, o4)Proof. ⇐ If for every constant k, there is a Λ A -path of length at least k, then there is a Λ A -path of length three.⇒ If λ A is unsatisfiable, then there are no Λ A -paths. Thus, we assume that λ A is satisfiable. Based on the preferenceformula language, the formula λ A(o, o(cid:5)) can be split into at most three conjunctive formulas:1. φL : a conjunction of all atomic formulas o. Aθ c,(cid:5). Aθ c,2. φR : a conjunction of all atomic formulas o3. φM : a conjunction of all atomic formulas o. Aθo(cid:5). Afor θ ∈ {=, (cid:13)=, <, >} and a C - or Q -constant c. Any of these three formulas may be missing because λ A may not containatomic formulas of the specified type. φL and φR capture the range of the left and the right argument in λ A , correspondingly,and φM constrains their relationship.Here we assume that A is a Q -attribute, and the case of C -attributes is similar. Note that if φL is defined, then the rangerL of φL is 1) an open rational number interval with a finite number of holes (due to possible atomic formulas o. A (cid:13)= c),or 2) a single rational value (due to the formula o. A = c). If φL is undefined, then rL is the entire set of rational numbers.Thus, the number of distinct elements |rL| in rL is either ∞ or 1. The same holds for the number of distinct elements |r R |in r R . Hence for our class of formulas, |rL ∩ r R | ∈ {0, 1, ∞}. Clearly, if |rL ∩ r R | = 0, then no Λ A -paths exist. So we assumethat |rL ∩ r R | ∈ {1, ∞}.Consider the structure of φM . If φM is undefined, then |rL ∩ r R | > 0 implies that there are Λ A -paths of length at(cid:5). A” ∈ φM , then noleast k for every k, consisting of tuples whose A-values are arbitrary elements of rL ∩ r R . If “o. A = oother atomic formula is in φM (otherwise, Λ A is unsatisfiable). Since |rL ∩ r R | > 0, Λ A -paths of length at least k for ev-(cid:5). A” ∈ φM , thenery k can be constructed of tuples with the value of A all equal to any member of rL ∩ r R . If “o. A > o(cid:5). A”, “o. A < o(cid:5). A” may be in φM and is implied by(cid:5). A” /∈ φM (otherwise λ A is unsatisfiable). However, “o. A (cid:13)= o“o. A = o(cid:5). A” ∈ φM so can be dropped. The existence of a Λ A -path of length three implies that |rL ∩ r R | > 1 and thus“o. A > o(cid:5). A” ∈ φM is analogous. The|rL ∩ r R | = ∞. Hence there are Λ A -paths of length at least k for every k. The case of “o. A < o(cid:5). A”. The existence of a Λ A -path of length three implies that there are two different valueslast case is when only “o. A (cid:13)= oc1, c2 ∈ rL ∩ r R . Hence, Λ A -paths of length at least k for every k can be constructed by taking any sequence of tuples inwhich the value of A of every even tuple is c1 and of every odd tuple is c2. (cid:2)Proof of Theorem 3. Here we show how to construct a formula which is true iff there is a constant k such that the lengthof all R-paths is bounded by k. By Lemma 4, such a formula can be written as a conjunction of l formulas each of whichrepresents the fact that the length of all R i -paths is bounded. By Lemma 5, such a formula can be written as a disjunctionof formulas each of which represents the fact that the length of all Λ A -paths is bounded. By Lemma 6, such formulas are ofsize linear in the size of Λ A . Hence, the resulting formula is linear in the size of F R . Due to the construction in Lemma 6,the formula has quantifiers. They can be eliminated using QE. (cid:2)References[1] Matteo Cristani, personal communication.[2] NHL.com Stats, http://www.nhl.com/ice/playerstats.htm, 2008.[3] C.E. Alchourron, P. Gardenfors, D. Makinson, On the logic of theory change: Partial meet contraction and revision functions, The Journal of SymbolicLogic 50 (2) (1985) 510–530.[4] W.-T. Balke, U. Güntzer, C. Lofi, Eliciting matters — controlling skyline sizes by incremental integration of user preferences, in: Proceedings of the 12thInternational Conference on Database Systems for Advanced Applications (DASFAA), Springer, 2007, pp. 551–562.[5] W.-T. Balke, U. Guntzer, W. Siberski, Exploiting indifference for customization of partial order skylines, in: Proceedings of the Tenth InternationalDatabase Engineering and Applications Symposium (IDEAS), IEEE Computer Society, Delhi, India, 2006, pp. 80–88.D. Mindolin, J. Chomicki / Artificial Intelligence 175 (2011) 1092–11211121[6] S. Börzsönyi, D. Kossmann, K. Stocker, The skyline operator, in: Proceedings of the 17th International Conference on Data Engineering (ICDE), IEEEComputer Society, Washington, DC, USA, 2001, pp. 421–430.[7] C. Boutilier, R. Brafman, C. Domshlak, H. Hoos, D. Poole, CP-nets: a tool for representing and reasoning with conditional ceteris paribus preferencestatements, Journal of Artificial Intelligence Research (JAIR) 21 (2004) 135–191.[8] C.-Y. Chan, H.V. Jagadish, K.-L. Tan, A.K.H. Tung, Z. Zhang, Finding k-dominant skylines in high dimensional space, in: Proceedings of the ACM SIGMODInternational Conference on Management of Data, Chicago, Illinois, USA, 2006, pp. 503–514.[9] L. Chen, P. Pu, Evaluating critiquing-based recommender agents, in: Proceedings of AAAI-2006, AAAI Press Boston, Massachusetts, USA, 2006, pp. 157–162.[10] J. Chomicki, Preference formulas in relational queries, ACM Transactions on Database Systems 28 (4) (2003) 427–466.[11] J. Chomicki, Database querying under changing preferences, Annals of Mathematics and Artificial Intelligence 50 (1–2) (2007) 79–109.[12] J. Chomicki, P. Godfrey, J. Gryz, D. Liang, Skyline with presorting, in: Proceedings of the 19th International Conference on Data Engineering (ICDE), IEEEComputer Society, March 2003, pp. 717–719.[13] T. Cormen, C. Leiserson, R. Rivest, C. Stein, Introduction to Algorithms, second ed., The MIT Press, September 2001.[14] G. Dong, L. Libkin, J. Su, L. Wong, Maintaining the transitive closure of graphs in SQL, International Journal of Information Technology 5 (1999) 46–78.[15] J. Doyle, Prospects for preferences, Computational Intelligence 20 (2) (2004) 111–136.[16] P.C. Fishburn, Utility Theory for Decision-Making, Wiley, New York, 1970.[17] M. Freund, On the revision of preferences and rational inference processes, Artificial Intelligence 152 (1) (2004) 105–137.[18] S.O. Hansson, Changes in preference, Theory and Decision 38 (1) (1995) 1–28.[19] S.O. Hansson, Revision of belief sets and belief bases, in: Belief Change, in: Handbook of Defeasible Reasoning and Uncertainty Management Systems,vol. 3, Springer, Dordrecht, October 1998, pp. 17–75.[20] S.O. Hansson, T. Grüne-Yanoff, Preferences, in: E.N. Zalta (Ed.), The Stanford Encyclopedia of Philosophy, 2006, The Metaphysics Research Lab, Centerfor the Study of Language and Information, Stanford University, Stanford, CA 94305-4115, http://plato.stanford.edu/.[21] P.C. Kanellakis, G.M. Kuper, P.Z. Revesz, Constraint query languages, Journal of Computer and System Sciences (1995) 26–52.[22] W. Kießling, Foundations of preferences in database systems, in: Proceedings of 28th International Conference on Very Large Data Bases (VLDB),Morgan Kaufmann, Hong Kong, China, 2002, pp. 311–322.[23] D. Mindolin, J. Chomicki, Minimal contraction of preference relations, in: Proceedings of AAAI-2008, AAAI Press, Chicago, Illinois, USA, 2008, pp. 492–497.[24] R. Ramakrishnan, J. Gehrke, Database Management Systems, McGraw–Hill Science, August 2002.