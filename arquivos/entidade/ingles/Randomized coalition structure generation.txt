Artificial Intelligence 175 (2011) 2061–2074Contents lists available at ScienceDirectArtificial Intelligencewww.elsevier.com/locate/artintRandomized coalition structure generationTravis Service a,∗, Julie Adams ba Vanderbilt University, 357 Jacobs Hall, 2201 West End Nashville, TN 37235-1824, USAb Vanderbilt University, 359 Jacobs Hall, 2201 West End Nashville, TN 37235-1824, USAa r t i c l ei n f oa b s t r a c tArticle history:Received 25 December 2010Received in revised form 11 July 2011Accepted 1 August 2011Available online 9 August 2011Keywords:Coalition structure generationCoalition formationCharacteristic function game√Randomization can be employed to achieve constant factor approximations to the coalitionstructure generation problem in less time than all previous approximation algorithms. Inparticular, this manuscript presents a new randomized algorithm that can generate a 23n2.587n) time, improving upon the previous algorithm thatapproximate solution in O (√n2.83n) time to guarantee the same performance. Also, the presented newrequired O (techniques allow a 14 approximate solution to be generated in the optimal time of O (2n)and improves on the previous best approximation ratio obtainable in O (2n) time of 18 .The presented algorithms are based upon a careful analysis of the sizes and numbers ofcoalitions in the smallest optimal coalition structures.An empirical analysis of the new randomized algorithms compared to their deterministiccounterparts is provided. We find that the presented randomized algorithms generatesolutions with utility comparable to what is returned by their deterministic counterparts(in some cases producing better results on average). Moreover, a significant speedup wasfound for most approximation ratios for the randomized algorithms over the deterministicalgorithms. In particular, the randomized 12 approximate algorithm runs in approximately22.4% of the time required for the deterministic 12 approximation algorithm for problemswith between 20 and 27 agents.© 2011 Elsevier B.V. All rights reserved.1. IntroductionMany situations require partitioning the agents into disjoint teams or coalitions where each coalition cooperatively com-pletes a subgoal or subtask [1–3]. However, the process of optimally partitioning the agents into coalitions is computationallydifficult due to the fact that the number of potential coalitions scales exponentially with the number of agents.Characteristic function games, a class of cooperative games, models cooperative multi-agent situations by assigning eachcoalition a value indicating the joint utility those agents will receive if they form a coalition [1,2,4–7]. For example, thisutility may be the difference between the utility earned by completing the subtask assigned to the potential coalition andthe estimated cost incurred during task execution. Given a set of agents, N, a characteristic function game is defined by afunction ν : N → R(cid:2)0. The value ν(C), for a coalition C ⊆ N, is the joint utility the members of C will receive if C forms.A coalition structure is simply a partitioning of the agents into disjoint coalitions. The coalition structure generation problem(CSG problem) is to construct a coalition structure C S that maximizes:ν(C S) =(cid:2)C∈C Sν(C).* Corresponding author.E-mail addresses: tservice@acm.org (T. Service), julie.a.adams@vanderbilt.edu (J. Adams).0004-3702/$ – see front matter © 2011 Elsevier B.V. All rights reserved.doi:10.1016/j.artint.2011.08.0022062T. Service, J. Adams / Artificial Intelligence 175 (2011) 2061–2074The asymptotically fastest algorithm to solve the CSG problem exactly is based on dynamic programming and runs inO (3n) time [2,8]. Due to the high computational complexity of the optimal CSG algorithm, much research has focused onthe development of anytime algorithms. While these anytime algorithms can quickly return approximate solutions, in theworst case most current anytime algorithms require O (nn) time to determine the optimal solution, far worse than the O (3n)time dynamic programming algorithm. Among the current state-of-the-art is Rahwan et al’s. [1] Integer Partition algorithm.Due to the high computational complexity of constructing the optimal coalition structure, our recent work has focusedon developing approximation algorithms that return solutions with bounds on their quality in time less than O (3n) [9,10].For example, our prior algorithm was capable of returning a solution that was at least 2n2.83n) time.This paper improves upon the state-of-the-art in CSG approximation algorithms by presenting randomized algorithmsthat achieve the same approximation ratios as our prior work, but require significantly less time. For example, our newrandomized approximation algorithm is capable of generating a 2n2.59n) time. This result improvesn2.83n) time deterministic algorithm for the same approximation ratio. We also show how to gen-upon our previous O (4 approximation in the optimal time of O (2n) (i.e., any algorithm must observe the values of all 2n − 1 coalitions inerate a 1order to guarantee any approximate solution [2]).3 approximation in O (3 of the optimal in O (√√√Our methods also permit approximation ratios that are unachievable by current approximation algorithms. For example,our randomized algorithm is the first designed to guarantee a 35 approximation ratio.All of the presented approximation algorithms are probabilistic in the sense that they are guaranteed to return theirstated approximation ratio with high probability. Iteratively running the algorithms a small number of times and simplytaking the highest quality solution yields the stated approximation ratio with high probability. For example, if a givenalgorithm finds a 22 , then running the algorithm k times and taking the bestresult yields a 23 approximation ratio with probability at least 12 )k. Several of the presented algorithmic results are of the form:3 approximation with probability 1 − ( 1Algorithm A returns a coalition structure that is guaranteed to have value within a factor ofprobability greater than 12 . A runs in expected time O (g(n)).f of the optimal withThat is, the output of the algorithm (and hence the quality of the solution it presents) is a random variable, and for someof the presented algorithms, the runtime of the algorithm is also a random variable.An empirical study is presented that shows the randomized algorithms perform similarly to their deterministic coun-terparts in terms of utility and sometimes find higher quality solutions. Further, it is shown that the run time of therandomized algorithms, for most approximation guarantees, is significantly faster than the deterministic algorithms.The remainder of the paper is organized as follows. Section 2 describes the prior work on coalition structure genera-tion. Section 3 presents the new randomized algorithms for coalition structure generation. Section 4 provides an empiricalcomparison of the new randomized algorithms to their deterministic counterparts. Section 5 presents concluding remarks.2. Related workMuch algorithm research has focused on the coalition structure generation problem. The current fastest algorithm that isguaranteed to find the optimal solution is based on dynamic programming and requires O (3n) time to find an optimal coali-tion structure on n agents [7,2,8]. Given this high computational complexity, recent work has focused on the developmentof anytime and approximation algorithms.Sandholm et al. [2] developed one of the first anytime algorithms for the coalition structure generation problem. Sand-holm et al. viewed coalition structure generation as a search through the lattice of partitions of the n agents, which theyreferred to as the coalition structure graph. Sandholm et al.’s algorithm proceeded by searching through the bottom twolevels of the coalition structure graph (i.e., those coalition structures that consisted of only one or two coalitions), followedby a breadth first search from the top of the graph (i.e., examining those coalition structures that consist of i coalitionsfollowed by those coalition structures that consist of i − 1 coalitions and so on). Sandholm et al. derive guarantees on thequality of the best solution found so far based upon which levels of the coalition structure graph have been searched.Among the state-of-the-art in anytime coalition structure generation is Rahwan et al.’s [1,6] Integer Partition algorithm.As with Sandholm et al.’s algorithm, the Integer Partition algorithm searches directly through the space of coalition struc-tures. The Integer Partition algorithm groups coalition structures together into subspaces based upon the sizes of thecoalitions they contain. For example, both the coalition structures {{1, 2}, {3}, {4}} and {{3, 4}, {1}, {2}} are in the samesubspace as they both contain a coalition of size 2 and two coalitions of size 1. Rahwan et al. show how to generate upperand lower bounds on the quality of the coalition structures in each subspace. The Integer Partition algorithm uses thosebounds to perform a branch and bound search through the space of all coalition structures. Empirically, Rahwan et al. haveshown that the Integer Partition algorithm is often capable of quickly pruning many of the subspaces from considerationand performs significantly better than Sandholm et al.’s algorithm.While the Integer Partition algorithm performs well empirically on many problem distributions, it is possible to constructdistributions on which the Integer Partition algorithms performance deteriorates significantly [10]. The worst case runtimerequired to find the optimal solution of both the Integer Partition algorithm and Sandholm et al.’s algorithm is O (nn), sincein the worst case each coalition structure must be examined and there are O (nn) coalition structures.T. Service, J. Adams / Artificial Intelligence 175 (2011) 2061–207420632.1. Deterministic approximation algorithmsOur recent work has focused on developing approximation algorithms for coalition structure generation that are guar-anteed to find an approximate solution of a given quality in less than O (3n) time [9,10]. For example, we have shownthat it is possible to find an approximate solution with value at least 2n2.83n) time. All currentapproximation algorithms are deterministic, in that they always return the same answer in the same amount of time whenrun on the same problem instance. The currently reported research expands upon the state-of-the-art by showing how toemploy randomization to generate approximate solutions with the same quality guarantees in less time than the currentdeterministic techniques.3 of the optimal in O (√The presented randomized approximation algorithms all relying on a deterministic preprocessing phase. This preprocess-ing phase formed the basis for previous approximation algorithms.The following definitions will be used:Definition 2.1. A characteristic function ν is monotonic iff whenever C ⊆ S ⊆ N, then ν(C) (cid:2) ν(S).Intuitively, a characteristic function is monotonic if adding an agent to a coalition can never harm the coalition members.Definition 2.2. A characteristic function ν is k-superadditive iff for all C, S ⊆ N such that1. C ∩ S = ∅ and2. |C ∪ S| (cid:2) k,then ν(C) + ν(S) (cid:2) ν(C ∪ S).∗ = {C1, . . . , Ck} with k (cid:3) 2 is an optimal coalition structure in a superadditive game, then C SIf ν is n-superadditive (or just superadditive), then the merger of any two coalitions into a larger coalition is never harm-= {C1, . . . , Ck−1 ∪ Ck}ful. If C Swill be optimal as well. This means that in a superadditive game, the coalition structure that places every agent into thesame coalition (referred to as the grand coalition) is optimal.∗2Superadditivity is a natural assumption. If two coalitions C1 and C2 merge, in the worst case, the members of C1 ∪ C2behave as if the merger did not occur and receive value ν(C1)+ν(C2). However, larger coalitions often times incur additionaloverhead (e.g., communication and/or computational overhead) [11]. It may be that the merger of coalitions is beneficial upto a point. That is, there is a point at which coordination costs outweigh the potential benefit derived from a larger coalition.The notion of k-superadditivity models such situations. For example, a game ν may be k-superadditive, because even thoughC1 ∪ C2 can earn strictly more utility than C1 and C2 independently, the cost of coordinating the actions of members ofC1 ∪ C2 outweighs the additional utility when |C1 ∪ C2| > k. Our previous work showed that, as with superadditive games,the existence of optimal coalition structures with only a few coalitions in k-superadditive games can be guaranteed [9].Theorem 2.3. Let r (cid:2) n be a positive integer. If ν is ncoalitions. If ν is2n2r−1 -superadditive, then ν has an optimal solution consisting of 2r − 2 coalitions.r -superadditive, then ν has an optimal solution that consists of at most 2r − 1∗The reader is directed to the prior paper [9] for the formal proof of Theorem 2.3; however, the intuition is as follows: Letν be k-superadditive and C Scontains2 coalitions, then, as ν is k-superadditive, ν(C1 ∪ C2) (cid:3)two coalitions, C1 and C2, each of which contains no more than kν(C1) + ν(C2). However, a new optimal coalition structure with fewer coalitions can be constructed by replacing C1 and C22 coalitions. Lessin C S2 agents). Therefore, most coalitions inwith C1 ∪ C2, but this is a contradiction. Hence, at most one coalition in C Scan have at most one small coalition (coalition with no more than kan optimal coalition structure in ν that has the smallest number of coalitions. If C Shas no more than k∗∗∗∗formally, C SC S∗must be large and there cannot be too many of them.Our prior work showed how to construct a new game ν kfrom any characteristic function game ν such that:rris knr superadditive and monotonic,1. ν k2. optimal solutions to ν and ν k3. given an approximate solution to ν krrhave the same value, and, a solution of equal or greater value can be constructed in ν in polynomial time.Pseudo-code for the construction of a monotonic ν kris broken up into two steps [9]. The first step, shown in Algo-rithm 2.1, takes an arbitrary coalitional game ν and constructs a new game ν kmonotonic. The second step, shown in Algorithm 2.2, uses the newly constructed ν kboth knr -superadditive and monotonic.rrthat is knr -superadditive, but not necessarilyto construct a new game νmax that is2064T. Service, J. Adams / Artificial Intelligence 175 (2011) 2061–2074Algorithm 2.1 Constructing ν kr.ν k(cid:11) do1: for i = 1 to (cid:10) knrfor C ⊆ N, |C| = i do2:(C) ← ν(C)3:(cid:13) ⊂ C do(cid:13)) + ν k(C(C) ← ν kif ν kν krfor C4:5:6:rr(cid:13)) > ν k(C \ C(C(cid:13)) + ν kr(C \ C(cid:13))(C) thenrrr7:8:9:end ifend forend for10: end for11: ν kr(C) = ν(C) for all C such that |C| > knrAlgorithm 2.1 constructs a knr -superadditive game by considering the merger of every pair of disjoint coalitions, C and S,in order of increasing size. For each coalition |C| (cid:2) k, the best value over all possible splittings of C intowith |C ∪ S| (cid:2) knrtwo disjoint coalitions is stored in ν k(C). By proceeding in order of increasing size, this results in ν k(C) equalling the value(C) is set equal to ν(C).of the optimal coalition structure over the agents in C . For coalitions, C with more than k agents, ν kIn addition to storing the value of each coalition, the optimal way in which to split a coalition C into two smaller coalitionsS, C \ S is stored as well. Given a coalition structure in ν k, a coalition of equal value can be constructed in ν by followingthe splittings of coalitions.rrrrAlgorithm 2.2 Constructing νmax.1: for k = 1 to n do2:3:for C ⊆ N, |C| = k do(C)νmax(C) ← ν kfor a ∈ C dor4:5:6:7:8:9:if νmax(C − {a}) > νmax(C) thenνmax(C) ← νmax(C \ {a})end ifend forend for10: end forrr|C|Algorithm 2.2 constructs a monotonic game by setting for each C ⊆ N νmax(C) = maxS⊆C ν krequires taking the maximum over 2sidering coalitions in order of increasing size. When considering a coalition C , we have that νmax(S) = maxS(cid:13)⊆S ν kall S (cid:2) C . Thus, determining maxS⊆C ν ka ∈ |C|. This total process requires O (n2n) time.(S). Naively building νmaxvalues for each coalition C . Algorithm 2.2 constructs νmax more efficiently by con-(cid:13)) for(S(C \ a) for each(S) requires taking the maximum over |C| + 1 values ν k(C) and ν kNotice that if it is known that ν has an optimal solution, C S. This result is true since C has value at least as great as all coalitions in C Sthat consists of k solutions, then the coalition C =∗argmaxC⊂N ν(C) has value at least ν(C S.Likewise if C1, . . . , Cm are m (cid:2) k disjoint, possibly empty coalitions that maximize ν(C1) + · · · + ν(Cm) over all disjoint sets∗). Given such a set of m coalitions, a coalition structureof m, possible empty coalitions, then ν(C1) + · · · + ν(Cm) (cid:3) m∗) can be constructed in polynomial time [9]. Algorithms that find suchin the original game ν that has value at least ma collection of m coalitions will be referred to as solution extraction procedures.Previous deterministic approximation algorithms worked by constructing ν k(C2). Since ν kpossibly empty coalitions, C1 and C2, that maximized ν kcan be accomplished by taking the maximum of ν(C) + ν(N \ C) over all C ⊆ N in O (2n) time. This technique yields aapproximate solution when ν 1from ν and extracting two disjoint andis monotonic, finding two such coalitionsis constructed from ν and a 1is constructed.(C1) + ν kk ν(C Sk ν(C S22r−1∗)∗kr−1 approximation solution when ν 22r−1rrrrrrrr3. Randomized coalition structure generationThis section presents a randomized algorithm for approximate coalition structure generation. The presented techniquessignificantly improve upon the runtimes of their deterministic counterparts.The algorithms presented all succeed in finding an f -approximate solution with probability greater than e−1e. Rerunningthe algorithm, for example, three times and selecting the best solution found over all three runs, results in an f -approximatesolution with probability at least 1 − (1 − e−1e )3 > 0.95 (i.e., the probability that all three runs fail to find an f -approximatesolution is no more than (1 − e−1e )3). However, the performance of the algorithm may not be the only probabilistic element.The algorithm’s runtime may also be a random variable. When an algorithm’s runtime is a random variable, we report theT. Service, J. Adams / Artificial Intelligence 175 (2011) 2061–20742065algorithm’s expected runtime. The observed runtime of the presented algorithms will be close to the expected runtime, withhigh probability.All of the presented results follow from a careful analysis of the number of coalitions, and their respective sizes, fora particular optimal solution. As a result, a single randomized approximate algorithm that is capable of generating all theapproximation ratios is not presented. Instead, it is necessary to tailor each algorithm to each approximation ratio. Therefore,a different algorithm for each approximation ratio is presented.Many of the presented algorithms involve examining all coalitions of agents that contain at most some fixed fraction of(cid:11) agents). The floor symbols are dropped from the statement of the(cid:4)the agents (i.e., all coalitions that consist of at most (cid:10) nralgorithms and their correctness proofs in order to improve readability. For example,be an integer. The floor of nrof the formula and not the derived asymptotic bounds.r may notis implicitly taken in these situations. Removal of the floor symbols affects only the readabilitynris written even though n(cid:3) nAll the presented randomized approximation algorithms are based on the following underlying idea. Given an arbitrarycoalitional game ν, first construct ν k, for appropriately chosen k and r. Second, extract m disjoint coalitions that maximizetheir combined value. It has been previously shown how this can be accomplished in O (n2n) time for m = 1, 2. The maincontribution of this work is to show that in some situations, extracting m disjoint, possible empty coalitions that maximizethe sum of their values for m = 3, 4 is possible using simple randomized algorithms.rIn summary, the presented randomized approximation techniques are variations of the following procedure:1. Construct ν kstant m).rto ensure that there exists an optimal coalition structure that contains only m coalitions (for some con-2. Run, possibly multiple solution extraction procedures and return the best solution.Multiple solution extraction procedures are required because the smallest optimal solution may contain 1, . . . , m coalitions.Each extraction procedure is designed to handle some subset of the possible sizes of the smallest optimal solution.knr(r−k)nr) time [9]. All but one of the presented algorithms will require ν krto be mono-is monotonic requires an additional O (n2n) time [9]. Unless otherwise stated, we√requires O (Constructing ν knrn2knr (r−k)tonic. Enforcing the constraint that ν kassume that ν kis monotonic.krrrAlgorithm 3.1 represents the first solution extraction procedure to extract two disjoint coalitions C1 and C2 that maxi-mize ν kr(C1) + ν k(C2).rAlgorithm 3.1 Extracting two coalitions from a monotonic ν.1: C1 = N2: C2 = ∅3: for C ⊆ N do4:5:6:7:8: end forif νmax(C) + νmax(N \ C) > νmax(C1) + νmax(C2) thenC1 = CC2 = N \ Cend ifThe second and third extraction procedures (Algorithms 3.2 and 3.3) are randomized and require a priori knowledge ofthe maximum sizes of the coalitions to be extracted.Algorithm 3.2 works as follows: Assume that it is known there are three disjoint coalitions C∗3 with totalvalue at least f times that of an optimal solution. A simple randomized approach to find three disjoint coalitions with totalvalue at least f times that of the optimal simply adds each agent to one of three sets with equal probability. That is, withprobability 13 to C3.⊆ Ci for i = 1, 2, 3, then the total value of C1, C2 and C3 will be at least f times thatSince νmax is monotonic, as long as C. Lemma 3.1 shows that inof an optimal solution. The probability that C|)order to be guaranteed to find C1, C2 and C3 with high probability, it is necessary to repeat this procedure O (3times.3 each agent ai is added to coalition C1, with probability 13 ai is added to C2, and with probability 1⊆ Ci for i = 1, 2, and 3 is simply ( 1∗2 and C∗1 , C3 )|C|+|C|+|C|+|C|+|C∗i∗i|C∗2∗1∗3∗1∗2∗3|Lemma 3.1. In a binomial distribution with success probability p after (cid:15) 1p(approximately, 63.21%).(cid:16) trials, the probability of at least one success is at least e−1ePlease see Appendix A for the proof of Lemma 3.1.Lemma 3.2 provides a proof of the correctness and runtime of Algorithm 3.2.2066T. Service, J. Adams / Artificial Intelligence 175 (2011) 2061–2074Algorithm 3.2 Extracting three coalitions from a monotonic ν. Requires one parameter: num_iterations.(cid:13)1(cid:13)2(cid:13)3← ∅← ∅← ∅CCCfor k = 0 to num_agents do1: C1 ← ∅2: C2 ← ∅3: C3 ← ∅4: for i = 0 to num_iterations do5:6:7:8:9:10:11:12:13:14:15:16: end forend for(cid:13)1) + ν(Cif ν(C(cid:13)C1 ← C1(cid:13)C2 ← C2(cid:13)C3 ← C3(cid:13)2) + ν(Cend ifAdd agent ak to one of the coalitions C(cid:13)1, C(cid:13)2 or C(cid:13)3 with equal probability.(cid:13)3) > ν(C1) + ν(C2) + ν(C3) thenAlgorithm 3.3 Extracting four coalitions from a monotonic ν. Requires two parameters: num_iterations and upperbound.Add agent ak to one of S 1 and S 2 with equal probabilityend forfor A ⊂ S 1, | A| (cid:3) upperbound doif ν( A) + ν(S 1 \ A) > ν(C1) + ν(C3) thenend forfor A ⊂ S 2, | A| (cid:3) upperbound doif ν( A) + ν(S 2 \ A) > ν(C2) + ν(C4) then(cid:13)i(cid:13)1(cid:13)3CCend if← S 1 \ A← ACfor k = 0 to num_agents do1: Ci ← ∅ for i = 1, 2, 3, 42: for i = 0 to num_iterations do← ∅ for i = 1, 2, 3, 43:4:5:6:7:8:9:10:11:12:13:14:15:16:17:18:19:20:21:22: end forend for(cid:13)(cid:13)2) + ν(C1) + ν(Cif ν(C(cid:13)i for i = 1, 2, 3, 4Ci ← C← S 2 \ A← ACCend ifend if(cid:13)2(cid:13)4(cid:13)3) + ν(C(cid:13)4) > ν(C1) + ν(C2) + ν(C3) + ν(C4) thenLemma 3.2. Let Citerations the best solution found by Algorithm 3.2 has value at least ν(C∗3 be three disjoint coalitions from a set of n agents. If ν is monotonic, then after O (3∗1) + ν(C|C3) with probability at least e−1∗2) + ν(C∗2 and C∗1 , C∗e.∗1|+|C∗2|+|C∗3|)∗1|+|CProof. During a single iteration of Algorithm 3.2, the probability that all agents in C3 )|Csimply ( 1Therefore, after 3∗∗⊆ CC2 and C1 , C. The iterations of Algorithm 3.2 form a binomial distribution with success probability ( 1∗|+|C|2(cid:13)⊆ C3iterations, with probability greater than e−1e∗(cid:13)2) + ν(C3 . Since ν is monotonic, ν(C, Algorithm 3.2 succeeds in finding three coalitions(cid:13)3) (cid:3) ν(C(cid:13)i , for i = 1, 2, and 3, is|3 )|C.∗i are placed in C∗2) + ν(C∗1) + ν(C(cid:13)1) + ν(C∗3). (cid:2)|+|C∗1∗3|+|C∗2|C⊆ C|+|C|+|C(cid:13)2(cid:13)1∗3∗2∗3∗1|The following variation of Algorithm 3.2 (henceforth referred to as Algorithm 3.2(a)) was found to be more efficient in(cid:13)1 with probabilitypractice. Rather then place each agent in C(cid:13)3 with probability 0.3125. The increased efficiency stems from the fact that the probabilities 0.3750.375 and in Cand 0.3125 can be created easily from a fair coin, while generating an event with 13 probability cannot. All of our empiricalresults employ Algorithm 3.2(a). The use of Algorithm 3.2(a) does not affect the presented asymptotic results. Lemma 3.3shows that the required number of iterations increase only slightly under in Algorithm 3.2(a).(cid:13)3 with equal probability, each agent ai is placed in C(cid:13)2 and C(cid:13)2 or C(cid:13)1, CLemma 3.3. Let Citerations the best solution found by Algorithm 3.2(a) has value at least ν(C∗3 be three disjoint coalitions from a set of n agents. If ν is monotonic, then after O (3.012∗1) + ν(C|+|C3) with probability at least e−1∗2) + ν(C∗2 and C∗1 , C|C∗.e∗1∗2|+|C∗3|)Proof. During a single iteration of Algorithm 3.2(a), the probability that all agents in Cand 3, is simply 0.375probability 0.375e−1eν(C(cid:13)i , for i = 1, 2,. The iterations of Algorithm 3.2(a) form a binomial distribution with successiterations, with probability greater than∗(cid:13)1) +3 . Since ν is monotonic: ν(C, Algorithm 3.2(a) succeeds in finding three coalitions C(cid:13)∗2) + ν(C2) + ν(C∗2. Therefore, after (|C| · 0.3125|C∗||+|C|C| · 0.312530.3125 )|C| · (∗⊆ C⊆ C1 , C∗i are placed in C∗2∗2 and C∗1) + ν(C(cid:13)3) (cid:3) ν(C0.375 )|C⊆ C∗3).|+|C|+|C(cid:13)1(cid:13)2(cid:13)3|C∗2∗3∗3∗1∗1∗111||T. Service, J. Adams / Artificial Intelligence 175 (2011) 2061–20742067Assume without loss of generality that |C1| (cid:3) |C2| (cid:3) |C3|. Thus, |C2| + |C3| (cid:2) ( 2the total number of iterations required by the variation on Algorithm 3.2(a) is at most:3 )|C1|+|C2|+|C3|. Therefore, as(cid:6) |C1|+|C3||+|C23(cid:5)10.375(cid:5)·10.3125(cid:6) 2(|C1|+|C3|)|+|C23(cid:3)3.012(|C1|+|C2|+|C3|)(cid:4).= O(cid:2)10.375 < 10.3125The fourth and final solution extraction procedure (Algorithm 3.3) extracts four disjoint coalitions from a monotonic∗∗∗game. Algorithm 3.3 works as follows: Assume that it is known that there are four disjoint coalitions C1 , C3 and C4∗∗∗with total value at least f times that of the optimal. Without loss of generality, assume that |C|.| (cid:3) |C| (cid:3) |C243Algorithm 3.3 places each agent randomly in one of two sets, S1 or S2, with equal probability. After randomly distributing⊂ S1 that maximizes ν(C S1 ) + ν(S1 \ C S1 ) subjectthe agents among S1 and S2, Algorithm 3.3 finds the two coalitions C S1| (cid:2) u. Notice that, since ν is monotonic, this is equivalent to finding the two coalitions C1, C2 ⊂ S1 that maximizeto |C S1ν(C1) + ν(C2) subject to at least one of the coalitions containing no more than u agents. This same process is repeated for| (cid:2) u is found. Algorithm 3.3 returnsS2. That is, the coalition C S2the maximum over all iterations of ν(C S1 ) + ν(S1 \ C S1 ) + ν(C S2 ) + ν(S2 \ C S2 ).⊂ S2 that maximizes ν(C S2 ) + ν(S2 \ C S2 ) subject to |C S2∗∗1, CIf C3∗2) + ν(CDetermining the runtime of Algorithm 3.3 requires the following combinatorial identity, the proof of which is provided⊂ S1, C| (cid:3) |C∗4). Therefore, Algorithm 3.3 will return an f approximate solution.∗3) and ν(C S2 ) + ν(S2 \ C S2 ) (cid:3)|, then ν(C S1 ) + ν(S1 \ C S1 ) (cid:3) ν(C⊂ S2 and u (cid:3) |C∗2 , C| (cid:3) |C∗1) + ν(C∗2, Cν(C∗4∗4∗3∗1in Appendix A.Lemma 3.4. The following identity holds for all positive integers n > u:n(cid:2)(cid:5)n(cid:6)(cid:5)k(cid:6)krk=u= 2n−u(cid:5)(cid:6).nuLemma 3.5 bounds the time required per iteration for Algorithm 3.3.Lemma 3.5. With upperbound u (cid:2) n3 , each iteration of Algorithm 3.3 runs in time O ( 12u(cid:3)(cid:4)).nuProof. The probability that |S1| = k in any given iteration isprobability of S1 being any given subset of the agents is 12n .(cid:4)(cid:3)nk· 12n , as there are(cid:4)(cid:3)nkIf |S1| = k, then the for loop beginning on line 7 is executed 2k times if k (cid:2) u andloop beginning on line 13 runs for 2n−k iterations if n − k (cid:2) u anditerations if n − k > u.(cid:3)(cid:4)n−kuSumming over all possible sizes of S1 yields an expected runtime of:possible sets of k agents and the(cid:4)times if k > u. Likewise, the for(cid:3)kuu(cid:2)(cid:6)(cid:7)(cid:5)nkk=012n2k +(cid:6)(cid:8)(cid:5)n − ku+ 12n= 12n= 22nn−u−1(cid:2)(cid:5)n(cid:6)(cid:5)k(cid:6)(cid:5)k=0(cid:5)n(cid:2)nkk=u(cid:6)n − ku(cid:6)ku+ 22n+ 12n(cid:5)nu(cid:2)k=0kk=u+1(cid:6)2k (cid:2) 22nk(cid:8)+ 2n−k(cid:6)kun−u−1(cid:2)(cid:6)(cid:7)(cid:5)(cid:5)nk(cid:6)(cid:5)k=u+1(cid:5)n(cid:2)n(cid:6)(cid:8)(cid:6)ku+(cid:5)n − ku+ 12n(cid:6)ku+ 12n(cid:6)(cid:5)(cid:5)nku(cid:2)k=0(cid:6)2k + 12nn(cid:2)(cid:6)(cid:7)(cid:5)(cid:5)nk=n−un(cid:2)k(cid:6)(cid:5)nk=n−u(cid:5)(cid:5)k(cid:6)(cid:6)2n−k2n−unu+ n22n2u= O12unu.(cid:2)(cid:6)(cid:5)nu∗1 , C∗∗∗4 be four disjoint coalitions from a set of n agents such that |C3 and C2 , CLemma 3.6. Let C∗|+|C|C|+|Cmonotonic, then after O (21∗∗2) + ν(C1) + ν(Chas value at least ν(C4) with probability at least e−1|+|C∗3) + ν(C∗3∗2∗4∗.e∗1|) iterations the best solution found by Algorithm 3.3 with an upperbound of at least |C| (cid:3) |C| (cid:3) |C| (cid:3) |C∗2∗3∗4|. If ν is∗|3Proof. If during some iteration of Algorithm 3.3, Cloop beginning on line 7, eventually A = C(cid:13)∗3) (cid:3) ν(Cand ν(C3).∗Likewise, since upperbound (cid:3) |C4∗2) + ν(Cwith value at least ν(C(cid:13)2) + ν(C|, then ν(C∗∗3) + ν(C4).∗1) + ν(C∗1) + ν(C(cid:13)1) + ν(C∗1, C∗4∗3 . Since ν is monotonic and C⊆ S1 and C∗2, C∗3⊆ S2, then since upperbound (cid:3) |C∗∗∗3) + ν(C3 , then ν(S1 \ C1⊂ S1 \ C∗∗| (cid:3) |C34∗3) (cid:3) ν(C| in the for∗∗1) + ν(C3)(cid:13)4) (cid:3) ν(C∗2) + ν(C∗4). Therefore, Algorithm 3.3 will return a solutionBy Lemma 3.1, the probability that during at least one iteration of Algorithm 3.3 C1, C3 ⊆ S1 and C2, C4 ⊆ S2 is strictlygreater than e−1e. (cid:2)2068T. Service, J. Adams / Artificial Intelligence 175 (2011) 2061–2074Table 1Approximation ratios and corresponding running times for the presented algorithm for arbitrary coali-tional games. The first column provides the approximate ratio of the algorithm in terms of the fractionof the value of the optimal solution guaranteed. The second and third columns list the time requiredto obtain the stated approximation ratio for the deterministic and randomized algorithms respectively.Approximationratio2/33/51/21/31/4Deterministicalg. runtime√O (N/A√O (√O (O (n2n)n2.83n)n2.59n)n2.22n)Randomizedalg. runtimen2.587n)n2.382n)n2.09n)√√√O (O (O (O (n2n)O (2n)Lemma 3.7 is used to determine the runtime of the various approximation algorithms. The proof of Lemma 3.7 can befound in Appendix A.Lemma 3.7. Let r be a fixed integer, then(cid:4)(cid:3)nn/r= O (√rnn(r−1)).(r−1)nrThe new randomized approximation algorithms can be presented given the provided lemmas. Table 1 presents a sum-mary of the approximate ratios and running times obtainable by the new randomized algorithms.Theorem 3.8. A 23 approximate coalition structure in ν can be found in O (√n2.587n) time.√in O (n2.587n) time, then run Algorithm 3.1 toProof. A 23 approximation can be obtained as follows: First construct ν 25find two disjoint coalitions that maximize the sum of their values. Finally run Algorithm 3.2 for 3This procedure guarantees a 23 approximate solution with high probability.∗Let C Sbe an optimal coalition structure in ν 2with the least number of coalitions. By Theorem 2.3, |C S∗| (cid:2) 4. We4n5 = O (2.41n) iterations.5consider two cases.1. |C S2. |C S∗| (cid:2) 3. Algorithm 3.1 returns a 2∗∗| = 4. Let the coalitions in C S3 approximate solution in O (2n) time.be |C1| (cid:3) |C2| (cid:3) |C3| (cid:3) |C4|. Since ν 25 . Otherwise{C1, C2, C3 ∪ C4} is an optimal coalition structure with fewer coalitions. Since |C3| (cid:3) |C4|, it must be the case that|C3| > n5 . Therefore, |C1|, |C2| > n5 .At least one of the following must be true:∗),(a) ν(C1) + ν(C2) (cid:3) 2(b) ν(C1) + ν(C3) + ν(C4) (cid:3) 2(c) ν(C2) + ν(C3) + ν(C4) (cid:3) 2Since, if all three inequalities were false, summing the right- and left-hand sides yields:3 ν(C S3 ν(C S∗) or∗).5 superadditive, |C3| + |C4| > 2n3 ν(C Sis 2n5(cid:3)(cid:4)ν(C1) + ν(C2) + ν(C3) + ν(C4)2< 2 ∗ ν(cid:3)(cid:4)∗.C SHowever, this is a contradiction as ν(C1) + ν(C2) + ν(C3) + ν(C4) = ν(C S∗).If ν(C1) + ν(C2) (cid:3) 23 ν(C S∗), then Algorithm 3.1 returns a 2or third cases is true, then both |C1| + |C3| + |C4| and |C2| + |C3| + |C4| contain fewer than 4nLemma 3.2, Algorithm 3.2 returns a 25 ) = O (2.41n) iterations.4n3 approximate solution in O (3, which requires O (√n2.587n) time. (cid:2)The bottleneck step is constructing ν 253 approximate solution in O (2n) time. If one of the second5 coalitions. Therefore, byTheorem 3.9. A 35 approximate coalition structure in ν can be found in O (√n2.38n) time.√in O (n2.38n) time. After constructing ν 1, run Algorithm 3.1 followed by Algorithm 3.2 for3be an optimal coalition structure in ν 1with the least number of coalitions. By Theorem 2.3, |C S∗| (cid:2) 5. There3nProof. First construct ν 14 = O (2.28n) iterations.Let C S3∗3are three cases to consider.1. |C S∗| (cid:2) 3. Algorithm 3.1 will return a 23 > 35 approximate solution in O (2n) time.3T. Service, J. Adams / Artificial Intelligence 175 (2011) 2061–20742069∗), then ν(C1) > 25 ν(C S∗) − ν(C1), then ν(Ci) (cid:3) 13 (ν(C S∗)(cid:4)(cid:3)∗). Let Ci be the coalition in {C2, C3, C4} with the∗) − ν(C1)). Therefore,(cid:4)(cid:4)(cid:3)(cid:3)∗3ν+ 415∗) or ν(C1) + ν(Ci) (cid:3) 3C S= 9155 ν(C Sν∗C S= 35νC S∗.3n4 ) = O (2.28n) time because |C1| (cid:3) n∗). If ν(C2) + ν(C3) + ν(C4) (cid:3) 35 ν(C S4 . If ν(C1)+ν(Ci) (cid:3) 3∗), then∗)5 ν(C S2. |C S∗| = 4. If ν(C2) + ν(C3) + ν(C4) < 35 ν(C Shighest value. Since ν(C2) + ν(C3) + ν(C4) = ν(C Sν(C1) (cid:3) ν(C Sν(Ci) + ν(C1) (cid:3) ν(C S∗)+ 233Hence, either ν(C2) + ν(C3) + ν(C4) (cid:3) 3Algorithm 3.2 returns a 3then Algorithm 3.1 returns a 3∗| = 5. Since ν is n5 approximate solution in O (35 approximate solution.5 ν(C S3. |C Sthree highest valued coalitions in C Ssolution in O (32n3 ) = O (2.09n) iterations. (cid:2)3 superadditive, any three coalitions Ci , C j and Ck can contain at most 2n∗must be a 35 approximate solution, then Algorithm 3.2 returns a 33 agents. Since the5 approximateTheorem 3.10. A 12 approximate coalition structure in ν can be found in O (√n2.09n) expected time.Proof. Construct ν 14√in O (n2.09n) time, then run Algorithm 3.1 to identify two disjoint coalitions that maximize thesum of their values, followed by Algorithm 3.2 for 3iterations with upperbound = n6 . By Lemma 3.5, each iteration of Algorithm 3.3 requires O(cid:3)(cid:4)(cid:4)(cid:3)1n62(cid:4)(cid:4)(cid:3) nn/65n8 = O (1.99n) iterations. Finally, run Algorithm 3.3 for 24n7 = O (1.49n)time. Hence, the totalruntime of Algorithm 3.3 is O= O (2.08n).(cid:3) nn/64n7n622∗be an optimal coalition structure in ν 1We show that this procedure guarantees a 1Let C SLet |C1| (cid:3) |C2| (cid:3) · · · (cid:3) |Cr| be the coalitions in C S∗| (cid:2) 7.4 superadditive,{C1, . . . , Cr−2, Cr−1 ∪ Cr} is an optimal coalition structure with fewer coalitions. Since |Cr−1| (cid:3) |Cr|, it must be that |Cr−1| (cid:3)8 . Hence, for all i < r, |Ci| (cid:3) nn8 .with the least number of coalitions. By Theorem 2.3, |C Sis n2 approximate solution with high probability.. Note that |Cr−1| + |Cr| > n4 otherwise, since ν 1∗44There are four cases to be considered.1. |C S2. |C S∗| (cid:2) 4. Algorithm 3.1 returns a 1∗| = 5. One of {C1, C2} and {C3, C4, C5} must have total value at least ν(C S2 approximate solution in O (2n) time.∗)rithm 3.1 returns a 12 approximation solution. Note that |C1| + |C2| (cid:3) 2n∗) and |C3| + |C4| + |C5| (cid:2) 3nin C Swith value at least ν(C3) + ν(C4) + ν(C5) (cid:3) ν(C S5 . Therefore, if ν(C3) + ν(C4) + ν(C5) (cid:3) ν(C S2 with high probability in O (3∗)23. |C S∗| = 6. One of {C1, C5, C6} and {C2, C3, C4} must have total value at least ν(C S∗)2. If ν(C1) + ν(C2) (cid:3) ν(C S, then Algo-5 (as they are the two largest of the 5 coalitions, then Algorithm 3.2 returns a solution3n5 ) = O (1.94n) iterations.∗)2∗), then |C1| + |C5| + |C6| (cid:2) 5least ν(C S2∗)ν(C S, then |C2| + |C3| + |C4| (cid:2) 52a solution with value at least ν(C S2.8 because |C2|, |C3|, |C4| (cid:3) n8 because |C5| + |C6| (cid:3) n∗)4 and |C1| (cid:3) n2. If {C1, C5, C6} has total value at8 . Likewise, if {C2, C3, C4} has total value at least8 . Therefore, in either case, Algorithm 3.2 returns∗)∗)4. |C S1∗| = 7. One of {C1, C2, C3} and {C4, C5, C6, C7} must have total value at least ν(C S. Since |C4| + |C5| + |C6| + |C7| (cid:3)2∗), then Algorithm 3.2 will return a2 . Therefore, if {C1, C2, C3} has value at least ν(C S2n2 ) = O (1.74n) iterations. Otherwise, if {C4, C5, C6, C7} has value at least ν(C S, then∗)22 then |C1| + |C2| + |C3| (cid:2) 112 approximate solution in O (3Algorithm 3.3 will return a 12 approximate solution in 24n7iterations because |C7| (cid:2) |C6| (cid:2) 16 . (cid:2)Theorem 3.11. A 13 approximate coalition structure in ν can be found in O (n2n) time.Proof. First construct ν 29in O (n2n) time. Run Algorithm 3.1 to identify two disjoint coalitions that maximize the sum oftheir values, followed by Algorithm 3.2 for 35n12 = O (1.59n) iterations.We show that this procedure guarantees a 1Let C Sbe an optimal coalition structure in ν 2∗3 approximate solution with high probability.with the least number of coalitions. By Theorem 2.3, |C S∗| (cid:2) 8. There9are three cases to consider.1. |C S2. |C S∗| (cid:2) 6. Algorithm 3.1 returns a 1∗| = 7. One of {C1, C2}, {C3, C4}, and {C5, C6, C7} must have total value at least ν(C S3 approximate solution in O (2n) time.∗). If {C1, C2} or {C3, C4} has3 approximation solution. Otherwise, Algorithm 3.2 returns a 133total value at least ν(C S3approximation solution in O (3, then Algorithm 3.1 returns a 17 ) = O (1.61n) iterations.3n∗)20703. |C ST. Service, J. Adams / Artificial Intelligence 175 (2011) 2061–2074∗| = 8. One of {C1, C2}, {C3, C4, C5}, and {C6, C7, C8} must have total value at least ν(C S∗)superadditive, |C7| + |C8| > 2n, then Algorithm 3.1 will return a 1at least ν(C S3is 2n9|C6 + |C7| + |C8|. Therefore, if either {C3, C4, C5} or {C6, C7, C8} has total value at least ν(C S12 ) = O (1.59n) iterations. (cid:2)find a 13 approximate solution. Notice that |C1| + |C2| (cid:3) 2n3 . Thus, n − n9 . Therefore, |C6| + |C7| + |C8| (cid:3) n− n35n343 approximation in O (3∗)3. If {C1, C2} has value= n4 and ν 2(cid:3) |C3| + |C4| + |C5| (cid:3)= 5n12∗), then Algorithm 3.2 will89The presented 14 approximation algorithm runs in O (2n) time. Since requiring ν kto be monotonic requires O (n2n) time,rit is not possible to use monotonicity to simplify the 14 approximation algorithm. Algorithm 3.4 presents a randomized algo-rithm to extract two disjoint coalitions that maximize the sum of their values in games that are not necessarily monotonicand forms the basis of the 14 approximation algorithm.Algorithm 3.4 works similarly to Algorithm 3.3. Each agent is placed into one of two sets S 1 or S2 with equal probability.For each of S1 and S2 the highest valued coalition containing at most upperbound agents is determined. Each iteration of(cid:13)this process yields two disjoint coalitions C2. The two coalitions with the highest total value are returned. Theanalysis of the running time and correctness of Algorithm 3.4 is analogous to that of Algorithm 3.3. Hence, each iterationof Algorithm 3.4 requires Otime for an upperbound of u. Therefore if C1 and C2 are two disjoint coalitions eachiterations Algorithm 3.4 finds an approximate solution with(cid:13)1 and C|C1|+|C2|12u(cid:4)(cid:4)nu(cid:3)(cid:3)containing fewer than upperbound agents, then after 2value at least ν(C1) + ν(C2) with probability e−1.eAlgorithm 3.4 Extracting two coalitions from a not necessarily monotonic ν. Requires two parameters: num_iterations andupperbound.Add agent ak to one of S 1 and S 2 with equal probabilityend forfor C ⊂ S 1, |C| (cid:3) upperbound do(cid:13)1) then(cid:13)i(cid:13)1Cend ifif ν(C) > ν(C← CCfor k = 0 to num_agents do1: Ci ← ∅ for i = 1, 22: for i = 0 to num_iterations do← ∅ for i = 1, 23:4:5:6:7:8:9:10:11:12:13:14:15:16:17:18:19:20: end forif ν(C) > ν(C← CCend ifend if(cid:13)2end forfor C ⊂ S 2, |C| (cid:3) upperbound do(cid:13)2) thenend for(cid:13)(cid:13)2) > ν(C1) + ν(C2) then1) + ν(Cif ν(C(cid:13)i for i = 1, 2Ci ← CTheorem 3.12. A 14 approximate coalition structure in ν can be found in O (2n) expected time.in O (2n) time. Note that in this situation ν 2Proof. First, construct ν 2is constructed,identify the coalition C ⊆ N that has the highest value (this can be done in a single O (2n) time loop through all coalitions).9 , for a total running time ofFinally, run Algorithm 3.4 twice. First for 2O (1.96n). Second for 29 = O (1.36n) iterations with an upperbound of 2n5 = O (1.32n) iterations with an upperbound of nis not necessarily monotonic. Once ν 24 , for a total running time of O (1.95n).2n4n999∗Let C Sbe an optimal coalition structure in ν 1with the fewest number of coalitions. By Theorem 2.3, |C S∗| (cid:2) 8. Assume,without loss of generality that for Ci, C j ∈ C S∗, |Ci| (cid:3) |C j| whenever i < j. There are five cases to consider.41. |C S2. |C S∗| (cid:2) 4. The highest valued coalition is a 1∗| = 5. One of C1, C2, C3 and {C4, C5} must have total value at least ν(C S4 approximate solution and is found in O (2n) time.. Since |C4| + |C5| (cid:2) 2n∗)45 and |C5| (cid:2) |C4| (cid:2) n4after 22n5iterations, Algorithm 3.4 will find a 14 approximate solution.3. |C S∗| = 6. One of C1, C2, {C3, C4} and {C5, C6} must have total value at least ν(C S∗)9 agents and |C1| + |C2| (cid:3) n. Since any two coalitions Ci and C j3 , both |C3| + |C6| and |C4| + |C5| are bounded above by4must collectively contain at least 2nn − 2n99 . Note that,3 = 4n− n3 · |C3| (cid:2) |C1| + |C2| + |C3| = n − |C4| − |C5| − |C6| (cid:2) n − n3= 2n3,T. Service, J. Adams / Artificial Intelligence 175 (2011) 2061–20742071Table 2The average utilities generated by the randomized and deterministic algorithms for five different approximation ratios on three problem distributions.NormalModifiedUniformNDCSApproximationratioRandomizedDeterministicRandomizedDeterministicRandomizedDeterministic2/33/51/21/31/432.49732.575617.14619.5162.24663.16332.401N/A610.1N/A61.5042N/A32.46632.497529.71503.59557.46652.64832.37132.375432.585405.7949.08748.78828.56832.371316.59385.41536.77248.072where the last inequality follows from the fact that |C5| + |C6| (cid:3) 2na 14. |C S4 approximate solution after 2∗| = 7. One of C1, {C2, C3}, {C4, C5} and {C6, C7} must have total value at least ν(C S9 . Therefore, |C3| (cid:2) 2niterations.4n9∗)Ci and C j must collectively contain at least 2nbounded above by n − 4n63 . Notice that,92 · |C2| (cid:2) |C1| + |C2| = n − |C3| − |C4| − |C5| − |C6| − |C7| (cid:2) n − 5n99 agents and |C1| (cid:3) n= 26n− n7As before, the last inequality follows from the fact that ν 2= 4n99 -superadditive. Therefore, |C2| (cid:2) 2n.is 2n9. Again, since any two coalitions7 , then |C2| + |C7|, |C3| + |C6| and |C4| + |C5| are49 . Hence, Algorithm 3.4 will find9 and Algorithm 3.426n63will find a 14 approximate solution after 2iterations.∗| = 8. One of {C1, C8}, {C2, C7}, {C3, C6} and {C4, C5} must have total value at least ν(C S∗)5. |C Scoalitions Ci and C j must collectively contain at least 2nare bounded above by n − 6n9superadditive. Therefore, C1 can contain at most 2nafter 23 iterations. (cid:2)= nn3 . The coalitions other than C1 must contain at least 7n. Again, since any two9 agents, then |C1| + |C8|, |C2| + |C7|, |C3| + |C6| and |C4| + |C5|is 2n9 -4 approximate solution9 agents. Therefore, Algorithm 3.4 will find a 19 agents, since ν 2494. Empirical studyThis section presents an empirical comparison of the randomized approximation algorithms to their deterministic coun-terparts. The empirical results are presented in two subsections. The first compares the randomized and deterministicalgorithms in terms of the solution utilities they generate. The second subsection compares the runtimes of the randomizedand deterministic algorithms over a number of problem sizes. All data points are averaged over 20 independent runs. Foreach run, the randomized algorithms were run for three iterations to guarantee that the stated approximation ratio wasfound with probability 1 − (1 − e−1e )3 > 0.95.4.1. Utility comparisonAll experiments presented in this subsection consists of problems with 24 agents. The performance of the randomizedand deterministic algorithms are compared over the following three problem distributions, which are standard to the coali-tion structure generation literature [1,9,10,12]:1. Normal Distribution: the value of each coalition C was set to |C| · N (1.0, 0.01).2. Modified Uniform Distribution: each coalition C is assigned a value drawn uniformly between 0 and 10 · |C|; however,each coalition’s value is increased by a random number drawn uniformly between 0 and 50 with 20% probability.3. Normally Distributed Coalition Structures (NDCS): the value of each coalition C is drawn from a normal distribution√with mean |C| and standard deviation|C|.Table 2 provides the average utility of the solutions generated by both the deterministic and the randomized algorithms.Recall that no deterministic 35 approximation algorithm exists. In general, the average utility of solutions generated by therandomized algorithm was slightly less than that of the deterministic algorithm. This is a result of the randomized algorithmbeing probabilistic. When averaged over 20 independent runs, it is likely during at least one run that the algorithm will failto find a solution as good as the deterministic algorithm’s solution.It is interesting to note that during some of the runs the randomized algorithm performed better than the deterministicalgorithm. For example, the average performance of the randomized 13 approximation algorithm was slightly higher thenthe average performance of the deterministic 13 approximation for the Modified Uniform problem distribution. This is to beexpected though as the following example illustrates. Consider the 23 approximation algorithms. Assume that the optimalcoalition structure consists of three equally sized, and equally valued, coalitions, C1,C2 and C3. Further assume that all2072T. Service, J. Adams / Artificial Intelligence 175 (2011) 2061–2074Fig. 1. Comparison of the runtimes of the deterministic and randomized algorithms for each approximation guarantee on a variety of problem sizes.Runtimes are plotted on a logarithmic scale.other coalitions have value 0. The deterministic 23 approximation algorithm will simply return an approximate coalitionstructure consisting of two of these coalitions, say C1 and C2. However, it is possible that the randomized 23 approximationalgorithm will return a coalition structure consisting of C1, C2 and C3, thus returning a solution with value strictly greaterthan that returned by the deterministic algorithm. While this example is artificial, it illustrates one type of situation wherethe randomized algorithms can outperform their deterministic counterparts (i.e., situations where the randomized algorithmhas some probability of returning an optimal solution while the deterministic algorithm is unable too).4.2. Runtime comparisonThis subsection presents a comparison of the runtimes of the deterministic and the randomized algorithms. Fig. 1presents a comparison of the runtimes of both the randomized and deterministic algorithms for all performance guar-antees on problems ranging from 20 to 27 agents. As the run time of both the randomized and deterministic algorithmsdoes not depend on the problem instance (i.e., the particular coalition utilities) the reported running times are for only themodified uniform distribution.T. Service, J. Adams / Artificial Intelligence 175 (2011) 2061–20742073As can be seen in Fig. 1, in most cases the runtime of the randomized algorithms was lower than that of their determin-istic counterparts. The exception is the 14 approximation algorithms in which the randomized and deterministic algorithmsperformed roughly equivalently in terms of runtime (however, the randomized algorithm was slightly faster on average formost problem sizes).The following average speedups were achieved by the randomized algorithms compared to their deterministic counter-parts.1. The 12. The 13. The 14. The 24 randomized algorithm ran in 89.6% of the time as its deterministic counterpart.3 randomized algorithm ran in 42.7% of the time as its deterministic counterpart.2 randomized algorithm ran in 22.4% of the time as its deterministic counterpart.3 randomized algorithm ran in 50.8% of the time as its deterministic counterpart.The empirically determined runtime of the randomized algorithms scaled more quickly than the theoretical runtimeanalysis provided in Section 3. This is believed to be a result of terms hidden in the O (·) notation. With larger numbers ofagents, the empirical runtime should match the theoretical bounds.5. ConclusionsThis paper presents simple randomized algorithms for generating coalition structures, along with quality guarantees, forarbitrary and monotonic coalitional games. The presented algorithms generate the same approximation ratios in less timethan all previous approximation algorithms. The algorithms build on prior work and follow from a careful analysis of thenumber of coalitions, and their sizes, in particular coalition structures. The probability that any given randomized algorithmgenerates a solution within the stated approximate ratio can be made arbitrarily close to 1 by rerunning the algorithma small number of times. For example, 3 runs guarantee that the stated approximation ratio is achieved with probabilitygreater than 95%.One of the presented randomized algorithms can obtain a 2n2.587n) time, improving upon theprevious approximation algorithm that required O (2.83n) time to generate a 23 approximate solution. Also the new tech-niques allow a 14 approximate solution to be generated in the optimal time of O (2n) (i.e., in order to make any guaranteeson solution quality the values of all 2n − 1 coalitions must be observed at least once). This result improves on the previousbest approximation ratio obtainable in O (2n) time of 18 .3 approximate in O (This manuscript also shows how to employ randomization to generate performance guarantees that current deterministicapproaches are unable to generate. The presented randomized algorithms are the first algorithms capable of guaranteeingan approximation ratio of 35 in arbitrary characteristic function games.A limitation of the techniques presented in this manuscript is that the desired approximation ratio must be chosen apriori and then the appropriate algorithm run. Thus, the present work stands in contrast to previous coalition structure gen-eration work where a single anytime algorithm is presented and generates successively better solution quality guarantees.As this paper has demonstrated, the anytime property can be sacrificed for better solution quality guarantees in less timewhen the necessary approximation ratio is known ahead of time. However, the requirement of selecting an approximationratio a priori is common to approximation algorithms for many combinatorial problems.√Appendix A. ProofsLemma 3.1. In a binomial distribution with success probability p, after (cid:15) 1p(approximately, 63.21%).(cid:16) trials the probability of at least one success is at least e−1eProof. Since the probability that any single trial is unsuccessful is 1 − p, the probability that n trials are all unsuccessful is(1 − p)n. Hence, the probability of at least one successful trial in n trials is 1 − (1 − p)n.Consider the case were n = (cid:15) 1p(cid:5)(cid:16), then(1 − p)n =(cid:6)n.1 − 1nSince (1 − 1n )n increases monotonically to 1e as n → ∞, (1 − 1n )n (cid:2) 1e . Hence, 1 − (1 − p)1p (cid:3) e−1e. (cid:2)Lemma 3.4. The following identity holds for all positive integers n > u:(cid:5)nkn(cid:2)k=u(cid:6)(cid:5)(cid:6)ku= 2n−u(cid:5)(cid:6).nu2074T. Service, J. Adams / Artificial Intelligence 175 (2011) 2061–2074Proof. Let f (x) = (x + 1)n. f (x) =(cid:4)(cid:3)(cid:9)nk=0nkxk, by the binomial theorem. Differentiating f (x) u times yields:f (u)(x) = n · (n − 1) · · · · · (n − u + 1)(x + 1)n−u+1(cid:5)n(cid:6)k · (k − 1) · · · · · (k − u + 1)xk−u+1,=n(cid:2)k=ukwhich can be rewritten as:f (u)(x) = n!(n − u)!(cid:6)(cid:5)n(cid:2)n=kk=u(x + 1)n−uk!(k − u)! xk−u.Finally, dividing both sides by u! and setting x = 1 yields the desired identity. (cid:2)(cid:3) nn/rLemma 3.7. Let r be a fixed integer, then= O ().√(cid:4)rnn(r−1)(r−1)nrProof. Recall that Stirling’s approximation states:(cid:6)n(cid:5)(cid:6)(cid:5)(cid:5)√nn(cid:3)(cid:4)1 + o(1)= (cid:4)√n(cid:6),nen! =(cid:5)nn/r2πn(cid:6)=nren!! (r−1)nr(cid:5)!= O (1) ·(cid:10)(cid:5)√(cid:10)n( ne )nn − nr (( nr )e )nr (nr ·(cid:6)(n− nr )e(cid:6))(n− nr )= O (1) ·(cid:5)√n( nr )rnn(r − 1)√nnnr · (n − n(cid:6).(r−1)nrr )(n− nr )(cid:2)= OReferences[1] T. Rahwan, S. Ramchurn, N. Jennings, A. Giovannucci, An anytime algorithm for optimal coalition structure generation, Journal of Artificial IntelligenceResearch 34 (2009) 521–567.[2] T. Sandholm, K. Larson, M. Anderson, O. Shehory, F. Tohmé, Coalition structure generation with worst case guarantees, Artificial Intelligence 111 (1–2)(1999) 209–238. URL http://jmvidal.cse.sc.edu/library/sandholm99b.pdf.[3] O. Shehory, S. Kraus, Methods for task allocation via agent coalition formation, Artificial Intelligence 101 (1–2) (1998) 165–200. URL http://jmvidal.cse.sc.edu/library/shehory98a.pdf.[4] V.D. Dang, N. Jennings, Generating coalition structures with finite bound from the optimal guarantees, in: Proceedings of the Third International JointConference on Autonomous Agents and Multiagent Systems, 2004, pp. 564–571.[5] T. Rahwan, N.R. Jennings, An improved dynamic programming algorithm for coalition structure generation, in: Proceedings of the 7th InternationalConference on, Autonomous Agents and Multi-Agent Systems, 2008, pp. 1417–1420. URL http://eprints.ecs.soton.ac.uk/15062/.[6] T. Rahwan, N. Jennings, Coalition structure generation: Dynamic programming meets anytime optimisation, in: Proceedings of the 23rd Conference onArtificial Intelligence (AAAI), 2008, pp. 156–161. URL http://eprints.ecs.soton.ac.uk/16112/.[7] T. Rahwan, N. Jennings, An improved dynamic programming algorithm for coalition structure generation, in: Proceedings of the 7th InternationalConference on, Autonomous Agents and Multi-Agent Systems, 2008, pp. 1417–1420. URL http://eprints.ecs.soton.ac.uk/15062/.[8] Y. Yeh, A dynamic programming approach to the complete set partitioning problem, BIT Numerical Mathematics 26 (4) (1986) 467–474.[9] T. Service, J. Adams, Approximate coalition structure generation, in: Proceedings of the 25th National Conference on Artificial Intelligence (AAAI), 2010.[10] T. Service, J. Adams, Constant factor approximation algorithms for coalition structure generation, Autonomous Agents and Multi-Agent Systems, 2010.URL http://dx.doi.org/10.1007/s10458-010-9124-7.[11] N. Ohta, V. Conitzer, R. Ichimura, Y. Sakurai, A. Iwasaki, M. Yokoo, Coalition structure generation utilizing compact characteristic function representa-tions, in: Proceedings of the 15th international Conference on Principles and Practice of Constraint Programming, CP’09, 2009, pp. 623–638.[12] K. Larson, T. Sandholm, Anytime coalition structure generation: An average case study, Journal of Experimental and Theoretical AI 12 (2000) 40–47.