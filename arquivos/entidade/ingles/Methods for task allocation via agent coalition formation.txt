Artificial Intelligence 101 (1998) i65-200 Artificial Intelligence Methods for task allocation via agent coalition formation * Onn Shehory a,*, Sarit Kraus b3c a The Robotics Institute, Carnegie-Mellon Universiv, 5000 Forbes Ave, Pittsburgh, PA 15213, USA b Department of Mathematics and Computer Science, Bar Ilan University, Ramat Gun, 52900 Israel ’ Institute for Advanced Computer Studies, University of Maryland, College Park, MD 20742, USA Received 17 April 1997; received in revised form 7 April 1998 Abstract may require environments in multi-agent Task execution that will perform is necessary when to a group of agents the task. Task allocation that the agents form coalitions to the single agents’ performance. tasks cannot be performed by a single agent. However cooperation they have to satisfy, we consider agents. Given a set among situations where each task of agents and a set of tasks which to groups of should be attached it may also be agents In beneficial when groups perform more efficiently with respect to the problem of task allocation among autonomous agents. this paper we present several solutions and suggest the efficiency of their performance. We present efficient distributed algorithms with low ratio bounds and with low computational complexities. These properties are proven theoretically and supported by simulations in an agent system. Our methods are based on both the algorithmic aspects of and an implementation combinatorics to agent coalition formation where each agent must be a member of only one coalition. Next, we present the domain of overlapping coalitions. We proceed with a discussion of the domain where tasks may have a precedence order. Finally, we discuss in an open, dynamic agent that will lead agents to the formation of coalitions, system. For each case we provide an algorithm where each coalition they are simple, efficient and easy to implement. 0 1998 Published by Elsevier Science B.V. All rights reserved. is assigned a task. Our algorithms are any-time algorithms, for NP-hard problems. We first present an approach the case of implementation in order to perform and approximation tasks or improve algorithms Keyor&: Multi-agent cooperation; Coalition formation; Task allocation + This material is based upon work supported in part by the NSF under grant. No. IRi-9423967 results of this research were published and Army in the Research Lab under contract No. DAAL0197K0135. proceedings of IJCAI-95 and ICMAS-96. Preliminary * Corresponding author, Email: Onn_Shehory@ursa.cimds.ri.cmu.edu. 0004-3702/98/$19.00 PII: SOOO4-3702(98)00045-9 0 1998 Published by Elsevier Science B.V. All rights reserved. 166 0. Shehory, S. Kraus/ArtijTcial Intelligence 101 (1998) 165-200 1. Introduction Autonomous agents in multi-agent environments may need to cooperate in order to fulfill tasks. Given a set of tasks to be satisfied, we consider situations where each task is assigned a group of agents to perform tasks, if such exist, are due to competing or execution precedence order. The allocation of tasks to groups of agents is necessary when tasks cannot be performed by them inefficiently. Various groups of agents single agents or when single agents perform may have different degrees of efficiency in task performance due to differing capabilities of their members. Task allocation it. We address cases in which dependencies requirements should be done with respect to these differences. resources’ among The purpose of the allocation of tasks to groups of agents is to maximize benefits via the agents for such a solution. Hence, their performance. We seek an algorithm i.e., without a central authority. A low computational important property enable coalitions. For the development algorithmic methods and distributed computing using this paper. We will concentrate necessarily approach and concepts these algorithms from operations are beneficial on coalition ’ [ 11,2 I]. super-additive artificial that will enable a distributed task allocation, an that to form groups and assign a task to each group. We call these groups in this paper we present algorithms shall be considered complexity of the required algorithms, we combine a combinatorial systems methods. The coalitions for systems of cooperative formation research, with autonomous agents’ the agents form when agents, as we show in in environments which are not (DAI) solving Distributed intelligence tries to increase (MAS), where each agent is concerned with problem formation problem have been suggested by researchers [28,44,64]. Most of these solutions are given for coalition agents in a super-additive formation in Multi- its own personal utility via in the case of MAS is how the common outcome of a coalition among its members. We present coalition in which several agents interact in order to execute tasks. During the past few years, several solutions to the coalition in the field of DAI. These solutions concentrate on the special case of autonomous environment Agent Systems cooperation. One of the main problems of coalition to distribute for Distributed Problem Solving * (DPS) [6] formation algorithms which are appropriate cases where agents cooperate the overall outcome of the system [45] and are not concerned with their personal payoffs as they are in MAS. In such cases, the as they are in MAS. In addition, our disbursements Since in the case of a super- solution formation process for additive environment the non- DPS systems In super-additive and may be very realistic. is costly, 4 as the size of the cases where the addition of every new agent to the coalition in super-additive environment to the agents are not as important shall be very simple. Conversely, case is much more challenging is expected, 3 a coalition to the super-additive in order to increase the grand coalition is not restricted environments environment. formation t In a super-additive details see Section 3. environment any combination of two groups of agents into a new group is beneficial. For 2 Recently, DPS agent systems are referred 3 A grand coalition is a coalition that includes all of the agents [43]. to as cooperative MAS [52]. 4 Such costs may arise from the intra-coalition coordination and communication costs: these increase with the size of the coalition. 0. Shehory S. Kraus /Artificial Intelligence 101 (1998) 165-200 167 coalition increases, is most appropriate it may becomes non-beneficial for such non-super-additive cases. to form it. We suggest a solution which the problem we intend We begin by illustrating the basic definitions problems to solve (Section 2). Then, we give a of the environment with which we deal in Section 3. We also briefly in Section 3.1 and the set covering and set in Sections 4 and 5, in Section results and their analysis, and in Section 9 we discuss in an open MAS. Related research is brief description present partitioning their ratio bounds are discussed 7. Section 8 contains the requirements referred to in Section 10, and Section 11 ends our paper with a discussion and conclusions. and properties of an implementation in Section 6, and their complexity in Section 3.2. The algorithms and assumptions the simulation are described is analyzed 2. Illustration of the problem in this paper The problem we solve is that of task allocation of its benefits by satisfying among groups of agents in a DPS system. Given a set of tasks, the system as a whole must seek autonomous tasks. 5 We consider cases where tasks may a maximization the tasks among have a precedence order. We assume no central authority the agents. Therefore, seeking a maximal outcome. This is achieved via the formation of coalitions, possibly overlapping ones. that distributes task allocation by themselves, they shall reach an efficient Initial configuranon mi Final configuration Schema I. 5 Ideally, all of the tasks should be satisfied, however when attempting to maximize benefits, the execution of some tasks may be hindered. 168 0. Shehmy, S. Kraus /Artificial Intelligence lOl(l998) 165-200 We demonstrate the problem using a Blocks World domain as Schema 1. The blocks are of various sizes (for simplicity, we consider the case of a unit block and a row of attached unit-blocks). Each unit-block weighs one weight-unit. The blocks should be moved from to the final configuration. This should be done by a group of agents, the initial configuration each capable of lifting a limited weight (e.g., 2 weight-units) it aside as much as necessary. Each block can be carried by a limited number of agents (due to physical limitations). We do not discuss the planning problem but assume a previously provided plan. This plan shall divide the goal into subgoals with a precedence order. Such subgoals, in Schema 2. In such a subgoal, one cannot which are part of the global plan, are presented place block C before blocks A and B are properly located. In addition, cooperation among agents is necessary. Block C cannot be lifted by one agent. However, 4 agents can do so but less efficiently, due to coordination costs, and 20 of them will be far too many. Obviously, any member of the group that places C may be a member of a group that places A or B. However, after performing if the agents have a limited amount of fuel, they may cease functioning they cannot be part of all working groups. a set of tasks, and therefore and moving Sub-goal Schema 2. blocks A I, B1, CI ; subgoal II-locate into several subgoals. For instance, The global goal may be partitioned to three subgoals: subgoal I-locate III-locate it may be blocks partition AZ, B2, C2; subgoal block C3. Each of these subgoals can be performed by a coalition of agents, and subgoal III can be performed only after subgoals I and II have been that perform either subgoal I (Cr) or subgoal II (Ctt) performed. Members of the coalitions may be members of the coalition that members of Ct be members of Cn and vice versa. However, the efficiency of the performance of subgoals This will enable the performance of subgoals I and II simultaneously, coordination avoiding an intra-coalitional I and II, Ct and Ctt should not have any common members. thus saving time and that arises from larger coalitions. III. It may also be possible that performs subgoal to increase overhead Another example of our problem may be a transportation plies transportation services via a system of autonomous company. 6 The company sup- trucks, lift trucks, and automated 6 Transportation systems have been extensively used as examples for DPS systems (e.g., [41]). We do not intend the reader may be familiar problem. However, we provide this example because to solve a specific transportation with it. 0. Shehory S. Kraus/Artifcial Intelligence 101 (1998) 165-200 169 cranes, boats and planes which we refer to as agents. This system is usually arranged in a distributed manner, since every single agent may perform limited tasks by itself. The agents differ in their capabilities. That is, they differ in the type of actions that they can perform, in the size, volume and weight of goods that they can carry at one time, in the transporta- tion speed, its costs and the method by which it is performed. There may be occasions where agents cannot perform a given transportation In such cases, co- task by themselves. the agents shall form groups, and each group of agents operation will cooperatively task. We call such cooperating groups coalitions. to perform some tasks. Some tasks cannot be performed Some coalitions may be unable unless other tasks have been satisfied prior to their performance. Among that are able to perform a given task, the efficiency and the costs may be completely different. is necessary. Therefore, fulfill a transportation the coalitions and regulations). Therefore, For example, suppose that a task of taking 10 passengers from Mirabel airport to Dorval airport (both in Montreal) has been ordered. This may be performed by several private cars in such a case will probably cost or by a single helicopter. However, using a helicopter the same time (due to flight much more than using private cars and take approximately constraints in such a case is a coalition of private cars. This coalition shall be such that it consists of the optimal number of cars as per number of passengers. An excess of agents in the coalition may be costly either for the coalition members or for the system as a whole, or both. This is due to the costs, both for the formation of the communication, function of the size of the coalition and for its maintenance. These costs are an increasing coalition. In the case of disjoint coalitions, an overhead of agents in a coalition may prevent the formation of other beneficial coalitions and may therefore reduce the total outcome of the system. the most appropriate coalition and internal organization coordination The transportation task allocation mechanism rather than a centralized one may be advantageous formation may be too costly in time and computational company may have many agents, and therefore a central authority efforts. Using a dis- for coalition (as tributed shall be decided discussed in Section 7). In such cases task allocation of its benefits. Therefore. upon locally. However, such a company seeks the maximization to bring an the company future). immediate profit, but also to satisfy clients (which is important Since a single agent cannot always satisfy a client’s order, close cooperation is necessary. For such cases, the company shall provide the agents with a simple but also efficient algo- rithm that will enable the formation of coalitions of agents. orders, mainly for the company’s to satisfy beneficial and cooperation shall attempt transportation The problem of the transportation in this paper. We provide al- gorithms which enable the allocation of tasks among a system of agents via the formation of coalitions. We show that the algorithms are simple to implement, have a short run-time (hence can be used as a real-time method), and yield results which are close to the optimal results. is generalized company 3. Environment description In order to elucidate notations and definitions of concepts. We assume the problem and its solution, we briefly present some general negotiate that agents can communicate, 170 0. Shehory, S. Kraus/Art~$cial Intelligence 101 (1998) 165-200 require [59]. Communications time and effort on the part of the and make agreements agents. We also assume that resources can be transferred between agents. This ability may help the agents form more beneficial coalitions. Agreement on cooperation may be reached even if the last assumption of goods transferability beneficial coalitions. To emphasize with which we deal, we assume therefore expanding coalitions may be non-beneficial. Without coalition, as a coalition most beneficial. is costly, and the grand that consists of all of the formed coalitions within it, would be the property of the environment to a coalition the non-super-additivity that the addition of agents is not valid (e.g., [1,2,29,62]). However, the possibility side-payments) may help the agents form more (or alternatively, this assumption, 3.1. Definitions We recall the following definitions as presented in [45,46]. There is a set of n agents, capabilities its ability in the Blocks World). The expendability task execution of the agent system. Recalling to (e.g., affects company, that can be transported by an agent is its transportation-volume A,}. Each agent Ai has a vector of real non-negative is a property of an agent that quantifies N = {Al,Az,..., Bi = (6’1) . . . , bf ). Each capability perform a specific action. These capabilities are either expendable or non-expendable the carrying capability of the capabilities the overall the volume and weight capability. evaluation transform may be the income from performing a task. This may be a linear function of the number of tasks ’ T = (tl , t2, . . . , t,,, ). passengers. We also assume that there is a set of m independent For the satisfaction of each task tl, a vector of capabilities Bt = (b: , . . . , bi) is necessary. that are required The utility gained from performing for its performance. that the utility gained is a linear function of the resource amount. In order function the capability units into monetary units. In the transportation an shall case, this function to each type of capability. Such a function to enable shall be attached the task depends on the capabilities In our solution we assume, and of task execution, the transportation the calculations, the assessment of coalitions to simplify the tasks, tl, 5 t12 5 There may be occasions where a specific task tj cannot be performed unless another specific task ti has already been satisfied. This is generalized by a partial precedence order . . 5 tl,, , . . . , tk, 5 tk2 5 . . . 5 tk,,k, where ti 5 tj means between that ti is the predecessor of tj and tj is the successor of ti in the performance order. that we The precedence order and the resource consumption assume. This restricts our solution exist (this is appropriate for various domains, domains). to cases where no other explicit dependencies the Blocks World and several transportation are the only dependencies including A coalition can be defined as a group of agents who have decided to cooperate in order to achieve a common task at a time, and that each agent may sometimes be a member of more than one coalition. The can work on a single task. We assume that a coalition 7 The partition of a single task into subtasks then the algorithms that we suggest can be used recursively is beyond the scope of this paper. However, if these subtasks are to allocate subgroups of agents to the tasks, we In cases where there are interdependencies (which are not precedence dependencies) tasks into unified tasks. The recognition of such dependencies among can be performed to combine dependent independent, subtasks. suggest by implementing techniques from constraint satisfaction research (see [35,37]). 0. Shehoty, S. Kraus /Artificial Intelligence 101 (1998) 165-200 171 to use its resources can increase an agent’s ability latter assumption A coalition C has a vector of capabilities Bc which is the sum of the capabilities coalition members contribute the coalitions and can contribute part of their agents may be members of more and part of them to another. A coalition C can perform a capabilities task t only if the vector of capabilities necessary for its fulfillment Bt satisfies VO < i 6 r. bi < b: and, in the case of precedence order, t has no unsatisfied predecessors. For this sum is not the sum of all of the capabilities of the members, because to this specific coalition. Note that in the case of overlapping than one coalition, for task execution. to one coalition that the activity coalitions, via coalitional In the case of overlapping ’ which is the joint utility for satisfying that the members a specific task. 9 that the members of the to it, the precedence order of the tasks and the number of coalition to which in which they are a method their capabilities between coalitions each coalition C a value V can be calculated of C can reach by cooperating The coalitional value V is directly affected by the capabilities coalition contribute members. the agents decide how to partition members. This method in Section 4. Recall the sum of transportation the task, then the value of the coalition transportation is positive, but relatively small compared the transportation affect the coalitional value exclusively. is provided the transportation volume is much greater than necessary task is zero. If the coalitional the task, then the value to the case of having the exact volume. Actually, is not the only capability of the agents and therefore does not coalition company: given a specific is less than the volume necessary formation transportation volumes of a coalition is required according in the corresponding task, if for for this specific for satisfying algorithm. volume To conform with a common representation, we may employ the notion of coalitional value or as its negation. Such a calculation cost c instead of coalitional value. This cost may be calculated as the reciprocal of the attaches a low cost to a high- coalitional (as described below), which valued coalition leads agents to try to increase leads them to try to reduce the coalitional cost. rationality the coalitional value, likewise and vice versa. The coalitional We assume that the agents are group-rational. That is, they form a coalition only if they benefit as a coalition at least as much as the sum of their personal benefits outside of it [22, 33,391. The agents benefit if they fulfill tasks. Group rationality to ensure that is necessary the system’s common outcome, which is whenever agents form a coalition, the the sum of the coalitional outcomes. We also assume that each agent tries to maximize common utility; among all of the possibilities that an agent has, it will choose the one that will lead to the maximum common utility. However, group rationality of the agents does the difference not necessarily environment. the between super-additive In order to emphasize and the ones with which we deal, we describe the super-additive environment environment below. entail a super-additive they increase s The calculation of coalitional values is, in the general case, rather complex. Nevertheless, low complexity approximation methods for calculating values of agreements among multiple agents have been recently developed 1261, and these can be utilized for our case. 9 This notion of coalitional value is different theory, since here the value depends on the coalitional configuration from the notion commonly used for coalitional values in game and on the task allocation. 172 0. Shehory S. Kraus /Art@cial Intelligence 101 (1998) 165-200 A super-additive the following together, join environment satisfies rule: for each pair of coalitions Cl, C2 in the set, Ct n C2 = 0, if Cl, C:! then the newly formed coalition will have a new value VFW > VA + Vz, is such that the set of the possible coalitions in a super-additive the grand coalition environment, when is of lesser importance in a super-additive that remains in MAS, however, in DPS systems such a problem where Vi, V& VFW are the values of the coalitions Cl, C2 and Cnew, respectively. Rational agents other coalitions. Hence, formed, the only problem a major problem or may not exist at all. More assumptions the coalition lo environment will prefer the grand coalition over all is is the utility distribution among its members. This is are as follows: we assume that the agent population does not change during information. That formation process. We do not assume complete is, all of the agents must know about all of the goals and the existence of other agents, required a however only coalition members must know all of the details in a dynamic agent system, specific goal. Note that for implementation and full knowledge about goal and agent existence are later of a fixed agent population agents outside a coalition C relaxed (in Section 9). Additional activity within C. Our algorithm should need not know the details of the intra-coalitional l1 That is, in order to decide work regardless of clock synchronization which agent will perform what action, the agents do not have to know precisely when other agents will act. Nevertheless, the agents’ clocks may reduce the efficiency of the overall goal satisfaction. for satisfying the assumptions time differences between among the agents. are as follows: assumption significant Now that we have made the necessary assumptions and definitions, we can formally . . , tm), with an (optional) precedence the problem we solve A, } with their capabilities, tasks ti E T to coalitions of agents Ci C N such that xi Vi (the total is maximal and the precedence order is respected as well. Note that while we refer to T and N as fixed, we later allow them to change dynamically. We solve environments. However, even in the the solution will consist of coalitions Ci that do not in a coalition will present the problem. Given a set of m tasks T = {tl , orderandasetofnagentsN=[Ar,..., is of assigning outcome) initially the problem for the general case of non-super-additive case of a super-additive have null l2 members. This is because the membership of null members probably the overall outcome. costs thus reducing the coalitional environment, increase 3.2. Set covering and set partitioning Since task allocation among agents may be approached as a problem of assigning groups issue. and the set to tasks, the partition of the agents the task allocation problem becomes similar into subgroups becomes to the set partitioning the main of agents Therefore, covering problems. Below we formulate the two problems: SCP and SPP Given a set N = (A 1, . . , A, } and asetofsubsetsofN,S=(C1,...,C,},suchthatCj~NandSS2N;asetcoverisany lo Note that in our case there may be coalitions Cl, C2 and C,,, such that Vte” < Vh + Vz, however the group rationality prohibits the formation of such Cnew’s. I1 This assumption is only with regards to the requirements of our algorithm. The properties of the tasks of the multi-agent system may require such a synchronization, independently of our algorithm requirements. I2 Null members are agents that contribute nothing to the coalitional performance. 0. Shehory, S. Kraus /Artijicial Intelligence IO1 (1998) 165-200 173 S’ c S, such that UcjEs, Cj = N. The members of S’ are the covering sets. If the members of S’ are also pairwise disjoint (i.e., VCi, Cj E S’, i # j, Ci n Cj = ri5), then S’ is a set partitioning of N. We assume that each Cj E S has a positive cost cj . The cost of a cover S’ cost, is CcjEs, cj. The set covering problem entails finding the cover with the minimum is defined correspondingly [3,4,20]. and the set partitioning problem The set covering problem computational for solving [ 121. Therefore, is NP-complete it is very tempting the optimal solution this problem sub-optimally coalition since the algorithm provides a solution an exponential variety of algorithms [4,8,9]. Among them we can find the algorithm of Chvatal[9], which has a logarithmic bound. I3 Given its low ratio bound, for the case of multi-agent coalitions, subgroups may overlap. Furthermore, difficulties are still present. These include only with a small given set of subsets, and in the case of agents, coalitions SCP and SPP are centralized seek a distributed algorithm; is a precedence order between above, we attempt constructing implies complexity, which is too high for practical use. However, a have been suggested, e.g., in ratio to adopt and adapt this algorithm formation. This cannot be done for the case of disjoint in which coalitions are allowed other the set covering problem deals the number of possible the algorithms for distributed agents, we and, since we deal with autonomous, the SCP and SPP algorithms do not refer to cases where there indicated thus to borrow some of the properties of the Chvatal’s algorithm, even when overlapping the following: formation algorithms with a low ratio bound. is 2” (hence, we need heuristics the chosen subgroups. Despite to the set covering problem, the deficiencies this number); for reducing coalition 4. The algorithms The algorithms we present below are greedy distributed set partitioning algorithms with low ratio bounds. They were designed agents in an environment which is not necessarily system (i.e., they try to act in order to increase a whole). The algorithms are any-time algorithms, an algorithm would have normally it still provides which is better than their initial state or other preceding states. terminated, super-additive, and that work as a DPS the performance and benefits of the group as is stopped before the agents with a solution that is, if the execution and set covering for the special case of autonomous The algorithms consist of two main stages (presented (i) In the preliminary stage of each algorithm, all possible coalitions are distributively later in detail): calculated and their initial values are computed. stage of the algorithms consists of an iterative distributed greedy (ii) The main procedure - The coalitional in which two sub-stages occur: coalition of the possible coalitions, formation algorithm values are re-calculated. This requires up-to-date is done because information an efficient about the values to enable the choice of the preferred ones. - The agents decide upon the preferred coalitions and form them. I3 An approximation algorithm for a problem has a ratio bound p(n) if p(n) is smaller than the ratio between the optimal cost and the approximated cost. 174 0. Shehog: S. Kraus /Artijciul Intelligence 101 (1998) 165-200 As previously stated, the solution of the SPP and the SCP in the case of autonomous is accrue limitations small-sized (2n). A reduction since communication is possible by limitations coalitions are more economical complexity, in this number since the number of the possible coalitions and computation they should try to avoid unnecessary In this sense, small-sized and therefore shall be preferred. operations are exponentially agents are of an exponential exponential on the permitted coalitions. This can be done via the constraints of the specific problem under investigation, e.g., it may happen that all of the tasks must be performed by the same number of agents. In case no specific from the properties of the specific problem, we coalitions. We justify such heuristics by the associated recommend preferring time are costly, and the agents cost estimation: and computation communication seek cost reduction, than larger activities. and coalitions in a communication in our algorithms by presenting an integer coalition. These heuristics will be implemented the k which will denote this does number of coalitions remains NP- not trivialize case, a limitation on the size of coalitions may be even complete. more reasonable to assume that than in the general case. Here, it would be very convenient the volume of a single task never exceeds a given size. Such a restriction affects the number of coalitions restrictions. about the properties of the tasks and the coalitional values may Additional enable the calculation of the expectation values of the outcome of different coalitions. This shall improve and the complexity of the algorithm. I4 This is the case since the calculations dependent on the numbers of members the highest coalitional to O(nk), which is a polynomial in the same way as in the case of communication size allowed. This restriction will limit since even with such restrictions, the heuristics we employ, the number of coalitions l5 In the transportation and computation in II. However, thus reducing the problem the problem information to design number The initial coalitional [31] and, step by step, form coalitions. coalitions quit the coalition continue negotiations. The reduction reduces the computational agents that join coalitions do not quit the coalition are depleted. However, the overlapping property and thus the benefits of the system. and communication state consists of ~1, single agents. The agents then begin negotiating agents that join In the case of disjoint coalitions, single agents will formation process, and only the remaining in the number of agents that continue negotiating costs. In the case of overlapping coalitions, formation process unless their resources the efficiency of task execution increases 4.1. Preliminary agreement on calculation distribution to forming the coalitions, the agents must agree on the distribution among themselves. In order to achieve this distribution, of value each agent Ai should Prior calculations perform the following steps: l4 Note that this seems to contradict the economies of scale principle. However, our coalitions are created for the principle of economies of scale refer to performing long-lasting to our case. There may be, however, cases in which only large coalitions can satisfy the tasks. In such cases different heuristics must be adopted. a single task, and they afterwards decompose, whereas organizations which perform multiple tasks over time. Hence we find this concept inapplicable I5 This is because the number of combinations of coalitions may still be exponential. This is similar to the NP completeness of SPP and SCP which, too. refer to a small number of subsets. 0. Shehoq S. Kraus /Arti$cial Intelligence 101 (1998) 165-200 175 (i) Calculate all of the permutations that include up to k agents including A; and put in Pi, the set of the potential coalitions of agent Ai. (ii) While 7$ is not empty, do: - Contact an agent Aj that is a member of a potential coalition _ If this is the first contact with Aj, locate information in P; . about its capabilities (i.e., retrieve Bj). - Commit to the calculation potential coalitions A j are members). of the values of a subset I6 Sij of the common in Pi in which both Ai and (i.e., a subset of the coalitions _ Subtract Sij from ‘Pi. Add Sij to your long-term commitment - For each agent & potential coalitions that has contacted you, subtract from Pi the set ski of the it had committed to compute values for. list Li - Compute values for the coalitions you have committed (Section 4.2, (i)-(iv)). below relevant agents. I8 If some capabilities to I7 (Sij), as detailed the contact are unknown, - Repeat contacting other agents until Pi = (Ai} (i.e., no more agents to contact). stage, each agent Ai has a list Li of potential coalitions for which it After the preliminary had committed Ai has all of the necessary information coalitions, and it updates the information to repeatedly calculate the values, and their preliminary values. In addition, of the members of these about if necessary. the capabilities l9 4.2. Distributed, repeated calculation of coalitional values the values The coalition should be repeated formation algorithms to the common approach Therefore, in each iteration is appropriate the calculations follows for either the overlapping or the non-overlapping require repeated calculation of the coalitional values. in our model vary to coalitional values, As opposed the iteratively. However, continuously. as described below. Note that calculation this procedure cases. For the case of tasks with precedence order, some modifications will be necessary. The basic procedure to Li , each it should currently compute agent Ai should maintain values, denoted Ly, the following steps: a list of the coalitions set 2o to 8. Given the coalitional values is presented below. In addition these lists, agent Ai should perform the same procedure, for calculating for which initially Loop and for each coalition C on list LF, perform: I6 The size of this subset may vary from a single coalition make this decision with respect to their relative computation I7 Note that since agents may have different computation to all of the common coahttons. The agents should speed. capabilities some will finish faster than others. These to another subset of potential coalitions. By this, the computations will be will re-enter distributed evenly with respect to computing the loop and commit speed. Ix Instead, as done in the implementation (Section 9), agents can query a matchmaker for this information. I9 Note that this does not require they do compute coalitions where these agents are members. The necessity of agents’ knowledge about that each agent know all of the capabilities of all the others because not necessarily others is further relaxed in the implementation *” LF’ is initially B because all of the values were calculated in an open system, Section 9. in the preliminary stage. 176 0. Shehory, S. Kraus /Artificial Intelligence 101 (1998) 165-200 (0 (ii) (iii) (iv) potential the coalitional Calculate vector B?, by summing up the capabilities unused capabilities of the members of the coalition. 21 Formally, B,p” = CA, EC Bi . Form a list E, of the expected outcomes of the tasks in T when coalition C performs - Check what capabilities Bj are necessary - Compare Bj to the sum of the unused capabilities of the members of the coalition them. For each task tj E T, perform: for the satisfaction of tj . B,p”, thus finding the tasks that can be satisfied by coalition C. - If Vi, b$ E Bj 6 bit E B,p” (that is, tj can be satisfied by C), calculate the expected net outcome ej with respect to 1 C I. This shall be done by calculating gross benefit acquired from the task execution. The latter is the sum of the market in Bj . values of the capabilities necessary From the gross benefit, costs must be subtracted. This will be the expected net outcome ej of task tj when coalition C performs for the execution of tj as expressed costs and internal coordination the sum of capabilities it. Put ej in E,. tj’s the expected outcomes on list E,, choose the maximal. This will be the Among coalitional value V,. Calculate the coalitional cost which is cc = 1 /V,. is the bottleneck of the agent system, additional action on the In cases where computation part of Ai may be necessary. in LF If Ai has finished computing values for the coalitions but another agent, for instance Aj, has not finished its computations, Ai should contact Aj of the values of a subset SC of LT. Then, Ai should add and commit ST to LF and repeat the iterative process above. to the computation Having calculated the coalitional the agents can continue to the values and costs, iteration. formation proceeding steps of the coalition 4.3. Choosing coalitions In this sub-stage, in each iteration of the algorithms, and formed, and the agents decide step-by-step the coalitional should be preferred achieved. At the end of the coalition value calculation which coalition gradually Ai will have a list Li of coalitions this sub-stage, sequence of steps. The overlapping the disjoint coalitions’ case. is each agent In the agents shall form coalitions. Each agent Ai shall iteratively perform a coalitions’ case will require a sequence different from and their values and costs which it had calculated. configuration sub-stage, 4.3.1. Disjoint coalitions In order to simplify the representation of the algorithm, we denote the ratio between size by wi = ci/lCi 1 and call it the coalitional the cost of the coalition and the coalition’s weight. At the end of the first sub-stage of each iteration of the algorithm, each agent will have calculated a list of coalitions and coalitional values and weights. Each agent Ai shall iteratively perform the following: (i) Locate in Li the coalition Cj with the smallest Wj. (ii) Announce the coalitional weight wj that it has located. 21 Note that in the case of overlapping coalitions, this sum is not &. the coalitional vector of capabilities. 0. Shehory, S. Kraus /Artificial Intelligence 101 (1998) 165-200 177 (iii) Choose the lowest among all of the announced coalitional weights. This luloW will coalition CIOW and task tlow as be chosen by all agents. Choose the corresponding well. (iv) Delete the members of the chosen coalition CIOW from the list of candidates for new coalitions. (v) If you are a member of the chosen coalition CIOW, join the other members and form Cl,. (vi) Delete from Li the possible coalitions (vii) Delete from T the chosen task tlOW. (viii) Assign to Ly the coalitions that include deleted agents. in Li for which values should be re-calculated (see details below). or until coalitional of calculating there are no more values and choosing The above procedures (that is, until all are assigned tasks is beneficial. Some of the coalitional values shall be re-calculated the preferred to coalitions will be repeated until all agents are deleted to be allocated, or none of the possible coalitions), repeatedly coalitions in the coalitional configuration. This is because since values may be affected by variations in each value the coalitional to an assignment of a task to a coalition. This specific task no longer affects the coalitional values which it may have previously affected. Therefore, the coalitional values that have been calculated with respect to a task that has just been allocated must be re-calculated. All other values remain unchanged. that should be performed. A change to the tasks is calculated configuration corresponds subject 4.3.2. Overlapping coalitions Each agent Ai shall iteratively perform the following: (i) Locate in Li the coalition Cj that has the smallest cost cj. (ii) Announce (iii) Choose the coalitional cost cj that it has located. the lowest among all of the announced be chosen by all agents. The corresponding selected as well. coalitional coalition Cl, costs. This clOW will and task tlOW shall be (iv) If you are a member of the chosen coalition CIOW, join the other members of CloW and form the selected coalition. (v) Erase from T the task according to which the value of the newly-formed CIOW has been calculated. (vi) Update the capability vectors of all of the members of CIOW according to their contribution to the task execution. (vii) Assign As in the case of disjoint coalitions, to LF’ the coalitions in Li for which values should be re-calculated. the iterative procedures of calculating the preferred coalitions and forming coalitional them, will be repeated until values and costs, selecting is beneficial. there are no more tasks to be performed or none of the possible coalitions in every iteration because each value Here, some coalitional values must be re-calculated is calculated with respect and these may change due to the formation of a coalition. Note that in the disjoint case we use the coalitional weight whereas since in in the overlapping their the disjoint case agents can only contribute once therefore to the individual weight is important, while in the overlapping case agents may contribute case we use the coalition cost. This difference to the unused capabilities, to the total outcome, is necessary 178 0. Shehop, S. Kraus /Artificial Intelligence 101 (1998) 165-200 total outcome several times, and therefore the contribution of whole coalitions This difference causes a different choice of agents for the coalitions to be formed. is important. 5. Tasks with precedence order In a case where tasks have predecessors, that the choice of a task implies have been performed previously. Hence, our precedence-order that the same coalition will perform all the precedent its set of predecessors, the choice of all of its predecessors each task can be satisfied only if all of its algorithm (however tasks). For each t itself, by Pr. The choice of t for from, the formation of including formation will depend on the costs of, and the benefits that perform all of the tasks in Pt. predecessors requires it does not require task t, we denote coalition coalitions iteratively-one in each iteration, In the precedence-order In the original algorithms above, the agents form coalitions coalition the single task t that currently in each iteration. They greedily satisfy tasks, performing the agents shall form several appears most beneficial. case, to perform all of the tasks in the specific set Pt which appears coalitions most beneficial among all such possible sets. For the evaluation of these sets of tasks, we introduce the concept of precedence value pV, (p-value), which is the sum of the values of all of the tasks in the precedence set Pt. As in the previous cases, where the value of a task was re-calculated it was chosen, pV, will be re-calculated in each iteration as well. Each such of the values of all of the tasks in Pt. For until calculation this we employ the calculation methods of Sections 5.2 and 5.3, where Pt is substituted into T from 5.3. The internal precedence order within Pt is not considered as to this value calculation, of the calculations iteration, of the tasks in Pl will be satisfied as well. Since we introduced emphasize performed. in Section 5.2. In each that all the notion Pt, we must from T, which denotes the set of all of the tasks that were not yet its difference Initially, T includes all of the tasks that must be satisfied by the agent system. since all of the tasks within Pl must be satisfied, if t is chosen. The distribution is chosen from among all of the current pV’s. This implies among the agents will be performed as suggested of pV, requires the calculation the best pV in each iteration The agents may either each perform all of the calculations concerning each task t E T, or these calculations, they may distribute agree upon the Pr to be calculated. Recall tasks in Pt should be re-calculated. All of the agents, simultaneously, - Given the current status of capabilities; should iteratively perform for each t E T do: the following: but in each step of the algorithm (when necessary) that only part of the values corresponding to (i) Compute greedily the distributed methods of Section 5.3, where the input set of tasks for the greedy calculation is Pr. the values of all of the tasks in Pr using (ii) If, in step (i), all of the tasks in Pt were assigned coalitions set p V, to be the sum of the values of the tasks in Pt. to perform them, then (iii) Otherwise, remove t from T. 22 ‘* This is since t cannot be performed. 0. Shehory, S. Kraus /Art&id Intelligence 101 (1998) 165-200 179 - Choose the task t* with the maximal pV, to be performed predecessors. Form the required coalitions as in Section 5.3. together with all of its _ Remove _ If an overlapping t* and all of its predecessors coalitions from T. the capability vectors of the associated coalitions’ members. Else (disjoint coalitions), delete the members of the coalitions from the list of candidates case, update for coalition formation. for task execution and forming The above iterative procedure of calculating coalitions tasks to be performed values are dynamically and therefore shall be distributively the preferred them will be repeated until there are no more in T, or no more agents free to perform them. Note that as before, the changing as a result of the change in the accessibility of resources, after each coalition formation. p-values and costs, selecting re-calculated 6. Quality assessment The algorithms presented above have several advantages. An important property of the ratio bounds. Denote a coalition configuration by C, its algorithms total cost by ctot = C c, EC cj , and superscribe by * for the optimal case. is their low logarithmic 6. I. The overlapping case the number of new members To express the ratio bound by the same notions both for the disjoint and the overlapping algorithms, we must define the agent weight wi for the case of the overlapping coalitions. Denote ratio between members, calculation is the the coalition cost ci and zi, i.e., Wi = ci /zi . Here, only agents who are new for weight in a coalition Ci by zi ; the agent’s weight in the disjoint case such a distinction i.e., agents who join a new coalition for the first time, are considered is not necessary). (whereas Theorem 1. The ratio bound p of the algorithm for the overlapping case is given by max(lCjI) +!z< C:,t c i=l 1 7. 1 (1) confi- Proof. Each coalition Cj contributes guration C of the solution. Since each agent Ai receives some weight wi, ctOt, which is the sum of the weights of all of the agents in the final coalitional configuration Chnal, is given by: its cost cj to the cost ctot of the coalition ctot = c Wi< C CWi. AieN Cj EC~“,I Ai ECj (2) The inequality (as expressed a single agent. For any final coalition configuration results from the fact that each agent contributes only once to the total cost by for the optimal one): in the left side sum), and the right side sum allows multiple contributions (and in particular 180 0. Shehory, S. Kraus /Art$cial Intelligence 101 (1998) 165-200 Since the following relation holds in general, C CjGinal ~j~~j~~ C ~jma~“~=~,,,mr~“~ J CjGind i=l i=l it in particular holds for c&, and the conclusion from (2), (3), and (4) is that lcjl 1 max(lC, I) Cm G C CjCi <C&t C f. Cj GInal i=l i=l Hence, we derive the ratio bound (4) (5) (6) the ratio bound of the disjoint algorithm the disjoint case algorithm case, the quality assessment Since overlapping in its derivation, presented separately. Note that limn+oo Cy=l (= 0.5772.. coalitions constant the ratio bound to being a constant that the ratio bound is the worst case bound. to which to determine .). Therefore, this ratio bound grows is similar in its nature to the algorithm of the is similar as well. Despite minor modifications is similar, and therefore not l/i = y + Inn, where y is Euler’s constant logarithmically with the size of the a suggested presenting the algorithm the maximum permitted coalitional refers. Since we previously limited that can be calculated simply using (6). One must recall size, we simultaneously 6.2. The precedence-order case As a result of the modified coalitional values, the costs and the weights are changed. Proposition 2. The ratio bound in the precedence-order case is given by p= 2 <lnmax(ICjI)lnmax(Ip-value/). (7) Proof. The calculation calculation calculations and adding p-value within any precedence of p-values in in both of the non-precedence-order of values in all cases are based on the concept of choosing it to the total cost. Therefore, according case cases. This to the the the lowest cost each time to Theorem 1, the ratio bound of the the precedence-order is because is similar set Pt is Pp-value = - ctot(Pt) < 1 c,*,,(Pt) The total value is Cm = c p-value PrGC max(lC,~fJl) C i=l f <lnmax(ICj E Pfl). (8) (9) (10) (given that of 0. Shehory S. Kraus/Artijcial Intelligence 101 (1998) 165-200 181 and therefore ctot is bounded by c& lnmax( Ip-valuel). As a result, the ratio bound of the p-values contributes another logarithm into the ratio bound, thus yielding: p= z <lnmax(~Cj~)lnmax(~p-value\). 0 ‘tot 7. Complexity of the algorithms In addition to the quality of the solution with respect to the optimal solution from two main perspectives: - l)!/((n should be judged all of the relevant permutations and that of communications. At the preliminary k), the efficiency of the algorithms computations are distributed, Cf_=l(n agent. During rzkP1 /min( [Sij I) contacts with the other agents of potential coalitions of ISij I may be any varies correspondingly. While in the best case (communication-wise), stage, where the calculations this requires per this stage the agents contact one another; each of them conducts up to I Sij ) is the size of the subset the choice complexity where ISij ( = Ci_, (where in each communication of agents are calculated; considered integer the communication operations, which is of order 0(&l) l)!i!) computation operation). Since in the range [l, Ct_2], i - - the average number of communication (O(nk-*)), worst case, where ISij 1 = 1, the communication distribution stage is 0(&l). operations per agent is O(l), in the complexity per agent at the calculations- Below we prove and discuss the complexity of the non-precedence case. Proposition 3. For the value calculation and task assignment, ity per agent is of order O(nk IT I). the computational complex- is performed that the number of capabilities for all of the tasks, hence I T I assignments Proof. The value calculation process consists of the assignment of tasks to coalitions. 23 Such an assignment The number of value calculation operations per agent is of order 24 O(nk-’ the assumption agents nor upon the number of tasks, each assignment operation Choosing computations coalitions may be repeated up to n times (however, if I T I -c n, n will be replaced by IT 1. Therefore, requires 0( 1) operations. i.e., O(nk-‘) coalitional values and choosing the largest value is of the order of the number of possible coalitions, are necessary. IT I). Given the number of complexity per agent is of order O(nk . 1 T I). q per agent. The two processes of calculating depends neither upon the computational This complexity all of the operations. can be compared to a centralized case, where a single agent performs In such a case, this single agent will experience O(nkf’ . IT I) 23 We assume coalitional values is not as complicated that the planning for partitioning goals as in [42]. into sub-goals is given, and therefore the calculation of 24 Note that, while some agents perform O(k’ than O(nk- ’ are differences calculations moderates calculation completion. ITI) calculations. This property of the process capabilities in computational in the calculation the differences among the agents. IT 1) value calculations, is advantageous In such cases to perform it occurs when less others may happen because there the non-equal partition of the time of the average thus reducing time of the agents, 182 0. Shehory, S. Kraus /Arti$cial Intelligence 101 (1998) 165-200 in the average distributed and O(n) communications. computations higher than communicational is lower. 25 The overlapping the disjoint coalitions’ case. However, if 1 T 1 > n this case still allows for O(l T I) coalitions to be formed, whereas in the disjoint case n is the upper limit. is is of order O(n)), but the to case (the speed-up the computational case is similar complexity complexity Therefore, coalitions’ Following we present the complexity of the precedence-order case. We do not provide an explicit proof, however justify it informally. Proposition 4. The computational complexity in the precedence-order case is O(nk ’ (T j5). Proposition 4 is justified as follows. The change to the original calculations, in the calculation in the computational values due to the precedence order yields an increase addition of each task’s p-value. This shall be performed up to IT I times, and therefore additional complexity be multiplied. Thus, the new complexity its complexity. A deliberate analysis and the introduction complexity. of coalitional complexity. for the calculation the overall is 0( I T 14), by which the complexity of the original algorithm shall is O(nk . lT15), which is a rough estimation of the 0( I T 13) operations are necessary of some heuristics reduce In 8. Simulation results In order to strengthen the validity and to demonstrate the quality of our approach, we the the algorithm of overlapping coalitions with precedence order among have simulated tasks. The simulation consists of a centralized program which calculates and the coalition centralization of the properties of the original algorithm, except for its distribution, in the next section, we present a fully distributed domain-specific the task allocation formation which would have resulted from the distributed algorithm. The is aimed at simplifying both the code and the running process, however all are kept. Separately, agent system (with some modifications to the algorithm). of the algorithm implementation for a We are especially interested in the ratio between the total outcome of agent systems to our algorithm and the optimal outcome of such systems. We are also to the number of tasks executed factor would be the run-time consumption with important in the number of tasks executed with respect that act according interested in the optimal case. Another respect to the number of agents and tasks. ratios between The simulation system was tested for different the average amounts of resources per agent and the average resource amount necessary for task execution, as we for various elaborate below. We have conducted numbers of tasks, and the number of agents varying from 4 to 22. We have also performed few simulations for larger numbers of agents and tasks. There were 4 different resources, randomly partitioned among agents could have amounts of some the agents. As a result of this non-equal partition, for 50 to 60 agents to check the functionality several hundreds of runs of the simulation of the algorithm 25 If, for all agents, overhead of the distributed case will not affect the performance of the algorithm. there exists a communication channel between every pair of agents, then the computational 0. Shehory, S. Kruus /Artijicial Intelligence 101 (1998) 165-200 183 Simulation task execution / Optimal task execution 0.8 0.7 a 0.6 'Z 0.5 I d 0.4 'm 0.3 1 0.2 I 0.1 : 0 _._ 0.6 0.8 i 1 -v-- 1.2 1.4 1.6 1.8 2 Agents1 Tasks Fig. I. Simulation profits I Optimal profits 1 0.9 0.8 0.7 o 0.6 I (d d 'Z 0.4 0.5 1 0.3 t 0.2 - 0.1 i- 0 j- 0.6 0.8 t-- 1 1.2 1.4 1.6 1.8 2 Agentsi Tasks Fig. 2 resources which are significantly perform tasks and has driven agents to coalition different from the average. This affected their ability to Figs. l-6 present the results of the simulation, into three categories: Figs. 1 in the case where the average amount of resources per agent is the results equal to the average amount of resources necessary for each task execution; formation. divided and 2 present approximately Figs. 3 and 4 present agent task execution; Figs. 5 and 6 present the results greater is significantly than the average amount of resources necessary in the case where the average amount of resources per for each in the case where the average amount of the results 184 0. Shehory, S. Kraus/Artijkial Intelligence 101 (1998) 165-200 01 0.6 1.1 1.6 2.1 26 &enEs/ Tasks Fig. 3. Simulation profits / Optimal profits p:=e.= I ! : q m q 0.8 0.7 o 0.6 '$ 0.5 u 0.4 0.3 0.2 0.1 0 0.6 1.1 1.6 2.1 2.6 Agents I Tasks Fig. 4. smaller than the average amount of resources necessary resources per agent is significantly for each task execution. In each graph the x axis represents agents and the number of tasks, and the y axis represents results and the optimal Figs. 2,4, 6 measure results. 26 Figs. 1, 3, 5 measur e this ratio of task execution and this ratio of the global system profits. In all six graphs, each square the ratio between the ratio between the number of the simulation 26 We have computed an upper bound on the optimal complexity). results and not the optimal results themselves (due to 0. Shehory, S. Kraus /Ar@cial Intelligence 101 (1998) 165-200 185 n n I I I I . I n I 1 0.9 t 0.8 -, 0.7 -- -2 0.6 -- 5 0.5 .- I g 0.4 0.3 0.2 -- 0.1 -- 03 0.6 1.1 1.6 2.1 26 AgeIwuks Fig. 5 Smulation profits/ Optimal profits 0.8 ' 0.7 i 0.6 1.1 1.6 2.1 2.6 Agent&Tasks Fig. 6. repersents results of different experiments). the result of a single simulation (however some squares overlap due to similar the number of executed Via the simulations, we have examined (Figs. 1, 3, 5). In addition, we have tested the ratio between to in the optimal case, given the same the number of tasks that would have been executed the profits gained by settings the agents (as a result of task execution via coalition formation) and profits that would have been gained in the optimal case (Figs. 2, 4, 6). The results in both cases are very close to optimal, as can be seen in the figures. tasks with respect 186 0. Shehoty, S. Kraus /Artificial Intelligence 101 (1998) 165-200 The main results of the simulations performed are as follows: the simulation (i) The ratio between task fulfillment and the optimal task fulfillment (Figs. 1, 3). Only when the ratio between is, in most cases, close to one, which means near-optimal the tasks’ resources decrease (Fig. 5). Nevertheless, the decrement most beneficial profit. tasks. Thus, it may perform in the task fulfillment is significantly smaller task fulfillment that the simulation is the agents’ resources and ratio the profit ratio remains sub-optimal. The reason for leads to the choice of the than 1, does the task execution is that the algorithm fewer tasks, yet reach a sub-optimal (ii) The ratio between the profits from task execution via our algorithm and the optimal case is close to one (Figs. 2,4,6). Note that this ratio is significantly better than the theoretical (iii) The run-time for all of the simulations was usually a few seconds ratio bound. (running on a less than a minute, even when dealing with 50 to 60 Spare station) and always agents and tasks (and running on a PC). (iv) During the simulation, coalitions of various sizes have formed. 9. Implementation in a dynamic, open MAS of the coalition In this section we report an implementation sented previously existing framework, arrive dynamically this system is provided below (the reader is referred to [52] for details). Implementing algorithms namism of the system, however proves the applicability to real-world MAS. formation methods pre- in a dynamic, open MAS. For this implementation we have chosen an the RETSINA agent system, which is a web-based system where tasks to agents and agents may appear and disappear. A brief description of our to the openness and dy- and usefulness of these algorithms required some adjustments in a RETSINA framework 9.1. The multi-agent system RETSINA (REusable Task-based System of Intelligent Networked Agents) information that was developed to integrate system sources and perform decision a cooperative multi-agent from web-based compartmentalize bottlenecks, tion, tasks, number of agents and their capabilities. specialized and can be constructed support task knowledge, organize specifically tasks. The agents themselves to deal with dynamic changes is [5 l-531 gathering in RETSINA to avoid processing in informa- In RETSINA, the agents are distributed and run across different machines. Based on tasks and whether is needed at each decision point, and when to tasks, models of users, agents and tasks, the agents decide how to decompose to pass them to others, what information cooperate with other agents. The agents communicate with each other to delegate find information request or provide and negotiate sists of three classes of agents: that a similar and task models. The system con- integace agents, task agents and information agents. Note [36]. Interface agents interact with users information, to resolve inconsistencies is used in InfoSleuth filter or integrate in information infrastructure information, sources, 0. Shehory, S. Kraus /Art@&1 Intelligence 101 (1998) 165-200 187 and delivering their specifications receiving results. They acquire, model and utilize user preferences. Task agents formulate plans and carry them out. They have knowledge of the task domain, and which other types of task agents or information to performing various parts of the task. In addition, conflicts and fusing information and cooperate with appropriate itoring and results composition. geneous collection of information and strategies for source selection, fusion. Several typical on demand, task agents have strategies for resolving agents. They decompose plans agents for plan execution, mon- access to a hetero- resources access, conflict resolution and information sources. They have models of the information information retrieved by information task agents or information Information tasks cannot be executed by a single agent and agents form teams, agents are relevant for such tasks. agents provide intelligent its investment For instance, suppose a user has requested an interface agent to monitor in this task portfolio and maintain a given level of risk. The interface agent must involve agents that can provide various types of information with regards to the assets information the (e.g., price, relevant news). It also needs task agents that can analyze in the portfolio information it and make decisions and suggestions with regards to the portfolio. There may be several agents that can provide such services, and se- formation process. Note that there lecting the most appropriate ones is part of the coalition may be multiple therefore there may be several attempts formation algorithm serves for this purpose. to form such coalitions. The coalition at different agents in the system, tasks arriving simultaneously risk) and critique (e.g., compute A basic design problem of cooperative, open, multi-agent systems is the connection In an open system where participating [ 131. That is, each agent must be able to locate the other agents who might have for the execution of tasks, either locally or via coalition enter and leave, agents may dynamically solutions are precluded. agents and some basic al- and capabil- tasks problem capabilities which are necessary formation. which is distributed over the Internet, broadcast communication The solution provided interactions with them-matchmaking lows an agent with some tasks, the requester, ities of another agent, the server, who may be able to execute part of the requester’s via a matchmaker which is an agent that maintains and other service characteristics [ 14,321. In general, the process of matchmaking to learn the contact information relies on some well-known reliability) of other agents. (e.g., cost, availability, in RETSINA information, capabilities, the contact During that join system, agents the operation of the multi-agent the system advertise to a matchmaker, and when they leave the agent society, themselves and their capabilities (for more details, see [51]). In search of agents with which they may they un-advertise and ask for names of relevant possibly agents. After having acquired about other agents they can directly contact these agents and initiate cooperation as needed. Note that there may be several matchmaker agents to relax the problem of unavailable or overwhelmed single matchmaker and to avoid a centralized agents approach a matchmaker form coalitions, the information solution. 9.2. Cooperation via coalition formation The RETSINA system can receive several the coalition formation mechanism increases tasks from several users. Incorporation the efficiency of groupwise task execution, of 188 0. Shehoq: S. Kraus /Arti$cial Intelligence 101 (199X) 165-200 to decide upon the importance in near-optimal this mechanism task performance. We report such results enables agents resulting addition, in real-world the order27) of tasks to be performed. Such decision making in which a system cannot fulfill all of its tasks. domains, where there may be situations A RETSINA agent considers cooperation if one of the following holds: the agent cannot perform a specific task by itself; the agent can perform a specific task, but other agents are less resources or perform faster); more efficient this task (e.g., they require the agent can perform a specific task, but working on it collaboratively will increase the benefits from the task (or reduce the costs). in Section 9.3. In (and possibly- in performing is important The implementation of the coalition them due to several differences between infrastructure, as discussed below: formation mechanisms that we modify the assumed agent systems and the RETSINA required - The number RETSINA constantly. of goals and agents assumed is fixed, while system where agents appear and disappear and tasks vary in previous sections is a dynamic - The method in which the information with regards to the existence of tasks and their details is distributed in the original algorithms. the above restrictions, we made various modifications is not discussed To resolve We describe below how agents behave within formation functional (elaborate details can be found dynamically task is as follows. framework when coalition is applied, with the addition of the required modifications. Note that some in an extremely simplified manner issues of the RETSINA agents are described tasks which arrive from users or agents. The activity of a single agent for each arriving in [51]). The activity of the system entails to the algorithms.*’ the RETSINA (i) When a task tj arrives at agent Ai (either from a user or from another agent) it performs: (4 (b) Adds tj to 1; (its task list). Finds possible decompositions of tj to subtasks tj, . , ti using its tasks (c> (4 29 Ai determines to the possible decompositions, tj (e.g., information reduction library which includes pre-given possible decompositions. the capabilities According gathering) and contacts a match- needed for performing maker to find agents that have those capabilities and may be able to work on the task. It adds these agents to Ni (its agent list) and sends them each the rel- If the sender evant subtasks of tj (or the whole tj, if it is not decomposable). of t,j to Ai is an agent, it is added to Ni as well. To avoid cyclic task delegation and to allow propagation of results back to the the origin of the task (user or agent) as well as the delegation path requester, 27 A RETSINA agent has an internal scheduling mechanism, but our algorithm provides priority generation, which is not part of the scheduler. 28 Note, that the original algorithms do not discuss capability such as partial overlapping use of a resource, which are typical formation take care of these even without agents dependencies). The implemented coalition 29 For example, checking whether a portfolio requires assets in the portfolio and a subtask of computing balance according the coalition formation algorithm is balanced reuse and tasks with complex in the RETSINA dynamic the agent’s (e.g., time dependencies, system. RETSINA time resolves scheduling inherits these properties. (at least) a subtask of finding to some criteria. the prices of 0. Shehoty, S. Kraus/Arr$cial Intelligence lOl(1998) 165-200 189 (i.e., the agents through which the task has passed) are added to each delegated task. (ii) When Ai’s local schedule allows, it computes coalitions and their values and forms coalitions as follows: (iii) Computing coalitions values: 3o for each task tj in Ti it considers the possible library) the coalition value for each such possibility. The value calculation it (based on its task reduction to perform that can be formed coalitions and computes is performed by evaluating into account the typical amount of computational space) necessary system and the time interval for execution. linear functions attached to each capability which takes resources (e.g., CPU, memory, disk for such a task, as studied from past behavior of the RETSINA (iv) Choosing Coalitions: 3 ’ in step (iii), Ai chooses the one with the highest it Cj. and registers Cj the lowest cost cj), denotes it registered at the If so it forms with the members of Cj the coalition and performs task and subtasks. If no other values are registered Ai re-checks is the highest registered (4 (b) (cl (4 the values computed Among value (correspondingly, and its value at the matchmaker. Ai checks whether the value matchmaker. the associated for values after a waiting period. 32 Upon completion removes has not passed) capabilities Concurrently, occasional polling of the matchmaker availability, skipping and continually are performed individually performs (on which the members of the coalition tj from T; . In case of task execution failure report to Ai), Ai (and if tj ‘s deadline to tj is kept in the list for future handling. Note that updates if 7; is not empty, Ai performs by agents at their matchmaker. for changes the coalition (as its local schedule allows) in coalitions, values, agent algorithm by formation to the task execution and time and tasks includes a re-design process. In RETSINA to step (ii) (and possibly being a member of several coalitions). for value calculation and computation the communication time coalition design are significantly can dynamically appear. Therefore, When a new task is received by an agent, we require: small as compared the modified algorithm - If tasks that were assigned iteration of the coalition are informed about the new task will re-calculate consideration l if inclusion iteration task in coalition a new coalition value, greater the arrival of the new task: of the newly arrived introduces to coalitions have not been performed yet within the current formation algorithm, agents who are in these coalitions and the coalitional values to take into recalculations in the current than currently known values, So This step corresponds associated with coalitions, here coalitions are associated with tasks. That is, for each task the best coalition found. This is simpler to implement in an open system, where tasks are not known to all agents. in Section 4.2. However, while in the original algorithm to the algorithm tasks are is ” This step corresponds to the algorithm in Section 4.3. 32 Such situations may occur due to asynchrony in the system as well as differences in agent computation time and network latency. Waiting for additional values may be beneficial if the task’s deadline allows. 190 0. Shehop, S. Kraus /Artificial Intelligence 101 (1998) 165-200 the coalitions, selecting again the best among the actual, the agents avoid coalition re-design, and consider the new task for coalitions; 33 then the agents re-design re-designed, otherwise, inclusion - If all previous l in coalitions at the next iteration. tasks are in process, the new task, has it arrived at Ai, will be added to the group of tasks Ti and be dealt with in the next coalition formation iteration. _ In case of a rapid high-frequency If such a rate of new tasks is expected be dis-enabled. statistically statistical data, the re-design process shall be avoided. infer such a rate by sampling stream of new tasks, the re-design process may in advance, or the agents the the task stream and interpolating 9.3. Analysis of the modi$cations The dynamic addition of tasks to the agent system may change complexity of the algorithm. every new task. This will result is the number of dynamically should be multiplied by ]Td]. Since Td E T, the re-design process complexity by an order of magnitude with respect to the number of tasks. tasks. Therefore, in performing received the overall order of for the whole process 1 Td 1 times, where 1 Td 1 the original complexity implies an increase analysis in In the worst case, the re-design process will be performed The communication requirements of the original algorithms are, in the worst case, rather to avoid the worst case of communication stages commits algorithm to compute it implicitly the communication the maximal Sij. This results for commitment which is O(n . Td) per agent (however the implemented large. We designed complexity. This was performed by the requirement Aj complexity In the modified algorithm task assignment additional arriving becomes 0( 1 Td I . n). Yet this is a low linear complexity. Nevertheless, gathering for coalition our experiments. Originally, the number of agents n was assumed (in which RETSINA operates), tasks. Therefore, while to the original communication the worst case remains unchanged, for informing is required complexity is similar formation to be dwarfed by comparison. This was observed that on each contact of Ai with in a communication the average is O(Td)). and (i.e., O(n . ITI) per agent). However, other agents about dynamically in the value calculation the average case in web information time in the course of the network latency causes the computation to be constant. However, in RETSINA, change, hence n may dynamically v = max(n), where this maximum may be decided upon by designers according expectations with regards to the agent system. Then, substitute in O(uk-’ expression by u, resulting is slightly modified. Let to their IZ in the original complexity the complexity . ITI . ITdl). analysis RETSINA agents are able to perform task reductions is determined within complexity of a subtask (in general, are domain-specific, over the complexity of subtasks. hence the designers of the domain-specific In the information these libraries provide details for planning and executing the internal [60]. In practice, the task reduction and task schema libraries tasks). The libraries components have control subtasks, each domain of RETSINA j3 Note that re-design may not be allowed redesign and not perform its tasks. if the expected task flow is rapid, lest the system will constantly 0. Shehory, S. Kraus/Artijiciul Inielligence 101 (1998) 165-200 191 subtask can typically be performed by a small number of agents. This implies coalition agents with particular expertise that the on the formation of small coalitions of formation procedure will concentrate to perform a task. For example, one of the domains in which RETSINA was implemented is finding is satellite if and when of agents in a specific location. For this, up to 4 information gathering, and up to 4 other agents are involved tracking. One of the tasks that the agents can cooperatively perform a specific satellite will be observable agents are involved in in the information other related tasks. This means that the maximal coalition size for this task type is 8. Since the sizes of coalitions are other tasks of the system are of the same order of complexity, limited as well. The system may include other active agents, however these will be involved in other tasks or be idle. The specialization coalitions according specialty are present, of the one with the highest payoff). Thus, a coalition different specialties which are necessary In current RETSINA performs. necessary for a given task execution The maximal number of specialties necessary restriction on the size of coalitions. However, since different decompositions different specialty dimensions Among in RETSINA into (when more than one agent with the same to their specialty/capability their utility functions enables comparison which results in the choice to the number of for subtask execution complies with the k of tasks along are possible, a specific agent system may have several k’s for the execution of the task that this coalition the number of specialties which are is small and hence such is also the size of coalitions. them, the maximal will determine the worst case complexity. in the incorporation implementations, size is limited of agents results 9.4. Implementation settings algorithm formation to a RETSINA the modified coalition as well as interaction mechanisms, some of the RETSINA properties, while maintaining To apply had to simulate distribution This was performed by running degenerated RETSINA agents that were able to register at a matchmaker and query it for other agents, and could receive tasks as RETSINA agents do. The degenerated agents did not perform However, computational simulated from the performance of RETSINA. the simulated in the task performance were similar to these values in the original system, as studied framework we and the tasks but only simulated including matchmaking the task performance. and advertisement. and consumption its openness availability resources by an agent totalling the resource consumption The implementation was performed by running up to 20 agents on several machines, to 1000 tasks. Each agent to the agents, and a stream of tasks was supplied was represented and the that simulated thread task queue of a real agent. The agents were running on several Sun workstations. Each agent-thread tasks arrived at each agent (i.e., the frequency of tasks, their type and the required dynamically capabilities were chosen as studied from RETSINA). Each task was associated with a vector of capabilities necessary for its execution and a payoff function the value of the task. For each task the for calculating agent creates a task object that consumes The agent received an initial set of tasks, and additional in a random manner informs other agents about these tasks by passing time and memory and requires communication. in a random manner, according to the typical distributions to task objects. references 192 0. Shehoq, S. Kraus /Arti$cial Intelligence 101 (1998) 165-200 Fig. 7. The average performance optimal performance, as a function of the maximal coalition size permitted k. (solid line) and the worst case (broken line), expressed as a fraction of the The CPU, communication RETSINA agents. This resource consumption was previously measured as presented and memory consumption are similar to those consumed by in 1471. During the simulation, coalitions of agents were formed, where a task was allocated to each, and the value of its execution by this coalition was calculated. The sum of these values to find the total payoff. When new tasks arrived, the re-design procedure was was calculated followed. We have performed the ratio bound, total payoffs to the optimal payoffs (calculated off-line) and to the theoretical as depicted above. several hundreds of times, and compared this simulation the algorithm logarithmically with respect to In Section 6 we have shown that the ratio bound increases in a simulated the number of coalition members. However, by implementing is close RETSINA agent system we show that the average case (for this specific domain) (in terms to the optimal case (see Fig. 7). The figure shows that the average performance of task allocation agents, depicted reached by the solid line, is around 0.9 of the optimal performance,34 while the worst case (the fast to less than 0.5 of the optimal line, declines ratio bound), depicted by the broken performance. Note that although of the system in this implementation prohibits the best currently known value is the choice of the best value each time (instead, selected), we still get near-optimal in the simulated RETSINA the asynchrony and execution) results. 10. Related work Distributed task allocation has been discussed example of such a task allocation mechanism in the context of DPS systems. A well- is the Contract Net Protocol known 34 We calculated the optimal performance explicitly, off line. when a small number of agents are involved in coalition formation. Small here means up to 20. 0. ShehoT, S. Kraus/Artificial Intelligence 101 (1998) 165-200 193 cases to single is similar each subtask that attempts in the performance tasks are allocated in which an agent [49]. The CNP discusses it into several subtasks and then sub-contract In for task partitioning than one subtask. This the CNP, is necessary. The CNP allows single agents to satisfy a (CNP) to another task may divide agents agent via a bidding mechanism. to and a procedure as we, too, allow perform more that agents be involved in some of our algorithms. However, we do not deal with the case of single agents. Rather, we solve single agents the problem to groups of agents. is or the partition cannot perform computationally is required. In the CNP through simulations. However, since the issue the efficiency of the solution was evaluated of a solution, we provide of efficiency and complexity to a a formal analysis of the quality and the complexity simulation. tasks by themselves too complex, close cooperation and tasks cannot be partitioned, is crucial for the implementation (within coalitions) to our approach of our solutions, In cases where of assigning in addition than one of more tasks task that handles performance, these tasks was the assignment The allocation of tasks to teams of agents the process of designing and forming are not addressed in order that they perform discussed by several DA1 researchers, e.g., [25,38,55]. Although discussing these groups, and the of roles to groups of agents, [25] emphasis on seeking near-optimal that uses presents a system information it has about the abilities of all other agents to assign tasks. Recipe selection for the complex group action is also managed by this central organizer. The team members there is no description select their own recipes for the single-agent of the mechanism the solution in our solution. Jennings requires a central agent. Both of these limitations issues are beyond discusses the scope of our research. the joint intentions and the shared plans, whereas such planning to which agents will form teams. In addition, task allocation by having a central organizer there. Jennings are avoided constituent according actions; [ 15,17,48]; As mentioned or cooperatively faces satisfaction the other extreme tasks and increase is Multi-Agent Systems agents who are self-motivated task. DPS deals with the ways in which one can find two main extreme approaches of a common the task among them and individually in DAI: (DPS), which is concerned with cases where a group the fulfill the resulting (MAS). which focuses on their their own personal utility. However, DPS and MAS are lying between in the introduction, one is Distributed Problem Solving of agents agents distribute subtasks systems of autonomous own personal the two extremes In our paper we deal with autonomous type, although of the system, may be mutually beneficial even if the agents are selfish and try to maximize expected utilities [30,50,63], as they do in MAS. cooperation may be even greater than in the MAS case, since competition is restricted. task redistribution. and who try, under certain restrictions agents their own In the case of DPS, the benefits of among the agents In both cases, benefits may arise from cooperation via resource sharing and they may be acting as individuals to increase those two conlines. to the DPS agents’ systems which are closer their own benefits. Cooperation and act in order to achieve in a variety of multi-agent among autonomous situations DA1 research has previously addressed problem solvers, as in [16]. There, coordination view of node activity, where each node acts subject the problem of tasks with precedence order is based on an to its local control, and of overlapping organizational 194 0. Shehot?, S. Kraus /Art$cial Intelligence 101 (1998) 165-200 solving a sub-goal of the global goal. The organizational the idea of a coalition. However, Durfee et al. do not discuss coalitions nor do they address the problem of forming groups of nodes to improve the overall performance of goals. is an important method of cooperation view implicitly in multi-agent environments. resembles formation Coalition to subsets), game theory usually concentrates formation process, and the resulting disbursements theory provides an analysis of the possible coalitions that shall form as a result Game to the agents, assuming of a coalition in coalitions. For example, see [ 18,27,40, that agents do not have multiple memberships 611. However, game theory does not provide algorithms which agents can use in order to formed coalitional form coalitions. Given a previously its stability or of the agents payments. Game theory rarely its fairness 35 and on the calculation of the corresponding That is, takes and the the communication in the coalition solutions are not distributed. formation mechanism it among the agents. We also seek a dynamic evaluation of the coalitions 36 where game theory usually provides a static evaluation, and we allow agents to be members of more than one coalition. Therefore, coalition theories are not appropriate we are concerned. the game-theoretic situation with which the special properties of a multi-agent In our case, we are particularly costs and limited computation time are seldom considered, and how to distribute (that is, a partition for the multi-agent into consideration configuration on checking environment. formation interested Sandholm and Lesser [42] present a coalition formation model for bounded-rational of coalition games. As in [42], we also allow for In [42], the value of a coalition depends on the computation agents and a general classification varying coalitional values. time. However, we consider cases in which the time for computing polynomial, by previously- formed coalitions. The model presented by Sandholm and Lesser refers to a non-restricted number of configurations, whereas we present greedy algorithms configurations and the values vary with respect to the resource consumption that bound the number of the coalition values is to be considered. entails problem The problem of coalition (SCP). 37 Set partitioning in the partition of the agents formation where coalitions may overlap can be approached (SPP). Coalition Covering Problem and the set partitioning formation of agents results may be appropriate formation algorithms. The SPP and the SCP have been dealt with widely of NP-hard problems been proposed theory appropriate main deficiencies: That is, the complexity formation can be approached as a Set Partitioning Problem as a Set the partition of a set into subsets, is finding a partition with the least cost. Since coalition into subgroups, SPP and SCP for determining which coalitions will form as a result of coalition in the context to SPP and SCP have and graph algorithms, that have been proposed do not provide an among agents, due to three for NP-hard problems. and approximations research, combinatorial (1) The exact and optimal solutions are solutions in the number of agents. Such a to the problem of coalition in the fields of operations [3,4,8,9,20]. However, [ 191. Exact solutions of the solution is exponential the solutions formation solution 35 Stability and fairness have several different definitions in the context of game theory. 36 The values of the coalitions change dynamically and therefore 37 The SCP, which is very similar to the SPP. Both are described relying on the initial values is misleading. in in detail in Section 3.2. due to rapid changes in the tasks and resource availability, 0. Shehory, S. Kraus /Artificial Intelligence 101 (1998) 165-200 195 it. (2) The approximation to calculate solutions 38 are of polynomial since algorithms, which lead complexity, but they deal with a tightly subgroups of a given set. This may be overly there are 2” subsets of a solution cannot be applied in cases where there are many agents in the environment, the agents will be unable to near-optimal restricted number of pre-defined possible restrictive for the case of agent coalition given set of n agents. This limitation may be resolved by artificially coalitions That is, the solutions can be calculated and implemented dominates is not since In contrast MAS, among other goals, aim at reducing robustness. the possible are centralized. only by a central agent which the other agents. Such a situation for our case, bottleneck. increasing formation process and supervises agents’ environments, in a single point of failure as well as a computational (3) All of the present solutions typical it may result (as we do in our solution). formation, where is inappropriate such problems in distributed the coalition limiting and and system. systems computing algorithms Distributed cases of two-processor but some approximation as well. The general problem systems (e.g., [lo]). Sub-optimal (DCS) order. Optimal (see, e.g., [24]), yet these are constrained research has dealt with problems solutions were provided only of task for strongly solutions were also is for the [57] provide good solutions for such a task assignment was presented. In [7] an algorithm is aimed at reducing time. The minimization the task turnaround time is the main objective of task assignment within distributed of a task allocation reduce the execution allocation with precedence constrained presented NP-complete, multi-processor The proposed solution of the task turnaround computing that will increase time. While DCS research usually discusses a fully-connected multi-processor assume only a multi-agent system as a whole. Agents may be of various types, belong in remote places and be indirectly connected. We discuss agents cannot perform system, we the outcome of the to different owners, be located the specific case where single In our work, the main issue is the development the benefits of the agent system, and not necessarily the tasks alone, and they must join together in order to do so. in which agents try to maximize systems. system as follows: task execution for precedence-ordered Research on the Loading Time Scheduling Problem to be similar (i) our research concentrates (LTSP) [5] presents approximation algorithms in cases where tasks may be performed either by a single machine or by several machines, but each task can be performed only by a subset of the machines. This appears there on cases in which part are several differences, of the tasks can only be performed by groups of agents and not by single agents; (ii) time of the first task in a sequence of tasks the main factor in the LTSP is the loading on a specific machine, while we discuss neither time nor the effect of task- that arises from task execution sequences on a single agent; (iii) we discuss given the precedence order and subject to the resource distribution among the agents. The differences of our case from the DCS research requires another approach, as presented above. to our research however, the loading the utility ‘* Near-optimal solutions are such that the ratio between them and the optimal solution is not large. In our case the available solutions have such a ratio for a small number of agents, but this ratio is growing with in number of agents. logarithmically 196 0. Shehoty, S. Kraus /Artificial Intelligence 101 (1998) 165-200 programming from economics A study of planning in which competition [58]. In this research, serves as the theoretical basis for the is applied are used to construct environment, which is employed as a means for the con- In his research, Wellman concen- the forma- in MAS has been presented by Wellman the general-equilibrium approach planning mechanism. Mechanisms a market-oriented struction and analysis of distributed planning trates on competitive agents whereas we discuss cooperative agents. In addition, tion of coalitions systems of agents, although under some re- programming striction may provide good results even for small number of agents, as proved by simula- tions in [34]. there. The theoretic model underlying market-oriented is more suitable for large-scale is not addressed systems. as presented A market-oriented for task allocation, approach was also utilized in [56]. There, Walsh and Wellman present a simple auctioning protocol for the pricing and alloca- agents. In contrast, we address the case of cooperative tion of tasks among self-interested to a solution, we can, in agents. As a result, while Walsh can only prove convergence addition, prove to that our protocols issue is the effects of the formation of groups which is not addressed by Walsh and Wellman tasks which single agents cannot perform. agents. Such groups may allow for executing Task execution by groups may also increase the efficiency of the execution. These have a major effect on the overall benefits of the agent system, hence we focus on groups (in our terms-coalitions) solutions. One important lead to near-optimal in our work. algorithm problems, thus increase that is preferable Hard computational the class of NP-complete is not the goal of Huberman to any of the single component problems, instead of employing including et al. in [23]. This research suggests, are ad- a single dressed Huberman are algorithm, using a portfolio of such algorithms where the algorithms approximation interleavingly. As proved in that research, such an approach may result in a so- performed results. As the authors lution re- approach can be used for the distribution of computational state, this economics-based sources the efficiency of task performance. This might have been useful to address the problems discussed here, however no method is provided for distribution of the the issue of forming groups of agents as a means proposed approach and, more importantly, of increasing performance in that research. Cooperation the cooperation among the team members of the cooperating discussed cooperatively algorithms, zero intersection of output-space” it is sufficient for the agents in an A-Team to the tasks or their solutions a higher level of cooperation solutions, but near-optimality. of cooperating scale-effectiveness, consider a comparatively market-based for the solution of complex optimization asynchronous is problems (A-Team) works imperfect is very simplistic, as it refers to “non- to this approach, agents. According information with respect to claim cooperation among them. We refer to cases in which is applied and these allows not only for improvement in In addition, we deal with the formation of multiple groups is their is better for greater teams. As opposed, we to the agents in [54]. There, a team of multiple small number of agents. This A-Team property team. One interesting property of A-Teams to solve a problem. Although A-Teams et al., therefore not addressed systems as described above. that is, the performance to have some common improve upon other agents, not a single is similar programs among 0. Shehoq S. Kraus /Arti$cial Intelligence lOl(1998) 165-200 197 11. Discussion in a non-super-additive In this paper we presented algorithms for task allocation among computational agents environment. The algorithms are suitable formation via coalition the benefits of the system for cases where agents are motivated in which the agents cannot perform as a whole. They are most appropriate the tasks by themselves. However, the efficiency of task execution when the performance of single agents is worse than their performance within groups. The to cases in which the tasks have a precedence order as well, and algorithms still yield sub-optimal Although general to act in order to maximize for the incidents they may also improve task allocation problems are computationally are adjusted results. exponential (they are at that yield results which ratio algorithms computational least NP-complete), we present polynomial-complexity are close to the optimal results and, as we have proven, are bounded by a logarithmic bound. Our distribution method prevents most of the possibly overlapping thus saving unnecessary computation In addition, since each agent performs primarily during most of the calculations computational unnecessary case of precedence-ordered of capabilities of the agents. is an outcome of the algorithm characteristics, that are required for its own actions the process. In cases with no precedence order, this distribution method prevents thus saving in the that may have been repeated by individual operations. However, this last property tasks. that takes into account the individual computational the distribution of calculations agents, is less significant and leads to an even distribution those calculations calculations, operations terminated, case the results, when halting, are of good quality. The algorithms are any-time algorithms. the system with several coalitions If halted before normally that have already formed and task allocated they still to In the case, better subgroups of tasks and coalitions are formed prior to others. the performance of such a subgroup has been the the subgroup the any-time property of the algorithm exists for both cases, results. The any-time intervention the time period provide them. In the non-precedence precedence-order However, completed, best. This means that although the case of precedence order may yield less beneficial property of an algorithm for negotiation formation processes may be changed during the process. for dynamic environments, wherein value of the tasks within is not necessarily the accumulative is halted before if the algorithm is important and coalition formation methods were implemented The coalition agent system, to improve multi-agent the implementation we had to relax several binding assumptions into account requirements system. We have shown that the incorporation near-optimal information multi- (in terms of the joint payoff). To enable taking and constraints arising from the dynamism and openness of the formation method induces a the execution of the coalition increasing and limitations, in a real-world, cooperation time. To summarize, in dynamic, open systems of distributed computational and execution demonstrated. They are not a general solution Some restrictive assumptions several realistic cases, where tasks may have a precedence order due to interdependencies and where agents can be involved may be used in distributed cooperative agent systems (in which tasks shall be assigned in this paper can be used for task allocation agents, as we have task allocation problem. for are appropriate in the performance of more than one task. The algorithms do apply. Nevertheless, to the distributed the algorithms to task allocation while not significantly the algorithms presented 198 0. Shehoy, S. Kraus/Art@ial Intelligence 101 (1998) 165-200 agents in order that the agents will perform the system as a whole and minimize them) to maximize overhead. the computational the expected outcome of References [l] R.J. Aumann, The core of a cooperative game without side-payments, Trans. Amer. Math. Sot. 98 (1961) 539-552. [2] R.J. Aumann and B. Peleg, Von Neumann-Morgenstem solutions to cooperative games without side- payments, Bull. Amer. Math. Sot. 66 (1960) 173-179. [3] E. Balas and M. Padberg, On the set covering problem, Oper. Res. 20 (1972) 1152-I 161. [4] E. Balas and M. Padberg, On the set covering problem: An algorithm for set partitioning, Oper. Res. 23 (1975) 74-90. [5] R. Bhatia, S. Khuller and J. Naor, The loading time scheduling problem, in: Proceedings 36th Annual IEEE Symposium on Foundations of Computer Science (FOCS-95) [6] A.H. Bond and L. Gasser, An analysis of problems and research 1995, pp. 72-81, in DAI, in: A.H. Bond and L. Gasser (Eds.), Readings in Distributed Artificial Intelligence, Morgan Kaufmann, San Mateo, CA, 1988, pp. 3-35. [7] G.H. Chen and J.S. Yur, A branch-and-bound-with-underestimates algorithm problem with precedence Computing Systems, 1990, pp. 494-501. constraint, in: Proceedings 10th International for Conference the task assignment on Distributed [8] N. Christofides and S. Korman, A computational survey of methods for the set covering problem, Math. Oper. Res. 21 (5) (1975) 591-599. [9] V. Chvatal, A greedy heuristic [lo] E.G. Cotfman and L.R. Graham, Optimal scheduling for the set-covering problem, Math. Oper. Res. 4 (3) (1979) 233-235. for two-processor systems, Acta Informatica 1 (1972) 200-213. [ 111 R. Conte, M. Miceli and C. Castelfranchi, Limits and levels of cooperation: types disentangling (Eds.), Decentralized AI., Vol. 2. Elsevier, various of prosocial Amsterdam, interaction, 1991, pp. 147-157. in: Y. Demazeau and J.P. Muller [12] T.H. Cormen, C.E. Leiserson and R.L. Rivest, Introduction to Algorithms, MIT Press, Cambridge, MA, 1990. [13] R. Davis and R.G. Smith, Negotiation as a metaphor for distributed problem solving, Artificial Intelligence 20 (I) (1983) 63-109. [ 141 K. Decker, K. Sycara and M. Williamson, Middle-agents for the intemet, in: Proceedings IJCAI-97, Nagoya, Japan, 1997, pp. 578-583. [ 151 E.H. Durfee and V.R. Lesser, Negotiating and allocation using partial global planning, in: L. Gasser and M.N. Huhns (Eds.), Distributed Artificial Intelligence, Vol. II, Pitman/Morgan Kaufmann, London, UK, 1989, pp. 229-244. task decomposition [ 161 E.H. Durfee, V.R. Lesser and D.D. Corkill, Coherent cooperation problem solvers, among communicating in Distributed Artificial Intelligence, Morgan Kaufmann, San in: A.H. Bond and L. Gasser (Eds.), Readings Mateo, CA, 1988, pp. 268-284. [ 171 E.H. Durfee and V.R. Lesser, Global plans to coordinate distributed problem solvers, in: Proceedings IJCAI- 87, Milan, Italy, 1987, pp. 875-883. [ 181 D. Fudenberg and J. Tirole, Game Theory, MIT Press, Cambridge, MA, 1991. [ 191 M.R. Garey and D.S. Johnson, Computers and Intractability: A Guide to the Theory of NP-completeness, W.H. Freeman, San Francisco, CA, 1979. [20] R.S. Garfinkel and G.L. Nemhouser, The set-partitioning problem: set covering with equality constraints, Oper. Res. 17 (1969) 848-856. [21] J.C. Harsanyi, A simplified bargaining model for n-person cooperative game, Intemat. Economic Review 4 (1963) 194-220. [22] J.C. Harsanyi, Rational Behavior and Bargaining Equilibrium in Games and Social Situations, Cambridge University Press, 1977. [23] B.A. Huberman, R.M. Lukose and T. Hogg, An economic approach to hard computational problems, Science 275 (1997) 5 l-54. 0. Shehory, S. Kraus/Artijcial Intelligence IO1 (1998) 165-200 199 [24] O.H. Ibarra and C.E. Kim, On two-processor scheduling of one- or two-unit time tasks with precedence constraints, J. Cybernetics 5 (3) (1976) 87-109. (251 N.R. Jennings, Controlling cooperative problem solving in industrial multi-agent systems using joint intentions, Artificial Intelligence 75 (2) (1995) 146. [26] S. Jha, 0. Shehory and K. Sycara, Viewing contingent contracts between agents as options, Unpublished manuscript. 1271 J.P. Kahan and A. Rapoport, Theories of Coalition Formation, Lawrence Erlbaum Associates, Hillsdale, NJ, 1984. [28] S.P. Ketchpel, Forming coalitions in the face of uncertain rewards, in: Proceedings AAAI-94, Seattle. WA. 1994, pp. 414-419. [29] S. Kraus, An overview of incentive contracting, Artificial Intelligence 83 (2) (1996) 297-346. [X)] S. Kraus, J. Wilkenfeld and G. Zlotkin, Multiagent negotiation under time constraints, Artificial Intelligence 75 (2) (1995) 297-345. [3 I] T. Kreifelts and E Von Martial, A negotiation framework for autonomous agents, in: Proceedings Second European Workshop on Modeling Autonomous Agents in a Multi-Agent World, 1990, pp. 169-182. 1321 D. Kuokka and L. Harada, On using KQML for matchmaking, in: Proceedings First International Conference on Multi-Agent Systems, AAAI Press, San Francisco, CA, 1995, pp. 239-245. [33] R.D. Lute and H. Raiffa, Games and Decisions, John Wiley, New York, 1957. [34] T. Mullen and M. Wellman, A simple computational market in: Proceedings First International Conference on Multiagent Systems, AAAI Press, San Francisco, CA. 1995. pp. 283-289. for network information services, [35] B. Nadel, Constraint satisfaction algorithms, Comput. Intell. 5 (1989) 188-224. [36] M. Nodine and A. Unruh, Facilitating open communication in agent systems: the infosleuth infrastructure, in: M. Singh, A. Rao and M. Wooldridge 136.5, Springer, Berlin, 1997, pp. 281-296. (Eds.), Intelligent Agents 4, Lecture Notes in Artif. Intell.. Vol. 1371 P. Presser, Hybrid algorithms [3X] A.S. Rao, MI? Geogeff for the constraint satisfaction problem, Comput. and E.A. Sonenberg. Social plans: a preliminary Intell. 9 (1993) 268-299. report. in: Decentralized Artificial Intelligence, Vol. 3, Elsevier, Amsterdam, 1992, pp. 57-76. [39] A. Rapoport, N-Person Game Theory, University of Michigan Press, Ann Arbor, Ml. 1970. [40] E. Rasmusen, Games and Information, Basil Blackwell, Cambridge, MA, 1989. [41 I T.W. Sandholm, An implementation of the contract net protocol based on marginal cost calculations, in: Proceedings AAAI-93, Washington, DC, 1993, pp. 256-262. 1421 T.W. Sandholm and V.R. Lesser, Coalitions among computationally bounded agents, Artificial Intelligence 94 (1997) 99-137. 1431 L.S. Shapley, A value for n-person game, in: H.W. Kuhn and A.W. Tucker (Eds.). Contributions to the Theory of Games, Princeton University Press, 1953. 1441 0. Shehory and S. Kraus, Coalition formation among autonomous C. Castelfranchi 9.57, Springer, Berlin, 1993, pp. 57-72. and J.P. Muller (Eds.), From Reaction to Cognition, Lecture Noms agents: strategies and complexity, in: in Artif. Intell., Vol. 1451 0. Shehory and S. Kraus, Task allocation via coalition formation among autonomous agents. in: Proceedings IJCAI-95, Montreal, Que., 1995. pp. 655-661. 1461 0. Shehory and S. Kraus, Formation of overlapping coalitions in: Proceedings for precedence-ordered ICMAS-96, Kyoto, Japan, 1996, pp. 330-337. autonomous agents, task-execution among [47] 0. Shehory. K. Sycara and S. Jha, Multi-agent in: M. Singh. (Ed%). Intelligent Agents 4, Lecture Notes in Artif. Intell., Vol. 1365, Springer, through coalition coordination formation, A. Rao and M. Wooldridge Berlin. 1997, pp. 143-154. 1481 R.G. Smith, A framework for distributed problem solving, in: Proceedings IJCAI-79, Tokyo, 1979, pp. 836 841. 1491 R.G. Smith, The contract net protocol: high-level communication and control in a distributed problem solver, IEEE Trans. Comput. 29 (12) (1980) 1104-l 113. [SO] K. Sycara. Persuasive argumentation 1511 K. Sycara, K. Decker, A. Pannu and M. Williamson, Designing in negotiation, Theory and Decision 28 (1990) 203-242. behaviors for information agents, in: Proceeding Agents-97, Los Angeles. CA, 1997, pp. 4Ow12. 200 0. Shehory, S. Kraus /Art$cial Intelligence 101 (1998) 165-200 [52] K. Sycara, K. Decker, A. Pannu, M. Williamson and D. Zeng, Distributed intelligent agents, IEEE Expert - Intelligent Systems and Their Applications 11 (6) (1996) 36-45. [53] K. Sycara and D. Zeng, Coordination of multiple intelligent software agents, Intemat. J. Intelligent and Cooperative Information Systems 5 (2-3) (1996) I8 I-211. [54] S.N. Talukdar, L. Baerentzen, A. Gove and P.S. deSouza, Asynchronous agents, Technical Report EDRC-18-59-96, for autonomous, Engineering Design Research Center, Pittsburgh, PA, 1996. [55] G. Tidhar, A.S. Rao and E.A. Sonenberg, Guided team selection, computer-based schemes teams: cooperation Carnegie Mellon University, in: Proceedings ICMAS-96, Kyoto, Japan, 1996, pp. 369-376. [56] W.E. Walsh and M.P. Wellman, A market protocol for distributed task allocation, in: Proceedings ICMAS- 98, Paris, France, 1998. [57] L. Wang and W. Tsai, Optimal assignment of task modules with precedence for distributed processing by graph matching and state-space [58] M.P. Wellman, A market-oriented search, BIT 28 (1988) 54-68. environment programming and its application to distributed multicom- modity flow problems, J. Artif. Intell. Res. 1 (1993) 1-23. [59] E. Werner, Toward a theory of communication and cooperation for multiagent planning, in: Proceedings Second Conference pp. 129-143. on Theoretical Aspects of Reasoning about Knowledge, Pacific Grove, CA, 1988, [60] M. Williamson, K. Decker and K. Sycara, Unified information and control flow in hierarchical task networks, in: Proceedings AAAI-96 Workshop on Theories of Planning, Action, and Control, Portland, OR, 1996. set of an n-person game and endogenous [61] L. Zhou, A new bargaining formation, Games and coalition Economic Behavior 6 (1994) 512-526. [62] G. Zlotkin and J. Rosenschein, Negotiation and task sharing among autonomous agents in cooperative domain, in: Proceedings IJCAI-89, Detroit, Ml, 1989, pp. 912-917. 1631 G. Zlotkin and J. Rosenschein, Cooperation agents Artificial in noncooperative domains, Intelligence 21 (6) (1991) 1317-1324. resolution via negotiation IEEE Trans. Systems, Man Cybernetics, Special and conflict among autonomous Issue on Distributed [64] G. Zlotkin and J. Rosenschein, Coalition, cryptography, and stability: mechanisms in: Proceedings AAAI-94, Seattle, WA, 1994, pp. 432437. in task oriented domains, for coalition formation 