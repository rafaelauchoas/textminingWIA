Artificial Intelligence 171 (2007) 606–618www.elsevier.com/locate/artintResolution for Max-SAT ✩María Luisa Bonet a, Jordi Levy b,∗, Felip Manyà ba Dept. Llenguatges i Sistemes Informàtics (LSI), Universitat Politècnica de Catalunya (UPC),Jordi Girona, 1-3, 08034 Barcelona, Spainb Artificial Intelligence Research Institute (IIIA), Spanish Scientific Research Council (CSIC),Campus UAB, 08193 Bellaterra, SpainReceived 1 September 2006; received in revised form 26 February 2007; accepted 1 March 2007Available online 12 March 2007AbstractMax-SAT is the problem of finding an assignment minimizing the number of unsatisfied clauses in a CNF formula. We proposea resolution-like calculus for Max-SAT and prove its soundness and completeness. We also prove the completeness of somerefinements of this calculus. From the completeness proof we derive an exact algorithm for Max-SAT and a time upper bound.We also define a weighted Max-SAT resolution-like rule, and show how to adapt the soundness and completeness proofs of theMax-SAT rule to the weighted Max-SAT rule.Finally, we give several particular Max-SAT problems that require an exponential number of steps of our Max-SAT rule to obtainthe minimal number of unsatisfied clauses of the combinatorial principle. These results are based on the corresponding resolutionlower bounds for those particular problems.© 2007 Elsevier B.V. All rights reserved.Keywords: Satisfiability; Resolution; Completeness; Saturation; Max-SAT; Weighted Max-SAT1. IntroductionThe Max-SAT problem for a CNF formula φ is the problem of finding an assignment of values to variables thatminimizes the number of unsatisfied clauses in φ. Max-SAT is an optimization version of SAT which is NP-hard (see[25]).Competitive exact Max-SAT solvers—as the ones developed by [2–4,17,22,23,30,32–34]—implement variants ofthe following branch and bound (BnB) schema: Given a CNF formula φ, BnB explores the search tree that representsthe space of all possible assignments for φ in a depth-first manner. At every node, BnB compares the upper bound(UB), which is the best solution found so far for a complete assignment, with the lower bound (LB), which is thesum of the number of clauses unsatisfied by the current partial assignment plus an underestimation of the number of✩ This research has been partially founded by the CICYT research projects iDEAS (TIN2004-04343) and Mulog (TIN2004-07933-C03-01/03).The first author also wants to thank the Isaac Newton Institute for Mathematical Sciences for hosting her while some of the ideas of this paperwhere thought and presented.* Corresponding author.E-mail addresses: bonet@lsi.upc.edu (M.L. Bonet), levy@iiia.csic.es (J. Levy), felip@iiia.csic.es (F. Manyà).URLs: http://www.lsi.upc.edu/~bonet (M.L. Bonet), http://www.iiia.csic.es/~levy (J. Levy).0004-3702/$ – see front matter © 2007 Elsevier B.V. All rights reserved.doi:10.1016/j.artint.2007.03.001M.L. Bonet et al. / Artificial Intelligence 171 (2007) 606–618607clauses that will become unsatisfied if the current partial assignment is completed. If LB (cid:2) UB the algorithm prunesthe subtree below the current node and backtracks to a higher level in the search tree. If LB < UB, the algorithm triesto find a better solution by extending the current partial assignment by instantiating one more variable. The solutionto Max-SAT is the value that UB takes after exploring the entire search tree.The amount of inference performed by BnB at each node of the proof tree is poor compared with the inferenceperformed in DPLL-style SAT solvers. The inference rules that one can apply in Max-SAT have to transform thecurrent instance φ into another instance φ(cid:3) in such a way that φ and φ(cid:3) have the same number of unsatisfied clausesfor every possible assignment; in other words, the inference rules have to be sound. It is not enough to preservesatisfiability as in SAT. Unfortunately, unit propagation, which is the most powerful inference technique applied inSAT, is unsound for Max-SAT,1 and many Max-SAT solvers apply rules which are far from being as powerful as unitpropagation in SAT.A basic BnB algorithm, when branches on literal l, enforces the following inference: removes the clauses contain-ing l and deletes the occurrences of ¯l, but the new unit clauses derived as a consequence of deleting the occurrencesof ¯l are not propagated as in unit propagation. Typically, that inference is enhanced by applying simple inference rulessuch as (i) the pure literal rule [13]; (ii) the dominating unit clause rule [24], (iii) the almost common clause rule [8],and (iv) the complementary unit clause rule [24]. All these rules, which are sound but not complete, have proved tobe useful in a number of solvers [2,4,13,30,33].A recent trend, that we believe will remain in future Max-SAT solvers, is to design solvers that incorporateresolution-like inference rules that can be applied efficiently at every node of the proof tree. This is the case ofMaxSatz,2 the best performing Max-SAT solver of the SAT-2006 Max-SAT Evaluation.3 For example, one of thederived resolution rules that implements MaxSatz is the star rule:xy¯x ∨ ¯y(cid:3)x ∨ yx0011y0101¯x ∨ ¯y (cid:3) x ∨ y000011100111where we have added the truth table of the rule to verify its soundness.Max-SAT inference rules like the star rule replace the premises of the rule by its conclusion instead of adding theconclusion to the premises, which might increase the number of clauses unsatisfied by some assignment. The starrule preserves the number of unsatisfied clauses by replacing x, y, ¯x ∨ ¯y with (cid:3), x ∨ y, where (cid:3) is the empty clause.Because these rules substitute a set of clauses by another, in some articles they are called transformation rules (see[24]) instead of resolution rules. See also [20] for other examples of rules for Max-SAT.The main objective of this paper is to make a step forward in the study of resolution inference rules for Max-SATby defining a sound and complete resolution rule. We want a rule such that the existing inference rules for Max-SATeither are particular cases of our rule (like the complementary unit clause rule or the almost common clause rule) orare rules that can be derived from our rule (like the star rule). We also want our rule to provide a general framework forextending our results to Weighted Max-SAT, defining complete refinements of resolution and devising faster Max-SATsolvers.Firstly, we observe that the classical resolution rule x ∨ A, ¯x ∨ B (cid:5) A ∨ B is not sound for Max-SAT, because anassignment satisfying x and A, and falsifying B, would falsify one of the premises, but would satisfy the conclusion.So the number of unsatisfied clauses would not be preserved for every truth assignment.1 The set of clauses {a, ¯a ∨ b, ¯a ∨ ¯b, ¯a ∨ c, ¯a ∨ ¯c } has a minimum of one unsatisfied clause (setting a to false). However, performing unitpropagation with a leads to a non-optimal assignment falsifying at least two clauses.2 URL: http://web.udl.es/usuaris/m4372594/software.html.3 URL: http://www.iiia.csic.es/~maxsat06/.608M.L. Bonet et al. / Artificial Intelligence 171 (2007) 606–618Secondly, there is a natural extension to Max-SAT of the classical resolution rule in [21]:x ∨ A¯x ∨ BA ∨ Bx ∨ A ∨ ¯B¯x ∨ ¯A ∨ BIn [21], Larrosa and Heras present this rule and ask whether it is complete for Max-SAT. However, two of theconclusions of this rule are not in clausal form, and the trivial application of distributivity results into an unsoundrule:x ∨ a1 ∨ · · · ∨ as¯x ∨ b1 ∨ · · · ∨ bta1 ∨ · · · ∨ as ∨ b1 ∨ · · · ∨ btx ∨ a1 ∨ · · · ∨ as ∨ ¯b1· · ·x ∨ a1 ∨ · · · ∨ as ∨ ¯bt¯x ∨ b1 ∨ · · · ∨ bt ∨ ¯a1· · ·¯x ∨ b1 ∨ · · · ∨ bt ∨ ¯asTherefore, our first objective was to modify the previous rule to obtain a sound and complete resolution rule inwhich the conclusions are in clausal form, as well as analyzing the complexity of applying the rule and findingout if there is some complete refinement. As we show in the next sections, we achieve our objective by providinga sound and complete resolution rule for Max-SAT in which both premises and conclusions are in clausal form.Moreover, we describe an exact algorithm for Max-SAT which is derived from the completeness proof. We alsoobtain an upper bound of the complexity of applying our rule and prove the completeness of the ordered resolutionrefinement.In classical resolution, different copies of a clause are eliminated leaving just one copy of each clause. In thecontext of the Max-SAT optimization problem, clearly this is not sound and we must keep repeated copies of a clause.This is why instead of working with sets of clauses we will work with multisets of clauses. A way to make therepresentation of this multisets more compact is to substitute several copies of a clause by a weighted clause, wherethe weight represents the number of times that the clause appears. So, our second objective was to extend our Max-SAT resolution rule to weighted clauses. As a result, we obtain a sound and complete resolution rule for WeightedMax-SAT.Our third objective was to study the complexity of our calculus from the point of view of the number of steps itmight need to tell us the minimal number of unsatisfied clauses. Since the Max-SAT problem is hard for the optimiza-tion problem corresponding to NP, we expect to find classes of instances that require an exponential number of stepsto give the minimal number of unsatisfied clauses. As a result, we prove such lower bounds for various combinatorialprinciples.Finally, in this paper we use the term of Max-SAT meaning Min-SAT. This is because, with respect to exactcomputations, finding an assignment that minimizes the number of unsatisfied clauses is equivalent to finding anassignment that maximizes the number of satisfied clauses. This is not necessarily the case for approximability results(see [18]).This paper proceeds as follows. First, in Section 2 we define Max-SAT resolution and prove its soundness. Despiteof the similitude of the inference rule with the classical resolution rule, it is not clear how to simulate classicalinferences with the new rule. To obtain a complete strategy, we need to apply the new rule repeatedly to get a saturatedset of clauses, as described in Section 3. In Section 4 we prove the completeness of the new rule, and the extension toordered resolution. In Section 5 we deduce an exact algorithm and give a worst-case time upper bound in Section 6.Section 7 contains a rule for weighted Max-SAT and the soundness and completeness of the rule. Section 8 has thelower bound results for our Max-SAT rule. Finally, we present some concluding remarks.M.L. Bonet et al. / Artificial Intelligence 171 (2007) 606–6186092. The Max-SAT resolution rule and its soundnessIn Max-SAT we need to keep repeated clauses. Therefore, we use multisets of clauses instead of just sets. Forinstance, the multiset {a, ¯a, ¯a, a ∨ b, ¯b}, where a clause is repeated, has a minimum of two unsatisfied clauses.Max-SAT resolution, like classical resolution, is based on a unique inference rule. In contrast to the resolution rule,the premises of the Max-SAT resolution rule are removed from the multiset after applying the rule. Moreover, apartfrom the classical conclusion where a variable has been cut, we also conclude some additional clauses that containone of the premises as subclause.Definition 1. The Max-SAT resolution rule is defined as follows:x ∨ a1 ∨ · · · ∨ as¯x ∨ b1 ∨ · · · ∨ bta1 ∨ · · · ∨ as ∨ b1 ∨ · · · ∨ btx ∨ a1 ∨ · · · ∨ as ∨ ¯b1x ∨ a1 ∨ · · · ∨ as ∨ b1 ∨ ¯b2· · ·x ∨ a1 ∨ · · · ∨ as ∨ b1 ∨ · · · ∨ bt−1 ∨ ¯bt¯x ∨ b1 ∨ · · · ∨ bt ∨ ¯a1¯x ∨ b1 ∨ · · · ∨ bt ∨ a1 ∨ ¯a2· · ·¯x ∨ b1 ∨ · · · ∨ bt ∨ a1 ∨ · · · ∨ as−1 ∨ ¯asThis inference rule is applied to multisets of clauses, and replaces the premises of the rule by its conclusions.We say that the rule cuts the variable x.The tautologies concluded by the rule are removed from the resulting multiset. Similarly, repeated literals in aclause are collapsed into one.Definition 2. We write C (cid:5) D when the multiset of clauses D can be obtained from the multiset C applying the Max-SAT resolution rule finitely many times. We write C (cid:5)x D when this sequence of applications only cuts the variable x.The Max-SAT resolution rule may conclude more clauses than the classical resolution rule. Notice though that thenumber of conclusions of the rule is at most the number of literals in the premises. However, when the two premisesshare literals, some of the conclusions are tautologies, hence removed. In particular we have x ∨ A, ¯x ∨ A (cid:5) A.Moreover, as we will see when we study the completeness of the rule, there is no need to cut the conclusions of a ruleamong themselves. Finally, we will also see that the size of the worst-case proof of a set of clauses is similar to thesize for classical resolution.Notice that an instance of the rule not only depends on the two clauses of the premise and the cut variable (like inresolution), but also on the order of the literals. Notice also that, like in classical resolution, this rule concludes a newclause not containing the variable x, except when this clause is a tautology.Example 3. The Max-SAT resolution rule removes clauses after using them in an inference step. Therefore, it couldseem that it can not simulate classical resolution when a clause needs to be used more than once, like in the exampleof Fig. 1 (left). However, this is not the case, as it can be seen in the same figure (right). More precisely, we derivea,¯a ∨ c,¯a ∨ b,¯a ∨ b ∨ cwhere any truth assignment satisfying {a ∨ ¯b ∨ ¯c, ¯a ∨ b ∨ c} minimizes the number of falsified clauses in the originalformula.¯b ∨ ¯c (cid:5) (cid:3),a ∨ ¯b ∨ ¯c,Notice that the structure of the classical resolution proof and the Max-SAT resolution proof is quite different. Itseems difficult to adapt a classical resolution proof to get a Max-SAT resolution proof, and it is an open question ifthis is possible without increasing substantially the size of the proof.610M.L. Bonet et al. / Artificial Intelligence 171 (2007) 606–618Fig. 1. An example of inference with classical resolution (left) and its equivalence with Max-SAT resolution (right). We put a box around thealready used clauses.Theorem 4 (Soundness). The Max-SAT resolution rule is sound; i.e., the rule preserves the number of unsatisfiedclauses for every truth assignment.Proof. For every assignment I , we will prove that the number of clauses that I falsifies in the premises of the inferencerule is equal to the number of clauses that it falsifies in the conclusions.Let I be any assignment. I can not falsify both premises, since it satisfies either x or ¯x.Suppose I satisfies x ∨ a1 ∨ · · · ∨ as but not ¯x ∨ b1 ∨ · · · ∨ bt . Then I falsifies all bj ’s and sets x to true. Now,suppose that I satisfies at least one literal among {a1 ∨ · · · ∨ as}. Say ai is the first such literal. Then I falsifies¯x ∨ b1 ∨ · · · ∨ bt ∨ a1 ∨ · · · ∨ ai−1 ∨ ¯ai and it satisfies all the others in the set of conclusions. Suppose now that Ifalsifies all ai ’s. Then, it falsifies a1 ∨ · · · as ∨ b1 ∨ · · · ∨ bt but satisfies all the other conclusions.If I satisfies the second premise but not the first, then by a similar argument we can show that I falsifies only oneconclusion.Finally, suppose that I satisfies both premises. Suppose that I sets x to true. Then, for some j , bj is true and Isatisfies all the conclusions since all of them have either bj or x. The argument works similarly for I falsifying x. (cid:2)3. Saturated multisets of clausesIn this section we define saturated multisets of clauses. This definition is based on the classical notion of sets ofclauses closed by (some restricted kind of) inference, in particular, on sets of clauses closed by cuts of some variable.In classical resolution, given a set of clauses and a variable, we can saturate the set by cutting the variable exhaustively,obtaining a superset of the given clauses. If we repeat this process for all the variables, we get a complete resolutionalgorithm, i.e. we obtain the empty clause whenever the original set was unsatisfiable. Our completeness proof is basedon this idea. However, notice that the classical saturation of a set w.r.t. a variable is unique, whereas in Max-SAT, it isnot (see Remark 8). In fact, it is not even a superset of the original set. Moreover, in general, if we saturate a set w.r.t.a variable, and then w.r.t. another variable, we obtain a set that is not saturated w.r.t. both variables.What we will do is to first saturate with respect to a variable x. This way we create two multisets of variables. Onewith clauses that don’t contain the variable x, and another with clauses that still contain x. We will then saturate withrespect to the following variable only in the multiset of clauses that doesn’t contain the first variable x. We will do thesame with the rest of the variables. Also, the saturation procedure keeps a good property: given a multiset of clausessaturated w.r.t. a variable x, if there exists an assignment satisfying all the clauses not containing x, then it can beextended (by assigning x) to satisfy all the clauses (see Lemma 9).Definition 5. A multiset of clauses C is said to be saturated w.r.t. x if for every pair of clauses C1 = x ∨ A andC2 = ¯x ∨ B of C, there is a literal l such that l is in A and ¯l is in B.A multiset of clauses C(cid:3) is a saturation of C w.r.t. x if C(cid:3) is saturated w.r.t. x and C (cid:5)x C(cid:3); i.e., C(cid:3) can be obtainedfrom C applying the inference rule cutting x finitely many times.Trivially, by the previous definition, a multiset of clauses C is saturated w.r.t. x if, and only if, every possibleapplication of the inference rule cutting x only introduces clauses containing x (since tautologies get eliminated).M.L. Bonet et al. / Artificial Intelligence 171 (2007) 606–618611We assign a function P : {0, 1}n → {0, 1} to every clause, and a function P : {0, 1}n → N to every multiset of clausesas follows.Definition 6. For every clause C = x1 ∨ · · · ∨ xs ∨ ¯xs+1 ∨ · · · ∨ ¯xs+t we define its characteristic function as PC((cid:7)x) =(1 − x1) . . . (1 − xs) xs+1 . . . xs+t .For every multiset of clauses C = {C1, . . . , Cm}, we define its characteristic function as PC =(cid:2)mi=1 PCi ((cid:7)x).Notice that for every assignment I , PC(I ) is the number of clauses of C falsified by I . Also, by the soundness ofour rule, a step of the Max-SAT resolution rule replaces a multiset of clauses by another with the same characteristicfunction.Before stating and proving the following lemma, let us recall the usual order relation among functions: f (cid:4) g if forall x, f (x) (cid:4) g(x), and f < g if for all x, f (x) (cid:4) g(x) and for some x, f (x) < g(x). Since the functions have finitedomain and the order relation on the range is well-founded, the order relation < on the functions is also well-founded.Lemma 7. For every multiset of clauses C and variable x, there exists a multiset C(cid:3) such that C(cid:3) is a saturation of Cw.r.t. x. Moreover, this multiset C(cid:3) can be computed by applying the inference rule to any pair of clauses x ∨ A and¯x ∨ B with the restriction that A ∨ B is not a tautology, using any ordering of the literals, until we can not apply theinference rule any longer with this restriction.Proof. We proceed by applying nondeterministically the inference rule cutting x, until we obtain a saturated multiset.We only need to prove that this process terminates in finitely many inference steps, i.e. that there does not exist aninfinite sequence C = C0 (cid:5) C1 (cid:5) · · · , where at every inference step we cut the variable x and none of the sets Ci aresaturated.At every step, we can divide Ci into two multisets: Ei with all the clauses that do not contain x, and Di with theclauses that contain the variable x (in positive or negative form). When we apply the inference rule we replace twoclauses of Di by a multiset of clauses, where one of them, say A, does not contain x. Therefore, we obtain a distinctmultiset Ci+1 = Di+1 ∪ Ei+1, where Ei+1 = Ei ∪ {A}. Since A is not a tautology, the characteristic function PA is− PA and= PCi and PEi+1not the constant zero function. Then, since PCi+1PDi+1 < PDi . Therefore, the characteristic function of the multiset of clauses containing x strictly decreases afterevery inference step. Since the order relation between characteristic functions is well-founded, this proves that we cannot perform infinitely many inference steps. (cid:2)+ PA, we obtain PDi+1= PDi= PEiRemark 8. Although every multiset of clauses is saturable, its saturation is not unique. For instance, the multiset{a, ¯a ∨ b, ¯a ∨ c} has two possibles saturations w.r.t. variable a: the multiset {b, ¯b ∨ c, a ∨ ¯b ∨ ¯c, ¯a ∨ b ∨ c} and themultiset {c, b ∨ ¯c, a ∨ ¯b ∨ ¯c, ¯a ∨ b ∨ c}.Another difference with respect to classical resolution is that we can not saturate a set of clauses simultaneouslyw.r.t. two variables by saturating w.r.t. one, and then w.r.t. the other. For instance, if we saturate { ¯a ∨ c, a ∨ b ∨ c} w.r.t.a, we obtain {b ∨ c, ¯a ∨ ¯b ∨ c}. This is the only possible saturation of the original set. If now we saturate this multisetw.r.t. b, we obtain again the original set { ¯a ∨ c, a ∨ b ∨ c}. Therefore, it is not possible to saturate this multiset ofclauses w.r.t. a and b simultaneously.Lemma 9. Let C be a saturated multiset of clauses w.r.t. x. Let C(cid:3) be the subset of clauses of C not containing x. Then,any assignment I satisfying C(cid:3) (and not assigning x) can be extended to an assignment satisfying C.Proof. We have to extend I to satisfy the whole C. In fact we only need to set the value of x. If x has a uniquepolarity in C \ C(cid:3), then the extension is trivial (x = true if x always occurs positively, and x = false otherwise). If, forany clause of the form x ∨ A or ¯x ∨ A, the assignment I already satisfies A, then any choice of the value of x willwork. Otherwise, assume that there is a clause x ∨ A (similarly for ¯x ∨ A) such that I sets A to false. We set x to true.All the clauses of the form x ∨ B will be satisfied. For the clauses of the form ¯x ∨ B, since C is saturated, there existsa literal l such that l ∈ A and ¯l ∈ B. This ensures that, since I falsifies A, I (l) = false and I satisfies B. (cid:2)612M.L. Bonet et al. / Artificial Intelligence 171 (2007) 606–6184. Completeness of Max-SAT resolutionNow, we prove the main result of this paper, the completeness of Max-SAT resolution. The main idea is to provethat we can get a complete algorithm by successively saturating w.r.t. all the variables. However, notice that aftersaturating w.r.t. x1 and then w.r.t. x2, we get a multiset of clauses that is not saturated w.r.t. x1 anymore. Therefore,we will use a variant of this basic algorithm: we saturate w.r.t. x1, then we remove all the clauses containing x1, andsaturate w.r.t. x2, we remove all the clauses containing x2 and saturate w.r.t. x3, etc. Using Lemma 9, we prove that, ifthe original multiset of clauses was unsatisfiable, then with this process we get the empty clause. Even better, we getas many empty clauses as the minimum number of unsatisfied clauses in the original formula.Theorem 10 (Completeness). For any multiset of clauses C, we have, DC (cid:5) (cid:3), . . . , (cid:3)(cid:6)(cid:3)(cid:4)(cid:5)mwhere D is a satisfiable multiset of clauses, and m is the minimum number of unsatisfied clauses of C.Proof. Let x1, . . . , xn be any list of the variables of C. We construct two sequences of multisets C0, . . . , Cn andD1, . . . , Dn such that(i) C = C0,(ii) for i = 1, . . . , n, Ci ∪ Di is a saturation of Ci−1 w.r.t. xi , and(iii) for i = 1, . . . , n, Ci is a multiset of clauses not containing x1, . . . , xi , and Di is a multiset of clauses containingthe variable xi .By Lemma 7, this sequences can effectively be computed: for i = 1, . . . , n, we saturate Ci−1 w.r.t. xi , and then wepartition the resulting multiset into a subset Di containing xi , and another Ci not containing this variable.Notice that, since Cn does not contain any variable, it is either the empty multiset ∅, or it only contains (some)empty clauses {(cid:3), . . . , (cid:3)}.Now we are going to prove that the multiset D =Di is satisfiable by constructing an assignment satisfyingit. For i = 1, . . . , n, let Ei = Di ∪ · · · ∪ Dn, and let En+1 = ∅. Notice that, for i = 1, . . . , n,(cid:7)ni=1(i) the multiset Ei only contains the variables {xi, . . . , xn},(ii) Ei is saturated w.r.t. xi , and(iii) Ei decomposes as Ei = Di ∪ Ei+1, where all the clauses of Di contain xi and none of Ei+1 contains xi .Claims (i) and (iii) are trivial. For claim (ii), notice that, since Ci ∪ Di is saturated w.r.t. xi , the subset Di is alsosaturated. Now, since Di+1 ∪ · · · ∪ Dn does not contain xi , the set Ei will be saturated w.r.t. xi .Now, we construct a sequence of assignments I1, . . . , In+1, where In+1 is the empty assignment, hence satisfiesEn+1 = ∅. Now, Ii is constructed from Ii+1 as follows. Assume by induction hypothesis that Ii+1 satisfies Ei+1. SinceEi is saturated w.r.t. xi , and decomposes into Di and Ei+1, by Lemma 9, we can extend Ii+1 with an assignment forxi to obtain Ii satisfying Ei . Iterating, we get that I1 satisfies E1 = D =Since the inference rule is sound (Theorem 4), and by the previous argument D is satisfiable, we conclude that(cid:7)ni=1Di .m = |Cn| is the minimum number of unsatisfied clauses of C. (cid:2)In classical resolution we can assume a given total order on the variables x1 > x2 > · · · > xn and restrict inferencesx ∨ A, ¯x ∨ B (cid:5) A ∨ B to satisfy that x is maximal in x ∨ A and in ¯x ∨ B. This refinement of resolution is complete,and has some advantages: the set of possible proofs is smaller, thus its search is more efficient.The same result holds for Max-SAT Resolution:Corollary 11. For any multiset of clauses C, and for every ordering x1 > · · · > xn of the variables, we haveC (cid:5)x1 C(cid:3) (cid:5)x2· · · (cid:5)xn, D(cid:3), . . . , (cid:3)(cid:3)(cid:6)(cid:4)(cid:5)mM.L. Bonet et al. / Artificial Intelligence 171 (2007) 606–618613where D is a satisfiable multiset of clauses, m is the minimum number of unsatisfied clauses of C, and in everyinference step the cut variable is maximal.Proof. The proof is similar to Theorem 10. First, given the ordering x1 > x2 > · · · > xn, we start by computing thesaturation w.r.t. x1 and finish with xn. Now, notice that, when we saturate C0 w.r.t. x1 to obtain C1 ∪ D1, we onlycut x1, and this is the biggest variable. Then, when we saturate C1 w.r.t. x2 to obtain C2 ∪ D2, we have to noticethat the clauses of C1, and the clauses that we could obtain from them, do not contain x1, and we only cut x2 whichis the biggest variable in all the premises. In general, we can see that at every inference step performed during thecomputation of the saturations (no matter how they are computed) we always cut a maximal variable. We only haveto choose the order in which we saturate the variables coherently with the given ordering of the variables. (cid:2)5. An algorithm for Max-SATFrom the proof of Theorem 10, we can extract the following algorithm:input : CC0 := Cfor i := 1 to nC := saturation(Ci−1, xi)(cid:11)Ci, Di(cid:12) := partition(C, xi)endform := |Cn|I := ∅for i := n downto 1output : m, II := I ∪ [xi (cid:13)→ extension(xi, I, Di)]Given an initial multiset of clauses C, this algorithm obtains the minimum number m of unsatisfied clauses and anoptimal assignment I for C.Function saturation(C, x) computes a saturation of C w.r.t. x. As we have already said, the saturation of a multisetis not unique, but the proof of Theorem 10 does not depends on which particular saturation we take. Therefore, thiscomputation can be done with “don’t care” non-determinism.Function partition(Ci, x) computes a partition of C into the subset of clauses containing x and the subset of clausesnot containing x, Di and Ci respectively.Function extension(x, I, D) computes a truth assignment for x such that, if I assigns the value true to all the clausesof D containing x, then the function returns false, if I assigns true to all the clauses of D containing ¯x, then returnstrue. According to Lemma 9 and the way the Di ’s are computed, I evaluates to true all the clauses containing x or allthe clauses containing ¯x.The order on the saturation of the variables can also be freely chosen; i.e., the sequence x1, . . . , xn can be anyenumeration of the variables.6. EfficiencyIn classical resolution, we know that there are formulas that require exponentially long refutations on the numberof variables, and even on the size of the formula. On the other hand, no formula requires more than 2n inference stepsto be refuted, being n the number of variables. Fortunately, in many practical cases the number of resolution stepsrequired is polynomial. Obviously, we do not have a better situation in Max-SAT resolution. Moreover, since we canhave repeated clauses, and we may need to generate more than one empty clause, the number of inference steps is notonly bounded by the number of variables. It also depends on the number of original clauses. Again, in many practicalcases of Max-SAT resolution, the number of resolution steps is also polynomial. In contrast, bucket elimination forsoft constraints [29], which is also a complete procedure for Max-SAT, always requires exponential time, even worse,exponential space.The following theorem states an upper bound on the number of inference steps, using the strategy of saturatingvariable by variable:614M.L. Bonet et al. / Artificial Intelligence 171 (2007) 606–618Theorem 12. For any multiset C of m clauses on n variables, we can deduce C (cid:5) (cid:3), . . . , (cid:3), D, where D is satisfiable,in less than n · m · 2n inference steps. Moreover, the search of this proof can also be done in time O(m 2n).Proof. Assign to every clause C a weight w(C) equal to the number of assignments to the n variables that falsifythe clause. The weight of a multiset of clauses is then the sum of the weights of its clauses. Obviously the weightof a clause is bounded by the number of possible assignments w(C) (cid:4) 2n, being w(C) = 0 true only for tautologies.Therefore, the weight of the original multiset is bounded by m 2n.As with the characteristic function, when C (cid:5) D, we have w(C) = w(D).A similar argument to Lemma 7 can be used to prove that we can obtain a saturation D of any multiset C w.r.t. anyvariable x in less than w(C) many inference steps. If we compute the weight of the clauses containing x and of thosenot containing x separately, we see that, in each inference step, the first weight strictly decreases while the second oneincreases. Therefore, the saturation w.r.t. the first variable needs no more than m 2n inference steps.When we partition C into a subset containing x and another not containing x, both subsets will have weight smallerthan w(C), so the weight of C when we start the second round of saturations will also be bounded by the originalweight. We can repeat the same argument for the saturation w.r.t. the n variables, and conclude that the total numberof inference steps is bounded by n m 2n.The proof of completeness for ordered Max-SAT resolution, does not depend on which saturation we compute.Each inference step can be computed in time O(n). This gives the worst-case time upper bound. (cid:2)7. Weighted Max-SATIn Weighted Max-SAT we use multisets of weighted clauses. A weighted clause is a pair (C, w), where C is aclause and w is a natural number meaning the penalty for falsifying the clause C. The pair (C, w) is clearly equivalentto having w copies of clause C in our multiset.Given a truth assignment I and a multiset of weighted clauses C, the cost of assignment I on C is the sum of theweights of the clauses falsified by I .The Weighted Max-SAT problem for a multiset of weighted clauses C is the problem of finding an assignment tothe variables of C that minimizes the cost of the assignment on C.For the Weighted Max-SAT problem a resolution-style inference rule can also be defined. The following rule is anextension of the Max-SAT resolution rule with weights like the one defined by [21]. Here we will convert the rule toclausal form, and prove its completeness.Definition 13. The Weighted Max-SAT resolution rule is defined as follows:(x ∨ a1 ∨ · · · ∨ as, u)( ¯x ∨ b1 ∨ · · · ∨ bt , w)(a1 ∨ · · · ∨ as ∨ b1 ∨ · · · ∨ bt , min(u, w))(x ∨ a1 ∨ · · · ∨ as, u − min(u, w))( ¯x ∨ b1 ∨ · · · ∨ bt , w − min(u, w))(x ∨ a1 ∨ · · · ∨ as ∨ ¯b1, min(u, w))(x ∨ a1 ∨ · · · ∨ as ∨ b1 ∨ ¯b2, min(u, w))· · ·(x ∨ a1 ∨ · · · ∨ as ∨ b1 ∨ · · · ∨ bt−1 ∨ ¯bt , min(u, w))( ¯x ∨ b1 ∨ · · · ∨ bt ∨ ¯a1, min(u, w))( ¯x ∨ b1 ∨ · · · ∨ bt ∨ a1 ∨ ¯a2, min(u, w))· · ·( ¯x ∨ b1 ∨ · · · ∨ bt ∨ a1 ∨ · · · ∨ as−1 ∨ ¯as, min(u, w))This inference rule is applied to multisets of clauses, and replaces the premises of the rule by its conclusions.We say that the rule cuts the variable x.The tautologies concluded by the rule and the clauses with weight zero are removed from the resulting multiset.Similarly, repeated literals in a clause are collapsed into one.M.L. Bonet et al. / Artificial Intelligence 171 (2007) 606–618615We also consider the following optional rule, called the contraction rule:(A, u)(A, w)(A, u + w)Notice that the application of the weighted rule is clearly equivalent to the application of the unweighted rulemin(u, w) many times.Theorem 14 (Soundness). The Weighted Max-SAT resolution rule is sound; i.e., for every truth assignment the cost ofthe assignment on the set of premises of the rule is equal to the cost of the assignment on the set of conclusions.Proof. Without loss of generality suppose that u (cid:4) w. Then min(u, w) = u, u − min(u, w) = 0 and w − min(u, w) =w − u. Also, {(x ∨ A, u), ( ¯x ∨ B, w)} is equivalent to {(x ∨ A, u), ( ¯x ∨ B, u), ( ¯x ∨ B, w − u)}. Using this fact and thesoundness of the unweighted Max-SAT rule applied u times to {(x ∨ A, u), ( ¯x ∨ B, u)} we can obtain the soundnessof the weighted rule. (cid:2)Theorem 15 (Completeness). For any multiset of clauses C, we haveC (cid:5) ((cid:3), u1), . . . , ((cid:3), us), Dwhere D is a satisfiable multiset of clauses, and u1 + · · · + us is the minimal cost of C.Moreover, if we also consider the contraction rule, then we haveC (cid:5) ((cid:3), u), Dwhere u is the minimal cost.Proof. The proof is similar to the unweighted case, generalizing the definition of characteristic function. For everyweighted clause C = (x1 ∨ · · · ∨ xs ∨ ¯xs+1 ∨ · · · ∨ ¯xs+t , u) we define its characteristic function as PC((cid:7)x) = u(1 −x1) · · · (1 − xs)xs+1 . . . xs+t . (cid:2)8. Hard instances for the Max-SAT resolution rule. Lower boundsIn this section we will give various examples of classes of multisets of clauses that require an exponential number ofsteps (respect to the number of initial clauses) to generate the minimal number of unsatisfied clauses using Max-SATresolution.One of these examples is the pigeon-hole principle. We will formalize it as a multiset of clauses saying that n + 1pigeons cannot be placed into n holes unless a hole contains more than one pigeon. Actually, we will formalizethe negation of the principle to have an unsatisfiable multiset of clauses. We will use variables pi,j meaning thatpigeon i goes to hole j . So the multiset of clauses will be {pi,1 ∨ · · · ∨ pi,n: 1 (cid:4) i (cid:4) n + 1} ∪ { ¯pi,j ∨ ¯pk,j : 1 (cid:4) i, k (cid:4)n + 1, 1 (cid:4) j (cid:4) n}. We will call this multiset PHPn+1. From this multiset of clauses we can define the class of multisets{PHPn+1: n ∈ N}. For this principle, we will show that any sequence of Max-SAT resolution rule applications willneed an exponential (in n) number of steps to show that one of the clauses cannot be satisfied.To be able to show our result we will use the fact that any resolution refutation of PHPn+1requires an exponential(in n) number of steps. Recall that resolution is a propositional proof system to show the unsatisfiability of a set ofclauses based on the following inference rule.nnnx ∨ A¯x ∨ BA ∨ BAlso we will use the fact that from a Max-SAT resolution proof we can extract a resolution refutation of the sameprinciple. The following two theorems will be the basic ingredients of the main result of this section.616M.L. Bonet et al. / Artificial Intelligence 171 (2007) 606–618Theorem 16. (See [10,16].) For sufficiently large n, any resolution refutation of PHPn+1(inference steps).nrequires 2n/20 clausesTheorem 17. Let C be an unsatisfiable multiset of clauses. Suppose, D,C (cid:5) (cid:3), . . . , (cid:3)(cid:6)(cid:3)(cid:4)(cid:5)kwhere D is satisfiable, k the minimum number of unsatisfied clauses, and S is the number of steps in the Max-SATrefutation. Then, there is a (classical) resolution refutation of C in S steps.Proof. Let, DC = C0 (cid:5) C1 (cid:5) · · · (cid:5) CS = (cid:3), . . . , (cid:3)(cid:6)(cid:3)(cid:4)(cid:5)kbe the sequence of multisets that we generate in the S steps. We will define by induction on S a sequence of multisetsC = D0 (cid:5) D1 (cid:5) · · · (cid:5) DSsuch that for every step i and for every clause C in Ci , there is a clause C(cid:3) in Di such that C(cid:3) ⊂ C.Since D0 = C0, obviously the property holds for 0.Assume now by the induction hypothesis that for every j (cid:4) i the corresponding Di ’s are defined fulfilling theproperty. Let Ci = {x ∨ A, ¯x ∨ B} ∪ C(cid:3), and Ci+1 = {A ∨ B . . .} ∪ C(cid:3). Let D1, D2 ∈ Di such that D1 ⊂ x ∨ A andD2 ⊂ ¯x ∨ B. If x /∈ D1 or ¯x /∈ D2 then Di+1 = Di . Else, we apply the resolution rule to D1 and D2 cutting x to obtaina clause D that will be a subset of A ∨ B. Then we define Di+1 = Di ∪ {D}. Notice that the other clauses of Ci+1 havea subclause in Di and therefore in Di+1.Now since CS has at least one (cid:3), and for every clause in CS there is a clause in DS that is a subclause of it, DSmust contain (cid:3). (cid:2)Now we can give the lower bound theorem, which is an immediate corollary of Theorem 17 together with Theo-rem 16.Corollary 18. For sufficiently large n, any Max-SAT resolution derivation of PHPn+1requires 2n/20 inference steps.n(cid:5) (cid:3), D, where D is satisfiable,There are resolution lower bounds (as in Theorem 16) for other combinatorial principles like Tseitin formulas [11,31], Random formulas [9,11], Mutilated chessboard [1], Reflexion principle [6,7], Planar Tautologies [14], the Clique-Coloring principle [19,26] and the Weak pigeon-hole principle [27,28]. Also Theorem 17 is very general. Thereforewe can obtain the same results (as in Corollary 18) for all these combinatorial principles.9. ConclusionsIn this paper we have presented several contributions to the Max-SAT problem: (i) a new sound and completeresolution rule in which both conclusions and premises are in clausal form; (ii) an original exact algorithm; (iii) acomplete ordered resolution refinement; (iv) an extension of our rule which is complete for Weighted Max-SAT, and(v) examples of classes of multisets of clauses that require an exponential number of Max-SAT resolution steps (interms of the size of the initial multiset) to obtain the minimal number of unsatisfied clauses.One feature of our logical framework is that the inference rules implemented in modern Max-SAT solvers either areparticular cases of our rule or can be obtained as derived rules. So, we believe that our framework is a good startingpoint for designers of future Max-SAT solvers to devise more powerful inference techniques that could be appliedefficiently at every node of the proof tree.The exact algorithm we have obtained from the completeness proof can be described as an extension to Max-SAT of the original Davis–Putnam algorithm [15]. We believe that, as it happens in SAT, an implementation of thatalgorithm could rarely outperform a DPLL-style Max-SAT solver. Nevertheless, it is an open question to know if thereM.L. Bonet et al. / Artificial Intelligence 171 (2007) 606–618617are Max-SAT instances that can be solved in polynomial time with our algorithm but require exponential time withDPLL-style solvers.The contributions of this paper can also be applied beyond Max-SAT. As an example, we would like to point outthat we have recently extended our results to many-valued CNF formulas. The complete resolution rule for Many-Valued Max-SAT we have obtained has allowed us to define derived rules that capture the most relevant soft localconsistencies defined in the Weighted CSP community, as well as to provide a logical framework for Weighted CSPs.Such results were presented at the workshop Soft Constraints at CP’06, and also published in [5].This paper is an extended version of our paper “A complete calculus for Max-SAT” presented at SAT’06 [12]containing more results. Sections 7 and 8 are new. Independently of our work, [17] have recently presented a clausalform translation of their inference rule [21] at AAAI-2006.References[1] M. Alekhnovich, Mutilated chessboard problem is exponentially hard for resolution, Theoretical Computer Science 310 (1–3) (2004) 513–525.[2] T. Alsinet, F. Manyà, J. Planes, Improved branch and bound algorithms for Max-SAT, in: Proc. of the 6th Int. Conf. on the Theory andApplications of Satisfiability Testing, SAT’03, 2003.[3] T. Alsinet, F. Manyà, J. Planes, A Max-SAT solver with lazy data structures, in: Proc. of the 9th Ibero–American Conference on ArtificialIntelligence, IBERAMIA’04, Puebla, México, in: Lecture Notes Comput. Sci., vol. 3315, Springer, 2004, pp. 334–342.[4] T. Alsinet, F. Manyà, J. Planes, Improved exact solver for weighted Max-SAT, in: Proc. of the 8th Int. Conf. on Theory and Applications ofSatisfiability Testing, SAT’05, St. Andrews, Scotland, in: Lecture Notes Comput. Sci., vol. 3569, Springer, 2005, pp. 371–377.[5] C. Ansótegui, M.L. Bonet, J. Levy, F. Manyà, The logic behind weighted CSP, in: Proc. of the 20th Int. Joint Conference on ArtificialIntelligence, IJCAI’07, AAAI Press, 2007, pp. 32–37.[6] A. Atserias, M.L. Bonet, On the automatizability of resolution and related propositional proof systems, in: Proc. of the 16th Int. Conf. onComputer Science Logic, CSL’02, Edinburgh, Scotland, in: Lecture Notes Comput. Sci., vol. 2471, Springer, 2002, pp. 569–583.[7] A. Atserias, M.L. Bonet, On the automatizability of resolution and related propositional proof systems, Information and Computation 189 (2)(2004).[8] N. Bansal, V. Raman, Upper bounds for MaxSat: Further improved, in: Proc. of the 10th Int. Symposium on Algorithms and Computation,ISAAC’99, Chennai, India, in: Lecture Notes Comput. Sci., vol. 1741, Springer, 1999, pp. 247–260.[9] P. Beame, R. Karp, T. Pitassi, M. Saks, The efficiency of resolution and Davis–Putnam procedures, SIAM Journal on Computing 31 (4) (2002)1048–1075.[10] P. Beame, T. Pitassi, Simplified and improved resolution lower bounds, in: Proc. of the 37th Annual Symposium on Foundations of ComputerScience, FOCS’96, Burlington, VT, USA, 1996, pp. 274–282.[11] E. Ben-Sasson, A. Wigderson, Short proofs are narrow—resolution made simple, Journal of the ACM 48 (2) (2001) 149–169.[12] M.L. Bonet, J. Levy, F. Manyà, A complete calculus for Max-SAT, in: Proc. of the 9th Int. Conf. on Theory and Applications of SatisfiabilityTesting, SAT’06, Seattle, WA, USA, in: Lecture Notes Comput. Sci., vol. 4121, Springer, 2006, pp. 240–251.[13] B. Borchers, J. Furman, A two-phase exact algorithm for Max-SAT and weighted Max-SAT problems, Journal of Combinatorial Optimiza-tion 2 (1999) 299–306.[14] S. Dantchev, S. Riis, Planar tautologies, hard for resolution, in: Proc. of the 42nd Annual Symposium on Foundations of Computer Science,FOCS’01, Los Alamitos, CA, USA, 2001, pp. 220–231.[15] M. Davis, H. Putnam, A computing procedure for quantification theory, Journal of the ACM 7 (3) (1960) 201–215.[16] A. Haken, The intractability of Resolution, Theoretical Computer Science 39 (2–3) (1985) 297–308.[17] F. Heras, J. Larrosa, New inference rules for efficient Max-SAT solving, in: Proc. of the 21st National Conference on Artificial Intelligence,AAAI’06, Boston, MA, AAAI Press, 2006, pp. 68–73.[18] S. Khanna, M. Sudan, L. Trevisan, D.P. Williamson, The approximability of constraint satisfaction problems, SIAM Journal on Comput-ing 30 (6) (2001) 1863–1920.[19] J. Krajícek, Interpolation theorems, lower bounds for proof systems and independence results for bounded arithmetic, Journal of SymbolicLogic 62 (2) (1997).[20] A.S. Kulikov, Automated generation of simplification rules for SAT and MAXSAT, in: Proc. of the 8th Int. Conf. on Theory and Applicationsof Satisfiability Testing, SAT’05, St. Andrews, Scotland, in: Lecture Notes Comput. Sci., vol. 3569, Springer, 2005, pp. 430–436.[21] J. Larrosa, F. Heras, Resolution in Max-SAT and its relation to local consistency in weighted CSPs, in: Proc. of the 19th Int. Joint Conferenceon Artificial Intelligence, IJCAI’05, Edinburgh, Scotland, 2005, pp. 193–198.[22] C.M. Li, F. Manyà, J. Planes, Exploiting unit propagation to compute lower bounds in branch and bound Max-SAT solvers, in: Proc. of the 11thInt. Conf. on Principles and Practice of Constraint Programming, CP’05, Sitges, Spain, in: Lecture Notes Comput. Sci., vol. 3709, Springer,2005, pp. 403–414.[23] C.M. Li, F. Manyà, J. Planes, Detecting disjoint inconsistent subformulas for computing lower bounds for Max-SAT, in: Proc. of the 21stNational Conference on Artificial Intelligence, AAAI’06, Boston, MA, AAAI Press, 2006, pp. 86–91.[24] R. Niedermeier, P. Rossmanith, New upper bounds for maximum satisfiability, Journal of Algorithms 36 (1) (2000) 63–88.[25] C.M. Papadimitriou, Computational Complexity, Addison-Wesley, Reading, MA, 1994.[26] P. Pudlák, Lower bounds for resolution and cutting plane proofs and monotone computations, Journal of Symbolic Logic 62 (3) (1997).618M.L. Bonet et al. / Artificial Intelligence 171 (2007) 606–618[27] R. Raz, Resolution lower bounds for the weak pigeonhole principle, in: Proc. of the 34th Annual ACM Symposium on Theory of Computing,STOC’02, Montreal, Canada, 2002, pp. 553–562.[28] A. Razborov, Improved resolution lower bounds for the weak pigeonhole principle, Electronic Colloquium on Computational Complex-ity 8 (55) (2001).[29] E. Rollon, J. Larrosa, Bucket elimination for multiobjective optimization problems, Journal of Heuristics 12 (4–5) (2006).[30] H. Shen, H. Zhang, Study of lower bound functions for MAX-2-SAT, in: Proc. of the 19th National Conference on Artificial Intelligence,AAAI’04, San Jose, CA, USA, AAAI Press, 2004, pp. 185–190.[31] A. Urquhart, Hard examples for resolution, Journal of the ACM 34 (1) (1987) 209–219.[32] Z. Xing, W. Zhang, Efficient strategies for (weighted) maximum satisfiability, in: Proc. of the 10th Int. Conf. on Principles and Practice ofConstraint Programming, CP’04, Toronto, Canada, in: Lecture Notes Comput. Sci., vol. 3258, Springer, 2004, pp. 690–705.[33] Z. Xing, W. Zhang, An efficient exact algorithm for (weighted) maximum satisfiability, Artificial Intelligence 164 (2) (2005) 47–80.[34] H. Zhang, H. Shen, F. Manya, Exact algorithms for MAX-SAT, Electronic Notes in Theoretical Computer Science 86 (1) (2003).