Artificial Intelligence 241 (2016) 191–216Contents lists available at ScienceDirectArtificial Intelligencewww.elsevier.com/locate/artintFinding a collective set of items: From proportional multirepresentation to group recommendation ✩Piotr Skowron a,∗a University of Oxford, Oxford, UKb AGH University of Science Technology, Krakow, Polandc Université Paris-Dauphine, Paris, France, Piotr Faliszewski b, Jérôme Lang ca r t i c l e i n f oa b s t r a c tWe consider the following problem: There is a set of items (e.g., movies) and a group of agents (e.g., passengers on a plane); each agent has some intrinsic utility for each of the items. Our goal is to pick a set of K items that maximize the total derived utility of all the agents (i.e., in our example we are to pick K movies that we put on the plane’s entertainment system). However, the actual utility that an agent derives from a given item is only a fraction of its intrinsic one, and this fraction depends on how the agent ranks the item among the chosen, available, ones. We provide a formal specification of the model and provide concrete examples and settings where it is applicable. We show that the problem is hard in general, but we show a number of tractability results for its natural special cases.© 2016 Elsevier B.V. All rights reserved.Article history:Received 29 October 2015Received in revised form 3 June 2016Accepted 16 September 2016Available online 22 September 2016Keywords:Proportional representationOrdered weighted averageChamberlin–Courant ruleComputational complexityApproximationElectionsVoting1. IntroductionA number of real-world problems consist of selecting a set of items for a group of agents to jointly use. Examples of such activities include picking a set of movies to put on a plane’s entertainment system, deciding which journals a university library should subscribe to, deciding what common facilities to build, or even voting for a parliament (or other assembly of representatives). Let us consider some common features of these examples.First, there is a set of items1 and a set of agents; each agent has some intrinsic utility for each of the items (e.g., this utility can be the level of appreciation for a movie, the average number of articles one reads from a given issue of a journal, expected benefit from building a particular facility, the feeling—measured in some way—of being represented by a particular politician).Second, typically it is not possible to provide all the items to the agents and we can only pick some K of them, say (a plane’s entertainment system fits only a handful of movies, the library has a limited budget, only several sites for the facilities are available, the parliament has a fixed size).Third, the intrinsic utilities for items extend to the sets of items in such a way that the utility derived by an agent from a given item may depend on the rank of this item (from the agent’s point of view) among the selected ones. Extreme ✩The preliminary version of this paper was presented at AAAI-2015.* Corresponding author.E-mail addresses: piotr.skowron@cs.ox.ac.uk (P. Skowron), faliszew@agh.edu.pl (P. Faliszewski), lang@lamsade.dauphine.fr (J. Lang).1 We use the term ‘item’ in the most neutral possible way. Items may be candidates running for an election, or movies, or possible facilities, and so on.http://dx.doi.org/10.1016/j.artint.2016.09.0030004-3702/© 2016 Elsevier B.V. All rights reserved.192P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216examples include the case where each agent derives utility from his or her most preferred item only (e.g., an agent will watch his or her favorite movie only, will read/use the favorite journal/favorite facility only, will feel represented by the most appropriate politician only), from his or her least preferred item only (say, the agent worries that the family will force him or her to watch the worst available movie), or derives 1/K of the utility from each of the available items (e.g., the agent chooses the item—say, a movie—at random). However, in practice one should expect much more complicated schemes (e.g., an agent watches the top movie certainly, the second one probably, the third one perhaps, etc.; or, an agent is interested in having at least some T interesting journals in the library; an agent feels represented by some top T members of the parliament, etc.).The goal of this paper is to formally define a model that captures all the above-described scenarios, provide a set of examples where the model is applicable, and provide an initial set of computational results for it in terms of efficient algorithms (exact or approximate) and computational hardness results (NP-hardness and inapproximability results).Our work builds upon, generalizes, and extends quite a number of settings that have already been studied in the litera-ture. We provide a deeper overview of this research in Section 8 and here we only mention the two most directly related lines of work. First, our model where the agents derive utility from their most preferred item among the selected ones directly corresponds to winner determination under the Chamberlin–Courant’s voting rule [18,50,7] (it is also very deeply connected to the model of budgeted social choice [41,49,42]) and is in a certain formal sense a variant of the facility location problem. Second, the case where for each item each agent derives the same fraction of the utility is, in essence, the same as K -winner range-voting (or K -winner Borda [21]); that agents enjoy equally the items they get is also a key assumption in the Santa Claus problem [6], and in the problem of designing optimal picking sequences [14,10,35].The paper is organized as follows. First, in Section 2 we discuss several important modeling choices and provide the for-mal description of our model. Then, in Section 3, we discuss the applicability of the model in various scenarios. Specifically, we show a number of examples that lead to particular parameter values of our model. We give an overview of our results in Section 4 and then, in Sections 5, 6, and 7, we present these results formally. In Section 5 we present results regarding the complexity of computing exact solutions for our model. In the next two sections we discuss the issue of computing approximate solutions. First without putting restrictions on agents’ utilities (Section 6) and, then, for what we call non-finicky utilities (Section 7). Intuitively put, under non-finicky utilities the agents are required to give relatively high utility values to a relatively large fraction of the items. We believe that the notion of non-finicky utilities is one of the important contributions of this paper. We discuss related work in Section 8 and conclude in Section 9.2. The modelIn this section we give a formal description of our model. However, before we move on to the mathematical details, let us explain and justify some high-level assumptions and choices that we have made.First, we assume that the agents have separable preferences. This means that the intrinsic utility of an object does not depend on what other objects are selected. This is very different from, for example, the case of combinatorial auctions. However, in our model the impact of an object on the global utility of an agent does depend on its rank (according to that agent) among the selected items. This distinction between the intrinsic value of an item and its value distorted by its rank is also considered in several other research fields, especially in decision theory (where it is known as “rank-dependent utility theory”) and in multicriteria decision making, from which we borrow one of the main ingredients of our approach, the ordered weighted average (OWA) operators [58] (for technical details see the work of Kacprzyk et al. [34]). OWAs were recently used in social choice in several contexts [31,3,23]; we discuss these works in detain in Section 8.Second, throughout the paper we navigate between two views of the agents’ intrinsic utilities:1. Generally, we assume that the utilities are provided explicitly in the input as numerical values, and that these values are comparable between agents. Yet, we make no further assumptions about the nature of agents’ utilities: they do not need to be normalized, they do not need to come from any particular range of values, etc. Indeed, it is possible that some agent has very strong preferences regarding the items, modeled through high, diverse utility values, whereas some other agent does not care much about the selection process and has low utility values only.2. In some parts of the paper (which will always be clearly identified), we assume that utilities are heavily constrained and are derived from non-numerical information, such as approval ballots specifying which items an agent approves (leading to approval-based utilities), or rankings over alternatives, from which utilities are derived using an agent-independent scoring vector (typically, a Borda-like vector).Formally, the latter view is a special case of the former, but we believe that it is worthwhile to consider it separately. Indeed, many multiwinner voting rules (such as the Chamberlin–Courant [18] rule or the Proportional Approval Voting rule [37]) fit the second view far more naturally, whereas for other applications the former view is more natural.Third, we take the utilitarian view and measure the social welfare of the agents as the sum of their perceived utilities. One could study other variants, such as the egalitarian variant, where the social welfare is measured as the utility of the worst-off agent. We leave this as possible future research (our preliminary attempts indicated that the egalitarian setting is computationally even harder than the utilitarian one). Very recently, Elkind and Ismaïli [23] used OWA operators to define variants of the Chamberlin–Courant rule that lay between the utilitarian and egalitarian variants, while Amanatidis et al. [3]P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216193studied the same approach for a family of multiwinner voting rules based on Hamming distances; we discuss these works in more detail in Section 8. We believe that extending our setting beyond the utilitarian approach (e.g., by following the ideas of Elkind and Ismaïli [23] and Amanatidis et al. [3]) would be very interesting (but also rather challenging).2.1. The formal settingLet N = [n] be a set of n agents and let A = {a1, . . . , am} be a set of m items. The goal is to pick a size-K set W of items that, in some sense, is most satisfying for the agents. To this end, (1) for each agent i ∈ N and for each item a j ∈ A we have ≥ 0 that agent i derives from a j ; (2) the utility that each agent derives from a set of K items is an an intrinsic utility ui,a jordered weighted average [58] of this agent’s intrinsic utilities for these items.A weighted ordered average (OWA) operator over K numbers is a function defined through a vector α(K ) = (cid:5)α1, . . . , αK (cid:6)(cid:6) be the = xσ (i), where σ is a permutation of {1, . . . , K } such that xσ (1) ≥ xσ (2) ≥ . . . ≥of K (nonnegative) numbers2 as follows. Let (cid:7)x = (cid:5)x1, . . . , xK (cid:6) be a vector of K numbers and let (cid:7)x↓nonincreasing rearrangement of (cid:7)x, that is, xixσ (K ). Then we set:↓↓↓ = (cid:5)x1 , . . . , xKOWAα(K ) ((cid:7)x) =K(cid:2)i=1↓αi xiTo make the notation lighter, we write α(K )(x1, . . . , xK ), instead of OWAα(K ) (x1, . . . , xK ).We provide a more detailed discussion of the OWA operators useful in our context later and here we only mention that, for example, they can be used to express the arithmetic average (through the size-K vector ( 1K )), the maximum and minimum operators (through vectors (1, 0, . . . , 0), and (0, . . . , 0, 1), respectively), and the median operator (through the vector of all zeros, with a single one in the middle position).K , . . . , 1We formalize our problem of computing “the most satisfying set of K items” as follows.Definition 1. In the OWA-Winner problem we are given a set N = [n] of agents, a set A = {a1, . . . , am} of items, a collection of agent’s utilities (ui,a j )i∈[n],a j ∈ A , a positive integer K (K ≤ m), and a K -number OWA α(K ). The task is to compute a subset W = {w 1, . . . , w K } of A such that uα(K )i=1 α(K )(ui,w1 , . . . , ui,w K ) is maximal.(W ) =(cid:3)nutExample 1. Consider six agents with the following utilities over the items from the set A = {a1, a2, a3, a4, a5, a6}:u(a1) u(a2) u(a3) u(a4) u(a5) u(a6)Agent 1 5Agent 2 5Agent 3 5Agent 4 4Agent 5 4Agent 6 0444003333222000334222115111551Note that Agents 1, 2, and 3 have the same utilities for all the items. The same holds for Agents 4 and 5. We want to select K = 3 items and we use OWA α = (2, 1, 0). What is the score of {a1, a2, a6}? The first three agents get utility 2 × 5 + 4 = 14each, the next two get 2 × 5 + 4 = 14 each, and the last one gets 2 × 3 + 1 = 7. So, the score of {a1, a2, a6} is 42 + 28 + 7 = 77. Indeed, this is the optimal set; the next best ones are {a1, a2, a4}, {a1, a2, a5} and {a1, a5, a6}, all with score 75. The rule defined by the OWA α(cid:10) = (1, 1, 1), known as 3-Borda (due to the very specific values of agents’ utilities; see Example 2in the next section), would choose {a1, a2, a3} and Chamberlin–Courant’s rule (in our terms, the rule defined by the OWA operator α(cid:10)(cid:10) = (1, 0, 0)) would choose {a1, a5, a6}.For a family (α(K ))∞K =1 of OWAs, we write α-OWA-Winner to denote the variant of the problem where for each given solution size K we use OWA α(K ). From now on we will not mention the sizes of the OWA vectors explicitly and they will always be clear from the context. We implicitly assume that OWAs in our families are polynomial-time computable with respect to K . (In the formal definition of our problem, different OWA-vectors can be used for different values of the parameter K and, consequently, the coefficients of the OWA vectors are not simply constants but rather are functions of K . For this reason we need the assumption about polynomial-time computability.)2 The standard definition of OWAs assumes normalization, that is, that whether OWA vectors are normalized or not is irrelevant to all notions and results of this paper.Ki=1 αi = 1. We do not make this assumption here, for the sake of convenience; note (cid:3)194P. Skowron et al. / Artificial Intelligence 241 (2016) 191–2162.2. Classes of intrinsic utilitiesWhile our general setting allows agents to express arbitrary utilities, we also focus on two cases where they only provide approval-based or ordinal information:Approval-based information. Agents provide approval-based information if they only have to specify which items they like. This information is then mapped into approval-based utilities, defined by ui(a j) = 1 if i likes a j and ui(a j) = 0otherwise.Ordinal information. Agents provide ordinal information if they only have to specify their rankings over items, called their preference orders. This information is then mapped into utilities using a scoring vector, exactly in the same way as positional scoring rules (for single-winner voting) do. We focus on the particular case where this scoring vector is the Borda vector, i.e., if the rank of a j in i’s ranking is k then ui(a j) = m − k. We refer to this setting as Borda-basedutilities.Naturally, these are special cases of our general setting. Yet using approval-based or Borda-based utilities can be more convenient than using the general approach.Example 2. The utilities of the agents from Example 1 are Borda-based and can be expressed as the following preference orders:Agent 1 : a1 (cid:12) a2 (cid:12) a3 (cid:12) a5 (cid:12) a6 (cid:12) a4Agent 2 : a1 (cid:12) a2 (cid:12) a3 (cid:12) a5 (cid:12) a6 (cid:12) a4Agent 3 : a1 (cid:12) a2 (cid:12) a3 (cid:12) a5 (cid:12) a6 (cid:12) a4Agent 4 : a6 (cid:12) a1 (cid:12) a4 (cid:12) a3 (cid:12) a5 (cid:12) a2Agent 5 : a6 (cid:12) a1 (cid:12) a4 (cid:12) a3 (cid:12) a5 (cid:12) a2Agent 6 : a5 (cid:12) a4 (cid:12) a2 (cid:12) a3 (cid:12) a6 (cid:12) a1Both approval-based utilities and Borda-based utilities are inspired by analogous notions from the theory of voting, where approval and Borda count are very well-known single-winner voting rules (briefly put, under these rules we treat the utilities of the items as their scores, sum up the scores assigned to the items by the voters, and elect the item that has the highest score). Further, Borda-based utilities have been used in the original Chamberlin–Courant’s rule and in several works on fair division (see, e.g., a paper of Brams and King [13]).One of the high-level messages of this paper is that OWA-Winner problems tend to be computationally easier for the case of Borda-based utilities than for the case of approval-based ones (while we typically obtain NP-hardness in both settings, we find good approximation algorithms for many of the Borda-based cases, whereas for the approval-based setting our algorithms are either significantly weaker or we obtain outright inapproximability results). This is so mostly because under Borda-based utilities all the agents assign relatively high utility values to a relatively large fraction of items. In the following definition we try to capture this property.Definition 2. Consider a setting with m items and let umax denote the highest utility that some agent gives to an item. Let β and γ be two numbers in [0, 1]. We say that the agents have (β, γ )-non-finicky utilities if every agent has utility at least βumax for at least γ m items.To understand this notion better, let us consider the following example.Example 3. Let n = 3 and m = 6. The utilities are as defined below:u(a1) u(a2) u(a3) u(a4) u(a5) u(a6)Agent 1 10Agent 2 6Agent 3 810509010810658100107The agents have (0.8, 0.5)-non-finicky utilities. Indeed, all there agents have utility at least 8 for at least half of the items. They also have (0.6, 26 )-non-finicky utilities. We will also use the agents and items from this example later, when presenting our algorithms.3 )-non-finicky utilities, and (0.5, 5As we can expect, Borda-based utilities are non-finicky in a very natural sense.P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216195Observation 1. For every x, 0 ≤ x ≤ 1, Borda-based utilities are (x, 1 − x)-non-finicky.However there are also other natural cases of non-finicky utilities. For example, consider agents that have approval-based utilities and where each agent approves of at least a γ fraction of the items. These agents have (1, γ )-non-finicky utilities. (The reader may be surprised here that approval-based utilities may be non-finicky even though we said that we obtain inapproximability results for them. Yet, there is no contradiction here. These inapproximability results rely on the fact that some agents approve of very few items.)2.3. A dictionary of useful OWA familiesBelow we give a catalog of OWA families that we focus on throughout the paper (in the description below we take K to be the dimension of the vectors to which we apply a given OWA).1. k-Median OWA. For each k ∈ {1, . . . , K }, k-med(K ) is the OWA defined by the vector of k − 1 zeros, followed by a single one, followed by K −k zeros. It is easy to see that k-med(K )(x1, . . . , xK ) is the k-th largest number in the set {x1, . . . , xK }and is known as the k-median of (cid:7)x. In particular, 1-med(K )((cid:7)x) is the maximum operator, K -med(K )((cid:7)x) is the minimum operator, and if K is odd, K +12 -med(K )((cid:7)x) is the median operator.2. k-Best OWA. For each k ∈ {1, . . . , K }, k-best(K ) OWA is defined through the vector of k ones followed by K − k zeros. That is, k-best(K )((cid:7)x) is the sum of the top k values in (cid:7)x (with appropriate scaling, this means an arithmetic average of the top k numbers). K -bestis simply the sum of all the numbers in (cid:7)x (after scaling, the arithmetic average).3. Arithmetic progression OWA. This OWA is defined through the vector aprog[a](K ) = (cid:5)a + (K − 1)b, a + (K − 2)b, . . . , a(cid:6), where a ≥ 0 and b > 0. (One can easily check that the choice of b has no impact on the outcome of OWA-Winner; this is not the case for a, though.)4. Geometric progression OWA. This OWA is defined through the vector gprog[p](K ) = (cid:5)p K −1, p K −2, . . . , 1(cid:6), where p > 1. (This is without loss of generality, because multiplying the vector by a constant factor has no impact on the outcome of OWA-Winner; but the choice of p matters.)(K )K5. Harmonic OWA. This OWA is defined through the vector (cid:5)1, 16. Hurwicz OWA. This OWA is defined through a vector (λ, 0, . . . , 0, 1 − λ), where λ, 0 ≤ λ ≤ 1, is a parameter.3 , . . . , 12 , 1(cid:6),KIn the next section we describe several settings where these particular operators arise naturally. For other applications, one can easily design all sorts of other operators. As our natural assumption is that highly ranked items have more impact than lower-ranked objects, we often make the assumption that OWA vectors are nonincreasing, that is, α1 ≥ . . . ≥ αK . While most OWA operators we consider in the paper are indeed nonincreasing, this is not the case for k-medians (except for 1-median) and Hurwicz (except for λ = 1).3. Applications of the modelWe believe that our model is very general. To substantiate this claim, in this section we provide four quite different scenarios where it is applicable.Generalizing voting rules. Our research started as an attempt to generalize the rule of Chamberlin and Courant [18] for electing sets of representatives. For this rule, the voters (the agents) have Borda-based utilities over a set of candidates and we wish to elect a K -member committee (e.g., a parliament), such that each voter is represented by one member of the committee. If we select K candidates, then a voter is “represented” by the selected candidate that she ranks high-est among the chosen ones. Thus, winner determination under Chamberlin–Courant’s voting rule boils down to solving 1-best-OWA-Winner for the case of Borda-based utilities. On the other hand, solving K -best-OWA-Winner for Borda-based utilities is equivalent to finding winners under K -Borda, the rule that picks K candidates with the highest Borda scores (see the work of Elkind et al. [22] for a classification of multiwinner voting rules, including, e.g., K -Borda and Chamberlin–Courant’s rule).Our model extends one more appealing voting rule, known as Proportional Approval Voting (PAV; see the work of Kilgour [37] for a review of approval-based multiwinner rules, and the work of Aziz et al. [5] and Elkind and Lackner [24]for computational results). Winner determination under PAV is equivalent to solving α-OWA-Winner for the harmonic OWA, for the case of approval-based utilities.More generally, our model is very related to that of committee scoring rules, recently introduced by Elkind et al. [22]. While technically the two models are not comparable, our work inspired Faliszewski et al. [26,25] to consider the class of OWA-based committee scoring rules, which—in essence—are equivalent to the family of α-OWA-Winner problems for the case where the utilities are derived from ordinal data using single-winner scoring rules (analogously to our Borda-based utilities).One of the high-level observations that follows from the works of Elkind et al. [22], Faliszewski et al. [26,25], and Aziz et al. [4] is that different OWA operators lead to multiwinner voting rules with very different properties.196P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216Malfunctioning items or unavailable candidates. Consider a setting where we pick the items off-line, but on-line it may turn out that some of them are unavailable (for example, we pick a set of journals the library subscribes to, but when an agent goes to a library, a particular journal could already be borrowed by someone else; see the work of Lu and Boutilier [40]for other examples of social choice with possibly unavailable candidates). If some of the items are unavailable, an agent chooses to use the best yet available one.Let us make some additional assumptions about the scenario. We assume that each item is available with the same, known probability p (i.i.d.). The utility an agent gets from a set of selected items W is the expected value of the best available object. If our goal is to select K items so that the expected utility of an average agent (chosen uniformly at random) from his or her best available item is maximized, we should use the OWA operator (cid:5)p, p(1 − p), p(1 − p)2, . . .(cid:6). The OWA coefficients give the probabilities that, respectively, the most desired item is available, the second most-desired item is available but the first one is not, the third most-desired item is available but the first two are not, and so on. We note that using this operator is equivalent to using an appropriate geometric OWA operator.Since the probabilities used in this example are elements of the external world, it is natural to assume that they are known to the agents and that the agents could simply provide their utilities for all the possible bundles of K items. However, for large values of K this would require the agents to provide very large (possibly exponential) amount of information. The advantage of our model is that it provides a compact language for representing such agents’ utilities (indeed, this is a general advantage of our model that also applies to the following two examples).With similar motivations, Swamy and Shmoys [57] studied the facility location problem with facilities vulnerable to fail-ures. Their approach corresponds to using (cid:7)-best-OWA-Winner, for some constant (cid:7) (however their model is a bit different because they derive utilities from distances between the agents, whereas in our case the utilities can be arbitrary). An in-teresting open problem is to extend the approach of Swamy and Shmoys to other types of OWA vectors, in particular to the geometric progression OWA.Uncertainty regarding how many items a user enjoys. There may be some uncertainty about the number of items a user would enjoy (e.g., on a plane, it is uncertain how many movies a passenger would watch; one might fall asleep or might only watch those movies that are good enough). We give two possible models for the choice of the OWA vectors (in both cases, for each i, the coefficient αi of the OWA operator is proportional to the probability that an agent enjoys the i’th best movie):1. The probability that an agent enjoys i items, for 0 ≤ i ≤ K , is uniformly distributed, i.e., an agent would enjoy exactly his K +1 . So, the agent enjoys the i’th item if she enjoys at least i items, which K +1 ; we should use OWA vector defined by αi = K − i + 1 (we disregard the normalizing or her first i items in W with probability 1occurs with probability K −i+1constant), i.e., an arithmetic progression.2. We assume that the values given by each user to each item are distributed uniformly, i.i.d., on [0, 1] and that each user uses only the items that have a value at least θ , where θ is a fixed (user-independent) threshold. Therefore, a user enjoys the item in W ranked in position i if she values at least i items at least θ , which occurs with probability (cid:3)(cid:3)(cid:4)(cid:4)(cid:5)(cid:5)Kj=iKi(1 − θ)iθ K −i , thus leading to the OWA vector defined by αi =Kj=iKi(1 − θ)iθ K −i .There is a certain worry that we should address here. Our model requires us to use the same OWA operator for each agent, whereas different agents may enjoy different numbers of items with quite different probabilities. While the restriction to a common OWA operator for all the agents certainly is a limitation of the model, we believe that it is a justified one: On the one hand, even using a single operator is computationally very challenging (as we will see very soon) and, on the other hand, the two approaches presented here show reasonable choices for OWA operators that can apply to many similar scenarios (especially if obtaining the personalized OWA operators for the agents would be a challenge on its own). In our model, OWA operators represent typical expected behavior and not the specific behavior of each agent. (This is similar to using positional scoring vectors for voting rules, which express the typical relation—rather than the agent-specific relations—between utilities and positions in preference rankings.) Naturally, if one were not satisfied with OWAs derived theoretically (as in this example), one could find operators that are most suitable for a given population of agents and the application at hand using classical techniques from machine learning.Ignorance about which item will be assigned to a user. We now assume that a matching mechanism will be used after selecting the K items. The matching mechanism is not specified; it might also be randomized. If the agents have a complete ignorance about the mechanism used, then it makes sense to use known criteria for decision-making under complete uncer-tainty (as opposed to the previous two scenarios where the coefficients of the OWA operators were appropriate probabilities, here these coefficients describe the agents’ attitude toward risk):1. The Wald criterion assumes that agents are extremely risk-averse, and corresponds to α = K -med(K ) = (cid:5)0, . . . , 0, 1(cid:6)(recall the definition of the k-median OWA from Section 2.3). The agents consider their worst possible items.2. The Hurwicz criterion is a linear combination between the worst and the best outcomes, and corresponds to α =(λ, 0, . . . , 0, 1 − λ) for some fixed λ ∈ (0, 1).P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216197Table 1Summary of our results for the OWA families from Section 2.3. For each OWA family we provide four entries: In the first row (for a given OWA family) we give its worst case complexity (in the general case and in the non-finicky utilities case), and in the second row we list the best known, yet not necessarily optimal, approximation result (in the general case and in the non-finicky utilities case). We write K to mean the cardinality of the winner set that we seek. In the “References” column we point to the respective result in the paper/literature. For negative results we indicate the simplest types of utilities where they hold; for positive results we give the most general types of utilities where they hold. For approximability results for the case of non-finicky utilities, we write (β − (cid:9))-approx to mean that there is a polynomial-time approximation algorithm whose approximation ratio approaches β as the size of the committee increases (in effect, for each (cid:9), (cid:9) > 0, there is a polynomial-time algorithm that achieves β − (cid:9) approximation ratio, by using a brute-force algorithm if the size of the committee is smaller than a certain constant). For inapproximability results, by DkS-bounded and MEBP-bounded we mean, respectively, inapproximability results derived from the Densest-k-Subgraph problem and from the Maximum Edge Biclique Problem.General and approval utilities(β, γ )-non-finicky and Borda utilitiesReferencesOWA familyk-median (k fixed)K -median1-bestk-best (k fixed)(K − 1)-bestNP-hardDkS-boundedNP-hardMEBP-boundedNP-hard (approval)(1 − 1e )-approx.NP-hard (approval)(1 − 1e )-approx.NP-hard (approval)PTASK -bestPArithmetic progressionGeometric progressionHurwicz[λ]NP-hard(1 − 1e )-approx.NP-hard(1 − 1e )-approx.NP-hard (approval)λ(1 − 1e )-approx.NP-hard (Borda)(β − (cid:9))-approx.PTAS (Borda)NP-hard?NP-hard (Borda)(β − (cid:9))-approx.PTAS (Borda)NP-hard (Borda)(β − (cid:9))-approx.NP-hard (Borda)PTASP?(1 − 1e )-approx.?β − (cid:9)?λ(1 − (cid:9))-approx.for each (cid:9) > 0Proposition 8Theorem 15 and Corollary 26Theorem 30Theorems 6 and 7Theorem 19, open problemLiterature [50,41]Literature [41], Corollary 26Literature [55]Proposition 8Theorem 13 and Corollary 26Theorems 6 and 7Theorem 23Folk resultTheorem 3, open problemTheorem 13Theorem 3, open problemTheorem 13, Corollary 31Corollary 20, open problemCorollary 22If the agents know that they are guaranteed to get one of their best i items, then the Wald and Hurwicz criteria lead, respectively, to the OWAs α = i-med(K ) and α = (λ, 0, . . . , 0, 1 − λ, 0, . . . , 0), with 1 − λ in position i. If the agents know that the mechanism gives them one of their top i items, each with the same probability, then we should use i-best OWA. More generally, the matching mechanism may assign items to agents with a probability that decreases when the rank increases.Remarks. We conclude this section with a few comments regarding which parts of our model are endogenous and which are exogenous. From the computational point of view, all of them are exogenous. We are given the OWA operator, the agents, their intrinsic utilities, the value K , and our goal is to solve this OWA-Winner instance. However, the situation from the point of view of the designer of the mechanism who applies the model is quite different. For example, he or she may be able to specify the format in which the utilities are provided (e.g., he or she may require Borda-based utilities or approval-based utilities), or he or she may be forced to use a particular format (e.g., only approval-based utilities may be available). He or she may be able to choose the OWA operator (e.g., he or she may be designing a multiwinner voting rule for some society, trying to balance different desiderata), or the OWA operator might follow naturally from the external parameters (as in the example of malfunctioning items), or might be provided explicitly from the outside (e.g., as in the example of highly risk-averse agents).In summary, what we provide is a language for expressing a large family of problems regarding the selection of items for collective use by the agents, and a number of tools for solving these problems (or for identifying which of these problems are difficult to solve).4. Overview of the resultsIn this section we provide a high-level overview of our results. It turns out that computational properties of the OWA-Winner problem are quite varied and strongly depend on the types of OWA operators and the allowed agent utilities. We present a summary of our results in Table 1 (however, we stress that some of our technical results are not listed in the table and can be found only in the following sections).Our first observation is that without any restrictions, OWA-Winner is NP-hard. This is hardly surprising since the prob-lem generalizes other NP-hard problems, and it is natural to ask if there are any special cases where it is easy. Unfortunately, as we show in Section 5, they are very rare. For example, without restrictions on the agents’ utilities, OWA-Winner can be solved in polynomial time either if we treat K as a constant or if we use the constant OWA vector (i.e., if we use K -best198P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216OWA). Indeed, the problem becomes NP-hard already for the (K − 1)-best OWA. This holds even if the agents are restricted to have approval-based utilities (Theorem 6) or Borda-based utilities (Theorem 7). More generally, we show that OWA-Winner is NP-hard for every family of OWA vectors that are nonconstant and nonincreasing (Theorem 5), which captures a significant fraction of all interesting settings.After considering the worst-case complexity of computing exact solutions in Section 5, in Section 6 we focus on the approximability of the OWA-Winner problem. We show that in this respect there is a significant difference between two main classes of OWA vectors, those that are nonincreasing and the remaining ones. We show that for the nonincreasing OWA vectors the standard greedy algorithm for optimizing submodular functions achieves approximation ratio of (1 − 1/e), irrespective of the nature of the agents’ utilities (Lemma 12 and Theorem 13). On the other hand, we present evidence that there is little hope for good approximation algorithms for the case of OWA vectors that are not nonincreasing (Example 5and Theorems 15 and 19).Next, in Section 7, we consider approximation algorithms for OWA-Winner for the case where agents have non-finicky utilities. It turns out that for non-finicky utilities we can sometimes obtain much better approximability guarantees than in the general setting. The key feature of non-finicky utilities assumption is that every agent gives sufficiently high utility values to sufficiently many items, so that the algorithms have enough flexibility in picking the items to achieve high quality results. Specifically, we show a strong approximation algorithm for the case of non-finicky utilities and OWA vectors that concentrate most of the weight in a constant number of their top coefficients (Theorems 25, 29, 30, and Corollary 31). These results apply, for example, to the case of geometric progression OWAs, (cid:7)-best OWAs, and (cid:7)-med OWAs (for fixed values of (cid:7)). Further, when applied to the case of Borda-based utilities (which, as we have argued in Section 2.2, are non-finicky in a very strong sense), we obtain polynomial-time approximation schemes (that is, approximation algorithms that can compute solutions with an arbitrarily good precision, but whose running time depends polynomially only on the size of the problem but not necessarily on the desired approximation ratio).5. Computing exact solutionsWe start our analysis by discussing the complexity of solving the OWA-Winner problem exactly. In general, it seems thatOWA-Winner is a rather difficult problem and below we show this section’s main negative result. That is, we show that our problem is NP-hard for any class of OWA vectors satisfying a certain natural restriction. Intuitively, this restriction says that in a considered family of OWAs, the impact of more-liked items on the total satisfaction of an agent is greater than that of the less-liked ones.Theorem 3. Fix an OWA family α such that for every K , α(K ) is nonincreasing and nonconstant.3 α-OWA-Winner is NP-hard, even for approval-based utilities.For the sake of readability, we first prove two simpler results that we later use in the proof of Theorem 3. In these proofs, we give reductions from the standard VertexCover problem and from CubicVertexCover, its variant restricted to cubic graphs.Definition 4. In the VertexCover problem we are given an undirected graph G = (V , E), where V = {v 1, . . . , vm} is the set of vertices and E = {e1, . . . , en} is the set of edges, and a positive integer K . We ask if there is a set C of up to K vertices such that each edge is incident to at least one vertex from C . The CubicVertexCover problem the same problem, restricted to graphs where each vertex has degree exactly three.VertexCover is well-known to be NP-hard [30]; NP-hardness for CubicVertexCover was shown by Alimonti and Kann [1].Theorem 5. Fix an OWA family α, such that there exists p such that for every K > p we have α(K )NP-hard, even for approval-based utilities.p > α(K )p+1. α-OWA-Winner is Proof. We give a reduction from CubicVertexCover problem. Let I be an instance of CubicVertexCover with graph G =(V , E), where V = {v 1, . . . , vm} and E = {e1, . . . , en}, and positive integer K . W.l.o.g., we assume that n > 3.We construct an instance Iwe set N = E (the agents correspond to the edges), A = V ∪{b1, b2, . . . b p−1} (there are (p − 1) dummy items; other items correspond to the vertices), and we seek a collection of items of size K + p − 1. Each agent ei , ei ∈ E, has utility 1 exactly for all the dummy items and for two vertices that ei connects and for each of the dummy items (for the remaining items ei has utility 0). In effect, each agent has utility 1 for exactly p + 1 items.of α-OWA-Winner. In I(cid:10)(cid:10)3 That is, for each K , α(K ) = (cid:5)α(K )1, . . . , α(K )K(cid:6) is an OWA operator such that α(K )1≥ · · · ≥ α(K )Kand α(K )1 > α(K )K .P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216199We claim that I is a yes-instance of CubicVertexCover if and only if there exists a solution for I(cid:3)(cid:10)with the total utility at least n pi=1 αi + (3K − n)αp+1.p(⇒) If there is a vertex cover C of size K for G, then by selecting the items W = C ∪ {b1, b2, . . . b p−1} we obtain the required utility of the agents. Indeed, for every agent ei there are at least p items in W for which i gives value 1 (the p − 1 dummy items and at least one vertex incident to ei ). These items contribute the value n i=1 αi to the total agents’ utility. Additionally, since every non-dummy item has value 1 for exactly 3 agents, and since every agent has at most (p + 1)items with value 1, there are exactly (3K − n) agents that have exactly (p + 1) items in W with values 1. These (p + 1)’th additional utility-1 items of the (3k − n) agents contribute (3K − n)αp+1 to the total utility. Altogether, the agents’ utility is (cid:3)n i=1 αi + (3K − n)αp+1, as claimed.(⇐) Let us assume that there is a set of (K + p − 1) items with total utility at least n we have (p − 1) items that have value 1 for each of the n agents, and every other item has value 1 for exactly 3 agents. Thus, the sum of the utilities of K + p − 1 items (without applying the OWA operator yet) is at most (p − 1)n + 3K = pn + (3K −n). i=1 αi + (3K − n)αp+1 only if for each agent eiThus, the total utility of the agents (now applying the OWA operator) is n the solution contains p items with utility 1. Since there are only p − 1 dummy items, it means that for each agent ei there is a vertex v j in the solution such that e j is incident to v j . That is, I is a yes-instance of CubicVertexCover. (cid:2)i=1 αi + (3K − n)αp+1. In I(cid:3)(cid:3)(cid:3)ppp(cid:10)Theorem 6. (K − 1)-best-OWA-Winner is NP-complete even for approval-based utilities.(cid:10)Proof. Membership in NP is clear. We show a reduction from the VertexCover problem. Let I be an instance of Vertex-Cover with graph G = (V , E), where V = {v 1, . . . , vm} and E = {e1, . . . , en}, and with a positive integer K (without loss of generality, we assume that K ≥ 3 and K < m).i and e2We construct an instance Ii , with the following utilities: e1Let W be some set of K items (i.e., vertices) and consider the sum of the utilities derived by the two agents e1of (K − 1)-best-OWA-Winner in the following way. We let the set of items be A = V and we form 2n agents, two for each edge. Specifically, if ei is an edge connecting two vertices, call them v i,1 and v i,2, then we introduce two agents, e1i has utility 1 for v i,1 and for v i,2, and has utility 0 for all the other items; e2i has opposite utilities—it has utility 0 for v i,1 and for v i,2, and has utility 1 for all the remaining ones.i and e2iis equal to K − 1from W under (K − 1)-best-OWA. If neither v i,1 nor v i,2 belong to W , then the total utility of e1(the former agent gets utility 0 and the latter one gets K − 1). If only one of the items, i.e., either v i,1 or v i,2, belongs to is equal to K (the former agent gets utility 1 and the latter one still gets K − 1). W , then the total utility of e1i and e2Finally, if both items v i,1, v i,2 belong to W , then the total utility of e1is also equal to K (the former gets utility 2and the latter gets utility K − 2). Thus the total utility of all agents is equal to K · n if and only if the answer to the instance I is “yes”. This shows that the reduction is correct and, since the reduction is computable in polynomial time, the proof is complete. (cid:2)i and e2i and e2iiiUsing a proof that combines the ideas of the proofs of Theorems 5 and 6, we show that indeed OWA-Winner is NP-hard for a large class of natural OWAs.Proof of Theorem 3. We give a reduction from CubicVertexCover. Let I be an instance of CubicVertexCover with graph G = (V , E), where V = {v 1, . . . , vm} and E = {e1, . . . , en}, and with positive integer K .Now let us consider α(2K ). Since α(2K ) is nonincreasing and nonconstant, one of the two following conditions must hold.1. There exists p ≤ K such that α(2K )2. There exists p > K such that α(2K )p > α(2K )p+1 .p+1 , and for every p ≤ K , we have α(2K )p > α(2K )p= α(2K )p+1 .If (1) is the case then we use a reduction similar to that in the proof of Theorem 5. The only difference is that apart from the set D1 of (p − 1) dummy items (ranked first by all agents), we introduce the set D2 of (2K − p + 1) dummy items and (2K − p + 1) sets N1, N2, . . . , N2K −p+1, each consisting of 2n dummy agents. The dummy items from D2 are introduced only to fill-up the solution up to 2K members. The dummy agents from Ni have utility 1 for each of the items from D1 and for the i’th item from D2 (they have utility 0 for all the other items). This is to enforce that the items from D2 are selected in the optimal solution. The further part of the reduction is as in the proof of Theorem 5.If (2) is the case, then we use a reduction similar to that in the proof of Theorem 6. We let the set of items be A = V ∪ D1 ∪ D2, where D1, |D1| = p + 1 − K , and D2, |D2| = 2K − p − 1 are sets of dummy items that we need for our construction. Similarly as in the proof of Theorem 6, for each edge ei ∈ E we introduce two agents e1i . Here, however, we additionally need the set F of (2n + 1) dummy agents. Each dummy agent from F assigns utility 1 to each dummy item from D2 and utility 0 to the remaining items—consequently, since |F | > 2n, each dummy item from D2 must be selected to every optimal solution. Further, each non-dummy agent assigns utility 1 to each dummy agent from D 1—this way we ensure that every item from D1 must be selected to every optimal solution. Finally, the utilities of the non-dummy agents for the non-dummy items are defined exactly as in the proof of Theorem 6. This ensures that the optimal solution, apart from D1 and D2, will contain the non-dummy items that correspond to the vertices from the optimal vertex cover. (cid:2)i and e2200P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216One may wonder if our just-presented hardness results also hold for other restrictions on agents’ utilities. Below we show a variant of the result from Theorem 6 for Borda-based utilities. It follows by an application of a similar idea as in the proof of Theorem 6, but the restriction to Borda-based utilities requires a much more technical proof (available in the appendix).Theorem 7. (K − 1)-best-OWA-Winner is NP-hard even for Borda-based utilities.5.1. Inherited hardness resultsWe now consider the cases of k-best-OWA-Winner and k-med-OWA-Winner (where k is a constant). By results of Procaccia, Rosenschein and Zohar [50] and Lu and Boutilier [41], we know that the 1-best-OWA-Winner problem is NP-hard both for approval-based utilities and Borda-based utilities (in this case the problem is equivalent to winner determination under appropriate variants of Chamberlin–Courant voting rule; in effect, many results regarding the complexity of this rule are applicable for this variant of the problem [7,55,59,54]). A simple reduction shows that this result carries over to each family of k-best OWAs and of k-med OWAs, where k is a fixed positive integer (note that for the case of approval-based utilities, these results also follow through Theorem 3).Proposition 8. For each fixed k, k-best-OWA-Winner and k-med-OWA-Winner are NP-complete, even if the utility profiles are restricted to be approval-based or Borda-based.Proof. Let k be a fixed constant. It is easy to see that k-best-OWA-Winner and k-med-OWA-Winner are both in NP. To show NP-hardness, we give reductions from 1-best-OWA-Winner (either with approval-based utilities or with Borda-based utilities) to k-best-OWA-Winner and to k-med-OWA-Winner (with the same types of utilities).(cid:10)Let I be an instance of 1-best-OWA-Winner with n agents, m items, and where we seek a winner set of size K . We of k-best-OWA-Winner that is identical to I except that: (1) We add k − 1 special items b1, . . . , bk−1form an instance Isuch that under approval-based utilities each agent i has utility 1 for each item b j , 1 ≤ j ≤ k − 1, and under Borda-based utilities each agent i has utility m + j − 1 for item b j , 1 ≤ j ≤ k − 1. (2) We set the size of the desired winner set to be that achieves some utility x, then there is a K(cid:10)(cid:10) − {b1, . . . , bk−1}solution Wis an optimal solution for I and, for I , has utility x −that uses all the k − 1 items b1, . . . , bk−1 and also achieves utility x. Further, the set Wk−1j=1 ui,b j(cid:10) = K + k − 1. It is easy to see that if there is an optimal solution WAnalogous argument shows that 1-best-OWA-Winner reduces to k-med-OWA-Winner (also for approval-based and for k−1j=1 u1,b j .(cid:3)ni=1= x − n for Ifor I(cid:3)(cid:3)(cid:10)(cid:10)(cid:10)(cid:10)(cid:10)Borda-based utilities). (cid:2)We leave the problem of generalizing the above two theorems to more general classes of OWA vectors as a technical (but conceptually easy) open problem.5.2. Rare easy casesWhile the OWA-Winner problem is in general NP-hard, there are also some natural easy cases. For example, the problem is in P provided that we seek a winner set of a fixed size. Naturally, in practice the variant of the problem with fixed K has only limited applicability.Proposition 9. For each fixed constant K (the size of the winner set), OWA-Winner is in P.Proof. For a profile with m items, there are only O (mK ) sets of winners to try. We try them all and pick one that yields highest utility. (cid:2)Similarly, the problem is in P when the number of available items is fixed (it follows by applying the above proposition; if the number of items is fixed then so is K ). Throughout the rest of the paper we focus on the α-OWA-Winner variant of the problem, where K is given as part of the input and α represents a family of OWAs, one for each value of K .It is easy to note that for K -best OWA (that is, for the family of constant OWAs α = (1, . . . , 1)) the problem is in P.Proposition 10. K -best-OWA-Winner is in P.Proof. Let I be an input instance with m items and n agents, where we seek a winner set of size K . It suffices to compute for each item the total utility that all the agents would derive if this item were included in the winner set and return Kitems for which this value is highest. (cid:2)Indeed, if the agents’ utilities are either approval-based or Borda-based, K -best-OWA-Winner boils down to (polynomial-time) winner determination for K -best approval rule and for K -Borda rule [21], respectively (see also the work of Elkind P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216201minimizen(cid:2)m(cid:2)K(cid:2)i=1j=1k=1αkui,a j xi, j,ksubject to:m(cid:2)(a) :xi = Ki=1(b) : xi, j,k ≤ x j,m(cid:2)(c) :xi, j,k = 1,j=1K(cid:2)k=1m(cid:2)j=1(d) :(e) :xi, j,k = 1,ui,a j xi, j,k ≥m(cid:2)j=1(f) : xi, j,k ∈ {0, 1},(g) : x j ∈ {0, 1},i ∈ [n]; j, k ∈ [K ]i ∈ [n]; k ∈ [K ]i ∈ [n]; j ∈ [m]ui,a j xi, j,(k+1),i ∈ [n]; k ∈ [K − 1]i ∈ [n]; j, k ∈ [K ]j ∈ [m]Fig. 1. Integer linear programming (ILP) formulation for the OWA-Winner problem.et al. [22] for a general discussion of multiwinner rules). However, in light of this fact, Theorems 6 and 7 appear quite surprising.Given the results in this section so far, we conjecture that the family of constant OWAs, that is, the family of K -best OWAs, is the only natural family for which α-OWA-Winner is in P. We leave this conjecture as a natural follow-up question. It is tempting to conjecture that for all families of non-constant OWAs, not just the natural ones, the problem is NP-hard. This, however, is not the case. By following the arguments of the classic theorem of Ladner [38], it is possible to exhibit a polynomial-time computable family of OWAs such that α-OWA-Winner is in NP, but is neither NP-complete nor in P, unless P = NP. (Intuitively put, such a family could consist of interspersed long fragments where the OWAs are either K -best or 1-best. The K -best fragments would prevent the problem from being NP-complete, while the 1-best fragments would prevent it from being in P.)5.3. Integer programmingIn spite of all the hardness results that we have seen so far, we still might be in a position where it is necessary to obtain an exact solution for a given α-OWA-Winner instance, and where the brute-force algorithm from Proposition 9 is too slow. In such a case, it might be possible to use an integer linear programming (ILP) formulation of the problem, given below. We believe that this ILP formulation is interesting in its own right and, in particular, that it is interesting future work to experimentally assess the size of instances for which it yields solutions in reasonable amount of time.Theorem 11. OWA-Winner reduces to computing a solution for the integer linear program from Fig. 1.Proof. Consider an input instance with n agents N = [n] and m items A = {a1, . . . , am}, where we seek a winner set of size K , under OWA α = (α1, . . . , αK ). For each i ∈ N, a j ∈ A, we write ui,a j to denote the utility that agent i derives from item a j .We form an instance of ILP with the following variables: (1) For each i ∈ N, j ∈ [m], and k ∈ [K ], there is an indicator variable xi, j,k (intuitively, we interpret xi, j,k = 1 to mean that for agent i, item a j is the k-th most preferred one among those selected for the solution). (2) For each j ∈ [m], there is an indicator variable x j (intuitively, we interpret x j = 1 to mean that a j is included in the solution). Given these variables (and assuming that we enforce their intuitive meaning), the goal of our ILP is to maximize the function We require that our variables are indeed indicator variables and, thus, take values from the set {0, 1} only (constraints (f) and (g)). We requite that the variables of the form xi, j,k are internally consistent. (constraint (c) says that each agent ranks only one of the candidates from the solution as k-th best, constraint (d) say that there is no agent i and item a j such that i views a j as ranked on two different positions among the items from the solution.) Then, we require that variables of the form xi, j,k are consistent with those of the form x j (constraint (b)) and that exactly K items are selected for the solution (constraint (a)).Kk=1 αkui,a j xi, j,k.(cid:3)ni=1mj=1(cid:3)(cid:3)Our final constraint, constraint (e), requires that variables xi, j,k indeed for each agent sort the items from the solution in the order of descending utility values. We mention that constraint (e) is necessary only for the case of OWAs α that are not-nonincreasing. For a nonincreasing α, an optimal solution for our ILP already ensures the correct “sorting” (otherwise our goal function would not be maximized). (cid:2)202P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216We should note that linear-programming formulations of OWA-based optimization problems have appeared in the lit-erature far before our work; see, for example, the paper of Ogryczak and ´Sliwinski [48]. Yet, we use the OWA operators in a very different way and, thus, our approach is different. (In essence, Ogryczak and ´Sliwi ´nski use an OWA operator to aggregate a number of values, whereas we use a simple sum to aggregate the agents’ perceived utilities, but we compute these perceived utilities by applying an OWA operator to each agent’s individual, intrinsic utilities.)6. Approximation: general utilities and approval utilitiesThe OWA-Winner problem is particularly well-suited for applications that involve recommendation systems (see, e.g., the work of Lu and Boutilier [41] for a discussion of 1-best-OWA-Winner in this context). For recommendation systems it often suffices to find good approximate solutions instead of perfect, exact ones, especially if we only have estimates of agents’ utilities. It turns out that the quality of the approximate solutions that we can produce for OWA-Winner very strongly depends on both the properties of the particular family of OWAs used and on the nature of agents’ utilities.(cid:7)1 − 1approximation eut (recall Definition 1) is submodular First, we show that as long as our OWA is nonincreasing, a simple greedy algorithm achieves ratio. This result follows by showing that for a nonincreasing OWA α, the function uαand nondecreasing, and by applying the famous result of Nemhauser et al. [46].(cid:6)Recall that if A is some set and u is a function u : 2 A → R+, then we say that: (1) u is submodular if for each W and , W ⊆ W(cid:10) ⊆ A, and each a ∈ A \ Wit holds that:(cid:10)(cid:10)Wu(W ∪ a) − u(W ) ≥ u(W),and (2) u is nondecreasing if for each W ⊆ A and each a ∈ A it holds that u(W ∪ {a}) ≥ u(W ).(cid:10) ∪ a) − u(W(cid:10)Lemma 12. Let I be an instance of OWA-Winner with a nonincreasing OWA α. The function uαut is submodular and nondecreasing.Proof. Let I be an instance of OWA-Winner with agent set N = [n], item set A = {a1, . . . , am}, desired solution size K , and OWA α = (cid:5)α1, . . . , αK (cid:6). For each agent i ∈ N and each item a j ∈ A, ui,a j is a nonnegative utility that i derives from a j .Since all the utilities and all the entries of the OWA vector are nonnegative, we note that uαut is nondecreasing. To show submodularity, we decompose uαut as follows:uαut(W ) =K −1(cid:2)(α(cid:7) − α(cid:7)+1)u(cid:7)-best-OWAut(W ) + αK u K -best-OWAut(W )(cid:7)=1For each W ⊆ A, i ∈ N and (cid:7) ∈ [m], let Top(W , i, (cid:7)) be the set of those (cid:7) items from W whose utility, from the point of view of agent i, is highest (we break ties in an arbitrary way). Since nonnegative linear combinations of submodular functions are submodular, it suffices to prove that for each i ∈ N and each (cid:7) ∈ [m], function u(cid:7)w∈Top(W ,i,(cid:7)) ui,w is submodular.i (W ) =(cid:3)i , consider two sets, W and W(cid:10), W ⊆ W(cid:10) ⊆ A, and some a ∈ A \ W(cid:10). We claim that:(cid:10) ∪ {a}) − u(cid:7)(cid:10)i (Wi (WLet u W and u W (cid:10) denote the utilities that the i-th agent has for the (cid:7)-th best items from W and W, respectively (or 0 if a given set has fewer than (cid:7) elements). Of course, u W (cid:10) ≥ u W . Let ua denote i-th agent’s utility for a. We consider two cases. If ua ≤ u W , then both sides of (1) have value 0. Otherwise:(cid:10)(1)).(cid:10)To show submodularity of u(cid:7)i (W ∪ {a}) − u(cid:7)u(cid:7)i (W ) ≥ u(cid:7)(cid:10) ∪ {a}) − u(cid:7)u(cid:7)i (Wi (W ∪ {a}) − u(cid:7)u(cid:7)) = max(ua − u W (cid:10) , 0)i (Wi (W ) = ua − u W ,which proves (1) and completes the proof. (cid:2)Based on the above result, we can easily show that Algorithm 1 is a polynomial time (1 − 1/e)-approximation for the OWA-Winner problem, for the case of nonincreasing OWA vectors (see Theorem 13 below). Algorithm 1 is a natural incarnation of the greedy algorithm of Nemhauser et al. [46]. It starts by setting the found-so-far solution W to be empty. Then, in each iteration it extends W by adding this item that causes the greatest increase in the utility.Example 4. Let the items and agents be as in Example 3. Let K = 3 and consider OWA vector α = (2, 1, 0). Throughout the K = 3 iterations, we obtain the following gain values (the contents of W are given at the beginning of each iteration; below we also explain some of the computation):α(cid:7)−1utuWIter. 1 ∅0Iter. 2 {a1}48Iter. 3 {a1, a4} 76(W ) gain(a1) gain(a2) gain(a3) gain(a4) gain(a5) gain(a6)48−−30152382174828−4627834215P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216203Algorithm 1: The greedy algorithm for finding the utilitarian set of K winners.Notation:α(cid:7) ← input OWA operator α, restricted to its top (cid:7) entries.W ← ∅;for (cid:7) ← 1 to K dogain ← {};foreach a ∈ A \ W dogain[a] ← uα(cid:7)−1α(cid:7)ut (W ∪ {a}) − uutW ← W ∪ argmaxa∈ A\W (gain[a]);(W );return W ;At the beginning of the first iteration W = ∅ and the algorithm simply computes the utility of each item separately, using α1OWA operator α1 = (cid:5)2(cid:6). For example, uut ({a1}) = 2 · (10 + 6 + 8) = 48. In the first iteration both a1 and a4 lead to the highest gain and, so, the algorithm is free to pick either of them. We assume it picks a1. In the second iteration, we have W = {a1} and, for example, the gain value for a4 is computed as:α2ut ({a1, a4}) − uα1ut ({a1}) = 2 · (10 + 10 + 8) + (8 + 6 + 6) − 48 = 76 − 48 = 28.uIt is the highest gain value and so the algorithm includes a4 in the solution. In the third iteration, item a5 has the highest gain and so the algorithm includes it in W . Finally, the algorithm outputs W = {a1, a4, a5}.Theorem 13. For a nonincreasing OWA α, Algorithm 1 is a polynomial time (1 − 1/e)-approximation algorithm for the problem of finding the utilitarian set of K winners.Proof. The thesis follows from the results of Nemhauser et al. [46] on approximating nondecreasing submodular func-tions. (cid:2)Algorithm 1 has interesting interpretation in the context of voting systems. This greedy algorithm can be viewed not only as an approximation algorithm, but also as a new iterative voting rule. Indeed, many popular voting rules are defined as iterative (greedy) algorithms. Such rules are not only polynomially solvable, but also are easier to understand for the society. Further, Caragiannis et al. [17] and, later, Elkind et al. [22], advocate viewing approximation algorithms for computationally hard voting rules as new election systems, and study their axiomatic properties (often showing that they are better than those of the original rules).Here we give another interesting observation. It turns out that the algorithm from Theorem 13, when applied to the case of approval-based utilities and the harmonic OWA, is simply the winner determination procedure for the Sequential Proportional Approval Voting rule [11] (developed by the Danish astronomer and mathematician Thorvald N. Thiele, and used for a short period in Sweden during early 1900s). That is, the Sequential Proportional Approval Voting rule is simply an approximation of the PAV rule (the Proportional Approval Voting rule). We believe that this observation gives another evidence that approximation algorithms for computationally hard voting rules can indeed be viewed as new full-fledged voting rules. (We point readers interested in approval-based multiwinner voting rules to the overview of Kilgour [37] and to the works of Aziz et al. [5,4], Elkind and Lackner [24], and Skowron and Faliszewski [54]).Is a (1 − 1e )-approximation algorithm a good result? After all, 1 − 1≈ 0.63 and so the algorithm guarantees only about 63% of the maximum possible satisfaction for the agents. Irrespective if one views it as sufficient or not, this is the best possible approximation ratio of a polynomial-time algorithm for (unrestricted) OWA-Winner with a nonincreasing OWA. The reason is that 1-best-OWA-Winner with approval-based utilities is, in essence, another name for the MaxCover problem, and if P (cid:21)= NP, then (1 − 1e ) is approximation upper bound for MaxCover [27]. We omit the exact details of the connection between MaxCover and 1-best-OWA-Winner and instead we point the readers to the work of Skowron and Faliszewski [54]who discuss this point in detail (we mention that they refer to what we call 1-best-OWA-Winner as winner determination for Chamberlin–Courant’s voting rule).For OWAs that are not nonincreasing, it seems that we cannot even hope for a (1 − 1e )-approximation algorithm. There are two arguments to support this belief. First, such OWAs yield utility functions that are not necessarily submodular and, so, it is impossible to apply the result of Nemhauser et al. [46]. As an example, we show that 2-med-OWA yields a utility function that is not submodular.eExample 5. Let us consider a single agent, two sets of items W = {c, d} and W2-med-OWA α. The utilities of the agent over the items a, b, c, and d are equal to 10, 9, 2, and 1, respectively. We get:(cid:10) = {b, c, d} (of course W ⊂ W(cid:10)), and ut(W ∪ {a}) − uαuαut(W ) = 2 − 1 = 1,uαut(W(cid:10) ∪ {a}) − uαut(W(cid:10)) = 9 − 2 = 7.That is, uαfor a and b to be 1, and for c and d to be 0.ut is not submodular. Indeed, this example works even for approval-based utilities: it suffices to set the utilities 204P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216Second, it is quite plausible that there are no constant-factor approximation algorithms for many not-nonincreasing OWAs. As an example, let us consider the case of families of OWAs with the following structure: their first entries are zeros followed by some nonzero entry at a sufficiently early position. If there were a good approximation algorithm for winner determination under such OWAs, then there would be a good approximation algorithm for the Densest-K-Subgraphproblem, which seems unlikely.Definition 14. In a Densest-k-Subgraph problem we are given an undirected graph G = (V , E) and a positive integer K . We ask for a subgraph S with K vertices with the maximal number of edges.Theorem 15. Fix some integer (cid:7), (cid:7) ≥ 2. Let α be a family of OWAs such that each OWA in the family (for at least (cid:7) numbers) has 0s on positions 1 through (cid:7) − 1, and has a nonzero value on the (cid:7)’th position. If there is a polynomial-time x(n)-approximation algorithm for α-OWA-Winner then there is a polynomial-time x(n)-approximation algorithm for the Densest-k-Subgraph problem.We should mention that Theorem 15 holds for a somewhat more general class of OWAs than stated explicitly. The proof relies on the fact that the first entry of the OWA is zero and that after the first non-zero entry of the OWA there are still K − 1 positions, where K is the parameter from the input Densest-K-Subset instance.Proof of Theorem 15. Let I be an instance of the Densest-K-Subgraph problem with graph G = (V , E) and positive in-of α-OWA-Winner, where the set of agents N is E, the set of items is teger K . From I we construct an instance IA = V ∪ {d1, . . . , d(cid:7)−2} (or V if (cid:7) = 2), and we seek a winner set of size K + (cid:7) − 2. Agents utilities are set as follows: For each agent e and each item d j , 1 ≤ j ≤ (cid:7) − 2, the utility of e for d j is 1. If e is an edge in G than connects vertices uand v then agent e’s utility for u and v is 1 and is 0 for the remaining items from V .(cid:10)(cid:10)It is easy too see that the items d1, . . . , d(cid:7)−2 all belong to every optimal solution for I. It is also easy to see that in each optimal solution the utility of each agent e is nonzero (and exactly equal to α(cid:7), the (cid:7)-th entry of the OWA α used) if and only if both items corresponding to the vertices connected by e are included in the solution. Thus the total utility of every optimal solution for Iis equal to α(cid:7) times the number of edges that connect any two vertices corresponding to the items from the solution.Let A be a polynomial-time x(n)-approximation algorithm for α-OWA-Winner. If A, returns a solution S for Iwith none-zero utility, then the items d1, . . . , d(cid:7)−2 all belong to S. Let us take the vertices corresponding to the items S \{d1, . . . , d(cid:7)−2}. The number of the edges connecting these vertices is equal to the total utility of S divided by α(cid:7). Thus, from x(n)-approximation solution for Iwe can extract an x(n)-approximation solution for I . This completes the proof. (cid:2)(cid:10)(cid:10)(cid:10)It seems that the Densest-k-Subgraph is not easy to approximate. Khot [36] ruled out the existence of a PTAS for the problem under standard complexity-theoretic assumptions, Bhaskara et al. [9] showed polynomial integrality gap, Raghaven-dra and Steurer [52] and Alon et al. [2] proved that there is no polynomial-time constant approximation under non-standard assumptions. Finally, the best approximation algorithm for the problem that we know of, due to Bhaskara et al. [8], has ap-proximation ratio O (n1/4+(cid:9) ), where n is the number of vertices in the input graph.As a further evidence that OWAs that are not nonincreasing are particularly hard to deal with from the point of view of approximation algorithms, we show that for an extreme example of an OWA family, i.e., for the K -med OWAs, there is a very strong hardness-of-approximation result. We start from the following graph problem.Definition 16. In the Maximum Edge Biclique Problem (MEBP) we are given a balanced bipartite graph (U ∪ V , E) where U ∪ V is the set of vertices ((cid:23)U (cid:23) = (cid:23)V (cid:23)) and E is the set of edges (there are edges only between the vertices from U and V ). We ask for a biclique (i.e., a subgraph S, such that every vertex from U ∩ S is connected with every vertex from V ∩ S) with as many edges as possible.(cid:8)According to Feige and Kogan [28], there exists a constant c such that there is no polynomial (2calgorithm for MEBP unless for some (cid:9) we have 3-SAT ∈ DTIME(2n3/4+(cid:9)for 3-SAT exists. For our argument it is more convenient to define and use the following variant of MEBP.lg n/n)-approximation ). Currently it seems unlikely that such an algorithm Definition 17. In MEBP-V we are given the same input as in MEBP and a positive integer K . We ask for a biclique S such that (cid:23)S ∩ V (cid:23) = K and S contains as many edges as possible.Lemma 18. There exists a constant c such that there is no polynomial-time (2cfor some (cid:9) we have 3-SAT ∈ DTIME(2n3/4+(cid:9)).(cid:8)lg n/n)-approximation algorithm for MEBP-V unless Proof. For the sake of contradiction, let us assume that there exists a constant c and a polynomial-time (2clg n/n)-appro-ximation algorithm A for MEBP-V. By running A for every value of K ranging from 1 to (cid:23)V (cid:23), we obtain a polynomial-time lg n/n)-approximation algorithm for MEBP. This stays in contradiction with the result of Feige and Kogan [28]. (cid:2)(2c(cid:8)(cid:8)P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216205Theorem 19. There exists a constant c such that there is no polynomial-time (2cOWA-Winner unless for some (cid:9) we have 3-SAT ∈ DTIME(2n3/4+(cid:9)).(cid:8)(cid:8)lg n/n)-approximation algorithm for K -med-(cid:10)lg n/n)-approximation algorithm A for K -med-Proof. Let us assume that there is a constant c and a polynomial-time (2cOWA-Winner. We will show that we can use A to solve instances of MEBP-V with the same approximation ratio. By Lemma 18, this will prove our theorem.Let I be an instance of MEBP-V with bipartite graph G = (U ∪ V , E) and positive integer K . From I we construct an of K -med-OWA-Winner in the following way. We let the set of agents N be U , the set of items A be V , and instance Iwe seek a winner set of size K . The utility of agent u from item v is equal to 1 if and only if u and v are connected in G; . Let S be a otherwise it is 0. Now we note that there is a one-to-one correspondence between the solutions for I and for I(cid:10)solution for I with x edges: S ∩ V is also a solution for Iwith the utility x. All the agents from U with non-zero utilities, together with S, form a biclique with K x edges. Thus, from lg n/n)-approximation solution for I . This completes the the (2cproof. (cid:2)with the utility at least equal to x/K . Let S be a solution for Ilg n/n)-approximation solution for Iwe can extract a (2c(cid:8)(cid:8)(cid:10)(cid:10)(cid:10)As a corollary of the above proof, we also have that Hurwicz[λ]-OWA-Winner is NP-hard (through an almost identical proof, but with a certain dummy candidate added, that gets utility 1 from everyone, and with the size of the winner set extended by 1).Corollary 20. Hurwicz[λ]-OWA-Winner is NP-hard.The reader may wonder why for the case of Hurwicz[λ] OWA we only obtain NP-hardness and not inapproximability. The reason is that due to the added dummy candidate it is easy to find a winner set with nonnegligible utility. In fact, this is a general property of the Hurwicz[λ] OWA and we show an approximation algorithm for it with a constant approximation ratio. This shows that even for OWAs that are not nonincreasing it is sometimes possible to find positive approximation results (though later we will argue that this approximation is not fully satisfying).Proposition 21. Let A be a β-approximation algorithm for 1-best-OWA-Winner. A is a λ · β-approximation algorithm for Hurwicz[λ]-OWA-Winner.Proof. Let us consider some instance I H of Hurwicz[λ]-OWA-Winner, where the goal is to pick a set of K items. We construct an instance I 1 that is identical to I H , but for the 1-best-OWA, and we run algorithm A on I 1. The algorithm outputs some set W = {w 1, . . . , w K } (a β-approximate solution for I 1). We claim that W is a λβ-approximate solution for I H .Let W H = {w H1 , . . . , w H↓first note that the following holds (recall the (cid:7)x} be an optimal solution for I H and let W 1 = {w 1notation for sorted sequences):K1, . . . , w 1K} be an optimal solution for I 1. We uHurwicz[λ]ut(W H ) =(cid:9)n(cid:2)λui=1↓i,w H1+ (1 − λ)u(cid:10)≤n(cid:2)i=1↓i,w HKu↓i,w H1≤n(cid:2)i=1u↓i,w 11= u1-bestut(W 1).In effect, we have that u1-bestit holds that:ut(W 1) ≥ uHurwicz[λ]ut(W H ). Now, it is easy to verify that for W (or, in fact, for any set of K items) uHurwicz[λ]ut(W ) =n(cid:2)(cid:6)i=1λu↓i,w 1+ (1 − λ)u(cid:7)↓i,w K≥ λn(cid:2)i=1u↓i,w 1= λu1-bestut(W ).Finally, combining these two inequalities and the fact that W is a β-approximate solution for 1-bestOWA-Winner, we get:uHurwicz[λ](W ) ≥ λu1-bestututThis completes the proof. (cid:2)(W ) ≥ λβu1-bestut(W 1) ≥ λβuHurwicz[λ]ut(W H ).By using Algorithm 1 in the general case, and the PTAS of Skowron et al. [55] for 1-best-OWA-Winner with Borda-based utilities, we get the following corollary.Corollary 22. (1) There is an algorithm that for Hurwicz[λ]-OWA-Winner with no restrictions on the utility functions achieves ap-proximation ratio λ(1 − 1e ). (2) For each positive (cid:9), there is an algorithm that for Hurwicz[λ]-OWA-Winner for the case of Borda-based utilities achieves approximation ration λ(1 − (cid:9)).206P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216Nonetheless, Corollary 22 has a bitter-sweet taste. In essence, it says that instead of using Hurwicz[λ] OWAs, we might as well use 1-best OWAs. If one wanted to use Hurwicz[λ] OWAs for some important reason, then our approximation result would not be sufficient. Yet, from a different perspective, one could interpret Corollary 22 as suggesting that such an important reason is unlikely to exist (for large values of λ).Nonetheless, the idea of using a simpler OWA instead of a more complex one can lead to quite intriguing results. Based on this approach, below we show a PTAS for OWA-Winner for a family OWAs that are similar to K -best OWAs (this restriction is necessary to defeat the relation with the MaxCover problem which precludes arbitrarily good approximation algorithms).Theorem 23. Consider a nonincreasing OWA α, α = (cid:5)α1, . . . , αK (cid:6). Let I be an instance for α-OWA-Winner (where we seek a winner set of size K ). An optimal solution for the same instance but with K -best-OWA is a (Ki=1 αi)/(K α1)-approximate solution for I .(cid:3)∗Proof. Let I be the instance of α-OWA-Winner described in the statement of the theorem, let Wbe one of its optimal solution, and let W be an optimal solution for the same instance, but with the K -best-OWA. Note that W is also an optimal solution for the K -number constant OWA β = (cid:5)α1, . . . , α1(cid:6). We claim that the following inequalities hold (uαut is defined with respect to the instance I and u(cid:3)βut is defined with respect to instance I with β as the OWA):(cid:3)Ki=1 αiK α1The second inequality holds because W is an optimal solution for I with OWA β. To see why the first and the third inequalities hold, let us focus on some agent i. The third inequality is simpler and so we prove it first.Ki=1 αiK α1Ki=1 αiK α1uαut(W ) ≥βut(W ) ≥uαut(Wβut(W) ≥(cid:3)),∗1, . . . , u∗Let ugets from Wutility under β, (cid:3)∗k be the utilities, in the nonincreasing order, that agent i has for the items in Wunder α is (cid:3)∗Ki=1 α1ui .. Thus the utility that i∗i . Since for each i, 1 ≤ i ≤ K , we have αi ≤ α1, i’s utility under α is less or equal to i’s Ki=1 αi uWe now prove the first inequality. Let u1, . . . , u K be the utilities, in the nonincreasing order, that agent i has for the uu∗∗∗items in W . Our goal is to show that:α1u1 + · · · + αK u K ≥(cid:3)Ki=1 αiK α1α1u1 + · · · +(cid:3)Ki=1 αiK α1α1u K =(cid:3)Ki=1 αiKu1 + · · · +(cid:3)Ki=1 αiKu K .This inequality is equivalent toK α1u1 + · · · + K αK u K ≥K(cid:2)i=1αi u1 + · · · +K(cid:2)i=1αi u K ,which itself is equivalent to(cid:3)u1(K α1 −Ki=1 αi) + · · · + u K (K αK −(cid:3)Ki=1 αi) ≥ 0.We can rewrite the left-hand side of this inequality as:(cid:3)(cid:3)(u1 − u2)(K α1 −+ (u K −1 − u K )((cid:3)Ki=1 αi) + (u2 − u3)(K α1 + K α2 − 2(cid:3)(cid:3)K −1i=1 αi) + u K (j=1 K α j − (K − 1)KKi=1 αi) + · · · +(cid:3)Kj=1 K α j − KKi=1 αi).We claim that each summand in this expression is nonnegative. Since u1, . . . , u K is a nonincreasing sequence of nonnegative utilities, we have that for each j, 1 ≤ j ≤ K − 1, u j − u j+1 is nonnegative, and so is u K . Now fix some t, 1 ≤ t ≤ K . We have:(cid:3)tj=1 K α j − t(cid:3)Ki=1 αi =(cid:3)tj=1(K − t)α j − tK(cid:2)≥ t(K − t)αt − t(cid:3)Ki=t+1 αiαi ≥ t(K − t)αt − t(K − t)αt = 0This completes the proof. (cid:2)i=t+1As a consequence of this theorem, we immediately get the following result.Theorem 24. Let f : N → N be a function computable in polynomial-time with respect to the value of its argument, such that f (K )is o(K ). There is a PTAS for (K − f (K ))-best-OWA-Winner.P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216207Algorithm 2: An algorithm for nonincreasing OWAs where at most first (cid:7) entries are nonzero, for the case of (β, γ )-non-finicky utilities.Notation:(cid:10) ← a map giving the number of free slots per agent; at first, for each agent i we have (cid:10)[i] = (cid:7).rank( j, a) = (cid:23){b ∈ A : u j,b > u j,a}(cid:23) gives the rank of item a according to agent i.x ← γ m;S ← ∅;for i ← 1 to K do(cid:23){ j | (cid:10)( j) > 0 ∧ rank( j, a) < x}(cid:23);a ← argmaxa∈ A\Sforeach j ∈ { j | (cid:10)( j) > 0} doif rank( j, a) < x then(cid:10)[ j] ← (cid:10)[ j] − 1;S ← S ∪ {a};return SProof. Let us fix some (cid:9), 0 < (cid:9) < 1. We give a polynomial time (cid:9)-approximation algorithm for (K − f (K ))-best-OWA-Winner. Since f (K ) is o(K ), there is some value K(cid:9) such that for each K ≥ K(cid:9) it holds that K − f (K )≥ (cid:9). If for our input instance we are to find a winner set of size K , K ≥ K(cid:9) , then we simply run the polynomial-time algorithm for K -best-OWA. Otherwise, we seek a winner set of size at most K(cid:9) and we try all subsets of items of size K . Since, in this case, K is bounded by a constant, our algorithm runs in polynomial time. (cid:2)KWhile Theorem 24 suffers from the same criticism as Corollary 22, it is still a very interesting result, especially when contrasted with Theorem 15. Theorem 24 says that there is a PTAS for α-OWA-Winner for OWA family (cid:5)1, . . . , 1, 0(cid:6), whereas Theorem 15 suggests that it is unlikely that there is a constant-factor approximation algorithm for α-OWA-Winner with OWA family (cid:5)0, 1, . . . , 1(cid:6). Even though these two OWA families seem very similar, the fact that one is nonincreasing and the other one is not makes a huge difference in terms of approximability of OWA-Winner.7. Approximation: non-finicky utilitiesOne of the greatest sources of hardness of the OWA-Winner problem, that we rely on in our proofs, is that the agents may have very high utilities for some very small subsets of items, and very low utilities for the remaining ones (consider, e.g., approval-based utilities where each agent approves of relatively few items). In such cases, intuitively, either we find a perfect solution or some of the agents have to be very badly off. On the other hand, for Borda-based utilities when some agent does not get his or her top items, it is still possible to provide the agent with not-much-worse ones; the utilities decrease linearly. Indeed, Skowron et al. [55] used this observation to give a PTAS for the Chamberlin–Courant rule. Here we give a strong generalization of their result that applies to non-finicky utilities and OWA families that include, for each fixed k, k-median, k-best, and geometric progression OWAs.We focus on the case of OWA vectors where only some constant number (cid:7) of top positions are nonzero, and on (β, γ )-non-finicky utilities (β, γ ∈ [0, 1]). In this case, Algorithm 2 (a generalization of an algorithm of Skowron et al. [55]) achieves a good approximation ratio. The idea behind the algorithm is as follows: To pick K items, it proceeds in K itera-tions and in each iteration it introduces one new item into the winner set. For each agent it considers the top x = γ m items with the highest utilities and in a given iteration it picks an item a that maximizes the number of agents that (1) rank aamong items with the highest x utilities, and (2) still have “free slots” (an agent has a free slot if among the so-far-selected winners, fewer than (cid:7) have utilities among the x highest ones for this agent). Before we prove that our algorithm works well, let us consider the following example.Example 6. Let the items and agents be the same as in Example 3 (just as in Example 4 for Algorithm 1). Let K = 3 and let the OWA vector be α = (2, 1, 0). We have (cid:7) = 2 nonzero entries in α. We treat the agents utilities as (0.8, 0.5)-non-finicky ones. Before we execute the algorithm, it is convenient to compute the rank function4:a1 a2 a3 a4 a5 a6rank(1, ·) 0rank(2, ·) 3rank(3, ·) 2045250304420503Now we can start to execute the algorithm. We have x = γ m = 3 and initially each agent has two free slots. In the first iteration, the algorithm can pick either a1, a3, or a5, because for each of them there are two agents for whom their rank is 4 Note that here the best rank is 0 and not 1 (using rank 1 for the top item is the more common approach). This simplifies our technical discussion.208P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216below 3, while for each other item there is only one agent that ranks it below 3. Let us assume that the algorithm picks a1 (see the table below for information regarding the slots of the agents after each iteration). In the second iteration all the agents still have free slots so the algorithm can pick either a3 or a5. Let us assume it picks a3. In effect, Agents 1 and 3 no longer have free slots and in the final iteration the algorithm picks one of the items to which Agent 2 assigns rank lower than 3, i.e., one of a4, a5, and a6. Let us assume it picks a4. Below we show the contents of agents’ slots after executing each iteration.Agent 1Agent 2Agent 3Slot 1 Slot 2 Slot 1 Slot 2 Slot 1 Slot 2After iteration 1 a1After iteration 2 a1After iteration 3 a1−a3a3−−a4−−−a1a1a1−a3a3The algorithm outputs set S = {a1, a3, a4}. It is interesting that this is a different set than the one returned by Algorithm 1(see Example 4), which returned set W = {a1, a4, a5}. This latter set is slightly better than the one output by Algorithm 2; it achieves aggregated utility 84 as opposed to 83.Theorem 25. Fix a positive integer (cid:7) and let α be a nonincreasing OWA where at most first (cid:7) entries are nonzero. If the agents have (β, γ )-non-finicky utilities, with γ m ≥ (cid:7), then Algorithm 2 is a polynomial-time β(1 − exp(− γ K(cid:7) ))-approximation algorithm for α-OWA-Winner.Proof. Consider an instance I of α-OWA-Winner, with n agents, m items, and where we seek a winner set of size K . Let x = γ m. We use an OWA where an agent’s total utility from a winner set W depends on this agent’s utilities for his or her top (cid:7) items from W . We introduce the notion of each agent’s free slots as follows. Initially, each agent has (cid:7) free slots. Whenever an agent j has a free slot and the algorithm selects an item a such that for agent j item a is among x items with highest utilities, we say that a starts occupying one free slot of j. After such an item is selected, j has one free slot less.ii(cid:5)(cid:5)1 − x(cid:7)m. Let F i denote the set of agents that have free slots after iteration i. There are at least niLet ni denote the total number of free slots of all the agents after the i-th iteration of the algorithm. Naturally, we have (cid:4). Indeed, the inequality is true for i = 0. Let us assume that it is true n0 = (cid:7)n. We show by induction that ni ≤ (cid:7)n (cid:4)for some i: ni ≤ (cid:7)n 1 − x(cid:7) such (cid:7)magents. For j ∈ F i , let S( j) be the number of j’s top-x items that were not included in the solution yet. If j ∈ F i has s free slots, then S( j) = (x − (cid:7) + s). Thus we have that (cid:7) . By the pigeonhole principle, there exists (cid:7)m agents from F i . Thus, after the (i + 1)-th iteration of the algorithm, the an item that is among top-x items for at least ni xtotal number of free slots is at most:1 − x(cid:7)mni+1 ≤ ni − ni x(cid:7)mS( j) ≥ ni + (x − (cid:7)) ni(cid:7)1 − x(cid:7)m(cid:7)(i+1)≤ (cid:7)n= ni= ni xj∈F i(cid:3)(cid:6)(cid:7)(cid:6).The number of free slots after the last iteration is at most:nK ≤ (cid:7)n(cid:5)(cid:4)1 − x(cid:7)m(cid:4)(cid:5)K= (cid:7)n1 − γ(cid:7)K≤ (cid:7)n exp− γ K(cid:7)(cid:6)(cid:7).Thus the number of occupied slots is at least (cid:7)n − (cid:7)n exp(− γ Kagent at least βumax, where umax is the maximal utility that any of the agents assigns to an item.(cid:7) ). Every item that occupies an agent’s slot has utility for this It remains to assess the OWA coefficients for the utilities of the items in the solution. If for some agent i the utility of such that ui,a(cid:10) ≥ ui,aan item a, ui,a, is taken with coefficient αp (p > 1), then in the solution there must be an item aand ui,a(cid:10) is taken with coefficient αp−1. So there must exist at least 1(cid:7) )) occurrences of the items whose utilities are taken with coefficient α1. By repeating this reasoning for the remaining occurrences of the items from the solution, since α is nonincreasing, we get that the total utility of the agents is at least βumax((cid:7)n − (cid:7)n exp(− γ K(cid:7)i=1 αi =(cid:3)βumaxn(1 − exp(− γ K(cid:7)i=1 αi , we get our approximation ratio. (cid:2)(cid:7)i=1 αi . Since no solution has utility higher than numax(cid:7) ((cid:7)n − (cid:7)n exp(− γ K(cid:7) )) 1(cid:7)(cid:3)(cid:3)(cid:10)(cid:7) )) As a consequence, we get very good approximation guarantees for the case of Borda-based utilities. Recall that W(·) is Lambert’s W function, that is, a function that for x ∈ R+ satisfies the equation x = W(x)eW(x) (and, thus, W(x) is O (log(x))).Corollary 26. Fix a positive integer (cid:7) and let α be a nonincreasing OWA where at most first (cid:7) entries are nonzero. Assume that agents (cid:6)(cid:4)1 − 2W(K /(cid:7))(cid:7)have Borda-based utilities. With x = mW K , Algorithm 2 is a -approximation algorithm for α-OWA-Winner.(cid:7)(cid:5)K /(cid:7)K(cid:7)(cid:6)(cid:7)Proof. Let us note that the Borda utilities are lowing approximation ratio (the last equality follows by the definition of W(x)):K /(cid:7)1 − W(K /(cid:7)), W(K /(cid:7))K /(cid:7)–non-finicky. By applying Theorem 25, we get the fol-P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216209Fig. 2. The approximation ratios of Algorithm 2 for a nonincreasing OWA with at most (cid:7) top coefficients greater than zero, for (β, γ )-non-finicky utilities. The lines in Figures (a) and (b) depict the relations between the parameters β and γ that, for a given fixed ratio K(cid:7) , lead to the same approximation bound. The lines in Figures (c) and (d) depict the relations between the parameter γ and the ratio K /(cid:7) that, for a given fixed value of the parameter β lead to the same approximation bound.approx. ratio ===(cid:9)(cid:9)(cid:9)1 − W(K /(cid:7))K /(cid:7)1 − W(K /(cid:7))K /(cid:7)1 − W(K /(cid:7))K /(cid:7)This completes the proof. (cid:2)⎛(cid:10)⎛(cid:6)⎝1 − exp⎝−(cid:7)⎞⎞⎠⎠KW(K /(cid:7))K /(cid:7)(cid:7)(cid:10)(cid:10) (cid:9)(1 − exp (−W(K /(cid:7))))(cid:9)1 − 2W(K /(cid:7))1 − W(K /(cid:7))K /(cid:7)K /(cid:7)≥(cid:10)(cid:10).The next corollary follows directly from Theorem 25 by noting that in the case of m items and k-approval utilities (i.e., for the case where each agent approves of exactly k items) we have (1, km )-non-finicky utilities.Corollary 27. Fix a positive integer (cid:7) and let α be a nonincreasing OWA where at most first (cid:7) entries are nonzero. Assume the k-approval (cid:6)1 − exputilities of the agents. Algorithm 2 is a -approximation algorithm for α-OWA-Winner.(cid:7)(cid:7)(cid:6)− kK(cid:7)mApproximation ratio of Algorithm 2 is particularly good when K is large compared to (cid:7). This, indeed, is the most in-teresting case because for small K we can find optimal solutions by brute-force search (combining these two approaches leads to a PTAS; see Theorem 30 below). Nevertheless, Algorithm 2 often gives a satisfactory approximation guarantees by itself. Fig. 2 depicts the classes of non-finicky utilities for which, for a fixed ratio K /(cid:7), Algorithm 2 guarantees appropriate approximation ratios: Parts (a) and (b) of the figure show the relation that β and γ have to satisfy to obtain a particular approximation ratio, for a given value K(cid:7) that has to be satisfied for Algorithm 2 to achieve a particular approximation ratio under (1, γ )-non-finicky utilities, and part (d) shows the same relation for (0.8, γ )-non-finicky utilities.(cid:7) . Part (c) shows the relation between the value of γ and the ratio KTheorem 25 can be generalized to the case of OWAs that are not nonincreasing (achieving a slightly weaker approxima-tion ratio).210P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216Lemma 28. Consider a set N of n agents and a set A of m items, where the agents rank the items from the most preferred ones to the least preferred ones. Let K , p, and t be some positive integers such that K ≤ m, p ≤ K , and t ≤ p. Let x = γp m. There is a (cid:7)(cid:7)(cid:6)(cid:6)− γ K1 − expagents that polynomial-time algorithm that finds a collection C of up to K /p items such that there are at least n p2each rank at least one member of C between positions (t − 1)x + 1 and tx.Proof. To see that this lemma holds, it suffices to analyze the proof of Theorem 25 for 1-best-OWA, with (1, γutilities, seeking winner set of size Kpositions 1 through x, or x + 1 through 2x, or any other segment of x positions in the agents’ preference orders. (cid:2)p )-non-finicky p . We note that the proof works equally well irrespectively of whether we consider the Theorem 29. Fix a positive integer (cid:7) and let α be a family of OWAs that have nonzero entries on top (cid:7) positions only. There is a polynomial-time β–approximation algorithm for α-OWA-Winner for the case of (β, γ )–non-finicky utilities.1 − (cid:7) exp(cid:7)(cid:7)(cid:6)(cid:6)− γ K(cid:7)2Proof. Consider an input instance I of α-OWA-Winner with the set N = [n] of agents, with the set A of m items, and where we seek winner set of size K . Let α = (cid:5)α1, . . . , α(cid:7), 0, . . . , 0(cid:6) be the OWA used in this instance. We set x = γ(cid:7)(cid:7)(cid:6)− γ K(cid:7)2(cid:6)1 − expOur algorithm proceeds in (cid:7) iterations. We set N(0) = N and n(0) = n. In the i-th iteration, 1 ≤ i ≤ (cid:7), the algorithm operates as follows: Using the algorithm from Lemma 28, for p = (cid:7), we find a set A(i) of up to K /(cid:7) items such that at least n(i−1)of the agents from the set N(i−1) each rank at least one of these items among positions (i − 1)x + 1, . . . , ix of their preference orders. (Strictly speaking, in this setting agents do not have preference orders but utility values. For each agent, we form his or her preference order by sorting the items in the decreasing order of the utilities, breaking the ties arbitrarily.) We let N(i) be the set of these agents and we set n(i) = (cid:23)N(i)(cid:23). Finally, we set (cid:7)W =i=1 A(i) and return W as the set of winners (it is easy to see that W contains at most K items; if K contains fewer than K items then we supplement it with K − (cid:23)W (cid:23) arbitrarily chosen ones).By the construction of our algorithm, each of the agents from the set N((cid:7)) ranks at least (cid:7) items from the set W on positions no worse than (cid:7)x = γ m. Thus each such an agent assigns to each such an item utility at least equal to βumax . Consequently, the total utility that the agents from the set N derive from the solution W is at least:(cid:15)(cid:7) m.(cid:16)(cid:17)(cid:7)(cid:2)i=1n((cid:7))αiβumax.This is so, because for each i, 1 ≤ i ≤ (cid:7), each of the agents in the set N((cid:7)) derives utility αiβumax from the item that she ranks as i’th best among the items from W .By construction of our algorithm, we have:(cid:9)(cid:9)(cid:9)(cid:10)(cid:10)(cid:7)n((cid:7)) ≥ n1 − exp≥ n1 − (cid:7) exp− γ K(cid:7)2(cid:9)− γ K(cid:7)2(cid:10)(cid:10).Thus, the total utility obtained by the agents is at least:(cid:9)uαut(W ) ≥ n1 − (cid:7) exp(cid:9)− γ K(cid:7)2(cid:10)(cid:10) (cid:16)(cid:7)(cid:2)(cid:17)αiβumax.i=1Now, since the maximum possible total utility of all the agents is upper-bounded by n(algorithm has approximation ratio βcomplete. (cid:2)(cid:7)i=1 αi)umax, we have that our . It is clear that it runs in polynomial time, and so the proof is 1 − (cid:7) exp− γ K(cid:7)2(cid:7)(cid:7)(cid:6)(cid:6)(cid:3)Based on this result, we can obtain a PTAS for the analogous setting.Theorem 30. Fix a value (cid:7) and let α be a family of OWAs that have nonzero values on top (cid:7) positions only. There is a PTAS for α-OWA-Winner for the case of (i) Borda-based utilities, and (ii) (1, γ )–non-finicky utilities (assuming γ is a constant).Proof. For every (cid:9) we show a polynomial-time algorithm with approximation ratio (1 − (cid:9)). Consider some (cid:9), 0 ≤ (cid:9) ≤ 1. < (cid:9). For each instance I of α-OWA-WinnerThere exists a value K(cid:9) such that for each K > K(cid:9) it holds that (cid:7) expwhere we seek winner set of size at least K(cid:9) , we run the algorithm from Theorem 29. For the remaining cases, where the winner-set size is bounded by a constant, we use a brute-force algorithm. (cid:2)(cid:6)− γ K(cid:7)2(cid:7)We can also obtain a PTAS for OWA-Winner for geometric progression OWAs for these classes of utilities. In essence, for geometric progression it suffices to focus on a small number of top entries in the OWA vector. This is quite a useful result: Some of our scenarios from Section 3 yield OWAs of this form.P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216211Corollary 31. Fix a value p > 1. There is a PTAS for gprog[p]-OWA-Winner for the case of (i) Borda-based utilities, and (ii) (1, γ )–non-finicky utilities (assuming γ is a constant).Proof. Our goal is to show an algorithm that for a given value (cid:9), (cid:9) > 0, in polynomial time outputs a (1 − (cid:9))-approximate solution for gprog[p]-OWA-Winner. Let us fix the value of such (cid:9). The idea of our proof is to truncate the vector describing gprog[p] OWA to consider only some (cid:7) nonzero items on the top, where (cid:7) depends on (cid:9) only, and to run the algorithm from Theorem 30.For a given number t, let St be the sum of the first t coefficients of gprog[p]. We have:St = gprog[p]t + gprog[p]t−1 + · · · + gprog[p]1We fix (cid:7) = (cid:26)logp( 2= p K −t + p K −(t−1) + · · · + p K −1 = p K −t pt − 1p − 1(cid:9) )(cid:27). Now, consider the ratio r = S(cid:7)/S K :> p K −(cid:7) p(cid:7) − 1= 1 − 1p(cid:7)p K= p K −(cid:7) p(cid:7) − 1p K − 1.r = S(cid:7)S K≥ 1 −1plogp ( 2(cid:9) )= 1 − (cid:9)2.Intuitively, the above inequality says that 1 − (cid:9)coefficients.2 fraction of the total weight of gprog[p] OWA is concentrated in its first (cid:7)Let gprog[p]|(cid:7) denote the OWA obtained from gprog[p] by replacing all coefficients with indices greater than (cid:7) with 0. Let A be a (1 − (cid:9)2 )-approximation algorithm for gprog[p]|(cid:7)-OWA-Winner. From Theorem 30 we know that such an algo-rithm exists. It is easy to see that A is a (1 − (cid:9))-approximation algorithm for gprog[p]-OWA-Winner. Indeed, the utility ↓under gprog[p]|(cid:7) for every K -element set W is close to the utility of W under gprog[p] (recall the (cid:7)xnotation for sorted (cid:3)(cid:7)j=1 gprog[p] j u≤sequences; the inequality in the second line holds because for each i we have ):↓i,w j(cid:6) (cid:7)(cid:2)↓i,w jn(cid:2)K(cid:2)n(cid:2)K(cid:2)(cid:3)(cid:7)gprog[p]utu(W ) =gprog[p] j u↓i,w j≤gprog[p] ju↓i,w j+↓(cid:7)g=1 gprog[p]g ui,wh(cid:3)(cid:7)j=1 gprog[p] ju(cid:3)(cid:7)g=1 gprog[p]g(cid:6)gprog[p]h(cid:7)gprog[p] ju↓i,w j1 + (cid:9)2i=1n(cid:2)j=1(cid:7)(cid:2)gprog[p] j u↓i,w ji=1(cid:16)1 +(cid:3)j=1h=(cid:7)+1 gprog[p]hK(cid:3)(cid:7)g=1 gprog[p]g(cid:17)≤h=(cid:7)+1n(cid:2)(cid:7)(cid:2)i=1j=1==(cid:7)i=1j=1(cid:6)1 + (cid:9)2gprog[p]|(cid:7)utu(W ).From which we get that for every W :gprog[p]|(cid:7)utu(W ) ≥ (1 − (cid:9)2)ugprog[p]ut(W ).This completes the proof because algorithm A returns a (1 − (cid:9)(1 − (cid:9)2 ) ≥ 1 − (cid:9). (cid:2)2 )(1 − (cid:9)2 )-approximate solution for gprog[p]|(cid:7)-OWA-Winner and At first it is tempting to think that the above results are only interesting for the case of Borda-based utilities. Yet, recently Faliszewski et al. [26, Theorem 13] have shown some natural settings with approval-based utilities where they apply.To summarize, in this section we have shown that in spite of the intrinsic hardness of the OWA-Winner problem, there are very natural classes of utilities and OWA vectors for which the problem can be solved quite accurately and very efficiently.8. Related workIn this section we give a more detailed overview of various research lines that are related to our work.Weighing intrinsic values by coefficients that are a function of their rank in a list is of course not new. Ordered Weighted Average operators have been used extensively in multicriteria decision making and, to a lesser extent, in social choice [34]; the vector of values then corresponds to criteria (in MCDM) or to agents (in social choice). Also, rank-dependent expected utility (RDEU) [51] is a well-known research stream in decision theory, whose starting point is the construction of models that explain Allais’ paradox: given a set of possible consequences of an act, the contribution of a possible consequence on the agent’s RDEU is a function of its probability and of its rank in the list of consequences ordered by decreasing probability. While these three research streams use ranks to modify the contribution of a criterion, an agent, or a possible consequence, in our setting they modify the contribution of items, our final aim being to select an optimal set of items. Since we do not select criteria, agents or possible consequences, it is not obvious how our results can apply to these three aforementioned research fields.212P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216There are three recent pieces of research that use OWA operators in the context of voting and that call for detailed discussion. We describe them in the chronological order.Goldsmith et al. [31] define rank-dependent scoring rules. Under standard positional scoring rules, the score of a candidate is the sum of the scores it obtains from all the voters, where the score that a candidate obtains from a given voter depends only on his or her rank in this voter’s preference order. Rank-dependent scoring rules generalize this idea as follows. Instead of simply summing up the scores of a given candidate, they apply an OWA operator to the list of the scores that he or she got from the voters. Thus a rank-dependent scoring rule is defined by a scoring vector (a function mapping ranks to scores) and an OWA operator. Here, OWAs replace the sum operator for aggregating the scores coming from different agents, while in our setting they aggregate the scores of different objects for a fixed agent.Amanatidis et al. [3] define a family of committee election rules (which can also be used for multiple referenda) based on the following principle. Each voter specifies his or her preferred committee and each voter’s disutility for a committee is given by the Hamming distance between the committee and the voter’s preferred one. Then the disutilities of the voters are aggregated using an OWA operator. The committee with the lowest aggregated disutility wins. (In the particular case of the sum operator, the obtained rule is the Bloc committee election rule, while in the case of the minimum, the obtained rule is the Minimax Approval Voting rule; see the work of Brams et al. [12] for the definition and other works for computational discussions [39,15,45].) They obtain a number of hardness and approximability results, which cannot be compared to ours because in their work, again, OWAs are used for aggregating scores coming from different agents.Finally, the work of Elkind and Ismaïli [23] is probably the closest one to ours. They study multiwinner elections and they use OWAs to define generalizations of the Chamberlin–Courant rule but, once again, they use OWAs to aggregate the utilities for a committee coming from different agents. The standard utilitarian Chamberlin–Courant rule sums up the scores that a committee gets from different voters, whereas the egalitarian variant considers the minimum score a committee receives. They generalize this idea by using an OWA operator, in effect obtaining a spectrum of rules between the utilitarian and the egalitarian variants. They obtain a number of complexity results, both in the general case and in specific cases corresponding to domain restrictions. For the same reason as in the preceding paragraphs, their results are incomparable to ours.In the three pieces of research discussed above, OWA operators aggregate scores or utilities given to candidates or committees by different agents, which is very different from our use of OWAs. Nonetheless, there exists a high-level common point between the four approaches. In all cases the rules corresponding to the sum of scores, and to either the minimum or the maximum of scores, were already known and seen as interesting, but somewhat extreme. In all cases, OWAs give rise to an interpolation between these extremities, leading to rules and approaches that are likely to be interesting in practice.Let us now move on to other related works and other related streams of research. Several known settings are recov-ered as particular cases of our general model. In particular, this applies to the case of the Chamberlin–Courant proportional representation rule [18], to the case of Proportional Approval Voting [37], and to (variants of) the budgeted social choice model [41,49,42]. Computational complexity of the Chamberlin–Courant rule was first studied by Procaccia et al. [50], its pa-rameterized complexity was analyzed by Betzler et al. [7], and the complexity under restricted domains was studied by Bet-zler et al. [7], Skowron et al. [56], Yu et al. [59], and Clearwater et al. [20]. The first approximation algorithm was proposed by Lu and Boutilier [41]. The results on approximability were then extended in several directions by Skowron et al. [55,54]. Proportional Approval Voting was studied computationally and axiomatically by Aziz et al. [5,4] and by Elkind and Lackner [24].Group recommender systems (see, e.g., the work of O’Connor et al. [47] for one of the first approaches, and the sur-veys of Jameson and Smyth [33] and of Masthoff [43]) aim at recommending sets or sequences of items (such as a set of television programs or a sequence of songs) to a group of users, based on preferences of all group members. Two main-stream approaches have been developed (see the survey of Jameson and Smyth [33]): those based on the construction of an ‘average user’ whose preferences are built by aggregating the preferences of the individuals in the group, and those based on producing individual recommendations and aggregating them. Unlike these, our approach (which recommends sets, but not yet sequences) proceeds in a single step, and enables a fine-tuning of the contribution of an item to each user’s utility depending on the number of better items (for that user) in the list.The facility location problem (fl) is closely related to 1-best-OWA-Winner. In fl, however, the goal is to minimize the dissatisfaction of the agents instead of maximizing their utility (satisfaction). Although, as far as exact solutions are concerned both formulations are equivalent, there is a significant difference in the quality of approximation (the difference between approximation guarantees for the maximization and minimization formulations of 1-best-OWA-Winner for Borda utilities is described by Skowron et al. [55]). Some works focus on general dissatisfaction functions [29], but most of the results were established for dissatisfactions corresponding to the distances, and thus satisfying the triangle inequality [32,53]. Also, in fl the goal is to minimize the dissatisfaction of the worst-off agent (the egalitarian view). The utilitarian version of the problem is called k-median [32]. The parameterized complexity of the problem was analyzed by Fellows and Fernau [29]. The approximation algorithms include those of Chukad and Williamson [19], those of Jain and Vazirani [32], and those of Shmoys et al. [53]. Interestingly, a local-search algorithm (which, to the best of our knowledge, is the best known approximation algorithm for the capacitated version of fl [19]) is also a 12 -approximation algorithm for maximizing nondecreasing submodular functions [46], and thus for OWA-Winner with non-decreasing utility functions. The problem of facility location for the case where the facilities are vulnerable to failures has been considered by Swamy and Shmoys [57], who studied a setting which closely resembles applying the (cid:7)-best OWA operators in the original facility location andP. Skowron et al. / Artificial Intelligence 241 (2016) 191–216213k-median problems. We conclude that it would be interesting to compare the algorithms for fl and k-median with different algorithms for OWA-Winner on real preference data (e.g., on the data from PrefLib, collected by Mattei and Walsh [44]).9. SummaryOur contribution is threefold. First, we have proposed a new model for the selection of a collective sets of items. This model appears to be very general, encompasses several known frameworks, and can be applied to various domains such as committee elections, group recommendation, and beyond. Second, we have investigated the computational feasibility of the model, depending on the various assumptions that we can make about the agents’ utilities and the choice of the OWA vector. Table 1 in Section 4 gives a summary of our results. We note that many of these results directly related to the OWA families that appear in the settings from Section 3 that were our motivating force. Third, we have defined non-finicky utilities that model settings where agents are relatively “easy to please.” We believe that non-finicky utilities may find applications far beyond our framework.Some of our results look negative, while some others (especially in the case of non-finicky utilities) are on the positive side. However, the way the results should be interpreted depends on the application domain. In political elections and other high-stake domains, it is appealing to view an approximation algorithm as a new, full-fledged voting rule, which may enjoy many desirable properties (on this point see the works of Caragiannis et al. [16,17], Skowron et al. [55], and Elkind et al. [22]). In particular, we have shown that the election system Sequential Proportional Approval Voting, SPAV, (which has been known long before the computational complexity theory was developed) is actually a greedy approximation algorithm for the Proportional Approval Voting (PAV) election rule, which is an interesting result per se. (The reader may also wish to consult the paper of Aziz et al. [5] regarding the complexity of approval-based multiwinner rules.) Yet, it is arguably not reasonable to use an approximation algorithm (even with a good performance guarantee) if it is viewed as nothing more than an approximation algorithm of another rule, and it is even less reasonable to use a heuristic search algorithm (when there is no good approximation algorithm); this implies that using this model for political elections is feasible when the number of candidates is small enough, but can become problematic beyond that (unless we define the approximation algorithm to be the new voting rule, as said above). On the other hand, in low-stake application domains (which can include some committee elections, and of course group recommender systems), it may become perfectly reasonable, and in that case even NP-hardness and inapproximability results should not discourage us from using the model. For these domains, our negative results only tell us that we may have to resort to heuristic search algorithms. Developing such algorithm is one of the interesting directions for further research.Our work leads to many other open problems. In particular, one might want to strengthen our approximation algorithms, provide algorithms for more general cases, provide more inapproximability results. Among these problems, a particularly interesting one regards the approximability of OWA-Winner for the arithmetic progression family of OWAs. For this case, our set of results is very limited. In particular, can one provide a PTAS for arithmetic-progression OWAs under non-finicky (in particular Borda-based) utilities? Can one do so for K2 -median OWAs? Can one do so for the harmonic OWA, used in Proportional Approval Voting?2 -best OWAs/ KAcknowledgementsThe authors were supported by NCN grant 2013/09/N/ST6/03661 and by AGH University grant 11.11.230.124 (statutory research). Piotr Skowron was in part supported by ERC-StG 639945. Jérôme Lang thanks the ANR project CoCoRICo-CoDec. This work was partially supported by COST Action IC1205 on Computational Social Choice.Appendix A. Proof of Theorem 7Theorem 7. (K − 1)-best-OWA-Winner is NP-hard even for Borda-based utilities.Proof. As before, it is clear that the problem is in an NP and we only show NP-hardness. We give a reduction from Ver-texCover (see the previous proof for an exact definition). Let I be an instance of the VertexCover problem that consists of undirected graph G = (V , E), where V = {v 1, . . . , vm} and E = {e1, . . . , en}, and positive integer K (without loss of generality, we assume that K ≥ 3).of (K − 1)-best-OWA-Winner with Borda-based utilities as follows. We setFrom I , we construct an instance Ix = 4n(m + 2)(K + 4)(cid:10)and we let the set of items be A = V ∪ {d1, d2} ∪ H , where H = {h1, . . . , hx} and {d1, d2} are sets of dummy items that we need to build appropriate structure of the utility profile. To build the set of agents N, we sety = (n(x + m + 2)2 + 1)and we set N = N E ∪ N1 ∪ . . . ∪ N y , where N E = {e1} contains pairs of agents that correspond to the edges of n, e2nG, and N1, . . . , N y contain pairs of agents needed for the construction. Specifically, every set Ni , 1 ≤ i ≤ y, consists of two agents, f 1i . We refer to the agents in the set N1 ∪ · · · ∪ N y as the “dummy agents.”i and f 21, . . . , e11, e2214P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216We describe agents’ utilities through their preference orders. The agents in the set N E have the following preference orders. Let ei ∈ E be an edge of the graph that connects vertices v i,1 and v i,2. Agents e1i and e2i have preference orders:e1ie2i: d1 (cid:12) d2 (cid:12) V − {v i,1, v i,2} (cid:12) H (cid:12) {v i,1, v i,2},: d1 (cid:12) d2 (cid:12) {v i,1, v i,2} (cid:12) H (cid:12) V − {v i,1, v i,2}.(When we put a set of items in a preference order, this means that this set can be replaced by these items in an arbitrary, i , 1 ≤ i ≤ y, has the same, fixed, preference order:easily computable, way.) Each agent f 1f 1i: d1 (cid:12) v 1 (cid:12) v 2 · · · (cid:12) vm (cid:12) d2 (cid:12) h1 · · · (cid:12) hx.Similarly, each agent f 2i , 1 ≤ i ≤ y, has preference order:: d2 (cid:12) vm (cid:12) vm−1 · · · (cid:12) v 1 (cid:12) d1 (cid:12) h1 · · · (cid:12) hx.f 2iFinally, in the instance I(cid:10)we seek a set of winners of size K + 2. This means that we use (K + 1)-best-OWA to compute the aggregated utility than an agent derives from a set of winners.This concludes the description of the reduction and it is clear that it is polynomial-time computable. Before we prove . We claim that W does not contain that it is correct, let us make several observations. Let W be some optimal solution for Iany of the items from H . For the sake of contradiction, assume that some h ∈ H belongs to W . Since d1 and d2 are ranked ahead of h in every preference order (and in some preference orders d1 is first and d2 is second, so their utility cannot be ignored by the (K + 1)-best-OWA), we infer that d1 and d2 must belong to W as well (otherwise we would obtain higher utility by replacing h with one of d1 and d2 in W ). Let v be some item from V that does not belong to W . If we replace h with v in W then the total utility of the dummy agents increases by at least 2 y. Why is this so? Consider some pair Ni , 1 ≤ i ≤ y of dummy agents. Item h is either the lowest ranked member of W for both f 1i or for neither. We consider these cases:i and f 2(cid:10)(cid:10)• h is the lowest-ranked winner for both the agents in Ni . Replacing h with v means that either some other member hof H ∩ W becomes the lowest ranked winner for both f 1i and d1 becomes the lowest ranked winner for f 2i obtain utility higher by at least one from v than from the item that became the new lowest-ranked winner. Thus, the total utility yielded by these two agents increases by at least two.i , or d2 becomes the lowest ranked winner for f 1i . In either case, both f 1i and f 2i and f 2• h is not the lowest-ranked winner for either agent in Ni . In this case, since both agents rank v higher thank h and replacing h with v does not change the lowest-ranked winner for either of the agents, their total utility also increases at least by two.Since there are y pairs of agents, the total utility increases by at least 2 y. Since the total utility of the agents from N E is lower than 2n(x + m + 2)2 < 2 y, we see that after the change the total utility of all the agents increases. Thus, we get a contradiction and we conclude that W does not contain any of the agents from H .Next, we claim that both d1 and d2 belong to W . We give a detailed argument for d1 only; the case of d2 is analogous. For the sake of contradiction, assume that d1 does not belong to W . Let vk be an item from W such for each v j , j < k, v ji , 1 ≤ i ≤ y, vk is the lowest-ranked winner from W . Thus, if does not belong to W . By our assumptions, for each agent f 2we replace vk with d1 in W , then the utility of each agent f 2i will not change, whereas the utility of each agent f 1i will increase. Further, the utility of each agent from N E will increase. Thus, by replacing vk with d1, we can increase the total utility of the agents. We reach a contradiction and we conclude that d1 must have been a member of W . An analogous argument shows that d2 belongs to W as well.As the result of the above reasoning, we infer that each set of winners consists of d1, d2, and K items from V . Whenever both d1 and d2 are included in the set of winners and neither item from H is, the total utility of the dummy agents is the same, irrespective which items from V are selected. With these observations, we now show that the answer for the inputVertexCover instance is “yes” if and only if there is a size-(K + 2) winner set for Ithat for agents in the set N E yields total utility at least nx(K + 4).(⇒) Let us assume that there exists a cover C for I , that is, a set C of K vertices such that each edge is incident to at least one vertex from C . We show that winner set W = C ∪ {d1, d2} gives total utility of every two agents e1i and e2i , 1 ≤ i ≤ n, equal to at least x(K + 4). Pick some arbitrary i, 1 ≤ i ≤ n, and let v i,1 and v i,2 be the two vertices connected i obtains utility at least x for each item in {v i,1, v i,2, d1, d2} (at least by edge ei . If both v i,1 and v i,2 belong to C , then e2i obtains utility at least x for each item in W − {v i,1, v i,2}. This gives utility at least utility 4x in total). On the other hand, e1K x. Altogether, both agents get utility at least x(K + 4). If only one of the items v i,1 and v i,2, say v i,1, belongs to C , then i obtains utility at least (K + 1)x (at least i obtains utility at least 3x (at least x for every item from {v i,1, d1, d2}), and e1e22x from items d1 and d2, and at least (K − 1)x from the K − 1 members of C that e1i ranks on the top positions). Again, both agents get utility at least x(K + 4). Thus the total utility of the agents in N E in the optimal solution must be at least nx(K + 4).(cid:10)P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216215(cid:10)ii and e2(⇐) Assume that W is some optimal solution for Iand that for the agents in N E it yields utility at least nx(K + 4). By previous discussion, we know that W contains d1, d2, and K members of V . We set C = W \ {d1, d2}. Let us fix some arbitrary i, 1 ≤ i ≤ n. Let v i,1 and v i,2 be the two vertices connected by edge ei . We observe that under W , the total utility is at most (x + m + 2)(K + 4) + mK . To see this, let z be the number of items from {v i,1, v i,2} that are of agents e1included in C and note that (1) for the upper bound we can disregard the OWA that we use, (2) there are x + m + 2 items and so we can upper-bound the utility derived from each item by x + m + 2, (3) altogether, the items from W are ranked on at most K + 2 − z top-(m + 2) positions by e1i (we upper-bound their total utility by (K + 2 − z)(x + m + 2)) and at most 2 + zi (we upper-bound their total utility by (2 + z)(x + m + 2)), and (4) the items from W are ranked top-(m + 2) positions by e2i (we upper-bound their total utility by zm) and on K − z bottom-m positions by e2on at most z bottom-m positions by e1i(we upper-bound their total utility by (K − z)m). When we sum up these upper bounds, we get (x + m + 2)(K + 4) + mK . However, for our argument we also need an upper bound on the total utility of e1i under the assumption that neither v i,1 nor v i,2 belongs to C . In this case, the upper bound is (x + m + 2)(K + 3) + mK . We obtain it in the same way as the previous bound, except that we note that due to our (K + 1)-best-OWA, the utility derived by e1i can take into account at most K + 1 agents from the top-(m + 2) positions of the preference order of e1i .Based on these upper bounds, we will now show that if the total utility derived from W by the agents in N E is nx(K + 4), then C must correspond to a cover of all the edges of G. To this end, consider a situation where there is at least one edge ei such that neither of the vertices that it connects belongs to C . By using our upper bounds, in this case the total utility of the agents from N E can be at most:i and e2(K + 3)(x + m + 2) + (n − 1)(K + 4)(x + m + 2) + nmK= (x + m + 2)(K + 3 + (n − 1)(K + 4)) + nmK= (x + m + 2)(n(K + 4) − 1) + nmK= xn(K + 4) + n(m + 2)(K + 4) − (x + m + 2) + nmK= xn(K + 4) + 0.25x − (x + m + 2) + nmK< xn(K + 4)(The last two lines follow directly by the definition of x.) So, from the assumption that C is not a solution for I , we obtain that the total utility of the agents in N E must be lower than nx(K + 4), which contradicts our assumption. Thus C is a correct solution for I and, so, I is a yes-instance of VertexCover. This completes the proof. (cid:2)References[1] P. Alimonti, V. Kann, Some APX-completeness results for cubic graphs, Theor. Comput. Sci. 237 (1–2) (2000) 123–134.[2] N. Alon, S. Arora, R. Manokaran, D. Moshkovitz, O. Weinstein, Inapproximability of densest k-subgraph from average case hardness, Technical report, 2011.[3] G. Amanatidis, N. Barrot, J. Lang, E. Markakis, B. Ries, Multiple referenda and multiwinner elections using hamming distances: complexity and manip-ulability, in: Proceedings of AAMAS-2015, May 2015, pp. 715–723.[4] H. Aziz, M. Brill, V. Conitzer, E. Elkind, R. Freeman, T. Walsh, Justified representation in approval-based committee voting, in: Proceedings of AAAI-2015, 2015, pp. 784–790.AAMAS-2015, May 2015, pp. 107–115.[5] H. Aziz, S. Gaspers, J. Gudmundsson, S. Mackenzie, N. Mattei, T. Walsh, Computational aspects of multi-winner approval voting, in: Proceedings of [6] N. Bansal, M. Sviridenko, The Santa Claus problem, in: Proceedings of STOC-2006, ACM Press, July 2006, pp. 31–40.[7] N. Betzler, A. Slinko, J. Uhlmann, On the computation of fully proportional representation, J. Artif. Intell. Res. 47 (1) (May 2013) 475–519.[8] A. Bhaskara, M. Charikar, E. Chlamtac, U. Feige, A. Vijayaraghavan, Detecting high log-densities: an o(n1/4) approximation for densest k-subgraph, in: Proceedings of STOC-2010, 2010, pp. 201–210.Proceedings of SODA-2012, 2012, pp. 388–405.[9] A. Bhaskara, M. Charikar, A. Vijayaraghavan, V. Guruswami, Y. Zhou, Polynomial integrality gaps for strong SDP relaxations of densest k-subgraph, in: [10] S. Bouveret, J. Lang, A general elicitation-free protocol for allocating indivisible goods, in: Proceedings of IJCAI-2011, 2011, pp. 73–78.[11] S. Brams, M. Kilgour, Satisfaction approval voting, MPRA paper, University Library of Munich, Germany, 2010.[12] S. Brams, M. Kilgour, R. Sanver, A minimax procedure for negotiating multilateral treaties, in: R. Avenhaus, W. Zartman (Eds.), Diplomacy Games, Springer, 2007, pp. 265–282.[13] S. Brams, D. King, Efficient fair division help the worst off or avoid envy?, Ration. Soc. 17 (4) (2005) 387–421.[14] S. Brams, A. Taylor, The Win–Win Solution: Guaranteeing Fair Shares to Everybody, W.W. Norton & Company, 2000.[15] J. Byrka, K. Sornat, PTAS for minimax approval voting, in: Proceedings of WINE-14, Dec. 2014, pp. 203–217.[16] I. Caragiannis, J. Covey, M. Feldman, C. Homan, C. Kaklamanis, N. Karanikolas, A. Procaccia, J. Rosenschein, On the approximability of Dodgson and [17] I. Caragiannis, C. Kaklamanis, N. Karanikolas, A. Procaccia, Socially desirable approximations for Dodgson’s voting rule, ACM Trans. Algorithms 10 (2014) [18] B. Chamberlin, P. Courant, Representative deliberations and representative decisions: proportional representation and the Borda rule, Am. Polit. Sci. Young elections, Artif. Intell. 187 (2012) 31–51.(Paper #6).Rev. 77 (3) (1983) 718–733.[19] F. Chudak, D.P. Williamson, Improved approximation algorithms for capacitated facility location problems, Math. Program. 102 (2) (Mar. 2005) 207–222.[20] A. Clearwater, C. Puppe, A. Slinko, Generalizing the single-crossing property on lines and trees to intermediate preferences on median graphs, in: Proceedings of IJCAI-2015, July 2015, pp. 32–38.[21] B. Debord, An axiomatic characterization of Borda’s k-choice function, Soc. Choice Welf. 9 (4) (1992) 337–343.216P. Skowron et al. / Artificial Intelligence 241 (2016) 191–216[22] E. Elkind, P. Faliszewski, P. Skowron, A. Slinko, Properties of multiwinner voting rules, in: Proceedings of AAMAS-2014, May 2014, pp. 53–60.[23] E. Elkind, A. Ismaïli, OWA-based extensions of the Chamberlin–Courant rule, in: Proceedings of the Fourth International Conference on Algorithmic Decision Theory, Sept. 2015, pp. 486–502.[24] E. Elkind, M. Lackner, Structure in dichotomous preferences, in: Proceedings of IJCAI-2015, July 2015, pp. 2019–2025.[25] P. Faliszewski, P. Skowron, A. Slinko, N. Talmon, Committee scoring rules: axiomatic classification and hierarchy, in: Proceedings of IJCAI-2016, 2016.[26] P. Faliszewski, P. Skowron, A. Slinko, N. Talmon, Multiwinner analogues of the plurality rule: axiomatic and algorithmic views, in: Proceedings of AAAI-2016, 2016, pp. 482–488.[27] U. Feige, A threshold of ln n for approximating set cover, J. ACM 45 (4) (1998) 634–652.[28] U. Feige, S. Kogan, Hardness of approximation of the balanced complete bipartite subgraph problem, Technical report, 2004.[29] M.R. Fellows, H. Fernau, Facility location problems: a parameterized view, Discrete Appl. Math. 159 (11) (July 2011) 1118–1130.[30] M. Garey, D. Johnson, Computers and Intractability: A Guide to the Theory of NP-Completeness, W.H. Freeman and Company, 1979.[31] J. Goldsmith, J. Lang, N. Mattei, P. Perny, Voting with rank dependent scoring rules, in: Proceedings of AAAI-14, 2014, pp. 698–704.[32] K. Jain, V. Vazirani, Approximation algorithms for metric facility location and k-median problems using the primal-dual schema and Lagrangian relax-ation, J. ACM 48 (2) (Mar. 2001) 274–296.[33] A. Jameson, B. Smyth, Recommendation to groups, in: The Adaptive Web, 2007, pp. 596–627.[34] J. Kacprzyk, H. Nurmi, S. Zadrozny, The role of the OWA operators as a unification tool for the representation of collective choice sets, in: Recent Developments in the Ordered Weighted Averaging Operators, 2011, pp. 149–166.[35] T. Kalinowski, N. Narodytska, T. Walsh, A social welfare optimal sequential allocation procedure, in: Proceedings of IJCAI-13, 2013, pp. 227–233.[36] S. Khot, Ruling out PTAS for graph min-bisection, dense k-subgraph, and bipartite clique, SIAM J. Comput. 36 (2006) 1025–1071.[37] M. Kilgour, Approval balloting for multi-winner elections, in: J. Laslier, R. Sanver (Eds.), Handbook on Approval Voting, Springer, 2010, pp. 105–124.[38] R. Ladner, On the structure of polynomial time reducibility, J. ACM 22 (1) (1975) 155–171.[39] R. LeGrand, E. Markakis, A. Mehta, Some results on approximating the minimax solution in approval voting, in: Proceedings of AAMAS-2007, May 2007, pp. 1193–1195.[40] T. Lu, C. Boutilier, The unavailable candidate model: a decision-theoretic view of social choice, in: Proceedings of ACM-EC-2010, 2010, pp. 263–274.[41] T. Lu, C. Boutilier, Budgeted social choice: from consensus to personalized decision making, in: Proceedings of IJCAI-2011, 2011, pp. 280–286, see also the version that appeared in COMSOC-10.Handbook, Springer, 2010, pp. 677–702.[42] T. Lu, C. Boutilier, Value-directed compression of large-scale assignment problems, in: Proceedings of AAAI-2015, 2015, pp. 1182–1190.[43] J. Masthoff, Group recommender systems: combining individual models, in: F. Ricci, L. Rokach, B. Shapira, P. Kantor (Eds.), Recommender Systems [44] N. Mattei, T. Walsh, Preflib: a library for preferences http://www.preflib.org, in: ADT, in: Lecture Notes in Computer Science, vol. 8176, Springer, 2013, pp. 259–270.[45] N. Misra, A. Nabeel, H. Singh, On the parameterized complexity of minimax approval voting, in: Proceedings of AAMAS-2015, May 2015, pp. 97–105.[46] G. Nemhauser, L. Wolsey, M. Fisher, An analysis of approximations for maximizing submodular set functions, Math. Program. 14 (1) (December 1978) 265–294.[47] M. O’Connor, D. Cosley, J. Konstan, J. Riedl, Polylens: a recommender system for groups of user, in: Proceedings of ECSCW-2010, 2001, pp. 199–218.[48] W. Ogryczak, T. ´Sliwi ´nski, On solving linear programs with the ordered weighted averaging objective, Eur. J. Oper. Res. 148 (1) (2003) 80–91.[49] J. Oren, B. Lucier, Online (budgeted) social choice, in: Proceedings of AAAI-2014, AAAI Press, July 2014, pp. 1456–1462.[50] A. Procaccia, J. Rosenschein, A. Zohar, On the complexity of achieving proportional representation, Soc. Choice Welf. 30 (3) (April 2008) 353–362.[51] J. Quiggin, Generalized Expected Utility Theory: The Rank-Dependent Model, Kluwer Academic Publishers, 1993.[52] P. Raghavendra, D. Steurer, Graph expansion and the unique games conjecture, in: Proceedings of STOC-2010, 2010, pp. 755–764.[53] D. Shmoys, É. Tardos, K. Aardal, Approximation algorithms for facility location problems (extended abstract), in: Proceedings of STOC-1997, 1997, [54] P. Skowron, P. Faliszewski, Approximating the MaxCover problem with bounded frequencies in FPT time, in: Proceedings of AAAI-2015, Jan. 2015.[55] P. Skowron, P. Faliszewski, A. Slinko, Achieving fully proportional representation: approximability results, Artif. Intell. 222 (2015) 67–103.[56] P. Skowron, L. Yu, P. Faliszewski, E. Elkind, The complexity of fully proportional representation for single-crossing electorates, Theor. Comput. Sci. 569 [57] C. Swamy, D.B. Shmoys, Fault-tolerant facility location, ACM Trans. Algorithms 4 (4) (2008).[58] R. Yager, On ordered weighted averaging aggregation operators in multicriteria decisionmaking, IEEE Trans. Syst. Man Cybern. 18 (1) (1988) 183–190.[59] L. Yu, H. Chan, E. Elkind, Multiwinner elections under preferences that are single-peaked on a tree, in: Proceedings of IJCAI-2013, Aug. 2013, pp. 265–274.(2015) 43–57.pp. 425–431.