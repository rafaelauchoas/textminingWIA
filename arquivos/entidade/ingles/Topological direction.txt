Artificial Intelligence 78 (1995) 355-395 Artificial Intelligence Topological direction-giving and visual navigation in large environments Il-Pyung Park*, John R. Kender Department of Computer Science, Columbia University, New York, NY 10027, USA Received September 1993; revised January 1995 Abstract In this paper, we propose and investigate a new model for robot navigation in large unstructured environments. Current models, which depend on metric information, have to deal with inherent mechanical and sensory errors. Instead we supply the navigator with qualitative information. Our model consists of two parts, a map-maker and a navigator. Given a source and a goal, the map- maker derives a navigational path based on the topological relationships between landmarks. A navigational path is generated as a combination of “parkway” and “trajectory” paths, both of which are abstractions of the real world into topological data structures. Traversing within a parkway enables the navigator to follow landmarks that are continuously visible. Traversing on a trajectory enables the navigator to move reliably into featureless space, based on local headings formed by visible landmarks that are robust to positional and orientational errors. Reliability measures of parkway and trajectory traversals are defined by appropriate error models that account for the sensory errors of the navigator, the population of neighboring objects, and the rotational and translational errors of the navigator. The optimal path is further abstracted into a “custom map”, which consists of a list of symbolic directional instructions, the vocabulary of which is defined by our environmental description language. Based on the custom map generated by the map-maker, the navigating robot looks for events that are characterized by spatial properties of the environment. The map-maker and the navigator are implemented using two cameras, an IBM 7575 robot arm, and a PIPE (Pipelined Image Processing Engine.) * Corresponding author. Current address: Department of Computer Science, New York Institute of Technology, 1855 Broadway, New York, NY 10023, USA. E-mail: ip@faculty.nyit.edu. 0004-3702/95/.¶09.50 @ 1995 Elsevier Science B.V. All rights reserved SSDIOOO4-3702(95)00030-5 356 I.-P Purk. J.R. Kender/Artificial Intelligence 78 (1995) 355-395 1. Introduction We are interested in navigation is regarded as large if at any instant [ 131. An environment to index into a global coordinate is unstructured in a small subset of the whole terrain. Similar definitions in a large and unstructured environment. An envi- the sensory and motor capacities of the can is no way to use object the objects the navigating the navigating system. This may be because if there the trees in a forest), or because (such as a compass), or because the availability of global coordinates is not (like sensor that even ronment agent reside navigating be found in identification themselves agent has no global referencing agent has no global map (so useful). are easily confusable in a small structured environment is necessary that is useful for the navigator that of navigation is mostly qualitative in a large unstructured Navigation than tools information soning high-level we mean symbolic direction-specifying the appropriate navigational until you see an object on your right” “go true north for 200 meters and turn 40 degrees important concepts Without verification landmarks that it has reached are also useful, because in giving directions to be able to handle ambiguities invariants rather than quantitative. High-level information [ 13,14,24,26]. requires different environment and The rea- and errors; by that can be used to capture in your present heading instruction, whereas to the east” is not. One of the most is the use of landmarks. in a large environment them, direction giving would be very hard for the navigator, as would be the between its destination. The relationships topological information. For example, “continue is a high-level directional these also tend to be insensitive to metric errors. navigation in a large the use of a sequence of qualitative, the navigator’s efforts, that minimizes is errors. Part of this paper for topological In this paper, we provide a new framework Our method emphasizes environment. unstructured high-level, directional landmark-based and prevents, detects, and sometimes motivated by questions (2) what visual features of a landmark are important, recognize a landmark efficiently, how to detect errors, and (6) how to recover from them. In attempting questions, we suggest a dichotomy of roles in the navigation giver (the map-maker) instructions corrects navigational I (4) how to describe a landmark simple direction and a relatively landmarks, concerning follower to the navigator, (3) what sensors are to be used to (5) these system: a powerful direction (the navigator). to answer such as (1) what is a good landmark, environmental can be categorized because Our qualitative and the navigator, is preplanned subsystem. the navigator does not absolutely what the navigator’s appropriate algorithms, recovering occasionally It is also reactive because sensors are supposed the navigator from detected errors. navigation system, which consists of the map-maker as both a preplanned and reactive type [ 221. It the desired path of the navigator is computed by the map-maker specify the “custom map” provided by the map-maker the desired path, but rather “describes” for locally to look for. Then, based on the activation of usually progressing, but reacts to the environment, ’ This problem has been addressed by Kender et al. in [ IO], complexity of selecting an optimal set of sensors. Even NP-complete problem. in which is presented the computational in one-dimensional space, this proves to be an I.-F? Park, J.R. KenderIArtifcial Intelligence 78 (1995) 355-395 357 2. Related work The efficiency and the accuracy of navigation depends on the depth of the spatial knowledge of the navigating agent. Kuipers introduced the concept of “cognitive maps” to model the proficiency of the navigator, in which spatial knowledge consists of a hierarchy of “sensorimotor”, “procedural”, “topological”, and “metrical” knowledge. Since the assimilation of knowledge proceeds from the lowest (sensorimotor) to the highest (metrical), it is generally more accurate for people to navigate by using lower- level knowledge, such as exact pictures of landmarks [ 12,271. However, experiments done by Chase [4] indicate that novice drivers prefer topo- logically easier roads (major highways) over metrically shorter but more complicated roads (lesser known streets). Landmarks play an important role for these drivers; even with only a partial knowledge of the environment, they are able to navigate reliably by using visual cues. Streeter et al. [ 231 reported that people with low spatial abilities rely heavily on landmarks for navigation, and suggested that future route generating systems should produce a “customized” route that meets the individual’s background skills. Cognitive map research, some of which have been described above, generally supports the importance of landmarks and their interconnection topology in navigation. The navigating agent does not need to have a comprehensive knowledge of the en- vironment for a single navigational task. For example, in order to get to a church for a wedding, the directions given by the host are usually enough. Experiments done by Streeter et al. [ 241 showed that verbal directions, which are roughly equivalent to Kuipers’ procedural level in the cognitive map structure, are superior to the use of a more comprehensive global map. Riesbeck [ 211 asserted that the quality of directional instructions should be judged by the feasibility of the navigator to follow them, as opposed to how accurate they are in terms of the actual environmental geometry. Sim- ilarly, Mark’s [ 17,181 experiments support the relative usefulness of procedural and topological information over metric information. Traditional approaches to robot navigation require metric accuracy of the robot’s paths. These methods include the configuration space by Lozano-Perez [ 151, generalized cones by Brooks [2], the segmented model by Crowley [5], the grid-based model by Moravec and Elfes [ 191, and the convex cell model by Giralt et al. [ 81. Such traditional methods perform reasonably well only in small environments and fail in large unstructured environments [ 131. Metric information becomes inaccurate, due to the low mechanical accuracy and sensory errors [26] ; errors accumulate. Qualitative approaches to robot navigation include: the TOUR model of Kuipers [ 121, the NX Robot by Kuipers et al. [ 131, Qualnav by Levitt et al. [ 141, inexact navigation by Sutherland et al. [ 261, Dai et al.‘s “range-free navigation” [61, and the PV (Panoramic View) representation used by Zheng et al. 1291. Most of the work in qualitative navigation emphasizes the importance of landmarks. However, none provides a formal answer to the question “What is a landmark?‘, and they assume that landmarks can be readily identified by their intrinsic qualities. Otherwise, they use a generic definition of “distinctiveness” of features in the sensory readings to indicate landmarks. We argue that without criteria for defining and selecting good landmarks, topological navigation is not well formulated. In this paper, we present 358 I.-l? Purk, J.R. Kender/ArtiJciul Intelligence 78 (1995) 355-395 qualitative methods these selected using to define and select landmarks landmarks, and their relative juxtapositions. and we present means to navigate 3. Definitions and assumptions Our navigation is composed of two modules: a powerful direction giver (the system and a relatively map-maker) paths are precomputed jectories”. These are abstractions parkway travel by following one continuously ways are called invisible trajectories, represents an interconnection simple direction follower (the navigator). Navigational by the map-maker of the real world and are composed of “parkways” into topological and “tra- representations. A network of landmarks, where the navigator can to another. Paths between park- to move towards a currently landmark visible and they allow the navigator landmark based on the relative configuration of currently visible landmarks. The ultimate objective of the map-maker is to generate a “custom map”, consisting instructions, and error-free. to the that to find its way by executing custom map in a sequence. The vocabulary is a set of qualitative descriptions so that the navigator will be able each of these instructions instructions of directional destination of landmarks constitutes is assumed that can be easily and robustly processed by the navigator. The map-maker to be nearly omniscient the spatial coordinates of each object that exists. The map-maker also knows the sensor and processor instructions and the navigator map is given only source of directional absolute symbols. the custom map contains only directional the map-maker between one-time). This means that the custom of the journey, and that the navigator’s is the custom map. The custom map contains no and uses only small integers and few other that the navigator can handle. The communication (one-way, in the beginning limits of the navigator. Therefore, It sees the whole environment location or orientation is done off-line to the navigator information, and knows information The navigator’s capabilities are much more limited. Its view window represents size is very the extent of the landmark the navigator can “adjust” is located at approximately (SE, SW, NE, NW). However, to the environment, where the view window to its current position. * It has limited metric measurement relative its current view window, even though their accuracies are assumed small relative navigator’s vision capabilities within be low. For example, visible window the navigator instructions; the (x, y) coordinate of a landmark as part of the directional even if it did, the navigator, having no compass, odometer, or other means of positioning itself with respect The navigator select, custom map can be considered frame, would not be able to use it. to decide on its own what overall path it should the the thus it is totally dependent on the custom map that it is given. Therefore, intelligence. Table 1 summarizes its physical position so that the currently one of the four corners of the local view to give to for the map-maker to an external global reference enough as the navigator’s it is not possible is not intelligent to 2 This limitation is similar to that of the bug robot v,%h finite range vision in [ 16 1, where it is shown that, in some cases, increasing the range of vision of the navigator does not necessarily produce better results. I.-P Park, J.R. Kender/Art$cial Intelligence 78 (1995) 355-395 359 Table 1 Capabilities and limits of the map-maker and the navigator Map-maker Navigator Objective Visibility Metric ability Intelligence Memory Computing power Degrees of freedom Communication Generate a custom map Infinite Yes; exact Nearly omniscient Large Fast None needed Off-line Navigate using a custom map Limited to current view window Only within current view window; approximate Limited to interpreting the custom map Almost none Slow Two: x and y Off-line assumptions further explained below. that we make about the map-maker and the navigator, some of which are 3.1. The world, the map-maker; and the navigator We distinguish l The real world This is the three-dimensional three similar but subtly different perceptions of “the world”. rich: the map-maker perienced by both it is mathematically embedded the navigator: many such worlds consist between something relatively simpler. it is continuous, small objects. Therefore, we need and the navigator. This world as it exists and which is ex- is the real world and it has a distance measure, and objects to empty spaces into to be extraneous largely of the essentially this world to abstract in it can have finite extent. Much of this appears is done by the is, the l The world model of the map-maker The first level of abstraction and error-free, regions without is nearly omniscient as a collection of nodes which represent into a graph. That landmarks, map-maker, who connected world is conceived intervening objects that are navigable under by arcs which represent is the topology. Empty space, distance, and object certain constraints: this graph these can be, and are, considered by the (However, ignored. extent are generally map-maker when computing and paths.) The data structures “optimal” directions used in this level of abstraction are parkways and trajectories. The formal definitions of parkways and trajectories will be given in the next section. l The custom map The next level of abstraction occurs when municates visual This custom map contains the minimal needs in order to navigate, We assume and that the map-maker’s igator’s sensory endowment in an extremely (the view window), of the world is actually an advantage; usually, the better, since or remembered intelligent [ 241. Although more com- the map-maker in the form of a sequence of actions, ordered by the sequence of traversal. that the navigator that there is only one navigator, to a perfect model of the nav- the world small area this sensed, is minimized and there is almost no memory. However, the less that needs the cognitive navigators and error behavior. The navigator perceives is limited one-time) with the navigator amount of information limited way. Sensory load of the navigator to be communicated, and accompanying this one chooses can be modeled, near-omniscience to a relatively throughout landmarks, (one-way, extends range to 360 I.-l? Park, J.R. Kender/Arti&ial Intelligence 78 (1995) 355-395 ignore most of the world and its features for the sake of efficient map-making. The custom map 3 in its most simple case is represented in the form: (D, M)*, where D is a qualitative description which distinguishes objects, and M is the movement of the robot in the local robot coordinate established by using descriptions string of symbols. from its neighboring system landmark as the reference point. This sequence of into a short can be encoded very compactly and relative movements a landmark the chosen Our navigator robot has two degrees of freedom, in x and y. It is able to view a small looking straight down, perpendicular subarea of the environment, the z position of the navigator [ II]. For our experiments, we implemented robot arm with a CCD camera attached to the robot’s end effector. The navigation was the robot arm’s workspace. is fixed. Thus we are in a “level-helicopter world” as in the navigator with an IBM 7575 SCARA terrain to the environment; 3.2. The navigable world The navigational environment the current in size. There implementation two-dimensional. The navigational that we are interested in is a three-dimensional the effective environment they are spherical, such as marbles, and uniform world, of the navigator, due to its restriction of degrees terrain is visually uniform all over. Objects are scattered is to be in the spatial and topological problems is, an object can no longer be they are all the geometrical of the object relationships since there is no apparent global reference to rely on for the navigation. to doing navigation without an odometer, a compass, is although of freedom, makes itself is a flat surface whose background over this flat surface; no restriction on where the objects are placed, except that no objects are allowed placed on top of another. These two assumptions of the objects-that size, and that they are placed randomly-emphasize of doing vision and navigation described by its intrinsic identical. And in order to specify an object, objects must be considered to its neighboring there is no “natural” environmental frame. Further, In other words, this is equivalent or defined designed and movement. Most other navigational fortiori, areas. the large”. That such as shape, size, or color, since therefore be easier, but a in their more difficult to explore what can be done using very impoverished is therefore extreme, but intentionally the results of this model, particularly so-it identification, roadways. This abstraction “in attributes, they too can exploit environments will they are uniform structure sensing, In a more complicated world that has a variety of different objects, we can (and often in the left diagram of Fig. I, every extracted in the environment. This is shown on the right the world would be to use sensing humans do) still apply the same abstraction. For example, we see a distribution house or tree can be regarded as a point-like object, and the only information by the map-maker is its surface diagram of Fig. 1. But another way of abstracting to disambiguate types, using whatever categorizational of houses and trees. In the simplest the objects according form of abstraction, to their location ’ Later in this paper, we present a formal grammar of the custom map that includes trajectories and error recovery instructions. I.-f? Park, J.R. Kender/Art@cial Intelligence 78 (1995) 355-395 361 . . . . . . . . . . . Fig. I. A world consisting of trees and houses (left), and the corresponding dots world representation (right). . . . . . . . . . Fig. 2. A separation of the dots world according the navigator’s sensibility: only trees (left), or only houses (right). is available to the navigator- is shown they are used in Fig. 2. So, if there are features to filter the perceptions this produces a number of separate such “dots strategy that are sensible by the worlds”. This navigator, and the navigator. Then, each world becomes simpler, and relative relations become more reliably apparent type. In short, being able since it consists only of point-like objects of the corresponding in, but topological problems to distinguish remain; the extreme abstraction that any object to get around these problems under landmark the model we present addresses a potential objects makes a world easier of the map-maker for navigation. is considered 4. Parkways and trajectories for representing In this section, we describe two fundamental map-maker the interconnection and trajectories. They are graphs representing as well as some associated ronment traversal expected map path, enabling Trajectories provide parkways; no landmarks data structures, created and used by the topology of landmarks, called parkways of the envi- information the topological costs, such as the reliability of traversal and the of a custom landmarks. space between time. Parkways generally provide a major component the navigator the navigator with a way to navigate to travel by following continuously for most of a trajectory. the featureless are visible visible 362 1.-l? Purk. J.K. Kender/Artificict/ hfelligence 78 (1995) 355-395 4.1. Parkway dejinition only When location captures the (relative) the map-maker in size and shape. Therefore, the intrinsic quality of each object objects. As stated earlier, we assume the real world with its global sensor, it records all that objects are the positions of the populating is not useful identical for navigation; this world into a graph data structure of vertices and edges. Each vertex represents an object and each edge indicates a navigable path. There are many ways to decide whether or not in this graph are connected by an edge. In the most general case, two vertices in the same we define to be connected single view window. This is the central in the window can serve as the current “reference” in the the navigator can then move same window can serve as the current “goal” towards if the two objects can be viewed idea of the parkway concept: a given object (objects) two objects the goal, while keeping the goal continuously and another object is. The map-maker further abstracts landmark, landmark; algorithm component component. a connected By applying It is navigated the above definition to be such a connected from rock to rock: each landmark must be (visually) of connectedness, we can then generate discrete sets of connected components. We define like crossing a a parkway stream by hopping from reachable the previous one. The left diagram of Fig. 3 shows an example of the map-maker’s view of a randomly populated world of size 100 x 100 with 100 objects. The right diagram formed on the corresponding world for a navigator whose window shows the parkways size is IO x IO. The relative size of the view window in the lower left corner of the world. The arcs between objects that the objects are connected. That is, if there is a way to place the IO x IO window so that two objects are connected only visible both objects are simultaneously somewhat is shown indicate visible. [ 11 using The regions to the shade, way. When a new object corresponding note where a new object can be seen simultaneously existing parkway; unshaded ways. regions indicate is added to the environment, the spatial it is absorbed reach of each park- into the parkway is, the shaded regions de- by some current element of an indicate where new objects would start new park- if such a shading exists. That two objects in this model, however, To find the best path between is that a resulting path is a particularly shortest path algorithm (which will be detailed is explored and the costs are accumulated. The significance one for the navigator. Starting at the source, designated next node becomes visible; by definition, same time as the source node. The navigator this next node, without cannot accumulate; continues, landmark causes forward progress; landmark Exactly how easy it is to navigate within a parkway will depend on the complexity in the same parkway, we apply Dijkstra’s to the parkway graph, which also has recorded certain costs later 1. Having selected an object as the source node, the graph in the usual way specified by the algorithm. reliable so that the this next node can be seen at the then can proceed away from the source to the loss of visibility of this next node. Errors, therefore, usually seeks only what is already visible. As the navigator that is, each successive itself becomes a reference is relatively “easy”. and for the next step. Therefore, navigation within a parkway is identified and “sought”, then the sought landmark each successive it can position the navigator its window landmark in it. in Fig. 3 with various shades I.-P Park, J.R. Kender/Art@cial Intelligence 78 (1995) 355-395 363 I l-_-A .’ L Fig. 3. A randomly populated dots world (left) and the corresponding parkways (right), the reliability of the description Section 5. 4.2. Types of parkways language for identifying landmarks, which we define in In the previous subsection, we defined the parkway In this subsection, we introduce ever, depending on the definition of connectedness, types. “isolated” parkways. Other parkways (see Section 5). in the most general sense. How- there can be many different parkway the the “obvious” and two useful subclasses, are also possible, by using different descriptors 4.21. Obvious parkways If the number of objects within needs a qualitative way to describe be sought next by the navigator. This is a hard problem, and will be discussed detail in Section 5. However, window. to in more in the simplest case, there are only two objects in the view the view window to the navigator which of the objects (The case of just one object represents a “dead end”.) than two, the map-maker is intended is more We define an object to be an “obvious landmark’ landmark. For simplicity reference other than the current utility in making whenever landmark becomes visible window. 4 Thus each reference the navigator the largest amount of the world visible, we adopt the convention seeks a landmark, it does so by maneuvering in one of the four corners landmark in the environment in the implementation if it is the only object visible, and for that itself so that the (SE, SW, NE, or NW) of the view can have up to four obvious 4 Other definitions of connectedness are possible, depending on sensor of a helicopter with an oblique view of the world, that the reference world. landmark is in the lower middle of the view window: the connection can be that the navigator positions limitations. For example, in the case itself so the standard “windshield view” of the 364 I.-P Pm-k. J.R. Kender/Artijiciul Intelligence 78 (1995) 355-395 Fig. 4. The left diagram shows the original world with obvious landmarks illustrated in bigger circles. The right diagram shows corresponding obvious parkways. In the right diagram, the box in the lower left corner represents the relative size of the navigator’s view window. obvious landmarks landmark. The parkway formed landmarks, one for each corner position of the reference by connecting and for short we will refer to it as an “obvious parkway”. Note that unlike a general parkway, an obvious parkway the paths are not commutative: what is obvious abstraction apparent is a directed graph and therefore from one view point may not be obvious in reverse. Fig. 4 shows the although not of the original dots world of Fig. 3 into obvious parkways; in the arcs in the figure, the graph is directed. is called an “obvious landmark parkway”, 4.2.2. Isolated parkways A second special case of parkways is based on the concepts of landmark isolation. isolatedness is a robust to to qualitative navigation. Given a scene with one or As will be shown, sensor error, so it is well-suited more objects, humans often can identify “the most isolated” object. A detailed algorithm in a scene based on the mutual neighborhood concept to derive will be given We define in Section 5. the parkway based on landmark topological property the isolated landmark relatively invariant isolation the convention that the navigator itself so that the landmark becomes visible obvious parkway case, we adopt by positioning landmark its view window. This landmark formed by now may have up to one isolated and for short we such of the original dots will call world is also a directed graph, and that it is a superset of the obvious parkway, but a subset of the general parkway. is now the reference landmark per corner position. A parkway into isolated parkways. Note that an isolated parkway landmark parkway”, the abstraction it an “isolated parkway”. Fig. 5 shows in one of the corners of is called an “isolated landmark. Any such landmarks isolated in the following way. As in the seeks a landmark I.-P Park, J.R. Kender/Art$cial Intelligence 78 (1995) 355-395 365 . . . z . . . . . l -. . . . ___e__ . . . : . . . . . ..* . . . . . . . *. * . * . L Fig. 5. The left diagram shows the original world with isolated landmarks illustrated in bigger circles. The right diagram shows corresponding isolated parkways. 4.2.3. Reliable parkways The obvious parkway and the isolated parkway turn out to be two of the most useful concepts for reliable navigation. However, other types of parkways are possible. For example, each parkway path can be associated with a reliability measure, similar to a probability, as will be explained in Section 6. Parkway paths can then be categorized by whether or not they exceed a reliability value threshold. This defines a definition of connectedness that results in “reliable” parkways. Note that reliable parkways are neither a strict superset nor a strict subset of isolated parkways. 4.2.4. Error-detectable and error-recoverable parkways During navigation, errors and mistakes are sometimes inevitable. In some errorful situations, however, it is possible for the navigator to identify that it is no longer on the correct course. Furthermore, in some more restricted cases, the navigator can recover from an error by executing a simple recovery sequence. This process of iden- tifying and recovering from an error is of a great importance [25], and thus will be explored in detail in Section 6. This concept leads to another classification of park- ways. A subgraph of a parkway that is entirely composed of error-detectable directed edges is called an error-detectable parkway. Likewise, if the edges represent error-recoverable paths, then the parkway is called an error-recoverable parkway. For example, a subgraph of an isolated parkway that is error-detectable is an error-detectable isolated parkway. Again, these properties of parkways are not easily related to each other. Reliability, error detection, and error correction are defined by performance criteria, whereas obvious, isolated, and (general) parkways are defined by visual connectedness. 366 I.-P. Park, J.K. Kender/Artificlal Inreliigence 78 (1995) 355-395 -- Existing parkways Fig. 6. A new object The window size is ((I x (I). is added, and forms a new parkway, since it is not visible to any other existing parkway. New obiect 4.3. Statistical analysis of parkways to determine in the world the relationships We have carried out some experiments time interval, we add (using a uniform the window size, and the number of parkways of various between object density, types. Let the world size be R = (r x I-), and the window size be A = (a x a). We proceed, via simulation, as follows. At each integer random distribution) to the world, and see if it starts a new parkway or is incorporated a single new object into an existing parkway. The number of objects at time t is therefore objects we are assuming a random placement of the objects, random variable. can be approximated The probability the tth object objects within one window’s distance of the new object, (Fig. 6). Therefore, the probability (= population of forming a new parkway at time t can now be calculated. We place area. If there are no other is formed t is e-(4AIR)r the average of forming a new parkway at time represents t, the density of t. Since in a window in a window the number of objects the Poisson parameter, A = (A/R)t, is t/R, and the average population the world and observe (e-*AO/O!)“, where then a new parkway in the window). its surrounding by a Poisson is (A/R) into from of objects the population formed versus in an environment top to bottom are associated with window In the top diagram of Fig. 7, the results of a simulation The number of parkways line graphs 4 x 4, 5 x 5, and 10 x 10, respectively. parkway obvious parkway. Conversely, is less than environment diagram of Fig. 7 shows a comparison size that maximizes coalesce. We speculate of this concept are shown. is plotted. The five sizes of 2 x 2, 3 x 3, the size * of an average general isolated parkway or an in an that of isolated parkways or obvious parkways. The bottom the window to a density of landmarks this density, parkways are those near this the number of parkways of a given that “difficult environments” of the three parkway t corresponding the number of disjoint general parkways than that of an average is 5 x 5. Intuitively, for navigation type. Above types when In general, is a time is larger formed there 5 The size of a parkway can be defined in many ways, but in general, the number of nodes in a parkway is a good measure. I.-I? Park, J.R. Kender/Artifcial Intelligence 78 (1995) 355-395 367 t -+- ‘EASEccpbl’ ‘EASEobvpkr ‘EASEisolpbl D;,,’ i ,,/’ Fig. 7. Top diagram: The number of parkways versus the population. Bottom diagram: Number of obvious. isolated, and genera1 (in top to bottom order) parkways versus the population: the more restrictive the definition of connectedness, the more likely the parkways will be smaller in size, and therefore more numerous. relative maximum are not in immediate visual range of each other. of parkways, since at this density the largest number of landmarks 4.4. Trajectory defmition Sometimes, the start and the goal landmarks a parkway will not be sufficient In this case, following its task of getting parkways. At some point of the traversal, a region of featureless from our original assumptions space, and attain two the navigator has to leave a parkway, enter lost. Recall the other parkway without getting that the navigator does not have any metric capabilities to transit between to the goal. Therefore, we need a method can be in mutually disjoint parkways. to accomplish for the navigator 368 1.-t? Purk. J.H. Ketzder/Arfijiciul Intelligence 7’8 (1995) 355-395 Fig. 8. An example showing how a trajectory is formed. Fig. 9. Trajectories formed on the environment shown in Fig. 3 landmarks visible to another parkway. as possible its view window. Thus, we need a method to determine In order for the method to rotational, the following. For each pair of landmarks the map-maker translational, the window in the direction outside formed by currently follow be as insensitive We propose view window, parkway by “sliding” depicted and the third object sliding represented by the straight the view window in Fig. 8, where the two objects in the view window in the upper right corner can be brought that utilizes a heading to be robust, the relative that the navigator locations can this method needs to and scale errors. that can be seen in the same in some other formed by the two landmarks. This is form a directional vector, into the view window by is in this direction. The trajectory of the window movement tests the feasibility of reaching a landmark line. Inter-parkway paths generated by this method are defined as “trajectories”. are not commutative, to note is in fact a directed graph. One measure of the ability of trajectories the graph and It is formed by to that trajectories to disjoint parkways interesting trajectories add connectedness algorithm on our random world. Each straight of the sliding movement. One end of a line is attached which the new object is expected this sliding window to this directed graph is to apply the strongly connected component [ 11. Fig. 9 shows an example of trajectories computed in the direction line is the trajectory of the window, to the window at the position at to appear. The other end of the line is the object that sees the navigator is seeking. Note that for much of the trajectory, I.-i? Park, J.R. Kender/Ar@cial Intelligence 78 (1995) 355-39.5 869 Trajectory goal in the (Pl , P2) dim&x Trajectory goal in the (PZ, Pl) direction Fig. 10. Formulation of trajectories. nothing at all, and that the attaining of the new landmark occurs along the leading half of the perimeter of this window. 4.5. Implementation of trajectory traversal The basic idea in the trajectory approach is to “slide” the view window along the direction formed by two landmarks within the view window and to see which landmark enters the window first. Note that the map-maker does not use any global coordinate system to specify the navigator’s direction of movement. In Fig. 10, we see the problem from the viewpoint of the map-maker: a view window is centered around two objects, PI and P2. Although the map-maker can compute the global coordinates, (xl, yl ) and (x2, ~2) of these points, from the viewpoint of the navigator, it is only the local coordi- nates in the navigator’s window coordinate system that will be available to the navigator. However, in either view, the direction formed by these two objects, PI and 9, is defined by the line that passes through them. The “goals” are then the closest objects to this window along the formed directions 6 (left or right). 4.6. Types of trajectories In order to form a trajectory, the navigator uses two visible landmarks. Since the navigator has a reference object at all times, it needs to identify a single landmark to make this pair. Depending on the description language, different objects can be selected as the second landmark, which would yield different trajectories. For example, using the isolated landmark descriptor, a trajectory can be defined by the reference landmark and the isolated landmark. A trajectory formed by using the isolated landmark descriptor is called an isolated trajectory. Likewise, a trajectory formed by using the obvious landmark descriptor is called an obvious trajectory. As in the parkway case, each trajectory path can be associated with a reliability mea- sure, as explained in Section 6. Trajectory paths can then be categorized by reliability. In Section 6, we also describe methods for error detection and error recovery during 6 The specific formulation of a trajectory as described above applies to a rectangularly shaped view window. However, the basic idea of trajectories can be generalized to an arbitrarily shaped window, or to navigation in dimensions higher than two. 370 I.-P f’urk. J.R. Kender/Artificictl Intelligence 78 (I 995) 355-395 Fig I I. Number of strongly connected components as a result of applying the trajectory method. trajectory movement. Error-detectable paths are defined in analogous ways to their parkway counterparts. trajectory paths and error-recoverable trajectory 4.7. Statistical analysis of trajectories connected the world trajectory paths, is more connected as a whole and easier As a result of forming the number of (strongly) in. If there are no trajectory paths, the number of strongly connected In the simulation, the number of parkways as the number of objects the number of strongly and that the measure of connectedness That com- to compo- the upper curve of increase. The lower that trajectories in the graph is strong trajectories indicates a lower (i.e., you can usually do better) on whether or not you can get from one place to for example at 450, the number of that even by using both parkways that “you can’t get to”. The major advantage of (roughly by a factor of two) after a ponents decreases. This means navigate nents is equal to the number of existing parkways. Fig. 11 represents curve indicates are “one-way”, connectedness. so that navigation bound another. Note that even at a relatively high population, is not 1. This means strongly connected and trajectories, trajectories certain density. in both directions. The graph therefore is that they make the world “smaller” is, the parkways must be connected there are still places components. Note by two separate components is possible connected displayed 4.8. Overall best path In general, the overall best path and in Fig. 12. The starting trajectory path segments. An example of such a path is shown left corner. position Parkway path segments are represented by single line segments, and the trajectory path segments are represented by a box accompanied by a single line segment. Without much is near the top right corner, and the goal position of parkway path segments is near the bottom is a combination I.-P Park, J.R. Kender/Art$icial Intelligence 78 (1995) 355-395 371 Fig. 12. The combined shortest path. to Dijkstra’s algorithm, change types of navigation. the best path can be easily generated, incorporating both 5. Path and custom map generation is the “best” the navigational are to compute [ 41, how “easy” for the navigator topological directions to take. But, usually, take into consideration custom map of symbolic various costs for the navigation, The main objectives of the map-maker path, and to for the naviga- generate a corresponding then is the navigator able to start on its journey. The map-maker must decide tor. Only which route the shortest distance route is not the best route to take when the driver is not familiar with the environment. some of The map-maker must is the which are: how far is the travel distance, how much time does it take, how “easy” [ 171, and how to provide enough path to follow in the list information without overburdening to the derivation of paths. Depending on the skills and the experience of the are related the priority and relative weights of these costs may vary. Also, depending on navigator, the shortest the priority of each of these costs, the resulting path may vary. For example, (that is, distance path may not be the shortest is the most reliable) unskilled or is not familiar with the environment, should favor easy paths over faster paths. The latter two items in the list are related to the direction giving. Describing how to follow an already derived path is as important as the path generation itself. is the path to describe the navigator path may be drastically different from those two. If the navigator time travel path. Furthermore, [24]. The first three items the path derivation the easiest Traditionally, robot navigation the traditional AI theory applied theory has been divided to navigation, where high-level planning into two groups. The first is is done prior 312 I.-P Park, J.K. Kender/Artijiciul Intelligence 78 (1995) 355-395 Window Sk Fig. 13. Example of isolated parkway paths and trajectory paths The other [ 31, where navigation based on its sensory is the reactive control is low-level: inputs. Our map-maker to navigation. architecture environment porate both of these two approaches. The map-maker’s path planning generation provides a high-level preplanned tions are based on the custom map commands and the immediate environmental reading, which can be regarded as the reactive control of the robot navigator. to the incor- and custom map control of the navigator. The navigator’s ac- sensory theory, such as Brook’s subsumption the robot navigates by reacting and navigator models in topological The map-maker uses its knowledge of the environment and of the navigator’s forms) in data structures abstracted (view window size, degree of freedom, accuracy, etc.) to produce a relatively short and simple direction sequence in a custom map to be sought, and that describes have a simple grammar is visible. landmark how to navigate and adjust All these aspects of the custom map construction in detail. for the navigator’s use. The directions and execution are now described (represented characteristics the local position while (the custom map) the next landmark that describes the reference 5. I. Path generation The transition matrix contains navigated navigator transition matrix corresponding navigation. to, from another from object A without going to (A, B) information as to whether or not a landmark can be landmark. That is, if object B is directly attainable by the the entry of the the cost of this through another is set to a value representing landmark, lines represent that local visibility Let us refer to Fig. 13. The solid straight isolated parkway path trajectory path segments. The square the parkways. is the key factor in determining lines represent and the dotted straight to the left of the figure is the window size used to calculate in the navigator’s window segments, box shown (Recall the connectedness.) are four strongly isolated parkway. Objects D and E are in the second the transition each on its own parkway. there components. Objects A, B, C, F and G are in the first this is because from object group D, E to A, B, C, F, G is one way. Objects H and I are The number of disjoint isolated parkways isolated parkway; is four because connected I.-P Park, J.R. Kender/Artijicial Intelligence 78 (1995) 355-395 373 Table 2 Transition matrix 40.3 1 40.31 38.60 38.60 34.13 34.67 52.35 59.55 16.76 16.76 52.35 35.06 20.25 59.55 132.52 159.93 132.52 159.93 From the observation of the transition matrix shown in Table 2, we immediately see that object C is a crucial landmark in this environment because its corresponding column is the most filled. Thus, an operational definition of a “good” landmark emerges: it is an object that is reachable by the navigator from many other objects. Similarly, the “best” landmark is one that is reachable from the most objects. It is important to notice that the quality of a landmark depends on the sensory limitations of the navigator (here, the view window), as well as the qualitative description method (here, the navigator’s ability to detect isolatedness) . Nevertheless, detectability and reachability by the navigator appear to be the two defining characteristics of an object useful in topological direction giving and following: these are what make and quantify a landmark. Each entry in the transition matrix is a value indicating the cost of the transition. Depending on the need of the navigator, this value can bear different meanings. For example, this can be the spatial distance, the temporal distance, the reliability, or any other weighted index of evaluation that can be measured or generated. The shortest path in a parkway is generated by Dijkstra’s algorithm; it finds the single-source shortest path to all other vertices. This requires O(n*) time, where n is the number of vertices in the graph. The overall shortest path is a combination of parkway paths and trajectory paths. In our example of Fig. 13, the shortest distance path from object A to object H is represented by a sequence of arrowed arcs: three parkway transitions, followed by one trajectory transition. 5.2. Tie breaking heuristics Often Dijkstra’s algorithm will have the option of selecting more than one landmark at equal cost. These ties are broken by means of heuristics. Sometimes, during an isolated parkway traversal, two or more objects in the naviga- tor’s view window will seem equally isolated to the navigator, i.e., they have the same c-values, described later in this section. To break the tie, the map-maker uses a heuristic to choose the isolated landmark that is furthest away from the current reference land- mark. This method is based on the observation that the navigator tends to travel towards the goal (and away from the starting location) at any instance of navigation. Therefore, by selecting the furthest landmark from the current reference landmark, the navigator usually moves closer to the goal. Note that this is in contrast to a more usual search 314 I.-P Purk, JR Kender/Artijicial intelligence 78 (1995) 355-395 the landmark closest heuristic, which would select former is that the global position of the goal (or even of the two competing is unknown to the topologically the map-maker does know global positions, used by the map-maker by the navigator as well. landmarks) is subtle: even though the navigator does not. Hence, any heuristic sensing in planning must also be usable during to the goal. The reason we use the driven navigator. The problem the “reactive” For trajectories, the orientational mized when the intercepting Further, are at right-angles. proportional to the distance between of travel from the current minimize within a view window, as well. [ 201. Therefore, reference the furthest (directional) error in following a trajectory is mini- edge of the view window and the direction of the trajectory is inversely the error in determining the direction that is furthest away task, since it tends to if there is a tie landmark can and will be selected by the navigator a trajectory direction that define the heuristic of choosing landmark also applies the object to the trajectory the two reference objects error. Here, too, the capabilities of the navigator are respected: 5.3. Dejnition of optimal path Depending the computation distance custom map length (D), the reliability (M). on the needs of the navigator, different constraints into of the optimal path. Some examples of optimality criteria are: the travel the sensing cost (S), and the time (T), can be imposed the travel (R), that estimate [ 1 l] we have the travel distance of a Currently, we have implemented in an earlier separate work responsibilities cost functions navigation path, D, and the reliability of a navigation path, R. (Often, T is minimized S and M.) when D is; and is to generate a path that either minimizes D, One of the map-maker’s these two cost estimates are in or maximizes R. Unfortunately, a direct conflict with each other. For example, if the shortest distance path involves a highly cluttered area, the reliability would be low. Conversely, a reliable path that avoids highly cluttered areas may force the navigator to detour around a shortest path. There two costs. Here, we suggest a third function, C, that are many ways merges D and R, defined as D/R: it can be rewritten as for travel, we can apply Dijkstra’s C = log D - ratio. The generated shortest path algorithm log R. Using C as our cost estimate to derive a path that minimizes for simplicity of computation in some environments, implemented to weigh the D/R these Fig. 14. The shortest distance (left) and the most reliable (right) paths. I.-I? Park, J.R. Kender/ArtQicial Intelligence 78 (1995) 355-395 375 . , . . . . . . . l % +F!kc!d !c5--- . Fig. 15. The D/R compromised path. path will tend to favor short paths and sparsely populated areas. Note that R is a function of not only n (the population of landmarks) will be shown in Eq. ( 1) in Section 6. If D is small, the path will resemble and if (+ is large, the path will resemble metric ability within path. On the other hand, be the one that least confuses most reliable path, and the D/R compromised but also u (the position estimate error) as the D-path that if the navigator’s shortest is poor, the optimal path will the navigator. Examples of the shortest distance path, the is good, the optimal path will be the metrically path are shown in Figs. 14 and 15. if the navigator’s metric ability the R-path. This means its window 5.4. EfSect of sensory context on landmarks It is not surprising that the shortest path in a parkway network does not necessarily travel path for the navigator. This is because the cost (distance guarantee the shortest traveled) of achieving a landmark depends on what might be called the current sensory context of the landmark. For example, consider a path generated within a parkway. Each arc of the path represents landmark and a subsequent the distance between a reference landmark. However, depending NW) the new landmark may or may not be equal parkway path that zigzags, but in which the actual traveling movement of the navigator (see Fig. 16). Conversely, is nearly a parkway path can be nearly straight, but the sensing demands of the navigator may force a more jagged movement of the navigator. is to be placed, to the arc length. In an extreme situation, we can visualize a (SE, SW, NE, traveled distance of the navigator on which corner of the view window the traveled distance is much smaller linear and the actual Using our navigator model, each target landmark has four different sensory contexts, landmark being placed in SE, SW, NE, and NW corners of context-based In order to implement to the reference corresponding following, landmark the navigator’s view window. and the transition matrix, must the data structures in the parkway network, we now have 4n nodes, be modified. the four ways each target landmark can be “seen” by the navigator. The size of namely, the transition matrix grows by a factor of 4*, but stays very sparse. Therefore, a sparse matrix of the search algorithm can be used for storage efficiency. The time complexity takes O( .*) . increases, also by a factor of 4* since Dijkstra that represent parkways, Instead of it nodes representation trajectories, 376 1.-f? Purk. J.R. Kender/Artificral Intelligence 78 (1995) 355-395 Shortest context-based path Shortest landmark based path -- Fig. 16. The arrows indicate physical distances between landmarks. whereas the actual movements are shown by the rectangular boxes. 5.5. Ciistor7z may generutiott For the actual navigational task, ( I ) what to look for C the “seek” phase), to parkway or trajectory path segments. Each entry the navigational the navigator depends solely on the custom map instructions that in the custom map the and (4) where to (the “adjust” phase). Later in this subsection, we will a landmark. (2) how to verify for qualitatively identifying (3) how to correct itself (error recovery), the navigator (error detection), created by the navigator. The custom map contains correspond instructs landmark go with respect discuss The vocabulary navigator. However, particularly in this description independent simple, and we cover it tirst. of the vocabulary, language defines the environmental to the landmark description language the command to the the grammar of the custom map is set available Each entry in the custom map is of the form (D, [T, ] [E, ] M). D is a description that from symbol indicates landmark. that indicates which landmark this will call for the most isolated in the positive [E] [T] (Trajn) landmark (negative) is another optional a trajectory, where T E {Trajp, Trajn}. Trajp the reference direction that will be described to indicate which of the four corners (SE, SW, NE, NW) in the current view is to be is an optional indicates to the language vocabulary “sought”. Most often, term a trajectory isolated landmark. for error recovery sequences designator is to be “adjusted” “null”, view window and to adjust until it is in the SW corner. The navigator direction the designated is a powerful description; direction do nothing. the correct term which consists of a set of instructions in Section 6. Finally, M is the corner the chosen landmark to once it is attained. Symbols * and - are used to indicate “any” and ( *, SW) means to seek any object in the this in “any” it”,) The landmark and that that the navigator can select the obvious that it has reached the goal, or, in error correction, (Usually, landmark has finally been attained.) in following landmark appears and then moves so that the selected corner of the view window. in which “you can’t miss respectively. For example, ) means this means these are environments in some environments, selects a landmark, (Surprisingly, the direction (Obvious, - Some examples are shown (Isol, SW) in upper in Fig. 17. In the simplest case, we have left diagram of Fig. 17, in which map entry, told to identify right diagram is told to identify the two landmarks the isolated landmark the custom map entry, shows and then to adjust (Isol, Trajp, SE), the isolated landmark. Then, by moving (the reference landmark and the isolated the navigator the custom is to the SW corner. The upper the navigator formed by the trajectory in which in the direction landmark), I.-t? Park, J.R. KenderIArtificial Intelligence 78 (1995) 355-395 377 0 0 0. , /’ @ (tsot, (4, SW, Isol), (2. SE, Isol), (3, -), SW) 0 0 Fig. 17. Examples of custom map entries. landmark is brought goal corner. The custom map entry becomes more complex when error recovery are included, as in the lower diagrams of Fig. 17, as will be explained the view window, and the navigator into adjusts to the SE instructions later in Section 6. 5.6. Details of the description language instant, the language The map-maker a particular object to be able to distinguish for the custom map. At any given has to be able to describe what the navigator needs the landmarks in designing to generate a custom map that describes how the navigator the computed best path. In this subsection, we explore along may follow the the issues in its view, which may contain navigator will have only a small portion of the world sees, in several objects. The map-maker to use as the next order for the navigator landmark. This is a hard problem because of our assumption of the navigable reference (Again, environment, which is comprised of point-like objects If objects to stress topological this abstraction has been deliberately features such as color or shape, those can be used in the description. have distinguishable such as being placed in a square- Or, if they share certain detectable like configuration, is the extreme case where no features are available, or, equivalently, when all objects have the same features.) infinite memory, and an language could consist of a full color image of extremely point-like world anyway, we each possible view. But since our world is a monochrome need a qualitative relations of the visible objects. The level of detail in the description process would depend on the these properties can also be used in the description. What follows the geometric and the topological If the navigator had infinitesimal that are randomly placed. spatial regularities, that can describe fast processor, the description relationships. accuracy, language chosen 378 I.-P Park. J.K. Kender/Arrifi&l Intelligence 78 (I 995) 355-395 Reference lanbmark Obvious landmark Isolatad’Landmark Isolated pair \ Confusable landmarks ’ Direction of movement Fig. 18. Examples of the description language. only two of which (obvious and isolated landmarks) arc fully analyzed and implemented in this paper. Goal object ’ ” 6. (isolated, -) . . . a’% 0.0 . . trajectory / 5. (isolated-pair, SW) 4. (obvious, SE) 3. (obvious, SE) 2. (isolated, trajectory, SW) h Initial position 1. (‘,SW) Fig. 19. An example of navigation using a custom map, showing isolated landmarks, obvious landmarks, a trajectory, and an isolated pair. Corresponding custom map entries are shown on the right. intelligence emphasizes the sensory and the topological ability of the navigator; our exploration here deliberately aspects of navigation. Some definitions follow: A landmark is defined to be “obvious” landmark that is visible except for the reference landmark. Two or more landmarks if it is the only are I.-f? Park, J.R. Kender/Ar@cial Melligence 78 (1995) 3.55-395 379 Fig. 20. An isolated landmark example (left) and the corresponding mnv matrix (right). if it does not matter which landmark do permit is to be chosen as the this). The term “new” that newly came into the view window as a result of some environments (again, landmark to be “confusable” refers to the landmarks defined next reference landmarks the robot’s movement. The term “isolated” as a result of applying single pair of isolated these definitions. All have been or are being obvious and isolated surprisingly by only using obvious and isolated the full description navigation a clustering landmarks landmarks using refers to a single isolated term “isolated pair” landmark refers to a landmark algorithm. The as a result of a clustering implemented, in this paper. This is because algorithm. Fig. 18 illustrates but we will only talk about landmarks were system landmark descriptors. Fig. 19 shows an example of language. isolated robust and flexible, and therefore we were able to build a complete 5.6.1. Identifying an obvious landmark Identifying an obvious landmark in a view window an obvious reference that exactly landmark is the only visible object landmark. Therefore, the precondition two objects are visible. Implementation is very simple. By definition, the current is landmark an obvious than in the window other for identifying is trivial. 5.6.2. Identifying an isolated landmark to compute Our algorithm the most isolated landmark like objects uses the concept of mutual neighborhoods of “isolated” were shown algorithm (1) in the scene compute is as follows: to lead to unstable performance or costly computations.) The in a scene consisting of n point- [91. (Several other definitions For each pair of objects the mnv (mutual neighborhood representing value). The mnv of two objects A and B is the sum of two numbers, the order of how close B is to A and the order of how close A is to B, relative if B is the second closest object to all the other objects. For example, to A, to B, then the mnv is 5. Note that the mnv is and A is the third closest object in an n x n matrix, where n is the number of is stored symmetric. This result visible objects. The objects in the left diagram of Fig. 20 have the mnv matrix as shown on the right. For each column of the mnv matrix, value particular this particular object. In our example, 2, and 3 respectively. find the smallest value greater than 0. This to this the “c-value” of for A, B, C, and D are 4, 2, and its “closest” neighbor. Call is the mnv value between this particular object (that corresponds the c-values this value column) (2) 380 I.-P: Park, J.R. Kender/Artificial Intelligence 78 (1995) 355-395 (3) The object (column) that has the largest c-value the scene. In our example, A has the largest c-value of 4, and therefore most isolated object. Note that c-value in it is the is a small integer of value at most n [ 201, is the most isolated object 6. Error handling to Section 2, we no longer assume that the map-maker the navigator that relate to errors that occur before and the sources and magnitudes of navigation error. In is mostly to errors. Due to inherent of camera and lens), and the dynamics of etc.), we relax session, the entire environment with its global camera, and computes coordinates of the populated objects. The calculated In the beginning of a map-making in environment, limitations of objects In this section, we focus on various problems slight displacement In it, we investigate during navigation. addition, and in contrast is prone error-free and that only (in our case, the map-maker’s sensing elements (lighting, the environment the error-free assumption of our map-maker. the map-maker the real world contain error. Error is further accumulated sensory and motor limitations. When prone to make mistakes. Sometimes its task of reaching turn. captures (x,y) coordinates by the navigator during navigation due to its is the overall error gets large enough, the navigator the destination. We will analyze each step of this error cascade in this will result in the navigator failing to accomplish There are two different ways to deal with errors. The first method is “error prevention” the map-maker and generates a path that is least affected by error, from making mistakes. The second method is task. At by the navigator during by the map-maker. Prior the environment and is accomplished to the navigational its navigational the navigator task, topological properties, the navigator examines its immediate that it is on the correct course. If an error has been detected, it to get back to the original course. 7 In this section, routine and is performed carefully examines thereby helping prevent “error recovery”, each landmark with certain surroundings carries out an error recovery we explore both of these in detail. to verify 6.1. Parkway errors 6. I. 1. Accuracy of positional information: the map-maker’s view the global camera In our physical setting of the map-maker, the whole environment, the positional that can capture global camera passes through a simple calibration distribution for We further assume every object can be replaced with more accurate ones derived empirically). By a straightforward physical setup, we were able to measure that the standard deviation of the errors in each (x, y) is constant is placed at a position in Fig. 24 in Section 7. The system that the probability is a Gaussian distribution. as will be shown of objects sequence. For simplicity, we assume of error in each positional to the map-making (these assumptions in the environment information, information (x, y), ’ Our error recovery method can be classified as “forward its traveled route. instead of retracing to get back on track. recovery”, as defined in [ 251, because it replans I.-p1 Park, J.R. Kender/Ar@cial Intelligence 78 (1995) 355-395 381 Fig. 2 1. Reliability of isolated landmarks decreases as the number of neighboring objects increases. the sample means and the standard deviations of the x and y errors [20], as follows. The units are in millimeters. (y,,j+) = (0.037,0.122), (UX,(+!) = (1.499,1.066). The significance of this calibration is that specific measurements are now available to the map-maker for use in estimating landmark reliability. 61.2. Reliability of isolated landmarks: the navigator’s view Results of our experiments using various custom maps, populations, and start and goal positions indicated that the navigator tends to fail in subareas which are highly cluttered. To explain this phenomenon, we resorted to statistical experiments, since the non-linear definition of “isolated” defies easy analytic solutions. After experimentation with several simple functions, we modeled the reliability of the isolated landmark detector with the following function, which states that the reliability is inversely proportional to the number of neighboring objects and directly related to the standard deviation of the position estimation error (a); this appeared to capture the appropriate behavior well. R(n,a) Aa+B ___ n = -CU-kD. This equation was fitted with the data points using the Mathematics package [28], and the result is shown in Fig. 21. The significance of Eq. ( 1) is that the map-maker has an approximate way of predicting the reliability of a landmark, based on the number of landmarks visible in a view window (n), and based on the statistical reliability of the navigator’s camera (a). The reliability can then be translated into some or all of a cost measure for navigation involving each particular landmark in the window. 6.2. Trajectory errors The navigator following a trajectory movement is doing a form of blind spatial search. The navigator has defined the trajectory based on two landmarks in its current 382 I.-P Purk, J.K. Kender/Artijiciul Inreiligence 78 (1995) 355-395 is reached, denoted by X,, may be shorter than estimated distance: than the distance the navigator must it simply moves along view. Then, its view. The actual distance denoted by XT, may be longer maker. Likewise, object then the navigator has made an error by selecting possibility is strictly one-dimensional, “the most isolated area surrounding the actual trajectory case, the direction of the navigator’s of error: errors perpendicular in a trajectory in obtaining as opposed landmark” method. for error involved isolated from this formed direction until a new object appears travel to reach the estimated distance traveled by the navigator before another calculated the trajectory in target, the map- incorrect) if X, < XT, landmark. Note that the by (but the wrong a wrong object during a trajectory movement to the two-dimensional possibility In the latter case, the neighboring objects to the error. However, of error in in the in the is the only source trajectory movement landmark contribute to the direction have essentially task can come zero effect. The error information that define in determining the sensor error of the landmark objects the the trajectory direction, or positional the trajectory from the translation error or the rotation error of the view window during movement. The first of these three sources produce a static error, meaning that the error does not change with the traveling distance of the navigator. But the errors due to the second and the third sources are dynamic that the error typically grows as the trajectory distance as a Normally distributed the navigator’s position estimation and the navigator’s orientational increases. Therefore, we modeled function of the map-maker’s position estimation translational error (cY,), the navigator’s error (a,), error (at), (cumulative), meaning the overall error, E, error, as follows [ 201: Here, B is the incident angle between the sliding window, h is the vertical distance between the anticipated the leading edge of the view window, and I is the distance between define the trajectory the map-maker the trajectory vector and the top leading edge of trajectory goal and that the two objects is that for details). The significance of this error model the reliability of a trajectory. can calculate (see [20] (2) 6.3. Error detection and error recover? Often it is possible for the navigator to detect, from immediate environment, whether or not it has obtained it is able to recover from a detected error. less often, the landmark topological properties of its intended. Somewhat 6.3.1. Error detection When a landmark verify enough does not contain navigator has incorrectly landmarks impossible. are visible is obtained, that it is on the correct course. Usually, the navigator can observe information sought and adjusted for verification. Only sometimes its neighborhood in order to the current view of the navigator alone if the that no other is to a landmark, but realizes it does: in the window, this is clearly an error, since further progress I.-I? Park. JR. Kender/Art@cial Intelligence 78 (1995) 355-395 383 Fig. 22. Example configuration for the Observe( ) function, showing four different window positions pivoted on the reference landmark. To verify is the area covered by “looking the reference that the navigator can observe without is necessary. The in the more usual cases, a wider environmental land- losing its current in the is at the SE corner of the window; itself locations of its four times as large becomes visible, but without location. Mistakes or errors can then be detected by context its current reference in the other three distinguished the SE quadrant. By moving area covered by the window around” landmark of the current a context reference landmark landmark (SW, NE, NW), appears region largest mark following way. Suppose call the corresponding so that the reference window loss of recoverability observing whether the four quadrants the visual properties to the current relative in these area of space are correct. reference landmark and analyzing A landmark can be characterized by the contents of its four quadrants. The contents of the four quadrants can be expressed in a signature of the form: signature = {Observe( SE), Observe( SW), Observe(NE), Observe( NW)}, where Observe(Q) is a compact topological description of the corresponding from attained landmark, is different If the signature of an improperly to the currently observed one. Therefore, it needs to have a unique signature within landmark then the mistake can be identified by comparing in order for a landmark its neighborhood. of the intended signature detectable, function depends on the capabilities of the navigator. For our simple of the Observe0 is the navigator model, we developed several Observe( ) functions, of which the simplest integers QOC (Quadrant Occupancy Count). This is defined indicating in each quadrant. Thus, 0 < QOC 6 4. In Fig. 22, the QOC of object R is 3, because 3 of the quadrants “looking around” R are occupied. the presence or the absence of objects to be a sum of four binary Implementation quadrant. the signature the desired to be error- Errors can be detected only if the landmark has a unique QOC within In Fig. 23, we see there are 5 landmarks other than the current in the view window. R is the current reference to be sought. The QOC of the visible objects are shown view window. landmark isolated landmark As can be seen, can be detected by examining the current reference landmark and I is the desired in Table 3. thus an error any value other than this view window, landmark; the QOC of object I is unique within the QOC of the obtained 384 I.-P: Park, J.R. Kender/Arhjicial Intelligence 78 (1995) 355-395 0 E Fig. 23. Error-detectable and error-recoverable configuration. Table 3 QOC values of ob_jects A, B, C, D. I and R A 4 R 4 c 3 n 3 I 2 R I 2 indicates an error. Note that object E affects the QOC of objects A and B, and object F affects the QOC of object D. 63.2. Error recoveg Error detection is useful only if there are corresponding In the worst case, when an error error recovery methods the navigator is detected task and effectively say “I am lost”. (What happens in this work.) But in many is able to get back intended course. In this subsection, we describe such an error recovery the one-way communication mode1 assumed a fixed set of “reset” sequences, available to the navigator. can simply give up its navigational next is beyond cases, by performing to its originally routine that the navigator can execute when errorful situations are encountered. the navigator The basic idea is to assign a fixed action for each detected QOC (0 to 4). Therefore, is a simple “if QOC then ACTION” in Fig. 23, the error recovery finds itself at either A or B instead of objects A and B have a QOC of 4. If the navigator the mistake by moving A or B to the SW corner and then the desired I, it can “correct” again selecting for objects C or D whose QOC is 3, is (SE, Isol), namely, move C or D to the SE corner and seek the most isolated landmark. Likewise, set. For example, the correction the isolated instruction this figure is that landmark I has a unique signature, is surprising since What attained, enly attained have recovery actions corrections mistakenly plications of the “If QOC then ACTION” direction eventually as it is uniquely recognized by its QOC. and all other landmarks the navigator that correct to be properly that can be mistak- if these repeated ap- result in I being attained, towards I. Even result in some landmark other than I being attained, I is guaranteed landmark. about I.-l? Park, J.R. Kender/Artificial Intelligence 78 (1995) 355-395 385 Formally, we call an isolated landmark context to be error-recoverable if: ( 1) The configuration is error-detectable (the isolated landmark has a unique QOC) . (2) Objects with the same QOC are positioned so that the originally intended land- mark (the true isolated landmark, Z) is in the same quadrant relative to these objects. For example, in our example of Fig. 23, objects A and B have QOC 4, and both have I visible from the SW quadrant. (3) From every reachable object which can be mistaken as the true isolated landmark, there must exist a path to the true isolated landmark. For example, in our Fig. 23, the isolated landmark for object C from the SE quadrant is in fact object B, not 1. But I is reachable from B. Therefore, I is transitively reachable from C. 6.3.3. Error detection and error recovery in trajectories Similarly, we can use the QOC methods to detect and to recover from errors in trajectory tasks by appropriately modifying the existing algorithms for parkways. 6.3.4. Example Let us refer back to Fig. 14. The corresponding custom map for this path is: ((Isol,SE), (Isol,NE), (Isol,NE), (Isol,Trajp, (2,NW,Isol), cl,-) ,-)> There are four entries in the custom map. First three take the navigator from the starting position (shown on the lower right-hand corner in the figure) to the end of the first parkway. There is no error recovery sequences embedded in the first three entries, but for valid reasons. In the first and the third entry commands, neither error recovery nor error detection is possible; the landmarks in the corresponding windows do not have unique QOCs. In the second entry, the navigator sees only one object (the obvious landmark) in its view; therefore, error verification is implicit and error recovery is not necessary. In the last entry of the custom map, the navigator is told to identify the isolated landmark and to move in the positive direction of the formed trajectory. If the newly appearing object has QOC of 2, then the navigator is told to move to the NW and to pursue the isolated landmark. Otherwise, if the QOC is 1, it has reached the destination. 7. Implementation and experiments 7.1. Implementation We have implemented our map-maker and navigator using an IBM 7575 SCARA robot arm, two Sony XC-77 CCD cameras, a PIPE (which is a high speed real-time for high-level control of the navigator image processor), of the map-maker and the navigator. and the map-maker. Fig. 24 shows the configuration and a Sun SPARC workstation 7.1.1. The map-maker and the navigator The map-maker is comprised of a CCD camera located at a position that can capture the whole workspace of the navigator. This camera is attached to the PIPE, which grabs I.-P Purk. J.K. Kender/Art(ficictl Intelligence 78 (1995) 355-395 Fig. 24. The experimental setup configuration information and sends the centroid the image based on omniscience in the map-maker (see Fig. 24) be used correctly image distortions due to translation. calibration matrix A that transforms the homogeneous called “custommap”, which contains camera coordinates it to the Sun workstation, which runs the “map-making” of the scattered objects. The assumption program of near that the image captured by the global camera the position of each object. To account for the rotation, and perspective, we use a simple geometric (X, x Z, 1) into the homogeneous world coordinates a file generates [ 71. The map-maker (U, K 1) the list of directions for the navigator. requires to generate The navigator is comprised of a second camera attached camera is also connected moves along. For each direction landmark and the amount of “adjusting” computed by the Sun workstation. arm controller for the actual movement. to the IBM robot arm. This to the PIPE for image processing of each scene as the navigator in the custom map, the detection of the most isolated is direction to the IBM of the robot for the corresponding instructions It then sends out low-level 7.1.2. The user The user inte@zce program in the environment interface program of the map-maker a human experimenter is implemented system. When the map-maker program object available command buttons, such as “start”. “goal”, “map”, “clear”, and “quit”, is able to choose compute the user interface program. for the purpose of interaction with on the Sun workstation, an X-Window is started, the computed position of each scattered is collected and displayed on the interface windows. Using the user to type of optimal path and to generate custom map. Fig. 25 shows the initial position and the destination, and to ask the map-maker the desired running 7.2. Experiments 7.2.1. Sparse versus densely populated environments As described landmark descriptor that the reliability in Section 6, our statistical is less reliable experiments the isolated in a scene with a dense population. We also noted the accuracy of the sensor. Our indicated that is dependent on (T, which measures I.-F! Park, J.R. Kender/Art$cial Intelligence 78 (1995) 355-395 387 Fig. 25. An example showing a path that passes through a highly cluttered unreliable region (left), and the result of using the “reliability” criteria to avoid the cluttered regions (right). test runs with the robot arm navigator agreed with these statistical results. The robot tends to fail in ( I) highly populated environments, and in (2) areas of environments where there are large clusters of objects. The left diagram of Fig. 25 shows a path created by the map maker solely using distance as a definition of cost-the path passes through the “wall” of a highly cluttered region of the environment, where it sometimes becomes confused. On the right, we see an adjusted path that avoids the unreliable cluttered region by incorporating reliabilities in the computation of the custom map. 7.2.2. Cost optimal@ criteria Navigation can be done with various costs; we have experimented with several. l Minimum travel distance: Minimizing the travel distance is done in terms of the context-based distance as described in Section 5. The reliability of the shortest distance path is sometimes very low when there are cluttered regions along the way. We saw such a path in the right diagram of Fig. 14 in Section 5. The corresponding costs for this path are: Distance cost Unreliability cost : : 444.930 0.539 The unreliability cost is measured by - log(R), where R is the reliability. We use the unreliability measure instead of R for the purpose of deriving the path using Dijkstra’s shortest path algorithm, which minimizes cost. l Highest reliability: Maximizing the reliability (or minimizing the unreliability) of the overall path usually yields a longer distance path as described in Section 5. We see such a reliable but detouring path in the right diagram of Fig. 14 in Section 5. The corresponding costs for this path are: Distance Unreliability cost cost : 731.506 0.127 : l Hybrid method: The use of a compromised cost function to minimize the D/R ratio, as described in Section 5, yields a path that is a neither too long nor too unreliable. We see a such path in Fig. 15. The corresponding costs for this path are: Distance cost Unreliability cost : : 457.931 0.214 388 I.-P. Park. J.R. Kender/Artijiciul Intelligence 78 (I 995) 355-395 El El El r7-J 17 El El El pq Fig. 26. The D/R path when u is small ( I mm) (5 mm) is shown on the right. is shown on the left, whereas the D/R path when (T is large As we can see, the shortest distance path has the lowest reliability measure), whereas travel. The compromised costs can be taken be considered each transition only has unit cost. (highest unreliability the most reliable path has the highest cost in terms of the distance in both measures. Other sequence can a cost to minimize. Such an incorporation the length of the direction path has intermediate straightforward; is particularly into account; in particular, cost values 7.2.3. Effects of sensor accurucies Accuracy of the map-maker’s and the navigator’s sensors are modeled with the posi- in Section 6. Depending on the standard information tional deviation of the positional the re- liability of each path segment may differ. In this subsection we compare paths generated at different sensor accuracies error, which is directly related error estimates as presented to the sensor accuracy, (g) l Small (+ (accurate sensor): As g gets small, the reliability of an isolated landmark increases. The left diagram of Fig. 26 shows a path generated by the map-maker using is large (high reliability), Note that the navigator passes through for this path are: to 1 mm. Because R the computed path is close to the shortest distance path. costs the cluttered region. The corresponding cost function D/R, when ff is equal the compromised Distance Unreliability cost cost : 420.57 0.91 : l Large u (inaccurate decreases, as shown generated by the map-maker when CT is equal to 5 mm. Because R is small reliability), the navigator path are: sensor) : As (T gets large, the reliability of an isolated landmark in Fig. 21. The right diagram of Fig. 26 shows a D/R path (low that costs for this the computed path resembles more the most reliable path. Note tries to avoid the cluttered region. The corresponding Distance Unreliability cost cost : 460.43 : 2.27 7.2.4. Context-based navigation As previously stated in Section 5, the distance between landmarks is not necessarily equal to the actual travel distance. In an extreme case, as in Fig. 16, we saw that the I.-l? Park, J.R. Kender/Artifcial Intelligence 78 (1995) 355-395 389 . pq a Fig. 27. The shortest landmark distance path (left) and the sholtest context-based path (right). j-zYJ El El I- rq . . : . l l . . .:. . l - Fig. 28. A simple error-recoverable path (path starts in the lower right). context-based shortest path can be a zigzag type of landmark path. The diagram in the left of Fig. 27 shows a shortest path generated in terms of minimizing the distances between the landmarks. On the right, we see the shortest context-based path for the same start-goal configuration. The landmark-based distance cost and the context-based travel distance cost for the path in Fig. 27 are: Landmark-based Context-based distance cost: distance cost: 385.465 358.639 The landmark-based distance cost and the context-based travel distance cost for the path in the right diagram of Fig. 27 are: Landmark-based Context-based distance cost: distance cost: 411.413 347.039 Intuitively, in the right diagram, there is more “sliding” of the navigator, particularly between the third and the fourth view window. 7.2.5. Error detection and recovery We have implemented the QOC method as described in Section 6. In Fig. 28, we see a path generated in a simple environment. The starting position is at the lower right-hand corner. The corresponding custom map for this path is: ((Isol,SE), (Isol,SE), (Isol, (Isol, (4,NE,Isol), (rZ,NE,Isol), (3,-J (2,-l ,SE), ,->> 390 I.-f! Purk. J.R. Kender/Arr$ciul Intelligence 78 (1995) 3.55-395 Fig. 29. A highly error-recoverable path (path goes clockwise), failed the navigator test run with the execution from the right in the path). The correct the robot, to achieve of the second entry of this custom map visual window. Therefore. in the window as the isolated the QOC was 4, which In our during second window of the navigator’s top-most object sequence was executed, and to recapture handled directly and successfully. Note that this journey would have been a failure error recovery the error recovery routine has increased of this path. landmark. When indicated the error. After the error recovery In this case, the error recovery the navigator attained routine. Effectively, the navigator the correct landmark. routine, the correct (corresponding landmark to the out the landmark was marginally identified incorrectly the error verification to the robot to adjust to NE routine correctly the destination if not for the the reliability Fig. 29 shows a path generated by the map maker that is highly error-recoverable. The navigator to the destination path segments commands map-making shown in Fig. 30. starts near the lower left-hand corner of the environment at the lower right-hand and trajectory path segments and navigates corner. This path consists of both parkway Corresponding that are error-recoverable. in the custom map (as generated on the user interface displayed during statements, the error detection and error correction including session), the are 7.2.6. The definition The navigation of success and fuilurr can either be a success, or be a failure, the destination, However, not all successes following. reaches in which case the navigator correctly in which case the navigator ends up in a wrong place. them as the and failures are equal. We have categorized Qpes of success (1) (2) routines, the navigation without having follows the correct path and reaches the goal directly. The navigator If the navigator are verified correctly sequences. that is, it can report that it has attained The navigator may or may not be equipped with error handling is provided with error handling during The navigator the goal. The navigator routines. The navigator the journey. the goal using error recovery and of the success of is aware of the error corrections, the correct path and reaches is “aware” of the success, all landmarks to execute the need recovery routines. follows I.-P Park, J.R. Kender/Art$cial Intelligence 78 (199.5) 355-395 391 FRW TO Cw) DISTMCE LWPROB COST 90 42 ISOL 78.~02 -0.000 78.102 WIIFV @DC -, 2 (TRIVIAL CASE) 42 30 ISOL 60.231 -0.000 60.231 UERIFV QK --) 2 (TRIVIAL CASE) 30 27 ISOL 96.865 0.024 99.665 UERIFV Qoc --) 3 (CORRECTW_E) If @x --) 2 (SW. ISOL) 27 55 ISOL 81.216 0.067 El.216 VERIFY QCC -s 2 KORRECTAELEI If Qx --) 3 ew. ISOL) 55 56 ISOL 69.600 0.024 66.600 VERIFY Qoc -> 3 (CORRECTABLE) If Qoc -> 2 (SE. ISOL) se 3 ISOL 77.104 0.024 77.104 VERIFY QX --) 2 KOARECTABLE) If QOC --) 3, (SE. ISOL) 3 67 TRAIP 226.500 0.350 226.500 "ERIFV @X -> 1 (CORRECTABLE) If @X --) 2. (NE. ISOL) 67 79 ISOL 47.434 0.024 47.434 MRIFV QK --) 3 (COARECTA9tE) If @JC --) 2, tlw, ISOL) 73 a1 ISOL 61.666 -0.000 61.666 VERIFY QOC -> 2 (TRIVIAL CASE1 91 100 TRATP 402.040 0.266 402.040 VERIFY QK --) 1 KORRECTA6tE) If r$C --) 2. WV. ISOL) 100 164 ISOL 51.478 0.127 51.476 UNVERIFIABLE (Not Correctable) Fig. 30. Custom map commands corresponding to the path shown in Fig. 29, as shown to the user during the map-making session. (3) The navigator follows the wrong path, but ends up correctly. In this case, the navigator has made incorrect moves, incorrect validations, or incorrect but somehow ends up in the right place. The navigator but is unaware of its mistakes. recoveries, is aware of the success, Types of failure (1) (2) the navigator to proceed because it is seeking a landmark, the custom map instructs stops due to inability to locate it. For example, cannot help, as the error is in the description, not the action. landmark, but there are more than one landmarks visible is “lost” and the navigation landmark). The navigator to (so has is aware of the failure. Note that error detection or error The navigator but is unable identify an obvious there is no obvious failed. The navigator correction The navigator that is error-detectable, verified, cation fails, the navigator is unavailable. The navigation is lost, but in a different sense of the word: it has verified that it is lost, but doesn’t know how to correct it is seeking a landmark but not error-recoverable. Had the correct landmark been the navigator would have been able to proceed. But if the error verifi- to go on because an error recovery sequence is aware of the failure. Note that the navigator stops due to inability to proceed because is unable itself. 392 I.-P Park, J.R. Kender/Artijicial Inrelligence 78 (1995) 355-395 (3 ) The navigator In this case, the navigator but the navigator it reports success. follows an incorrect path to its end which is not the goal landmark. is unaware of its mistakes. The navigation has failed, is unaware of the mistakes and is also unaware of the failure; 8. Summary and conclusions We have discussed a new method for topological navigation in a large unstructured information robot navigators emphasize environment, where metric existing qualitative igation depends heavily on the usage of visual can be readily that landmarks selecting good landmarks, topology-based is unreliable and expensive [ 11, 13,261. Most the importance of landmarks. Their nav- landmarks, however, with assumptions identified. We argue that without a detailed criteria for navigation is not possible. landmark, to answer is a good to the navigator, landmarks, are important, We started out by asking several important questions concerning (2) what features of a landmark such as (3) (4) how to describe a (5) how to detect errors, and (6) how to recover from them. issues follower for that are good so that a ( I ) what what sensors are to be used to recognize a landmark efficiently, landmark During our efforts these questions, were brought up, such as ( 1) the roles of the direction giver and the direction the lower bounds of the navigator’s for navigation, efficient and accurate navigation, the quantification or bad for navigation, (4) qualitative methods navigator with low metric ability can correctly of a landmark and the assigning of a “goodness” measure techniques. detection, and recovery landmarks the formal definition to it, and (6) error prevention, that can characterize them, (5) identify intelligence of environments and its ability and important interesting further (2) (3) the di- (the direction It For the purpose of efficiency and of conceptual modularity, we suggested of visible landmarks, the world instructions in a qualitative is the navigator for the navigator is the map-maker and of the navigator. system. The first module is assumed Its objective of the environment that are mostly to the actual navigation. The second module chotomy of the navigation giver), who has an accurate knowledge topological. The map-maker into data structures abstracts and generates cus- computes paths based on the configurations and efficient way, all tomized directional fol- prior range and almost no metric to have a very lower), who is to get to the destination by executing each of the provided capabilities. directional in a sequence. The navigator’s view of the world is, therefore, an even more abstracted one. We used a very simple navigator model as the direction the follower faster). Most of the difficult and time-consuming in the pre-processing time relative perform appropriate ing memory must be shared with other pressing the relationships Fig. 31. is done by the map-maker because a robot must act in real its observations to capacity and the work- of in for the sake of the efficiency during the navigation, it has limited actions. At the same time, to a task environment, tasks. A graphical time to assimilate the map-maker, stage. During less cognitive (the direction its computing the navigator representation the world, instructions is shown reasoning traversal between limited sensor strain, (the and I.-f! Park, J.R. Kender/Artificial Intelligence 78 (1995) 355-395 393 World - Navigator inexactly A exactly with error recovery Map-maker ~~ + anticipating error Reliable map Fig. 31. Abstraction of the world for the map-maker and the navigator. We introduced abstract data structures called parkways and trajectories which are abstractions of the real world into topological path representations, Parkways and tra- jectories enabled us to define cost measures of the travel route, and to quantitatively evaluate its goodness. We presented a lower-level abstraction of the world, as the navi- gator experiences it. We suggested the development of a description language to identify landmarks qualitatively for robustness and efficiency. We provided a basic description language for our experimental world, and gave details in the implementation of the iso- lated landmark descriptor. We analyzed and modeled various sources of errors, thereby assigning the “goodness” of each landmark based on the computed reliability and reach- ability. We studied error detectability and recoverability in both parkway and trajectory paths, and proposed general recovery schemes. As a special case, we analyzed in de- tail and implemented error detection and error recovery methods that make use of the Quadrant Occupancy Count (QOC). We discussed path planning and custom map gen- eration. We observed the relationship between paths (parkway and trajectory paths) and transition matrix entries. The transition matrix provided us with a the corresponding computational definition of a landmark: its columns were mostly filled; the associated cost in each transition matrix entry defined the “goodness”. We have implemented a demonstration system using a camera mounted robot arm that navigates over a two-dimensional planar world with point-like objects randomly placed on it. The use of point-like objects forces us to define a landmark with respect to its neighboring objects, rather than by its intrinsic qualities. The freedom to place the objects randomly eliminates the feasibility of using external structural cues (e.g. compass, roads) for navigation. We presented the implementation and the experimental results of this demonstration system. To emphasize the topological aspects of navigation, we designed a highly abstract environment. For more realistic applications that bring the level-helicopter scenario more down to earth, we note that under many other models of navigation it is still the case that many of these concepts remain, although sensing costs increase and some additional phenomena need to be addressed. Perhaps the most abstract model of on-land vehicle navigation related to our work would model the world surface as a plane, would have objects of fixed size and shape (this makes the task harder, in the sense that descriptions remain purely topological), and would have a fully panoramic retina (that is, the navigator can pan 360 degrees). In this model, occlusion of objects by other objects is possible, and the perspective effects of the camera require some cutoff for the sensing of distant objects (otherwise, there is 394 I.-l? Park, J.K. KenderlArtijicial Intelligence 78 (1995) 355-395 this the heading of the navigator the definitions of obvious and isolated points remain since the goal is visible and needs only to be described). Under (although most parkways become directed): if it is not occluded and is within the same, the definition in the direction of the target, the target. becomes defined as running over (or just barely missing) this new definition of connectedness, often no problem, scenario, of “seeking” becomes simply and “adjusting” Parkways are defined under the same landmark are defined exactly analogously more elaborate: map-maker can be used topology of the sensed environment it could be a list, like “isolated point, point, etc.” Error recovery, however, navigator selects the described object (if it is indeed possible adjusts view. Trajectories case. Error detection becomes there is no QOC, as there are no quadrants, but the vocabulary of the the instead of “3”, large group, isolated the it) and directly in a fixed order from the landmark about but are qualitatively is reachable identical, but may not be as effective: isolated pair, isolated point, range in the panoramic the heading direction, to the level-helicopter just obtained: to describe, to describe an object is nearly to it. from a Other models of the world would progressively relax some of these assumptions the camera model of the land navigator may have a limited field this wedge-shaped if the camera were further. For example, of view; particularly itself. A non-planar world, would also further complicate landmark: what is visible would camera capabilities, is the most challenging, the map-maker, of this work, namely, vocabulary and the necessity rather than metric values. will remain. as we have modeled since view of the world would to pan independently in which the world surface require different abstractions, of the direction of the vehicle itself can cause occlusions, the representations the “context” of a then depend on an accurate modeling not only of the of what we called but of the local topography as well. The last of these assumptions topographic properties of the world are not sensible by that the core concepts it is likely the and the navigator, it. Nevertheless, the map-maker the dichotomy between and the grammar of a custom map, the ideas of parkways and trajectories, and means of detecting and correcting errors, all based on topology As a whole, we feel that we have provided enough evidence for our belief should be more focused on high-level qualitative reasoning. large-scale navigation our experiments, we showed is efficient and accurate information information There But we claim for the acquisition and efficient navigation is much is the only useful tool in navigation is available, to be done for this framework topological information that high-level in our simplified setting. This does not imply of the environment that qualitative in general. Whenever metrically accurate the navigator should use it, but only if the cost can be justified. into a real environment. to be blended abstraction of the world offers an effective guideline for more robust of knowledge, and its manipulation that the multi-level and organization in the large. that In References ( I I A. Aho, .I. Hopcroft and J. Ullman, T/w Design md Analysis of Computer Algorithms (Addison Wesley, Reading, MA. 1974). I.-P Park, J.R. Kender/ArttJicial Intelligence 78 (1995) 355-395 395 the find-path problem by good representation of free space, in: Proceedings 121 R.A. Brooks, Solving AAAI-82,Pittsburgh. 131 R.A. Brooks, A robust PA (1982) 381-387. layered control system for a mobile robot, IEEE J. Robotics Automation 2 (I ) (1986) 14-23. [41 W.G. Chase, Spatial representation of taxi drivers, in: D.R. Rogers and J.A. Sloboda, eds., The Acquisition of Symbolic Skills (Plenum, New York, 1982). (51 J.L. Crowley, Navigation for an intelligent mobile robot, IEEE J. Robotics Automation 1 ( 1) ( 1985) 31-41. 16 J D. Dai and D.T. Lawton, Range-free qualitative navigation, in: Proceedings IEEE Conference on Robotics and Automation ( 1993). [ 7 ] K. Fu, R. Gonzalez and C.S.G. Lee, Robotics: Control, Sensing, Vision, and Intelligence (McGraw Hill, New York, 1987). 18 ] G. Giralt, R. Sobek and R. Chatila, A multi-level planning and navigation system for a mobile robot, in: Proceedings IJCAI-79, Tokyo (1979) 335-337. [9] KC. Gowda and G. Krishna, Agglomerative Pattern Recognition 10 (1978) 105-I 12. clustering using the concept of mutual nearest neighborhood. [ lo] J.R. Kender and A. Leff, Why direction-giving is hard: the complexity of linear navigation by landmarks, IEEE Trans. Syst. Man Cybern. 19 (6) (1989) 1656-1658. [ I 1 ] J.R. Kender, 1.P Park and D. Yang, A formalization and implementation of topological visual navigation in two dimensions, [ 121 B.J. Kuipers, Modeling [ 13 ] B.J. Kuipers and Y.T. Byun, A robust, qualitative approach in: SPIE international Symposia ( 1990). spatial knowledge, Cognitive Sci. 2 (1978) 129-153. in: SPIE Cambridge Symposium on Optical and Optoelectronic Engineering, Advances in Intelligent Robotics Systems (1988). learning mobile robot, to a spatial 1 14 1 T. Levitt and D.T. Lawton, Qualitative navigation [ 151 T. Lozano-Perez, Automatic planning of manipulator for mobile robots, Artif Intell. 44 (3) ( 1990) 305-360. IEEE Trans. Sysf. Man Cybern. transfer movements, 11(10)(1981)681-698. [ 16 ] V. Lumelsky and T. Skewis, A paradigm for incorporating vision in the robot navigation function, in: Proceedings IEEE International Conference on Robotics and Automation (1988) 734-739. 1 17 1 D.M. Mark, Finding route in: Proceedings Second IEEE Conference on Artijcial Intelligence Applications ( 1985) 577- ‘ease of description’ as an objective in automated function routes: simple selection, 581. [ IS] D.M. Mark, On giving and receiving directions: cartographic and cognitive issues, in: Proceedings Auto-Carto 8 (1987). HP Moravec and A. Elfes, High resolution maps from wide angle sonar, in: Proceedings IEEE 1191 1201 j211 1221 1231 [241 [251 [261 [271 [281 1291 navigation: Conference on Robotics and Automation (1985) 116-121. I.P. Park, Qualitative environmental New York (1993). C.K. Riesbeck, M.H. Soldo, Reactive and preplanned Workshop ( 1990). L.A. Streeter and D. Vitello, A profile of drivers map-reading ‘You can’t miss it’: judging control theory and practice, Ph.D. Thesis, Columbia University, the clarity of directions, Cognitive Sci. 4 (1980) 285-303. in a mobiie robot, in: Proceedings:lmage Understanding abilities, Human Factors 28 (2) ( 1986) in inexact vision-based navigation, Ph.D. Thesis, University 223-239. L.A. Strceter, D. Vitello and S.A. Wonsiewica, How to tell people where to go: Comparing navigational aids, Int. J. Man-Mach. Stud. 22 (1985) 549-562. E. Stuck, Detecting and diagnosing mistakes of Minnesota, Minneapolis, MN ( 1992). K.T. Sutherland and W.B. Thompson, and Automarion ( 1993). P. Thomdyke Cognitive Psychol. 14 (1982) 560-589. S. Wolfram, Mathematics (Addison Wesley, Reading, MA, 1988). J.Y. Zheng and S. Tsuji, Panoramic Vision 9 ( 1) ( 1992) 55-76. for route recognition by a mobile robot, Inr. J. Comput. in: Proceedings IEEE Conference on Roborics and B. Hayes-Roth, Differences in spatial knowledge acquired from maps and navigation, Inexact navigation, representation 