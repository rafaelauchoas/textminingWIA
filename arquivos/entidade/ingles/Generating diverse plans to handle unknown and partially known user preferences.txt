Artificial Intelligence 190 (2012) 1–31Contents lists available at SciVerse ScienceDirectArtificial Intelligencewww.elsevier.com/locate/artintGenerating diverse plans to handle unknown and partially knownuser preferences ✩Tuan Anh Nguyen a,∗,1, Minh Do b,2, Alfonso Emilio Gerevini c, Ivan Serina d,Biplav Srivastava e, Subbarao Kambhampati aa School of Computing, Informatics, and Decision System Engineering, Arizona State University, Brickyard Suite 501, 699 South Mill Avenue, Tempe, AZ 85281, USAb NASA Ames Research Center, Mail Stop 269-3, Moffett Field, CA 94035-0001, USAc Dipartimento di Ingegneria dell’Informazione, Università degli Studi di Brescia, Via Branze 38, I-25123 Brescia, Italyd Free University of Bozen–Bolzano, Viale Ratisbona, 16, I-39042 Bressanone, Italye IBM India Research Laboratory, New Delhi and Bangalore, Indiaa r t i c l ei n f oa b s t r a c tArticle history:Received 12 January 2011Received in revised form 16 May 2012Accepted 16 May 2012Available online 18 June 2012Keywords:PlanningPartial preferencesDiverse plansHeuristicsSearch1. IntroductionCurrent work in planning with preferences assumes that user preferences are completelyspecified, and aims to search for a single solution plan to satisfy these. In many realworld planning scenarios, however, the user may provide no knowledge or at best partialknowledge of her preferences with respect to a desired plan. In such situations, ratherthan presenting a single plan as the solution, the planner must instead provide a set ofplans containing one or more plans that are similar to the one that the user really prefers.In this paper, we first propose the usage of different measures to capture the quality ofsuch plan sets. These are domain-independent distance measures based on plan elements(such as actions, states, or causal links) if no knowledge of the user preferences is given,or the Integrated Convex Preference (ICP) measure in case incomplete knowledge of suchpreferences is provided. We then investigate various heuristic approaches to generate setsof plans in accordance with these measures, and present empirical results that demonstratethe promise of our methods.© 2012 Elsevier B.V. All rights reserved.In many real world planning scenarios, user preferences on plans are either unknown or at best partially specified(cf. [33]). In such cases, the planner’s task changes from finding a single optimal plan to finding a set of representativesolutions or options. The user must then be presented with this set in the hope that she will find at least one of theconstituent plans desirable and in accordance with her preferences. Most work in automated planning ignores this reality,and assumes instead that user preferences (when expressed) will be provided in terms of a completely specified objectivefunction.✩This work is an extension of the work presented in Srivastava et al. (2007) [51] and Nguyen et al. (2009) [42].* Corresponding author.E-mail addresses: natuan@asu.edu (T.A. Nguyen), minh.b.do@nasa.gov (M. Do), gerevini@ing.unibs.it (A.E. Gerevini), ivan.serina@unibz.it (I. Serina),sbiplav@in.ibm.com (B. Srivastava), rao@asu.edu (S. Kambhampati).1 Authors listed in alphabetical order, with the exception of the first and the last.2 Company affiliation: Stinger Ghaffarian Technologies (SGT) Inc.0004-3702/$ – see front matter © 2012 Elsevier B.V. All rights reserved.http://dx.doi.org/10.1016/j.artint.2012.05.0052T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–31In this article, we study the problem of generating a set of plans using partial knowledge of the user preferences. This setis generated in the hope that the user will find at least one desirable according to her preferences. Specifically, we considertwo qualitatively distinct scenarios:• The planner is aware that the user has some preferences on the solution plan, but it is not provided with any knowledgeon those preferences.• The planner is provided with incomplete knowledge of the user preferences in the form of plan attributes (such as theduration or cost of a flight, or the importance of delivering all priority packages on time in a logistics problem). Eachof these plan attributes has a different and unknown degree of importance, represented by weights or trade-off values.In general, users find it hard to indicate the exact value of a trade-off, but are more likely to indicate that one attributeis more (or less) important than another. For instance, a business executive may consider the duration of a flight as amore important factor than its cost. Incompletely specified preferences such as these can be modeled with a probabilitydistribution on weight values,3 and can therefore be assumed as input to the planner (together with the attributesthemselves).In both of the cases above, our focus is on returning a set of plans. In principle, a larger plan set implies that the userhas a better chance of finding the plan that she desires; however, there are two problems — one computational, and theother comprehensional. Plan synthesis, even for a single plan, is costly in terms of computational resources used; for a largeset of plans, this cost only increases. The comprehensional problem, moreover, is that it is unclear if the user will be ableto completely inspect a set of plans in order to find the plan she prefers. What is clearly needed, therefore, is the abilityto generate a set of plans with the highest chance of including the user’s preferred plan among all sets of bounded (small)number of plans. An immediate challenge in this direction is formalizing what it means for a meaningful set of plans — inother words, we want to define a quality measure for plan sets given an incomplete preference specification.We propose different quality measures for the two scenarios listed above. In the extreme case where the user is unableto provide any knowledge of her preferences, we define a spectrum of distance measures between two plans based on theirsyntactic features in order to define the diversity measure of plan sets. These measures can be used regardless of the userpreferences, and by maximizing the diversity of a plan set we increase the chance that the set is uniformly distributed inthe unknown preference space. This makes it more likely that the set contains a plan that is close to the one desired by theuser.The quality measure can be refined further when some knowledge of the user preferences is provided. We assume that itis specified as a convex combination of the plan attributes mentioned above, and incomplete in the sense that a distributionof trade-off weights, not their exact values, is available. The complete set of best plans (plans with the best value function)can then be pictured as the lower convex hull of the Pareto set on the attribute space. To measure the quality of any(bounded) set of plans on the complete optimal set, we adapt the idea of Integrated Preference Function (IPF) [14], and inparticular its special case, the Integrated Convex Preference (ICP). This measure was developed in the Operations Research(OR) community in the context of multi-criteria scheduling, and is able to associate a robust measure of representativenesswith any set of solution schedules [21].Armed with these quality measures, we can formulate the problem of planning with partial user preferences as find-ing a bounded set of the plans that has the best quality value. Our next contribution therefore is to investigate effectiveapproaches for using quality measures to search for a high quality plan set efficiently. For the first scenario — when thepreference specification is not provided — two representative planning approaches are considered. The first, GP-CSP [19],typifies the issues involved in generating diverse plans in bounded horizon compilation approaches; while the second, LPG[27], typifies the issues involved in modifying the heuristic search planners. Our investigations with GP-CSP allow us tocompare the relative difficulties of enforcing diversity with each of the three different distance measures defined in theforthcoming sections. With LPG, we find that the proposed quality measure makes it more effective in generating plan setsover large problem instances. For the second case — when part of the user preferences is provided — we also present aspectrum of approaches that can solve this problem efficiently. We implement these approaches on top of Metric-LPG [28].Our empirical evaluation compares these approaches both among themselves as well as against the methods for gener-ating diverse plans ignoring the partial preference information, and the results demonstrate the promise of our proposedsolutions.The rest of this paper is organized as follows. We start with a comprehensive discussion of related work in Section 2.Section 3 reviews fundamental concepts in preferences and introduces formal notations. In Section 4, we formalize theproposed quality measures for plan sets for the two cases of unknown and partially known user preferences. Sections 5and 6 present and experimentally evaluate heuristic approaches for generating plan sets with respect to the introducedquality measures. Finally, Section 7 characterizes the limitations of our approaches, and Section 8 presents conclusions andoutlines future directions.3 If there is no prior information about this probability distribution, one option is to initialize it with the uniform distribution and gradually improve itbased on interaction with the user.T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–3132. Related workThere are currently very few research efforts in the planning literature that explicitly consider incompletely specifieduser preferences during planning. The most common approach for handling multiple objectives is to assume that a specificway of combining the objectives is available [44,20], and then search for an optimal plan with respect to this function.In a sense, such work can be considered as assuming a complete specification of user preferences. Other relevant workincludes [13], in which the authors devise a variant of the LAO* algorithm to search for a conditional plan with multipleexecution options for each observation branch, such that each of these options is non-dominated with respect to objectiveslike probability and cost to reach the goal.Our work can be seen as complementing the current research in planning with preferences. Under the umbrella ofplanning with preferences, most current work in planning focuses on synthesizing either a single solution plan underthe assumption that the user has no preferences, or a single best solution assuming that a complete knowledge of thepreferences is given to the planner. We, on the other hand, address the problem of synthesizing a set of plans when theknowledge of user preferences is either completely unknown,4 or partially specified.In the context of decision-theoretic planning, some work has considered Markov decision processes with imprecise rewardfunctions, which are used to represent user preferences on the visited states during execution. These methods howeverassume that the true reward function is revealed only during the execution of policies, whereas in our setting the incompleteknowledge about user preferences is resolved after the synthesis of plans but before plan execution (with some requiredeffort from the user). Many different notions of optimality for policies have been defined with respect to the incompletereward function, and the aim is to search for an optimal policy. The minimax regret criterion [45,46,55] has been defined forthe quality of policies when the true reward function is deterministic but unknown in a given set of functions. This criterionseeks an optimal policy that minimizes the loss (in terms of the expected discounted reward) assuming the presence of anadversary who selects a reward function, among all possible ones, to maximize the loss should a policy be chosen. Anothercriterion, called maximin, maximizes the worst-case expected reward also assuming an adversary acting optimally againstthe agent [38].Incomplete knowledge of user preferences can also be resolved with some effort from the user during plan generation.This idea unfortunately has not been considered in previous work on automated planning with preferences; there is howeversome work in two related areas, decision theory and preference elicitation. In [17], the user is provided with a sequence ofqueries, one at a time, until an optimal strategy with respect to the refined preference model meets a stopping criterion,which is then output to the user. That work ignores the user’s difficulty in answering questions that are posted, and insteademphasizes the construction of those which will give the best value of information at every step. This issue is overcome byBoutilier [6] which takes into account the cost of answering future elicitation questions in order to reduce the user’s effort.Boutilier et al. [9] consider the preference elicitation problem in which the incompleteness in user preferences is specifiedon both the set of features and the utility function. In systems implementing the example-critiquing interaction mechanism(e.g., [54,37]), a user critiques examples or options presented by the system, and this information is then used to revise thepreference model. The process continues until the user can pick a final choice from the k examples presented. There is oneimportant difference between these methods and ours: the “outcomes” or “configurations” in these scenarios are consideredgiven upfront (or can be obtained with low cost), whereas a feasible solution in many planning domains is computationallyexpensive to synthesize. As a result, an interactive method in which a sequence of plans or sets of plans needs to be generatedfor critiquing may not be suitable for our applications. Our approach, which presents a set of plans to the user to select,requires less effort from the user and at the same time avoids presenting a single optimal plan according to pessimistic oroptimistic assumptions, such as those used in the minimax regret and maximin criteria.The problem of reasoning with partially specified preferences has also long been studied in multi-attribute utility theory,though this work is also different from ours when ignoring the computation cost of “alternatives”. Given prior preferencestatements on how the user compares two alternatives, Hazen [31] considers additive and multiplicative utility functionswith unknown scaling coefficients, which represents the user partial preferences, and proposes algorithms for the consis-tency problem (i.e., if there exists a complete utility function consistent with the prior preferences), the dominance problem(i.e., whether the prior information implies that one alternative is preferred to another), and the potential optimality prob-lem (i.e., if there exists a complete utility function consistent with the prior preferences under which a particular alternativeis preference optimal). Ha and Haddawy [30] addressed the last two problems for multi-linear utility functions with un-known coefficients. These efforts are similar to ours in how the user preferences are partially represented. However, similarto the example-critiquing work mentioned above, they assume that the user is able to provide pairwise comparison betweenalternatives, which is then used to further constrain the set of complete utility functions representing user preferences.Our approach to generating diverse plan sets to cope with planning scenarios without knowledge of user preferences isin the same spirit as [52] and [40,41], though for different purposes. Myers, in particular, presents an approach to generatediverse plans in the context of an HTN planner by requiring the metatheory of the domain to be available and by usingbias on the metatheoretic elements to control search [41]. The metatheory of the domain is defined in terms of pre-definedattributes and their possible values covering roles, features and measures. Our work differs from this in two respects. First,4 Note that not knowing anything about the user’s preferences is different from assuming that the user has no preferences.4T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–31Fig. 1. The planning problem with unknown (A) and partially known (B) user preferences can be reformulated as the problem of synthesizing plan-setswith complete preferences over plan-sets (C).we focus on domain-independent distance measures. Second, we consider the computation of diverse plans in the contextof domain-independent planners.The problem of finding multiple butsimilar plans has been considered in the context of replanning [22]. Our workfocuses on the problem of finding diverse plans by a variety of measures when the user preferences exist but are eithercompletely unknown or partially specified.Outside the planning literature, our closest connection is first to the work by Gelain et al. [25], who consider softconstraint satisfaction problems (CSPs) with incomplete preferences. These are problems where quantitative values of someconstraints that represent their preferences are unspecified. Given such incomplete preferences, the authors are interestedin finding a single solution that is “necessarily” optimal (possibly with some effort from the user), i.e. an assignment ofvariables that is optimal in all possible ways that the currently unspecified preferences can be revealed. In a sense, thisnotion of optimality is very similar to the maximin criterion when seeking a solution that is optimal even with the “worst”selection of the unspecified preferences. Hebrard et al. [32] use a model closer to ours that focuses on the problem offinding similar/dissimilar solutions for CSPs, assuming that a domain-specific distance measure between two solutions isalready defined. It is instructive to note that unlike CSPs with finite variable domains, where the number of potentialsolutions is finite (albeit exponential), the number of distinct plans for a given problem can be infinite. Thus, effectiveapproaches for generating a good quality set of plans are even more critical.The challenges in finding a set of interrelated plans also bear some tangential similarities to the work in other re-search areas and applications. In information retrieval, Zhang et al. [56] describe how to return relevant as well as novel(non-redundant) documents from a stream of documents; their approach is to first find relevant docs and then find non-redundant ones. In adaptive web services composition, the causal dependencies among some web services might change atexecution time, and as a result the web service engine wants to have a set of diverse plans/compositions such that if there isa failure while executing one composition, an alternative may be used which is less likely to be failing simultaneously [15].However, if a user is helping in selecting the compositions, the planner could be first asked for a set of plans that may takeinto account the user’s trust in some particular sources and when she selects one of them, it is next asked to find plansthat are similar to the selected one. Another example of the use of diverse plans can be found in [39] in which test casesfor graphical user interfaces (GUIs) are generated as a set of distinct plans, each corresponding to a sequence of actionsthat a user could perform, given the user’s unknown preferences on how to interact with the GUI to achieve her goals. Thecapability of synthesizing multiple plans would also have potential application in case-based planning (e.g., [48]) where itis important to have a plan set satisfying a case instance. These plans can be different in terms of criteria such as resources,makespan and cost that can only be specified in the retrieval phase.The primary focus of our paper are scenarios where the end user is interested in single plans, but her preferences on thatsingle plan are either unknown or partially known to the planner. Our work shows that an effective technique for handlingthese scenarios is to generate a set of diverse plans and present them to the user (so she can select the single plan she ismost interested in). While we came to sets of plans as an intermediate step for handling lack of preference knowledge aboutsingle plans, there are also applications where the end user is in fact interested in sets of plans (aka “plan-sets”), and haspreferences over these plan-sets. Techniques for handling this latter problem do overlap with the techniques we develop inthis paper, but it is important to remember their distinct motivations. Fig. 1 makes these distinctions clear by consideringtwo orthogonal dimensions. The X-axis is concerned with whether the end user is interested in single plans or plan-sets.The Y-axis is concerned with the degree of the knowledge of user preferences.In this space, traditional planning with preferences corresponds to (single-plan, full-knowledge). The problemswe are considering in this paper are (single-plan, no-knowledge) and (single-plan, partial-knowledge),respectively. A contribution of our work is to show that these two latter problems can be reformulated as (plan-set,T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–315full-knowledge), where the quality of plan-sets is evaluated by the internal diversity measures we will develop. Thereare also compelling motivations to study the (plan-set, full-knowledge) problem in its own right if the end useris explicitly interested in plan-sets. This is the case, for example, in applications such as intrusion detection [5], where theobjective is to come up with a set of plans that can inhibit system breaches, or option generation in mission planning, wherethe commander wants a set of options not to immediately commit to one of them, but rather to study their trade-offs.The techniques we develop in this paper are related but not equivalent to the techniques and inputs for solving thatplan-set generation problem. In particular, when the end users are interested in plan sets, they may have preferences onplan-sets, not on single plans.5 This means that (i) we need a language support for expressing preferences on plan sets suchas the work on DD-PREF language [18], and (ii) our planner has to take as input and support a wide variety of plan-setpreferences (in contrast to our current system where the plan-set preference is decided internally — in terms of distancemeasures for unknown (single plan) preference case, and in terms of IPF measure for partially known preference cases).63. Background and notation(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3). Note that this ordering can be either partial (i.e. it is possible that neither p (cid:4) pGiven a planning problem with the set of solution plans S, a user preference model is a transitive, reflexive relation in(cid:3)means that the user prefers p at(cid:3) (cid:4) p holds —nor p(cid:3) (cid:4) p holds). A plan p is considered (strictly) more(cid:3) (cid:4) p. A plan. A plan set P ⊆ S is considered more preferred, and they are incomparable if there exists p ∈ P andS × S, which defines an ordering between two plans p and pleast as much as pin other words, they are incomparable), or total (i.e. either p (cid:4) p, denoted by p ≺ ppreferred than a plan pp is an optimal (i.e., most preferred) plan if p (cid:4) pthan P (cid:3) ⊆ S, denoted by P (cid:7) P (cid:3)(cid:3) ∈ P (cid:3)psuch that p and p(cid:3) (cid:2) p, and they are equally preferred if p (cid:4) pin S. Intuitively, p (cid:4) pfor any p ∈ P and pfor any other plan pare incomparable., if p (cid:4) p, if p ≺ p(cid:3) ∈ P (cid:3)and por p, pThe ordering (cid:4) implies a partition of S into disjoint plan sets (or classes) S0, S1, . . . (S0 ∪ S1 ∪ · · · = S, Si ∩ S j = ∅) suchthat plans in the same set are equally preferred, and for any set Si , S j , either Si (cid:7) S j , S j (cid:7) Si , or they are incomparable.The partial ordering between these sets can be represented as a Hasse diagram [3] where the sets are vertices, and thereis an (upward) edge from S j to Siif Si (cid:7) S j and there is not any Sk in the partition such that Si (cid:7) Sk (cid:7) S j . Wedenote l(Si) as the “layer” of the set Si in the diagram, assuming that the most preferred sets are placed at the layer 0,and l(S j) = l(Si) + 1 if there is an edge from S j to Si . A plan in a set at a layer of smaller value, in general, is eithermore preferred than or incomparable with ones at layers of higher values.7 Fig. 2 shows two examples of Hasse diagramsrepresenting a total and partial preference ordering between plans. We will use this representation of plan sets in Section 4to justify the design of our quality measures for plan sets when no knowledge of user preferences is available.(cid:3)(cid:3)(cid:3)(cid:3)The preference model of a user can be explicitly specified by iterating the set of plans and providing the orderingbetween any two of them, and in this case answering queries such as comparing two plans, finding a most preferred(optimal) plan becomes an easy task. This is, however, practically infeasible since synthesizing a plan in itself is hard,and the solution space of a planning problem can be infinite. Many preference languages, therefore, have been proposedto represent the relation (cid:4) in a more compact way, and serve as starting points for algorithms to answer queries. Mostpreference languages fall into the following two categories:(cid:3) ⇔ V (p) (cid:2) V (p• Quantitative languages define a value function V : S → R which assigns a real number to each plan, with a precise(cid:3)). Although this function is defined differently in many languages, at a highinterpretation that p (cid:4) plevel it combines the user preferences on various aspects of plan that can be measured quantitatively. For instance, inthe context of decision-theoretic planning [8], the value function of a policy is defined as the expected rewards of statesthat are visited when the policy executes. In partial satisfaction (over-subscription) planning (PSP) [49,53], the qualityof plans is defined as its total rewards of soft goals achieved minus its total action costs. In PDDL2.1 [23], the valuefunction is an arithmetic function of numerical fluents such as plan makespans, fuel used etc., and in PDDL3 [26] itis enhanced with individual preference specifications over state trajectory constraints, defined as formulae with modaloperators having their semantics consistent with that used for modal operators in linear temporal logic [43] and othermodal temporal logics.5 This is akin to a college having explicit preferences on its freshman classes — such as student body diversity — over and above their preferences onindividual students.6 As an analogy, partial order planning was originally invented to speed up plan generation in classical planning — where the end solutions are all actionsequences. Of course, the technique of partial order planning is also useful when the end user is interested not in action sequences but concurrent plans. Inthis case however, we need a preference language that allows the user to express preferences over concurrent plans, and we will also have to relax somespecific simplifications in normal partial order planners — such as single contributor causal link semantics. Another interesting analogy is between MDPwith discrete state space which becomes POMDPS in the context of partial observability. The POMDPS can be handled by compiling them back to MDPs butwith continuous state spaces (specifically, MDPs in the space of belief states). It is also possible for an end user to be interested in (fully observable) MDPsin continuous state spaces. While this problem is related to the problem of solving POMDPs as MDPs in belief-space, it also has important differences. Inparticular, the reward function in the continuous MDP will be in terms of continuous states, while in the case of POMDPs is still in terms of the underlyingdiscrete states. Further, some of the efficiency tricks that the techniques for POMDPs employ based on the fact that the value function has to be convex inthe belief-space will no longer hold in general continuous MDPs.7 If (cid:4) is a total ordering, then plans at a layer of smaller value are strictly more preferred than ones at a layer of higher value.6T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–31Fig. 2. The Hasse diagrams and layers of plan sets implied by two preference models. In (a), S1 (cid:7) S2 (cid:7) S3, and any two plans are comparable. In (b), onthe other hand, S1 (cid:7) S2 (cid:7) S4, S1 (cid:7) S3, and each plan in S3 is incomparable with plans in S2 and S4.Fig. 3. The metamodel [11]. The user preference model is compactly represented by a preference language, on which algorithms perform tasks of answeringqueries.• Qualitative languages provide qualitative statements that are more intuitive for lay users to specify. A commonly usedlanguage of this type is CP-networks [7], where the user can specify her preference statements on values of plan at-tributes, possibly given specification of others (for instance, “Among tickets with the same prices, I prefer airline A toairline B.”). Another example is LPP [2] in which the statements can be specified using LTL formulae, and possibly beingaggregated in different ways.Fig. 3 shows the conceptual relation of preference models, languages and algorithms. We refer the reader to the workby Brafman and Domshlak [11] for a more detailed discussion on this metamodel, and by Baier and McIlraith [1] for anoverview of different preference languages used in planning with preferences.From the modeling point of view, in order to design a suitable language capturing the user preference model, the modelershould be provided with some knowledge of the user’s interest that affects the way she evaluates plans (for instance, flightduration and ticket cost in a travel planning scenario). Such knowledge in many cases, however, cannot be completelyspecified. Our purpose therefore is to present a bounded set of plans to the user in the hope that it will increase the chancethat she can find a desired plan. In the next section, we formalize the quality measures for plan sets in two situations whereeither no knowledge of the user preferences or only part of them is given.4. Quality measures for plan sets4.1. Syntactic distance measures for unknown preference casesWe first consider the situation in which the user has some preferences for solution plans, but the planner is not providedwith any knowledge of such preferences. It is therefore impossible for the planner to assume any particular form of prefer-ence language representing the hidden preference model. There are two issues that need to be considered in formalizing aquality measure for plan sets:• What are the elements of plans that can be involved in a quality measure?• How should a quality measure be defined using those elements?For the first question, we observe that even though users are normally interested in some high level features of plans thatare relevant to them, many of those features can be considered as “functions” of base level elements of plans. For instance,the set of actions in the plan determines the makespan of a (sequential) plan, and the sequence of states when the planexecutes gives the total reward of goals achieved. We consider the following three types of base level features of planswhich could be used in defining quality measure, independently of the domain semantics:T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–317Table 1The pros and cons of different base level elements of plan.BasisActionsStatesCausal linksProsConsDoes not require problem informationNo problem information is usedNot dependent on any specific planrepresentationConsiders causal proximity of state transitions(action) rather than positional (physical)proximityNeeds an execution simulator to identify statesRequires domain theory• Actions that are present in plans, which define various high level features of the plans such as its makespan, executioncost, etc. that are of interest to the user whose preference model could be represented with preference languages suchas in PSP and PDDL2.1.• Sequence of states that the agent goes through, which captures the behaviors resulting from the execution of plans. In manypreference languages defined using high level features of plans such as the reward of goals collected (e.g., PSP), of thewhole state (e.g., MDP), or the temporal relation between propositions occurring in states (e.g. PDDL3, PP [50] and LPP[24]), the sequence of states can affect the quality of plan evaluated by the user.• The causal links representing how actions contribute to the goals being achieved, which measures the causal structures of plans.8These plan elements can affect the quality of plans with respect to the languages mentioned above, as the causal linkscapture both the actions appearing in a plan and the temporal relation between actions and variables.A similar conceptual separation of features has also been considered recently in the context of case-based planning bySerina [48], in which planning problems were assumed to be well classified, in terms of costs to adapt plans of one problemto solve another, in some unknown high level feature space. The similarity between problems in the space was implicitlydefined using kernel functions of their domain-independent graph representations. In our situation, we aim to approximatequality of plan sets on the space of features that the user is interested by using distance between plans with respect to thebase level features mentioned above.Table 1 gives the pros and cons of using the different base level elements of plan. We note that if actions in theplans are used in defining quality measure of plan sets, no additional problem or domain theory information is needed. Ifplan behaviors are used as base level elements, the representation of the plans that bring about state transition becomesirrelevant since only the actual states that an execution of the plan will go through are considered. Hence, we can nowcompare plans of different representations, e.g., four plans where the first is a deterministic plan, the second is a contingentplan, the third is a hierarchical plan and the fourth is a policy encoding probabilistic behavior. If causal links are used, thenthe causal proximity among actions is now considered rather than just physical proximity in the plan.Given those base level elements, the next question is how to define a quality measure of plan sets using them. Recallthat without any knowledge of the user preferences, there is no way for the planner to assume any particular preferencelanguage, thus the motivation behind the choice of quality measure should come from the hidden user preference model.Given a Hasse diagram induced from the user preference model, a k-plan set that will be presented to the user can beconsidered to be randomly selected from the diagram. The probability of having one plan in the set classified in a class atthe optimal layer of the Hasse diagram would increase when the individual plans are more likely to be at different layers,and this chance in turn will increase if they are less likely to be equally preferred by the user.9 On the other hand, theeffect of base level elements of a plan on high level features relevant to the user suggests that plans similar with respect tobase level features are more likely to be close to each other on the high level feature space determining the user preference model.In order to define a quality measure using base level features of plans, we proceed with the following assumption: plansthat are different from each other with respect to the base level features are less likely to be equally preferred by the user, in otherwords they are more likely to be at different layers of the Hasse diagram. With the purpose of increasing the chance of having aplan that the user prefers, we propose the quality measure of plan sets as its diversity measure, defined using the distanceS → R of a planbetween two plans in the set with respect to a base level element. More formally, the quality measure ζ : 2set P can be defined as either the minimal, maximal, or average distance between plans:• minimal distance:ζmin(P) = minp,p(cid:3)∈P(cid:2)δp, p(cid:3)(cid:3),(1)8 A causal link a1 → p − a2 records that a proposition p is produced by a1 and consumed by a2.9 To see this, consider a diagram with S1 = {p1, p2} at layer 0, S2 = {p3} and S3 = {p4} at layer 1, and S4 = {p5} at layer 2. Assuming that we randomly2 . However, if they are forced toselect a set of 2 plans. If those plans are known to be at the same layer, then the chance of having one plan at layer 0 is 1be at different layers, then the probability will be 34 .8T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–31• maximal distance:ζmax(P) = maxp,p(cid:3)∈P(cid:2)δp, p(cid:3)(cid:3),• average distance:ζavg(P) =(cid:4)|P|(cid:5)−12(cid:6)(cid:2)δp, p(cid:3)(cid:3),×p,p(cid:3)∈Pwhere δ : S × S → [0, 1] is the distance measures between two plans.(2)(3)4.1.1. Distance measures between plansThere are various choices on how to define the distance measure δ(p, p(cid:3)) between two plans using plan actions, sequenceof states or causal links, and each way can have different impact on the diversity of plan set on the Hasse diagram. In thefollowing, we propose distance measures in which a plan is considered as (i) a set of actions and causal links, or (ii)sequence of states the agent goes through, which could be used independently of plan representation (e.g. total order,partial order plans).• Plan as a set of actions or causal links: given a plan p, let A(p) and C(p) be the set of actions or causal links of p. Thecan be defined as the ratio of the number of actions (causal links) that do notdistance between two plans p and pappear in both plans to the total number of actions (causal links) appearing in one of them:(cid:3)(cid:2)δap, p(cid:3)(cid:3)= 1 −(cid:2)δclp, p(cid:3)(cid:3)= 1 −(cid:3))|| A(p) ∩ A(p| A(p) ∪ A(p(cid:3))|(cid:3))||C(p) ∩ C(p|C(p) ∪ C(p(cid:3))|,.(4)(5)(cid:3)• Plan as a sequence of states: given two sequences of states (s0, s1, . . . , sk) and (splans p and poptions in defining distance measure between p and pdefined as the average of the distances between state pairs (si, sto contribute maximally (i.e., one unit) into the difference between two plans:(cid:3)(cid:3)k(cid:3) ) resulting from executing two0, s(cid:3) (cid:2) k. Since the two sequences of states may have different lengths, there are various, and we consider here two options. In the first one, it can be(cid:3)), and each state sk(cid:3)+1, . . . , sk is considered(cid:3)i) (0 (cid:2) i (cid:2) k, and assume that k(cid:3)1, . . . , s(cid:3)(cid:2)δsp, p(cid:3)(cid:3)= 1k×(cid:2)(cid:4)si, s(cid:3)(cid:3)i(cid:8)+ k − k(cid:3).(cid:7)(cid:3)(cid:6)ki=1On the other hand, we can assume that the agent continues to stay at the goal state safter executing p, and the measure can be defined as follows:(cid:3)(cid:2)δsp, p(cid:3)(cid:3)= 1k×(cid:7)(cid:3)(cid:6)ki=1(cid:2)(cid:4)si, s(cid:3)(cid:3)i+k(cid:6)i=k(cid:3)+1(cid:8)(cid:3).(cid:2)(cid:4)(cid:3)si, sk(cid:3)(cid:3)) between two states s, sThe distance measure (cid:4)(s, s(cid:3)||s ∩ s|s ∪ s(cid:3)|= 1 −s, s(cid:4)(cid:3)(cid:2).(cid:3)(cid:3)used in those two measures is defined as:(6)(cid:3)k(cid:3) in the next (k − k(cid:3)) time steps(7)(8)These distance metrics would consider long plans to be distant from short plans. In the absence of information aboutuser preferences, we cannot rule out the possibility that the unknown preference might actually favor longer plans (e.g., it ispossible that a longer plan has cheaper actions, making it attractive for the user). In the implementation of a system forcomputing diverse plans, while these distance measures affect which part of the (partial plan) search space a planner tendsto focus on, in general the length of resulting plans especially depends on whether the search strategy of the planner at-tempts to minimize it. In our experiments, we will use two types of planners employing exhaustive search and local search,respectively. For the second, which does not attempt to minimize plan length, we will introduce additional constraints intothe search mechanism that, by balancing the differences in the generated diverse plans, also attempts to control the relativesize of resulting plans.Example. Fig. 4 shows three plans p1, p2 and p3 for a planning problem where the initial state is {r1} and the goalpropositions are {r3, r4}. The specification of actions are shown in the table. The action sets of the first two plans ({a1, a2, a3}and {a1, a2, a4}) are quite similar (δa(p1, p2) = 0.5), but the causal links which involve a3 (a2 → r3 − a3, a3 → r4 − aG )T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–319Fig. 4. Example illustrating plans with base-level elements. aI and aG denote dummy actions producing the initial state and consuming the goal propositions,respectively (see text for more details).and a4 (aI → r1 − a4, a4 → r4 − aG ) make their difference more significant with respect to causal-link based distance(δcl(p1, p2) = 47 ). Two other plans p1 and p3, on the other hand, are very different in terms of action sets (and thereforethe sets of causal links): δa(p1, p3) = 1, but they are closer in term of state-based distance ( 1318 as defined in Eq. (6), and0.5 if defined in Eq. (7)).4.2. Integrated Preference Function (IPF) for partial preference casesWe now discuss a quality measure for plan sets in the case when the user preference is partially expressed. In par-ticular, we consider scenarios in which the preference model can be represented by some quantitative language with anincompletely specified value function of high level features. As an example, the quality of plans in PDDL2.1 [23] and PDDL3[26] are represented by a metric function combining metric fluents and preference statements on state trajectory with pa-rameters representing their relative importance. While providing a convenient way to represent preference models, suchparameterized value functions present an issue of obtaining reasonable values for the relative importance of the features.A common approach to model this type of incomplete knowledge is to consider those parameters as a vector of randomvariables, whose values are assumed to be drawn from a distribution. This is the representation that we will follow.To measure the quality of plan sets, we propose the usage of Integrated Preference Function (IPF) [14], which has beenused to measure the quality of a solution set in a wide range of multi-objective optimization problems. The IPF measureassumes that the user preference model can be represented by two factors: (1) a probability distribution h(α) of parameter(cid:9)α∈Λ h(α) dα = 1 (in the absence of any special information about thevector α, whose domain is denoted by Λ, such thatdistribution, h(α) can be assumed to be uniform), and (2) a value function V (p, α) : S × Λ → R combines different objectivefunctions into a single real-valued quality measure for plan p. We assume that such objective functions represent aspects ofplans that have to be minimized, such as makespan and execution cost. This incomplete specification of the value functionrepresents a set of candidate preference models, for each of which the user will select a different plan, the one with thebest value, from a given plan set P ⊆ S. The IPF value of solution set P is defined as:(cid:10)IPF(P) =h(α)V (pα, α) dα,α∈Λ(9)with pα = argminp∈P V (p, α), i.e., the best solution in P according to V (p, α) for each given α value. Let p−1of α values for which p is an optimal solution according to V (p, α), i.e., V (p, α) (cid:2) V (pα , p(cid:3), α) for all α ∈ p−1α be a range(cid:3) ∈ P \ {p}.As pα is piecewise constant, the IPF(P) value can be computed as:(cid:11) (cid:10)IPF(P) =(cid:6)p∈P(cid:12)Let P ∗ = {p ∈ P: p−1α(cid:14)= ∅}; then we have:h(α)V (p, α) dα.α∈p−1α(10)10T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–31IPF(P) = IPF(cid:3)(cid:2)P ∗=(cid:12)h(α)V (p, α) dα.(cid:11) (cid:10)(cid:6)p∈P ∗α∈p−1α(11)Since P ∗is the set of plans that are optimal for some specific parameter vector, IPF(P) now can be interpreted as theexpected value that the user can get by selecting the best plan in P . Therefore, the set P ∗of solutions (known as lowerconvex hull of P ) with the minimal IPF value is most likely to contain the desired solutions that the user wants, and inessence it is a good representative of the plan set P .−1The requirement for IPF(P) to exist is that the function h(α)V (p, α) needs to be integrable over the pα domains.10 Theα for p ∈ P ∗−1complication in computing the IPF(P) value is in deriving a partition of Λ, the domain of α, into the ranges p,and the computation of integration over those ranges of the parameter vector. As we will describe, the computational effortto obtain IPF(P) is negligible in our work with two objectives. Although it is beyond the scope of this article, we referthe readers to Kim et al. [35] for the calculation of the measure when the value function is a convex combination of highnumber of objectives, and to Bozkurt et al. [10] for the weighted Tchebycheff value function with two and three criteria.In this work, in order to make our discussion on generating plan sets concrete, we will concentrate on metric temporalplanning where each action a ∈ A has a duration da and an execution cost ca. The planner needs to find a plan p =(cid:15)a1, . . . , an(cid:16), which is a sequence of actions that is executable and achieves all goals. The two most common plan qualitymeasures are: makespan, the total execution time of p, plan cost, the total execution cost of all actions in p. Both of themare high level features that can be affected by the actions in the plan. In most real-world applications, these two criteriacompete with each other in that shorter plans usually have higher cost and vice versa. We use the following assumptions:• The desired objective function involves minimizing both components: time(p) measures the makespan of the plan pand cost(p) measures its execution cost.• The quality of a plan p is a convex combination: V (p, w) = w × time(p) + (1 − w) × cost(p), where weight w ∈ [0, 1]represents the trade-off between the two competing objective functions.• The belief distribution of w over the range [0, 1] is known. If the user does not provide any information or we have notlearned anything about the preference on the trade-off between time and cost of the plan, then the planner can assumea uniform distribution (and improve it later using techniques such as preference elicitation).Given that the exact value of w is unknown, our purpose is to find a bounded representative set of non-dominated11plans minimizing the expected value of V (p, w) with regard to the given distribution of w over [0, 1].IPF for metric temporal planning: The user preference model in our target domain of temporal planning is represented by aconvex combination of the time and cost quality measures, and the IPF measure now is called Integrated Convex Preference(ICP). Given a set of plans P ∗, let t p = time(p) and c p = cost(p) be the makespan and total execution cost of plan p ∈ P ∗,the ICP value of P ∗with regard to the objective function V (p, w) = w × t p + (1 − w) × c p and the parameter vectorα = (w, 1 − w) (w ∈ [0, 1]) is defined as:(cid:3)(cid:2)P ∗=ICPw i(cid:10)k(cid:6)i=1w i−1(cid:2)h(w)w × t pi+ (1 − w) × c pi(cid:3)dw,(12)where w 0 = 0, wk = 1 and V (pi, w) (cid:2) V (p, w) for all p ∈ P ∗ \ {pi} and every w ∈ [w i−1, w i]. In other words, we divide[0, 1] into k non-overlapping regions such that in each region (w i−1, w i) there is an optimal solution pi ∈ P ∗according tothe value function.We select the IPF/ICP measure to evaluate our solution set for the following reasons:• From the perspective of decision theory, presenting a plan set P ⊆ S to the user, among all possible subsets of S, canbe considered as an “action” with possible “outcomes” p ∈ P that can occur (i.e., being selected by the user) withh(α) dα. Since the IPF(P) measures the expected utility of P , presenting a set of plans with anprobabilityoptimal IPF value is a rational action consistent with the current knowledge of the user preferences.(cid:9)α∈p−1α• If P1 dominates P2 in the set Pareto dominance sense, then IPF(P1) (cid:2) IPF(P2) for any type of weight density functionh(α) [14], and this property also holds with any scaling of the objective values for ICP measure [21]. Intuitively, thismeans that if we “merge” those two plan sets, all non-dominated plans “extracted” from the resulting set are thosein P1.10 Although a value function can take any form satisfying axioms about preferences, the user preferences in many real-world scenarios can be representedor approximated with an additive value function [47], including the setting in our application, which is integrable over the parameter domain. Since h(α) isintegrable, so is the product h(α)V (p, α) in those situations.11 A plan p1 is dominated by p2 if time(p1) (cid:2) time(p2) and cost(p1) (cid:2) cost(p2) and at least one of the inequalities is strict.T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–3111Fig. 5. Solid dots represent plans in the Pareto set (p1, p2, p3, p5, p7). Connected dots represent plans in the lower convex hull (p1, p3, p7) giving optimalICP value for any distribution on trade-off between cost and time.• The value of IPF(P) is monotonically non-increasing over increasing sequences of solution sets, and the set of plansoptimal according to the utility function V (p, α), i.e., the efficient frontier, has the minimal IPF value [14]. Thus, themeasure can be used as an indicator for the quality of a plan set during the search towards the efficient frontier.Empirically, extensive results on scheduling problems in [21] have shown that ICP measure “evaluates the solution quality ofapproximation robustly (i.e., similar to visual comparison results) while other alternative measures can misjudge the solution quality”.Example. Fig. 5 shows our running example in which there are a total of 7 plans with their time(p) and cost(p) values asfollows: p1 = {4, 25}, p2 = {6, 22}, p3 = {7, 15}, p4 = {8, 20}, p5 = {10, 12}, p6 = {11, 14}, and p7 = {12, 5}. Among these7 plans, 5 of them belong to a Pareto optimal set of non-dominated plans: Pp = {p1, p2, p3, p5, p7}. The other two plansare dominated by some plans in Pp : p4 is dominated by p3 and p6 is dominated by p5. Plans in Pp are depicted insolid dots, and the set of plans P ∗ = {p1, p3, p7} that are optimal for some specific value of w is highlighted by connecteddots. In particular, p7 is optimal when w ∈ [w 0 = 0, w 1 = 23 can be derived from the satisfaction of the3constraints V (p7, w) (cid:2) V (p, w), p ∈ {p1, p3}. Similarly, p3 and p1 are respectively optimal for w ∈ [w 1 = 2] and13 , w 3 = 1]. Assuming that h(w) is a uniform distribution, the value of ICP(P) can therefore be computed asw ∈ [w 2 = 10follows:] where w 1 = 23 , w 2 = 1013(cid:3)(cid:2)P ∗=ICP23(cid:10)023(cid:10)=1013(cid:10)h(w)V (p7, w) dw +h(w)V (p3, w) dw +231(cid:10)1013h(w)V (p1, w) dw(cid:13)(cid:14)12w + 5(1 − w)dw +1013(cid:10)(cid:13)(cid:14)7w + 15(1 − w)dw +(cid:13)(cid:14)4w + 25(1 − w)dw1(cid:10)10130≈ 7.32.23In the next two Sections 5 and 6, we investigate the problem of generating high quality plan sets for two cases men-tioned: when no knowledge about the user preferences is given, and when part of it is given as input to the planner.5. Generating diverse plan set in the absence of preference knowledgeIn this section, we describe approaches to searching for a set of diverse plans with respect to a measure defined withbase level elements of plans as discussed in the previous section. In particular, we consider the quality measure of plan setas the minimal pairwise distance between any two plans, and generate a set of plans containing k plans with the quality ofat least a predefined threshold d. As discussed earlier, by diversifying the set of plans on the space of base level features, itis likely that plans in the set would cover a wide range of space of unknown high level features, increasing the possibilitythat the user can select a plan close to the one that she prefers. The problem is formally defined as follows:dDISTANTkSET: Find P with P ⊆ S, |P| = k and ζ (P) = minp,q∈Pδ(p, q) (cid:3) d,where any distance measure between two plans formalized in Section 4.1.1 can be used to implement δ(p, p(cid:3)).12T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–31Fig. 6. An example of (a portion of) a planning graph. At each level, propositions presenting in a previous one and no-op actions are omitted, and at levelk only the actions used to support the goals are shown for simplification.We now consider two representative state-of-the-art planning approaches in generating diverse plan sets. The first oneis GP-CSP [19] representing constraint-based planning approaches, and the second one is LPG [27] that uses an efficientlocal-search based approach. We use GP-CSP to compare the relation between different distance measures in diversifyingplan sets. On the other hand, with LPG we stick to the action-based distance measure, which is shown experimentally tobe the most difficult measure to enforce diversity (see below), and investigate the scalability of heuristic approaches ingenerating diverse plans.5.1. Finding diverse plan set with GP-CSPThe GP-CSP planner [19] converts the planning graph of Graphplan [4] into a CSP encoding, and solves it using a standardCSP solver. A planning graph is a data structure consisting of alternating levels of proposition set and action set. The setof propositions present in the initial state is the proposition set at the zeroth level of the graph. Given a k-level planninggraph, all actions whose preconditions are present in the proposition set of level k are introduced into the next level k + 1.In addition, one “noop” action is also added for each proposition at level k, which are both the precondition and effect ofthe action. The set of propositions at level k + 1 is then constructed by taking the union of additive effects of all actions atthe same level. This expansion process also computes and propagates a set of “mutex” (i.e., mutually exclusive) constraintsbetween pairs of propositions and actions at each level. At the first level, the computation starts by marking as mutexthe actions that are statically interfering with each other (i.e., their preconditions and effects are inconsistent). The mutexconstraints are then propagated as follows: (i) at level k, two propositions are mutually exclusive if any action at level kachieving one of them is mutually exclusive with all actions at the same level supporting the other one; (ii) two actions atlevel k + 1 are mutex if they are statically interfering or if one of the precondition of the first action is mutually exclusivewith one of the precondition of the second action.The planning graph construction stops at a level T at which one of the following conditions is satisfied: (i) all goalpropositions are present in the proposition set of level T without any mutex constraints between them, or (ii) two consec-utive levels of the graph have the same sets of actions, propositions and mutex constraints. In the first case, the Graphplanalgorithm searches this graph backward (i.e., from level T ) for a valid plan, and continuing the planning graph expansionbefore a new search if no solution exists. In the second condition, the problem is provably unsolvable. Fig. 6, which is takenfrom Do and Kambhampati [19], shows an example of two levels of a planning graph. The top-level goals are G 1, . . . , G 4supported by actions A1, . . . , A4 at the same level k. Each of these actions has preconditions in the set {P 1, . . . , P 6} appear-ing at level k − 1, which are in turn supported by actions A5, . . . , A11 at that level. The action pairs { A5, A9}, { A7, A11} and{ A6, A8} are mutually exclusive, however these mutex relations are not enough to make any pair of propositions at levelk − 1 mutually exclusive.The GP-CSP planner replaces the search algorithm in Graphplan by first converting the planning graph data structureinto a constraint satisfaction problem, and then invoking a solver to find an assignment of the encoding, which representsa valid plan for the original planning problem. In the encoding, the CSP variables correspond to the predicates that have tobe achieved at different levels in the planning graph (different planning steps) and their possible values are the actions thatcan support the predicates. For each CSP variable representing a predicate p, there are two special values: (i) ⊥: indicatesthat a predicate is not supported by any action and is false at a particular level/planning-step; (ii) “no-op”: indicates thatthe predicate is true at a given level i because it was made true at some previous level j < i and no other action deletes pbetween j and i. Constraints encode the relations between predicates and actions: (1) mutual exclusion relations betweenpredicates and actions; and (2) the causal relationships between actions and their preconditions. Fig. 7 shows the CSPencoding corresponding the portion of the planning graph in Fig. 6.T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–3113Variables:Domains:G 1, . . . , G 4, P 1, . . . , P 6G 1 : { A1, ⊥}, G 2 : { A2, ⊥}, G 3 : { A3, ⊥}, G 4 : { A4, ⊥}P 1 : { A5, ⊥}, P 2 : { A6, A11, ⊥}, P 3 : { A7, ⊥}P 4 : { A8, A9, ⊥}, P 5 : { A10, ⊥}, P 6 : { A10, ⊥}Constraints (Mutex):Constraints (Activity):P 1 = A5 ⇒ P 4 (cid:14)= A9P 2 = A6 ⇒ P 4 (cid:14)= A8P 2 = A11 ⇒ P 3 (cid:14)= A7G 1 = A1 ⇒ P 1 (cid:14)= ⊥ ∧ P 2 (cid:14)= ⊥ ∧ P 3 (cid:14)= ⊥G 2 = A2 ⇒ P 4 (cid:14)= ⊥G 3 = A3 ⇒ P 5 (cid:14)= ⊥G 4 = A4 ⇒ P 1 (cid:14)= ⊥ ∧ P 6 (cid:14)= ⊥Initial state:G 1 (cid:14)= ⊥ ∧ G 2 (cid:14)= ⊥ ∧ G 3 (cid:14)= ⊥ ∧ G 4 (cid:14)= ⊥Fig. 7. The CSP encoding for the example planning graph.5.1.1. Adapting GP-CSP to different distance metricsWhen the above planning encoding is solved by any standard CSP solver, it will return a solution containing (cid:15)var, value(cid:16) ofthe form {(cid:15)x1, y1(cid:16), . . . , (cid:15)xn, yn(cid:16)}. The collection of xi where yi (cid:14)= ⊥ represents the facts that are made true at different timesteps (plan trajectory) and can be used as a basis for the state-based distance measure12; the set of ( yi (cid:14)= ⊥) ∧ ( yi (cid:14)= noop)represents the set of actions in the plan and can be used for action-based distance measure; lastly, the assignments (cid:15)xi, yi(cid:16)themselves represent the causal relations and can be used for the causal-based distance measure.However, there are some technical difficulties we need to overcome before a specific distance measure between plans canbe computed. First, the same action can be represented by different values in the domains of different variables. Considera simple example in which there are two facts p and q, both supported by two actions a1 and a2. When setting up theCSP encoding, we assume that the CSP variables x1 and x2 are used to represent p and q. The domains for x1 and x2 are{v 11, v 12} and {v 21, v 22}, both representing the two actions {a1, a2} (in that order). The assignments {(cid:15)x1, v 11(cid:16), (cid:15)x2, v 21(cid:16)}and {(cid:15)x1, v 12(cid:16), (cid:15)x2, v 22(cid:16)} have a distance of 2 in traditional CSP because different values are assigned for each variable x1and x2. However, they both represent the same action set {a1, a2} and thus lead to the plan distance of 0 if we use theaction-based distance in our plan comparison. Therefore, we first need to translate the set of values in all assignments backto the set of action instances before doing comparison using action-based distance. The second complication arises for thecausal-based distance. A causal link a1 → p − a2 between two actions a1 and a2 indicates that a1 supports the preconditionp of a2. However, the CSP assignment (cid:15)p, a1(cid:16) only provides the first half of each causal-link. To complete the causal-link,we need to look at the values of other CSP assignments to identify action a2 that occurs at the later level in the planninggraph and has p as its precondition. Note that there may be multiple “valid” sets of causal-links for a plan, and in theimplementation we simply select causal-links based on the CSP assignments.5.1.2. Making GP-CSP return a set of plansTo make GP-CSP return a set of plans satisfying the dDISTANTkSET constraint using one of the three distance measures,we add “global” constraints to each original encoding to enforce d-diversity between every pair of solutions. When eachglobal constraint is called upon by the normal forward checking and arc-consistency checking procedures inside the defaultsolver to check if the distance between two plans is over a predefined value d, we first map each set of assignments toan actual set of actions (action-based), predicates that are true at different plan-steps (state-based) or causal-links (causal-based) using the method discussed in the previous section. This process is done by mapping all (cid:15)var, value(cid:16) CSP assignmentsinto action sets using a call to the planning graph, which is outside of the CSP solver, but works closely with the generalpurpose CSP solver in GP-CSP. The comparison is then done within the implementation of the global constraint to decide iftwo solutions are diverse enough.We investigate two different ways to use the global constraints:1. The parallel strategy to return the set of k plans all at once. In this approach, we create one encoding that containsk identical copies of each original planning encoding created using the GP-CSP planner. The k copies are connectedtogether using k(k − 1)/2 pairwise global constraints. Each global constraint between the ith and jth copies ensuresthat two plans represented by the solutions of those two copies will be at least d distant from each other. If each copyhas n variables, then this constraint involves 2n variables.2. The greedy strategy to return plans one after another. In this approach, the k copies are not setup in parallel up-front,but sequentially. We add to the ith copy one global constraint to enforce that the solution of the ith copy shouldbe d-diverse from any of the earlier i − 1 solutions. The advantage of the greedy approach is that each CSP encoding12 We implement the state-based distance between plans as defined in Eq. (6).14T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–31Table 2Average solving time (in seconds) to find a plan using greedy (first 3 rows) and by random (last row) approaches.δaδsδclRandomlog-easy0.0870.0770.1900.327rocket-a7.6489.3546.54215.480log-a1.0211.8451.0638.982log-b6.1446.3126.31488.040log-c8.0838.6678.437379.182log-d178.633232.475209.2876105.510Table 3Comparison of the diversity in the plan sets returned by the random and greedy approaches. Cases where random approach is better than greedy approachare marked with *.δaδsδcllog-easy0.041/0.350.035/0.40.158/0.8rocket-a0.067/0.650.05/0.80.136/0.95log-a0.067/0.250.096/0.50.256/0.55log-b0.131/0.1*0.147/0.40.459/0.15*log-c0.126/0.150.140/0.50.346/0.3*log-d0.128/0.20.101/0.50.349/0.45is significantly smaller in terms of the number of variables (n vs. k × n), smaller in terms of the number of globalconstraints (1 vs. k(k − 1)/2), and each global constraint also contains lesser number of variables (n vs. 2 × n).13 Thus,each encoding in the greedy approach is easier to solve. However, because each solution depends on all previouslyfound solutions, the encoding can be unsolvable if the previously found solutions comprise a bad initial solution set.5.1.3. Empirical evaluationWe implemented the parallel and greedy approaches discussed earlier for the three distance measures and tested themwith the benchmark set of Logistics problems provided with the Blackbox planner [34]. All experiments were run on a LinuxPentium 4, 3 GHz machine with 512 MB RAM. For each problem, we test with different d values ranging from 0.01 (1%) to0.95 (95%)14 and k increases from 2 to n where n is the maximum value for which GP-CSP can still find solutions withinthe plan horizon. The horizon (parallel plan steps) limit is 30.We found that the greedy approach outperformed the parallel approach and solved significantly higher number of prob-lems. Therefore, we focus on the greedy approach hereafter. For each combination of d, k, and a given distance measure, werecord the solving time and output the average/min/max pairwise distances of the solution sets.Baseline comparison: As a baseline comparison, we have also implemented a randomized approach. In this approach, wedo not use global constraints but use random value ordering in the CSP solver to generate k different solutions withoutenforcing them to be pairwise d-distance apart. For each distance d, we continue running the random algorithm until wefind kmax solutions where kmax is the maximum value of k that we can solve for the greedy approach for that particulard value. In general, we want to compare with our approach of using global constraint to see if the random approach caneffectively generate diverse set of solutions by looking at: (1) the average time to find a solution in the solution set; and (2)the maximum/average pairwise distances between k (cid:3) 2 randomly generated solutions.Table 2 shows the comparison of average solving time to find one solution in the greedy and random approaches. Theresults show that on average, the random approach takes significantly more time to find a single solution, regardless of thedistance measure used by the greedy approach. To assess the diversity in the solution sets, Table 3 shows the comparisonof: (1) the average pairwise minimum distance between the solutions in sets returned by the random approach; and (2)the maximum d for which the greedy approach still can find a set of diverse plans. The comparisons are done for all threedistance measures. For example, the first cell (0.041/0.35) in Table 3, implies that the minimum pairwise distance averagedfor all solvable k (cid:3) 2 using the random approach is d = 0.041 while it is 0.35 (i.e., 8× more diverse) for the greedy approachusing the δa distance measure. Except for 3 cases, using global constraints to enforce minimum pairwise distance betweensolutions helps GP-CSP return significantly more diverse set of solutions. On average, the greedy approach returns 4.25×,7.31×, and 2.79× more diverse solutions than the random approach for δa, δs and δcl, respectively.Analysis of the different distance-bases: Overall, we were able to solve 1264 (d, k) combinations for three distance measuresδa, δs, δcl using the greedy approach. We were particularly interested in investigating the following issues:• Q1: Computational efficiency — Is it easy or difficult to find a set of diverse solutions using different distance measures?Thus, (1) for the same d and k values, which distance measure is more difficult (time consuming) to solve; and (2) givenan encoding horizon limit, how high is the value of d and k for which we can still find a set of solutions for a givenproblem using different distance measures.13 However, each constraint is more complicated because it encodes (i − 1) previously found solutions.14 Increments of 0.01 from 0.01 to 0.1 and of 0.05 thereafter.T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–3115Table 4For each given d value, each cell shows the largest solvable k for each of the three distance measures δa , δs , and δcl (in this order). The maximum values incells are in bold.d0.010.030.050.070.090.10.20.30.40.50.60.70.80.9log-easy11, 5, 286, 3, 245, 3, 182, 3, 142, 3, 142, 3, 102, 3, 52, 2, 31, 2, 31, 1, 31, 1, 21, 1, 21, 1, 2–rocket-a8, 18, 128, 13, 96, 11, 96, 10, 86, 9, 66, 9, 65, 9, 64, 7, 53, 6, 52, 4, 52, 3, 41, 2, 21, 2, 21, 1, 2log-a9, 8,187, 7, 125, 7, 104,7 , 63,6 , 63,6 , 62,6 , 61, 4, 41, 3, 31, 2, 2––––log-b3, 4, 52, 4, 32, 4, 32, 4, 22, 4, 22, 4, 21, 3, 11, 2, 11, 2, 1–––––log-c4, 6, 84,6 , 64,6 , 54,6 , 53,6 , 42,6 , 41, 5, 21, 3, 21, 2, 11, 2, 1––––log-d8, 7, 74, 7, 63,7 , 53,7 , 53,7 , 43,7 , 42, 5, 31,3 , 31, 2, 31,2 , 1––––Table 5Cross-validation of distance measures δa , δs , and δcl.δaδsδclδa–0.4850.461δs1.262–0.938δcl1.9850.883–• Q2: Solution diversity — What, if any, is the correlation/sensitivity between different distance measures? Thus, how thecomparative diversity of solutions is when using different distance measures.Regarding Q1, Table 4 shows the highest solvable k value for each distance d and base δa, δs, and δcl. For a given (d, k)pair, enforcing δa appears to be the most difficult, then δs, and δcl is the easiest. GP-CSP is able to solve 237, 462, and 565combinations of (d, k) respectively for δa, δs and δcl. GP-CSP solves dDISTANTkSET problems more easily with δs and δclthan with δa due to the fact that solutions with different action sets (diverse with regard to δa) will likely cause differenttrajectories and causal structures (diverse with regard to δs and δcl). Between δs and δcl, δcl solves more problems foreasier instances (log-easy, rocket-a and log-a) but less for the harder instances, as shown in Table 4. We conjecture that forsolutions with more actions (i.e., in bigger problems) there are more causal dependencies between actions and thus it isharder to reorder actions to create a different causal structure.For running time comparisons, among 216 combinations of (d, k) that were solved by all three distance measures, GP-CSP takes the least amount of time for δa in 84 combinations, for δs in 70 combinations and in 62 for δcl. The first threelines of Table 2 show the average time to find one solution in d-diverse k-set for each problem using δa, δs and δcl (whichwe call ta, ts and tc respectively). In general, ta is the smallest and ts > tc in most problems. Thus, while it is harder toenforce δa than δs and δcl (as indicated in Table 4), when the encodings for all three distances can be solved for a given(d, k), then δa takes less time to search for one plan in the diverse plan set; this can be due to tighter constraints (morepruning power for the global constraints) and simpler global constraint setting.(cid:3)(cid:3)(cid:3)and dare distance measured according to δ(cid:3)(cid:3)To test Q2, in Table 5, we show the cross-comparison between different distance measures δa, δs, and δcl. In this table,(cid:3)(cid:3)(cid:3)/dcell (cid:15)row, column(cid:16) = (cid:15)δ(cid:3), δ(cid:3)(cid:3)(cid:16) indicates that over all combinations of (d, k) solved for distance δ(cid:3)(cid:3) (cid:3) d). For example, (cid:15)δs, δa(cid:16) = 0.485 meansand δ(cid:3)where dthat over 462 combinations of (d, k) solvable for δs, for each d, the average distance between k solutions measured by δa is0.485 × ds. The results indicate that when we enforce d for δa, we will likely find even more diverse solution sets accordingto δs (1.26 × da) and δcl (1.98 × da). However, when we enforce d for either δs or δcl, we are not likely to find a morediverse set of solutions measured by the other two distance measures. Nevertheless, enforcing d using δcl will likely givecomparable diverse degree d for δs (0.94 × dc ) and vice versa. We also observe that ds is highly dependent on the differencebetween the parallel lengths of plans in the set. The distance ds seems to be the smallest (i.e., ds < da < dc ) when all kplans have the same/similar number of time steps. This is consistent with the fact that δa and δcl do not depend on thesteps in the plan execution trajectory while δs does., the average value d, respectively (d5.2. Finding diverse plan set with LPGIn this section, we consider the problem of generating diverse sets of plans using another planning approach, in particularthe LPG planner which is able to scale up to bigger problems, compared to GP-CSP. We focus on the action-based distancemeasure between plans, which has been shown in the previous section to be the most difficult to enforce diversity. LPG isa local-search-based planner, that incrementally modifies a partial plan in a search for a plan that contains no flaws [27].16T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–31The behavior of LPG is controlled by an evaluation function that is used to select between different plan candidates in aneighborhood generated for local search. At each search step, the elements in the search neighborhood of the current partialplan π are the alternative possible plans repairing a selected flaw in π . The elements of the neighborhood are evaluatedaccording to an action evaluation function E [27]. This function is used to estimate the cost of either adding or of removingan action node a in the partial plan p being generated.5.2.1. Revised evaluation function for diverse plansIn order to manage ddistancekset problems, the function E has been extended to include an additional evaluation termthat has the purpose of penalizing the insertion and removal of actions that decrease the distance of the current partial planp under adaptation from a reference plan p0. In general, E consists of four weighted terms, evaluating four aspects of thequality of the current plan that are affected by the addition (E(a)i ) or removal (E(a)r ) of aE(a)i = αE · Execution_cost(a)i + αT · Temporal_cost(a)i + αS · Search_cost(a)i + αD ·E(a)r = αE · Execution_cost(a)r + αT · Temporal_cost(a)r + αS · Search_cost(a)r + αD ·(cid:15)(cid:15)(p0 − p) ∩ pi(cid:15)(cid:15)(p0 − p − a) ∩ pr(cid:15)(cid:15),R(cid:15)(cid:15).RThe first three terms of the two forms of E are unchanged from the standard behavior of LPG. The fourth term, usedonly for computing diverse plans, is the new term estimating how the proposed plan modification will affect the distancefrom the reference plan p0. Each cost term in E is computed using a relaxed temporal plan p R [27].The p R plans are computed by an algorithm, called RelaxedPlan, formally described and illustrated in [27]. We haveslightly modified this algorithm to penalize the selection of actions decreasing the plan distance from the reference plan.The specific change to RelaxedPlan for computing diverse plans is very similar to the change described in [22], and itconcerns the heuristic function for selecting the actions for achieving the subgoals in the relaxed plans. In the modifiedfunction for RelaxedPlan, we have an extra 0/1 term that penalizes an action b for p R if its addition decreases the distanceof p + p R from p0 (in the plan repair context investigated in [22], b is penalized if its addition increases such a distance).| or |(p0 − p − a) ∩ prRThe last term of the modified evaluation function E is a measure of the decrease in plan distance caused by adding orremoving a: |(p0 − p) ∩ piR contains the new action a. The α-coefficients of the E-termsRare used to weigh their relative importance.15 The values of the first 3 terms are automatically derived from the expressiondefining the plan metric for the problem [27]. The coefficient for the fourth new term of E (αD ) is automatically set duringsearch to a value proportional to d/δa(p, p0), where p is the current partial plan under construction. The general ideais to dynamically increase the value of αD according to the number of plans n that have been generated so far: if n ismuch higher than k, the search process consists of finding many solutions with not enough diversification, and hence theimportance of the last E-term should increase.|, where pi5.2.2. Making LPG return a set of plansIn order to compute a set of k d-distant plans solving a ddistancekset problem, we run LPG multiple times, until theproblem is solved, with the following two additional changes to the standard version of LPG: (i) the preprocessing phasecomputing mutex relations and other reachability information exploited during the relaxed plan construction is done onlyonce for all runs; (ii) we maintain an incremental set of valid plans, and we dynamically select one of them as the referenceplan p0 for the next search. Concerning (ii), let P = {p1, . . . , pn} be the set of n valid plans that have been computed so far,and CPlans(pi) the subset of P containing all plans that have a distance greater than or equal to d from a reference planpi ∈ P .The reference plan p0 used in the modified heuristic function E is a plan pmax ∈ P which has a maximal set of diverse(cid:16)(cid:15)(cid:15)(cid:15)CPlans(pi)(cid:15)(cid:17).(13)plans in P , i.e.,pmax = argmaxpi ∈PThe plan pmax is incrementally computed each time the local search finds a new solution. In addition to being usedto identify the reference plan in E, pmax is also used for defining the initial state (partial plan) of the search process.Specifically, we initialize the search using a (partial) plan obtained by randomly removing some actions from a (randomlyselected) plan in the set CPlans(pmax) ∪ {pmax}.The process of generating diverse plans starting from a dynamically chosen reference plan continues until at least k plansthat are all d-distant from each other have been produced. The modified version of LPG to compute diverse plans is calledLPG-d.5.2.3. Experimental analysis with LPG-dRecall that the distance function δa, using set-difference, can be written as the sum of two terms:δa(pi, p j) =| A(pi) − A(p j)|| A(pi) ∪ A(p j)|+| A(p j) − A(pi)|| A(pi) ∪ A(p j)|.(14)15 These coefficients are also normalized to a value in [0, 1] using the method described in [27].T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–3117Fig. 8. Performance of LPG-d (CPU time and plan distance) for the problem pfile20 in the DriverLog-Time domain.The first term represents the contribution of the actions in pi to the plan difference, while the second term indicatesthe contribution of p j to δa. We experimentally observed that in some cases the differences between two diverse planscomputed using δa are mostly concentrated in only one of the δa components. This asymmetry means that one of the twoplans can have many more actions than the other one, which could imply that the quality of one of the two plans is muchworse than the quality of the other plan. In order to avoid this problem, we can parametrize δa by imposing the two extraconstraints(cid:3) d/γ and δ Bδ Aaaa and δ Bwhere δ Aing” the diversity of pi and p j .(cid:3) d/γ ,a are the first and second terms of the RHS of Eq. (14), respectively, and γ is an integer parameter “balanc-In this section, we analyze the performance of LPG-d in four different benchmark domains: DriverLog, Satellite, Storageand FloorTile from the 3rd, 5th and 7th IPCs.16 The main goals of the experimental evaluation were (i) showing that LPG-dcan efficiently solve a large set of (d, k)-combinations, (ii) investigating the impact of the δa γ -constraints on performance,(iii) comparing LPG-d and the standard LPG.We tested LPG-d using both the default and parametrized versions of δa, with γ = 2 and γ = 3. We give detailed resultsfor γ = 3 and a more general evaluation for γ = 2 and the original δa. We consider d that varies from 0.05 to 0.95, using0.05 increment step, and with k = 2, . . . , 5, 6, 8, 10, 12, 14, 16, 20, 24, 28, 32 (overall, a total of 266 (d, k)-combinations).Since LPG-d is a stochastic planner, we use the median of the CPU times (in seconds) and the median of the average plandistances (over five runs). The average plan distance for a set of k plans solving a specific (d, k)-combination (δav ) is theaverage of the plans distances between all pairs of plans in the set. The tests were performed on an Intel(R) Xeon(TM) CPU3.00 GHz, 3 GB RAM. The CPU-time limit was 300 seconds.16 We have similar results for other domains: Rovers (IPC3–5), Pathways (IPC5), Logistics (IPC2), ZenoTravel (IPC3).18T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–31Fig. 9. Performance of LPG-d (CPU time and plan distance) for the problem pfile20 in the Satellite-Strips domain.Fig. 8 gives the results for the largest problem in the IPC-3 DriverLog-Time domain (fully-automated track). LPG-d solves161 (d, k)-combinations, including combinations d (cid:2) 0.4 and k = 20, and d = 0.95 and k = 2. The average CPU time (topplots) is 151.85 seconds. The average δav (bottom plots) is 0.73, with δav always greater than 0.57. With the original δafunction LPG-d solves 168 (d, k)-combinations, the average CPU time is 149.5 seconds, and the average δav is 0.73; whilewith γ = 2 LPG-d solves 139 combinations, the average CPU time is 144.2 seconds, and the average δav is 0.72.Fig. 9 shows the results for the largest problem in the IPC-3 Satellite-Strips domain. LPG-d solves 242 (k, d)-combinations;153 of them require less than 10 seconds. The average CPU time is 5.46 seconds, and the average δav is 0.69. We observedsimilar results when using the original δa function or the parametrized δa with γ = 2 (in the second case, LPG-d solves 230problems, while the average CPU time and the average δav are nearly the same as with γ = 3).Fig. 10 shows the results for a middle-size problem in the IPC-5 Storage-Propositional domain. With γ = 3 LPG-d solves252 (k, d)-combinations, 58 of which require less than 10 seconds, while 178 of them require less than 50 seconds. Theaverage CPU time is 25.4 seconds and the average δav is 0.91. With the original δa, LPG-d solves 257 (k, d)-combinations,the average CPU time is 14.5 seconds, and the average δav is 0.9; with γ = 2, LPG-d solves 201 combinations, the averageCPU time is 31 seconds and the average δav is 0.93.Fig. 11 gives the results for the largest problem in the IPC-7 FloorTile-MetricTime domain. LPG-d solves 210 (d, k)-combinations; 171 of them require less than 10 seconds. The average CPU time is 3.6 seconds, and the average δav is 0.7.We observed similar results when using the original δa function or the parametrized δa with γ = 2 (in the second case,LPG-d solves 191 problems, while the average CPU time and the average δav are nearly the same as with γ = 3).The local search in LPG is randomized by a “noise” parameter that is automatically set and updated during search [27].This randomization is one of the techniques used for escaping local minima, but it also can be useful for computing diverseplans: if we run the search multiple times, each search is likely to consider different portions of the search space, whichcan lead to different solutions. It is then interesting to compare LPG-d and a method in which we simply run the standardLPG until k d-diverse plans are generated. An experimental comparison of the two approaches show that in many casesT.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–3119Fig. 10. Performance of LPG-d (CPU time and plan distance) for the problem pfile15 in the Storage-Propositional domain.LPG-d performs better. In particular, the new evaluation function E is especially useful for planning problems that are easyto solve for the standard LPG, and that admit many solutions. In these cases, the original E function produces many validplans with not enough diversification. This problem is significantly alleviated by the new term in E. An example of domainwhere we observed this behavior is Logistics.176. Generating plan sets with partial preference knowledgeIn this section, we consider the problem of generating plan sets when the user preferences are only partially expressed.In particular, we focus on metric temporal planning where the preference model is assumed to be represented by anincomplete value function specified by a convex combination of two features: plan makespan and execution cost, with theexact trade-off value w drawn from a given distribution. The quality value of plan sets is measured by the ICP value, asformalized in Eq. (12). Our objective is to find a set of plans P ⊆ S where |P| (cid:2) k and ICP(P) is the lowest.Notice that we restrict the size of the solution set returned, not only for the comprehension issue discussed earlier,but also for an important property of the ICP measure: it is a monotonically non-increasing function of the solution set(specifically, given two solution sets P1 and P2 such that the latter is a superset of the former, it is easy to see thatICP(P2) (cid:2) ICP(P1)).17 For example, LPG-d solved 176 instances for the log_a problem, 47 of them in less than 1 CPU second and 118 of them in less than 10 CPU seconds;the average CPU time was 3.75 seconds and the average δav was 0.47. While using the standard LPG, only 107 instances were solved, 27 of them in lessthan 1 CPU seconds and 73 of them in less than 10 CPU seconds; the average CPU time was 5.14 seconds and the average δav was 0.33.20T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–31Fig. 11. Performance of LPG-d (CPU time and plan distance) for the problem pfile20 in the FloorTile-MetricTime domain.6.1. Sampling weight valuesGiven that the distribution of trade-off value w is known, the straightforward way to find a set of representative solutionsis to first sample a set of k values for w: {w 1, w 2, . . . , wk} based on the distribution h(w). For each value w i , we can findan (optimal) plan pi minimizing the value of the overall value function V (p, w i) = w i × t p + (1 − w i) × c p . The final setof solutions P = {p1, p2, . . . , pk} is then filtered to remove duplicates and dominated solutions, thus selecting the plansmaking up the lower convex hull. The final set can then be returned to the user. While intuitive and easy to implement,this sampling-based approach has several potential flaws that can limit the quality of its resulting plan set.First, given that k solution plans are searched sequentially and independently of each other, even if the plan pi foundis optimal, the final solution set P = {p1, p2, . . . , pk} may not even be the optimal set of k solutions withfor each w iregard to the ICP measure. More specifically, for a given set of solutions P , some trade-off value w, and two non-dominatedplans p, q such that V (p, w) < V (q, w), it is possible that ICP(P ∪ {p}) > ICP(P ∪ {q}). In our running example (Fig. 5), letP = {p2, p5} and w = 0.8 then V (p1, w) = 0.8 × 4 + 0.2 × 25 = 8.2 < V (p7, w) = 0.8 × 12 + 0.2 × 5 = 10.6. Thus, the plannerwill select p1 to add to P because it looks locally better given the weight w = 0.8. However, ICP({p1, p2, p5}) ≈ 10.05 >ICP({p2, p5, p7}) ≈ 7.71 so indeed by taking previous set into consideration then p7 is a much better choice than p1.Second, the values of the trade-off parameter w are sampled based on a given distribution, and independently of theparticular planning problem being solved. As there is no relation between the sampled w values and the solution spaceof a given planning problem, sampling approach may return very few distinct solutions even if we sample a large numberof weight values w. In our example, if all w samples have values w (cid:2) 0.67 then the optimal solution returned for any ofthem will always be p7. However, we know that P ∗ = {p1, p3, p7} is the optimal set according to the ICP measure. Indeed,if w (cid:2) 0.769 then the sampling approach can only find the set {p7} or {p3, p7} and still not be able to find the optimalset P ∗.T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–3121Algorithm 1: Incrementally find solution set P .1 Input: A planning problem with a solution space S; maximum number of plans required k; number of sampled trade-off values k0 (0 < k0 < k);time bound t;2 Output: A plan set P (|P| (cid:3) k);3 begin45678W ← sample k0 values for w;P ← find good quality plans in S for each w ∈ W ;while |P| < k and search_time < t doSearch for p s.t. ICP(P ∪ {p}) < ICP(P)P ← P ∪ {p}910endReturn P11 end6.2. ICP sequential approachGiven the potential drawbacks of the sampling approach outlined above, we also pursued an alternative approach thattakes into account the ICP measure more actively. Specifically, we incrementally build the solution set P by finding asolution p such that P ∪ {p} has the lowest ICP value. We can start with an empty solution set P = ∅, then at each step tryto find a new plan p such that P ∪ {p} has the lowest ICP value.While this approach directly takes the ICP measure into consideration at each step of finding a new plan and avoidsthe drawbacks of the sampling-based approach, it also has its own share of potential flaws. Given that the set is builtincrementally, the earlier steps where the first “seed” solutions are found are very important. The closer the seed solutionsare to the global lower convex hull, the better the improvement in the ICP value. In our example (Fig. 5), if the first planfound is p2 then the subsequent plans found to best extend {p2} can be p5 and thus the final set does not come close tothe optimal set P ∗ = {p1, p3, p7}.6.3. Hybrid approachIn this approach, we aim to combine the strengths of both the sampling and ICP-sequential approaches. Specifically,we use sampling to find several plans optimizing for different weights. The plans are then used to seed the subsequentICP-sequential runs. By seeding the hybrid approach with good quality plan set scattered across the Pareto optimal set, wehope to gradually expand the initial set to a final set with a much better overall ICP value. Algorithm 1 shows the pseudo-code for the hybrid approach. We first independently sample the set of k0 values (with k0 pre-determined) of w given thedistribution on w (step 4). We then run a heuristic planner multiple times to find an optimal (or good quality) solutionfor each trade-off value w (step 5). We then collect the plans found and seed the subsequent runs when we incrementallyupdate the initial plan set with plans that lower the overall ICP value (steps 6–8). The algorithm terminates and returns thelatest plan set (step 9) if k plans are found or the time bound exceeds.6.4. Making LPG search sensitive to ICPWe use a modified version of the Metric-LPG planner [28] in implementing our algorithms, introducing the totalcostnumerical fluent into the domain to represent the plan cost that we are interested in.18 Not only is Metric-LPG equippedwith a very flexible local-search framework that has been extended to handle various objective functions, but it can also bemade to search for single or multiple solutions. Specifically, for the sampling-based approach, we first sample the w valuesbased on a given distribution. For each w value, we set the metric function in the domain file to: w × makespan + (1 − w) ×totalcost, and run the original LPG in the quality mode to heuristically find the best solution within the time limit for thatmetric function. The final solution set is filtered to remove any duplicate solutions, and returned to the user.For the ICP-sequential and hybrid approach, we cannot use the original LPG implementation as is and need to modifythe neighborhood evaluation function in LPG to take into account the ICP measure and the current plan set P . For the restof this section, we will explain this procedure in detail.Background: Metric-LPG uses local search to find plans within the space of numerical action graphs (NA-graph). This leveledgraph consists of a sequence of interleaved proposition and action layers. The proposition layers consist of a set of proposi-tional and numerical nodes, while each action layer consists of at most one action node, and a number of no-op links. AnNA-graph G represents a valid plan if all actions’ preconditions are supported by some actions appearing in the earlier levelin G. The search neighborhood for each local-search step is defined by a set of graph modifications to fix some remaining18 Although we are interested in the plan cost as summation of action costs, our implementation can also be extended for planning problems where plancost is an expression involving numerical fluents.22T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–31Each local move creates a new NA-graph G(cid:3)). Here, SearchCost(Ginconsistencies (unsupported preconditions) p at a particular level l. This can be done by either inserting a new action asupporting p or removing from the graph the action a that p is a precondition of (which can introduce new inconsistencies).(cid:3))(cid:3)) is the amount of search effort to resolve inconsistencies newly introduced by insertingand ExecCost(Gor removing action a; it is measured by the number of actions in a relaxed plan R resolving all such inconsistencies. The(cid:3)), which is a default function to measure plan quality, is measured by the total action execution costs oftotal cost ExecCost(Gall actions in R. The two weight adjustment values α and β are used to steer the search toward either finding a solutionquickly (higher α value) or better solution quality (higher β value). Metric-LPG then selects the local move leading to thesmallest E(G, which is evaluated as a weighted combination of two factors: SearchCost(G(cid:3)) value.(cid:3)(cid:3)(cid:3)) and ICPEst(G(cid:3)) with a new measure ICPEst(G(cid:3)) guides Metric-LPG’s search toward a plan p generated from G(cid:3)) for finding set of plans with low ICP measure: To guide Metric-LPG towards optimizingAdjusting the evaluation function E(Gour ICP-sensitive objective function instead of the original minimizing cost objective function, we need to replace the default(cid:3)). Specifically, we adjust the function for evaluating eachplan quality measure ExecCost(G(cid:3)). Given the setnew NA-graph generated by local moves at each step to be a combination of SearchCost(Gof found plans P = {p1, p2, . . . , pn}, ICPEst(Gsuch that the(cid:3)) estimates the expected total ICPresulting set P ∪ {p} has a minimum ICP value: p = argminp ICP(P ∪ {p}). Thus, ICPEst(Gis added to the current found plan set P . Like the original Metric-LPG, p isvalue if the best plan p found by expanding Gestimated by p R = Gcaused by inserting or removing a. The(cid:3)) = ICP(P ∪ p R ) with the ICP measure as described in Eq. (12).ICPEst(GNotice here that while P is the set of valid plans, p R is not. It is an invalid plan represented by a NA-graph containing someunsupported preconditions. However, Eq. (12) is still applicable as long as we can measure the time and cost dimensionsof p R . To measure the makespan of p R , we estimate the time points at which unsupported facts in Gwould be supportedin p R = Gto its last level. We then take the earliest time point at which allfacts at the last level appear to measure the makespan of p R . For the cost measure, we just sum the individual costs of allactions in p R .(cid:3) ∪ R where R is the relaxed plan resolving inconsistencies in G(cid:3) ∪ R and propagate them over actions in G(cid:3)) for a given NA-graph GAt each step of Metric-LPG’s local search framework, combining two measures ICPEst(G(cid:3)) gives us anevaluation function that fits right into the original Metric-LPG framework and prefers a NA-graph Gin the neighborhoodof G that gives the best trade-off between the estimated effort to repair and the estimated decrease in quality of the nextresulting plan set.(cid:3)) and SearchCost(G(cid:3)is calculated as: ICPEst(G(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)6.5. Experimental resultsWe have implemented several approaches based on our algorithms discussed in the previous sections: Sampling (Sec-tion 6.1), ICP-sequential (Section 6.2) and Hybrid that combines both (Section 6.3) with both the uniform and triangulardistributions. We consider two types of distributions in which the most probable weight for plan makespan are 0.2and 0.8, which we will call “w02” and “w08” distributions respectively (Fig. 12 shows these distributions). We test allimplementations against a set of 20 problems in each of several benchmark temporal planning domains used in the pre-vious International Planning Competitions (IPC): ZenoTravel, DriverLog, and Depots. The only modification to the originalbenchmark set is the added action costs. The descriptions of these domains can be found at the IPC website (ipc.icaps-conference.org). The experiments were conducted on an Intel Core2 Duo machine with 3.16 GHz CPU and 4 GB RAM. For allapproaches, we search for a maximum of k = 10 plans within the 10-minute time limit for each problem (i.e., t = 10 min-utes), and the resulting plan set is used to compute the ICP value. In the Sampling approach, we generate ten trade-offvalues w between makespan and plan cost based on the distribution, and for each one we search for a plan p subject to thevalue function V (p, w) = w × t p + (1 − w) × c p . In the Hybrid approach, on the other hand, the first Sampling approach isused with k0 = 3 generated trade-off values to find an initial plan set, which is then improved by the ICP-sequential runs.As Metric-LPG is a stochastic local search planner, we run it three times for each problem and average the results. In 77%and 70% of 60 problems in the three tested domains for the Hybrid and Sampling approaches respectively, the standard de-viation of ICP values of plan sets are at most 5% of the average values. This indicates that ICP values of plan set in differentruns are quite stable. As the Hybrid approach is an improved version of ICP-sequential and gives better results in almost alltested problems, we omit the ICP-sequential in discussions below. We now analyze the results in more detail.The utility of using the partial knowledge of user’s preferences: To evaluate the utility of taking partial knowledge of user pref-erences into account, we first compare our results against the naive approaches that generate a plan set without explicitlytaking into account partial knowledge. Specifically, we run the default LPG planner with different random seeds to findmultiple non-dominated plans. The LPG planner was run with both speed setting, which finds plans quickly, and diversesetting, which takes longer time to find better set of diverse plans. Fig. 13 shows the comparison between quality of plansets returned by Sampling and those naive approaches when the distribution of the trade-off value w between makespanand plan cost is assumed to be uniform. Overall, among 20 tested problems for each of the ZenoTravel, DriverLog, and De-pots domains, the Sampling approach is better than LPG-speed in 19/20, 20/20 and 20/20 and is better than LPG-d in18/20, 18/20, and 20/20 problems respectively. We observed similar results comparing Hybrid and those two approaches:in particular, the Hybrid approach is better than LPG-speed in all 60 problems and better than LPG-d in 19/20, 18/20, andT.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–3123Fig. 12. The distributions: (a) uniform, (b) w02, (c) w08 (see text).Fig. 13. Results for the ZenoTravel, DriverLog and Depots domains comparing the Sampling and baseline LPG approaches on the overall ICP value (log scale)with the uniform distribution.20/20 problems respectively. These results support our intuition that taking into account the partial knowledge about userpreferences (if it is available) increases the quality of the plan set.Comparing the Sampling and Hybrid approaches: We now compare the effectiveness of the Sampling and Hybrid approachesin terms of the quality of returned plan sets with the uniform, w02 and w08 distributions.ICP value: We first compare the two approaches in terms of the ICP values of plan sets returned indicating their qualityevaluated by the user. Tables 6, 7, and 8 show the results in the three domains. In general, Hybrid tends to be better thanSampling in this criterion for most of the domains and distributions. In particular, in the ZenoTravel domain it returns higherquality plan sets in 15/20 problems when the distribution is uniform, 10/20 and 13/20 problems when it is w02 and w08respectively (both approaches return plan sets with equal ICP values for two problems with the w02 distribution and oneproblem with the w08 distribution). In the DriverLog domain, Hybrid returns better plan sets for 11/20 problems withthe uniform distribution (and for other three problems the plan sets have equal ICP values), but worse with the triangulardistributions: 8/20 (another 2 equals) and 9/20 (another one equals) with w02 and w08. The improvement on the qualityof plan sets that Hybrid contributes is more significant in the Depots domain: it is better than Sampling in 11/20 problemswith the uniform distribution (and equal in 3 problems), in 12/20 problems with the w02 and w08 distributions (with w02both approaches return plan sets with equal ICP values for 4 problems, and for 2 problems when it is w08).In many large problems of the ZenoTravel and DriverLog domains where Sampling performs better than Hybrid, wenotice that the first phase of the Hybrid approach that searches for the first 3 initial plans normally takes most of theallocated time, and therefore there is not much time left for the second phase to improve the quality of the plan set. Wealso observe that among the three settings of the trade-off distributions, the positive effect of the second phase in Hybridapproach (which is to improve the quality of the initial plan sets) tends to be more stable across different domains withuniform distribution, but less with the triangular, in particular Sampling beats Hybrid in the DriverLog domain when thedistribution is w02. Perhaps this is because with the triangular distributions, the chance that LPG planner (that is used inour Sampling approach) returns the same plans even with different trade-off values would increase, especially when themost probable value of makespan happens to be in a (wide) range of weights in which one single plan is optimal. Thisresult agrees with the intuition that when the knowledge about user preferences is almost complete (i.e., the distributionof trade-off value is “peak”), then the Sampling approach with smaller number of generated weight values may be goodenough (assuming that a good planner optimizing a complete value function is available).Since the quality of a plan set depends on how the two features makespan and plan cost are optimized, and how theplans “span” the space of time and cost, we also compare the Sampling and Hybrid approaches in terms of those twocriteria. In particular, we compare plan sets returned by the two approaches in terms of (i) their median values of makespanand cost, which represent how “close” the plan sets are to the origin of the space of makespan and cost, and (ii) theirstandard deviation of makespan and cost values, which indicate how the sets span each feature axis.24T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–31Table 6The ICP value of plan sets in the ZenoTravel domain returned by the Sampling and Hybrid approaches with the distributions (a) uniform, (b) w02 and (c)w08. The problems where Hybrid returns plan sets with better quality than Sampling are marked with *.ProbSamplingHybridProbSamplingHybridProbSamplingHybrid1*2*3*4*5*6*7*8*9*10*11*12*13*141516*17*181920840.002661.431807.843481.313007.973447.374006.384549.906397.327592.725307.047288.5410,208.1111,939.229334.6816,724.2127,085.5723,610.7129,114.3034,939.27(a)839.982661.251805.953477.492743.852755.253793.444344.705875.136826.605050.076807.289956.9413,730.8713,541.2813,949.2626,822.3725,089.4029,276.0937,166.29123*4*5*6*7*8*9*10*11*12*13*14151617181920972.003067.202083.914052.753171.864288.004644.405060.817037.879064.405946.687954.7411,847.1314,474.0016,125.7019,386.0029,559.0328,520.1734,224.0239,443.66(b)972.003067.202083.834026.923171.733188.614377.405044.436614.307472.375891.767586.2811,414.8815,739.1916,147.2819,841.6732,175.6629,020.1536,496.4042,790.9712*3*4*5*6*7*8*9*10*11*1213*14*15*1617181920708.002255.7921535.542960.842782.162802.003546.953802.605469.246142.684578.095483.198515.7411,610.3811,748.4514,503.7921,354.7820,107.0323,721.9028,178.45(c)708.002255.7881535.322947.662326.942524.183235.633733.905040.885997.454408.365756.898479.0911,369.4611,418.5915,121.7722,297.6521,727.7525,222.2428,961.51Table 7The ICP value of plan sets in the DriverLog domain returned by the Sampling and Hybrid approaches with the distributions (a) uniform, (b) w02 and (c)w08. The problems where Hybrid returns plan sets with better quality than Sampling are marked with *.ProbSampling12*34*5*6*78*9*10*11*1213*1415*161718*1920212.00363.30176.00282.00236.83222.00176.50338.96369.18178.38289.04711.48469.50457.04606.814432.211310.831800.493941.082225.66(a)Hybrid212.00348.38176.00278.45236.33221.00176.50319.43301.72170.55232.65727.65460.99512.11591.414490.171427.701768.174278.672397.61ProbSampling12*34*567*89*10*11*12*131415*1617181920235.99450.07203.20336.01273.80254.80226.20387.53420.64196.44334.13824.17519.92524.56699.494902.341632.861992.324614.132664.00(b)Hybrid236.00398.46203.20323.79288.51254.80203.80397.75339.05195.11253.09809.93521.05565.94643.726328.071659.462183.137978.002792.90ProbSampling12*34*5*6*789*10*11*12*13141516171819*20188.00333.20148.80238.20200.80187.47149.20300.54316.80158.18245.38605.86388.80409.02552.793580.321062.031448.363865.541892.28(c)Hybrid188.00299.70148.80233.20199.52187.20149.20323.87263.92146.12211.60588.82397.67410.53574.954297.471146.681549.092712.081934.11Table 9 summarizes for each domain, distribution and feature the number of problems in which each approach (eitherSampling or Hybrid) generates plan sets with better median of each feature value (makespan and plan cost) than the other.There are 60 problems across 3 different distributions, so in total, 180 cases for each feature. Sampling and Hybrid returnplan sets with better makespan in 40 and 62 cases, and with better plan cost in 52 and 51 cases (respectively), whichindicates that Hybrid is slightly better than Sampling on optimizing makespan but is possibly worse on optimizing plancost. In ZenoTravel domain, for all distributions Hybrid likely returns better plan sets on the makespan than Sampling, andSampling is better on the plan cost feature. In the DriverLog domain, Sampling is better on the makespan feature with bothnon-uniform distributions, but worse than Hybrid with the uniform. On the plan cost feature, Hybrid returns plan sets withbetter median than Sampling on the uniform and w02 distributions, and both approaches perform equally well with thew08 distribution. In the Depots domain, Sampling is better than Hybrid on both features with the uniform distribution, andonly better than Hybrid on the makespan with the distribution w08.In terms of spanning plan sets, Hybrid performs much better than Sampling on both features across three domains,as shown in Table 10. In particular, over 360 cases for both makespan and plan cost features, there are only 10 caseswhere Sampling produces plan sets with better standard deviation than Hybrid on each feature. Hybrid, on the other hand,generates plan sets with better standard deviation on makespan in 91 cases, and in 85 cases on the plan cost.T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–3125Table 8The ICP value of plan sets in the Depots domain returned by the Sampling and Hybrid approaches with the distributions (a) uniform, (b) w02 and (c) w08.The problems where Hybrid returns plan sets with better quality than Sampling are marked with *.ProbSampling123*4567*8*910*111213*14*1516*17*18*19*20*27.8739.2251.3643.0080.3699.4038.5059.0895.2952.04101.43123.0957.3762.75116.8250.7738.3888.2882.60137.13(a)Hybrid27.8739.2250.4343.0081.01111.1138.4958.41103.8550.00107.66129.3457.2262.33117.8649.3637.7785.5582.08133.47ProbSampling123*4567*8*91011*12*13*14*1516*17*18*19*20*28.5641.1254.4446.0082.93102.5840.5362.15100.5952.40110.18144.6760.8370.32113.1554.9842.8694.5394.21150.80(b)Hybrid28.5641.1252.8246.0084.45110.9840.4062.08106.0052.40108.07135.8060.7269.87124.2854.1241.5090.0289.28135.93ProbSampling1*23*4*567*8*910*11121314*1516*17*18*19*20*28.5038.2649.4940.8775.9694.7937.0455.8987.9347.8697.56124.5854.6665.20101.0947.0437.5676.7374.73122.43(c)Hybrid27.8538.2648.5840.0078.9998.4036.6054.6795.0547.6099.06128.0154.6662.02124.4346.3536.9275.2972.45120.31Table 9Number of problems for each domain, distribution and feature where Sampling (Hybrid) returns plan sets with better (i.e., smaller) median of featurevalue than that of Hybrid (Sampling), denoted in the table by S > H (H > S, respectively). We mark bold the numbers of problems that indicate theoutperformance of the corresponding approach.DomainDistributionMedian of makespanS > HH > SMedian of costS > HH > SZenoTravelDriverLogDepotsuniformw02w08uniformw02w08uniformw02w083666101097111712131187897161413789957446111097911Table 10Number of problems for each domain, distribution and feature where Sampling (Hybrid) returns plan sets with better (i.e., larger) standard deviation offeature value than that of Hybrid (Sampling), denoted in the table by S > H (H > S, respectively). We mark bold the numbers of problems that indicatethe outperformance of the corresponding approach.DomainDistributionSD of makespanS > HH > SZenoTravelDriverLogDepotsuniformw02w08uniformw02w08uniformw02w088465781075121413111097913SD of costS > H6786710757H > S141111109791011These experimental results support our arguments in Section 6.1 about the limits of sampling idea. Since one single plancould be optimal for a wide range of weight values, the search in the Sampling approach with different trade-off values mayfocus on looking for plans only at the same region of the feature space (specified by the particular value of the weight),which can reduce the chance of having plans with better value on some particular feature. On the opposite side, the Hybrid26T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–31Fig. 14. The contribution into the common lower convex hull of plan sets in the ZenoTravel domain with different distributions.Fig. 15. The contribution into the common lower convex hull of plan sets in the DriverLog domain with different distributions.approach tends to be better in spanning plan sets to a larger region of the space, as the set of plans that have been foundis taken into account during the search.Contribution to the lower convex hull: The comparison above between Sampling and Hybrid considers the two featuresseparately. We now examine the relation between plan sets returned by those approaches on the joint space of both features,in particular taking into account the dominance relation between plans in the two sets. In other words, we compare therelative total number of plans in the lower convex hull (LCH) found by each approach. Given that this is the set thatshould be returned to the user (to select one from), the higher number tends to give her a better expected utility value. Tomeasure the relative performance of both approaches with respect to this criterion, we first create a set S combining theplans returned by them. We then compute the set Slch ⊆ S of plans in the lower convex hull among all plans in S. Finally,we measure the percentages of plans in Slch that are actually returned by each of our tested approaches. Figs. 14, 15 and 16show the contribution to the LCH of plan sets returned by Sampling and Hybrid in the ZenoTravel, DriverLog and Depotsdomains.In general, we observe that the plan set returned by Hybrid contributes more into the LCH than that of Sampling formost of the problems (except for some large problems) with most of the distributions and domains. Specifically, in theZenoTravel domain, Hybrid contributes more plans to the LCH than Sampling in 15/20, 13/20 (and another 2 equals), 13/20(another 2 equals) problems for the uniform, w02 and w08 distributions respectively. In the DriverLog domain, it is betterthan Sampling in 10/20 (another 6 equals), 10/20 (another 4 equals), 8/20 (another 5 equals) problems; and Hybrid isbetter in 11/20 (another 6 equals), 11/20 (another 4 equals) and 11/20 (another 4 equals) for the uniform, w02 and w08distributions in the Depots domain. Again, similar to the ICP value, the Hybrid approach is less effective on problems withlarge size (except with the w08 distribution in the Depots domain) in which the search time is mostly used for findinginitial plan sets. We also note that a plan set with higher contribution to the LCH is not guaranteed to have better quality,except for the extreme case where one plan set contributes 100% and completely dominates the other which contributes0% to the LCH. For example, consider problem 14 in the ZenoTravel domain: even though the plan sets returned by Hybridcontribute more than those of Sampling in all three distributions, it is only the w08 where it has a better ICP value. Thereason for this is that the ICP value depends also on the range of the trade-off value (and its density) for which a plan in theLCH is optimal, whereas the LCH is constructed by simply comparing plans in terms of their makespan and cost separately(i.e., using the dominance relation), ignoring their relative importance.The sensitivity of plan sets to the distributions: All analysis having been done so far is to compare the effectiveness of ap-proaches with respect to a particular distribution of the trade-off value. In this part, we examine how sensitive the plansets are with respect to different distributions.T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–3127Fig. 16. The contribution into the common lower convex hull of plan sets in the Depots domain with different distributions.Table 11Number of problems for each approach, domain and feature where the plan sets returned with the w02 (w08) distribution with better (i.e., smaller) medianof feature value than that with w08 (w02), denoted in the table by w02 > w08 (w08 > w02, respectively). For each approach, we mark bold the numbersfor domains in which there are more problems whose plan sets returned with w08 (w02) have better makespan (plan cost) median than those with w02(w08, respectively).ApproachDomainMedian of makespanw02 > w08w08 > w02Median of costw02 > w08w08 > w02SamplingHybridZenoTravelDriverLogDepotsZenoTravelDriverLogDepots56654813101210101011131010648574911Optimizing high-priority feature: We first consider how plan sets are optimized on each feature (makespan and plan cost)by each approach with respect to two non-uniform distributions w02 and w08. Those are the distributions representingscenarios where the users have different priority on the features, and plan sets should be biased to optimizing the featurethat has higher priority (i.e., larger value of weight). In particular, plans generated using the w08 distribution should havebetter (i.e., smaller) makespan values than those found with the w02 distribution (since in the makespan has higher priorityin w08 than it is in w02); on the other hand, plan set returned with w02 should have better values of plan cost than thosewith w08.Table 11 summarizes for each domain, approach and feature, the number of problems in which plan sets returned withone distribution (either w02 or w08) have better median value than with the other. We observe that for both features, theSampling approach is very likely to “push” plan sets to regions of the space of makespan and cost with better value ofmore interested feature. On the other hand, the Hybrid approach tends to be more sensitive to the distributions on boththe features in the ZenoTravel domain, and is more sensitive only on the makespan feature in the DriverLog and Depotsdomains. Those results generally show that our approaches can bias the search towards optimizing features that are moredesired by the user.Spanning plan sets on individual features: Next, we examine how plan sets span each feature, depending on the degree ofincompleteness of the distributions. Specifically, we compare the standard deviation of plan sets returned using the uniformdistribution with those generated using the w02 and w08 distributions. Intuitively, we expect that the plan sets returnedwith the uniform distribution will have higher standard deviation than those with the distributions w02 and w08.Table 12 shows for each approach, domain and feature, the number of problems generated with the uniform distributionthat have better standard deviation on the feature than those found with the distribution w02. We observe that with themakespan feature, both approaches return plan sets that are more “spanned” on makespan in the Depots domain, butnot with ZenoTravel and DriverLog. With the plan cost feature, Hybrid shows its positive impact on all three domains,whereas Sampling shows it with the ZenoTravel and Depots domains. Similarly, Table 13 shows the results comparing theuniform and w08 distributions. This time, Sampling returns plan sets with better standard deviation on both features inthe ZenoTravel and Depots domains, but not in DriverLog. Hybrid also shows this in the ZenoTravel domain, but for theremaining two domains, it tends to return plan sets with expected standard deviation on the plan cost feature only. Fromall of these results, we observe that with the uniform distribution, both approaches likely generate plan sets that span betterthan with non-uniform distributions, especially on the plan cost feature.In summary, the experimental results in this section support the following hypotheses:• Instead of ignoring the user preferences which are partially specified, one should take them into account while synthe-sizing plans, as plan sets returned would have better quality.28T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–31Table 12Number of problems for each approach, domain and feature where the plan sets returned with the uniform (w02) distribution have better (i.e., higher)standard deviation of the feature value than that with w02 (uniform), denoted in the table by U > w02 (w02 > U , respectively). For each approach andfeature, we mark bold the numbers for domains in which there are more problems whose plan sets returned with the uniform distribution have betterstandard deviation value of the feature than those with the w02 distribution.ApproachDomainSD of makespanU > w02w02 > USD of costU > w02w02 > USamplingHybridZenoTravelDriverLogDepotsZenoTravelDriverLogDepots9699681086109610781289787774Table 13Number of problems for each approach, domain and feature where the plan sets returned with the uniform (w08) distribution with better (i.e., higher)standard deviation of feature value than that with w08 (uniform), denoted in the table by U > w08 (w08 > U , respectively). For each approach and feature,we mark bold the numbers for domains in which there are more problems whose plan sets returned with the uniform distribution have better standarddeviation value of the feature than those with the w08 distribution.ApproachDomainSD of makespanU > w08w08 > USD of costU > w08w08 > USamplingHybridZenoTravelDriverLogDepotsZenoTravelDriverLogDepots11512107581079781551215811496464• In generating plan sets sequentially to cope with the partial user preferences, the Sampling approach that searchesfor plans separately and independently of the solution space tends to return worse quality plan sets than the Hybridapproach.• The resulting plan sets returned by the Hybrid approach tend to be more sensitive to the user preferences than thosefound by the Sampling approach.7. DiscussionTo the best of our knowledge, this work is a first step in domain-independent planning with preferences when the userpreferences are not completely specified, in the same spirit of model-lite planning [33]. Our “language” to represent thepartial preference model assumes a complete set of attributes of interest and a parameterized value function with unknownparameter values. Although in our work the unknown values are restricted in a continuous range, they can also be rep-resented by a set of possible discrete values. These two representations of parameters’ incompleteness are also the waysimprecise parameters are modeled in bounded-parameter MDPs [29] and MDPs with imprecise reward functions [45,46,55].Boutilier et al. [9] consider the preference elicitation problem with a more general framework where both the set of at-tributes and the utility function are incomplete.Our current representation and plan synthesis approach do have some limitations:• The representation of the underlying complete preference model in our setting, i.e., the convex combination of metricquantities, is a subset of the preference language defined by PDDL3 [26], which has been commonly used to representpreferences in planning domains. In PDDL3, preferences are constraints on the state trajectory of plans with “penalty”values (or weights) of being violated, and a plan is more preferable if it has lower total penalty value. While one canmodel partially specified “penalty” for preferences in PDDL3 with a distribution over continuous range or set of discretevalues, it is unclear how to represent incompleteness for other constructs of the language. Similarly, it is an interestingquestion on how incompleteness can be extended for conditional preferences [7].• Using a convex combination of attributes as a utility function in our setting assumes that the criteria of interest aremutual preferential independence: although each attribute is important, it does not affect the way in which the usertrades off the other attributes against each other [47]. This property may be violated, for instance when we want toextend this setting to include preference statements in PDDL3 as attributes of interest. In a travel domain, for example,a passenger might be more willing to accept a more expensive ticket for a non-stop flight if she has to fly at night (i.e.,the weight on the importance of “cost” is smaller).• Our current implementation ignores the fact that changing the scale on objectives (e.g. from “hours” to “minutes” inthe makespan of plans) may change the bias of the distribution of the Pareto set of plans on the objective axis. In otherT.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–3129words, the set may look more uniform on the objective space using one scale than it is with a different scale [12].Although the ICP value agrees with the set Pareto dominance relation regardless of the scaling mechanism used [21],this effect can introduce a wrong evaluation about the distribution of the entire Pareto set of plans in the objectivespace to a user observing the representative set of plans (which may be biased towards some region of an axis due tothe scaling mechanism used).• Given that IPF is a nonlinear function, it is a challenge to modify the Metric-LPG planner to efficiently search for aset of plans optimizing such a quality measure. We believe that the current modification of Metric-LPG used for ourexperiments can be improved by designing new specific heuristics that are more effective for optimizing the measure.In addition, as observed by Kim et al. [35], the computation time for IPF measure increases roughly exponentially withthe number of objectives, and thus it is also challenging as to how to effectively incorporate the measure into the searchfor planning problems with a high number of criteria.8. Conclusion and future workIn this paper, we consider the planning problem with partial user preferences in two scenarios where the knowledgeabout preferences is completely unknown or only part of it is given. We propose a general approach to this problemwhere a set of plans is presented to the user from which she can select. For each type of the preference incompleteness,we define a different quality measure for plan sets and investigate approaches to generating plan sets with respect tothe quality measure. In the first scenario when the user is known to have preferences over plans, but the details arecompletely unknown, we define the quality of plan sets as their diversity value, specified with syntactic features of plans(its action set, sequence of states, and set of causal links). We then consider generating diverse sets of plans using twostate-of-the-art planners, GP-CSP and LPG. The approaches we developed for supporting the generation of diverse plans inGP-CSP are broadly applicable to other planners based on bounded horizon compilation approaches for planning. Similarly,the techniques we developed for LPG, such as biasing the relaxed plan heuristics in terms of distance measures, could beapplied to other heuristic planners. The experimental results with GP-CSP explicate the relative difficulty of enforcing thevarious distance measures, as well as the correlation among the individual distance measures (as assessed in terms of thesets of plans they find). The experiments with LPG demonstrate the potential of planning using heuristic local search inproducing large sets of highly diverse plans.When part of the user preferences is given, in particular the set of features that the user is interested in and thedistribution of weights representing their relative importance, we propose the use of Integrated Preference Function, andits special case Integrated Convex Preference function, to measure the quality of plan sets, and propose various heuristicapproaches based on the Metric-LPG planner [28] to find a good plan set with respect to this measure. We show empiricallythat taking partial knowledge of user preferences into account does improve the quality of the plan set returned to the user,and that our proposed approaches are sensitive to the degree of preference incompleteness, represented by the distribution.While a planning agent may well start with some partial knowledge of the user preference model, in the long run, wewould like the agent to be able to improve it through repeated interactions with the user. In our context, at the beginningwhen the degree of incompleteness is high, the learning will involve improving the estimate of h(α) based on feedbackabout the specific plan that the user selects from the set returned by the system. This learning phase is in principle wellconnected to the Bayesian parameter estimation approach in the sense that the whole distribution of parameter vector, h(α),is updated after receiving feedback from the user, taking into account the current distribution of all models (starting froma prior, for instance the uniform distribution). Although such interactive learning framework has been discussed previously,as in [16], the set of user’s decisions in this work is assumed to be given, whereas in planning scenarios the cost of plansynthesis should be incorporated into the our interactive framework, and the problem of presenting plan sets to the userneeds also to be considered. Recent work by Li et al. [36] considered learning user preferences in planning, but restrictingto preference models that can be represented with hierarchical task networks.AcknowledgementsWe thank Menkes van den Briel for drawing our attention to ICP measure initially. Kambhampati’s research is sup-ported in part by an IBM Faculty Award, the NSF grant IIS2013308139, ONR grants N00014-09-1-0017, N00014-07-1-1049,N000140610058, and by a Lockheed Martin subcontract TT0687680 to ASU as part of the DARPA Integrated Learning pro-gram. Tuan Nguyen was also supported by a Science Foundation of Arizona fellowship.References[1] J. Baier, S. McIlraith, Planning with preferences, AI Magazine 29 (4) (2009) 25.[2] M. Bienvenu, C. Fritz, S. McIlraith, Planning with qualitative temporal preferences, in: Proceedings of the 10th International Conference on KnowledgeRepresentation and Reasoning (KR), 2006, pp. 134–144.[3] G. Birkhoff, Lattice Theory, 2nd (revised) edition, American Mathematical Society Colloquium Publications, vol. XXV, American Mathematical Society,New York, 1948.[4] A. Blum, M. Furst, Fast planning through planning graph analysis, Artificial Intelligence 90 (1–2) (1997) 281–300.[5] M. Boddy, J. Gohde, T. Haigh, S. Harp, Course of action generation for cyber security using classical planning, in: International Conference on AutomatedPlanning and Scheduling (ICAPS), 2005, pp. 12–21.30T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–31[6] C. Boutilier, A POMDP formulation of preference elicitation problems, in: Proceedings of the National Conference on Artificial Intelligence (AAAI), 2002,pp. 239–246.[7] C. Boutilier, R. Brafman, C. Domshlak, H. Hoos, D. Poole, CP-nets: A tool for representing and reasoning with conditional ceteris paribus preferencestatements, Journal of Artificial Intelligence Research 21 (1) (2004) 135–191.[8] C. Boutilier, T. Dean, S. Hanks, Decision-theoretic planning: Structural assumptions and computational leverage, Journal of Artificial Intelligence Re-search 11 (1) (1999) 94.[9] C. Boutilier, K. Regan, P. Viappiani, Simultaneous elicitation of preference features and utility, in: Proceedings of the National Conference on ArtificialIntelligence (AAAI), 2010, pp. 1160–1197.[10] B. Bozkurt, J. Fowler, E. Gel, B. Kim, M. Köksalan, J. Wallenius, Quantitative comparison of approximate solution sets for multicriteria optimizationproblems with weighted Tchebycheff preference function, Operations Research 58 (3) (2010) 650–659.[11] R. Brafman, C. Domshlak, Preference handling—An introductory tutorial, AI Magazine 30 (1) (2009) 58–86.[12] J. Branke, Consideration of partial user preferences in evolutionary multiobjective optimization, Multiobjective Optimization 5252 (2008) 157–178.[13] D. Bryce, W. Cushing, S. Kambhampati, Model-lite planning: Diverse multi-option plans & dynamic objective functions, in: ICAPS 2007 Workshop onPlanning and Plan Execution for Real World Systems, 2007.[14] W.M. Carlyle, J.W. Fowler, E.S. Gel, B. Kim, Quantitative comparison of approximate solution sets for bi-criteria optimization problems, Decision Sci-ences 34 (1) (2003) 63–82.[15] G. Chafle, K. Dasgupta, A. Kumar, S. Mittal, B. Srivastava, Adaptation in Web Service Composition and Execution, in: International Conference on WebServices, ICWS’06, 2006, pp. 549–557.[16] U. Chajewska, D. Koller, D. Ormoneit, Learning an agent’s utility function by observing behavior, in: Proceedings of the Eighteenth International Con-ference on Machine Learning (ICML), 2001, pp. 35–42.[17] U. Chajewska, D. Koller, R. Parr, Making rational decisions using adaptive utility elicitation, in: Proceedings of the National Conference on ArtificialIntelligence (AAAI), 2000, pp. 363–369.[18] M. desJardins, K. Wagstaff, Dd-pref: A language for expressing preferences over sets, in: Proceedings of the National Conference on Artificial Intelligence,2005.[19] M. Do, S. Kambhampati, Planning as constraint satisfaction: Solving the planning graph by compiling it into CSP, Artificial Intelligence 132 (2) (2001)151–182.[20] M. Do, S. Kambhampati, Sapa: A multi-objective metric temporal planner, Journal of Artificial Intelligence Research 20 (1) (2003) 155–194.[21] J. Fowler, B. Kim, W. Carlyle, E. Gel, S. Horng, Evaluating solution sets of a posteriori solution techniques for bi-criteria combinatorial optimizationproblems, Journal of Scheduling 8 (1) (2005) 75–96.[22] M. Fox, A. Gerevini, D. Long, I. Serina, Plan stability: Replanning versus plan repair, in: Proc. ICAPS, AAAI Press, 2006, pp. 212–221.[23] M. Fox, D. Long, PDDL2.1: An extension to PDDL for expressing temporal planning domains, Journal of Artificial Intelligence Research 20 (1) (2003)61–124.[24] C. Fritz, S. McIlraith, Decision-theoretic golog with qualitative preferences, in: Proceedings of the 10th International Conference on Principles of Knowl-edge Representation and Reasoning, Lake District, UK, June 2006.[25] M. Gelain, M. Pini, F. Rossi, K. Venable, T. Walsh, Elicitation strategies for soft constraint problems with missing preferences: Properties, algorithms andexperimental studies, Artificial Intelligence 174 (3–4) (2010) 270–294.[26] A. Gerevini, P. Haslum, D. Long, A. Saetti, Y. Dimopoulos, Deterministic planning in the fifth international planning competition: PDDL3 and experi-mental evaluation of the planners, Artificial Intelligence 173 (5–6) (2009) 619–668.[27] A. Gerevini, A. Saetti, I. Serina, Planning through stochastic local search and temporal action graphs in LPG, Journal of Artificial Intelligence Re-search 20 (1) (2003) 239–290.[28] A. Gerevini, A. Saetti, I. Serina, An approach to efficient planning with numerical fluents and multi-criteria plan quality, Artificial Intelligence 172 (8–9)(2008) 899–944.[29] R. Givan, S. Leach, T. Dean, Bounded-parameter Markov decision processes, Artificial Intelligence 122 (1–2) (2000) 71–109.[30] V. Ha, P. Haddawy, A hybrid approach to reasoning with partially elicited preference models, in: Proceedings of the Fifteenth Annual Conference onUncertainty in Artificial Intelligence, 1999, pp. 263–270.[31] G. Hazen, Partial information, dominance, and potential optimality in multiattribute utility theory, Operations Research (1986) 296–310.[32] E. Hebrard, B. Hnich, B. O’Sullivan, T. Walsh, Finding diverse and similar solutions in constraint programming, in: Proceedings of the 20th NationalConference on Artificial Intelligence (AAAI), 2005, p. 372.[33] S. Kambhampati, Model-lite planning for the web age masses: The challenges of planning with incomplete and evolving domain theories, in: Proceed-ings of the National Conference on Artificial Intelligence (AAAI), 2007, p. 1601.[34] H. Kautz, B. Selman, BLACKBOX: A new approach to the application of theorem proving to problem solving, in: AIPS98 Workshop on Planning asCombinatorial Search, 1998.[35] B. Kim, E. Gel, J. Fowler, W. Carlyle, J. Wallenius, Evaluation of nondominated solution sets for k-objective optimization problems: An exact methodand approximations, European Journal of Operational Research 173 (2) (2006) 565–582.[36] N. Li, S. Kambhampati, S. Yoon, Learning probabilistic hierarchical task networks to capture user preferences, in: Proceedings of the 21st InternationalJoint Conference on Artificial Intelligence, Pasadena, CA, USA, 2009.[37] G. Linden, S. Hanks, N. Lesh, Interactive assessment of user preference models: The automated travel assistant, in: Courses and Lectures—InternationalCentre for Mechanical Sciences, 1997, pp. 67–78.[38] H. McMahan, G. Gordon, A. Blum, Planning in the presence of cost functions controlled by an adversary, in: Proceedings of the Twentieth InternationalConference on Machine Learning (ICML), 2003, p. 536.[39] A. Memon, M. Pollack, M. Soffa, Hierarchical GUI test case generation using automated planning, IEEE Transactions on Software Engineering 27 (2)(2001) 144–155.[40] K. Myers, Metatheoretic plan summarization and comparison, in: International Conference on Automated Planning and Scheduling (ICAPS-06), 2006.[41] K. Myers, T. Lee, Generating qualitatively different plans through metatheoretic biases, in: Proceedings of the National Conference on Artificial Intelli-gence, 1999, pp. 570–576.[42] T. Nguyen, M. Do, S. Kambhampati, B. Srivastava, Planning with partial preference models, in: Proceedings of the 21st International Joint Conferenceon Artificial Intelligence (IJCAI), Morgan Kaufmann Publishers, 2009, pp. 1772–1777.[43] A. Pnueli, The temporal logic of programs, in: 18th Annual Symposium on Foundations of Computer Science, IEEE, 1977, pp. 46–57.[44] I. Refanidis, I. Vlahavas, Multiobjective heuristic state-space planning, Artificial Intelligence 145 (1–2) (2003) 1–32.[45] K. Regan, C. Boutilier, Regret-based reward elicitation for Markov decision processes, in: Proceedings of the Twenty-Fifth Conference on Uncertainty inArtificial Intelligence, AUAI Press, 2009, pp. 444–451.[46] K. Regan, C. Boutilier, Robust policy computation in reward-uncertain MDPs using nondominated policies, in: Proceedings of the 24th AAAI Conferenceon Artificial Intelligence, 2010, pp. 1127–1133.[47] S. Russell, P. Norvig, Artificial Intelligence: A Modern Approach, Prentice Hall, 2010.T.A. Nguyen et al. / Artificial Intelligence 190 (2012) 1–3131[48] I. Serina, Kernel functions for case-based planning, Artificial Intelligence 174 (2010) 16–17.[49] D. Smith, Choosing objectives in over-subscription planning, in: Proceedings of the Fourteenth International Conference on Automated Planning andScheduling, 2004, pp. 393–401.[50] T. Son, E. Pontelli, Planning with preferences using logic programming, Theory and Practice of Logic Programming 6 (5) (2006) 559–607.[51] B. Srivastava, S. Kambhampati, T. Nguyen, M. Do, A. Gerevini, I. Serina, Domain-independent approaches for finding diverse plans, in: IJCAI, 2007,pp. 2016–2022.[52] A. Tate, J. Dalton, J. Levine, Generation of multiple qualitatively different plan options, Technical Report, University of Edinburgh, 1998.[53] M. Van Den Briel, R. Sanchez, M. Do, S. Kambhampati, Effective approaches for partial satisfaction (over-subscription) planning, in: Proceedings of theNational Conference on Artificial Intelligence, 2004, pp. 562–569.[54] P. Viappiani, B. Faltings, P. Pu, Preference-based search using example-critiquing with suggestions, Journal of Artificial Intelligence Research 27 (1)(2006) 465–503.[55] H. Xu, S. Mannor, Parametric regret in uncertain Markov decision processes, in: Proceedings of the 48th IEEE Conference on Decision and Control, heldjointly with the 2009 28th Chinese Control Conference, CDC/CCC 2009, IEEE, 2009, pp. 3606–3613.[56] Y. Zhang, J. Callan, T. Minka, Novelty and redundancy detection in adaptive filtering, in: Proceedings of the 25th Annual International ACM SIGIRConference on Research and Development in Information Retrieval, ACM, 2002, pp. 81–88.