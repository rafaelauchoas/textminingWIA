Artificial Intelligence 196 (2013) 1–25Contents lists available at SciVerse ScienceDirectArtificial Intelligencewww.elsevier.com/locate/artintThe complexity of mixed multi-unit combinatorial auctions:Tractability under structural and qualitative restrictionsValeria Fionda a, Gianluigi Greco b,∗a Faculty of Computer Science, Free University of Bozen-Bolzano, Italyb Department of Mathematics, University of Calabria, Italya r t i c l ei n f oa b s t r a c tArticle history:Received 7 November 2011Received in revised form 17 December 2012Accepted 23 December 2012Available online 3 January 2013Keywords:Mixed multi-unit combinatorial auctionsComputational complexityStructural decomposition methodsMixed multi-unit combinatorial auctions (MMUCAs) are extensions of classical combina-torial auctions (CAs) where bidders trade transformations of goods rather than just setsof goods. Solving MMUCAs, i.e., determining the sequences of bids to be accepted by theauctioneer, is computationally intractable in general. However, differently from classicalcombinatorial auctions, little was known about whether polynomial-time solvable classesof MMUCAs can be singled out on the basis of their characteristics. The paper fills thisgap, by studying the computational complexity of MMUCA instances under structural andqualitative restrictions, which characterize interactions among bidders and types of bidsinvolved in the various transformations, respectively.© 2013 Elsevier B.V. All rights reserved.1. IntroductionMixed multi-unit combinatorial auctions (MMUCAs) are extensions of classical combinatorial auctions (CAs) where par-ticipants are allowed to bid not only on bundles of goods to buy, but also on bundles of goods to sell and of transformationsof goods [1].These mechanisms are particularly useful in the context of automatizing supply chain formation, where production pro-cesses often emerge as the result of complex interactions among producers and consumers [2]. Indeed, in these contexts,the auctioneer wants to obtain certain products based on the goods she initially owns, by exploiting a production processpossibly involving further goods to be acquired from suppliers or to be obtained via transformations operating on the goodscurrently available to her.Example 1.1. Consider the supply chain associated with the production of bicycles, which is illustrated in Fig. 1 according toan intuitive graphical notation where goods are represented as ovals, transformations as boxes, and where arrows indicateinputs and outputs of the various transformations. Assume that the auctioneer is presented with 6 different bids over thesingleton sets of transformations {t1}, {t2}, . . . ,{ t6}, whose associated prices are then reported in the boxes as well.The assembly of a bicycle from its constituents (i.e., frame, brakes, drive train, front wheel, back wheel, seat, and handlebars)is thus offered to the auctioneer through the bid over {t6}, which is sold for $10. However, the auctioneer owns only a subsetof such constituents (i.e., frame and brakes), plus two goods (i.e., chain and chainring) that are not immediately exploitableby t6. The auctioneer has therefore to ask suppliers for the missing goods (i.e., front wheel, back wheel, seat, and handlebars),which are made available trough the bids over {t3}, {t4}, and {t5}, for $10, $17, and $8, respectively. Note that t4 incidentallyproduces a dynamo, which is not part of the bicycle the auctioneer is willing to produce. Finally, note that the auctioneer* Corresponding author.E-mail addresses: fionda@inf.unibz.it (V. Fionda), ggreco@mat.unical.it (G. Greco).0004-3702/$ – see front matter © 2013 Elsevier B.V. All rights reserved.http://dx.doi.org/10.1016/j.artint.2012.12.0022V. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–25Fig. 1. Mixed multi-unit combinatorial auction in Example 1.1.needs to accept one further bid (either over {t1} for $2, or over {t2} for $3) to assemble the chain and the chainrings into(cid:2)the drive train, in order for the latter to be taken as input by t6.A solution to a MMUCA instance is, roughly, any set of bids whose transformations can be arranged in a sequenceallowing the auctioneer to produce the desired goods. Among all possible solutions, in the Winner-Determination problemwe are interested in singling out those having the minimum total cost or, equivalently, guaranteeing the maximum possiblerevenue. For instance, it is easily seen that the minimum production cost in Example 1.1 is $29, which is witnessed by thesequence of transformations t1, t4, t6.The Winner-Determination problem for MMUCA instances has intensively been studied in recent years, by extending tothis novel setting several results originally conceived for classical CAs. In particular, languages have been defined and ana-lyzed which allow bidders to compose (atomic) bids in a natural and intuitive way [1], and motivated by their intractability(formally, NP-hardness), solution approaches have been proposed (see, e.g., [3]) that well-behave on realistic scenarios [4].Differently from classical CAs, however, little was known about whether polynomial-time solvable classes of MMUCAs canbe singled out based on the structural and topological properties of the instances at hand. As a matter of fact, by focusingon the kinds of interactions among bidders that are likely to occur in practice, classes of instances over which Winner-Determination is tractable—called “islands of tractability” in the literature—have been identified for classical CAs (such asstructured item graphs [5] or bounded hypertree-width dual hypergraphs [6]). However, none of these results had a counterpartin the case of MMUCAs.The aim of this paper is precisely to fill this gap, by depicting a clear and complete picture of the frontier of tractabilityfor MMUCA instances, with respect to both qualitative and structural parameters. In particular, note that the existence of asolution is not guaranteed in the case of MMUCAs. For instance, in Example 1.1, if the auctioneer does not initially own theframe, then no solution exists at all. Therefore, checking for the feasibility of the production process is an important andpeculiar source of complexity for MMUCA instances and, accordingly, attention will be focused not only on the Winner-Determination but also on the Feasibility problem of deciding whether a given instance admits a solution at all (no matterof its cost).Our contribution can be summarized as follows:(1) We chart the tractability frontier of the Feasibility problem for MMUCAs under qualitative restrictions, i.e., underrestrictions characterizing the types of bids in terms of the variety and quantity of goods involved in the varioustransformations. The analysis is carried out over three different bidding languages:• Atomic bids, where each bid is just defined over one set of transformations—this is the building block of the followingtwo languages;• OR-language, where bidders submit sets of atomic bids and accept to implement any combination of them for thesum of their prizes; and• XOR-language, where each bidder accepts to implement at most one atomic bid from the set of hers submitted atomicbids.In particular, for the above bidding languages, we analyze the scenario where each underlying atomic bid is definedover a set containing one transformation only (as in Example 1.1), as well as the more general case where each atomicbid is defined over an arbitrary set of transformations.(2) We study the complexity of Feasibility under structural restrictions of the networks originating from bidder interactions,motivated by the fact that many NP-hard problems in different application areas are known to be efficiently solvablewhen restricted to instances that can be modeled via (nearly)acyclic instances. Surprisingly, bad news emerged fromV. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–253our investigation. Indeed, we show that Feasibility is hard on (nearly)acyclic instances too, and even for atomic bidsonly. In particular, this is the case for two natural ways of encoding bidder interactions, namely, for:• transformations graphs, where nodes are in one-to-one correspondence with transformations and an edge indicatesthat one transformation produces a good required by the other, and for• goods graphs, where nodes are in one-to-one correspondence with goods and an edge indicates the possibility oftransforming a good into another.(3) We study the complexity of the Winner-Determination problem on MMUCA instances, in order to single out tractableclasses of MMUCAs extending those defined in [5,6] for CAs. To this end, we propose a notion of intricacy of an instanceand we define a hypergraph encoding for bidders interactions. The two concepts are designed to evidence the sources ofqualitative and structural intractability, respectively, which emerged in our analysis of the complexity of the Feasibilityproblem. In fact, we show that on classes of instances with “small intricacy” and whose associated hypergraphs are(nearly)acyclic, Winner-Determination can be solved in polynomial time.Note that the analysis we carry out in this paper extends some preliminary results on the complexity of MMUCAs wediscussed in [7]. There, we focused in fact on atomic bids, in a setting where each bid is defined over a set containingone transformation, and where the free disposal assumption has been considered only. Moreover, the hypergraph-basedapproach to encode interactions among bidders and the associated results are entirely novel contributions of this paper.Organization The rest of the paper is organized as follows. Section 2 reports a few preliminaries on MMUCAs. The complex-ity of Feasibility under qualitative and structural restrictions is discussed in Section 3 and Section 4, respectively. Tractabilityislands for the Winner-Determination problem are isolated in Section 5, and conclusions are drawn in Section 6.2. Mixed multi-unit combinatorial auctionsIn this section, we recall some basic notions about MMUCAs, and we illustrate relevant results known in the literatureon this formalism.2.1. Formal frameworkLet G be a set of types of goods. Any function W : G → N will be hereafter equivalently viewed as a multi-set overG containing W(g) repetitions of each good g ∈ G. As an example, W = {} denotes the function W : G → N such thatW(g) = 0, for each g ∈ G. Moreover, in order to manipulate such multi-sets, we shall use standard operators, such as ‘∩’,‘∪’, ‘\’, ‘⊆’, and ‘=’, under their usual semantics. For instance, {g, g} \ {g} = {g} and {g, g} ∩ {g} = {g}.A transformation over G is a tuple (cid:8)I, O(cid:9) where I : G → N (resp., O : G → N) is a function mapping each good g ∈ Gto the quantity required (resp., produced) for the transformation to take place (resp., as a result of the transformation). IfI = {} (resp., O = {}), then the transformation is just meant at offering (resp., requesting) some goods.An atomic bid over G is a triple b = (cid:8)B, p, type(cid:9), where B is a multi-set of transformations over G and where p ∈ Ris the payment the bidder is willing to make in return for being allocated all transformations in B or any subset B(cid:10) ⊆ B,depending on whether type = full or type = partial, respectively. Note that if p < 0, then the auctioneer must actually pay−p to the bidder in order for her to implement the transformations.A mixed multi-unit combinatorial auction instance over atomic bids is a tuple A = (cid:8)G, B, Uin, Uout(cid:9), where G is a set ofgoods, B is a multi-set of atomic bids over G, and Uin : G → N (resp., Uout : G → N) is a function denoting the quantities ofgoods the auctioneer holds to begin with (resp., expects to end up with).Definition 2.1 (Solutions). Let B(cid:10) ⊆ B be a multi-set of atomic bids over a set G of types of goods. We say that B(cid:10)feasible outcome for A = (cid:8)G, B, Uin, Uout(cid:9) if there is a sequence σ = (cid:8)I1, O1(cid:9), . . . ,(cid:8) Ik, Ok(cid:9) of transformations such that:is a(1) {(cid:8)I1, O 1(cid:9), . . . ,(cid:8) Ik, Ok(cid:9)} ⊇(2) {(cid:8)I1, O 1(cid:9), . . . ,(cid:8) Ik, Ok(cid:9)} \(cid:8)B,p,partial(cid:9)∈B(cid:10) B;(3) Mi−1 ⊇ Ii , for each i ∈ {1, . . . , k}, where M0 = Uin and Mi : G → N denote the quantities owned after the i-th trans-(cid:8)B,p,full(cid:9)∈B(cid:10) B;(cid:8)B,p,full(cid:9)∈B(cid:10) B ⊆(cid:2)(cid:2)(cid:2)formation, i.e., Mi = Mi−1 ∪ Oi \ Ii .Under the free disposal assumption, asolution to A is any feasible outcome B(cid:10)free disposal, instead, a solution to A is any feasible outcome such that Mk = Uout.such that Mk ⊇ Uout. In the case of lack of(cid:3)The revenue of the auctioneer with a feasible outcome B(cid:10)(cid:3)in it, i.e., the value(cid:8)B,p,type(cid:9)∈B(cid:10) p.is the sum of the payments associated with each atomic bidAn optimal solution is a solution providing the auctioneer with the maximum revenue over all the possible solutions.Example 2.2. Consider again the supply chain presented in Example 1.1. The supply chain can be formalized as an instance¯A = (cid:8) ¯G, ¯B, ¯Uin, ¯Uout(cid:9) where ¯G = {frame, brakes, drive train, front wheel, back wheel, seat, handlebars, chain, chainrings, dynamo,4V. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–25¯B(cid:10)(cid:10)Under free disposal, the sets¯Uin =¯B = {(cid:8){t1}, −2, full(cid:9), (cid:8){t2}, −3, full(cid:9), (cid:8){t3}, −10, full(cid:9), (cid:8){t4}, −17, full(cid:9), (cid:8){t5}, −8, full(cid:9), (cid:8){t6}, −10, full(cid:9)},bicycle},{chain, chainrings, frame, brakes}, and ¯Uout = {bicycle}. Notice in particular that prices are negative, for they express costs tobe payed by the auctioneer.¯B(cid:10) = {(cid:8){t1}, −2, full(cid:9), (cid:8){t3}, −10, full(cid:9), (cid:8){t5}, −8, full(cid:9), (cid:8){t6}, −10, full(cid:9)} and ¯B(cid:10)(cid:10) ={(cid:8){t1}, −2, full(cid:9), (cid:8){t4}, −17, full(cid:9), (cid:8){t6}, −10, full(cid:9)} are solutions whose associated revenues are −30 and −29, respec-tively. In fact,is nota solution at all. Indeed, by the transformation t4, the auctioneer obtains a dynamo, for which she might have to pay anadditional storage/disposal cost.is an optimal solution. Instead, under lack of free disposal,is an optimal solution while ¯B(cid:10)(cid:10)Note that each bid in ¯B consists of exactly one transformation. For a slightly more complex scenario involving combina-torial bids, assume that a novel bidder takes part in the transformation process by offering the whole set {t1, t4, t6} for $11,thereby giving rise to the instance (cid:8) ¯G, ¯B ∪ {(cid:8){t1, t4, t6}, −11, full(cid:9)}, ¯Uin, ¯Uout(cid:9). Under the free disposal assumption, an opti-mal solution to the novel instance is the set {(cid:8){t1, t4, t6}, −11, full(cid:9)}. Of course, the modification does not alter the optimalsolutions under lack of free disposal, given that the novel bid is of type full and, thus, accepting it causes implementing t4.if we consider the auction (cid:8) ¯G, ¯B ∪ {(cid:8){t1, t4, t6}, −11, partial(cid:9)}, ¯Uin, ¯Uout(cid:9), then {(cid:8){t1, t4, t6}, −11, partial(cid:9)}free disposal, the optimal outcome is(cid:2)is an optimal outcome under the free disposal assumption.{(cid:8){t1, t4, t6}, −11, partial(cid:9), (cid:8){t3}, −10, full(cid:9), (cid:8){t5}, −8, full(cid:9)}, which is witnessed by the sequence t1, t3, t5, t6.In absence ofNote that,¯B(cid:10)Note that, in some cases, bidders need to communicate more complex bids to the auctioneer, rather than just atomic bids.This calls for adopting an appropriate bidding language. In this paper, we consider the languages based on OR-combinationsand XOR-combinations of atomic bids, as defined next (on top of instances over atomic bids). In fact, these languagesare natural adaptations in the context of MMUCAs from those languages that are used for combinatorial auctions (see,e.g., [8]). In particular, the OR-language used to be the standard language for combinatorial auctions (see, e.g., [9]), whileXOR-combinations of bids have been introduced by [10] in order to obtain a full expressive language, where bidders canreport general preferences (both complementarity and substitutability).Let G be a set of types of goods. A c-bid (with c ∈ {OR, XOR}) over G is an expression of the form L = b1 c b2 c · · · c bk,where bi is an atomic bid, for each 1 (cid:2) i (cid:2) k. The multi-set {b1, . . . , bk} of atomic bids is denoted by bids(L).Let {L1, . . . , Ln} be a multi-set of OR-bids (resp., XOR-bids), and let B(cid:10)be a multi-set of atomic bids. We say that B(cid:10)(cid:10)satisfies {L1, . . . , Ln} if B(cid:10) ⊆(cid:10)∈ bids(L(cid:3)), for each 1 (cid:2) (cid:3) (cid:2) n). Thus, with1, . . . , bnOR-bids (resp., XOR-bids), bidders submit sets of atomic bids and accept to implement any combination of them (resp., atmost one of them).(cid:3)=1 bids(L(cid:3)) (resp., B(cid:10) ⊆ {b}, where b(cid:2)nA MMUCA instance over c-bids is a tuple AC = (cid:8)G, {L1, . . . ,L n}, Uin, Uout(cid:9), where {L1, . . . ,L n} is a multi-set of c-bids.of atomic bids is a feasible outcome for AC if B(cid:10)satisfies {L1, . . . ,L n} and is a feasible outcome for the(cid:3)=1 bids(L(cid:3)), Uin, Uout(cid:9) over atomic bids. The notions of solution and optimal solution are then defined anal-A multi-set B(cid:10)(cid:2)instance (cid:8)G,nogously to the case of instances over atomic bids.(cid:10)(cid:3)Example 2.3. In the supply chain discussed in Example 1.1, assume that a bidder communicates that she can implementeither the transformation t1 for $2 or, alternatively, the transformation t6 for $10. This can be formalized via the XOR-bid:(cid:4)¯L1 ={t1}, −2, full(cid:5)XOR(cid:4){t6}, −10, full(cid:5).Moreover, consider the XOR-bids ¯L2, . . . , ¯L5 where ¯Li = (cid:8){ti}, pi, full(cid:9) and where pi is the price of the transformation ti ,for each 2 (cid:2) i (cid:2) 5.These bids give rise to an instance ¯AXOR = (cid:8) ¯G, { ¯L1, . . . , ¯L5}, ¯Uin, ¯Uout(cid:9) over XOR-bids, where we cannot execute both t1and t6. Given that in order to produce a bicycle, t6 is mandatory, the constraint implies that the bid over {t1} cannot beaccepted. Thus, an optimal solution, under free disposal, has revenue −30 and is witnessed by the sequence t2, t4, t6. Notethat nothing changes w.r.t. the case discussed in Example 2.2, if OR-bids were submitted in place of the above XOR-bids.(cid:2)Indeed, given the OR-bid (cid:8){t1}, −2, full(cid:9) OR (cid:8){t6}, −10, full(cid:9), it is feasible to accept both its atomic bids.We leave the section by noticing that any MMUCA instance over atomic bids can be viewed as a trivial instance overOR-bids (resp., XOR-bids), where each OR-bid (resp., XOR-bid) actually consists of one atomic bid only.2.2. Related workCerquides et al. [1] introduced Mixed Multi-Unit Combinatorial Auctions (MMUCAs) as an extension of classical com-binatorial auctions. They discussed bidding languages, defined the Winner-Determination problem, and pointed out itsNP-hardness. Moreover, they provided an algorithmic solution to Winner-Determination, which is based on an integer pro-gram (IP) encoding. The solution approach uses binary decision variables for representing the set of transformations thathave to be accepted and the order in which they have to be implemented. As a drawback, it exploits a number of variablesthat is quadratic in the overall number of transformations. Indeed, this formulation has been empirically proved to be use-ful for solving only small and medium-sized instances [11]. Much of the subsequent research on MMUCAs has been in factdevoted to develop novel solution methods that are able to overcome the limits of this approach.V. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–255Two alternative IP formulations have been introduced in [4]. The first one is based on the use of integer decision vari-ables, instead of binary ones, and on some techniques for indexing them. This formulation requires a number of variablesthat is linear in the number of transformations; however, the constraints needed to refer to the index of a variable by meansof another variable are relatively expensive. The second formulation is based on the division of the Winner-Determinationproblem in two subproblems, that (i) determine the multi-set of transformations to accept and (ii) check if this multi-setof transformations is implementable. These two subproblems can be solved by two independent integer programs. The firstprogram looks for multi-sets of transformations that respect the bid constraints, allow to obtain a superset of the desiredgoods, and maximize the revenue for the auctioneer. The second program looks for a valid sequence of transformationswhere each transformation in the multi-set returned by the first program is used exactly once. As a matter of fact, thesecond program might not have a solution for the multi-set of transformations returned as a solution by the first program.Thus, it is sometimes necessary to repeatedly solve the first subproblem, each time eliminating the solution obtained in theprevious iteration by adding a constraint.Improvements in efficiency have been obtained by modifying the original formulation in [1], by adding constraints de-voted to code transformation dependencies [3]. In a nutshell, the key observation is that if a transformation requires in inputsome goods that can be produced only after that another transformation has been executed, then a partial order amongthese two transformations can be established. Partial orders are subsequently exploited to build a solution template and thesearch space is pruned by enforcing MMUCA solutions to fulfill such template. By using this novel formulation, an empiricalstudy about the factors (in terms of some topological, problem size, and price-based features) that make MMUCA instanceshard to solve has been performed [12].In a complementary line of research, the formalism of Petri Nets has been adopted in order to obtain more efficientsolvers for the Winner-Determination problem [13,14]. In particular, an extension of classical Petri Nets, called WeightedTransition Petri Nets (WTPN), has been introduced to encompass the costs associated to transformations, and a new type ofreachability problem over them (called MAXSEQ) has been defined. A mapping between MMUCA and WTPN instances hasbeen discussed as well as the correspondence between the Winner-Determination problem for MMUCAs and the MAXSEQproblem for the associated WTPN. By means of this approach, the number of decision variables has been reduced fromquadratic to linear for all classes of MMUCA instances that can be represented by acyclic WTPNs.Note that all the methods discussed above have been empirically validated on artificial datasets. Indeed, building gener-ators of syntectic data that are representative of real scenarios is an active area of research [15,11,4,16]. In particular, theMMUCATS tool [16], a test suite for MMUCAs, allows to integrate new Winner-Determination algorithms, to evaluate, andto compare them.Finally, an extension of the MMUCA framework that takes into account some types of time constraints has been recentlyproposed [19]. This extension supports the specification of partial orderings among the transformations, by relating trans-formations to absolute time points, and by constraining transformation durations. The Winner-Determination problem forthis new type of MMUCAs has been defined, and the original IP formulation [1] of the Winner-Determination problem hasbeen extended for supporting time constraints. The number of variables in such extended IP formulation remains quadraticin the number of transformations.3. FEASIBILIT Y and qualitative restrictionsThe Feasibility problem for MMUCAs consists in deciding whether a mixed multi-unit combinatorial auction instanceAC = (cid:8)G, {L1, . . . ,L n}, Uin, Uout(cid:9) over c-bids (with c ∈ {OR, XOR}) provided as input admits solutions. Note that the problemof deciding the existence of a solution is immaterial for classical combinatorial auctions under the free disposal assumption.Instead, it emerged to be computationally intractable for combinatorial auctions under the lack of free disposal assump-tion [17]. Moreover, we point out that the problem has been studied for reverse auctions, where the auctioneer is trying tobuy a certain set of goods, and for combinatorial exchanges, which is a generalization of auctions and reverse auctions whereparticipants are allowed to both buy and sell items. In these two latter settings, the problem emerged to be intractable withXOR-bids even under the free disposal assumption [17,18].In fact, similarly to the case of reverse auctions and combinatorial exchanges, Feasibility makes sense in our contextwhere the auctioneer wants to end up with some desired goods, even under the free disposal assumption. For instance, itis easily seen that there would be no solution in Example 2.3, if the bid ¯L1 was not submitted to the auctioneer. A crucialproblem for MMUCAs is therefore to characterize the computational complexity of Feasibility and, in particular, to sin-gle out classes of instances over which computing optimal solutions is feasible in polynomial time. In the following, weshall precisely address this study, by charting the tractability frontier of Feasibility with respect to various “qualitative”properties of the underlying instances. To this end, consider the instance AC = (cid:8)G, {L1, . . . ,L n}, Uin, Uout(cid:9), and let Tr de-note the multi-set of all transformations occurring in its bids. Then, let us define the following parameters, where for eachgood g, the auctioneer making available or requiring g is counted as one virtual transformation producing or consuming it,respectively:in-var(AC) = max{max(cid:8)I,O(cid:9)∈Tr|{g ∈ G | I(g) > 0}|, min{1,(cid:3)g∈GUout(g)}} is the input variety of AC, i.e., the maximumnumber of types of goods required as input by any given transformation over all possible transformations.6V. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–25out-var(AC) = max{max(cid:8)I,O(cid:9)∈Tr|{g ∈ G | O(g) > 0}|, min{1,(cid:3)g∈GUin(g)}} is the output variety of AC, i.e., the maximumnumber of types of goods produced by any given transformation over all possible transformations.in-mul(AC) = maxg∈G {max(cid:8)I,O(cid:9)∈TrI(g), Uout(g)} is the input multiplicity of AC, i.e., the maximum quantity of any goodrequired as input by any given transformation over all possible transformations.out-mul(AC) = maxg∈G {max(cid:8)I,O(cid:9)∈TrO(g), Uin(g)} is the output multiplicity of AC, i.e., the maximum quantity of any goodproduced by any given transformation over all possible transformations.in-deg(AC) = maxg∈G (|{(cid:8)I, O(cid:9) ∈ Tr | O(g) > 0}| + min{1, Uin(g)}) is the input degree of AC, i.e., the maximum number oftransformations producing any given good over all possible goods.out-deg(AC) = maxg∈G (|{(cid:8)I, O(cid:9) ∈ Tr | I(g) > 0}| + min{1, Uout(g)}) is the output degree of AC, i.e., the maximum numberof transformations requiring any given good over all possible goods.Note that all the above parameters depend on the transformations Tr occurring in the auction, but not on the specificbids defined over them.Example 3.1. Consider the MMUCA instance ¯AXOR defined in Example 2.3 and involving the set {t1, . . . , t6} of transforma-tions, which are graphically depicted in Fig. 1. By inspecting the figure, we can see that in-var( ¯AXOR) = 7 (because of t6),out-var( ¯AXOR) = 5 (because of t4), in-mul( ¯AXOR) = out-mul( ¯AXOR) = 1 (since all transformations require and produce justone item of each type of good, and since one item at most of each type of good is initially available or finally requestedby the auctioneer), in-deg( ¯AXOR) = 2 (because, e.g., of seat that is produced by t3 and t4), and out-deg( ¯AXOR) = 2 (because,(cid:2)e.g., of chain that is required by t1 and t2).In the following, the notation CC(iv, ov, im, om, id, od) will be used to indicate the class of all instances AC such that:in-var(AC) (cid:2) iv, out-var(AC) (cid:2) ov, in-mul(AC) (cid:2) im, out-mul(AC) (cid:2) om, in-deg(AC) (cid:2) id, and out-deg(AC) (cid:2) od. Whenfocusing on instances with atomic bids only, the subscript ‘C’ will be omitted. Moreover, we shall use the symbol ∞ todenote that no bound is issued on some given parameter.Summary of results. A detailed analysis of the computational complexity arising with the Feasibility problem over sev-eral classes CC(iv, ov, im, om, id, od) of instances is reported in the rest of this section. In particular, the complexity ofFeasibility is analyzed by considering two different scenarios:1. First, we analyze the case where each atomic bid (cid:8)B, p, type(cid:9) involved in the definition of the MMUCA instance is suchthat |B| = 1, i.e., such that all atomic bids are defined over singleton sets of transformations. This is, for instance, thecase of Example 2.2. In fact, this scenario is peculiar for MMUCAs and its analysis is therefore crucial to single out thesource of intractability that can be hidden in the interactions occurring in production processes.2. Then, we consider the general case where no restriction is imposed over the bids involved in the instance. Note thatthis scenario is essentially equivalent to the one in (1), whenever all bids are of type = partial. Indeed, as far as theFeasibility problem is concerned, any atomic bid (cid:8)B, p, type(cid:9) with type = partial and where |B| = k can be transpar-ently substituted with k fresh atomic bids (whose associated payments are irrelevant), each one being defined over adifferent transformation taken from B. Therefore, we shall only focus to the case where there is at least one bid oftype = full.A summary of the complexity results for the case where bids are defined over singleton sets of transformations isreported in Fig. 2. Note that the expressiveness of XOR-bids [1] is payed in terms of smaller tractability islands. Moreover,note that the complexity of OR-bids and atomic bids coincides, with hardness results being actually given over auctions thatuse atomic bids only. Finally, note that the lack of free disposal represents an additional source of intractability.A summary of the complexity results arising with bids defined over arbitrary sets of transformations (and with at leastone bid with type = full) is reported in Fig. 3. Of course, all hardness results provided for singleton sets of transformationsstill hold in this more general setting. In fact, most of the results in Fig. 2 have been strengthened, thus showing thatintroducing the possibility of defining bids over arbitrary sets of transformations makes problems substantially harder thanbefore.The rest of the section is devoted to provide detailed proofs of such complexity results. Actually, membership in NPhas been show in [1] for arbitrary MMUCA instances. Thus, we shall either just provide NP-hardness results, or single outislands of tractability.3.1. Hard instances for atomic bids over singleton sets of transformationsLet us start by considering MMUCA instances over atomic bids, and by providing hardness results that still hold whenbids are defined over singleton sets of transformations. In this scenario, since we are interested in the Feasibility prob-lem, we can get rid, w.l.o.g., of the type of the bids and of their associated payments. Thus, any bid can be equivalentlyviewed as a transformation, and a MMUCA instance A can be defined as a tuple (cid:8)G, T , Uin, Uout(cid:9), where T is a multi-setof transformations. A solution is then a sequence of transformations taken from T and satisfying condition (3) in Defini-tion 2.1.V. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–257ivovimOR-bids ≡ atomic bidsomidodFree disposal111 ∞ ∞1∞ ∞ ∞ ∞ ∞ 1∞ ∞ ∞ ∞ 1 ∞222121211211111211212222in P [Thm. 3.13]in P [Thm. 3.14]in P [Thm. 3.15]NP-complete [Thm. 3.5]NP-complete [Thm. 3.3]NP-complete [Thm. 3.6]NP-complete [Thm. 3.4]ivovimomidodFree disposalXOR-bids∞ ∞ ∞ ∞ 1 ∞111112in P [Thm. 3.16]NP-complete [Thm. 3.11]OR-bids ≡ atomic bidsivovimomidodLack of free disposal111 ∞ ∞1∞ ∞ ∞ ∞ ∞ 1121111 ∞ ∞ 1 ∞ NP-complete [Thm. 3.10]NP-complete [Thm.3.9]1NP-complete [Thm.3.8]2NP-complete [Thm.3.8]1NP-complete [Thm.3.8]1in P [Thm. 3.13]in P [Thm. 3.14]1112112112222222ivovimomidodLack of free disposalXOR-bids∞ ∞ ∞ ∞ 11121 ∞ ∞ 1 ∞ NP-complete [Thm. 3.12]NP-complete [Thm. 3.12]1NP-complete [Thm. 3.12]11in P [Thm. 3.17]11112112Fig. 2. Feasibility and qualitative restrictions. Summary of results for bids over singleton sets of transformations.We start by analyzing the case when the free disposal assumption holds. Hardness results for this setting are nextprovided via reductions from the problem of checking the Satisfiability of Boolean formulas in conjunctive normal form.Recall that deciding whether a Boolean formula in conjunctive normal form Φ = c1 ∧ · · · ∧ cm over the variables X1, . . . , Xnis satisfiable, i.e., deciding whether there exists a truth assignment to the variables making each clause c j true, is NP-hard [20]. In fact, to simplify the following reductions, we find it useful to state the intractability of a specific class ofBoolean formulas, whose proof is reported in Appendix A.Lemma 3.2. Satisfiability is NP-hard, even on classes of Boolean formulas in conjunctive normal form where each variable occurspositively in two clauses and negatively in another, and where each clause contains three literals at most.Theorem 3.3. Feasibility is NP-hard under the free disposal assumption, even when restricted to the class C(1, 2, 1, 1, 2, 2).ii , X F{ Xi, X T(cid:2)ni=1} ∪ {c1, . . . , cm} ∪ {cijProof. Let Φ = c1 ∧ · · · ∧ cm be a Boolean formula over the variables X1, . . . , Xn satisfying the conditions in Lemma 3.2, andlet A(Φ) = (cid:8)G, T , Uin, Uout(cid:9) be the MMUCA instance over atomic bids (defined over singleton sets of transformations) suchTi .that: G =In particular, for each variable Xi occurring positively in the clauses cα and cβ while occurring negatively in cγ , the set Ti}, {cβ }(cid:9), andconsists of the set of transformations {(cid:8){ Xi}, { X Ti}, {cγ }(cid:9)}. An illustration of Ti is reported in Fig. 4.(cid:8){ciγObserve that two transformations occur in Ti requiring Xi as input, one that produces X Ti and another that produces X Fi .These transformations are meant to encode the selection of a truth value assignment to the variable Xi and, in fact, theyare mutually exclusive in any solution, since there is just one copy of Xi in Uin.| Xi occurs in c j}, Uin = { X1, . . . , Xn}, Uout = {c1, . . . , cm}, and T =}(cid:9), (cid:8){ Xi}, { X Fi}, {cα}(cid:9), (cid:8){ciβ}(cid:9), (cid:8){ X Fi}(cid:9), (cid:8){ X Ti(cid:2)ni=1}(cid:9), (cid:8){ciα}, {ciγα, ciβ}, {ci8V. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–25OR-bids ≡ atomic bidsivovimomidodFree disposal∞ ∞ ∞ ∞ ∞ 1∞ ∞ ∞ ∞ 1 ∞211112in P [Thm. 3.20]in P [Thm. 3.19]NP-complete [Thm. 3.18]ivovimomidodFree disposalXOR-bids∞ ∞ ∞ ∞ 1 ∞111112in P [Thm. 3.19]NP-complete [Thm. 3.11]OR-bids ≡ atomic bidsivovimomidodLack of free disposal∞ ∞ ∞ ∞ ∞ 1211111in P [Thm. 3.20]NP-complete [Thm. 3.18]ivovimomidodLack of free disposalXOR-bids∞ ∞ ∞ ∞ 12111111111112in P [Thm. 3.21]NP-complete [Thm. 3.12]NP-complete [Thm. 3.18]Fig. 3. Feasibility and qualitative restrictions. Summary of results for bids over arbitrary (i.e., not necessarily singleton) sets of transformations.Fig. 4. Hardness results over atomic bids: Reductions in the proofs of Theorems 3.3, 3.4, 3.5, and 3.6.Based on the above observation, we now claim: Φ is satisfiable ⇔ A(Φ) has a solution.(⇒) Let x be a satisfying assignment of Φ, and consider the sequences of transformations σi , for each 1 (cid:2) i (cid:2) n, such that}(cid:9),σi = (cid:8){ Xi}, { X Ti(cid:8){ X F}, {cγ }(cid:9) if Xi evaluates false. By construction, the sequence σ1, . . . , σn obtained as their concatenation}(cid:9), (cid:8){ci}, {ciγγisatisfies condition (3) in Definition 2.1 and leads to the desired final configuration. Thus, σ1, . . . , σn is a solution toA(Φ).}, {cβ }(cid:9) if Xi evaluates true in x, and such that σi = (cid:8){ Xi}, { X Fi}, {cα}(cid:9), (cid:8){ciβ}(cid:9), (cid:8){ X Ti}(cid:9), (cid:8){ciαα, ciβ}, {ci(⇐) Let σ be a solution to A(Φ). Then, for each clause c j , with 1 (cid:2) j (cid:2) m, σ executed a set of transformations producingi , for some variable Xi occurring in c j : Let x be the (possibly partial) truthas an intermediate good either X Ti or X FV. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–259assignment where each such variable Xi evaluates true (resp., false) if X Tiimmediate to check that x is a satisfying assignment of Φ.(resp., X Fi ) is the produced good. It isTo conclude the proof, observe that A(Φ) belongs to C(1, 2, 1, 1, 3, 2), but not necessarily to C(1, 2, 1, 1, 2, 2) sincea clause c j may contain three variables Xi, Xi(cid:10) , and Xi(cid:10)(cid:10) . In order to face this case, we can add one further good ¯c j , and}, {¯c j}(cid:9), and (cid:8){¯c j}, {c j}(cid:9).replace the two transformations (cid:8){cijClearly, the resulting auction has input degree equals to 2, while keeping unchanged the values of all the other parametersand the properties of the reduction. (cid:3)}, {c j}(cid:9) with the transformations: (cid:8){cij}, {c j}(cid:9) and (cid:8){ci}, {¯c j}(cid:9), (cid:8){cij(cid:10)(cid:10)(cid:10)(cid:10)j(cid:10)(cid:10)The following three results are based on simple adaptations of the reduction in Theorem 3.3.Theorem 3.4. Feasibility is NP-hard under the free disposal assumption, even when restricted to the class C(1, 1, 1, 2, 2, 2).}(cid:9) and (cid:8){ X TiProof. Let Φ = c1 ∧ · · · ∧ cm be a Boolean formula over the variables X1, . . . , Xn satisfying the conditions in Lemma 3.2.Let A1(Φ) be the auction that is obtained from A(Φ) (defined in the proof of Theorem 3.3) by substituting the two trans-formations (cid:8){ Xi}, { X T}(cid:9), for each}(cid:9), with the transformations (cid:8){ Xi}, { X Tii1 (cid:2) i (cid:2) n. Thus, Xi can generate two copies of X Ti , each one enabling one of the two clauses where Xi positively occurs. SeeFig. 4 for an illustration. Eventually, each of the two transformations (cid:8){ Xi}, { X T}(cid:9) arestill mutually exclusive in any sequence of transformations satisfying condition (3) in Definition 2.1. Thus, the line of rea-soning in the proof of Theorem 3.3 still applies (in particular, note that the case where in-deg(A1(Φ)) = 3 can be reducedto a case where in-deg(A1(Φ)) = 2), and we can conclude that Φ is satisfiable ⇔ A1(Φ) has a solution. (cid:3)}(cid:9) and the transformation (cid:8){ Xi}, { X Fi}(cid:9), (cid:8){ X Ti}(cid:9), (cid:8){ X Ti}, {ciα}, {ciβi , X Ti , X Tα, ciβ}, {ciiTheorem 3.5. Feasibility is NP-hard under the free disposal assumption, even when restricted to the class C(2, 1, 1, 1, 2, 2).Proof. Let Φ = c1 ∧ · · · ∧ cm be a Boolean formula over the variables X1, . . . , Xn satisfying the conditions in Lemma 3.2. Con-(cid:2)sider the auction A2(Φ) = (cid:8)G, T , Uin, Uout(cid:9) such that: G =| Xi occurs in c j},} ∪ {c1, . . . , cm} ∪ {cini=1(cid:2)j(cid:10)Ti . In particular, for each variable Xi occurring positivelyUin = { X1, . . . , Xn, X}, Uout = {c1, . . . , cm}, and T =ni=1n(cid:10)in the clauses cα and cβ while occurring negatively in cγ , Ti is the set {(cid:8){ Xi}, { X T}(cid:9), (cid:8){ Xi}, { X i}(cid:9), (cid:8){ X}(cid:9),ii}, {cγ }(cid:9)}. An illustration of Ti is reported(cid:8){ X i, X}, {cβ }(cid:9), (cid:8){ci}(cid:9), (cid:8){ X Fγiin Fig. 4.}, {cα}(cid:9), (cid:8){ciβ(cid:10)1, . . . , X}(cid:9), (cid:8){ X Ti}(cid:9), (cid:8){ X Ti}(cid:9), (cid:8){ciαi , X i, X}, { X Ti}, { X Fi}(cid:9), (cid:8){ X{ Xi, X}, {ciα}, {ciβ(cid:10)i, X F(cid:10)i, X T}, {ciγ}, { X(cid:10)i(cid:10)i(cid:10)iObserve that for each variable Xi , the transformation (cid:8){ Xi}, { X Ti(cid:10)}, { X Tii}(cid:9) is mutually exclusive with (cid:8){ Xi}, { X i}(cid:9), and that}(cid:9)}(cid:8){ X}(cid:9) is mutually exclusive with (cid:8){ Xis mutually exclusive with the application of (cid:8){ X i, X}(cid:9), thereby encoding a selection of a truth value assignmentto the variable Xi . Thus, the line of reasoning in the proof of Theorem 3.4 still applies (in particular, note that the casewhere in-deg(A2(Φ)) = 3 can be reduced to a case where in-deg(A2(Φ)) = 2), so that it possible to produce a supersetof {c1, . . . , cm} if, and only if, all the various selected transformations encode a satisfying assignment of Φ. That is, Φ issatisfiable ⇔ A2(Φ) has a solution. (cid:3)}(cid:9). Thus, the application of a transformation in {(cid:8){ Xi}, { X Ti}, { X Ti}, { X Fi}(cid:9), (cid:8){ X}, { X(cid:10)i(cid:10)i(cid:10)i(cid:10)iiTheorem 3.6. Feasibility is NP-hard under the free disposal assumption, even when restricted to the class C(1, 1, 2, 1, 2, 2).(cid:10)i(cid:10)i}, { Xi , X F}(cid:9), (cid:8){ X i, X}(cid:9), for each 1 (cid:2) i (cid:2) n. Basically, Xi and XProof. Let Φ = c1 ∧ · · · ∧ cm be a Boolean formula over the variables X1, . . . , Xn satisfying the conditions in Lemma 3.2.Let A3(Φ) be the auction obtained from A2(Φ) (defined in the proof of Theorem 3.5) by substituting the transfor-mations (cid:8){ Xi}, { X i}(cid:9), (cid:8){ X}(cid:9) and}, {ci}(cid:9), (cid:8){ Xγ}, {ci(cid:8){ X Fi , together enabling the clauseγwhere Xi negatively occurs. See Fig. 4 for an illustration. In fact, the transformation (cid:8)(cid:8){ X F}(cid:9)(cid:9) can be applied if, and}, {ciγionly if, none of the transformations in {(cid:8){ X T}(cid:9)} is applied. Thus, the line of reasoning in the proof of The-}, {ciβiorem 3.3 can still be used (again, the case where in-deg(A3(Φ)) = 3 can be reduced to a case where in-deg(A3(Φ)) = 2),and we have that Φ is satisfiable ⇔ A3(Φ) has a solution. (cid:3)(cid:10)i may now generate two copies of X Fi , X F}(cid:9), with the transformations (cid:8){ Xi}, { X Fi}(cid:9) and (cid:8){ X Fi}(cid:9), (cid:8){ X Ti}, { X Fi}, { X Fi}, {ciα(cid:10)i(cid:10)iiIn order to complete the picture, we need now to consider the problem under the lack of free disposal assumption.In fact, in the proofs of Theorems 3.3, 3.4, 3.5, and 3.6, the careful reader may have noticed that if the formula Φis satisfiable, then there might be solutions to the MMUCA instance (built based on Φ) producing more than one copyof some output good. Indeed, this happens if the same clause is satisfied by two different variables in a satisfying truthassignment. To avoid these cases and smoothly apply the above proofs under the lack of free disposal assumption, we shalluse a reduction from the problem of deciding whether, given a Boolean formula Φ, there is a satisfying assignment suchthat, for each clause, exactly one literal evaluates true. The problem, which we call exact-1 Satisfiability, remains NP-hardeven if each clause exactly contains three literals (problem ONE-IN-THREE 3SAT in [21]). Below we state the hardness of a10V. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–25variant of this problem, whose complexity is proven in Appendix A and which applies to the Boolean formulas defined inLemma 3.2.Lemma 3.7. exact-1 Satisfiability is NP-hard, even on classes of Boolean formulas in conjunctive normal form where each variableoccurs positively in two clauses and negatively in another, and where each clause contains three literals at most.In the light of the above lemma, by inspecting the proofs of Theorems 3.3, 3.4, 3.5, and 3.6, we obtain that, givena formula Φ, there is a satisfying assignment such that, for each clause, exactly one literal evaluates true (i.e., exact-1Satisfiability has a solution over Φ) if, and only if, the corresponding MMUCA has a solution under the lack of freedisposal. Thus, the following can be straightforwardly derived.Theorem 3.8. Feasibility is NP-hard under the lack of free disposal assumption, even when restricted to the classes C(2, 1, 1, 1, 2, 2),C(1, 2, 1, 1, 2, 2), C(1, 1, 2, 1, 2, 2), and C(1, 1, 1, 2, 2, 2).In fact, Theorem 3.8 can be further strengthened in the two directions which are next analyzed.Theorem 3.9. Feasibility is NP-hard under the lack of free disposal assumption, even when restricted to the class C(2, 1, 1, 1, 1, 2).Proof. The reduction is again from the exact-1 Satisfiability problem. We recall first that exact-1 Satisfiability is knownto be NP-hard even on classes of Boolean formulas in conjunctive normal form where not only each clause contains exactlythree literals (problem ONE-IN-THREE 3SAT in [21]), but also if all variables occur positively in the formula [21]. Let Φ =c1 ∧ · · · ∧ cm be a Boolean formula over the variables X1, . . . , Xn satisfying the conditions stated above. Consider the MMUCA(cid:2)| Xi occurs in c j} ∪{c1, . . . , cm}, Uin = {c1, . . . , cm}, andinstance A4(Φ) = (cid:8)G, T , Uin, ∅(cid:9) such that: G = { X1, . . . , Xn}∪ni=1T =Ti ∪| Xi occurs in c j}, { Xi}(cid:9), (cid:8){ Xi}, ∅(cid:9)}. And, for eachclause c j , T (cid:10)T (cid:10)j . In particular, for each variable Xi , Ti is the set {(cid:8){ciis the set {(cid:8){c j}, {cij}(cid:9) | Xi occurs in c j}}.(cid:2)ni=1mj=1{cij(cid:2)jjNote that the transformations in T (cid:10)j are meant to encode the selection of a variable satisfying the clause and they aremutually exclusive with each other, since there is just one copy of c j in A4(Φ). On the other hand, the transformations inTi imply that Xi can be derived if, and only if, cij is derived for each clause c j where Xi occurs. In fact, whenever Xi isproduced, it can be consumed by the transformation (cid:8){ Xi}, ∅(cid:9).Based on these observations, we now claim that exact-1 Satisfiability has a solution over Φ ⇔ A4(Φ) has a solution underthe lack of free disposal assumption.(⇒) Let x be a satisfying assignment of Φ such that, for each clause, exactly one variable evaluates true. In particular,for a clause c j , let x( j) denote the index of the variable in c j that evaluates true in x. Consider now the set of| Xx( j) occurs in c j(cid:10) }, { Xx( j)}(cid:9), (cid:8){ Xx( j)}, ∅(cid:9)}. Note that if c j and c j(cid:10) are twotransformations S j = {(cid:8){c j}, {c(cid:10)). It follows that weclauses containing a variable Xi evaluating true in x, then it must be the case that i = x( j) = x( jmcan order the transformations in the setj=1 S j in a way satisfying condition (3) in Definition 2.1. Note that after theapplication of such a sequence of transformations, no good remains to the auctioneer.}(cid:9), (cid:8){cx( j)j(cid:10)x( j)j(⇐) Let σ be a solution to A4(Φ). In order to consume all goods initially owned due to the lack of free disposal, σ must in-clude (as a postfix) a number of transformations of the form (cid:8){ Xi}, ∅(cid:9). Moreover, for each transformation consuming Xi ,we have in turn that σ includes the transformation (cid:8){ci| Xi occurs c j}, { Xi}(cid:9). It follows that the truth assignment xjwhere each variable Xi evaluates true if, and only if, Xi is an intermediate good produced by σ is a satisfying as-signment of Φ. Moreover, as transformations in T (cid:10)j are mutually exclusive, x is such that, for each clause, exactly oneliteral evaluates true.(cid:2)To conclude the proof, observe that A4(Φ) belongs to C(3, 1, 1, 1, 1, k), since a clause c j contain three variables (and,thus, out-deg(A4(Φ)) = 3), and since the same variable can occur in k clauses (and, thus, in-var(A4(Φ)) = k).For the former case, let c j be a clause containing the variables Xi, Xi(cid:10) , and Xi(cid:10)(cid:10) . Then, we can add one fresh good ¯c j ,and replace the transformations in T (cid:10)}(cid:9), (cid:8){c j}, {¯c j}(cid:9), (cid:8){¯c j}, {ci}(cid:9). The output degree in the trans-jformed auction is 2. Instead, for the latter case, if a variable Xi occurs in the clauses c j1 , . . . , c jk , then we can add the}(cid:9),fresh goods X 1(cid:8){ X ki}, { Xi}(cid:9), (cid:8){ Xi}, ∅(cid:9). The input degree is 2. All the other properties of the reduction remain unchanged. (cid:3)i and substitute the transformations in Ti with (cid:8){cij1j with (cid:8){c j}, {ci}(cid:9), . . . ,(cid:8){ X k−1}(cid:9), (cid:8){¯c j}, {ciji , . . . , X k}(cid:9), (cid:8){ X 1}, { X 2i}, { X 1i}, { X kii , cij2, cijk(cid:10)(cid:10)ji(cid:10)Theorem 3.10. Feasibility is NP-hard under the lack of free disposal assumption, even when restricted to the class C(1, 1, ∞, ∞,1, ∞).Proof. Deciding whether there is a way to partition a bag S = {s1, s2, . . . , sn} of integers into two bags S1 and S2 such thatthe sum of the numbers in S1 equals the sum of the numbers in S2 is the NP-complete Partition problem [21].V. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–2511(cid:3)n{α}, {}(cid:9)}. Note that there is no bound on the output multiplicity of A(S), since Uin(α) = m/2.i=1 si , and consider the MMUCA instance A(S) = (cid:8)G, T , Uin, ∅(cid:9) such that: G = {α}, Uin(α) = m/2, and T =Let m =(cid:2)(cid:2)si{(cid:8)ni=1i=1It is immediate to check that, under the lack of free disposal, there is a solution to A(S) if, and only if, Partition hasa solution on input S. Indeed, solutions to A(S) one-to-one correspond with sets of transformations consuming exactly allthe input goods, and thus such that the sum of their associated input requirements equals to m/2. (cid:3)For the sake of completeness, note that the reduction in the above proof is from the Partition problem, which is feasiblein polynomial time if all integers are assumed to be given in unary (formally, the problem is weakly NP-hard). Assessingwhether a strong NP-hardness result can be achieved is an interesting technical question.3.2. Hard instances for XOR-bids over singleton sets of transformationsLet us now move to analyze the case of XOR-bids, by providing hardness results that still hold under the simple scenariowhere all the bids are defined over singleton sets of transformations. W.l.o.g. (given our interest in the Feasibility problemand given the focus on singleton sets of transformations), in the following, we shall simply view any XOR-bid L as anexpression t1 XOR t2 XOR . . . XOR tk, where ti is a transformation (rather than an atomic bid), for each 1 (cid:2) i (cid:2) k.We start with the case of free disposal.Theorem 3.11. Feasibility is NP-hard under the free disposal assumption, even when restricted to the class CXOR(1, 1, 1, 1, 2, 1).Proof. Let Φ = c1 ∧ · · · ∧ cm be a Boolean formula over the variables X1, . . . , Xn satisfying the conditions in Lemma 3.2. Con-| a ∈ {1, . . . , 4}}, Uin, Uout(cid:9) such that: G = {c1, . . . , cm} ∪sider the MMUCA instance over XOR-bids A5(Φ) = (cid:8)G, {La1, . . . ,L an| Xi occurs in c j}, Uin = {}, Uout = {c1, . . . , cm}, and where {La{ci| a ∈ {1, . . . , 4}} is a set of XOR-bids defined1, . . . ,L ajas follows. For each variable Xi that occurs positively in cα and cβ while occurring negatively in cγ ,let us defineL1i}, {cα}(cid:9), and L4i}(cid:9) XOR (cid:8){}, {ciγ= (cid:8){}, {ci}(cid:9), L2}, {cγ }(cid:9) XOR (cid:8){}, {ciαβiWe now claim that Φ is satisfiable ⇔ A(Φ) has a solution.}, {cβ }(cid:9).= (cid:8){ciβ= (cid:8){ciα= (cid:8){ciγ}(cid:9), L3in(⇒) Let x be a satisfying assignment of Φ, and consider the sequences of transformations σi , for each 1 (cid:2) i (cid:2) n, such thatσi = (cid:8){}, {ci}, {cγ }(cid:9) ifαXi evaluates false. By construction, the sequence σ1, . . . , σn obtained as their concatenation satisfies condition (3) inDefinition 2.1 and leads to the desired final configuration. Moreover, note that the set of all the bids in such sequencesatisfies {L1}, {cβ }(cid:9) if Xi evaluates true in x, and such that σi = (cid:8){}, {ciγ}, for each 1 (cid:2) i (cid:2) n. Thus, σ1, . . . , σn is a solution to A5(Φ).}, {cα}(cid:9), (cid:8){ciβ}(cid:9), (cid:8){}, {ciβ}(cid:9), (cid:8){ciγ}(cid:9), (cid:8){ciα(⇐) Let σ be a solution to A5(Φ). Note that, for each variable Xi that occurs positively in cα and cβ while occur-}, {cγ }(cid:9) together with any of the transformations in}, {cβ }(cid:9)}. Thus, let x be the truth assignment where each variable Xi evaluates false if, and only if,ring negatively in cγ , σ cannot execute the transformation (cid:8){ciγ}, {cα}(cid:9), (cid:8){ci{(cid:8){ciαβ}, {cγ }(cid:9) is executed in σ . By construction, it is immediate to check that x is a satisfying assignment of Φ.(cid:8){ciγi , L2i , L3i , L4iTo conclude the proof, note that we may have in-deg(A5(Φ)) = 3 because of some clause containing three variables.Normalization can be carried out along the line discussed in the proof of Theorem 3.3, in order to guarantee that the inputdegree of the transformed instance is 2. (cid:3)Then, the picture is easily completed for the case of lack of free disposal.Theorem 3.12. Feasibility is NP-hard under the lack of free disposal, even when restricted to the classes CXOR(1, 1, 1, 1, 2, 1),CXOR(2, 1, 1, 1, 1, 2), and CXOR(1, 1, ∞, ∞, 1, ∞).Proof. The fact that Feasibility is NP-hard on the class CXOR(1, 1, 1, 1, 2, 1) under the lack of free disposal follows byinspection of the proof of Theorem 3.11 and by exploiting a reduction from the problem in Lemma 3.7—see the argumentsused in the previous section for Theorem 3.8. Hardness over the classes CXOR(2, 1, 1, 1, 1, 2) and CXOR(1, 1, ∞, 1, 1, ∞)follows from Theorem 3.9 and Theorem 3.10, since CXOR(2, 1, 1, 1, 1, 2) ⊃ C(2, 1, 1, 1, 1, 2) and CXOR(1, 1, ∞, ∞, 1, ∞) ⊃C(1, 1, ∞, ∞, 1, ∞), respectively. (cid:3)3.3. Tractable instances for OR-bids over singleton sets of transformationsLet us now focus on proving tractability results, by starting with the case of OR-bids defined over singleton sets oftransformations. Before presenting this analysis, we note that if AOR = (cid:8)G, {L1, . . . ,L n}, Uin, Uout(cid:9) is a MMUCA instancewhere {L1, . . . ,L n} is a multi-set of OR-bids, then deciding the existence of a solution to AOR just reduces to deciding the(cid:3)=1 bids(L(cid:3)), Uin, Uout(cid:9) over atomic bids. Indeed, the satisfiability of OR-bids isexistence of a solution to the instance (cid:8)G,(cid:2)n12V. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–25Fig. 5. Example construction in the proof of Theorem 3.13, in the case of free disposal case.Fig. 6. Example construction in the proof of Theorem 3.13, in the case of lack free disposal case.actually immaterial. Thus, instances over OR-bids will be next equivalently viewed as instances over atomic bids. Moreover,recall that, by assuming that each bid is defined over singleton sets of transformations, we can get rid of the type of thebids and of their associated payments. Thus, as in Section 3.1, we shall analyze a setting where a MMUCA instance A isjust defined as a tuple (cid:8)G, T , Uin, Uout(cid:9), where T is a multi-set of transformations, and where a solution is a sequence oftransformations taken from T and satisfying condition (3) in Definition 2.1.We start by considering the case where every transformation requires and produces an item of one good at most. Weshow that Feasibility is feasible in polynomial time both under the free disposal assumption and without free disposal.Theorem 3.13. On the class COR(1, 1, 1, 1, ∞, ∞) restricted to instances defined over singleton sets of transformations, Feasibilityis in P.(cid:10)) | {g, gProof. Consider first the case of free disposal. Let A = (cid:8)G, T , Uin, Uout(cid:9) be a MMUCA such that A ∈ COR(1, 1, 1, 1, ∞, ∞).Based on A, we view the goods in G as nodes and we build a directed graph (N, E) such that N = G ∪ {s, t} and E ={(g, g(cid:10)} ∪ {(s, g), (g, t) | g ∈ G}, where s and t do not occur in G.(cid:10)} ⊆ G ∧ g (cid:20)= gThe idea is to associate with (N, E) the flow network (cid:8)(N, E), u, (cid:3)(cid:9), u : E → R(cid:2)0, (cid:3) : E → R(cid:2)0, where each edge e ∈ E hasa capacity u(e) and a lower bound (cid:3)(e) that bound, respectively, the maximum and minimum quantity of flow that cancross it, and where the node s (resp., t) is the source (resp., the sink). Recall first, e.g., from [22], that a flow assignmenton (cid:8)(N, E), u, (cid:3)(cid:9) is a function f : E → R(cid:2)0 satisfying the following constraints: (cid:3)(e) (cid:2) f (e) (cid:2) u(e), for each e ∈ E (capacityr∈N f (v, r) = 0, for each v ∈ N \ {s, t} (conservation constraints). Moreover, recall that theconstraints), andvalue of fw∈N f (w, t). Then, we define edge capacities and lower bounds as follows:w∈N f (w, v) −(cid:3)is the number(cid:3)(cid:3)• For each edge of the form (s, g), let u(s, g) = Uin(g) + |{(cid:8)∅, O(cid:9) ∈ T | O(g) > 0}| and (cid:3)(s, g) = Uin(g). That is, the sink spushes in the network via the edge (s, g) at least Uin(g) units of flow, plus at most |{(cid:8)∅, O(cid:9) ∈ T | O(g) > 0}| additionalunits associated with transformations producing g and requiring no goods as input.• For each edge of the form (g, t), let u(g, t) = Uout(g) + M(g) and (cid:3)(g, t) = Uout(g). That is, the source t absorbs viathe edge (g, t) at least Uout(g) units of flow, plus at most M(g) additional units. In particular, M(g) has to be set asan upper bound on the maximum number of goods of type g being produced over all the possible solutions to A. Forinstance, we can set M(g) =• For each edge of the form (g, g(cid:10)) = 0. That is, this edge is(cid:10)) = |(cid:8)I, O(cid:9) ∈ T | I(g) > 0 ∧ O(gprepared to route a number of units of flow corresponding to the number of transformations receiving g as input andproducing gg∈G(cid:10)), let u(g, g(cid:10)) > 0| and (cid:3)(g, gUin(g) + |T |.as output.(cid:3)(cid:10)(cid:10)}(cid:9)},(cid:10)}(cid:9), (cid:8){}, {g¯Uin(g) = 1,To exemplify the above construction, consider the very simple MMUCA instance ¯A = (cid:8) ¯G, ¯T , ¯Uin, ¯Uout(cid:9) such that ¯G =(cid:10)}, ¯T = {(cid:8){g}, {g(cid:10)) = 1. The associated flow network is{g, greported in Fig. 5, together with a graphical illustration of an admissible flow having value 2 (where edges associated withan empty flow are omitted). Note that such admissible flow corresponds to a solution to ¯A, where the transformation(cid:8){}, {gplus the unit of g initially availableto her. Another admissible flow, but having value 1, is reported in the right part of Fig. 6. There, the flow corresponds to asolution where the good g initially available to the auctioneer is transformed via (cid:8){g}, {g, which is thedesired outcome. In fact, the above correspondences are not by chance.(cid:10)}(cid:9) is used to produce a unit of gso that the auctioneer ends up with a unit of g¯Uout(g) = 0, and ¯Uout(g(cid:10)}(cid:9) into the good g(cid:10)) = 0,¯Uin(g(cid:10)(cid:10)(cid:10)Indeed, we claim that there is a solution to A under the free disposal assumption ⇔ there is a flow assignment on (cid:8)(N, E), u, (cid:3)(cid:9).V. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–2513(⇒) Assume that σ is a solution to A, and let Tσ be the multi-set of all the transformations in σ . Then, con-sider the function f : E → R(cid:2)0 defined as follows. For each edge of the form (s, g),fσ (s, g) = Uin(g) +(cid:10))(cid:10)) = |(cid:8)I, O(cid:9) ∈ Tσ | I(g) > 0 ∧ O(g(cid:10)),|{(cid:8)∅, O(cid:9) ∈ Tσ | O(g) > 0}|. For each edge of the form (g, g(cid:10)).> 0|. And, for each edge of the form (g, t), let fσ (g, t) = fσ (s, g) +(g,g(cid:10))∈E∧g(cid:10)∈G fσ (g, gNote that, by construction, the function fσ satisfies the conservation constraints of the flow network (cid:8)(N, E), u, (cid:3)(cid:9), and(cid:10) ∈ G. Consider then any edge of thethe capacity constraints for the edges of the form (s, g), (g, gform (g, t) and observe that since σ is a solution, it must be the case that fσ (g, t) (cid:3) Uout(g). That is, fσ also satisfiesthe capacity constraints for the edges of the form (g, t) and, hence, fσ is a flow assignment on (cid:8)(N, E), u, (cid:3)(cid:9).(⇐) Assume that f : E → R(cid:2)0 is a flow assignment on (cid:8)(N, E), u, (cid:3)(cid:9), and let V be its value. In particular, since all edgecapacities and lower bounds are integral, we can assume, w.l.o.g., that fis integral as well (see, e.g., [22]). That is,f (e) ∈ N, for each e ∈ E. Based on f , we now build a succession of transformations σin, σ1, . . . , σV , where σin and σi ,for each i ∈ {1, . . . , V }, are subsequences defined as follows:• For each good g ∈ G, σin exactly contains f (s, g)–Uin(g) transformations (cid:8)∅, O(cid:9) ∈ T such that O(g) > 0. In particular,(g(cid:10),g)∈E∧g(cid:10)∈G fσ (g, g(cid:10), g) with g(cid:10)), and (gfσ (g, glet(cid:3)(cid:10)) −let(cid:3)the relative order of application of these transformations is immaterial.• Note that, since the value offis V and since fis integral, we are guaranteed that there are V (not necessarilydistinct) paths, i.e., succession of edges, π1, . . . , πV from s to t such that for each edge e ∈ E, (cid:3)(e) (cid:2) |{πi | e occursin πi}| (cid:2) u(e). Indeed, each path πi serves the purpose of routing one unit of flow from s to t. In particular, for eachare two goods in G, and where ¯πi is ai ∈ {1, . . . , V }, observe that πi is of the form (s, g), ¯πi, (g(possibly empty, if g = g) path defined over the goods in G only. The idea is to define σi as the succession of thetransformations that are naturally associated with ¯πi , and which is in fact obtained by replacing each edge of theform ( ¯g, ¯g(cid:10)) occurring in ¯πi with a transformation (cid:8)I, O(cid:9) ∈ T such that I( ¯g) > 0 and O( ¯g(cid:10), t), where g and g(cid:10)) > 0.(cid:10)(cid:10)Observe now that σin can be actually executed, and after it, the auctioneer holds f (s, g) units of good g, for eachg ∈ G. Moreover, for each i ∈ {1, . . . , V }, the succession σi implements a (possibly empty) sequence of transformationsfor one of these goods. After σi , the good initially owned by the auctioneer after σin is then possibly transformed inanother good and no further transformation is applied on it. In particular, note that all the transformations of the form(cid:10)) =σi can be actually executed, since for each edge of the form (g, g(cid:10)) > 0|. Moreover, after that σV is executed, the auctioneer holds f (g, t) units of good g,|(cid:8)I, O(cid:9) ∈ T | I(g) > 0 ∧ O(gfor each g ∈ G. Since, f (g, t) (cid:3) (cid:3)(g, t) = Uout(g) holds, we have that σin, σ1, . . . , σV is a solution to A.(cid:10)) occurs in πi}| (cid:2) u(g, g(cid:10)) (cid:2) |{πi | (g, g(cid:10)), l(g, gAfter the claim above, the result in the case of free disposal easily follows, as the existence of a flow assignment on a flownetwork can be decided in polynomial time (see [22]).In order to conclude the proof, we observe that the case of lack of free disposal can be faced with a simple adaptationof the above construction. Indeed, we have just to modify the upper bound M(g), by setting it to the value |(cid:8)I, ∅(cid:9) ∈T | I(g) > 0|, and thereby guaranteeing that any surplus of good g can be produced only if there is some transformationthat is prepared to consume it. Then, the result can be established by following precisely the same line of reasoning as inthe proof of the claim above, and by noticing that the novel upper bound guarantees that the auctioneer ends up exactlywith the desired Uout(g) units of good g, after that up to |(cid:8)I, ∅(cid:9) ∈ T | I(g) > 0| surplus units of g are consumed bytransformations producing as output no goods. As an example, Fig. 6 shows the modified flow network for the instance ¯A. Note that the flow depicted in theand an admissible solution where the auctioneer ends up exactly with one unit of gleft part of Fig. 5 is not admissible w.r.t. the modified network. (cid:3)(cid:10)Let us now turn to the scenario where every type of good is consumed by one transformation at most, i.e., let us assumethat output degrees are unitary at most.Theorem 3.14. On the class COR(∞, ∞, ∞, ∞, ∞, 1) restricted to instances defined over singleton sets of transformations, Feasibilityis in P.Proof. Let A = (cid:8)G, T , Uin, Uout(cid:9) be a MMUCA such that A ∈ COR(∞, ∞, ∞, ∞, ∞, 1). Let UG be the multi-set of goods theauctioneer owns (initially, UG = Uin). Let Ta ⊆ T be the multi-set of transformations that are active (initially, Ta = {(cid:8)I, O(cid:9) ∈T | Uin(g) (cid:3) I(g), ∀g ∈ G}). Consider the approach where we arbitrarily pick and execute a transformation (cid:8)I, O(cid:9) ∈ Ta, untilthe set Ta is empty, and update the variables as follows:• UG (g) := UG (g) − I(g) + O(g), ∀g ∈ G;• T := T \ {(cid:8)I, O(cid:9)};• Ta := {(cid:8)I(cid:10), O(cid:10)(cid:9) ∈ T | UG (g) (cid:3) I(cid:10)(g), ∀g ∈ G}.Note that the approach takes polynomially many steps at most, each one feasible in polynomial time. Then, we claimthat there is a solution to A under the free disposal assumption ⇔ when Ta is empty, UG (g) (cid:3) Uout(g), ∀g ∈ G.14V. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–25(⇐) Assume that, after the final step, UG (g) (cid:3) Uout(g), ∀g ∈ G. By construction, the sequence of transformations picked asdiscussed above is a solution to A.(⇒) Assume that A admits a solution ˆσ , and let σ be the sequence of transformations picked as discussed above. Note thatthe execution of any transformation (cid:8)I, O(cid:9) ∈ Ta does not invalidate the possibility of executing other transformationsin Ta, because output degrees are unitary (at most). Thus, each transformation in ˆσ also belongs to σ , and the orderof their execution is immaterial. Since the goods the auctioneer wants to end up with are not required in input by anytransformation (because the output degree is unitary), the fact that σ might contain more transformations than ˆσ isirrelevant.In the case of lack of free disposal, it is easily seen that the only difference is that, when the algorithm stops, we mustcheck whether UG (g) = Uout(g), ∀g ∈ G. (cid:3)In the case where every type of good is produced by one transformation at most, tractability can be established underthe free disposal assumption.Theorem 3.15. On the class COR(∞, ∞, ∞, ∞, 1, ∞) restricted to instances defined over singleton sets of transformations, Feasibilityis in P under the free disposal assumption.Proof. Let A = (cid:8)G, T , Uin, Uout(cid:9) be a MMUCA such that A ∈ COR(∞, ∞, ∞, ∞, 1, ∞).A transformation (cid:8)I, O(cid:9) ∈ T is said necessary w.r.t. a good g ∈ G if: (a) O(g) > 0; or (b) there is a transformation(cid:10)) > 0. Let Tn ⊆ T denote the(cid:8)I(cid:10), O(cid:10)(cid:9) ∈ T such that O(cid:10)(g) > 0, and (cid:8)I, O(cid:9) is necessary w.r.t. some good gmulti-set of all the transformations that are necessary w.r.t. some good g with Uout(g) > 0.such that I(cid:10)(gMoreover, as in the proof of Theorem 3.14, let UG be the multi-set of goods the auctioneer owns (initially, UG = Uin),and let Ta ⊆ T be the set of transformations that are active (initially, Ta = {(cid:8)I, O(cid:9) ∈ T | Uin(g) (cid:3) I(g), ∀g ∈ G}).We define an algorithm that arbitrarily picks and executes an active transformation (cid:8)I, O(cid:9) ∈ Ta ∩ Tn, until Tn ∩ Ta = ∅,(cid:10)by updating the variables as follows:• UG (g) := UG (g) − I(g) + O(g), ∀g ∈ G;• Tn := Tn \ {(cid:8)I, O(cid:9)};• T := T \ {(cid:8)I, O(cid:9)};• Ta := {(cid:8)I(cid:10), O(cid:10)(cid:9) ∈ T | UG (g) (cid:3) I(g), ∀g ∈ G}.We now claim that there is a solution to A under the free disposal assumption ⇔ the algorithm stops because Tn = ∅, and in thefinal step UG (g) (cid:3) Uout(g), ∀g ∈ G.(⇐) Assume that the algorithm stops because Tn = ∅. Assume that in the final step UG (g) (cid:3) Uout(g), ∀g ∈ G. Then, byconstruction, the sequence of transformations picked as discussed above is a solution to A.(⇒) Suppose that A admits a solution. Observe that, at each step, the selection of the transformation that has to beexecuted, among all the active transformations in Tn, is immaterial, since every type of good is produced by onetransformation at most and since all the transformations in Tn are necessary for producing the goods required by theauctioneer, as there is no transformation producing the types of goods initially owned by the auctioneer (because theinput degree is unitary). Thus, all transformations in Tn must belong to any solution sequence. In fact, a solution to Amight contain some further transformations that are not necessary for satisfying the requirements of the auctioneer.Yet, if A admits a solution, then it admits a solution containing no unnecessary transformations, which will be hencedetected by the algorithm.To conclude, just notice that the algorithm is feasible in polynomial time. (cid:3)Under the lack of free disposal, the class COR(∞, ∞, ∞, ∞, 1, ∞) is not an island of tractability for Feasibility, as wehave already observed in Theorem 3.9 and in Theorem 3.10. An interesting open question is whether Feasibility is tractableon the class COR(1, 1, k, k, 1, k), for some fixed constant k—see, again, Fig. 2.3.4. Tractable instances for XOR-bids over singleton sets of transformationsWe now conclude the analysis of the scenario where bids are defined over singleton sets of transformations by consid-ering the case of XOR-bids. Firstly, we observe that the proof of Theorem 3.15 can easily be adapted to cope with XOR-bids,based on the fact that executing necessary transformations is mandatory as to solve the instance at hand. Thus, if somenecessary transformation cannot be executed because of some given XOR-condition, then no solution exists.Theorem 3.16. On the class CXOR(∞, ∞, ∞, ∞, 1, ∞) restricted to instances defined over singleton sets of transformations,Feasibility is in P under the free disposal assumption.V. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–2515Precisely as in the case of OR-bids, under the lack of free disposal the above class is no longer an island of tractability,while the tractability on CXOR(1, 1, k, k, 1, k), for some fixed constant k, is open. However, tractability can be established byfocusing on unitary output degree, as shown next.Theorem 3.17. On the class CXOR(∞, ∞, ∞, ∞, 1, 1) restricted to instances defined over singleton sets of transformations, Feasibilityis in P under the lack of free disposal assumption.(cid:2)nProof. Let A = (cid:8)G, {L1, . . . ,L n}, Uin, Uout(cid:9) be a MMUCA instance that belongs to the class CXOR(∞, ∞, ∞, ∞, 1, 1). LetT =(cid:3)=1 bids(L(cid:3)) denote the multi-set of all transformations occurring in A—recall that, given our interest in Feasibilityand in the setting where atomic bids are restricted over singleton sets of transformations, any XOR-bid can be viewed asan expression t1 XOR t2 XOR . . . XOR tk, where ti is a transformation (rather than an atomic bid), for each 1 (cid:2) i (cid:2) k. LetT f ⊆ T be the multi-set of all the transformations that are not implementable due to some XOR-bid (initially, T f = ∅).Moreover, let UG , Ta ⊆ T , and Tn ⊆ T be the multi-sets as in the proof of Theorem 3.15.Observe that, since A ∈ CXOR(∞, ∞, ∞, ∞, 1, 1) holds, any transformation (cid:8)I, O(cid:9) ∈ T exactly occurs in one XOR-bid in{L1, . . . ,L n}, which we denote by xor((cid:8)I, O(cid:9)).Consider the following two-steps approach. In the first step, we arbitrarily pick and execute an active transformation(cid:8)I, O(cid:9) ∈( Ta ∩ Tn) \ T f that is not forbidden by the XOR-bids, until (Ta ∩ Tn) \ T f = ∅, by updating the variables as follows:• UG (g) := UG (g) − I(g) + O(g), ∀g ∈ G;• Tn := Tn \ {(cid:8)I, O(cid:9)};• T f = T f ∪ bids(xor((cid:8)I, O(cid:9)));• T := T \ {(cid:8)I, O(cid:9)};• Ta := {(cid:8)I(cid:10), O(cid:10)(cid:9) ∈ T | UG (g) (cid:3) I(g), ∀g ∈ G}.In the second step, we consume all surplus goods as long as it is possible. Hereinafter, we assume that T , UG , andT f are those computed in the last iteration of the first step. Let Ti ⊆ T be the multi-set of all transformations that areimplementable starting from the surplus goods (initially, Ti = {(cid:8)I, O(cid:9) ∈ T | (UG (g)–Uout(g)) (cid:3) I(g)}). Then, we arbitrarilypick and execute an implementable transformation (cid:8)I, O(cid:9) ∈ Ti \ T f that is not forbidden by the XOR-bids, until T i \ T f = ∅,by updating all the variables as follows:• UG (g) := UG − I(g) + O(g), ∀g ∈ G;• T := T \ {(cid:8)I, O(cid:9)};• Ti := {(cid:8)I(cid:10), O(cid:10)(cid:9) ∈ T | (UG (g)–Uout(g)) (cid:3) I(cid:10)(g), ∀g ∈ G};• T f = T f ∪ bids(xor((cid:8)I, O(cid:9))).We now claim that there is a solution to A under the lack of free disposal ⇔ the algorithm stops with Tn = Ti = ∅ and UG (g) =Uout(g), ∀g ∈ G.(⇐) Assume that, when the algorithm ends, Tn = Ti = ∅ and UG (g) = Uout(g), ∀g ∈ G. Then, by construction, the sequenceof transformations picked as discussed above is a solution to A.(⇒) Suppose that A admits a solution. Observe that, at each iteration of the first step, the selection of the transformationthat has to be executed, among all the active transformations in Tn is arbitrary, since each type of good is producedby one transformation at most and since all the transformations in Tn are necessary for producing the goods requiredby the auctioneer. Moreover, the order in which the transformations that belong to Ti are executed is immaterial sinceeach type of good is consumed by one transformation at most and all the transformations in Ti are necessary toconsume the surplus goods obtained by implementing the transformations in Tn. Thus, all transformations in Tn andin Ti must belong to any solution sequence. Indeed, if some transformation in Tn or Ti cannot be executed due tosome XOR-bids, some required good cannot be produced or some surplus good cannot be consumed. In fact, note thata solution to A might contain some further transformations that are not necessary for producing the required goodsand, thus, some additional transformations for consuming the surplus goods possibly produced by these unnecessarytransformations. Anyway, if A admits a solution, then it admits a solution containing no unnecessary transformations,which will be hence detected by the algorithm.To conclude, note that the algorithm takes polynomial time. (cid:3)3.5. Feasibility for arbitrary sets of transformationsIn this section, we complete the picture of the complexity of Feasibility, by focusing on the general scenario wherebids can be defined over arbitrary sets of transformations. Of course, all hardness results provided for singleton sets oftransformations still hold in this more general setting. Thus, in the following, we shall just illustrate NP-hardness results16V. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–25that are more stringent than those in Fig. 2, in addition to isolating novel islands of tractability. Most proofs are based onstraightforwardly adapting, or even just inspecting, those illustrated above, and hence details are omitted.Concerning the hardness results, we observe that any transformation of the form (cid:8)I, O(cid:9) with |{g | g ∈ G, I(g) > 0}| > 0(i.e., with input variability greater than 1), can be equivalently reformulated in terms of an atomic bid (cid:8)B, p, type(cid:9) withtype = full and B = {(cid:8){}, O(cid:9)} ∪ {(cid:8){g}, {}(cid:9) | I(g) > 0}. Indeed, B precisely prescribe to produce all the goods in O and toconsume each good g in I. In fact, this transformation does not affect any parameter of the game, but the input variabilitythat is now guaranteed to be unitary. Hence, we can strengthen Theorem 3.5, Theorem 3.9, and Theorem 3.12.Theorem 3.18. Feasibility is NP-hard under the free disposal assumption, even when restricted to the class C(1, 1, 1, 1, 2, 2). More-over, it is NP-hard under the lack of free disposal, even when restricted to the class C(1, 1, 1, 1, 1, 2).Concerning tractability results, observe the proofs of Theorem 3.15 and Theorem 3.16 can be easily adapted to dealwith bids over arbitrary sets of transformations, by defining a transformation as necessary if it occurs in some bid withtype = full together with a transformation that is in its turn necessary (and, of course, by focusing on the smallest setof necessary transformations, given the circularity of the definition). With this modification in place, the following resultderives by inspecting such proofs.Theorem 3.19. On the classes COR(∞, ∞, ∞, ∞, 1, ∞) and CXOR(∞, ∞, ∞, ∞, 1, ∞), Feasibility is in P under the free disposalassumption.Let us now conclude our analysis by extending to the case of arbitrary sets of transformations the two approachesdiscussed in the proofs of Theorem 3.14 and Theorem 3.17, respectively.Theorem 3.20. On the class COR(∞, ∞, ∞, ∞, ∞, 1), Feasibility is in P.Proof (Sketch). Let A be a MMUCA instance in COR(∞, ∞, ∞, ∞, ∞, 1). The algorithm for deciding the Feasibility of Aworks in several subsequent iterations. At each iteration, active transformations are executed, until one exists. In particular,we avoid the execution of those transformations that have been executed in some previous iterations and that violatedsome bid constraints (indicated in the following as forbidden transformations).Formally, let UG be the multi-set of goods the auctioneer owns (initially, UG = Uin), let Ta ⊆ T be the multi-set oftransformations that are active (initially, Ta = {(cid:8)I, O(cid:9) ∈ T | Uin(g) (cid:3) I(g), ∀g ∈ G}), and let T f ⊂ T be the multi-set of for-bidden transformations (initially, T f = ∅). Then, each iteration consists in arbitrarily picking and executing a transformation(cid:8)I, O(cid:9) ∈ Ta \ T f , until the set Ta \ T fis empty, and updating the variables as follows:• UG (g) := UG (g) − I(g) + O(g), ∀g ∈ G;• T := T \ {(cid:8)I, O(cid:9)};• Ta := {(cid:8)I(cid:10), O(cid:10)(cid:9) ∈ T | UG (g) (cid:3) I(cid:10)(g), ∀g ∈ G}.At the end of the iteration, if no bid constraint has been violated (i.e., for each bid (cid:8)B, p, type(cid:9) with type = full, alltransformations in B have been executed), the algorithm stops and the requirements of the auctioneer are checked (i.e., ifUG (g) (cid:3) Uout(g), ∀g ∈ G). Otherwise, T fis updated by adding all transformations that have been implemented in the lastiteration and that occur in some bid with type = full together with a transformation that has not been executed. In thislatter case, the algorithm is reiterated, by initializing again UG , Ta, and T .By exploiting the line of reasoning in the proof of Theorem 3.14, in the light of the fact that the order of execution ofactivities is Ta is immaterial and that transformations in T f cannot occur in any solution, we can conclude that there is asolution to A under the free disposal assumption ⇔ when the algorithm stops UG (g) (cid:3) Uout(g), ∀g ∈ G. The same line of reasoningcan then be extended to the class COR(∞, ∞, ∞, ∞, ∞, 1) in case of lack of free disposal with the only difference that,when the algorithm stops, we must check whether UG (g) = Uout(g), ∀g ∈ G. (cid:3)Theorem 3.21. On the class CXOR(∞, ∞, ∞, ∞, 1, 1), Feasibility is in P under the lack of free disposal assumption.Proof. [Proof Sketch] To establish the result we can follow the same line of reasoning as in the two-steps algorithm ex-ploited in the proof of Theorem 3.17, provided the following adaptations. In the first step, we must adopt the definition ofnecessary transformations exploited for establishing Theorem 3.19. And, in the second step, we must consider a multi-setTreq of required transformations with the same approach as in the proof of Theorem 3.20, by eventually checking whetherall of them can be executed. (cid:3)4. Graph-based structural restrictions do not helpMany NP-hard problems in different application areas, ranging, e.g., from Constraint Satisfaction to Database Theory, areknown to be efficiently solvable when restricted to instances that can be modeled via (nearly)acyclic graphs. Indeed, onV. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–2517Fig. 7. Transformations and goods graphs for the MMUCA instance in Example 1.1.these kinds of instances, solutions can usually be computed via dynamic programming, by incrementally processing theacyclic structure, according to some of its topological orderings. Therefore, one may naturally expect that these structuralrestrictions are also beneficial to isolate tractable MMUCAs. The question is investigated in the following.Let A be a MMUCA instance over a set G of goods, and let Tr denote the multi-set of all transformations occurring inits bids. Interactions in A are modeled by considering two different graph structures:• The transformations graph of A, denoted by TG(A), is a directed graph (Nt, Et) where nodes are in one-to-one corre-spondence with transformations in Tr (i.e., th ∈ Nt if and only if th = (cid:8)Ih, Oh, ph(cid:9) ∈ Tr ), and where there is an edge(ti, t j) ∈ Et from ti = (cid:8)Ii, Oi, pi(cid:9) to t j = (cid:8)I j, O j, p j(cid:9) if there exists a good g ∈ G such that I j(g) > 0 and Oi(g) > 0. Theundirected version of TG(A) is denoted by TG(A).• The goods graph of A, denoted by GG(A), is a directed graph (N g, E g) where nodes are in one-to-one correspon-if there exists a transformation(cid:10)) ∈ E g from g to g(cid:10)dence with the goods in G, and where there is an edge (g, g(cid:8)Ih, Oh, ph(cid:9) ∈ Tr such that Ih(g) > 0 and Oh(g(cid:10)) > 0. The undirected version of GG(A) is denoted by GG(A).Example 4.1. Consider again the setting discussed in Example 1.1 (then, formalized as the MMUCA instance ¯A in Exam-ple 2.2) and the supply chain graphically illustrated in Fig. 1. The transformations graph TG( ¯A) and the goods graph GG( ¯A)are graphically reported on the right and on the left of Fig. 7, respectively. Note that both graphs, as well as their undirected(cid:2)versions, are acyclic.Our first result is very bad news on directed and undirected transformations graphs, and on directed goods graphs. Theresult holds under the free disposal assumption and under the lack of free disposal.Theorem 4.2. Feasibility is NP-complete, even when restricted to the classes {A | TG(A) is acyclic} (and, hence, {A | TG(A) isacyclic}) and {A | GG(A) is acyclic}, and under atomic bids defined over singleton sets of transformations.ii , X F{ Xi, X T(cid:2)ni=1} ∪ {c1, . . . , cm} ∪ {cijProof. Let Φ = c1 ∧ · · · ∧ cm be a Boolean formula over the variables X1, . . . , Xn satisfying the conditions in Lemma 3.2, andlet A(Φ) = (cid:8)G, T , Uin, Uout(cid:9) be the MMUCA instance over atomic bids (defined over singleton sets of transformations) suchTi .that: G =In particular, for each variable Xi occurring positively in the clauses cα and cβ while occurring negatively in cγ , the set Ticonsists of the set of transformations {(cid:8){ Xi}, { X T}, {cβ }(cid:9), andi}, {cγ }(cid:9)}. An illustration of Ti is reported on the left of Fig. 8, where transformations have been indexed for the sake of(cid:8){ciγreadability. Recall that deciding Feasibility over the class of instances of the form A(Φ) is NP-hard, under the free disposalassumption (Theorem 3.3) and under the lack of free disposal (Theorem 3.8). We next show that such a class of instancesis a subset of the classes {A | TG(A) is acyclic} and {A | GG(A) is acyclic}.| Xi occurs in c j}, Uin = { X1, . . . , Xn}, Uout = {c1, . . . , cm}, and T =}(cid:9), (cid:8){ Xi}, { X Fi}, {cα}(cid:9), (cid:8){ciβ}(cid:9), (cid:8){ X Fi}(cid:9), (cid:8){ X Ti(cid:2)ni=1}(cid:9), (cid:8){ciα}, {ciγα, ciβ}, {ciOn the top-right part of Fig. 8, the portion of the transformations graph TG(A(Φ)) associated with the transformationsin Ti is reported, which we find useful to denote by TG(Ti). Note that no cycle occurs in TG(Ti), even when we considerits undirected version. Moreover, consider now two arbitrary transformations ti ∈ Ti and t j ∈ T j , and note that there is nogood g ∈ G produced by ti and consumed by t j , or vice versa. In fact, only goods of the form c1, . . . , cm can in principle beshared between ti and t j , but in any case they will produced by both ti and t j and there is no transformation consumingthem. It follows that TG(A(Φ)) and TG(A(Φ)) are both acyclic.18V. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–25Fig. 8. Transformations and goods graphs in the proof Theorem 4.2.Finally, on the bottom-right part of Fig. 8, the portion of the good graph GG(A(Φ)) associated with the goods ma-nipulated by transformations in Tiis reported, which we find useful to denote by GG(Ti). As observed above, for twoarbitrary transformations ti ∈ Ti and t j ∈ T j , GG(Ti) and GG(T j) might share goods in the set {c1, . . . , cm}. However, asthese goods are produced and never consumed by transformations in T , any node in {c1, . . . , cm} contains some incomingedge, but no outgoing edges in GG(A(Φ)). It follows that GG(A(Φ)) is acyclic. However, note that GG(A(Φ)) is not acyclicin general. (cid:3)Note that the above result is interesting in the light that instances with (directed) acyclic goods graphs correspond totransformation processes (cf. [4]). Thus, transformation processes emerge to be as hard as arbitrary trades and exchanges ofgoods.We conclude this section by noticing that an NP-hardness result can be obtained even on the remaining class {A |GG(A) is acyclic}. In this case, differently from the proof of Theorem 4.2, we shall exploit a reduction from a weakly NP-hard problem (as in Theorem 3.10), and it remains open whether a strongly NP-hardness can be obtained.Again, the result below holds under the free disposal assumption and under the lack of free disposal.Theorem 4.3. Feasibility is in NP-complete when restricted to the classes {A | GG(A) is acyclic} and under atomic bids defined oversingleton sets of transformations.Let m =(cid:3)n(cid:10)) = m/2 and T =Proof. Recall that deciding whether there is a way to partition a bag S = {s1, s2, . . . , sn} of integers into two bags S1 and S2such that the sum of the numbers in S1 equals the sum of the numbers in S2 is the NP-complete Partition problem [21].(cid:10)}, Uin(α) = m/2,i=1 si , and consider the MMUCA instance A(S) = (cid:8)G, T , Uin, Uout(cid:9) such that: G = {α, S(cid:10)}(cid:9)}. Then, it is immediate to check that there is a solution to A(S) if,Uout(Sand only if, Partition has a solution on input S. Indeed, each solution to A(S) is in one-to-one correspondence to a subsetof integers of S whose sum is m/2. Eventually, note that the graph GG(A(S)) is acyclic since it contains the edge over αand S(cid:2)ni=1only. (cid:3){α},sii=1sii=1{S(cid:2)(cid:2){(cid:8)(cid:10)5. Tractable WINNER-DETERMINATIONNow that the complexity of the basic Feasibility problem has been analyzed, we can turn to isolate tractable classesfor the Winner-Determination problem. To this end, we first observe that all the hardness results we have derived forFeasibility as well as all hardness results for classical combinatorial auctions (see, e.g., [23]) are inherited by Winner-Determination on MMUCAs. Thus, in order to isolate classes of instances where Winner-Determination is tractable, wemust avoid the sources of complexities that emerged so far in our analysis or that are known from the literature.5.1. Bounded intricacy and (acyclic) hypergraph encodingsLet AC = (cid:8)G, {L1, . . . ,L n}, Uin, Uout(cid:9) be a MMUCA instance, let B =(cid:2)n(cid:3)=1 bids(L(cid:3)) be the multi-set of all its atomic bids,and let Tr be the multi-set of all transformations occurring in B. For the sake of presentation, each element in B (resp., Tr )is associated with a unique identifier bi (resp., t j ) with 1 (cid:2) i (cid:2) |B| (resp., 1 (cid:2) j (cid:2) |Tr|), so that we can conveniently referto sets of identifiers rather than to multi-sets of elements. Then, the auction hypergraph AH(AC) = (N, H) is the hypergraphwhose set N of nodes is such that N = T ∪ B, where T = {t1, . . . , t|Tr |} and B = {b1, . . . , b|B|}, and whose hyperedges in Hare defined as follows:(1) For each good g ∈ G, H contains the hyperedge {t j | t j = (cid:8)I, O(cid:9) ∈ Tr and I(g) + O(g) > 0} over the transformationsrequiring or producing g.V. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–2519Fig. 9. Auction hypergraph in Example 5.1, and a join tree for it.(2) For each atomic bid bi = (cid:8)B, p, type(cid:9) ∈ B and for each transformation t j ∈ B, H contains the hyperedge {bi, t j}.(3) If C=XOR, then for each bid L(cid:3), with (cid:3) ∈ {1, . . . , n}, H contains the hyperedge {bi | bi ∈ bids(L(cid:3))} over the atomic bidsinvolved in it.Note that the above encoding generalizes the one proposed in [6] for classical combinatorial auctions, which in factconsists of the hyperedges of type (1) only.Example 5.1. Consider the MMUCA instance ¯A = (cid:8) ¯G, ¯B, ¯Uin, ¯Uout(cid:9) discussed in Example 2.2. Recall that {t1, . . . , t6} is theset of all transformations in ¯A, and let bi denote the bid over the transformation ti , for each i ∈ {1, . . . , 6}. The associatedauction hypergraph AH( ¯A) is shown in Fig. 9—for the moment, ignore the dashed hyperedge. Note, for instance, that AH( ¯A)(cid:2)contains the hyperedge {t1, t2}, as these two transformations both produce as output a drive train.An important structural property of hypergraphs is acyclicity. A hypergraph H is acyclic iff it has a join tree [24]. A jointree JT(H) for a hypergraph H is a tree whose vertices are the hyperedges of H such that, whenever the same node X ∈ Voccurs in two hyperedges h1 and h2 of H, then X occurs in each vertex on the unique path linking h1 and h2 in JT(H).Note that the notion of acyclicity we use here is the most general one in the literature, also known as α-acyclicity. As anexample, the hypergraph on the left of Fig. 9 is acyclic, as it is witnessed by the join tree on the right.Unfortunately, the acyclicity of the associated auction hypergraph is not alone a guarantee for tractability. For instance,one can easily check that the NP-hardness proof of Theorem 4.3 is established over a class of instances whose underlyingauction hypergraphs are acyclic. As the proof is based on scenarios where a “large” number of transformations produce orconsume the same “small” set of goods, it is natural to look for combining acyclicity with a further bound on the numberof transformations producing a given good g (as to control its availability in any solution), plus either a bound on themaximum quantity of g that can be produced over all solutions, or a bound on the number of transformations requiring g(as to control the consumption of g).The above bounds are formalized via the measure of intricacy of an instance AC = (cid:8)G, {L1, . . . ,L n}, Uin, Uout(cid:9), denotedby intr(AC), which we define as the value:(cid:6)maxg∈G(cid:7)(cid:8)(cid:7)(cid:8)I, O, p(cid:9) | O(g) > 0(cid:10)(cid:9)(cid:7)(cid:7) + minUin(g) +(cid:11)(cid:7)(cid:8)(cid:7)O(g),(cid:8)I, O, p(cid:9) | I(g) > 0(cid:12)(cid:13)(cid:9)(cid:7)(cid:7).(cid:8)I,O,p(cid:9)∈TrThe main result in this section is to show that MMUCA instances with (nearly)acyclic auction hypergraphs and withintricacy bounded by some fixed natural number are tractable. The result is shown by encoding MMUCA instances in termsof constraint satisfaction problem (CSP) instances, and by subsequently exploiting known structural tractability results in thislatter setting. Note that the technique is essentially the one adopted by [6] to solve classical combinatorial auctions overstructurally-restricted classes of instances (cf. [25,26]), and it is here extended to deal with MMUCAs.5.2. From MMUCAs to CSP instancesWe start by recalling some preliminaries on constraint satisfaction. The reader interesting in expanding on this formalismis referred to [27].A CSP instance is a triple J = (cid:8)Var, U , C(cid:9), where Var is a finite set of variables, U is a finite domain of values, andC = {C1, C2, . . . , Cq} is a finite set of constraints. Each constraint C v , for 1 (cid:2) v (cid:2) q, is a pair (S v , rv ), where S v ⊆ Var is a20V. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–25set of variables called the constraint scope, and rv is a set of substitutions from variables in S v to values in U indicatingthe allowed combinations of simultaneous values for the variables in S v . A substitution from a set of variables V ⊆ Var toU is extensively denoted as the set of pairs of the form X/u, where u ∈ U is the value to which X ∈ V is mapped. Therestriction of a substitution θ : V → U over a set S ⊆ V of variables is denoted by θ[S]. A solution to J is a substitutionθ : Var → U such that θ[S v ] ∈ rv holds, for each v with 1 (cid:2) v (cid:2) q. The structure of a CSP instance J is best represented byits associated hypergraph H(J ) = (V , H), where V = Var and H = {S | (S, r) ∈ C}.Given the instance AC = (cid:8)G, {L1, . . . ,L n}, Uin, Uout(cid:9) where B is the multi-set of all atomic bids and Tr is the multi-setof all transformations occurring in B, we define CSP(AC) = (cid:8)Var, U , C(cid:9) as the CSP instance such that:{b1, . . . , b|B|}.• Variables are associated with (the identifiers of) the transformations and the bids in AC, that is, Var = {t1, . . . , t|Tr |} ∪• The domain U consists of the set {0, 1, . . . ,| Tr|} of natural numbers. Accordingly, substitutions from Var to U have thefollowing intuitive meaning. A “transformation” variable t j taking value α > 0 (resp., α = 0) means that t j is executedat the α-th step of a sequence witnessing the existence of a solution to AC (resp., is not executed). A “bid” variablebi taking value 1 (resp., 0) means that bi is accepted (resp., not accepted) by the auctioneer. In the following, for asubstitution θ , let σθ be the sequence of transformations such that t j occurs at the α-th position of σθ (resp., does notoccur in it) if t j/α ∈ θ and α > 0 (resp., α = 0). Moreover, let Bθ be the set of bids {bi | bi/1 ∈ θ}.• The set C contains constraints of four types:(1) For each good g ∈ G, C contains the constraint C g = (S g, r g) such that S g = {t j | t j = (cid:8)I, O(cid:9) ∈ Tr and I(g) +O(g) > 0} and where r g is defined as follows. For a substitution θ , we say that σθ = (cid:8)I1, O1(cid:9), . . . ,(cid:8) Ir, Or(cid:9) is a feasi-ble outcome for AC w.r.t. g if mc−1 (cid:3) Ic(g), for each c ∈ {1, . . . , r}, where m0 = Uin(g) and mc = mc−1 + Oc(g) − Ic(g).In the case of lack of free disposal (resp., under the free disposal assumption), we furthermore require thatmr = Uout(g) (resp., mr (cid:3) Uout(g)) holds. Then, r g consists of all substitutions θ : S g → U where σθ is a feasibleoutcome for AC w.r.t. g. Note that if the intricacy intr(AC) is bounded by some given fixed constant, then thenumber of substitutions in r g , i.e., the size |r g|, is polynomial.(2a) For each atomic bid bi = (cid:8)B, p, partial(cid:9) ∈B and each transformation t j ∈ B, C contains the constraint Cbi ,t j== {{bi/0, t j/0}, {bi/1, t j/0}, {bi/1, t j/1}, . . . ,{ bi/1, t j/|Tr|}}.= {bi, t j} and where rbi ,t j(Sbi ,t j , rbi ,t j ) such that Sbi ,t j| = 2 + |Tr|.Note that |rbi ,t j(Sbi ,t j , rbi ,t j ) such that Sbi ,t j|rbi ,t j| = 1 + |Tr|.(2b) For each atomic bid bi = (cid:8)B, p, full(cid:9) ∈ B and each transformation t j ∈ B, C contains the constraint Cbi ,t j== {{bi/0, t j/0}, {bi/1, t j/1}, . . . ,{ bi/1, t j/|Tr|}5}. Note that= {bi, t j} and where rbi ,t j(3) If C = XOR, then for each bid L(cid:3), with (cid:3) ∈ {1, . . . , n}, C contains the constraint CL(cid:3)={bi | bi ∈ bids(L(cid:3))} and where rL(cid:3) contains the substitution where each variable is mapped to 0, plus all possiblesubstitutions where exactly one variable is mapped to 1 and the remaining ones are mapped to 0. Note that |rL(cid:3)| =1 + n.= (SL(cid:3) , rL(cid:3) ) such that SL(cid:3)The crucial properties of the above correspondence from MMUCA instances to CSP instances are formalized below.Lemma 5.2. Let AC be a MMUCA instance. Then, the following properties hold:(A) If intr(AC) (cid:2) k, for some fixed natural number k > 0, then CSP(AC) can be built in polynomial time; in particular, each constraintrelation contains polynomially many substitutions.(B) AH(AC) = H(CSP(AC)), i.e., the hypergraph associated with AC coincides with the hypergraph associated with CSP(AC).(C) If B(cid:10)(D) If θ is a solution to CSP(AC), then Bθ is a solution to AC.is a solution to AC, then there is a solution θ to CSP(AC) such that Bθ = B(cid:10).Proof. Property (A) can be easily seen to hold by checking the sizes of the various constraint relations, as we have alreadypointed out while defining constraints of types (1), (2a), (2b), and (3). The fact that AH(AC) = H(CSP(AC)) holds straight-forwardly follows from the definition of the constraints scopes of CSP(AC), which precisely coincides with the hyperedgesof AH(AC)—scopes of type (2a) and (2b) correspond to hyperedges of type (2), whereas scopes of types (1) and (3) corre-spond to hyperedges of types (1) and (3), respectively. Then, we have to focus on showing the correctness of the encoding,established via (C) and (D). Let us first consider the case where AC = (cid:8)G, {L1, . . . ,L n}, Uin, Uout(cid:9) is such that L(cid:3) is an atomicbid, for each (cid:3) ∈ {1, . . . , n}.(C) Assume that B(cid:10)is a solution to AC, and let σ = (cid:8)I1, O1(cid:9), . . . ,(cid:8) Ir, Or(cid:9) be the sequence of transformations associatedwith B(cid:10)and satisfying the conditions illustrated in Definition 2.1. Consider the substitution θ : Var → U for CSP(AC) =(cid:8)Var, U , C(cid:9) such that σθ = σ , Bθ = B(cid:10). We claim that θ is a solution to CSP(AC), i.e.,it satisfies constraints of types (1), (2a), and (2b). Indeed, because of condition (3) in Definition 2.1, σθ is a feasibleoutcome for AC w.r.t. any good g, and hence θ[S g] ∈ r g . That is, constraints of type (1) are satisfied. Concerning theconstraints of type (2a), just notice that, by condition (2) in Definition 2.1, for each transformation t j/α ∈ θ with α > 0belonging to a bid bi = (cid:8)B, p, partial(cid:9), we have that bi/1 ∈ θ . Thus, these constraints are also satisfied. Finally, note, and bi/0 ∈ θ , for each bi /∈ B(cid:10)V. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–2521that by condition (1) in Definition 2.1, for each atomic bid bi = (cid:8)B, p, full(cid:9) ∈B , we have that bi ∈ B(cid:10)can hold if, andonly if, t j occurs in σ for each transformation t j ∈ B. Thus, θ[{bi}] = 1 (resp., θ[{bi}] = 0) implies that θ[{t j}] > 0 (resp.,θ[{t j}] = 0). It follows that θ[Sbi ,r j] ∈ rbi ,t j . Hence, constraints of type (2b) are also satisfied.(D) Let θ be a solution to CSP(AC). Because of the constraints of types (1), (2a), and (2b) we have that Bθ (and theassociated sequence σθ ) satisfies conditions (3), (2), and (1) in Definition 2.1, respectively. Indeed, constraints of type (1)enforce that σθ is a feasible outcome for AC w.r.t. any good g. Constraints of type (2a) guarantee that if a transformationt j occurs in σθ and is such that t j ∈ B with bi = (cid:8)B, p, type(cid:9), then the bid bi belongs to Bθ . And, finally, constraintsof type (2b) enforce that if a bid bi = (cid:8)B, p, full(cid:9) occurs in Bθ , then all its transformations belong to the sequence σθ .Thus, Bθ is a solution to AC.To complete the proof, we have to consider the cases where AC is defined over OR-bids and XOR-bids. In fact, the formercase precisely coincides with the scenario where all bids are atomic, as OR-bids do not actually provide further constraints.For the latter case, instead, we have just to notice that constraints of type (3) precisely guarantee that for each bid L(cid:3), with(cid:3) ∈ {1, . . . , n}, at most one atomic bid in L(cid:3) can be accepted by the auctioneer. Thus, they correctly enforce the semanticsof XOR-bids. (cid:3)With the above lemma in place, the final ingredient we need is to equip CSP instances with weights as to properlyencode the goal of the auctioneer wishing to the maximize the revenue over all the possible solutions.An instance of a constraint satisfaction optimization problem (CSOP) consists of a pair (cid:8)J , w(cid:9), where J = (cid:8)Var, U , C(cid:9)is a CSP instance and where w : Var × U → R is a weighting function mapping substitutions for individual variables toreal numbers, which we assume to be explicitly listed in the input. For a substitution { X1/u1, . . . , Xn/un}, we denote by(cid:3)i=1 w( Xi, ui). Then, a solution to a CSOP instance (cid:8)J , w(cid:9) is a solution θ to J such thatw({ X1/u1, . . . , Xn/un}) the valuenw(θ) (cid:3) w(θ (cid:10)), for each solution θ (cid:10)to J . The hypergraph H((cid:8)J , w(cid:9)) associated with (cid:8)J , w(cid:9) is H(J ).Given the instance AC = (cid:8)G, {L1, . . . , Ln}, Uin, Uout(cid:9), we now define CSOP(AC) as the constraint satisfaction optimizationproblem over the instance CSP(AC) and the weighting function w(AC) such that: w(AC)(bi, 1) = p, for each atomic bidbi = (cid:8)B, p, type(cid:9) in AC, and w(AC)( X, u) = 0 for each other substitution X/u. Note that the following is immediate, byLemma 5.2 and by the construction of CSOP(AC).Lemma 5.3. Let AC be a MMUCA instance. Then, the following properties hold:is an optimal solution to AC, then there is a solution θ to CSOP(AC) such that Bθ = B(cid:10)• If B(cid:10)• If θ is a solution to CSOP(AC), then Bθ is an optimal solution to AC..We can eventually conclude the exposition by showing the tractability of MMUCA instances over acyclic structures havingbounded intricacy.Theorem 5.4. For any fixed natural number k > 0, Winner-Determination can be solved in polynomial time on any class of MMUCAinstances AC such that AH(AC) is acyclic and intr(AC) (cid:2) k.Proof. After Lemma 5.2, it is immediate that if the intricacy is bounded by some fixed natural number, then we can build inpolynomial time a constraint satisfaction optimization problem instance CSOP(AC), which is in particular such that AH(AC)is acyclic if, and only if, CSOP(AC) is acyclic. Solutions to acyclic CSOP instances can be computed in polynomial time (see,e.g., [6,25,26]). The result then follows as solutions to CSOP(AC) one-to-one correspond with optimal solutions to AC, byLemma 5.3. (cid:3)5.3. Beyond acyclic hypergraphsMany attempts have been made in the literature for extending the good results about acyclic CSP instances to relevantclasses of nearly acyclic structures. We call these techniques structural decomposition methods, because they are based onthe “acyclicization” of cyclic (hyper)graphs. Indeed, these methods are aimed at transforming any given cyclic instance intoan equivalent acyclic one, by organizing its atoms or variables into a polynomial number of clusters, and by arrangingthese clusters as a tree, called decomposition tree. The original instance is then evaluated via this tree, with a cost that isexponential in the cardinality of the largest cluster, also called width of the decomposition, and polynomial if the width isbounded by some constant.In fact, those positive results for constraint satisfaction that hold over acyclic instances can be straightforwardly extendedto classes of nearly acyclic ones for which a decomposition tree can be efficiently computed. As an important application,we consider here the hypertree decomposition [28].For any hypergraph H, we denote its nodes and edges by N (H) and E(H), respectively. A hypertree for a hypergraph H isa triple (cid:8)T , χ , λ(cid:9), where T = (N, E) is a rooted tree, and χ and λ are labeling functions, which associate each vertex p ∈ N(cid:10))(cid:10), Ewith two sets χ (p) ⊆ N (H) and λ(p) ⊆ E(H). For a set of edges H ⊆ E(H), N (H) denotes the set(cid:10) = (N(cid:2)h∈H h. If T22V. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–25Fig. 10. A hypertree decomposition HD = (cid:8)T , χ , λ(cid:9) of the hypergraph in Fig. 9. Each vertex p of T reports the λ-labeling only, and we set χ (p) = N (λ(p)).is a subtree of T , we define χ (Tp ∈ N, T p denotes the subtree of T rooted at p.(cid:2)(cid:10)) =v∈N(cid:10) χ (v). We denote the set of vertices N of T by vertices(T ). Moreover, for anyDefinition 5.5. (See [28].) A hypertree decomposition of a hypergraph H is a hypertree HD = (cid:8)T , χ , λ(cid:9) for H satisfying thefollowing conditions:(1) for each edge h ∈ E(H), there exists p ∈ vertices(T ) such that h ⊆ χ (p), and h ∈ λ(p);(2) for each node Y ∈ N (H), the set {p ∈ vertices(T ) | Y ∈ χ (p)} induces a (connected) subtree of T ;(3) for each p ∈ vertices(T ), χ (p) ⊆ N (λ(p));(4) for each p ∈ vertices(T ), N (λ(p)) ∩ χ (T p) ⊆ χ (p).The width of a hypertree decomposition (cid:8)T , χ , λ(cid:9) is maxp∈vertices(T ) |λ(p)|. Thehypertree width hw (H) of H is the mini-(cid:3)mum width over all its hypertree decompositions.¯A(cid:10)be the MMUCA obtained by modifying the instance ¯A in Example 5.1 in a way that transformations t1Example 5.6. Letand t2 both produce as an output a dynamo, and by leaving unchanged all the other transformations and bids. As t4 alsoproduces a dynamo, the auction hypergraph AH( ¯A(cid:10)) is the one shown in Fig. 9, including the dashed hyperedge modelingthe fact that t1, t2 and t4 interact by producing the some output. Note that the modified hypergraph is not acyclic. A 2-widthhypertree decomposition HD = (cid:8)T , χ , λ(cid:9) of AH( ¯A(cid:10)) is reported in Fig. 10.(cid:2)The classes of CSP instances having bounded hypertree width have the same desirable computational properties as acyclicCSPs [29]. Indeed, from a CSP instance J = (cid:8)Var, U , C(cid:9) and a hypertree decomposition HD of H(J ) of width h, we maybuild an acyclic CSP instance J (cid:10) = (cid:8)Var, U , C(cid:9) with the same solutions as J . The overall cost of deciding whether J issatisfiable is in this case O (m × h × rh× log rmax), where rmax denotes the size of the largest constraint relation and m isthe number of vertices of the decomposition tree, with m (cid:2) |Var| (in that we may always find decompositions in a suitablenormal form without redundancies, so that the number of vertices in the tree cannot exceed the number of variables ofthe given instance). To be complete, if the input consists of J only, we have to compute the decomposition, too. Thiscan be done with a guaranteed polynomial-time upper bound in the case of hypertree decompositions [28]. Putting thesearguments together with Theorem 5.4, the following result is established.maxTheorem 5.7. For any pair of fixed natural numbers h > 0 and k > 0, Winner-Determination can be solved in polynomial time onany class of MMUCA instances AC such that hw(AH(AC)) (cid:2) h and intr(AC) (cid:2) k.6. ConclusionThe problem of identifying tractability islands for mixed multi-unit combinatorial auctions has been faced, by comple-menting tractability results that were obtained in the literature for classical combinatorial auctions. In particular, a clearpicture of the computational complexity of MMUCAs instances has been depicted under structural and qualitative restric-tions, which characterize interactions among bidders and types of bids involved in the various transformations, respectively.The analysis of the computational complexity of MMUCAs is an important prerequisite to define efficient solution ap-proaches. On the one hand, from our analysis, a number of settings emerged to be NP-hard. In these cases, it is unlikelyV. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–2523that polynomial-time algorithms exist and, hence, the question comes into play about whether it is possible to define suit-able heuristics that well-behave in practice. On the other hand, a significant number of other settings turned out to betractable. In these cases, it has to be noticed that our proofs are constructive and, hence, immediately provide efficientsolution algorithms, which would be relevant to implement and test on real scenarios.Moreover, it is relevant to point out that the problems we analyzed in the context of supply-chain formation via MMUCAscan be abstractly seen as synthesis problems, where bids can be seen as playing the role of computational units (i.e., thetasks to be executed) and goods can be seen as representing descriptions, such as ontological ones, for their inputs and out-puts. These problems frequently occur in the context of service oriented computing, where software applications are built byautomatically composing and configuring existing (web) services (see, e.g., [30–32]). More generally, similar issues emergein the synthesis of workflow models [33]. This is a problem that is currently receiving renewed interest because of its appli-cation to workflow management systems supporting declarative process models, where users are just in charge of definingthe goal of the process in terms of a description of the required outputs as well as of defining the pre-conditions and post-conditions for the various tasks [34]. Eventually, the results discussed in this paper can be also applied to analyze biologicalprocesses [35] in general, and metabolic pathways [36] in particular, which encode biochemical reactions involving enzymesand metabolites. A metabolic reaction requires as input some metabolites and produces as output other metabolites. In thiscontext, metabolic reactions can be mapped to bids and metabolites to goods.Therefore, while being stated in the context of MMUCAs, the results we derived in this paper found application inthe above settings, too. In particular, the techniques we have defined to identify islands of tractability based on structuralrestrictions can be used to identify islands of tractability in such synthesis problems, too. Moreover, concerning such struc-tural tractability issues, we point out that our approach is based on encoding the semantics underlying MMUCAs in termsof constraint satisfaction problems. In fact, CSPs are “static” in nature, and therefore an ad-hoc encoding approach has beenproposed to deal with the dynamism of our setting. Note that this approach can be well used to model via CSP instancesdifferent dynamic environments, where in particular the analysis is restricted to a polynomially-bounded or even just fixedtime horizon. This is, for instance, the case of certain planning problems (see, e.g., [37]) or of reasoning problems overacyclic process models.From a technical viewpoint, there are a few issues that remained open, namely to check whether strongly NP-com-pleteness results can be proven in Theorem 3.10 and Theorem 4.3, and to assess whether Feasibility is tractable on the classCOR(1, 1, k, k, 1, k), for some fixed constant k. From a more general perspective, instead, it would be interesting to embarkon the implementation of the approaches we have exhibited to single out islands of tractability, and on the definition ofsolution algorithms for arbitrary MMUCA instances, which take advantage of structural and qualitative properties that holdover portions of them. In addition, an other interesting avenue of further research is to analyze the complexity of MMUCAsfor more involved kinds of bidding languages, where for instance bidders’ preferences or time constraints [19] are takeninto account.Appendix ALemma 3.2. Satisfiability is NP-hard, even on classes of Boolean formulas in conjunctive normal form where each variable occurspositively in two clauses and negatively in another, and where each clause contains three literals at most.Proof. Recall that Satisfiability is NP-hard, even if each clause contains three literals at most [21]. Moreover, w.l.o.g., wecan assume that the same variable occurs at most once in each clause, and that each variable occurs at least in two clauses.Let Φ = c1 ∧ · · · ∧ cm be a Boolean formula in conjunctive normal over the variables X1, . . . , Xn form satisfying the aboveconditions. Based on Φ, we have to show how to build an equivalent formula Φ(cid:10)(i.e., such that Φ is satisfiable if, and onlyif, Φ(cid:10)is satisfiable) where each variable occurs positively in two clauses and negatively in another, and where each clausestill contains three literals at most.For each 1 (cid:2) j (cid:2) m, let c j be a clause of Φ and let c(cid:10)j be the clause obtained by replacing in it each variable Xi with thei , where k is the number of clauses belonging to the set {c1, . . . , c j} where Xi occurs (either positively orfresh variable X knegatively). Moreover, for each variable Xi , let mi (cid:3) 2 be the total number of clauses where it occurs and, for each 1 (cid:2) i (cid:2) nand 1 (cid:2) k (cid:2) mi , let ci,k be the clause ( X ki). Finally, consider the formula Φ(cid:10)(k+1) mod miisuch that∨ ¬ X(cid:10) = cΦ(cid:10)1∧ · · · ∧ c(cid:10)m∧n(cid:14)mi(cid:14)i=1k=1ci,k.By construction, Φ(cid:10)truth assignment either all variables in { X 1the clauses of the form ci,k. Thus, Φ and Φ(cid:10)are equivalent.is now defined over the variables in the set { X kii , . . . , Xmi| 1 (cid:2) i (cid:2) n, 1 (cid:2) k (cid:2) mi}. Moreover, in any satisfying}, for each 1 (cid:2) i (cid:2) m, evaluate true or they all evaluate false, because ofiEventually, to conclude the proof, observe that each variable X kpositively in ci,k and negatively in ci,(mi +k−1) mod mi . Moreover, X knegatively. It follows that if there is no variable of the form X ki occurs in exactly three clauses. In particular, it occurs(cid:10)j , either positively ori occurs in a clause of the form c(cid:10)j , then Φ(cid:10)i that negatively occurs in a clause of the form c24V. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–25i occurring negatively in a clause of the form cis already such that each variable occurs positively in two clauses and negatively in another. Otherwise, for each variablei ) with ¬ X kX ki(resp., X ki ). The resulting formula is, of course, still equivalent to Φ, while satisfying the condition that each variable occurspositively in two clauses and negatively in another. As a final remark, note that all clauses contain three literals at most. (cid:3)(cid:10)j , we have just to substitute each occurrence of X ki (resp., ¬ X kLemma 3.7. exact-1 Satisfiability is NP-hard, even on classes of Boolean formulas in conjunctive normal form where each variableoccurs positively in two clauses and negatively in another, and where each clause contains three literals at most.Proof. Recall that exact-1 Satisfiability is NP-hard, even if each clause exactly contains three literals (problem ONE-IN-THREE 3SAT in [21]), and hence is each clause contains three literals at most. W.l.o.g., assume that the same variable occursat most once in each clause, and that each variable occurs at least in two clauses. Let Φ = c1 ∧ · · · ∧ cm be a Boolean formulain conjunctive normal over the variables X1, . . . , Xn form satisfying the above conditions. Let Φ(cid:10)be the Boolean formulabuilt in the proof of Lemma 3.2 over the variables in { X kand Φ are equivalent,ithat each variable occurs in Φ(cid:10)containsthree literals at most.positively in two clauses and negatively in another, and that each clause in Φ(cid:10)| 1 (cid:2) i (cid:2) n, 1 (cid:2) k (cid:2) mi}, and recall that Φ(cid:10)Observe now that in any satisfying assignment for Φ(cid:10), each clause of the form ci,k, for each 1 (cid:2) i (cid:2) n and 1 (cid:2) k (cid:2) mi ,contains one literal that evaluates true and another that evaluate false. Recall also that in any satisfying truth assignment,}, for each 1 (cid:2) i (cid:2) m, evaluate true or they all evaluate false. By combining the aboveeither all variables in { X 1two observations, we can conclude that there is a satisfying assignment for Φ(cid:10)such that, for each clause, exactly one literalevaluates true if, and only if, there is a satisfying assignment to Φ enjoying the same property. (cid:3)i , . . . , XmiiReferences[1] J. Cerquides, U. Endriss, A. Giovannucci, J.A. Rodríguez-Aguilar, Bidding languages and winner determination for mixed multi-unit combinatorial auc-tions, in: Proc. of the 20th International Joint Conference on Artificial Intelligence (IJCAI), 2007, pp. 1221–1226.[2] W. Walsh, M. Wellman, Decentralized supply chain formation: a market protocol and competitive equilibrium analysis, Journal of Artificial IntelligenceResearch 19 (2003) 513–567.[3] A. Giovannucci, M. Vinyals, J.A. Rodríguez-Aguilar, J. Cerquides, Computationally-efficient winner determination for mixed multi-unit combinatorialauctions, in: Proc. of the 7th International Conference on Autonomous Agents and Multiagent Systems (AAMAS), 2008, pp. 1071–1078.[4] B. Ottens, U. Endriss, Comparing winner determination algorithms for mixed multi-unit combinatorial auctions, in: Proc. of the 7th InternationalConference on Autonomous Agents and Multiagent Systems (AAMAS), 2008, pp. 601–1604.[5] V. Conitzer, J. Derryberry, T. Sandholm, Combinatorial auctions with structured item graphs, in: Proc. of the 19th National Conference on ArtificialIntelligence (AAAI), 2004, pp. 212–218.[6] G. Gottlob, G. Greco, On the complexity of combinatorial auctions: structured item graphs and hypertree decomposition, in: Proc. of the 8th ACMConference on Electronic Commerce (EC), 2007, pp. 152–161.[7] V. Fionda, G. Greco, Charting the tractability frontier of mixed multi-unit combinatorial auctions, in: Proc. of the 21st International Joint Conference onArtificial Intelligence (IJCAI), 2009, pp. 134–139.[8] N. Nisan, Bidding languages for combinatorial auctions, in: P. Cramton, Y. Shoham, R. Steinberg (Eds.), Combinatorial Auctions, MIT Press, 2006.[9] M.H. Rothkopf, A. Pekec, R.M. Harstad, Computationally manageable combinational auctions, Management Science 44 (8) (1998) 1113–1114.[10] T. Sandholm, Algorithm for optimal winner determination in combinatorial auctions, Artificial Intelligence 135 (2002) 1–54.[11] M. Vinyals, A. Giovannucci, J. Cerquides, P. Meseguer, J.A. Rodríguez-Aguilar, A test suite for the evaluation of mixed multi-unit combinatorial auctions,Journal of Algorithms 63 (1–3) (2008) 130–150.[12] P. Almajano, J. Cerquides, J.A. Rodríguez-Aguilar, Empirical hardness for mixed auctions, in: Proc. of the 13th Conferencia de la Asociación Españolapara la Inteligencia Artificial (CAEPIA), 2009, pp. 161–170.[13] A. Giovannucci, J.A. Rodríguez-Aguilar, J. Cerquides, U. Endriss, Winner determination for mixed multi-unit combinatorial auctions via Petri nets, in:Proc. of the 6th International Conference on Autonomous Agents and Multiagent Systems (AAMAS), 2007, pp. 710–717.[14] A. Giovannucci, J. Cerquides, U. Endriss, J.A. Rodríguez-Aguilar, A graphical formalism for mixed multi-unit combinatorial auctions, Journal of Au-tonomous Agents and Multi-Agent Systems 20 (3) (2010) 342–368.[15] M. Vinyals, J. Cerquides, On the empirical evaluation of mixed multi-unit combinatorial auctions, in: Agent-Mediated Electronic Commerce and TradingAgent Design and Analysis, AAMAS 2007 Workshop (AMEC/TADA), 2007, pp. 135–150.[16] A. Giovannucci, J. Cerquides, U. Endriss, M. Vinyals, J.A. Rodríguez-Aguilar, B. Rosell, A mixed multi-unit combinatorial auctions test suite, in: Proc. ofthe 8th International Conference on Autonomous Agents and Multiagent Systems (AAMAS), 2009, pp. 1389–1390.[17] T. Sandholm, S. Suri, A. Gilpin, D. Levine, Winner determination in combinatorial auction generalizations, in: Proc. of the 1st International Conferenceon Autonomous Agents and Multiagent Systems (AAMAS), 2002, pp. 69–76.[18] A. Kothari, T. Sandholm, S. Suri, Solving combinatorial exchanges: optimality via a few partial bids, in: Proc. of the 4th ACM Conference on ElectronicCommerce (EC), 2003, pp. 236–237.[19] A. Witzel, U. Endriss, Time constraints in mixed multi-unit combinatorial auctions, in: Proc. of the 9th International Conference on Autonomous Agentsand Multiagent Systems (AAMAS), 2010, pp. 1487–1488.[20] C.H. Papadimitriou, Computational Complexity, Addison–Wesley, 1994.[21] M. Garey, D. Johnson, Computers and Intractability: A Guide to the Theory of NP-Completeness, W.H. Freeman and co., New York, 1979.[22] J. Kleinberg, E. Tardos, Algorithm Design, Addison–Wesley, 2005.[23] D. Lehmann, R. Müller, T. Sandholm, The winner determination problem, in: P. Cramton, Y. Shoham, R. Steinberg (Eds.), Combinatorial Auctions,MIT Press, 2006.[24] P. Bernstein, N. Goodman, The power of natural semijoins, SIAM Journal on Computing 10 (4) (1981) 751–771.[25] G. Greco, F. Scarcello, Structural tractability of constraint optimization, in: Proc. of 17th International Conference on Principles and Practice of ConstraintProgramming (CP), 2011, pp. 340–355.[26] G. Gottlob, G. Greco, F. Scarcello, Tractable optimization problems through hypergraph-based structural restrictions, in: Proc. of 36th InternationalColloquium on Automata, Languages and Programming (ICALP), 2009, pp. 16–30.[27] R. Dechter, Constraint Processing, Morgan Kaufmann, 2003.V. Fionda, G. Greco / Artificial Intelligence 196 (2013) 1–2525[28] G. Gottlob, N. Leone, S. Scarcello, Hypertree decompositions and tractable queries, Journal of Computer and System Sciences 63 (3) (2002) 579–627.[29] G. Gottlob, N. Leone, S. Scarcello, The complexity of acyclic conjunctive queries, Journal of the ACM 48 (3) (2001) 431–498.[30] A. Marconi, M. Pistore, Synthesis and composition of Web services, in: M. Bernardo, L. Padovani, G. Zavattaro (Eds.), Formal Methods for Web Services,Springer-Verlag, 2009.[31] S. Dustdar, W. Schreiner, A survey on web services composition, International Journal of Web and Grid Services 1 (1) (2005) 1–30.[32] S.-C. Oh, D. Lee, S.R.T. Kumara, A comparative illustration of AI planning-based web services composition, SIGecom Exchanges 5 (5) (2006) 1551–9031.[33] F. Friedler, K. Tarjan, Y.W. Huang, L.T. Fan, Graph-theoretic approach to process synthesis: polynomial algorithm for maximal structure generation,Computers and Chemical Engineering 17 (9) (1998) 929–942.[34] M. Pesic, H. Schonenberg, W.M.P. van der Aalst, DECLARE: full support for loosely-structured processes, in: Proc. of the 11th IEEE International Enter-prise Distributed Object Computing Conference (EDOC), 2007, pp. 287–300.[35] M. Peleg, I. Yeh, R. Altman, Modelling biological processes using workflow and Petri Net models, Bioinformatics 18 (6) (2002) 825–837.[36] M. Kanehisa, S. Goto, KEGG: Kyoto encyclopedia of genes and genomes, Nucleic Acids Research 28 (1) (2000) 27–30.[37] T. Eiter, W. Faber, N. Leone, G. Pfeifer, A. Polleres, A logic programming approach to knowledge-state planning, II: the DLVk system, Artificial Intelli-gence 144 (1–2) (2003) 157–211.