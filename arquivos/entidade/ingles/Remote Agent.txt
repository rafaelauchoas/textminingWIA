Artificial intelligence 103 (199X) 5117 Artificial Intelligence Remote Agent: to boldly go where no AI system has gone before * Nicola Muscettola ’ , P. Pandurang Nayak 2, Barney Pell *, Brian C. Williams 3 NASA Ames Research Center, MS 269-2, Mq&tt Field, CA 94035. USA Abstract toward to work and Artificial Renewed motives fleets of robotic that takes a significant exploration in space, in particular, will play a central inspired NASA have through heterogeneous for space a virtual presence technology, intelligence the Remote Agent, a specific autonomous Intelligence these explorers with a form of computational the goal of explorers. establishing role in this Information that we call remote endeavor by endowing ayems. In this paper we describe agent architecture on-board deduction and search, and goal- based on the principles of model-based programming, commanding, directed closed-loop this future. This the unique characteristics of the spacecraft domain that require highly reliable architecture addresses and autonomous operations over long periods of time with tight deadlines, concurrent activity among integrates constraint- execution, and model-based mode based temporal planning and scheduling, system as an on-board identification for a period controller the opportunity of a week in mid 1999. The development to reassess some of AI’s conventional wisdom about the challenges of implementing embedded systems, these issues, and our often contrary experiences, tightly coupled subsystems. The Remote Agent robust multi-threaded tractable reasoning, and knowledge throughout for Deep Space One, NASA’s first New Millennium mission, the paper. 0 1998 Published by Elsevier Science B.V. and reconfiguration. The demonstration of the Remote Agent also provided representation. We discuss step toward enabling resource constraints, of the integrated is scheduled Kcyrtords: Autonomous systems; Diagnosis; Recovery; Model-based reasoning agents; Architectures; Constraint-based planning; Scheduling; Execution; Reactive Authors in alphabetical order. author. RIACS. Email: pellQptolemy.arc.nasa.gov. * Corresponding ’ Recom Technologies. Email: mus@ptolemy.arc.nasa.gov. ’ RIACS. Email: nayak@ptolemy.arc.nasa.gov. ’ Email: williams@ptolemy.arc.nasa.gov. 00043702/98/$ - see front matter 0 1998 Published by Elsevier Science B.V. All rights reserved Pll: SOOO4-3702(98)00068-X 6 N. A4uscettola et al. /Artijicinl Intelligence 103 (1998) 547 1. Introduction imagination, The melding of space exploration particularly and robotic in its vision of the future. For example, intelligence has had an amazing hold on the science the public fiction classic “2001: A Space Odyssey” offered a future in which humankind was firmly and space-stations. At the established beyond Earth, within amply populated moon-bases through the impressive same time, intelligence was firmly established beyond humankind HAL9000 computer, created in Urbana, Illinois on January 12, 1997. In fact, January I2th, 1997 has passed without a moon base or HAL9000 computer Space Station will begin its launch However, this space station is far more modest in scope. into space this year, reaching completion in sight. The International by 2002. is far from our ambitious dreams is surprising us with a different future that is particularly this reality While exploration exploration, and for the information enabling this future: technology community for humans in space, space for robotic that will play a central role in exciting in NASA is to open the Space Frontier. When people Our vision think of rocket plumes and the space shuttle. But the future of space is in information technology. We must establish a virtual presence, in space, on planets, spacecraft. think of space, they in aircraft, and - Daniel S. Goldin, NASA Administrator, Sacramento, California, May 29, 1996. Providing a virtual human presence in the universe through the actual presence of a plethora of robotic probes requires a strong motive, mechanical means, and computational that motivate space exploration the scientific questions intelligence. We briefly consider and the mechanical means for exploring this paper on our progress intelligence computational these questions, and then focus the remainder of explorers with a form of towards endowing that we call remote agents. these mechanical The development of a remote agent under tight time constraints has forced us to re- examine, and in a few places call to question, some of Al’s conventional wisdom about the challenges of implementing systems, This topic is addressed in a variety of places throughout and representation. this paper. embedded reasoning tractable 1.1. Estublishing a virtuul presence in space is evidence, found during that suggest new possibilities Renewed motives for space exploration have recently been offered. A prime example is for life in space. The best that primitive the summer of 1996, suggesting than 3.6 billion years ago. More specifically, a series of scientific discoveries known example life might have existed on Mars more the recent discovery of extremely scientists evidence suggestive of “native microfossils, mineralogical and evidence of complex organic chemistry” or overturn and is more cost effective led the Martian meteorite AlH84001 at fine resolution, where they found features characteristic of life, to confirm that has higher performance than traditional missions. Traditional planetary missions, these findings requires a new means of exploration small bacteria on Earth, called nanobacteria, [47]. Extending a virtual presence to examine such N. Muscettala et al. /Art$cial Intelligencr 103 (1998) 547 Fig. 1. Planned and concept missions Return missions (courtesy of NASA Johnson Space Center); (2) cryobot and hydrobot exploration airplane (courtesy of NASA Ames Research Center). (courtesy of JPL); (3) DS3 formation to extend human virtual presence flying optical interferometer in the universe. (I) Mars Sample for Europa oceanographic (courtesy of JPL); (4) Mars solar as the Galileo Jupiter mission or the Cassini Saturn mission, have price tags in excess of a billion dollars, and ground crews ranging the entire introduced a paradigm shift within life of the mission. The Mars Pathfinder NASA towards lightweight, highly focused missions, at a tenth of the cost, and operated last by small ground summer when MPF landed on Mars and enabled [48] to become the first mobile robot to land on the surface of another planet. [ 141. The viability of this concept was vividly demonstrated from 100 to 300 personnel during the Sojourner micro-rover (MPF) mission teams Pathfinder and Sojourner demonstrate a to achieving to achieve the goals for its two month life span taxing for its small ground crew. Future Mars rovers are expected to operate the need for the development of remote agents that are able to virtual presence, but currently of more challenging missions. For example, operating Sojourner was extremely for over a year, emphasizing continuously an important mechanical means intelligence necessary interact with an uncertain environment. lack the on-board and robustly Rovers are not the only means of exploring Mars. Another is a solar airplane, under study at NASA Lewis and NASA Ames. Given the thin CO2 atmosphere innovative concept 8 N. khscettolrr et al. /Art$cial Intelligencr 103 (1998) 5-47 feet above sea level. This height is like a terrestrial plane on Mars, a plane flying a few feet above the Martian surface the reach of all but flying more than 90000 survey Mars a Martian plane a few existing planes. Developing of the Martian climate, requires the the idiosyncrasies over long durations, while surviving development of remote agents that are able to accurately model and quickly adapt to their environment. is beyond that can autonomously A second example is the discovery of the first planet around another star, which raises the intriguing question of whether or not Earth-like planets exist elsewhere. To search for [ 161, such as Earth-like planets, NASA is developing a series of interferometric telescopes the New Millennium Deep Space Three (DS3) mission. These interferometers identify and in a star, induced by its orbiting planets. They categorize planets by measuring a wobble the are so accurate that, if pointed from California to Washington DC, they could measure three optical thickness of a single piece of paper. DS3 achieves this requirement by placing flying in tight formation up to a kilometer apart. This units on three separate spacecraft, extends tightly coordinated of multiple, the computational remote agents. to the development challenge frozen surface. A final example smooth surface and chunky In February of 1998, the Galileo mission to the idea that Europa may have subsurface oceans, hidden under a thin is the question of whether or not some form of life might exist identified beneath Europa’s ice rafts, that lend features on Europa, such as a relatively icy support this subsurface ocean is an layer. One of NASA’s most intriguing ice penetrator and a submarine, that could autonomously navigate beneath Europa’s surface. This hydrobot would need to operate autonomously within an environment Taken together, flying for developing these examples of small explorers, interferometers, including micro-rovers, provide remote agents that assist in establishing airplanes, an extraordinary formation opportunity space, on land, in the air and under the sea. called a cryobot and hydrobot, that is utterly unknown. a virtual presence and hydrobots, for exploring cryobots, concepts in 1.2. Requirements for building remote agents to enable the above missions The level of on-board autonomy necessary is unprece- is the fact that NASA will need to achieve this capability to the billion that cost under 100 million dollars, in 2-3 years, and operated by a small ground team. This ambitious goal is to be low cost, technol- probe, Deep Space One (DSl), has dented. Added to this challenge at a fraction of the cost and design dollar Cassini mission, NASA’s target is for missions developed achieved at an Apollo-era pace, through the New Millennium Program’s ogy demonstration missions. The first New Millennium a development time of only two and a half years and is scheduled time of previous missions. for a mid- 1998 launch. In contrast remote agents for controlling The unique challenge of developing these space explorers is driven by four major properties of the spacecraft domain. First, a spacecraft must carry intervention. This out autonomous operations requirement the cost and limitations of the deep network, spacecraft occultation when it is on the “dark side” of a space communication its planet, and communication stems from a variety of sources including long periods of time with no human the Cassini spacecraft must perform delays. For example, for N. Muscettola et al. /Artijicial Intelligence 103 (1998) 547 9 critical Saturn orbit insertion maneuver without any human assistance due to its occultation by Saturn. Second, autonomous operations must guarantee success, given that give no second chances and rare celestial events, and include examples such as executing resource constraints. Tight deadlines dynamics insertion maneuver within a fixed time window, window around Jupiter. Tight spacecraft propellant, must be carefully managed and budgeted the time of closest approach, and imaging a comet’s fiery descent like power or non-renewable the mission. resources, whether renewable throughout tight deadlines and stem from orbital an orbit images during a narrow into like taking asteroid are expensive for unique missions, and are often designed require high reliabifity. Even with the use of highly reliable hardware, failures. Flight the hardware, hardware for such failures by repairing or reconfiguring of space can still cause unexpected to possibly degraded operation modes. Providing Third, since spacecraft spacecraft operations the harsh environment software must compensate or switching complicated by the need for rapid failure responses precious resources, and due to limited observabili9 from limited on-board mission associated hardware, sensing, since additional cost. Furthermore, thus making such a capability is to meet hard deadlines and conserve of spacecraft state. The latter stems increase the less so, than and often sensors add weight, and hence sensors are no more reliable, it difficult to deduce true spacecraft state. is a complex networked, multi-processor over a bus with sophisticated involves concurrent uctivity among a set of tightly coupled Fourth, spacecraft operation system, with one subsystems. A typical spacecraft sensors (e.g., star or more flight computers communicating reaction wheels, main trackers, gyros, sun sensors), actuator subsystems subsystems operate engines), and interactions as concurrent processes to control negative ones. For example, while a camera the attitude controller must hold the spacecraft at a specified attitude, and the main engine must be off since otherwise too much vibration. Hence, all reasoning about the spacecraft must reflect this concurrent nature. instruments. These hybrid hardware/software that must be coordinated to enable synergistic is taking a picture, it would produce (e.g., thrusters, and science 1.3. A Remote Agent architecture the architecture of the New Millennium program a group of AI researchers Following the announcement from JPL challenged the short span of five months, for spacecraft control. To evaluate engineers to demonstrate, within architecture the New Millennium Autonomy Architecture Prototype based on the Cassini mission, spacecraft The NewMAAP successful Remote Agent architecture developed based planning identification Additional robust multi-threaded and scheduling, that retains including insertion scenario details, for the NewMAAP and reconfiguration. An overview of the architecture a description of the NewMAAP its most challenging a fully capable in early 1995, spacecraft at NASA Ames and JPL remote agent the JPL engineers defined a simulation study aspects. The NewMAAP to date. (NewMAAP), scenario integrated constraint- execution, and model-based mode is provided in Section 2. scenario, may be found is a scaled down version of Cassini, NASA’s most complex spacecraft is based on the most complex mission phase of Cassini- into Saturn’s orbit even in the event of any single point of failure. The woefully l “[Qualitative] We examine in [57]. The success of the NewMAAP demonstration selected as a technology late 1998. Details of the experiment are found in [5]. resulted experiment on DS 1. This experiment in the Remote Agent being for is currently scheduled The development also provided to reassess some of Al’s conventional wisdom, which includes: of the Remote Agent architecture opportunity an important l “Generative planning does not scale up for practical problems.” l “[For reactive systems] proving is out of the question” l “[Justification-based theorems and Logical Truth Maintenance . . they are inefficient inadequate in both time and space” [ 181. [ 11. Systems] have proven to be equations are far too general for practical use” [63]. these statements in more detail later in the paper. But first we highlight the three important guiding principles underlying the design of the Remote Agent architecture. 1.4. Principles guiding the design of the Remote Agent Many agent architectures have been developed within the Al community, particularly features. First, it is largely programmable within the field of indoor and outdoor mobile robots. The Remote Agent architecture has three distinctive declarative models. We refer to this as model-bused programming. Second, significant hours to hundreds of milliseconds. Third, the Remote Agent is designed level closed-loop commanding. amounts of on-board deduction und search at time resolutions it performs from to provide high- through a set of compositional, varying 1.4.1. Model-based programming requires The most effective way to reduce software development since each task requires to implement to achieve for the breadth of tasks that constitute an autonomous the programmer cost is to make the software the cost of the software across successive applications. system system-wide a failed the attitude the thrusters, and the thruster valve electronics. Hence to the particulars of the “plug and play”, and to amortize This is difficult architecture, interactions thruster controller, this software lacks modularity, and has a use that is very restricted hardware. The one of a kind nature of NASA’s explorers means that the cost of reasoning through system-wide each new explorer. In addition, overload by the programmers, cannot be amortized, and must be paid over again for can lead to cognitive to reason function. For example, diagnosing causing suboptimal decisions and even outright errors. the complexity of these interactions the star tracker, the bus controller, the interactions the appropriate interactions reasoning between through about programming Our solution to this problem is called model-bused programming, Model-based generate the breadth of desired functionality of mission-level Hence, although used to generate goals. In addition, the flight software itself is not highly reusable, this software is highly reusable. in [70]. and operators hardware models in light the same model is used to perform most of these tasks. the modeling knowledge is based on the observation from common-sense that programmers introduced To support plug and play, the Remote Agent specifying and plugging behaviors. The Remote Agent is programmed, wherever possible, by together declarative component models of hardware and software all reasoning then has the responsibility of automating N. Muscettolu et al. /Artificial Intelligence 103 (1998) 547 11 the model-based mode component of the Remote Agent uses a compositional, system model with a combination of probabilistic and the planning and scheduling component from these models. For example, concurrent transitions and reconfiguration transition (see Section 5). Similarly, about system wide interactions identification declarative, deterministic is constraint-based, principles using a sophisticated interconnections wherever possible; generic procedures written operate directly on these declarative models. scripting operating on a declarative domain model to generate a plan from first (see Section 3). Even the executive component, which is primarily programmed language, uses declarative models of device properties and language in the scripting 1.4.2. On-board deduction and search long periods of time, a large number of failures can frequently Given the task of automating all reasoning about system interactions, suggests since our space explorers often operate time. The need for fast reactions is whether or not the Remote Agent should do this on-board at compile computed. However, over mission critical phases. Hence pre-enumerating becomes usually restored with the use of simplifying control interactions. Unfortunately, inefficient, which control loop. intractable. When writing flight software for traditional single faults, ignoring laws, assuming this can result sensor information, assumptions, in systems responses a natural question in real-time or off-board should be pre- in harsh environments that all responses appear during to all possible situations quickly is spacecraft, tractability such as using local suboptimal subsystem or ignoring that are either brittle or grossly the is one reason why so many human operators are needed within The difficulty of pre-computing all responses and the requirement of highly survivable timely responses systems means that the Remote Agent must use its models to synthesize to anomalous and unexpected situations in real-time. This applies equally well to the high- level planning and scheduling component and to the low-level fault protection system, both and novel situations by performing deduction and of which must respond larger the time-scale search in real-time than for fault protection). (though, of course, to time-critical is significantly for planning This goal goes directly counter to the conventional AI wisdom should avoid deduction within the reactive late 80’s after mathematical tasks were NP-hard. For example, after proving planning was NP-hard, David Chapman concluded analysis showed that many, surprisingly that his formulation [ 111: loop at all costs. This wisdom emerged that robotic executives in the simple, deductive of STRIPS-style for the best amounts “Hoping in practice, extensions intuition is that this is not the case.” to arguing to current planning that, for the particular cases that come up to be efficient. My techniques will happen On the flip side, what offers hope is the empirical work developed in the early 90’s on hard satisfiability problems. This work found that most satisfiability problems can quickly elusive hard problems be shown to be satisfiable or unsatisfiable to unsolvable problems. The elusiveness of hard lie at a phase transition from solvable problems, at least in the space of randomly generated problems, that many real that a carefully designed world problems may be tractable. This raises [ 12,641. The surprisingly the possibility suggests 12 N. Muscettdu et al. /Artijicial Intelligence 103 (/WY) 547 deductive kernel could perform significant deduction and constrained example, approach tuned, propositional, set of assumptions using a simple search strategy and a simple language for writing heuristic control rules. the diagnosis and recovery component of the Remote Agent adopts a RISC-like in which a wide range of deductive problems are reduced to queries on a highly exploits a best-first search kernel [56,71]. The planning component to generate plans with acceptable efficiency about domain structuring in real-time. For 1.4.3. Goal-directed, closed loop commanding respond A mission to robustly to extraordinary like Cassini requires a ground crew of 100-300 personnel at different mission stages. The driver for such a large team is not so much Cassini’s nominal mission, but situations. Likewise, the effort required the need for extreme robustness without extensive ground interaction is Remote Agent’s most defining requirement. Traditional low-level commands, commanding with rigid time stamps leaves the spacecraft occurs, so that it is unable what hardware sequence of extremely such as “open valve-17 at 20:34 exactly”. This low level of direct little flexibility when a failure or to change around is used to achieve commands. spacecraft are commanded the time of commanding through a time-stamped to shift around A fundamental concept supporting robustness the brittleness of direct commanding as input and, using a feedback mechanism the system until the error between in classical control systems is feedback by taking a set the system’s the actual and intended is a simple specification of an intended the commands freedom to determine that senses trajectory control. Feedback control avoids point actual trajectory, commanding trajectories behavior, which gives necessary to achieve this behavior is eliminated. The set-point the feedback trajectory controller the same concept at a much more abstract level. It is (the mission profile) that specifies high-level goals during activity within a 24 an engine calibration the target. This gives the Remote Agent considerable The Remote Agent embodies commanded by a goal trajectory different mission segments, such as performing hour window before approaching flexibility as to how these goals are achieved. To achieve robustness, its sensor information detecting and compensating trajectory. that cause the system close the feedback to continuously for anomalies the Remote Agent uses loop at the goal level, quickly to deviate from the goal this take to close situations Traditionally this feedback that highlights the diverse actions humans for the ground crew was to accurately is the Apollo 13 crisis. The crisis began when a quintuple loop is closed by astronauts and the ground crew. A popular in can example extraordinary fault occurred, consisting of three electrical shorts, and a tank-line and a pressure jacket bursting. the health state of the A first challenge spacecraft from its limited sensor information. No repair to the spacecraft would get the mission back on track to the moon, hence the second challenge a new mission that would allow the Apollo capsule hobbled state. Recall that astronaut Mattingly worked extensively search of a novel command sequence of the imperiled spacecraft. Ultimately Mattingly achieved unintended this only through a novel, but from the lunar to return in a ground simulator, that would work within the severe power limitations to Earth in its in of the spacecraft hardware involved quickly designing that drew current reconfiguration sequence assess loop N. Muscettolu et al. /Art&kd Intel&we 103 11998) 547 13 the capsule that would guide together procedures sequence. This example highlights through Mattingly’s four basic roles performed by humans, module’s battery. Finally, astronauts Swaggert and Love11 had the challenge of quickly new assembling mission that the Remote Agent. The first two must also be embodied, albeit in a simpler form, within is performed roles, diagnosis of multiple by Remote Agent’s model-based mode component. Generation of new mission sequences under tight resource constraints Remote Agent’s planner/scheduler. to implement new and changing mission sequences executive component. is performed by the Flexible assembly and execution of flight procedures is implemented by the Remote Agent’s of hardware and reconfiguration failures and novel reconfiguration identification In the next section we discuss how each of these components Agent architecture. We then focus on technical the Remote Agent, and then discuss key technology insertion lessons. interact within the Remote lessons related to the three components of 2. Remote Agent architecture resources and develops plans an overview of the Remote Agent to address the domain requirements discussed (RA) architecture. The This section provides architecture was designed in Section 1.2. The need for autonomous operations with tight resource constraints and hard deadlines dictated (PS), with an associated mission manager (MM), the need for a temporal Planner/Scheduler that achieve goals in a timely manner. The that manages need for high reliability dictated that provides time activity, and a model-based mode robust plan execution and coordinates in rapid failure that enables identification of spacecraft state. The need to handle concurrent spite of limited observability activity impacted the domain with concurrently formalisms used: PS models evolving models the spacecraft as a concurrent the representation state variables, EXEC uses multiple transition the use of a reactive executive to manage concurrency, execution (MIR) threads system. and reconfiguration and MIR responses (EXEC) system Real-Time Control Fig. 2. Remote Agent architecture embedded within flight software. 14 N. Muscettoln et al. /Artificial Intelligence IO3 (1998) 5-47 to the flight software within which The RA architecture, and its relationship is shown in Fig. 2. When viewed as a black-box, RA sends out commands embedded, real-time control system (RT). RT provides which take the form of discrete and continuous attitude determination modes of control loops or states of devices. Information and hardware sensors is passed back to RA either directly or through a set of monitors. it is to the system, real-time estimation and control tasks, e.g., to commands by changing the about the status of RT control loops the primitive skills of the autonomous and attitude control. RT responds integrated (PS) and Mission Manager (MM). PS is a constraint-based [52] that is activated by MM when a new plan is Planner/Scheduler temporal planner and resource scheduler desired by the EXEC. When requested by the EXEC, MM formulates short-term planning for PS based on a long-range mission profile. The mission profile is provided problems It contains a list of all at launch and can be updated nominal goals to be achieved during the DSl mission profile contains goals such as optical navigation goals, which specify the duration and frequency to be used for of time windows within which to orbit determination them with the be achieved initial into long- range mission planning and short-term detailed planning enables the RA to undertake an extended diverse mission with minimal human by the on-board navigator. MM determines in the next horizon, e.g., a week or two long, and combines from the ground when necessary. the mission. For example, spacecraft state provided by EXEC. This decomposition images the goals that need the spacecraft must take asteroid (or projected) intervention. PS takes the plan request temporal plan. The plan constrains formulated by MM and uses a heuristic guided backtrack the activity of for details required the progress of the plan as it is executed. The plan also contains an explicit the next round of planning. For example, a typical DS 1 plan to achieve to search to produce a flexible, concurrent each spacecraft subsystem over the duration of the plan, but leaves flexibility to be resolved during execution. The plan contains activities and information to monitor activity the above optical navigation goal requires be pointing at the asteroid before the image is taken. The plan leaves temporal on exactly when these events take place, and does not constrain in effecting by the attitude controller flexibility the particular mode used the camera to be turned on and the spacecraft to initiate the turn. Other on-board software systems, called planning experts, participate in the planning process by requesting navigation planning of spacecraft orbit, and the attitude planning duration of specified turns and resulting new goals or answering expert requests main engine resource consumption. questions for PS. For example, the thrust goals based on its determination about estimated expert answers questions execution-time in the plan into commands Smart Executive (EXEC). for coordinating activities constraints methods thrusting to start thrusting and to the attitude controller and is executed only after the previous optical navigation window has ended. EXEC is a reactive plan execution system with responsibilities activity. EXEC executes plans by decomposing high-level temporal language, ESL [35], to define alternate in DSl such as to the main engine to switch into thrust vector control mode, activities. For example, a high-level is decomposed in the plan. EXEC uses a rich procedural for decomposing the main engine system, while respecting into coordinated to the real-time commands activity N. Muscettolu et al. /Artijiciul Intelligrnce 103 (19%) 547 15 robustness time within EXEC achieves for a high-level from the command task decompositions to choose execution commanding, whereby in plan execution by exploiting through closed-loop either directly the plan’s flexibility, e.g., specified windows or by being able activity. EXEC also achieves it receives feedback on the results recipient or by inferences drawn by the component of MIR. For example, when EXEC turns on the camera from switch and current sensors to confirm to the by being able to select different robustness of commands mode identification to prepare for imaging, MIR uses information that the camera did turn on. When some method to achieve a task fails, EXEC attempts accomplish mode reconfiguration When instructed to request a new plan by the currently executing plan, EXEC provides MM with the projected spacecraft state at the end of the current plan, and requests a new to execute or repair the current plan, it aborts the plan, cleans plan. If the EXEC is unable up all executing activities, and puts the controlled system into a stable safe state (called a standby mode). EXEC then provides MM the current state and requests a new plan while maintaining this standby mode until the plan is received. in that task’s definition or by invoking the task using an alternate method component of MIR. to provide Identijication by Livingstone spacecraft model and search within and Reconjiguration its use of deduction to the EXEC, enabling called mode identification [71], a discrete model-based (MZR). The MIR component controller. Livingstone all by its use of a single declarative and sensing component, of the RA Mode is is provided its distinguished loop. the reactive control functionality, (MI), tracks the most likely Livingstone’s spacecraft states by identifying states whose models are consistent with the sensed monitor values and the commands sent to the real-time system. MI reports all inferred state changes it to reason purely to EXEC, and thus provides a level of abstraction in terms of spacecraft state. For example, particular combinations of attitude errors allow thruster has failed. EXEC is only informed about the failed Ml to infer that a particular low-level sensor values. state of the thruster, and not about the observed called mode reconfiguration commanding (MR), uses the that establishes or restores desired spacecraft model to find a least cost command sequence failed components. Unlike PS, MR functionality has a reactive focus, thus enabling the RA architecture, MR is invoked by the EXEC with a recovery request that specifies a set of constraints In response, MR produces a recovery plan that, when executed by EXEC, moves the spacecraft from the current state (as inferred by MI) to a new state in which all the constraints are satisfied. For example, that the camera did not turn on when commanded, EXEC will request MR to repair the camera. MR will respond by instructing EXEC to retry the command. to be established and maintained. it to rapidly suggest command hardware or repairing sequences. Within if MI determines by reconfiguring Livingstone’s component, 3. Planning and scheduling The Planner/Scheduler the high-level, deliberative (PS) of the Remote Agent provides planning component of the architecture. The extended duration of a space mission, coupled since with the unpredictability like thrusting, poses a challenge for planning, of actions 16 N. Muscettolu et al. /Artijicial Intelligence IO3 (1998) 547 - Heuristics Model Knowledge base Goals Initial state ) Plan Database Plan --_) Fig. 3. PS architecture diagram early coherence problem, in which each round of planning in the mission may exhaust propellant to plan the entire mission at the lowest [60], this raises a potential level of detail. The approach it is impossible has a in RA is to perform periodic planning as restricted scheduling horizon. However, later in the mission (for example, activities within one horizon might compromise activities for much aggressive maneuvers (MM) later mission goals). RA addresses it also extracts component. When MM extracts goals for an upcoming a constraints that must be available for future use. waypoint constraint specifies the amount of propellant to the current plan request, MM restricts PS to generate By adding waypoint constraints only plans that are coherent with the overall mission plan [61]. Hence, PS receives from MM and EXEC the initial spacecraft conditions, the goals for the next scheduling horizon, and the waypoint constraints. It produces a plan, which can be viewed as a high-level program that EXEC must follows in order to achieve the required goals. in the mission profile. For example, the Mission Manager the next waypoint round of planning, associated with this problem through needed Fig. 3 shows the structure of PS (see [51,52] for more details). A general-purposepkun- that can be reused in different applica- ning engine provides a problem solving mechanism the application. The tion domains. A special-purpose domain knowledge base characterizes is planning engine consists of the plan database and the search engine. The plan database provided by the Heuristic Scheduling Testbed System (HSTS) framework. The search en- gine calls the plan database of each problem solving step and to require consistency maintenance and propagation The search engine, Iterative Refinement Search (IRS), is a chronological backtracker to record the consequences services. encodes a set of methods usable to extend a partial plan. Programming for a specific application methods for IRS to choose among branching domain heuristics. requires both a description of the domain, alternatives during One crucial aspect of the success of PS is the ability domain constraints. To do so, PS uses the Domain Description Language the HSTS framework. The models expressed in DDL use two strong domain organizational principles that are the foundation of HSTS. First, it structures the description of the system to provide a good model of the (DDL), part of that the planning engine the domain model, and the the search process, N. Muscertola rt al. /ArtiJicial Intelligence 103 (1998) S-47 17 it uses a unified (timelines) over linear and continuous the evolution of a system as a set as a finite set of state variables. A plan describes time, one per state variable. of parallel histories Second, the token, to describe both actions and state literals. As in [26], a token extends over a metric time interval. The description of a system consists of constraints between to represent principles tokens that must be satisfied system. We further discuss in a plan for it these structural legal behaviors of the controlled in Section 3.2. representational primitive, PS generates complex plans with performance spacecraft even when using a very simple search strategy and a very simple heuristic to program the search engine. This is because of the use of constraint posting and together with the restrictions on the as the primary problem solving method for an on-board application, language propagation topology of the constraint networks imposed by the structural principles of HSTS. acceptable PS is a concrete example of the fact that, by solely relying on concepts and techniques research, and scheduling it is possible include subgoaling, from AI planning practical significance. These techniques propagation, and heuristic planning and scheduling to the development This bears great promise for the future of the technology. We now discuss some of these points in more detail. of high-level commanding search. Furthermore, we believe techniques provide the most viable software engineering software for highly autonomous to solve complex problems of temporal reasoning, constraint that at the current time AI approach systems. 3.1. Non-classicul aspects Qf the DSl domain application A complex, mission-critical technology. The classical AI planning problem like DSl is a serious stress-test for classical AI is to achieve a set system as a set of the world derived [32], which sees the world as an alternation of indefinitely persistent states actions. Classical schedulers, on the other hand, see the world as a set that is to each planning and scheduling of goal conditions given an initial state and a description of the controlled of planning operators. Most classical AI planners use representations from STRIPS and instantaneous of resources and a set of structured known a priori. Solving a problem task while guaranteeing task networks, with each task having a duration involves allocating a start time and a resource that all deadlines and resource limits are satisfied. The DSl domain not only forces a view of the world the need for significant [51] but also introduces scheduling perspective. Here is a quick review of the types of constraints on system dynamics the types of goals that PS must handle. that merges planning extensions and to the classical and 3.1. I. System dynamics To describe the dynamics of the spacecraft hardware and real-time software, we find the need to express state/action constraints such as “to take a picture, the resources (such as on- camera must be on”), continuous board electric power). Classical planning or classical scheduling cover all of these aspects. However, the classical perspective. (e.g., preconditions time, and the management ofjnite there are other modeling constraints important but outside that are equally 18 N. Muscettola et al. /Artijiiciul Intelligence 103 (199H) 5-47 l Persistent parallel threads: separate system components evolve in a loosely coupled that may need on their relative operational modes. Typical examples of such threads loops (e.g., Attitude Control and Ion Propulsion System Control) manner. This can be represented coordination are various control that can never terminate but only switch between different operational modes. as parallel execution threads l Functional dependencies: several parameters of the model are best represented as turn depends functions of other parameters. For example, from where the turn starts and the one where the turn ends. on the pointing direction The exact duration of a turn is not known a priori but can only be computed after PS decides the sequence of source and destination pointings within which the turn is inserted. the duration of a spacecraft in DSl the engine that require accumulated interruptions, thrust accumulation, is going on. Between the Ion Propulsion System l Continuous parameters: in addition of other continuous parameters. These include battery charge or data volume and of non-renewable example, long periods of time (on the order of months). During other activities must be executed activity previously total requested l Planning experts: the level of renewable resources (IPS) engine accumulates to time, the planner must keep track of the status like resources like propellant. For thrust over several to be shut down while the however, the plan must keep track of the the to expect it is unrealistic in PS. In several cases sophisticated that all aspects of the domain will be encoded software modules are already available that effectively model subsystem behaviors and mission PS must be requirements. able to exchange information with in DSI experts. For example, trajectory. The expert which manages PS makes use of a Navigation Navigation expert is in charge of feeding PS with beacon asteroid observation goals to determine the trajectory. the trajectory error and with thrusting maneuver goals to correct amount of thrust so as not to over-shoot or under-shoot these planning the spacecraft thrust. 3.1.2. Goals goal types. Problem The DSl problem can only be expressed by making use of a disparate set of classical on final states requirements the camera must be off”), which are classical (e.g., tasks within given temporal constraints and non-classical (e.g., “at the end of the scheduling horizon planning goals, and requests for scheduled “communicate with Earth only according schedule”), which are classical scheduling goals. Non-classical to a pre-defined Deep Space Network availability categories of goals include: include conditions l Periodic goals: for example, optical navigation a periodic plus/minus 6 hours”). function (“take asteroid pictures activities are naturally expressed as for 2 hours every 2 days for navigation in DS 1 a goal expresses goals: these arise in the handling of continuous l Accumulation level resources. For as a duty cycle, the requested example, i.e., the percentage of the scheduling horizon during which the IPS engine is thrusting. PS will choose the specific time intervals during which IPS will be actually thrusting. It will do so by trading off IPS requirements with those of other goals. thrust accumulation N. Muscetfola et al. /Artijicial Intelligence I03 (1998) 547 19 l Default goals: these specify conditions to achieve any other goal. For example. communications Earth whenever rection. the spacecraft there is no other goal should keep that the system must satisfy when not trying in order to facilitate possible emergency the High Gain Antenna it to point to in a different di- pointed requiring 3.2. Domain structure principles We mentioned that PS has two strong structural principles regarding how to represent domain models. We call them the state variable principle and the token principle. We now discuss both of these in more detail. . State variable principle: the evolution of any system over time is entirely described by the values of a finite set of state variables. an evolution of the system State variables are a generalization of resources as used in classical is a description of task allocation In to resources. scheduling in PS any literal used inside a plan must be associated with a state variable. Similarly, The literal represents the value assumed by the state variable at a given time, and a state variable can assume one and only one value at any point in time. Building a plan involves determining a complete evolution of all system state variables over a scheduling horizon of finite duration. scheduling. typically addressed this perspective in classical planning. For example, At first glance, structuring a model with a finite set of state variables could appear quite is quite restrictive. However, on further analysis one can see that using natural even in domains in the “monkey and bananas” world all actions and state literals can be assigned as the values the location of one or more of the following of the block, the (whether is on the floor, climbing on the block or on top of the block). Moreover using state monkey research variables can be advantageous during problem solving. Recent results in planning devices similar to state variables can seem to suggest that planners that use representational seriously outperform planners in Satplan 1421 and mutex relations the location of the bananas and the elevation of the monkey that do not (e.g., state variable constraints the location of the monkey, state variables: in Graphplan [6]). l Token principle: no distinction needs to be made between representational primitives for actions and states. A single representational describe primitive, the evolution of system state variables over time. the token, is sufficient to This structural principle challenges a fundamental tenet of classical planning: the dichotomy between actions and states. To illustrate why this dichotomy we consider an example drawn from the spacecraft operations domain. The attitude of space, is supervised by a closed- a spacecraft, i.e., its orientation loop Attitude Control System a certain to achieve or maintain the current and the desired attitude. attitude, ACS determines thrusters as a function of It then appropriately the discrepancy repeated until the attitude error is acceptable. When controlled by ACS, the spacecraft can be in one of two possible modes: acceptable attitude error. This cycle is continuously in three-dimensional (ACS). When asked the firing of the spacecraft the discrepancy between and the maximum is problematic, commands 20 N. Muscettola et al. /ArtiJiciul lntelligmce 103 (1998) 547 (1) Turning (?x, pointing ? y; ?y) , i.e., changing attitude from an initial pointing ?x to a final (2) Constant_Pointing ( ?z) , i.e., maintaining attitude around a fixed orienta- tion ?z. When using a classical planning representation to model attitude, we would need to into two different kinds of literals: state literals, representing is that in spite it is by no means easy to choose the mapping between system modes and find it natural to map cons tant_Point ing change. The problem literals, representing two modes map these persistent conditions, or action of appearances states/actions. Most people would probably ( ?z) to a state literal and Turning reasonable ( ?x, to an action attitude control. Thrusters However, we may want to take a different perspective and consider literal. This is certainly ?y) if one focuses on the value over time of the actual orientation of the spacecraft. the level of “activity” the of the thrusters during In fact, thrusters are fired more frequently while acceptable error in attitude than maintaining to fire the thrusters while executing a Turning ( ?x, at the beginning of the turn to start it and at the end of the turn to stop it. In this case, one would conclude ( ? z ) would be best represented as actions. a cons tant_Point ing ( ? z ) state with a very low error tolerance that in fact both Turning ( ?x, ? y ) , where it may be sufficient are usually more active when and constant_Pointing is smaller. ?y) The opposite perspective the appropriate literals present to ACS executing communicating required to see both constant_Pointing(?z) parameter settings literals. spacecraft attitude behavior. From is also possible. If we focus on what EXEC does when in the plan, we can see that EXEC does nothing more than the law and set point that will cause control for the ACS control system, conceptually this point of view, it would be reasonable and Turning (?x, ?y) as two different best represented with state In this example PS takes a radical view and gives observations, precisely, a plan that occurs over a period of time of non-negative reference temporally the distinction between actions and states is not clear. Given the above to all literals. More (either dynamic or stationary) remove any term token to refer to such to the state/action dichotomy, we use the neutral duration. To purposefully literal always describes scoped assertions. the same status some process A domain model contains constraint patterns For example, Fig. 4 gives the DDL construct representing plan for the DS 1 Microelectronics an image. This action is represented in the plan by the token Integrated Camera And Spectrometer that have to be in every consistent plan. the token conditions needed in a to take (MICAS) MICAS.actions_sv = Take-Image (?id, ?orientation, ?exp_time, ?settings) that the state variable act meaning a ground value matching The constraint descriptor parameters of the token. In the example, the value of the token duration computes ions_sv the Take-Image predicate includes the specification of the system component MICAS assumes for the duration of the token. between dependency of functional the function Compute_Image_Duration (special variable ?duration) as a function N. Muscettola et (11. /Artificial Intelligence IO3 (1998) 547 MICAS.actions_sv = Take-Image (?id, ?orientation, ?exp_time, ?settings) 1 :parameter_functions ?duration <- Compute_Image_Duration (?exp_time, ?settings); :temporal_relations met-by MICAS.actions_sv = Idle; meets MICAS.actions_sv = Idle; equal Power.availability_sv = DELTA used <- Used + 140.0; contained-by Spacecraft.attitude_sv = Constant-Pointing (?orientation) ; contained-by MICAS.health_sv = MICAS-Available; contained-by MICAS.mode_sv = Ready; Fig. 4. Taking a picture with the on-board MICAS camera. relations temporal of the value of the token arguments ?exp_t ime and ? se t t ing. Finally, the descriptor that have to be satisfied with other tokens in order for a plan includes to be consistent with the domain model. the :temporal_relations keyword. They state that the MICAS.actions_sv state variable must be Idle immediately that that during Take-Image the spacecraft Take-Image consumes must be Constant-Pointing and that during Take-Image token) and Ready in the requested MICAS must be both in good health (MICAS-Available the Take-Image token; 140 W of power; before and after these constraints In the example ?orientation; follow template approaches is closely to temporally [3]. However, as a consequence related allows the expression of similar constraint patterns in temporal planning our framework like MICAS.actions_sv express constraints both on “actions" and on “states". For example, a functional duration ?y) , where duration depends constraint may need to apply both to Turning on the angle between the maximum duration may depend on how the relative orientation of the Sun with respect to ? z affects the satisfaction of solar exposure constraints ?x and ?y), and to Constant-Pointing = Idle. In reality it is equally important to be able to for sensitive subsystems. (?z), where ( ?x, scoped operators used of the token principle, tokens for “state” for use. The above constraint 22 N. Muscettola et al. /Artificial Intelligence IO3 11998) 547 3.3. Plans as constraint networks to information for the spacecraft. However, instead compactly describe a behavior envelope, PS plans are effectively programs behavior and consistent select the most appropriate behavior that becomes available only at execution acceptable, robustness plans should as much as possible avoid being single, completely behaviors. They should possible behaviors. EXEC can incrementally envelope while responding that EXEC interprets at run time to generate a single, to ensure execution specified i.e., a set of in the time. PS satisfies this requirement by representing plans as constraint networks. For example, into a simple that must assume the start and end times of tokens are integer-valued temporal constraint network [271. Codesignations same value for any plan execution. Other functional dependencies For example, thrust accumulation with constraints the final accumulation tries to enforce compatibility plan database. The plan database new constraints constraint propagation deduces acceptable can also be represented. contain the IPS engine tokens), (due to previous thrust accumulation and the duration of the token. During plan construction, when PS in the the it posts portions of a constraint network variables relate parameters to the rest of the network. When ranges of values for each variable. that relate the initial accumulation then enforces consistency checking by propagating the constraint network interconnected that describe is consistent, constraints, tokens Plans are intrinsically jexible. During plan execution, EXEC the plan’s in order to select specific values for the plan variables. For example, constraint network if the plan specifies an acceptable range for the start time of a token, EXEC will have the freedom to start token execution at any one of the range values. This decision will affect the value range for the start or end of other, as yet unexecuted tokens. To adjust value ranges, at run time. EXEC’s constraint propagation EXEC must be able to propagate constraints has very different requirements from that of PS (see Section 4.2.1). interprets 3.4. Practical generative planning Fig. 5 outlines the PS search process. If the partial plan in the plan database has “flaws”, to fix it. Then the plan database and restrict variable backtracks. PS selects one and extends performs an arc-consistency to detect value ranges. If propagation detects an inconsistency, When the plan database contains no more flaws, a plan is returned. inconsistencies then PS chronologically the plan constraint network propagation and subgoal temporal flaw refers is analogous flaw detection repair process to other classical [67]. PS recognizes and is resolved analogously several kind of flaws. Fig. 5 lists temporal The algorithms urzinstantiated compatibility Unscheduled goal token flaws refer to goal tokens for which a legal position on a state variable has not yet been found. PS resolves this flaw either by finding such a legal position variable or, if such a position cannot be found, by rejecting value flaw is handled by restricting (possibly a single value) of the original range. The handling of this flaw is analogous in constraint planning three of them. The in a token relation flaws in classical planning. to a single to open precondition the value range for a variable to a subrange the goal. The underconstrained to value selection satisfaction search. N. Muscettola et al. /Art$cial lrztelligence 103 (1998) 547 23 No ,-b Plan Uninstantiated w . . Underconstrained parameter . Schedule token on state variable Fig. 5. PS problem solving cycle. The prioritization of open flaws and the selection of alternatives during flaw handling relies on very simple heuristics. For example, uninstantiated assigned a numeric priority according flaw at the moment the flaw first appears in the plan. to the value range of the variables involved temporal compatibilities are in the domain translates Although into an underlying the search strategy and heuristic scenario has 154 tokens and 180 temporal constraints between language are rather simple, PS can solve problems of size and complexity adequate for practical application domains. For example, the DSl Remote Agent experiment consists of 18 state variables, 42 token specifications. The largest plan in the nominal Remote predicates and 46 compatibility tokens. Agent experiment This and 232 constraints constitute a simple constraints. Of these, 8 1 variables and 114 temporal-bound in the rest temporal subnetwork related by one constraint) of the network have an average arity (i.e., number of variables is 649 with a search of 3.5. The number of nodes expanded during plan generation efficiency of about 64%. (Search efficiency is measured by the ratio of the number of nodes on the path to the solution and the total number of expanded nodes. Thus a search efficiency of 100% indicates no backtracking.) that relates start and end times of tokens. The constraints network with 288 variables constraint that PS is a purely generative planner level. Most importantly, PS does not use pre-compiled the overall plan from atomic components. This differentiates From the previous description we can conclude that operates at a single abstraction plan fragments but assembles PS from most practical applications systems rely on Hierarchical Task Network (HTN) planning, that are patched comes from hand-generated in successful The notable absence of generative planning task networks of planning technology to date [13,15,69]. These in which most of the power into an overall plan. has led to the applications together 24 N. Muscrttolu et al. /Artificial Intelligrnce 103 (1998) 547 commonly automatic solution of planning problems of commercial that only HTN planning shared view significance. has true utility with respect to the in DSl token networks the pre-compiled Although pre-compiling task networks do not significantly is shallow and useful pre-compiled to the HTN approach. For example, into HTN can be a powerful problem solving is not accidental. First, not all domains the task decomposition task networks assemble only a small number differ and therefore HTN has no clear advantage with respect relies replanning, constraints between activities and goals, which are often the HTN formalism technique, our choice of pure generative planning are equally amenable hierarchy of tokens. In these conditions from the domain compatibilities to generative planning. Second, on representation of domain-level not included in HTN representations does not provide a strong separation between the encoding of the domain model and that of the problem solving heuristics. While the former is valid independent of the goals of a the function of the latter is to ensure acceptable performance specific planning problem, and quality instead clearly separates between domain model and heuristics. As we shall see in Section 6.2, the to facilitate separation between domain models and problem solving heuristics validation and has a big impact on the acceptability of AI technologies applications. for the solution of specific planning problems. Our approach especially with degraded capabilities, [3 11. Third, and most importantly, for mission-critical is crucial 3.5. Summary PS is a constraint-based, commanding for the Remote Agent architecture. From our experience we take the following temporal planner the high-level that provides capability lessons: l Classical planning and classical scheduling must be combined and augmented for autonomous commanding of complex systems. l The classical action/state dichotomy is problematic and should be substituted by the unified concept of a token. l A constraint-based problem-solving plan representation organized across state variables is a powerful framework for planning. l Heuristic generative planning can solve problems of practical significance. l The separation between domain models and problem solving heuristics in real-world domains. for validating planners is important 4. Executive EXEC is a robust event-driven and goal-oriented multi-threaded control, diagnosis, and reconfiguration and a framework It provides a language planning, autonomous may be interdependent, where the success, be uncertain. interactions. When It provides a language interpreting this language execution capabilities system. in which software designers can express how into an that timing, and outcomes of these activities may and resource the the executive automates are to be integrated at run time, concurrent activities for expressing goal-decompositions system. It can request and execute plans involving N. Muscetrola et al. /Art$cial Intelligence 103 (1998) 547 25 into smaller activities that can be executed concurrently. This decomposition of goals automates aspects of the labor-intensive in spacecraft operations and raises the level of abstraction at which the ground system or on-board planner must reason. and fault EXEC’s design also supports a close integration between activity decomposition responses. This leads to more robust execution, avoids loss of mission objectives, improves mission reliability and resource utilization, the design of the entire software system. and simplifies sequencing function EXEC is built on Execution Support Language (ESL) 13.51, which provides sophisticated control constructs property schedule execution, hierarchical routine configuration management, [36]. These locks such as loops, parallel activity, synchronization, features are used in EXEC language error handling, and robust context-dependent method selection, responses the main coordination role as the intermediary to implement [%I. task decomposition, and event-driven In the RA architecture, EXEC plays between concentrate on two main aspects of EXEC’s behavior: the other flight software modules, both internal and external to RA. Here we . . to PS the available capabilities. Periodic planning over extended missions, EXEC must periodically ask PS for new tasks and must coordinate PS operation with the other tasks being executed. Also, operations are not interrupted if capabilities are lost. EXEC will ask for a new plan by communicating Robust plan execution. EXEC must successfully uncertainty a hybrid procedural/deductive method selection guided by state inference based on model-bused diagnosis. Local recovery from the current plan execution context. in the presence of allowed by the plan is exploited by using from faults involves planning guided by constraints that performs context-dependent and failures. The flexibility execute plans execution strategy 4.1. Periodic planning over extended missions Fig. 6 shows both major branches of the periodic planning and replanning cycle in RA: nominal execution and plan failure execution. Nominal execution occurs if all plan tokens Plan failure Plan-;“” assum;Zs violated U Plan failure Next horizon plan request Plan ready Fig. 6. Periodic planning and replanning cycle. 26 N. Muscuttoln et al. /Artificial Intelligence 103 (I 998) 547 execute without MIR or EXEC detecting any execution failure. In this case plan execution proceeds to the end of the current scheduling horizon. At the pre-defined point in the plan, EXEC invokes PS, continues executing while waiting for the new plan and then smoothly installs the new plan into the current execution context. Plan execution failure occurs if MIR or EXEC encounter an unrecoverable failure. In this event, EXEC aborts all current activity and enters standby mode, which serves (by design) invocation point for planning. EXEC then requests a new plan from this as a well-defined the state (possibly updating plan as soon as it receives it back from PS. the planner about degraded capabilities) and starts executing A smooth execution of the periodic planning generation of a new plan with other activities available system capabilities to PS via MM. cycle requires EXEC to coordinate and to communicate information the about 4.1.1. Planning to plan In the spacecraft domain, planning to complete preconditions itself has informational input), state preconditions experts, which often need relies on input planning they have suitable are changing quickly or unpredictably), Therefore, propulsion or attitude control. Future planning Domain constraints enforced all be achieved before planning considered a form of meta-planning (since planning some activity before things resources. like in plans on a timeline. in the plan ensure that their resources and preconditions will to plan [60] can be to commanding activities appear is invoked. This aspect of planning (it is hard to plan when too many scarce computational other subsystems in RA invoking and consumes is analogous the planner [7]. RA’s approach to planning to plan is illustrated that the next round of planning fragment has a constraint Navigation expert has performed a new orbit calculation. This calculation of several pictures, so PS inserts turns required will initiate to point the camera at the corresponding the next round of planning when it executes into the plan the supporting the plan should occur only after the relies on analysis imaging activities and the targets. During execution, EXEC the Planning token installed in Fig. 7. In this example, Goal Cruise_to_Target(t) Imaging 1 Idle Attitude Point(a) Turn(a,b) 1 Imaging 1 A contained-by Point(b) Idle I Turn(b,a) Fig. 7. Sample plan fragment in the plan. Because of the constraints activities required for planning have been successfully explicit completed. in the plan, this will happen only after the 4.1.2. Concurrent planning and execution it is reasonable Even at pre-scheduled times, the limited computational to take a long time to complete. Throughout resources available for planning, combined with the difficulty of planning with severe resource limitations, cause each round of planning this process, the spacecraft will still need to operate with full capabilities. For example, with the current on-board processor to expect PS to take up to 8 hours to generate a plan for one capabilities, week of operation. This adds up to about six percent of the total mission time spent in targets IPS propulsion may need to generating plans. However, time. Since other activities operate with high duty cycles in excess of 92% of the available and observations), already require the IPS engine omitting total thrust accumulation to reach the target. Hence, EXEC continues plan execution while PS is planning necessitates currently executing plan for prediction about activities the next period is underway. IPS thrusting during planning would leave insufficient [60]. This and using the for to be off (such as scientific experiments that will happen while planning assumptions while planning, to reach the designated tracking changes to the planning 4.1.3. Replanning with degraded cupabilities through a combination of monitoring and diagnosis When operating over extended periods of time, a spacecraft will face problems arising the capabilities of its hardware and control system may diminish over time. (see from aging: Once these failures are recognized future planning Section 5) EXEC will keep track of such degradation when commanding to be stuck shut. is for one of the thrusters cycles. For example, one fault mode in DSl The attitude control software has redundant control modes to enable it to maintain control following take longer to complete. When EXEC is notified of this permanent change by MIR, it passes health information back to PS. thruster, but an effect of this is that turns the loss of any single 4.2. Robust plan execution We have seen that in nominal operations EXEC invokes the planning machinery as a for planning and is well-defined. However, if execution that resources are available by-product of plan execution, which ensures that the projected state used as a basis for planning fails before the planning activity is properly prepared and executed, the agent still needs a way to generate a plan and continue making progress on mission goals. RA addresses this to execute or repair the current plan, it aborts the problem as follows: plan, cleans up all executing activities, and puts the controlled system into a standby mode. This serves (by design) as a well-defined invocation point for planning. if EXEC is unable Entering a standby mode following plan failure is costly with respect to mission goals, it interrupts the ongoing planned activities and important mission opportunities because may be lost. For example, a plan failure causing EXEC to enter a standby mode during a comet flyby would cause loss of all the encounter science, as there would be no time to re-plan before the comet passed out of sight. Such concerns motivate a strong desire for 2x N. Muscettola et al. /Artificial Intelligence 103 (1998) 5-47 plan robustness, uncertainty and failures. so that plan execution can continue RA achieves robust plan execution by: successfully even in the presence of flexible plans by running multiple parallel threads and using fast constraint Executing propagation algorithms Choosing a high level of abstraction detailed activity decisions as possible Handling execution repair planning. in EXEC to exploit plan flexibility. for planned activities so as to delegate as many to the procedural executive. failures using a combination of robust procedures and deductive 4.2. I. Executingjexible plans in Section 3.3, plans are constraint networks As discussed desirable behaviors determines at run time the actual behavior of the system. This process involves propagating execution envelopes of interprets plans and in doing so through the plan’s constraint networks. for the system. EXEC incrementally time information representing The process of interpreting a plan is carried out by EXEC’s plan runner. Here is a brief sketch of how the plan runner works. The plan runner treats each state variable as a separate that runs on thread of execution. Each token on the state variable corresponds that thread. The transition between one token and the following one on the state variable is represented by a time point, i.e., a time variable Starting and terminating which must be done for each time point in the plan. The plan runner has to wait until a i.e., all time points that must precede it have been executed, and the time point is enabled, current time is within its time bound. When a time point can be executed, the plan runner executes the following cycle: (1) Set the execution (2) Set all parameters of the tokens started by the time point to one of the acceptable in the underlying plan constraint network. the execution of tokens involves a certain amount of processing, time of the time point to be the current to aprogram time. values. (3) Propagate plan. the consequences of the previous value assignments to the rest of the (4) Terminate execution of all tokens ending with the time point. (5) Start execution of all tokens starting with the time point. After the execution of the previous cycle the plan runner waits until the current enters the time bound of some other enabled of possible values for both the start/end time bounds and the parameters of still unexecuted tokens. time time point. Note, that step 4.2.1 adjusts the set research: the plan runner work in a real-world application in AI execution Making overlooked its operation. 4 A real-time guarantee can be seen as a way to quantify of an agent. The way the problem arises in the plan runner the execution cycle takes time, the execution be unable than the latency. raised an issue that is often the need for EXEC to give real-time guarantees about the “reactivity” is the following. Processing latency h. One can show that EXEC will finer is asked to execute an event precisely at time of a time point with a precision In other words, when EXEC the exact execution to guarantee 4 An alternative approach to real-time execution guarantees is addressed in the CIRCA architecture [55]. N. Muscettola et al. /Art@icial Intelligence 103 (1998) 547 29 that the actual event execution time t, it can only guarantee t + 1/(2h)] interval [t - 1/(2L), temporally precise agent (e.g., one that can guarantee a few milliseconds minimum. of a given time) it is necessary [53]. Therefore, time will be somewhere in the in order to produce a highly reactive and taking a picture of a target within to a the execution to reduce latency for propagation One important way to reduce k is to speed up the execution-time constraint propagation. in the time constraint network. to transform a simple temporal constraint network time assignment time adjacent time points in In RA we address this speed-up problem One can show that it is always possible into an equivalent one (i.e., one that represents to time points) propagation need only propagate execution the temporal constraint network. Minimal means that the network contains number of edges among all dispatchable temporal constraint networks the fastest possible. the minimum that the flexible that PS gives to EXEC are those for which execution can be that is minimal dispatchable. Dispatchable means networks 154,661. This means the same set of consistent time to the immediately that EXEC’s 4.2.2. Delegating activity details to execution flexibility Generation representation least-commitment of plans with temporal planner. A complementary source of plan for each domain. The approach follows from the PS being a constraint- robustness relies is to choose an for activities planned by PS so as to leave as many details in the level of abstraction to be resolved by EXEC during execution. A PS token based, on careful knowledge appropriate as possible sense that it provides an envelope of resources (e.g., execution allocated power consumption). more detailed activities to be executable within the resource envelopes. that in the absence of exogenous is abstracted time allowances, maximum into failures are guaranteed by design For each token type EXEC has a task decomposition An example from DSl the achievement illustrates of a certain change this approach requires Velocity changes are achieved by thrusting (see Fig. 8). A Delta-V goal token in the velocity of the spacecraft. for some amount of time while (delta) the engine Thrust Goals I Delta_V(direction=b, magnitude=200) Attitude ACS mode ------.k /I?=--- Point(b) tokens ‘\- RCS mode Tvc mode Fig. 8. Plan fragment for achieving a change in spacecraft velocity. the spacecraft in a certain direction. A total velocity change is achieved via a pointing thrust is the engine series of shorter thrust (time) segments, where between each segment required by the next segment. stopped while the spacecraft must be turned to the direction that ACS be in Thrust Vector Control (TVC) mode shortly after IPS There is a constraint has started thrusting and it must be in Reaction Control System (RCS) control mode upon termination of a thrusting activity. ’ into uncertainty about how long this initiation involves performing uncertainty a number of complex operations on the Initiating a thrust activity takes before engine and there is considerable about when to switch attitude thrust starts accumulating. This translates in a given segment, and control modes, how much thrust will be actually accumulated to achieve the total desired thrust. RA takes the how many thrust segments are necessary following approach to this problem. PS inserts thrust tokens into the plan which may not need to be executed. EXEC tracks how much thrust has been achieved, and only executes turns) for so long as thrust is actually necessary. Similarly, PS thrust tokens (and associated that are below the delegates to EXEC the coordination of activity details across subsystems level of visibility of PS. In this example, we represent the thrust activity and the control mode of the ACS. The result constraint between is that plan execution in engine setup time and in thrust achievement. We note that this delegation of labor from PS to EXEC relies on many of the capabilities of a sophisticated procedural execution system [3.5,36,58]. in EXEC’s domain knowledge is robust to variations the engine 4.2.3. HyhridproceduruUdeductive executive The preceding discussion has described ways to achieve robust execution primarily in the presence of uncertainty in timing or task progress. Another major cause of execution failure in the spacecraft domain is activity failure, often due to problems with the hardware. Several properties of the spacecraft domain drove us to design an executive that combines language with local recovery planning. These challenging a rich procedural properties irreversible actions, and complex include internal structure. execution tight coupling between subsystems, consider As an example of tight coupling between subsystems, (GDE) board. If either system experiences a communications two spacecraft subsys- tems in DS 1 (see Fig. 9): the engine gimbal and the solar panel gimbal. A gimbal enables the engine nozzle to be rotated to point in various directions without changing the space- rotated to track the sun. In DS 1, craft orientation. The solar panels can be independently both sets of gimbals communicate with the main computer via a common gimbal drive failure, one way electronics to reset the system the GDE to fix one system also resets the communication to the other system. In particular, loss of control resetting of the solar panels. Thus, fixing one problem can cause new problems. To avoid this, the recovery system needs to take into account global constraints schedule execution, fashion, and the recovery itself may be a sophisticated plan involving operations on many subsystems. (turn on and off) the GDE. However, resetting to fix an engine problem, causes temporary local fixes in an incremental rather than just making the engine gimbal, from the nominal is to power-cycle 5 In TVC mode, the spacecraft is turned by steering the main engine gimbal, whereas in AC.‘? mode the spacecraft is turned using small attitude thrusters. N. Muscettol~~ et al. /Artijicial Intelligmce 103 (1998) 547 31 p55Eq+g Fig. 9. Interacting gimbal subsystems in DS I. Fuel Oxidizer X Valve 33 Pyro Valve Solid black indicates closed valve Fig. 10. Simplified schematic of Casini spacecraft propulsion system. Another problem stems from the need to repair systems with complex internal structure and irreversible actions. For example, has a complex set of valves (see Fig. 10) including explosivepyro valves, which can change states only once, and ordinary valves with varying amounts of wear and tear. It is difficult costs and risks in to express the right valve choices to redirect fluid flow while minimizing the wide variety of situations system on the Cassini spacecraft that might be encountered the propulsion in flight. [ 101 Examples like these drove the design of R4’s hybrid execution [59], which executive based on generic procedures, with MIR, a system integrates EXEC, deductive model-based state inference and optimal failure recovery planning. the procedural executive (see Section 5) that provides algorithms for sophisticated RA’s integrated executive enables designers to encode knowledge via a combination of procedures and declarative models, yielding a rich modeling capability to the challenges of real spacecraft control. The interface between the two executives ensures both that recovery sequences are consistent with high-level schedule execution and that a high to effectively handle additional degree of reactivity failures during recovery. is retained suitable The need to integrate EXEC with the local-recovery significant approach languages. RAPS [33]. RAPS supports robust execution each procedure. ability of MIR had a impact on the design of EXEC. that our integration in most execution synchronization required In the NewMAAP RA prototype, EXEC was based on the language provided by through the definition of multiple methods for If one method fails, the RAP interpreter selects among alternate methods In particular, we found that were not present constructs planning 32 N. Muscenola et al. /Arti$cial Intelligence 103 (1998) 517 interacting the health of functioning it has run out of options, in which case the entire procedure basis. The NewMAAP followed a similar approach and EXEC invoked MIR to plan a recovery for the or variable bindings until fails. Effectively, RAPS handles failures on an activity-by-activity RA prototype each activity separately. However, the design of real flight software for DS 1 introduced problems of tightly subsystems described above. This caused us to re-design the interface so that EXEC would suspend failed activities and provide global constraints (to preserve to repair failures. subsystems) to do in RAPS, for three reasons. First, RAPS This turned out to be extremely difficult has no constructs for successful execution. Second, RAPS does not support nested contexts that tasks can respond recoveries. Third, RAPS does not support suspending while a global recovery execution of concurrent activity and interrupts, hierarchical [35,36]. required properties so in a specific way but ultimately draw on more generic interrupts the new language, ESL, with facilities for easy language extension, a more flexible notion recovery procedures, and declarations of is in progress. 6 These difficulties motivated for tasks to describe properties threads based on external for recovery procedures, they need maintained as part of a request the design to failures 4.3. Summary EXEC is a robust event-driven and goal-oriented multi-threaded the activity of the other flight software modules, both internal and external execution system that to coordinates the Remote Agent. This section has discussed the following major points: l Coherent autonomous operation across a long-term mission can be achieved through l Executing periodic planning guided by a mission profile. flexible constraint-based results in robust plan execution with guaranteed plans with bounded execution-time propagation real-time behavior. . Procedural and deductive capabilities can be integrated within the reactive execution loop. . Enhanced synchronization primitives to track state requirements are necessary for concurrent execution systems. . A robust multi-threaded executive provides the core capabilities to support an architecture for autonomous operations over extended missions. 5. Model-based mode identification and reconfiguration The mode identification and reconfiguration that sits at the nexus between ture is provided by the Livingstone controller planning and scheduling systems, and the low-level tive methods (see Fig. 11). It is a discrete controller to put the spacecraft hardware and software system the high-level [71]. Livingstone feed-forward component of the Remote Agent architec- is a discrete model-based reasoning of classical feedback control of continuous adap- in the sense that it constantly attempts that achieves a set point, into a configuration 6 Similar concerns apply to other procedural execution systems, like PRS [37], RPL [46], Interrap [50] and Golog 1431. N. Muscettola et al. /Art$cial Intelligence 103 (1998) 547 33 Planner Executive values Spacecraft .a Commands Fig. I 1. Livingstone architecture diagram. Fig. 12. Different configurations that achieve thrust. The circled valve has failed. called a conjiguration goal, using a sensing component, commanding component, it uses a single declarative, compositional called mode reconfiguration. called mode identification, and a in the sense that It is model-based spacecraft model for both MI and MR. A configuration goal is a specification of a set of hardware and software configurations (or modes). More than one configuration line and functional the goal of providing fails. Other configurations, used to handle other valve failures. redundancy. For example, Fig. 12 shows two configurations can satisfy a configuration goal, corresponding to that satisfy thrust, with the one on the right being used when the circled valve of open valves, are to different combinations corresponding Livingstone’s sensing component, mode identification (MI), provides the capability to It then compares track changes in the spacecraft’s configurations due to executive commands and component to predict the next nominal failures. MI uses the spacecraft model and executive commands configuration. against between predicted the actual values being monitored on the spacecraft. Discrepancies and monitored values signal a failure. MI isolates its cause, thus identifying diagnosis the actual spacecraft configuration, using algorithms adapted from model-based the sensor values predicted by this configuration the fault and diagnoses [23,24]. N. Muscrttola et 01. /Artijicial lrztelligerm 103 (1998) 547 MI provides a variety of functions within the RA architecture, l Mode confirmation: confirmation to EXEC provides including: that a particular spacecraft command has completed successfully. l Anomaly detection: identifies observed spacecraft behavior that is inconsistent with its expected behavior. l Fault isolation and diagnosis: anomalies. failure modes of components In cases where models of component identifies components whose failures explain detected the particular failure exist, identifies that explain anomalies. l Token tracking: monitors the state of properties of interest to the executive, allowing it to monitor plan execution. When the current configuration Livingstone’s mode reconfiguration procedures the goals. MR can be used to support a variety of functions, goals, (MR) capability can identify a least cost set of control that satisfies into a new configuration including: the active configuration that, when invoked, take the spacecraft to satisfy ceases l Mode configuration: desired behavior. place the spacecraft in a least cost configuration that exhibits a l Recovery: move the spacecraft function, either by repairing the goals. from a failure state to one that restores a desired failed components or finding alternate ways of achieving l Standby and safing: in the absence of full recovery, place the spacecraft in a safe state from the high-level planner or ground operations while awaiting additional guidance team. Within the RA architecture, MR is used primarily recovery identified by MI. (Section 4.2.3 has a more detailed to assist EXEC in generating procedures, discussion.) in response to failures to use a single central model are particularly worth highlighting. Three technical features of Livingstone reasoning has been tasks. As noted above, Livingstone the model-based vision. Second, Livingstone’s long held vision of model-based support a diversity of engineering of tasks using a single model and a single core algorithm, towards achieving achieves broad coverage of hybrid discrete/continuous, coupling [44] with the qualitative Third, the approach unifies [ 1,9], by using a conflict-directed reasoning. We now discuss these latter two points in more detail. transition system models underlying concurrent developed First, the to automates a variety thus making significant progress formalism systems by reactive languages [25,68]. reasoning and reactivity coupled with fast propositional the dichotomy within AI between deduction software/hardware search algorithm in model-based representations the concurrent representation 5. I. Representation formalism Implemented model-based constraint-based modeling, models are built compositionally of the connections modes, corresponding of constraints characterize diagnosis for example, systems traditionally see [ 17,23,39,65]. through system component models and a specification specify behavior In this formalism, from individual between components. Each component model consists of a set of to the different nominal and failure modes of the component. A set in each of its modes. The the behavior of the component N. Muscettola et al. /Artijicial Intellipm~e 103 (1998) 547 35 component-based nature of the modeling supports the development of complex formalism enables plug-and-play increases large-scale models, compositional, model development, maintainability, While compositional, and enables model reuse. constraint-based modeling limitation. is well suited for many model-based Its widespread use is restricted by the it has a significant diagnosis applications fact that it typically has no model of dynamics, is essential between modes. Modeling dynamics and determine changes in spacecraft configurations in other words, no model of transitions for Livingstone reconfiguration since it needs to track sequences. in first-order of model-based diagnosis, on the other hand, have assumed that logic is its logic [21,62]. The enticement of first-order semantics. However, first order logic is not an accurate reflection formalism as a representation and is wholly inappropriate systems. On the one hand, its expressiveness leads to its use intractability system. On the other hand, first-order (first-order satisfiability is semi-decidable), precluding logic does not offer a particularly to modeling most hardware and software systems. Finally, for writing language the dynamics of state change. Modeling dynamics is logic, by large scale models, with its flat structure of first-order Most formalizations implementations, models are specified clear, well understood of existing for building practical diagnosis computational in a real-time natural essential itself, is an impractical constants, for describing language functions, and relations. Our challenge with Livingstone that is effective for compositional modeling, can represent software naturally, has a clean underlying in real-time. then was to develop a practical modeling language the dynamics of hardware and semantics, and can be computed with efficiently 5. I. 1. Concurrent We overcame transition systems transition the concurrent the above limitation by coupling compositional systems used constraint-based modeling [44]. In this with of a set of formalism, transitions between modes. For example, Fig. 13 shows the modes modes with explicit and transitions of a valve and a valve driver. Each transition transition, modeling an executive command, or a failure transition. As before, each mode is associated to model is modeled as a transition reactive software system consisting is either a nominal each component Open cmd = open 2 Closed vcmd jn = vcmc&,, 4 cmd = reset 1 on , cmd =on 1 Off Resettable failure I Permanent failure Stuck open Stuck closed Valve Val:e Driver systems for a valve and a valve driver. Shaded modes are failure modes. Fractional numbers Fig. 13. Transition represent transition probabilities and whole numbers represent transition costs. 36 N. Muscettola et al. /Artijicial Intelligence 10.3 (1998) 547 that describe the component’s behavior with a set of constraints the inflow = outflow = 0 constraint of the Closed mode of a valve. To ensure representation is computable finite domains, and compile in that mode, for example, that the to and has a well defined semantics, we restrict constraints them down into propositional logic. transition transitions have preconditions In terms of dynamics, nominal that model the conditions in the absence of failure, a valve from Open to Closed when it receives a Close command. At any given time, transitions may be is enabled, but zero or more failure to the Stuck open or Stuck transitions have associated probabilities, which are used to model failure transitions can be used to model failure transitions the different costs of command the least cost way of repairing a valve driver exhibiting Resettable under which that transition may be taken. For example, transitions exactly one nominal possible, for example, a Closed valve may fail by transitioning closed modes. Hence, the likelihood of a failure occurring. Probabilistic intermittence, e.g., an On valve driver may fail by transitioning mode, but may transition back to On without any explicit command. Nominal also have associated costs, providing sequences. For example, failure is to Reset it, rather than turning it off and then on. a way to model to the Resettable component by connecting transition to concurrent Components within a larger system can be viewed as acting concurrently, communi- system models are built cating over “wires”. Hence, as with constraint-based modeling, system models. The resulting model compositionally system model in the sense that a single transition of the system is a cancurrent systems. Natu- transitions by each of the component corresponds transitions are consistent with the component connections. For example, rally, component the Open/Close command but rather is an output from the valve driver. Hence, a valve transition can be commanded only if the valve driver is On. input to the valve is not directly controllable, transition transition that supports the specification of these concurrent is compiled down into a restricted propositional To support large scale modeling, we have built a compositional, model-based program- ming language system mod- els. This specification logic for- mula with a well-defined is used directly by Livingstone’s MI formalism has enabled us to nat- and MR components. We have found that this modeling urally model (a) discrete, digital systems, e.g., the valve driver; (b) analog systems using qualitative modeling [25,68], e.g., the valve; and (c) real-time software, e.g., the spacecraft attitude controller. Hence, the primary semantics. This formula lesson of our experience transition temporal is: concurrent Probabilistic, building model-bused autonomow and is tractable. transition systems provide an appropriate for that is expressive, has a clean semantics, formalism systems 5.1.2. Qualitative modeling As noted above, we use simple, qualitative Sacks and Doyle [63] have strongly criticized arguing that they are too ambiguous, systems. They conclude far too general for practical use” [63]. Indeed much of the work on qualitative and model-based diagnosis has focused on a variety of methods computation of ambiguous values, by applying more and more quantitative representations the value of such qualitative their critique with the comment that “[Qualitative] and can be used to analyze only a handful of simple equations are for modeling analog systems. that try to eliminate representations, information. reasoning the N. Muscettdu et al. /Artificial Intelligence 103 (I 998) 547 31 is no indicator of whether or not a representation it simply must be the case that enough values have sufficient precision Our experience has been quite to the contrary. First, the fact that a model may lead to In the ambiguous values to case of diagnosis to rule rule out incorrect diagnoses. Second, the detail of modeling out incorrect diagnoses can be very little. For example, researchers at Xerox PARC tried to listed within a human develop a simple set of copier models sufficient to cover all diagnoses generated diagnostic used in these models were far simpler Sacks and Doyle asserted were so impoverished. [4]. What they found is that the representations than the representations information necessary repair procedure is sufficient. Based on this lesson, we adopted a modeling formalism for Livingstone that models based on qualitative deviations and reconfiguration tasks. Furthermore, tuning numerical parameters. This enabled us to rapidly prototype analog behaviors using an extremely simple representation from nominal behavior. We found that such representations were more than adequate for the very all of Livingstone’s mode identification simpiicity of the models had important benefits. First, in contrast models, process. We did not have to tease out the exact form of quantitative about carefully protection a measure of robustness hardware designers choose to substitute a different the qualitative model does not change: while the underlying meaning of nominal changes, Third, qualitative models allow us to use propositional This was essential shortly.) The essential to detailed quantitative they are easy to acquire, and can be acquired during early stages of the design equations, or worry the fault system concurrently with hardware design. Second, qualitative models provide inaccuracy. For example, if the thruster valve to produce more thrust, thrust the same. that enable fast inference. (We discuss this point in detail is the following: rapid and timely response. lesson we draw from our experience to design changes and modeling in terms of deviations the qualitative model from nominal to providing encodings remains Extremely simple, qualitative models are appropriate for many practical and signijcant tasks. 5.2. Reactivity and deduction A key contribution is the fact that it unifies the dichotomy within Al of Livingstone [ 1,9], have argued that sym- between deduction and reactivity. Several authors, principally to bridge bolic reasoning methods, such as planning, deduction, the gap between perception and action in a timely fashion. For example, the construction of reactive systems that rapidly handle the complexity, uncertainty, and imme- theorems is out of the ques- diacy of real situations, Agre and Chapman claim that “proving tion” [I]. Rather, the argument goes, the right way to construct is to com- reactive systems circuits, possibly augmented with pile out all the inference architecture timers and state elements, [9]. But is to the subsumption this solution adequate for all types of reactive systems, particularly remote agents? Equally is it even correct that deduction and search can play no role in reactive systems? important, into a network of combinational and search, are unable leading, for example, in discussing 5.2.1. Fast deduction and search Consider, systems, such as deep space probes, Antarctic and Martian habitats, power and computer networks, first, the question of the adequacy of the above thesis. Autonomous 38 N. Muscettola et ul. /Artificiul Intelligencr IO.{ (1998) S-47 is essential interruption lines, need to operate without In such systems, rapid correct for carrying out the mission. Responding for long periods, chemical plants, and assembly response to anomalous often in harsh environments. situations to any single anomalous situation using a hardwired network is plausible. However, as the length of time for which that autonomous operations is desired increases, may arise grows exponentially. Constructing to this cascade of failures is a truly daunting embodied responses directly solution. task. The compositional, model-based paradigm in Livingstone, with its ability to identify multiple failures and synthesize correct from a compact declarative model, provides a much more practical the combinations a reactive network that responds correctly of anomalous situations But what of the concern that search and deduction are sufficiently at reactive responses with a combination as combinatorial transitions commands time-consuming that are not possible? Livingstone this concern (see [71] for details), We formulate both MI and MR the most likely as the least cost addresses optimization as finding that are consistent with the observations; MR is formulated that restore the current configuration goals. problems: MI is formuiated time-scales of techniques Livingstone does follow the spirit, proposed by Brooks, of compiling the system into a constraint Livingstone the models network. This into a propositional instead of a functional network tasks to a highly tuned search algorithm on propositional that is evaluated, Livingstone simple network. However, compiles is a very simple deductive search problem that we highly tune for performance. Our motive for reducing all constraints parallels model-based the intuitions behind reduced instruction solves these combinatorial search, coupled with fast propositional focuses set computers optimization problems using a conjlict-direcred 7 inference using unit propagation. Empir- rapid diagnosis and the search, enabling it suffices for our loops, so best-@ ically, response. While unit propagation applications. The reason is that we use causal models, with few (if any) feedback that unit propagation chosen prime implicates is complete or can be made complete with a small number of carefully the use of conflicts dramatically inference procedure, is an incomplete (RISC). [ 191. 5.2.2. Truth maintenance The above techniques for response allow Livingstone to identify modes and reconfigure hardware while evaluating only an extremely small set of candidate solutions. Hence the potentially search appears not to be a major part of the problem. Nevertheless, with exponential on a slow requirements is processor, unit propagation becomes a significant problem. Livingstone’s the enhanced by another order of magnitude using a truth maintenunce Incremental Truth Maintenance System ITMS [.56], that computes unit propagations over is a variant of the more traditional Logic-based TMS (LTMS) [28,45] time. The ITMS that optimizes context switching. The ITMS, truth over a trajectory of states in an “event driven manner”. That is, the ITMS assignments times on the order of hundreds of milliseconds like the traditional LTMS, computes performance system, called ‘A conflict is a partial assignment such that any assignment containing the conflict is guaranteed to be infeasible. N. Muscettolu et al. /Artificial Intelligence 103 (19981 S-47 39 propagates chunges a full unit propagation in truth assignments in every state. from one state to another, rather than performing that TMS (ATMS) inadequate to introduce Livingstone’s [20,23,24,30] the efficiency [22]. Concerns use of an ITMS different about is in sharp contrast . they are inefficient to other model-based type of TMS, called the ATMS and write that use a fundamentally to be woefully [ 181. The advantage of the ATMS the linear thus avoiding diagnosis systems the Assumption-based of the LTMS in the 80’s lead de Kleer traditional TMSs “. . have proven time and in both space” to switch contexts without any label propagation, this comes at the cost of an exponential process. These costs can be particularly problematic for embedded, real-time systems. More recently, various ATMS focusing algorithms have been developed cost of labeling by to alleviate the exponential to just the current context [24.29,34]. Precise empirical restricting ATMS label propagation comparisons between model-based diagnosis systems based on focused ATM& and those are unavailable. However, we did perform limited experiments on based on LTMSs/lTMSs run a version of Livingstone that contained no TMS. Even without a TMS, Livingstone’s such as time on a standard diagnostic Sherlock [24], that contain an ATMS. is its ability time cost of unit propagation. However, time and space pre-labeling test suite was comparable to diagnostic algorithms, that change between This result led us to revisit the LTMS technology, which had received little attention over the last decade. We found that the addition of a traditional LTMS significantly improved Livingstone’s performance. On the other hand. we also found that the LTMS performance ideal. In the best case an LTMS update would be linear was in some cases far from in the number of labels applying Livingstone that the LTMS spent a significant percentage of its time on labels that remain constant; more specifically, 37% on average, and 670% in the worst case. This worst case can be deadly for real systems with hard time to label update that is merely requirements. The ITMS offers a more aggressive approach 5% off ideal, with a worst case overhead of only 100%. The use of this TMS resulted in an in Livingstone’s performance, over the version with no order of magnitude TMS, and allowed Livingstone to the DSl spacecraft models, we found timing requirements of DS 1. states. Unfortunately, to meet the stringent improvement successive The primary lessons of the above discussion are the following: Seurch and deduction are often essential and deduction can be carried out at reactive maintenance in reactive systems. Furthermore, time scales. Fir&y, LTMS-style search truth systems can provide an essential tool,for speeding up deductive search. 5.3. Summay Livingstone is a discrete model-based controller that provides the mode identification and reconfiguration Livingstone has provided the following technical lessons: capability within the Remote Agent architecture. Our experience with l Many reactive system tasks can be carried out using a single model. l Concurrent systems provide an appropriate formalism transition for building model- based autonomous systems. l Strikingly simple qualitative models are effective for many real-world tasks. 40 N. Muscettola et al. /Artijicial Intelligence 103 (1998) 547 b . l Search and deduction are often necessary Search and deduction can be carried out reactively. Truth maintenance systems are powerful in a reactive system. tools for speeding up search. 6. Lessons from technology insertion Most of the discussion in this paper has focused on technical to raising technical the RA. In addition while developing a real mission and with a real mission schedule provided valuable this kind of technology Three key technology l Human-centered into operational missions insertion lessons are the following: [2]. * issues we encountered issues, the process of working on lessons about inserting operations. While new classes of missions may require systems that such systems also support with highly autonomous operational modes in which humans exercise tight control over the system. it is important capabilities, l Validation and testing. A major barrier to increasingly systems is concern that they will actually perform as desired. about how to test them and validate Architectural design choices that let spacecraft engineers focus on the domain model, rather than on the problem-solving methods, can significantly help address this barrier. system on-board a spacecraft potentially impacts. Putting an autonomous l Schedule autonomous has a major impact on the traditional require knowledge normally codified during operations encoded in the system early on. Developing flight software development schedule, as it can (after the system is built) to be first things first can alleviate this problem. of mental models across a large to This has motivated in a unified techniques and us coherence time-consuming. in which all software will be programmed team can be skunkworks. Ensuring inordinately l Model-based software develop a research paradigm modeling collaborative modeling environments. language by a small team supported by automated synthesis We believe that these lessons generalize to other situations these lessons in which complex au- sub- in the following tonomous sections. systems are deployed. We briefly discuss 6.1. Human-centered operations involving operations to support scenarios into actual flight code development The NewMAAP RA prototype was designed extremely autonomous in which human communication was impossible. As we moved from prototyping and teamed with ground operators, in which we had to extend the RA architecture the RA would be used. The key insight we gained was that, while extreme autonomy is necessary interaction [8,61]. Such an approach offers two key benefits. First, when such interaction can simplify the ability the chance of mission success. Second, designers the design of the system and increase to address the broader operational context for certain mission phases, also essential to draw on human expertise, especially is support for human in anomalous is possible conditions, 8 Montemerlo [49] provides a set of lessons summarizing earlier experience with technology insertion at NASA. N. Muscetiola et al. /Arti$cial Intelligence 103 (1998) 5-47 41 and operators can automate autonomous acceptance. than relying on a fully system at launch time. This can help increase confidence and improve operator incrementally, capabilities rather As a result of extensions we made to the RA for these purposes, features: RA shares the long-range mission profile with ground operators following enable asynchronous spacecraft at multiple additional knowledge information, without inconsistent state. Additional a major area of ongoing research [8,6 11. the RA now has the to the ground updates; ground operators can monitor and command levels of detail simultaneously; and ground operators can provide to the RA, such as parameter updates, model updates, and diagnostic interfering with the activities of the RA or leaving the system in an forms of support for human interaction with remote agents is 6.2. Validation and testing system it is validation of the problem-solving role. In our interaction with spacecraft engineers lesson research has so far concentrated The strict separation between modeling and problem solving heuristics within PS (see from the DSl experience. While AI learned Section 3) also addresses another in mission- performance, on problem-solving planning that takes a much critical applications that is more prominent asked is “how can we be sure that your software will work most often and insistently as advertised and avoid unintended to the development of all aspects of mission-critical embedded software systems, AI based or not. However, systems like the RA promise complete autonomy over a much wider variety than was previously possible. On the face of it, this makes validation of complex situations the declarative nature of Al of these systems harder than traditional technology of the behavior of the system which approaches. the inspection of the models and facilitates a deep understanding software development systems. Fortunately, behavior ?” Indeed, this is a question is unprecedented in traditional the question that applies allows Our use of a declarative approach dictates a clean separation between models and that that system and mission engineers can focus on guaranteeing the are met, and not on the details of how the reasoning engines manipulate in order to produce solutions efficiently. A strict separation between models and the knowledge in AI problem solving methods. analyze research areas that will heuristics. This ensures requirements models heuristics allows non-AI embedded We believe that inspectable models and synthesize problem solving heuristics are important widen the applicability of AI techniques in the system without having representational techniques and tools to automatically the model and understand to real-world applications. to be experts to inspect specialists 6.3. Schedule impacts In the traditional approach to spacecraft development, software only those capabilities necessary goes wrong on the spacecraft, ground operators. This approach remain uncodified, available only in the heads of the designers. enables much knowledge it puts itself into the flight designers build to ensure safety of the system. When anything into a safe state and waits for help from to of system interactions It also enables additional 42 N. Muscettola et al. /Artificial lntelligencr I0.i (1998) 547 automation flight software development. to be put into the ground system, typically on a schedule much later than the at a much earlier stage, so that it can be included In the RA approach to building an autonomous must codify the knowledge board models used by the RA. This need for earlier modeling major impact on the traditional a technical concern, such schedule insertion, especially ering. in the new era of faster development flight software development system on-board a spacecraft, designers in the on- have a this is not schedule. While can potentially issues play a major role in the success of technology engine- cycles and concurrent Fortunately, we have found that our model-based programming approach has advantages which compensate hardware design, details, as compared plicit. for the schedule the models are easier impacts. Since to maintain the declarative models mirror the in the face of changing hardware im- to traditional software which keeps hardware design assumptions With this said, there still remains considerable flexibility about the order in which to things perform model development. The key lesson we learned in this respect is workjrst jirst: focus first on the critical models at the level necessary refine the models Then progressively This approach the tendency major spacecraft capabilities to fit into the risk management to meet launch requirements. and capabilities. to have detailed models of some components while approach approach of the overall flight software project. increased performance are still unmanaged, the model-based and enables to provide reduces 6.4. Model-bused skunkworks the DSl it is difficult into teams responsible [40] and Mars Pathfinder broken specifications, Often the creativity and speed of a design time decreases exponentially with the size [14] are two excellent examples together that were inexpensive, were assembled this pace to sustain a virtual that come closer to emulating team was comprised of more than 40 systems attitude control codes, discrete device drivers, integration. test scripts and systems of the team. Lunar Prospector of missions developed by small teams, in a short time span, and operated flawlessly. However, as we move towards far more capable missions presence. For example, flight software individuals, engineering EXEC procedures, MIR models and PS models, A significant meeting presentations and validation. What made this so challenging own mental model of how the spacecraft behaved. The purpose of these time-consuming meetings was to bring these many perspectives fact that many of these models were both implicit and changing made miscommunication inevitable, making and scoping, model definition is that each of the seven teams had their fraction of rhe development directed into alignment. The large team size and the for writing hardware specifications, towards knowledge acquisition, to preparing documents the task inordinately time was devoted time-consuming. simulators, The research challenge is then to provide a development that allow a small team, perhaps a dozen, should allow models at all levels to be explicit, single coherent model, and should be able to easily track a dynamically changing hardware design. The paradigm we are developing we call model-based skunkworks. In this paradigm to develop an equivalent should facilitate paradigm and a set of tools system. These tools of a the development programming from classical programming all aspects of the flight software will be programmed through models. Automated synthesis techniques will use models to generate simulators, discrete Ilight codes, continuous attitude control codes, and test scripts. To facilitate model synergy, models will be developed the best ideas of language using a unified model-based languages. Model building by a disparate encapsulation Finally, team will be facilitated by distributed, and project human assessment of the flight software’s capability by systems engineers from through analysis management will be facilitated models. Finally, an extensive, reusable model library will ultimately allow future spacecraft to be plugged tools that generate review documents together from past knowledge. collaborative modeling that incorporates environments. 7. Conclusions and future work a virtual presence for AI. The characteristics The challenge of building a remote agent to assist in establishing that require highly reliable autonomous in space has proved to be an exciting and unique opportunity of the domain time with tight deadlines, resource constraints, coupled subsystems, has led to the development on the principles of model-based programming, directed, closed loop commanding. The resulting architecture temporal planning mode identification of different areas of AI, including planning and scheduling, plan execution, qualitative reasoning, and model-based diagnosis. integrates constraint-based and scheduling, and model-based and reconfiguration. These components draw upon research in a variety reasoning, truth maintenance, operations over long periods of and concurrent tightly activity among of a Remote Agent architecture based on-board deduction and search, and goal- reactive languages, deduction, constraint propagation, robust multi-threaded execution, temporal search, Jumping headlong first with the NewMAAP demonstra- to meet fast-paced challenges, to reassess some tion and then with DS 1, has provided us with an invaluable opportunity to this conven- of Al’s conventional wisdom. Our experience has been in sharp contrast tional wisdom, with the main lessons being that generative planning can scale up to solve practical problems, and that search and deduction can be carried out within the reactive real-world problem not only control the rel- provides a veritable evance of the research. lesson of our experi- ence! in an important research problems, but also ensures our embedding fountain of interesting In some sense, this is the most important loop. Furthermore, While the Remote Agent is a significant step toward reaching the goal of providing to be done. Future remote agents injbrmution for NASA’s explorers, much still remains full autonomy will need to be much more adaptive They will need to anticipate imminent to be active seekers, state. As fleets of explorers descend upon distant planets, with each other to achieve mission goals. We expect future NASA missions, the ones highlighted in the Introduction, building more and more capable remote agents. This exciting the following vision for autonomy: in how they react with an uncertain failures. and plan for contingencies. They will need and their own their environment they will need to colluborute such as that require future is aptly captured by the concrete challenges to better understand environment. to provide 44 N. Muscettola et al. /Art$cial Intelligence 103 (1998) 547 “With autonomy we declare that no sphere is off limits. We will send our spacecraft search beyond on them to tell the tale.” that we cannot directly control to them, and relying the horizon, accepting - Bob Rasmussen, Cassini AACS Cognizant Engineer and New Millennium Autonomy Team. Acknowledgment We would the contributions like to acknowledge of the members of the NewMAAP and DSl Remote Agent teams, without whose tireless efforts this work would not have been possible: Douglas Bernard, Steve Chien, Scott Davies, Greg Dorais, Julia Dunphy, Dan Dvorak, Chuck Fry, Ed Gamble, Erann Gat, Othar Hansson, Jordan Hayes, Bob Kanefsky, Ron Keesing, Sandy Krasner, James Kurien, Jim Larson, Ina Lungu, Bill Millar, Sunil Mohan, Paul Morris, Illah Nourbakhsh, Chris Plaunt, Gregg Rabideau, Kanna Rajan, Nicolas Rouquette, Scott Sawyer, Rob Sherwood, Reid Simmons, Ben Smith, Will Taylor, and David Hans Thomas, Yu-wen Tung, Todd Turco, Michael Wagner, Greg Whelan, Yan. We would also like to acknowledge of Abdullah Aljabri, Richard Doyle, Guy Man, Bob Rasmussen, and Gregg Swietek for their tireless promotion of spacecraft autonomy. John Bresina, Dan Clancy, Greg Dorais, Ari Jonsson, Jim Kurien, Paul Morris, Kanna Rajan, David Smith, and Rich Washington provided comments on earlier drafts of this paper. the invaluable contributions References [I] P.E. Agre, D. Chapman, Pengi: an implementation of a theory of activity, in: Proc. AAAI-87, Seattle, WA, 1987, pp. 268-272. [2] AS. Aljabri, D.E. Bernard, D.L. Dvorak, G.K. Man, B. Pell, T.W. Starbird, Infusion of autonomy technology into space missions-DS 1 lessons learned, in: Proc. IEEE Aerospace Conference, Snowmass, CO, 1998. [3] J.F. Allen, Maintaining knowledge about temporal intervals, Communications of the ACM 26 (11) (1983) 832-843. [4] D. Bell, D. Bobrow, B. Falkenhainer, M. Fromherz, V. Saraswat, M. Shirley, Rapper: in: Working Papers of the 8th International Workshop on Qualitative Reasoning the copier modeling about Physical project, Systems, 1994. [S] D.E. Bernard, G.A. Dorais, C. Fry, E.B. Gamble Jr, B. Kanefsky, J. Kurien, W. Millar, N. Muscettola, P.P. Nayak, B. Pell, K. Rajan, N. Rouquette, B. Smith, B.C. Williams, Design of the remote agent experiment for spacecraft autonomy, in: Proc. IEEE Aerospace Conference, Snowmass, CO, 1998. [6] A.L. Blum, M.L. Furst, Fast planning through planning graph analysis, Artificial Intelligence 90 (1997) 28 l-300. [7] M. Boddy, T.L. Dean, Deliberation scheduling for problem solving in time-constrained environments, Artificial Intelligence 67 (1994) 245-285. [S] R.P. Bonasso, D. Kortenkamp, T. Whitney, Using a robot control architecture to automate space shuttle operations, in: Proc. AAAI-97, Providence, RI, AAAI Press, Cambridge, MA, 1997, pp. 949-956. [9] R.A. Brooks, Intelligence without representation, Artificial Intelligence 47 (1991) 139-l 59. IlO] G.M. Brown, D.E. Bernard, R.D. Rasmussen, Attitude and articulation control for the Cassini spacecraft: in: 14th AIAAnEEE Digital Avionics Systems Conference, Cambridge, MA, a fault tolerance overview, November 1995. [l I] D. Chapman, Planning for conjunctive goals, Artificial Intelligence 32 (3) (1987) 333-377. N. Muscettola et al. /Artijicial Intelligence 103 (1998) 547 45 1121 P. Cheeseman, B. Kanefsky, W. Taylor, Where the really hard problems are, in: Proc. IJCAI-91, Sydney, Australia, 1991, pp. 163-169. 1131 S.A. Chien, H.B. Mortensen, Automating image processing for scientific data analysis of a large image database, IEEE Transactions on Pattern Analysis and Machine Intelligence 18 (8) (1996) 854-859. [ 141 R. Cook, Mars Pathfinder mission operations: faster. better. cheaper on Mars, in: Proc. IEEE Aerospace Conference, Snowmass, CO, 1998. 1151 K. Currie, A. Tate, O-plan: [ 161 S.S. Dallas, Space interferometry mission, [17] R. Davis, Diagnostic [IS] J. de Kleer, Choices without backtracking, 1191 J. de Kleer, Exploiting 1201 J. de Kleer, Focusing on probable diagnoses, locality the open planning architecture, Artificial Intelligence 52 (I) (1991) 49-86. in: Proc. IEEE Aerospace Conference, Snowmass, CO, 1998. reasoning based on structure and behavior, Artificial Intelligence 24 (1984) 347410. in: Proc. AAAI-84, Austin, TX, 1984, pp. 79-8.5. in a TMS, in: Proc. AAAI-90, Boston, MA, 1990, pp. 264-271. in: Proc. AAAI-91, Anaheim, CA, 1991, pp. 842-848. in Model-Based Diagnosis, Morgan Reprinted Kaufmann, San Mateo, CA, 1992. in: W. Hamscher, L. Console, J. de Kleer (Eds.), Readings [21] J. de Kleer, A. Mackworth, R. Reiter, Characterizing in: W. Hamscher, L. Console, J. de Kleer (Eds.), Readings diagnoses and systems, Artificial Intelligence 56 ( 1992) in Model-Based Diagnosis, 197-222. Reprinted Morgan Kaufmann, San Mateo, CA, 1992. [22] J. de Kleer, B.C. Williams, Reasoning about multiple faults, in: Proc. AAAI-86. Philadelphia, PA, 1986, pp. 132-139. [23] J. de Kleer, B.C. Williams, Diagnosing multiple faults, Artificial in: W. Hamscher, L. Console, J. de Kleer (Eds.), Readings Reprinted Kaufmann, San Mateo, CA, 1992. 32 (1) (1987) 97-130. Intelligence in Model-Based Diagnosis, Morgan [24] J. de Kleer, B.C. Williams, Diagnosis with behavioral modes, in: Proc. IJCAI-89, Detroit, MI, 1989, pp. 1324-1330. Reprinted Morgan Kaufmann, San Mateo, CA, 1992. in: W. Hamscher, L. Console, J. de Kleer (Eds.), Readings in Model-Based Diagnosis, 1251 J. de Kleer, B.C. Williams (Eds.), Qualitative Reasoning about Physical Systems II (Special Issue), Artificial Intelligence 51 (1991). [26] T.L. Dean, D.V. McDermott, Temporal data base management, Artificial Intelligence 32 (1987) [27] R. Dechter, I. Meiri, J. Pearl, Temporal constraint networks, Artificial Intelligence 49 (1991) 61-95. 1281 J. Doyle, A truth maintenance [29] 0. Dressler, A. Farquhar, Putting system, Artificial the problem ATMS, in: Lecture Notes in Artificial Intelligence, Vol. 515, Springer, Berlin, 1990. Intelligence 12 (1979) 23 l-272. solver back l-55. in the driver’s seat: contextual control of the [30] 0. Dressier, P. Struss, Model-based diagnosis with the default-based diagnosis engine: effective control strategies that work in practice, in: Proc. ECAI-94, 1994. 13 11 T.A. Estlin, S.A. Chien, Xuemei Wang, An argument for a hybrid HTN/operator-based approach to planning, in: Proc. 4th European Conference on Planning, 1997. [32] R. Fikes, N. Nilsson, STRIPS: a new approach to the application of theorem proving to problem solving. Artificial Intelligence 2 (3/4) (I 97 I) 189-208. [33] R.J. Firby, Adaptive execution [34] K.D. Forbus, J. de Kleer, Focusing [35] E. Gat, ESL: a language in complex dynamic worlds, Ph.D. Thesis, Yale University, 1978. the ATMS, in: Proc. AAAI-88, St. Paul, MN, 1988, pp. 193-198. for supporting robust plan execution in embedded autonomous agents, in: L. Pryor (Ed.), Proc. AAAI Fall Symposium on Plan Execution, AAAI Press, 1996. 1361 E. Gat, B. Pell, Abstract resource management Aerospace Conference, Snowmass, CO, 1998. in an unconstrained plan execution system, in: Proc. IEEE 1371 M.P. Georgeff, A.L. Lansky, Procedural knowledge, Technical Report 41 I, Artificial Intelligence Center, SRI International. January 1987. 1381 W. Hamscher, L. Console, J. de Kleer (Eds.), Readings Mateo, CA, 1992. in Model-Based Diagnosis, Morgan Kaufmann, San 1391 W.C. Hamscher, Modeling digital circuits for troubleshooting, Artificial Intelligence 5 1 (199 1) 223-27 1, in: Proc. IEEE Aerospace 1401 G.S. Hubbard, Lunar prospector: developing a very low cost planetary mission, Conference, Snowmass, CO, 1998. 1411 IEEE, Proc. IEEE Aerospace Conference, Snowmass, CO, 1998. 142) H. Kautz, B. Selman, Pushing the envelope: planning, propositional AAAI-96, Portland, OR, 1996, pp. 1194-1201. logic, and stochastic search, in: Proc. 46 N. Musctmdu et al. /Artijiciul htelligence 103 (1998) 547 [431 H.J. Levesque, R. Reiter, Y. Lesperance, F. Lin, R. Scherl, Golog: a logic programming language for dynamic domains, Journal of Logic Programming 3 1 (1997) 59-84. (441 Z. Manna, A. Pnueli, The Temporal Logic of Reactive and Concurrent Systems: Specitication, Springer, Berlin, 1992. [4S] D. McAllester, An outlook on truth maintenance, Memo 55 I, MIT Artificial Intelligence Laboratory, August 1980. 1461 D. McDermott, A reactive plan language, Technical report, Computer Science Department, Yale University, 1993. [47] D.S. McKay, E.K. Gibson Jr, K.L. Thomas-Keprta, H. Vali, C.S. Romanek. S.J. Clemett, X.D.F. Chillier, CR. Maechling, R.N. Zare, Search for past life on Mars: possible relic biogenic activity in Martian meteorite ALHX4001, Science 273 (1996) 924930. [4X] A.H. Mishkin, operations Snowmass, CO, 1998. and autonomy J.C. Morrison, T.T. Nguyen, H.W. Stone, B.K. Cooper. B.H. Wilcox, Experiences with of the Mars Pathfinder microrover, in: Proc. IEEE Aerospace Conference. 1491 M. Montemerlo, The AI program at NASA: lessons learned [SO] J. Muller, M. Pischel, An architecture for dynamically Cooperative Information Systems 3 (1) (1994) 2545. in the first seven years, AI Magazine 13 ( 1992). Int. Journal of Intelligent and agents, interacting [iii] N. Muscettola. HSTS: integrating planning and scheduling, in: M. Fox, M. Zweben (Eds.), Intelligent Scheduling, Morgan Kaufmann, San Mateo, CA, 1994. 1521 N. Muscettola, B. Smith, C. Chien, C. Fry, G. Rabideau, K. Rajan, D. Yan, On-board for Intelligence, Robotics. and planning autonomous Automation spacecraft. Symposium in: Proc. 4th International for Space (i-SAIRAS), Tokyo, Japan, August 1997. on Artificial 153J N. Muscettola, P. Morris, B. Pell, B. Smith, Issues in temporal reasoning in: (Ed.). Proc. 2nd International Conference on Autonomous Agents, ACM Press. New York, for autonomous control systems, M. Wooldridge 1998. 1541 N. Muscettola, P. Morris. 1. Tsamardinos, Reformulating temporal plans for efficient execution, in: Proc. 6th Internat. Conf. on Principles of Knowledge Representation and Reasoning (KR-98), 199X. [55] D. Musliner, E. Durfee, Kang Shin, Circa: a cooperative, intelligent, real-time control architecture, IEEE Transactions on Systems, Man, and Cybernetics 23 (6) (1993). [S6] P.I? Nayak. B.C. Williams, Fast context switching in real-time propositional reasoning, in: Proc. AAAI-97, Providence, RI, 1997. [57] B. Pell, D.E. Bernard, S.A. Chien, E. Gat, N. Muscettola, P.P. Nayak, M.D. Wagner, B.C. Williams, An autonomous spacecraft agent prototype, Autonomous Robots 5 (I) C 1998). [SS] B. Pell, G.A. Dorais, C. Plaunt, R. Washington, The remote agent executive: capabilities to support integrated (Eds.), Proc. AAAl Spring Symp. on Integrated Robotic robotic agents, Architectures. AAAI Press, Palo Alto, CA, 1998. in: A. Schultz. D. Kortenkamp [S91 B. Pell, E. Gamble, E. Gat. R. Keesing, J. Kurien, B. Millar, P.P. Nayak. C. Plaunt, B. Williams, A hybrid (Ed.), Proc. 2nd International in: M. Wooldridge spacecraft, procedural/deductive executive for autonomous Conference on Autonomous Agents, ACM Press. New York, 1998. [60] B. Pell, E. Gat, R. Keesing, N. Muscettola, B. Smith, Robust periodic planning andexecution in: Proc. IJCAI-97, Nagoya, Japan, Morgan Kaufmann, Los Altos, CA, 1997. spacecraft. for autonomous 1611 B. Pell, S. Sawyer, N. Muscettola, B. Smith, D.E. Bernard, Mission operations with an autonomous agent, in: Proc. IEEE Aerospace Conference. Snowmass, CO, 199X. 1621 R. Reiter, A theory of diagnosis from first principles. Artificial Intelligence 32 (1) (1987) 57-96. Reprinted in Model-Based Diagnosis, Morgan Kaufmann, in: W. Hamscher, L. Console. J. de Kleer (Eds.), Readings San Mateo, CA, 1992. [63] E.P. Sacks, J. Doyle, Prolegomena to any future qualitative physics, Computational Intelligence 8 (2) ( 1992) 1 X7-209. [64] B. Selman, D. Mitchell, H. Levesque. Generating hard satisfiability problems, Artificial Intelligence X1 (1996) 17-29. 1651 P. Struss, 0. Dressier. Physical negation: fault models Proc. IJCAI-X9, San Mateo, CA, 1989, pp. 13 18-l 323. Reprinted (Eds.), Readings integrating in Model-Based Diagnosis, Morgan Kaufman% San Mateo, CA, 1992. into the General Diagnostic Engine, in: in: W. Hamscher, L. Console, J. de Kleer N. Muscettola et al. /Art$cial Intelligence 103 (1998) 547 41 [66] I. Tsamardinos, N. Muscettola, P. Morris, Fast transformation Proc. AAAI-98, AAAI Press. Cambridge, MA, 1998. of temporal plans for efficient execution, in: [67] D.S. Weld, An introduction [6X] D.S. Weld, J. de Kleer to least commitment planning, Al Magazine (Eds.). Readings in Qualitative Reasoning I5 (1994). about Physical Systems, Morgan Kaufmann, San Mateo, CA, 1990. [691 D.E. Wilkins, Practical Planning, Morgan Kaufmann. San Mateo, CA, 1988. [70] B.C. Williams, P.P. Nayak, Immobile robots: AI in the new millennium, AI Magazine 17 (3) (1996) 1635. [7 I1 B.C. Williams, P.P. Nayak, A model-based approach in: Proc. AAAI-96. to reactive self-configuring systems, Portland, OR, AAAI Press, Cambridge, MA, 1996, pp. 97 1-978. 1721 M. Wooldridge (Ed.), Proc. 2nd International Conference on Autonomous Agents, ACM Press, New York. 1998. 