Artificial Intelligence 109 (1999) 1–31Modal logics, description logics andarithmetic reasoning IHans Jürgen Ohlbach a;(cid:3), Jana Koehler b;1a Department of Computer Science, King’s College London, Strand, London WC2R 2LS, UKb Institut für Informatik, Albert-Ludwigs-Universität, Am Flughafen 17, 79110 Freiburg, Germany,Received 8 October 1996; received in revised form 18 January 1999AbstractWe introduce mathematical programming and atomic decomposition as the basic modal (T-Box)inference techniques for a large class of modal and description logics. The class of description logicssuitable for the proposed methods is strong on the arithmetical side. In particular there may becomplex arithmetical conditions on sets of accessible worlds (role fillers).The atomic decomposition technique can deal with set constructors for modal parameters (roleterms) and parameter (role) hierarchies specified in full propositional logic. Besides the standardmodal operators, a number of other constructors can be added in a relatively straightforward way.Examples are graded modalities (qualified number restrictions) and also generalized quantifiers like“most”, “n%”, “more” and “many”. (cid:211) 1999 Elsevier Science B.V. All rights reserved.Keywords: Modal logic; Description logic; Combination of inference systems; Mathematical programming1. Introduction and overviewClassical propositional logic cannot only be used for reasoning about truth values.It can also be used as a set description language. Predicate symbols are mapped tosets and the Boolean connectives ^ (conjunction) _ (disjunction), : (negation), )(implication) are mapped to the set functions intersection, union, complement and thesubset relationship.Both modal logics and description logics take this set theoretic interpretation further byintroducing new operators on the syntactic side and new structures on the semantic side.I This work was supported by the EPSRC Research Grant GR/L91818 “data driven logic algorithms”.(cid:3)Corresponding author. Email: ohlbach@dcs.kcl.ac.uk.1 Email: koehler@informatik.uni-freiburg.de.0004-3702/99/$ – see front matter (cid:211)PII: S 0 0 0 4 - 3 7 0 2 ( 9 9 ) 0 0 0 1 1 - 91999 Elsevier Science B.V. All rights reserved.2H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–31The extra features on the semantic side are binary relations, called accessibility relationsfor modal logics, and roles for description logics. The extra features on the syntactic sideare quantifiers (modal operators) which quantify over accessible worlds (role fillers).Although many modal logics and description logics are syntactic variants of eachother—the description logic ALC, for example, corresponds exactly to the multi-modallogic Km [23]—their origin is completely different. Modal logics were introduced todistinguish between formulae which are true just by chance, and formulae which arenecessarily true. Therefore the modal 2-operator was called the necessitation operator [12,13].Description logics, on the other hand, are late descendants of Minski’s frames [19]and Brachman’s KL-ONE [7]. They come in a variety of different versions, e.g.,ALC [25], CLASSIC [6], KRIS [2], LOOM [18] and even in class-based object orientedformalisms [11]. Common to most of them is the separation of a description logic databaseinto a so-called T -Box (terminological box) and a so-called A-Box (assertional box). TheT-Box contains specifications of concepts and roles. For example, a T-Box formulaparent defD person ^ jhas-childj > 1(1)specifies the concept parent as the set of all persons who have at least one child. The(multi)-modal logic notation for this formula would beparent , .person ^ hhas-childi>/:(> stands for “truth”. hhas-childi is the parameterized diamond operator.) The parameterhas-child for the modal operator denotes the accessibility relation (“role” in the descriptionlogic jargon).The A-Box in a description logic database, on the other hand, contains information aboutinstances of the T-Box concepts. For example, from the A-Box entries Henry V person, andHenry V has-child Mary, one can conclude that Henry is an instance of the concept parent.From a modal logic point of view, A-Box instances are names for worlds. An A-Boxconsistent with a T-Box describes a partial model for the formulae in the T-Box.On the T-Box level there are two major reasoning problems. First of all, one wantsto know whether a newly introduced concept definition is consistent with the previouslyintroduced ones. For example, if the T-Box contains the two definitionsmaledefD person ^ jhas-y-chromosomej > 1femaledefD person ^ jhas-y-chromosomej D 0(2)(3)(males are persons with at least one y-chromosome, and females are persons with noy-chromosome) and we add the new definitionhermaphroditedefD male ^ femalethere is no nonempty extension of hermaphrodite, which usually indicates errors ormisconceptions in the axiomatization of a given domain.H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–313The second inference problem is subsumption (implication 2 ). If we have (1) in ourdatabase and we addgrandparent defD person ^ atleast 1 has-child:parent(4)(grandparents are persons who have at least one child who is a parent) then we can, ofcourse, conclude that all grandparents are parents as well, i.e., grandparent ) parent.Subsumption relations are very useful for structuring a knowledge base. Finding out allsubsumption relations between all concepts is called classification, and this is the basicoperation of all T-Boxes. If the description logic language has the full classical negation(not all of them have it) then the subsumption problem ’1 ) ’2 can be reduced to theconsistency problem for ’1 ^ :’2.In this paper we investigate problems which have been discussed more in the descriptionlogic context than in the modal logic context. Therefore we prefer using the descriptionlogic notions. Table 1 compares the different notions used by the modal logic communitywith the corresponding notions used by the description logic community.The standard semantics of modal and description logics allows one to translate all T-Boxand A-Box information into first-order predicate logic (FOL). Therefore description logics,as well as most modal logic, are essentially fragments of FOL. Since most of them aredecidable, they represent proper fragments of FOL, but they are usually more expressivethan propositional logic. Much effort has been invested in recent years to explore theborderline between propositional logic and FOL by investigating various versions ofdescription logics, see [15] for a good summary of recent results.Most methods for checking consistency of concept formulae and subsumption betweenconcept formulae are tableau algorithms. Starting with a tableau entry a V ’ (the objectwith name a is an element of the set described by ’), tableau rules are applied to make theinformation explicit which is implicitly contained in the input formulae. Conjunctive rulesjust extend the list of derived information, whereas disjunctive rules start a case analysisby splitting the tableau into different branches.If the consistency problem for the logic is decidable and the tableau algorithm is welldesigned then the application of the tableau rules eventually terminates with obviouscontradictions or with open branches representing a model for the initial formula ’.The method is well suited for languages containing mainly logical operators. As soon asarithmetics comes into play, tableau approaches become very difficult to use. For example,in a concept definitionparents-of-many-boys D parent ^ jhas-sonj > 2jhas-daughterj(parents-of-many-boys are parents having more than twice as many sons than daughters)the consistency problem amounts to checking whether x > 2y has a nonnegative integer-valued solution. This is a trivial check for integer programming algorithms, but almostimpossible for a tableau method. Therefore the arithmetic part of most modal anddescription logics is very weak. They usually only allow for number restrictions of the2 In the Description Logic literature one usually finds subsumption to be defined as the converse of implication.This contradicts the common understanding of “subsumes” and the definition in classical logic. Therefore weprefer the “right” meaning: subsumption = implication.4H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–31Table 1Corresponding notions for description logics and modal logicsDescription logicALCConcept formulaConcept definitionConcept nameConceptRole nameRoleRole termRole fillersT-BoxA-Box entryA-BoxDomainObjectModal logicMulti-modal logic KmModal formulaModal formula of the kind concept-name , formulaPredicate symbolExtension of a predicate symbolParameter of a parameterized modal operatorAccessibility relationComplex parameter of a modal operatorSet of accessible worldsSet of concept definitionsName of a worldDescription of a partial Kripke structureSet of worldsWorldConsistency of a concept formulaSatisfiability of a modal formulaSubsumption between concept formulaEntailment between modal formulaeExistential quantifier 9 r:’Universal quantifier 8 r:’Number restriction jrj > nDiamond operator hri’Box operator TrU’Simple graded modal operator hrin> restrictionon the number of accessible worldsQualified number restriction atmost r n:’Graded modal operator hrin’Arithmetic constraint for the role fillers(Not well investigated)kind jrj > n or jrj 6 n, where n is a number. Qualified number restrictions atmost n r:’(set of objects with at most n r-role fillers in ’) and atleast n r:’ (set of objects with at atleast n r-role fillers in ’) are also being used.In this paper we propose using arithmetic equation solving instead of tableau systemsas the basic inference algorithm. It is, however, not the purpose of this paper to investigatearithmetic equation solving itself; we assume suitable algorithms are available (they canactually be downloaded from the internet). Therefore we do not specify a particulararithmetic language. The language depends on the available arithmetic equation solver.Most of them can solve systems of linear equations and in-equations. In this caseonly addition, subtraction and multiplication with numbers is allowed. More advancedsystems also allow for certain nonlinear terms. The general nonlinear Diophantine equationproblem, however, is undecidable (Hilbert’s 10th problem [14]). Therefore the arithmeticlanguage should not be too expressive.H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–315There are only a few requirements about the arithmetic system, which are important forthe purposes of this paper.(cid:15) In the basic mode the arithmetic system must accept conjunctions of equations andin-equations and check whether there is a solution or not. The solutions themselvesare not needed.(cid:15) For the subsumption test the arithmetic system must check whether all solutions of agiven (in)equation system E1 are also solutions of another system E2. If the arithmeticsystem can deal with dis-equations then this problem can be reduced to a consistencyproblem for E1 ^ :E2.(cid:15) If the description logic allows for disjunctions in the concept definitions then thearithmetic system also should be able to deal with disjunctions of equations and in-equations.1.1. Atomic decompositionIn the main part of the paper we show how the consistency and the subsumptionproblem of concept formulae can be mapped to equation solving problems. The atomicdecomposition technique [22] plays a key role in this process. Since the technique is notwidely known, we give a brief overview.Atomic decomposition exploits the possibility to decompose finite sets of sets intomutually disjoint atomic components. These are the atoms of the Boolean algebraconsisting of the closure of the sets under union, intersection and complement. To illustratethis idea, suppose the two roles has-son and has-daughter are specified as sub-roles ofhas-child. Fromjhas-sonj > 2 ^ jhas-daughterj > 3(5)one can deduce jhas-childj > 5. For each object in the domain the role fillers of has-son,has-daughter and has-child form three sets, which can overlap in the most general way asdepicted in Fig. 1. There are seven different areas (together with the complement of thehatched areas there are in fact 23 D 8 different areas) named c, s, d, cs, cd, sd, and csd.The informal meaning isc D children, not sons, not daughters.s D sons, not children, not daughters.d D daughters, not children, not sons.cs D children, which are sons, not daughters.cd D children, which are daughters, not sons.sd D sons, which are daughters, not children.csd D children, which are both sons and daughters.The original sets can now be obtained from their “atomic” components:has-child D c [ cs [ cd [ csdhas-son D s [ cs [ sd [ csdhas-daughter D d [ cd [ sd [ csd:6H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–31Fig. 1. A general set structure.Moreover, since this decomposition is mutually disjoint and exhaustive, the cardinalitiesof the sets just add up:jhas-childj D jcj C jcsj C jcdj C jcsdjjhas-sonj D jsj C jcsj C jsdj C jcsdjjhas-daughterj D jdj C jcdj C jsdj C jcsdj:The relationships between has-child, has-son and has-daughter can actually be specifiedin propositional logic:has-son ) has-childhas-daughter ) has-childhas-son ^ has-daughter ) ?has-child ) has-son _ has-daughtersons are childrendaughters are childrenthere are no hermaphrodites(6)children consist onlyof sons and daughters.These formulae have three propositional models:has-child; has-son; :has-daughterhas-child; has-daughter; :has-son:has-child; :has-son; :has-daughter:They correspond to the two nonempty sets cs and cd in Fig. 2 together with the surroundingarea.The fact that these are the only models means jcj D 0, jsj D 0, jdj D 0, jsdj D 0, jcdj D 0and jcsdj D 0. The problem of determining whether there are at least 5 children can nowbe reformulatedjcsj > 2 ^ jcdj > 3 ) jcsj C jcdj > 5:(7)H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–317Fig. 2.Since the sets are mutually disjoint, the internal structure of “cardinality terms” like jcsj isno longer relevant, and jcsj can be replaced with a nonnegative integer-valued variable xcs.We obtainxcs > 2 ^ xcd > 3 ) xcs C xcd > 5which is trivial to check.(8)In [22] this idea was developed into a general methodology for augmenting formalsystems with a Boolean algebra component. The general methodology works for formalsystems whose language has a notion of (existentially quantified) variables. A typicalexample is a mathematical programming system for solving equations and in-equations.On the syntactic side, this formal system can be extended with set terms embedded inbridging functions at variable positions. The bridging functions map objects of one logicto objects of another logic. For example, if the basic system allows for equations like2 (cid:1) x C 3 (cid:1) y D 5then the extended system would allow for equations like2 (cid:1) jsons [ friendsj C 3 (cid:1) max-age.friends n sons/ D 5:sons [ friends and friends n sons are Boolean set terms. The cardinality function j : : : jand the max-age function are bridging functions. Both map sets to numbers such thatmultiplication with 2 and 3 is defined. In the general setting, bridging functions map thesets to objects in the basic system which make sense there.The relationships between the sets can be axiomatized in propositional logic. Relation-ships (6) is an example for such a propositional axiomatization. It exploits the fact that theelements and connectives of Boolean algebras can always be interpreted as sets and thecorresponding set operations (Stone’s representation theorem [26]). With some elementaryBoolean algebra theory one can show that the models of the propositional axiomatizationcorrespond to the atoms of the Boolean algebra generated by the closure of the sets underunion, intersection and complement. 33 A Boolean algebra is a nonempty set equipped with the functions u (meet), t (join) and(inverse), a smallestelement ? and a largest element >. A 6-relation is definable as: x 6 y iff x u y D x. Set algebras where u isis complement and 6 is the subset relation, is one particular kind of Boolean algebra.intersection, t is union andEvery Boolean algebra, however, is equivalent to a set algebra. A Boolean algebra is complete iff all (finite andinfinite) joins belong to it. It is atomic iff every element can be obtained as the join of a set of smallest elementsabove ?, the atoms. The atoms in set algebras are the singleton sets. Finite Boolean algebras are always completeand atomic (cf. any textbook on Boolean algebras).008H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–31This correspondence can be turned into an algorithm for eliminating the Boolean termsand the bridging functions. In the first step we compute a syntactic representation ofthe models of the propositional axiomatization AR. The Boolean terms t can now bedecomposed into the atomic components fm1; : : : ; mng defD fm j m is a model for AR andm satisfies tg. This way all Boolean terms t embedded in a bridging function f .t/ can berewritten into f .fm1; : : : ; mng/. 4In the next step of the decomposition method we must use an extra assumption aboutbridging functions. They must be additive. This means, if two sets x and y are disjointthen it must be possible to compute f .x [ y/ by first computing f .x/ and f .y/ and thenjoining the results with some combination function. Examples where this is fulfilled are:x \ y D ; ) jx [ yj D jxj C jyjx \ y D ; ) max-age.x [ y/ D maxx \ y D ; ) average-age.x [ y/ D(cid:1)(cid:0)max-age.x/; max-age.y/jxjaverage-age.x/ C jyjaverage-age.y/jxj C jyj:The additivity of the bridging functions and the fact that the atoms mi all denote disjointsets, allows us to rewrite terms f .fm1; : : : ; mng/ into g.f .m1/; : : : ; f .mn//, where g isthe composition function.In the last step we replace terms f .mi / with new variables xf .mi / of the basic system.(7) ! (8) is such a replacement.The transformations are sound and complete. This means that the original problem inthe mixed language has a solution if and only if the transformed problem has a solution inthe basic system.1.2. Atomic decomposition and role termsThe atomic decomposition method can be applied to the role part of description logics.On the semantic level the sets which get decomposed are the sets of role fillers of a givenobject. On the syntactic side we start by using combinations of arithmetic formulae and setterms to specify constraints on role fillers. Examples are:young-familydefD average-age.has-child/ 6 10:.has-child is a role, average-age is a bridging function.)poor-familydefD max-income.member/ 6 100:(member is a role, max-income is a bridging function.)dog-loversdefD jhas-dogj > 2 (cid:1) jhas-childj:(Dog lovers have more than twice as many dogs than children.)Relationships between different role terms can be expressed as propositional axioms.With the atomic decomposition technique we can then reduce the consistency andsubsumption problems to arithmetic equation solving problems.4 The mi are conjunctions (meets) of positive or negative Boolean variables. But for most purposes it issufficient to take the mi as names for the models.H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–3191.3. Predicate symbolsThe language of constraints on role fillers is, in general, not expressive enough.Therefore we investigate how various other logical constructs fit into this framework, andwhat extra mechanisms are needed to obtain a sound and complete decision procedure forthe consistency and subsumption problem.In the description logic context predicate symbols (also called concept names) are namesfor sets of objects. In the definitionparent defD person ^ jhas-childj > 1for example, the predicate symbol person may be an undefined symbol. In this case noparticular assumptions about the set of persons are made. If it is defined elsewhere then theterm person has to be replaced by its definition before any consistency and subsumptiontest is tried.Predicate symbols do not interact with the arithmetic expressions. Therefore, thearithmetic algorithms and the algorithms for the predicate symbols (usually some kindof propositional reasoning) are independent of each other.1.4. Universal quantificationIn the description logic context, quantification means quantification over role fillers. Forexample:wooden-toy defD toy ^ 8 has-part:woodendefines a wooden toy as a toy whose parts (role fillers for the has-part relation) are allwooden. 8 has-part:wooden denotes the set of objects, whose parts are all in the set ofwooden objects. The modal logic version of this definition would bewooden-toy ,(cid:0)(cid:1)toy ^ Thas-partUwooden:The universal quantifiers over role terms with set constructors, or role names, whichare related to other role names via some propositional axioms, must be decomposedinto their atomic components. For example, if has-child is decomposed into has-sonand has-daughter then 8 has-child:’ is decomposed into 8 has-son:’ ^ 8 has-daughter:’.Decomposed quantifications over the same roles can be comprised into one singlequantification .8 r:’ ^ 8 r: / , 8 r:.’ ^ /. This way, all interactions between differentuniversal quantifications are eliminated.Universal quantification over role fillers interact in a relatively simple way with thearithmetic expressions over role terms. If ’ is inconsistent then 8 r:’ can only represent anonempty set if there are no r-role fillers at all. Thus, 8 r:? , jrj D 0. The consistencycheck therefore, first checks the arguments of universal quantifiers, and adds jrj D 0, ifnecessary.As another example, consider8 has-child:teacher ^ 8 has-daughter::teacher:10H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–31The decomposition yields8 has-son:teacher ^ 8 has-daughter:teacher ^ 8 has-daughter::teacherwhich is comprised to8 has-son:.teacher ^ :teacher/ ^ 8 has-daughter::teacherand then simplified tojhas-sonj D 0 ^ 8 has-daughter::teacher:1.5. Existential quantificationIt turns out that the existential quantifier over role fillers becomes definable in thelanguage providing role hierarchies, restrictions on the number of role fillers and theuniversal quantifier:9 r: D 9r 0(cid:0)r 0 ) r(cid:1)^ jr 0j > 1 ^ 8 r 0: :That means for each occurrence 9 r: of an existential quantifier, one can introduce a new(Skolemized) role name r 0 (which relates a subset of those r role fillers lying in ) andadd the axiom r 0 ) r to the role hierarchy. The actual occurrence of 9 r: is replaced withjr 0j > 1 ^ 8 r 0: .1.6. Disjunction and negationThe algorithms presented below are organized in such a way that disjunctions can betreated by putting the concept formulae into disjunctive normal form and treating eachdisjunct separately.In the presence of conjunction and disjunction together with both quantifiers, negationcan be moved down to the propositional level (negation normal form). Therefore no specialtreatment is necessary for general negation of concept formulae.1.7. Defined operatorsThe arithmetic language together with role hierarchies and the standard connectives andquantifiers are expressive enough to define other useful operators.1.7.1. Qualified number restrictionsatleast n r:’ (the set of objects with at least n role fillers in ’) and atmost n r:’ (the setof all objects with at most n role fillers in ’) are the qualified number restrictions. In oursystem they can be treated as defined operators:atleast n r:’ , 9r 0atmost n r:’ , 9r 0(cid:0)r 0 ) r(cid:0)r 0 ) r(cid:1)(cid:1)^^(cid:12)(cid:12)r 0(cid:12)(cid:12)r 0(cid:12)(cid:12) > n ^ 8 r 0:’(cid:12)(cid:12) 6 n ^ 8 r 0:’ ^ 8(cid:0)r n r 0(cid:1)::’:Again, the new (Skolemized) role names r 0 together with the sub-role definition r 0 ) rare added to the role hierarchy. The occurrences of the atleast and atmost formulae arereplaced with the numeric constraints and the universal quantifications only.H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–31111.7.2. Percentage operatorsOperators like > n% r’ (set of objects with more than n% of the r role fillers in ’)become also definable:0> n% r’ , 9r(cid:0)0 ) rr(cid:1)(cid:12)(cid:12)r0(cid:12)(cid:12) > njrj ^ 8 r0:’:^ 100In the same way one can define a “6 n%” operator or an “n%” operator or a “most r ’”operator (more than 50%).1.7.3. The “more” operatormore r’ s denotes the set of objects with more r role fillers in ’ than s role fillers in . For example, more has-daughter blonde has-son brown denotes the set of objects withmore blonde daughters than brown sons. A definition for this operator is:(cid:1)(cid:0)(cid:0)r 0 ) r8 r 0:’ ^ 8 s0: ^ 8more r’ s , 9r 0; s0s0 ) s(cid:0)s n s0In the above example, r 0 would be the blonde daughters and s0 would be the brown sons.jr 0j > jrj requires that there are more of the blonde daughters than brown sons.(cid:12)(cid:12)r 0^(cid:1):: :(cid:12)(cid:12) >(cid:12)(cid:12) ^(cid:12)(cid:12)s0^(cid:1)1.7.4. The “many” operatorThe meaning of the operator many in, for example, many has-child:teacher (set ofobjects with many children which are teacher) is not clear. If there is just one child, thenmany certainly should be 100%. If there are some hundred children, then many might onlymean a small fraction. Our language is expressive enough that we need not assume a fixedmeaning of many, but can leave it to the user to define her version of many. A possibledefinition might bemany r:’ , 9r 0(cid:1)(cid:0)r 0 ) r^ 8 r 0:’ ^(cid:12)(cid:12)(cid:12) D jrj(cid:12)r 0)^(cid:12)(cid:12)(cid:12) > 0:9jrj ^(cid:12)r 0(cid:12)(cid:12)(cid:12) > 0:5jrj ^(cid:12)r 0(cid:12)(cid:12)(cid:12) > 90:(cid:12)r 0jrj 6 23 6 jrj 6 10 )11 6 jrj 6 100 ))101 6 jrj1.8. Other operatorsThere are quite a number of other operators discussed in the description logic literature.We have not yet investigated in detail how these fit into our framework. For example,the role composition operator extends the Boolean language of role terms to the languageor relation algebras. Since the whole approach relies on the decomposition method, andthis relies on Stone’s representation theorem for Boolean algebras, an extension of thedecomposition method to relation algebras is by no means straightforward and yet has tobe done.In the following sections we work out the technical details of the method and we provesoundness and completeness of the algorithms.12H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–312. Atomic decompositionWe list the basic definitions and results. The details can be found in [22]. Thepresentation of the method is independent of any particular application in descriptionlogics.2.1. Syntax of the languages involvedWe need three components in the syntax. The first component of our syntax is thelanguage LE of some basic system E which we want to augment with a Booleancomponent. In our case E are systems of arithmetical equations and in-equations, but Emay be any other suitable formal system.The second component is the Boolean algebra component. Boolean terms LB .R/ areset terms over a set R of Boolean variables, constructed with the usual set connectives [(union), \ (intersection), 0 (complement), n (set difference), etc. In the description logiccase, R is the set of role names.As a bridge between the two languages LE and LB .R/ we need a distinguished set Bof bridging functions, different from all other symbols involved. A typical example for abridging function is the cardinality function mapping sets to integers. A bridging functionsymbol may have any finite arity. Each argument position, however, can take either aBoolean term as argument, or an LE -term. For convenience, we assume that a bridgingfunction of arity n C k reserves the first n arguments for Boolean terms and the remainingk arguments for LE-terms.The combined language is defined as follows:Definition 1 (The combined language LBE.R; B/). If sTxU 2 LE , where x is someterm occurring at some positions in s, f 2 B with arity n C k, t1; : : : ; tn 2 LB .R/,s1; : : : ; sk 2 LBE.R; B/ then sTx=f .t1; : : : ; tn; s1; : : : ; sk/U 2 LBE.R; B/. No other termsare in LBE.R; B/.LBE.R; B/ is essentially like LE , but LE -term positions can be occupied by LB .R/-terms embedded in a bridging function. The combined language is such that the Booleanparts and the LE -parts are separated by the functions in B.Example 2. E D arithmetic, B D fj:j; f; a; cg with the informal meaning: j:j is the setcardinality function, f means “combined fortune”, a means “average income” and thebinary function c means “consumption of”. Well formed LBE.R; B/ axioms are now:jsons [ friendsj > 5:(There are more than 5 sons and friends.)f .children/ > 100000:(The combined fortune of the children exceeds 100000.)a.daughters/ D 10000:H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–3113(The average income of the daughters is 10000.)c.children [ friends; cigarettes/ D 0:(The children and friends do not smoke cigarettes.)2.2. Semantics of the languages involvedThe language LE comes with its natural semantics. The only feature we need is that aninterpretation =E for E maps the free variables and constant symbols to elements of E’sdomain and interprets function symbols as functions in the usual way. In an arithmeticallanguage, =E may, for example, represent a solution of an equation system.The language LB .R/ is to be interpreted as a complete and atomic Boolean algebrausually, but not necessarily, as a set algebra.The interpretation is therefore a homomorphism =B : LB.R/ 7! A, where A is acomplete and atomic Boolean algebra. 5Since the language LB .R/ and LE do not share any symbols, we can define a combinedinterpretation =BE as the union of the interpretations =B and =E . The interpretation of thebridging function symbols also becomes part of =BE.The interpretation of the bridging function symbols in B can, but need not be fixed. Itmust, however, satisfy the additivity axioms (Definition 3) and it must be type conform.That means for a bridging function symbol f with n Boolean arguments and m LE -arguments, a combined interpretation =BE.f / must map tuples consisting of n elementsof the Boolean algebra and m elements of E’s domain to an element of E’s domain.Definition 3 (Additivity axioms). The additivity axioms for a bridging function f 2 F witharity n C k are:x \ y D ; ! f .: : : ; ti(cid:0)1; x [ y; tiC1; : : :/(cid:1)(cid:0)f .: : : ; ti(cid:0)1; x; tiC1; : : :/; f .: : : ; ti(cid:0)1; y; tiC1; : : :/D gifor each i 2 f1; : : : ; ng of the Boolean argument positions, where gi .x; y/ is some term inLE.Definition 4 (Problem specification). A problem specification .AR; AB; ’/ now consistsof three parts:(1) a set AR of propositional axioms over the Boolean symbols R,(2) the bridging function additivity axioms AB (Definition 3),(3) a LBE.R; B/ formula ’.The satisfiability problem is to find out whether such a specification is consistent, i.e.,whether it has an interpretation satisfying all three parts.The propositional axioms AR can have an ordinary propositional interpretation, wherethe Boolean variables in R are mapped to binary truth values, or they can have a more5 In many practical applications, A is even finite. We have not investigated the case where A is not complete ornot atomic.14H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–31[general Boolean algebra interpretation, where the Boolean variables in R are mapped tothe elements of the Boolean algebra. In the description logic case the desired interpretationis set theoretic, where the Boolean variables in R are mapped to sets of role fillers. Toexplain the exact correlation between these different kinds of interpretations, some basicBoolean algebra theory (ultrafilters) is necessary. One can prove that for any kind of atomicBoolean algebra interpretation of AR, there is a one-to-one correspondence between thepropositional models m of AR (m jD AR), and the atoms of the Boolean algebra. Thatmeans a syntactic representation (the syntactic atoms) of AR’s models can be used torepresent the atoms of the Boolean algebra.Therefore for every Boolean term t and set theoretic interpretation =:’= Dm=;(9)mjD.’^AR/where m= means the settheoretic interpretation of the atom corresponding to thepropositional model m. This is the basis for a sequence of transformations which eliminatethe Boolean terms and the bridging functions from a problem specification .AR; AB; ’/and reduce the satisfiability problem to a problem in the basic language LE .Definition 5 (Atomic decomposition). Given a problem specification .AR; AB; ’/ wedefine the following sequence of transformations.(1) Atomic decomposition of Boolean terms:(cid:11)AR .p/ D fm1; : : : ; mng;where p is a Boolean variable and mi jD p ^ AR(cid:11)AR .x [ y/ defD (cid:11)AR .x/ [ (cid:11)AR .y/(cid:11)AR .x \ y/ defD (cid:11)AR .x/ \ (cid:11)AR .y/(cid:11)AR .x0/ defD (cid:11)AR .>/ n (cid:11)AR .x/ (cid:11)AR .>/ is the set of all models of AR:Notice that the set connectives at the left-hand side are just term building functions,whereas at the right-hand side, the real set operations are meant.For a LBE.R; B/-formula ’ let (cid:11)AR .’/ be the result of applying the decompositionfunction (cid:11)AR to all Boolean terms occurring in ’.(2) Elimination of additivity axioms:For a decomposed LBE.R; B/-formula (cid:11)AR .’/ let (cid:11)AB .(cid:11)AR .’// be the result ofan exhaustive left to right application of the equations in AB to (cid:11)AR .’/, taking thesets fm1; : : : ; mkg as union terms m1 [ (cid:1) (cid:1) (cid:1) [ mk.(3) Elimination of the bridging functions:Finally we define a replacement operation on (cid:11)AB .(cid:11)AR .’// which replaces allbridging function symbols f with n Boolean and k LE -arguments by correspondingLE -terms. (cid:12) introduces for each term f .m1; : : : ; mn; : : :/ a new LE-function (orconstant) symbol f 0m1;:::;mn and replaces terms f .m1; : : : ; mn, s1; : : : ; sk/ withf 0.s1; : : : ; sk/.m1;:::;mnLet (cid:11)AR;AB .’/ be the result of this replacement to (cid:11)AB .(cid:11)AR .’//.H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–3115Theorem 6 (Soundness and completeness). A problem specification .AR; AB; ’/ issatisfiable (falsifiable) if and only if (i) AR is satisfiable and (ii) the transformed formula(cid:11)AR;AB .’/ is satisfiable (falsifiable) in the basic system LE.The inference procedure derived from this theorem comprises the following steps: inorder to check satisfiability of a combined specification .AR; AB; ’/, first compute thesyntactic atoms derived from the propositional models of AR. If there are no modelsthen the specification is unsatisfiable. If there are models, decompose the Boolean termsoccurring in ’ into sets of syntactic atoms. Use the additivity axioms in AB to push thebridging functions down to the level of single atoms. Then replace the resulting “bridgingterms” with variables or composed LE -terms, and check the result with an E-satisfiabilitychecker.If satisfiability in E is decidable we get a decision procedure for the combination withthe Boolean language. Satisfiability for this combination is then decidable as well.2.3. OptimizationsA formula with l Boolean variables may, in the worst case, have 2l models. For all ofthem one has to generate syntactic atoms. This makes the whole approach questionable.Fortunately, there are some optimizations which can reduce the number of syntactic atomsconsiderably.2.3.1. Relevancy principleA Boolean variable p occurring in the Boolean axioms AR of some problemspecification .AR; AB; ’/, but not in ’ does not contribute much to the problem solution.Boolean variables are implicitly existentially quantified. That means AR is in fact shortfor 9p AR if p does not occur in ’. AR is a conjunction of propositional formulae, andtherefore, the existentially quantified p can be eliminated using a quantifier elimination0 which is equivalent to 9p AR, but does notprocedure [16]. The result is some formula ARcontain p. In the propositional case, elimination of the existentially quantified p amountsto generating all resolvents with p in the clause form of AR. The resolvents represent allconsequences of p and therefore, p is no longer necessary [1].This way one can have large databases of Boolean axioms, but for the actual problem athand, the atomic decomposition takes into account only the relevant Boolean variables.2.3.2. Factoring principleA Boolean axiomatization AR which can be split into separate parts AR1; : : : , ARrsuch that the parts mutually do not share Boolean variables, simplifies the atomicdecomposition as well. The set of propositional models for AR can be factored into theproduct M1 (cid:2) (cid:1) (cid:1) (cid:1) (cid:2) Mr of the set of models for the ARi . This means that the algebraA, which is the image of the set theoretic interpretation of AR can be factored intothe product A1 (cid:2) (cid:1) (cid:1) (cid:1) (cid:2) Ar of algebras. The atoms of such a product have the form.: : : ; ?i(cid:0)1; ai; ?iC1; : : :/, where ai is an atom of Ai and all other components are thebottom elements of the other algebras.16H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–31If there is no other information about intersections or unions of Boolean terms fromdifferent factors of the product, then this can be exploited for the representation of thesyntactic atoms. They can have the form .: : : ; ?; mi; ?; : : :/, where mi is a syntactic atomof the component Mi . A further simplification is possible by just storing mi and labellingit with the information “belongs to Mi ”.This reduces the overall number of syntactic atoms from jM1j (cid:1) (cid:1) (cid:1) jMr j to jM1j C (cid:1) (cid:1) (cid:1) CjMr j, which is an exponential improvement.The meaning of this simplification also makes sense from an application point ofview. As an illustration, consider some AR axiomatizing, say family relationships, and inaddition relationships between the makes of cars. If there are no axioms saying somethingabout the intersection of people and cars, then the factoring operation implicitly imposesthat there is no object which is at the same time a person and a car. Therefore, the wholeBoolean algebra is split into the part with sets of people and the part with sets of cars.People and cars together are represented by tuples in the product algebra. On the calculusside we therefore, get syntactic atoms which represent either people or cars, but none forthe intersection of both.3. Arithmetic constraints for role fillersWe define different Description Logic languages, starting with a purely arithmetical part,and then including more operators. With all of them one can define conceptsc defD ’;where c is a concept name and ’ a concept formula in the corresponding language (cf. (1)or (2) or (3)).One important restriction on concept definitions is that the equations c defD ’ can be usedas rewrite rules from left to right such that the rewriting operation terminates. The rewrittenconcept definitions are in expanded normal form. For example, the expanded normal formfor the two concept definitionsparent defD person ^ jhas-childj > 1grandparentdefD parent ^ 9 has-child:parentisdefD person ^ jhas-childj > 1parentgrandparent defD person ^ jhas-childj > 1 ^9 has-child:(cid:0)person ^ jhas-childj > 1(cid:1):Truly recursive concept definitions, where the rewriting does not terminate, are possible,but they require a different approach to the one presented in this paper [21,24]. Thereforewe always assume that the concept formulae are in expanded normal form. (Since theexpanded normal form may be exponential, a clever implementation needs to avoid theexpansion.)H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–3117The atomic decomposition technique is already a framework for a first version ofa description logic. The basis is an arithmetic equation solving or a mathematicalprogramming system. This system is combined with Boolean role terms. Let us call itDLar (Description Logic with arithmetics and role terms).Definition 7 (DLar-syntax). The language primitives consist of a set R of role names, aset C of concept names and a set B of bridging functions. B contains the set cardinalityfunction j : : : j.A DLar-basis .AR; AB/ consists of:(1) a finite set AR of propositional axioms for the role names in R, 6(2) a finite set AB of additivity axioms for the bridging functions in B. 7DLar-formulae are just LBE.R; B/-formulae.The DLar-semantics interprets role terms as binary relations and concept formulae assets of objects in some domain.Definition 8 (DLar-semantics). We assume an interpretation = over some nonemptydomain D= for a DLar-basis to interpret the arithmetic parts of the language in the naturalway (see Section 2.2), and to interpret the bridging functions also in a natural way, suchthat the bridging axioms are satisfied. The definitions specific to DLar are:(cid:15) r = (cid:18) D= (cid:2) D= for every role name r 2 R,(cid:15) r =x defD fy j .x; y/ 2 r =g for every x 2 D= and r 2 R,(cid:15) if f is a bridging function of arity n C k and r1; : : : ; rn are role terms then(cid:1)=x defD f =A concept formula ’ is consistent (or satisfiable) if ’= 6D ; for some interpretation =.(cid:0)f .r1; : : : ; rn; s1; : : : ; sk/(cid:0)=x1 ; : : : ; r =xr1 ; : : : ; s=n ; s=(cid:1):kA concept formula ’1 subsumes (entails) a concept formula ’2 iff ’=1(cid:18) ’=2 for allinterpretations =.Remark. The top element of the Boolean role terms denotes the universal relation. With aname for the universal relation in the syntax, one can express cardinality restrictions for thedomain. For example, jrj D 5 ^ jr 0j D 6 enforces that the domain has exactly 11 elements.The universal relation is the only relation which has the same successors for all domainelements, namely the whole domain. This requires for some extra mechanisms in thealgorithms, which are not addressed in this paper. Therefore we shall always assume thatthere is no explicit or implicit reference to the universal relation, neither in the arithmeticparts, nor in the quantification parts of the language DLarc8 below. This means in particularthat the algorithms are not suitable for modal S5-type inference problems.6 AR specifies the set theoretic relationships between the roles, usually, but not necessarily a subset hierarchy(the “role hierarchy”).7 It might be necessary to include further axioms in AB . For example, the correlation between the cardinalityfunction and, say, a bridging function average-income may be 8x jxj D 0 ) average-income.x/ D 0. It is quitestraightforward to translate axioms like this into the language of the underlying arithmetic system.18H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–31The problem of checking consistency of a concept formula ’ can be solved by checkingthe problem specification .AR; AB; ’/ (Definition 4) for consistency with the atomicdecomposition method.The problem of checking subsumption between ’1 and ’2 can be solved by checking theproblem specification .AR; AB; ’1 ^ :’2; / for consistency. (We assume the underlyingarithmetic algorithms can deal with negated formulae.)Atomic decomposition has previously been used to develop inference algorithms fordescription logics, for example, in [9,10]. In their approach, the concepts themselves aredecomposed, not the roles. Since the technique was applied to a different logic (withinverse roles and arbitrary terminological axioms), one cannot compare the two approachesdirectly.4. Concept formulae with concept namesThe first extension of the language DLar is DLarc, where we allow for propositionalformulae over concept names to occur in concept terms.Definition 9 (The language DLarc). The language DLarc is like DLar, but concept formulae’ may be of the form ’a ^ ’c, where ’a is an arithmetical concept term of the languageDLar and ’c is a propositional formula over concept names.The DLar semantics works for DLarc as well if concept names are mapped to subsets ofthe domain and ’=c is the set theoretic interpretation of ’c.An example isbusy-academicdefD jhas-coursesj C jhas-projectsj > 2 ^.staff -member _ researcher/jhas-coursesj C jhas-projectsj > 2 is the arithmetic part (’a) and .staff -member _researcher/ the purely propositional part (’c).Since the arithmetic part and the concept name part do not share any symbols,consistency and subsumption can be checked separately.Proposition 10 (Consistency and subsumption check for DLarc). A DLarc-concept formu-la ’a ^ ’c is consistent iff ’a is consistent, which can be checked with the DLar consistencycheck, and ’c is consistent, which can be checked with a propositional satisfiabilitychecker.A DLarc-concept formula ’a ^ ’c subsumes a concept formula a ^ c iff ’a subsumes a, which can be checked with the DLar-subsumption algorithm, and ’c entails c aspropositional formulae, which can be checked with a propositional satisfiability checker.Since ’a and ’c do not share any nonlogical symbols, the proofs are straightforward.H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–31195. Concept formulae with universal quantifiersUniversal quantification 8 r:’ expresses properties of role fillers (all r role fillers of agiven object x must lie in the concept ’).Definition 11 (The language DLarc8). The language DLarc8 is like the language DLarc, butconcept formulae ’ may be of the kind ’a ^ ’c ^ ’8, where ’a ^ ’c is a DLarc-conceptformulae and ’8 is a conjunction of quantifications 8 r: , where r is a role term and  isa DLarc8-concept formula.The semantics of 8 r:’ is.8 r: /= defD(cid:8)x 2 D= j 8y r =.x; y/ ) y 2  =(cid:9):(8 r: denotes the set of objects all whose r role fillers are in .)Notice that if ’a consists of conjunctions of expressions of the form jrj > n or jrj 6 n,where n is an integer, ’c is a conjunction of concept names, and role terms consist ofrole names only, and the role hierarchy AR is empty then this language is the logic T F[15,20].If the atomic decomposition of the role term r is fa1; : : : ; ang then8 r: , .8 a1: ^ (cid:1) (cid:1) (cid:1) ^ 8 an: /:(10)Therefore the ’8-part of a DLarc8-concept formula can be normalized such that’8 D .8 a1:’1^ (cid:1) (cid:1) (cid:1) ^ 8 an:’n/;where the ai are symbolic atoms. For example,8 has-child:teacher ^ 8 has-son:maleis normalized to8 s:.teacher ^ male/ ^ 8 d:teacherif has-child is decomposed into fs; dg.Concept formulae ’ which denote the whole domain in all interpretations, i.e., ’= D >=for all interpretations = are useless tautologies and should be eliminated. We give anecessary and sufficient criterion for recognizing them.Theorem 12 (Tautology). A DLarc8-concept formula ’ D ’a ^ ’c ^ ’8, where ’a is thearithmetic part, ’c is the propositional part and ’8 are the universal quantifications, is atautology over a DLarc8-basis .AR; AB/ (written jD ’ 8 ), iff:(i) (cid:11)AR;AB .’a/ is a tautology in the basic system LE (i.e., all possible assignmentsto the variables are solutions),(ii) ’c is a propositional tautology, and(iii) for all ‘8 r: ’ in ’8,  is a tautology.8 We use the symbol jD as a binary relation = jD ’ (the interpretation = satisfies ’) and as a predicate jD ’(’ is true in all models).20H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–31Proof. If all three conditions are satisfied then ’ is certainly a tautology. We show that ifone of them is not satisfied then ’ can be interpreted as a proper subset of the domain ofsome interpretation.If (cid:11)AR;AB .’a/ is not a tautology, there is a falsifying model for (cid:11)AR;AB .’a/. ByTheorem 6 there is a falsifying interpretation =0 for ’a as well. =0 maps the symbolicatoms m to subsets of a domain. We now construct an interpretation = for ’, whereD= D fxg [[m=0m2(cid:11)AR .>/for some arbitrary element x and for all atoms m: m= defD f.x; b/ j b 2 m=0 g. This meansthe m-successors of x are just those elements assigned to m by =0. This way we get aninterpretation where the role fillers of x falsify ’a. Thus, ’ is not a tautology.If ’c is not a propositional tautology we can certainly find an interpretation, where ’=is a proper subset of the domain.If for some ‘8 r: ’ in ’8:  is not a tautology, there is an interpretation = and somedomain element b =2  =. In the same way as in the first case we construct an interpretation=0 with b as r-successor of some new element x. Then it is not the case that for allr-successors of x,  holds, which means that ’ is not a tautology. 2Definition 13 (Decomposition of universal quantifications). If ’ Dconcept formula over a DLar-basis .AR; AB/, where R is a set of role terms, we define8 r: rr2Ris aV(cid:11)AR .’/ defD8 m:(cid:11)AR .’; m/;^Sr2R (cid:11)AR .r/m2where(cid:11)AR .’; m/ defD^ r :r2R: m2(cid:11)AR .r/Lemma 14. The decomposition of the universal quantifications (Definition 13) is equiva-lence preserving. That means ’= D .(cid:11)AR .’//= for all interpretations satisfying .AR; AB/.Proof. The lemma is a consequence of (9) and (10) and .8 r:’ ^ 8 r: / , 8 r:.’ ^ /.First the universal quantifications in ’ D 8 r1: 1 ^ (cid:1) (cid:1) (cid:1) ^ 8 rn: n are decomposed intotheir atomic parts:8 mr11: 1 ^ (cid:1) (cid:1) (cid:1) ^ 8 mr1k1 : 1 ^ (cid:1) (cid:1) (cid:1) ^ 8 mrn1: n ^ (cid:1) (cid:1) (cid:1) ^ 8 mrnkn: n;where mri 1; : : : ; mri ki are the atomic components of ri for 1 6 i 6 n. This is a equivalencepreserving transformation (10). Then all quantifications 8 m: i with the same role m arecollected in one single quantification with a conjunction of all the relevant i . This is alsoan equivalence preserving transformation. And that is the result of the normal form. 2Universal quantification over an empty set is a tautology, therefore 8 r:’ is satisfiableeven if ’ is inconsistent. Consequently, if ’ is inconsistent then the set or r-role fillersH.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–3121must be empty. jrj D 0 can be added in this case. These observations lead to the followingnormal form for DLarc8-concept formulae.Definition 15 (DLarc8-normal form). Let ’ D ’a ^ ’c ^ ’8 be a DLarc8-concept formulaover a DLarc8-basis .AR; AB/,where ’a is the arithmetic part, ’c the concept name partand ’8 the universal quantifications (all parts may be empty).The normal form NFarc8.’/ of ’ is8AR;AB .’a; ’8/ ^ ’c ^ (cid:11)0(cid:11)0>><if (cid:11)0>>:? otherwise,NFarc8.’/ defDAR .’8/AR;AB .’/ and ’c are consistentwhereAR;AB .’a; ’8/ defD (cid:11)AR;AB .’a/ ^(cid:11)0^and0AR .’8/ defD(cid:11)‘8 m: 0’ 2(cid:11)AR .’8;m/;NFarc8. 0/D?^xm D 08 m: :‘8 m: 0’ 2(cid:11)AR .’8;m/; DNFarc8. 0/6D?;(cid:11)0AR;AB .’/6jD.xmD0/;6jD (cid:11)0AR;AB .’a; ’8/ in the normal form NFarc8.’/ is the arithmetic part. It consists of theoriginal decomposed arithmetic part (cid:11)AR;AB .’a/ (Definition 5(3)), where the role termshave been replaced by the corresponding arithmetic terms, plus some equations xm D 0,where xm is the variable introduced for jmj. These equations come from quantifications8 a: with inconsistent , and therefore, there cannot be any m-successors. (cid:11)0AR .’8/is the decomposed and reduced quantification part where all quantifications over emptyatomic role components and all tautologies have been eliminated.Theorem 16 (Soundness of the NFarc8-normal form). If the normal form NFarc8.’/ D ?for a DLarc8-concept formula ’ D ’a ^ ’c ^ ’8 over a DLar-basis .AR; AB/, then ’ isinconsistent.Proof. By induction on the number of nested universal quantifications: in the base case,’ D ’a ^ ’c, either (cid:11)0AR;AB .’a/ is inconsistent or ’c is inconsistent. In the first case, ’amust be inconsistent (Theorem 6), and in the second case ’ is inconsistent anyway.Induction step: If ’c is inconsistent, then so is ’. If (cid:11)AR;AB .’a/ is inconsistent then ’ais inconsistent (Theorem 6). If (cid:11)AR;AB .’a/ is consistent, butxm D 0(cid:11)AR;AB .’a/ ^^‘8 m: 0’ 2(cid:11)AR .’8;m/;NFarc8. 0/D?is inconsistent, then (cid:11)AR;AB .’a/ forces the existence of an m-role filler for whichthe corresponding NFarc8. 0/ D ?, and therefore, by the induction hypothesis,  isinconsistent. Thus, we find some 8 m: in the decomposition of ’8 with  , ? andnonempty m-role fillers. This makes ’8 inconsistent. 222H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–31Theorem 17 (Completeness of the NFarc8-normal form). If the normal form NFarc8.’/ 6D? for a DLarc8-concept formula ’ D ’a ^ ’c ^ ’8 over a DLar-basis .AR; AB/, then forevery nonempty set D there is an interpretation = with ’= D D (which means in particularthat ’ is consistent).Proof. By induction on the number of nested universal quantifications: for technicalreasons, we assume that every propositional part ’c at all levels of the formula ’ has theform p ^ ’0c, where p is a single unique concept name, not occurring anywhere else in ’.This does not change the consistency or inconsistency of ’.The base case of the induction is again ’ D ’a ^ ’c. Since (cid:11)AR;AB .’a/ is consistent,there is an interpretation =0 for ’a (Theorem 6). We define an interpretation =, where theatoms m in the atomic decomposition are interpreted as binary relations such that the m-role fillers of the elements in D are just m=0c wedefine p= defD D and for each concept name q in ’c with q =0 D 1 let p= defD D and if q =0 D 0let p= defD ;. This guarantees .’a ^ ’c/= D D.Induction step: Since NFarc8.’/ 6D ?, (cid:11)0AR;AB .’a; ’8/ ^ ’c must be consistent. In the. For all x 2 D let m=x defD m=0. For p ^ ’0same way as in the base case we construct an interpretation =1 with’a ^^‘8 m: 0’ 2(cid:11)AR .’8;m/;NFarc8. 0/D?!=1xm D 0D D:Because of Lemma 14 it is sufficient to show that =1 can be extended to some interpretation=k 8 m: 0=k D D for all ‘8 m: 0If m=1x D ; for some (or all) x 2 D then x 2 .8 m: 0/=1 because quantifications over’ in (cid:11)AR .’8/.empty sets are always true.SIf m=1x 6D ; for some x 2 D then NFarc8. 0/ 6D ? for ‘8 m: 0’ 2 (cid:11)AR .’8; m/ (becauseotherwise xm D 0 would be in the arithmetic part). By the induction hypothesis there aresome interpretations =x with  0=x D m=1x . We define a joint interpretation =2 by requiringm=2 D m=1 [x q=1 [ q=x for each concept name qoccurring in both ’c and .x m=x for each atom m and q =2 Dm=1 and m=2 just contribute different levels to the binary relation associated with m.=1c D D, and a similar statement isc and p does not occur in , ’=2c D ’Since ’c D p ^ ’0true for the propositional parts in .Repeating this process for each 8 m: 0 we end up with an interpretation =k withS’=k D D. 25.1. The subsumption testTesting subsumption means figuring out whether ’=12 holds for two conceptformulae ’1 and ’2 and for all interpretations =. In our case we make use of our normalform for concept formulae, where the arithmetic information is comprised in the arithmeticconstraint part and the quantifications are decomposed into their atomic components. Thestructure of the normalized ’ is ’ D ’a ^ ’c ^ ’8, where ’a is the decomposed arithmeticpart, ’c is a propositional formula and ’8 contains the decomposed and reduced universalquantifications.(cid:18) ’= H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–3123In order to verify that ’1 subsumes ’2 we have to prove each conjunctive part in ’2from ’1. The normal form allows us to separate the problem. The arithmetical part ’2acan only follow from the arithmetical part ’1a. This, we assume, can be checked with acorresponding arithmetic algorithm. The propositional part ’2c can only follow from thepropositional part ’1c, which can be tested with a propositional satisfiability checker.Finally, the atomic components 8 m: 2 of ’2 can follow from corresponding 8 m: 1components in ’18, if 1 subsumes 2. Here the algorithm becomes recursive. There is,however, one other possibility where 8 m: 2 is also a consequence of ’1, namely if ’a1forces xm D 0. Then there are no m-successors, and 8 m: 2 is vacuously true.Theorem 18 (DLarc8-subsumption test). For i D 1; 2 let ’i D ’ia ^ ’ic ^ ’i8 be consistent^ ’ic ^ ’0concept formulae with normal forms ’0iai8.’1 subsumes ’2 if and only if :1a entails ’0(i) ’0(ii) ’1c entails ’2c in propositional logic, and(iii) for all ‘8 m: 2’ in ’0282a in the basic arithmetic system,(a) ’01a entails xm D 0 or(b) there is some ‘8 m: 1’ in ’018 with 1 subsumes 2.Proof. The “only-if” part (soundness) is obvious. For the “if” part (completeness) weshow by induction on the number of nested universal quantifications in ’2, that if oneof (i), (ii), or (iii) is violated, there is an interpretation = with ’=16(cid:18) ’=2 /.This means, if ’=1(cid:18) ’=2 for all interpretations =, then (i), (ii) and (iii) must be true, andwe can check subsumption by testing (i), (ii), and (iii).In the base case of the induction, ’2 consists of the arithmetical part and the propositionalpart (which are independent of each other).If the decomposed formula ’01a does not entail ’02a is consistentwhich, by Theorem 6 and a similar construction as in Theorem 17 means that there isan interpretation = with .’1a ^ :’2a/= 6D ;. Thus, ’1 cannot subsume ’2.2a then ’0^ :’01aIf the propositional part ’1c does not entail ’2c then obviously ’1 cannot subsume ’2.Induction step: The arguments for the arithmetical and propositional parts are the sameas for the base case. For the quantification we have to investigate the case that (iii) isviolated: suppose there is some ‘8 m: 2’ in ’01a does not entail xm D 0, i.e., thereis an interpretation with some m-role filler o0 for some domain object o, and28 and ’0(a) there is no corresponding ‘8 m: 1’ in ’0(b) there is some ‘8 m: 1’ in ’0In the first case there is no restriction about the m-role filler o0. Since all tautologies have1 , but o0 into18, but 1 does not subsume 2.28, there is an interpretation = which places o into ’=18 orbeen eliminated from ’0the complement of  =2 such that o =2 ’=2 .Case (b) is a consequence of the induction hypothesis. 2Example 19. Let us illustrate the subsumption checking procedure with an example takenfrom [20, p. 80]. The task is to show that a concept. 99 The notation has been adapted to fit into our framework.24H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–31defD jrj > 3’2is subsumed by a conceptdefD 8 .r \ p/:S ^ 8 .r \ q/::S ^ jr \ pj > 2 ^ jr \ qj > 2:’1First of all we need to compute the normal forms for ’1 and ’2. We begin with thedecomposition of the role set R D fr; p; qg according to Definition 5. We obtain(cid:11)AR .r/ D fr; rp; rq; rpqg(cid:11)AR .p/ D fp; rp; pq; rpqg(cid:11)AR .q/ D fq; rq; pq; rpqg:Now we are able to decompose the universal quantifiers in ’1 following Definition 13 into8 rp:S ^ 8 rpq:.S ^ :S/ ^ 8 rq::S:Since S ^ :S is inconsistent, we obtain(cid:11)AR .’18/ D 8 rp:S ^ 8 rq::Sand the first equation for (cid:11)0the normal formAR;AB .’1a; ’18/ is xrpq D 0. Using this equation to simplifyxrp C xrpq > 2 ^ xrq C xrpq > 2 ofjr \ pj > 2 ^ jr \ qj > 2we obtain the two in-equations(cid:11)0AR;AB .’a; ’8/ D xrp > 2 ^ xrq > 2 ^ xrpq D 0:Normalizing ’2 leads to a single in-equationNFarc8.’2/ D (cid:11)0AR;AB .’2a; ’28/ D xr C xrp C xrq C xrpq > 3:Since ’2c and ’28 are empty, it remains to prove thatxrp > 2 ^ xrq > 2 ) xr C xrp C xrq C xrpq > 3is valid, and this is obvious.The constraints on the number of role fillers expressible in DLarc8 cannot relaterole fillers at different levels of the quantification. For example, the representation of“the set of people with more grandchildren than children” requires an expression likejhas-childI has-childj 6 jhas-childj or a kind of aggregation functions which can lead toundecidability [5].6. Concept formulae with existential quantifiersThe existential quantifier 9 r: postulates the existence of an r role filler in the concept . As already mentioned, this quantifier is definable in our language:9 r: D 9r 0(cid:0)r 0 ) r(cid:1)^(cid:12)(cid:12)r 0(cid:12)(cid:12) > 1 ^ 8 r 0: :H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–3125Therefore a language DLarc89 with an existential quantification is convenient, buttheoretically not necessary.For each occurrence 9 r: of an existential quantifier, one introduces a new (Skolem-ized) role name r 0 (which relates a subset of those r role-fillers lying in ) and addsthe axiom r 0 ) r to the role hierarchy. The actual occurrence of 9 r: is replaced withjr 0j > 1 ^ 8 r 0: .It should be noted that this extension to the role hierarchy is only local to the nestingof the universal quantifiers. For each 8 s:’ containing an existential quantifier in the toplevel of ’, one can have a local extension of the role hierarchy. This way exponentiallymany atoms in the atomic decomposition of the role terms can be avoided. The assumptionbehind this optimization is that role fillers in different quantifications have nothing incommon.Example 20. From the information’ D 9 has-child:.male ^ teacher/ ^ 9 has-child:.:male ^ teacher/ ^jhas-childj 6 2one can conclude D 8 has-child:teacherbecause there are at most (in fact exactly) two children, and one must be the male and onemust be the female child, and both are teachers.The existential quantifiers are eliminated by introducing two new roles c1 ) has-childand c2 ) has-child.9 has-child:.male ^ teacher/ becomes jc1j > 1 ^ 8 c1:.male ^ teacher/9 has-child:.:male ^ teacher/ becomes jc2j > 1 ^ 8 c2:.:male ^ teacher/:Since .male ^ teacher/ and .:male ^ teacher/ are inconsistent, the intersection of c1and c2 is empty, which will be found out during the DLarc8-normal form computation(Definition 15). Taking this and the hierarchy axioms into account, the decomposition ofhas-child therefore yields just fc1; c2; rg, where r stands for “all the rest”.The DLarc8-normal form of ’ is then’0 D xc1> 1 ^ xc2> 1 ^ .xc1C xc2C xr / 6 2 ^8 c1:.male ^ teacher/ ^ 8 c2:.:male ^ teacher/;which obviously implies xr D 0.The DLarc8-normal form of the first second formula 8 has-child:teacher is8 c1:teacher ^ 8 c2:teacher ^ 8 r:teacher:In order to check that ’ subsumes , one has to prove recursively every quantificationin 0 from the corresponding quantification in ’0, which is trivial for the first two ones,or to check whether ’0 implies that there are no role fillers, which is true for the thirdquantification in  0 because xr D 0 is a consequence of ’0.26H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–317. Concept formulae with disjunction and negationA straightforward way to handle disjunctions is to generate a disjunctive normal formand to treat the disjuncts, which are actually DLarc89-formulae, by the DLarc89 algorithms:a concept formula is consistent iff at least one disjunct in the disjunctive normal form isconsistent. A concept formula ’1 subsumes a concept formula ’2 iff one disjunct in thedisjunctive normal form of ’2 is subsumed by all disjuncts in the disjunctive normal formof ’1.If conjunction, disjunction, both quantifiers, negation of arithmetic expressions andnegation of concept names are available, then full negation can be treated by putting aconcept formula in negation normal form, where all negation symbols are in front ofconcept names or in dis-equations. This way the consistency test with full negation canbe reduced to the consistency test for the language DLarc89 with disjunction. Moreover, thesubsumption test for ’1 and ’2 can be reduced to the consistency test for ’1 ^ :’2.8. Other operators in the languageQuite a number of other operators can be added to our language without changing thealgorithms.8.1. Number-valued functional roles (features)These are just functions mapping objects to numbers. They can only appear in thearithmetic part of the language, and there they are treated as ordinary arithmetical variables.An example for a number-valued functional role is cubic-capacity in the definition500erdefD car ^ cubic-capacity D 500 (cid:1) jhas-cylinderj:(11)(500er is the set of cars with cubic capacity of 500 cc per cylinder.)If only numeric features occur in the arithmetic part then DLarc89 is almost likeBaader and Hanschke’s ALC.D/, ALC with the concrete domain D = real numbers [3].The difference is our treatment of the existential quantifier, which introduces a numericconstraint for the role fillers. Therefore the consistency and subsumption checkingalgorithms are very different.Baader and Sattler have investigated an extension of this language in which auxiliaryvariables can be used to link different features at different levels of the quantifications.For example, #x .2x D age ^ 8 has-child:x D age/ specifies the set of objects which aretwice as old as their children. x serves as an auxiliary variable and links the age-feature ofthe object with the age-feature of the object’s children. We have not yet investigated howthis language extension fits into our approach. It is certainly not straightforward becauseconsistency is undecidable in this language [4].8.2. Other functional rolesFunctional roles which have exactly (or at most) one role filler can be defined usingarithmetic constraints and the universal quantifier.H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–3127jhas-namej D 1 ^ 8 has-name:namespecifies a functional role has-name mapping objects to objects in the set name.Thus, functional roles can be treated with the mechanisms available for universalquantifiers and arithmetics. In special cases, however, it might be more efficient to treatfunctional roles in a special way.8.3. Qualified number restrictionsQualified number restrictions can be introduced as defined operators:(cid:12)(cid:12)r(cid:12)(cid:12)r 00 ) r ^atleast n r:’ , 9ratmost n r:’ , 9r 0 r 0 ) r ^(cid:12)(cid:12) > n ^ 8 r(cid:12)(cid:12) 6 n ^ 8 r 0:’ ^ 8(cid:0)r n r 0(cid:1)::’::’r000The new roles are Skolemized and the hierarchy information r 0 ) r is added to the rolehierarchy in the same way as for the existential quantifier.Example 21. Let.1/ atleast 20 >:p.2/ atleast 20 >:q.3/ j>j 6 30.4/ atmost 9 >:.p ^ q/:9>>>>>>=>>>>>>;A D8>>>>>><>>>>>>:8>>>>>><>>>>>>:An intuitive interpretation of the example could be: there are atleast 20 horses with whitecolour (p), there are atleast 20 horses with black colour (q), and there are atmost 30 horsesin all. Therefore there must be atleast 10 zebras (p ^ q). The last statement is the negationof this theorem. (> denotes the universal relation.)The elimination of the number restriction operators yields0 DA0/ jRj > 20 ^ 8 R:p0/ jSj > 20 ^ 8 S:q0/ j>j 6 300/ jT j 6 9 ^ 8 T :.p ^ q/ ^ 8 .> n T /::.p ^ q/:.1.2.3.49>>>>>>=>>>>>>;The decomposition of R, S and T generates the 8 atoms r; s; t; rs; rt; st; rst; c (c standsfor the complement of R [ S [ T ). We use the same names for the generated nonnegativeinteger variables.From .10/ we obtain00/ D r C rs C rt C rst > 20 and 8 fr; rs; rt; rstg:p:.1From .20/ we obtain00/ D s C rs C st C rst > 20 and 8 fs; rs; st; rstg:q:.228H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–31From .30/ we obtain00/ D r C s C t C rs C rt C st C rst C c 6 30:.3From .40/ we obtain00.4/ D t C rt C st C rst 6 9 and 8 ft; rt; st; rstg:.p ^ q/ and 8 fr; s; rs; cg::.p ^ q/:The rs-part of the universal quantifications in .100/, .200/ and .400/ are contradictory.Therefore rs D 0 must hold. Using this, we get a simplified in-equation system:r C rt C rst > 20s C st C rst > 20r C s C t C rt C st C rst C c 6 30t C rt C st C rst 6 9which is inconsistent.8.4. Generalized quantifiersOf the form n%r’ and > n%r’ and 6 n%r’, where n is a number between 0 and 100,can also be defined:(cid:12)(cid:12)(cid:12)r 0(cid:12) D njrj ^ 8 r 0:’ ^ 8n%r’ D 9r 0 r 0 ) r ^ 100(cid:12)(cid:12)(cid:12) > njrj ^ 8 r 0:’(cid:12)r 0> n%r’ D 9r 0 r 0 ) r ^ 100(cid:12)(cid:12)(cid:12) 6 njrj ^ 8 r(cid:12)r00 ) r ^ 10006 n%r’ D 9rr0:’ ^ 8(cid:0)r 0 n r(cid:1)::’(cid:1)(cid:0)r0 n r::’:most r ’ in the meaning “at least 50%” is a special case of a percentage operator.As we have seen in the introduction, even operators like more and many r ’ aredefinable, although not in a standard way.9. Problematic features of description logicsA number of operators and features of modal and description logics can be found inthe literature, whose integration into our framework is more difficult and goes beyond thescope of this paper. Role conjunction and role inverse require role terms which are nolonger Boolean. To deal with these kind of operators, the atomic decomposition techniquehas to be extended to more expressive algebras than Boolean algebras.Roles with special properties (reflexivity, symmetry, transitivity) are also of great interestfor description logics. The has-part relation, for example, which is very useful in technicaldomains, is transitive [17].The algorithms presented above depend very much on the fact that the quantifiers 8 r:’and 9 r: over ordinary role terms with no special properties define levels of role fillers,which correspond to the syntactic structure of nested role terms. If the roles have specialproperties then the levels get mixed. Transitivity in particular reduces all levels to just one.H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–3129There is no straightforward way to extend the algorithms to deal with these cases, but itdoes not seem impossible.10. SummaryWe presented a method for developing modal and description logics together with T-Boxconsistency and subsumption algorithms, where the basic inference engine is arithmeticequation solving (mathematical programming). The key technique, which allows one toreduce the consistency and subsumption problem to arithmetic equation solving, is atomicdecomposition of Boolean role terms embedded in bridging functions which map rolefillers to numbers. Therefore, the basic language in our approach can already deal with rolehierarchies specified in propositional logic, role terms with set constructors, and arithmeticconstraints on numeric features of role fillers.With a few extra mechanisms one can integrate many of the standard operators indescription logics, in particular quantification over role fillers, disjunction and negation.The extended system with all these features is expressive enough to treat a number ofoperators as defined operators, in particular qualified number restrictions, generalizedquantifiers like n%r’ or most or more or many. The decision problem for the languageswith these operators is therefore reduced to the decision problem for linear Diophantineequation and in-equation systems, which is decidable.The complexity of the algorithms depends on the expressiveness of the basic arithmeticlanguage, which may even be undecidable, and on the structure of the atomic decompo-sition, which may be exponential. There are, however, various optimizations of the algo-rithms, which reduce the complexity enormously. For example, if there is no role hierarchyat all, then the atomic decomposition becomes trivial. Each role name is mapped to itself.On the other hand, the more axioms there are to restrict the role hierarchy, the less modelsthey have and the less atoms are generated. More information yields less complexity in thiscase.Given the basic idea of using atomic decomposition to reduce the consistency andsubsumption tests to arithmetic problems, it was quite straightforward to adapt the mainalgorithms to the standard operators for description logics. It is not yet clear, how to extendthe method to other operators, in particular to more complex role constructors. Manyinteresting problems with this framework still need to be solved.AcknowledgementWe would like to thank the anonymous referee for her/his valuable suggestions. Inparticular, thanks to these suggestions, the treatment of the existential quantifier is nowmuch simpler than in the original version.References[1] W. Ackermann, Untersuchung über das Eliminationsproblem der mathematischen Logik, MathematischeAnnalen 110 (1935) 390–413.30H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–31[2] F. Baader, B. Hollunder, KRIS: Knowledge representation and inference system, SIGART Bull. 2 (2) (1991)8–15.[3] F. Baader, P. Hanschke, A scheme for integrating concrete domains into concept languages, in: J. My-lopolous, R. Reiter (Eds.), Proc. IJCAI-91, Sydney, Australia, 1991, Morgan Kaufmann, San Mateo, CA,1991, pp. 452–457.[4] F. Baader, U. Sattler, Description logics with symbolic number restrictions, in: W. Wahlster (Ed.), Proc.ECAI-96, Wiley, New York, 1996, pp. 283–287; an extended version has appeared as Technical ReportLTCS-96-03.[5] F. Baader, U. Sattler, Description logics with concrete domains and aggregation, in: H. Prade (Ed.), Proc.ECAI-98, Wiley, New York, 1998, pp. 336–340.[6] A. Borgida, P. Patel-Schneider, A semantics and complete algorithm for subsumption in the CLASSICdescription logic, J. Artificial Intelligence Research 1 (1994) 277–308.[7] R.J. Brachman, J. Schmolze, An overview of the KL-ONE knowledge representation system, Cognitive Sci.9 (2) (1985) 171–216.[8] R.J. Brachman, D.L. McGuinness, P.F. Patel-Schneider, L.A. Resnick, A Borgida, Living with CLASSIC:When and how to use a KL-ONE-like language, in: J. Sowa (Ed.), Principles of Semantic Networks, MorganKaufmann, San Mateo, CA, 1991, pp. 401–456.[9] D. Calvanese, Finite model reasoning in description logics, in: Proc. Internat. Conference on the Principlesof Knowledge Representation and Reasoning (KR-96), Morgan Kaufmann, San Mateo, CA, 1996, pp. 292–303.[10] D. Calvanese, M. Lenzerini, Making object-oriented schemas more expressive, in: Proc. PODC-94, ACMPress/Addison-Wesley, Reading, MA, 1994, pp. 243–254.[11] D. Calvanese, M. Lenzerini, D. Nardi, A unified framework for class based representation formalisms,in: J. Doyle, E. Sandewall, P. Torasso (Eds.), Proc. Fourth Internat. Conference on the Principles ofKnowledge Representation and Reasoning (KR-94), Bonn, Germany, Morgan Kaufmann, San Mateo, CA,1994, pp. 109–120.[12] B.F. Chellas, Modal Logic: An Introduction, Cambridge Univ. Press, Cambridge, 1980.[13] A. Chargov, M. Zakharayaschev, Modal Logic, Oxford Logic Guides, Vol. 35, Oxford Univ. Press, Oxford,1997.[14] M. Davis, Hilbert’s tenth problem is undecidable, Amer. Math. Monthly 80 (1973) 233–269.[15] F. Donini, M. Lenzerini, D. Nardi, W. Nutt, The complexity of concept languages, Research Report DFKI-RR-95-07, DFKI, 1995.[16] D.M. Gabbay, H.J. Ohlbach, Quantifier elimination in second-order predicate logic, in: B. Nebel, C. Rich,W. Swartout (Eds.), Proc. Third Internat. Conference on the Principles of Knowledge Representation andReasoning (KR-92), Cambridge, MA, Morgan Kaufmann, San Mateo, CA, 1992, pp. 425–435.[17] I. Horrocks, U. Sattler, A description logic with transitive and converse roles and role hierarchies, in: Proc.International Workshop on Description Logics, IRST, Povo-Trento, Italy, 1998.[18] R. MacGregor, A description classifier for the predicate calculus, in: Proc. AAAI-94, Seattle, WA, 1994,Morgan Kaufmann, San Francisco, CA, 1994, pp. 213–220.[19] M. Minsky, A framework for representing knowledge, Reprinted in: R.J. Brachman, H.J. Levesque (Eds.),Readings in Knowledge Representation, Morgan Kaufmann, San Francisco, CA, 1990, pp. 245–262.[20] B. Nebel, Reasoning and Revision in Hybrid Representation Systems, Lecture Notes in ArtificialIntelligence, Vol. 422, Springer, Berlin, 1990.[21] B. Nebel, Terminological cycles: Semantics and computational properties, in: J.F. Sowa (Ed.), Principles ofSemantic Networks, Morgan Kaufmann, San Mateo, CA, 1991, pp. 331–361.[22] H.J. Ohlbach, J. Koehler, How to extend a formal system with a Boolean algebra component,in:P.H. Schmidt, W. Bibel (Eds.), Automated Deduction. A Basis for Applications, Vol. III, Kluwer Academic,Dordrecht, 1998, pp. 57–75.[23] K. Schild, A correspondence theory for terminological logics: Preliminary report, in: Proc. IJCAI-91,Sydney, Australia, 1991, Morgan Kaufmann, San Mateo, CA, 1991, pp. 466–471.[24] K. Schild, Terminological cycles and the propositional (cid:22)-calculus, in: Proc. Fourth Internat. Conference onthe Principles of Knowledge Representation and Reasoning (KR-94), Bonn, Germany, Morgan Kaufmann,San Mateo, CA, 1994, pp. 509–520.H.J. Ohlbach, J. Koehler / Artificial Intelligence 109 (1999) 1–3131[25] M. Schmidt-Schauß, G. Smolka, Attributive concept descriptions with complements, Artificial Intelligence48 (1991) 1–26.[26] M.H. Stone, The theory of representations for Boolean algebras, Trans. Amer. Math. Soc. 40 (1936) 37–111.