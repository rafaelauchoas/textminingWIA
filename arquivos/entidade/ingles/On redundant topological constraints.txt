Artificial Intelligence 225 (2015) 51–76Contents lists available at ScienceDirectArtificial Intelligencewww.elsevier.com/locate/artintOn redundant topological constraintsSanjiang Li a,b,∗a Centre for Quantum Computation & Intelligent Systems, University of Technology Sydney, Sydney, Australiab Academy of Mathematics and Systems Science, Chinese Academy of Sciences, Beijing, Chinac Baidu (China) Co., Ltd., Shanghai, Chinad Department of Infrastructure Engineering, University of Melbourne, Melbourne, Australia, Zhiguo Long a, Weiming Liu c, Matt Duckham d, Alan Both da r t i c l e i n f oa b s t r a c tArticle history:Received 13 May 2014Received in revised form 26 March 2015Accepted 29 March 2015Available online 2 April 2015Keywords:Qualitative spatial reasoningRegion connection calculusRedundancyPrime subnetworkDistributive subalgebraRedundancy checking is an important task in the research of knowledge representation and reasoning. In this paper, we consider redundant qualitative constraints. For a set (cid:2)of qualitative constraints, we say a constraint (xR y) in (cid:2) is redundant if it is entailed by the rest of (cid:2). A prime subnetwork of (cid:2) is a subset of (cid:2) which contains no redundant constraints and has the same solution set as (cid:2). It is natural to ask how to compute such a prime subnetwork, and when it is unique. We show that this problem is in general intractable, but becomes tractable if (cid:2) is over a tractable subalgebra S of a qualitative calculus. Furthermore, if S is a subalgebra of the Region Connection Calculus RCC8 in which weak composition distributes over nonempty intersections, then (cid:2) has a unique prime subnetwork, which can be obtained in cubic time by removing all redundant constraints simultaneously from (cid:2). As a by-product, we show that any path-consistent network over such a distributive subalgebra is minimal and globally consistent in a qualitative sense. A thorough empirical analysis of the prime subnetwork upon real geographical data sets demonstrates the approach is able to identify significantly more redundant constraints than previously proposed algorithms, especially in constraint networks with larger proportions of partial overlap relations.© 2015 Elsevier B.V. All rights reserved.1. IntroductionQualitative spatial reasoning is a common subfield of artificial intelligence and geographical information science, and has applications ranging from natural language understanding [13], robot navigation [46], geographic information systems (GISs) [18], sea navigation [54], to high level interpretation of video data [48].Typically, the qualitative approach represents spatial information by introducing a relation model on a domain of spatial entities, which could be points, line segments, rectangles, or arbitrary regions. In the literature, such a relation model is often called a qualitative calculus [34]. In the past three decades, dozens of spatial (as well as temporal) qualitative calculi have been proposed in the literature (cf. [11]). Among these, Interval Algebra (IA) [1] and the RCC8 algebra [41] are widely known as the most influential qualitative calculi for representing qualitative temporal and, respectively, spatial information. Other well-known qualitative calculi include Point Algebra (PA) [51], Cardinal Relation Algebra (CRA) [33], Rectangle Algebra (RA) [24], the RCC5 algebra [41], etc.* Corresponding author at: Centre for Quantum Computation & Intelligent Systems, University of Technology Sydney, Sydney, Australia.(M. Duckham), aboth@student.unimelb.edu.au (A. Both).E-mail addresses: sanjiang.li@uts.edu.au (S. Li), zhiguo.long@student.uts.edu.au (Z. Long), liuweiming@baidu.com (W. Liu), matt@duckham.orghttp://dx.doi.org/10.1016/j.artint.2015.03.0100004-3702/© 2015 Elsevier B.V. All rights reserved.52S. Li et al. / Artificial Intelligence 225 (2015) 51–76Using a qualitative calculus M, we represent spatial or temporal information in terms of relations in M, and formulate a spatial or temporal problem as a set of qualitative constraints (called a qualitative constraint network). A qualitative constraint has the form (xR y), which specifies that the two variables x, y are related by the relation R. The consistency problemis to decide whether a set of qualitative constraints can be satisfied simultaneously. The consistency problem has been investigated in depth for many qualitative calculi in the literature, see e.g., [51,50,33,40,39,43,42,14,55,37,28,35,45,30].In this paper, we consider the important problem of redundant qualitative constraints. Given a set (cid:2) of qualitative constraints, we say a constraint (xR y) in (cid:2) is redundant if it is entailed by the rest of (cid:2), i.e., removing (xR y) from (cid:2) will not change the solution set of (cid:2). It is natural to ask when a network contains redundant constraints and how to get a non-redundant subset without changing the solution set. We call a subset of (cid:2) a prime subnetwork of (cid:2) if it contains no redundant constraints and has the same solution set as (cid:2).The redundancy problem (i.e., the problem of determining if a constraint is redundant in a network) is related to the minimal label problem (cf. [38,8,20,36,3]). A qualitative constraint network (cid:2) is called minimal if for each constraint (xR y)in (cid:2), R is the minimal (i.e., the strongest) relation between x, y that is entailed by (cid:2). Roughly speaking, the minimal network removes ‘redundant’ or ‘unnecessary’ basic relations from each constraint, while the redundancy problem removes ‘redundant’ or ‘unnecessary’ constraints from the constraint network.We show in this paper that it is in general co-NP hard to determine if a constraint is redundant in a qualitative constraint network. But if all constraints in (cid:2) are taken from a tractable subclass1 S then a prime subnetwork can be found in poly-nomial time. For example, if S is a tractable subclass of RCC5 or RCC8 that contains all basic relations, then we can find a prime subnetwork in O (n5) time. Furthermore, if S is a subalgebra of RCC5 or RCC8 in which weak composition distributes over nonempty intersections, then (cid:2) has a unique prime subnetwork, which is obtained by removing all redundant con-straints from (cid:2). We also devise a cubic time algorithm for computing this unique prime subnetwork, which has the same time complexity as the two approximate algorithms of Wallgrün [52].As a by-product, we identify an important class of subalgebras of qualitative calculi, called distributive subalgebras. A sub-algebra D of a qualitative calculus M is called distributive if weak composition distributes over nonempty intersections in D. We show that any path-consistent network over a distributive subalgebra is weakly globally consistent and minimal, where weakly global consistency is a notion similar to but weaker than the well-known notion of global consistency (cf. Definition 5). For RCC8, we identify two maximal distributive subalgebras which are not contained in any other distributive subalgebras, one contains 41 relations and the other contains 64. The 41 relations contained in the first subalgebra are exactly the convex RCC8 relations identified in [8].In this paper, we are mainly interested in topological constraints, as these are the most important kind of qualitative spatial information. A large part of our results can easily be transplanted to other qualitative calculi like PA, IA, CRA and RA. In particular, let M be one of PA, IA, CRA and RA and S a distributive subalgebra of M over which path-consistency implies consistency. Then we can show that any path-consistent network over S is globally consistent and minimal.2 For ease of presentation, we state and prove these results only for RCC5 and RCC8, but indicate in Table 5 which result is applicable to which calculus.1.1. MotivationAs in the case of propositional logic formulas [32], redundancy of qualitative constraints “often leads to unnecessary computation, wasted storage, and may obscure the structure of the problem” [5].3 Finding a prime subnetwork can be useful in at least the following aspects: a) computing and storing the relationships between spatial objects and hence saving space for storage and communication; b) facilitating comparison (or measure the distance) between different constraint networks; c) unveiling the essential network structure of a network (e.g., being a tree or a graph with a bounded tree-width); and d) adjusting geometrical objects to meet topological constraints [52].To further motivate our discussion, we focus on one specific application to illustrate the application area a. and briefly explain how redundancy checking or finding a prime subnetwork helps to solve the application areas b–d.Fig. 1 gives a small example of a set of spatial regions formed by the geographic “footprints” associated with placenames in the Southampton area of the UK. The footprints are derived from crowd-sourced data, formed from the convex hull of the sets of coordinate locations at which individuals used the placenames on social media (cf. [25]). Communicating and reasoning with the qualitative aspects of such data may require the storage and manipulation of large numbers of complex geometries with millions of vertices or large constraint networks with millions of relations.Even for the small example in Fig. 1, the 84 footprints then require 84 ∗ 83/2 = 3486 stored relations. The moderate-sized footprint data set from which Fig. 1 is adapted contains a total of 3443 footprints which leads to a constraint network with 5,925,403 relations. Similarly, a moderate-sized geographic data set of only 1559 statistical areas in Tasmania, explored further in later sections, contains in total 3,093,551 vertices. In the case of both footprints and statistical areas, many of the relationships can be inferred, and computing the prime subnetwork can potentially reduce the number of stored 1 Here a subclass S is tractable if the consistency of any constraint network defined over S can be determined in polynomial time.2 For PA, IA, CRA and RA, weakly global consistency is equivalent to global consistency.3 It is worth noting that redundancy can also enhance propagation during computation (cf. [10]).S. Li et al. / Artificial Intelligence 225 (2015) 51–7653Fig. 1. Examples of crowd-sourced geographic placename “footprints” around Southampton, UK.relationships to be approximately linear in the number of regions (i.e., average-case space complexity of O (n)), as opposed to linear in the number of constraints (i.e., space complexity (cid:3)(n2)) (see Section 5). In the case of the Southampton constraint network, 1324 redundant relations lead to a prime subnetwork with only 2162 relations needing to be stored. For the full data set, 5,604,200 redundant relations lead to a prime subnetwork of just 321,203 relations (in contrast to the full constraint network of almost 6 million relations).As for application area b., suppose (cid:2), (cid:2)(cid:3)are two constraint networks over the same set of n variables. The similarity can be measured by computing the distance of each constraint (xR y) in (cid:2) with the corresponding constraint and sum them up (see e.g., [12,53,29]), i.e.,of (cid:2) and (cid:2)(cid:3)y) in (cid:2)(cid:3)(xR(cid:3)(cid:2)dist((cid:2), (cid:2)(cid:3)) ={dist(R, R(cid:3)) : (xR y) ∈ (cid:2) and (xR(cid:3)y) ∈ (cid:2)(cid:3)}.Clearly, if (cid:2) and (cid:2)(cid:3)we use prime subnetworks. Let (cid:2)pr and (cid:2)(cid:3)are complete networks, we need O (n2) additions. This number, however, can be significantly reduced if pr be, respectively, prime subnetworks of (cid:2) and (cid:2)(cid:3). We definedistpr((cid:2), (cid:2)(cid:3)) =(cid:2){dist(R, R(cid:3)) : (xR y) ∈ (cid:2), (xR(cid:3)y) ∈ (cid:2)(cid:3), (xR y) ∈ (cid:2)pr or (xR(cid:3)y) ∈ (cid:2)(cid:3)pr}.That is, the distance of (cid:2) and (cid:2)(cid:3)pr. pr are sparse enough, i.e., they contain a small number of (non-redundant) constraints, this will significantly is approximated by distpr((cid:2), (cid:2)(cid:3)), which only involves constraints in either (cid:2)pr or (cid:2)(cid:3)If (cid:2)pr and (cid:2)(cid:3)simplify the comparison of two constraint networks.In the case of application area c., a prime subnetwork unveils the essential network structure, or the skeleton, of a network, and the relation between a prime subnetwork and a constraint network is analogous to the relation between a spanning tree/forest [7] and a graph. Moreover, by the results of [6] and [26], we know it is tractable to determine the consistency of a constraint network with a bounded tree-width. Therefore, in general, checking the consistency of a prime subnetwork will be easier than checking the consistency of the network itself.As for application area d., Wallgrün [52] proposed a method for exploiting qualitative spatial reasoning for topological adjustment of spatial data, which is based on a translation of the constraints in an input constraint network (say (cid:2)) into systems of (in)equations. To simplify the complexity of topological adjustment, he suggested replacing (cid:2) by an equivalent one (say (cid:2)(cid:3)the better it is. A prime subnetwork is, roughly speaking, an optimal solution and contains fewest constraints. Therefore, replacing (cid:2) with a prime subnetwork will significantly simplify the complexity of topological adjustment.) which has fewer redundant constraints. It is clear that the fewer constraints contained in (cid:2)(cid:3)54S. Li et al. / Artificial Intelligence 225 (2015) 51–761.2. Related worksRedundancy checking is an important task in AI research, in particular in knowledge representation and reasoning. For example, Ginsberg [21] and Schmolze and Snyder [44] designed algorithms for checking redundancy of knowledge bases; Gottlob and Fermüller [22] and Liberatore [32] analysed the computational properties of removing redundancy from a clause and a CNF formula, respectively; and Grimm and Wissmann [23] considered checking redundancy of ontologies.In research on constraint satisfaction problems (CSPs), there are also many studies of constraint redundancy. While most of this research concerns redundant modelling (e.g., [10]), Chmeiss et al. [9] studied redundancy modulo a given local consistency. Their paper is close in spirit to ours. Let (cid:2) be a CSP and φ a local consistency. Chmeiss et al. call a constraint cin (cid:2) φ-redundant iff ((cid:2) \ {c}) ∪ {¬c} is φ-inconsistent. Because path-consistency implies consistency for RCC5 and RCC8 constraint networks over their tractable subclasses [42], our notion of redundancy (when restricted to networks over these tractable subclasses) is equivalent to redundancy modulo path-consistency in the sense of [9].In qualitative spatial reasoning, the redundancy problem was first considered by Egenhofer and Sharma [19]. They ob-served that “For any scene description, the set of n2 binary topological relations between the n objects is redundant since some of these topological relations are always implied by others” and a minimal set (i.e., a prime subnetwork) contains k relations with (n − 1) ≤ k ≤ (n2 − n)/2. But they did not provide any efficient algorithm for deriving such a minimal set. In a recent paper, Wallgrün [52] proposed two algorithms to approximately find the prime subnetwork. The essence of the approximate algorithms is to replace R i j with the universal constraint if there exists k such that the weak composition of R ik and Rkj is contained in R i j . As was noted in [52], neither of these two algorithms is guaranteed to provide the optimal simplification. But it is worth noting that these two approximate algorithms are applicable to general constraint networks which are not necessarily over a distributive subalgebra. In Section 5, we will empirically compare our method with the methods of Wallgrün.The property of distributivity was first used by van Beek [50] for IA, but the notion of distributive subalgebra is new. It is not difficult to show that PA, IA, RCC5 and RCC8 all have two maximal distributive subalgebras (see Appendix B for these subalgebras of RCC5 and RCC8). Very interestingly, the two maximal distributive subalgebras of IA are exactly the subalgebras CIA and SIA discussed in [2], where Amaneddine and Condotta proved that CIA and SIA are the only maximal subalgebras of IA over which path-consistent networks are globally consistent. For RCC8, the maximal distributive subalge-bra D841 (see Appendix B) turns out to be the class of convex RCC8 relations found in [8], where Chandra and Pujari proved that path-consistent networks over D841 are minimal. The other maximal distributive subalgebra of RCC8, which contains 64 relations, has not been reported before. Furthermore, we also show that every path-consistent constraint network (cid:2) over a distributive subalgebra is weakly globally consistent and minimal. This has not been studied for RCC5 and RCC8 before. Based on subclasses for which path-consistency implies minimality, Amaneddine and Condotta [3] proposed an efficient algorithm for solving the minimal label problem. Their algorithm can also be applied to distributive subalgebras of RCC5 and RCC8 (as well as PA, IA, RA, and CRA).An extended abstract [15] of this paper was presented in KR-2014.The remainder of this paper is structured as follows. We first recall the RCC5 and RCC8 constraint languages and intro-duce the notion of distributive subalgebras in Section 2, and then define the key notions of redundant constraint and prime subnetwork in Section 3. In Section 4 we show that consistent RCC5 or RCC8 networks over distributive subalgebras have unique prime subnetworks. In Section 5 we present a detailed evaluation of a practical implementation of our algorithm, in comparison with the approximations proposed by Wallgrün [52]. Section 6 concludes the paper and outlines future research.2. RCC5 and RCC8 constraint languagesSuppose U is a domain of spatial or temporal entities. Write Rel(U ) for the Boolean algebra of binary relations on U . A qualitative calculus M on U is defined as a finite Boolean subalgebra of Rel(U ) which has an atom that contains the identity relation on U and is closed under converse, i.e., R is in M iff its converse−1 = {(a, b) ∈ U × U : (b, a) ∈ R}Ris in M [34]. A relation α in a qualitative calculus M is basic if it is an atom in M. Well-known qualitative calculi include, among others, PA [51], IA [1], CRA [33], RA [24], and RCC5 and RCC8 [41]. Note that the set of basic relations of a qualitative calculus is jointly exhaustive and pairwise disjoint (JEPD).Since we are mainly interested in topological constraints, in this section, we only recall the RCC5 and RCC8 constraint languages and refer the reader to [11,30] for constraint languages that use other qualitative calculi. For convenience, we denote by RCC5/8 either RCC5 or RCC8.2.1. RCC5 and RCC8The RCC5/8 constraint language is a fragment of the Region Connection Calculus (RCC) [41], which is perhaps the most influential formalism for spatial relations in artificial intelligence. The RCC is a first order theory based on a binary connect-edness relation and has canonical models defined over connected topological spaces [49,31].S. Li et al. / Artificial Intelligence 225 (2015) 51–7655Let X be a connected topological space and U the set of nonempty regular closed sets of X . We assume U is infinite. We call each element in U a region. Note that a region may have multiple connected components as well as holes. Write Pfor the binary “part-of” relation on U , i.e., xP y if x ⊆ y. Definex PP y ≡ x P y ∧ ¬( y P x)xO y ≡ (∃z)(z P x ∧ z P y)x DR y ≡ ¬(xO y)x PO y ≡ xO y ∧ ¬(x P y) ∧ ¬( y P x)x EQ y ≡ x P y ∧ y P xWrite PP−1 for the converse of PP. ThenB5 = {DR, PO, EQ, PP, PP−1}(1)is a JEPD set of relations, i.e., for any two regions a, b ∈ U , a, b is related by exactly one of the above five relations. We call the Boolean algebra generated by these five relations the RCC5 algebra, which consists of all relations that are unions of the five basic relations in (1). For convenience, we denote a non-basic RCC5 relation R as the subset of B5 it contains. For −1, EQ}.example, we write {DR, PO, PP} for the relation DR ∪ PO ∪ PP, and write (cid:6)5 for the universal relation {DR, PO, PP, PPRCC5 relations are in essence part-whole relations. We next introduce a topological relation model. For two regions a, b, we say a is connected to b, written a C b, if a ∩ b (cid:12)= ∅. Using C and P, the following topological relations can be defined [41]:x DC y ≡ ¬(xC y)x EC y ≡ x C y ∧ ¬(xO y)x TPP y ≡ x PP y ∧ (∃z)(z EC x ∧ z EC y)x NTPP y ≡ x PP y ∧ ¬(x TPP y)Write TPP−1 and NTPP−1 for the converses of TPP and NTPP. ThenB8 = {DC, EC, PO, EQ, TPP, NTPP, TPP−1, NTPP−1}(2)is a JEPD set of relations. We call the Boolean algebra generated by these eight relations the RCC8 algebra, which consists of all relations that are unions of the eight basic relations in (2). For convenience, we write (cid:6)8 for the universal relation consisting of all basic relations in B8.2.2. Weak composition tableWhile PA, IA, CRA and RA are all closed under composition, the composition of two basic RCC5/8 relations is not neces-sarily a relation in RCC5/8 [17,31]. For example, the composition of DR and itself is not an RCC5 relation. This is because, for example, PO intersects with, but is not contained in, DR ◦ DR, where ◦ denotes the relational composition operator. In fact, there are three regions a, b, c such that aPOc and a DR b, b DR c. This shows that PO ∩ (DR ◦ DR) is nonempty. Let d, e be two regions such that d PO e and d ∪ e = R2. Clearly, there is no region f such that d DR f and f DR e hold simultaneously. Therefore PO is not contained in DR ◦ DR.For two RCC5/8 relations R and S, we call the smallest relation in RCC5/8 that contains R ◦ S the weak composition of Rand S, written R (cid:14) S [17,31].The weak compositions of RCC5 and RCC8 basic relations are summarised in, respectively, Tables 1 and 2 (from [41]). For each pair of RCC5/8 basic relations (α, β), the table cell corresponding to (α, β) contains all basic relations that are contained in α (cid:14) β. In fact, suppose α, β, γ are three basic RCC5/8 relations. Then we haveγ ∈ α (cid:14) β ⇔ γ ∩ (α ◦ β) (cid:12)= ∅.(3)The weak composition of two (non-basic) RCC5/8 relations R and S can be computed as follows:(cid:3)R (cid:14) S ={α (cid:14) β : α ∈ R, β ∈ S}.Given (xR y) and ( y S z), by definition, we have (xR (cid:14) S z), i.e., {(xR y), ( y S z)} entails (xR (cid:14) S z).From the RCC5 composition table, the following result is clear.Lemma 1. For any nonempty RCC5 relation R, we havePO ∈ PO (cid:14) R, PO ∈ R (cid:14) PO, and DR ∈ DR (cid:14) R, DR ∈ R (cid:14) DR.56S. Li et al. / Artificial Intelligence 225 (2015) 51–76Table 1Composition table for RCC5 relations.(cid:14)DRPOPPPPEQ−1DR−1DR, PO, PP, PPDR, PO, PPDRDR, PO, PPDR−1−1, EQPODR, PO, PPDR, PO, PP, PPDR, PO, PPPO, PPPO−1−1, EQPPDR, PO, PPPO, PPPPPO, PP, PPPP−1, EQ−1PP−1DRDR, PO, PPDR, PO, PP, PPPPPP−1−1−1, EQTable 2Composition table for RCC8 relations.(cid:14)DCECPODCDC, EC, POTPP, NTPP−1, EQTPP−1NTPPDC, EC, PO−1TPPNTPP−1DC, EC, PO−1TPPNTPP−1TPPDCNTPPDC−1TPP−1NTPPDC, EC, PO−1TPPNTPP−1DC, EC, PO−1TPPNTPP−1ECDC, ECPOTPPNTPPDC, EC, POEQ, TPP−1TPPDC, EC, PO−1TPPNTPP−1DCECDCEC, PO−1TPPNTPP−1PODC, ECPOTPPNTPPDC, EC, POTPPNTPPDC, EC, POTPP, TPPNTPP, NTPP−1, EQ−1DC, ECPO, TPPNTPPDC, ECPOTPPNTPP−1POTPPNTPP−1TPPDC, ECPOTPPNTPPEC, POTPPNTPPPOTPPNTPPTPPNTPPNTPPDC, ECPOTPPNTPPPOTPPNTPPPOTPPNTPPNTPPNTPPNTPPPO, EQTPPTPP−1POTPPNTPP−1POTPPNTPP−1−1POTPPNTPP−1−1POTPPNTPP−1PO, TPP, EQ−1NTPP, TPPNTPP−1−1TPPDC−1NTPPDCDCECDCDC, EC, PO−1TPPNTPP−1DC, EC, PO−1TPPNTPP−1DC, EC, PO−1TPP, TPPNTPP, EQNTPP−1−1NTPPDC, EC, PO−1TPPNTPP−1DC, EC, POEQ, TPP−1TPPDC, ECPOTPPNTPP−1TPP−1NTPP−1NTPPEQDRPOPPPPEQ−1EQDCECPOTPPNTPP−1TPP−1NTPP−1NTPPEQDCECPOTPPNTPP−1TPP−1NTPPEQThe following result will be used later.Fig. 2. Illustration of the cycle law.Proposition 2. (See [16].) With the weak composition operation (cid:14), the converse operation −1, and the identity relation EQ, RCC5 and RCC8 are relation algebras. In particular, the weak composition operation (cid:14) is associative. Moreover, for RCC5/8 relations R, S, T , we have the following cycle law(R (cid:14) S) ∩ T (cid:12)= ∅ ⇔ (R−1 (cid:14) T ) ∩ S (cid:12)= ∅ ⇔ (T (cid:14) S−1) ∩ R (cid:12)= ∅.(4)Fig. 2 gives an illustration of the cycle law. In the following, we assume (cid:14) takes precedence over ∩.2.3. Qualitative constraint networkLet M be a qualitative calculus with domain U . A qualitative constraint over M has the form (xR y), where x, y are variables taking values from U and R is a relation (not necessarily basic) in M. Given a set (cid:2) of qualitative constraints over variables V = {v 1, v 2, . . . , vn} and an assignment σ : V → U , we say σ is a solution of (cid:2) if (σ (v i), σ (v j)) satisfies the constraints in (cid:2) that relate v i to v j for any 1 ≤ i, j ≤ n. We say (cid:2) is consistent or satisfiable if it has a solution.Without loss of generality, we assumeS. Li et al. / Artificial Intelligence 225 (2015) 51–7657• for each pair of variables v i, v j , there is at most one constraint in (cid:2) that relates v i to v j ;• for each pair of variables v i, v j , if there is no constraint in (cid:2) that relates v i to v j , we say v i is related to v j by (cid:6), the • for each pair of variables v i, v j , the constraint in (cid:2) that relates v i to v j is the converse of the constraint that relates universal relation in M;v j to v i ;• for each variable v i , the constraint in (cid:2) that relates v i to itself is the identity relation (e.g., EQ in RCC5/8).(cid:3)In this sense, we call (cid:2) a network of constraints, and denote by for example R i j the constraint that relates v i to v j . Let (cid:2) = {v i R i j v j: 1 ≤ i, j ≤ n} and (cid:2)(cid:3) = {v i Rare (cid:3)equivalent if they have the same set of solutions; and say (cid:2) refines (cid:2)(cid:3)i j for all (i, j). We say a constraint network (cid:2) is a basic network if each constraint is either a basic relation or the universe relation; and say a basic network is completeif there are no universal relations. In this paper, we also call every complete basic network that refines (cid:2) a scenario of (cid:2).i j v j : 1 ≤ i, j ≤ n} be two constraint networks over M. We say (cid:2) and (cid:2)(cid:3)if R i j ⊆ RSuppose S is a subclass of M. We say a constraint network (cid:2) = {v i R i j v j : 1 ≤ i, j ≤ n} is over S if R i j ∈ S for every pair of variables v i, v j . The consistency problem over S, written as CSP(S), is the decision problem of the consistency of an arbitrary constraint network over S. The consistency problem over PA (i.e., CSP(PA)) is in P [51,50] and the consistency problems over IA, CRA, RA and RCC5/8 are NP-complete [40,33,4,43]. We say S is a tractable subclass of M if CSP(S) is tractable. It is well-known that IA, CRA, RA, and RCC5/8 all have large tractable subclasses, in particular, RCC8 has three maximal tractable subclasses that contain all basic relations [42] and RCC5 has only one [43,27].The consistency of a qualitative constraint network can be approximately determined by a local consistency algorithm. We say a network (cid:2) = {v i R i j v j : 1 ≤ i, j ≤ n} is path-consistent4 if for every 1 ≤ i, j, k ≤ n, we have5∅ (cid:12)=R i j ⊆ R ik (cid:14) Rkj.In general, path-consistency can be enforced by calling the following rule until an empty constraint occurs (then (cid:2) is inconsistent) or the network becomes stable.R i j ← (R ik (cid:14) Rkj) ∩ R i j,where 1 ≤ i, j, k ≤ n are arbitrary. A cubic time algorithm, henceforth called the path-consistency algorithm or PCA, has been devised to enforce path-consistency. For any qualitative constraint network (cid:2), the PCA either detects inconsistency of (cid:2) or returns a path-consistent network, written (cid:2)p , which is equivalent to (cid:2) and also known as the algebraic closure or a-closureof (cid:2) [34]. It is easy to see that in this case (cid:2)p refines (cid:2), i.e., we have S i j ⊆ R i j for each constraint (v i S i j v j) in (cid:2)p .For RCC5/8 constraint networks, we haveProposition 3. (See [42].) Let S be a tractable subclass of RCC5/8 which contains all basic relations. An RCC5/8 network (cid:2) over S is consistent if applying PCA to (cid:2) does not detect inconsistency.In particular, we haveProposition 4. (See [39].) A basic RCC5/8 network (cid:2) is consistent if it is path-consistent.Consistency is closely related to the notions of minimal network (cf. [8,20,36]) and global consistency.Definition 5. Let M be a qualitative calculus with domain U . Suppose (cid:2) = {v i T i j v j : 1 ≤ i, j ≤ n} is a qualitative constraint network over M and V = {v 1, . . . , vn}. For a pair of variables v i, v j ∈ V (i (cid:12)= j) and a basic relation α in T i j , we say α is feasible if there exists a solution (a1, a2, . . . , an) in U of (cid:2) such that (ai, a j) is an instance of α. We say (cid:2) is minimal if for every pair of variables v i , v j (i (cid:12)= j) every basic relation α in T i j is feasible.We say (cid:2) is weakly globally consistent (globally consistent, respectively) if any consistent scenario (solution, respectively) is any nonempty subset of V and V (cid:3) can be extended to a consistent scenario (solution, respectively) of (cid:2), where V(cid:3)of (cid:2)↓(cid:2)↓V (cid:3) is the restriction of (cid:2) to V(cid:3).The notion of weakly global consistency is weaker than the notion of global consistency. The latter requires that every partial solution can be extended to obtain a global solution, which is too strong for even basic RCC5/8 networks. For example, consider the RCC5 constraint network {v 1 PO v 2, v 1 DR v 3, v 2 DR v 3}. As PO is not contained in the composition of 4 For PA, IA, CRA and RA, since weak composition is composition, this definition of path-consistency is equivalent to that for finite constraint satisfaction problems [38]; for RCC5/8, the two definitions are different mainly in the use of weak composition instead of composition.5 Recall we have assumed that R ji is the converse of R i j for each pair of variables v i , v j .58S. Li et al. / Artificial Intelligence 225 (2015) 51–76DR and DR (cf. the example shown in Section 2.2), this network is weakly globally consistent but not globally consistent. The two notions are, however, equivalent for PA, IA, CRA and RA, as consistent basic networks over these calculi are all globally consistent.While every consistent RCC5/8 constraint network has a unique minimal network, it is in general NP-hard to compute it [36]. The following result shows that every weakly globally consistent network is also minimal.Proposition 6. Let M be a qualitative calculus with domain U . Suppose (cid:2) = {v i T i j v j : 1 ≤ i, j ≤ n} is a qualitative constraint network over M. If (cid:2) is weakly globally consistent, then it is minimal.Proof. For every pair of variables v i, v j (i (cid:12)= j) and every basic relation α in T i j , it is clear that {v iα v j} is a consistent sce-nario of (cid:2)↓{v i ,v j }. Because (cid:2) is weakly globally consistent, we can extend this to a consistent scenario of (cid:2). In other words, there exists a solution (a1, a2, . . . , an) of (cid:2) in U such that (ai, a j) is an instance of α. This shows that (cid:2) is minimal. (cid:2)In what follows, we write (cid:2)m for the minimal network of (cid:2), and (cid:2)p for the a-closure of (cid:2).2.4. Distributive subalgebraAs mentioned before, RCC5 has a unique maximal tractable subclass which contains all basic relations [43,27]. This subclass, written H5, contains all RCC5 relations except{PP, PP−1}, {PP, PP−1, EQ}, {DR, PP, PP−1}, {DR, PP, PP−1, EQ}.Write (cid:4)B5 for the closure of B5 under converse, intersection, and weak composition in RCC5. Then (cid:4)B5 contains all basic relations as well as{PO, PP}, {PO, PP{DR, PO, PP}, {DR, PO, PP−1}, {PO, PP, PP−1, EQ},−1}, {DR, PO}, (cid:6)5,where (cid:6)5 = {DR, PO, PP, PPnonempty intersections in the following sense.−1, EQ}. It is interesting to note that in (cid:4)B5 the weak composition operation is distributive over Lemma 7. Let R, S, T be three relations in (cid:4)B5. Suppose S ∩ T is nonempty. Then we haveR (cid:14) (S ∩ T ) = R (cid:14) S ∩ R (cid:14) Tand (S ∩ T ) (cid:14) R = S (cid:14) R ∩ T (cid:14) R.We note the requirement that S ∩ T is nonempty is necessary, as we have for example {DR} (cid:14) {DR} ∩ {DR} (cid:14) {PO} ={DR, PO, PP} (cid:12)= ∅ while {DR} (cid:14) ({DR} ∩ {PO}) = {DR} (cid:14) ∅ = ∅.In what follows, we call such a subclass a distributive subalgebra. Formally, we haveDefinition 8. Let M be a qualitative calculus. A subclass S of M is called a distributive subalgebra if• S contains all basic relations; and• S is closed under converse, weak composition, and intersection; and• weak composition distributes over nonempty intersections of relations in S.Write (cid:4)Bl for the closure of Bl in RCCl (l = 5, 8) under converse, weak composition, and intersection. It is straightforward to check that both (cid:4)B5 and (cid:4)B8 are distributive subalgebras. This shows that the above definition is well-defined and every distributive subalgebra of RCCl contains (cid:4)Bl as a subclass.We say a distributive subalgebra S is maximal if there is no other distributive subalgebra that properly contains S. To find all maximal distributive subalgebras of RCC5 and RCC8, we start with (cid:4)Bl and then try to add other relations to this subalgebra to get larger distributive subalgebras. It turns out that RCC5 has only two maximal distributive subalgebras, denoted by D564. In Appendix B we list all relations contained in these subalgebras, and explain how we find these subalgebras and why there are no other maximal distributive subalgebras.20. Similarly, RCC8 also has only two, denoted by D841 and D814 and D5The next lemma summarises one useful property of distributive subalgebras.Lemma 9. Let S be a distributive subalgebra of RCC5/8. Suppose R, S, T are three relations in S. Then R ∩ S ∩ T = ∅ iff R ∩ S = ∅, or R ∩ T = ∅, or S ∩ T = ∅.S. Li et al. / Artificial Intelligence 225 (2015) 51–7659Fig. 3. An RCC5 network, where (v 1 PP v 2) is redundant.Proof. We only need to show the “only if” part.For two RCC5/8 relations P , Q , we first note that P ∩ Q (cid:12)= ∅ iff EQ ∈ Qthere exist two regions a, b such that (a, b) ∈ P ∩ Q . This implies that (b, b) ∈ QHence EQ ∩ Qif EQ ∈ Q(a, b) ∈ P . Thus (a, b) ∈ P ∩ Q and, hence, P ∩ Q (cid:12)= ∅.−1 ◦ P is nonempty and, by the definition of weak composition and (3), EQ ∈ Q−1 (cid:14) P . In fact, from P ∩ Q (cid:12)= ∅, we know −1 and (a, b) ∈ P . −1 (cid:14) P . On the other hand, −1 and −1 ◦ P is nonempty. This implies that there exist two regions a, b such that (b, a) ∈ Q−1 ◦ P as (b, a) ∈ Q−1 (cid:14) P , then EQ ∩ QSuppose R ∩ S ∩ T is empty but R ∩ S, R ∩ T and S ∩ T are all nonempty. By the above property, we have EQ ∈ Tand EQ ∈ T−1 (cid:14) S. Because R, S, T are relations in the distributive subalgebra S and R ∩ S (cid:12)= ∅, we know−1 (cid:14) R−1 (cid:14) R) ∩ (TEQ ∈ (T−1 (cid:14) (R ∩ S) (cid:12)= ∅ and, hence, R ∩ S ∩ T (cid:12)= ∅. A contradiction. (cid:2)−1 (cid:14) (R ∩ S).−1 (cid:14) S) = TThus TThe above result does not hold in general for non-distributive subalgebras. For example, consider the RCC5 relations −1}. R, S, T are all in H5 but S is not in any distributive subalgebra of RCC5. R = {PO, PP}, S = {DR, PP}, T = {DR, PO, PPWe have R ∩ S ∩ T = ∅ but R ∩ S = {PP}, R ∩ T = {PO}, and S ∩ T = {DR} are all nonempty.It is worth noting that all distributive subalgebras of RCC5 are contained in H5 , the maximal tractable subclass of RCC5 identified in [43,27], and all distributive subalgebras of RCC8 are contained in (cid:4)H8, one of the three maximal subclasses of RCC8 identified in [42]. In particular, by Proposition 3, we haveCorollary 10. Let S be a distributive subalgebra of RCC5/8. Then every path-consistent network over S is consistent.3. Redundant constraint and prime subnetworkIn this section we first give definitions of redundant constraints and prime subnetworks and then discuss how to find a prime subnetwork in general.Definition 11. Let M be a qualitative calculus with domain U . Suppose (cid:2) is a qualitative constraint network over variables V = {v 1, . . . , vn}. We say (cid:2) entails a constraint (v i R v j), written (cid:2) |(cid:19) (v i R v j), if for every solution {a1, . . . , an} of (cid:2) in U we have (ai, a j) ∈ R. A constraint (v i R v j) in (cid:2) is redundant if (cid:2) \ {(v i R v j)} entails (v i R v j). We say (cid:2) is reducible if it has a redundant constraint, and say (cid:2) is irreducible or prime if otherwise. We say a subset (cid:2)(cid:3)of (cid:2) is a prime subnetwork of (cid:2) if (cid:2)(cid:3)is irreducible and equivalent to (cid:2).Note that each universal constraint (v i (cid:6) v j) in (cid:2) is, by definition, a redundant constraint in (cid:2). We call this a trivialredundant constraint. In the following, we give an example of non-trivial redundant RCC5 constraints.Example 12. Suppose(cid:2) = {v 1 PP v 2, v 1 PP v 5, v 3 PP v 1, v 4 PP v 2, v 5{DR, PP}v 2, v 3POv 4}.After enforcing path-consistency to (cid:2) \{(v 1 PP v 2)}, we have (v 5 PP v 2) and hence (v 1 PP v 2). This shows that (cid:2) \{(v 1 PP v 2)}entails (v 1 PP v 2) and hence (v 1 PP v 2) is redundant (Fig. 3). Moreover, (v 1 PP v 2) is the only non-trivial redundant con-straint in (cid:2) and (cid:2) \ {(v 1 PP v 2)} is the unique prime subnetwork of (cid:2).Given a qualitative constraint network (cid:2), a very interesting question is, how to find a prime subnetwork of (cid:2)? This problem is clearly at least as hard as determining if (cid:2) is reducible. Similar to the case of propositional logic formulae [32], we have the following result for RCC5/8.Proposition 13. Let (cid:2) be an RCC5/8 network and suppose (xR y) is a constraint in (cid:2). It is co-NP-complete to decide if (xR y) is redundant in (cid:2).60S. Li et al. / Artificial Intelligence 225 (2015) 51–76Proof. First of all, we note that (xR y) is redundant in (cid:2) iff ((cid:2) \ {(xR y)}) ∪ {xRc y} is inconsistent, where Rc is the com-plement of R. Since it is NP-complete to decide if an RCC5/8 network is consistent, we know this redundancy problem (i.e., the problem of determining if a constraint is redundant in a network) is in co-NP. On the other hand, it is easy to construct a polynomial many-one reduction from the inconsistency problem of RCC5/8 to the redundancy problem. Fix two variables x, y. Suppose (cid:2) is an arbitrary RCC5/8 network over V and x, y are two variables in V . Then (cid:2) is inconsistent iff (cid:2) \ {(xR y)} |(cid:19) (xRc y) iff (xRc y) is redundant in ((cid:2) \ {(xR y)}) ∪ {xRc y}. This shows that the redundancy problem is co-NP complete. (cid:2)Similarly, we can show that the redundancy problems for IA, CRA, and RA are also co-NP-complete and, because the consistency problem of PA is in P, the redundancy problem for PA is in P.To determine if a network (cid:2) is reducible, we need in the worst case check for O (n2) constraints in (cid:2) whether they are redundant in (cid:2). By the above proposition, this is a decision problem in (cid:10)P2 , the class of problems solvable in polynomial time with an oracle for some NP-complete problem. Finding a prime subnetwork of (cid:2) is more complicated. A naive method is to remove redundant constraints iteratively from (cid:2) until we get an irreducible network. Let c1, c2, . . . , ck be the sequence of all non-trivial constraints in (cid:2). Write (cid:2)0 = (cid:2), and define(cid:5)(cid:2)i+1 =(cid:2)i \ {ci+1}(cid:2)iif ci+1 is redundant in (cid:2)i;if otherwise(5)for 0 ≤ i ≤ k − 1. Then it is easy to show that (cid:2)k is a prime subnetwork of (cid:2). Suppose we have an oracle which can tell if a constraint is redundant in a network. Then (cid:2)k can be constructed in O (n2) time. We note that the construction of the prime subnetwork (cid:2)k depends on the order of the constraints c1, c2, . . . , ck.Despite that it is in general co-NP-complete to determine if a constraint is redundant, we have a polynomial time procedure if the constraints are all taken from a tractable subclass of RCC5/8.Proposition 14. Let S be a tractable subclass of RCC5/8 that contains all basic relations. Suppose (cid:2) is a network over S. Then in O (n3)time we can determine whether a constraint is redundant in (cid:2) and in O (n5) time find all redundant constraints of (cid:2). In addition, a prime subnetwork for (cid:2) can be found in O (n5) time.Proof. Suppose (xR y) is a constraint in (cid:2) and let (cid:2)(cid:3) ≡ (cid:2) \ {(xR y)}. To determine if (xR y) is redundant in (cid:2), we check for each basic RCC5/8 relation γ that is not in R, whether (cid:2)(cid:3) ∪ {(xγ y)} is consistent. If the answer is confirmative for one γ (note that RCC5 has five and RCC8 has eight basic relations), then (xR y) is not redundant in (cid:2). By Proposition 3, the consistency of (cid:2)(cid:3) ∪ {(xγ y)} can be determined by enforcing path-consistency and hence can be determined in cubic time. Since there are O (n2) constraints in (cid:2), in O (n5) time we can find all redundant constraints of (cid:2).Suppose c1, c2, . . . , ck are all non-trivial constraints of (cid:2). We define (cid:2)0 = (cid:2), and set (cid:2)i+1 as in (5). Note that if a constraint is non-redundant in (cid:11) then it is also non-redundant in any subset of (cid:11). It is straightforward to show that (cid:2)k is a prime subnetwork of (cid:2). Since we can determine in cubic time whether a constraint is redundant in a network over S, (cid:2)k can be computed in k × O (n3) time, which is bounded by O (n5). (cid:2)Similar conclusions apply to other calculi. For example, since the consistency problem of PA can be solved in O (n2) time, the redundancy problem of PA can be solved in O (n2) time and we can find a prime subnetwork for any consistent PA network in O (n4) time.It is often interesting to know when a constraint is contained in some or all prime subnetworks. The following notion will be helpful in partially answering questions like this.Definition 15. Let M be a qualitative calculus and suppose (cid:2) is a qualitative constraint network over M. Write (cid:2)c for the set of non-redundant constraints in (cid:2). We call (cid:2)c the core of (cid:2).It is easy to see that the core of (cid:2) is contained in every prime subnetwork of (cid:2). Are prime subnetworks unique? And, is the core itself always a prime subnetwork? The following example shows that in general this is not the case.Example 16. Suppose (cid:2) is the RCC5 network specified as below{v 1 P v 2, v 2 P v 3, v 3 P v 1, v 1 PO v 4, v 2 PO v 4},where P = {PP, EQ}. Then both PO constraints in (cid:2) are redundant. This is because, enforcing path-consistency to {v 1 P v 2, v 2 P v 3, v 3 P v 1} we have v 1 EQ v 2, v 1 EQ v 3, v 2 EQ v 3. Therefore, knowing one PO constraint will infer the other. Moreover, (cid:2) has no other redundant constraints and {v 1 P v 2, v 2 P v 3, v 3 P v 2} is the core of (cid:2) but not equivalent to (cid:2). It is easy to see that (cid:2)c ∪ {v 1 PO v 4} and (cid:2)c ∪ {v 2 PO v 4} are two prime subnetworks of (cid:2).Note that this occurs because there is a cycle of P constraints in (cid:2), i.e., (cid:2) is P-cyclic. In the following we often assume S. Li et al. / Artificial Intelligence 225 (2015) 51–7661that (cid:2) has the following property:(∀i, j)[(i (cid:12)= j) → ((cid:2) (cid:12)|(cid:19) (v i EQ v j))].(6)This implies that no two variables are forced to be identical. We call a network which satisfies (6) an all-different constraint network. Note that an all-different network is always consistent, as an inconsistent network entails everything.The following proposition shows that the all-different requirement is not restrictive at all for constraint networks over a tractable subalgebra.Proposition 17. Let S be a tractable subclass of RCC5/8 that contains all basic relations. Suppose (cid:2) = {v i R i j v j : 1 ≤ i, j ≤ n} is a consistent network over S and (cid:2)p its a-closure. Then, for any i (cid:12)= j, (cid:2) |(cid:19) (v i EQ v j) iff (v i EQ v j) is in (cid:2)p .Proof. The sufficiency part is clear. We only need to show the necessity part. Suppose (cid:2) |(cid:19) (v i EQ v j). We show (v i EQ v j)is in (cid:2)p . Suppose (cid:2)p = {v i S i j v j : 1 ≤ i, j ≤ n}. Because (cid:2) is consistent, (cid:2)p is path-consistent and each S i j is nonempty. By Theorem 21 of [42], (cid:2)p has a consistent scenario (cid:2)∗ = {v iαi j v j : 1 ≤ i, j ≤ n}, where αi j = EQ iff S i j = EQ. In other words, if S i j (cid:12)= EQ, i.e., (v i EQ v j) is not in (cid:2)p , then αi j cannot be EQ and hence (cid:2) does not entail (v i EQ v j). This is a contradiction and hence (v i EQ v j) is in (cid:2)p . (cid:2)The above proposition shows that whether a constraint network is all-different can be answered by enforcing path-consistency. When a constraint network is not all-different, we can amalgamate those identical variables and thus obtain an equivalent but simplified all-different network.In the next section we will show that, if (cid:2) is an all-different constraint network over a distributive subalgebra of RCC5/8, then (cid:2)c is the unique prime subnetwork of (cid:2). This is quite surprising, as, in general, knowing that (xR y) and (u S v) are both redundant in (cid:2) does not imply that (u S v) is also redundant in (cid:2) \ {(xR y)}.4. Networks over a distributive subalgebraIn this section, we assume S is a distributive subalgebra of RCC5/8. Let (cid:2) be an all-different network over S. Because (cid:2) satisfies (6), there is in particular no EQ constraint in (cid:2). We show that (cid:2)c , the core of (cid:2), is equivalent to (cid:2) and hence the unique prime subnetwork of (cid:2). Using this result, we then further give a cubic time algorithm for computing the unique prime subnetwork of (cid:2).To prove that (cid:2)c is equivalent to (cid:2), we need two important results. The first result, stated in Theorem 19, shows that the a-closure of (cid:2) is minimal, i.e. (cid:2)p is exactly (cid:2)m. The second result, stated in Proposition 28, shows that a particular constraint (xR y) is redundant in (cid:2) iff its corresponding constraint in (cid:2)p is redundant in (cid:2)p . Our main result, stated in Theorem 29, then follows directly from these two results.In Section 4.1, we prove Theorem 19; in Section 4.2, we characterise relations in such a minimal network in terms of the weak compositions of paths from x to y in (cid:2); and in Section 4.3 we prove Proposition 28. Using these results, we show in Section 4.3 that (cid:2)c is equivalent to (cid:2) and hence the unique prime subnetwork of (cid:2) and give in Section 4.4 a cubic time algorithm for computing (cid:2)c .4.1. The A-closure of (cid:2) is minimalTo prove that a network is minimal, by Proposition 6, we only need to show that it is weakly globally consistent in the sense of Definition 5.Theorem 18. Let S be a distributive subalgebra of RCC5/8. Suppose (cid:2) = {v i R i j v j : 1 ≤ i, j ≤ n} is a path-consistent network over S. Then (cid:2) is weakly globally consistent.Proof. Write V k = {v 1, v 2, . . . , vk} for 1 ≤ k < n. Without loss of generality, we only show that every consistent scenario can be extended to a consistent scenario of (cid:2)↓of (cid:2)↓. Suppose (cid:10) = {v iδi j v j : 1 ≤ i, j ≤ k} is a consistent scenario V kof (cid:2)↓is a basic relation in R i j . For each 1 ≤ i ≤ k, write T i for Rk+1,i (see Fig. 4 for illustration). Let . Then each δi jV k(cid:6)(cid:4)T i =j=1 T j (cid:14) δ ji .kWe assert that each (cid:4)T i is nonempty. By Lemma 9, it is easy to show by induction on k that, for any set {W 1, W 2, . . . , W k}i=1 W i (cid:12)= ∅ iff W i ∩ W j (cid:12)= ∅ for any 1 ≤ i (cid:12)= j ≤ n. Therefore, to show (cid:4)T i (cid:12)= ∅, we only (cid:3) ≤ n. Applying the cycle law as stated in Proposition 2of k ≥ 3 nonempty relations in S, need to show T j (cid:14)δ ji ∩ T j(cid:3) (cid:14)δ j(cid:3)i (cid:12)= ∅ for any 1 ≤ i ≤ n and any 1 ≤ j (cid:12)= jtwice, we have(cid:6)kV k+162S. Li et al. / Artificial Intelligence 225 (2015) 51–76Fig. 4. Illustration of (cid:2)↓V k+1in the proof of Theorem 18.Fig. 5. An example showing that Theorem 19 does not hold for non-distributive RCC5/8 subalgebras: a path-consistent constraint network (cid:2) over H5.T j (cid:14) δ ji ∩ (T j(cid:3) (cid:14) δ j(cid:3)i) (cid:12)= ∅ iffiffiffiff−1 ∩ T j (cid:12)= ∅(T j(cid:3) (cid:14) δ j(cid:3)i) (cid:14) (δ ji)T j(cid:3) (cid:14) (δ j(cid:3)i (cid:14) δi j) ∩ T j (cid:12)= ∅−1j(cid:3) (cid:14) T j ∩ (δ j(cid:3)i (cid:14) δi j) (cid:12)= ∅T(R j(cid:3),k+1 (cid:14) Rk+1, j) ∩ (δ j(cid:3)i (cid:14) δi j) (cid:12)= ∅.−1j(cid:3) = (Rk+1, j(cid:3) )−1 = R j(cid:3),k+1. Because δ j(cid:3) j ⊆ R j(cid:3) j , we know δ j(cid:3) j ∩ R j(cid:3) j (cid:12)= ∅. Since both (cid:10) and (cid:2) are Note here (δ ji)−1 = δi j and Tpath-consistent, we also have δ j(cid:3) j ⊆ δ j(cid:3)i (cid:14) δi j and R j(cid:3) j ⊆ R j(cid:3),k+1 (cid:14) Rk+1, j . Therefore, we have (R j(cid:3),k+1 (cid:14) Rk+1, j) ∩ (δ j(cid:3)i (cid:14) δi j) ⊇R j(cid:3) j ∩ δ j(cid:3) j (cid:12)= ∅ and hence T j (cid:14) δ ji ∩ T j(cid:3) (cid:14) δ j(cid:3)i (cid:12)= ∅. This shows that (cid:4)T i (cid:12)= ∅ for any 1 ≤ i ≤ n.∪ {vk+1(cid:4)T i v i : 1 ≤ i ≤ k} is path-consistent, we only need to show for 1 ≤ i (cid:12)= i(cid:3) ≤ k that (cid:4)T i (cid:14) δii(cid:3) ⊇ (cid:4)T i(cid:3) . To show that (cid:2)↓V kBy the distributivity and δ ji (cid:14) δii(cid:3) ⊇ δ ji(cid:3) we have(cid:4)T i (cid:14) δii(cid:3) = (k(cid:7)j=1T j (cid:14) δ ji) (cid:14) δii(cid:3) =k(cid:7)j=1T j (cid:14) (δ ji (cid:14) δii(cid:3) ) ⊇k(cid:7)j=1T j (cid:14) δ ji(cid:3) = (cid:4)T i(cid:3) .This shows that (cid:2)↓is clear that (cid:10)(cid:3)consistent scenario which extends (cid:10). (cid:2)∪ {vk+1V kextends (cid:10) from V k to V k+1. Because (cid:2)↓(cid:4)T i v i : 1 ≤ i ≤ k} is path-consistent and hence, by Corollary 10, has a consistent scenario (cid:10)(cid:3)∪ {vk+1V k(cid:4)T i v i : 1 ≤ i ≤ k} refines (cid:2)↓, we know (cid:2)↓V k+1V k+1. It has a Together with Proposition 6, the above result immediately implies that the a-closure of a consistent network (cid:2) over a distributive subalgebra is minimal.Theorem 19. Let S be a distributive subalgebra of RCC5/8. Suppose (cid:2) is a consistent network over S and (cid:2)p its a-closure. Then (cid:2)p is identical to the minimal network of (cid:2).The above results can also be extended to distributive subalgebras of PA, IA and CRA, but do not hold in general for non-distributive subalgebras. Consider the network (cid:2) over H5 shown in Fig. 5, which is inspired by a network over PA in [50]. The network is path-consistent but not minimal. In fact, the relation EQ in the constraint (v 1{PP, EQ}v 2) is not feasible, i.e., there exists no solution of (cid:2) in which (v 1EQv 2) is satisfied. By Proposition 6, we know (cid:2) is not weakly globally consistent.In the next subsection, we characterise relations in such a minimal network in terms of the weak compositions of paths from x to y in (cid:2).4.2. Weak compositions of pathsLet M be a qualitative calculus. A qualitative constraint network (cid:2) is in essence a labelled directed graph consisting of the variables in (cid:2) as vertices and qualitative relations in M between the variables as labels. A path π from a variable xto another variable y is a sequence of constraints c1, c2, . . . , cs such that ci = (ui−1 R i ui) and u0 = x, us = y. The weak composition of path π is the qualitative relation in M defined asS. Li et al. / Artificial Intelligence 225 (2015) 51–7663Fig. 6. An example showing that Lemmas 20 and 22 do not hold for non-distributive RCC5/8 subalgebras: (a) a constraint network (cid:2) over H5; and (b) its a-closure (cid:2)p .CT(π ) ≡ R1 (cid:14) R2 (cid:14) . . . (cid:14) R s.Since the weak composition operation is associative, the relation CT(π ) defined above is unambiguous. We say a path π is non-trivial if CT(π ) is not the universal relation. Note that (x CT(π ) y) is entailed by those constraints in π .Suppose (cid:2) is a constraint network over a distributive subalgebra of RCC5/8, (xR y) and (xS y) are respectively the con-straints in (cid:2) and (cid:2)p that relate x to y. We next show that S is the intersection of the weak compositions of all paths from x to y in (cid:2). Note that such a path may contain (xR y) as an (or the unique) edge.Lemma 20. Let S be a distributive subalgebra of RCC5/8. Suppose (cid:2) is a consistent network over S and (cid:2)p its a-closure. Assume furthermore that (xS y) is a constraint in (cid:2)p. Then S is the intersection of the weak compositions of all paths from x to y in (cid:2).Proof. See Appendix A. (cid:2)The distributive property is necessary in the above lemma. Consider the consistent RCC5 network (cid:2) over H5 shown in Fig. 6. The intersection of the weak compositions of all paths from v 1 to v 2 in (cid:2) is {DR, PP}, while the relation that relates v 1 to v 2 in (cid:2)p is {DR}, which is strictly contained in {DR, PP}.The following lemma shows that the weak composition of a cycle contains EQ and PO. This result holds for arbitrary RCC5/8 networks which are all-different.Lemma 21. Suppose (cid:2) is an all-different RCC5/8 network and π = (c1, c2, . . . , cs) (s ≥ 2) a path from x to itself in (cid:2) such −1, EQ} if (cid:2) is an RCC5 network, and contains O8 ≡that ci = (ui−1 R i ui), u0 = us = x. Then CT(π ) contains O5 ≡ {PO, PP, PP{PO, TPP, TPP−1, EQ} if (cid:2) is an RCC8 network.Proof. Write y for u1. Let R = R1 and T = CT(π>1) = R2 (cid:14) R3 (cid:14) . . . (cid:14) R s. Note that y (cid:12)= x and π>1 is a path from y to x. Suppose S is the relation from x to y in the a-closure of (cid:2). Because (cid:2) is consistent, we know S is nonempty and S ⊆ R, −1. Furthermore, since (cid:2) is all-different and hence satisfies (6), we know S (cid:12)= {EQ}. As a consequence, we know there S ⊆ T−1. Therefore, CT(π ) = R (cid:14) T ⊇ α (cid:14) α−1. By checking the is a basic RCC5/8 relation α (cid:12)= EQ which is contained in R ∩ Tcomposition tables of RCC5 and RCC8, we have that α (cid:14) α−1 (hence CT(π )) contains O5 (O8, respectively) for any RCC5 (RCC8, respectively) basic relation α (cid:12)= EQ. (cid:2)The following lemma provides a finer characterisation of the constraint (xS y) in (cid:2)p in terms of paths in (cid:2) that do not contain the constraint (xR y).Lemma 22. Let S be a distributive subalgebra of RCC5/8. Suppose (cid:2) is an all-different network over S and (cid:2)p its a-closure. Assume that (xR y) and (xS y) are the constraints from x to y in (cid:2) and (cid:2)p respectively. Then S = R ∩ W , where W is the intersection of the weak compositions of all paths from x to y in (cid:2) \ {(xR y)}.Proof. See Appendix A. (cid:2)As Lemma 20, the above result does not hold in general for non-distributive subalgebras. Consider the network shown in Fig. 6 and the constraint from v 1 to v 2. We have R = {DR, PP}, S = {DR}, but R ∩ W = {DR, PP} (cid:12)= S.4.3. Correspondence between redundant constraints in (cid:2) and (cid:2)pSuppose (cid:2) is an RCC5/8 network over a distributive subalgebra S and (cid:2)p its a-closure. Let (xR y) and (xS y) be the constraints from x to y in (cid:2) and (cid:2)p respectively. We prove that (xR y) is redundant in (cid:2) iff (xS y) is redundant in (cid:2)p . To this end, we need several lemmas.The following two lemmas show that a constraint (xR y) in (cid:2) is redundant iff R contains the intersection of the weak compositions of all paths from x to y in (cid:2) \ {(xR y)}.64S. Li et al. / Artificial Intelligence 225 (2015) 51–76Fig. 7. An example showing that Lemmas 24 and 25 do not hold for non-distributive RCC5/8 subalgebras: a path-consistent constraint network (cid:2) = (cid:2)pover H5.Lemma 23. Suppose (cid:2) is a consistent RCC5/8 network and (xR y) a constraint in (cid:2). Assume that W is the intersection of the weak compositions of all paths from x to y in (cid:2) \ {(xR y)}. Then (xR y) is redundant in (cid:2) if R ⊇ W .Proof. Write (cid:2)(cid:3) ≡ (cid:2) \ {(xR y)}. For every path π from x to y in (cid:2)(cid:3)this implies that (cid:2)(cid:3)(xR y) is redundant in (cid:2). (cid:2)entails (xW y). Suppose R ⊇ W . It is clear that every solution of (cid:2)(cid:3), we know (cid:2)(cid:3)entails (x CT(π ) y). By the definition of W , also satisfies (xR y), and therefore, Lemma 24. Let S be a distributive subalgebra of RCC5/8. Suppose (cid:2) is an all-different network over S and (xR y) is a constraint in (cid:2). Assume that W is the intersection of the weak compositions of all paths from x to y in (cid:2) \ {(xR y)}. Then (xR y) is redundant in (cid:2) only if R ⊇ W .Proof. Suppose (xR y) is redundant in (cid:2). Then each solution of (cid:2)(cid:3) = (cid:2) \ {(xR y)} also satisfies (xR y). Write (xT y) for the constraint between x and y in (cid:2)(cid:3). By Lemma 22 we know T = W . Furthermore, by Theorem 19, we know each basic relation in T is feasible in (cid:2)(cid:3). This implies that T = W is contained in R. (cid:2)p , the a-closure of (cid:2)(cid:3)This result does not hold in general for non-distributive subalgebras. Consider the constraint network (cid:2) over H5 shown in Fig. 7 and the constraint from v 1 to v 2. It is easy to show that (cid:2) is path-consistent, i.e., (cid:2) = (cid:2)p , and (v 1{PP}v 2) is redundant in (cid:2). Furthermore, we have W = {PP, EQ}, which is not contained in R = {PP}.The above characterisation of redundant constraints can be strengthened if (cid:2) is itself path-consistent.Lemma 25. Let S be a distributive subalgebra of RCC5/8. Suppose (cid:2) is an all-different and path-consistent network over S. Then a constraint (v i R i j v j) is redundant in (cid:2) iff R i j ={R ik (cid:14) Rkj : k (cid:12)= i, j}, i.e., R i j is the intersection of the weak compositions of all paths from v i to v j which have length 2.(cid:6)Proof. Let W i j be the intersection of the weak compositions of all paths from v i to v j in (cid:2) \ {(v i R i j v j)}. It is clear W i j ⊆(cid:6){R ik (cid:14) Rkj : k (cid:12)= i, j}.(cid:6)Suppose R i j =dant in (cid:2).{R ik (cid:14) Rkj : k (cid:12)= i, j}. We have R i j ⊇ W i j . By Lemma 23, this immediately implies that (v i R i j v j) is redun-On the other hand, suppose (v i R i j v j) is redundant in (cid:2). We show R i j ={R ik (cid:14) Rkj : k (cid:12)= i, j}. By Lemma 24 we know R i j ⊇ W i j . Let π = (c1, c2, . . . , cs) (s ≥ 2) be an arbitrary path from v i to v j in (cid:2) \ {(v i R i j v j)} such that ck = (uk−1 Rkuk), u0 = v i , us = v j . Then CT(π ) = R1 (cid:14) CT(π>1). Suppose u1 = v i(cid:3) . Then R1 = R ii(cid:3) and π>1 is a path from v i(cid:3) to v j . Because (cid:2) is path-consistent, we know by Lemma 20 that R i(cid:3) j is contained in CT(π>1). This implies that CT(π ) contains R ii(cid:3) (cid:14) R i(cid:3) j{R ik (cid:14) Rkj : k (cid:12)= i, j}. Due to the arbitrariness of π , W i j also contains {R ik (cid:14) Rkj : k (cid:12)= i, j}. Since R i j ⊇ W i j , and, therefore, we have R i j ⊇{R ik (cid:14) Rkj : k (cid:12)= i, j}. By the path-consistency of (cid:2), we have R i j ⊆ R ik (cid:14) Rkj for every k (cid:12)= i, j. This shows (cid:6)R i j ={R ik (cid:14) Rkj : k (cid:12)= i, j}. (cid:2)(cid:6)(cid:6)(cid:6)(cid:6)This result does not hold in general for non-distributive subalgebras. Again, consider the path-consistent RCC5 network (cid:2)over H5 shown in Fig. 7. Although (v 1 PP v 2) is redundant in (cid:2), R13 (cid:14) R32 ∩ R14 (cid:14) R42 = {PP, EQ} strictly contains {PP}.We next show that (xR y) is redundant in (cid:2) iff (xS y) is redundant in (cid:2)p .Lemma 26. Suppose (cid:2) is an all-different RCC5/8 network. Assume that (xR y) and (xS y) are the constraints from x to y in (cid:2) and (cid:2)prespectively. Then (xR y) is redundant in (cid:2) only if (xS y) is redundant in (cid:2)p .Proof. Write (cid:2)(cid:3)and (cid:2)(cid:3)(cid:3)for (cid:2) \ {(xR y)} and (cid:2)p \ {(xS y)} respectively.Suppose (xR y) is redundant in (cid:2). Then (cid:2)(cid:3), hence also satisfies (xR y). In other words, each solution of (cid:2)(cid:3)(cid:3)entails (xR y). Note that (cid:2)(cid:3)(cid:3). We know every solution of (cid:2)(cid:3)(cid:3)is a is a solution of (cid:2). Since (cid:2) is equivalent to its is also a solution of (cid:2)p , hence also satisfies (xS y). Therefore, (xS y) is redundant refines (cid:2)(cid:3)solution of (cid:2)(cid:3)a-closure, we know each solution of (cid:2)(cid:3)(cid:3)in (cid:2)p . (cid:2)S. Li et al. / Artificial Intelligence 225 (2015) 51–7665Fig. 8. An example showing that Proposition 27 does not hold for non-distributive RCC5/8 subalgebras: (a) a constraint network (cid:2) over H5; (b) its a-closure (cid:2)p ; (c) (cid:2) \ {(v 3PPv 2)}.Fig. 9. An example showing that Theorem 29 does not hold for non-distributive RCC5/8 subalgebras: (a) a constraint network (cid:2) over H5; (b) the core (cid:2)cof (cid:2).Proposition 27. Let S be a distributive subalgebra of RCC5/8. Suppose (cid:2) is an all-different network over S. Assume that (xR y) and (xS y) are the constraints from x to y in (cid:2) and (cid:2)p respectively. Then (xR y) is redundant in (cid:2) iff (xS y) is redundant in (cid:2)p .Proof. See Appendix A. (cid:2)The result does not hold in general for non-distributive subalgebras. Consider the constraint network (cid:2) over H5 shown in Fig. 8 and the constraint from v 3 to v 2. It is clear that the constraint (v 3PPv 2) is redundant in (cid:2)p . However, (v 3PPv 2)is not redundant in (cid:2). This is because (v 3 DR v 2) is consistent with (cid:2) \ {(v 3PPv 2)} (shown in Fig. 8(c)). Actually, it is easy to construct a solution {a1, a2, a3, a4} of (cid:2) \ {(v 3PPv 2)} in which (a3 PP a1), (a1 PP a4) and (a2 DR a j) for j = 1, 3, 4.Recall that Theorem 19 asserts that (cid:2)p is minimal. Proposition 27 can be rephrased as follows:Proposition 28. Let S be a distributive subalgebra of RCC5/8. Suppose (cid:2) is an all-different network over S and (cid:2)m the minimal network of (cid:2). Assume that (xR y) and (xS y) are the constraints from x to y in (cid:2) and (cid:2)m respectively. Then (xR y) is redundant in (cid:2) iff (xS y) is redundant in (cid:2)m.As a consequence, we have our main result.Theorem 29. Let S be a distributive subalgebra of RCC5/8. Suppose (cid:2) is an all-different network over S and (cid:2)c the core of (cid:2). Then (cid:2)cis equivalent to (cid:2) and hence the unique prime subnetwork of (cid:2).Proof. Suppose c1, c2, . . . , ck are the redundant constraints of (cid:2). Let (cid:2)0 = (cid:2) and (cid:2)i+1 = (cid:2)i \ {ci+1} for 0 ≤ i ≤ k. Note that (cid:2)k is precisely (cid:2)c , the core of (cid:2). Suppose 0 ≤ i < k is the largest integer such that (cid:2)i is equivalent to (cid:2).Suppose ci+1 = (xR y) and (xS y) is the corresponding constraint in (cid:2)m, the minimal network of (cid:2). Note that ci+1 is also in (cid:2)i . By Proposition 28 we know (xS y) is redundant in (cid:2)m since (xR y) is redundant in (cid:2). Because (cid:2)m is also the minimal network of (cid:2)i , by Proposition 28 again we know (xR y) is redundant in (cid:2)i . This means that (cid:2)i+1 is equivalent to (cid:2)i , hence (cid:2). This contradicts our assumption that i < k is the largest integer such that (cid:2)i is equivalent to (cid:2). Therefore, i = k and (cid:2)c is equivalent to (cid:2). (cid:2)The above result does not hold in general for non-distributive subalgebras. For example, consider the RCC5 network (cid:2)over H5 shown in Fig. 9(a). The core (cid:2)c (shown in Fig. 9(b)) is not equivalent to and hence not a prime subnetwork of (cid:2). This is because (v 3 DR v 2) is feasible in (cid:2)c but not in (cid:2).Similar to Proposition 14, we can show that the core of an RCC5/8 network over a tractable subclass can be found in O (n5) time. In the next subsection we show this can be improved if the network is over a distributive subalgebra.66S. Li et al. / Artificial Intelligence 225 (2015) 51–76Algorithm 1: Algorithm for finding all redundant constraints in an all-different constraint network over a distributive subalgebra S of RCC5/8, where (cid:6)l is the universal relation in RCCl.Input: An all-different consistent RCC5/8 network (cid:2) = {v i R i j v j : 1 ≤ i, j ≤ n} over S and V = {v i : 1 ≤ i ≤ n}.Output: Redun: the set of redundant constraints of (cid:2), and Core: the core of (cid:2).1 Redun ← ∅;2 Core ← (cid:2);3 (cid:2)p ← the a-closure of (cid:2);4 for each constraint (v i S i j v j ) ∈ (cid:2)p do567891011Q i j ← Q i j ∩ S ik (cid:14) Skj ;if Q i j = S i j thenQ i j ← (cid:6)l ;for each variable vk ∈ V \ {v i , v j } doRedun ← Redun ∪ {(v i R i j v j )};Core ← Core \ {(v i R i j v j )};break the inner loop;1213endend14 endFig. 10. Example constraint network illustrating the differences between the prime subnetwork, and the subnetworks generated by the Simple and Sim-pleExt algorithms [52]. Redundant constraints found in the prime subnetwork only are shown with wide dashes; constraints found in both the prime and SimpleExt subnetworks are shown with narrow dashes; and constraints found in the prime, SimpleExt, and Simple subnetworks are shown with dotted lines.4.4. A cubic time algorithm for computing the core of (cid:2)Suppose (cid:2) is an all-different network over a distributive subalgebra of RCC5/8. Proposition 27 and Lemma 25 suggest a simple way for computing (cid:2)c , the unique prime subnetwork of (cid:2). By Proposition 27, a constraint (v i R i j v j) in (cid:2) is redundant iff the corresponding constraint (v i S i j v j) in (cid:2)p is redundant. Furthermore, Lemma 25 shows that (v i S i j v j) is redundant in (cid:2)p iff S i j is the intersection of all S ik (cid:14) Skj (k (cid:12)= i, j). We have a cubic time algorithm (Algorithm 1) for computing (cid:2)c . For {S ik (cid:14) Skj : k (cid:12)= i, j}, we introduce a temporary relation Q i j , which is initially each constraint (v i S i j v j), to verify if S i j =assigned as the universal relation. It is possible that, after just a few intersections of S ik (cid:14) Skj with Q i j , the resulting Q i j is already equal to S i j , which implies (v i S i j v j) is redundant in (cid:2)p and hence (v i R i j v j) is redundant in (cid:2). The core of (cid:2) is then obtained by removing these redundant relations one by one from (cid:2).(cid:6)5. Empirical evaluationIn this section, we empirically evaluate our method in comparison with the methods in [52]. In [52], Wallgrün proposes two greedy algorithms for removing redundant constraints in the constraint network: the basic and extended simplification algorithms (hereafter Simple and SimpleExt). The Simple algorithm loops through all triples of regions i,j, and k and identifies as redundant any constraints R ik such that R i j (cid:14) R jk ⊆ R ik. A drawback of the Simple algorithm is that redundant relations removed may affect subsequent iterations of the algorithm. Hence, the order in which triples are visited by the Simple algorithm can alter the resulting subnetwork. The SimpleExt solves this issue by first marking potentially redundant relations for removal, subject to a consistency check, before removing all marked relations in a final loop. The Simple and SimpleExt algorithms are not guaranteed to provide an optimal solution. Thus, the prime subnetwork is necessarily a (possibly improper) subnetwork of that generated by the SimpleExt algorithm, which is in turn a (possibly improper) subnetwork of that generated by the Simple algorithm.Fig. 10 shows an example with just five regions, highlighting the constraints identified as redundant in the prime sub-network and by the Simple and SimpleExt algorithms. Assuming the Simple algorithm visits regions in numerical order, the relations between variables v 2 and v 5 and between v 3 and v 4 will be identified as redundant. Additionally, the SimpleExt S. Li et al. / Artificial Intelligence 225 (2015) 51–7667Table 3Table showing the proportion of RCC8 constraints for the two data sets and across the six region subsets.FootprintStatistical areas# Regions# Relations1082174338621725344349981933746581559577823,43693,528371,0911,486,9505,925,4031176475318,52869,751216,1531,214,461DC1.1%66.9%26.1%62.6%78.1%92.5%69.6%87.5%92.9%96.7%98.0%99.2%EC0.0%0.0%0.0%0.0%0.0%0.0%20.0%7.0%4.3%1.8%1.1%0.5%PO85.6%22.8%56.7%30.5%15.2%4.8%0.0%0.0%0.0%0.0%0.0%0.0%NTPP(I)TPP(I)13.3%10.3%17.1%6.9%6.7%2.7%2.0%1.9%0.4%0.7%0.4%0.2%<0.1%<0.1%<0.1%<0.1%<0.1%<0.1%8.4%3.6%2.4%0.8%0.4%0.2%algorithm is able to identify the relation between v 4 and v 5 as redundant. However, the redundant relation between v 1and v 3 is identified only in the prime subnetwork.5.1. Data setsIn the following evaluation, two real data sets were used: the UK geographic “footprint” dataset introduced in Section 1.1(total 3443 regions) and the statistical areas levels 1–4 dataset for Tasmania (in total 1559 regions), provided by the Aus-tralian Bureau of Statistics. Both datasets are complete basic constraint networks, i.e., there is a single basic relation between each pair of regions. Derived from social media, the footprint data set contains a variety of regions of differing sizes and shapes, but relatively unstructured sharing almost no adjacent boundaries. In stark contrast the Tasmanian statistical areas are highly structured, made up of four levels of spatially contiguous and nested but non-overlapping regions. To aid in our analysis, five subsets of each of the two datasets were generated in addition to the full datasets. The subsets were generated from selecting those regions that intersect an arbitrarily selected spatial region of increasing size. In this way, subsets of data of varying sizes were generated, with 108, 217, 433, 862 and 1725 regions in subsets of the footprint data set, and 49, 98, 193, 374 and 658 regions from the statistical areas set.Subsets of spatially related regions were explicitly used, as opposed to selecting regions entirely at random. Specifically, at least one region in the subset was required to have non DC relations with all other regions in that subset. This was to ensure that the range of RCC8 basic relations in each subset were representative of the RCC8 relations in close spatial proximity. The resulting distribution of RCC8 basic relations in the full constraint network for these 10 region subsets along with their complete dataset is shown in Table 3. By design, the relations exhibit systematic variations in the distribution of relations, for example with the statistical areas data set exhibiting consistently higher levels of DC and lower levels of POrelations (due to the non-overlapping nature of statistical areas); and smaller subsets exhibiting lower levels of DC relations (as a result of the smaller spatial area in which regions must fit for the smaller subsets of data).5.2. Redundant constraintsIn [52], the two conjectures are made that: a. the Simple and SimpleExt are good approximations for removing all redundant relations; and b. that the Simple algorithm is in practice almost as good as the SimpleExt algorithm at removing redundant relations. In this section, we compare the three types of subnetwork (prime, SimpleExt, and Simple) in practice and in the context of these conjectures. Fig. 11 shows the growth in size of the three types of subnetworks across the six subsets of each of the two data sets. Several features are worth noting in Fig. 11:• All three subnetworks grow in size (i.e., the number of constraints comprising a subnetwork) approximately linearly with the number of regions (coefficient of determination R2 > 0.97 in all cases, indicating a high level of fit between the data and the linear regression). Linear O (n) growth is a lower bound on the space complexity of these subnetworks, since they must remain connected (and so must have at least n − 1 edges). Thus, this result indicates all three algorithms are approaching optimal scalability in terms of space complexity. The only exception occurs with the Simple subnetwork and in the case of the statistical areas data set, which grows in size quadratically with the number of regions.• The prime subnetwork is consistently smaller than the subnetwork generated by the Simple algorithm at all network sizes and is significantly smaller for larger networks.• The SimpleExt subnetwork is significantly larger than the prime subnetwork and of similar size to the Simple subnet-work in the case of the footprint data set, while it is of similar size to the prime subnetwork and significantly smaller than the Simple subnetwork in the case of the statistical areas data set.In summary, neither the Simple nor SimpleExt algorithm can be relied upon to identify as many redundant constraints as the prime subnetwork, although the SimpleExt algorithm may in some cases identify many more redundant constraints than the Simple algorithm (such as the statistical areas data set).68S. Li et al. / Artificial Intelligence 225 (2015) 51–76Fig. 11. Size of subnetworks (prime, SimpleExt, and Simple) against the number of regions across subsets of a. footprint and b. statistical areas data set. The x-axis is in logarithmic scale.Fig. 12. Scatterplot of the proportion of partially overlapping relations in the full footprint constraint network, against the proportion of redundant relations identified by the prime, SimpleExt, and Simple algorithms.Further examination reveals that one feature that explains many of the observed differences in results is the differing proportions of PO relations in the data sets (see Table 3). Larger proportions of PO relations are strongly related to fewer redundant relations being identified across all types of subnetwork, since PO relations typically provide limited reasoning power. Fig. 12 demonstrates this relationship empirically for the footprint data set. However, the prime subnetwork is consistently better at identifying many more redundant relations than the Simple or SimpleExt algorithms when the full constraint network contains many PO relations.5.3. ScalabilityAs already discussed, Algorithm 1 can compute the prime subnetwork in O (n3) time for any consistent network over a tractable subclass of RCC5/8, where the constraints are taken from a distributive subalgebra. Similarly, the Simple and SimpleExt algorithms must in the worst case visit all triples of regions, leading to overall O (n3) scalability.On average, however, all the algorithms exhibited an average scalability in proportion to n2 (where n is the number of regions). Fig. 13 shows the number of constraints checked by each algorithm, the key determining factor in computation time. All the algorithms increased linearly with the number of constraints (i.e., in proportion to n2), again with the exception of the Simple algorithm operating on the statistical areas data set. Indeed, on average Algorithm 1 scaled slightly more efficiently with regard to the number of constraints processed than the other two algorithms. These differences arise because on average those algorithms that are better at identifying redundant constraints are more quickly able to discard those constraints and move on to checking other constraints.5.4. Removing disconnected constraintsOverall, the prime subnetwork substantially reduced the number of constraints that would need to be stored to be linear in the number of regions (cf. Section 1.1). Table 4 shows the proportion of constraints identified as redundant achieved by S. Li et al. / Artificial Intelligence 225 (2015) 51–7669Fig. 13. Scalability of prime, SimpleExt, and Simple algorithms, in terms of number of constraints checked across subsets of a. footprint and b. statistical areas data set. Both axes are in logarithmic scale.Table 4Proportion of constraints identified as redundant by the prime, Simple, and Sim-pleExt algorithms for the full footprint and statistical areas data sets.PrimeSimpleExtSimpleFootprint94.58%90.72%90.57%Statistical areas98.44%98.25%92.61%Fig. 14. Scatterplot of proportion of constraints in the prime network versus proportion of constraints omitting DC relations with respect to the full constraint network.the different algorithms in the case of the full data sets, up to 98.44% in the case of the prime subnetwork on the highly structured statistical areas data set.6However, in some cases it might potentially be possible to achieve similarly high levels of storage efficiency more simply by, say, omitting the most numerous relations (typically DC) from the constraint network. Fig. 14 shows a scatterplot of the number of constraints in the constraint network omitting DC relations, against the number of constraints in the prime network, both expressed as a percentage of the total number of constraints in the full constraint networks (for each of the 12 data subsets).The figure shows that in some cases simply storing the constraint network without DC relations can lead to slightly more constraints omitted (those above the diagonal in Fig. 14). In particular, in the statistical areas data set, where the vast majority of relations are DC, the number of DC relations can exceed the number of redundant relations identified by the prime subnetwork. However, in most cases for the less structured footprint data set, the prime subnetwork contains substantially fewer constraints than could be achieved by simply omitting DC relations (those below the diagonal in Fig. 14). Besides, while simply dropping the DC relation is competitive space-saver in some cases, it is undesirable when for example the information is incomplete and/or we cannot tell if the relation between two objects is (i) DC and dropped or (ii) missing or (iii) removed due to redundancy.6 From Table 4, it can be computed that the size of the Simple subnetwork is 4.737 (1.740, resp.) times of the size of the prime subnetwork in the full statistical areas data set (the full footprint data set, resp.).70S. Li et al. / Artificial Intelligence 225 (2015) 51–76Fig. 15. Scalability of reconstituting full constraint network using a-closure, efficient geometric computation in a spatial database, and our hybrid algorithm for the footprint and statistical areas data sets. Both axes are in logarithmic scale.5.5. Reconstituting the full networkAs already highlighted in Section 1.1, there are many potential uses for the purely qualitative prime network, without involving geometry, including facilitating the comparison and uncovering the essential structure of different constraint net-works. However, one final question we address empirically is the efficiency of reconstructing the full constraint network from the prime subnetwork, when compared with doing so geometrically if the geometric information is complete and available.The full constraint network can be reconstructed from the prime subnetwork in O (n3) time by computing the a-closure of the prime subnetwork. Computing the constraint network directly from the geometry requires in the worst case O (n2)iterations of an O (m2) algorithm for computing the intersection between two polygons (where m is the number of vertices in the polygon). In cases where m ≈ n this can lead to a worst case complexity of the geometric algorithm of O (n4). We note that, in our statistical areas data set, the largest polygon contains more than 248,000 vertices, and so m is indeed comparable to n.However, in practice, by making use of the spatial structure of the data through algorithms (e.g., by checking for non-overlapping minimum bounding boxes for polygons before computing the polygon intersection) and spatial indexes, the geometric algorithm is expected to be on average significantly more efficient. Fig. 15 compares the scalability of the two approaches, a-closure and efficient geometric computation in an indexed spatial database. At least for the smaller data sets tested, computing the a-closure is significantly more efficient. For example, in the case of the smallest statistical areas data subset, computing the a-closure requires less than 1000th of the time of the geometric computation. However, the figure shows that using the spatial database is significantly more scalable (average-case O (n) time complexity) when compared with the a-closure (average case approaching O (n3) complexity).Fig. 15 also shows the results of a hybrid reconstitution algorithm, that uses both the geometry and the a-closure. The hybrid algorithm first adds any DC relations to the prime network that can be inferred simply through comparison of the minimum bounding box of the polygon geometry (since non-intersecting minimum bounding boxes for two polygons imply a DC relations). Then the a-closure is computed with this partially reconstituted subnetwork. The results show a significant improvement in scalability using this approach, reducing the average case time complexity to below O (n2) in the case of the footprint dataset. Ongoing work is currently investigating further mechanisms for combining both these geometric and the qualitative aspects of regions in efficient database storage and queries.5.6. SummaryIn summary, our analysis of the performance of the three subnetworks on practical geographic data sets containing thousands of regions demonstrates:1. The prime subnetwork consistently outperforms the Simple and SimpleExt algorithms in terms of the number of re-dundant relations identified, in particular in cases where the proportion of PO relations in the full constraint network is higher.2. The average case scalability for computing the prime subnetwork required n2 operations, where n is the number of regions. Because the prime subnetwork identified more redundant relations, it performs on average fewer constraint checks than the Simple and SimpleExt algorithms, and was in our tests always more scalable.3. For less structured datasets, the prime subnetwork can substantially improve on the number of constraints identified as redundant, when compared with the naive solution of omitting DC relations from the full constraint network.S. Li et al. / Artificial Intelligence 225 (2015) 51–7671Table 5Applicability of the results in this paper to other calculi, where + (−) indicates the corresponding result holds (does not hold) for that calculus, +s indicates that for PA it is tractable to decide if a constraint is redundant, and +p indicates that the result holds for any tractable subclass of RA over which path-consistency implies consistency.Proposition 2Proposition 6Lemma 7Lemma 9Proposition 13Proposition 14Proposition 17Theorem 18Theorem 19Lemma 20Lemma 22Lemma 23Lemma 24Lemma 25Lemma 26Proposition 27Proposition 28Theorem 29PA+++++s+++++++++++++IA+++++++++++++++−−−CRA++++++++++++++++++RA++++++p+p+p+p++p++p+p+−−−The data sets used for the experiments are provided in the supplementary material. It is worth noting that our evaluation only concerns basic constraint networks derived from real data sets. This setting follows [52] (though Wallgrün uses, instead, randomly generated geometric data sets) and suits well for the purpose of topological adjustment of spatial data. It will be very interesting to compare the three methods by using general constraint networks over a distributive subalgebra. But, currently, we still lack practical methods for generating large constraint networks from real-world applications.6. ConclusionIn this paper, we have systematically investigated the computational complexity of redundancy checking for RCC5/8 con-straints. Although it is in general intractable, we have shown that a prime subnetwork can be found in O (n5) time for any consistent network over a tractable subclass of RCC5/8. If the constraints are taken from a distributive subalgebra, we proved that the constraint network has a unique prime subnetwork, which can be found in cubic time. As a by-product, we also proved that any path-consistent network over a distributive subalgebra is weakly globally consistent and mini-mal.Our empirical analysis showed that for real geographic data sets the prime subnetwork can lead to significant increases in the number of redundant relations identified when compared with the approximations proposed by [52]. In practice, the algorithm was efficient, exhibiting average case O (n2) scalability. The redundant relations identified by the prime subnet-work can also significantly outnumber DC relations, especially in less structured geographic data sets that may contain a significant minority of PO relations.It is worth noting that a large part of our results can be applied to several other qualitative calculi (like PA, IA, CRA, and RA) immediately, but Propositions 27 and 28 and Theorem 29 do use the particular algebraic properties of RCC5/8 (see Table 5 for a summary). For example, Theorem 29 cannot be applied to IA, because we have an all-different and path-consistent basic IA network which is not equivalent to its core. Future work will consider how to extend our results to IA, RA and other calculi.We are also developing further the practical applications of prime subnetworks. In addition to pursuing a more sys-tematic exploration of the applications to saving storage than the one given in Section 1.1, further work is necessary to investigate other aspects of prime subnetworks, in particular the structure and comparison of different prime subnetworks of sets of footprints. Another challenging research direction is to develop more efficient reasoning methods for sparse con-straint networks other than enforcing path-consistency, which runs in cubic time and always turns a sparse constraint network into a complete one. The method initiated in [47] seems very promising.AcknowledgementsWe sincerely thank the three anonymous reviewers and the associate editor for their invaluable suggestions. The authors are also grateful to Ross Purves, University of Zürich, for helping to develop the footprint data set illustrated in Fig. 1. This work was partially supported by ARC (FT0990811, DP120103758, DP120104159) and NSFC (61228305).72S. Li et al. / Artificial Intelligence 225 (2015) 51–76Fig. 16. Illustration of the three types of paths: (a) Case 1, (b) Case 2, (c) Case 3, where solid lines represent constraints or paths contained in π and the dashed line represents the constraint (xR y) in (cid:2).Appendix A. Proof of Lemmas 20 and 22 and Proposition 27Proof of Lemma 20. Suppose the network becomes stable in k steps when enforcing PCA. For l ≤ k, we write Rlconstraint between v i and v j in the l-th step. We prove by using induction on l that every Rlweak compositions of several paths from v i to v j in (cid:2).i j for the i j is the intersection of the When l = 0, this is clearly true. Suppose this is true for l ≤ s. We show it also holds for l = s + 1. Suppose in this step the following updating rule is calledRl+1i j= (Rlik(cid:14) Rlkj) ∩ Rli j.By induction hypothesis, we know Rli j is the intersection of the weak compositions of several paths from v i to v j in (cid:2). Similar for Rlik and Rlkj . Note that when joining a path from v i to vk and a path from vk to v j , we obtain a path from v ito v j . Because every constraint in (cid:2) is taken from S, in which weak composition distributes over nonempty intersections, (cid:14) Rlit follows that Rlkj is identical to the intersection of the weak compositions of all these paths from v i to v j via vk. It ikis now clear that Rl+1also satisfies the property.So far, we have shown for every constraint (xS y) in (cid:2)p that S is the intersection of the weak compositions of severalpaths from x to y in (cid:2). Because (cid:2)p is path-consistent, the weak composition of every path from x to y in (cid:2)p contains S. Therefore, S is also contained in the intersection of the weak compositions of all paths from x to y in (cid:2). This shows that Sis exactly the intersection of the weak compositions of all paths from x to y in (cid:2). (cid:2)i jProof of Lemma 22. Because (xR y) is the only path with length 1 from x to y in (cid:2), Lemma 20 in fact asserts that S is the intersection of R and the weak compositions of all paths in (cid:2) with length ≥ 2. Note that each path from x to y in (cid:2) \ {(xR y)} has length ≥ 2. We know S ⊆ R ∩ W .To show S ⊇ R ∩ W , we only need to show CT(π ) ⊇ R ∩ W for every path from x to y in (cid:2) with length ≥ 2. Suppose π = (c1, c2, . . . , cs) (s ≥ 2) is such a path and ci = (ui−1 R i ui), u0 = x, us = y.There are three types of paths (see Fig. 16 for illustration).Case 1. π contains neither (xR y) nor ( y R−1x). Clearly π is a path from x to y in (cid:2) \ {(xR y)}. By definition we have CT(π ) ⊇ W .Case 2. If ci = (xR y) for some 1 ≤ i ≤ s, then CT(π ) = CT(π<i) (cid:14) R (cid:14) CT(π>i). Note that either π<i or π>i is a nonempty cycle. By Lemma 21 we know the weak composition of each cycle contains EQ. Therefore, we know CT(π ) ⊇ R.Case 3. If ci = ( y Rthe first constraint in π such that ci = ( y Rπ≥i is a path from y to itself. By Lemma 21 we know EQ ∈ CT(π≥i) hence CT(π ) = CT(π<i) (cid:14) CT(π≥i) ⊇ W (cid:14) EQ = W .−1x) for some 1 ≤ i ≤ s, then CT(π ) = CT(π<i) (cid:14) CT(π≥i). Without loss of generality, we assume ci is −1x). It is clear that π<i is a path of Case 1 and hence W ⊆ CT(π<i). Note that This shows that R ∩ W is contained in the weak composition of every path from x to y in (cid:2) with length ≥ 2. Since S is the intersection of R and all paths from x to y in (cid:2) with length ≥ 2, this shows that S ⊇ R ∩ W . Therefore we have S = R ∩ W . (cid:2)and (cid:2)(cid:3)(cid:3)Proof of Proposition 27. The necessity part has been proved in Lemma 26. We only need to show the sufficiency part. Write (cid:2)(cid:3)for (cid:2) \ {(xR y)} and (cid:2)p \ {(xS y)} respectively. Suppose (xS y) is redundant in (cid:2)p . Let W be the intersection of the weak compositions of all paths from x to y in (cid:2) \ {(xR y)}. To show that (xR y) is redundant in (cid:2), by Lemma 23, we only need to show R ⊇ W .Recall S = R ∩ W by Lemma 22. To show R ⊆ W , we first showR ∩ W ⊇ W ∩ Ol (cid:14) R ∩ R (cid:14) Ol,(A.1)where Ol is either O5 or O8 (cf. Lemma 21 for definition), according to whether (cid:2) is over RCC5 or RCC8.Because (xS y) is redundant in (cid:2)p , by Lemma 25, we know S is the intersection of the weak compositions of all paths with length 2 from x to y in (cid:2)p . For each constraint (ui S i j u j) in any such a path, Lemma 20 shows that S i j is the inter-section of the weak compositions of all paths from ui to u j in (cid:2). Replace each (ui S i j u j) with several paths such that S i jS. Li et al. / Artificial Intelligence 225 (2015) 51–7673is the intersection of their weak compositions. We get several paths from x to y in (cid:2) with length ≥ 2 such that S is the intersection of the weak compositions of these paths. By Lemma 20 again we know S is contained in the weak composition of every path from x to y in (cid:2). This shows that S is exactly the intersection of the weak compositions of all paths from xto y in (cid:2) with length ≥ 2.7As we have seen in the proof of Lemma 22, there are three types of paths. For every path π of Case 1 or 3 (defined in Lemma 22), we know CT(π ) contains W . Suppose π is a path of Case 2 and ci = (xR y) for some 1 ≤ i ≤ s. Then CT(π ) = CT(π<i) (cid:14) R (cid:14)CT(π>i). Note that if π<i (π>i , respectively) is nonempty, then CT(π<i) (CT(π>i), respectively) contains Ol by Lemma 21. Either π<i or π>i is a cycle. Therefore, CT(π ) contains Ol (cid:14) R ∩ R (cid:14) Ol ∩ Ol (cid:14) R (cid:14) Ol. In summary, for each path π from x to y in (cid:2) with length ≥ 2, we have CT(π ) ⊇ W ∩ Ol (cid:14) R ∩ R (cid:14) Ol ∩ Ol (cid:14) R (cid:14) Ol. Because Ol (cid:14) R (cid:14) Ol is always the universal relation (as PO (cid:14) R (cid:14) PO = PO (cid:14) PO = (cid:6)l by Lemma 1), we know S, as the intersection of the weak compositions of all paths from x to y in (cid:2) with length ≥ 2, contains W ∩ Ol (cid:14) R ∩ R (cid:14) Ol. Since S = R ∩ W , we have (A.1) immediately.We next show R ⊇ W . Because (cid:2) is consistent and satisfies (6), we know S = R ∩ W is neither empty nor {EQ}, i.e.,∅ (cid:12)= R ∩ W (cid:12)= {EQ}.If PO ∈ R, then Ol (cid:14) R ∩ R (cid:14) Ol ⊇ PO (cid:14) PO is the universal relation. That R ⊇ W follows directly from R ∩ W ⊇ W ∩ (cid:6)l = W .If PO /∈ R, then PO /∈ W because PO ∈ Ol (cid:14) R ∩ R (cid:14) Ol and (A.1) holds. We show R ⊇ W . We only consider RCC8 relations. The case for RCC5 relations is similar. Suppose R is a relation in a distributive subalgebra of RCC8 such that PO /∈ R and R (cid:12)= EQ. Checking the lists of relations in the two maximal distributive subalgebras given in Appendix B, R is either a basic relation other than PO and EQ, or one of the following relations−1, NTPP{TPP, NTPP}, {TPP{DC, EC}, {TPP, EQ}, {TPP{TPP, NTPP, EQ}, {TPP−1},−1, EQ},−1, NTPP−1, EQ}.(A.2)There are several subcases. Suppose R is a basic relation α other than PO and EQ. We write αd for the other basic −1. From the RCC8 relation such that {α, αd} is a relation in (A.2). For example, DCd = EC, TPPd = NTPP, and TPPcomposition table we can see−1d = NTPP{α, αd, PO} ⊆ PO (cid:14) α ∩ α (cid:14) PO ⊆ O8 (cid:14) α ∩ α (cid:14) O8holds for every basic relation α other than PO and EQ. We assert that αd /∈ W if R = {α}. This is because, otherwise, we have αd ∈ W ∩ O8 (cid:14) R ∩ R (cid:14) O8 and hence by (A.1) αd ∈ R ∩ W ⊆ R. A contradiction. In particular, if α is DC, EC, NTPP, or −1, then we can further show EQ ∈ O8 (cid:14) α ∩ α (cid:14) O8 and hence EQ /∈ W . This NTPPimplies W = R.−1, then W = R. If α is either TPP or TPPSuppose R is {DC, EC}, {TPP, NTPP, EQ}, or {TPP−1, NTPP−1, EQ}. Note that PO /∈ W , and ∅ (cid:12)= R ∩ W (cid:12)= {EQ}. This shows Suppose R is {TPP, NTPP} or {TPP−1, NTPP−1}. By (A.1) and EQ ∈ O8 (cid:14) R ∩ R (cid:14) O8, W does not contain EQ. Hence W is that W is contained in R.contained in R.Suppose R is {TPP, EQ}. By (A.1) and NTPP ∈ O8 (cid:14) R ∩ R (cid:14) O8, W cannot contain NTPP. This implies that W is contained in R. The case for R = {TPP−1, EQ} is similar.In summary, we have R ⊇ W in all cases. In other words, R can be obtained as the intersection of all paths from x to yin (cid:2) \ {(xR y)}. Hence (xR y) is redundant in (cid:2) by Lemma 23. (cid:2)Appendix B. Maximal distributive subalgebras of RCC5/8A distributive subalgebra S is maximal if there is no other distributive subalgebra that properly contains S. To compute the maximal distributive subalgebras, we first compute (cid:4)Bl , the closure of Bl in RCCl under converse, weak composition, and intersection, and then check by a program if (cid:4)Bl ∪ Z satisfies distributivity for some subset Z of RCCl.Write Dl for the set of RCCl relations α such that (cid:4)Bl ∪ {α} satisfies distributivity. For every pair of relations α, β in Dl, we check if (cid:4)Bl ∪ {α, β} satisfies distributivity and say α has d-relation to β if this is the case. Our result shows that there are precisely two disjoint subsets Xl and Yl (which form a partition of Dl) such that each relation α in Xl (Yl, respectively) has d-relation to every other relation in Xl (Yl, respectively), but has no d-relation to any relation in Yl ( Xl, respectively). Moreover, (cid:4)Bl ∪ Xl and (cid:4)Bl ∪ Yl are both distributive subalgebras of RCCl. Clearly, these are the only maximal distributive subalgebras of RCCl.For RCC5, the closure of basic relations (cid:4)B5 contains 12 nonempty relations. These are the five basic relations, and the following 7 relations (cf. Section 2.4).7 While we can further show that S is the intersection of the weak compositions of all paths from x to y in (cid:2) that have no cycles and have length ≥ 2, it is not guaranteed that such a path is in (cid:2) \ {(xR y)}. That is, we cannot directly show S = W .74S. Li et al. / Artificial Intelligence 225 (2015) 51–76{PO, PP}, {PO, PP{DR, PO, PP}, {DR, PO, PP−1}, {PO, PP, PP−1, EQ},−1}, {DR, PO}, (cid:6)5.The first maximal distributive subalgebra, denoted by D514, contains (except relations in (cid:4)B5){PP, EQ}, {PP−1, EQ}.The second maximal distributive subalgebra, denoted by D520, contains in addition the following eight relations{PO, EQ}, {PO, PP, EQ}, {PO, PP, PP−1}, {DR, PO, PP{DR, PO, PP, PP{DR, PO, EQ}, {DR, PO, PP, EQ}.14 and D5It is easy to see that both D5−1, EQ},−1}, {PO, PP−1, EQ},20 are contained in H5, the maximal tractable subclass of RCC5 identified in [43,27].For RCC8, the closure of basic relations contains 37 nonempty relations. These are the eight basic relations and the following 29 relations−1, EQ},−1},−1},−1, EQ},−1, EQ},−1, NTPP−1, NTPP−1, NTPP−1}, {PO, TPP, NTPP},−1}, {PO, TPP, TPP−1, EQ},−1, NTPP{PO, TPP}, {PO, TPP{PO, TPP{PO, TPP, NTPP, TPP{PO, TPP, TPP{PO, TPP, NTPP, TPP{TPP, NTPP}, {TPP{EC, PO}, {EC, PO, TPP}, {EC, PO, TPP{EC, PO, TPP, NTPP},−1},−1, NTPP{EC, PO, TPP−1, EQ},{EC, PO, TPP, TPP{EC, PO, TPP, NTPP, TPP{EC, PO, TPP, TPP−1, EQ},{EC, PO, TPP, NTPP, TPP{DC, EC}, {DC, EC, PO}, {DC, EC, PO, TPP},{DC, EC, PO, TPP{DC, EC, PO, TPP, NTPP},−1},−1, NTPP{DC, EC, PO, TPP−1, EQ},{DC, EC, PO, TPP, TPP{DC, EC, PO, TPP, NTPP, TPP{DC, EC, PO, TPP, TPP−1, EQ},−1, NTPP−1, NTPP−1, NTPP−1, EQ},−1, EQ},−1},−1, EQ}, (cid:6)8,where (cid:6)8 is the universal relation consisting of all RCC8 basic relations.The first maximal distributive subalgebra, denoted by D841, contains in addition the following four relations{TPP, EQ}, {TPP, NTPP, EQ},−1, NTPP{TPP−1, EQ}, {TPP−1, EQ}.This distributive subalgebra turns out to be exactly the class of convex RCC8 relations identified in [8]. The second maximal distributive subalgebra, denoted by D864, contains in addition the following 27 relations{PO, EQ}, {PO, TPP, EQ},{PO, TPP{PO, TPP, NTPP, EQ},−1, EQ}, {PO, TPP, TPP−1},S. Li et al. / Artificial Intelligence 225 (2015) 51–7675−1},−1, EQ},−1, NTPP−1, NTPP−1, EQ},−1},−1},−1, NTPP−1},−1, NTPP{PO, TPP{PO, TPP, TPP{PO, TPP, NTPP, TPP{PO, TPP, NTPP, TPP{EC, PO, EQ}, {EC, PO, TPP, EQ},−1, EQ},{EC, PO, TPP−1, NTPP{EC, PO, TPP{EC, PO, TPP, NTPP, EQ},{EC, PO, TPP, TPP{EC, PO, TPP, TPP{EC, PO, TPP, NTPP, TPP{EC, PO, TPP, NTPP, TPP{DC, EC, PO, EQ}, {DC, EC, PO, TPP, EQ},−1, EQ},{DC, EC, PO, TPP−1},{DC, EC, PO, TPP, TPP−1, NTPP{DC, EC, PO, TPP{DC, EC, PO, TPP, NTPP, EQ},{DC, EC, PO, TPP, NTPP, TPP{DC, EC, PO, TPP, TPP{DC, EC, PO, TPP, NTPP, TPP−1},−1, NTPP−1},−1, NTPP−1, NTPP−1, EQ},−1},−1},−1},−1}.It is easy to check that both D8in [42].41 and D864 are contained in (cid:4)H8, one of the three maximal subclasses of RCC8 identified Appendix C. Supplementary materialSupplementary material related to this article can be found online at http://dx.doi.org/10.1016/j.artint.2015.03.010.References[1] James F. Allen, Maintaining knowledge about temporal intervals, Commun. ACM 26 (11) (1983) 832–843.[2] Nouhad Amaneddine, Jean-François Condotta, From path-consistency to global consistency in temporal qualitative constraint networks, in: AIMSA, [3] Nouhad Amaneddine, Jean-François Condotta, On the minimal labeling problem of temporal and spatial qualitative constraints, in: FLAIRS, 2013, 2012, pp. 152–161.pp. 16–21.[4] Philippe Balbiani, Jean-François Condotta, Luis Fariñas del Cerro, A new tractable subclass of the rectangle algebra, in: IJCAI, 1999, pp. 442–447.[5] Anton Belov, Mikolás Janota, Inês Lynce, João Marques-Silva, On computing minimal equivalent subformulas, in: CP, 2012, pp. 158–174.[6] Manuel Bodirsky, Stefan Wölfl, RCC8 is polynomial on networks of bounded treewidth, in: IJCAI, 2011, pp. 756–761.[7] Béla Bollobás, Modern Graph Theory, Graduate Texts in Mathematics, vol. 184, Springer, 1998.[8] Priti Chandra, Arun K. Pujari, Minimality and convexity properties in spatial CSPs, in: ICTAI, 2005, pp. 589–593.[9] Assef Chmeiss, Vincent Krawczyk, Lakhdar Sais, Redundancy in CSPs, in: ECAI, 2008, pp. 907–908.[10] Chiu Wo Choi, Jimmy Ho-Man Lee, Peter J. Stuckey, Removing propagation redundant constraints in redundant modeling, ACM Trans. Comput. Log. [11] Anthony G. Cohn, Jochen Renz, Qualitative spatial reasoning, in: F. van Harmelen, V. Lifschitz, B. Porter (Eds.), Handbook of Knowledge Representation, [12] Jean-François Condotta, Souhila Kaci, Nicolas Schwind, A framework for merging qualitative constraints networks, in: FLAIRS, 2008, pp. 586–591.[13] Ernest Davis, Qualitative spatial reasoning in interpreting text and narrative, Spat. Cogn. Comput. 13 (4) (2013) 264–294.[14] Ernest Davis, Nicholas Mark Gotts, Anthony G. Cohn, Constraint networks of topological relations and convexity, Constraints 4 (3) (1999) 241–280.[15] Matt Duckham, Sanjiang Li, Weiming Liu, Zhiguo Long, On redundant topological constraints (extended abstract), in: KR, 2014, pp. 500–508.[16] Ivo Düntsch, Relation algebras and their application in temporal and spatial reasoning, Artif. Intell. Rev. 23 (4) (2005) 315–357.[17] Ivo Düntsch, Hui Wang, Stephen McCloskey, A relation-algebraic approach to the region connection calculus, Theor. Comput. Sci. 255 (1–2) (2001) [18] Max J. Egenhofer, David M. Mark, Naive geography, in: COSIT, 1995, pp. 1–15.[19] Max J. Egenhofer, Jayant Sharma, Assessing the consistency of complete and incomplete topological information, Geogr. Syst. 1 (1) (1993) 47–68.[20] Alfonso Gerevini, Alessandro Saetti, Computing the minimal relations in point-based qualitative temporal reasoning through metagraph closure, Artif. Intell. 175 (2) (2011) 556–585.8 (4) (2007).Elsevier, 2008.63–83.76S. Li et al. / Artificial Intelligence 225 (2015) 51–76[21] Allen Ginsberg, Knowledge-base reduction: a new approach to checking knowledge bases for inconsistency and redundancy, in: AAAI, 1988, pp. 585–589.[22] Georg Gottlob, Christian G. Fermüller, Removing redundancy from a clause, Artif. Intell. 61 (2) (1993) 263–289.[23] Stephan Grimm, Jens Wissmann, Elimination of redundancy in ontologies, in: ESWC, 2011, pp. 260–274.[24] Hans W. Guesgen, Spatial reasoning based on Allen’s temporal logic, Technical report, International Computer Science Institute, 1989.[25] Livia Hollenstein, Ross Purves, Exploring place through user-generated content: using Flickr to describe city cores, J. Spat. Inf. Sci. 1 (1) (2010) 21–48.[26] Jinbo Huang, Jason Jingshi Li, Jochen Renz, Decomposition and tractability in qualitative spatial and temporal reasoning, Artif. Intell. 195 (2013) [27] Peter Jonsson, Thomas Drakengren, A complete classification of tractability in RCC-5, J. Artif. Intell. Res. 6 (1997).[28] Roman Kontchakov, Yavor Nenov, Ian Pratt-Hartmann, Michael Zakharyaschev, On the decidability of connectedness constraints in 2D and 3D Euclidean spaces, in: IJCAI, 2011, pp. 957–962.[29] Jason Jingshi Li, Sanjiang Li, On finding approximate solutions of qualitative constraint networks, in: ICTAI, 2013, pp. 30–37.[30] Sanjiang Li, Weiming Liu, Shengsheng Wang, Qualitative constraint satisfaction problems: an extended framework with landmarks, Artif. Intell. 201 [31] Sanjiang Li, Mingsheng Ying, Region connection calculus: its models and composition table, Artif. Intell. 145 (1–2) (2003) 121–146.[32] Paolo Liberatore, Redundancy in logic I: CNF propositional formulae, Artif. Intell. 163 (2) (2005) 203–232.[33] Gérard Ligozat, Reasoning about cardinal directions, J. Vis. Lang. Comput. 9 (1) (1998) 23–44.[34] Gérard Ligozat, Jochen Renz, What is a qualitative calculus? A general framework, in: PRICAI, 2004, pp. 53–64.[35] Weiming Liu, Sanjiang Li, Reasoning about cardinal directions between extended objects: the NP-hardness result, Artif. Intell. 175 (18) (2011) [36] Weiming Liu, Sanjiang Li, Solving minimal constraint networks in qualitative spatial and temporal reasoning, in: CP, 2012, pp. 464–479.[37] Weiming Liu, Xiaotong Zhang, Sanjiang Li, Mingsheng Ying, Reasoning about cardinal directions between extended objects, Artif. Intell. 174 (12–13) [38] Ugo Montanari, Networks of constraints: fundamental properties and applications to picture processing, Inf. Sci. 7 (1974) 95–132.[39] Bernhard Nebel, Computational properties of qualitative spatial reasoning: first results, in: KI, 1995, pp. 233–244.[40] Bernhard Nebel, Hans-Jürgen Bürckert, Reasoning about temporal relations: a maximal tractable subclass of Allen’s interval algebra, J. ACM 42 (1) 140–164.(2013) 32–58.2155–2169.(2010) 951–983.(1995) 43–66.[41] David A. Randell, Zhan Cui, Anthony G. Cohn, A spatial logic based on regions and connection, in: KR, 1992, pp. 165–176.[42] Jochen Renz, Maximal tractable fragments of the region connection calculus: a complete analysis, in: IJCAI, 1999, pp. 448–455.[43] Jochen Renz, Bernhard Nebel, On the complexity of qualitative spatial reasoning: a maximal tractable fragment of the region connection calculus, in: [44] James G. Schmolze, Wayne Snyder, Detecting redundancy among production rules using term rewrite semantics, Knowl.-Based Syst. 12 (1–2) (1999) IJCAI, 1997, pp. 522–527.3–11.[45] Steven Schockaert, Sanjiang Li, Convex solutions of RCC8 networks, in: ECAI, 2012, pp. 726–731.[46] Hui Shi, Cui Jian, Bernd Krieg-Brückner, Qualitative spatial modelling of human route instructions to mobile robots, in: ACHI, 2010, pp. 1–6.[47] Michael Sioutis, Manolis Koubarakis, Consistency of chordal RCC-8 networks, in: ICTAI, 2012, pp. 436–443.[48] Muralikrishna Sridhar, Anthony G. Cohn, David C. Hogg, From video to RCC8: exploiting a distance based semantics to stabilise the interpretation of mereotopological relations, in: COSIT, 2011, pp. 110–125.[49] John G. Stell, Boolean connection algebras: a new approach to the region-connection calculus, Artif. Intell. 122 (1) (2000) 111–136.[50] Peter van Beek, Approximation algorithms for temporal reasoning, in: IJCAI, 1989, pp. 1291–1296.[51] Marc B. Vilain, Henry A. Kautz, Constraint propagation algorithms for temporal reasoning, in: AAAI, 1986, pp. 377–382.[52] Jan Oliver Wallgrün, Exploiting qualitative spatial reasoning for topological adjustment of spatial data, in: SIGSPATIAL/GIS, 2012, pp. 229–238.[53] Jan Oliver Wallgrün, Frank Dylla, Spatial data integration with qualitative integrity constraints, in: Ross Purves, Robert Weibel (Eds.), Online Proceedings of the 6th International Conference on Geographic Information Science, GIScience 2010, 2010.[54] Diedrich Wolter, Frank Dylla, Stefan Wölfl, Jan Oliver Wallgrün, Lutz Frommberger, Bernhard Nebel, Christian Freksa, Sailaway: spatial cognition in sea navigation, Künstl. Intell. 22 (1) (2008) 28–30.[55] Frank Wolter, Michael Zakharyaschev, Spatial reasoning in RCC-8 with boolean region terms, in: ECAI, 2000, pp. 244–250.