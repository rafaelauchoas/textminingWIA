Artificial Intelligence 180–181 (2012) 1–19Contents lists available at SciVerse ScienceDirectArtificial Intelligencewww.elsevier.com/locate/artintManipulating the quota in weighted voting games ✩Michael Zuckerman a, Piotr Faliszewski b, Yoram Bachrach c, Edith Elkind d,∗a School of Computer Science and Engineering, The Hebrew University of Jerusalem, Israelb AGH University of Science and Technology, Krakow, Polandc Microsoft Research Ltd., Cambridge, United Kingdomd Division of Mathematical Sciences, School of Physical and Mathematical Sciences, Nanyang Technological University, Singaporea r t i c l ei n f oa b s t r a c tArticle history:Received 27 November 2010Received in revised form 28 December 2011Accepted 31 December 2011Available online 4 January 2012Keywords:Weighted voting gamesManipulationComplexityWeighted voting games provide a simple model of decision-making in human societiesand multi-agent systems. Such games are described by a set of players, a list of players’weights, and a quota; a coalition of the players is said to be winning if the total weight ofits members meets or exceeds the quota. The power of a player in a weighted voting gameis traditionally identified with her Shapley–Shubik index or her Banzhaf index, two classicpower measures that reflect the player’s marginal contribution under different coalitionformation scenarios. In this paper, we investigate by how much one can change a player’spower, as measured by these indices, by modifying the quota. We give tight bounds on thechanges in the individual player’s power that can result from a change in quota. We thendescribe an efficient algorithm for determining whether there is a value of the quota thatmakes a given player a dummy, i.e., reduces her power (as measured by both indices) to 0.We also study how the choice of quota can affect the relative power of the players. Finally,we investigate scenarios where one’s choice in setting the quota is constrained. We showthat optimally choosing between two values of the quota is complete for the complexityclass PP, which is believed to be significantly more powerful than NP. On the other hand,we empirically demonstrate that even small changes in quota can have a significant effecton a player’s power.© 2012 Elsevier B.V. All rights reserved.1. IntroductionCooperation and joint decision-making are key aspects of many interactions among self-interested agents. In such in-teractions, the collaborating agents may have different preferences, so they need a method to agree on a common courseof action. One possible solution to this problem is to use a voting procedure, and select a plan that is supported by amajority of voters. This approach to decision-making is very common in human societies and can be naturally extended tomulti-agent systems [12].Under majority voting, all agents have the same power. However, treating all voters as equals is not always appropriate:some of the agents may be more important for the task at hand than others, or contribute a larger amount of resources toit. Similarly, in parliamentary voting, some of the legislators may represent a larger constituency, and therefore should begiven more influence over the final outcome. This issue can be addressed by employing the machinery of weighted votinggames. In such games, each agent is associated with a nonnegative weight, and a subset (coalition) of agents is deemed to✩A preliminary version of this paper was presented at the Twenty Third AAAI Conference on Artificial Intelligence (AAAI-08).* Corresponding author.E-mail addresses: michez@cs.huji.ac.il (M. Zuckerman), faliszew@agh.edu.pl (P. Faliszewski), yorambac@gmail.com (Y. Bachrach), eelkind@ntu.edu.sg(E. Elkind).0004-3702/$ – see front matter © 2012 Elsevier B.V. All rights reserved.doi:10.1016/j.artint.2011.12.0032M. Zuckerman et al. / Artificial Intelligence 180–181 (2012) 1–19be winning if its weight meets or exceeds a given quota. The voter’s weight reflects her relative importance in the decision-making process: more important voters are assigned a higher weight. The quota is typically set to be slightly greater thanhalf of the total weight, but other values of quota (e.g., 2/3 of the total weight) are quite common as well.Even though weights are intended to model the agents’ relative importance, an agent’s ability to influence the groupdecision is not always directly proportional to her weight. For example, if the quota is so high that the only winningcoalition is the one that involves all agents, each agent can veto the decision, and hence all agents have equal power. Thus,to measure the power, instead of using agents’ weights, one typically employs one of the so-called power indices. Perhapsthe most prominent ones among them are the Shapley–Shubik index [41] and the Banzhaf index [11,6]. Intuitively, bothof these indices measure the probability that a given agent is critical to a forming coalition, i.e., that the coalition wouldbecome winning if the agent joined in; the difference between these two power indices comes from different coalitionformation models. Besides measuring the apriori voting power, the power indices can be used to share the payoff obtainedby executing the task: a natural approach is to pay each agent in proportion to their voting power, i.e., their Shapley–Shubikindex or their Banzhaf index. Also, in politics, power indices provide very useful information to lobbyists who need to decidehow to allocate their contributions.The importance of power indices makes them a natural target for manipulators, i.e., rogue parties that want to increaseor decrease the voting power of a certain agent.1 Now, accomplishing this goal by changing an agent’s weight may requirea substantial investment on the manipulator’s part, such as, e.g., recruiting additional supporters of a political party. Incontrast, it may be relatively easy to change the quota. Indeed, such changes are not unusual in political decision-making,and can be explained by the desire to build a consensus (if the quota is increased) or simplify the passage of bills (if thequota is decreased)—for instance, a recent move by Democratic members of the U.S. Senate to change the filibuster rules [22]can be viewed as an attempt to change the quota. Therefore, the entity that determines the format of the decision-makingprocedure (in what follows, we will refer to this entity as the central authority) might be able to change the quota withoutencountering substantial resistance. However, this seemingly innocent change may have very different effects on differentvoters, and therefore the central authority can use it to advance its own goals.In some settings, the quota may have to be updated in response to other changes in the voting system, such as expansionof the system to include new players (as was the case, for instance, when the European Union expanded from 15 to 27member states) or changes to players’ weights (it is plausible that in the future the countries’ weights in the EU Councilmay have to be updated to reflect the demographic changes). In such scenarios, the central authority would normally havesome freedom in setting the quota and may pursue a variety of objectives when doing so; for a discussion of this issue inthe context of European Union enlargement, see [28,30,32].In this paper, we study the effect of quota changes on the agents’ power, as measured by the Shapley–Shubik power indexand by the Banzhaf power index. We first provide tight bounds on the change in voter’s power that can be accomplishedby modifying the quota. It turns out that there are settings where all voters except for the one with the maximum weightcan have their voting power reduced to zero by an appropriate choice of the quota, i.e., the ratio between the voter’s powerbefore and after the change of quota can be unbounded; however, for both indices, we can obtain tight worst-case boundson the difference between the values of the index before and after the change.Having established that changing the quota may have a very significant effect on the agents’ power, we focus on thealgorithmic aspects of the manipulator’s problem. The manipulator may want to either minimize or maximize the targetplayer’s power. We limit our attention to the former problem. In this case, the best that the manipulator can hope for is tomake the target player a dummy, i.e., to ensure that this player’s power (as measured by both indices) is 0. We show thatthe center can easily determine whether there is a quota value that accomplishes this. This result is somewhat surprising,since checking if a given agent is a dummy for a fixed value of the quota is well-known to be coNP-complete [37,10,35].The ranking of the agents is sometimes more important than the exact power they possess: for instance, a party inparliament may have a better negotiating position if it is among the top three most powerful players. Therefore, we alsostudy the problem of setting the quota so as to guarantee a particular relation (equality or inequality) between two agents’power-index values. We demonstrate that as long as two agents have different weights, the quota can be selected so thatthey have different voting power. A related issue that we consider is that of selecting the quota so as to ensure that allagents with different weights have different power-index values. We exhibit a family of weight vectors for which essentiallyany value of the quota has this property. In contrast, we show that if agents’ weights grow fast enough, this goal cannot beachieved.In many real-life settings, the center will only be able to change the quota by a relatively small amount, or choose amonga few acceptable quota values. It is therefore interesting to ask if the manipulator can achieve his goals when his abilityto change the quota is constrained. We provide a twofold answer to this question. First, we show that choosing the quotaoptimally from a given set is likely to be hard. Specifically, we prove that the problem of deciding which of the two givenvalues of the quota is better for a particular agent is complete for the complexity class PP, which is believed to be morepowerful than NP. However, if the manipulator’s computational resources are not limited, he may be able to achieve his1 In voting theory literature, the term “manipulation” is reserved for voters’ dishonest behavior, while the dishonest behavior by the election authoritiesis usually referred to as “control”. However, in this paper we will use both terms interchangeably.M. Zuckerman et al. / Artificial Intelligence 180–181 (2012) 1–193goals even if the range of available quotas is fairly small: we present experimental results showing that even changing thequota by up to 20% may have a noticeable effect on agents’ power.We remark that our work does not provide an algorithm for choosing a quota so as to maximize of minimize a givenplayer’s power. This question has been recently addressed by Zick et al. [43]; their paper builds on the conference versionof our work. Zick et al. focus on the Shapley–Shubik power index, and show that the power of a player can be maximizedby setting the quota to that player’s weight; in contrast, a slightly higher quota is quite likely to minimize this player’spower. More precisely, if a player’s weight w is small relative to the weights of the other players, then w + 1 is often theworst possible value of the quota for this player; on the other hand, if w is relatively large, the player’s power can often beminimized by setting the quota to 1 (in which case all players have the same power). Zick et al. also show that checkingwhether a given quota maximizes or minimizes a player’s power is NP-hard, and provide a polynomial-time algorithm fordeciding whether all players have equal power. Their results, together with the work presented in this paper, demonstratethat changing the quota is a subtle, but effective way to alter the distribution of power in a weighted voting system.The rest of the paper is organized as follows. After reviewing the related work in Section 1.1 and presenting the necessarydefinitions in Section 2, in Section 3 we establish tight upper bounds on the changes in players’ power that can be achievedby altering the quota. Section 4 describes an efficient algorithm for checking if there is a choice of quota that turns a givenplayer into a dummy. Setting the quota so as to ensure that different players have different power is discussed in Section 5.In Section 6, we analyze the complexity of comparing a player’s power for two different values of the quota. Section 7presents our experimental results and Section 8 concludes.1.1. Related workA detailed study of many aspects of weighted voting games can be found in [20] and [42]. The Shapley value originatedin a seminal paper of Shapley [40], who considered how to fairly allocate the utility gained by the grand coalition in acooperative game. A subsequent paper of Shapley and Shubik [41] applied the Shapley value to weighted voting games,so this value is referred to as the Shapley–Shubik power index in this context. The first version of the Banzhaf power indexwas introduced by Banzhaf in [6]; an alternative definition was later proposed by Dubey and Shapley [11]. The definitiongiven in [11] has a direct probabilistic interpretation, while for Banzhaf’s original definition this is not the case. The indexproposed in [6] is now known as the normalized Banzhaf index, as it rescales the players indices (as defined in [11]) so thatthey sum up to 1. Felsenthal and Machover [21] provide a persuasive argument against using the normalized version of theBanzhaf index; therefore, in this paper we use the definition of Dubey and Shapley.Both power indices have been thoroughly studied and are considered standard tools [39]. Their practical applicationsinclude analyzing the voting structures of the European Union Council of Ministers and the IMF [33,29]. Computationalcomplexity of power indices is also quite well understood: while computing both indices is #P-hard [37,10,35,16], they canbe computed in polynomial time when all weights are at most polynomial in the number of players [34], and several papers(e.g., [19,4]) discuss ways to approximate them. Some of these algorithms work well in practice and thus justify the use ofpower indices as a practical way to estimate a player’s influence.The effect of the choice of quota on the players’ power has been studied by Leech and Machover [30] in the context ofpower distribution in the European Union. However, Leech and Machover focus on the inverse problem: namely, for eachvalue of the quota between 51% to 99% they determine the weights that ensure that the voting power of each country (asmeasured by power indices) is proportional to its population. Further, Leech and Machover only consider a specific votingscenario and do not investigate the algorithmic aspects of the quota selection problem.More recently, designing weighted voting games with pre-specified values of power indices has been studied by a num-ber of authors [3,18,1,9,26]. However, in these papers the game designer is assumed to be able to select both the weightsand the quota, whereas we assume that the players’ weights cannot be changed. Moreover, none of these papers provides aprovably polynomial-time exact algorithm for the problem they study. In more detail, Aziz et al. [3] use a generating func-tion approach, while Kurz [26] makes use of integer linear programming; for both methods, the running time is exponentialin the worst case. The algorithm of de Keijzer et al. [9] is based on direct enumeration and is therefore exponential aswell. Fatima et al. [18] provide an approximation algorithm. Finally, Alon and Edelman [1] focus on identifying vectors thatcan be approximated by normalized Banzhaf vectors (i.e., vectors of normalized Banzhaf indices) of weighted voting games.Another related question is whether one can build a game with a target power distribution by combining several weightedvoting games: this issue was investigated by Faliszewski et al. [13].A number of papers [2,27,38] consider manipulation by voters in weighted voting games, namely, splitting the weightbetween two or more identities, as well as merging and annexation. In contrast with our work, all these papers assumethat, despite the changes in the number of players, the quota always remains fixed. Another form of manipulation that maybe available to a voter in a weighted voting game is to declare a conflict with another voter, i.e., to refuse to be in thesame coalition with him. Kilgour [25] demonstrates that such manipulation may increase the Shapley value of both voters;Brams [8] shows that this remains true for the Banzhaf index.Computational aspects of various forms of dishonest behavior in voting with m alternatives received a lot of attentionin recent years: see [15,17,14] for surveys of this stream of research. Specifically, this research considers manipulation (dis-honest behavior by the voters), control (dishonest behavior by the election authority), and bribery (dishonest behavior by an4M. Zuckerman et al. / Artificial Intelligence 180–181 (2012) 1–19outside party). This line of work, and, in particular, the papers devoted to control, provides motivation for our research, butresults for the model with m alternatives cannot be directly applied to our setting.2. Preliminaries and notationA transferable utility game G = (I, v) is given by a finite set of players I and a function v : 2I → R; the function v iscalled the characteristic function of the game G. A coalition is a subset of players S ⊆ I ; the set I of all players is calledthe grand coalition. A transferable utility game G is said to be simple if v only takes values in {0, 1}, i.e., v(S) ∈ {0, 1} forevery coalition S ⊆ I , and, moreover, v(S) = 1 implies v(S. In a simple gameis said to be winning if v(S) = 1 and losing otherwise. A weighted voting game is a simpleG = (I, v), a coalition S ⊆ Igame that can be described by a weight vector w = (w 1, . . . , wn) ∈ Rn+ and a quota q ∈ R+: a coalition S is winning if itsi∈S w i (cid:2) q, and losing otherwise; we write G = [I; w; q]. When discussingtotal weight meets or exceeds the quota, i.e.,weighted voting games, we use the terms “players”, “agents” and “voters” interchangeably.(cid:6)) = 1 for every coalition Ssuch that S ⊆ S(cid:2)Given a weighted voting game G, we say that an agent i ∈ S is pivotal for a coalition S if v(S) = 1 and v(S \ {i}) = 0;similarly, i contributes to S if v(S) = 0, v(S ∪ {i}) = 1. A player i is called a dummy if he does not contribute to any coalition,i.e., for every S ⊆ I we have v(S ∪ {i}) = v(S). Two players i and j are said to be symmetric if v(S ∪ {i}) = v(S ∪ { j}) for everyS ⊆ I \ {i, j}; note that if w i = w j then i and j are symmetric, but the converse is not always true. We denote by w(S) thei∈S w i . Unless explicitly specified otherwise, we assume that 0 < w 1 (cid:3) · · · (cid:3) wntotal weight of a coalition S, i.e., w(S) =and that 0 < q (cid:3) w(I). It is easy to see that this does not affect the generality of our results.(cid:2)(cid:6)(cid:6)Though weighted voting games are usually defined for arbitrary positive real weights, it is well-known [42] that for(cid:6) ∈ N such that for every S ⊆ Ievery weighted voting game G = [I; w; q] there exists a game G(cid:6)it holds that w(S) (cid:2) q if and only if wi , i = 1, . . . , n, and qcan beexpressed using poly(n) bits. Thus, in what follows we assume that all weights and the quota are positive integers given inbinary, i.e., each game with n players can be described using poly(n) bits.(cid:6) ∈ Nn, q. Moreover, it can be assumed that each w(cid:6)] with w(cid:6) = [I; w(cid:6)(S) (cid:2) q(cid:6); q(cid:6)(cid:6)2.1. Shapley–Shubik index and Banzhaf indexBoth the Shapley–Shubik index and the Banzhaf index measure an agent’s marginal contribution to possible coalitions.However, they differ in the underlying coalition formation scenarios: while the Shapley–Shubik index implicitly assumesthat the agents join a coalition in random order, the Banzhaf index is based on the assumption that each agent decideswhether to join a coalition independently at random. Both of these measures can be defined for arbitrary transferableutility games. However, in what follows we provide definitions that are tailored to weighted voting games.Let Π(I) be the set of all one-to-one mappings from I to I (i.e., the set of all permutations of I ); an element of Π(I) isdenoted by π . Set Sπ (i) = { j | π ( j) < π (i)}: the set Sπ (i) consists of all predecessors of i in π . The Shapley–Shubik index ofthe i-th agent in a game G = [I; w; q] is denoted by ϕi(G) and is given by the following expression:ϕi(G) = 1n!(cid:3)(cid:4)(cid:5)vSπ (i) ∪ {i}(cid:6)(cid:5)− v(cid:6)(cid:7).Sπ (i)π ∈Π (I)(1)In words, the Shapley–Shubik power index counts the fraction of all orderings of the agents in which agent i is pivotal forthe coalition formed by his predecessors and himself. We will occasionally abuse notation and say that an agent i is pivotalfor a permutation π if it is pivotal for the coalition Sπ (i) ∪ {i}.The Banzhaf index βi(G) of an agent i in a game G = [I; w; q] is computed as follows:βi(G) = 12n−1(cid:3)(cid:4)v(S) − v(cid:5)S \ {i}(cid:6)(cid:7).S: i∈S(2)This index simply counts the fraction of coalitions for which agent i is pivotal.Both of these indices have several useful properties that make them very convenient to work with. In particular, bothof them have the dummy player property, which states that the value of the index for a given player is 0 if and only if hedoes not contribute to any coalition, and the symmetry property, which states that if two players are symmetric, then theirindices are equal. Also, Shapley–Shubik index (but not the Banzhaf index) has the normalization property, which means thatthe sum of Shapley–Shubik indices of all players is equal to 1.2 All of these properties are easy to verify from the definitions.Both the number of coalitions in an n-player game and the number of permutations of n players grow exponentiallywith n. Therefore, computing each of the power indices directly from its definition would take superpolynomial time. More-over, both the Shapley–Shubik index and the Banzhaf index are known to be #P-hard to compute [37,10,35,16].To simplify notation, given a game G = [I; w; q], we will sometimes write ϕi(q) and βi(q) instead of ϕi(G) and βi(G) ifI and w are clear from the context.2 One can define a normalized version of the Banzhaf index by setting β(cid:6)original paper [6]. However, the resulting index does not admit a direct probabilistic interpretation; see [21] for a discussion.i (G) = βi (G)/(j∈I β j (G)); indeed, this is the definition given in Banzhaf’s(cid:2)M. Zuckerman et al. / Artificial Intelligence 180–181 (2012) 1–195We remark that for every weighted voting game with a set of players I and a weight vector w ∈ N, and every integerq ∈ (0, w(I)] we have ϕi(q) = ϕi(w(I) + 1 − q), βi(q) = βi(w(I) + 1 − q) for all i ∈ I . Indeed, player i is pivotal for a coalitionS in the game [I; w; q] if and only if it is pivotal for a coalition (I \ S) ∪ {i} in the game [I; w; w(I) + 1 − q]. Similarly,i is pivotal for a permutation π in the game [I; w; q] if and only if it is pivotal for the permutation π (cid:6)in the game[I; w; w(I) + 1 − q], where π (cid:6)is obtained by reversing π . Observe also that max{q, w(I) − q + 1} > w(I)/2. The reason whythis observation is useful is that in most realistic applications of weighted voting games the quota is usually required tobe at least half of the total weight. On the other hand, examples with small values of q are sometimes easier to constructand describe. The argument above shows that we may focus on such examples, since the requirement q > w(I)/2 is easy tosatisfy: any example with q < w(I)/2 can be transformed into one with q > w(I)/2.3. Upper and lower bounds for a single playerWe will start this section by showing that the center can significantly change the players’ Shapley–Shubik and Banzhafindices by manipulating the quota. We then proceed to quantify the worst case effects of this manipulation for all players.We will be interested both in the ratios of the player’s powers for a given pair of quotas and in their differences.Example 1. Consider a weighted voting game G = [I; (1, 2, 3); 3]. In this game, player 3 is pivotal for three coalitions (namely,{3}, {1, 3} and {2, 3}) and for four permutations (namely, 312, 321, 132 and 231), so we have β3(G) = 3/4, ϕ3(G) = 2/3.(cid:6) = [I; (1, 2, 3); 1], player 3 is only pivotal for the singleton coalition {3},Now change the quota to 1. In the resulting game Gso we have β3(G(cid:6)) = 1/4. Similarly, player 3 is only pivotal if it appears first in a permutation, so we have ϕ3(G(cid:6)) = 1/3.A natural bound on manipulator’s influence is the worst-case ratio between a given player’s values of the index in thetwo games corresponding to two different values of the quota. Unfortunately, as we will now show, this ratio can only bebounded for the largest player; for all other players, it might be possible to turn them into dummies.Theorem 2. Given a set of players I , |I| = n, there exists a weight vector w, 0 < w 1 (cid:3) · · · (cid:3) wn, and quotas q, q(cid:6)) = 0 and βi(q) (cid:8)= 0, βi(qfor i = 1, . . . , n − 1, we have ϕi(q) (cid:8)= 0, ϕi(q0 < w 1 (cid:3) · · · (cid:3) wn and every q, q(cid:6) (cid:3) w(I) such that(cid:6)) = 0. On the other hand, for every weight vector w such that(cid:6)) (cid:3) 2n−1, and these bounds are tight.(cid:6) (cid:3) w(I), we have ϕn(q)/ϕn(q(cid:6)) (cid:3) n, βn(q)/βn(qProof. Set w = (1, . . . , 1(cid:8) (cid:9)(cid:10) (cid:11)n−1, n). In the game G = [I; w; 1] all players have equal power, so by symmetry we have ϕi(1) = 1/nfor i = 1, . . . , n. Moreover, each player is pivotal for exactly one coalition, so we have βi(1) = 1/2n−1. On the other hand, in(cid:6) = [I; w; n], all the players except for the last one are dummies, so their Shapley–Shubik and Banzhaf indicesthe game Gare 0, and we have ϕn(n) = 1, βn(n) = 1. Hence, ϕn(n)/ϕn(1) = n, βn(n)/βn(1) = 2n−1.To see that the ratio ϕn(q)/ϕn(q1/n (cid:3) ϕn(G) (cid:3) 1, where both inequalities follow from the fact that 0 (cid:3) ϕi(G) (cid:3) ϕn(G) for all i = 1, . . . , n andSimilarly, in any weighted voting game G we have 1/2n−1 (cid:3) βn(G) (cid:3) 1, so the ratio βn(q)/βn(q(cid:6)) cannot exceed n, observe that for every n-player weighted voting game G it holds thati=1 ϕi(G) = 1.(cid:6)) cannot exceed 2n−1. (cid:2)(cid:2)nThe change of quota in the proof of Theorem 2 reduced some players’ voting power to 0. What if we are only allowedto change the quota so that all index values remain positive? It turns out that even under this constraint a change in quotacan reduce a player’s Shapley–Shubik index and Banzhaf index by an exponential factor.Example 3. Consider the weight vector w = (1, 2, 4, . . . , 2n−1) and quotas q = 2k − 1, k = 1, . . . , n. For i = 1, . . . , n, setS i = {1, . . . , i}. When q = 2i−1 − 1, player i is pivotal for every coalition of the form X ∪ {i}, where X is a strict subset ofS i−1, i.e., for 2i−1 − 1 coalitions. However, when q = 2i − 1, i is only pivotal for a single coalition, namely, S i . Thus, fori = (cid:9)n/2(cid:10), changing the quota from 2i−1 − 1 to 2i − 1 lowers the Banzhaf index of player i by an exponential factor.Similarly, for q = 2i−1 − 1, player i is pivotal for every permutation where it appears after a strict subset of S i−1, i.e., for(cid:12)i−2(cid:3)k=0i − 1k(cid:13)k!(n − k − 1)! ===i−1(cid:3)k=1i−1(cid:3)k=1i−1(cid:3)k=1(cid:12)i − 1k − 1(cid:13)(k − 1)!(n − k)!(n − k)!(i − 1)!(i − k)!(cid:13)(cid:12)n − ki − k(i − 1)!(n − i)!permutations. In contrast, for q = 2i − 1, player i is only pivotal if it appears after all players in S i−1, i.e., for (i − 1)!(n − i)!permutations. For i = (cid:9)n/2(cid:10), the gap between these two quantities is exponential in n.6M. Zuckerman et al. / Artificial Intelligence 180–181 (2012) 1–19Since for the first n − 1 players it is impossible to bound the worst-case ratio between their index values for twodifferent quotas, we will now give tight bounds on the worst-case difference between a given player’s index values in thecorresponding games. We first present our result for the Shapley–Shubik index.Theorem 4. For a set of players I , |I| = n, every weight vector w, 0 < w 1 (cid:3) · · · (cid:3) wn, and every pair of quotas q, qi = 1, . . . , n − 1 the absolute difference |ϕi(q) − ϕi(q|ϕn(q) − ϕn(q(cid:6) (cid:3) w(I), for(cid:6))| does not exceed 1/(n − i + 1) and this bound is tight. For player n, we have(cid:6))| (cid:3) 1 − 1/n, and this bound is tight.(cid:6)) (cid:2) 0 for every qProof. Consider an arbitrary weight vector w that satisfies 0 < w 1 (cid:3) · · · (cid:3) wn and a player i, 1 (cid:3) i < n. We have(cid:6) ∈ (0, w(I)]. On the other hand, the monotonicity of the Shapley–Shubik index impliesϕi(I; w; qk=i ϕk(I; w; q) (cid:3) 1, we have ϕi(I; w; q) (cid:3) 1/(n − i + 1).ϕi(I; w; q) (cid:3) ϕ j(I; w; q) for every j > i and every q ∈ (0, w(I)]. As(cid:6)) (cid:2) 1/n, ϕn(I; w; q) (cid:3) 1, soThus, we obtain |ϕi(I; w; q) − ϕi(I; w; q|ϕn(I; w; q) − ϕn(I; w; q(cid:6))| (cid:3) 1/(n − i + 1). For player n, we have ϕn(I; w; qTo see that these bounds are tight, set w = (1, 2, 4, . . . , 2n−1). In the game [I; w; 2k], where k ∈ {1, . . . , n − 1}, the firstk players are dummies, and the last n − k players have equal power, 1/(n − k). Hence, for i = 1, . . . , n − 1, by changing thequota from 2i to 2i−1, we change the Shapley–Shubik index of the i-th player from 0 to 1/(n − i + 1), as required. For playern, changing the quota from 2n−1 to 1 changes n’s Shapley–Shubik index from 1 to 1/n, yielding the difference 1 − 1/n. (cid:2)(cid:6))| (cid:3) 1 − 1/n.(cid:2)nFor the Banzhaf index, the proof is somewhat more difficult.Theorem 5. For a set of players I , |I| = n, every weight vector w, 0 < w 1 (cid:3) · · · (cid:3) wn, and every pair of quotas q, qi = 1, . . . , n − 1 the absolute difference |βi(q) − βi(q(cid:6))| (cid:3) 1 − 1/2n−1 and this bound is tight.|βn(q) − βn(q(cid:6) (cid:3) w(I), for· 2i−n and this bound is tight. For player n, we have(cid:6))| can be at most(cid:5)n−i(cid:9) n−i2(cid:6)(cid:10)Proof. We consider the case i < n first. To build up intuition, we will first describe a family of games in which our boundsare achieved; subsequently, we will prove that these bounds hold for every weighted voting game. Let I = {1, . . . , n} be a set(cid:10) + i, andof players, fix i ∈ {1, . . . , n − 1}, and let (1, . . . , 1(cid:8) (cid:9)(cid:10) (cid:11)i−1) be the vector of the players’ weights. Set q = 2i · (cid:9) n−i, i, 2i, . . . , 2i(cid:11)(cid:9)(cid:10)n−i(cid:8)2q(cid:6) = 2i. For quota q, agent i contributes to a coalition exactly if this coalition contains (cid:9) n−i(cid:5)(cid:6)(cid:5)2n−in−inumber of players of weight 1. There are(cid:9) n−i(cid:9) n−i22· 2i−1 such coalitions and thus βi(q) =(cid:10)(cid:10) players of weight 2i and any(cid:6)(cid:6)) = 0,(cid:10)· 2i−1/2n−1. Since βi(qwe haveβi(q) − βi(cid:6)(cid:5)q(cid:6)=(cid:13)(cid:12)n − i(cid:9) n−i(cid:10)2· 2i−n.Now, consider an arbitrary weighted voting game [I; w; q] with I = {1, . . . , n}, w 1 (cid:3) · · · (cid:3) wn, and 0 < q (cid:3) w(I). Fix aplayer i ∈ {1, . . . , n − 1}, and let X = {1, . . . , i − 1} and Y = {i + 1, . . . , n}. Let S ⊆ 2I be the set of all the coalitions that playeri is pivotal for. We will now argue that(cid:13)(cid:12)(cid:6)) (cid:2) 0 for every q(cid:6) ∈ (0, w(I)], this proves the theorem for i < n.Pick Z1, Z2 ∈ S so that Z1 (cid:8)= Z2 and Z1 ∩ Y ⊇ Z2 ∩ Y . We claim that Z1 ∩ X (cid:8)= Z2 ∩ X . Indeed, suppose for the sakeof contradiction that Z1 ∩ X = Z2 ∩ X . As Z1 (cid:8)= Z2, it follows that Z2 ∩ Y is a strict subset of Z1 ∩ Y . On the other hand,w j (cid:2) w i for all j ∈ Y , and henceNow, recall that a collection of sets {Q 1, Q 2, . . . , Q (cid:6)} is called a chain if Q 1 ⊇ Q 2 ⊇ · · · ⊇ Q (cid:6). By Sperner’s theorem (see,chains. Let P be some such partition. P induces a partition of S:e.g., [31]), there exists a partition of Y into at mostfor every Z1, Z2 ∈ S, we write Z1 ∼ Z2 if Z1 ∩ Y and Z2 ∩ Y belong to the same chain in P . It is not hard to see that ∼ isan equivalence relation on S. By the argument above, the size of each equivalence class with respect to ∼ does not exceed| X|2(cid:5) |Y |(cid:9) |Y |2. Hence,(cid:6)(cid:10)|S| (cid:3)n − i(cid:9) n−i(cid:10)2Since βi(q) = |S|/2n−1 and βi(q· 2i−1.(cid:3)(cid:3)q >w j (cid:2)w j + w i (cid:2) q,j∈ Z1\{i}j∈ Z2\{i}a contradiction.(cid:12)(cid:13)|Y |(cid:9) |Y |(cid:10)2| X| =· 2· 2i−1,(cid:12)(cid:13)n − i(cid:9) n−i(cid:10)2|S| (cid:3)as required.M. Zuckerman et al. / Artificial Intelligence 180–181 (2012) 1–197For player n, we have argued that 1/2n−1 (cid:3) βi(G) (cid:3) 1 for every n-player game G. Thus, for every weight vector w ∈ Rn+(cid:6))| (cid:3) 1−1/2n−1. Also, we(cid:6)) =with w 1 (cid:3) · · · (cid:3) wn and every pair of games G = [I; w; q] and Ghave seen that for the weight vector w = (1, . . . , 1, n) and games G = [I; w; n] and G1 − 1/2n−1. (cid:2)(cid:6) = [I; w; 1] we have βn(G) − βn(G(cid:6)] we have |βn(G)−βn(G(cid:6) = [I; w; q4. Turning a player into a dummyTurning a given player into a dummy is a very natural goal for a central authority that strongly dislikes a particular agent,e.g., an election authority that wants to ensure that a certain party has no influence in the parliament. One might expectthis problem to be computationally difficult: indeed, it is well-known that checking whether a given player is a dummy iscoNP-complete [37,10,35]. However, it turns out that we can efficiently determine if there exists a value of the quota thatturns a given player into a dummy. That is, if the center’s goal is to ensure that a certain player has no power, finding a“good” quota is easier than checking if a given quota is “good” (assuming P (cid:8)= NP).Definition 6. Given a weight vector w = (w 1, . . . , wn) such that 0 < w 1 (cid:3) w 2 (cid:3) · · · (cid:3) wn and a weight w, we say that w isessential for w ift−1i=1 w i (cid:2) wt − w for all 1 (cid:3) t (cid:3) n.(cid:2)Example 7. Suppose that w i = i for i = 1, . . . , n. Then any positive integer value of w is essential for w = (w 1, . . . , wn): fort = 1 we have w (cid:2) w 1 and hencei=1 w i = 0 (cid:2) w 1 − w, and for t (cid:2) 2 we havet−1i=1 w i (cid:2) t − 1 (cid:2) wt − w.(cid:2)0(cid:2)(cid:2)t−1i=1 w i = 12 (3t − 3) < 3t . Thus, w is essential for w =In contrast, suppose that w i = 3i(w 1, . . . , wn) only if it is sufficiently large, i.e., w (cid:2) 1for i = 1, . . . , n. Then2 (3n + 3).The next theorem justifies using the term “essential” in Definition 6: A player whose weight is essential for the vectorof weights of the remaining players is never a dummy, irrespective of the choice of the quota value for the game. (Be-fore proceeding, the reader may want to convince herself that this is true for the weighted voting games considered inExample 7.)Theorem 8. Let w = (w 1, . . . , wn) be a vector of weights such that 0 < w 1 (cid:3) w 2 (cid:3) · · · (cid:3) wn. A weight w is essential for w if and(cid:6) = {1, . . . , n, n + 1} andonly if for every q ∈ [1, w + w(I)] player n + 1 is not a dummy in the game G(q) = [Iw(cid:6); q], where I(cid:6) = (w 1, . . . , wn, w).(cid:6); wt−1i=1 w i < wt for some t ∈ {1, . . . , n}. Set q = wt . In the gameProof. Suppose first that w is not essential for w, i.e., w +G(q), a coalition is winning if and only if it includes a player s ∈ {t, . . . , n}, i.e., all players 1, . . . , t − 1, n + 1 are dummies inG(q).Conversely, suppose that w is essential for w. Fix a t ∈ {1, . . . , n}, and let (St1, . . . , St2t ) be a list of all subsets of {1, . . . , t},ordered by their weight (from the smallest to the largest). We will now show that this list is sufficiently “dense”.(cid:2)Lemma 9. For every two adjacent sets Sti and Sti+1 in this ordering it holds that w(Sti+1) − w(Sti ) (cid:3) w.2n ), then clearly player n + 1 is not a dummy in G(q). Now, suppose that w < q (cid:3) w(SnBefore we prove Lemma 9, let us show that it implies our theorem. Fix an arbitrary quota q ∈ [1, w + w(I)]. If q (cid:3) w2n ). Since w is essential1) < q, we concludei+1) (cid:2) q.i+1) (cid:2) q. By Lemma 9 we have w(Sn∪ {n + 1} in G(q), which is exactly what we need to show. It remains to proveor q > w(Snfor w, we have w 1 (cid:3) w and hence w(Snthat there exists some i ∈ {1, . . . , 2n − 1} such that w(SnThis means that player n + 1 is pivotal for SniLemma 9.1) = w 1 < q. Combining the inequalities w(Sn2n ) (cid:2) q and w(Sni ) + w (cid:2) w(Sni ) < q, v(Sn(cid:2)tProof of Lemma 9. The lemma is proved by induction on t. Specifically, we prove that for all t = 1, . . . , n and all x ∈[0,i=1 w i] there exists a subset S ⊆ {1, . . . , t} such that w(S) − w (cid:3) x (cid:3) w(S).For t = 1, consider any x ∈ [0, w 1]. Since w is essential for w, we have w (cid:2) w 1, and hence w 1 − w (cid:3) x (cid:3) w 1, so we canNow, suppose that the lemma holds for t − 1. We will show that it is also true for t. Fix an x ∈ [0,(cid:2)ti=1 w i]. We considerset S = {1}.three cases:1. x (cid:3) wt − w. In this case, since w is essential for w, we have x (cid:3)some S ⊆ {1, . . . , t − 1} such that w(S) − w (cid:3) x (cid:3) w(S). Since S is also a subset of {1, . . . , t}, we are done.(cid:2)t−1i=1 w i , so by the inductive hypothesis there exists2. wt − w < x (cid:3) wt . We can set S = {t}.3. wt < x (cid:3)i=1 w i . We have 0 < x − wt (cid:3)(cid:6)) − w (cid:3) x − wt (cid:3) w(Ssuch that w(S(cid:2)t(cid:2)(cid:6)). Take S = S(cid:6) ∪ {t}.t−1i=1 w i , so by the inductive hypothesis there exists a set S(cid:6) ⊆ {1, . . . , t − 1}This completes the proof of the inductive step. Thus, the lemma is proved. (cid:2)8M. Zuckerman et al. / Artificial Intelligence 180–181 (2012) 1–19We have already argued that Lemma 9 implies Theorem 8. Hence, the proof is complete. (cid:2)Theorem 8 yields a simple algorithm for finding a quota that makes a specific agent a dummy player.Theorem 10. There exists a polynomial-time algorithm that, given a weight vector w = (w 1, . . . , wn) and i ∈ {1, . . . , n}, decideswhether there exists a quota q, q ∈ [1, . . . ,i=1 w i], such that player i is a dummy in the game [{1, . . . , n}; w; q], and, if so, outputssuch a quota.(cid:2)n(cid:6) = (w(cid:6)1, . . . , wProof. First, we sort the set W(cid:6)n−1) be the resulting sorted list; the elements of wwcheck whether w i is essential for wthis running time can be improved to O (n) by observing that we can obtain the (t + 1)-st sum(cid:2)(cid:6) = {w 1, . . . , wn} \ {w i} in non-decreasing order; this can be done in O (n log n) steps. Let(cid:6)(cid:6)n−1. By Theorem 8, it remains to1. A straightforward implementation of this check requires O (n2) arithmetic operations;(cid:6)j from the t-th sumt−1(cid:6)j using a single addition.j=1 w(cid:6), Theorem 8 implies that i cannot be made a dummy. Otherwise, there exists a t ∈ {1, . . . , n}Now, if w i is essential for w(cid:2)(cid:6)(cid:6)t ; as argued in the proof of Theorem 8, setting q = wj < wis a dummy in(cid:6)t ensures that i(cid:2)tj=1 w(cid:3) · · · (cid:3) wsatisfy w(cid:6)(cid:6)t−1such that w i +j=1 w[{1, . . . , n}; w; q]. (cid:2)Using Theorem 10, we can easily find a quota that minimizes the Banzhaf index of an agent (we remark, however, thatthis approach does not work for the Shapley–Shubik index).Theorem 11. There exists a polynomial-time algorithm that, given a weight vector (w 1, . . . , wn) and a player i, finds a value of thequota that minimizes the Banzhaf index of i.Proof. We first use the algorithm given in the proof of Theorem 10 to check if there is a quota that makes i a dummyj=2 w j . Under q, the Banzhaf index of i is 1/2n−1, sinceplayer, and if so, return this quota. Otherwise, we return q = 1 +the only coalition it is pivotal for is the grand coalition. (cid:2)(cid:2)nWe remark that the approach to minimizing a player’s Banzhaf index that is suggested by Theorem 11 is not necessarily(cid:2)practical: the quota value q = 1 +nj=2 w j may be considered to be unacceptably large, and, moreover, it equalizes allplayers’ power. An interesting question is how to choose a value of q from a given interval (say, between 50% and 75% ofthe total weight) so as to minimize/maximize the player’s power. This question appears to be considerably more difficultand presents a promising direction for future work; some relevant empirical results can be found in Section 7.5. Altering the relative power of two or more playersSo far, we have considered the effects that a change of quota can have on the power of a single player, both in abso-lute and in relative terms. This focus is justified when the manipulator can be assumed to be interested in increasing ordecreasing the influence of a given player, irrespective of how it affects the other players. However, the manipulator mayalso want to alter the relative power of two players i and j. For instance, suppose that w i < w j , and the center prefersplayer i to player j. From the monotonicity properties of both indices, it follows that for every value of the quota q we haveϕi(q) (cid:3) ϕ j(q), βi(q) (cid:3) β j(q). Hence, the best that the center may hope for is to find a value of the quota q that satisfiesϕi(q) = ϕ j(q) or βi(q) = β j(q). Conversely, if the center prefers player j to player i, it may try to choose the quota so thatϕ j(q) > ϕi(q) (respectively, β j(q) > βi(q)). It turns out that both of these objectives are easy to accomplish. On the otherhand, choosing a quota so that all players have different power is more difficult.Throughout this section, we use the following notation: given a weighted voting game G = [I; w; q], two players i, j ∈ I ,and a set S ⊆ I such that i ∈ S, j /∈ S, we write S i, j = (S \ {i}) ∪ { j}. Similarly, given a permutation π ∈ Π(I), we denote byπ i, j the permutation obtained from π by transposing i and j.The following proposition is the basis of many proofs in this section.Proposition 12. Consider a weighted voting game G = [I; w; q] and two players i, j with w i (cid:3) w j . We have βi(q) < β j(q) if and(cid:6) = S \ {i}only if there exists a set S ⊆ I \ { j} such that i ∈ S, i is not pivotal for S, but j is pivotal for S i, j (or, equivalently, if the set S(cid:6) ∪ { j})). Similarly, ϕi(q) < ϕ j(q) if and only if there exists a permutation π ∈ Π(I) such that i is notsatisfies w(Spivotal for π , but j is pivotal for π i, j .(cid:6) ∪ {i}) < q (cid:3) w(SBefore we proceed to the proof of Proposition 12, we present a small illustrative example. Let I = {1, 2, 3, 4}, w =(2, 3, 5, 8) and q = 11, and consider the game G = [I; w; q]. Let i = 3,j = 4, S = {1, 2, 3}. We have w(S) < q, so i is notpivotal for S. However, we have w(S i, j) = 13, w(S i, j \ { j}) = 5, so j is pivotal for S. Similarly, consider a permutation πgiven by π ((cid:6)) = (cid:6). Player i is not pivotal for π , but player j is pivotal for the permutation π i, j , which is given by π i, j(1) = 1,π i, j(2) = 2, π i, j(3) = 4, π i, j(4) = 3.M. Zuckerman et al. / Artificial Intelligence 180–181 (2012) 1–199Proof. Consider first the Banzhaf index. Let S = {S ⊆ I | i ∈ S} be the set of all coalitions that contain player i. Set S1 = {S ∈S | j /∈ S} and S2 = S \ S1. Let f (S) = S i, j if S ∈ S1 and f (S) = S if S ∈ S2.is injective on S. Indeed, if S, S(cid:6) ∈ S2, then i /∈ f (S), i ∈ f (S(cid:6) ∈ S2 then clearly S (cid:8)= S(cid:6)) in this case as well.We claim that fother hand, if S ∈ S1, S(cid:6) ∈ S1 or S, S(cid:6)), so f (S) (cid:8)= f (Simplies f (S) (cid:8)= f (S(cid:6)). On theNow, consider any S ∈ S such that i is pivotal for S. We claim that j is pivotal for f (S). Indeed, if S ∈ S1, we havew( f (S) \ { j}) = w(S) − w i < q, w( f (S)) = w(S) − w i + w j (cid:2) w(S) (cid:2) q, and if S ∈ S2, we have w( f (S) \ { j}) = w(S) − w j (cid:3)w(S) − w i < q, w( f (S)) = w(S) (cid:2) q.(cid:6)Thus, each set that i is pivotal for corresponds to a distinct set that j is pivotal for. Therefore, βi(q) < β j(q) if andonly if we can find a set in S such that i is not pivotal for S, but j is pivotal for f (S). It remains to show that we canpick this set in S1. To see this, observe that if i is not pivotal for S ∈ S2, but j is pivotal for S, we have w(S) − w i (cid:2) q,w(S) − w i − w j < w(S) − w j < q, i.e., j is also pivotal for the set S \ {i} ∈ S1.For the Shapley–Shubik index, the proof is similar. Suppose that i is pivotal for a permutation π ∈ Π(I). It is easy tosee that j is pivotal for π i, j . Indeed, if j ∈ Sπ (i), we have i ∈ Sπ i, j ( j) and w(Sπ i, j ( j)) (cid:3) w(Sπ (i)) < q, w(Sπ i, j ( j) ∪ { j}) =w(Sπ (i) ∪ {i}) (cid:2) q. On the other hand, if j /∈ Sπ (i), we have Sπ i, j ( j) = Sπ (i) and hence w(Sπ i, j ( j)) < q, while w(Sπ i, j ( j) ∪{ j}) (cid:2) w(Sπ (i) ∪ {i}) (cid:2) q. Thus, the mapping g(π ) = π i, j is injective and maps any permutation that i is pivotal for to apermutation that j is pivotal for. Therefore, ϕi(q) < ϕ j(q) is and only if there is a permutation π such that i is not pivotalfor π , but j is pivotal for π i, j . (cid:2)Proposition 12 has a number of useful consequences. First, Corollary 13 allows us to restrict our attention to the Banzhafpower index throughout this section.Corollary 13. Given a weighted voting game G = [I; w; q] and two players i, j ∈ I we have ϕi(G) = ϕ j(G) if and only if βi(G) =β j(G).Proof. It w i = w j , our claim is obviously true. Thus, assume without loss of generality that w j > w i . If β j(G) > βi(G), thenby Proposition 12 there exists a set S such that i ∈ S, i is not pivotal for S, but j is pivotal for S i, j . Consider a permutationπ that places elements of S \ {i} first, followed by i, followed by j. It is not hard to see that i is not pivotal for π , but j ispivotal for π i, j , so the claim follows.Conversely, suppose that ϕ j(G) > ϕi(G). By Proposition 12, there exists a permutation π such that i is not pivotal forπ , but j is pivotal for π i, j . If i precedes j in π , set S = Sπ (i) ∪ {i}. Clearly, i is not pivotal for S. On the other hand,S i, j = Sπ (i) ∪ { j}, so j is pivotal for S i, j , and by Proposition 12 we have β j(G) > βi(G). If i appears after j in π , setS = (Sπ (i) \ { j}) ∪ {i}. Since j is pivotal for π i, j , we have w(S) = wπ i, j ( j) < q. Hence, i is not pivotal for S. Further, wehave w(S ∪ { j}) = wπ i, j ( j) ∪ { j} (cid:2) q. Since i is not pivotal for π , this implies w(S i, j) = w(Sπ (i)) (cid:2) q. On the other hand,w(S i, j \ { j}) = w(S) < q. Hence, by Proposition 12 we have β j(G) > βi(G). (cid:2)Further, Proposition 12 enables us to determine the complexity of comparing the power indices of two players in thesame game.Theorem 14. Given a weighted voting game G = [I; w; q] and two players i, j ∈ I , the problem of deciding whether β j(G) > βi(G) isNP-complete.Proof. It is not hard to see that this problem is NP-hard. Indeed, we have already mentioned that the problem of checkingwhether a given player i in a game G = [I; w; q] is a dummy is coNP-complete [37,10,35]. We will now give a reductionfrom the complement of this problem to our problem.Given a game G = [I; w; q] with |I| = n and a player i ∈ G, we construct a new game G(cid:6)n+1(cid:6)] as follows. We set(cid:6) = [I(cid:6) = 2q. We will now argue that i is not a dummy in G if and= 2w j for j = 1, . . . , n, w= 1, and q(cid:6); w(cid:6); q(cid:6) = I ∪ {n + 1}, wIonly if βi(G(cid:6)j(cid:6)) > βn+1(G(cid:6)).It is clear that player n + 1 is a dummy in G(cid:6)is not a dummy in G if and only if βi(Gand hence βn+1(G(cid:6)) > 0, i.e., i is not a dummy in G(cid:6).(cid:6)) = 0. To complete the proof, it remains to argue that iIndeed, if i is pivotal for a coalition S in G, he is also pivotal for S in G(cid:6)(cid:6)in G. If n + 1 /∈ Scoalition S(cid:6)an odd number. Since q(cid:6) \ {n + 1}) \ {i}) < q(cid:6)((Simplies wn + 1, by the argument above i is pivotal for S(cid:6)(cid:6)(cid:6)in G as well. On the other hand, if n + 1 ∈ S, then clearly i is pivotal for S(cid:6) + 1 and hence w(cid:6)) (cid:2) qis even, this means that w(cid:6)(S(cid:6). Thus, i is pivotal for the coalition S(cid:6) \ {n + 1} in G(cid:6) \ {n + 1} in G. This completes our hardness proof.(cid:6). Conversely, suppose that i is pivotal for a(cid:6)(S(cid:6)) is(cid:6)(cid:6) \ {i}) < q. Further, w. Since this coalition does not contain(cid:6) \ {n + 1}) (cid:2) q, then w(cid:6)(S(cid:6)(S(cid:6)(cid:6)To see that our problem is in NP, we make use of Proposition 12. Consider a game G = [I; w; q] and two players i, j ∈ I .If w i = w j , then β j(G) = βi(G). Now, suppose that w j > w i . By Proposition 12, to check that β j(G) > βi(G), it suffices to(cid:6) ∪ { j}). (cid:2)guess a set S(cid:6) ∈ I \ {i, j} such that w(S(cid:6) ∪ {i}) < q (cid:3) w(S10M. Zuckerman et al. / Artificial Intelligence 180–181 (2012) 1–19Thus, comparing two players’ power indices in the same game is considerably easier (assuming P (cid:8)= NP) than computinga player’s index (which is known to be #P-hard), or comparing the power indices of two players in different games (see [16]and Section 6).Another implication of Proposition 12 is that it is easy to select a quota so as to ensure that two players with differentweights have different power.Corollary 15. Consider a set of players I = {1, . . . , n} and a vector of weights w = (w 1, . . . , wn) that satisfies w 1 (cid:3) · · · (cid:3) wn. Foreach player j there is a quota value q such that for each player i with w i < w j it holds that βi(q) < β j(q). On the other hand, there isa quota value qsuch that for every pair of players i, j ∈ I it holds that βi(q(cid:6)) = β j(q(cid:6)).(cid:6)Proof. Consider players i, j ∈ I with w i < w j and set q = w j . We claim that β j(q) > βi(q). Indeed, player j is pivotalfor { j}, but player i is not pivotal for { j}i, j = {i}, so our claim follows by Proposition 12. To prove our second claim, set(cid:6) = w 2 + · · · + wn + 1. Then each player i is pivotal for exactly one coalition, namely, the grand coalition. Hence, Banzhafqindices of all players are equal. (cid:2)In practice, ensuring that i and j have different voting power is not always sufficient: the center may want to setthe quota so as to maximize the difference between the power indices of the two players, i.e., find a value of q inarg maxq |βi(q) − β j(q)|. However, it seems likely that finding such a quota is computationally hard; proving this and/orproviding an (approximation) algorithm for this problem is an interesting direction for future work.Corollary 15 demonstrates that the center can set the quota so that all players have the same power. However, the centermay also have the opposite goal, i.e., it may want to find a quota such that all players with different weights have differentShapley–Shubik indices (or Banzhaf indices). This choice can be motivated by fairness, i.e., a desire that a player with alarger weight has strictly more influence than a player with a smaller weight. Formally, we say that q is a separating quotafor a weight vector w with respect to the Banzhaf index (respectively, the Shapley–Shubik index) if for every pair of playersi, j ∈ I with w i (cid:8)= w j it holds that βi(q) (cid:8)= β j(q) (respectively, ϕi(q) (cid:8)= ϕ j(q)). Note that by Corollary 13 a quota is separatingfor the Banzhaf index if and only if it is separating for the Shapley–Shubik index; thus, in what follows, we will simply talkabout a separating quota without mentioning the underlying index.Example 16. Consider a weighted voting game with I = {1, 2, 3, 4}, w = (1, 1, 2, 2). Suppose first that q = 3. Clearly, player1 is pivotal for coalitions {1, 3} and {1, 4}, while player 3 is pivotal for coalitions {1, 3}, {2, 3}, {1, 2, 3} and {3, 4}, soβ1(q) = 1/4, β3(q) = 1/2, and, by symmetry, β2(q) = β1(q) = 1/4, β4(q) = β3(q) = 1/2. Thus, for q = 3 and all i, j ∈ I , if(cid:6)) = 1/8, for i = 1, . . . , 4. Thus, q = 3 is a separating(cid:6) = 1, we have βi(qw i < w j then βi(q) < β j(q). However, for qquota for the weight vector w, but q = 6 and q = 1 are not.(cid:6) = 6 or qFor many weighted voting games, finding a separating quota is not difficult. As an illustration, we will now prove thatfor every game with the weight vector of the form w = (1, . . . , n) for n (cid:2) 20 any quota between n and w(I) − n + 1 isseparating. (It is easy to see that if q (cid:3) n − 1 then players n − 1 and n have equal power and thus such a quota is notseparating; the same holds for quotas larger than w(I) − n + 1.)Proposition 17. Let n (cid:2) 20, and set I = {1, . . . , n}, w = (1, . . . , n). Then for every q ∈ {n, . . . , n(n+1)[I; w; q] have different Banzhaf indices.2+ 1 − n}, all players in the gameProof. We have argued that we can assume without loss of generality that q (cid:3) (cid:14)w(I)/2(cid:15). Thus, it suffices to show thatβi−1(q) (cid:8)= βi(q) for all i = 2, . . . , n and all q = n, . . . , (cid:14) n(n+1)(cid:15). Fix some q ∈ {n, . . . , (cid:14) n(n+1)(cid:15)} and i ∈ {2, . . . , n}.By Proposition 12, it suffices to construct a set S such that i ∈ S, i − 1 /∈ S, and w(S) = q. There exist nonnegative integers(cid:15) − 1 pairs of players ( j, k) such thata, b such that q − i = a(n + 1) + b, where a (cid:3) n(cid:10) + 2). We will construct the set S by picking a such pairs andw j + wk = n + 1, namely, (1, n), (2, n − 1), . . . , ((cid:14) n2adding player i as well as one or two extra players of total weight b. We have to be careful in our selection process, as wehave to make sure that none of the selected pairs contains i, i − 1, or the extra players needed at the last step; however,(cid:15) − 1, so as long as n (cid:2) 20 this can alwayswe have at most 4 players to avoid, and we need to select a (cid:3) nbe achieved. We have the following cases to consider:4 , 0 (cid:3) b (cid:3) n. Observe that there are (cid:14) n4 pairs out of (cid:14) n(cid:15) − 1, (cid:9) n244221. b = 0. In this case, we simply select a pairs that do not contain i or i − 1, and then add i.2. b (cid:8)= i − 1, i. In this case, we select a pairs that do not contain i, i − 1 or b, and add i and b.3. b ∈ {i − 1, i} and b (cid:2) 5. In this case, we select a pairs that do not contain i, i − 1, 2 or b − 2, and add i, 2 and b − 2.4. b ∈ {i − 1, i} and b (cid:3) 4. In this case, we select a − 1 pairs that do not contain i, i − 1, 5 or n + b − 5, and add i, 5 andn + b − 5.In all cases, we have successfully constructed a set S with the required properties, so we are done. (cid:2)M. Zuckerman et al. / Artificial Intelligence 180–181 (2012) 1–1911Given the proof of Proposition 17, one may conjecture that all weighted voting games that have sufficiently many playerswith distinct weights admit a separating quota. However, it turns out that this is not the case. We first need the followingdefinition.Definition 18. A sequence of positive numbers (w 1, . . . , wn) is called super-increasing if we havek = 2, . . . , n.(cid:2)k−1j=1 w j < wk for allRecall that if two players i and j are symmetric in a game G, i.e., v(S ∪ {i}) = v(S ∪ { j}) for every set S ⊆ I \ {i, j}, thenβi(G) = β j(G). We will now prove that for every super-increasing weight vector of length at least 3, for every value of thequota at least two of the first three players are symmetric, and hence there is no separating quota for every such weightvector.Lemma 19. For every game G = [I; w; q] with |I| (cid:2) 3 and a super-increasing vector of weights w = (w 1, . . . , wn), it holds that eitherplayers 1 and 2 are symmetric, or players 2 and 3 are symmetric.Proof. We prove the lemma by induction on the number of agents n. For n = 3, we have three cases to consider:1. q (cid:3) w 2. In this case, we have v({2}) = v({3}) = 1, v({1, 2}) = v({1, 3}) = 1, so players 2 and 3 are symmetric.2. w 2 < q (cid:3) w 3 + w 1. In this case, we have v({1}) = v({2}) = 0, v({1, 3}) = v({2, 3}) = 1, so players 1 and 2 are symmetric.3. w 3 + w 1 < q. In this case, we have v({2}) = v({3}) = 0, v({1, 2}) = v({1, 3}) = 0, so players 2 and 3 are symmetric.For the inductive step, we assume that the claim is correct for n − 1 and prove it for n. Consider a game G = [I; w; q]with I = {1, . . . , n} and a super-increasing sequence of weights w = (w 1, . . . , wn).(cid:6) = (I(cid:6) = I \ {n}, w(cid:6) = (w 1, . . . , wn−1), and let GSuppose first that q (cid:3) wn. Set Iexist two players i, j ∈ {1, 2, 3} that are symmetric in Gan arbitrary coalition S ⊆ I \ {i, j}. If n /∈ S, then S ⊆ Iother hand, if n ∈ S, then v(S ∪ {i}) = v(S ∪ { j}) = 1, since q (cid:3) wn.(cid:6)(cid:6); q). By the inductive hypothesis, there. We claim that i and j are also symmetric in G. Indeed, consider(cid:6) \ {i, j} and v(S ∪ {i}) = v(S ∪ { j}) by the inductive hypothesis. On the(cid:6); w(cid:6) = I \ {n}, wNow suppose that wn < q (cid:3) w(I). Set I(cid:6); q − wn). By the inductivehypothesis, there exist two players i, j ∈ {1, 2, 3} that are symmetric in G. We claim that i and j are also symmetric in G.Indeed, consider an arbitrary coalition S ⊆ I \ {i, j}. Since w is a super-increasing sequence, player n belongs to each winning(cid:6) = S \ {n}.coalition in G. Thus, if n /∈ S, then v(S ∪ {i}) = v(S ∪ { j}) = 0. On the other hand, suppose that n ∈ S, and let SifWe have Sand only if T ∪ {n} is winning in G. Thus, we have v G (S ∪ {i}) = v G (S ∪ { j}) in this case as well. This completes the proof ofthe inductive step. Thus, the lemma is proved. (cid:2)(cid:6) \ {i, j}, so by the inductive hypothesis v G(cid:6) (S(cid:6) ∪ { j}). Clearly, a coalition T is winning in G(cid:6) = (w 1, . . . , wn−1), and let G(cid:6) ∪ {i}) = v G(cid:6) (S(cid:6) = (I(cid:6) ⊆ I(cid:6); w(cid:6)(cid:6)Lemma 19 immediately implies the following result.Theorem 20. For every game G = [I; w; q] with |I| (cid:2) 3 and a super-increasing vector of weights w = (w 1, . . . , wn), either β1(q) =β2(q), or β2(q) = β3(q). Consequently, there is no separating quota for w.Given Proposition 17 and Theorem 20, it is natural to ask if one can efficiently determine whether a given weight vectoradmits a separating quota. Proposition 12 implies that this problem is in NP for both indices. Indeed, given a quota q and acollection of sets S2, . . . , Sn, one can easily check whether for all values of i ∈ {2, . . . , n} such that w i−1 < w i it holds that(1) i is pivotal for S i and (2) i − 1 is not pivotal for S i,i−1. However, it seems unlikely that this problem is in P; we proposethis question as a topic for future work.i6. Comparing two values of the quotaWe have argued that when the center can choose any quota that she likes, some of the associated computational prob-lems (e.g., turning a player into a dummy) become easy. However, in real-life scenarios the center may be restricted in thechoice of quota: For example, the center might be able to modify the quota only very slightly or have a choice of onlyseveral quota values. We will now show that the problem of deciding which of two given quotas is more favorable to aparticular player is computationally hard, even if the quotas differ only by 1.Definition 21. Given a power index f , the Quota f problem is defined as follows. We are given a set of players I , |I| = n,(cid:6)(cid:6)].a vector of weights w = (w 1, . . . , wn), two quota values, qThe goal is to decide whether f i(G, and an index i ∈ I . Let G(cid:6)(cid:6) = [I; w; q(cid:6) = [I; w; q(cid:6)) > f i(G(cid:6)], Gand q(cid:6)(cid:6)).(cid:6)(cid:6)(cid:6)The notion of hardness that we will make use of is PP-hardness. The class PP (see, e.g., [36]) captures the notion ofprobabilistic polynomial-time computation. The idea is that one can look at nondeterministic computations in terms of12M. Zuckerman et al. / Artificial Intelligence 180–181 (2012) 1–19probabilistic ones: Given an NP machine (a nondeterministic polynomial-time Turing machine) N, at each computationstep we can toss a coin to choose the next move uniformly at random from the set of possible ones, as defined by N’stransition relation. Thus, we can naturally define the probability of the event that N accepts a string x. Formally, we saythat a language L belongs to PP if there exists an NP machine N such that x ∈ L if and only if the probability that N acceptsx is at least 12 .PP is a surprisingly powerful class. For example, NP ⊆ PP, and, moreover, PP contains the class Θ p2 (also known as) of all decision problems that can be solved via parallel access to NP (see [7]). Used as an oracle, PP is essentially asPNP[log]powerful as #P [5]; in fact, #P can be viewed as a functional counterpart of PP.3There are many natural PP-complete problems. In particular, Faliszewski and Hemaspaandra [16] recently studied thefollowing one.Definition 22. (See [16].) Given a power index f , the PowerCompare f problem is defined as follows. We are given twoweighted voting games, G, and a player j in G. The goal is to decide whether f i(G, a player i in G(cid:6)) > f j(Gand G(cid:6)(cid:6)).(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)Faliszewski and Hemaspaandra show that this problem is PP-complete both for the Shapley–Shubik power index andfor the Banzhaf power index. Effectively, they give a reduction from Sat-Compare, the problem of deciding, given twopropositional formulas, x and y, if #Sat(x) > #Sat( y), where #Sat(x) is the function that takes as input a propositionalformula x and returns the number of satisfying truth assignments for x.4Faliszewski and Hemaspaandra’s proof proceeds by giving a reduction from Sat-Compare to SubsetSum-Compare. Recallthat an instance of Subset Sum (see [23]) is a sequence of nonnegative integers [x1, . . . , xm; tx]; a solution to this instance isi∈S xi = tx. #SubsetSum( X) is a #P function that takes as input an instance ofa subset of indices S ⊆ {1, . . . , m} such thatSubset Sum and returns the number of solutions to that instance. SubsetSum-Compare is defined similarly to Sat-Compare,i.e., it compares the number of solutions to two instances of this problem.(cid:2)is in PP both for f = ϕ and for f = β. To show that Quota fAs Quota f is a simple special case of PowerCompare f , the result of Faliszewski and Hemaspaandra immediately impliesis PP-hard for f ∈ {ϕ, β}, rather than using thethat Quota fresult of Faliszewski and Hemaspaandra as a black box, we make use of a technical lemma proved in their paper, whichprovides a reduction from Sat-Compare to SubsetSum-Compare that has several useful properties. We then show that aninstance of SubsetSum-Compare output by this reduction can be transformed into an instance of Quota f for f ∈ {ϕ, β}, sothat a “yes”-instance of the former problem becomes a “yes”-instance of the latter problem and vice versa.The following lemma is a corollary to the reduction used in [16].Lemma 23. (See [16].) Given two propositional formulas, x and y, one can compute in polynomial time two instances of the SubsetSum problem, X = [x1, . . . , xm, tx] and Y = [ y1, . . . , ym, t y] such that #Sat(x) = #SubsetSum( X), #Sat( y) = #SubsetSum(Y ). Inaddition, there is a nonnegative integer k such that: (1) any solution to X has exactly k elements, and (2) any solution to Y has exactlyk elements.We are now ready to prove the main result of this section.Theorem 24. Quotaϕ and Quotaβ are PP-complete. This holds even if we stipulate that |q(cid:6) − q(cid:6)(cid:6)| = 1.Proof. Membership in PP is clear, and thus we focus on proving PP-hardness. We give the proof for ϕ; for β, we can usethe same reduction and its proof of correctness is analogous (and easier).We give a reduction from Sat-Compare. Let x and y be two propositional formulas. We first compute two instances ofSubsetSum, X = [x1, . . . , xm; tx] and Y = [ y1, . . . , ym; t y], as described in Lemma 23. We have #Sat(x) = #SubsetSum( X),(cid:6)(cid:6)| = k for some#Sat( y) = #SubsetSum(Y ), and for every solution Sinteger k.to Y it holds that |Sto X and every solution S(cid:6)| = |S(cid:6)(cid:6)(cid:6)(cid:2)mi=1 xi + tx) + 1. We form a sequence of weights w =Let K be the smallest power of 2 greater than 16 · ([w 1, . . . , w 2m+2, w 2m+3] as follows:1. For each i = 1, . . . , m, we set w i = 16xi , wm+i = K yi .2. We set w 2m+1 = K t y + 4, w 2m+2 = 16tx + 5, w 2m+3 = 1.3 Briefly put, a function f belongs to #P if there is an NP machine N such that for each input string x, N has exactly f (x) accepting computation pathson input x. We point the readers to [36] for more details.4 Strictly speaking, Faliszewski and Hemaspaandra used problem X3C (see [23]) and its counting variant #X3C. However, there exist parsimonious reduc-tions (i.e., reductions that preserve the number of solutions) between #Sat and #X3C: the reduction from #Sat to # X3C is given in [24], and the otherreduction is standard. Therefore, the results and lemmas of Faliszewski and Hemaspaandra can be phrased in terms of #Sat as well.M. Zuckerman et al. / Artificial Intelligence 180–181 (2012) 1–1913We set q = K t y + 16tx + 5. Our reduction outputs a set of players I = {1, . . . , 2m + 3}, vector of weights w, quota values(cid:6)(cid:6) = q + 1, and player i = 2m + 3. It is easy to see that the reduction works in polynomial time, and it remains(cid:6) = q and qqto show that it is correct.Let us form two games, Gwhose power index we are interested in), fthat ϕp(G(cid:6)) > ϕp(GLet us first consider ϕp(G(cid:6) = [I, w, q(cid:6)] and G(cid:6)(cid:6) = [I, w, q(cid:6) = 2m + 1 (filler player for G(cid:6)(cid:6)]. Our games have three special players, p = 2m + 3 (the player). We claim(cid:6)(cid:6) = 2m + 2 (filler player for G), and f(cid:6)(cid:6)(cid:6)(cid:6)(cid:6)) if and only if #SubsetSum( X) > #SubsetSum(Y ), or, equivalently, #Sat(x) > #Sat( y).(cid:6)) and a permutation π for which p is pivotal. Since w p = 1, we have w(Sπ (p)) = K t y +, but not by f: otherwise, it would not be the case(cid:6)}) = 16tx, and it is easy to see that there is a one-to-one correspondence(cid:6)(cid:6)(cid:6)16tx + 4. Thus, it is easy to see that in π player p is preceded by fthat w(Sπ (p)) = 4 mod 16. We have w(Sπ (p) \ { fbetween Sπ (p) \ { f(cid:5)(cid:6)} and a subset A ⊆ {1, . . . , m} such that(cid:2)(cid:6)#SubsetSum(X) = k!(2m + 2 − k)!(cid:6)G= k!(2m + 2 − k)!(2m + 3)!(2m + 3)!ϕp#Sat(x).i∈ A xi = tx. Thus, we haveNow, consider ϕp(G(cid:6)(cid:6)). Let π be a permutation of I such that p is pivotal for π . This means that the players preceding(cid:6)(cid:6),: otherwise, it would not be the case that w(Sπ (p)) = 5 mod 16. Hence, there is a one-to-one correspondencep have total weight K t y + 16tx + 5. As in the previous paragraph, it is easy to see that in π player p is preceded by fbut not by f(cid:2)between Sπ (p) \ { f(cid:5)(cid:6)(cid:6)} and a subset B ⊆ {1, . . . , m} such thati∈B yi = t y . Thus, we have(cid:6)(cid:6)ϕp(cid:6)(cid:6)G= k!(2m + 2 − k)!(2m + 3)!(cid:6)) > ϕp(G#SubsetSum(Y ) = k!(2m + 2 − k)!#Sat( y).(2m + 3)!As a result, ϕp(G(cid:6)(cid:6)) if and only if #Sat(x) > #Sat( y). This proves that our reduction is correct. (cid:2)We remark that this hardness result shows that computational complexity can be a barrier to manipulation by the centralauthority, as it implies that it will be difficult for the center to choose the quota so as to obtain the desired result. Moreover,as PP is a more powerful complexity class than NP, and our problem is complete for it, the manipulators will not be able touse the existing heuristics for problems in NP. However, PP-hardness does not necessarily imply that the problem is hard onaverage; determining whether manipulating the quota is hard in this sense is an interesting open problem. We would alsolike to remark that, even though power indices themselves are hard to compute, a hardness of manipulation result is stillsignificant: power indices reflect the distribution of power among the agents, and the center may want to manipulate thisdistribution even if it cannot compute it.On the flip side, it is known [34] that both the Shapley–Shubik and the Banzhaf index are easy to compute if theweights are polynomially bounded (or, equivalently, given in unary). Clearly, these algorithms can be used to solve Quotaϕand Quotaβ , as we can directly compute the values of a player’s power index for both quotas, and choose the quota thatgives us a better outcome. Hence, computational complexity alone does not provide adequate protection from this form ofmanipulation, and other approaches are needed.7. Small perturbations: an empirical analysisIn the previous section, we considered the situation where the center has to choose between two permissible values ofthe quota. However, it may also happen that the center can choose from a much larger set of quotas, namely, all quotasthat differ from the current one by a small amount. For example, consider weighted voting in political decision-makingbodies [33]. It may be fairly easy to change the quota from 60% of the votes to anywhere between 51% and 66% of thevotes, but changing the quota to 80% of all votes would be considerably more difficult. Analyzing this form of manipulationis a challenging problem, and we were not able to derive analytical bounds on the manipulator’s power in this setting.Therefore, in this section we provide an empirical study of the effects of the maximal magnitude of the perturbation on thecenter’s ability to change the power of a target player.We first briefly describe our simulation system, the game construction and the power index calculations, and thenpresent the empirical results obtained.7.1. Simulation system and settingsOur simulation system creates weighted voting games by first choosing the number of players in the game, uniformlyat random from a given interval of positive integers. Then, the system draws the weight of each player independently fromN(μ, σ 2) (the normal distribution with mean μ and variance σ 2). To speed up calculations, the weights are rounded to the(cid:2)nearest integer. Given a weight vector w = (w 1, . . . , wn), we set w =ni=1 w i . The quota for the game is chosen uniformlyat random between 0 and w and rounded to the nearest integer.In our experiments, we have used a mean of μ = 200 and standard deviation σ = 30. The number of players waschosen uniformly at random from the set {6, 7, . . . , 25}, and the target player is chosen uniformly among all players in the(cid:6)k (each with a different quota),game. Having generated a game G, we construct a number of perturbed games Gand test whether (and by how much) the power of a target agent has increased in the perturbed game. Such tests require(cid:6)1, . . . , G14M. Zuckerman et al. / Artificial Intelligence 180–181 (2012) 1–19computing the power index of the target player in the original game and the perturbed games. Since power indices are hardto compute, we have applied the approximation method of Bachrach et al. [4], and used the Shapley–Shubik power indexin our experiments.The algorithm of Bachrach et al. estimates the power indices and returns a result which is probably approximately correct.Formally, given a game in which a player’s true power index is φ, and given a target accuracy level (cid:10) and confidence level δ,the algorithm returns an approximation (cid:14)φ such that with probability at least 1 − δ we have |φ − (cid:14)φ| (cid:3) (cid:10) (i.e. the result islikely to be close to the correct value). To achieve a confidence level δ and accuracy level (cid:10), this algorithm chooses s = ln 2δ2(cid:10)2random permutations of the agents, and measures the fraction of these permutations where the agent is pivotal. Thus, thetotal running time is logarithmic in the confidence δ and quadratic in the accuracy (cid:10), so the approach is tractable even forhigh accuracy and confidence. We have used δ = 0.00001 and (cid:10) = 0.001, so the power was estimated very accurately.Our simulation system was written using C# and Microsoft SQL database. Every single generated game required com-puting many power indices—one per each quota tried. Due to the massive amount of simulated games and the number ofcomputed power indices, we have used a computer cluster with 250 cores for our experiments.We will now describe our experimental setup in more detail. Our goal is to understand how the manipulator’s ability tochange a player’s power depends on the permitted changes to the quota. The manipulator may be constrained in two ways:(1) he may be allowed to raise the quota, but not to lower it, or vice versa, and (2) he may be allowed to only change thequota by a certain amount (say, 20%). Any such set of constraints determines an interval of permissible quotas. Given suchan interval, we try to identify the best value of the quota from the manipulator’s perspective; of course, the answer dependson whether the manipulator wants to increase or decrease the target player’s power. To present the results, we group themaccording to the manipulator’s intentions (helping or hurting a player) and the change direction (raising or lowering thequota); given these choices, we graph the change in the target player’s power that can be accomplished by the manipulatoras a function of the permissible quota range.(cid:6)(cid:6)−qqso that 0 (cid:3) q−qWe will describe our algorithm for the case where we are only allowed to lower the quota; the algorithm for raisingthe quota is similar. The most important parameter in our experiments is the maximum allowed perturbation magnitude θ .For a given value of θ and a weighted voting game [I; w; q], we are interested in the changes in target player’s power thatcan be achieved by choosing the quota qthatsatisfy 0 (cid:3) q(cid:3) θ ). We employ a very simple algorithm to search for a good quota in this range. Given an additionalparameter c, our algorithm determines the minimal quota qb = q(1 − θ) that the center may set, and simply tries c differentpossible quotas in constant intervals between qb and q. In other words, denoting d = qθc , the algorithm tries the quotas(cid:6) ∈ Q , it approximates the power index of the target player usingQ = {qb, qb + d, qb + 2d, . . . , qb + (c − 1)d}. For each quota qthe method of Bachrach et al. [4], and keeps track of the optimal manipulation found. We remark that our algorithm onlytries some of the possible values of the quota, so it may fail to find an optimal manipulation in the allowed quota range.Thus, it may underestimate the power of the manipulator. However, our experiments show that even this very simplealgorithm is usually successful in finding a beneficial manipulation.(cid:3) θ (for quota-raising manipulation, we consider quotas qq(cid:6)(cid:6)7.2. Empirical resultsOur empirical results considered many randomly constructed games. For each such game, we use the algorithm describedabove to find the optimal manipulation for different maximal perturbation magnitudes. The experiments described belowconsider both raising and lowering the quota, and both increasing and decreasing the power of a target player.The following results consider the relationship between the maximal allowed perturbation magnitude θ , and the optimalchange in the power of a target player. For each game, we have considered different values of θ , and used the algorithmdescribed above to find the optimal quota manipulation in the allowed range. The following figures show the relationbetween the value of θ and the proportional change in power, averaged across many experiments. Note that we haveconsidered the proportional change in the target agent’s power (rather than the power change in absolute terms).Fig. 1 shows the average power increase that can be achieved by lowering the quota. It shows that on average (for thegames generated as described in Section 7.1), even moderate values of θ such as θ = 20% can result in an increase of 15%in an agent’s power. On the other hand, the curve saturates quite quickly, and for θ = 70% the power of the target agentcan only be increased by 25%. Despite an increase in the curve’s slope starting at θ = 70%, even for very large values of θ ,which allow decreasing the quota to almost zero, on average it is only possible to increase an agents power by roughly 40%.Similarly, Fig. 2 shows the average power decrease that can be achieved by lowering the quota. The shape of the curveis similar to that in Fig. 1. Again, even for perturbation magnitudes of almost 100%, which can decrease the quota to almostzero, on average it is only possible to decrease an agent’s power by about 40%.Figs. 3 and 4 consider raising the quota to change the power of a target agent. Fig. 4 shows the average power changeachieved when raising the quota to increase the target agent’s power. The shape of the curve shows that while small quotaperturbations may affect the target player’s power relatively strongly, the curve saturates quickly. In particular, althoughsetting θ = 25% allows increasing the power by over 15%, setting θ = 100% yields an average power increase of only 20%.Note that for the case of increasing the quota, it is possible to use perturbation magnitudes that exceed 100%. However, wedo not allow quotas that exceed the total weight. Thus, results for high perturbation magnitudes should be treated morecarefully. For instance, if the graph shows that setting θ = 400% allows increasing an agent’s power by 35% on average, thisM. Zuckerman et al. / Artificial Intelligence 180–181 (2012) 1–1915Fig. 1. Average achieved power increase for different perturbation magnitudes (lowering the quota).Fig. 2. Average achieved power decrease for different perturbation magnitudes (lowering the quota).means that this is the average for all games where such a perturbation would still result in a quota that does not exceedthe total weight. In other words, for each value of θ > 100% the results are displayed contingent on the quota not exceedingthe sum of the weights.Fig. 4 considers increasing the quota to decrease the target agent’s power. Similarly to Fig. 3, the curve saturates quickly.Fig. 5 considers the effect of the number of agents in a randomly generated weighted voting game on the achievedpower change (for different values of θ ). It considers lowering the quota in order to increase the power of the target agent16M. Zuckerman et al. / Artificial Intelligence 180–181 (2012) 1–19Fig. 3. Average achieved power increase for different perturbation magnitudes (raising the quota).Fig. 4. Average achieved power decrease for different perturbation magnitudes (raising the quota).(similarly to Fig. 1), for different numbers of agents in the generated game. The results show that although the generalshape of the curve is quite similar across different numbers of players, quota manipulations are more effective when thereare fewer players in the game. For example, for θ = 70%, on average our algorithm achieves a 40% power increase whenthe number of players is between 6 and 10, but only achieves a 10% power increase on average when there are 21 to 25players. One possible explanation for this is that when there are more players in the game, it is more likely that there areseveral “competing” players with weights similar to the target player’s weight, who also gain from quota manipulations.M. Zuckerman et al. / Artificial Intelligence 180–181 (2012) 1–1917Fig. 5. Effect of the number of agents on the achieved power change.Fig. 6 shows a histogram of the achieved power increase across the experiments. The histogram shows which powerincrease values are more likely to be achieved by our algorithm (for a specific value of θ ). To generate the figure, wehave used θ = 50%. We have partitioned the experiments into buckets according to the optimal proportional power changeuncovered by our algorithm. The first bucket contained experiments where the power change was between 5% and 6%, thesecond bucket contained experiments where the power change was between 6% and 7% and so on, until the last bucket,which contained experiments where the power change was between 84% and 85%. We have then counted the number ofexperiments in each bucket, ni being the number of experiments for bucket i, and normalized byi ni , the total number ofexperiments, so the frequency of bucket j is f j = n j(cid:2). The X-axis shows the buckets and the Y-axis shows the frequenciesi niof these buckets. Fig. 6 shows that games where the optimal power increase (achievable by our algorithm for θ = 50%)is low are more common than games where the power increase is high. This indicates that even significant changes ofthe quota, such as θ = 50% are not very likely to trigger massive changes in a target agent power. Yet, our results showthat certainly players can gain (or lose) nonnegligible amounts of power by altering the quota. This holds even undersignificant restrictions on the magnitude of the quota perturbation, and even when using a very simple algorithm to findquota manipulations. Thus, such manipulations present a real danger for practical applications of weighted voting.(cid:2)8. ConclusionWe have considered quota manipulations in weighted voting games, i.e., situations where the central authority sets thegame’s quota to suit its purposes. We have argued that the central authority can affect the agents’ power significantly bychoosing a suitable quota and quantified the possible effect of such manipulations. We have given an efficient procedurefor testing whether there exists a quota that makes a given player a dummy. Further, we have discussed the problem offinding a quota that ensures that some or all players have different power. Also, we have shown that checking which of twopossible quota values makes a certain agent more powerful is PP-complete.We have also provided empirical results regarding quota manipulations in situations where the center is only allowedto perturb the quota within certain limits. We have quantified the expected change in power the center can achieve usinga simple quota manipulation algorithm for various possible manipulation magnitudes. Also, we have examined the effect ofthe number of players on the changes in players’ power achievable by quota manipulations.Several directions remain open for further research. The most immediate one is deriving analytical bounds on the manip-ulator’s power in settings where the manipulator has to select the quota from a certain range. Another interesting questionis how should the manipulator pick a quota in order to maximize the difference between two players’ power. More broadly,since manipulations by changing the quota are possible in weighted voting games, what measures can be taken againstsuch manipulations? Are there restricted domains where there is a polynomial-time algorithm for checking which quota18M. Zuckerman et al. / Artificial Intelligence 180–181 (2012) 1–19makes a certain agent more powerful than another agent? Are there other interesting domains where such manipulationsare possible?Fig. 6. Histogram of achieved power increase.AcknowledgementsWork done in part while Piotr Faliszewski and Edith Elkind were visiting Heinrich-Heine-Universität, Düsseldorf, Ger-many, in part while Piotr Faliszewski was at the University of Rochester, Rochester, NY, USA, and in part while Edith Elkindwas at the University of Southampton. The authors are grateful to Prof. Jörg Rothe, and anonymous AAAI-2008 and AIJ ref-erees for their helpful suggestions. Michael Zuckerman was supported in part by the United States–Israel Binational ScienceFoundation under grant #2006-216, by the Israel Science Foundation under grant #898/05, and by the Israel Ministry of Sci-ence and Technology grant #3-6797. Piotr Faliszewski was supported in part by AGH University of Science and TechnologyGrant No. 11.11.120.865, by Polish Ministry of Science and Higher Education grant N-N206-378637, by Foundation for PolishScience’s program Homing/Powroty, and by NSF grant CCF-0426761. Edith Elkind was supported by Singapore NRF ResearchFellowship 2009-08.References[1] N. Alon, P.H. Edelman, The inverse Banzhaf problem, Social Choice and Welfare 34 (3) (2010) 371–377.[2] H. Aziz, Y. Bachrach, E. Elkind, M. Paterson, False-name manipulations in weighted voting games, Journal of Artificial Intelligence Research 40 (2011)57–93.[3] H. Aziz, M. Paterson, D. Leech, Efficient algorithm for designing weighted voting games, in: Proceedings of the Eleventh IEEE International MultitopicConference, 2007, pp. 1–6.[4] Y. Bachrach, E. Markakis, E. Resnick, A.D. Procaccia, J.S. Rosenschein, A. Saberi, Approximating power indices: theoretical and empirical analysis, Au-tonomous Agents and Multi-Agent Systems 20 (2) (2010) 105–122.[5] J. Balcázar, R. Book, U. Schöning, The polynomial-time hierarchy and sparse oracles, Journal of the ACM 33 (3) (1986) 603–617.[6] J.F. Banzhaf, Weighted voting doesn’t work: a mathematical analysis, Rutgers Law Review 19 (1965) 317–343.[7] R. Beigel, L. Hemachandra, G. Wechsung, Probabilistic polynomial time is closed under parity reductions, Information Processing Letters 37 (2) (1991)91–94.[8] S. Brams, Paradoxes in Politics, The Free Press, 1976.[9] B. de Keijzer, T. Klos, Y. Zhang, Enumeration and exact design of weighted voting games, in: Proceedings of the Ninth International Conference onAutonomous Agents and Multi-Agent Systems (AAMAS), 2010, pp. 391–398.[10] X. Deng, C.H. Papadimitriou, On the complexity of cooperative solution concepts, Mathematics of Operations Research 19 (2) (1994) 257–266.[11] P. Dubey, L. Shapley, Mathematical properties of the Banzhaf power index, Mathematics of Operations Research 4 (2) (1979) 99–131.M. Zuckerman et al. / Artificial Intelligence 180–181 (2012) 1–1919[12] E. Ephrati, J.S. Rosenschein, A heuristic technique for multiagent planning, Annals of Mathematics and Artificial Intelligence 20 (1997) 13–67.[13] P. Faliszewski, E. Elkind, M. Wooldridge, Boolean combinations of weighted voting games, in: Proceedings of the Eighth International Conference onAutonomous Agents and Multiagent Systems (AAMAS), 2009, pp. 185–192.[14] P. Faliszewski, E. Hemaspaandra, L. Hemaspaandra, Using complexity to protect elections, Communications of the ACM 53 (2010) 74–82.[15] P. Faliszewski, E. Hemaspaandra, L. Hemaspaandra, J. Rothe, A richer understanding of the complexity of election systems, in: S. Ravi, S. Shukla (Eds.),Fundamental Problems in Computing: Essays in Honor of Professor Daniel J. Rosenkrantz, Springer, 2009, pp. 375–406.[16] P. Faliszewski, L. Hemaspaandra, The complexity of power-index comparison, Theoretical Computer Science 410 (1) (2009) 101–107.[17] P. Faliszewski, A. Procaccia, AI’s war on manipulation: Are we winning? AI Magazine 31 (4) (2010) 52–64.[18] S.S. Fatima, M. Wooldridge, N.R. Jennings, An anytime approximation method for the inverse Shapley value problem, in: Proceedings of the SeventhInternational Conference on Autonomous Agents and Multiagent Systems (AAMAS), 2008, pp. 935–942.[19] S.S. Fatima, M. Wooldridge, N.R. Jennings, A linear approximation method for the Shapley value, Artificial Intelligence Journal 172 (14) (2008) 1673–1699.[20] D.S. Felsenthal, M. Machover, The Measurement of Voting Power, Edward Elgar Publishing, Cheltenham, UK, 1998.[21] D.S. Felsenthal, M. Machover, The measurement of voting power: Theory and practice, problems and paradoxes, Public Choice 102 (3–4) (2000) 373–376.[22] D. Friedman, Senate’s returning democrats unanimously favor filibuster reform, National Journal (December 2010).[23] M.R. Garey, D.S. Johnson, Computers and Intractability: A Guide to the Theory of NP-Completeness, W.H. Freeman and Company, New York, 1979.[24] H. Hunt, M. Marathe, V. Radhakrishnan, R. Stearns, The complexity of planar counting problems, SIAM Journal on Computing 27 (4) (1998) 1142–1167.[25] D.M. Kilgour, A Shapley value for cooperative games with quarreling, in: A. Rapoport (Ed.), Game Theory as a Theory of Conflict Resolution, D. ReidelPublishing Co., 1974, pp. 193–206.[26] S. Kurz, On the inverse power index problem, Optimization (2012), forthcoming, doi:10.1080/02331934.2011.587008.[27] R. Lasisi, V. Allan, False name manipulations in weighted voting games: Susceptibility of power indices, in: Proceedings of the Thirteenth InternationalWorkshop on Trust in Agent Societies (TRUST), 2010, pp. 139–150.[28] D. Leech, Designing the voting system for the council of the European Union, Public Choice 113 (2002) 437–464.[29] D. Leech, Voting power in the governance of the International Monetary Fund, Annals of Operations Research 109 (1–4) (2002) 375–397.[30] D. Leech, M. Machover. Qualified majority voting: the effect of the quota, in: M.J. Holler, H. Kliemt, D. Schmidtchen, M.E. Streit (Eds.), EuropeanGovernance, in: Jahrbuch Für Neue Politische Ökonomie, vol. 22, Mohr Siebeck, 2003, pp. 127–143.[31] D. Lubell, A short proof of Sperner’s lemma, Journal of Combinatorial Theory 1 (1966) 299.[32] M. Machover, Penrose’s square-root rule and the EU council of ministers: Significance of the quota, in: Distribution of Power and Voting Procedures inthe EU, 2007.[33] M. Machover, D.S. Felsenthal, The treaty of Nice and qualified majority voting, Social Choice and Welfare 18 (3) (2001) 431–464.[34] Y. Matsui, T. Matsui, A survey of algorithms for calculating power indices of weighted majority games, Journal of the Operations Research Society ofJapan 43 (2000).[35] Y. Matsui, T. Matsui, NP-completeness for calculating power indices of weighted majority games, Theoretical Computer Science 263 (1–2) (2001)305–310.[36] C.H. Papadimitriou, Computational Complexity, Addison–Wesley, Reading, MA, 1994.[37] K. Prasad, J.S. Kelly, NP-completeness of some problems concerning voting games, International Journal of Game Theory 19 (1) (1990) 1–9.[38] A. Rey, J. Rothe, Complexity of merging and splitting for the probabilistic Banzhaf power index in weighted voting games, in: Proceedings of theNineteenth European Conference on Artificial Intelligence (ECAI), 2010, pp. 1021–1022.[39] A.E. Roth (Ed.), The Shapley Value: Essays in Honor of Lloyd S. Shapley, Cambridge University Press, 1988.[40] L.S. Shapley, A value for N-person games, Contributions to the Theory of Games (1953) 31–40.[41] L.S. Shapley, M. Shubik, A method for evaluating the distribution of power in a committee system, American Political Science Review 48 (1954)787–792.[42] A. Taylor, W. Zwicker, Simple Games: Desirability Relations, Trading, Pseudoweightings, Princeton University Press, New Jersey, 1999.[43] Y. Zick, A. Skopalik, E. Elkind, The Shapley value as a function of the quota in weighted voting games, in: Proceedings of the Twenty First InternationalJoint Conference on Artificial Intelligence (IJCAI), 2011, pp. 490–496.