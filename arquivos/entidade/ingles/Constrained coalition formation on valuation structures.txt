Artificial Intelligence 249 (2017) 19–46Contents lists available at ScienceDirectArtificial Intelligencewww.elsevier.com/locate/artintConstrained coalition formation on valuation structures: Formal framework, applications, and islands of tractabilityGianluigi Greco a,∗a Department of Mathematics and Computer Science, University of Calabria, Italyb DIMES Department, University of Calabria, Italy, Antonella Guzzo ba r t i c l e i n f oa b s t r a c tArticle history:Received 20 September 2016Received in revised form 5 April 2017Accepted 17 April 2017Available online 21 April 2017Keywords:Coalitional gamesSolution conceptsComputational complexityTreewidthMarginal contribution networksCoalition structure generation is the problem of partitioning the agents of a given environment into disjoint and exhaustive coalitions so that the whole available worth is maximized. While this problem has been classically studied in settings where all coalitions are allowed to form, it has been recently reconsidered in the literature moving from the observation that environments often forbid the formation of certain coalitions. By following this latter perspective, a model for coalition structure generation is proposed where constraints of two different kinds can be expressed simultaneously. Indeed, the model is based on the concept of valuation structure, which consists of a set of pivotalagents that are pairwise incompatible, plus an interaction graph prescribing that a coalition C can form only if the subgraph induced over the nodes/agents in C is connected.It is shown that valuation structures can be used to model a number of relevant problems arising in real-world application domains. Then, the complexity of coalition structure generation over valuation structures is studied, by assuming that the functions associating each coalition with its worth are given as input according to some compact encoding—rather than explicitly listing all exponentially-many associations. In particular, islands of tractability are identified based on the topological properties of the underlying interaction graphs and on suitable algebraic properties of the given worth functions. Finally, stability issues over valuation structures are studied too, by considering the core as the prototypical solution concept.© 2017 Elsevier B.V. All rights reserved.1. Introduction1.1. Constrained coalition structure generationCoalition structure generation is a fundamental problem in the study of coalition formation processes for multi-agent systems, which naturally occurs whenever agents can benefit form working together by forming coalitions (see, e.g., [59,31]). The problem is defined over a pair (cid:3)N, v(cid:4), referred to as a coalitional game, where N = {a1, . . . , an} is a set of agents and where v is a valuation function that, for each coalition C , i.e., non-empty set C ⊆ N of agents, returns a real number v(C)meant to express the worth that the members of C can jointly achieve by cooperating (see, e.g., [71,53]). The goal is to find * Corresponding author.E-mail addresses: ggreco@mat.unical.it (G. Greco), antonella.guzzo@unical.it (A. Guzzo).http://dx.doi.org/10.1016/j.artint.2017.04.0050004-3702/© 2017 Elsevier B.V. All rights reserved.20G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–46Fig. 1. Interaction graph in Example 1.2, with optimal coalition structures for the basic setting (left), and when a1 and a2 are pivotal agents (right).an optimal coalition structure, i.e., a partition {C1, . . . , Ck} of the agents into disjoint and exhaustive coalitions whose total value (cid:2)ki=1 v(Ci) is maximized.Example 1.1. Consider the coalitional game (cid:3)N, v(cid:4) where N = {a1, a2, a3} and where v is the valuation function such that:⎧⎨⎩v({a3}) = 0v({a1}) = v({a2}) = v({a2, a3}) = v({a1, a3}) = 1v({a1, a2}) = v({a1, a2, a3}) = 3Note that the optimal coalition structures are {{a1, a2, a3}} and {{a1, a2}, {a3}}. Their associated value is v({a1, a2, a3}) =v({a1, a2}) + v({a3}) = 3. (cid:2)While coalition structure generation has been classically studied in the literature by assuming that all coalitions are allowed to form, in real-world applications it is often the case that some coalition structures are inadmissible, because they violate a number of constraints induced by the specific semantics of the application at hand (see, e.g., [59]).Constraints on the coalition structures that are allowed naturally emerge in those settings where cooperation is guided by an underlying structure reflecting, for instance, physical limitation, legal banishments, and social relationships. In these cases, it is natural to assume that if two disconnected agents are not connected by intermediaries in a given coalition, then they might not be able to cooperate at all. In particular, following Myerson’s influential work [51], this intuition has been often formalized (see, e.g., [15,70,9]) by equipping each coalitional game (cid:3)N, v(cid:4) with an undirected graph G = (N, E), called interaction graph, defined over the set of the agents, and by considering a coalition C as a feasible one, only if the subgraph of G induced over the nodes in C is connected.In fact, in addition to the “topological” constraints induced by the underlying interaction graphs, other kinds of con-straints might occur in concrete domains when dealing with the coalition structure generation problem. For instance, the formation of certain coalitions might be prohibited by anti-trust laws or it might be subject to constraints on the coalition sizes. Settings of this kind have been also studied in the literature [26,65,56] and a general and unifying framework of these works has been proposed too [58]. In that framework, a coalitional game is equipped with two sets, N and P , of “negative” and “positive” constraints respectively. A negative constraint n ∈ N is a set of agents, and it prescribes that no coalition C such that C ⊇ n can be formed. Positive constraints are again formalized as set of agents, and they prescribe that for each feasible coalition C , there must exist a constraint p ∈ P such that C ⊇ p. As a matter of fact, however, the framework of [58] does not support the definition of interaction graphs and, despite its generality, it cannot simulate the topological constraints that are induced by them.Example 1.2. Consider again the setting of Example 1.1 and the interaction graph reported on the left of Fig. 1. Note, for instance, that coalition {a1, a3} is not allowed to form. Then, we claim that this simple scenario cannot be modeled via positive and negative constraints. Indeed, if a negative constraint n = {a1, a3} is considered, then the coalition {a1, a2, a3}would be not feasible precisely because of n. More generally, because of the feasibility of {a1, a2, a3} and by the monotone semantics of negative constraints, no negative constraint can be defined at all.Consider now the use of positive constraints. We know that {a1} is feasible and, hence, it must occur as a positive constraint. However, in absence of negative constraints, this immediately entails that {a1, a3} is feasible, too. (cid:2)As a matter of fact, topological constraints and positive/negative constraints have been separate worlds, so far. In the paper, we move from this observation and we propose to study a setting for coalition structure generation based on the concept of valuation structure, which basically consists of an interaction graph associated with certain kinds of negative constraints. In a nutshell, a set S of pairwise “incompatible” (pivotal) agents can be defined, so that every coalition C must satisfy the condition |S ∩ C| ≤ 1 in order to be a feasible one. Indeed, note that this is equivalent to having a negative constraint S, for each subset S(cid:10) ⊆ S with |S(cid:10)| = 2.(cid:10)Example 1.3. Assume that a1 and a2 are two pivotal agents in the setting of Example 1.1. Then, the feasible coalitions are further reduced to {a1}, {a2}, {a3}, and {a2, a3}, because the coalitions {a1, a2, a3} and {a1, a2} would be no longer allowed to form. In this scenario, which is graphically illustrated on the right of Fig. 1, an optimal coalition structure is {{a1}, {a2, a3}}whose associated value is a2. Hence, the incompatibility of a1 and a2 leads to reduce the total available worth. (cid:2)G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–46211.2. ContributionThe intuition underlying our formalization is that pivotal agents in S possess some specific properties differentiating themselves from the remaining agents in N \ S. As an extreme case, a pivotal agent might well be an abstraction for some given parameter/object involved in the problem, i.e., it is not necessarily a “true” agent of the system. For instance, S might model a set of competing facilities to which the agents in N \ S have to be connected. In fact, as the starting point of our analysis,(1) We define a framework for equipping coalitional games with valuation structures and we show that constraints induced by pivotal agents, combined with the underlying interaction graphs, are capable of expressing a number of relevant problems arising in a number of real application scenarios.Motivated by their relevance from the knowledge representation viewpoint, the paper then embarks on a systematic study of algorithmic and complexity issues arising with them. Prior to detailing these technical contributions, however, it is appropriate to recall that there is an extensive literature studying computational issues and proposing efficient solution algorithms for coalition structure generation, which we can partition in two groups based on the kinds of game encoding considered in the research.Classically, valuation functions are viewed as “black boxes” that, on input a coalition C , return the value v(C). In partic-ular, encoding and representation issues are not taken into account. In this context, exact solution approaches or algorithms with worst case guarantee have been proposed (e.g., [62,22,57,60,50,66]); and heuristic methods have been defined, too (e.g., [64,46,65]). Orthogonally to these approaches and moving from the observation the naive encoding based on explicitly listing all possible coalitions, with attached their associated valuations, would require exponential space, efforts have been spent to define methods for representing valuation functions (hence, coalitional games) concisely. Then, coalition structure generation is more efficiently solved by applying optimization techniques to the compact representation directly [52]. In particular, algorithmic and complexity results have been derived for a number of well-known compact representations in-cluding marginal contribution networks [43,52], games with synergy coalition groups [17,52], coalitional skill games [5], games with agent-type representations [2,67], weighted voting games [29], and graph games [27,2,4].Our analysis and our results are positioned within the latter group of works. Indeed, we study a number of computational problems related to coalition formation in the presence of valuation structures, by assuming that coalitional games are provided as input according to some compact encoding. In fact, in absence of valuation structures, it is well-known that coalition structure generation is NP-hard over a number of compact encodings including very simple ones, such as over graph games [2,4]. Surprisingly, however, the precise complexity of the problem was not pointed out in earlier literature. Our first technical result is to address this research question. Indeed,(2) We show that coalition structure generation is complete for the polynomial time closure of NP, formally for the com-plexity class F(cid:2)P2 [48]. The membership result is derived independently of the specific game encoding, while hardness is shown to hold even (i) over graph games and in absence of valuation structures, so that all coalitions are allowed to form, and (ii) over valuation structures whose underlying graphs are acyclic, so that very simple forms of cooperation can emerge only.Motivated by the above bad news, in particular by focusing on the latter setting (ii), we then look at the class of valuation functions that are independent of disconnected members (short: IDM), i.e., such that two agents have no effect on each other’s marginal contribution to their separator1 w.r.t. the underlying interaction graph [69]. Indeed, in absence of valuation structures, coalition structure generation is already known [69] to be tractable for IDM functions over acyclic interaction graphs, or more generally over graphs having bounded treewidth [61]. The question is then whether this result can be extended to our more general setting where constraints on the coalitions allowed to form are expressed via valuation structures. This time, the answer is good news:(3) First, we show that IDM functions defined over interaction graphs with bounded treewidth can be encoded in poly-nomial time into equivalent marginal contribution networks [43] again of bounded treewidth, and vice versa. This is interesting because marginal contribution networks are an encoding that generalizes graph games and that is capable of expressing any valuation function, though in general at the price of an exponential blow-up in the size of representa-tion (cf. [43]). Moreover, note that IDM functions define a class of functions in terms of their algebraic (and topological) properties. Hence, our result is also interesting for it algebraically characterizes a well-known and influential represen-tation scheme for coalitional games, and for it allows to smoothly extend on this scheme all results derived for IDMfunctions, and vice versa—when focusing on bounded treewidth instances.1 Formally, for each pair i, j of agents that are not directly connected in the graph, and for each C ⊆ N with i, j /∈ C , it holds that v(C ∪ {i}) − v(C) =v(C ∪ {i, j}) − v(C ∪ { j}).22G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–46(4) Then, we generalize the tractability result of IDM functions over graphs having bounded treewidth [69] to the case where valuation structures are considered. Founding on the correspondence discussed at point (3) above, the result is obtained by recasting coalition structure generation over marginal contribution networks into a constraint satisfaction problem (CSP), and by subsequently using structural decomposition methods for CSP instances (see, e.g., [36,35,41]). The approach uses novel ideas and methods that might be re-used in other application domains. Moreover, we show that it can be easily extended to deal with valuation structures in presence of arbitrary positive and negative constraints explicitly provided as input. The careful reader might note that alternative approaches would have been to use an encoding in monadic second-order logic by subsequently applying generalizations of Courcelle’s theorem tailored to opti-mization problems [1], or to use general methods to solve combinatorial problems on graphs having bounded treewidth via dynamic programming [10]. However, these approaches would have asked to restrict the values returned by the valuation functions (to be given in unary) or the given interaction graphs (to have bounded degree).(5) In addition, we show that the above results hold not only for IDM functions, but also for functions derived from IDMones via “affine transformations”—whose specification is allowed as an additional feature in the formal definition of a valuation structure. Consider, for instance, a setting where in order to leave the grand-coalition N, a “splitting cost” c(cid:10)(C) = v(C) − c, for each has to be paid. In this case, we would obtain an “adjusted” valuation function v(cid:10)(N) = v(N). In particular, note that such transformed functions are no longer IDM ones, so that specific C ⊂ N, and vsolution approaches have been required to deal with them.such that v(cid:10)Finally, in order to provide a more comprehensive picture of the complexity issues arising with valuation structures, we complement the above research by addressing another fundamental problem for coalitional games, namely to determine how the worth that is obtained by forming an optimal coalition structure can be distributed over the agents in a way that is stable [53]. In particular,(6) We consider the well-known concept of core and we position it within our setting. Then, we show that core-related problems can be solved in polynomial time for classes of IDM valuation functions over graphs having bounded treewidth, even in presence of valuation structures. Results are derived as an application of the methods developed to deal with coalition structure generation in the same setting.1.3. OrganizationThe rest of the paper is organized as follows. Section 2 formalizes the concept of valuation structure and illustrates its applications. The coalition structure generation problem over valuation structures is defined in Section 3, where basic complexity results are also derived. Islands of tractability are singled out in Section 4, whereas Section 5 illustrates their specializations to the application scenarios we have previously pointed out. Stability issues are studied in Section 6, while a few final remarks are reported in Section 7.2. Coalition structure generation revisitedIn this section, we propose an extension of the coalition structure generation problem where optimization functions more general than the maximization of the social welfare are allowed, and where qualitative constraints on the coalition structures of interest can be expressed. The extension is based on the concept of “valuation structure”, which is first discussed and subsequently exemplified with a number of concrete applications.22.1. Valuation structures: syntax and semanticsLet (cid:2) = (cid:3)N, v(cid:4) be a coalitional game. Intuitively, the concept of valuation structure we are going to define on top of (cid:2)plays the role to model certain kinds of constraints on the coalitions that are allowed to form plus an affine transformation on the basic valuation function v. In particular, because of the latter feature, throughout the paper N and v will not fully characterize a coalitional game in the conventional sense, because they do not suffice alone to describe the coalitional values in our extended setting.Let G = (N, E) be an undirected graph called interaction graph, whose nodes are the agents in N. Edges are viewed as sets of nodes, so that for each e ∈ E, e ⊆ N and |e| = 2 hold. Let S ⊆ N be a possibly-empty set of agents, called pivotal agents. Let α, β : S (cid:13)→ R be two real-valued functions, and let x, y ∈ R be real numbers.3 Then, the tuple σ = (cid:3)G, S, α, β, x, y(cid:4) is called a valuation structure for (cid:3)N, v(cid:4). The semantics of σ is next illustrated.The role of the interaction graph G is to constrain the formation of the coalitions based on their connectivity properties, in that a non-empty set C of agents, called coalition, is allowed to form only when the subgraph induced over the nodes in C is connected. Moreover, we would like to forbid the formation of any coalition C containing more than one pivotal agent, 2 A table summarizing the main notation we introduce in order to deal with valuation structures is reported in Appendix A.3 As usual, when moving to the complexity analysis, all numbers will be restricted to be rational ones and given in fractional form.G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–4623Fig. 2. (a) Coalitional game in Example 2.1; (b, c) Coalition structures in Example 2.3.i.e., C is allowed only if |C ∩ S| ≤ 1. Whenever such connectivity and pivotal conditions are satisfied by C , we say that C is σ -feasible. The set of all σ -feasible coalitions in the game (cid:2) is denoted by Fσ ((cid:2)).Example 2.1. Consider a coalitional game ˆ(cid:2) = ( ˆN, ˆv) such that ˆN = {a1, . . . , a7}. Moreover, consider the valuation structure ˆσ = (cid:3) ˆG, {a1, a2}, ˆα, ˆβ, ˆx, ˆy(cid:4) where ˆG is the interaction graph depicted in Fig. 2(a). Then, C1 = {a1, a3} and C2 = {a5, a6, a7}are two ˆσ -feasible coalitions. Instead, {a1, a2} is not ˆσ -feasible because it contains two pivotal agents, and {a5, a7} is not ˆσ -feasible because the subgraph of ˆG induced over the coalition is not connected. (cid:2)The functions α and β and the real numbers x and y are used to define an affine transformation valσ of the valuation function v. Formally, if C ∈ Fσ ((cid:2)) is a σ -feasible coalition, then we define its σ -value as follows:(cid:6)valσ (v, C) =α(ai) × v(C) + β(ai)x × v(C) + yif {ai} = C ∩ S,if C ∩ S = ∅If v is understood from the context, then we just write valσ (C) in place of valσ (v, C).(cid:2)Example 2.2. Consider again the setting of Example 2.1, and the graph ˆG = ( ˆN, ˆE) in Fig. 2(a). Note that each edge e ∈ ˆEis equipped with a weight we ∈ R, so that we have, for instance, w{a1,a3} = 1 and w{a1,a2} = 2.4 Moreover, assume that the valuation function ˆv is such that if C is a ˆσ -feasible coalition, then its value ˆv(C) is defined as the sum of the weights of the edges covered by C , i.e., ˆv(C) =e∈ ˆE,e⊆C we . For instance, for the coalitions C1 = {a1, a3} and C2 = {a5, a6, a7} presented in Example 2.1, we have ˆv(C1) = w{a1,a3} = 1, while ˆv(C2) = w{a5,a6} + w{a6,a7} = 1 + 1 = 2.Recall that ˆσ = (cid:3) ˆG, {a1, a2}, ˆα, ˆβ, ˆx, ˆy(cid:4) is the given valuation structure. Assume that ˆα : {a1, a2} (cid:13)→ {1} and ˆβ : {a1, a2} (cid:13)→{0} are two constant functions over the domain {a1, a2} of the pivotal agents, and that ˆx = 0 and ˆy = −12. Then, we have val ˆσ (C1) = 1 × ˆv(C1) + 0 = 1 and val ˆσ (C2) = 0 × ˆv(C2) − 12 = −12. More generally, each ˆσ -feasible coalition that does not include a pivotal agent gets −12 as its final ˆσ -value. Instead, the ˆσ -value of any other ˆσ -feasible coalition C , hence containing precisely one of the two pivotal agents, is just given by the expression (cid:2)e∈ ˆE,e⊆C we . (cid:2)A σ -feasible coalition structure for (cid:2) is a set (cid:6) = {C1, . . . , Ck} of σ -feasible coalitions such that C1 ∪ · · · ∪ Ck = N and Ci ∩ C j = ∅, for each pair i, j ∈ {1, . . . , k} with i (cid:16)= j. The set of all possible coalition structures is denoted by CS σ ((cid:2)). Note that CSσ ((cid:2)) (cid:16)= ∅, because each singleton coalition is σ -feasible, that is, {ai} ∈ Fσ ((cid:2)) holds, for each ai ∈ N.For any (cid:6) ∈ CSσ ((cid:2)), by slightly abusing of notation, we define valσ (v, (cid:6)) (or, shortly, valσ ((cid:6)) if the valuation function vC∈(cid:6) valσ (v, C), which is called the σ -value of (cid:6). Moreover, we denote by optσ ((cid:2)) the is clearly understood) as the value maximum σ -value that can be attained over all possible σ -feasible coalition structures. A coalition structure (cid:6)∗ ∈ CSσ ((cid:2))such that valσ ((cid:6)∗) = optσ ((cid:2)) is said to be σ -optimal on (cid:2), and the set of all σ -optimal coalition structures is denoted by CS-optσ ((cid:2)).(cid:2)Example 2.3. In the setting of Example 2.1 and Example 2.2, it clearly emerges that it is suboptimal to form a coalition without including one of the two pivotal agents. Therefore, ˆσ -optimal coalition structures have necessarily the form { A1, A2}where A1 ∩ A2 = ∅, a1 ∈ A1, a2 ∈ A2, and A1 ∪ A2 = ˆN. Note also that, since A1 and A2 are ˆσ -feasible, the subgraph of ˆGinduced over Ai , with i ∈ {1, 2}, has to be connected. As an example, Fig. 2(b) illustrates the ˆσ -feasible coalition structure {{a1, a3}, {a2, a4, a5, a6, a7}}, whose associated ˆσ -value is 1 + 6 = 7. In fact, this is not ˆσ -optimal, because the ˆσ value of {{a1, a3, a4, a5}, {a2, a6, a7}} is 7 + 2 = 9—see Fig. 2(c). It can be checked that this latter coalition structure is indeed ˆσ -optimal. (cid:2)Note that, if in the above example no pivotal agents were defined, then the coalition structure consisting of the grand-coalition (i.e., { ˆN}) would be the only optimal one. In particular, in this scenario, the constraints provided by the interaction 4 Throughout the paper, we often exhibit exemplifications and discuss real-world application domains defined over graphs whose edges are equipped with weights. As in Example 2.2, such weights are used to succinctly define the underlying valuation function, in the spirit of the encoding for graph games [27].24G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–46graph would be immaterial, in the sense that { ˆN} would be still optimal if the complete interaction graph (i.e., where every pair of agents is connected) were used in place of ˆG in the definition of the structure ˆσ . In general this is not the case, as illustrated in the following example.Example 2.4. Consider the game ¯(cid:2) = (cid:3){a1, a2}, ¯v(cid:4) such that ¯v({a1}) = ¯v({a2}) = 0 and ¯v({a1, a2}) = 1. Consider the valuation structure ¯σ = (cid:3) ¯G, ∅, ¯α, ¯β, ¯x, ¯y(cid:4) where ¯G = ({a1, a2}, ∅). Thus, the only ¯σ -feasible coalitions are the singletons {a1} and {a2}. It follows that there is precisely one ¯σ -optimal coalition structure, namely {{a1}, {a2}}, whose associated ¯σ -value is 0. However, if the graph where a1 and a2 are connected were used in place of ¯G, then the only optimal coalition structure would be {{a2, a2}}. So, ¯G provides a true constraint w.r.t. the formation of optimal coalition structures. (cid:2)Actually, by looking critically at the above example, the reader might have noticed that the setting is rather artificial and counter-intuitive. Indeed, the graph ¯G tells us that we cannot directly benefit from the cooperation between a1 and a2, whereas ¯v tells precisely the opposite, that is, it evidences that a synergy can emerge from their cooperation.In fact, in order to study more natural scenarios, where worth functions suitably reflect the topological properties ex-pressed by an underlying interaction graph, the concept of valuation functions that are independent of disconnected memberswas introduced in the literature. We recall from [69] that a valuation function v is independent of disconnected members (short: IDM) w.r.t. an interaction graph G if, for all agents ai and a j that are not connected in G and for each coalition Cwith ai, a j /∈ C , the following holds:v(C ∪ {ai}) − v(C) = v(C ∪ {ai, a j}) − v(C ∪ {a j}).(1)Intuitively, the notion tells us that two agents have no effect on each other’s marginal contribution to their vertex separator. In particular, if C1 and C2 are two coalitions and there are no edges between C1 \ C2 and C2 \ C1, then we have [69]:v(C1 ∪ C2) = v(C1) + v(C2) − v(C1 ∩ C2).(2)Note that the valuation function ˆv in Example 2.1 is an IDM function w.r.t. ˆG. Moreover, recall that in absence of pivotal agents the graph ˆG might be relaxed with the complete interaction graph. It is instructive to point out that this is not by chance.In order to formally state the result, observe that a valuation structure (cid:3)G, ∅, α, β, x, y(cid:4) can be more compactly denoted by (cid:3)G(cid:4), because the functions α and β and the numbers x and y play no role. Moreover, if C is a coalition which is not necessarily (cid:3)G(cid:4)-feasible and if C1, . . . , Ck, with k ≥ 1, are the connected components of the subgraph of G induced over the nodes in C , then the set {C1, . . . , Ck} is denoted by C[G].Theorem 2.5. Let (cid:2) = (cid:3)N, v(cid:4) be a coalitional game and let (cid:3)G 1(cid:4) and (cid:3)G 2(cid:4) be two valuation structures for (cid:2) such that G i = (N, E i), with i ∈ {1, 2}, and E 1 ⊆ E 2. Assume that v is an IDM function w.r.t. G 1 (hence, w.r.t. G 2). Then,(1) If (cid:6)2 is (cid:3)G 2(cid:4)-optimal, then (2) If (cid:6)1 is (cid:3)G 1(cid:4)-optimal, then (cid:6)1 is (cid:3)G 2(cid:4)-optimal.C∈(cid:6)2C[G 1] is (cid:3)G 1(cid:4)-optimal.(cid:7)(cid:7)(cid:10)(cid:10)(cid:10)(cid:10), C(cid:10) ∩ C= N and C(cid:10)(cid:10) = ∅, for each pair CProof. (1) Let (cid:6)2 be any (cid:3)G 2(cid:4)-optimal coalition structure, and consider the coalition structure (cid:6)1 =C[G 1]. We claim C∈(cid:6)2(cid:10)(cid:10) ∈ C[G 1]. That is, Cthat (cid:6)1 is (cid:3)G 1(cid:4)-feasible. Indeed, if Cis the set of nodes of some connected component in the subgraph of G 1 induced over C . So, every coalition in (cid:6)1 satisfies the connectedness condition enforced by the interaction graph G 1. Moreover, by construction of (cid:6)1, it is immediate that (cid:7)is a coalition in (cid:6)1, then there is a coalition C ∈ (cid:6)2 such that Cof coalitions in (cid:6)1. That is, (cid:6)1 is a (cid:3)G 1(cid:4)-feasible coalition structure.this end, let C[G 1] be the set {C1, . . . , Ck} of (cid:3)G 1(cid:4)-feasible coalitions, and observe that val(cid:3)G 1(cid:4)(C[G 1]) =(cid:2)kC (cid:10)∈(cid:6)1We now claim that val(cid:3)G 2(cid:4)((cid:6)2) = val(cid:3)G 1(cid:4)((cid:6)1). In fact, we show that, for each C ∈ (cid:6)2, val(cid:3)G 2(cid:4)(C) = val(cid:3)G 1(cid:4)(C[G 1]) holds. To i=1 val(cid:3)G 1(cid:4)(Ci) =i=1 v(Ci). Then, recall that v is an IDM function w.r.t. G 1 and that for each pair Ch, C j in C[G 1] with h (cid:16)= j, there is no edge in G 1 connecting some node in Ch with some node in C j , since Ch and C j are precisely connected components in the subgraph of G 1 induced over the nodes in C . Thus, by Equation (2), v(Ch ∪ C j) = v(Ch) + v(C j). Moreover, observe that C = C1 ∪ · · · ∪ Ck. Hence, the above entails that v(C) =i=1 v(Ci). Finally, we observe that C is (cid:3)G 2(cid:4)-feasible and, therefore, val(cid:3)G 2(cid:4)(C) = v(C). So, val(cid:3)G 2(cid:4)((cid:6)2) = val(cid:3)G 1(cid:4)((cid:6)1).Armed with the above properties, let us assume, for the sake of contradiction, that (cid:6)1 is not (cid:3)G 1(cid:4)-optimal and let 1 be a (cid:3)G 1(cid:4)-optimal coalition structure with val(cid:3)G 1(cid:4)((cid:6)(cid:10)1). 1) > val(cid:3)G 2(cid:4)((cid:6)2) holds. However, by the optimality 1) > val(cid:3)G 1(cid:4)((cid:6)1). Therefore, val(cid:3)G 2(cid:4)((cid:6)2) = val(cid:3)G 1(cid:4)((cid:6)1) < val(cid:3)G 1(cid:4)((cid:6)(cid:10)(cid:6)(cid:10)However, (cid:6)(cid:10)of (cid:6)2, we know that val(cid:3)G 2(cid:4)((cid:6)2) ≥ val(cid:3)G 2(cid:4)((cid:6)(cid:10)1 is trivially (cid:3)G 2(cid:4)-feasible and, hence, val(cid:3)G 2(cid:4)((cid:6)(cid:10)1). Contradiction.1) = val(cid:3)G 1(cid:4)((cid:6)(cid:10)(cid:2)k(cid:2)k(2) Assume that (cid:6)1 is any (cid:3)G 1(cid:4)-optimal coalition structure. Hence, (cid:6)1 is (cid:3)G 2(cid:4)-feasible too (and val(cid:3)G 1(cid:4)((cid:6)1) =val(cid:3)G 2(cid:4)((cid:6)1)). Assume, for the sake of contradiction, that (cid:6)1 is not (cid:3)G 2(cid:4)-optimal, and let (cid:6)2 be a (cid:3)G 2(cid:4)-optimal coalition C[G 1] is (cid:3)G 1(cid:4)-optimal and, by inspection in the proof, we also structure with val(cid:3)G 2(cid:4)((cid:6)2) > val(cid:3)G 2(cid:4)((cid:6)1). By point (1), (cid:7)C∈(cid:6)2G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–4625Fig. 3. Illustration of examples in Section 2.2.C[G 1]) = val(cid:3)G 2(cid:4)((cid:6)2). Therefore, val(cid:3)G 1(cid:4)((cid:7)C∈(cid:6)2C[G 1]) > val(cid:3)G 1(cid:4)((cid:6)1), which is impossible by the (cid:7)know that val(cid:3)G 1(cid:4)(optimality of (cid:6)1. (cid:3)C∈(cid:6)22.2. Knowledge representation and applicationsThe concept of σ -optimal coalition structure illustrated in the above section is clearly more general than the counterpart where no valuation structure σ is considered. Indeed, given any coalitional game (cid:2) = (cid:3)N, v(cid:4), by defining ⊥ = (cid:3)K N (cid:4) as the valuation structure where K N is the complete interaction graph over the set N of agents, we can immediately check that any coalition S ⊆ N is ⊥-feasible and that val⊥(v, S) = v(S) holds. Therefore, results in the literature where no valuation structures have been considered (see Section 1) can be viewed as results that hold over ⊥-optimal coalition structures.Our goal is then to analyze arbitrary valuation structures, and we start here by illustrating a number of application scenarios that naturally fit the basic setting and our more general one. Further applications will be discussed in Section 6. In the following, we denote by +∞ any “sufficiently large” real number,5 and by −∞ its opposite. Moreover, for any real number c ∈ R, we denote by cD the real-valued function mapping each element in the domain D to the constant c—actually, the subscript will be hereinafter omitted, since this notation will be used for D coinciding with the set of pivotal agents only, and since this set will be clearly understood from the context.It is worthwhile noticing that the tractability results we shall provide in the paper for instances having bounded treewidth immediately apply to the specific applications discussed below, in some cases allowing us to close tractability questions that have been left open in the literature—as we shall discuss in detail in Section 5.2.2.1. Application to multicut problemsIn the multicut problem, we are given an undirected graph G = (N, E) where each edge e ∈ E is associated with a positive real number we ∈ R+(the weight of e), plus a set P ⊆ N × N of source-terminal pairs. A multicut is a set of edges (cid:10)) each of the pairs in P is separated, i.e., for each (s, t) ∈ P there is no path in (cid:10) ⊆ E such that in the graph (N, E \ EE(cid:10)) connecting s and t. The goal is to find a multicut whose edges have minimum total weight. For |P | = 1, the (N, E \ Eproblem reduces to the famous “min-cut/max-flow” problem, which is of central significance in combinatorial optimization and which is known to be feasible in polynomial time (see, e.g., [47]). In general, the problem is NP-hard and a number of (in)approximability results are known for it (see, e.g., [68]).Example 2.6. Consider the graph reported in Fig. 3(a), and assume that {(s1, t1), (s2, t2)} is a given set of source-terminal pairs. Then, a solution to the multicut problem defined on these inputs is given by the multicut graphically illustrated in the same figure. Note that the total weight is 1 + 1 + 2 = 4. (cid:2)In order to encode the multicut problem in our setting, the set N of the nodes is transparently viewed as a set of agents. Moreover, we define a graph G P = (N, E P ) such that E P = E ∪ {{s, t} | (s, t) ∈ P }, i.e., the graph is obtained from G by adding e∈E we − 1, for each (s, t) ∈ P , and we define v P as the function an edge for each pair in P . Eventually, we let w{s,t} = − such that v P (C) is the sum of the weights of the edges in the subgraph of G P induced over any coalition C . Note that v P (C) < 0 holds if, and only if, C covers some pair in P .(cid:2)5 For instance, we can just set +∞ ≥ |N| × maxS∈Fσ ((cid:2)) |v(S)|.26G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–46Consider now the (trivial) valuation structure ⊥, and observe that given the definition of v P , it is clearly suboptimal to form coalitions covering pairs from P . For instance, in the example illustrated in Fig. 3(a), a ⊥-optimal coalition structure is {{s1, r1}, {s2, r2, r3, t1}, {t2}}. Note that this coalition structure is induced by a multicut of minimum total weight. This is one-to-one corresponds to a ⊥-feasible coalition structure (cid:6) for not by chance. Indeed,6 in our reduction any multicut E(cid:10) = {e ∈ E | ∀C j ∈ (cid:6), |e ∩ C j| ≤ 1} and val⊥(v P , (cid:6)) ≥ 0. In particular, note that for any coalition structure (cid:3)N, v P (cid:4) such that E(cid:6) of this kind, val⊥(v P , (cid:6)) =e(cid:10)∈E(cid:10) we(cid:10) holds. Therefore, a multicut of minimum weight can be computed by algorithms for computing (⊥-)optimal coalition structures.e∈E we −(cid:2)(cid:2)(cid:10)2.2.2. Application to multiway cut problemsSimilarly to the multicut problem, the multiway cut problem takes as input a graph G = (N, E), where each edge e ∈ Eis equipped with a weight we ∈ R+is a set of (cid:10)) no pair of terminals from T are connected. The goal is to find a multiway edges Ecut whose edges have the minimum total weight. For |T | = 2 the problem is solvable in polynomial time (it again reduces to the min-cut problem), while it becomes NP-hard even for |T | = 3 (see [21]).. Moreover, it takes as input a set T ⊆ N of terminals. A multiway cut E(cid:10) ⊆ E such that in the graph (N, E \ E(cid:10)Example 2.7. Consider again the graph reported in Fig. 3(a), where all nodes in {t1, t2, s1, s2} are now treated as terminals to be disconnected from each other. In order to end up with a multiway cut, we have in particular to disconnect s2 and t1, as it is done in Fig. 3(b). Note that the total weight of the cut becomes 1 + 1 + 2 + 1 = 5. (cid:2)The multiway cut problem nicely fits our general setting. Indeed, we can first define v mw as the function such that v mw(C) is the weight of the edges in the subgraph of G induced over C —note that, in this case, we work on the original graph G. Then, we can consider the valuation structure σmw = (cid:3)G, T , 1, 0, 1, 0(cid:4) where terminals play the role of pivotal agents. Therefore, σmw-feasible coalition structures naturally correspond to multiway cuts (and vice-versa). Moreover, note that for each C ⊆ N, v mw(C) = valσmw (C). That is, the affine transformation is immaterial, and similarly to the case of the multicut problem we get valσmw (v mw, (cid:6)) =is the cut and (cid:6) the corresponding coali-tion structure. Putting it all together, the multiway cut problem is reduced to the computation of a σmw-optimal coalition structure.e(cid:10)∈E(cid:10) we(cid:10) , where Ee∈E we −(cid:2)(cid:2)(cid:10)2.3. Application to k-clusteringLet us consider the framework for correlation clustering proposed by [6]. We have an undirected graph G = (N, E) where each edge e ∈ E has a label in (cid:7)e ∈ {+, −}. A cluster C is a non-empty subset of N such that the subgraph of G induced over C is connected.7 A clustering is just a partition of N into disjoint and exhaustive clusters. For any cluster C ⊆ N, we denote −(C) = {e ∈ E | |e ∩ C| = 1, (cid:7)e = −} the by E−(C)|, set of negative inter-cluster edges with one end in C . Then, the correlation value of C is given by v cc(C) = |Ewhile the correlation value of a clustering (cid:6) is the sum of the correlation values of its clusters, i.e., the value C∈(cid:6) v cc(C). The goal is to find an optimal clustering, that is, a clustering having maximum correlation value.+(C) = {e ∈ E | e ⊆ C, (cid:7)e = +} the set of its positive intra-cluster edges, and by E+(C)| + |E(cid:2)Example 2.8. Consider the graph illustrated in Fig. 3(c), where each edge is associated with a label in {+, −}. It can be checked that an optimal correlation clustering is given by the set {C1, C2, C3}. In particular, note that v cc(C1) = 1 + 2, v cc(C2) = 4 + 3, and v cc(C3) = 4 + 1, so that the overall value of the clustering is 3 + 6 + 5 = 14. (cid:2)Note that, in the basic correlation clustering framework, the number of clusters is not a-priori fixed. More recently, an extension of this framework has been studied, where the number of clusters is stipulated to be a small constant k [33]. For instance, in the case of Fig. 3(c), by fixing k = 2, we would look for a bipartition of the graph in two connected components maximizing the correlation value—interestingly, the problem is NP-hard even in this case [33]. Accordingly, we would single out the two components C1 and C2 ∪ C3, where v cc(C2 ∪ C3) = 11. In particular, the clustering {C1, C2, C3} is no longer admissible because it consists of 3 clusters.In order to accommodate this k-clustering problem in our setting, we need not only to define suitable pivotal agents (as in the multiway cut problem), but also to use an affine transformation of the valuation function. Formally, for any set R ⊆ N of nodes, we consider the valuation structure σR = (cid:3)G, R, 1, 0, 0, −∞(cid:4). Intuitively, according to σR, it is always suboptimal to form a coalition that does not include an agent in R, so that any σR-feasible coalition structure (cid:6) such that valσR (v cc, (cid:6)) ≥ 0 consists of exactly |R| distinct coalitions (as R is the set of pivotal agents, there cannot be less than |R|coalitions). Moreover, note that the set of possible coalitions is restricted to those that are feasible according to the graph G, as to avoid clusters formed by unconnected components. Therefore, (cid:6) is a clustering and valσR (v cc, (cid:6)) is precisely its value. On the other hand, it is immediate to check that if (cid:6) is a clustering, then (cid:6) is also a σR-feasible coalition structure, 6 For the sake of readability, we omit from this high-level discussion the formal statements and the proofs related to the correctness of the encodings. The formal treatment is in Appendix B.7 The connectivity condition is not necessary, but simplifies the presentation of the extension we shall next address.G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–4627for any set R including precisely one element for each cluster in (cid:6). Hence, an optimal k-clustering can be computed as a coalition structure having the maximum σR-value over all σR-optimal coalition structures for any subset R ⊆ N with |R| = k. In particular, since k is a given fixed constant [33], then polynomially many subsets R have to be considered.2.4. Application to chromatic partitioningIn a number of graph-based applications, different weights might be associated to an edge in order to express the similarity between the linked nodes/objects w.r.t. different semantics relationships. The setting can be modeled by assuming that a set C of colors is given together with a graph G = (N, E). Each edge e ∈ E is associated with weights one-to-one ∈ R the weight of e under c. Then, we define a chromatic corresponding to the colors. Accordingly, we denote by wcepartition of G as a set {(cid:3)C1, c1(cid:4), . . . , (cid:3)Ch, ch(cid:4)} where {C1, . . . , Ch} is a partition of N into disjoint and exhaustive coalitions and where c1, . . . , ch are h distinct colors taken from C. The value of each element (cid:3)Ci, ci(cid:4) is the sum of the weights under e , and the value of the partition is the sum of the values of its elements. The ci of the edges covered by C , i.e., goal is to compute an optimal chromatic partition. Hence, the model is reminiscent of works on simultaneously labeling and partitioning (see, e.g., [12,20] and the references therein).e∈E,e⊆Ciwci(cid:2)Example 2.9. Consider the graph illustrated in Fig. 3(d). We assume that two colors are available only, namely ‘Red’ and ‘Blue’. Each edge e in the figure is associated with an expression of the form w Redreporting the weight of e under Red/Blue. The figure also reports a chromatic partition {R, B} whose overall value is 5. It is easy to see that this is indeed an optimal chromatic partition. (cid:2)e /w Blueee(cid:2)(cid:2)e∈E,e⊆S wc1e∈E,e⊆N\S wc1Note that for C = {c1} chromatic partitioning is immaterial, as the only possible outcome is {(cid:3)N, c1(cid:4)}. For C = {c1, c2}, = wc2e , for each e ∈ E. Indeed, in this case, the problem reduces to computing a +the problem is intractable even when wc1eset S ⊆ N maximizing the value e , which is NP-hard (cf. [27]).Let us now encode chromatic partitioning in our setting. Let GC denote the graph (N ∪ C, E ∪ EC), where colors are viewed as nodes and where EC is obtained by including an edge between each node in N and each color in C (thus, |EC| = |N| × |C|). Intuitively, nodes in C will play the role of pivotal agents and we proceed along the line of the encoding for the k-clustering problem, with k = |C|. Accordingly, we consider the valuation structure σch = (cid:3)GC, C, 1, 0, 0, −∞(cid:4). In particular, by considering the interaction graph GC and since each coalition including a node in C trivially satisfies the connectedness condition (due to the edges in EC ), we are guaranteed that it will be always optimal to form σch-feasible coalition structures consisting of k coalitions, each including one distinct of the available k colors. W.l.o.g, such coalitions have the form {C1, . . . , Ch, Ch+1, . . . , Ck} where |Ci ∩ C| = 1 holds, for each i ∈ {1, . . . , h} and where C j ⊆ C holds, for each j ∈ {h + 1, . . . , k}. In fact, they one-to-one correspond to chromatic partitions {(cid:3)C1, C1 ∩ C(cid:4), . . . , (cid:3)Ch, Ch ∩ C(cid:4)}. Therefore, if v ch is any valuation function such that, for each set of nodes C ⊆ N ∪ C with C ∩ C = {ci},v ch(C) =e holds, then we can solve chromatic partitioning by computing a σch-optimal coalition structure for (cid:3)N, v ch(cid:4).e∈E,e⊆C wci(cid:2)3. Coalition structure generation on valuation structuresAn instance for the coalition structure generation problem on valuation structures, denoted in the following as CSGval, is a pair ((cid:2), σ ), where (cid:2) = (N, v) is a coalitional game, and σ = (cid:3)G, S, α, β, x, y(cid:4) is a valuation structure on (cid:2). The goal is to compute a σ -optimal coalition structure (cid:6)∗ ∈ CS-optσ ((cid:2)). The problem generalizes on the valuation structure σ the well-known coalition structure generation problem (short: CSG), which is just the special case where the trivial valuation structure ⊥ is considered.Based on the observations in Section 2.2, we already know that CSGval has a number of different concrete applications. Here, we start its formal analysis by studying its computational complexity, i.e., we want to formally assess the amount of resources that are needed to compute a σ -optimal coalition structure. To carry out this analysis, we preliminary need to adopt a representation for the input. We proceed as follows:• A trivial representation for (cid:2) would just list all possible coalitions, with attached their associated valuations, hence requiring exponential space (w.r.t. |N|). However, more compact encodings can be obtained in some cases [49,45,27,30,43,17,14]. Just think, as an extreme case, that a valuation function v such that v(C) = 0, for each C ⊆ N, needs only constant space to be represented. Here, we do not commit ourselves to a specific representation strategy. Rather, by following [39], we assume that a representation R for coalitional games defines two functions ξ R, which are used to encode a class of games denoted by C(R). In particular, for each coalitional game (cid:2) ∈ C(R), ξ R((cid:2)) is the R(ξ R((cid:2)), C) is the value associated to the coalition C according to v. We require that this value encoding of (cid:2), while vcan be computed in polynomial time w.r.t. (cid:21)(cid:2)(cid:21). Moreover, we assume as usual that all agents in N are listed in ξ R((cid:2)), i.e., (cid:21)ξ R((cid:2))(cid:21) ≥ |N| holds.• The encoding of the valuation structure σ = (cid:3)G, S, α, β, x, y(cid:4) is given by the encodings of its elements. We assume that α and β are represented by explicitly listing their entries, which in this case are polynomially many (in fact, we have |S| entries), and we assume a standard encoding for the graph G in terms of an adjacency matrix, with size (cid:21)G(cid:21). Eventually, the size of σ is denoted by (cid:21)σ (cid:21).and vR28G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–46Fig. 4. Example reduction for the formula ˆ(cid:9) in the proof of Theorem 3.2—penalty edges are depicted with dashed lines.3.1. Complexity in the general caseThe complexity of the standard CSG problem has been already studied in the literature, and it has been shown to be NP-hard even when very specific kinds of encodings are considered, in particular, when coalitional games are given as graph games [69].Here, we recall that according to the graph-game representation gg, the encoding ξ gg((cid:2)) of a coalitional game (cid:2) =(cid:3)N, v(cid:4) ∈ C(gg) is given in terms of a graph (N, E) where each edge e ∈ E is also equipped with a weight we ∈ R. In particular, for each coalition C ⊆ N, the value v(C) = v gg(ξ gg((cid:2)), C) is just given by the sum of the weights of the edges covered by the agents in C , i.e., v(C) =e⊆C,e∈E we . Note that most of the games we have considered so far are given in this representation, as in Example 2.2, Section 2.2.1, and Section 2.2.2. Moreover, observe that valuation functions for games in C(gg) are independent on disconnected members w.r.t. the underlying weighted graphs on top of which they are defined (see, also, [69]).(cid:2)The intractability of the CSG problem over graph games immediately leads to establish the intractability of our more general setting, where valuation structures can be possibly taken into account.Theorem 3.1 (cf. [27,69,4]). CSGval is NP-hard, even on the class C(gg).Surprisingly, however, the precise complexity of the CSG problem has been not pointed out in earlier literature. In fact, our first contribution is to show that the problem is slightly more complex than just being NP-hard. Indeed, it emerges to be complete for the class F(cid:2)P2 consisting of all those computation problems that can be solved in polynomial time by possibly invoking, each time with a unitary cost, an oracle that solves a decision problem in the class NP. The reader is referred to, e.g., [54,48,44], for further background on these notions of complexity theory. Note that the membership in the class F(cid:2)P2of the CSG problem has been recently shown in the literature [15]. Inspection in that proof reveals that it smoothly extends to the presence of valuation structures. Accordingly, we next focus on showing the F(cid:2)P2 -hardness part only.Theorem 3.2. CSG (hence CSGval) is F(cid:2)P2 -complete. Hardness holds even on the class C(gg).Proof. Let us show the hardness part. Let (cid:9) = c1 ∧ . . . ∧ cm be a Boolean formula in conjunctive normal form over the variables X1, . . . , Xn. That is, for each i ∈ {1, . . . , m}, ci is a disjunction of literals, where each literal is either a variable X jor its negation ¬ X j . Let s1, . . . , sm be a list of positive weights associated with the corresponding clauses of (cid:9). For any (possibly partial) truth assignment τ , its weight is defined as the sum of the weights associated with the clauses satisfied by τ . Computing the maximum possible weight associated with any assignment is F(cid:2)PBased on (cid:9) and s1, . . . , sm, we build an encoding ξ gg((cid:2)) of a coalitional game (cid:2) = (cid:3)N, v(cid:4) ∈ C(gg). In particular, ξ gg(v) is 2 -hard [48].the graph (N, E) equipped with weights we , for each e ∈ E, such that:• For each clause ci and for each literal L in ci , N includes a literal node/agent (cid:7)(L)i . Moreover, N includes the agent r, and no further agent is in N.• For each pair i, i{(cid:7)( X j)i, (cid:7)(¬ X j)iin ci , E includes the edge {(cid:7)(L)i, (cid:7)(Lfurther edge is in E.(cid:10) ∈ {1, . . . , m} with i (cid:16)= i, and for each variable X j occurring in ci such that ¬ X j occurs in ci(cid:10) , the edge (cid:10) } is in E. Moreover, for each clause ci , with i ∈ {1, . . . , m}, and for each pair of distinct literals L and L(cid:10)(cid:10))i}. Finally, E includes the edge {r, (cid:7)(L)i}, for each literal L in any clause ci , and no (cid:10)• Weights are such that w{r,(cid:7)(L)i } = si , for each literal L occurring in the clause ci . Moreover, for each edge {p, q} ∈ E with r /∈ {p, q}, hereinafter called penalty edge, we have that w{p,q} = −(i=1 si + 1) × (|E| + 1).(cid:2)nAs an example, Fig. 4 reports the graph we can build for the formula ˆ(cid:9) = ˆc1 ∧ ˆc2 over the variables X1, . . . , X4, where ˆc1 = ( X1 ∨ X2 ∨ X3) and ˆc2 = ( X1 ∨ ¬ X2 ∨ X4) are the clauses whose associated weights are s1 and s2, respectively.Note that v(S) = 0 holds, for each singleton coalition S ⊆ N, i.e., with |S| = 1. Moreover, for an arbitrary coalition S ⊆ N, v(S) > 0 holds if, and only if, S does not cover any penalty edge while covering at least one non-penalty edge. By construction, we hence conclude that v(S) > 0 if, and only if, the following three conditions are satisfied:(C1) r ∈ S, because at least one edge that is not a penalty one must be covered;G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–4629(C2) for each clause ci , with i ∈ {1, . . . , m}, there is at most one literal L in ci such that (cid:7)(L)i ∈ S, because any two such literals define agents that are connected with a penalty edge;(C3) there is no variable X j , with j ∈ {1, . . . , n}, and pair of indices i, iagain because these literals define agents connected with a penalty edge.(cid:10) ∈ {1, . . . , m}, such that (cid:7)( X j)i and (cid:7)(¬ X j)i(cid:10)are in S, Note that if (cid:6)∗is an optimal coalition structure in CS-opt⊥((cid:2)), then we have that val⊥((cid:6)∗) ≥ 0. Now, let (cid:11) ≥ 0 be any real number. Then, we claim: for each ⊥-feasible coalition structure (cid:6) ∈ CS ⊥((cid:2)), val⊥((cid:6)) ≤ (cid:11) ⇔ for each S ⊆ N, v(S) ≤ (cid:11).(⇒) Assume that for each (cid:6) ∈ CS⊥((cid:2)), val⊥((cid:6)) ≤ (cid:11). By contradiction, let S∗ ⊆ N be a coalition with v(Sincluding Sand a singleton coalition for each agent not in S∗∗) > (cid:11). Consider ∗. Then, then the ⊥-feasible coalition structure (cid:6)∗∗) > (cid:11), which is impossible.val⊥((cid:6)∗) = v(S(⇐) Assume that for each S ⊆ N, v(S) ≤ (cid:11). By condition (C1), for any two coalitions S 1 and S2, v(S1) > 0 and v(S2) > 0is a coalition structure in CS ⊥((cid:2)), then val⊥((cid:6)∗) ≤ maxS⊆N v(S) ≤ (cid:11)hold if, and only if, S1 ∩ S2 ⊇ {r}. Therefore, if (cid:6)∗holds.Because of the above result, the value of an optimal coalition structure precisely coincides with the maximum value associated to any coalition. That is,max(cid:6)∈CS⊥((cid:2))val⊥((cid:6)) = maxS⊆Nv(S).(3)To any coalition S with v(S) > 0, we now associate a (possibly partial) truth assignment τS such that X j evaluates to true (resp., false) in τS if (cid:7)( X j)i (resp., (cid:7)(¬ X j)i ) occurs in S, for some i ∈ {1, . . . , m}. Because of the condition (C3) above, τS is well-defined. Moreover, by conditions (C1) and (C2), we have that v(S) coincides with the weight associated to the assignment τS .As an example, by considering the coalition S = {(cid:7)( X 12), r} in the setting of Fig. 4 for the formula ˆ(cid:9), we get 1), (cid:7)(¬ X 2that the corresponding assignment τS is undefined on X3 and X4, while X1 evaluates to true and X2 evaluates false in it. Note that S is in fact a coalition getting the maximum overall value, and τS is a truth assignment having maximum weight (in fact, it is a satisfying assignment). This is not by chance. Indeed, the following result can be established: S is such that v(S) ≥ v( ¯S), for each ¯S ⊆ N ⇔ τS is a truth assignment having maximum weight.(⇒) Assume, by contradiction, that τ (cid:10). Note that the weight of τS(cid:10) coincides with the weight of τ (cid:10)is a truth assignment with better weight than τS . Define Sas the coalition including , there is precisely one agent (cid:7)(L)i such that L is a literal in ci evaluating (cid:10)) coincides with the weight itself. Thus, v(Sr, and where, for each clause ci satisfied by τ (cid:10)to true in τ (cid:10)of τ (cid:10), and we have v(S(cid:10)(cid:10)) > v(S), then we would have that τS(cid:10) has a better weight than τS . (cid:10)) > v(S), which is impossible.is a coalition such that v(S(cid:10)(⇐) By contradiction, if SAgain, this is impossible.The above result together with Equation (3) entails that the value of an optimal coalition structure (cid:6)∗ ∈ CS-opt⊥((cid:2))2 -hardness is eventually established coincides with the maximum possible weight associated with any assignment. The F(cid:2)Pbecause the reduction is feasible in polynomial time. (cid:3)3.2. Structural restrictions: basic resultsIn the light of the above intractability result, it is sensible to single out classes of functions and valuation structures over which CSGval and CSG can be efficiently solved. A natural approach to identify such classes is to focus on interaction graphs enjoying suitable structural properties. In fact, a basic structural property of a graph is acyclicity, and we next consider the more general concept of bounded treewidth [61].A tree decomposition of a graph G = (N, E) is a pair (cid:3)T , χ (cid:4), where T = (V , F ) is a tree, and χ is a labeling function assigning to each vertex p ∈ V a set of vertices χ (p) ⊆ N, such that the following conditions are satisfied:(1) for each node b of G, there exists p ∈ V such that b ∈ χ (p);(2) for each edge {b, d} ∈ E, there exists p ∈ V such that {b, d} ⊆ χ (p); and,(3) for each node b of G, the set {p ∈ V | b ∈ χ (p)} induces a connected subtree of T .The width of (cid:3)T , χ (cid:4) is the number maxp∈V (|χ (p)| − 1). The treewidth of G, denoted by t w(G), is the minimum width over all its tree decompositions. A graph G is acyclic if and only if t w(G) = 1. Deciding if a given graph has treewidth bounded by a fixed natural number k is known to be feasible in linear time [11].Example 3.3. Consider the graph ˙G = ( ˙N, ˙E) shown in Fig. 5(a), and note that it contains a cycle over the nodes/agents in {a1, a2, a3}. In Fig. 5(b), a tree decomposition of ˙G is reported whose width is 2. (cid:2)30G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–46Fig. 5. Illustration of Example 3.3: An interaction graph and a tree decomposition having width 2.By focusing on acyclic and, more generally, on nearly-acyclic interaction graphs we can significantly constraint the coali-tions that are allowed to form. However, this is not yet sufficient to end up with an island of tractability.Theorem 3.4. CSGval is F(cid:2)P2 -hard, even on structures (cid:3)G(cid:4) such that G is acyclic.(cid:10)(S(cid:10)) = v(S(cid:10) \ {a|N|+1}), for each S(cid:10)(cid:4) where a|N|+1 is a fresh agent not in N and where vProof. Let (cid:2) = (cid:3)N, v(cid:4) be a coalitional game such that v(S) = 0 holds, for each S ⊆ N with |S| = 1. Based on (cid:2), we build a coalitional game (cid:2)(cid:10) = (cid:3)N ∪ {a|N|+1}, v(cid:10)is the valuation function (cid:10)({a|N|+1}) = 0. Moreover, we build the interaction graph such that v(cid:10) = (N ∪ {a|N|+1}, EGNote that F(cid:3)G(cid:10)(cid:4)((cid:2)(cid:10)) consists of all the singleton coalitions plus all coalitions having the form S ∪ {a|N|+1}, for each S ⊆ N. including a|N|+1, (cid:10)+ \ {a|N|+1}). in CS(cid:3)G(cid:10)(cid:4)((cid:2)(cid:10)) has the form {C− is a set of singleton coalitions. Therefore, it holds that val(cid:3)G(cid:10)(cid:4)((cid:6)(cid:10)) = val(cid:3)G(cid:10)(cid:4)(CMoreover, any coalition structure (cid:6)(cid:10)and where (cid:6)(cid:10)In particular, by the properties of the valuation function v and by the construction of v+ is the coalition in (cid:6)(cid:10)(cid:10)(cid:10)+) = v(cid:10)(C(cid:10)+) = v(C, the following holds:(cid:10) = {{a|N|+1, ai} | ai ∈ N}.(cid:10) ⊆ N ∪ {a|N|+1}, and v(cid:10)) where E−, where C+} ∪ (cid:6)(cid:10)(cid:10)(cid:10)max(cid:6)(cid:10)∈CS(cid:3)G(cid:10)(cid:4)((cid:2)(cid:10))(cid:10)val(cid:3)G(cid:10)(cid:4)((cid:6)) = maxS⊆Nv(S).(4)In words, the computation of the value maxS⊆N v(S) is reduced to the computation of the value associated with (cid:10)(cid:4)-optimal coalition structures in (cid:2)(cid:10)(cid:3)G. Now, recall the proof of Theorem 3.2, by observing that the game built there based on the Boolean formula (cid:9) precisely satisfies the conditions for our game (cid:2). Then, by Equation (4), the maximum value attained by any coalition in the game associated with (cid:9) can be computed by solving CSGval on input ((cid:2)(cid:10), (cid:3)G(cid:10)(cid:4)). In fact, we already know that computing such maximum value is F(cid:2)P2 -hard (cf. Equation (3) in the proof of Theorem 3.2), so that the F(cid:2)P2 -hardness of CSGval immediately follows. (cid:3)Intuitively, the hardness result can emerge because, over an acyclic interaction graph, we might still construct a “hard” valuation function where interactions are not properly taken into account. Indeed, we have already noticed that functions independent of disconnected members have been introduced in the literature precisely as classes of functions that adhere to the semantics of interaction graphs. However, it can be checked that the valuation function in the above proof does not satisfy this property. In fact, by applying the notion of treewidth over IDM valuation functions, the following tractability result—suitably restated within our setting and notation—was shown by [69] for the basic CSG problem (i.e., without taking into account valuation structures).Theorem 3.5 (cf. [69]). Let h ≥ 0 be a fixed natural number. Let R be any representation for coalitional games, and let (cid:2) = (cid:3)N, v(cid:4) ∈C(R) be a game such that v is a valuation function independent of disconnected members w.r.t. a graph G with t w(G) ≤ h. Then, CSGcan be solved on (cid:2) in polynomial times (w.r.t. (cid:21)ξ R((cid:2))(cid:21) and (cid:21)G(cid:21)).Note that the result trivializes whenever the size (cid:21)ξ R((cid:2))(cid:21) of the encoding for the valuation function is exponential w.r.t. the number of the agents in N. Instead, interesting cases emerge for “succinct” encodings, such as for the graph game representation (for which tractability has been also independently derived by [4]). Moreover, note that by combining Theorem 3.5 with Theorem 2.5, we can obtain the following tractability result for valuation structures based on interaction graphs only.Corollary 3.6. Let h ≥ 0 be a fixed natural number. Let R be any representation for coalitional games, let (cid:2) = (cid:3)N, v(cid:4) ∈ C(R) be a game such that v is a valuation function independent of disconnected members w.r.t. a graph G with t w(G) ≤ h. Then, CSGval can be solved on ((cid:2), (cid:3)G(cid:4)) in polynomial time (w.r.t. (cid:21)ξ R((cid:2))(cid:21) and (cid:21)G(cid:21)).Proof. By Theorem 3.5, we can compute in polynomial time a solution (cid:6)∗on ((cid:2), (cid:3)K N (cid:4)). Given (cid:6)∗too. (cid:3)to CSG on input (cid:2), i.e., a solution to CSGval, based on Theorem 2.5.(1), a solution to CSGval on ((cid:2), (cid:3)G(cid:4)) can be computed in polynomial time, 4. Islands of tractability for CSGVALOur main technical achievement in the paper is to generalize Corollary 3.6 to arbitrary valuation structures (but still with bounded treewidth interaction graphs). The proof of the result is rather involved and it is based on two technical ingredients that are interesting in their own right:G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–4631(1) First, we show that, over bounded treewidth graphs, any IDM valuation function admits a very simple kind of succinct representation, in terms of the well-known encoding based on marginal contribution networks [43]. Moreover, no matter of the representation scheme originally adopted for the valuation function, an equivalent marginal contribution network can be computed in polynomial time.(2) Second, we exhibit a polynomial-time algorithm solving CSGval over marginal contribution networks whose underlying interaction graphs have bounded treewidth. The algorithm is defined by means of a non-trivial encoding in terms of a constraint satisfaction problem, and by exploiting known structural tractability results in this latter setting.The two ingredients are elaborated in Section 4.1 and Section 4.2, respectively.4.1. Marginal contribution networks and IDM functionsA representation for coalitional games that received considerable attention in the last few years is based on marginal contribution networks [43].A marginal contribution network (short: MC-net) M consists in a set of rules involving a number of Boolean variables that represent the agents. Each rule has the form {pattern} → value, where pattern is a conjunction that may include both positive and negative literals, and value is the additive contribution associated with this pattern. A rule applies to a set C of agents if all the agents whose literals occur positively in the pattern belong to C , and all the players whose literals occur negatively in the pattern do not belong to C . In the following, we denote by mcn the representation for coalitional games such that for each (cid:2) = (cid:3)N, v(cid:4) ∈ C(mcn), ξ mcn((cid:2)) is a marginal contribution network8 and where, for each coalition C , v mcn(ξ mcn((cid:2)), C) is given by the sum of the values of all rules that apply to C . If no rule applies, then the value for the coalition is set to zero, by default.Example 4.1. Consider a coalitional game ˙(cid:2) = (cid:3) ˙N, ˙v(cid:4), where ˙N = {a1, . . . , a5} and where ˙v is such that: ˙v({ai}) = 0, for each i ∈ {1, . . . , 5}; ˙v({a1, a2}) = ˙v({a2, a3}) = ˙v({a1, a3}) = 2; ˙v({a1, a2, a3}) = 5; and ˙v(C ∪ {a4}) = ˙v(C ∪ {a5}) = ˙v(C ∪ {a4, a5}) =˙v(C), for each C ⊆ {a1, a2, a3}. An encoding for this game in terms of a marginal contribution network is given by the following set of rules:{a1 ∧ a2 ∧ ¬a3} → 2{¬a1 ∧ a2 ∧ a3} → 2{a1 ∧ ¬a2 ∧ a3} → 2{a1 ∧ a2 ∧ a3} → 5{a3 ∧ a5} → 0{a2 ∧ a4} → 0For instance, ˙v({a1, a2, a4}) = 2 derives as the first rule and the last rule apply. (cid:2)In order to model the interactions among the agents in marginal contribution network M, we define a graph AG(M), called the agent graph of M [43], whose nodes are the agents of the game, and where, for each rule {pattern} → valueoccurring in M, every pair of agents (nodes) occurring in pattern are connected by an edge in AG(M).For instance, it can be checked that the agent graph associated with the marginal contribution network of Example 4.1is the one illustrated in Fig. 5(a).Our first result is that any function encoded via a marginal contribution network is independent of disconnected mem-bers w.r.t. its associated agent graph.Theorem 4.2. Let (cid:2) = (cid:3)N, v(cid:4) be a game in C(mcn). Then, v is independent of disconnected members w.r.t. AG(ξ mcn((cid:2))).Proof. Let ai and a j be two agents in N that are not connected in the graph AG(ξ mcn((cid:2))) and let C be a coalition with ai, a j /∈ C . We have to show that v(C ∪ {ai}) − v(C) = v(C ∪ {ai, a j}) − v(C ∪ {a j}).Let R i be the set of all rules that apply to C ∪ {ai} and that do not apply to C . Note that the agent ai must positively occur in each rule in R i . Moreover, note that v(C ∪ {ai}) − v(C) precisely coincides with the sum of the values associated with the rules in R i . Then, let R i, j be the set of all rules that apply to C ∪ {ai, a j} and that do not apply to C ∪ {a j}, by noticing similarly that v(C ∪ {ai, a j}) − v(C ∪ {a j}) coincides with the sum of the values for them. Moreover, the agent aimust positively occur in any rule taken from R i, j . Based on the above properties, we can now show that R i = R i, j . Indeed, consider a rule r where agent ai positively occurs. Since ai and a j are not connected in AG(ξ mcn((cid:2))), we conclude that rdoes not contain a j . Hence, r is in R i if, and only if, r is in R i, j . (cid:3)8 We consider a standard encoding for a marginal contribution network, where all its rules are explicitly listed. Moreover, in order to guarantee that (cid:21)ξ mcn((cid:2))(cid:21) ≥ |N| holds, we assume w.l.o.g. that each agent occurs at least in one rule. Indeed, for each agent ai ∈ N, we can add the rule {ai } → 0 without altering any of the properties of the network.32G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–46We now show that the converse of the above result holds, too. Indeed, we show that, when considering IDM func-tions, we can focus w.l.o.g. on games encoded via marginal contribution networks. In particular, note that the marginal contribution network can be built in polynomial time whenever classes of bounded treewidth graphs are considered.Theorem 4.3. Let R be any representation for coalitional games, and let (cid:2) = (cid:3)N, v(cid:4) ∈ C(R) be a game such that v is a valuation function independent of disconnected members w.r.t. a graph G with t w(G) = h. Then, a marginal contribution network M (without negative literals) can be built in time polynomial w.r.t. (cid:21)ξ R((cid:2))(cid:21) and exponential w.r.t. h, such that AG(M) = G and v mcn(ξ R((cid:2)), C) =v mcn(M, C), for each C ⊆ N.Proof. We have to build an encoding for the game (cid:2) = (cid:3)N, v(cid:4) in terms of a marginal contribution network M. Let C ⊆ Nbe a coalition, and let G C denote the subgraph of G induced over the nodes in C . Throughout the proof, we shall say that the coalition C is (cid:7)-sparse if the number of nodes in C having less than |C| − 1 adjacent nodes in G C is (cid:7). Note that if C is 0-sparse, then G C is actually a clique over the nodes in C .The construction focuses precisely on 0-sparse coalitions (while arbitrary (cid:7)-sparse coalitions will play a role in the } → valueC , such that patternC is the (cid:10)). No further rule is in M. An example proof). Indeed, for each 0-sparse coalition C ⊆ N, we include in M a rule rC : {patternCconjunction containing all the agents in C and where: valueC = v(C) −construction is illustrated below.C (cid:10)⊂C v(C(cid:2)Example 4.4. Consider again the coalitional game ˙(cid:2) discussed in Example 4.1 and the interaction graph depicted in Fig. 5(a). The 0-sparse coalitions in this setting are the following ones: {a1}, . . . , {a5}, {a1, a2}, {a2, a3}, {a1, a3}, {a2, a4}, {a3, a5}, and {a1, a2, a3}. Then, the marginal contribution network consists of the following rules:{ai} → ˙v({ai}) = 0, ∀i ∈ {1, . . . , 5}{a1 ∧ a2} → ˙v({a1, a2}) − ˙v({a1}) − ˙v({a2}) = 2 − 0 − 0 = 2{a2 ∧ a3} → ˙v({a2, a3}) − ˙v({a2}) − ˙v({a3}) = 2 − 0 − 0 = 2{a1 ∧ a3} → ˙v({a1, a3}) − ˙v({a1}) − ˙v({a3}) = 2 − 0 − 0 = 2{a2 ∧ a4} → ˙v({a2, a4}) − ˙v({a2}) − ˙v({a4}) = 0 − 0 − 0 = 0{a3 ∧ a5} → ˙v({a3, a5}) − ˙v({a3}) − ˙v({a5}) = 0 − 0 − 0 = 0(cid:2){a1 ∧ a2 ∧ a3} → ˙v({a1, a2, a3}) −C (cid:10)⊂{a1,a2,a3} ˙v(C(cid:10)) = 5 − 6 = −1Note that the encoding differs from the one discussed in Example 4.1. In particular, now there is no rule containing negated agents. (cid:2)We start the proof by pointing out the following two properties of the construction:(cid:10)|C• Assume that t w(G) = h. If C is a 0-sparse coalition, then C ≤ h + 1 necessarily holds, by well-known results on tree (cid:10) ⊆ C}| ≤ 2h+1. Therefore, valueC can be built in polynomial time w.r.t. (cid:21)ξ R((cid:2))(cid:21)decompositions. This means that |{C(and exponential w.r.t. h). Moreover, observe that the number of 0-sparse coalitions (hence cliques with h + 1 nodes at most in G) is polynomial w.r.t. the number of the nodes of the graph, and thus w.r.t. (cid:21)ξ R((cid:2))(cid:21) (again, still exponential w.r.t. h). Hence, the overall number of rules in M is still polynomial, and we conclude that M can be actually built in polynomial time.• Each edge e in the graph G is actually a 0-sparse coalition. Therefore, there is a rule re in M and the two agents in eare connected in AG(M), too. On the other hand, if rC is a rule in M (so that the agents in C form a clique in the graph AG(M)), then we have that C is a 0-sparse coalition and hence all the agents in C already form a clique in G. We can thus conclude that AG(M) = G holds.After these properties, it remains to be proven that the encoding is correct, that is, v mcn(M, C) = v(C), for each C ⊆ N. The result will be proven by structural induction on the “sparseness” of the given coalition C .Base Case: In the base case, we have to show that the encoding is correct, for each 0-sparse coalition C ⊆ N. In fact, even this case is not immediate, and it is proven by another structural induction, this time on the size of the coalition C .Base Case: Assume that C is a 0-sparse coalition with |C| = 1. Then, only the rule rC can apply to C , and hence we get by construction that v mcn(M, C) = valueC = v(C).(cid:10)) = v(CInduction Step: Let p > 0 be a natural number, and assume that for each 0-sparse coalition C(cid:10)| ≤ p, (cid:10)) holds. Let C be a 0-sparse coalition with |C| = p + 1. By the definition of the valuation func-C (cid:10)⊂C valueC(cid:10) , (cid:10) ⊂ C apply to C , too (recall that there is no negated agent in (cid:10)| ≤ p. Therefore, we can ap-(cid:2)(cid:10)). Eventually, recall that v mcn(M, Ction associated with a marginal contribution network, we get v mcn(M, C) =because all rules that apply to any subset Cthese rules). Note also that, for each Cply the inductive hypothesis in order to conclude that v mcn(M, C) = valueC +valueC = v(C) −(cid:10)) = v(C) and we get that v mcn(M, C) = v(C).(cid:10) ⊆ N with |C(cid:2)C (cid:10)⊆C valueC(cid:10) = valueC +(cid:10) ⊂ C , we have that Cis 0-sparse and |C(cid:10)). So, valueC +C (cid:10)⊂C v(C(cid:2)(cid:2)(cid:2)(cid:10)C (cid:10)⊂C v(CC (cid:10)⊂C v(CG. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–4633Induction Step: Assume now that for each (cid:7)-sparse coalition C((cid:7) + 1) sparse coalition C ⊆ N, v mcn(M, C) = v(C). Again, we used a nested induction on the size of C .(cid:10) ⊆ N, v mcn(M, C(cid:10)) = v(C(cid:10)). We will show that, for each Base Case: Assume that C is a ((cid:7) + 1)-sparse coalition with |C| = (cid:7) + 1, with (cid:7) ≥ 0. Then, there are two agents/nodes a1 and a2 in C that are not connected by means of an edge in G. Consider the coalitions C1 = C \ {a1}, C2 = C \ {a2}, and C3 = C1 ∩ C2. It is immediately seen that |C1| = (cid:7), |C2| = (cid:7), |C3| ≤ (cid:7), and that Ci , for each i ∈ {1, 2, 3}, is (trivially) si -sparse for some si ≤ (cid:7). Hence, v mcn(M, Ci) = v(Ci), for each i ∈ {1, 2, 3}, holds by the inductive hypothesis, and we derive:v mcn(M, C) =(cid:2)(cid:2)(cid:2)valueC(cid:10) −valueC(cid:10) +C (cid:10)⊆C1C (cid:10)⊆C2C (cid:10)⊆C3= v mcn(M, C1) + v mcn(M, C2) − v mcn(M, C3)= v(C1) + v(C2) − v(C3)= v({a1} ∪ C3) + v({a2} ∪ C3) − v(C3).valueC(cid:10)Since C = {a1, a2} ∪ C3 and since v is independent of disconnected members w.r.t. G, we conclude, by Equation (1)in Section 2.1, that v({a1} ∪ C3) + v({a2} ∪ C3) − v(C3) = v(C). Hence, v mcn(M, C) = v(C).(cid:10)(cid:10)) = v(CInduction Step: Let p ≥ (cid:7) + 1 be a natural number, and assume that for each ((cid:7) + 1)-sparse coalition C(cid:10)(cid:10)| ≤ p, (cid:10)(cid:10)) holds. Let C be a ((cid:7) + 1)-sparse coalition, with |C| = p + 1, and let {a1, . . . , a(cid:7)+1} be the v mcn(M, Cset of the (cid:7) + 1 nodes in C having less than |C| − 1 adjacent nodes in G C . Consider the coalitions: C1 consisting of a1 plus all the nodes that are adjacent to it in G C ; C2 = C \ {a1}, and C3 = C1 ∩ C2. Note that C1 \ C2 = {a1}holds. Moreover, for each i ∈ {1, 2, 3}, |Ci| ≤ p and Ci is (trivially) a si -sparse coalition for some si ≤ p. Hence, the inductive hypothesis can be applied on C1, C2, and C3, by deriving that v mcn(M, Ci) = v(Ci), for each i ∈ {1, 2, 3}. Eventually, we derive:(cid:10)(cid:10) ⊆ N, with |Cv mcn(M, C) =(cid:2)(cid:2)valueC(cid:10) +(cid:2)valueSy(cid:10) −C (cid:10)⊆C1C (cid:10)⊆C2= v mcn(M, C1) + v mcn(M, C2) − v mcn(M, C1 ∩ C2)= v(C1) + v(C2) − v(C3).C (cid:10)⊆C3valueC(cid:10)Now, we observe that there is no edge connecting a1 (the only element of C1 \ C2) with a node in C2 \ C1. Therefore, we can apply Equation (2) in Section 2.1 and conclude that v(C1) + v(C2) − v(C1 ∩ C2) = v(C1 ∪ C2), where C1 ∩ C2 = C3 and C1 ∪ C2 = C . It follows that v mcn(M, C) = v(C). (cid:3)For any fixed constant h > 0, we shall denote by CTW-h(mcn) the restriction of the class C(mcn) to all those marginal contribution networks whose associated agent graphs have treewidth h at most. According to the above results, CTW-h(mcn)is representative of all coalitional games based on IDM valuation functions (w.r.t. interactions graphs having treewidth bounded by h). Moreover, observe that we can further assume that CTW-h(mcn) contains only networks with rules that do not involve negative literals. Indeed, the following is easily established.Corollary 4.5. Let (cid:2) = (cid:3)N, v(cid:4) ∈ C(mcn) be a game such that t w(AG(ξ mcn((cid:2)))) ≤ h. Then, a marginal contribution network Mcontaining no rule with a negated literal can be built in time polynomial w.r.t. (cid:21)ξ mcn((cid:2))(cid:21) and exponential w.r.t. h, such that AG(M) = AG(ξ mcn((cid:2))) and v mcn(M, C) = v mcn(ξ mcn((cid:2)), C), for each C ⊆ N.Proof. By Theorem 4.2, v is independent of disconnected members w.r.t. AG(ξ mcn((cid:2))). So, the result follows from Theo-rem 4.3 applied on (cid:2) and the graph AG(ξ mcn((cid:2))). (cid:3)4.2. Coalition structure generation over marginal contribution networksThe second technical ingredient we exhibit is a method to efficiently solve CSGval over the class CTW-h(mcn). The analysis is carried out by encoding CSGval in terms of a (weighted) constraint satisfaction problem (short: CSP), and by showing that CSP instances associated with games in CTW-h(mcn) can be solved in polynomial time.Before embarking on this analysis, it is useful to recall, e.g., from [36] that the CSP-encoding approach is a powerful method that has already been exploited to show tractability results in a number of different areas of research. However, the issues that arise in the context of coalition structure generation under valuation structures have been not considered in earlier approaches, and the specific encoding algorithm is substantially more involved than those already available in the literature. In particular, a distinguishing feature of our proposal is the ability of handling “connectivity constraints” (induced by the underlying interactions graphs). This feature might turn out to be useful in different domains whenever a graph structure is given and solutions are required to “induce”, according to some specific semantics, some connected substructure.34G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–464.2.1. Constraint satisfaction problemsWe start with some preliminaries on constraint satisfaction. The reader interested in expanding on this formalism is referred to [23].A constraint satisfaction problem instance is a triple I = (cid:3)Var, U , C(cid:4), where Var is a finite set of variables, U is a finite domain of values, and C = {C1, C2, . . . , Cq} is a finite set of constraints. Each constraint C v , for 1 ≤ v ≤ q, is a pair (S v , rv ), where S v ⊆ Var is a set of variables called the constraint scope, and rv is a set of substitutions from variables in S v to values in U indicating the allowed combinations of simultaneous values for the variables in S v , called tuples. A substitution from a set of variables V ⊆ Var to U is extensively denoted as the set of pairs of the form X/u, where u ∈ U is the value to which X ∈ V is mapped. A substitution θ satisfies a constraint C v if its restriction to S v , i.e., the set of all pairs X/u ∈ θ such that X ∈ S v , occurs as a tuple in rv . A solution to I is a substitution θ : Var (cid:13)→ U for which q tuples t1 ∈ r1, . . . , tq ∈ rq exist such that θ = t1 ∪ · · · ∪ tq. Thus, a solution satisfies all the constraints in I.Encoding. Let (cid:2) = (cid:3)N, v(cid:4) ∈ CTW-h(mcn), with N = {a1, . . . , an}, be a coalitional game and let σ = (cid:3)G, S, α, β, x, y(cid:4) be an associated valuation structure where G = AG(ξ mcn((cid:2))). That is, interactions are constrained by the underlying agent graph (cf. Theorem 4.3). The CSP instance associated with (cid:2) and σ , denoted by CSP((cid:2), σ ) = (cid:3)Var, U , C(cid:4), is defined as follows:• Variables are transparently viewed as the agents in N, that is, Var = N.• The domain U contains an element of the form (cid:3)from j, origin(cid:7), levelh(cid:4) for each triple of indices j, (cid:7), h ∈ {1, . . . , n}. More-over, U contains an element of the form (cid:3)origin(cid:7), level0(cid:4) for each index (cid:7) ∈ {1, . . . , n}. No further constant is in U .• The set C consists of the following three kinds of constraints.(C1) For each rule γ : {pattern} → value in the encoding ξ mcn((cid:2)), C contains the constraint Cγ = (Sγ , rγ ) such that Sγ = {ai | ai occurs in pattern} and where rγ contains all possible substitutions from Sγ to U . Note that these constraints are immaterial, and they will play a role only when equipped with a weighing function as we shall discuss later.(C2) For each agent ai ∈ N, C contains the constraint Ci = ({ai}, ri) such that:1. If ai is not a pivotal agent, i.e., ai /∈ S, then for each agent a j connected with an edge to ai in AG(ξ mcn((cid:2))), and for each pair of indices (cid:7), h ∈ {1, . . . , n}, the substitution {ai/(cid:3)from j, origin(cid:7), levelh(cid:4)} is in ri .2. The substitution {ai/(cid:3)origini, level0(cid:4)} is in ri , and no further substitution occurs in it. Thus, {ai/(cid:3)origini, level0(cid:4)}is the only available substitution whenever ai is a pivotal agent.(C3) For each pair of agents ai and a j connected with an edge in AG(ξ mcn((cid:2))), C contains the constraint Ci, j =({ai, a j}, ri, j) defined as follows:1. For each u ∈ U , the substitution {ai/(cid:3)origini, level0(cid:4), a j/u} is in ri, j .2. For each u ∈ U , for each a j(cid:10)(cid:3)from j(cid:10) , origin(cid:7), levelh(cid:4), a j/u} is in ri, j .(cid:16)= a j connected to ai , and for each (cid:7), h ∈ {1, . . . , n}, the substitution {ai/3. For each agent ak (cid:16)= ai connected to a j , for each (cid:7), h ∈ {1, . . . , n}, the substitution {ai/(cid:3)from j, origin(cid:7), levelh+1(cid:4),a j/(cid:3)fromk, origin(cid:7), levelh(cid:4)} is in ri, j .4. The substitution {ai/(cid:3)from j, origin j, level1(cid:4), a j/(cid:3)origin j, level0(cid:4)} is in ri, j , and no further substitution is in ri, j .Intuitively, elements in U are used to encode a number of spanning trees (of some underlying coalitions) defined over the interaction graph. In particular, the element (cid:3)origin(cid:7), level0(cid:4) can be assigned to the variable a(cid:7) only, with the intended meaning that a(cid:7) is the root of a spanning tree. Instead, if a node ai is mapped to the constant (cid:3)from j, origin(cid:7), levelh(cid:4), then we intend that ai belongs to a spanning tree rooted at node a(cid:7), that a j is the father of ai in this tree, and that ai occurs at the level h of the tree (with level 0 being the root). More than one node can be defined as a root node, so that more than one spanning tree can be actually induced by a solution. However, we require that each pivotal agent is necessarily the root of a spanning tree, hence preventing that it occurs in the same tree (hence, component) associated with another pivotal agent.Example 4.6. Consider again the coalitional game ˙(cid:2) and the encoding in terms of a marginal contribution network, say ˙M, defined in Example 4.4. Consider the valuation structure ˙σ = (cid:3)AG( ˙M), {a3, a5}, 1, 0, 0, −∞(cid:4), where a3 and a5 are pivotal agents.A solution to the CSP associated with ˙(cid:2) and ˙σ is given by the following substitution:˙θ = { a5/(cid:3)origin5, level0(cid:4),a3/(cid:3)origin3, level0(cid:4),a2/(cid:3)from3, origin3, level1(cid:4),a1/(cid:3)from3, origin3, level1(cid:4),a4/(cid:3)from2, origin3, level2(cid:4)}.The reader can check that constraints of kind (C2) and (C3) are satisfied by ˙θ . Moreover, the reader can observe in Fig. 6that the CSP solution induces a ˙σ -feasible coalition structure, where a3 and a5 belong to different coalitions (and spanningtrees). (cid:2)G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–4635Fig. 6. Illustration of Example 4.6.The crucial properties of the above correspondence from games to CSP instances are formalized below. Hereinafter, for any substitution θ from (any subset of) Var to U , and for any index i ∈ {1, . . . , n}, we denote by θi the set of all agents that are mapped via θ to a tuple containing the term ‘origini ’. Moreover, we denote by (cid:6)θ the coalition structure including precisely the coalition θi , for each i ∈ {1, . . . , n} such that θi (cid:16)= ∅.For instance, in Example 4.6, we have that ˙θ1 = ˙θ2 = ˙θ4 = ∅, ˙θ3 = {a3, a2, a1, a4}, and ˙θ5 = {a5}. Note that (cid:6) ˙θ= { ˙θ3, ˙θ5} is a ˙σ -feasible coalition structure.Lemma 4.7. For each σ -feasible coalition structure (cid:6) in CSσ ((cid:2)), there is a solution θ to CSP((cid:2), σ ) such that (cid:6) = (cid:6)θ .Proof. Let (cid:6) be a σ -feasible coalition structure in CSσ ((cid:2)), and consider a substitution θ built as follows. For each coalition C in (cid:6), observe that the subgraph G C of AG(ξ mcn((cid:2))) induced over the nodes of C is connected. Let T C be a spanning tree of G C and let us root it at a node a(cid:7) ∈ C . In particular, if C contains a pivotal agent, then a(cid:7) is precisely this (univocally determined) agent. Otherwise, a(cid:7) is any arbitrary node in C . Then, the restriction of θ over the variables in C is built as follows. For the agent a(cid:7), we set θ(a(cid:7)) = (cid:3)origin(cid:7), level0(cid:4). Moreover, for each agent ai ∈ C \ {a(cid:7)}, let a j be the parent of ai , and let h be the number of edges occurring in the path connecting a j and a(cid:7) in T C . Then, we set θ(ai) = (cid:3)from j, origin(cid:7), levelh+1(cid:4). Note that if the parent of ai is a(cid:7), then we have that θ(ai) = (cid:3)from(cid:7), origin(cid:7), level1(cid:4). Otherwise, i.e., if a j (cid:16)= a(cid:7), then we have that h > 0. Eventually, since the coalitions in (cid:6) are disjoint and they cover all the agents/variables in N, by iterating the above construction over all such coalitions, we get that the substitution θ is well defined, i.e., it maps each variable to a constant in U . In particular, by construction, (cid:6) = (cid:6)θ .In order to conclude the proof, we claim that, for each coalition C ∈ (cid:6), θ satisfies all the constraints where a variable in C occurs. Note that constraints of kind (C1) are trivially satisfied by any substitution. Thus, we have just to focus on the constraints of kind (C2) and (C3). Let ai be a node in C , let a(cid:7) be the root node of T C and consider the following constraints:(C2) Observe that θ(ai) is either the tuple (cid:3)origini, level0(cid:4) with i = (cid:7), or a tuple having the form (cid:3)from j, origin(cid:7), levelh(cid:4), for an index j such that a j is connected to ai , and where h ∈ {1, . . . , n}. In particular, whenever ai is a pivotal agent, then we are guaranteed that i = (cid:7) holds, by construction. It follows that θ satisfies the constraint Ci = ({ai}, ri).(C3) Consider now a constraint of the form Ci, j , and let us distinguish the following cases (corresponding to the items in the definition of the elements in ri, j ).1. If θ(ai) = (cid:3)origini, level0(cid:4) (so that i = (cid:7) holds), then Ci, j is satisfied no matter of the value of θ(a j);(cid:10) (cid:16)= j, then Ci, j is trivially satisfied;2. If θ(ai) = (cid:3)from j(cid:10) , origin(cid:7), levelh(cid:4) with j3. If θ(ai) = (cid:3)from j, origin(cid:7), levelh+1(cid:4) with h ∈ {1, . . . , n}, then by construction we are guaranteed that a j is the parent of ai in the spanning tree T C and that a j (cid:16)= a(cid:7). Therefore, θ(a j) has the form (cid:3)fromk, origin(cid:7), levelh(cid:4) where ak is the parent of a j in T . It follows that θ satisfies Ci, j ;4. Finally, if θ(ai) = (cid:3)from j, origin(cid:7), level1(cid:4), then we have to recall that (cid:7) = j actually holds. Therefore, θ(ai) =(cid:3)from(cid:7), origin(cid:7), level1(cid:4) and, by construction, θ(a j) = θ(a(cid:7)) = (cid:3)origin(cid:7), level0(cid:4). So, θ satisfies Ci, j .Given that all constraints are satisfied by θ , we conclude that θ is a solution. (cid:3)Lemma 4.8. For each solution θ to CSP((cid:2), σ ), (cid:6)θ is a σ -feasible coalition structure in CSσ ((cid:2)).Proof. Let θ be a solution and consider the set (cid:6)θ . We first show that, for each agent ai ∈ N, there is a coalition C ∈ (cid:6)θsuch that ai ∈ C . Indeed, as θ is solution, θ(ai) is necessarily mapped to a tuple having a term of the form origin(cid:7) for some index (cid:7) ∈ {1, . . . , n}. This means that ai ∈ θ(cid:7) holds and that θ(cid:7) ∈ (cid:6)θ . Moreover, by definition of (cid:6)θ and given the universe (cid:10) (cid:16)= ∅ holds. Therefore, U of the CSP instance, it is immediate to check that for each pair of coalitions C and C(cid:6)θ is a set of disjoint coalitions covering all the agents in N. To complete the proof, we have to show that each coalition Cin (cid:6)θ is a feasible one.in (cid:6)θ , C ∩ C(cid:10)(Connectivity): Let C be a coalition in (cid:6)θ , and assume that a(cid:7) ∈ N is the agent such that C = θ(cid:7). First, note that each node ai in C is mapped via θ to a tuple containing a term of the form levelh, where h ∈ {0, . . . , n}. In the following, we shall say that h is the level of ai , and we prove that the subgraph of (cid:6)θ induced over the nodes in C is connected. 36G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–46In fact, we claim that for each node ai in C whose level is h + 1 with h ≥ 0, ai is connected to a node a j in C whose level is h. To prove the claim, observe that because of the constraint Ci, j , θ(ai) = (cid:3)from j, origin(cid:7), levelh+1(cid:4) holds, where a j is an agent connected to ai . Therefore, in the base case where j = (cid:7), we have concluded. Otherwise, we are guaranteed that θ(a j) has the form (cid:3)fromk, origin(cid:7), levelh(cid:4), hence a j is a node in C and its level is h. Finally, by a simple argument based on structural induction on the above observation, we can conclude that each node aiwhose level is h + 1 is connected to a(cid:7) by means of a path involving only nodes in C and whose associated levels are lower than h.(Pivotal agents): Let ai and a j be two pivotal agents in S. Because of the constraints of kind (C2), it must be the case that θ(ai) = (cid:3)origini, level0(cid:4) and θ(a j) = (cid:3)origin j, level0(cid:4). Thus, by construction of (cid:6)θ , ai and a j belongs to distinct coalitions in (cid:6)θ .Given that the above two properties hold, we conclude that (cid:6)θ is σ -feasible. (cid:3)4.2.2. Weighted CSPsThe next ingredient we need is to equip CSP instances with weights as to properly encode the goal of maximizing the σ -value. Note that this is not immediate in our setting, because the original valuation function v is mapped, by the affine transformation provided by the valuation structure σ , into a novel function valσ that do not preserve the properties of v. In particular, even if v is an IDM function, this is not necessarily the case for valσ and, hence, the results derived in the previous section would not apply on it. For this reason, we are forced to work on the original valuation function v, and to deal with the affine transformation with a more sophisticated encoding.Before detailing the encoding, we recall that a weighted CSP (short: WCSP) instance consists of a tuple (cid:3)I, wr1 , . . . , wrq(cid:4), where I = (cid:3)Var, U , C(cid:4) with C = {C1, C2, . . . , Cq} is a CSP instance, and where, for each tuple t v ∈ rv , wrv (t v ) ∈ R denotes the weight associated with t v . For a solution θ = t1 ∪ · · · ∪ tq to I, we define w(θ) =v=1 wrv (t v ) its associated weight. Then, a solution to (cid:3)I, wr1 , . . . , wrq(cid:4) is a solution9 θ to I such that w(θ) ≥ w(θ (cid:10)), for each solution θ (cid:10)Given the game (cid:2) = (cid:3)N, v(cid:4) ∈ CTW-h(mcn) and σ = (cid:3)G, S, α, β, x, y(cid:4), we define WCSP((cid:2), σ ) as the weighted CSP instance whose underlying CSP instance is CSP((cid:2), σ ) and where each constraint relation rγ of kind (C1), which is in fact associated with the rule γ : {pattern} → value, is equipped with the function wrγ defined as follows.First, we say that a rule γ is active w.r.t. a tuple t ∈ rγ if there is an agent ai ∈ {a1, . . . , an}, called the witness, such that ti (i.e., the set of agents mapped via t to a constant with a term origini ) coincides with the set of the agents occurring in pattern (i.e., with the scope Sγ )—recall from Corollary 4.5 that we are assuming all agents to occur positively in pattern. Then, for each tuple t ∈ rγ ,to I.(cid:2)q• if γ is not active w.r.t. t, then we set wrγ (t) = 0;• otherwise, i.e., if γ is active w.r.t. t and ai is the associated witness (which is, in fact, unique), then we distinguish two cases:– if ai is a pivotal agent in S, then we set wrγ (t) = value × α(ai);– if ai is not a pivotal agent, then we set wrγ (t) = value × x.Concerning constraints of kind (C2), for each constraint relation ri , with ai ∈ N,• we set wri (ai/u) = 0, for each constant u ∈ U \ {(cid:3)origini, level0(cid:4)}};• for the constant (cid:3)origini, level0(cid:4), we distinguish two cases:– if ai is a pivotal agent in S, then we set wri ({ai/(cid:3)origini, level0(cid:4)}) = β(ai);– if ai is not a pivotal agent, then we set wri ({ai/(cid:3)origini, level0(cid:4)}) = y.All other constraint relations of kind (C3) are equipped with the constant function assigning 0 to each substitution, and we hence shall get rid of them.We now show that the proposed weighting scheme leads to equip coalition structures with their associated σ -value.Lemma 4.9. For each solution θ to CSP((cid:2), σ ), w(θ) = valσ ((cid:6)θ ).Proof. Let (cid:6)θ be the coalition structure associated with θ (cf. Lemma 4.7 and Lemma 4.8). In the following, for any set of nodes/variables W , we denote by θ[W ] the restriction of the substitution θ over the elements in W .Let ai be an agent such that θi ∈ (cid:6)θ , and let R i denote the set of rules in ξ mcn((cid:2)) that apply to θi . Then, we first claim that:valσ (θi) =(cid:8)γ ∈R iwrγ (θ[Sγ ]) + wri (θ[S i]).(5)9 Note that one can dually interpret weights as costs and look at minimization problems, rather than maximization ones.G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–4637In order to prove the claim, let us consider the definition of valσ (θi), by distinguishing two cases, depending on whether ai is a pivotal agent:(1) In the case where ai is a pivotal agent, then valσ (θi) = v(θi) × α(ai) + β(ai);(2) otherwise, we have valσ (θi) = v(θi) × x + y.Let us focus on case (1). In this case, we have that θ(ai) = (cid:3)origini, level0(cid:4), and hence wri (θ[S i]) = β(ai) holds, by defi-nition of the weighting function. Moreover, consider any rule γ ∈ R i with γ : {pattern} → value. Let A be the set of agents occurring (positively) in pattern, and consider the tuple t ∈ rγ such that θ ⊇ t (hence, A = Sγ ). Since γ applies to θi , it must be the case that ti = A. Hence, γ is active w.r.t. t and we have that wrγ (θ[Sγ ]) = value × α(ai). Now, recall that the worth of any coalition is just given by the sum of the values associated to the rules that apply to it. Therefore, v(θi ) is the sum of the values of all rules in R i . Hence, (cid:2)Let us focus on case (2). Then, we apply the same line of reasoning as above, by replacing the value α(ai ) (resp., β(ai)), wrγ (θ[Sγ ]) + wri (θ[S i]) = v(θi) × α(ai) + β(ai).(cid:2)wrγ (θ[Sγ ]) + wri (θ[S i]) = v(θi) × x + y.with x (resp., y). Eventually, we derive that γ ∈R iAt this point, we know that Equation (5) is correct. Moreover, we recall that valσ ((cid:6)θ ) is just given by the sum of valσ (θi)γ ∈R iover each coalition θi ∈ (cid:6)θ . That is,valσ ((cid:6)θ ) =wrγ (θ[Sγ ]) +(cid:8)(cid:8)θi ∈(cid:6)θγ ∈R i(cid:8)θi ∈(cid:6)θwri (θ[S i]).On the other hand, if R denotes the set of all the rules, we can write:(cid:8)(cid:8)w(θ) =wrγ (θ[Sγ ]) +wr j (θ[S j]).(6)(7)γ ∈Ra j ∈N(cid:2)In order to conclude the proof, we have to show that the right-hand sides of Equation (6) and Equation (7) coincide. To this end, consider first an agent a j ∈ N such that θ j is not in (cid:6)θ . This means that θ(a j) (cid:16)= (cid:3)origin j, level0(cid:4) and, hence, wr j (θ[S j]) = 0 holds. That is, a j ∈N wr j (θ[S j]).(cid:2)We will now prove that γ ∈R wrγ (θ[Sγ ]). In fact, note that any rule γ that belongs to a set R i cannot belong to a set R j for some agent a j (cid:16)= ai . Therefore, we have just to take care of those rules γ that do not apply to any coalition in (cid:6)θ , and we shall show that wrγ (θ[Sγ ]) = 0 holds for them. Indeed, consider the tuple θ[Sγ ] ∈ rγ , and just note that such rules γ are not active w.r.t. θ[Sγ ]. (cid:3)wri (θ[S i]) =γ ∈R iwrγ (θ[Sγ ]) =θi ∈(cid:6)θθi ∈(cid:6)θ(cid:2)(cid:2)(cid:2)4.2.3. Proof of the main result and extensionsThe structure of a CSP instance I is often represented in the literature by its associated primal graph PG(I) defined over the variables in Var and where two variables are connected with an edge if, and only if, they occur in the same scope of some constraint. While looking at the CSP instance CSP((cid:2), σ ) = (cid:3)Var, U , C(cid:4), it is immediate to check that two variables occur in the same scope of some constraint if, and only if, the associated agents occurs in some rule of the underlying marginal contribution network. Therefore, the graph associated with the constraints coincides with the agent graph underlying (cid:2).Fact 4.10. PG(CSP((cid:2), σ )) = AG(ξ mcn((cid:2))).Moreover, over bounded treewidth instances the construction of WCSP((cid:2), σ ) can be efficiently carried out.Lemma 4.11. Let h ≥ 0 be a fixed natural number. Let (cid:2) = (cid:3)N, v(cid:4) be a game in CTW-h(mcn), and let σ = (cid:3)AG(ξ mcn((cid:2))), S, α, β, x, y(cid:4)be a valuation structure. Then, WCSP((cid:2), σ ) can be built in polynomial time (w.r.t. (cid:21)ξ mcn((cid:2))(cid:21) + (cid:21)σ (cid:21)).Proof. We have to build CSP((cid:2), σ ) = (cid:3)Var, U , C(cid:4). Clearly, Var and U can be build in polynomial time as |N| ≤ (cid:21)ξ c-mcn((cid:2))(cid:21). Constraints of the form (C2) and (C3) can be built in polynomial time, as they are defined over two variables at most. Concerning the constraints of kind (C1), observe that we have one constraint (Sγ , rγ ), for each rule γ : {pattern} → value in and to conclude we just we claim that |Sγ | ≤ h. the encoding, where |Sγ | ≤ |N|. In particular, we observe that |rγ | ≤ nIndeed, if |Sγ | = p > h, then the agent graph AG(ξ mcn((cid:2))) would contain a clique over p > h agents (in Sγ ), and the treewidth of this graph would be at least p, hence greater than h. In order to conclude the proof, we can just notice that the weighting functions can be also built in polynomial time. In particular, we explicitly list the weights in the encoding, with their size being bounded by (cid:21)σ (cid:21).10 (cid:3)|Sγ |By Lemma 4.7, Lemma 4.8, Lemma 4.9, Fact 4.10, Lemma 4.11, Theorem 4.3, and given that solutions to (weighted) con-straint satisfaction are known to be computable in polynomial time on classes of instances whose associated primal graphs 10 This is the standard encoding in the results we shall use about the complexity of WCSPs [40].38G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–46have treewidth bounded by some fixed constant (see, e.g., [23,40,34]), we derive our main result generalizing Corollary 3.6to arbitrary valuation structures.Theorem 4.12. Let h ≥ 0 be a fixed natural number. Let R be any representation for coalitional games, let (cid:2) = (cid:3)N, v(cid:4) ∈ C(R)be a game such that v is a valuation function independent of disconnected members w.r.t. a graph G with t w(G) ≥ h. Let σ =(cid:3)G, S, α, β, x, y(cid:4) be a valuation structure. Then, CSGval can be solved on ((cid:2), σ ) in polynomial time (w.r.t. (cid:21)ξ R((cid:2))(cid:21) and (cid:21)σ (cid:21)).pInterestingly, the flexibility of the CSP encoding allow us to easily generalize the above result to handle the constraints studied by [58] (see Section 1). In order to accommodate the extension, the CSP instance associated with a game (cid:2) =(cid:3)N, v(cid:4) ∈ C(mcn), a valuation structure σ , and sets P and N of positive and negative constraints, respectively, is obtained from the instance CSP((cid:2), σ ) = (cid:3)Var, U , C(cid:4) defined in Section 4.2.1 as follows.First, we define U P as the set obtained from U by replacing the constant origini , for each ai ∈ N, with the markedi , for each positive constraint p ∈ P . We do not modify the set of variables, and we say that a substitution ¯pimplies that p = ¯p. i and θ(a j) = originithe coalition including all agents that are mapped by θ to the i . Eventually, if θ is a substitution with image contained in U P , we denote by unmark(θ) the substitution constants originpθ is consistent if, for each pair of variables a j, ah in its domain, θ(a j) = originMoreover, for each agent ai ∈ N and p ∈ P , we denote by θ piconstant originobtained by stripping off all the markings.Second, we build a set CP of constraints as follows. For each constraint (S, r) ∈ C, the constraint (S, rP ) is in CP , where rP is obtained by including all the possible consistent (marked) tuples that can be built from the tuples in r. Clearly enough, all the properties of CSP((cid:2), σ ) = (cid:3)Var, U , C(cid:4) are preserved with this transformation. In particular, an assignment θis a solution to the resulting CSP instance if, and only if, (cid:6)unmark(θ) is a σ -feasible coalition structure (cf. Lemma 4.7 and Lemma 4.8).pEventually, the following two groups of constraints are added in CP :(C4) For each p ∈ P with p ⊆ N, CP contains the constraint Cp = (p, rp) having the agents in p as scope and whose relation rp contains all the substitutions t such that tfor which no constant in the image is marked with p. Note that since in any solution θ each agent is eventually mapped to a constant in U P with marking, say ¯p, taken from P , then the corresponding constraint C ¯p forces the formation of a coalition θ¯pi covering ¯p. Hence, ¯p witnesses that θi satisfies the positive constraints.= p, for some ai . Moreover, it contains all substitutions t(C5) For each n ∈ N with n ⊆ N, CP contains the constraint Cn = (n, rn) having the agents in n as scope and whose relation rn contains all possible substitutions t from n to U P for which there is no agent ai ∈ N with ti = n. Note that in this case, we do not take care at all of the markings, as none of the formed coalitions can cover a negative constraint.pi(cid:10)By putting it all together, we derive that an assignment θ is a solution to the resulting CSP instance if, and only if, (cid:6)unmark(θ) is a σ -feasible coalition structure (cf. Lemma 4.7 and Lemma 4.8) and moreover each coalition in (cid:6)unmark(θ)covers at least one positive constraint, while there is no coalition in (cid:6)unmark(θ) covering a negative constraint. Eventually, constraints of kind (C4) and (C5) can be equipped with 0 as a weight, while each tuple t in a constraint of the form rP is equipped with the weight associated with the tuple unmark(t) in the original constraint r. Therefore, Lemma 4.9 trivially holds on the modified scenario, too. The only difference is now that the primal graph of the CSP will no longer coincide with the underlying agent graph. Rather, it can be obtained from the agent graph by adding the edges associated with such novel constraints. Hence, we can derive that CSGval, under constraints P and N , can be solved on in polynomial time on valuation functions v that are independent of disconnected members w.r.t. graphs G such that GP,N have treewidth bounded by some fixed natural number. In particular, by GP,N we denote the graph obtained by adding to G an edge between each pair of agents involved in a positive or negative constraint.Remark. As pointed out in the Introduction, the semantics of a set S of pivotal agents can be recast in terms of the set of negative constraints {{ai, a j} | ai, a j ∈ S}. However, the resulting graph would contain a clique over the agents in S, thereby obscuring the intricacy of the setting. Our results deal instead with pivotal agents as first-class citizens, and the set S does not influence the treewidth of the underlying graph.5. Back to the applicationsNow that we have established Theorem 4.12, we turn back to the applications of Section 2.2 by discussing their com-plexity over structures having bounded treewidth. The analysis comes as a simple corollary of our general result, though in some cases we actually close tractability questions that have been left open in the literature.G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–46395.1. Multicut problemsThe problem of identifying islands of tractability for the multicut problem has been intensively studied in the literature and a number of results have been derived by exploiting the structural properties of the graphs on top of which the problem is defined.For classes of graphs G having bounded treewidth, it has been shown [8] that the problem is tractable if the size of the set P of the source-terminal pairs to be disconnected is constant (see, also, [42]). The result does not prescribe any restriction on the weights associated with the edges. Instead, if we deal with unitary weights only (so that the problem reduces to finding the multicut consisting of the minimum possible number of edges), then we know that tractability holds over the instances for which G P , i.e., the graph derived from G by adding an edge between each pair in P , has bounded treewidth [37]. Note that, while this latter result focuses on unitary weights (i.e., undirected graphs only), it is actually incomparable with the result by [8]. Indeed, if the size of P is a constant, then the treewidth of G P is within a constant from the treewidth of G. However, G P might have bounded treewidth even when the size of P is not constant.It is interesting to point out that the result by [37] is based on encoding the multicut problem as a monadic second-order (MSO) formula over the structure G P , and by exploiting a generalization of Courcelle’s Theorem [19] tailored to optimization problems [1]. Motivated by the fact that the resulting algorithm is unpractical (the running time is non-elementary in terms of the number of quantifier alternations of the MSO formula), a direct solution approach has been proposed more recently by [55]. However, it was open so far whether the result by [37] can be extended to arbitrary weighted graphs.11 Here, we close this question by providing the following positive answer. In the proof, note that the only technical ingredient we exploit is the connection between the multicut problem and the problem of computing ⊥-optimal coalitions structures, which was not pointed out in earlier literature—in particular, Theorem 4.12 plays no role.Theorem 5.1. Let h ≥ 0 be a fixed natural number. On classes of graphs G and source-terminal pairs P with t w(G P ) ≤ h, the multicut problem can be solved in polynomial time.Proof. Recall from Section 2.2.1 that the multicut problem can be reduced to computing a ⊥-optimal coalition structure for the game (cid:3)N, v P (cid:4) (see Theorem B.1 in Appendix B for the formal correspondence). Recall also that v P is the function such that v P (C) is the sum of the weights of the edges in the subgraph of G P induced over any coalition C . Therefore, (cid:3)N, v P (cid:4) ∈ C(gg) holds, i.e., the valuation function can be encoded as graph game. Then, we recall from [69] that valuation functions for games in C(gg) are independent of disconnected members w.r.t. the underlying graphs. So, v P is an IDMfunction w.r.t. G P , and we can apply Theorem 3.5, in order to conclude that a ⊥-optimal coalition structure for (cid:3)N, v P (cid:4) can be computed in polynomial time. (cid:3)5.2. Multiway cut (and k-clustering) problemsSimilarly to the multicut problem, a number of structural tractability results for the multiway cut problems are known, but the picture is still not completely clear. The tractability of the problem over classes of graphs G that are trees has been established in the early nineties by [16]. However, a practical dynamic programming algorithm (with a linear running time) followed many years later [18].In a very influential paper on cut problems [21], it has been claimed that standard dynamic programming methods can be used to show that the multicut problem remains tractable when moving from trees to graphs having bounded treewidth. However, no algorithm has been actually reported there, and no formal proof of the result has been reported in the subsequent literature. Here, we show that the claim of [21] is correct.Theorem 5.2. Let h ≥ 0 be a fixed natural number. On classes of graphs G such that t w(G) ≤ h, the multiway cut problem can be solved in polynomial time.Proof. Recall from Section 2.2.1 that the multiway cut problem can be reduced to computing a σmw-optimal coalition structure for (cid:3)N, v mw(cid:4) (see Theorem B.2 in Appendix B for the formal correspondence). Observe also that (cid:3)N, v mw(cid:4) can be encoded as a graph game, because v mw(C) is just the sum of the weights of the edges in the subgraph of G induced over any coalition C . Moreover, recall that σmw = (cid:3)G, T , 1, 0, 1, 0(cid:4). Given these ingredients, we are in the position of applying Theorem 4.12 on ((cid:3)N, v mw(cid:4), σmw). (cid:3)The encoding we have discussed for the k-clustering problem in Section 2.2.1 founds on the encoding for the multi-way cut problem. Indeed, we have observed that an optimal k-clustering can be computed as a coalition structure having the maximum σR-value (for (cid:3)N, v cc(cid:4)) over all σR-optimal coalition structures for any subset R ⊆ N with |R| = k, where 11 In fact, the techniques used in that paper can be adapted to show tractability whenever the weights are “small”, i.e., when each of them can be encoded in logarithmic space.40G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–46σR = (cid:3)G, R, 1, 0, 0, −∞(cid:4) is the valuation structure that solves the problem of finding the multiway cut of minimum weight where R is considered as the set of terminals. So, polynomially many subsets R have to be considered and, by applying Theorem 5.2, the problem is solvable in polynomial time.5.3. Chromatic clusteringWe conclude our analysis by considering the chromatic clustering problem. Recall from Section 2.2 that the problem has been reduced to computing a σch-optimal coalition structure for the game (cid:3)N, v ch(cid:4), where σch = (cid:3)GC, C, 1, 0, 0, −∞(cid:4) and where v ch is any valuation function such that, for each set of nodes C ⊆ N ∪ C with C ∩ C = {ci}, v ch(C) =e (see Theorem B.4 in Appendix B). Moreover, recall that GC is the graph where colors are viewed as nodes and where an edge is added between each node in N and each color in C. Then, the following can be established.e∈E,e⊆C wci(cid:2)Theorem 5.3. Let h ≥ 0 be a fixed natural number. On classes of graphs G and sets C of colors such that t w(GC) ≤ h, the chromatic clustering problem can be solved in polynomial time.Proof. Similarly to the cases discussed above, given the encoding we have proposed and analyzed, the tractability of chromatic clustering follows for graphs GC having bounded treewidth, provided we can show that v ch is independent of disconnected members. So, in the light of Theorem 4.2, we will complete the proof by showing that v ch can be encoded as a marginal contribution network M such that AG(M) = GC . Indeed, the network can be built as follows. For each color ci ∈ C and for each edge e = {a, b} ∈ E, we include in M the rule: a ∧ b ∧ ci → wcie , and no further rule is included in M. It is immediate to check that the encoding is correct and that AG(M) = GC (w.l.o.g., we assume there are no isolated nodes in G). (cid:3)6. Stability issues under valuation structuresComputing an optimal coalition structure (cid:6)∗is generally not enough in applications where agents collaborate within the same environment. Indeed, another fundamental problem for coalitional games is to determine how the worth that is obtained by forming the structure (cid:6)∗can be subsequently distributed over the agents in a way that is stable. This problem has been largely studied in the literature, and several approaches have been proposed founding on well-known solution concepts, such as the core, the kernel, the bargaining set, the nucleolus, and the Shapley value (see, e.g., [53]).In the following, we shall focus on the core, which is arguably the most influential and considered stability concept, and we shall position it within our setting where coalitional games are equipped with valuation structures. In particular, in Section 6.1, we formalize this concept together with some natural reasoning problems that are related to it. Eventually, Section 6.2 is devoted to analyze the complexity of such problems, with the usual intended goal of identifying possibly large islands of tractability.6.1. Solution concepts and computational problemsai ∈S xi .Let (cid:2) = (cid:3)N, v(cid:4) be a coalitional game, where N = {a1, . . . , an}. A worth distribution in (cid:2) can be simply viewed as a n-dimensional payoff vector x ∈ Rn whose i-th component, denoted by xi , is the worth received by agent ai , for each i ∈{1, . . . , n}. For any coalition S ⊆ N, x(S) is hereinafter used as a shorthand for (cid:2)Let σ be a valuation structure for (cid:2), and assume that the agents organize themselves in the σ -feasible coalition structure (cid:6) ∈ Fσ ((cid:2)). According to (cid:6), the worth to be divided over the agents in a coalition C ∈ (cid:6) is given by valσ (v, C). Therefore, the “output” of the game can be viewed as a pair ((cid:6), x), where x ∈ Rn is a payoff vector that is efficient w.r.t. (cid:6), that is, x(C) = valσ (v, C) holds, for each C ∈ (cid:6). In the following, we denote by Eσ (v, (cid:6)) (or, shorty, by Eσ ((cid:6)) if v is understood) the set of all such efficient payoff vectors. Note that Eσ (v, (cid:6)) can contain infinitely many payoff vectors, and so the fundamental problem arises of singling out the most desirable ones among them.The concept of the core goes back to the work by [28] and it was formalized by [32]. Here, we consider its natural generalization to the setting where valuation structures are taken into account. Intuitively, a pair ((cid:6), x), with x ∈ Eσ (v, (cid:6)), belongs to the core in that it is “stable” because there is no σ -feasible coalition whose members will receive a higher payoff than in x by leaving the current coalition structure. We refer to this notion12 as the coalition structure core of (cid:2) w.r.t. σ , formally defined as the setCS-coreσ ((cid:2)) = {((cid:6), x) | (cid:6) ∈ CSσ ((cid:2)), x ∈ Eσ ((cid:6)), and x(C) ≥ valσ (C), ∀C ∈ Fσ ((cid:2))}.The following property is useful to simplify our reasoning on this concept.1312 Whenever σ = (cid:3)G(cid:4) holds, the concept reduces to the notion of the core discussed, for instance, by [13,24,25,15] in order to deal with the restrictions imposed by an underlying interaction graph.13 The property is well-known for games without valuation structures and its extension in our setting is straightforward (for instance, by inspecting the results in [15]).G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–4641Theorem 6.1. Let (cid:2) = (cid:3)N, v(cid:4) be a coalitional game, let σ be a valuation structure, and let ((cid:6), x) be in CS-coreσ ((cid:2)). Then, (cid:6) ∈CS-optσ ((cid:2)). Moreover, ((cid:6)∗, x) is in CS-coreσ ((cid:2)), for each σ -optimal coalition structure (cid:6)∗ ∈ CS-optσ ((cid:2)).and ˙(cid:2) = (cid:3){a1, . . . , a5}, ˙v(cid:4)the coalitional game ˙σ =Example 6.2. Consider again (cid:3)AG( ˙M), {a3, a5}, 1, 0, 0, −∞(cid:4) defined in Example 4.4 and Example 4.6, respectively. Moreover, consider the coalition struc-ture ˙(cid:6) = {{a5}, {a1, a2, a3, a4}}, and the payoff vector x ∈ R5 such that x1 = x2 = x3 = 53 and x4 = x5 = 0. Note that x5 = val ˙σ ({a5}) = ˙v({a5}) = 0 and x({a1, a2, a3, a4}) = x1 + x2 + x3 + x4 = val ˙σ ({a1, a2, a3, a4}) = ˙v({a1, a2, a3, a4}) = 5. Hence, x belongs to the set E ˙σ ( ˙(cid:6)) of the payoff vectors that are efficient w.r.t. ˙(cid:6). In fact, ( ˙(cid:6), x) belongs to CS-core ˙σ ( ˙(cid:2)), as it can be checked that x(C) ≥ val ˙σ (C) holds, for each σ -feasible coalition C . Note that, by Theorem 6.1, this entails that ˙(cid:6) belongs to CS-opt ˙σ ( ˙(cid:2)).Consider now the game ¨(cid:2) = (cid:3){a1, . . . , a5}, ¨v(cid:4) where the valuation function ¨v is considered such that ¨v(C) = ˙v(C), for each C ⊆ N with |C ∩ {a1, a2, a3}| (cid:16)= 3, and ¨v(C) = 2 for the remaining coalitions C . Note that the modification does not alter ˙(cid:6), then it holds the optimality of ˙(cid:6), which belongs to CS-opt ˙σ ( ¨(cid:2)). Moreover, observe that if a vector x is efficient w.r.t.that x1 + x2 + x3 + x4 = 2 and x5 = 0. Therefore, this vector cannot simultaneously satisfy the stability conditions required to be in the core. In particular, just observe that the following set of inequalities is not satisfiable:the valuation structure ⎧⎪⎪⎪⎨⎪⎪⎪⎩x1 + x2 + x3 + x4 = 2x1 + x2 ≥ val ˙σ ( ¨v, {a1, a2})x1 + x3 ≥ val ˙σ ( ¨v, {a1, a3})x2 + x3 ≥ val ˙σ ( ¨v, {a2, a3})x4 ≥ val ˙σ ( ¨v, {a4})where val ˙σ ( ¨v, {a1, a2}) = ¨v({a1, a2}) = 2val ˙σ ( ¨v, {a1, a3}) = ¨v({a1, a3}) = 2val ˙σ ( ¨v, {a2, a3}) = ¨v({a2, a3}) = 2val ˙σ ( ¨v, {a4}) = ¨v({a4}) = 0Hence, there is no pair of the form ( ˙(cid:6), x) in the coalition structure core of ¨(cid:2) w.r.t. ˙σ . More generally, it can be checked that CS-core ˙σ ( ¨(cid:2)) = ∅. Indeed, this follows by Theorem 6.1 and since ˙(cid:6) belongs to CS-opt ˙σ ( ¨(cid:2)). (cid:2)6.2. Complexity analysisWith the above concepts in place, we can now state the main reasoning (computation) problem we shall consider in the subsequent analysis:• CS-Core-Find: Given a pair ((cid:2), σ ), compute an element in CS-coreσ ((cid:2)), or decide that CS-coreσ ((cid:2)) = ∅.The problem is easily seen to be intractable, formally NP-hard, as it inherits the results that are known to hold for coalitional games without coalitional structures [15]. Motivated by the bad news, we next consider IDM functions evaluated w.r.t. interaction graphs having bounded treewidth. Hence, because of the results in Section 4.1, we shall hereinafter study CS-Core-Find and CS-Approx-Core-Find on the class CTW-h(mcn) of all marginal contribution networks whose agent graphs have treewidth h at most, where h is a fixed constant. To prove the tractability on this class, we start by analyzing the complexity of two tasks playing a key role in the computation of core-related questions.First, we consider the problem of computing a coalition getting the maximum value over all possible coalitions. This problem is conceptually even more foundational when compared with the coalition structure generation problem, and technically it can be viewed as a kind of special case. Therefore, the following comes with no surprise.Theorem 6.3. Let h ≥ 0 be a fixed natural number. Let (cid:2) = (cid:3)N, v(cid:4) ∈ CTW-h(mcn) and let σ = (cid:3)G, S, α, β, x, y(cid:4) be a valuation struc-∗) ≥ valσ (C), for each C ∈ Fσ ((cid:2)), is feasible in polynomial time ture. Then, computing a σ -feasible coalition C(w.r.t. (cid:21)ξ mcn((cid:2))(cid:21) and (cid:21)σ (cid:21)).such that valσ (C∗Proof. Based on σ , we first build in polynomial time two different settings:(1) For each ai ∈ S, let σi = (cid:3)G, S, αi, βi, 0, 0(cid:4) be the valuation structure where αi (resp., βi ) is the function such that αi(ai) = α(ai) (resp., βi(ai) = β(ai)); and αi(a j) = 0 (resp., βi(a j) = 0), for each a j ∈ S \ {ai}. Let (cid:6) be a σi -feasible coalition structure, and note that valσi (v, (cid:6)) = valσi (v, Ci), where Ci is the coalition in (cid:6) such that ai ∈ Ci . In its turn, valσi (v, Ci) coincides with valσ (v, Ci), by construction of σi . In particular, check that Ci is trivially a σ -feasible coalition. On the other hand, if Ci is a σ -feasible coalition, then we can build a σi -feasible coalition structure (cid:6) consisting of Ciand all other agents as singleton coalitions. Again, we have that valσi (v, (cid:6)) = valσ (v, Ci). Therefore, the value of any σi -optimal coalition structure coincides with the maximum possible value of any σ -feasible coalition including agent ai . ∗i , and we explicitly remark here that, because of Theorem 4.12In the following, we shall denote this optimal value by vcand the above characterization, vc∗i can be computed in polynomial time.(2) For each agent a j ∈ N \ S, let σ j = (cid:3)G, S ∪ {a j}, α j, β j, 0, 0(cid:4) be the valuation structure such that α j(ai) = β j(ai) = 0, for each ai ∈ S, and α j(a j) = x and β j(a j) = y. By exploiting the same line of reasoning as in the point (1) above, we can derive that the value of any σ j -optimal coalition coincides with the maximum possible value of any σ -feasible ∗j . In particular, observe that a j is coalition including agent a j and excluding all agents in S, hereinafter denoted by vc42G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–46not a pivotal agent in the original valuation structure, so that the affine transformation is determined by the parameters x and y. Instead, a j plays the role of a pivotal agent in σ j , and the functions α j and β j are accordingly defined as ∗to guarantee the correctness of the valuation. Eventually, we remark that vcj can be computed in polynomial time, because of the above characterization and again by Theorem 4.12.∗Let now Cbe a σ -feasible coalition such that valσ (v, Ccases. First, there can exist a pivotal agent ai ∈ S such that ai ∈ C∗∗). Otherwise, we have that Cderiving that vci∗∗), for each agent a j ∈ Cderiving that vcjof σ -feasible coalitions, by putting the above ingredients together, we conclude that:= valσ (v, C= valσ (v, C. Since the values of the form vc∗∗∗) ≥ valσ (v, C), for each C ∈ Fσ ((cid:2)), and let us distinguish two , in which case we can apply the construction in (1) for ∗ ∩ S = ∅, in which case we can apply the construction in (2) for ∗∗j correspond to valuations i and vcmax {maxai ∈Svc∗i , maxa j ∈N\Svc∗j} = valσ (v, C∗).In order to conclude the proof, note that the left side of the above equation involves polynomially-many values, and ∗) (and a σ -feasible coalition where this recall that each of them can be computed in polynomial time. Therefore, valσ (v, Cvalue is attained) can be overall computed in polynomial time, too. (cid:3)Let us now move to the second task. Let (cid:2) = (cid:3)N, v(cid:4) be a coalitional game with n = |N|, let σ be a valuation structure, and let ˆx ∈ Rn be a payoff vector. For each feasible coalition C ∈ Fσ ((cid:2)), we define the excess of C at ˆx (in (cid:2) w.r.t. σ ) as the value e(ˆx, C, (cid:2), σ ) = ˆx(C) − valσ (v, C) (shortly denoted as e(ˆx, C), when (cid:2) and σ are clearly understood). Intuitively, this is a measure of the satisfaction of the agents in C when they receive the payoff ˆx(C). Indeed, the agents in C are satisfied by the given payoff distribution and would not like to deviate from ˆx if, and only if, e(ˆx, C) ≥ 0. The problem of deciding whether the minimum possible excess is non-negative has been already studied in the literature for classes of games encoded via marginal contribution networks. In particular, it has been shown to be feasible in polynomial time over the class CTW-h(mcn), in absence of valuation structures and for any fixed natural number h [43]. Based on Theorem 6.3, we now extend this result to arbitrary valuation structures.Theorem 6.4. Let h ≥ 0 be a fixed natural number. Let (cid:2) = (cid:3)N, v(cid:4) ∈ CTW-h(mcn) with n = |N|, let σ = (cid:3)G, S, α, β, x, y(cid:4) be a valuation ∗, (cid:2), σ ) ≤ e(ˆx, C, (cid:2), σ ), for each structure, and let ˆx ∈ Rn be a payoff vector. Then, computing a σ -feasible coalition CC ∈ Fσ ((cid:2)), is feasible in polynomial time (w.r.t. (cid:21)ξ mcn((cid:2))(cid:21), (cid:21)σ (cid:21), and (cid:21)ˆx(cid:21)).such that e(ˆx, C∗Proof (Sketch). Let ξ mcn((cid:2)) be the marginal contribution network encoding the coalitional game (cid:2). For each w, consider the marginal contribution network M w defined as follows. For each rule {pattern} → value in ξ mcn((cid:2)), M w includes the rule {pattern} → w × value. For each agent ai ∈ N, M w includes the rule {ai} → −ˆxi . No further rule is in M w . Note that the network M w induces a valuation function v w such that v w (C) = −ˆx(C) + w × v(C), for each C ∈ Fσ ((cid:2)). The idea is then to apply the construction reported in the proof of Theorem 6.3 on the valuation structure (cid:3)G, S, 1, β, 1, y(cid:4) and the valuation function v w , where w is defined as follows. When we are in charge of dealing with case (1), for each agent ai in S, we define w = α(ai). Instead, when we deal with (2), for each agent a j ∈ N \ S, we define w = x. Then, by inspecting the ∗proof of Theorem 6.3, we derive that in the case (1), vci coincides with the minimum excess computed over any coalition ∗j coincides with the minimum excess computed over any coalition that includes including agent ai ; while in the case (2), vc∗j coincide with agent a j and does not include any agent in S. In particular, note that the maximum values vcminimum excesses because the valuation functions are opposite in sign. Eventually, by computing the maximum value over all agents ai ∈ S and a j ∈ N \ S, we end up with the minimum possible excess in polynomial time. (cid:3)∗i and vcNow, we have all ingredients in place to prove the main result of this section. We further stress that the result is given for marginal contribution networks having bounded treewidth but, because of the characterizations derived in Section 4.1, it actually holds on any IDM function w.r.t. an interaction graph having bounded treewidth.Theorem 6.5. Let h ≥ 0 be a fixed natural number. Let (cid:2) = (cid:3)N, v(cid:4) ∈ CTW-h(mcn) and let σ = (cid:3)G, S, α, β, x, y(cid:4) be a valuation struc-ture. Then, CS-Core-Find can be solved on ((cid:2), σ ) in polynomial time (w.r.t. (cid:21)ξ R((cid:2))(cid:21) and (cid:21)σ (cid:21)).Proof. Let us consider CS-Core-Find. We are given a game (cid:2) = (cid:3)N, v(cid:4) ∈ CTW-h(mcn) and we have to compute an element in CS-coreσ ((cid:2)), or decide that this set is empty. First, we compute a σ -optimal coalition structure (cid:6)∗ ∈ CS-optσ ((cid:2)), which is feasible in polynomial time by Theorem 4.12. Because of Theorem 6.1, Core-Find can be reduced to computing a payoff vector x such that x(C) = valσ (v, C), for each C ∈ (cid:6)∗; and x(C) ≥ valσ (v, C), for each C ∈ Fσ ((cid:2)) (or decide that no vector of this kind exist). Note that x is just a vector that satisfies a system of linear (in)equalities defined over |N| variables and possibly exponentially-many (in)equalities. It is well-known that a system of this kind can be solved in polynomially many steps, where each step consists of asking to a separation oracle whether a given vector is a solution and, if not, to report an (in)equality that is violated [63]. In particular, the whole computation is feasible in polynomial time, provided the existence of a separation oracle whose invocations take polynomial time. In our case, an oracle of this kind is as follows. Given a G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–4643vector x, we can trivially check whether x(C) = valσ (v, C), for each C ∈ (cid:6)∗. If some of the (polynomially-many) equalities is violated, then it is reported as output. Otherwise, we need to check whether x(C) ≥ valσ (v, C), for each C ∈ Fσ ((cid:2)). To this getting the minimum possible excess (at x) over all possible feasible coalitions. end, we compute a σ -feasible coalition C∗, (cid:2), σ ) ≥ 0, then no inequality is violated and Note that, by Theorem 6.4, this task is feasible in polynomial time. If e(x, Cwe can return ((cid:6)∗, x) as an element in the core. Otherwise, i.e., if e(x, C∗, (cid:2), σ ) < 0, then we know that the inequality x(C∗) is violated by x and it is returned as output by the oracle. (cid:3)∗) ≥ valσ (v, C∗7. ConclusionThe coalition structure generation problem has been reconsidered in this paper, by taking into account constraints on the allowed coalitions defined in terms of “valuation structures”. A clear picture of the complexity issues arising in this setting has been depicted, by singling out islands on tractability based on the properties of the underlying valuation functions and of the underlying interaction graphs. Notably, the results have been formulated in a way that is independent of the specific scheme being adopted to represent the valuations functions. In particular, they hold for any given compact encoding. A number of concrete applications have been discussed, too.Our work paves the way for further investigations. First, it would be interesting to study further kinds of constraints that are likely to occur in real-world application domains, in addition to those associated with pivotal agents and interaction graphs. With this respect, inspired by constrained clustering methods (see, e.g., [72]), we envisage that general forms of cannot-link constraints can be profitably incorporated in the concept of valuation structure, in order to prescribe that some pivotal agent a in S is “incompatible” with some proper subset of S \ {a}—currently, our setting accommodates only the case where a is “incompatible” with all the remaining pivotal agents in S \ {a}. Further extensions can be defined to deal with a-priori knowledge on the sizes of the coalitions that are allowed to form [7] or with labeling mechanisms more sophisticated than those discussed in Section 2.4 (inspired, e.g., to [12,20]).Orthogonally to the above directions, it would be relevant to extend the analysis of the questions related to worth distribution problems in the presence of valuation structures to further solution concepts. In the paper, we have focused on the core and, hence, we mainly dealt with stability issues. Other solution concepts proposed in the literature, for instance the Shapley value, look at worth distribution problems by taking into account fairness issues, too. In fact, it is well-known that computing the Shapley value is an intractable problem in general, formally #P-complete. However, recent research evidenced that, on some classes of games and when certain structural restrictions are considered, the value can be computed in polynomial time (see, e.g., [38,3]). An interesting question is therefore whether the Shapley value retains this desirable computational property on IDM functions and in presence of valuation structures.Finally, from the practical viewpoint, the most natural avenue of further research is to embark on the implementation of the approaches we have exhibited to single out islands of tractability and to conduct experimental activity to assess their scalability on synthetic benchmarks and real-world instances.AcknowledgementsWe are grateful with the anonymous referees for their useful suggestions that helped us to improve the quality of the paper.The work was supported by project “Ba2Know (Business Analytics to Know) Service Innovation – LAB”, No. PON03PE_00001_1 funded by the Italian Ministry of University and Research (MIUR), and by project “Smarter Solutions in the Big Data World (S2BDW)”, funded by the Italian Ministry for Economic Development (MISE) within the programme PON “Imprese e competitivitá” 2014–2020.Appendix A. NotationTable A.1 reports the notation used consistently throughout the paper.Appendix B. Results in Section 2.2Theorem B.1. Let E(cid:10) ⊆ E be a set of edges. Then, the following properties hold:is a multicut, then there is a ⊥-feasible coalition structure (cid:6) for (cid:3)N, v P (cid:4) with E(cid:10) = {e ∈ E | ∀C j ∈ (cid:6), |e ∩ C j| ≤ 1} and (2) If (cid:6) is a ⊥-feasible coalition structure for (cid:3)N, v P (cid:4) with val⊥((cid:6)) ≥ 0, then E(cid:10) = {e ∈ E | ∀C j ∈ (cid:6), |e ∩ C j| ≤ 1} is a multicut and (1) If E(cid:10)val⊥((cid:6)) =(cid:2)(cid:2)(cid:2)(cid:2)e∈E we −e(cid:10)∈E(cid:10) we(cid:10) ≥ 0.val⊥((cid:6)) =e∈E we −e(cid:10)∈E(cid:10) we(cid:10) .(cid:10)(cid:10)). If e ∈ EProof. (1) Assume that E. That is, by letting (cid:6) =is an edge such that |e ∩ C j| ≤ 1 holds, for each j ∈ {1, . . . , k}, then e belongs to the multicut E(cid:10) = {e ∈ E | ∀C j ∈ (cid:6), |e ∩ C j| ≤ 1}. Moreover, (cid:6) exhaustively covers all the nodes in N, and {C1, . . . , Ck}, it clearly holds that ECi ∩ C j = ∅ holds, for each pair of distinct indices i, j ∈ {1, . . . , k}. Therefore, (cid:6) is a ⊥-feasible coalition structure for (cid:3)N, v P (cid:4). is a multicut, and let C1, . . . , Ck be the connected components in the graph (N, E \ E(cid:10)44G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–46Table A.1Notation used in the paper.Notation(cid:2) = (cid:3)N, v(cid:4)C ⊆ NG = (N, E)σ = (cid:3)G, S, α, β, x, y(cid:4)Fσ ((cid:2))valσ (v, C)valσ (C)(cid:6) = {C1, . . . , Ck}CSσ ((cid:2))valσ (v, (cid:6))valσ ((cid:6))optσ ((cid:2))CS-optσ ((cid:2))(cid:3)G(cid:4)K N⊥cC(R)ξ R((cid:2))R(ξ R((cid:2)), C)v(cid:21) · (cid:21)t w(·)ggmcnAG(M)CTW-h(mcn)I = (cid:3)Var, U , C(cid:4)CSP((cid:2), σ )PG(I)Eσ (v, (cid:6))Eσ ((cid:6))CS-coreσ ((cid:2))Descriptioncoalitional gamecoalitionundirected graph, where agents in N are viewed as nodesvaluation structurethe set of all σ -feasible coalitions in (cid:2)the σ -value of C w.r.t. vshorthand for valσ (v, C), when v is clearly understoodcoalition structure, with C1, . . . , Ck ∈ Fσ ((cid:2))the set of all σ -feasible coalition structures for (cid:2)the σ -value of (cid:6) w.r.t. vshorthand for valσ (v, (cid:6)), when v is clearly understoodthe maximum possible σ -value over CSσ ((cid:2))the set of all σ -optimal coalition structures on (cid:2)shorthand for valuation structures (cid:3)G, ∅, α, β, x, y(cid:4)the complete graph over Nshorthand for the valuation structure (cid:3)K N (cid:4)the constant function mapping each element to c ∈ Rthe class of all games encoded via the representation Rthe encoding of (cid:2) according to Rthe value of C according to v as returned by Rthe function returning the size of the encodingthe function returning the treewidth of a graphthe graph-game encodingthe encoding via marginal contribution networksthe agent graph of the marginal contribution network Mthe restriction of C(mcn) to agent graphs having treewidth at most hCSP instancethe CSP instance associated with (cid:2) and σthe primal graph of the CSP instance Ithe set of all efficient vectors for (cid:6) w.r.t. vshorthand for Eσ (v, (cid:6)), when v is clearly understoodthe coalition structure core of (cid:2) w.r.t. σ(cid:2)Moreover, it holds that val⊥((cid:6)) =kj=1 v P (C j), where v P (C j) is the sum of the weights of the edges in the subgraph of G Pinduced over C j . In fact, every pair in P is disconnected by E, so that its endpoints belong to different components. This entails that v P (C j) is also the sum of the weights of the edges in the subgraph of G induced over C j . Hence, val⊥((cid:6)) is just the sum of all the weights of the edges in G, except those belonging to Ee(cid:10)∈E(cid:10) we(cid:10) .(cid:10) = {e ∈ E | ∀C j ∈ (cid:6), |e ∩ C j| ≤ 1} and val⊥((cid:6)) ≥ 0. By definition of the valuation function, this entails that for each source-terminal pair in P , its endpoints belongs to distinct coalitions of (cid:6). That is, the set Eof the edges that are not entirely covered by any coalition in (cid:6) forms (cid:10)a multicut. In particular, (cid:6) is precisely the coalition structure associated with Eaccording to point (1), and hence (cid:2)val⊥((cid:6)) =(2) Assume that (cid:6) is a ⊥-feasible coalition structure such that E. Formally, val⊥((cid:6)) =e∈E we −(cid:2)(cid:2)(cid:2)(cid:10)(cid:10)(cid:10)e∈E we −e(cid:10)∈E(cid:10) we(cid:10) . (cid:3)Theorem B.2. Let E(cid:10) ⊆ E be set of edges. Then, the following properties hold:(1) If E(cid:10)is a multiway cut, then there is a σmw-feasible coalition structure (cid:6) for (cid:3)N, v mw(cid:4) such that E(cid:2)(cid:2)(cid:10) = {e ∈ E | ∀C j ∈ (cid:6), |e ∩ C j| ≤(2) If (cid:6) is a σmw -feasible coalition structure for (cid:3)N, v mw(cid:4), then E(cid:2)(cid:10) = {e ∈ E | ∀C j ∈ (cid:6), |e ∩ C j| ≤ 1} is a multiway cut and 1} and valσmw ((cid:6)) =e∈E we −(cid:2)e(cid:10)∈E(cid:10) we(cid:10) .valσmw ((cid:6)) =e∈E we −e(cid:10)∈E(cid:10) we(cid:10) .(cid:10)is a multiway cut and C1, . . . , Ck are the connected components in the graph (N, E \ E(cid:10)), then |C j ∩ T | ≤ 1Proof. (1) If Eholds, for each j ∈ {1, . . . , k}. Hence, (cid:6) = {C1, . . . , Ck} is a σmw-feasible coalition structure. Eventually, we trivially have that (cid:10) = {e ∈ E | ∀C j ∈ (cid:6), |e ∩ C j| ≤ 1} and valσmw ((cid:6)) =e∈E we −E(2) If (cid:6) is a σmw-feasible coalition structure, then |C j ∩ T | ≤ 1 holds, for each C j ∈ (cid:6). Therefore, the set E∀C j ∈ (cid:6), |e ∩ C j| ≤ 1} is a multiway cut. Again, by definition of the valuation function, we have valσmw ((cid:6)) =(cid:2)(cid:10) = {e ∈ E |(cid:2)e∈E we −e(cid:10)∈E(cid:10) we(cid:10) .(cid:2)(cid:2)e(cid:10)∈E(cid:10) we(cid:10) . (cid:3)Theorem B.3. Let (cid:6) be a clustering. Then, the following properties hold:(1) If (cid:6) is a k-clustering, then there is a set R ⊆ N with |R| = k and such that (cid:6) is a σR-feasible coalition structure for (cid:3)N, v cc(cid:4) with (cid:2)valσR ((cid:6)) =Ci ∈(cid:6) v cv(Ci) ≥ 0.G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–4645(2) If there is a set R ⊆ N of agents with |R| = k and such that (cid:6) is a σR-feasible coalition structure for (cid:3)N, v cc(cid:4) with valσR ((cid:6)) ≥ 0, (cid:2)then (cid:6) is a k-clustering and valσR ((cid:6)) =Ci ∈(cid:6) v cc(Ci).(cid:2)Proof. (1) Let (cid:6) be a k-clustering. Thus, (cid:6) has the form {C1, . . . , Ck} where C1 ∪ · · · ∪ Ck = N and Ci ∩ C j = ∅, for each pair of distinct indices i and j. For each i ∈ {1, . . . , k}, let ri be an agent in Ci , and define R = {r1, . . . , rk}. Then, (cid:6) is a σR-feasible coalition structure, where σR = (cid:3)G, R, 1, 0, 0, −∞(cid:4). In particular, observe that the subgraph induced over Ci is connected, for each i ∈ {1, . . . , k}, by definition of cluster. Hence, both pivotal and connectedness conditions hold. Moreover, valσR ((cid:6)) =Ci ∈(cid:6) v cc(Ci) holds, by definition of σR and since there is no coalition in (cid:6) that does not include an agent in R.(2) Assume that (cid:6) is a σR-feasible coalition structure with |R| = k and valσR ((cid:6)) ≥ 0. Since |R| = k, we have that |(cid:6)| ≥ k holds. Moreover, if the inequality were strict, then we would have valσR ((cid:6)) < 0, because of the fact that σR = (cid:3)G, R, 1, 0, 0, −∞(cid:4). Therefore, |(cid:6)| = k. Moreover, (cid:6) is a k-clustering because the connectedness condition holds on each of its coalitions (again because of the σR-feasibility), and we have valσR ((cid:6)) =Ci ∈(cid:6) v cc(Ci). (cid:3)(cid:2)Theorem B.4. The following properties hold:(1) If {(C1, c1), . . . , (Ch, ch)} is a chromatic partition, then (cid:6) = {C1 ∪ {c1}, . . . , Ch ∪ {ch}} ∪ {{c(cid:2)(cid:2)σch-feasible coalition structure for (cid:3)N, v ch(cid:4) such that valσch ((cid:6)) =Ci ∈(cid:6)e∈E,e⊆Ciwcie .(2) If (cid:6) is a σch-feasible coalition structure for (cid:3)N, v ch(cid:4) with valσch (Ci) (cid:16)= −∞, for each Ci ∈ (cid:6), then there is a chromatic par-(cid:10) ∈ C \ {c1, . . . , ch}} and valσcp ((cid:6)) =titioning {(C1, c1), . . . , (Ch, ch)} such that (cid:6) = {C1 ∪ {c1}, . . . , Ch ∪ {ch}} ∪ {{c(cid:2)(cid:10)} | c(cid:2)(cid:10)} | c(cid:10) ∈ C \ {c1, . . . , ch}} is a Ci ∈(cid:6)e∈E,e⊆Ciwcie .Proof. (1) If {(C1, c1), . . . , (Ch, ch)} is a chromatic partition, then ci (cid:16)= c j for each i, j ∈ {1, . . . , h} with i (cid:16)= j. Therefore, (cid:6)satisfies the pivotal condition. Moreover, for each i ∈ {1, . . . , h}, we have that each agent in Ci is connected to ci in GC . Hence, the connectivity condition is satisfied too, and (cid:6) is a σch-feasible coalition structure. Eventually, since there is no coalition in (cid:6) that does not contain a pivotal agent, we immediately get valσcp ((cid:6)) =(2) If (cid:6) is a σch-feasible coalition structure with valσcp (Ci) (cid:16)= −∞, for each Ci ∈ (cid:6), then (cid:6) includes no coalition without (cid:10)} |pivotal agents. Thus, there is a chromatic partitioning {(C1, c1), . . . , (Ch, ch)} such that (cid:6) = {C1 ∪ {c1}, . . . , Ch ∪ {ch}} ∪ {{c(cid:10) ∈ C \ {c1, . . . , ch}} and valσcp ((cid:6)) =e . (cid:3)ce∈E,e⊆Ciwcie .Ci ∈(cid:6)wci(cid:2)(cid:2)(cid:2)(cid:2)Ci ∈(cid:6)e∈E,e⊆CiReferences[1] S. Arnborg, J. Lagergren, D. Seese, Easy problems for tree-decomposable graphs, J. Algorithms 12 (2) (1991) 308–340.[2] H. Aziz, B. de Keijzer, Complexity of coalition structure generation, in: Proc. of AAMAS ’11, 2011, pp. 191–198.[3] H. Aziz, B. de Keijzer, Shapley meets Shapley, in: Proc. of STACS’14, 2014, pp. 99–111.[4] Y. Bachrach, P. Kohli, V. Kolmogorov, M. Zadimoghaddam, Optimal coalition structure generation in cooperative graph games, in: Proc. of AAAI’13, 2013, pp. 81–87.2014, pp. 13–20.[5] Y. Bachrach, R. Meir, K. Jung, P. Kohli, Coalitional structure generation in skill games, in: Proc. of AAAI’10, 2010, pp. 703–708.[6] N. Bansal, A. Blum, S. Chawla, Correlation clustering, Mach. Learn. 56 (1–3) (2004) 89–113.[7] S. Basu, I. Davidson, K. Wagstaff, Constrained Clustering: Advances in Algorithms, Theory, and Applications, 1st ed., Chapman & Hall/CRC, 2008.[8] C. Bentz, On the complexity of the multicut problem in bounded tree-width graphs and digraphs, Discrete Appl. Math. 156 (10) (2008) 1908–1917.[9] F. Bistaffa, A. Farinelli, J. Cerquides, J. Rodríguez-Aguilar, S. Ramchurn, Anytime coalition structure generation on synergy graphs, in: Proc. of AAMAS’14, [10] H.L. Bodlaender, Dynamic programming on graphs with bounded treewidth, in: Proc. of ICALP’88, 1988, pp. 105–118.[11] H.L. Bodlaender, A linear-time algorithm for finding tree-decompositions of small treewidth, SIAM J. Comput. 25 (6) (1996) 1305–1317.[12] F. Bonchi, A. Gionis, F. Gullo, A. Ukkonen, Chromatic correlation clustering, in: Proc. of KDD’12, 2012, pp. 1321–1329.[13] M. Breton, G. Owen, S. Weber, Strongly balanced cooperative games, Int. J. Game Theory 20 (4) (1992) 419–427.[14] G. Chalkiadakis, E. Elkind, M. Wooldridge, Computational aspects of cooperative game theory, Synth. Lect. Artif. Intell. Mach. Learn. 5 (6) (2011) 1–168.[15] G. Chalkiadakis, G. Greco, E. Markakis, Characteristic function games with restricted agent interactions: core-stability and coalition structures, Artif. Intell. 232 (2016) 76–113.[16] S. Chopra, M.R. Rao, On the multiway cut polyhedron, Networks 21 (1) (1991) 51–89.[17] V. Conitzer, T. Sandholm, Complexity of constructing solutions in the core based on synergies among coalitions, Artif. Intell. 170 (6–7) (2006) 607–619.[18] M.-C. Costa, A. Billionnet, Multiway cut and integer flow problems in trees, Electron. Notes Discrete Math. 17 (2004) 105–109.[19] B. Courcelle, Graph rewriting: an algebraic and logic approach, in: Handbook of Theoretical Computer Science, Volume B: Formal Models and Semantics, The MIT Press, Cambridge, MA, USA, 1990, pp. 193–242.[20] P.J. Cowans, M. Szummer, A graphical model for simultaneous partitioning and labeling, in: Proc. of AISTATS’05, 2005, pp. 73–80.[21] E. Dahlhaus, D.S. Johnson, C.H. Papadimitriou, P.D. Seymour, M. Yannakakis, The complexity of multiterminal cuts, SIAM J. Comput. 23 (4) (1994) 864–894.[22] V.D. Dang, N.R. Jennings, Generating coalition structures with finite bound from the optimal guarantees, in: Proc. of AAMAS’04, 2004, pp. 564–571.[23] R. Dechter, Constraint Processing, Morgan Kaufmann Publishers Inc., San Francisco, CA, USA, 2003.[24] G. Demange, Intermediate preferences and stable coalition structures, J. Math. Econ. 23 (1) (1994) 45–58.[25] G. Demange, On group stability in hierarchies and networks, J. Polit. Econ. 112 (4) (2004) 754–778.[26] G. Demange, The strategy structure of some coalition formation games, Games Econ. Behav. 65 (1) (2009) 83–104.[27] X. Deng, C.H. Papadimitriou, On the complexity of cooperative solution concepts, Math. Oper. Res. 19 (2) (1994) 257–266.[28] F.Y. Edgeworth, Mathematical Psychics: An Essay on the Mathematics to the Moral Sciences, C. Kegan Paul & Co., London, 1881.[29] E. Elkind, G. Chalkiadakis, N.R. Jennings, Coalition structures in weighted voting games, in: Proc. of ECAI’08, 2008, pp. 393–397.[30] E. Elkind, L.A. Goldberg, P.W. Goldberg, M. Wooldridge, On the computational complexity of weighted voting games, Ann. Math. Artif. Intell. 56 (2) (2009) 109–131.46G. Greco, A. Guzzo / Artificial Intelligence 249 (2017) 19–462013, pp. 1–38.[31] E. Elkind, T. Rahwan, N.R. Jennings, Computational coalition formation, in: Multiagent Systems, MIT Press, 2013, pp. 329–380.[32] D.B. Gillies, Solutions to general non-zero-sum games, in: Contributions to the Theory of Games, vol. IV, in: Ann. Math. Stud., vol. 40, Princeton University Press, Princeton, NJ, USA, 1959, pp. 47–85.[33] I. Giotis, V. Guruswami, Correlation clustering with a fixed number of clusters, in: Proc. of SODA’06, 2006, pp. 1167–1176.[34] G. Gottlob, G. Greco, Decomposing combinatorial auctions and set packing problems, J. ACM 60 (4) (2013) 24:1–24:39.[35] G. Gottlob, G. Greco, N. Leone, F. Scarcello, Hypertree decompositions: questions and answers, in: Proc. of PODS’16, 2016, pp. 57–74.[36] G. Gottlob, G. Greco, F. Scarcello, Treewidth and hypertree width, in: Tractability: Practical Approaches to Hard Problems, Cambridge University Press, [37] G. Gottlob, S.T. Lee, A logical approach to multicut problems, Inf. Process. Lett. 103 (4) (2007) 136–141.[38] G. Greco, F. Lupia, F. Scarcello, Structural tractability of Shapley and Banzhaf values in allocation games, in: Proc. of IJCAI’15, 2015, pp. 547–553.[39] G. Greco, E. Malizia, L. Palopoli, F. Scarcello, On the complexity of core, kernel, and bargaining set, Artif. Intell. 175 (12–13) (2011) 1877–1910.[40] G. Greco, F. Scarcello, Structural tractability of constraint optimization, in: Proc. of CP’11, 2011, pp. 340–355.[41] G. Greco, F. Scarcello, Greedy strategies and larger islands of tractability for conjunctive queries and constraint satisfaction problems, Inf. Comput. 252 (2017) 201–220.Eur. J. Oper. Res. 186 (2) (2008) 542–553.[42] J. Guo, F. Hüffner, E. Kenar, R. Niedermeier, J. Uhlmann, Complexity and exact algorithms for vertex multicut in interval and bounded treewidth graphs, [43] S. Ieong, Y. Shoham, Marginal contribution nets: a compact representation scheme for coalitional games, in: Proc. of EC’05, 2005, pp. 193–202.[44] D.S. Johnson, A catalog of complexity classes, in: Handbook of Theoretical Computer Science, Algorithms and Complexity, vol. A, The MIT Press, [45] E. Kalai, E. Zemel, On totally balanced games and games of flow, Discussion Paper 413, Center for Mathematical Studies in Economics and Management Cambridge, MA, USA, 1990, pp. 67–161.Science, Northwestern University, Evanston, IL, USA, 1980.[46] H. Keinänen, Simulated annealing for multi-agent coalition formation, in: Proc. of KES-AMSTA’09, 2009, pp. 30–39.[47] J. Kleinberg, E. Tardos, Algorithm Design, Addison Wesley, Boston, MA, USA, 2005.[48] M.W. Krentel, The complexity of optimization problems, in: Proc. of STOC’86, 1986, pp. 69–76.[49] N. Megiddo, Computational complexity of the game theory approach to cost allocation for a tree, Math. Oper. Res. 3 (3) (1978) 189–196.[50] T. Michalak, J. Sroka, T. Rahwan, M. Wooldridge, P. McBurney, N.R. Jennings, A distributed algorithm for anytime coalition structure generation, in: Proc. [51] R.B. Myerson, Graphs and cooperation in games, Math. Oper. Res. 2 (3) (1977) 225–229.[52] N. Ohta, V. Conitzer, R. Ichimura, Y. Sakurai, A. Iwasaki, M. Yokoo, Coalition structure generation utilizing compact characteristic function representa-of AAMAS’10, 2010, pp. 1007–1014.tions, in: Proc. of CP’09, 2009, pp. 623–638.[53] M.J. Osborne, A. Rubinstein, A Course in Game Theory, The MIT Press, Cambridge, MA, USA, 1994.[54] C.H. Papadimitriou, Computational Complexity, Addison Wesley, Reading, MA, USA, 1994.[55] R. Pichler, S. Rümmele, S. Woltran, Multicut algorithms via tree decompositions, in: Proc. of CIAC’10, 2010, pp. 167–179.[56] T. Rahwan, N.R. Jennings, An algorithm for distributing coalitional value calculations among cooperating agents, Artif. Intell. 171 (8–9) (2007) 535–567.[57] T. Rahwan, N.R. Jennings, An improved dynamic programming algorithm for coalition structure generation, in: Proc. of AAMAS’08, 2008, pp. 1417–1420.[58] T. Rahwan, T.P. Michalak, E. Elkind, P. Faliszewski, J. Sroka, M. Wooldridge, N.R. Jennings, Constrained coalition formation, in: Proc. of AAAI’11, 2011, pp. 719–725.[59] T. Rahwan, T.P. Michalak, M. Wooldridge, N.R. Jennings, Coalition structure generation: a survey, Artif. Intell. 229 (2015) 139–174.[60] T. Rahwan, S.D. Ramchurn, N.R. Jennings, A. Giovannucci, Anytime algorithm for optimal coalition structure generation, J. Artif. Intell. Res. 34 (2009) 521–567.[61] N. Robertson, P. Seymour, Graph minors III: planar tree-width, J. Comb. Theory, Ser. B 36 (1) (1984) 49–64.[62] T. Sandholm, K. Larson, M. Andersson, O. Shehory, F. Tohmé, Coalition structure generation with worst case guarantees, Artif. Intell. 111 (1–2) (1999) 209–238.[63] A. Schrijver, Theory of Linear and Integer Programming, John Wiley & Sons, New York, NY, USA, 1998.[64] S. Sen, P.S. Dutta, Searching for optimal coalition structures, in: Proc. of ICMAS’00, 2000, pp. 287–292.[65] O. Shehory, S. Kraus, Methods for task allocation via agent coalition formation, Artif. Intell. 101 (1–2) (1998) 165–200.[66] S. Ueda, A. Iwasaki, M. Yokoo, M.-C. Silaghi, K. Hirayama, T. Matsui, Coalition structure generation based on distributed constraint optimization, in: [67] S. Ueda, M. Kitaki, A. Iwasaki, M. Yokoo, Concise characteristic function representations in coalitional games based on agent types, in: Proc. of AA-Proc. of AAAI’10, 2010, pp. 197–203.MAS’11, 2011, pp. 1271–1272.[68] V. Vazirani, Approximation Algorithms, Springer-Verlag, Inc., New York, NY, USA, 2001.[69] T. Voice, M. Polukarov, N.R. Jennings, Coalition structure generation over graphs, J. Artif. Intell. Res. 45 (1) (2012) 165–196.[70] T. Voice, S.D. Ramchurn, N.R. Jennings, On coalition formation with sparse synergies, in: Proc. of AAMAS’12, 2012, pp. 223–230.[71] J. von Neumann, O. Morgenstern, Theory of Games and Economic Behavior, 3rd ed., Princeton University Press, Princeton, NJ, USA, 1953.[72] K. Wagstaff, C. Cardie, S. Rogers, S. Schrödl, Constrained k-means clustering with background knowledge, in: Proc. of ICML’01, 2001, pp. 577–584.