Artificial Intelligence 175 (2011) 1272–1289Contents lists available at ScienceDirectArtificial Intelligencewww.elsevier.com/locate/artintIncompleteness and incomparability in preference aggregation:Complexity resultsM.S. Pini a, F. Rossi a, K.B. Venable a,∗, T. Walsh ba Department of Pure and Applied Mathematics, University of Padova, Italyb NICTA and UNSW Sydney, Australiaa r t i c l ei n f oa b s t r a c tArticle history:Received 27 February 2009Received in revised form 1 July 2010Accepted 1 July 2010Available online 1 December 2010Keywords:Preference in multi-agent systemsPreference aggregationComputational complexityUncertaintyElicitationWe consider how to combine the preferences of multiple agents despite the presence ofincompleteness and incomparability in their preference relations over possible candidates.The set of preference relations of an agent may be incomplete because, for example,there is an ongoing preference elicitation process. There may also be incomparability asthis is useful, for example, in multi-criteria scenarios. We focus here on the problemof computing the possible and necessary winners, that is, those candidates which canbe, or always are, the most preferred for the agents. Possible and necessary winnersare useful in many scenarios including preference elicitation. First, we show that testingpossible and necessary winners is in general a computationally intractable problem forSTV with unweighted votes and the cup rule with weighted votes, as is providing agood approximation of such sets. Then, we identify general properties of the preferenceaggregation function, such as independence to irrelevant alternatives, which are sufficientfor such sets to be computed in polynomial time. Finally, we show how possible andnecessary winners can be used to focus preference elicitation. We show that it iscomputationally intractable for the cup rule with weighted votes in the worst-case todecide when to terminate elicitation. However, we identify a property of the preferenceaggregation function that allows us to decide when to terminate elicitation in polynomialtime, by focusing on possible and necessary winners.© 2011 Elsevier B.V. All rights reserved.1. IntroductionWe consider a multi-agent setting where each agent specifies their preferences by means of a set of preference relationsover the possible candidates. A pair of candidates can be ordered, incomparable, in a tie, or the relationship betweenthem may not yet be specified. Incomparability and incompleteness represent very different concepts. Candidates may beincomparable because the agent does not wish very dissimilar candidates to be compared. For example, we might not wantto compare a biography with a novel since the criteria along which we judge them are just too different. Candidates can alsobe incomparable because the agent has multiple criteria to optimize. For example, we might not wish to compare a fasterbut more expensive laptop with a slower and cheaper one. Incompleteness, on the other hand, represents simply an absenceof knowledge about the relationship between certain pairs of candidates. Incompleteness arises when we have not fullyelicited an agent’s preferences or when agents have privacy concerns which prevent them from revealing their preferences.* Corresponding author.E-mail addresses: mpini@math.unipd.it (M.S. Pini), frossi@math.unipd.it (F. Rossi), kvenable@math.unipd.it (K.B. Venable), Toby.Walsh@nicta.com.au(T. Walsh).0004-3702/$ – see front matter © 2011 Elsevier B.V. All rights reserved.doi:10.1016/j.artint.2010.11.009M.S. Pini et al. / Artificial Intelligence 175 (2011) 1272–12891273Since we wish to aggregate together the agents’ preferences into a single preference ordering, we must modify preferenceaggregation functions to deal with incompleteness. One possibility is to consider all possible ways in which the incompletepreference orders can be consistently completed. In each possible completion, preference aggregation may give differentoptimal elements (or winners). This leads to the idea of possible winners (those candidates which are winners in at least onepossible completion) and necessary winners (those candidates which are winners in all possible completions) [14].While voting theory has been mainly interested in the fairness of social choice or social welfare functions, there hasbeen recent interest in computational properties of preference aggregation [19,15,14,10]. It has already been noted that thecomputational complexity of manipulating an election is closely related to that of computing possible winners [14,9]. In thispaper we start by considering the computational complexity of testing if a given candidate is a necessary or a possible win-ner for STV and the cup rule. We consider two different dimensions: weighted/unweighted agents and bounded/unboundednumber of candidates. Weights are useful in multi-agent systems where we have different types of agents and some agentmay have more importance than some other agent in the process of taking a decision. We provide the computational com-plexity of computing the necessary and possible winners in all of the considered scenarios in the worst case. Moreover, weshow that it is intractable even to obtain a good approximation of such sets, except when we have unweighted agents anda bounded number of candidates. Then, we identify sufficient conditions that assure tractability. Such conditions concernproperties of the preference aggregation function, such as monotonicity and independence of irrelevant alternatives (IIA) [2].Notice that IIA is a strong assumption. However, it is useful to show that intractability is not always the case for computingpossible/necessary winners in the general case.We stress that worst-case complexity results like these are only the start to our understanding the complexity of com-puting possible and necessary winners. The complexity of these problems in practice may still be easy. For example, anumber of recent theoretical results suggest that the closely related problem of manipulating an election may be NP-hardin the worst case but computationally easy in practice [11].Possible and necessary winners are useful in many scenarios including preference elicitation [6]. In fact, elicitation canbe terminated when the set of possible winners coincides with that of the necessary winners [10]. We show that decidingwhen to terminate the elicitation process for the cup rule with weighted votes is a computationally intractable problem.However, if the preference aggregation function is IIA, preference elicitation can be stopped in polynomial time. This canbe done by focusing just on the incompleteness concerning those candidates which are possible and necessary winners,allowing us to ignore all other candidates.The paper is a revised and an extended version of [18,17,22].2. Basic notionsWe now introduce some basic notions on which our work is based. First, we give the definitions regarding preferencerelations and incomplete profiles. We, then, consider the notions of preference aggregation functions, possible and necessarywinners and describe how to represent compactly the set of the results of a preference aggregation function. We concludeby motivating the usefulness of weighted votes in terms of some real-world setting.2.1. Preferences and incomplete profilesWe assume that each agent’s preferences (that is, each agent’s vote) are specified via a partially specified pre-order over theset of possible candidates, that we will denote by Ω .1 A partially specified pre-order is a pre-order (PO) (that is, a reflexive,antisymmetric and transitive relation) plus an additional set of pairs that represent unspecified preferences. More precisely,given two candidates A and B, an agent can specify one of the following:• A < B, that is, B is preferred to A;• A > B, that is, A is preferred to B;• A ∼ B, that is, A and B are equally preferred;• A (cid:4)(cid:5) B, that is, A and B are incomparable (i.e., neither A > B nor B > A, nor A ∼ B);• A?B, that is, the relation between A and B is unknown; this means that it could be any element of {∼, >, <, (cid:4)(cid:5)}.Example 1. Given candidates A, B, and C , an agent may state preferences such as A > B, B (cid:4)(cid:5) C , and A > C , or also justA > B and B (cid:4)(cid:5) C , that corresponds to preferences A > B, B (cid:4)(cid:5) C and A?C . However, an agent cannot state preferences suchas A > B, B > C , C > A, or also A > B, B > C , A (cid:4)(cid:5) C since they don’t satisfy transitivity and thus they are not POs.Definition 1 (Profile). A profile is a sequence of n pre-orders p1, . . . , pn over the candidates, one for each agent i ∈ {1, . . . , n},describing the preferences of the agents. The pre-order of a single agent is also called a vote.1 We believe the assumption of agents expressing their preferences via pre-orders is reasonable in the context of this paper, although it is known thatsometimes preferences of human beings are not transitive.1274M.S. Pini et al. / Artificial Intelligence 175 (2011) 1272–1289When one or more of these pre-orders is partially specified, we have an incomplete profile.Definition 2 (Incomplete profile). An incomplete profile is a sequence of n partially specified pre-orders ip1, . . . , ipn overcandidates, one for each agent i ∈ {1, . . . , n}.Example 2. Given three agents and three candidates A, B, and C , a possible incomplete profile is (( A > B > C )2; ( A > C ,A > B, B?C ); (C > A, A?B, B?C )).Definition 3 (Completions of a profile). Given a profile p, a completion of p is a profile obtained from p by replacing every ?with an element in {>, <, ∼, (cid:4)(cid:5)}. Since completions are profiles, the replacement of every ? with an element in {>, <, ∼, (cid:4)(cid:5)}must be done in such a way as to respect transitivity.2.2. Social welfare and preference aggregationSocial welfare functions [2] are functions from profiles to pre-orders. Social choice functions (also known as voting rules) [5]f (p) is the pre-order obtainedare functions from profiles to candidates. Given a profile p and a social welfare function f ,applying f to p. We will denote with f (p)( A, B) the restriction of the pre-order f (P ) to A and B. When p is obvious fromthe context, we will simply write f ( A, B).In what follows we will consider social welfare functions and social choice functions that take polynomial time to apply.This assumption allows us to obtain stronger intractability results.Example 3. An example of a social welfare function is the Pareto rule [2]. The Pareto social welfare function f works asfollows: given a profile p, for any two candidates A and B, if all agents say A > B or A ∼ B and at least one says A > B inp, then A > B in f (p); if all agents say A ∼ B in p, then A ∼ B in f (p); otherwise, A (cid:4)(cid:5) B in f (p).Example 4. An example of a social choice function is the plurality rule [2]: given a totally ordered profile, the candidatevoted first by most agents wins. Clearly, either several candidates may win, or some tie-breaking rules must be used toselect a single winner. If there are just two candidates, plurality is also called the majority rule. Another well-known socialchoice rule is Borda: given m candidates, the agents preferences are used to rank them (1st gets m − 1 points, 2nd getsm − 2 points, etc., last one gets 0 points), and the candidate with the most points wins.Given a social welfare function, we define a corresponding preference aggregation function as follows.Definition 4 (Preference aggregation function). Given a social welfare function f , its corresponding preference aggregationfunction, written pa f , is a function from incomplete profiles to sets of pre-orders that maps every incomplete profile ip =(ip1, . . . , ipn), into the set pa f (ip) = { f (p1), . . . , f (pk)}, that will be called the set of results of f on profile ip. The set of theresults is obtained by applying f to all the completions of ip, say p1, . . . , pk.Example 5. Consider the Pareto social welfare function f described in Example 3. In Fig. 1 we show how its correspondingpreference aggregation function works. Assume we have three agents and three candidates A, B, and C , and that the agentsexpress their preferences via the incomplete profile ip = (ip1, ip2, ip3) shown in the upper part of Fig. 1. We consider allthe completions of ip and we obtain the profiles p1 and p2. Note that these two profiles are the only two completions ofip. In fact, the completion with A ∼ C (resp., A < C ) in ip1 would not be consistent with the known part of ip1, since, bytransitivity, it should be A ∼ C > B (resp., B < A < C ) and thus C > B (resp., B < C ) and not B (cid:4)(cid:5) C . Finally,is appliedto both p1 and p2, thus obtaining the set of the result pa f (ip) = { f (p1), f (p2)}. The notion of the combined result will bedefined later in the paper.fThe literature on social welfare has considered several desired properties of social welfare and social choice functions.Such properties have often been used to derive crucial impossibility results, such as Arrow’s theorem [3,1] and Gibbard–Satterthwaite’s theorem [12,20], that give interesting insights about the fairness and manipulability of such functions. Inparticular, Arrow’s theorem shows that it is impossible to have at the same time certain reasonable properties (such asnon-dictatorship and unanimity), while Gibbard–Satterthwaite’s theorem shows that a function is always either dictatorialor manipulable, if all candidates can win. In this paper we will consider some of these desirable properties, that we willsometimes assume to prove our results.The first desirable property we consider is anonymity [2].2 In the rest of the paper we will use shortenings such as A > B > C for A > B, B > C and A > C .M.S. Pini et al. / Artificial Intelligence 175 (2011) 1272–12891275Fig. 1. An incomplete profile ip, its completions p1 and p2, results f (p1) and f (p2), and combined result cr( f , ip).Definition 5 (Anonymity). A social welfare function forder of the votes within the profile.is said to be anonymous when the result does not depend on theWe assume from now on that all social welfare functions are anonymous. The second desired property we consider isindependence of irrelevant alternatives (IIA) [2].Definition 6 (IIA). A social welfare function fB, f ( A, B) depends only on the relation between A and B in the preference orderings of p.is said to be IIA when, for every profile p, for every pair of candidates A andMany preference aggregation functions are IIA (such as the Pareto rule shown in Example 3), and this is a property whichis related to the notion of fairness in voting theory [2].Another desired property that a social choice function can satisfy is monotonicity.Definition 7 (Monotonicity). A social welfare function f is monotonic if, for any two profiles p and pA and B, if passing from p to p, B improves with respect to A in the preference ordering of an agent i and p j = pand any two candidates(cid:7)j for(cid:7)), B improves with respect to A. A candidate B improves with respect to anotherallcandidate A if the relationship between A and B does not move left along the following sequence: >, ((cid:4)(cid:5) or ∼), <.3j (cid:8)= i, then, passing from f (p) to f (p(cid:7)(cid:7)In words, if B is preferable to A in the result, and we move to a profile where B is not worsened w.r.t. A, then B is stillpreferable to A in the new result.Example 6. The Pareto rule shown in Example 3 is both IIA and monotonic.2.3. Necessary and possible winnersWe extend the notions of possible and necessary winners presented in [14] for total orders to the case of pre-orders.A necessary winner must be a winner, no matter how incompleteness is resolved in the incomplete profile, while a possiblewinner is a winner in at least one possible completion of the incomplete profile.Definition 8 (Necessary winner). Given a social welfare function f and an incomplete profile ip, a necessary winner ofgiven ip is a candidate which is a maximal element in all POs contained in pa f (ip).4fDefinition 9 (Possible winner). Given a social welfare function f and an incomplete profile ip, a possible winner is a candidatewhich is a maximal element in at least one of the POs contained in pa f (ip).We will write NW( f , ip) and PW( f , ip) for the set of necessary and possible winners of f on profile ip. We will some-times omit f and/or ip, and just write NW and PW when the two parameters are obvious or irrelevant.Example 7. In Example 5, candidates A and B are necessary winners, since they are maximal elements in all POs f (pi), forall i = 1, 2. Candidate C is a possible winner, since it wins in f (p2). However, C is not a necessary winner, since it does notwin in f (p1).3 For example, B improves with respect to A if it passes from A (cid:4)(cid:5) B to A < B or if it remains the same.4 In a pre-order, a candidate C is a maximal element if there is no candidate Csuch C(cid:7) > C .(cid:7)1276M.S. Pini et al. / Artificial Intelligence 175 (2011) 1272–12892.4. Combined resultThe set of results of a preference aggregation function can be exponentially large. We will therefore also consider acompact representation that is polynomial in size. This may throw away information by compacting together results into asingle combined result.Definition 10 (Combined result). Given a social welfare function f and an incomplete profile ip, the combined result of f onip, denoted by cr( f , ip), is a graph, whose nodes are the candidates, and whose arcs are labeled by non-empty subsets of{<, >, ∼, (cid:4)(cid:5)}. Label l is on the arc between candidates A and B if there exists a PO in pa f (ip) where A and B are relatedby l. If an arc is labeled by set {<, >, ∼, (cid:4)(cid:5)}, we will say that it is fully incomplete. Otherwise, we say that it is partiallyincomplete. The set of labels on the arc between A and B will be called rel( A, B).Example 8. Consider the preference aggregation function and the profile presented in Example 5. The corresponding com-bined result is shown in the right part of Fig. 1. In this combined result, no arc is fully incomplete.2.5. Weighted votesAs in [9], we will consider both weighted and unweighted agents. An agent whose weight is an integer k can be viewedas k agents who vote identically. Although human elections are often unweighted, the addition of weights makes votingschemes more general. Weighted voting systems are also used in a number of real-world settings like shareholder meetingsand elected assemblies. Weights are useful in multi-agent systems where we have different types of agents. Weights are alsointeresting from a computational perspective. First, weights can increase computational complexity. Second, the weightedcase informs us about the unweighted case when we have probabilistic information about the votes. For instance, if it isNP-hard to compute if the election can be manipulated with weighted votes, then it is NP-hard to compute the probabilityof a candidate winning when there is uncertainty about how the unweighted votes have been cast [9]. To reduce the impactof ties, we assume that the sum of weights is odd.3. Complexity of winner determinationWe now give worst-case complexity results about computing and testing possible and necessary winners, as well asfinding a good approximation of such a set of winners.3.1. Unweighted votesWe first assume we have unweighted agents. In this context, we analyze the complexity of computing and testingpossible and necessary winners, and also of finding good approximations of them, both when we have a bounded numberof candidates and when we have an unbounded number of candidates.3.1.1. Bounded number of candidatesIf we have a bounded number of candidates and unweighted votes, the possible and necessary winners can be computedin polynomial time.Given an incomplete unweighted profile over a bounded number of candidates, a voting rule r, and a candidate A,we say that UnweightedBoundedPossibleWinner(r) holds iff A is a possible winner of the election, and we say thatUnweightedBoundedNecessaryWinner(r) holds iff A is a necessary winner of the election.Theorem 1. Given a voting rule r, UnweightedBoundedPossibleWinner(r) and UnweightedBoundedNecessaryWinner(r) areboth polynomial.Proof. By assumption, the underlying social welfare function is anonymous. If there are n agents and m candidates, then(n + 1)m!is an upper bound for the number of completions to consider since each of the m! possible votes can be chosenby k possible agents, where k is between 0 and n. As m is bounded, we can enumerate all such completions, and apply thesocial welfare function to them in polynomial time. Hence, computing exactly the sets of possible and necessary winners ispolynomial.5 (cid:2)5 A similar argument was made in [9,8] to show that manipulation of an election by a coalition of agents is polynomial when the number of candidatesis bounded.M.S. Pini et al. / Artificial Intelligence 175 (2011) 1272–128912773.1.2. Unbounded number of candidatesSuppose now that the number of candidates is not bounded. In this context, testing necessary and possible winners isNP-hard, even if we restrict ourselves to partially specified but total orders. We will consider the following, well known,voting rule.Definition 11 (Single Transferable Vote). Single Transferable Vote with one winner (STV) [4] is a voting rule where the profileconsists of a set of total orders over candidates, and the quota of an election (that is, the minimum number of votesnecessary to get elected) is (cid:9)n/2(cid:10) + 1, where n is the number of agents. Initially, an agent’s vote is allocated to his mostpreferred candidate. If no candidate exceeds the quota, the candidate with the fewest votes is eliminated, and the procedureis repeated with the new profile until some candidate reaches the quota.6Example 9. Consider the profile p = (( A > B > C); (B > A > C); (C > A > B); (B > A > C); ( A > C > B)). We now show howthe STV rule works on p. The minimum number of votes to get elected, i.e., the quota is 3. In the first round both A andB receive 2 points, and C receives 1 point. Hence, no agent reaches the quota. Then, C is removed and the procedure isrepeated. In the second round only A reaches the quota and thus he is elected.In what follows we consider STV elections in which some total orders, provided by the agents, may be partially specified.In general, given an incomplete unweighted profile over an unbounded number of candidates, a voting rule r, anda candidate A, we say UnweightedUnboundedPossibleWinner(r) holds iff A is a possible winner of the election. Wealso define Effective Preference(r) as the problem of determining if a particular candidate can win an election with oneunknown vote.Theorem 2. UnweightedUnboundedPossibleWinner(STV) is NP-complete.Proof. Membership in NP follows by giving a completion of the profile in which a candidate A wins. NP-completenessfollows from the result that Effective Preference(STV) is NP-complete [4]. In fact, an election with one unknown vote is aspecific incomplete profile. Thus one can reduce polynomially (by just taking the same profile) Effective Preference(STV)on candidate A. UnweightedUnboundedPossibleWinner(STV). (cid:2)Given an incomplete unweighted profile over an unbounded number of candidates, a voting rule r and a candidate A,we say UnweightedUnboundedNecessaryWinner(r) holds iff A is a necessary winner of the election.Theorem 3. UnweightedUnboundedNecessaryWinner(STV) is coNP-complete.Proof. Let us assume that we are considering whether candidate A is a necessary winner. The complement problem is inNP since we can show membership by giving a completion of the profile in which some B different from A wins.To show completeness of the complement problem, we give a reduction from Effective Preference(STV) in which Bappears in first place in at least one vote. This restricted form of Effective Preference(STV) is NP-complete [4]. Consider anincomplete profile p in which n + 1 votes have been cast, B has at least one first place vote, one vote remains unknown, andwe wish to decide if B can win. We construct a new election from p with n new additional votes, and one new candidateA. We put A at the top of each of these new votes, and rank the other candidates in any order within these n votes. Weplace A in last place in the original n + 1 votes, except for one vote where B is in first place (by assumption, one such votemust exist) where we place A in second place and shift all other candidates down. We observe that A will survive till thelast round as A has at least n votes and no other candidate can have as many votes till the last round. We also observethat, if B remains in the election, the score given to each candidate by STV remains the same as in the original election, sothe candidates are eliminated in the same order up till the point B is eliminated. If B is eliminated before the last round,the second choice vote for A is transferred. Since A now has n + 1 votes, A is unbeatable and must win the election. If Bsurvives, on the other hand, to the last round, we can assume A is ranked at the bottom of the unknown vote. All the othercandidates but B and A have been eliminated so B has n + 1 votes and is unbeatable. Hence, A is not the necessary winnerof this new election if and only if B is a possible winner in the Effective Preference election. Thus determining if A is notthe necessary winner of this new election is as hard as determining if B is a possible winner of the Effective Preferenceelection which is known to be NP-complete. (cid:2)Given these results, we might wonder if it is easy to compute a reasonable approximation of the sets of possible andnecessary winners in the worst-case. Unfortunately this is not the case. The reduction described in the proof of Theorem 3shows that we cannot easily approximate the set of possible winners within a factor of two. In fact, we can show that wecannot easily approximate the set of possible winners within any constant factor.6 STV requires a tie-breaking rule (at different stages of the execution of the protocol). This rule is usually left undefined. The results in this article donot depend on tie-breaking rules.1278M.S. Pini et al. / Artificial Intelligence 175 (2011) 1272–1289Theorem 4. Given the STV rule and an incomplete unweighted profile over an unbounded number of candidates, it is NP-hard to returna superset of its possible winners, PW∗| < k|PW| for some given positive integer k., in which we guarantee |PW∗Proof. We again give a reduction from Effective Preference(STV) in which A appears in first place at least in one vote.Consider an incomplete profile p in which n + 1 votes have been cast, A has at least one first place vote, one vote remainsunknown, and we wish to decide if A can win. We construct a new election from p. We make k copies of p. In the ithcopy c(p)i , we subscript each candidate with the integer i. We add n new additional votes, and one new candidate B. Weput B at the top of each of these new votes, and rank all the other candidates except Ai in any order within these n votes.The ranking of the candidates Ai is left unknown but beneath B. In each c(p)i , we place B in last place except for one votewhere Ai is in first place (by assumption, one such vote must exist) where we place B in second place and shift all othercandidates down. Finally, for each candidate in c(p) j not in c(p)i except for A j , we rank them in any order at the bottomof the votes in c(p)i . The ranking of the candidates Ai is again left unknown but beneath B. We observe that B will survivetill all but one candidate has been eliminated from one of the c(p)i . We also observe that if Ai remains in the election,then the score given to each candidate by STV remains the same as in the original election so the candidates in c(p)i areeliminated in the same order up till the point Ai is eliminated. Suppose A cannot win the original election. Then Ai willalways be eliminated before the final round. The second choice vote for B is transferred. Since B now has at least n + 1votes, B is unbeatable and must win the election. Suppose, on the other hand, that A can win the original election. Then Aican survive to be the last remaining candidate in c(p)i . We can assume B is ranked at the bottom of the unknown votes ofall the candidates with an index i and above all the candidates with an index j different from i. Thus Ai has n + 1 votes. Ifwe have the corresponding ranking in the other unknown votes, A j for j (cid:8)= i will also survive. Since B has only n votes, Bwill be eliminated. It is now possible for any of the candidates, Ai where 1 (cid:2) i (cid:2) k to win depending on how exactly the Aiare ranked in the different votes. Thus the set of possible winners is {ai | 1 (cid:2) i (cid:2) k} plus B if A is not a necessary winnerin the original election. Hence, if A is a possible winner in the original election, the size of the set of possible winners is∗| < k guaranteesgreater than or equal to k, whilst if it is not, the set is of size 1. If we know that |PWthat |PW| = 1, that B is the necessary winner, and hence that A is not a possible winner in the original election. (cid:2)∗| < k|PW|, then |PWSimilarly, we cannot approximate efficiently the set of necessary winners within some fixed ratio.Theorem 5. Given the STV rule and an incomplete unweighted profile over an unbounded number of candidates, it is NP-hard to return|NW| whenever |NW| > 0 for any given positive integer k.a subset of its necessary winners, NW, in which we guarantee |NW∗∗| > 1kProof. In the reduction used in the proof of Theorem 4, |NW| = 1 if A is a possible winner in the original election and 0∗| = 1.otherwise. Suppose A is a possible winner. Then in the new election, |NW| = 1. As |NWThus, the size of NWwill determine if A is a possible winner. (cid:2)|NW|, it follows that |NW∗| > 1k∗3.2. Weighted votesWe now show that, with weighted votes, when we have at least a certain number of candidates, it is intractable inthe worst-case to compute the possible and necessary winners, both with an unbounded number of candidates and with abounded number of candidates.3.2.1. Bounded number of candidatesWhen we have weighted agents and a bounded number of candidates, computing possible and necessary winners iscomputationally intractable in the worst case. To show this, we will consider as voting rule the cup (also known as knockoutor sequential majority voting) rule.Definition 12 (Cup rule). The cup rule [16] maps profiles into a single candidate, called the winner. The winner is the resultof a series of pairwise majority elections between candidates. The cup rule is defined by a binary tree (also called anagenda), with as many leaves as the number of candidates, where each leaf is labeled with one candidate. Each non-leafis assigned to the winner of the majority election between the candidates labeling the children. The candidate labeling theroot is the overall winner.In all our proofs, we use a balanced binary tree, but this is not necessary for the results to go through.Example 10. Assume we have three candidates A, B, and C , and the cup rule as voting rule. Consider the agenda where Amust first play against B, and then the winner, called w 1, must play against C . The winner, called w 2, is the overall winner.If we have a profile p = (( A > B > C); ( A > C > B); (C > A > B)), then w 1 = A and w 2 = A, i.e., the overall winner of thecup rule is A.M.S. Pini et al. / Artificial Intelligence 175 (2011) 1272–12891279Given an incomplete weighted profile over a bounded number of candidates, a voting rule r and a candidate A, we sayWeightedBoundedPossibleWinner(r) holds iff A is a possible winner of the election.Theorem 6. WeightedBoundedPossibleWinner(C up) is NP-complete when there are 3 or more candidates.Proof. Let us consider candidate A. Membership in NP follows by giving a completion of the profile in which A wins. Wegive a reduction from the number partitioning problem. Consider the cup where A plays B and the winner thus plays C .We have a bag of integers, ki with sum 2k and we wish to decide if they can be partitioned into two bags, each with sumk. We will show that we can build an election where we can complete the incomplete weighted profile so that C wins (i.e.,C is a possible winner) iff such a partition exists. We suppose the following votes are given: 1 vote for C > B > A of weight1, 1 vote C > A > B of weight 2k − 1, and 1 vote B > C > A of weight 2k − 1. Hence, C is ahead of A by 4k − 1 votes,C is ahead of B by 1 vote and B is ahead of A by 1 vote. For each ki in the bag of integers, we have an incomplete voteof weight 2ki in which A > C is fixed, but the rest of the vote is incomplete. We are sure A beats C in the final result by1 vote whatever completion takes place. We now show that the incomplete weighted profile can be completed so that Bbeats A and C beats B (and thus C is a possible winner) iff there is a partition of size k.Assume that such a partition exists, and that votes in one partition have A > C > B and the votes in the other haveB > A > C . Thus, B beats A overall and C beats B. Thus C is the winner.On the other hand, suppose there is a way to complete the preferences so that C wins. This can only happen if B beatsA and C then beats B. In fact, if A beats B in the first round, A will beat C in the second round, since we have shownbefore that A beats C overall, and then A will be the final winner. For C to beat B, at least half the weight of incompletevotes must rank C above B. Similarly, for B to beat A, at least half the weight of incomplete votes must rank B above A.Since all votes rank A above C , B cannot be both above A and below C . Thus precisely half the weight of incomplete votesranks B above A and half ranks C above B. Hence, we have a partition of equal weight. Therefore, we can complete theincomplete profile so that C wins iff there is a partition of size k. (cid:2)Given an incomplete weighted profile over a bounded number of candidates, a voting rule r and a candidate A, we sayWeightedBoundedNecessaryWinner(r) holds iff A is a necessary winner of the election.Theorem 69 in [7] shows that constructive manipulation (i.e., a manipulation done to make somebody win) by a coali-tion of agents with weighted votes is polynomial. Thus, it follows immediately that, if we have a partial weighted profile,it is polynomial to determine if A is a necessary winner. It is, in fact, sufficient to test if the manipulation for anyother candidate is successful. This is polynomial, since we are assuming a bounded number of candidates. However, thisis a restricted case since incompleteness occurs only in a specific form. The following theorem shows that, in general,WeightedBoundedNecessaryWinner(r) is a computationally intractable problem.Theorem 7. WeightedBoundedNecessaryWinner(C up) is coNP-complete when there are 4 or more candidates.Proof. Assume we are considering candidate A. The complement problem is in NP since we can show membership bygiving a completion of the profile in which A does not win. To show that with 4 or more candidates it is NP-hard, we givea reduction from the number partitioning problem. We have a bag of positive integers, ki with sum 2k and we wish todecide if they can be partitioned into two bags, each with sum k. We will build an incomplete profile such that A is not anecessary winner if and only if there is such a partition. We will consider the cup where D plays against C , and the winnerthen plays against B. The winner of this match goes forward to the final match against A.We construct an incomplete profile where the following votes are given: 1 vote for B > A > C > D of weight 1, 1 voteB > A > D > C of weight 2k − 1, and 1 vote A > C > B > D of weight 2k − 1. For the first number, k1 in the bag of integers,we have a vote for A > C > D > B of weight 2k1. For each other number, ki where i > 1, we have an incomplete vote ofweight 2ki in which D > B is fixed, but the rest of the vote is incomplete. We are sure that D beats B in the final result by1 vote whatever completion takes place. Similarly, we are also sure that A beats D, and A beats C .Thus, the only winners in the considered cup are A or B. If we complete preferences so that in all incomplete votes wehave A > B, then A will win overall. We now show that there is a completion that makes B win iff there is a partition ofequal weight.Suppose there is such a partition and that the complete votes in one partition have C > D > B and the complete votesin the other have D > C > B. Thus, C beats D overall, and B beats C . We suppose also that enough of the incomplete votesare completed with B > A for B to beat A. Thus B is the overall winner.On the other hand, suppose there is a way to complete the preferences so that B wins. This can only happen if C beatsD, B then beats C and B finally beats A. If D beats C in the first round, D will beat B in the second round and then go outto A. For B to beat C , at least half the weight of incomplete votes must rank B above C . Similarly, for C to beat D, at leasthalf the weight of incomplete votes must rank C above D. Since all votes rank D above B, C cannot be both above D andbelow B. Thus precisely half the weight of incomplete votes ranks C above D and half ranks B above C . Hence, we have apartition of equal weight. Therefore, B can win iff there is a partition of equal weight. Thus, A is not a necessary winner iffthere is a partition of size k. (cid:2)1280M.S. Pini et al. / Artificial Intelligence 175 (2011) 1272–1289Table 1Complexity results of computing/testing possible and necessary winners, and of finding an upper approximation of possible winners and a lower approxi-mation of necessary winners.Weighted+BoundedUnweighted+BoundedWeighted+UnboundedUnweighted+UnboundedPWNW∗PWNW∗NP-complete (Cup, Th. 6)coNP-complete (Cup, Th. 7)??P (Th. 1)P (Th. 1)P (Th. 1)P (Th. 1)NP-complete (Cup, Cor. 7.1)coNP-complete (Cup, Cor. 7.2)NP-hard (STV, Cor. 7.3)NP-hard (STV, Cor. 7.4)NP-complete (STV, Th. 2)coNP-complete (STV, Th. 3)NP-hard (STV, Th. 4)NP-hard (STV, Th. 5)It is an interesting open question to determine if WeightedBoundedNecessaryWinner(C up) is polynomial when thereare 3 or fewer candidates.3.2.2. Unbounded number of candidatesTheorems 6 and 7 show that testing possible and necessary winners is NP-hard when we have a bounded number ofcandidates. These worst-case complexity results continue to hold when we have an unbounded number of candidates.Given an incomplete weighted profile over an unbounded number of candidates, a voting rule r and a candidate A, wesay WeightedUnboundedPossibleWinner(r) holds iff A is a possible winner of the election.Corollary 7.1. WeightedUnboundedPossibleWinner(C up) is NP-complete when there are 3 or more candidates.Proof. A witness which can be checked in polynomial time is again a completion of the profile in which a candidate Awins. NP-hardness holds using the same argument as Theorem 6. (cid:2)Given an incomplete weighted profile over an unbounded number of candidates, a voting rule r and a candidate A, wesay WeightedUnboundedNecessaryWinner(r) holds iff A is a necessary winner of the election.Corollary 7.2. WeightedUnboundedNecessaryWinner(C up) is coNP-complete when there are 4 or more candidates.Proof. A witness for the complement problem which can be checked in polynomial time is again a completion of the profilein which a candidate A does not win. NP-hardness holds using the same argument as Theorem 7. (cid:2)If we have weighted votes, then, as in the case with unweighted votes, we cannot approximate efficiently the set ofpossible and necessary winners within some fixed ratio.Corollary 7.3. Given the STV rule and an incomplete weighted profile over an unbounded number of candidates, it is NP-hard to returna superset of its possible winners, PW∗| < k|PW| for some given positive integer k., in which we guarantee |PW∗Proof. It follows from Theorem 4. If it is NP-hard to find a certain approximation of the possible winners when we haveunweighted votes, then it is also NP-hard to find this approximation when we have weighted votes. To show this we canuse the same proof used to prove Theorem 4 assuming that all the weights are equal to one. (cid:2)Corollary 7.4. Given the STV rule and an incomplete weighted profile over an unbounded number of candidates, it is NP-hard to return|NW| whenever |NW| > 0 for any given positive integer k.a subset of its necessary winners, NW, in which we guarantee |NW∗∗| > 1kProof. It follows from Theorem 5 for the same reasoning performed in the proof of Corollary 7.3, i.e., if it is NP-hard tofind a certain approximation of the necessary winners when we have unweighted votes, then it is also NP-hard to find thisapproximation when we have weighted votes. To show this we can use the same proof used to prove Theorem 5 assumingthat all the weights are equal to one. (cid:2)3.3. Summary of the complexity resultsAll our complexity results are summarized in Table 1. It is possible to see that the only case where it is computationallyeasy in the worst-case to find possible and necessary winners, is when we have unweighted votes and a bounded number ofcandidates. Such a case is of interest to social choice [2] where human elections are analyzed: all the agents have the sameimportance, thus agents are unweighted, and they vote on a bounded number of candidates. Being able to find easily theset of possible and necessary winners is useful, as we will see below, for example to decide when to terminate a preferenceelicitation process [6]. In fact, when the set of possible winners coincides with the set of necessary winners, elicitation canbe stopped, thus avoiding posing useless questions to agents.M.S. Pini et al. / Artificial Intelligence 175 (2011) 1272–12891281If instead we relax one of the conditions above, that is, if we allow for weighted agents, or if we allow for an unboundednumber of candidates, then the complexity of testing if a candidate is a possible or a necessary winner becomes an in-tractable problem in the worst-case. Weights are typical in Artificial Intelligence (AI) applications. For example, they areuseful in multi-agent systems where there are different types of agents. Moreover, in AI, differently from human elections,it is very common to have an unbounded number of alternatives to consider when making a decision. The hardness resultsthat we have shown in these settings can be useful as a barrier to manipulation. Gibbard–Satterthwaite’s theorem [13,21]states that, under some reasonable conditions, there exist circumstances where it is possible to manipulate an election, i.e.,it is possible that some agent reveals insincerely his preferences to obtain a better result. Our complexity results show thatmanipulation is computationally intractable in the worst-case. In fact, since it is intractable to know if a candidate is a pos-sible winner, a coalition of agents may have little incentive to complete their votes insincerely to make him win. Moreover,since it is intractable to find out if a candidate is a necessary winner, a coalition of agents may have little incentive tocomplete their votes insincerely to make him lose.In the cases considered above (that is, unbounded number of candidates and weighted/ unweighted agents) we haveshown that, it is intractable in the worst-case not only to test if a candidate is a possible or a necessary winner, but alsoto find good approximations of such sets of winners. In particular, we have shown that computing an upper approximationof the possible winners and a lower approximation of the necessary winners is an intractable problem in the worst case.We conjecture that such a computation might be easy when we consider a bounded number of candidates (and weightedvotes). We plan to investigate such a scenario in the future.4. Tractable casesWe now determine sufficient conditions on the preference aggregation function that make it polynomial to compute thesets of possible and necessary winners. We recall that such a computation is polynomial when votes are unweighted andthere is a bounded number of candidates, while in all the other cases it is intractable in the worst-case. We will show thatin all these cases, if we require that the social welfare function associated with the preference aggregation function be IIAand monotonic, it is polynomial to compute the possible and necessary winners.4.1. Unweighted votesWhen we have unweighted votes, testing possible and necessary winner, as well as finding good approximations of suchsets, is only intractable in the worst-case when we have an unbounded number of candidates. We show that, in this case, ifthe preference aggregation function is IIA and monotonic, possible and necessary winners can be computed in polynomialtime by starting from an approximation of the combined result, that can be computed in polynomial time.When instead we have a bounded number of candidates, we have shown in the previous section that is polynomial tocompute possible and necessary winners in general. Thus, trivially, it continues to remain polynomial if we require that thepreference aggregation function satisfies such properties.4.1.1. Unbounded number of candidatesThe problem of computing the combined result is in general computationally intractable in the worst-case. However, weidentify some restrictions which allow us to compute a useful approximation of the combined result in polynomial time.Theorem 8. Given an incomplete profile, determining if a label is in an arc in the combined result is NP-hard for STV.Proof. The necessary winner problem can be reduced to this problem using a Cook reduction. In particular, to check if acandidate is a necessary winner it is sufficient to check if in the combined result, in every arc connecting this candidate toanother candidate, there is not the relation ‘smaller or equal’. By Theorem 3, testing if a candidate is a necessary winner isNP-hard for STV. Thus determining if a label is in an arc in the combined result is also NP-hard. (cid:2)We now identify some properties of preference aggregation functions which allow us to compute an upper approximationwith the same∗,( A, B) is a superset of the set of labels of the same arc in cr. We recall that the set of labels of an arc between Aof the combined result in polynomial time. An upper approximation of a combined result cr is a graph crarcs and the same nodes as cr, and where the set of labels of every arc between every pair of candidates A and B in cr∗say reland B in the combined result is called rel( A, B).∗First, we show how to compute rel( A, B) is a superset of rel( A, B), and thus that cr( A, B) when the preference aggregation function is IIA and monotonic. Then, we willis an upper approximation of cr.∗∗show that rel∗Algorithm 1 takes as input two candidates A and B, a preference aggregation function f , and an incomplete profile∗is IIA, to compute the setip, and it returns rel∗( A, B), we just need to ask each agent their preference over the pair A and B, and then use f to compute all possiblerelresults between A and B. Since fis monotonic, we don’t need to consider all possible completions for all agents withincompleteness between A and B, but just two completions: the completion, called S 1, where every A?B is replaced with( A, B), i.e., a set of labels of an arc between A and B in cr. Since f∗1282M.S. Pini et al. / Artificial Intelligence 175 (2011) 1272–1289Algorithm 1. Computing rel∗( A, B)∗Input: A, B: candidates, ip: incomplete profile;( A, B): sets of ordering’s operators;Output: relS(ip, A, B) ← {( AxB) ∈ ip, such that x ∈ {>, <, (cid:4)(cid:5), ∼, ?}};S 1 ← S where every ? is replaced by <;S 2 ← S where every ? is replaced by >;A rel1 B ← f (S 1);A rel2 B ← f (S 2);relreturn rel( A, B);∗∗( A, B) = {operators between rel1 and rel2 (both included) in the total pre-order >, ((cid:4)(cid:5) or ∼), < };Algorithm 2. Computing NW and PW∗( f , ip), where f : IIA and monotonic preference aggregation function and ip: incomplete profile;Input: crOutput: P , N: sets of candidates;P ← Ω ;N ← Ω ;foreach A ∈ Ω doif ∃ C ∈ Ω such that {<} ⊆ relN ← N \ A;∗( A, C) thenif ∃ C ∈ Ω such that {<} = rel∗( A, C) then P ← P \ A;return P , N;A < B, and the completion, called S2, where every A?B is replaced with A > B. Notice that, since fis IIA, we don’t needto consider complete profiles, but just the part of the profile concerning A and B. This means that transitivity issues do notarise. Function f applied to S1 (resp., S2) returns a result that we call A rel1 B (resp., A rel2 B), where rel1 and rel2 are inthe set {<, >, ∼, (cid:4)(cid:5)}. Since fis monotonic, the results of all the other completions of ip will necessarily be between rel1and rel2 (both included) in the ordering >, ((cid:4)(cid:5) or ∼), <. By taking all such relations, we obtain rel( A, B).∗We will now show that cris an approximation of the combined result that is polynomial to compute.∗Theorem 9. Given an incomplete profile ip and a social welfare function f that is IIA and monotonic, it is possible to compute in poly-( A, B) ⊇ rel( A, B). Moreover,nomial time an approximation of cr( f , ip), say cr∗∗( A, B) = {<, >, (cid:4)(cid:5), ∼}, then either relif rel∗∗( f , ip) such that, given two candidates A and B, rel∗( A, B) = rel( A, B) or rel( A, B) − rel( A, B) ⊆ {(cid:4)(cid:5), ∼}.∗( A, B) returned by Algorithm 5.2 is a superset of rel( A, B). In fact, monotonicityProof. If f is IIA and monotonic, the set relf assures that, if we consider profiles where A < B and we get a certain result, then considering profiles where A isofin a better position w.r.t. B (that is, A > B, A = B, or A (cid:4)(cid:5) B), will give an equal or better situation for A in the result.∗( f , ip) is an upper approximation of the combined result. Moreover, if rel( A, B) = {<, >, (cid:4)(cid:5), ∼}, then there is aThus, crcompletion where > is in the result, that is, the completion where we replace every A?B with A > B, and there is acompletion where < is the result, that is, the completion where we replace every A?B with A < B. Hence, the only labelsthat can be added from rel( A, B) to rel( A, B) are the elements ∼ and (cid:4)(cid:5). (cid:2)∗Example 11. Consider the Lex rule in which agents are totally ordered and, given any two candidates A and B, the relationbetween A and B in the result is the relation given by the first agent in the order that does not declare a tie between A andB. It is easy to see that this rule is both IIA and monotonic. Consider the following incomplete profile (( A > C, B > C, A?B);∗( A > B > C)). Then rel( A, B) = {<, ∼, (cid:4)(cid:5), >}, whereas rel( A, B) = {<, (cid:4)(cid:5), >}.We will now show how to determine the possible and necessary winners, given cr∗( f , ip). Consider the arc between a∗( f , ip). Then, if this arc has the label A < C , then A is not a necessary winner, sincecandidate A and a candidate C in crthere is a candidate C which is better than A in some result. If this arc only has the label A < C , then A is not a possiblewinner since we must have A < C in all results. Moreover, consider all the arcs between A and every other candidate C .Then, if no such arc has label which includes A < C , then A is a necessary winner. Notice, however, that in general, even ifthere are no arcs connecting A to every other candidate C with the unique label A < C , A could not be a possible winner.A could be better than some candidates in every completion, but there might be no completion where it is better than allof them. We will show that this is not the case if fWe now define Algorithm 2, which, given cr∗( f , ip), computes NW and PW in polynomial time.is IIA and monotonic.Theorem 10. Given a preference aggregation function f which is IIA and monotonic, an incomplete unweighted profile ip over an∗( f , ip), Algorithm 2 terminates in O (m2) time,unbounded number m = |Ω| of candidates, and its approximate combined result crreturning N = NW and P = PW.Proof. Algorithm 2 considers, in the worst case, each arc exactly once, thus runs in O (m2) time.M.S. Pini et al. / Artificial Intelligence 175 (2011) 1272–12891283∗∗( f , ip), < /∈ rel∗∗N = NW. By construction of cr( A, C) iff < /∈ rel( A, C). By Algorithm 2, A ∈ N iff ∀C, < /∈ rel( A, C), and thisimplies that there is no result in which there exists a candidate C that beats A. Thus, A ∈ NW. On the contrary, A ∈ NW iffA (cid:8)< C, ∀C ∈ Ω , for all results, from which, A ∈ N.( A, C∗, rel∗( A, C) = {<}. If ∀C ∈ Ω , < /∈ rel( A, C), either (cid:4)(cid:5) or > (or both) are also in relP = PW. A candidate A is in PW if there is no other candidate which beats it in all results. Thus, there cannot exist any∗{ A, C}. Thus, PW ⊆ P . Toother candidate C such that < is the only label in rel( A, C) and, thus by construction, also in relshow the other inclusion we consider A ∈ P and we construct a completion of ip such that A wins in its result. First, let uspoint out that for any candidate A, A ∈ P iff (cid:2)C ∈ Ω , rel( A, C), then A is never beaten byany other candidate C and A is NW and, thus, a PW. Secondly, let us consider the case in which A is such that whenever∗<∈ rel( A, C) and let us denote with X such a set of candidates. Then for everycandidate in C ∈ X we choose > whenever available and (cid:4)(cid:5) otherwise. This corresponds to replacing A?C with A > C in theincomplete profile. Such choice on AC arcs cannot cause a transitivity inconsistency and thus can be completed to a result in( A, C) = {<, ∼}. If for everywhich A is a winner. Finally, let us consider the case in which there is at least a C such that rel(cid:7)) contains exactly one label from the set: {>, (cid:4)(cid:5), ∼} then we can safely set A?C to A = C sinceother candidate Cthere is, for sure, a result with that labeling. Moreover, in such a result A is a winner. Assume, instead, that there is at least(cid:7))| > 1. This means that there is at least an agent which has not declared his preferencea candidate C(cid:7)on the pair ( A, Cwith A > Ceverywhere in the profile, we perform the transitive closure of all the modified partially specified POs, and we apply f . Wewill prove that such transitive closure does not force label < on the pair ( A, C). After the procedure, due to monotonicity,rel( A, Cand let us(cid:7), C) = {<} from the start, this would have forced rel( A, C) = {<}. However, thisnow consider rel(C(cid:7), C) ∩ {>, (cid:4)(cid:5), ∼}) (cid:8)= ∅ and any of such additional labelsis not possible since A ∈ P . This allows us to conclude that (reltogether with A = CC which can force A < C .It should be noticed that any available choice on CC can always be made safely due to the fact that the function is IIA andthat the transitive closure of the profiles has already ruled out inconsistent choices. By iterating the procedure until every ?in the incomplete profile is replaced, we can construct a result of the function in which A is a winner. (cid:2)(cid:7)) will contain exactly one label from the set: {>, (cid:4)(cid:5), ∼}. Let us assume that, after the procedure, A = C(cid:7)) and that such preference cannot be deduced by transitivity closure. We replace A?Ccan never force A < C . Clearly, if A > C∗(cid:7), C). Had it been rel, there is no labeling of C∗such that |rel(Cor A (cid:4)(cid:5) C( A, C(C∗∗(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)(cid:7)4.2. Bounded number of candidatesIn the previous section we have shown that when we have an unbounded number of candidates and unweighted votes,it is polynomial to compute possible and necessary winners when we require that the preference aggregation functionis IIA and monotonic. We can thus directly derive that, under the same assumptions regarding the voting rule, it is alsopolynomial if we have a bounded number of candidates.Corollary 10.1. If the preference aggregation function r is IIA and monotonic, then UnweightedBoundedPossibleWinner(r) andUnweightedBoundedNecessaryWinner(r) are both polynomial.Proof. It follows directly from Theorem 1. (cid:2)4.3. Weighted votesIn the presence of weighted agents, if we assume that the social welfare function is IIA and monotonic, then we can usethe same procedure shown above to find the approximate combined result and Algorithm 11 to find possible and necessarywinners, since they do not depend on the fact that the agents are weighted or not, but only on IIA and monotonicity.4.3.1. Unbounded number of candidatesTheorem 10 states that, when the social welfare function is IIA and monotonic, computing possible and necessary win-ners for unweighted agents and an unbounded number of candidates is polynomial. The same holds also for weighted agentsand an unbounded number of candidates.Corollary 10.2. Given a preference aggregation function f which is IIA and monotonic, and an incomplete weighted profile ip over an∗( f , ip), it is polynomial to compute the set of possible andunbounded number of candidates, and its approximate combined result crnecessary winners.Proof. It follows from the procedure used to compute crTheorem 10 that depends only by cr∗( f , ip). (cid:2)∗( f , ip), that holds both with and without weighted agents, and by4.3.2. Bounded number of candidatesCorollary 10.2 implies that, in presence of weighted agents, computing possible and necessary winners continues to bepolynomial also when we have a bounded number of candidates.1284M.S. Pini et al. / Artificial Intelligence 175 (2011) 1272–1289Table 2Complexity results of computing possible and necessary winners, given an IIA and monotonic preference aggregation function.f : IIA + mon.Weighted+BoundedUnweighted+BoundedWeighted+UnboundedUnweighted+UnboundedPWNWP (Cor. 10.3)P (Cor. 10.3)P (Cor. 10.1)P (Cor. 10.1)P (Cor. 10.2)P (Cor. 10.2)P (Th. 10)P (Th. 10)Corollary 10.3. Given a preference aggregation function f which is IIA and monotonic, and an incomplete weighted profile ip over∗( f , ip), it is polynomial to compute the set of possible anda bounded number of candidates, and its approximate combined result crnecessary winners.Proof. It follows immediately from Corollary 10.2. If computing possible and necessary winners is polynomial when we havean unbounded number of candidates, it continues to be polynomial also when we have a bounded number of candidates. (cid:2)4.4. SummaryTable 2 summarizes the complexity results of this section. In particular, when we require that the preference aggregationfunction is IIA and monotonic the computation of possible and necessary winners is always polynomial.5. ElicitationOne use of necessary and possible winners is in eliciting preferences [6]. Preference elicitation is the process of askingqueries to agents in order to determine their preferences over candidates. Eliciting preferences takes time and effort. Wetherefore want to stop elicitation as soon as one candidate has enough support that he must win regardless of any miss-ing preferences. Preference elicitation can be stopped when NW = PW, since we have enough information to declare thewinners. At the beginning, NW is empty and PW contains all candidates. As preferences are declared, NW grows and PWshrinks. At each step, a candidate in PW can either pass to NW or become a loser. When PW is larger than NW, we can usethese two sets to guide preference elicitation and avoid useless work.In this section we show that deciding when we can stop eliciting preferences is in general computationally intractable inthe worst-case but it is polynomial when we have unweighted agents and we require an IIA preference aggregation function.5.1. Complexity of terminating elicitationWe consider two decision problems. Given a voting rule r, if we elicit complete votes from each agent (e.g. “How doyou rank all the candidates?”), CoarseElicitationOver(r) is true iff the winners are determined irrespective of how theremaining agents vote. On the other hand, if we elicit just individual preferences (e.g. “Do you prefer Bush to Gore?”),FineElicitationOver(r) is true iff the winners are determined irrespective of how the undeclared preferences are revealed.Note that in both cases, the missing preferences are assumed to be transitive.Definition 13 (CoarseElicitationOver(r)). Input: a partial profile. Output: true iff the set of winners is the same howeverthe remaining agents vote.Definition 14 (FineElicitationOver(r)). Input: an incomplete profile. Output: true iff the set of winners is the same howeverthe incomplete profile is completed.CoarseElicitationOver(r) and FineElicitationOver(r) are in coNP as a polynomial witness for elicitation not being overare two completions of the profile in which different sets of candidates win. Since CoarseElicitation Over(r) is a special caseof FineElicitationOver(r), it is easy to see that if FineElicitationOver(r) is polynomial then CoarseElicitationOver(r) is too.Similarly, if CoarseElicitationOver(r) is coNP-complete then FineElicitationOver(r) is too. However, as we show later, theseimplications do not necessarily reverse. For example, there are voting rules where CoarseElicitationOver(r) is polynomialbut FineElicitationOver(r) is coNP-complete. Our analysis of the complexity of terminating preference elicitation considers,as in the previous sections, two different dimensions: weighted or unweighted agents, and a bounded or unbounded numberof candidates.5.1.1. Unweighted agentsWe now show that, when we have unweighted agents, computing CoarseElicitationOver(r) and FineElicitationOver(r)are both polynomial.Given an incomplete profile over a bounded number of candidates and voting rule r, we say UnweightedBounded-CoarseElicitationOver(r) holds iff CoarseElicitationOver(r) holds for this election and UnweightedBoundedFineElicita-tionOver(r) holds iff FineElicitationOver(r) holds for this election.M.S. Pini et al. / Artificial Intelligence 175 (2011) 1272–12891285Corollary 10.4. UnweightedBoundedFineElicitationOver(r) and UnweightedBoundedFineElicitationOver(r) are polynomial.Proof. As we have noticed in the proof of Theorem 1, if the number of candidates is bounded, there are only a polynomialnumber of different completions. We can thus enumerate and evaluate all these completions in polynomial time. Hencecomputing CoarseElicitationOver(r) and FineElicitationOver(r) are both polynomial. (cid:2)5.1.2. Weighted votesWe now show that there are voting rules where CoarseElicitationOver(r) is polynomial but FineElicitationOver(r) isintractable.Given an incomplete weighted profile over a bounded number of candidates, we say WeightedBoundedCoarse-ElicitationOver(r) holds iff CoarseElicitationOver(r) holds for this election and WeightedBoundedFineElicitationOver(r)holds iff FineElicitationOver(r) holds for this election.Theorem 11. WeightedBoundedFineElicitationOver(C up) is coNP-complete when there are 4 or more candidates, whilstWeightedBoundedCoarseElicitationOver(C up) is polynomial irrespective of the number of candidates.Proof. Theorem 69 in [7] gives a polynomial algorithm for a coalition of agents with weighted votes to manipulate thecup rule constructively. We use this algorithm to determine if the coalition of agents who have not voted can manipulatethe election so that each candidate in turn can win. Coarse elicitation is over iff there is only one such winner. Hence,CoarseElicitationOver(C up) is polynomial too.To show that FineElicitationOver(C up) is coNP-hard with 4 candidates, we can use a reasoning similar to the one inthe proof of Theorem 7, since deciding when FineElicitationOver(C up) coincides with the problem of determining if thereis a necessary winner. For clarity, we give the formal proof in detail.To show that FineElicitationOver(C up) is NP-hard with 4 candidates, consider the cup in which A plays B, the winnerthen plays C , and the winner of this match goes forward to the final match against D. We will reduce number partitioningto deciding if elicitation is over for this cup rule given a particular incomplete profile. Suppose we have a bag of integers, kiwith sum 2k and we wish to decide if they can be partitioned into two bags, each with sum k. We construct an incompleteprofile in which the following weighted votes are completely fixed: 1 vote for C > D > B > A of weight 1, 1 vote C > D >A > B of weight 2k − 1, and 1 vote D > B > C > A of weight 2k − 1. For the first number, k1 in the bag of integers, wehave a fixed vote for D > B > A > C of weight 2k1. For each other number, ki where i > 1, we have an incomplete vote ofweight 2ki in which A > C is fixed but the rest of the vote is unspecified. We are sure A beats C in the final result by 1vote whatever happens. Similarly, we are also sure that D beats A, and D beats B. Thus, the only winners of the cup ruleare D or C . If in all the incomplete votes we have D > C , then D will win overall. We now show that C can win iff there isa partition of equal weight. Suppose there is such a partition and that the incomplete votes corresponding to one partitionhave B > A > C whilst the incomplete votes corresponding to the other partition have A > B > C . Thus, B beats A overall,and C beats B. We suppose also that enough of the incomplete votes have C > D for C to beat D. Hence C is the winnerof the cup rule and D does not win. On the other hand, suppose C wins. This can only happen if B beats A, C then beatsB and C finally beats D. If A beats B in the first round, A will beat C in the second round and then go out to D. For Cto beat B, at least half the weight of incomplete votes must rank C above B. Similarly, for B to beat A, at least half theweight of incomplete votes must rank B above A. Since all votes rank A above C , B cannot be both above A and below C .Thus precisely half the weight of incomplete votes ranks B above A and half ranks C above B. Hence, we have a partitionof equal weight. Therefore, both C and D can win iff there is a partition of equal weight. That is, elicitation is not over iffthere is a partition of equal weight. (cid:2)Since, on weighted votes, FineElicitationOver(C up) is coNP-complete, when there are 4 or more candidates, then ingeneral, when we have a voting rule on weighted votes with 4 or more candidates, deciding when to terminate elicitationis coNP-complete.The result shown in Theorem 11 suggests that, if preferences are being combined with the cup rule, we might prefereliciting whole votes from agents as opposed to individual preferences since we can then easily decide when to stop.Computational complexity can thus motivate the choice of an elicitation strategy. Note that for the cup rule with just 3 orfewer candidates, it is polynomial to decide if elicitation is over.Theorem 12. Both WeightedBoundedFineElicitationOver(C up) and WeightedBoundedCoarseElicitationOver(C up) are poly-nomial with 3 or fewer candidates.Proof. For 2 candidates, the cup rule degenerates to the majority rule, and FineElicitationOver(C up) degenerates toCoarseElicitationOver(C up). In this case, elicitation can be terminated iff a majority in weight of votes prefer one can-didate. For 3 candidates, without loss of generality, we consider the cup in which A plays B, the winner then plays C .Suppose we have an incomplete profile over these three candidates. For A to win, they must beat B and C in pairwiseelections. We do not care about the ordering between B and C since if A wins, B and C do not meet. Thus, we complete1286M.S. Pini et al. / Artificial Intelligence 175 (2011) 1272–1289the profile placing A above B and C wherever possible, and ordering B and C as we wish. To see if B can win, we completethe profile in an analogous fashion. Finally, for C to win they must beat the winner of A and B. We therefore consider twocompletions of the profile: one in which C is placed above A, and A above B wherever possible, and the second in whichC is placed above B, and B above A wherever possible. In total, we have just four completions to consider. These can betested in polynomial time. Eliciting preferences can be terminated iff the same candidate wins in each case. Given a partialvote, we complete the profile in a similar way to test CoarseElicitationOver(C up). (cid:2)5.1.3. Uncertainty about votesMany of our results so far have considered weighted votes. One reason to consider weighted votes is that they inform usabout unweighted votes when we have uncertainty about the votes cast. Given a voting rule r, a probability distribution overthe votes, a number s ∈ [0, 1] and a candidate, Evaluation(r) is the problem of deciding if the probability of the candidateloosing is strictly greater than s. Note that [9] defines Evaluation(r) to be deciding if the probability of winning is greaterthan a given value. The two problems are closely related but we use the former as it makes our arguments simpler. As in[7], we will assume that any probability distribution over votes is specified by means of some limited form of language. Ifwe permitted arbitrary distributions, we would have the problem of specifying the probability of an exponential number ofdifferent profiles. This is impractical in general. We therefore suppose that we have a language which requires polynomialspace to specify a probability distribution over unweighted profiles in which non-zero probability is given to every profileequivalent to the completion of a given incomplete weighted profile, and zero probability to every other profile. For instance,one possible specification is simply the incomplete weighted profile. We assume that weights are given in binary and thatit takes polynomial time for a voting rule to compute the winner given a complete weighted profile.Theorem 13. Given a voting rule r, FineElicitationOver(r) is NP-hard for k candidates on weighted votes implies Evaluation(r) isalso NP-hard for k candidates on unweighted votes.Proof. We reduce FineElicitationOver(r) to Evaluation(r). Consider an incomplete profile of weighted votes. We computeone possible completion of this profile and compute who wins. Let this be the candidate A. This takes polynomial time. Wethen construct a probability distribution over unweighted votes so that each completion of the weighted profile is drawnwith a non-zero frequency. We set s = 0. For this probability distribution, Evaluation(r) of whether candidate A loses withprobability greater than 0 then decides FineElicitationOver(r) for the original weighted profile. Note that we did not needto change the number of candidates in the reduction. (cid:2)In a similar fashion, we can show that if CoarseElicitationOver(r) on weighted votes is NP-hard then Evaluation(r) isalso. However, this is a weaker result as it has a more specific hypothesis. There are voting rules like the cup rule for whichCoarseElicitationOver(r) is polynomial but FineElicitationOver(r) is NP-hard. A simple corollary of this theorem is thatwe can conclude that Evaluation(C up) is NP-hard.Corollary 13.1. Evaluation(C up) with 4 or more candidates is NP-hard.Proof. It follows from Theorem 11 and Theorem 13. (cid:2)5.2. A tractable caseWe now identify a property of the preference aggregation function that allows us to terminate the elicitation process inpolynomial time. We focus on the more general elicitation problem, i.e., on FineElicitationOver(r), that is the problem of,given voting rule r, deciding when to terminate the elicitation process if we elicit only parts of the agents’ preferences.We focus on unweighted votes. Moreover, we consider an unbounded number of candidates, since we know that, whenwe have unweighted votes and a bounded number of candidates the problem of terminating elicitation is already polyno-mial. In this context we show that, if the preference aggregation function is IIA, then we can compute in polynomial timethe set of winners of the elicitation process.Theorem 14. If f is IIA, then determining the set of winners for f in a preference elicitation is polynomial in the number of agents andcandidates.Proof. We recall that preference elicitation can be stopped when NW = PW, since we have enough information to declarethe winners. At the beginning, NW is empty and PW contains all candidates. As preferences are declared, NW grows and PWshrinks. At each step, a candidate in PW can either pass to NW or become a loser. When PW is larger than NW, we can usethese two sets to guide preference elicitation. If the preference aggregation function is IIA, then to determine if a candidateA ∈ PW − NW is a loser or a necessary winner, it is enough to ask agents to declare their preferences over all pairs involvingA and another candidate, say B, in PW. Moreover, IIA allows us to consider just one profile when computing the relationsbetween A and B in the result, and guarantees that the result is a precise relation, that is, either <, or >, or ∼, or (cid:4)(cid:5). ToAlgorithm 3. Winner determinationM.S. Pini et al. / Artificial Intelligence 175 (2011) 1272–12891287Input: PW, NW: sets of candidates; f : preference aggregation function;Output: W : set of candidates;wins: bool;while PW (cid:8)= NW dochoose A ∈ PW − NW;wins ← true; P A ← PW − { A};repeatchoose B ∈ P A ;if ∃ an agent such that A?B thenask( A, B);compute f ( A, B);if f ( A, B) = ( A > B) thenPW ← PW − {B};if f ( A, B) = ( A < B) thenPW ← PW − { A};wins ← false;P A ← P A − {B};until f ( A, B) = ( A < B) or P A = ∅ ;if wins = true thenNW ← NW ∪ { A};return NW;determine all the winners, we thus need to know the relations between A and B for all A ∈ PW − NW and B ∈ PW. Thereare examples where all such pairs must be considered. Algorithm 3, in O (|PW|2) steps eliminates enough incompleteness todetermine the winners. At each step, the algorithm asks each agent to express their preferences on a pair of candidates (viaprocedure ask( A, B)) and aggregates such preferences via function f . We assume that the effort required by the agents foranswering ask( A, B) is polynomial. Since we assume that all the social welfare functions that we consider are polynomiallycomputable, it follows that the whole computation is polynomial in the number of agents and candidates. (cid:2)Example 12. Consider the incomplete profile shown in Example 2, i.e., ip = (( A > B > C); ( A > C, A > B, B?C); (C > A,A?B, B?C)), and the Pareto social welfare function f defined in Example 3. Algorithm 3 starts by taking PW = { A, B, C},NW = ∅. Since PW (cid:8)= NW, then the algorithms selects an element from PW − NW. Suppose it selects A. Also, the Booleanvariable wins is set to true, and the set P A , i.e. the set of the possible winners different from A, is {B, C}. Then, an elementof P A , for example B, is chosen and, since there is an agent that says A?B, then the algorithm asks such an agent to revealhis preference over the pair ( A, B), and then it computes f ( A, B). Assume A > B for this agent. Since f ( A, B) is A > B, Bis a loser, and thus B is removed from PW, thus obtaining PW = { A, C}. B is also removed from P A , and thus P A = {C}.Since P A is not empty, the body of the repeat loop is performed again. The candidate C ∈ P A is chosen. Since there isno agent that states A?C , the algorithm simply computes f ( A, C), that is, A (cid:4)(cid:5) C , and C is removed from P A . Since P Abecomes empty, the algorithm exits from the repeat loop and the candidate C is added to NW. At this point PW = { A, C}and NW = { A}. Since PW (cid:8)= NW, the algorithm performs again the while loop and it chooses C ∈ PW − NW. P C contains onlyA, thus it computes f (C, A), which is A (cid:4)(cid:5) C , then P C becomes empty, and C is added to NW. Since PW = NW = { A, C},the algorithm terminates returning the winners A and C . Notice that Algorithm 3 has been able to determine the winners,starting from the incomplete profile ip, asking only one of three ? of the incomplete profile.If we use the results of the previous sections, under both IIA and monotonicity, we know how to compute efficientlythe necessary winners and the possible winners. Thus the output of Algorithm 2 can be given as the input to Algorithm 3,instead of starting with PW containing all the candidates and NW = ∅.6. Related workIn [14] preference aggregation functions for combining incomplete total orders are considered. Compared to our work,we permit both incompleteness and incomparability, while they allow only for incompleteness. Second, they consider socialchoice functions which return the (non-empty) set of winners. Instead, we consider social welfare functions which return apartial order. Social welfare functions give a finer grained view of the result. Third, they consider specific voting rules likethe Borda procedure, plurality rule, as well as for a non-positional rule like Condorcet, where it is polynomial to computepossible and necessary winners, whilst we have focused on general properties that ensure tractability.The problem of characterizing the complexity of the possible and the necessary winner problems has been investigatedalso in [23], however they don’t consider the STV voting rule or the cup rule. They show that when the profiles are partiallyordered and the votes are unweighted, the possible winner problem for the positional scoring rules, Copeland, maximin,Bucklin, and ranked pairs is NP-complete, and the necessary winner problem is coNP-complete for the Copeland and ranked1288M.S. Pini et al. / Artificial Intelligence 175 (2011) 1272–1289pairs rules. Moreover, they give polynomial-time algorithms for the necessary winner problem for scoring rules, maximinand Bucklin.We have shown that with weighted votes and an unbounded number of candidates, testing possible winners for STVis NP-hard. However, it should be noticed that for many rules used in practice including some positional scoring rules,deciding if a candidate is a possible winner is polynomial [14]. The complexity of computing possible winners is relatedto the complexity of manipulating an election [14]. For instance, it is NP-complete to determine for the Borda, Copeland,Maximin and STV rules if a coalition can cast weighted votes to ensure a given winner [9]. It follows therefore that withweighted votes, deciding if a candidate is a possible winner is NP-hard for these rules.Conitzer and Sandholm prove that CoarseElicitationOver(STV) and FineElicitationOver(STV) are coNP-complete whenvotes are unweighted and the number of candidates is unbounded [10]. On the other hand, CoarseElicitationOver(r) andFineElicitationOver(r) for r ∈ {pluralit y, Borda, veto, Copeland} with any number of candidates [10]. With weighted votes,deciding if elicitation is over can be intractable even when the number of candidates is small. For example, Conitzerand Sandholm prove that CoarseElicitationOver(STV) and FineElicitationOver(STV) are coNP-complete when votes areweighted and there are just 4 (or more) candidates [10]. However, CoarseElicitationOver(r) and FineElicitationOver(r)are polynomial for r ∈ {pluralit y, Borda, veto, Copeland} with weighted votes and any number of candidates [10]. Wehave shown that,if we have weighted votes and a bounded number of candidates, there are voting rules whereCoarseElicitationOver(r) is polynomial but FineElicitationOver(r) is intractable.7. Conclusions and future workWe have considered the aggregation of preferences of multiple agents despite the presence of incompleteness and in-comparability in the agents’ preferences. In particular, we have focused on the problem of determining if a candidate is apossible winner (i.e., a winner in at least one possible completion of the agents’ preferences) or if he is a necessary winner(i.e., a winner in all the completions of the agents’ preferences). We have analyzed the computational complexity of suchproblems, considering weighted/unweighted agents and bounded/unbounded number of candidates.We have shown that only in the case with unweighted agents and a bounded number of candidates these problemsare tractable, while in all the other cases they are intractable. We have also shown that, when we have an unboundednumber of candidates, it is also difficult to find a good approximation of the sets of possible and necessary winners. On thepositive side, we have then proved that, when the preference aggregation function is IIA and monotonic, finding possibleand necessary winners is tractable.We have then investigated how the knowledge of the possible and necessary winners can be exploited in the context ofpreference elicitation, since preference elicitation can be stopped when the set of possible winners coincides with the setof the necessary winners. We have shown that, in general, deciding when to terminate preference elicitation is intractable.However, it is polynomial if the preference aggregation function is IIA, since it is sufficient to elicit preferences that regardonly the candidates that are possible winners.Some of our results use IIA which is a strong assumption. However, we use it just to show that intractability is not in-evitable on incomplete profiles. We plan to find other cases where IIA can be relaxed. We also plan to consider the additionof constraints to agents’ preferences. This means that preference aggregation must take into account the feasibility of thecandidates. Thus possible and necessary winners must now be feasible. It is also important to consider compact knowl-edge representation formalisms to express agents’ preferences, such as CP-nets and soft constraints. Possible and necessarywinners should then be defined directly from such compact representations, and preference elicitation should concernstatements allowed in the representation language. Finally, a possibility or a probability distribution over the completionsof an incomplete preference relation can be used to provide additional information when computing possible and necessarywinners.References[1] K. Arrow, Social Choice and Individual Values, John Wiley and Sons, 1951.[2] K.J. Arrow, A.K. Sen, K. Suzumara, Handbook of Social Choice and Welfare, North-Holland, Elsevier, 2002.[3] K.J. Arrow, A difficulty in the concept of social welfare, Journal of Political Economy 58 (4) (1950) 328–346.[4] J.J. Bartholdi, J.B. Orlin, Single transferable vote resists strategic voting, Social Choice and Welfare 8 (4) (1991) 341–354.[5] S. Brams, P. Fishburn, Voting procedures, in: Handbook of Social Choice and Welfare, Elsevier, 2002.[6] L. Chen, P. Pu, Survey of preference elicitation methods, Technical Report IC/200467, Swiss Federal Institute of Technology in Lausanne (EPFL), 2004.[7] V. Conitzer, Computational aspects of preference aggregation, PhD Thesis, Computer Science Department, Carnagie Mellon University, 2006.[8] V. Conitzer, J. Lang, T. Sandholm, How many candidates are required to make an election hard to manipulate?, in: Proceedings of TARK-03, 2003,pp. 201–214.[9] V. Conitzer, T. Sandholm, Complexity of manipulating an election with few candidates, in: Proceedings of AAAI-02, 2002, pp. 314–319.[10] V. Conitzer, T. Sandholm, Vote elicitation: complexity and strategy-proofness, in: Proceedings of AAAI-02, 2002, pp. 392–397.[11] V. Conitzer, T. Sandholm, Nonexistence of voting rules that are usually hard to manipulate, in: AAAI-06, AAAI Press, 2006, pp. 627–634.[12] A. Gibbard, Manipulation of voting schemes: A general result, Econometrica 41 (1973) 587–601.[13] A. Gibbard, Manipulation of voting schemes: A general result, Econometrica 41 (3) (1973) 587–601.[14] K. Konczak, J. Lang, Voting procedures with incomplete preferences, in: Proc. IJCAI-05 Multidisciplinary Workshop on Advances in Preference Handling,2005.[15] J. Lang, Logical preference representation and combinatorial vote, Annals of Mathematics and Artificial Intelligence 42 (1) (2004) 37–71.M.S. Pini et al. / Artificial Intelligence 175 (2011) 1272–12891289[16] J.-F. Laslier, Tournament Solutions and Majority Voting, Springer, 1997.[17] M.S. Pini, F. Rossi, K.B. Venable, T. Walsh, Incompleteness and incomparability in preference aggregation, in: IJCAI 2007, Proceedings of the 20thInternational Joint Conference on Artificial Intelligence, AAAI Press, 2007, pp. 1464–1469.[18] M.S. Pini, F. Rossi, K. Brent Venable, T. Walsh, Computing possible and necessary winners from incomplete partially-ordered preferences, in: Proceedingsof ECAI-06, pp. 767–768.[19] F. Rossi, K.B. Venable, T. Walsh, mCP nets: representing and reasoning with preferences of multiple agents, in: Proceedings of AAAI-2004, 2004,pp. 322–327.[20] M.A. Satterthwaite, Strategy-proofness and arrow’s conditions: Existence and correspondence theorems for voting procedures and social welfare func-tions, Journal of Economic Theory 10 (1975) 187–217.[21] M.A. Satterthwaite, Strategy-proofness and Arrow’s conditions: Existence and correspondence theorems for voting procedures and social welfare func-tion, Economic Theory 10 (1975) 187–217.[22] T. Walsh, Complexity of terminating preference elicitation, in: Proceedings of AAMAS’08, 2008, pp. 967–974.[23] L. Xia, V. Conitzer, Determining possible and necessary winners under common voting rules given partial orders, in: Proceedings of AAAI’08, AAAIPress, 2008, pp. 196–201.