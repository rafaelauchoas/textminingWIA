Artificial Intelligence 163 (2005) 91–135www.elsevier.com/locate/artintOn the consistency of cardinal direction constraints ✩Spiros Skiadopoulos a,∗, Manolis Koubarakis ba Knowledge and Database Systems Laboratory, School of Electrical and Computer Engineering,National Technical University of Athens, Zographou, 157 73 Athens, Greeceb Intelligent Systems Laboratory, Department of Electronic and Computer Engineering,Technical University of Crete, Chania, 731 00 Crete, GreeceReceived 3 December 2003; accepted 18 October 2004Available online 15 December 2004AbstractWe present a formal model for qualitative spatial reasoning with cardinal directions utilizing a co-ordinate system. Then, we study the problem of checking the consistency of a set of cardinal directionconstraints. We introduce the first algorithm for this problem, prove its correctness and analyze itscomputational complexity. Utilizing the above algorithm, we prove that the consistency checking of aset of basic (i.e., non-disjunctive) cardinal direction constraints can be performed in O(n5) time. Wealso show that the consistency checking of a set of unrestricted (i.e., disjunctive and non-disjunctive)cardinal direction constraints is NP-complete. Finally, we briefly discuss an extension to the basicmodel and outline an algorithm for the consistency checking problem of this extension. 2004 Elsevier B.V. All rights reserved.Keywords: Cardinal direction relations; Spatial constraints; Consistency checking; Qualitative spatial reasoning✩ This is a greatly revised and extended version of a paper which appears in Proc. of CP-02, Lecture Notes inComput. Sci., vol. 2470, Springer, Berlin, 2002, pp. 341–355.* Corresponding author.E-mail addresses: spiros@dblab.ece.ntua.gr (S. Skiadopoulos), manolis@intelligence.tuc.gr(M. Koubarakis).URLs: http://www.dblab.ece.ntua.gr/~spiros (S. Skiadopoulos), http://www.intelligence.tuc.gr/~manolis(M. Koubarakis).0004-3702/$ – see front matter  2004 Elsevier B.V. All rights reserved.doi:10.1016/j.artint.2004.10.01092S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–1351. IntroductionQualitative spatial reasoning has received a lot of attention in the areas of GeographicInformation Systems [13–15], Artificial Intelligence [6,8,13,29,36–38], Databases [32] andMultimedia [44]. Qualitative spatial reasoning problems have recently been posed as con-straint satisfaction problems and solved using traditional algorithms, e.g., path-consistency[38]. One of the most important problems in this area is the identification of useful andtractable classes of spatial constraints and the study of efficient algorithms for consistencychecking, minimal network computation and so on [38]. Several kinds of useful spatialconstraints have been studied so far, e.g., topological constraints [5,6,12,13,36–38], cardi-nal direction constraints [17,25,41] and qualitative distance constraints [14,48].In this paper, we concentrate on cardinal direction constraints [17,25,32]. Cardinal di-rection constraints describe how regions of space are placed relative to one another utilizinga co-ordinate system (e.g., region a is north of region b). Currently, the model of Goyaland Egenhofer [16,17] and Skiadopoulos and Koubarakis [40,42] is one of the most ex-pressive models for qualitative reasoning with cardinal directions. The model that we willpresent in this paper is closely related to the above model but there is a significant differ-ence. The model of [16,17,40,42] basically deals with extended regions that are connectedand have connected boundaries while our approach allows regions to be disconnected andhave holes. The regions that we consider are very common in Geography, Multimedia andImage Databases [4,7,44]. For example, countries are made up of separations (islands, ex-claves, external territories) and holes (enclaves) [7].We will study the problem of checking the consistency of a given set of cardinal direc-tion constraints in our model. Checking the consistency of a set of constraints in a modelof spatial information is a fundamental problem and has received a lot of attention in theliterature [25,32,38]. Algorithms for consistency checking are of immediate use in varioussituations including:• Propagating relations and detecting inconsistencies in a given set of spatial relations[25,38].• Preprocessing spatial queries so that inconsistent queries are detected or the searchspace is pruned [31].The technical contributions of this paper can be summarized as follows:1. We present a formal model for qualitative reasoning about cardinal directions. Thismodel is related to the model of [16,17,40,42] and is currently one of the most expres-sive models for qualitative reasoning with cardinal directions. The proposed modelformally defines cardinal direction relations on extended regions that can be discon-nected and have holes. The definition of a cardinal direction relation uses two types ofconstraints: order constraints (e.g., a < b) and set-union constraints (e.g., a = a1 ∪ a2).2. We use our formal framework to study the problem of checking the consistency ofa given set of cardinal direction constraints in the proposed model. We present thefirst algorithm for this problem and prove its correctness. The algorithm is interestingand has a non-trivial step where we show how to avoid using explicitly the obviousS. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–13593but computational costly set-union constraints resulting from the definition of cardinaldirection relations.3. We present an analysis of the computational complexity of the consistency checkingproblem for cardinal direction constraints. We show that the aforementioned problemfor a given set of basic (i.e., non-disjunctive) cardinal direction constraints in n vari-ables can be solved in O(n5) time. Moreover, we prove that checking the consistencyof a set of unrestricted (i.e., disjunctive and non-disjunctive) cardinal direction con-straints is NP-complete.4. Finally, we consider the consistency checking problem of a set of cardinal directionconstraints expressed in an interesting extension of the basic model and outline analgorithm for this task. This extension considers not only extended regions but alsopoints and lines.The rest of the paper is organized as follows. In Section 2, we survey related work.Section 3 presents the cardinal direction relations and constraints of our model. In Sec-tion 4, we discuss the consistency checking of a set of basic cardinal direction constraints(expressed in the model of Section 3) and we present the first algorithm for this task. Sec-tion 5 studies the computational complexity of the consistency checking problem of basicand unrestricted sets of cardinal directions constraints. In Section 6, we outline algorithmsfor the consistency checking for an interesting extension of the basic cardinal directionmodel that we have already completed. Finally, Section 7 offers conclusions and proposesfuture directions.2. Related workQualitative spatial reasoning forms an important part of the commonsense reasoningrequired for building successful intelligent systems [10]. Most researchers in qualitativespatial reasoning have dealt with three main classes of spatial information: topological,directional and distance. Topological constraints describe how the boundaries, the interiorsand the exteriors of two regions relate [5,6,12,36–38]. For instance, if a and b are regionsthen a includes b and a externally connects with b are topological constraints. Directional(or orientation) constraints describe where regions are placed relative to one another [1,13,15,17,25,32,40,41]. For instance, a north b and a southeast b are directional constraints.Finally, distance constraints describe the relative distance of two regions [14,48]. For in-stance, a is far from b and a is close to b are distance constraints.In this paper, we concentrate on cardinal direction constraints [17,25,32,40]. Earlierqualitative models for cardinal direction relations approximate a spatial region by a repre-sentative point (most commonly the centroid) or by a representative box (most commonlythe minimum bounding box) [14,15,20,25,29,32].Depending on the particular spatial configuration these approximations may be toocrude [16,17]. Thus, expressing direction relations on these approximations can be mis-leading and contradictory (related observations are made in [28,34,45]). For instance, withrespect to the point-based approximation Spain is northeast of Portugal. Most people wouldagree that “northeast” does not describe accurately the relation between Spain and Portu-94S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135Fig. 1. Problems with point and minimum bounding box approximations.gal on a map (see Fig. 1(a)). Similar examples are very common in geography. Consideralso the direction relation between Ireland and the UK (Fig. 1(b)). Summarizing, there is ademand for the formulation of a model that expresses direction relations between extendedobjects that overcomes the limitations of the point-based and box-based approximationmodels.With the above problem in mind, Goyal and Egenhofer [16,17] and Skiadopoulos andKoubarakis [40,42] presented a model in which we can express the cardinal direction re-lation of a region a with respect to a region b, by approximating b (using its minimumbounding box) while using the exact shape of a. Informally, the above model divides thespace around the reference region b, using its minimum bounding box, into nine areas andrecords the areas where the primary region a falls into (Fig. 1(c)). This gives a directionrelation between the primary and the reference region. Relations in the above model areclearly more expressive than point and box-based models. The model of [17,40] deals withconnected regions with a connected boundary. The model that we will present in Section 3,is a variation of the original model of [17,40] that allows regions to be disconnected andhave holes. Such regions are very common in Geography, Multimedia and Image Data-bases [4,7,44]. For instance, the UK is made up from two separated territories: NorthernIreland and Great Britain (Fig. 1(b)).The consistency checking problem has been studied in detail for all the above classes ofspatial constraints. For instance, consistency checking has been examined in great extentfor topological constraints [19,38], point-based direction constraints [25] and box-baseddirection constraints [3,20]. Apart form spatial relations, consistency checking has alsobeen studied for other qualitative relations. For example, Nebel and Bürckert [30] considerthis problem for the 13 interval relations of Allen [2] and van Beek [46] for the relationsof point algebra.Typically, for the above cases, the consistency checking problem has been posedas a constraint satisfaction problem and solved using traditional algorithms like path-consistency [38]. For all the above qualitative (spatial and temporal) models, checkingthe consistency of a set of constraints can be done with a path-consistency method basedon composition. Unfortunately, in the case of cardinal direction relations studied in thispaper, composition cannot be used to decide consistency [42]. In the following section, wewill first formally define cardinal direction constraints and then present a direct algorithmthat checks the consistency of a given set of cardinal direction constraints.S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135953. A formal model for cardinal direction informationWe consider the Euclidean space R2. Regions are defined as non-empty and boundedsets of points in R2. Let a be a region. The projection of region a on the x-axis, denotedby Πx (a), is defined as the set of the x-coordinates of all the points in a. Similarly, we candefine the projection of region a on the y-axis, denoted by Πy(a). The projection on thex-axis (or y-axis) of a disconnected region is, in general, a bounded set of real numbers. Ifa region is connected then its projection on the x-axis (respectively y-axis) forms a singleinterval on the x-axis (respectively y-axis).A real number m ∈ R, is a lower bound of a set of real numbers I iff m (cid:1) x for all x ∈ I .If some lower bound of I is greater than every other lower bound of I , then it is called thegreatest lower bound or the infimum and is denoted by inf (I ). Similarly, we can define theleast upper bound or the supremum of a set of real numbers I , denoted by sup(I ) [26]. Theinfimum and the supremum of a set of real numbers are called its endpoints.For clarity, we will denote the greatest lower bound of the projection of region a on thex-axis (i.e., inf (Πx (a))) by infx(a). Similarly, supx (a), infy(a) and supy(a) are shortcutsfor sup(Πx(a)), inf (Πy (a)) and sup(Πy (a)) respectively.Let a be a region. We say that a is a box iff a is a rectangular region formed by thestraight lines x = c1, x = c2, y = c3 and y = c4 where c1, c2, c3 and c4 are real constantssuch that c1 (cid:1) c2 and c3 (cid:1) c4. Moreover, iff c1 < c2 and c3 < c4 hold, we say that a is anon-trivial box. A box is trivial if it is a point or a vertical line segment or a horizontal linesegment.The minimum bounding box of a region a, denoted by mbb(a), is the box formed bythe straight lines x = infx(a), x = supx(a), y = infy (a) and y = supy(a) (see Fig. 2). Ob-viously, the projections on the x-axis (respectively y-axis) of a region and its minimumbounding box have the same endpoints.We will consider throughout the paper the following types of regions:• Regions that are homeomorphic to the closed unit disk (i.e., the set {(x, y): x2 + y2 (cid:1)1}). The set of these regions will be denoted by REG. Regions in REG are closed, con-nected and have connected boundaries (for definitions see [9,27]). Class REG excludesFig. 2. A region and its bounding box.96S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135disconnected regions, regions with holes, points, lines and regions with emanatinglines. Connected regions have been previously studied in [17,35,42].• Regions in REG cannot model the variety and complexity of geographic entities [7].Thus, we extend class REG in order to accommodate disconnected regions and regionswith holes. The set of these regions will be denoted by REG∗. A region a belongsto set REG∗ iff there exists a finite set of regions a1, . . . , an ∈ REG such that a =a1 ∪ · · · ∪ an, i.e., set REG∗ contains all regions that can be formed by a finite unionof regions in REG. Set REG∗ is a natural extension of REG which is useful to model(possibly disconnected) land parcels and countries in Geographic Information Systems[7,12,14] or areas of an image containing similar chromatic arrangements [4]. Noticethat the results of Sections 4, 5 and 6 are not affected if we consider regions that arehomeomorphic to the open unit disk (as in [35]).• The last class of regions that we consider is an extension that covers arbitrary shapesof R2. Regions in R2 can be regions in REG∗ but can also be points, lines and regionswith emanating lines.In Fig. 3, regions a, b1, b2 and b3 are in REG (also in REG∗) and region b = b1 ∪ b2 ∪ b3is in REG∗ but not in REG. Notice that region b is disconnected and has a hole. Fig. 4presents regions that are not in REG and REG∗. Points (Fig. 4(a)), lines (Fig. 4(b)) andregions with emanating lines (Figs. 4(c)–(d)) are not homeomorphic to the closed unitdisk. All regions of Fig. 4 are naturally in R2.In the rest of this section, we will define a model that expresses cardinal direction re-lations between regions in REG∗. Then in Sections 4 and 5, we will study the problem ofchecking the consistency of a given set of cardinal direction constraint in this model. Theaforementioned problem for regions in R2 will be discussed in Section 6.The following straightforward proposition expresses an important property of regionsin REG∗.Fig. 3. Regions.∗Fig. 4. Regions not in REG.S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–13597Fig. 5. Reference tiles and relations.Proposition 1. If a ∈ REG∗ then mbb(a) is a non-trivial box. Equivalently, the followinginequalities hold:infx (a) < supx(a) and infy (a) < supy(a).Let us now consider two arbitrary regions a and b in REG∗. Let region a be related toregion b through a cardinal direction relation (e.g., a is north of b). Region b will be calledthe reference region (i.e., the region to which the relation is described) while region a willbe called the primary region (i.e., the region from which the relation is described) [17]. Theaxes forming the minimum bounding box of the reference region b divide the space into9 tiles (Fig. 5(a)). The peripheral tiles correspond to the eight cardinal direction relationssouth, southwest, west, northwest, north, northeast, east and southeast. These tiles will bedenoted by S(b), SW(b), W (b), NW(b), N(b), NE(b), E(b) and SE(b) respectively. Thecentral area corresponds to the region’s minimum bounding box and is denoted by B(b).By definition each one of these tiles includes the parts of the axes forming it. Notice that• all tiles are closed,• all tiles but B(b) are unbounded,• the union of all 9 tiles is R2, and• two distinct tiles have disjoint interiors but may share point in their boundaries, forinstance, W (b) and B(b) share the left-side of the minimum bounding box of b.If a primary region a is included (in the set-theoretic sense) in tile S(b) of some refer-ence region b (Fig. 5(b)) then we say that a is south of b and we write a S b. Similarly, wecan define southwest (SW), west (W ), northwest (NW), north (N ), northeast (NE), east(E), southeast (SE) and bounding box (B) relations. Notice that, despite the fact that sometiles have common boundaries, we can always determine the tile of the reference region bthat a given primary region a ∈ REG∗ falls in because class REG∗ does not include pointsand lines. This is so because only points and lines can be in two tiles (e.g., W and B) at thesame time, thus by excluding these regions from our domain REG∗ we achieve disjointnessof relations.If a primary region a lies partly in the area NE(b) and partly in the area E(b) of somereference region b (Fig. 5(c)) then we say that a is partly northeast and partly east of b andwe write a NE:E b.The general definition of a cardinal direction relation in our framework is as follows.98S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135Definition 1. A basic cardinal direction relation is an expression R1: · · · :Rk where(i) 1 (cid:1) k (cid:1) 9,(ii) R1, . . . , Rk ∈ {B, S, SW, W, NW, N, NE, E, SE}, and(iii) Ri (cid:4)= Rj for every i, j such that 1 (cid:1) i, j (cid:1) k and i (cid:4)= j .A basic cardinal direction relation R1: · · · :Rk is called single-tile if k = 1; otherwise it iscalled multi-tile.Example 1. The following are basic cardinal direction relations:S, NE:E and B:S:SW:W :NW:N:E:SE.The first relation is single-tile while the others are multi-tile. Regions involved in theserelations are shown in Figs. 5(b), 5(c) and 5(d) respectively.In order to avoid confusion, we will write the single-tile elements of a cardinal directionrelation according to the following order: B, S, SW, W , NW, N , NE, E and SE. Thus, wealways write B:S:W instead of W :B:S or S:B:W . We avoid using set-theoretic notation forbasic relation and reserve this for disjunctive ones (see next section). The readers shouldalso be aware that for a basic relation such as B:S:W , we will often refer to B, S and W asits tiles.3.1. Defining basic cardinal direction relations formallyLet us first start by formally defining the single-tile cardinal direction relations of ourmodel.Definition 2. Let a and b be two regions in REG∗. Relations B, S, SW, W , NW, N , NE, Eand SE are defined as follows:a B ba S ba SW ba W ba NW ba N ba NE ba E ba SE biffiffiffiffiffiffiffiffiffinfx(b) (cid:1) infx (a), supx (a) (cid:1) supx(b), infy(b) (cid:1) infy (a), andsupy (a) (cid:1) supy(b).infx(b) (cid:1) infx (a), supx (a) (cid:1) supx(b), and supy(a) (cid:1) infy(b).supx (a) (cid:1) infx (b) and supy(a) (cid:1) infy (b).supx (a) (cid:1) infx (b), infy (b) (cid:1) infy(a), and supy (a) (cid:1) supy(b).supx (a) (cid:1) infx (b) and supy(b) (cid:1) infy (a).supx (a) (cid:1) supx(b), supy (b) (cid:1) infy(a), and infx(b) (cid:1) infx(a).supx (b) (cid:1) infx(a) and supy(b) (cid:1) infy (a).supx (b) (cid:1) infx(a), infy (b) (cid:1) infy(a), and supy (a) (cid:1) supy(b).supy (a) (cid:1) infy (b) and supx(b) (cid:1) infx (a).Using the above single-tile relations and set-union, we can define all multi-tile ones.For instance, relation NE:E (Fig. 6(a)) and relation B:S:SW:W :NW:N:E:SE (Fig. 6(b))are defined as follows:S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–13599Fig. 6. Relations and component variables.a NE:E ba B:S:SW:W :NW:N:SE:E biffiffthere exist regions a1 and a2 in REG∗ such thata = a1 ∪ a2, a1 NE b and a2 E b.there exist regions a1, . . . , a8 in REG∗ such thata = a1 ∪ a2 ∪ a3 ∪ a4 ∪ a5 ∪ a6 ∪ a7 ∪ a8,a1 B b, a2 S b, a3 SW b, a4 W b, a5 NW b,a6 N b, a7 SE b and a8 E b.In general, each multi-tile cardinal direction relation is defined as follows.Definition 3. Let a and b be two regions in REG∗. For 2 (cid:1) k (cid:1) 9, a R1: · · · :Rk b holds iffthere exist regions a1, . . . , ak ∈ REG∗ such that a1 R1 b, . . . , ak Rk b and a = a1 ∪ · · · ∪ ak.(cid:3)(cid:1)(cid:2)9i9i=1The variables a1, . . . , ak in any equivalence such as the above (which defines a basiccardinal direction relation) will be called the component variables corresponding to vari-able a. Notice that for every i, j such that 1 (cid:1) i, j (cid:1) k and i (cid:4)= j , regions ai and aj havedisjoint interiors but may share points in their boundaries (see Fig. 6).The set of basic cardinal direction relations in our model contains= 511 el-ements. We will use D∗ to denote this set. Relations in D∗ are jointly exhaustive andpairwise disjoint. Elements of D∗ can be used to represent definite information about car-dinal directions, e.g., a N b. Notice the difference between the model presented in thissection and the proposal of [17,42] that deals only with the connected regions of REG.Our approach accommodates a wider set of region (i.e., regions in REG∗) that also allowsregions to be disconnected and have holes. As a result we have 511 relations while themodel of [17,42] has 218. This enables us to express several natural spatial arrangements(e.g., a S:W b or a S:N b) that are not possible in [17,42].Using the 511 relations of D∗ as our basis, we can define the powerset 2D∗of D∗ whichcontains 2511 relations. Elements of 2D∗are called cardinal direction relations and can beused to represent not only definite but also indefinite information about cardinal directions,e.g., a {S, W } b denotes that region a is south or west of region b, i.e., (a S b) ∨ (a W b).Notice the difference between the basic cardinal direction relation S:W and the disjunc-tive cardinal direction relation {S, W }. Expression a S:W b denotes that region a lies partlyin S(b) and partly in W (b) tile of b (definite information). On the other hand, expression100S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135Fig. 7. Constraints a S:W b and a {S, W } b.Fig. 8. Members of inv(N ).a {S, W } b denotes that region a lies entirely either in S(b) or W (b) tile of b. For instance,among the spatial configurations of Fig. 7, only regions a and b in Fig. 7(a) satisfy relationS:W . Relation {S, W } is satisfied by regions a and b in Figs. 7(b) and 7(c) but it is notsatisfied by the respective regions in Fig. 7(a).Definition 4. Let R ∈ 2D∗. The inverse of relation R, denoted by inv(R), is another cardi-nal direction relation which satisfies the following. For arbitrary regions a, b ∈ REG∗ theconstraint a inv(R) b holds, iff b R a holds.Let us consider two regions a and b and assume that a R b holds, where R is a basicrelation. Then, relation inv(R) is not necessarily a basic cardinal direction relation but itcan also be a disjunction of basic relations. For instance, if a N b then it is possible thatb SE:S:SW a or b SE:S a or b S:SW a or b S a (see Fig. 8). Therefore, we have:inv(N) = {S:SW:SE, S:SW, SE:S, S}.In other words, to describe the relative position of two regions a and b using cardinaldirection relations we need to specify both the relation of a with respect to b and therelation of b with respect to a. Summarizing, the relative position of two regions a and bis given by the pair (R1, R2), where R1 and R2 are cardinal directions such that a R1 b,b R2 a, R1 is a disjunct of inv(R2) and R2 is a disjunct of inv(R1). An algorithm forcomputing the inverse relation is discussed at the end of Section 4.In a previous line of work, we have studied the composition problem for cardinal direc-tion relations [40,42]. In the following sections, we will study the consistency checking ofS. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135101a given set of cardinal direction constraints and present an algorithm for this task. Let usfirst formally define cardinal direction constraints.Definition 5. A cardinal direction constraint is a formula a R b where a, b are variablesranging over regions in REG∗ and R is a cardinal direction relation from the set 2D∗.Moreover, a cardinal direction constraint is called single-tile (respectively multi-tile, basic)if R is a single-tile (respectively multi-tile, basic) cardinal direction relation.Obviously, a basic cardinal direction constraint is non-disjunctive while, in general, acardinal direction constraint can either be disjunctive or non-disjunctive.Example 2. The following are cardinal direction constraints:a1 S b1,a2 NE:E b2and a3 {B, S} b3.The constraint a1 S b1 is single-tile. The constraint a2 NE:E b2 is multi-tile. The first twoconstraints are basic (non-disjunctive) while the third one is not.Definition 6. Let C be a set of cardinal direction constraints in variables a1, . . . , an. Thesolution set of C, denoted by Sol(C), is defined as:(cid:4)∗(α1, . . . , αn): α1, . . . , αn ∈ REGand the constraints in Care satisfied by assigning α1 to a1, . . . , αn to an(cid:5).Each member of Sol(C) is called a solution of C. A set of cardinal direction constraints iscalled consistent iff its solution set is non-empty.In this paper, we will also be interested in special kinds of order constraints which aredefined below.Definition 7. An order constraint is a formula in any of the following forms:infx (a) ∼ infx (b),infy (a) ∼ infy (b),supx (a) ∼ supx(b),supy (a) ∼ supy(b),infx(a) ∼ supx (b),infy(a) ∼ supy (b)where a and b are variables ranging over regions in REG∗ and ∼ can be any operator fromthe set {<, >, (cid:1), (cid:2), =}.The above order constraints express all possible relations between the endpoints of theprojections on the x- and y-axis of regions a and b.Definition 8. A set of order constraints is called canonical iff it includes the constraintsinfx(a) < supx(a) and infy (a) < supy(a) for every region variable a referenced in the set.Definition 9. Let O be a canonical set of order constraints in region variables a1, . . . , an.The solution set of O, denoted by Sol(O), is the set of n-tuples(α1, . . . , αn) ∈ (REG∗)n102S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135such that the constraints in O are satisfied by assigninginfx (αi) to infx(ai),infy (αi) to infy(ai),supx (αi ) to supx (ai),supy (αi ) to supy (ai)for every i, 1 (cid:1) i (cid:1) n.As with cardinal direction constraints, a set of order constraints is called consistent iffits solution set is non-empty. In this paper, we will use letters from the Latin alphabet (e.g.,a, b, c, r, . . .) to denote variables and letters from the Greek alphabet (e.g., α, β, γ , ρ, . . .)to denote values of the respective variable (similarly to Definition 9). Let us now considerthe following proposition.Proposition 2. Let O be a canonical set of order constraints in region variables a1, . . . , an.Set O has a solution (α1, . . . , αn) ∈ (REG∗)n iff it has a solution (β1, . . . , βn) whereβ1, . . . , βn are non-trivial boxes.Proof. (If) Obvious.(Only if) Let (α1, . . . , αn) ∈ (REG∗)n be a solution of O. In the definition of the solutionof O (Definition 9), we are only interested in the endpoints of the projections on the x- andy-axis of regions α1, . . . , αn. Notice that regions α1, . . . , αn have the same endpoints withtheir bounding boxes mbb(α1), . . . , mbb(αn), thus it follows that(cid:2)(cid:3)mbb(α1), . . . , mbb(αn)is also a solution of O. (cid:1)Using Proposition 2, we can assume without loss of generality that if α1, . . . , αn is asolution of a canonical set of order constraints O in variables a1, . . . , an then all α1, . . . , αnare non-trivial boxes. Proposition 2 will be very useful in Section 4 and in the proof ofTheorem 3.4. Consistency of basic cardinal direction constraintsWe will now consider the consistency checking problem for a given set of cardinaldirection constraints involving only basic relations and present an algorithm for solvingit. In [40,42], we have studied the composition operator for cardinal direction relationsand we have shown that we cannot use composition to decide consistency (as defined inDefinition 6). As a result, this section does not use composition in any way.Let us first consider Definition 3 that defines cardinal direction relations. The “iff”definitions of Definition 3 can be used to map a set of arbitrary basic cardinal directionconstraints C to a set S consisting of the following two types of constraints:• single-tile cardinal direction constraints;• set-union constraints of the form r = r1 ∪ · · · ∪ rn where r, r1, . . . , rn are variablesrepresenting regions in REG∗.S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135103If we had an algorithm for deciding the consistency of sets like S, we could use it tosolve the consistency problem. Given the unavailability of such an algorithm, below we de-velop from first principles Algorithm CONSISTENCY that checks whether C (equivalentlyS) is consistent. CONSISTENCY is a rather long algorithm with a non-trivial step where weavoid having to deal with the set-union constraints of S.To check the consistency of a given set of basic cardinal direction constraints C invariables a1, . . . , an, Algorithm CONSISTENCY proceeds as follows:1. Initially, Algorithm CONSISTENCY uses Algorithm TRANSFORM (Fig. 10) to translatethe cardinal direction constraints of C into order constraints. Algorithm TRANSFORMconsiders every constraint of C in turn and maps the single-tile cardinal directionconstraints of its definition into a set of order constraints O. Set O contains order con-straints involving the projections on the x- and y-axis of region variables a1, . . . , anand the component variables that correspond to a1, . . . , an. To achieve this mapping,Algorithm TRANSFORM uses Definitions 2 and 3 (Section 3.1). Moreover, the algo-rithm introduces into set O additional order constraints that are implied by the cardinaldirection constraint under consideration. These constraints will be discussed in Sec-tion 4.1.2. Then, Algorithm CONSISTENCY finds a solution of the set of order constraints O (anysolution serves our purpose). To this end, we use the algorithms of [11,46]. If a so-lution of O exists, it assigns non-trivial boxes to region variables a1, . . . , an and thecomponent variables that correspond to a1, . . . , an (see also Proposition 2). Using thissolution, the second step of the algorithm constructs a maximal solution by enlarg-ing appropriately the regions that correspond to the component variables of regionsa1, . . . , an (Section 4.2). This solution is called maximal in the sense that any furtherenlargement results in an assignment that is not a solution of O. The constructionof a maximal solution is necessary in order to perform the third and last step of thealgorithm.3. The first two steps of Algorithm CONSISTENCY have considered for each constraintin set C only the single-tile cardinal direction constraints of its definition (see thediscussion at the beginning of Section 4). This final step of the algorithm deals withthe set-union constraints that correspond to every constraint in C. Currently, theredoes not exist an efficient algorithm for handling theories consisting of set constraintsand order constraints. Thus, we go a step further and map set-union constraint intoa complex expression involving order constraints. Then, we prove that to solve theconsistency problem we just have to check whether the derived complex expres-sion is satisfied by the maximal solution of Step 2. This checking can be efficientlyperformed using Algorithm GLOBALCHECKCONSTRAINTNTB (Section 4.3). Thisstep is very interesting since it avoids using the computational costly set-union con-straints.Let us now describe the three steps of Algorithm CONSISTENCY. Throughout our pre-sentation, we will use the set of constraints C of the following example to illustrate thedetails of the algorithm.104S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135Fig. 9. Illustration of Example 3.Example 3. Let C be the following set of basic cardinal direction constraints on regionvariables a1, a2 and a3:C = {a1 B:N:E a2, a1 B:S:W a3, a2 SW a3}.In Figs. 9(a), 9(b) and 9(c), we illustrate regions that satisfy constraints a1 B:N:E a2,a1 B:S:W a3 and a2 SW a3 respectively. Unfortunately, there does not exist an assignmentthat satisfies all constraints of set C. In other words, set C is inconsistent. To see thisconsider Fig. 9(d). The first constraint of C forces region a1 to be shaped like the lightgrey region of Fig. 9(d) while the second one forces region a1 to be shaped like the darkgrey region. Now let us consider the circled area I of Fig. 3(d). Constraint a1 B:N:E a2requires that region I does not belong to a1 while constraint a1 B:S:W a3 requires thatregion I belongs to a1 resulting in an inconsistency.4.1. Step 1—Algorithm TRANSFORMLet C be a set of basic cardinal direction constraints on region variables a1, . . . , an. Thefirst step of Algorithm CONSISTENCY uses Algorithm TRANSFORM (Fig. 10) to translateset C into a set of order constraints O. Set O contains order constraints involving the pro-jections on the x- and y-axis of region variables a1, . . . , an and the component variablesthat correspond to a1, . . . , an. For every constraint in the input set C, Algorithm TRANS-FORM repeats Steps T1–T4. Let us consider an arbitrary constraint ai R1: · · · :Rk aj in C.In Step T1 of Algorithm TRANSFORM, we consult the definition constraint ai R1: · · ·:Rk aj (Section 3.1), and introduce order constraints encoding all single-tile cardinal direc-tion relations between the reference region aj and the component variables correspondingto the primary region ai. More specifically, Step T1 distinguishes two cases.1. If k = 1 then ai R1: · · · :Rk aj is a single-tile constraint and Step T1 introduces thecorresponding equivalent order constraints of Definition 2.2. If k > 1 then ai R1: · · · :Rk aj is a multi-tile constraint and Step T1 introduces newregion variables ajik which denote the component variables corresponding tovariable ai and constraint ai R1: · · · :Rk aj (see Definition 3). Then, Step T1 introducesorder constraints equivalent to single-tile constraints ajik Rk aj by con-sulting Definition 2.i1 R1 aj , . . . , aji1, . . . , ajS. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135105Algorithm TRANSFORMInput: A set of basic cardinal direction constraints C in variables a1, . . . , an.Output: A set O of order constraints involving variables a1, . . . , an and the component variablescorresponding to a1, . . . , an.Method:O = ∅;For every constraint ai R1: · · · :Rk aj in C DoStep T1:If k = 1 ThenIntroduce constraints from the definitions of Section 3.1Add to O the order constraints defining the single-tile cardinal direction constraintai R1 aj (use definitions of Section 3.1).ElseIf k > 1 ThenIntroduce new region variables ajFor t = 1 To k Doi1, . . . , ajik . These are component variables corresponding to ai .Add to O the order constraints defining the single-tile cardinal direction constraintajit Rt aj (use definitions of Section 3.1).EndForEndIfEnforce that regions {ai , aj , ajStep T2:For every region variable r in {ai , aj , aji1, . . . , ajik} DoO = O ∪ {infx (r) < supx (r), infy (r) < supy (r)}i1, . . . , ajik∗} are in REG.EndForEnforce that regions {ajStep T3:For every region variable r in {aji1, . . . , ajik} Doi1, . . . , ajik} are subregions of ai .O = O ∪ {infx (ai ) (cid:1) infx (r), supx (r) (cid:1) supx (ai ), infy (ai ) (cid:1) infy (r), supy (r) (cid:1) supy (ai )}EndForStep T4:Strictest relation between ai and ajIf k > 1 ThenIfElse IfIfElse IfIfElse IfIfElse IfThen O = O ∪ {supx (aj ) (cid:1) infx (ai )}{R1, . . . , Rk} ⊆ {NE, E, SE}Then O = O ∪ {infx (aj ) (cid:1) infx (ai )}{R1, . . . , Rk} ⊆ {NE, E, SE, N, B, S}{R1, . . . , Rk} ⊆ {NW, W, SW}Then O = O ∪ {supx (ai) (cid:1) infx (aj )}{R1, . . . , Rk} ⊆ {NW, W, SW, N, B, S} Then O = O ∪ {supx (ai) (cid:1) supx (aj )}Then O = O ∪ {supy (aj ) (cid:1) infy (ai )}{R1, . . . , Rk} ⊆ {NW, N, NE}{R1, . . . , Rk} ⊆ {NW, N, NE, W, B, E} Then O = O ∪ {infy (aj ) (cid:1) infy (ai )}Then O = O ∪ {supy (ai) (cid:1) infy (aj )}{R1, . . . , Rk} ⊆ {SW, S, SE}Then O = O ∪ {supy (ai) (cid:1) supy (aj )}{R1, . . . , Rk} ⊆ {SW, S, SE, W, B, E}EndIfEndForReturn OFig. 10. Algorithm TRANSFORM.106S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135Example 4. Let us continue with the set C = {a1 B:N:E a2, a1 B:S:W a3, a2 SW a3}of Example 3. Let O be the input of Algorithm TRANSFORM. This algorithm consid-ers constraint a1 B:N:E a2 first. Step T1 introduces component variables1 d1, d2 and d3representing subregions of a1 such that d1 B a2, d2 N a2, and d3 E a2 hold. Then, thedefinitions of relations B, N and E are consulted and Step T1 adds to O the followingorder constraints (see also Fig. 9(a)):Constraint d1 B a2:Constraint d2 N a2:Constraint d3 E a2:infx (a2) (cid:1) infx (d1), supx (d1) (cid:1) supx (a2),infy (a2) (cid:1) infy (d1), supy (d1) (cid:1) supy (a2).infx (a2) (cid:1) infx (d2), supx (d2) (cid:1) supx (a2),supy(a2) (cid:1) infy(d2).supx(a2) (cid:1) infx(d3), infy (a2) (cid:1) infy(d3),supy(d3) (cid:1) supy (a2).Then, Step T1 considers constraint a1 B:S:W a3 and introduces component variablese1, e2 and e3 representing subregions of a1 such that e1 B a3, e2 S a3, and e3 W a3 hold.Then, Step T1 adds to O the following order constraints (see also Fig. 9(b)):Constraint e1 B a3:Constraint e2 S a3:Constraint e3 W a3:infx(a3) (cid:1) infx(e1), supx (e1) (cid:1) supx(a3),infy(a3) (cid:1) infy(e1), supy (e1) (cid:1) supy(a3).infx(a3) (cid:1) infx(e2), supx (e2) (cid:1) supx(a3),supy (e2) (cid:1) infy(a3).supx (e3) (cid:1) infx(a3), infy (a3) (cid:1) infy(e3),supy (e3) (cid:1) supy (a3).Finally, Step T1 considers constraint a2 SW a3 and adds to O the following order con-straints (see also Fig. 9(c)):Constraint a2 SW a3:supx(a2) (cid:1) infx (a3), supy (a2) (cid:1) infy (a3).In Step T2 of Algorithm TRANSFORM, we introduce for regions ai, aj and the com-ponent variables ajik corresponding to ai , the obvious order constraints relatingthe endpoints of their projections (Proposition 1). These constraints make the set of orderconstraints O canonical.i1, . . . , ajExample 5. Let us continue with the set C of Example 3. The constraints of set Care expressed on region variables {a1, a2, a3}. Moreover, Step T1 of Algorithm TRANS-FORM has introduced region variables {d1, d2, d3, e1, e2, e3} representing component vari-ables corresponding to a1 (see also Example 4). Thus, for every region variable r ∈{a1, a2, a3, d1, d2, d3, e1, e2, e3}, Step T2 of Algorithm TRANSFORM adds to O the fol-lowing constraint (see also Fig. 9):infx (r) < supx (r)and infy(r) < supy (r).1 Algorithm TRANSFORM introduces component variables a2sions, these variables are denoted by d1, d2 and d3 respectively.11, a212 and a213. In order to simplify the expres-S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135107Step T3 of Algorithm TRANSFORM deals with the component variables aji1, . . . , ajikcorresponding to variable ai . The fact that a variable r is a component variable representinga subregion of ai , implies that the following constraints hold:infx (ai) (cid:1) infx(r),infy (ai) (cid:1) infy(r)supx(r) (cid:1) supx(ai),and supy(r) (cid:1) supy(ai).The above constraints are introduced by Step T3 for all component variables ajcorresponding to region variable ai.i1, . . . , ajikExample 6. Let us continue with the set C of Example 3. Notice that regions {d1, d2, d3,e1, e2, e3} are all subregions of a1. Thus, for every region variable r ∈ {d1, d2, d3, e1, e2, e3},Step T3 adds to O the following constraints (see also Fig. 9):infx (a1) (cid:1) infx (r),infy (a1) (cid:1) infy (r)supx(r) (cid:1) supx (a1),and supy(r) (cid:1) supx(a1).Given a constraint ai R aj , the constraints introduced by Steps T1, T2 and T3 of Algo-rithm TRANSFORM establish relations between (a) the component variables correspondingto ai and (b) region variables ai and aj . Unfortunately, if R is a multi-tile cardinal directionrelation, these constraints are not enough to establish the strictest possible order relationbetween the endpoints of the projections of regions ai and aj on the x- and y-axis impliedby the definitions of Section 3.1. For instance, consider regions a1 and a2 of Fig. 9(a).For these regions constraints, infx(a2) (cid:1) infx(a1) and infy(a2) (cid:1) infy(a1) hold. These con-straints could not have been introduced by Steps T1, T2 and T3 or implied by constraintsintroduced by these steps (see also Examples 4, 5 and 6).Step T4 of Algorithm TRANSFORM examines all multi-tiles constraints of the given setC and introduces additional order constraints that establish the aforementioned strictestrelation between the endpoints of the projections of regions ai and aj on the x- and y-axis.Using a simple case analysis, we can verify that we need to consider 8 possible cases.These cases correspond to checking, for every constraint ai R1: · · · :Rk aj of C, whetherthe set of relations {R1, . . . , Rk} is a subset of one or more of the following sets:{NE, E, SE},{NW, W, SW},{NW, N, NE},{SW, S, SE},{NE, E, SE, N, B, S},{NW, W, SW, N, B, S},{NW, N, NE, W, B, E},{SW, S, SE, W, B, E}.For example, if the set of relations {R1, . . . , Rk} is a subset of {NE, E, SE}, the constraintsupx(aj ) (cid:1) infx (ai)is introduced in O by the first If statement of Step T4 because the primary region denotedby ai is included in the region defined by the tiles NE(aj )∪E(aj )∪SE(aj ) of the referenceregion denoted by aj (Fig. 11(a)). On the other hand, if the set of relations {R1, . . . , Rk} is108S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135Fig. 11. Example of constraints introduced by Step T4 of Algorithm TRANSFORM.a subset of {NE, E, SE, N, B, S}, the first ElseIf statement of Step T4 adds the followingconstraint to O (see also Fig. 11(b)):infx (aj ) (cid:1) infx(ai).Similar comments are in order for the other statements of Step T4.Example 7. Let us continue with the set C of Example 3 and consider constrainta1 B:N:E a2. We notice that relations {B, N, E} are members of{NE, E, SE, N, B, S}and {NW, N, NE, W, B, E}.As a result Step T4 adds to O the following constraints (see also Fig. 9(a)):infx (a2) (cid:1) infx (a1),and infy(a2) (cid:1) infy (a1).When we consider constraint a1 B:S:W a3, we notice that relations {B, S, W } are mem-bers of {NW, W, SW, N, B, S} and {SW, S, SE, W, B, E}. Thus, Step T4 adds to O thefollowing constraints (see also Fig. 9(b)):supx(a1) (cid:1) supx (a3),and supy (a1) (cid:1) supy(a3).4.2. Step 2—maximal solutionThe second step of Algorithm CONSISTENCY checks the consistency of the set of orderconstraints O produced by Algorithm TRANSFORM. To this end, we use the algorithms of[11,46]. It follows from the discussion of Section 4.1 that all constraints introduced in setO by Step 1 are logically implied by the spatial configuration expressed by the cardinaldirection constraints of the original set C. Thus, if set O is inconsistent then set C is alsoinconsistent and Algorithm CONSISTENCY exits returning ‘Inconsistent’.Let us now assume that a solution of O exists. Such a solution assigns non-trivial boxes(see Proposition 2) to the region variables of set C and their corresponding componentvariables. Let us consider the following example.Example 8. Let us continue with the set C of Example 3. In Examples 4–7, we have usedAlgorithm TRANSFORM to map C into a set of order constraints O.S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135109Fig. 12. Solutions of O.Set O is consistent. For instance, a solution of O can be constructed if we assign toregion variables a1, a2, a3, d1, d2, d3, e1, e2 and e3 the non-trivial boxes α1, α2, α3, δ1,δ2, δ3, ε1, ε2 and ε3 depicted in Fig. 12(a) respectively. It easy to verify that the regions ofFig. 12(a) satisfy all constraints of O introduced in Examples 4–7.We can now extend boxes δ1, δ2, δ3, ε1, ε2 and ε3 in all directions until they touchwhatever line is closer to them from the ones forming boxes α1 and α2. For instance, wecan extend δ1 to the west to touch the vertical line y = infx (α1) and to the east to touch thevertical line y = supx (α2). Fig. 12(b) illustrates this idea for all regions δ1, δ2, δ3, ε1, ε2and ε3 (the corners of δ2 and δ3 have been curved to show that these regions overlap withregions ε3 and ε2 respectively). Now notice that the new regions still satisfy all constraintsin O.The following lemma captures the observation of Example 8 in its full generality.Lemma 1. Let O be the output of Algorithm TRANSFORM when it is called with in-put a set of cardinal direction constraints C in variables a1, . . . , an. For each variableai (1 (cid:1) i (cid:1) n), let ai1, . . . , ail be the component variables corresponding to aithathave been generated by Algorithm TRANSFORM while considering various constraintsai R1: · · · :Rk aj where 1 (cid:1) j (cid:1) n and 1 (cid:1) k (cid:1) 9.Let s0 be a solution of O. Let also αi , αj , αi1, . . . , αil be the non-trivial boxes that s0assigns to region variables ai, aj , ai1, . . . , ail respectively. Then, a new solution v0 of Ocan be constructed as follows. For every constraint ai R1: · · · :Rk aj in C we consider eachcomponent variable aim (1 (cid:1) m (cid:1) l) in turn.by max• If αim B αj holds, perform the following substitutions:(cid:4)infx(αi ), infx(αj )(cid:4)supx(αi ), supx (αj )by min(cid:5)(cid:4),infy(αi ), infy(αj )(cid:5)(cid:4).supy(αi ), supy (αj )infx (αim)supx(αim)infy (αim)supy(αim)(cid:5),(cid:5),by maxby min(cid:5),(cid:5).(cid:5),(cid:5),110S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135• If αim S αj holds, perform the following substitutions:(cid:4)infx (αim)supx(αim)infy (αim)by maxby mininfx(αi ), infx(αj )(cid:4)supx(αi ), supx (αj )(cid:5),(cid:5),by infy(αi ),supy(αim)by min(cid:4)supy(αi ), infy(αj )(cid:5).• If αim SW αj holds, perform the following substitutions:(cid:4)supx(αi ), infx(αj )(cid:4)supy(αi ), infy(αj )by infx(αi ),by infy(αi ),supx(αim)supy(αim)infx (αim)infy (αim)by minby min• If αim W αj holds, perform the following substitutions:(cid:4)supx(αi ), infx(αj )by mininfx (αim)infy (αim)supy(αim)by infx(αi ),by maxsupx(αim)(cid:5)(cid:4),infy(αi ), infy(αj )(cid:5)(cid:4).supy(αi ), supy (αj )by min• If αim NW αj holds, perform the following substitutions:(cid:4)supx(αi ), infx(αj )by mininfx (αim)infy (αim)by infx(αi ),by maxsupx(αim)(cid:5)(cid:4)infy(αi ), supy (αj ),supy (αim)by supy(αi ).• If αim N αj holds, perform the following substitutions:(cid:4)infx(αi ), infx(αj )(cid:4)supx(αi ), supx (αj )infy(αi ), supy (αj )infx (αim)supx(αim)infy (αim)by min(cid:4)(cid:5),(cid:5),(cid:5)by maxby max,supy (αim)• If αim NE αj holds, perform the following substitutions:(cid:4)infx(αi ), supx (αj )(cid:4)infy(αi ), supy (αj )infx (αim)infy (αim)by maxby max(cid:5)(cid:5),,supx (αim)supy (αim)• If αim E αj holds, perform the following substitutions:(cid:4)infx(αi ), supx (αj )(cid:5)(cid:4),infy(αi ), infy(αj )(cid:5)(cid:4)supy(αi ), supy (αj )infx (αim)infy (αim)supy(αim)by maxby maxby min(cid:5),.supx (αim)by supy (αi ).by supx(αi ),by supy(αi ).by supx(αi ),• If αim SE αj holds, perform the following substitutions:(cid:4)infx(αi ), supx (αj )supy(αim)infx (αim)infy (αim)by infy(αi ),by maxby min(cid:5),supx (αim)(cid:4)supy(αi ), infy(αj )by supx(αi ),(cid:5).Proof. See Appendix A. (cid:1)S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135111Example 9. Let us continue with the set C of Example 3 and let O be the output of Al-gorithm TRANSFORM with input set C. In Example 8, we have seen that the regions ofFigs. 12(a) and 12(b) form solutions of set O. We can verify that the regions of Fig. 12(b)are formed by applying to the regions of Fig. 12(a) the substitutions of Lemma 1. For in-stance, consider the component δ1 corresponding to region α1 of Fig. 12(a) and notice thatδ1 B α2 holds. Region δ1 of Fig. 12(b) results after performing the following substitutions:infx (δ1)supx(δ1)infy (δ1)supy(δ1)(cid:4)by infx(α1) = maxinfx(α1), infx(α2)(cid:4)by supx(α2) = minsupx (α1), supx (α2)(cid:5)(cid:4)by infy(α1) = max,infy(α1), infy(α2)(cid:5)(cid:4)by supy(α2) = min.supy (α1), supy (α2)(cid:5),(cid:5),Definition 10. Let C be a set of basic cardinal direction constraints and O be the setreturned by Algorithm TRANSFORM when it is called with input C. A solution v0 of O iscalled maximal iff v0 is not affected by the substitutions of Lemma 1.Example 10. Continuing with set O of Example 9, we notice that the regions of Fig. 12(b)form a maximal solution of O.Using the Definition 10 and Lemma 1, we can prove the following theorem.Theorem 1. Let C be a set of basic cardinal direction relations and O be the set returnedby Algorithm TRANSFORM when it is called with input C. Set O is consistent iff it has amaximal solution.Proof. (If) Obvious.(Only if) If O is consistent it follows that it has at least a solution s0. Applying thesubstitutions of Lemma 1 to s0 we can form a maximal solution of O. (cid:1)4.3. Step 3—the non-trivial box constraintAt the beginning of Section 4, we have explained how one can transform a given set ofcardinal direction constraints C into a set S containing only single-tile cardinal directionconstraints and set-union constraints. Up to this point, Algorithm CONSISTENCY has dealtwith the order constraints produced by Algorithm TRANSFORM. These order constraintsencode only the single-tile cardinal direction constraints envisaged in set S (Step T1 ofAlgorithm TRANSFORM) together with some other useful constraints (Steps T2–T4). It isnow time to introduce a special constraint capturing only the essential facts following fromthe set-union constraints of set S.Let us assume that Cai= {c1, . . . , cm} contains all constraints of the input set C withregion ai as the primary region. Letc1 be ai R11cm be ai Rm1: · · · :R1k1...: · · · :Rmkmaj1ajm112S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135: · · · :Rmkmare cardinal direction relations and aj1, . . . , ajm are, . . . , Rm1: · · · :R1where R1k11region variables of set C.i1, . . . , a1ik1Let S1 = {a1} be the sets of component variablesi1, . . . , amikmcorresponding to ai due to constraints c1, . . . , cm respectively. According to the definitionsof Section 3.1, set S would contain the following set-union constraints:}, . . . , Sm = {amai = a1i1ai = ami1∪ · · · ∪ a1ik1...∪ · · · ∪ amikm.Let us consider an arbitrary component variable s ∈ S1 ∪ · · · ∪ Sm. The above set-unionconstraints imply that there is an important relationship between component variable s andthe component variables from sets S1, . . . , Sm. This relationship is described by the aboveset-union constraints but unfortunately it cannot straightforwardly be mapped into orderconstraints. Lemma 2 expresses conditions that captures the relations following for theset-union constraints. These relations are established on the minimum bounding boxes ofregions; thus, they can be expressed using order constraints.Lemma 2. Let a be a region in REG∗. Let S1, . . . , Sm be finite sets of subregions of a suchthat:1. Every region in Si , 1 (cid:1) i (cid:1) n, is in REG∗, i.e.,(∀r ∈ Si )(r ∈ REG∗).2. The union of the members of each Si , 1 (cid:1) i (cid:1) n, is region a, i.e.,a =r = · · · =(cid:6)r∈S1(cid:6)r.r∈SmThen, the following constraint also holds.Non-Trivial Box Constraint (NTB): For all s ∈ S1 ∪ · · · ∪ Sm there exists a tuple(s1, . . . , sm) ∈ S1 × · · · × Sm such that mbb(s) ∩ mbb(s1) ∩ · · · ∩ mbb(sm) is a non-trivial box.Proof. We will use induction on m. For m = 1, Constraint NTB trivially holds. For m = 2,Constraint NTB also holds. By contradiction, let us assume that there exists a region s ∈ S1such that mbb(s) ∩ mbb(s1) ∩ mbb(s2) is a trivial box for every s1 ∈ S1 and s2 ∈ S2 (thecase where s ∈ S2 is similar). Since s and s1 are in S1 and our assumption holds for everys1 ∈ S1, we can choose s1 to be s. Then, for all subregions s2 ∈ S2 of a, mbb(s) ∩ mbb(s2)would be either empty or a point or a vertical line segment or a horizontal line segment(see Fig. 13(a)). Since region a is the union of all regions in S2 (i.e., a =r holds),it follows that region a will not have any points in the interior of the area covered bythe minimum bounding box of region s and thus in the interior of region s itself. Thiscontradicts our initial assumption that region s is a subregion of a.r∈S2(cid:7)Let us now assume that Constraint NTB holds for m = µ − 1, i.e.,S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135113Constraint NTBµ−1: For all s ∈ S1 ∪ · · · ∪ Sµ−1 there exists a tuple (s1, . . . , sµ−1) ∈S1 × · · · × Sµ−1 such that mbb(s) ∩ mbb(s1) ∩ · · · ∩ mbb(sµ−1) is a non-trivial box.We will prove that the constraint holds for m = µ as well, i.e.,Constraint NTBµ: For all s ∈ S1 ∪ · · · ∪ Sµ there exists a tuple (s1, . . . , sµ) ∈ S1 × · · · ×Sµ such that mbb(s) ∩ mbb(s1) ∩ · · · ∩ mbb(sµ) is a non-trivial box.We will first prove that Constraint NTBµ holds for all s ∈ S1 ∪ · · · ∪ Sµ−1. Since Con-straint NTBµ−1 holds, there exist regions (s1, . . . , sµ−1) ∈ S1 × · · · × Sµ−1, such thatmbb(σ ) ∩ mbb(s1) ∩ · · · ∩ mbb(sµ−1) is a non-trivial box (Fig. 13(b)). It is easy to seethat no matter how Sµ divides a into subregions there would be a subregion sµ ∈ Sµ suchthat mbb(σ ) ∩ mbb(s1) ∩ · · · ∩ mbb(sµ−1) ∩ mbb(sµ), is a non-trivial box (see Fig. 13(c)).Similarly, we can prove that Constraint NTBµ holds for all s ∈ Sµ; which concludes ourproof. (cid:1)Example 11. Let us consider regions α1, α2, α3 and α4 of Fig. 14. For these regions wehave:{α1 S:SW α2, α1 NW:N:NE α3, α1 S:SW:W α4}.Let Σ1 = {δ1, δ2}, Σ2 = {ε1, ε2, ε3}, and Σ3 = {ζ1, ζ2, ζ3} be the set of componentscorresponding to a1 due to constraints α1 S:SW α2, α1 NW:N:NE α3 and α1 S:SW:W α4respectively.Fig. 13. Region a and its subregions.Fig. 14. Example of Constraint NTB.114S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135Observing Fig. 14, it is not hard to see that Constraint NTB holds. For instance, forcomponent s = δ1 ∈ S1 there exists a region s1 ∈ S1, namely δ1, a region in s2 ∈ S2, namelyε1, and a region in s3 ∈ S3, namely ζ1, such that mbb(s) ∩ mbb(s1) ∩ mbb(s2) ∩ mbb(s3) isa non-trivial box (the corresponding bounding boxes are depicted in Fig. 14).Constraint NTB requires that the intersection of m + 1 non-trivial boxes (s, s1, . . . , sm)is a non-trivial box. This condition can be mapped into order constraints. For instance,given two non-trivial boxes a and b their intersection c = a ∩ b is a box defined as follows.infx (c) = maxinfy (c) = max(cid:4)infx (a), infx (b)(cid:4)infy (a), infy (b)(cid:5),(cid:5),supx(c) = minsupy(c) = min(cid:4)supx (a), supx(b)(cid:4)supy (a), supy(b)(cid:5),(cid:5).Box c is non-trivial iff infx (c) < supx (c) and infy (c) < supy(c) (see also Proposition 1).Lemma 2 is very important since it provides us with a method (using Constraint NTB) tomap the set-union constraints of the definition of a cardinal direction relation (Definition 3)into order constraints. Therefore, a solution of a given set of cardinal direction constraintsshould not only satisfy the order constraint introduced by Algorithm TRANSFORM but alsothe order constraints that correspond to Constraint NTB. Since the former constraints areenforced by Step 1 of Algorithm CONSISTENCY, at this point one might wonder whether tosolve the consistency problem, it suffices to introduce expressions that enforce ConstraintNTB. Indeed, this is correct but unfortunately it results in an inefficient algorithm. Let usbriefly discuss why.2 Constraint NTB can be equivalently written as follows.(cid:9)(cid:8)(cid:10)(cid:2)mbb(s) ∩ mbb(s1) ∩ · · · ∩ mbb(sm)s∈S1∪···∪Sm(s1,...,sm)∈S1×···×Sm(cid:3)is a non-trivial box(cid:11).Notice that m = O(n) and |St | (cid:1) 9 (1 (cid:1) t (cid:1) m) hold. The above expression contains |S1| +· · · + |Sm| = O(n) conjunctions each containing a disjunction with |S1| · · · |Sm| = O(9n)disjuncts. Thus, in order to enforce Constraint NTB we have to write down (and solve!) anexpression exponential to the size of our initial problem.Summarizing, enforcing Constraint NTB is an inefficient procedure. We will now in-vestigate the problem of checking whether a given assignment satisfies Constraint NTB.As we will later see in this section, a solution to this problem will help us tackle the con-sistency checking problem. Let Σ1, . . . , Σm be sets of regions representing componentsof a given region α. In order to check whether Σ1, . . . , Σm satisfy Constraint NTB, weuse Algorithm CHECKCONSTRAINTNTB (Fig. 15). For every component variable s inΣ1 ∪ · · · ∪ Σm, the algorithm checks if there exists a tuple (s1, . . . , sm) ∈ Σ1 × · · · × Σmsuch that mbb(s) ∩ mbb(s1) ∩ · · · ∩ mbb(sm) is a non-trivial box. To this end, it utilizessets Q and Q(cid:11). Initially, Q contains only the component variable s. Then, the algorithmconsiders every set of component variables Σ (cid:11) in Σ1, . . . , Σm in turn.Let us now suppose that the algorithm has processed sets Σ1 to Σµ−1 where 1 (cid:1)µ − 1 < m. In this case, set Q contains all non-trivial boxes of the form s ∩ σ1 ∩ · · · ∩ σµ−12 The interested reader is referred to [39,43] for more information about this approach.S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135115Algorithm CHECKCONSTRAINTNTBInput: Sets of component variables Σ1, . . . , Σm that correspond to a certain region variable.Output: ‘True’ if sets Σ1, . . . , Σm satisfy Constraint NTB; ‘False’ otherwise.Method:For every s in Σ1 ∪ · · · ∪ ΣmQ = {s}For every Σ (cid:11)Q(cid:11) = ∅For every s(cid:11)in {Σ1, . . . , Σm} Doin Σ (cid:11)and every q in Q DoIf mbb(s(cid:11)) ∩ mbb(q) in a non-trivial box Then Q(cid:11) = Q(cid:11) ∪ {mbb(s(cid:11)) ∩ mbb(q)}EndForIf Q(cid:11) = ∅ Then Return ‘False’Q = Q(cid:11)EndForEndForReturn ‘True’Fig. 15. Algorithm CHECKCONSTRAINTNTB.where σi ∈ Σi . Then, the algorithm considers the component variables of Σµ and the non-trivial boxes of Q. Algorithm CHECKCONSTRAINTNTB finds all regions s(cid:11) ∈ Σµ andq ∈ Q such that s(cid:11) ∩ q is a non-trivial box and puts them into a new set Q(cid:11). In other words,set Q(cid:11) contains all non-trivial boxes of the form s ∩ σ1 ∩ · · · ∩ σµ where σi ∈ Σi . Hence,if Q(cid:11) is empty, Constraint NTB is violated and Algorithm CHECKCONSTRAINTNTB re-turns ‘Inconsistent’. Otherwise Q(cid:11) is assigned to Q and the algorithm continues with theremaining sets of non-trivial boxes Σµ+1, . . . , Σm that correspond to variable a.Theorem 2. Let Σ1, . . . , Σm be sets of regions representing components of a given re-gion. Algorithm CHECKCONSTRAINTNTB correctly decides whether Σ1, . . . , Σm satisfyConstraint NTB.Proof. Let σ ∈ Σ1 ∪ · · · ∪ Σm. We can verify, from the above discussion, that when Al-gorithm CHECKCONSTRAINTNTB has processed sets Σ1, . . . Σµ, 1 (cid:1) µ (cid:1) m, set Q con-tains all tuples (s1, . . . , sµ) ∈ Σ1 × · · · × Σµ such that mbb(σ ) ∩ mbb(s1) ∩ · · · ∩ mbb(sµ)is a non-trivial box.Therefore, if the algorithm returns ‘False’ for set Σµ+1 then it means that mbb(σ ) ∩mbb(s1) ∩ · · · ∩ mbb(sµ+1) is a non-trivial box for every sµ+1 ∈ Σµ+1, i.e., ConstraintNTB is not satisfied.If Algorithm CHECKCONSTRAINTNTB returns ‘True’ then Constraint NTB is satisfiedbecause set Q is non-empty and contains all tuples (s1, . . . , sm) ∈ Σ1 × · · · × Σm such thatmbb(σ ) ∩ mbb(s1) ∩ · · · ∩ mbb(sm) is a non-trivial box. (cid:1)Example 12. Let us continue with Example 11. For sets Σ1 = {δ1, δ2}, Σ2 = {ε1, ε2, ε3}and Σ3 = {ζ1, ζ2, ζ3}, Constraint NTB holds (see also Fig. 14). It is not hard to verify thatAlgorithm CHECKCONSTRAINTNTB returns ‘True’ when it is called with input sets Σ1,Σ2 and Σ3.116S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135Algorithm GLOBALCHECKCONSTRAINTNTBInput: A maximal solution v0 of set O (produced by Algorithm TRANSFORM with input a set C of cardinaldirection constraints in variables a1, . . . , an).Output: ‘True’ if assignment v0 satisfies Constraint NTB; ‘False’ otherwise.Method:For every region variable a in {a1, . . . , an} DoLet S1, . . . , Sm be the sets of component variables (introduced by Algorithm TRANSFORM) correspondingto a.Let Σ1, . . . , Σm be the sets of boxes that v0 assigns to the sets S1, . . . , Sm of a respectively.If CHECKCONSTRAINTNTB(Σ1, . . . , Σm) returns ‘False’ Then Return ‘False’.EndForReturn ‘True’Fig. 16. Algorithm GLOBALCHECKCONSTRAINTNTB.As another example, let us consider sets Σ1 = {δ1, δ2, δ3} and Σ2 = {ε1, ε2, ε3} of Ex-ample 8 (see also Fig. 12). For these sets Algorithm CHECKCONSTRAINTNTB returns‘False’ because Constraint NTB is not satisfied.The third step of Algorithm CONSISTENCY uses Algorithm GLOBALCHECKCON-STRAINTNTB to check if the maximal solution v0 of set O produced by Step 2 ofAlgorithm CONSISTENCY satisfies Constraint NTB. Algorithm GLOBALCHECKCON-STRAINTNTB considers every variable a ∈ {a1, . . . , an} referenced in set C and forms allsets of component variables S1, . . . , Sm that correspond to variable a. Notice that these setswere introduced by the first step of Algorithm CONSISTENCY (Algorithm TRANSFORM).Let now Σ1, . . . , Σm be the sets of boxes that v0 assigns to sets of component variablesS1, . . . , Sm respectively. Algorithm GLOBALCHECKCONSTRAINTNTB calls AlgorithmCHECKCONSTRAINTNTB to check whether Σ1, . . . , Σm satisfy Constraint NTB.Here we finish our detailed discussion of the third and final step of Algorithm CONSIS-TENCY. The following section summarizes and presents a complete example of AlgorithmCONSISTENCY.4.4. SummaryIn Sections 4.1, 4.2 and 4.3, we have presented in detail the three steps of AlgorithmCONSISTENCY. This algorithm takes as input a set of basic cardinal direction constraints Cin variables a1, . . . , an and returns ‘Consistent’ if C is consistent; otherwise it returns ‘In-consistent’. Let us briefly summarize the three steps of Algorithm CONSISTENCY (Fig. 17).• In the first step, Algorithm CONSISTENCY calls Algorithm TRANSFORM. Let O bethe output of Algorithm TRANSFORM. Set O contains order constraints involving theprojections on the x- and y-axis of region variables a1, . . . , an and the componentvariables that correspond to a1, . . . , an (see Section 4.1).• The second step of Algorithm CONSISTENCY uses Algorithm CSPAN of [46] to finda solution s0 of set O. If no solution exists then O (and also C) is inconsistent, thusAlgorithm CONSISTENCY exits returning ‘Inconsistent’. Otherwise, Algorithm CON-S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135117Algorithm CONSISTENCYInput: A set of basic cardinal direction constraints C in variables a1, . . . , an.Output: ‘Consistent’ if C is consistent; ‘Inconsistent’ otherwise.Method:Map the basic cardinal directions constraints of C into a set of orderStep 1:constraints O.O = TRANSFORM(C)Find a maximal solution v0 of O.Step 2:Find a solution s0 of O (using Algorithm CSPAN of [46]).If CSPAN returns ‘Inconsistent’ Then Return ‘Inconsistent’Find a maximal solution v0 of O (using s0 and Lemma 1).Check whether the maximal solution v0 satisfies Constraint NTB.Step 3:If GLOBALCHECKCONSTRAINTNTB(v0) returns ‘False’ Then Return ‘Inconsis-tent’.Return ‘Consistent’Fig. 17. Algorithm CONSISTENCY.SISTENCY applies Lemma 1 to s0 to derive a maximal solution v0 of O (see alsoSection 4.2).• In the third step, Algorithm CONSISTENCY considers Constraint NTB. If solutionv0 does not satisfies Constraint NTB then Algorithm CONSISTENCY exits returning‘Inconsistent’. This checking is performed using Algorithm GLOBALCHECKCON-STRAINTNTB (see also Section 4.3).The three steps of Algorithm CONSISTENCY are based on the following theorem.Theorem 3. Let C be a set of basic cardinal direction relations and O be the set returned byAlgorithm TRANSFORM when it is called with input C. Set C is consistent iff the followingtwo conditions hold:1. Set O has a maximal solution u0.2. Solution u0 satisfies Constraint NTB.Proof. See Appendix B. An illustration of the structure of the proof is presented in Fig. 18.The fact that O is consistent iff it has a maximal solution was proven in Theorem 1 (lower-left part of Fig. 18). To prove that if C is consistent then the maximal solution of O satisfiesConstraint NTB (only if—part of Theorem 3) we use Lemmata 1 and 2. Finally, to prove theif—part we use the values of the assignment of the maximal solution O and the fact that itsatisfies Constraint NTB to construct regions that satisfy the cardinal direction constraintsof C. (cid:1)The following theorem establishes the correctness of Algorithm CONSISTENCY.118S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135Fig. 18. Summary of the proof of Theorem 3.Theorem 4. Let C be a set of basic cardinal direction constraints. Algorithm CONSIS-TENCY correctly decides whether C is consistent.Proof. The correctness of Algorithm CONSISTENCY follows from the above discussionand Theorem 3. (cid:1)Let us now see an example of Algorithm CONSISTENCY in operation.Example 13. Let us consider the constraint setC = {a1 B:N:E a2, a1 B:S:W a3, a2 SW a3}of Example 3 and examine the three steps of Algorithm CONSISTENCY with input set C.• In the first step, Algorithm CONSISTENCY calls Algorithm TRANSFORM to produceset O. The order constraints of O are presented in Examples 4–7.• The second step of Algorithm CONSISTENCY uses Algorithm CSPAN to check theconsistency and find a solution of set O. Set O is consistent and a solution is depictedin Fig. 12(a). Then, Algorithm CONSISTENCY applies Lemma 1 to construct a max-imal solution of O. The maximal solution of the solution of O that corresponds toFig. 12(a) is presented in Fig. 12(b) (see also Examples 8–10).• In the third step, Algorithm CONSISTENCY calls Algorithm CHECKCONSTRAINT-NTB to check whether the maximal solution of the second step satisfies ConstraintNTB. Using Fig. 12, we can see that Constraint NTB does not hold. Thus, AlgorithmCONSISTENCY exits on Step 3 returning ‘Inconsistent’ (see also Example 12).Algorithm CONSISTENCY is interesting in its own right, but it can also be used to com-pute the transitivity table for all basic cardinal direction relations defined in Section 3. Forany pair of basic cardinal direction constraints a R1 b and b R2 c, a basic cardinal directionS. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135119relation R3, satisfies the cardinal direction constraint a R3 c if and only if the constraint set{a R1 b, b R2 c, a R3 c} is consistent (a more direct algorithm for this task is discussed in[42]). Similarly, Algorithm CONSISTENCY can be used to calculate the inverse of a givenbasic cardinal direction relation. For any basic cardinal direction constraints a R1 b, a basiccardinal direction relation R2, satisfies the cardinal direction constraint b R2 a if and onlyif the constraint set {a R1 b, b R2 a} is consistent.5. Complexity of consistency checkingIn this section, we study the computational complexity of the consistency checkingproblem for cardinal direction constraints. Section 5.1 studies the aforementioned problemfor basic cardinal direction constraints (i.e., non-disjunctive) while Section 5.2 considersthis problem in its generality and studies unrestricted cardinal direction constraints (i.e.,disjunctive and non-disjunctive).5.1. Consistency of basic cardinal direction constraintsIn Section 4, we have presented Algorithm CONSISTENCY that decides the consistencyof a given set of basic cardinal direction constraints. The following theorem calculates thetime complexity of Algorithm CONSISTENCY.Theorem 5. Deciding the consistency of a set of basic cardinal direction constraints in nregion variables can be done using Algorithm CONSISTENCY in O(n5) time.Proof. Let the input of Algorithm CONSISTENCY be a set C of basic cardinal directionconstraints in n region variables. The number of constraints in C is O(n2).The first step of Algorithm CONSISTENCY calls Algorithm TRANSFORM with inputset C. The latter algorithm considers every constraint of C in turn and returns a set oforder constraints O. Algorithm TRANSFORM introduces at most 9 new variables each timeStep T1 is executed. Hence, the total number of region variables is O(n2). Steps T1–T3of Algorithm TRANSFORM add to O O(n2) order constraints. Summarizing, AlgorithmTRANSFORM runs in O(n2) time and returns a set O containing O(n2) order constraintsin O(n2) variables.In the second step, Algorithm CONSISTENCY finds a maximal solution of set O. Thiscan be done using Algorithm CSPAN of [46]. Algorithm CSPAN decides the consistencyof a set of order constraints in k variables in O(k2) time. Thus, using Algorithm CSPANof [46], we can find a solution of set O in O(n4) time. Then, Algorithm CONSISTENCYapplies Lemma 1. This can be performed in O(n) time. Summarizing the second step ofAlgorithm CONSISTENCY can be done in O(n4) time.The third step of Algorithm CONSISTENCY uses Algorithms GLOBALCHECKCON-STRAINTNTB (Fig. 16) and CHECKCONSTRAINTNTB (Fig. 15) to check whether Con-straint NTB is satisfied. The latter algorithm uses a set Q. We first need to measure thesize of set Q. For a given variable ai , 1 (cid:1) i (cid:1) n, set C contains O(n) constraints of theform ai R aj . Now since ai participates in O(n) constraints of C, it follows that the region120S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135represented by variable ai is divided by O(n) horizontal and O(n) vertical lines. Thus aiis divided into O(n2) pieces. Now notice that set Q cannot contain more members than thepossible pieces of ai, thus the size of Q is O(n2).In order to check whether Constraint NTB is satisfied, Algorithm CONSISTENCY callsAlgorithm GLOBALCHECKCONSTRAINTNTB which in turn calls O(n) times AlgorithmCHECKCONSTRAINTNTB. The latter algorithm performs three nested loops. The outertwo loop is executed O(n) times. Both the inner loops are performed at most O(n3) times.Thus, checking whether Constraint NTB is satisfied can be done in O(n5) time.Summarizing, the complexity of Algorithm CONSISTENCY is O(n5). (cid:1)5.2. Consistency of arbitrary cardinal direction constraintsWe will now turn our attention to the consistency checking problem of a set of unre-stricted cardinal direction relations expressed in the model of Section 3 (i.e., a set thatincludes both disjunctive and non-disjunctive cardinal direction constraints).Theorem 6. Deciding the consistency of a set of cardinal direction constraints is NP-complete.Proof. Let C be a set of cardinal direction constraints. Deciding the consistency of Cis easily seen to be in NP. A nondeterministic algorithm first constructs a new set C(cid:11) asfollows. For every cardinal direction constraint (a {R1, . . . , Rm} b) ∈ C, the algorithmguesses a basic cardinal direction relation Ri among {R1, . . . , Rm} and adds constraintsa Ri b, 1 (cid:1) i (cid:1) m, to set C(cid:11). Then, the nondeterministic algorithm checks to see whetherthe new set C(cid:11) is consistent. This can be done with Algorithm CONSISTENCY in O(n5)(Theorem 5).To prove NP-hardness, we will use a reduction from 3SAT [33]. We construct an equiv-alent, with respect to consistency, mapping from a 3SAT formula to a set of cardinaldirection constraints. In the construction, we map each literal of 3SAT to a region vari-able and each clause of 3SAT to a set of cardinal direction constraints.This proof borrows some ideas from a proof that appears in [47] (like the use of a centerregion). It differentiates in the way we use relations and auxiliary regions.Similarly to [47], we need a region o that denotes our center (Fig. 19). Regions that fallwest of o correspond to false values while regions that fall east of o correspond to truevalues.For each literal p in the 3SAT formula and its negation ¬p we create a pair of regionssp and s¬p. These regions are related to the center o using region ep,¬p as follows:ep,¬p B:W :E o,sp {W, E} o,sp {B:W, B:E} ep,¬p,s¬p {B:W, B:E} ep,¬p,s¬p {W, E} o,sp {W, E} s¬p.Intuitively, we use region ep,¬p to ensure that regions sp and s¬p cannot both be trueor both be false (Fig. 20). For instance, if region sp falls into area A1 of Fig. 20 (i.e., p isfalse) then the above constraints guarantee that region s¬p falls into area A2 (i.e., ¬p istrue).S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135121Fig. 19. Region o that denotes the center.Fig. 20. Region ep,¬p and its use.Then, for each clause p ∨ q ∨ r we create the following constraints.sp {W, E} sq ,sq {W, E} sr ,sr {W, E} sp.The above constraints ensure that regions sp, sq and sr are disjoint. Moreover, we intro-duce the following constraints.ap∨q∨r W o,ap∨q∨r B:W bp∨q∨r ,bp∨q∨r B:W :E o,sp {E, B:W, B:E} ap∨q∨r ,sq {E, B:W, B:E} ap∨q∨r ,sr {E, B:W, B:E} ap∨q∨r ,sp {W, E, B:E} bp∨q∨r ,sq {W, E, B:E} bp∨q∨r ,sr {W, E, B:E} bp∨q∨r .The key to this encoding is that no more that two of the clauses regions (i.e., sp, sq andsr ) are allowed to be in the false area A1 of Fig. 20. Therefore, at least one region will liein the true area A2 of Fig. 20 and thus its corresponding literal will be true. For instance, ifboth sp and sq are in the false area then the above constraints force sr to be in the true area(see also Fig. 21).To conclude this proof, we note that the above encoding can be performed in timepolynomial in the length of the formula. It follows, from the above discussion, that the3SAT formula is consistent iff its encoding to cardinal direction constraints is consistent.Moreover, since 3SAT is NP-complete, it follows that checking the consistency of a set ofcardinal direction constraints is also NP-complete. (cid:1)122S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135Fig. 21. Regions ap∨q∨r and bp∨q∨r .Fig. 22. Including points and lines.6. ExtensionsIn Section 3, we have presented a model defining cardinal direction relations for thedisconnected regions in REG∗. In this section, we will present an interesting variation thataccommodates arbitrary regions in R2 [18,42]. In other words, this variation also considerspoints, lines and regions with emanating lines (see Fig. 4). Such regions have been excludedcarefully from REG∗ (they are not homeomorphic to the unit disk) but they can be easilyincluded by dividing the space around the reference region b into the following 25 areas(see also Fig. 22):• 9 two-dimensional areas (B(b), S(b), SW(b), W (b), NW(b), N(b), NE(b), E(b),SE(b)). These areas are formed by the axis of the bounding box of the reference regionb (grey shaded areas of Fig. 22). Notice that each area does not include the parts of theaxis forming it (contrary to the model of Section 3). The above areas correspond to thebounding box and the 8 cardinal directions.• 8 semi-lines (LSW(b), LWS(b), LWN(b), LNW(b), LNE(b), LEN(b), LES(b), LSE(b)).These semi-lines are formed by the vertical and horizontal lines that start from the cor-ners of the bounding box of the reference region b (dotted lines of Fig. 22). Notice thateach semi-line does not include the corner of the bounding box.S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135123Fig. 23. Regions in R2 and relations in DR2.• 4 line segments (LS(b), LW(b), LN(b), LE(b)). These lines segments correspond tothe sides of the bounding box of the reference region b (solid lines of Fig. 22). Noticethat each line segment does not include the corners of the bounding box.• 4 points (PSW(b), PNW(b), PNE(b), PSE(b)). These points correspond to the cornersof the bounding box of the reference region b.Section 3 that divides the space into 9 areas. The new set, denoted by DR2(cid:1)The above partition of the reference space should be contrasted to the partition of, contains= 33,554,431 jointly exhaustive and pairwise disjoint cardinal direction rela-(cid:2)(cid:3)25i25i=1tions.The single-tile cardinal direction relations in DR2are defined analogously to Defini-tion 2. For instance:a B biffa PNW biffinfx (b) < infx (a), supx(a) < supx (b), infy (b) < infy (a), andsupy(a) < supy (b).infx (a) = supx(a) = infx(b) and infy(a) = supy (a) = supy(b).Regions involved in these relations are shown in Figs. 23(a) and 23(b) respectively.The multi-tile cardinal direction relations in DR2are defined analogously to Defini-tion 3. For instance:a NE:LEN:E ba SW:PSW:LW:PNW:NW biffiffthere exist regions a1, a2 and a3 in R2 such thata = a1 ∪ a2 ∪ a3, a1 NE b, a2 LEN b and a3 E b.there exist regions a1, . . . , a5 in R2 such thata = a1 ∪ a2 ∪ a3 ∪ a4 ∪ a5, a1 SW b, a2 PSW b,a3 PNW b, a4 LW b and a5 NW b.Regions involved in these relations are shown in Figs. 23(c) and 23(d) respectively.Algorithm CONSISTENCY presented in Section 4 can be modified in order to handle theconsistency checking of a given set of cardinal direction constraints involving relationsof DR2. Such modifications take place in Algorithms TRANSFORM and CHECKCON-STRAINTNTB. More specifically, the modifications of Algorithm TRANSFORM (Fig. 10)are as follows:124S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135• Step T1 now takes into account the definition of relations in R2. These definitions canbe derived similarly to the case of cardinal direction relations for regions in REG∗(Section 3).• The constraint added by Step T2 changes to:O = O ∪(cid:4)infx(r) (cid:1) supx(r), infy (r) (cid:1) supy (r)(cid:5).This is so because Proposition 1 does not hold for regions in R2. For instance, for apoint p(χ, ψ) ∈ R2 we have χ = infx (p) = supx (p) and ψ = infy(p) = supy(p).• Step T4, for regions in REG∗, considers a cardinal direction relation R1: · · · :Rm andchecks whether the set of relations {R1, . . . , Rk} is a subset of 8 sets. In the case ofcardinal direction relations for regions in R2, we have to check a relation R against 39sets. In order to present these sets, we will first need to define the following sets (seealso Fig. 24):A = {NW, LWN, W, LSW, SW},B = {LNW, PNW, LW, PSW, LSW},C = {N, LN, B, LS, S},D = {LNE, PNE, LE, PSE, LSE},E = {NE, LEN, E, LES, SE},(cid:11) = {NE, LNE, N, LNW, NW},A(cid:11) = {LEN, PNE, LN, PNW, LWN}B(cid:11) = {E, LE, B, LW, W },C(cid:11) = {LSE, PSE, LS, PSW, LWS},D(cid:11) = {SE, LSE, S, LSW, SW}.EUsing the above sets we can express the 39 sets, we are looking for, as follows:Fig. 24. Groups of basic relation for regions in R2.S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135125A,A ∪ B,A ∪ B ∪ C,A ∪ B ∪ C ∪ D,B,B ∪ C,B ∪ C ∪ D,C,C ∪ D,(cid:11),A(cid:11),(cid:11) ∪ B(cid:11) ∪ C(cid:11) ∪ B(cid:11) ∪ C(cid:11) ∪ BA(cid:11),B(cid:11) ∪ CB(cid:11) ∪ CB(cid:11),C(cid:11) ∪ D,(cid:11) ∪ D(cid:11),(cid:11),AAC(cid:11)(cid:11),(cid:11) ∪ DE,E ∪ D,E ∪ D ∪ C,E ∪ D ∪ C ∪ B,D,D ∪ C,D ∪ C ∪ B,C,C ∪ B,(cid:11),E(cid:11) ∪ DE(cid:11) ∪ DE(cid:11) ∪ DE(cid:11),D(cid:11) ∪ C(cid:11) ∪ C(cid:11),(cid:11).(cid:11) ∪ B(cid:11),(cid:11) ∪ C(cid:11) ∪ C,(cid:11),(cid:11) ∪ BCDDC(cid:11)(cid:11),(cid:11),(cid:11) ∪ B(cid:11),For brevity we will show only the constraints added by Step T4 for the first 9 cases:If k > 1 Then{R1, . . . , Rk} ⊆ AIfElse If {R1, . . . , Rk} ⊆ A ∪ BElse If {R1, . . . , Rk} ⊆ A ∪ B ∪ CElse If {R1, . . . , Rk} ⊆ A ∪ B ∪ C ∪ DElse If {R1, . . . , Rk} ⊆ BElse If {R1, . . . , Rk} ⊆ B ∪ CElse If {R1, . . . , Rk} ⊆ B ∪ C ∪ DElse If {R1, . . . , Rk} ⊆ CElse If {R1, . . . , Rk} ⊆ C ∪ D· · ·EndIfThen O = O ∪ {supx (ai) < infx(aj )}Then O = O ∪ {supx (ai) = infx(aj )}Then O = O ∪ {supx (ai) < supx (aj )}Then O = O ∪ {supx (ai) = supx (aj )}Then O = O ∪ {infx(ai) = infx (aj ),supx (ai) = infx(ai)}Then O = O ∪ {infx(ai) = infx (aj ),supx (ai) < supx (aj )}Then O = O ∪ {infx(ai) = infx (aj ),supx (ai) = supx (aj )}Then O = O ∪ {infx(aj ) < infx (ai),supx (ai) < supx (aj )}Then O = O ∪ {infx(aj ) < infx (ai),supx (ai) = supx (aj )}126S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135Finally, in Algorithm CHECKCONSTRAINTNTB we only have to change line:If mbb(s(cid:11)) ∩ mbb(q) in a non-trivial box Then Q(cid:11) = Q(cid:11) ∪mbb(s(cid:11)) ∩ mbb(q)(cid:4)(cid:5)into:If mbb(s(cid:11)) ∩ mbb(q) in non-empty Then Q(cid:11) = Q(cid:11) ∪(cid:4)mbb(s(cid:11)) ∩ mbb(q)(cid:5)simply because contrary to REG∗, our new domain R2, contains regions (e.g., points andlines) that can be trivial boxes.The proof of correctness for the case of cardinal direction relations in DR2is similar tothe proof of correctness of Algorithm CONSISTENCY (Theorem 4). We can first generalizeTheorem 1 and Lemmata 1 and 2 to handle the case of constraints in DR2. Then, the proofis analogous to the proof of Theorem 4 (see also Fig. 18).7. Conclusions and future workIn this paper, we have presented a formal model for qualitative spatial reasoning withcardinal directions. This model can handle extended regions that might be disconnected oreven have holes. Then, we have studied the problem of checking the consistency of a setof cardinal direction constraints that can be expressed in our model. We have presented thefirst algorithm for this problem, proved its correctness and analyzed its computational com-plexity. An implementation of this algorithm is available to interested researchers, from thefirst author of this paper. Moreover, we have outlined a modification of the consistency al-gorithm that can be used for an interesting extension of the model of Section 3.With respect to the cardinal direction constraints the following are interesting openproblems:The consistency checking problem for connected regions. In this paper, we have consid-ered the consistency checking problem of a given set C of cardinal directionconstraints expressed on region variables a1, . . . , an ranging over the (possiblydisconnected) regions of class REG∗. We also intend to study an interesting re-striction of the consistency checking problem that requires all region variablesa1, . . . , an to range over the connected regions of class REG. This problem isopen. For example, it is not clear how to extend the proof of Theorem 3 so thatthe solution (ρa1, . . . , ρa1) that we have constructed is formed only by the con-nected region of REG (see Appendix B, p. 132).A complete complexity analysis of the consistency checking problem. In Sections 4 and 5,we have presented the first complexity analysis for the consistency problem.Specifically, we have seen than the consistency problem for a set of basic cardinaldirection constraints can be solved in PTIME while the consistency problem ofan unrestricted set of cardinal direction constraints is NP-complete. Following,the line of research of [3,19,21,25,30,38], we plan to continue and complete thisanalysis. To this end, one should first investigate the existence of classes of di-rectional constraints (other than the class of non-disjunctive constraints) with aS. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135127polynomial consistency checking problem. Another issue that should also be ad-dressed is whether the above classes are maximal (informally, a class is maximalif any extension of the class leads to NP-completeness). Answers to these prob-lems will help us to exploit the frontier between tractable and possibly intractablecases.Introducing cardinal direction constraints into a database model. We also intend to studyother interesting problems for cardinal direction relations like variable elimina-tion, minimal network computation, global consistency enforcement, entailment,etc. The important practical aspect of this research will be the development of allthe required theory that will allow us to integrate cardinal direction constraintsinto a constraint database model like of instance [22–24].Unified model for spatial information. Finally, we would like to combine the presentmodel with the topological constraints framework of [12,36] and with the direc-tion relations of [14,48] to devise a unified spatial reasoning formalism which cancope simultaneously with cardinal directions, topology and distance.AcknowledgementsWe would like to thank Timos Sellis for his comments and guidance. We are also grate-ful to the referees of this paper whose comments and suggestions have led to substantialimprovements.Appendix A. Proof of Lemma 1We will prove that v0 is a solution of O. By contradiction, let us assume that v0 is not asolution of O. This can happen in four cases:(i) There is a component variable aim such that the value for infx(αim) in v0 falsifies oneof the constraints of O.(ii) There is a component variable aim such that the value for supx(αim) in v0 falsifies oneof the constraints of O.(iii) There is a component variable aim such that the value for infy (αim) in v0 falsifies oneof the constraints of O.(iv) There is a component variable aim such that the value for supy(αim) in v0 falsifies oneof the constraints of O.Let us first assume that case (i) is what happens and consider every possible constraintin O that could involve infx(αim). Such a constraint can possibly belong to the followingthree categories:1. The constraint was introduced in Step T1 of the Algorithm TRANSFORM. This happenswhen TRANSFORM is called with input ai R1: · · · :Rk aj where 1 (cid:1) j (cid:1) n.128S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135The form of the constraint of O depends on the single-tile cardinal direction constraintaim R aj considered for variable aim by Algorithm TRANSFORM (where R is one ofR1, . . . , Rk and 1 (cid:1) j (cid:1) n). There are nine such possible constraints:(a) αim NW αjThe translation of this constraint into order constraints (Section 3.1) issupx(αim) (cid:1) infx (αj )and supy(αj ) (cid:1) infy(αim).Since no order constraints involving infx(αim) are introduced, this case is impos-sible.(b) αim W αjThis case is impossible as well (similar to 1(a), no order constraints involvinginfx(αim) are introduced).(c) αim SW αjThis case is impossible as well (similar to 1(a), no order constraints involvinginfx(αim) are introduced).(d) αim N αjIn this case, the constraint involving infx(αim) introduced by Algorithm TRANS-FORM is: infx(αj ) (cid:1) infx(αim) (M1). According to the substitutions of Lemma 1,the possible values for infx (αim) in v0 are infx (αj ) and infx (αi ).• If infx(αim) = infx (αj ) holds in v0, obviously, M1 is not falsified.• If infx(αim) = infx (αi ) holds in v0, we will prove that M1 is not falsified.Since αim N αj and infx (αim) = infx (αi) hold, it follows that {R1, . . . , Rk} (cid:4)⊆{NE, E, SE} and {R1, . . . , Rk} ⊆ {NE, E, SE, N, B, S} (see Fig. A.1). There-fore, when Algorithm TRANSFORM processes constraint ai R1: · · · :Rk aj , itwill introduce an order constraint infx(αj ) (cid:1) infx(αi ) (in the first ElseIf state-ment of Step T4). This order constraint will of course end up in O. Notice thatthis constraint implies M1.Therefore, this case is impossible as well.(e) αim B αjThis case is impossible as well (similar to 1(d), the constraint involving infx (αim)is M1 which is not falsified by the substitutions of Lemma 1).Fig. A.1. Proving Lemma 1 case 1(d).S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135129Fig. A.2. Proving Lemma 1 case 1(g).(f) αim S αjThis case is impossible as well (similar to 1(d), the constraint involving infx (αim)is M1 which is not falsified by the substitutions of Lemma 1).(g) αim NE αjIn this case, the constraint involving infx(αim) introduced by Algorithm TRANS-FORM is: supx(αj ) (cid:1) infx(αim) (M2). According to the substitutions of Lemma 1,the possible values for infx (αim) in v0 are supx(αj ) and infx(αi ).• If infx(αim) = supx (αj ) holds in v0, obviously, M2 is not falsified.• If infx(αim) = infx (αi ) holds in v0, we will prove that M2 is not falsified.Since αim NE αj and infx (αim) = infx (αi) hold, {R1, . . . , Rk} ⊆ {NE, E, SE}(see Fig. A.2). Therefore, when Algorithm TRANSFORM processes constraintai R1: · · · :Rk aj , it will introduce an order constraint supx (αj ) (cid:1) infx (αi ) (inthe first If statement of Step T4). This order constraint will of course end upin O. Notice that this constraint implies M2.Therefore, this case is impossible as well.(h) αim E αjThis case is impossible as well (similar to 1(g), the constraint involving infx (αim)is M2 which is not falsified by the substitutions of Lemma 1).(i) αim SE αjThis case is impossible as well (similar to 1(g), the constraint involving infx (αim)is M2 which is not falsified by the substitutions of Lemma 1).2. The constraint was introduced in Step T2 of Algorithm TRANSFORM. In this case,the constraint would be infx(αim) < supx (αim) (M3). According to the substitutions ofLemma 1, the possible values for infx(αim) in v0 are infx (αj ) and infx (αi).• If infx(αim) = infx(αj ) holds in v0, then it would be either αim N αj or αim B αjor αim S αj . For all these cases, Step T1 of Algorithm TRANSFORM introducesconstraint infx (αj ) (cid:1) infx (αim) (see Fig. A.3(a)).Therefore, substituting the value for infx(αim) in s0 by a smaller or equal value willnot falsify (M3).• Let us now assume that infx(αim) = infx(αi ) holds in v0. Step T3 of AlgorithmTRANSFORM introduces constraint infx(αi ) (cid:1) infx(αim) (see Fig. A.3(b)).Therefore, substituting the value for infx(αim) in s0 by a smaller or equal value willnot falsify (M3).130S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135Fig. A.3. Proving Lemma 1 case 2.3. The constraint was introduced in Step T3 of the Algorithm TRANSFORM. In this case,the constraint would be infx(ai) (cid:1) infx(aim) and it is not falsified by the substitutionsthat created v0.Summarizing, we have proved that case (i) considered at the beginning of the proof isimpossible. Similarly, we can show that cases (ii), (iii) and (iv) are also impossible (thesecases are symmetric to case (i)). Therefore, our original assumption about v0 does not hold,i.e., v0 is a solution of O. (cid:1)Appendix B. Proof of Theorem 3(Only if) Let us assume that the set of cardinal directions constraints C in variablea1, . . . , an is consistent. Let O be the set returned by Algorithm TRANSFORM when it iscalled with input C. We will prove that1. Set O has a maximal solution u0.2. Solution u0 satisfies Constraint NTB.We will show first that there is an ordinary solution s0 of O that satisfy Constraint NTB.Then, we will construct from s0 a maximal solution u0 of O that still satisfies ConstraintNTB.If set C is consistent then there exist regions of REG∗ that satisfies all constraintsin C. Let a R1: · · · :Rk b be an arbitrary constraint in C. Since this constraint is satis-fied, there exist regions α, β and subregions α1, . . . , αk of α such that α = α1 ∪ · · · ∪ αkand α1 R1 β, . . . , αk Rk β hold (see definitions in Section 3.1). The existence of all theseregions and their subregions implies the existence of their projections on x- and y-axes.The endpoints of these projections satisfy all the order constraints introduced in set O byAlgorithm TRANSFORM. This follows from the discussion in Section 4. Such endpointsform a solution s0 of O. Moreover, it follows from Lemma 2 that solution s0 also satisfiesConstraint NTB.Now let us use the substitutions of Lemma 1 to construct from s0 a maximal solution u0of O. The maximal solution u0 satisfies all constraints of set O (Lemma 1), thus we onlyhave to prove that u0 also satisfies Constraint NTB.S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135131Constraint NTB contains expressions of the form:mbb(s) ∩ mbb(s1) ∩ · · · ∩ mbb(sm) is a non-trivial box.(Z)Let σ , σ1, . . . , σm be the regions that solution s0 assigns to region variables s, s1, . . . , smand σ (cid:11), σ (cid:11)m be the regions that the maximal solution u0 assigns to the same regionvariables.1, . . . , σ (cid:11)Since solution s0 satisfies Constraint NTB, we have:mbb(σ ) ∩ mbb(σ1) ∩ · · · ∩ mbb(σm) is a non-trivial box.Regions σ (cid:11), σ (cid:11)1, . . . , σ (cid:11)m are formed by extending regions σ , σ1, . . . , σm respectively(using the substitutions of Lemma 1). Thus, we have:σ ⊆ σ (cid:11), σ1 ⊆ σ (cid:11)1, . . . , σm ⊆ σ (cid:11)m.We can verify that regions σ (cid:11), σ (cid:11)1, . . . , σ (cid:11)solution u0 satisfies Constraint NTB.m also satisfy Expression Z, thus the maximal(If) Let C be a set of cardinal direction constraints in variables a1, . . . , an and O bethe set returned by Algorithm TRANSFORM when it is called with input C. Let us assumethat v0 is a maximal solution of O and v0 satisfies Constraint NTB. To prove that C isconsistent, we will use v0 to form regions (ρa1, . . . , ρan) that satisfy all constraints in C.Let α1, . . . , αn be the non-trivial boxes that v0 assigns to region variables a1, . . . , an(see also Proposition 2). Let us now consider an arbitrary region variable ai (1 (cid:1) i (cid:1) n).= {c1, . . . , cm} contains all constraints of C with region ai asLet us also assume that Caithe primary region. Letaj1)c1 ≡ (ai R11: · · · :R1k1...cm ≡ (ai Rm: · · · :Rmajm)km1: · · · :Rm, . . . , Rmkm1: · · · :R1k1are cardinal direction relations and aj1, . . . , ajm , 1 (cid:1)where R11j1, . . . , jm (cid:1) n are region variables. Every time one of these m constraints is processedby Algorithm TRANSFORM, a new set of component variables corresponding to ai is in-} be all such sets oftroduced (Step T1). Let S1 = {a1component variables.}, . . . , Sm = {ami1, . . . , amikmi1, . . . , a1ik1, . . . , αmLet α1variables a1i1, . . . , α1ik1, . . . , ami1, . . . , a1ik1Now let us consider the setsi1, . . . , αkikmi1, . . . , amikmbe the non-trivial boxes that v0 assigns to regionrespectively (see also Proposition 2).i1) ∪ · · · ∪ Πx (α1ik1),Θ1 = Πy (α1i1) ∪ · · · ∪ Πy (α1ik1)i1) ∪ · · · ∪ Πx (αmikm),Θm = Πy(αmi1) ∪ · · · ∪ Πy (αmikm)of the x- and y-axis formed by considering sets S1, . . . , Sm in turn.Notice that since v0 is a maximal solution, all sets Ξ1, . . . , Ξm have the same endpointswith set Πx (αi) and all sets Θ1, . . . , Θm have the same endpoints with Πy (αi ) (accordingto Lemma 1).Ξ1 = Πx(α1...Ξm = Πx (αm132S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135Let ∆1i , . . . , ∆m= α1i1i , . . . , ∆mi be regions formed as follows:, . . . , ∆mi∆1i= αmi1∪ · · · ∪ α1ik1∪ · · · ∪ αm.ikmi are well-defined regions in REG∗ since they are formed by the unioni have thei and αjt satisfy by con-Regions ∆1of non-trivial boxes. From the above coincidence fact, regions αi , ∆1same bounding box. Moreover, for any t, 1 (cid:1) t (cid:1) m, regions ∆tstruction the constraint ct ≡ (ai Rt1i , . . . , ∆majt ).Let us consider region oai formed as follows:: · · · :Rtktoai= ∆1i∩ · · · ∩ ∆mi .Equivalently, we have:(cid:2)α1i1∪ · · · ∪ α1ik1(cid:6)oai==1(cid:1)s1(cid:1)k1, ..., 1(cid:1)sm(cid:1)km∩ · · · ∩ αmEach intersection α1is1ismtrivial box or a non-trivial box.(cid:3)∩ · · · ∩(cid:2)α1is1(cid:2)αmi1∪ · · · ∪ αmikm∩ · · · ∩ αmism(cid:3).(cid:3)(B.1)(1 (cid:1) s1 (cid:1) k1, . . . , 1 (cid:1) sm (cid:1) km) can be either empty or aWe now form a region ρai defined as the union of all the intersections α1is1from Eq. (B.1) that are non-trivial boxes.We can now prove the following:∩ · · · ∩ αmism1. ρai is a non-empty region in REG∗.Let us consider Eq. (B.1). Since u0 satisfies Constraint NTB, that at least one of theintersections forming the union is a non-trivial box, therefore ρai is non-empty. More-over, by definition, ρai is the union of non-trivial boxes and thus, is a region in REG∗.2. The assignment (ai, aj 1, . . . , aj m) = (ρai , αj1 , . . . , αjm ) satisfies all constraints c1, . . . ,cm in Cai .Let us consider an arbitrary constraint ct ≡ (ai Rt1us also consider the component variable ati1to at(cid:4)∈α1is1i1. Since v0 satisfies Constraint NTB there exist regions, . . . , αmism(cid:4)i1, . . . , αmαmikmis a non-trivial box and a subregion of ∆vii1, . . . , α1α1ik1(i.e., for any 1 (cid:1) v (cid:1) m, αvisvαvikv) such that∈(cid:5)(cid:5): · · · :Rtkt∈ St of ai and the box αtajt ), 1 (cid:1) t (cid:1) m, in Cai . Leti1 that v0 assigns= αvi1∪ · · · ∪B = αti1∩ α1is1∩ · · · ∩ αmismis a non-trivial box. Region B is a subregion of oai (see Eq. (B.1)) and a non-trivialbox thus it is also a subregion of ρai . Since non-trivial box αti1 lies completely in the1 tile of αjt (from the definition of constraint ct ), box B also lies completely in theRtRt1 tile of αjt . Thus region ρai has a subregion which is a non-trivial box and lies inthe Rt1 tile of αjt . Similarly, we can prove that region ρai has a subregion which is anon-trivial box and lies in the Rts tile of αjt for any s such that 2 (cid:1) s (cid:1) kt .S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135133(αjt ).(αjt )) we=also holds for every t such that 1 (cid:1) t (cid:1) m. It follows from the definitionFinally, we have to prove that region ρai lies completely in RtIn other words we have to prove that for every p ∈ R2 − (Rthave that p /∈ ρai holds. If p ∈ R − (Rtati1of region oai that p /∈ oai and thus p /∈ ρai holds.: · · · :RtTherefore, ρai Rtkt11(αjt ) ∪ · · · ∪ Rtkt(αjt )) holds, then p /∈ ∆tiαjt holds which proves the proposition.1(αjt ) ∪ · · · ∪ Rtkt1(αjt ) ∪ · · · ∪ Rtkt∪ · · · ∪ atikt3. Regions ρai and αi have the same bounding box, i.e., mbb(ρai ) = mbb(αi ).Let ρai (γ1, . . . , γl), l (cid:1) m, be a region formed as ρai but using only constraintsγ1, . . . , γl ∈ {c1, . . . , cm}. Notice that ρai (c1, . . . , cm) = ρai , ρai (ct ) = ∆ti for every1 (cid:1) t (cid:1) m and ρai (c1, . . . , cl) ∩ ρai (cl+1, . . . , cl(cid:11)) = ρai (c1, . . . , cl, cl+1, . . . , cl(cid:11)) hold.We will prove that infx(ρai (γ1, . . . , γl)) = infx(ai), for l (cid:2) 2. We will use inductionon the number of constraints l.For l = 2, let γ1 and γ2 be two arbitrary constraints in {c1, . . . , cm}. When AlgorithmTRANSFORM processes constraints γ1 and γ2 it introduces sets S1 and S2 of compo-nent variables corresponding to ai respectively. Let Σ1 and Σ2 be the set of boxes thatv0 assigns to the component variables of S1 and S2 respectively. Let also Φ and Ψ bethe sets containing all boxes in Σ1 and Σ2 respectively such that, for every s ∈ Φ ∪ Ψ ,infx (s) = infx (ai) holds. Notice that since regions ρai (γ1) and ρai (γ2) have the sameminimum bounding box we have Φ (cid:4)= ∅ and Ψ (cid:4)= ∅.Let us now assume that for all φ ∈ Φ and ψ ∈ Ψ , the intersection φ ∩ ψ is a triv-ial box (i.e., it is either empty or a point or a line segment). This contradicts the factthat v0 satisfies Constraint NTB, thus there exist regions u ∈ Φ and v ∈ Ψ such thatu ∩ v is a non-trivial box. Moreover, u ∩ v is one of the intersections unioned to con-struct ρai (γ1, γ2). Since u ∈ Φ and v ∈ Ψ , it is infx (u) = infx (v) = infx (αi). Thus,infx (ρai (γ1, γ2)) = infx(αi ) (see Fig. B.1).The inductive step is similar.In a similar way, we can also prove that supx (ρai ) = supx(ai), infy (ρai ) = infy (ai) andsupy(ρai ) = supy (ai). Thus mbb(ρai ) = mbb(αi ) holds.Similarly to the construction of ρai , we can also form regions:ρa1, . . . , ρai−1, ρai+1 , . . . , ρan.Each region ρai , 1 (cid:1) i (cid:1) n, is a non-empty, well-defined region in REG∗. Moreover, theassignment∗∈ REG(a1, . . . , an) = (α1, . . . , αi−1, ρai , αi+1, . . . , αn)Fig. B.1. Proving that mbb(ρai ) = mbb(αi ).134S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135satisfies all constraints in Cai .We will now show that the assignment (a1, . . . , an) = (ρa1, . . . , ρan) satisfies all con-straints in C. Let c ≡ (ai R aj ) be a constraint in C. From the previous discussion, weknow that regions ρai and αj satisfy constraint c. Since mbb(αj ) = mbb(ρaj ) it followsthat regions ρai and ρaj also satisfy constraint c. Therefore, the n-tuple (ρa1, . . . , ρan ) is asolution of C. (cid:1)References[1] A.I. Abdelmoty, B.A. El-Geresy, An intersection-based formalism for representing orientation relations ina geographic database, in: Proceedings of 2nd ACM Conference on Advances in GIS Theory, 1994.[2] J.F. Allen, Maintaining knowledge about temporal intervals, Comm. ACM 26 (11) (1983) 832–843.[3] P. Balbiani, J-F. Condotta, L.F. del Cerro, A new tractable subclass of the rectangle algebra, in: Proceedingsof IJCAI’99, Stockholm, Sweden, 1999, pp. 442–447.[4] A. Berretti, A. Del Bimbo, E. Vicario, Modeling spatial relationships between color sets, in: Proceedings ofIEEE Workshop on Content-based Access of Image and Video Libraries (CVPR-2000), 2000.[5] B. Bennett, Logical representations for automated reasoning about spatial relations, PhD Thesis, School ofComputer Studies, University of Leeds, 1997.[6] Z. Cui, A.G. Cohn, D.A. Randell, Qualitative and topological relationships in spatial databases, in: Proceed-ings of SSD’93, 1993, pp. 296–315.[7] E. Clementini, P. Di Fellice, G. Califano, Composite regions in topological queries, Inform. Syst. 7 (1995)594–759.[8] E. Clementini, P. Di Fellice, D. Hernandez, Qualitative representation of positional information, ArtificialIntelligence 95 (1997) 317–356.[9] W.G. Chinn, N.E. Steenrod, First Concepts of Topology, The Mathematical Association of America, 1966.[10] E. Davis, Representations of Commonsense Knowledge, Morgan Kaufmann, San Mateo, CA, 1990.[11] J.P. Delgrande, A. Gupta, T. Van Allen, Point based approaches to qualitative temporal reasoning, in: Pro-ceedings of the AAAI’99, Orlando, FL, 1999, pp. 739–744.[12] M.J. Egenhofer, Reasoning about binary topological relationships, in: Proceedings of SSD’91, 1991,pp. 143–160.[13] B. Faltings, Qualitative spatial reasoning using algebraic topology, in: Proceedings of COSIT’95, in: LectureNotes in Comput. Sci., vol. 988, Springer, Berlin, 1995, pp. 17–30.[14] A.U. Frank, Qualitative spatial reasoning about distances and directions in geographic space, J. Visual Lan-guages Comput. 3 (1992) 343–371.[15] C. Freksa, Using orientation information for qualitative spatial reasoning, in: Proceedings of COSIT’92, in:Lecture Notes in Comput. Sci., vol. 639, Springer, Berlin, 1992, pp. 162–178.[16] R. Goyal, M.J. Egenhofer, The direction-relation matrix: a representation for directions relations betweenextended spatial objects, in: The Annual Assembly and the Summer Retreat of University Consortium forGeographic Information Systems Science, 1997.[17] R. Goyal, M.J. Egenhofer, Cardinal directions between extended spatial objects, IEEE Trans. Data Knowl-edge Engrg., in press. Available at http://www.spatial.maine.edu/~max/RJ36.html.[18] R. Goyal, M.J. Egenhofer, Consistent queries over cardinal directions across different levels of detail, in:Proceedings of the 11th International Workshop on Database and Expert Systems Applications, 2000.[19] M. Grigni, D. Papadias, C. Papadimitriou, Topological inference, in: Proceedings of IJCAI’95, Montreal,Quebec, 1995.[20] H.W. Guesgen, Spatial reasoning based on Allen’s temporal logic, Technical Report TR-89-049, Interna-tional Science Institute National Technical, Berkeley, 1989.[21] P. Jonsson, T. Drakengren, A complete classification of tractability in RCC-5, J. Artificial Intelligence Res. 6(1997) 211–221.[22] P.C. Kanellakis, G.M. Kuper, P.Z. Revesz, Constraint query languages, J. Comput. System Sci. 51 (1995)26–52.S. Skiadopoulos, M. Koubarakis / Artificial Intelligence 163 (2005) 91–135135[23] M. Koubarakis, The complexity of query evaluation in indefinite temporal constraint databases, in: L.V.S.Lakshmanan (Ed.), Theoret. Comput. Sci. 171 (1997) 25–60. Special Issue on Uncertainty in Databases andDeductive Systems.[24] M. Koubarakis, S. Skiadopoulos, Querying temporal and spatial constraint networks in PTIME, ArtificialIntelligence 123 (1–2) (2000) 223–263.[25] G. Ligozat, Reasoning about cardinal directions, J. Visual Languages Comput. 9 (1998) 23–44.[26] S. Lipschutz, General Topology, McGraw Hill, New York, 1965.[27] S. Lipschutz, Set Theory and Related Topics, McGraw Hill, New York, 1998.[28] D.M. Mark, C. Freksa, S.C. Hirtle, R. Lloyd, B. Tversky, Cognitive models of geographic space, Internat. J.Geograph. Inform. Sci. 13 (8) (1999) 747–774.[29] A. Mukerjee, G. Joe, A qualitative model for space, in: Proceedings of AAAI’90, Boston, MA, 1990,pp. 721–727.[30] B. Nebel, H.-J. Bürckert, Reasoning about temporal relations: a maximal tractable subclass of Allen’s inter-val algebra, J. ACM 42 (1) (1995) 43–66.[31] D. Papadias, N. Arkoumanis, N. Karacapilidis, On the retrieval of similar configurations, in: Proceedings of8th International Symposium on Spatial Data Handling (SDH), 1998.[32] D. Papadias, Relation-based representation of spatial knowledge, PhD Thesis, Department of Electrical andComputer Engineering, National Technical University of Athens, 1994.[33] C.H. Papadimitriou, Computational Complexity, Addison Wesley, Reading, MA, 1994.[34] J. Portugali, I. Omer, Systematic distortions in cognitive maps: the North American west coast vs. the (west)coast of Israel, in: Proceedings of COSIT’03, in: Lecture Notes in Comput. Sci., vol. 2825, Springer, Berlin,2003, pp. 93–100.[35] C.H. Papadimitriou, D. Suciu, V. Vianu, Topological queries in spatial databases, J. Comput. SystemSci. 58 (1) (1999) 29–53.[36] D.A. Randell, Z. Cui, A. Cohn, A spatial logic based on regions and connection, in: Principles of KnowledgeRepresentation and Reasoning: Proceedings of the Third International Conference (KR’92), Cambridge,MA, Morgan Kaufmann, San Mateo, CA, 1992.[37] J. Renz, Maximal tractable fragments of the region connection calculus: a complete analysis, in: Proceedingsof IJCAI’99, Stockholm, Sweden, 1999, pp. 448–455.[38] J. Renz, B. Nebel, On the complexity of qualitative spatial reasoning: a maximal tractable fragment of theregion connection calculus, Artificial Intelligence 1–2 (1999) 95–149.[39] S. Skiadopoulos, M. Koubarakis, Qualitative spatial reasoning with cardinal directions: semantics, al-gorithms and computational complexity, Technical Report TR-2000-3, National Technical University ofAthens, 2000. Available at http://www.dblab.ece.ntua.gr/publications.[40] S. Skiadopoulos, M. Koubarakis, Composing cardinal directions relations, in: Proceedings of the 7th In-ternational Symposium on Spatial and Temporal Databases (SSTD’01), in: Lecture Notes in Comput. Sci.,vol. 2121, Springer, Berlin, 2001, pp. 299–317.[41] S. Skiadopoulos, M. Koubarakis, Qualitative spatial reasoning with cardinal directions, in: Proceedings ofthe 7th International Conference on Principles and Practice of Constraint Programming (CP’02), in: LectureNotes in Comput. Sci., vol. 2470, Springer, Berlin, 2002, pp. 341–355.[42] S. Skiadopoulos, M. Koubarakis, Composing cardinal direction relations, Artificial Intelligence 152 (2)(2004) 143–171.[43] S. Skiadopoulos, Query evaluation in constraint databases, PhD Thesis, School of Electrical and ComputerEngineering, National Technical University of Athens, 2002.[44] A.P. Sistla, C. Yu, R. Haddad, Reasoning about spatial relationships in picture retrieval systems, in: Proceed-ings of VLDB’94, 1994, pp. 570–581.[45] B. Tversky, Distortions in memory for maps, Cognitive Psychology 13 (1981) 407–433.[46] P. van Beek, Reasoning about qualitative temporal information, Artificial Intelligence 58 (1992) 297–326.[47] M. Vilain, H. Kautz, P. van Beek, Constraint propagation algorithms for temporal reasoning: a revised re-port, in: D.S. Weld, J. de Kleer (Eds.), Readings in Qualitative Reasoning about Physical Systems, MorganKaufmann, San Mateo, CA, 1989, pp. 73–381.[48] K. Zimmermannm, Enhancing qualitative spatial reasoning—combining orientation, in: Proceedings ofCOSIT’93, in: Lecture Notes in Comput. Sci., vol. 716, Springer, Berlin, 1993, pp. 69–76.