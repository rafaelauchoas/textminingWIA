Artificial Intelligence 171 (2007) 255–285www.elsevier.com/locate/artintAnyone but him: The complexity of precluding an alternative ✩Edith Hemaspaandra a, Lane A. Hemaspaandra b,∗, Jörg Rothe ca Department of Computer Science, Rochester Institute of Technology, Rochester, NY 14623, USAb Department of Computer Science, University of Rochester, Rochester, NY 14627, USAc Institut für Informatik, Heinrich-Heine-Universität Düsseldorf, 40225 Düsseldorf, GermanyReceived 1 February 2006; received in revised form 18 January 2007; accepted 29 January 2007Available online 7 February 2007AbstractPreference aggregation in a multiagent setting is a central issue in both human and computer contexts. In this paper, we studyin terms of complexity the vulnerability of preference aggregation to destructive control. In particular, we study the ability of anelection’s chair to, through such mechanisms as voter/candidate addition/suppression/partition, ensure that a particular candidate(equivalently, alternative) does not win. And we study the extent to which election systems can make it impossible, or compu-tationally costly (NP-complete), for the chair to execute such control. Among the systems we study—plurality, Condorcet, andapproval voting—we find cases where systems immune or computationally resistant to a chair choosing the winner nonethelessare vulnerable to the chair blocking a victory. Beyond that, we see that among our studied systems no one system offers the bestprotection against destructive control. Rather, the choice of a preference aggregation system will depend closely on which types ofcontrol one wishes to be protected against. We also find concrete cases where the complexity of or susceptibility to control variesdramatically based on the choice among natural tie-handling rules.© 2007 Elsevier B.V. All rights reserved.Keywords: Approval voting; Computational complexity; Computational resistance; Condorcet voting; Destructive control; Election systems;Plurality voting; Preference aggregation; Multiagent systems; Vote suppression1. IntroductionVoting provides a broad framework for collective decision-making. The literature on voting is vast and active, andspans such areas as AI, complexity, economics, operations research, and political science. As noted by Conitzer, Lang,and Sandholm [9], voting has been proposed as a mechanism for use in decision-making in various computational✩ Supported in part by grants NSF-CCR-0311021, NSF-CCF-0426761, DFG-RO-1202/9-1, and DFG-RO-1202/9-3, a Friedrich Wilhelm BesselResearch Award, and the Alexander von Humboldt Foundation’s TransCoop program. A preliminary version of this paper appeared in AAAI-05[E. Hemaspaandra, L. Hemaspaandra, J. Rothe, Anyone but him: The complexity of precluding an alternative, in: Proceedings of the 20th NationalConference on Artificial Intelligence, AAAI Press, 2005]. This work was done in part while the three authors were visiting Julius-Maximilians-Universität Würzburg, in part while the first two authors were visiting Heinrich-Heine-Universität Düsseldorf, and in part while the first author wason sabbatical at the University of Rochester.* Corresponding author.URLs: http://www.cs.rit.edu/~eh/ (E. Hemaspaandra), http://www.cs.rochester.edu/u/lane/ (L.A. Hemaspaandra),http://ccc.cs.uni-duesseldorf.de/~rothe/ (J. Rothe).0004-3702/$ – see front matter © 2007 Elsevier B.V. All rights reserved.doi:10.1016/j.artint.2007.01.005256E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285settings, including planning [13,14] and collaborative filtering [29]. Voting also may be useful in many large-scalecomputer settings. Examples of much recent interest include the (web-page) rank aggregation problem, and relatedissues of reducing “spam” results in web search and improving similarity search, for which the use of voting systemshas been proposed [12,15]. In such an automated setting, it is natural to imagine decisions with thousands or millionsof “voters” and “candidates”.In Bartholdi, Tovey, and Trick’s seminal paper “How hard is it to control an election?” [3], the issue of constructivecontrol of election systems is studied: How hard is it for a chair (who knows all voters’ preferences) to—throughcontrol of the voter or candidate set or of the partition structure of an election—cause a given candidate (equivalently,alternative) to be the (unique) winner?To avoid any possible confusion, let us immediately stress that by “chair” we, following the use of Bartholdi, Tovey,and Trick [3], simply mean some entity that can carry out the given type of change to the structure of the election.Bartholdi, Tovey, and Trick probably chose to use the word “chair” because that role might typically be that of someauthority responsible for organizing the election and determining its structure. Note that the chair is not necessarilyone of the candidates, or the distinguished candidate c of our forthcoming problem specifications,1 or one of the voters(although we do not exclude these possibilities). (In particular, “chair” here does not mean “a special, designated voterwho if there is a tie is allowed to break the tie”—a meaning the term has in some other contexts, but not in this paper.)To avoid a different potential source of confusion, let us also immediately focus on the fact that in the Bartholdi,Tovey, and Trick [3] model, which is also adopted here, the chair has complete information on the voters’ preferences.This is a natural assumption in many, though certainly not all, situations.2 However, it is critical to note that since thecase where complete information is available to the chair is a special subcase of the more general setting that allowsinformation to be specified with any level of completeness, lower bounds obtained in the complete information settingare inherited by any natural incomplete information model (this point was made in this context even in the originalcontrol paper of Bartholdi, Tovey, and Trick [3]). This is worth stressing: All our NP-hardness results—obtained herein the model of complete information—are instantly inherited by any natural incomplete information model (e.g.,models in which missing preferences are filled in by an adversary of the chair; models in which missing preferencesare filled in as favorably for the chair’s goal as possible; models in which the chair must find an action that underat least k (k would be part of the input) of all possible completions of the unknown information allows the chair toobtain his/her desired outcome; models in which the chair must find an action that under at least 99 percent of allpossible completions of the unknown information allows the chair to obtain his/her desired outcome; etc.). Anotherangle to approach this from would be to note that our lower-bound results are sufficiently strong that they show thateven when the chair has all the information he or she could possibly ask for about preferences—namely, completeinformation—his/her task is nonetheless still NP-hard in many cases. Simply put, the complete-information modelis actually, as a matter of complexity-theoretic basics, a more challenging one in which to prove NP-hardness lowerbounds than a partial-information model would be (although the authors realize that this may seem counterintuitive).Bartholdi, Tovey, and Trick studied plurality and Condorcet voting, and seven natural types of control: addingcandidates, suppressing candidates, partition of candidates, run-off partition of candidates, adding voters, suppressingvoters, and partition of voters. They found that in some cases there is immunity to constructive control (if his/her1 It certainly is the case that in our model the chair will be trying to make the distinguished candidate c win. And so there will be many naturalsituations in which c and the chair coincide. However, that need not always be the case. It is possible to envision situations in which c does not wantc to win (e.g., elections for the chair of an academic department in which some faculty member out of duty would be willing to serve if electedbut would far rather someone else serve; or elections for who gets “removed from the island” on some reality TV show) or situations, even when cdoes want c to win, in which the actor working to make c win is someone other than c (e.g., in particularly bare-knuckled academic faculty hiring,a department chairperson might set a vote date when certain faculty members are out of town, as an attempt to help a certain one of the externalapplicants).2 For example, in a computer science department, after endless discussions, most people know what each person’s position is on key issues. Thisis an example of a rather small-scale, intimate, private election. Of course, one might reasonably point out that large-scale public elections amonghumans are examples where, though polling data may give some information, typically no one will know all voters’ preferences. However, we notethat, as mentioned in the paragraph to which this is a footnote, our lower-bound (NP-hardness) results for the case of complete information implyNP-hardness in the case of essentially any natural partial-information model. We also point out that large-scale elections among electronic agentsmight well have complete preference information available to the chair. (Even in cases of large-scale human elections, there are relatively broadsources of information, such as party affiliation information in voter registration records. Although this certainly isn’t perfectly predictive, it mightwell be useful in attempts, for example, to gerrymander district boundaries or even, and this is in some rough sense an example of control by addingvoters, to target get-out-the-vote drives.)E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285257candidate was not already the3 unique winner, no action of the specified type by the chair can make the candidate theunique winner), in some cases there is (computational) resistance to constructive control (it is NP-complete to decidewhether the chair can achieve his/her desired outcome), and in some cases the system is (computationally) vulnerableto constructive control (there is a polynomial-time algorithm that will tell the chair how to achieve the desired outcomewhenever possible4).In this paper, we obtain results for each of their 14 cases (two preference aggregation systems, each under sevencontrol schemes) in the setting of destructive control. In contrast with constructive control, in which a chair triesto ensure that a specified desirable candidate is the (unique) winner, in destructive control the chair tries to ensurethat a specified detested candidate is not the (unique) winner. Regarding the naturalness of destructivity, the light-hearted title of this paper tries to reflect the fact that, in human terms, one often hears feelings expressed that focusstrategically on precluding one candidate, and of course in other settings this also may be a goal. Regarding thereality of electoral control, from targeted “get-out-the-vote” advertisements of parties and candidates to (alleged)voter suppression efforts by independent groups, from the way a committee chair groups alternatives to any casewhere a faculty member hands out student course evaluations on a day some malcontent students are not in class, it ishard to doubt that the desire for electoral control—both destructive and constructive—is a real one.Destruction has been previously studied by Conitzer, Lang, and Sandholm [9,10], but in the setting of electionmanipulation—in which some (coalition of) voters knowing all other voters’ preferences are free to shift their ownpreferences to affect the outcome. In contrast, in this paper we study destruction in the very different setting ofelectoral control [3]—where a chair, given fixed and unchangeable voter preferences, tries to influence the outcomevia procedural/access means.One might ask, “Why bother studying destructive control, since any rational chair would prefer to assert construc-tive control?” The answer is that it is plausible—and our results show it is indeed the case—that destructive controlmay be possible in settings in which constructive control is not. Informally put, destructive control may be easierfor the chair to assert. For example, we prove formally that of the seven types of constructive control of Condorcetelections that Bartholdi, Tovey, and Trick [3] study, the four they showed not vulnerable to constructive control are allvulnerable to destructive control. The remaining three cases regarding Condorcet voting are vulnerable to construc-tive control [3], but we show that they are immune to destructive control. As another example, consider the ten typesof constructive control of approval elections that the present paper studies. We will prove formally that among theseven we show not vulnerable to constructive control, five of those seven are vulnerable to destructive control and theremaining two of those seven are immune to destructive control. The remaining three cases regarding approval votingare vulnerable to constructive control but immune to destructive control.5Table 1 summarizes our results on the complexity of destructively controlling Condorcet, plurality, and approvalelections. We also when needed obtain, for comparative purposes, new results on the complexity of constructivecontrol, and Table 1 displays those and also constructive control results of Bartholdi, Tovey, and Trick [3]. All entries3 Really “a unique winner”, since there may be no winner at all, but we’ll usually write “the unique winner” when this is clear from context.4 This is more like “computationally certifiably-vulnerable”, see Definition 3.1. Vulnerability as defined in [3] means one can quickly decide ifthere exists a way for the chair to achieve the desired outcome.5 Savvy readers may wonder whether there is something very troubling in having a system be vulnerable to constructive control but immune todestructive control. After all, to ensure that the despised candidate c is not the unique winner we simply have to ask whether either at least oneof the other candidates can be ensured to unique-win-or-tie-for-winner or it can be ensured that there are no winners. Put somewhat formally, thisimplies that for strongly voiced (i.e., systems for which whenever there is at least one candidate there will be at least one winner; so approvalvoting is strongly voiced but Condorcet voting is not) election systems destructive control polynomial-time disjunctively truth-table reduces [27]to constructive control (redefined to speak not of “unique winner” but to speak of “winner (possibly with others also winning)”), and so thedestructive control problem can (within a polynomial factor) be no harder computationally than the (redefined) constructive control problem (thistype of reduction is noted in a different setting by Conitzer and Sandholm [10]). Our brief explanation of why cases of such a form would notcause a paradox lies in the word “computational”: Although immunity is the most desirable case in terms of security from control, the complexityof recognizing whether a given candidate can be precluded from winning in immune cases will most typically be in P—after all, we can never,when immunity holds, change a given candidate from unique winner to not the unique winner, so the related decision problem is typically easy.(Technical side remark: We say “will most typically be in P/is typically” rather than “will be in P/is” because for impractical systems that—unlikethose here—have winner-testing problems that are not in P, it is in concept possible that one can have immunity and yet also have the relatedlanguage problem not belong to P.)The disjunctive-truth-table connection mentioned above explains why, if P (cid:3)= NP, it is impossible for any strongly voiced election system tohave computational resistance to destructive control hold for any problem that, when redefined to embrace ties, is vulnerable to constructive control.258E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285Table 1Summary of resultsControl byConstruct.Destruct.Construct.Destruct.Construct.Destruct.PluralityCondorcetApprovalAdding CandidatesDeleting CandidatesPartition ofCandidatesRun-off Partition ofCandidatesAdding VotersDeleting VotersRRTE: RTP: RTE: RTP: RVVRRTE: RTP: RTE: RTP: RVVIVVVRRVIIIVVIVTE: VTP: ITE: VTP: IRRVITE: ITP: ITE: ITP: IVVPartition ofVotersResults new to this paper are in boldface. Nonboldface results are due to Bartholdi, Tovey, and Trick [3]. Key: I = immune, R = resistant, V =vulnerable, TE = Ties-Eliminate, TP = Ties-Promote.TE: VTP: RTE: VTP: RTE: RTP: RTE: VTP: VVRin boldface in Table 1 are new results obtained in this paper; the other results are due to Bartholdi, Tovey, and Trick [3].(A preliminary version of this paper appeared as [23].) For each boldface “V” in the table, “certifiably-vulnerable”is in fact also achieved by our theorems. We mention in passing that for nonboldface “V”s in the table, “certifiably-vulnerable” can be seen directly from or by modifying the algorithms of Bartholdi, Tovey, and Trick [3].For control-by-partition problems—which will involve subelections—we distinguish between the models Ties-Eliminate (TE, for short) and Ties-Promote (TP, for short), which define what happens when there are ties amongwinners in a subelection (before the final election), namely, all participating candidates are eliminated and no onemoves forward from that subelection (TE; to be very clear on this: In the TE model, a candidate moves forward froma subelection if and only if he/she uniquely wins that subelection), or all who tie for winner move forward (TP). Notethat these models do not apply to Condorcet voting, under which when a winner exists he/she is inherently unique;so the TE/TP distinction is made only for plurality and approval voting. One purpose (see the discussion in the para-graph before Theorem 3.6) of introducing these tie-handling rules is to avoid the problem of the approach taken in [3],which in effect modifies the decision problem itself to avoid ties in subelections. In contrast, our two models leavethe decision problem unchanged, while clearly defining how to handle such ties when they occur. We consider thisgeneral approach the more natural one. As to our two tie-handling models, a referee suggested that to him/her the TPmodel seems more natural than the TE model, and we pass on that comment to the reader. However, we point out thatone could also see things the other way: Since in electoral control we seek to determine the complexity of making acandidate a unique winner, one could argue that it is most natural to apply in all subelections the same exacting stan-dard, namely unique winning, that will be applied in the final election. And that is precisely what the TE model does.In this paper we always provide results in both models, TP and TE, and so fans of either model will find their modeladdressed, and even more importantly, readers interested in whether tie-handling models change results will find that agiven control problem’s complexity sometimes changes dramatically depending on which tie-handling model is used.The natural conclusion to draw from our results is that when selecting an election/preference aggregation system,one should at least be aware of the issue of the system’s vulnerability to control—and, beyond that, one’s choice ofsystem will depend closely on which types of immunity or computational6 resistance one most values. Our results6 We stress that the focus of this paper is on computational resistance to control (and we mention in passing that there is also a growing setof papers on the computational difficulty of manipulation and bribery, see for example [1,2,9,10,16,21] and the survey [17]). By having thiscomputational focus, we in no way wish to detract from the fascinating results in the literature on social choice that touch on issues of when acandidate can be dethroned in various ways from what might be called an incentive-based point of view. For example, we mention the interestingrecent work of Brams and Sanver [7] on “critical strategies under approval voting”, the focus of which is not on computational complexity issues butrather on incentive issues. Although a presentation of their results is beyond the scope of our paper we mention that, under appropriate assumptionsabout what strategies voters are allowed to hold and so on, they show that approval voting will always allow as a strong (protected even against anycoalition of voters who would all benefit from a defection) Nash equilibrium the election of a single candidate who is a Condorcet winner, whenone exists, and that various other voting systems lack this property and even lack some weaker properties.E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285259also show that constructive and destructive control often differ greatly: A system immune to constructive control maybe vulnerable to destructive control, and vice versa. Finally, our results show that the way in which ties in subelec-tions are handled can have a significant effect: For both voting types where tie-handling rules are meaningful, wefind cases where the complexity of or susceptibility to control varies dramatically based on the choice among naturaltie-handling rules.2. PreliminariesWe first define the three voting systems considered—plurality voting, Condorcet voting, and approval voting. Ofcourse, there are many more voting systems than the three considered here; see, e.g., Brams and Fishburn [6] for abroad overview. The main reason for our choice of voting systems is that we wish to allow comparison with previouswork. As mentioned earlier, Bartholdi, Tovey, and Trick [3] introduced and studied constructive control for pluralityand Condorcet voting. A main contribution of this paper is to complement their results with the corresponding (andin the case of Condorcet voting, quite different) destructive control results. In addition, we study control for a thirdvery natural and fundamental voting system, approval voting, and our results there give a quite different picture thanthose for plurality and Condorcet voting, as approval voting gives the only candidate-partition case we find where thechoice of tie-handling rule makes a difference (see Section 3 for a detailed discussion of our results).In approval voting, each voter votes “Yes” or “No” for each candidate. (So, for approval voting, a voter’s prefer-ences are reflected by a 0–1 vector.) All candidates with the maximum number of “Yes” votes are winners. Approvalvoting has been proposed as a variant of plurality voting, see Brams and Fishburn [5].Plurality and Condorcet voting are defined in terms of strict preferences. For them, an election is given by apreference profile, a pair (C, V ) such that C is a set of candidates and V is the multiset (henceforth, we’ll just sayset, as a shorthand) of the voters’ preference orders on C.7 We assume that the preference orders are irreflexive andantisymmetric (i.e., every voter has strict preferences over the candidates), complete (i.e., every voter ranks eachcandidate), and transitive.A voting system is a rule for how to determine the winner(s) of an election. Formally, any voting system is definedto be a function mapping any given preference profile (or the analog with voters’ 0–1 vectors for the approval votingcase) to society’s aggregate choice set, the set of candidates who have won the election.In plurality voting, each candidate with the most “first preference among the candidates in the election” voters forhim/her wins. In Condorcet voting, for each c ∈ C, c is a winner if and only if for each d ∈ C with d (cid:3)= c, c defeats dby a strict majority of votes in a pairwise election between them based on the voters’ preferences.The Condorcet Paradox observes that whenever there are at least three candidates, due to cyclic aggregate prefer-ence rankings Condorcet winners may not exist [8]. That is, the set of winners may be empty. However, a Condorcetwinner is unique whenever one does exist. In the case of plurality and approval voting, due to ties, there may exist mul-tiple winners. Regarding ties, we—following Bartholdi, Tovey, and Trick [3] to best allow comparison—focus in ourcontrol problems on creating a unique winner (constructive), and precluding a candidate from being the unique winner(destructive). (Ties in subelections, for the partition problems, are handled via the TE and TP rules described earlier.)3. ResultsThe issue of control of an election by the authority conducting it (called the chair) can be studied under a varietyof models and scenarios. For plurality and Condorcet voting, Bartholdi, Tovey, and Trick [3]—and for the rest ofthis section that paper will be referred to as “BTT92”—study constructive control by adding candidates, deletingcandidates, partition of candidates, run-off partition of candidates, adding voters, deleting voters, and partition ofvoters. In their setting, the chair’s goal is to make a given candidate uniquely win the election. Analogously, weconsider in turn the corresponding seven destructive control problems, where the chair’s goal is to preclude a givencandidate from being the unique winner. For each of these control scenarios, we define the problem and present priorresults and our results. (Formally, for each type of control one defines a decision problem and studies its computational7 In various settings involving subelections, adding candidates, and resistance constructions, we will speak of an election (C(cid:5), V ) where thepreferences of V are over some C ⊇ C(cid:5). In such cases, we intend the natural interpretation: For the purpose of that election one views the inducedpreference order (or approval vector) for the restriction to C(cid:5).260E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285complexity.) To make comparisons as easy as possible, we in stating these control problems whenever possible exactlyfollow BTT92’s wording for constructive control (except modified to the destructive case for the destructive cases),and when we diverge, we explain why and how.As is common, we state our decision problems as “Given” instances, and a related Yes/No question. The languagein each case is the set of all instances for which the answer is Yes. Since in each control scenario the “Given” instanceis identical for the constructive and the destructive case, we state it just once and then state the corresponding twoquestions, one for constructive and one for destructive control.3.1. Immunity, vulnerability, and resistance definitions, and Control by Adding CandidatesGiven: A set C of qualified candidates and a distinguished candidate c ∈ C, a set D of possible spoiler candidates,and a set V of voters with preferences (in the approval case, the “preferences” will, as always for that case,actually be 0–1 vectors) over C ∪ D.Question (constructive): Is there a choice of candidates from D whose entry into the election would assure that c isthe unique winner?Question (destructive): Is there a choice of candidates from D whose entry into the election would assure that c isnot the unique winner?The above type of control captures the idea that the chair tries to enthrone the desired candidate c (in the construc-tive case) or to dethrone the despised candidate c (in the destructive case) by introducing new “spoiler” candidates.V is formally a multiset. However, throughout this paper we assume—as is the standard approach in papers on thecomputational complexity of elections—that in the input the preferences are coded as a list (the ballots), one voter ata time, and in particular are not encoded as a multiset that uses binary numbers to code cardinalities.With this first problem—Control by Adding Candidates—stated, now is a good time to define our notions ofcontrol. Our terminology will closely follow the notions in BTT92, to allow comparison.Definition 3.1. We say that a voting system is immune to control in a given model of control (e.g., “destructivecontrol via adding candidates”) if the model regards constructive control and it is never possible for the chair to byusing his/her allowed model of control change a given candidate from being not a unique winner to being the uniquewinner, or the model regards destructive control and it is never possible for the chair to by using his/her allowed modelof control change a given candidate from being the unique winner to not being a unique winner. If a system is notimmune to a type of control, it is said to be susceptible to that type of control.A voting system is said to be (computationally) vulnerable to control if it is susceptible to control and the cor-responding language problem is computationally easy (i.e., solvable in polynomial time). If a system is not justvulnerable regarding some particular model of control but one can even produce in polynomial time the actual actionof the chair to execute control the “best” way (namely, by adding or deleting the smallest number of candidates orvoters for add/delete problems; for partition problems, any legal partition that works is acceptable), we say the systemis (computationally) certifiably-vulnerable to (that model of ) control.8A voting system is said to be resistant to control if it is susceptible to control but the corresponding languageproblem is computationally hard (i.e., NP-complete).98 For the problems studied here, certifiably-vulnerable implies vulnerable (but we list both, since if one studied add/delete problems stated not interms of “is there some subset” or “by adding/deleting at most k” but rather in terms of “by adding/deleting exactly k”, then for certain systems theimplication need not hold).9 It would be more natural to define resistance as meaning the corresponding language is (many-one) NP-hard. However, in this paper, we defineresistance in terms of NP-completeness. One reason is that this matches the way the term is used by BTT92. More importantly, all the problemsdiscussed in this paper have obvious NP upper bounds since testing whether a given candidate has won a given election for the systems consideredhere is obviously in P. So for the problems in this paper, NP-completeness and NP-hardness stand or fall together. We mention in passing thatthere are natural election systems whose complexity seems beyond NP. The first such case established was for the election system defined byLewis Carroll in 1876 [11], where even the complexity of determining whether a given candidate has won is now known to be hard for parallelaccess to NP [22]. Other election systems whose winner complexity is hard for parallel access to NP include Kemeny and Young elections, see[20,25,33–35].E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285261For general background on the theory of NP-completeness, see, e.g., [19,26].As to what is known about Constructive Control by Adding Candidates, BTT92 shows that plurality is resistantand Condorcet is immune. Our results are:Theorem 3.2. Approval (voting) is immune to constructive control by adding candidates, and plurality, Condorcet,and approval (voting) are respectively resistant, vulnerable/certifiably-vulnerable, and vulnerable/certifiably-vulner-able to destructive control by adding candidates.So, though Condorcet and approval are immune to constructive control of this sort, they both are vulnerable todestructive control. This reverses itself for:3.2. Control by Deleting CandidatesGiven: A set C of candidates, a distinguished candidate c ∈ C, a set V of voters, and a positive integer k < (cid:8)C(cid:8).Question (constructive): Is there a set of k or fewer candidates in C whose disqualification would assure that c is theunique winner?Question (destructive): Is there a set of k or fewer candidates in C − {c} whose disqualification would assure that cis not the unique winner?In this type of control, the chair seeks to influence the outcome of the election by suppressing certain candidates(other than c), in hopes that their voters now support c to ensure c’s victory (in the constructive case) or that they nowsupport another candidate to ensure stopping c (in the destructive case).10Note that this formalization of the destructive case is not a perfect analog of the constructive case of BTT92 in thatwe explicitly prevent deleting c, since otherwise any voting system in which the winners can efficiently be determinedwould be trivially vulnerable to this type of control.Here, BTT92 establishes for constructive control resistance for plurality and vulnerability for Condorcet. Ourresults are:Theorem 3.3. Approval is vulnerable/certifiably-vulnerable to constructive control by deleting candidates. Plurality,Condorcet, and approval are respectively resistant, immune, and immune to destructive control by deleting candi-dates.11We now handle jointly the two types of partition of candidates, since they yield identical results.3.3. Control by Partition of CandidatesGiven: A set C of candidates, a distinguished candidate c ∈ C, and a set V of voters.Question (constructive): Is there a partition of C into C1 and C2 such that c is the unique winner in the sequentialtwo-stage election in which the winners in the subelection (C1, V ) who survive the tie-handling rule moveforward to face the candidates in C2 (with voter set V )?10 A reviewer, regarding the example of meta-search engines that our introduction gave to argue that some elections can have a large number ofcandidates, suggested the example wasn’t interesting regarding control “as the election mechanism and the chair there are indistinguishable”. Wepoint out that in fact, even in that example, the chair and the election mechanism may, far from being indistinguishable, differ. The setting for thisexample is a meta-search engine that takes page-ranks from a number of search engines and aggregates them. Note that one might have an electionmechanism implemented fairly by the meta-search engine. And one might have an evil external actor (who would in our terminology be the chair)trying to decide whether getting rid of some of the underlying search engines (who would in our terminology be the voters)—and depending on thesetting this elimination could be by crashing their servers, by sabotaging their network connectivity to the meta-search engine, or even by buyingtheir companies and shuttering them—he or she could get a more favorable overall outcome. This is a perfectly fair example of control by deletionof voters (a control type that will be defined in Section 3.6).11 For this and all other problems whose statements invoke a “k” bound, by immune we mean that for no election (and thus no k) can the chair’saction ever cause change of the sort required to break immunity (i.e., taking someone who is not a unique winner and making him/her be a uniquewinner in the constructive cases, or taking someone who is a unique winner and making him/her no longer be a unique winner in the destructivecases), and by susceptible we mean “not immune” (under the definition just given).262E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285Question (destructive): Is there a partition of C into C1 and C2 such that c is not the unique winner in the sequentialtwo-stage election in which the winners in the subelection (C1, V ) who survive the tie-handling rule moveforward to face the candidates in C2 (with voter set V )?3.4. Control by Run-off Partition of CandidatesGiven: A set C of candidates, a distinguished candidate c ∈ C, and a set V of voters.Question (constructive): Is there a partition of C into C1 and C2 such that c is the unique winner of the election inwhich those candidates surviving (with respect to the tie-handling rule) subelections (C1, V ) and (C2, V )have a run-off with voter set V .Question (destructive): Is there a partition of C into C1 and C2 such that c is not the unique winner of the electionin which those candidates surviving (with respect to the tie-handling rule) subelections (C1, V ) and (C2, V )have a run-off with voter set V .These two types of control express settings—one via a cascading setup, and one via a run-off setup—in which thechair tries to, overall, partition the candidates in such a clever way that the favored candidate c is made the uniquewinner (in the constructive case) or that the hated candidate c fails to be the unique winner (in the destructive case).Here, BTT92 shows that for constructive control plurality is resistant (and their result on that holds in both our TEand TP models) and Condorcet is vulnerable. Our results are:Theorem 3.4. Approval is vulnerable/certifiably-vulnerable to constructive control by partition of candidates andrun-off partition of candidates in model TE and immune to constructive control by partition of candidates and run-off partition of candidates in model TP. Plurality, Condorcet, and approval are, in models TE and TP, respectivelyresistant, immune, and immune to destructive control by partition of candidates and by run-off partition of candi-dates.So Condorcet, though vulnerable to constructive control, is immune to destructive control here. And, perhaps moreinteresting, for constructive control, approval changes from vulnerable to immune depending on the tie-handlingrule.We now turn to control of the voter set. The intuition behind seeking destructive control by adding or deletingvoters is clear, e.g., getting out the vote and vote suppression.12 We handle these two cases together as their results areidentical.12 One referee reasonably wanted us to tell the reader something about the relative importance in US political elections of control via candidatesversus control via voters, and so we pass on to the reader, verbatim, the referee’s comment on this issue:At least in the US, I think control by adding, deleting, and partitioning voters is less important than doing the same for candidates. True, beforewomen got the vote in the 1920s and before the civil rights movement in the 1960s, voters were regularly disenfranchised. But now mostmanipulation today occurs through control of how and when candidates/alternatives are introduced and positioned, which in political science isoften referred to as agenda control. Two good sources on this issue, one primarily empirical and the other theoretical, are W.H. Riker, The Artof Political Manipulation [32] and A.D. Taylor, Social Choice and the Mathematics of Manipulation [36].Although we most certainly do not wish to disagree with the referee’s expert comment, we do wish to mention that the importance of control-by-voters issues should not be overly discounted. First, the referee’s comment is about US political elections, and we mention that our paper is relevantto voting issues not limited to political elections, but also in the broader setting of large-scale computer applications involving voting procedures, inwhich control of voters may be as important as candidate control, depending on the concrete situation. As to even US political elections, and as oneexample regarding actual in-law disenfranchisement, young people still lack the right to vote, and lest one dismiss this as a “natural” exclusion, wepoint out that the long-settled exclusion threshold regarding youth changed (in the 48 states that had a voting age over 18 at that time) in the early1970s with the ratification of the 26th Amendment—a change, in turbulent times, that arguably had wide political implications. Even today, andstill regarding in-law disenfranchisement, the exclusion of felons is a form of disenfranchisement that has political ramifications and is opposedby some. Also, as mentioned earlier, campaign ads, get-out-the-vote drives, spreading rumors that anyone who is wanted by the police will bearrested if he/she shows up to vote, and so on, though in some cases seeking to change who people vote for, also seek to encourage or discouragethe decision to even exercise one’s franchise at all.E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–2852633.5. Control by Adding VotersGiven: A set of candidates C and a distinguished candidate c ∈ C, a set V of registered voters, an additional set Wof yet unregistered voters (both V and W have preferences over C), and a positive integer k (cid:2) (cid:8)W (cid:8).Question (constructive): Is there a set of k or fewer voters from W whose registration would assure that c is theunique winner?Question (destructive): Is there a set of k or fewer voters from W whose registration would assure that c is not theunique winner?3.6. Control by Deleting VotersGiven: A set of candidates C, a distinguished candidate c ∈ C, a set V of voters, and a positive integer k (cid:2) (cid:8)V (cid:8).Question (constructive): Is there a set of k or fewer voters in V whose disenfranchisement would assure that c is theunique winner?Question (destructive): Is there a set of k or fewer voters in V whose disenfranchisement would assure that c is notthe unique winner?Here, BTT92 shows that for constructive control plurality is vulnerable and Condorcet is resistant. Our results are:Theorem 3.5. Approval is resistant to constructive control by adding voters and by deleting voters. Plurality, Con-dorcet, and approval are all vulnerable/certifiably-vulnerable to destructive control by adding voters and by deletingvoters.So Condorcet and approval, though resistant to constructive control, are vulnerable to destructive control here.13The final problem here results in a surprise.3.7. Control by Partition of VotersGiven: A set of candidates C, a distinguished candidate c ∈ C, and a set V of voters.Question (constructive): Is there a partition of V into V1 and V2 such that c is the unique winner in the hierarchicaltwo-stage election in which the survivors of (C, V1) and (C, V2) run against each other with voter set V ?Question (destructive): Is there a partition of V into V1 and V2 such that c is not the unique winner in the hierarchicaltwo-stage election in which the survivors of (C, V1) and (C, V2) run against each other with voter set V ?In this last type of control, the voter set is partitioned into two “subcommittees” that both separately select their“nominees”, who run against each other in the final decision stage. Unlike BTT92, we again distinguish between thetwo models Ties-Eliminate and Ties-Promote defined above. That is, in the Ties-Eliminate model, if two or morecandidates tie for winning in a subcommittee’s election, no candidate is nominated by that subcommittee. In contrast,in the Ties-Promote model, all the candidates who tie for winning in a subcommittee’s election are nominated to runin the final decision stage.We mention that both of our two tie-handling models, TE and TP, differ from the model adopted in BTT92, wherethey for vulnerability results about this problem adopt a third model in which ties are handled not by a tie-handlingrule but rather by changing the decision problem itself to require the chair to find a partition that completely avoids13 Note added in final revision: In a very recent paper by Procaccia, Rosenschein, and Zohar [30,31], electoral control is studied in a multi-winnersetting. Their interesting model generalizes the BTT92 model by adding a utility function and some parameters. One of the many results of theirpaper is that approval voting is, in this more flexible model, resistant to constructive control by adding voters. This resistance result can also beshown from Theorem 3.5 along the lines of the way that more flexible models inherit lower bounds from more specific models. A natural reduction(namely, if one keeps in mind their model of tie-breaking and keeps all the inputs of the given BTT92-model instance exactly the same, and ifin the target Procaccia–Rosenschein–Zohar-model election one sets their winner cardinality to 1, their utility-sum threshold to 1, the utility of theBTT92-model instance’s distinguished candidate to 1, and the utility of all other candidates to 0) embeds a BTT92-model instance (of constructivecontrol by adding voters, under approval voting) into their setting, and thus the NP-hardness lower bound from Theorem 3.5 can be seen to beinherited for this.264E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285ties in any subcommittee. We find our model the more natural, but for completeness we mention that they obtained forthis case, in their tie model, a constructive-control vulnerability result for plurality. For Condorcet and constructivecontrol, BTT92 proves that resistance holds. Our results are:Theorem 3.6. Approval is resistant to constructive control by partition of voters in models TE and TP, andvulnerable/certifiably-vulnerable to destructive control by partition of voters in models TE and TP. Plurality isvulnerable/certifiably-vulnerable to both constructive and destructive control by partition of voters in model TE,and is resistant to both constructive and destructive control by partition of voters in model TP. Condorcet isvulnerable/certifiably-vulnerable to destructive control by partition of voters.The most striking behavior here is that plurality voting varies between being vulnerable and being resistant, depend-ing on the tie-handling rule. The loose intuition for this is that in TE, at most one candidate wins each subcommitteeand in polynomial time we can explore every way this can happen. In contrast, under TP potentially any subset of can-didates may move forward, and in this particular setting, that flexibility is enough to support NP-completeness. Alsointeresting is that both Condorcet and approval, while resistant to constructive control, are vulnerable to destructivecontrol.4. ProofsIn this section, we provide the proofs of the results stated in Section 3. Table 2 presents, for each of the sevencontrol types considered, the corresponding main result from Section 3 as well as the specific theorems, corollaries,and examples from which this main result follows.We first present the immunity and susceptibility results. Then we present the vulnerability results, and finallywe present the resistance results. The proof techniques employed range from political-science-axiom-fueled argu-ments (for proving immunity), to designing efficient algorithms (for proving vulnerability), to the construction ofNP-hardness reductions (for proving resistance).4.1. Proving immunity and susceptibilityFor each of the 39 boldfaced entries in Table 1, this section must establish immunity if the entry is a boldface “I”and must establish susceptibility if the entry is a boldface “R” or a boldface “V”. (Recall that the definitions ofTable 2Overview of results yielding the main resultsControl byAdding CandidatesDeleting CandidatesPartition of CandidatesRun-off Partition ofCandidatesAdding VotersDeleting VotersPartition of VotersMain Result Stated asFollows fromThm. 3.2Thm. 3.3Thm. 3.4Thm. 3.4Thm. 3.5Thm. 3.5Thm. 3.6Thm. 4.4, Cor. 4.7, Thm. 4.25, Cor. 4.32Thm. 4.4, Cor. 4.7, Example 4.15,Thm. 4.26, Cor. 4.34Cor. 4.7, Thm. 4.8, Example 4.14,Example 4.15, Thm. 4.26, Cor. 4.36Cor. 4.7, Thm. 4.8, Example 4.14,Example 4.15, Thm. 4.26, Cor. 4.38Example 4.11, Example 4.12, Example 4.13,Thm. 4.22, Thm. 4.23, Thm. 4.24, Thm. 4.43Example 4.9, Example 4.10, Example 4.11, Example 4.13,Thm. 4.22, Thm. 4.23, Thm. 4.24, Thm. 4.44Example 4.9, Example 4.10, Example 4.11, Example 4.16,Example 4.17, Thm. 4.18, Thm. 4.19, Thm. 4.20,Thm. 4.21, Cor. 4.42, Thm. 4.45, Thm. 4.46For completeness, examples/theorems needed to establish susceptibility are listed even when they are invoked within a listed vulnerability orresistance theorem/corollary.E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285265resistance and vulnerability require susceptibility, and so proving susceptibility is a first step toward proving resistanceor vulnerability.)4.1.1. Links between susceptibility casesRather than hand-proving each of the 39 cases just mentioned, it makes sense to extract connections between thecases. We start by stating four easy but useful dualities.Theorem 4.1.(1) A voting system is susceptible to constructive control by adding candidates if and only if it is susceptible todestructive control by deleting candidates.(2) A voting system is susceptible to constructive control by deleting candidates if and only if it is susceptible todestructive control by adding candidates.(3) A voting system is susceptible to constructive control by adding voters if and only if it is susceptible to destructivecontrol by deleting voters.(4) A voting system is susceptible to constructive control by deleting voters if and only if it is susceptible to destructivecontrol by adding voters.This theorem is easy to see, and so its proof is omitted.We also have the following four implication results.Theorem 4.2.(1) If a voting system is susceptible to constructive control by partition of voters (in model TE or TP), then it issusceptible to constructive control by deleting candidates.(2) If a voting system is susceptible to constructive control by partition or run-off partition of candidates (in modelTE or TP), then it is susceptible to constructive control by deleting candidates.(3) If a voting system is susceptible to constructive control by partition of voters in model TE, then it is susceptible toconstructive control by deleting voters.(4) If a voting system is susceptible to destructive control by partition or run-off partition of candidates (in model TEor TP), then it is susceptible to destructive control by deleting candidates.Proof. We first prove parts (1) and (2). Let (C, V ) be an election and c ∈ C a candidate such that c is not the uniquewinner of (C, V ) and such that c can be made the unique winner by partition of candidates, run-off partition ofcandidates, or partition of voters. Fix a partitioned election such that c is the unique winner of this election and letD ⊆ C be the set of candidates that participate in the final round of the partitioned election. Then c is the uniquewinner of (D, V ). Thus, the voting system is susceptible to constructive control by deleting candidates.For part (3), let (C, V ) be an election and c ∈ C a candidate such that c is not the unique winner of (C, V ) andsuch that c can be made the unique winner by partition of voters in model TE. Let (V1, V2) be a partition of V suchthat c is the unique winner of the partitioned election. Since c makes it to the final run-off, and since we are in modelTE, c is the unique winner of one of (C, V1) and (C, V2). Without loss of generality, suppose c is the unique winnerof (C, V1). Thus, the voting system is susceptible to constructive control by deleting voters.For part (4), let (C, V ) be an election and c ∈ C a candidate such that c is the unique winner of (C, V ) and suchthat c can be made to be not the unique winner by partition of candidates or run-off partition of candidates. Fix apartitioned election such that c is not the unique winner of this election and let D ⊆ C be the set of candidates thatparticipate in the final round of the partitioned election. If c ∈ D, then c is not the unique winner of (D, V ). If c /∈ D,then c is not the unique winner of the subelection involving c. Thus, the voting system is susceptible to destructivecontrol by deleting candidates. (cid:2)Let us say that a voting system is voiced if in any election that has exactly one candidate, that candidate is always a(and thus, the unique) winner. Note that plurality, Condorcet, and approval are all voiced systems. For voiced systems,we have the following three additional results.266E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285Theorem 4.3.(1) If a voiced voting system is susceptible to destructive control by partition of voters (in model TE or TP), then it issusceptible to destructive control by deleting voters.(2) Each voiced voting system is susceptible to constructive control by deleting candidates.(3) Each voiced voting system is susceptible to destructive control by adding candidates.Proof. Fix a voiced voting system.For part (1), suppose that our voting system is immune to destructive control by deleting voters. We will showthat it is also immune to destructive control by partition of voters. Let (C, V ) be an election such that c is the uniquewinner of (C, V ), and let (V1, V2) be an arbitrary partition of V . Then c is the unique winner of (C, V1) and of (C, V2),and so c is the only candidate participating in the final run-off (both in model TP and in model TE). Since the votingsystem is voiced, c wins the final run-off, and is thus the unique winner of the partitioned election. It follows that thevoting system is immune to destructive control by partition of voters.For part (2), let C = {c, d} and let V be an arbitrary set of voters with preferences over C. At least one of thecandidates is not a unique winner of (C, V ). Without loss of generality, let c not be a unique winner of (C, V ). Sincethe voting system is voiced, c is the unique winner of ({c}, V ). It follows that the voting system is susceptible toconstructive control by deleting candidates.Part (3) follows immediately from part (2) of this theorem and part (2) of Theorem 4.1. (cid:2)Since plurality, Condorcet, and approval are all voiced systems, we immediately have from Theorems 4.3 and 4.1the following results that yield susceptibility results for four of Table 1’s boldface “R” and boldface “V” entries.Theorem 4.4. Plurality, Condorcet, and approval are each susceptible to destructive control by adding candidates.Approval is susceptible to constructive control by deleting candidates.4.1.2. Immunity resultsWe start by proving the immunity results of Theorems 3.2, 3.3, and 3.4. These results are generally clear from thedefinitions. Bartholdi, Tovey, and Trick [3] observed14 that immunity to constructive control by adding candidates fol-lows from the “unique” version of the Weak Axiom of Revealed Preference (denoted by Unique-WARP), which saysthat a unique winner among a collection of candidates always remains a unique winner among every subcollection ofcandidates that includes him/her. Theorem 4.6 states ways in which Unique-WARP influences a variety of destructivecontrol scenarios.Theorem 4.5. ([3].) Any voting system that satisfies Unique-WARP is immune to constructive control by addingcandidates.Theorem 4.6. Any voting system that satisfies Unique-WARP is immune to destructive control by deleting candidatesand (in both model TE and model TP) to destructive control by partition and run-off partition of candidates.Theorem 4.6 follows from Theorem 4.5 via Theorems 4.1 and 4.2 (and also is directly clear).Bartholdi, Tovey, and Trick [3] note that Theorem 4.5 can be applied to show that Condorcet voting is immuneto constructive control by adding candidates. We state further immunity results, via Theorems 4.5 and 4.6, as Corol-lary 4.7.Corollary 4.7.(1) Condorcet voting is immune to destructive control by deleting candidates, partition of candidates, and run-offpartition of candidates.14 Their paper is somewhat nonspecific regarding the uniqueness issue and merely says WARP.E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285267(2) Approval voting is immune to constructive control by adding candidates, and is immune to destructive control bydeleting candidates and by partition and run-off partition of candidates (in both the TE and the TP models).Proof. Both Condorcet and approval voting clearly satisfy Unique-WARP. The result now follows from Theorems 4.5and 4.6. (cid:2)Note that, unlike Condorcet and approval, plurality voting does not satisfy Unique-WARP, and we will see thatimmunity does not hold for plurality in any control scenario considered here.We now state and prove the final two immunity results.Theorem 4.8. Approval voting is immune to constructive control by partition and run-off partition of candidates inmodel TP.Proof. It is easy to see that in approval voting, a candidate c is the unique winner if and only if there is a uniquecandidate with a maximum number of Yes votes and c is that candidate. In the TP model, this remains true even underthe two partitioning schemes. (cid:2)4.1.3. Susceptibility resultsWe now turn to proving susceptibility results for the 28 boldface “R” and boldface “V” boxes in Table 1.Note that in concept each of the “R” and “V” claims made by Bartholdi, Tovey, and Trick [3] is asserting asusceptibility result, and around eight of those—via our Section 4.1.1 theorems—imply eight of the 28 susceptibilityresults that we need. However, Bartholdi, Tovey, and Trick [3] generally do not prove their susceptibility claims, andso we will prove susceptibility here for all our 28 cases.Now, how does one prove susceptibility? One need simply give an example in each case. Alternatively, some caseswe get indirectly from an earlier example via our Section 4.1.1 theorems. However, please note that even in those cases,there is implicitly a concrete example, as the theorems of Section 4.1.1 have constructive proofs. Also, we mentionagain that plurality, Condorcet, and approval are all voiced voting systems (in the sense defined in Section 4.1.1).We first show that plurality is not immune to constructive or destructive control by partition of voters in model TEor to destructive control by deleting voters.Example 4.9. Let us consider destructive control by partition of voters in model TE. Let C = {a, b, c}, and define Vto consist of five voters with the following preferences:v1: a > b > c,v3: b > a > c,v5: c > a > b.v2: a > b > c,v4: b > a > c,Thus, c does not win in (C, V ). However, if we partition V into V1 = {v5} and V2 = V − V1, c trivially wins thesubelection (C, V1), but a and b tie for winner in the subelection (C, V2), so none of them proceeds to the run-offwith c in model TE. It follows that c is the unique run-off winner. Thus, plurality voting is susceptible to constructivecontrol by partition of voters in model TE.For the destructive case, a is the unique plurality winner in the election (C, V (cid:5)), where V (cid:5) = {v1, v2, v3, v5}. Now,partitioning V (cid:5) into V (cid:5)= {v2, v5} implies that none of the two subcommittees nominates a candidate1in model TE, due to ties. In particular, a is not the unique run-off winner, and plurality voting thus is susceptible todestructive control by partition of voters in model TE.= {v1, v3} and V (cid:5)2By Theorem 4.3, this latter susceptibility claim implies that plurality is susceptible to destructive control by deletingvoters (which is another of the 28 boldfaced “R”-or-“V” boxes we are handling).We now prove that Condorcet voting is susceptible to destructive control by partition of voters and to destructivecontrol by deleting voters.268E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285Example 4.10. Let us consider destructive control by partition of voters. Let C = {a, b, c}, and define V to consist ofseven voters with the following preferences:v1: c > a > b,v4: b > a > c,v6: a > b > c,v2: c > a > b,v5: b > c > a,v7: a > c > b.v3: c > b > a,Since in pairwise contests four voters prefer c to a and four voters prefer c to b, c is the Condorcet winner in theelection (C, V ). However, partitioning V into V1 = {v1, v7} and V2 = V − V1 implies that there is no Condorcetwinner in the subelection (C, V1), and b is the Condorcet winner in the subelection (C, V2). Thus, Condorcet votingis susceptible to destructive control by partition of voters.By Theorem 4.3, this susceptibility claim implies that Condorcet is also susceptible to destructive control by delet-ing voters.We now prove that approval voting is susceptible to destructive control by partition of voters in models TE and TP,to destructive control by deleting voters, and to constructive control by adding voters.Example 4.11. Let C = {a, b, c}, and define V to consist of the following ten voters (specified by vectors from{0, 1}3, with the first, second, and third bits specifying approval/disapproval for a, b, and c): v1 = v2 = v3 = v4 = 001,v5 = v6 = v7 = 100, and v8 = v9 = v10 = 010. In (C, V ), c is the unique approval winner. But if V is partitioned intoV1 = {v1, v2, v5, v6, v7} and V2 = V − V1, then a and b are nominated by the subcommittees V1 and V2, respectively,and tie for winner in the run-off. Thus, approval voting is susceptible to destructive control by partition of voters, bothin model TE and in TP.By Theorem 4.3, this susceptibility claim implies that approval voting is also susceptible to destructive control bydeleting voters. And that claim itself, by Theorem 4.1, implies that approval voting is also susceptible to constructivecontrol by adding voters.The following example shows that both plurality voting and Condorcet voting are not immune to destructive controlby adding voters.Example 4.12. Let C = {a, b, c}. Define V to consist of one registered voter v with preference c > a > b, and defineW to consist of one as yet unregistered voter w with preference a > c > b. Candidate c is the unique winner—bothfor plurality and Condorcet voting—in the election (C, V ), yet registration of w would assure that a and c tie infirst-place votes in (C, V ∪ W ), so c is not the unique plurality winner of this election. Similarly, c is no longer theCondorcet winner in (C, V ∪ W ). Thus, both plurality and Condorcet voting are susceptible to destructive control byadding voters.The following example shows that approval voting is not immune to destructive control by adding voters or toconstructive control by deleting voters.Example 4.13. Let us consider destructive control by adding voters. Let C = {a, b, c}. Define V to consist of oneregistered voter v = 001 (i.e., v approves of c and disapproves of a and b), and define W to consist of one unregisteredvoter w = 100. In (C, V ), c is the unique approval winner, yet registration of w would assure that a and c tie forwinner in (C, V ∪ W ), so c is not the unique plurality winner of this election. Thus, approval voting is susceptible todestructive control by adding voters.By Theorem 4.1, this susceptibility claim implies that approval voting is also susceptible to constructive control bydeleting voters (and indeed, as implicit in the proof of Theorem 4.1, this very same example works to show that).We now show susceptibility for approval voting to constructive control by partition of candidates and run-offpartition of candidates, both in model TE.Example 4.14. Let C = {a, b, c} be the candidate set. Let the voter set W consist of the two voters with vectorrepresentation w1 = 111 and w2 = 110, respectively. Then c loses to both a and b, who tie for winning in the elec-tion (C, W ). But if we partition C into C1 = {a, b} and C2 = {c}, then no one moves forward from the subelectionE. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285269(C1, W ) in model TE, so c wins overall. The same example works for the run-off partition of candidates case, sinceno one moves forward from the subelection (C1, W ) in model TE and c first wins the subelection (C2, W ) and thenthe run-off. Thus, approval voting is susceptible to constructive control by both partition of candidates in model TEand run-off partition of candidates in model TE.Example 4.15 shows that plurality voting is susceptible to destructive control by partition and run-off partition ofcandidates (both in model TE and TP), and to destructive control by deleting candidates.Example 4.15. Let us consider the partition cases. Let C = {a, b, c, d} be the candidate set, and define the voter set Vto consist of the following seven voters:• 3 voters of the form c > a > b > d,• 2 voters of the form a > d > b > c, and• 2 voters of the form b > d > a > c.Note that c is the unique plurality winner in the election (C, V ).Now, partition the candidate set C into C1 = {a, c} and C2 = {b, d}. Then a is the unique plurality winner inthe subelection (C1, V ). So c is dethroned in the partition of candidates setting. C1 = {a, c} and C2 = {b, d} alsodethrones c in the run-off partition of candidates setting. Thus, plurality voting is susceptible to destructive controlby partition and by run-off partition of candidates. Since each subelection has a unique winner (a in (C1, V ) and bin (C2, V )), this is true regardless of the tie-handling rule.By Theorem 4.2, these susceptibility claims imply that plurality voting is also susceptible to destructive control bydeleting candidates.The next example shows that plurality voting is susceptible to constructive and destructive control by partition ofvoters in model TP.Example 4.16. Let C = {a, b, c} be the candidate set, and define the voter set V to consist of the following eightvoters:• 3 voters (say u1, u2, and u3) of the form a > c > b,• 2 voters (say v1 and v2) of the form b > a > c, and• 3 voters (say w1, w2, and w3) of the form c > a > b.For the constructive case, note that c is not the unique plurality winner in the election (C, V ), since a and c are tiedfor first place. Now, partition V into V1 = {u1, u2, w1, w2, w3} and V2 = {u3, v1, v2}. Then c is the unique pluralitywinner in the subelection (C, V1), b is the unique plurality winner in the subelection (C, V2), and c wins the run-offagainst b. Thus, plurality voting is not immune to constructive control by partition of voters in model TP.For the destructive case, consider the election (C, V (cid:5)) with V (cid:5) = V ∪ {v3, w4}, where v3 votes b > a > c and= {u1, u2, u3, w1, w2} and1), b is the unique plurality2), and a wins the run-off against b. So c is dethroned. Thus, plurality voting is notw4 votes c > a > b. In (C, V (cid:5)), c is the unique plurality winner. Partition V (cid:5) into V (cid:5)1V (cid:5)= {v1, v2, v3, w3, w4}. Then a is the unique plurality winner of the subelection (C, V (cid:5)2winner of the subelection (C, V (cid:5)immune to destructive control by partition of voters in model TP.Finally, we show that approval voting is susceptible to constructive control by partition of voters in models TEand TP.Example 4.17. Let C = {a, b, c} be the candidate set. Define the voter set V to consist of the following eight voters:v1 = v2 = v3 = 100, v4 = v5 = 010, and v6 = v7 = v8 = 001. In (C, V ), a and c are tied. Now, partition V intoV1 = {v1, v2, v6, v7, v8} and V2 = {v3, v4, v5}. Candidate c is the unique approval winner in the subelection (C, V1),b is the unique approval winner in the subelection (C, V2), and c wins the run-off against b. This works both in270E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285model TE and TP, since ties do not occur in the subelections in our construction. So approval voting is susceptible toconstructive control by partition of voters (both in TE and TP).4.2. Proving vulnerabilityThe certifiably-vulnerable results (which here imply the vulnerable results) range from clear greedy algorithms totrickier algorithms based on characterizing the ways in which a candidate can be made to win (in the constructivecase) or can be precluded from winning (in the destructive case). The more surprising of these have to do with thetie-handling cases of partition problems—where the chair can at times do shrewd things (e.g., shift voters counterin-tuitively to induce ties that kill off stronger candidates).4.2.1. Partition of votersWe start with the “control by partition of voters” problems. For plurality voting, we here obtain the same results inthe constructive and the destructive case, as stated in Table 1 and in Theorem 3.6. On the other hand, the question ofwhether resistance or vulnerability holds depends on which tie-handling rule is chosen.Theorem 4.18. In model TE, plurality voting is vulnerable/certifiably-vulnerable to constructive control by partitionof voters.Proof. By Example 4.9, susceptibility holds.Given a set of candidates C, a distinguished candidate c ∈ C, and a voter set V , we describe a polynomial-timealgorithm for this problem. For any partition (V1, V2) of the voter set V , let Nominees(C, Vi), i ∈ {1, 2}, denote the setof candidates who are nominated by the subcommittee Vi (with candidates C) for the run-off in model TE. To ensurethat c is the unique winner, under the desired partition setup, we may without loss of generality focus on the followingfive cases (Cases 3 and 5 are not necessarily disjoint):Case 1: Nominees(C, V1) = {c} and Nominees(C, V2) = ∅ due to V2 = ∅.Case 2: Nominees(C, V1) = {c} and Nominees(C, V2) = {c}.Case 3: Nominees(C, V1) = {c} and Nominees(C, V2) = ∅ due to c and d (and possibly additional other candidates)Case 4: Nominees(C, V1) = {c} and Nominees(C, V2) = {d}, where c (cid:3)= d.Case 5: Nominees(C, V1) = {c} and Nominees(C, V2) = ∅ due to d and e (and possibly additional other candidates)tying, where c (cid:3)= d.tying, where c (cid:3)= d (cid:3)= e (cid:3)= c.In Case 1, it clearly suffices to check whether c is an overall plurality winner. Note further that if Case 2 holds forsome partition (V1, V2), then c must be an overall plurality winner, and thus will also win via the partition (V , ∅). Wenow argue that the same is true in Case 3. For any candidate i, let score(i) denote the number of voters who rank ifirst-place in (C, V ). In Case 3, note that for all e ∈ C − {c},score(e) < score(c),since c has strictly more first-place votes than e in (C, V1) and e at best ties c for first-place votes in (C, V2). It followsthat c must already be an overall plurality winner in Case 3, and thus will also win via the partition (V , ∅).So, our algorithm, after checking whether c is a plurality winner overall (thus catching Cases 1, 2, and 3), will bybrute force check whether Case 4 or Case 5 can be made to hold for some partition of the voter set.Given C, c, and V as above, our polynomial-time algorithm proceeds as follows. If c is a plurality winner of(C, V ), output (V , ∅) as a successful partition and halt; else if (cid:8)C(cid:8) = 2, then output “control impossible” (which inthis context means that making c a unique winner is impossible) and halt. Otherwise, we first try to make Case 4 holdand then, if that fails, try to make Case 5 hold. These two tests are implemented by the two loops described below,and if they both fail, control is not possible.Loop trying to make Case 4 hold: For each d ∈ C, d (cid:3)= c, such that c beats d in a pairwise plurality election by thevoters in V , do the following: If it holds that, for each e ∈ C with c (cid:3)= e (cid:3)= d,E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285271score(e) (cid:2) score(c) + score(d) − 2,then output (V1, V2) as a successful partition and halt, where V1 consists of all score(c) voters whose firstchoice is c and exactly min(score(e), score(c) − 1) of the voters whose first choice is e, and where V2 =V − V1.Loop trying to make Case 5 hold: If the loop trying to make Case 4 hold was not successful, then for each d ∈ C andfor each e ∈ C such that (cid:8){c, d, e}(cid:8) = 3 and score(d) (cid:2) score(e), do the following: If it holds that, for eachf ∈ C − {c},score(f ) (cid:2) score(c) + score(d) − 1,then output (V1, V2) as a successful partition and halt, where V1 consists of all score(c) voters whose firstchoice is c, of exactly score(e) − score(d) of the voters whose first choice is e, and for all f ∈ C − {c, d, e},exactly min(score(f ), score(c) − 1) of the voters whose first choice is f , and where V2 = V − V1.Otherwise (i.e., if the Case 5 loop was not successful either), c cannot win, so we output “control impossible” andhalt. (cid:2)We now make a general remark. In various cases, our polynomial-time algorithms have loops. In some cases, theseloops can be collapsed or removed. Doing so• improves the runtime and makes the algorithm look simpler, but• makes it a bit harder to see that the algorithm is correct.Since correctness is what we most care about, we do not collapse such loops. But let us explicitly mention the “look”of such collapses. In the proof of Theorem 4.18 above, the “For each d ∈ C, d (cid:3)= c, such that c beats d in a pairwiseplurality election by the voters in V , do . . . ” loop trying to make Case 4 hold in the algorithm can safely be changedto: “If there exists some d (cid:5) ∈ C, d (cid:5) (cid:3)= c, such that c beats d (cid:5) in a pairwise plurality election by the voters in V , then letd be some such d (cid:5) for which score(d) is maximized among all such score(d (cid:5)) and do . . . ” This is a legal loop collapse,since if some d (cid:5) works, then it works for all d (cid:5)(cid:5) that can pairwise beat c in a run-off whose score(d (cid:5)(cid:5)) is maximum.Again, this is just an example, and to have our correctness as unobscured as possible and as our focus is on the gapbetween P and NP-hard, we in general forgo such optimizations of the precise polynomial of the runtime.We now turn to the destructive analog of Theorem 4.18.Theorem 4.19. In model TE, plurality voting is vulnerable/certifiably-vulnerable to destructive control by partition ofvoters.Proof. That susceptibility holds in this case has been shown in Example 4.9.Given a set of candidates C, a distinguished candidate c ∈ C, and a voter set V , our polynomial-time algorithmfor this control problem works as follows. If C = {c}, output “control impossible” and halt, as c must win; else if calready is not the unique plurality winner, output (V , ∅) as a successful partition and halt. Now, we check if everyvoter’s first choice is c or if (cid:8)C(cid:8) = 2, and if one of these two conditions is true, we output “control impossible” andhalt, since c cannot help but win.Again, let score(i) denote the number of voters who rank candidate i first-place. Let d be a candidate who otherthan c got the most first-place votes, and let e be a candidate who other than c and d got the most first-place votes. Wecan certainly dethrone c ifscore(c) (cid:2) score(d) + score(e).(4.1)Namely, if Eq. (4.1) holds, we output (V1, V2) as a successful partition and halt, where V1 consists of all score(d)voters whose first choice is d and exactly score(d) voters whose first choice is c (recall that in the current case wealready know that score(c) > score(d)), and where V2 = V − V1. Then c and d will tie for winner in (C, V1), so noone will be nominated by the subcommittee V1 in model TE, and e will tie or beat c in (C, V2), so c is not nominatedby the subcommittee V2 either.272E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285On the other hand, if Eq. (4.1) is not satisfied, we havescore(c) > score(d) + score(e),so in any partition (V1, V2), c clearly will triumph in one of (C, V1) or (C, V2). Thus, we now know it is impossibleto make sure that c loses in both subcommittees. If c is nominated by both subcommittees (in model TE), c triviallyis the unique winner of the final run-off. So, our algorithm now checks if it is possible for c to win in exactly onesubcommittee, and yet can be made to not be the unique winner of the final run-off. For this to happen, it is (given thecase we are in) a necessary and sufficient condition that there exists some candidate d such that:• d (cid:3)= c,• d ties or beats c in a pairwise plurality election, and• for each candidate e, c (cid:3)= e (cid:3)= d, we have that score(e) < score(c) + score(d) − 2.We can in polynomial time brute-force check whether the above three conditions hold for some candidate d, and ifthey do, let d (cid:5) be some such candidate d and output (V1, V2) as a successful partition and halt, where V1 consists of allscore(c) voters whose first choice is c and, for each candidate e with c (cid:3)= e (cid:3)= d(cid:5), of exactly min(score(c) − 1, score(e))voters whose first choice is e, and where V2 = V − V1. Finally, if the above three conditions cannot be satisfied forany d, output “control impossible” and halt. (cid:2)We now prove that Condorcet voting is vulnerable/certifiably-vulnerable to destructive control by partition ofvoters.Theorem 4.20. Condorcet voting is vulnerable/certifiably-vulnerable to destructive control by partition of voters.Proof. By Example 4.10, susceptibility holds.Given a set of candidates C, a distinguished candidate c ∈ C, and a voter set V , our polynomial-time algorithm forthis control problem proceeds in three stages:(1) Checking the trivial cases: If C = {c}, output “control impossible” and halt, as c must win. Otherwise, if calready is not the Condorcet winner, output (V , ∅) as a successful partition and halt. Otherwise, if (cid:8)C(cid:8) = 2,output “control impossible” and halt, since in this case c is the Condorcet winner, so c is preferred by a strictmajority of votes to the other candidate and thus will win at least one subcommittee and also the run-off.(2) Loop: Now, if none of the trivial cases applies, for each a, b ∈ C with (cid:8){a, b, c}(cid:8) = 3, we test whether we canmake a tie or beat c in (C, V1) and make b tie or beat c in (C, V2). For each voter, we will now focus just onthe ordering of a, b, and c. We use the following notation. Denote the number of voters with order c > a > b orc > b > a by Wc, with order a > b > c or b > a > c by Lc, with order a > c > b by Sa, and with order b > c > aby Sb.If Wc − Lc > Sa + Sb, then this a and b are hopeless, so move on to consider the next a and b in the loop.Otherwise, we haveWc − Lc (cid:2) Sa + Sb.(4.2)Output (V1, V2) as a successful partition and halt, where V1 contains all the Sa voters with order a > c > b, andalso min(Wc, Sa) voters contributing to Wc, and where V2 = V − V1.In (C, V1), a ties or beats c, since a gets Sa votes and c gets min(Wc, Sa) votes. And in (C, V2), b ties or beats c,since there are Sb + Lc voters who prefer b to c, and there are Wc − min(Wc, Sa) voters who prefer c to b. Thus,to prove that the construction works, we need thatSb + Lc (cid:3) Wc − min(Wc, Sa),which is equivalent toSb + min(Wc, Sa) (cid:3) Wc − Lc.(4.3)But if Sa (cid:2) Wc then Eq. (4.3) is implied by Eq. (4.2), and if Sa > Wc then Eq. (4.3) follows immediately from thefact that Sb + Lc (cid:3) 0. Thus, b indeed ties or beats c in (C, V2).E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285273(3) Termination: If in no loop iteration did we find an a and b that allowed us to output a partition of voters dethron-ing c, then output “control impossible” and halt.This completes the proof of Theorem 4.20. (cid:2)We now prove that approval voting is vulnerable/certifiably-vulnerable to destructive control by partition of votersin models TE and TP.Theorem 4.21. Approval voting is vulnerable/certifiably-vulnerable to destructive control by partition of voters inmodels TE and TP.Proof. That susceptibility holds in this case is shown by Example 4.11.We describe two polynomial-time algorithms for these two control problems, one for TE and one for TP. Given aset of candidates C, a distinguished candidate c ∈ C, and a voter set V , both algorithms again proceed in the followingthree phases:(1) Checking the trivial cases: If C = {c}, output “control impossible” and halt, as c must win. Otherwise, if c alreadyis not the unique winner, output (V , ∅) as a successful partition and halt. Otherwise, if (cid:8)C(cid:8) = 2, output “controlimpossible” and halt, since in this case c is the unique winner, so c will win in at least one subcommittee and willalso win the run-off.(2) Loop: In this phase, if none of the trivial cases applies, we try to find a pair of candidates, a and b, that allows usto determine a successful partition of voters. This phase is described below, separately for TE and TP.(3) Termination: If in no loop iteration did we find an a and b that allowed us to output a partition of voters dethron-ing c, then output “control impossible” and halt.The two algorithms differ only in the second phase. To describe one loop iteration for some pair of candidates, aand b, we use the following notation: For each voter in V , we focus just on his/her approval of a, b, and c, represented(in that order) as a vector from {0, 1}3. Denote the number of voters with preference 001 by Wc, with 110 by Lc, with100 by Sa, with 010 by Sb, with 101 by Sac, and with 011 by Sbc. (Voters with preference 000 or 111 need not beconsidered, since they do not affect the difference of Yes votes among a, b, and c.)Loop in model TE: For each a, b ∈ C with (cid:8){a, b, c}(cid:8) = 3, we test whether we can make a tie or beat c in (C, V1)and make b tie or beat c in (C, V2).If Wc − Lc > Sa + Sb, then this a and b are hopeless, so move on to consider the next a and b in the loop. Otherwise,we haveWc − Lc (cid:2) Sa + Sb.(4.4)Output (V1, V2) as a successful partition and halt, where V1 contains all voters contributing to Sac and Sa, and alsomin(Wc, Sa) voters contributing to Wc, and where V2 = V − V1.In (C, V1), a ties or beats c, since a getsSa − min(Wc, Sa) (cid:3) 0more Yes votes than c. And in (C, V2), b ties or beats c, since b receives(cid:3)(cid:2)Wc − min(Wc, Sa)Sb + Lc −more Yes votes than c. So, for the construction to work, we must argue thatSb + Lc + min(Wc, Sa) − Wc (cid:3) 0.That is, we needWc − Lc (cid:2) min(Wc, Sa) + Sb.(4.5)If Wc < Sa, Eq. (4.5) follows trivially from the fact that 0 (cid:2) Lc + Sb. And if Wc (cid:3) Sa, Eq. (4.5) follows immediatelyfrom Eq. (4.4).274E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285Loop in model TP: For each a, b ∈ C with (cid:8){a, b, c}(cid:8) = 3, we test whether we can make a strictly beat c in (C, V1)and make b strictly beat c in (C, V2).If Wc − Lc > Sa + Sb − 2 or Sa = 0 or Sb = 0, then this a and b are hopeless, so move on to consider the next aand b in the loop. Otherwise, we haveWc − Lc (cid:2) Sa + Sb − 2(4.6)and Sa > 0 and Sb > 0, and output (V1, V2) as a successful partition and halt, where V1 contains all voters contributingto Sac and Sa, and also min(Wc, Sa − 1) voters contributing to Wc, and where V2 = V − V1.In (C, V1), a (strictly) beats c, since a getsSa − min(Wc, Sa − 1) > 0more Yes votes than c. And in (C, V2), b (strictly) beats c, since b hasSb + Lc −(cid:3)(cid:2)Wc − min(Wc, Sa − 1)more Yes votes than c. So, for the construction to work, we must argue thatSb + Lc + min(Wc, Sa − 1) − Wc > 0.That is, we needWc − Lc < min(Wc, Sa − 1) + Sb.(4.7)If Wc (cid:2) Sa − 1, Eq. (4.7) reduces to 0 < Lc + Sb, which follows from the fact that in the current case Sb > 0. And ifWc > Sa − 1, Eq. (4.7) follows immediately from Eq. (4.6). (cid:2)4.2.2. Adding and deleting voters, destructive caseWe now turn to proving the vulnerability results for destructive control by adding and by deleting voters for eachof plurality, Condorcet, and approval voting. We start with plurality voting.Theorem 4.22. Plurality voting is vulnerable/certifiably-vulnerable to destructive control both by adding voters andby deleting voters.Proof. By Examples 4.9 and 4.12, susceptibility holds.In a nutshell, for the adding voters case, we give a “smart greedy” algorithm, and for the deleting voters case, wegive a “dumb greedy” algorithm. In both cases, we prove only that plurality voting is certifiably-vulnerable to destruc-tive control, since this implies vulnerability. Recall that no “k” is specified in the corresponding control problems, asin this setting the chair seeks to determine in polynomial time the smallest number of voters needed to be added ordeleted to execute control.In the adding voters case, we are given a set C of candidates, a distinguished candidate c, a set V of registeredvoters, and an additional set W of as yet unregistered voters (both V and W have preferences over C). If c already is nota unique plurality winner in the election (C, V ), adding no voters accomplishes our goal, and we are done. Otherwise,sort all candidates in C distinct from c by how many votes each needs to tie c. Let di denote the ith candidate in theordering thus obtained, and let diff (di) denote di ’s deficit of first-place votes needed to tie c. Thus, the order is suchthat diff (d1) (cid:2) diff (d2) (cid:2) · · · (cid:2) diff (d(cid:8)C(cid:8)−1). For i = 1, 2, . . . , (cid:8)C(cid:8) − 1, if the number of unregistered voters whosefirst choice is di is greater than or equal to diff (di), then add diff (di) of these unregistered voters to ensure that dities c (and c thus is not the unique winner) and halt. If in no iteration of this for-loop was some candidate able todethrone c, output “control impossible” and halt.In the deleting voters case, we are given a set C of candidates, a distinguished candidate c, and a set V of voterswith preferences over C. If C = {c}, then output “control impossible” and halt; else if c already is not the uniqueplurality winner in the election (C, V ), deleting no voters accomplishes our goal, and we are done. Now, if everycandidate other than c gets zero first-place votes, then output “control impossible” and halt. Otherwise, let d be thecandidate closest to c in first-place votes, and let diff (d) denote d’s deficit of first-place votes needed to tie c. Thendeleting diff (d) voters whose first choice is c assures that c is not the unique winner, and this is the fewest deletionsthat can achieve that. (cid:2)E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285275Theorem 4.23. Condorcet voting is vulnerable/certifiably-vulnerable to destructive control both by adding voters andby deleting voters.Proof. By Examples 4.10 and 4.12, susceptibility holds.We again prove only certifiable vulnerability, since this here implies vulnerability.In the adding voters case, we are given a set C of candidates, a distinguished candidate c, a set V of registeredvoters, and an additional set W of as yet unregistered voters (both V and W have preferences over C). If C = {c},then output “control impossible” and halt; else if c already is not a Condorcet winner in the election (C, V ), addingno voters accomplishes our goal, and we are done. Otherwise, for each candidate i (cid:3)= c, call i lucky if and only if thesurplus of c relative to i (denoted by surplus(c, i), which is defined as the number of registered voters who preferc to i minus the number of registered voters who prefer i to c) is less than or equal to the number of unregisteredvoters who prefer i to c. If there is at least one lucky candidate, then let d be a lucky candidate such that the surplusof c relative to d is minimum, and add surplus(c, d) unregistered voters who prefer d to c. If there exists no luckycandidate, output “control impossible” and halt.In the deleting voters case, we are given a set C of candidates, a distinguished candidate c, and a set V of voterswith preferences over C. If C = {c}, then output “control impossible” and halt; else if c already is not a Condorcetwinner in the election (C, V ), deleting no voters accomplishes our goal, and we are done. Otherwise, find a candidated who comes closest to c (i.e., relative to whom the surplus of c is minimum), and delete surplus(c, d) voters from Vwho prefer c to d. Now c and d tie, so c is dethroned. (cid:2)Theorem 4.24. Approval voting is vulnerable/certifiably-vulnerable to destructive control both by adding voters andby deleting voters.Proof. That susceptibility holds in this case is shown by Examples 4.11 and 4.13.As before, we prove only certifiable vulnerability, since this here implies vulnerability.In the adding voters case, we are given a set C of candidates, a distinguished candidate c, a set V of registeredvoters, and an additional set W of as yet unregistered voters (both V and W have preferences over C). If C = {c},then output “control impossible” and halt. Otherwise, if c already is not the unique approval winner in the elec-tion (C, V ), adding no voters accomplishes our goal, and we are done. Otherwise, for each candidate i (cid:3)= c, againdefine surplus(c, i) to be the number of Yes votes for c in V minus the number of Yes votes for i in V . Among allcandidates j other than c (if any) such that there exist at least surplus(c, j ) voters in W who vote Yes for j and Nofor c, let d be any such j for which surplus(c, j ) is minimum, and add surplus(c, d) unregistered voters who vote Yesfor d and No for c. If no j satisfying the above conditions exists, then output “control impossible” and halt.In the deleting voters case, we are given a set C of candidates, a distinguished candidate c, and a set V of voterswith preferences over C. If C = {c}, then output “control impossible” and halt. Otherwise, if c already is not theunique approval winner in the election (C, V ), deleting no voters accomplishes our goal, and we are done. Otherwise,let d be a candidate among C − {c} for whom surplus(c, d) is minimum, and delete surplus(c, d) voters from V whovote Yes for c and No for d (such voters must exist, as they are what is causing the surplus in the first place). (cid:2)4.2.3. Adding candidates, destructive case, Condorcet and approval votingNext, we prove that both Condorcet and approval voting are certifiably-vulnerable (and thus vulnerable) to destruc-tive control by adding candidates.Theorem 4.25. Both Condorcet and approval voting are vulnerable/certifiably-vulnerable to destructive control byadding candidates.Proof. That susceptibility holds in this case is shown by Theorem 4.4.We again prove only certifiable vulnerability, since this here implies vulnerability. We are given a set C of qualifiedcandidates and a distinguished candidate c ∈ C, a set D of possible spoiler candidates, and a set V of voters withpreferences (in the approval case, the “preferences” are 0–1 vectors) over C ∪ D.276E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285For Condorcet voting, if c already is not the Condorcet winner, adding no candidates accomplishes our goal, andwe are done. Otherwise, if any spoiler candidate ties or beats c, add one such candidate and halt. Otherwise, output“control impossible” and halt.For approval voting, if c already is not the unique approval winner in the election (C, V ), adding no candidatesaccomplishes our goal, and we are done. Otherwise, if there exists a spoiler candidate d who ties or beats c amongthe voters in V in Yes votes, add one such spoiler candidate and halt. Otherwise, output “control impossible” andhalt. (cid:2)4.2.4. Deleting candidates, partition and run-off partition of candidates, constructive case, approval votingFinally, we show the vulnerability results for approval voting for constructive control by deleting candidates, andby partition of candidates and run-off partition of candidates, both in model TE.Theorem 4.26. Approval voting is vulnerable/certifiably-vulnerable to constructive control by deleting candidates,partition of candidates in model TE, and run-off partition of candidates in model TE.Proof. That susceptibility holds in this case is shown by Theorem 4.4 and Example 4.14.As in the previous proofs, we only show certifiable vulnerability, which again implies vulnerability. Thus, no “k”is specified in the control problem corresponding to the deleting candidates case, and in all three cases we are given aset C of candidates, a distinguished candidate c, and a set V of registered voters. We now describe a polynomial-timealgorithm for each of the three constructive control problems considered.In the deleting candidates case, if c already is the unique approval winner in the election (C, V ), deleting nocandidates accomplishes our goal, and we are done. Otherwise, delete every candidate other than c who has at leastas many Yes votes as c has in V and halt.In the partition of candidates case, if c already is the unique approval winner, then output (∅, C) as a successfulpartition and halt. Otherwise, for each candidate a ∈ C, let ya denote the number of Yes votes cast for a in V , and letY = max{ya | a ∈ C}.Now, if there exists exactly one a ∈ C − {c} such that ya = Y , then output “control impossible” and halt, sincec cannot be made the unique winner in this case. On the other hand, if there exist at least two distinct candidatesin C − {c} whose number of Yes votes is Y , then output (C1, C2) with C1 = C − {c} and C2 = {c} as a successfulpartition and halt. This works, since in subelection (C1, V ) all candidates are eliminated.Note that the same algorithm also works for the run-off partition of candidates case in model TE. (cid:2)4.3. Proving resistanceThe resistance results are based on clear containments in NP, plus (polynomial-time many-one) reductions estab-lishing NP-hardness.The following lemma says that for the voting systems considered here (though that may be different in general),whenever the corresponding control problem is NP-hard, immunity cannot hold unless P = NP.Lemma 4.27. For each voting system for which winnership can be tested in polynomial time, if the control problemcorresponding to one of the settings considered here is NP-hard, then the system cannot be immune to control in thissetting unless P = NP.Proof. Consider any voting system for which winner-testing (“Is c a winner?”) can be done in polynomial time.Suppose that the decision problem associated with any one of the control scenarios defined in Section 3 is NP-hard.Then, as mentioned in Footnote 5, if immunity were to hold, the associated decision problem would be in P, whichwould imply P = NP. (cid:2)However, proving immunity and susceptibility under assumptions regarding P-versus-NP is obviously less at-tractive than proving immunity and susceptibility unconditionally. In particular, the ideal first step toward provingresistance results is to prove, via theorems or examples, susceptibility to the corresponding types of control. We havedone that in Section 4.1, and will invoke items from that section here.E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–2852774.3.1. Plurality votingWe whenever possible try to achieve multiple resistance results via a single proof. For example, with a singleproof we establish the key part of all seven resistance results for plurality voting: destructive control by adding,deleting, partition (TE and TP), and run-off partition (TE and TP) of candidates,15 and by partition of voters (TP).We now provide this proof, which is achieved via one general construction that yields the reductions, each from theNP-complete problem Hitting Set, see Garey and Johnson [19].Hitting setGiven: A set B = {b1, b2, . . . , bm}, a family S = {S1, S2, . . . , Sn} of subsets Si of B, and a positive integer k.Question: Does S have a hitting set of size at most k? That is, is there a set B(cid:5) ⊆ B with (cid:8)B(cid:5)(cid:8) (cid:2) k such that foreach i, Si ∩ B(cid:5) (cid:3)= ∅?We now present our general construction for the destructive control problems related to plurality voting.Construction 4.28 (Construction of an Election from a Hitting Set Instance). Given a triple (B, S, k), where B ={b1, b2, . . . , bm} is a set, S = {S1, S2, . . . , Sn} is a family of subsets Si of B, and k (cid:2) m is a positive integer, weconstruct the following election:• The candidate set is C = B ∪ {c, w}.• The voter set V is defined as follows:– There are 2(m − k) + 2n(k + 1) + 4 voters of the form c > w > · · · , where “· · ·” means that the remainingcandidates follow in some arbitrary order.– There are 2n(k + 1) + 5 voters of the form w > c > · · · .– For each i, 1 (cid:2) i (cid:2) n, there are 2(k + 1) voters of the form Si > c > · · · , where “Si ” denotes the elements ofSi in some arbitrary order.– Finally, for each j , 1 (cid:2) j (cid:2) m, there are two voters of the form bj > w > · · · .We now show that the election (C, V ) constructed above has some useful properties needed to establish resistanceto destructive control for plurality voting in the seven settings mentioned. For every candidate d, let score(d) denotethe number of voters who rank d first in a given election.Claim 4.29. If B(cid:5) is a hitting set of S of size k, then w is the unique plurality winner of the election (B(cid:5) ∪ {c, w}, V ).Proof. If B(cid:5) is a hitting set of S of size k, then in the election (B(cid:5) ∪ {c, w}, V ), we havescore(c) = 2(m − k) + 2n(k + 1) + 4,score(w) = 2n(k + 1) + 5 + 2(m − k),score(bj ) (cid:2) 2n(k + 1) + 2andfor each j.It follows that w is the unique plurality winner of the election (B(cid:5) ∪ {c, w}, V ). (cid:2)Claim 4.30. Let D ⊆ B ∪ {w}. If c is not the unique plurality winner of election (D ∪ {c}, V ), then there exists a setB(cid:5) ⊆ B such that(1) D = B(cid:5) ∪ {w},(2) w is the unique plurality winner of the election (B(cid:5) ∪ {c, w}, V ), and(3) B(cid:5) is a hitting set of S of size less than or equal to k.15 Our constructions ensure that the distinguished candidate is never tied for winner in any subelection in the image of the NP-hardness reduction.Thus, these results hold both in the Ties-Eliminate and Ties-Promote models.278E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285Proof. Let D ⊆ B ∪ {w} and suppose that c is not the unique plurality winner of election (D ∪ {c}, V ). We show thethree properties stated in the claim.First note that for all b ∈ D ∩ B, score(b) < score(c) in (D ∪ {c}, V ). Since c is not the unique plurality winnerof (D ∪ {c}, V ), it follows that w ∈ D and score(w) (cid:3) score(c). Let B(cid:5) ⊆ B be such that D = B(cid:5) ∪ {w}. Then D ∪{c} = B(cid:5) ∪ {c, w}. Since score(w) is odd and score(c) is even, it follows that w is the unique plurality winner of(B(cid:5) ∪ {c, w}, V ). This proves the first two properties stated.To prove the third property, note that in (B(cid:5) ∪ {c, w}, V ), we have(cid:2)m − (cid:8)Bscore(w) = 2n(k + 1) + 5 + 2score(c) = 2(m − k) + 2n(k + 1) + 4 + 2(k + 1)(cid:2),and(cid:5)(cid:8)(cid:3)where (cid:2) is the number of sets in S that are not hit by B(cid:5) (i.e., that have an empty intersection with B(cid:5)). Sincescore(c) (cid:2) score(w), it follows that2(m − k) + 2(k + 1)(cid:2) (cid:2) 1 + 2(cid:2)m − (cid:8)B(cid:3),(cid:5)(cid:8)which implies (k + 1)(cid:2) + (cid:8)B(cid:5)(cid:8) − k (cid:2) 0. So (cid:2) = 0. Thus, B(cid:5) is a hitting set of S of size at most k, which proves thethird property. (cid:2)Next, we show that Construction 4.28 yields a polynomial-time many-one reduction from Hitting Set to DestructiveControl by Adding Candidates for plurality voting.Claim 4.31. S has a hitting set of size less than or equal to k if and only if destructive control by adding candidatescan be executed for the election with qualified candidates {c, w}, spoiler candidates B, distinguished candidate c,and voter set V .Proof. If S has a hitting set of size less than or equal to k, then since k (cid:2) m, S has a hitting set of size k. Thus, theimplication from left to right follows from Claim 4.29. The implication from right to left follows from Claim 4.30. (cid:2)So from this and Theorem 4.4 we have the following.Corollary 4.32. Plurality voting is resistant to destructive control by adding candidates.By a similar argument, Hitting Set can be reduced to Destructive Control by Deleting Candidates for pluralityvoting.Claim 4.33. S has a hitting set of size at most k if and only if the election with candidate set C, distinguishedcandidate c, and voter set V can be destructively controlled by deleting at most m − k candidates.Proof. Let B(cid:5) be a hitting set of S of size k. By Claim 4.29, c is not the unique plurality winner of the election(B(cid:5) ∪ {c, w}, V ). Since B(cid:5) ∪ {c, w} = C − (B − B(cid:5)), (cid:8)B(cid:8) = m, and (cid:8)B(cid:5)(cid:8) = k, the right-hand side of the equivalencefollows.For the converse, let D ⊆ B ∪ {w} be such that (cid:8)D(cid:8) (cid:2) m − k, and suppose that c is not the unique plurality winnerof (C − D, V ). Since c ∈ C − D, it follows from Claim 4.30 that (C − D) − {c} = B(cid:5) ∪ {w}, where B(cid:5) is a hitting setof S of size less than or equal to k. (cid:2)So from this and Example 4.15 we have the following.Corollary 4.34. Plurality voting is resistant to destructive control by deleting candidates.Now, we show that Construction 4.28 also yields a polynomial-time many-one reduction from Hitting Set to De-structive Control by Partition of Candidates for plurality voting.E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285279Claim 4.35. S has a hitting set of size at most k if and only if the election with candidate set C, distinguishedcandidate c, and voter set V can be destructively controlled by partition of candidates (both in model TE and TP).Proof. Let B(cid:5) be a hitting set of S of size k. Partition C into C1 = B(cid:5) ∪ {c, w} and C2 = B − B(cid:5). By Claim 4.29, wis the unique plurality winner of (C1, V ), and c thus cannot win the election (C, V ).For the converse, suppose that there exists a partition of candidates such that c is not the unique plurality winnerof the two-stage election corresponding to that partition. Then, certainly, there exists a set D ⊆ B ∪ {w} such that c isnot the unique plurality winner of (D ∪ {c}, V ). By Claim 4.30, S has a hitting set of size at most k. (cid:2)So from this and Example 4.15 we have the following.Corollary 4.36. Plurality voting is resistant to destructive control by partition of candidates (both in model TEand TP).The same argument works for proving that plurality voting is resistant to destructive control by run-off partition ofcandidates, again by a reduction from Hitting Set.Claim 4.37. S has a hitting set of size at most k if and only if the election with candidate set C, distinguishedcandidate c, and voter set V can be destructively controlled by run-off partition of candidates (both in model TEand TP).Proof. Let B(cid:5) be a hitting set of S of size k. Partition C into C1 = B(cid:5) ∪ {c, w} and C2 = B − B(cid:5). By Claim 4.29, wis the unique plurality winner of (C1, V ), and c thus cannot win the election (C, V ).For the converse, suppose that there exists a partition of candidates such that c is not the unique plurality winner inthe run-off election corresponding to that partition. Then, certainly, there exists a set D ⊆ B ∪ {w} such that c is notthe unique plurality winner of (D ∪ {c}, V ). By Claim 4.30, S has a hitting set of size at most k. (cid:2)So from this and Example 4.15 we have the following.Corollary 4.38. Plurality voting is resistant to destructive control by run-off partition of candidates (both in model TEand TP).Finally, we show that plurality voting is resistant to both constructive and destructive control by partition of voters inthe TP model. To this end, we reduce from the Hitting Set problem restricted to instances where n(k + 1) + 1 (cid:2) m − k.We first define this restriction and prove that it still is NP-complete.Restricted Hitting SetGiven: A set B = {b1, b2, . . . , bm}, a family S = {S1, S2, . . . , Sn} of subsets Si of B, and a positive integer k suchQuestion: Does S have a hitting set of size at most k? That is, is there a set B(cid:5) ⊆ B with (cid:8)B(cid:5)(cid:8) (cid:2) k such that forthat n(k + 1) + 1 (cid:2) m − k.each i, Si ∩ B(cid:5) (cid:3)= ∅?Theorem 4.39. Restricted Hitting Set is NP-complete.Proof. Restricted Hitting Set clearly is in NP. To show that it is NP-hard, we reduce Hitting Set to Restricted HittingSet. Let ( ˆB, ˆS, k) be a Hitting Set instance, whereˆB = {b1, b2, . . . , b ˆm},ˆS = { ˆS1, ˆS2, . . . , ˆSn},ˆSi ⊆ ˆB for each i, 1 (cid:2) i (cid:2) n, and k + 1 (cid:2) ˆm. Define an instance of Restricted Hitting Set (B, S, k), where280E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285B = ˆB ∪ {ai,j | 1 (cid:2) i (cid:2) n and 1 (cid:2) j (cid:2) k + 1},Si = ˆSi ∪ {ai,1, ai,2, . . . , ai,k+1},S = {S1, S2, . . . , Sn}.for 1 (cid:2) i (cid:2) n,andIt is immediate that ˆS has a hitting set of size k if and only if S has a hitting set of size k.Let m = (cid:8)B(cid:8) = ˆm + n(k + 1). Since k + 1 (cid:2) ˆm, we haven(k + 1) + k + 1 (cid:2) n(k + 1) + ˆm = m,i.e., n(k + 1) + 1 (cid:2) m − k. (cid:2)Claim 4.40. In the election (C, V ) from Construction 4.28, if n(k + 1) + 1 (cid:2) m − k then for every partition of V intoV1 and V2, c is a plurality winner of (C, V1) or of (C, V2).Proof. For a contradiction, suppose that c is a winner of neither (C, V1) nor (C, V2). For each U ⊆ V and for eachi ∈ C, let scoreU (i) denote the number of first-place votes that i has in (C, U ). Let x ∈ B ∪ {w} be a winner of (C, V1),and let y ∈ B ∪ {w} be a winner of (C, V2). ThenscoreV1(x) + scoreV2 (y) (cid:3) scoreV (c) + 2.(4.8)Since c’s score in (C, V ) is greater than that of any other candidate, we have x (cid:3)= y. It follows thatscoreV1(x) + scoreV2 (y) (cid:2) scoreV (w) + scoreV (bi)(cid:2) 2n(k + 1) + 5 + 2n(k + 1) + 2(cid:2) 2n(k + 1) + 5 + 2(m − k)= scoreV (c) + 1,which contradicts Eq. (4.8). Thus, c is a winner of (C, V1) or of (C, V2). (cid:2)We now show that Construction 4.28 also provides a reduction from Restricted Hitting Set both to ConstructiveControl by Partition of Voters and to Destructive Control by Partition of Voters in the Ties-Promote model for pluralityvoting.Claim 4.41. In the election (C, V ) from Construction 4.28, if n(k + 1) + 1 (cid:2) m − k then the following three statementsare equivalent:(1) S has a hitting set of size at most k.(2) V can be partitioned such that w is the unique plurality winner in the TP model.(3) V can be partitioned such that c is not the unique plurality winner in the TP model.Proof. To show that the first statement implies the second statement, let B(cid:5) be a hitting set of S of size k. PartitionV into V1 and V2, where V1 consists of one voter of the form w > c > · · · and for every b ∈ B(cid:5) one voter of the formb > w > · · · , and where V2 = V − V1. Then the candidates in B(cid:5) ∪ {w} are the winners of (C, V1) and move forwardto the run-off in the TP model, and c is the winner of (C, V2). By Claim 4.29, w is the unique plurality winner of thefinal election (B(cid:5) ∪ {c, w}, V ).Clearly, if w is the unique plurality winner for some partition of V in the TP model, then c cannot be the uniqueplurality winner of this election for the same partition. Thus, the second statement implies the third statement.Finally, we show that the third statement implies the first statement. Suppose there is a partition of V such that c isnot the unique plurality winner of the election in the TP model. By Claim 4.40, c is a winner of one of the subelectionsand will thus participate in the final run-off. It follows that c is not the unique winner of a run-off election involving c,i.e., c is not the unique winner in (D ∪ {c}, V ), for some D ⊆ B ∪ {w}. By Claim 4.30, S has a hitting set of size atmost k. This completes the proof. (cid:2)Theorem 4.39, Claim 4.41, and Example 4.16 have the following corollary.E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285281Corollary 4.42.(1) Plurality voting is resistant to constructive control by partition of voters in model TP.(2) Plurality voting is resistant to destructive control by partition of voters in model TP.4.3.2. Approval voting, constructive case, voter controlFor approval voting, our reductions proving resistance are from the NP-complete problem Exact Cover by Three-Sets (X3C, for short), see Garey and Johnson [19].Exact Cover by Three-Sets (X3C)Given: A set B = {b1, b2, . . . , bm}, where m = 3k for a positive integer k, and a family S = {S1, S2, . . . , Sn} ofQuestion: Does S have an exact cover for B? That is, is there a subfamily S(cid:5) ⊆ S such that every element of B occurssubsets Si of B with (cid:8)Si(cid:8) = 3 for each i.in exactly one set in S(cid:5)?Theorem 4.43. Approval voting is resistant to constructive control by adding voters.Proof. That susceptibility holds in this case is shown by Example 4.11.Given an instance (B, S) of X3C, where B = {b1, b2, . . . , bm}, m = 3k, k > 1, S = {S1, S2, . . . , Sn}, and Si ⊆ Bwith (cid:8)Si(cid:8) = 3 for each i, 1 (cid:2) i (cid:2) n, construct the following instance of Constructive Control by Adding Voters forapproval voting:• The candidate set is C = B ∪ {w}, where w is the distinguished candidate.• V consists of k − 2 registered voters who each approve of b1, b2, . . . , bm and disapprove of w.• W consists of n unregistered voters: For each i, 1 (cid:2) i (cid:2) n, there is one voter in W who approves of w and thethree candidates in Si , and who disapproves of all other candidates.We claim that S contains an exact cover for B if and only if w can be made the unique approval winner by addingat most k voters.For the left to right direction, simply add the k voters from W that correspond to the exact cover for B. Then w hask Yes votes and every b ∈ B has (k − 2) + 1 = k − 1 Yes votes, so w is the unique approval winner.For the right to left direction, suppose that w can be made the unique approval winner by adding at most k voters.Then we clearly need to add exactly k voters and every b ∈ B can gain at most one Yes vote. Since each voter in Wcasts three Yes votes for candidates in B, it follows that every b ∈ B gains exactly one Yes vote. Thus, the k addedvoters correspond to an exact cover for B. (cid:2)Theorem 4.44. Approval voting is resistant to constructive control by deleting voters.Proof. That susceptibility holds in this case is shown by Example 4.13.Let an instance (B, S) of X3C be given, where B = {b1, b2, . . . , bm}, m = 3k, k > 0, S = {S1, S2, . . . , Sn}, andSi ⊆ B with (cid:8)Si(cid:8) = 3 for each i, 1 (cid:2) i (cid:2) n. For each j , 1 (cid:2) j (cid:2) m, let(cid:4)(cid:4){Si ∈ S | bj ∈ Si}(cid:4)(cid:4).(cid:2)j =Construct the following election:• The candidate set is C = B ∪ {w}, where w is the distinguished candidate.• The voter set V consists of the following voters:– For each i, 1 (cid:2) i (cid:2) n, there is one voter in V who approves of all candidates in Si and who disapproves of all– There are n voters v1, v2, . . . , vn in V such that, for each i, 1 (cid:2) i (cid:2) n, vi approves of w, and vi approves of bjother candidates.if and only if i (cid:2) n − (cid:2)j .282E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285Note that the election (C, V ) has the property that all candidates have n Yes votes.We claim that S contains an exact cover for B if and only if w can be made the unique approval winner by deletingat most k voters.For the left to right direction, simply delete the k voters from V that correspond to an exact cover for B. Then everyb ∈ B loses one Yes vote, leaving w the unique approval winner.For the right to left direction, suppose that w can be made the unique approval winner by deleting at most k voters.Without loss of generality, we may assume that none of the deleted voters approves of w. So, we assume that onlyvoters corresponding to Si ’s have been deleted. For w to have become the unique winner, every b ∈ B must have lostat least one Yes vote. It follows that the deleted voters correspond to a cover, and since the cover has size at most k,this must be an exact cover for B. (cid:2)Theorem 4.45. Approval voting is resistant to constructive control by partition of voters in model TP.Proof. That susceptibility holds in this case is shown by Example 4.17.Let an instance (B, S) of X3C be given, where B = {b1, b2, . . . , bm}, m = 3k, k > 0, S = {S1, S2, . . . , Sn}, andSi ⊆ B with (cid:8)Si(cid:8) = 3 for each i, 1 (cid:2) i (cid:2) n. We modify the construction from the proof of Theorem 4.44. As in thatproof, for each j , 1 (cid:2) j (cid:2) m, let(cid:4)(cid:4).(cid:4)(cid:4){Si ∈ S | bj ∈ Si}(cid:2)j =Now, define the following election:• The candidate set is C = B ∪ {w, x, y}, where w is the distinguished candidate.• The voter set V consists of the following voters:– For each i, 1 (cid:2) i (cid:2) n, there is one voter in V who approves of y and of all elements of Si and who disapprovesof all other candidates.– There are n voters v1, v2, . . . , vn in V such that, for each i, 1 (cid:2) i (cid:2) n, vi approves of w, vi disapproves of x,vi disapproves of y, and vi approves of bj if and only if i (cid:2) n − (cid:2)j .– There are k + 1 voters in V who approve of x and disapprove of all other candidates.– Finally, there are k + 2 voters in V who disapprove of x and approve of all other candidates.Note that this election has the property that all candidates other than x have n + k + 2 Yes votes.We claim that S contains an exact cover for B if and only if w can be made the unique approval winner by partitionof voters in model TP.For the left to right direction, if S contains an exact cover for B, then let V2 consist of the k voters correspondingto the sets in the cover and of all the k + 1 voters who approve of only x, and let V1 = V − V2. Then• w is the unique approval winner of (C, V1),• x is the unique approval winner of (C, V2), and• w wins the run-off against x.For the right to left direction, suppose that w can be made the unique approval winner by partition of voters inmodel TP. Since w is the unique winner in the run-off, and since every candidate other than x is tied with w (eachhaving n + k + 2 Yes votes in V ), the only candidates that can participate in the run-off are w and x. Since we are inthe TP model, w must be the unique winner of one of the subelections and x must be the unique winner of the othersubelection.Let (V1, V2) be a partition of V such that w is the unique winner of (C, V1) and such that x is the unique winnerof (C, V2). As in the proof of Theorem 4.44, it follows that the voters corresponding to Si ’s that are not in V1 (i.e.,that are in V2) correspond to a cover. Since x is the unique winner of (C, V2) and x has k + 1 Yes votes, y can have atmost k Yes votes in V2. It follows that there are at most k voters corresponding to Si ’s in V2. Thus, there are exactly ksuch voters, and these voters correspond to an exact cover. (cid:2)E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285283Note that the previous construction won’t work for the TE model, since in that model, w also wins the election iftwo or more candidates are tied for first place in V2. In the proof of the next theorem, we will adapt the constructionfrom the proof of Theorem 4.45.Theorem 4.46. Approval voting is resistant to constructive control by partition of voters in model TE.Proof. That susceptibility holds in this case is shown by Example 4.17.Let an instance (B, S) of X3C be given, where B = {b1, b2, . . . , bm}, m = 3k, k > 0, S = {S1, S2, . . . , Sn}, andSi ⊆ B with (cid:8)Si(cid:8) = 3 for each i, 1 (cid:2) i (cid:2) n. We modify the construction from the proof of Theorem 4.45. As in thatproof, for each j , 1 (cid:2) j (cid:2) m, let(cid:4)(cid:4).(cid:2)j =(cid:4)(cid:4){Si ∈ S | bj ∈ Si}Now, define the following election:• The candidate set is C = B ∪ {w, x, y} ∪ {z1, . . . , zn}, where w is the distinguished candidate.• The voter set V consists of the following voters:– For each i, 1 (cid:2) i (cid:2) n, there is one voter in V who approves of y and of all elements of Si and who disapprovesof all other candidates.– For each i, 1 (cid:2) i (cid:2) n, there is one voter in V who approves of y and zi and who disapproves of all othercandidates.– There are n voters v1, v2, . . . , vn in V such that, for each i, 1 (cid:2) i (cid:2) n, vi approves of w, vi disapproves of x,vi disapproves of y, vi approves of bj if and only if i (cid:2) n − (cid:2)j , and vi approves of zj if and only if i (cid:3)= n.– There are n + k voters in V who approve of x and who disapprove of all other candidates.Note that this election has the property that all candidates other than x and y have n Yes votes.We claim that S contains an exact cover for B if and only if w can be made the unique approval winner by partitionof voters in model TE.For the left to right direction, if S contains an exact cover for B, then let V2 consist of the k voters correspondingto the sets in the cover and of all the n + k voters who approve of only x and for each i, 1 (cid:2) i (cid:2) n, of the voter whoapproves of only y and zi . Let V1 = V − V2. Then w is the unique approval winner of (C, V1), and x and y are tied forfirst place in (C, V2) with n + k Yes votes each. Since we are in model TE, no candidates are nominated by (C, V2),and w wins the run-off (and thus the election) by default.For the right to left direction, suppose that w can be made the unique approval winner by partition of voters inmodel TE. Since we are in model TE, w must be the unique winner of one of the subelections. Let (V1, V2) be apartition of V such that w is the unique winner of (C, V1). As in the proof of Theorem 4.44, it follows that the voterscorresponding to Si ’s that are not in V1 (i.e., that are in V2) correspond to a cover.Suppose that there are more than k voters that correspond to Si ’s in V2. Note that for each i, 1 (cid:2) i (cid:2) n, the voterthat approves of only y and zi must also be in V2 (for if it weren’t, zi would have at least as many Yes votes in V1as w). It follows that y has more than n + k Yes votes in V2. But then y is the unique approval winner in V2, sinceno other candidate has more than n + k Yes votes in V . Since y beats w in the run-off, this contradicts the fact that wwins the election. It follows that there are at most k voters corresponding to Si ’s in V2. Thus, there are exactly k suchvoters, and these voters correspond to an exact cover. (cid:2)5. ConclusionsIn this paper, we studied the computational resistance and vulnerability of three voting systems—plurality, Con-dorcet, and approval voting—to destructive control by an election’s chair in each of seven control scenarios: candidateaddition, suppression, partition, and run-off partition, and voter addition, suppression, and partition. We classifiedeach case as immune, vulnerable, or computationally resistant. We also studied the analogous constructive controlcases and fully resolved those that were not considered by Bartholdi, Tovey, and Trick [3].We identified cases where a system immune to constructive control still can be vulnerable to destructive control(e.g., Condorcet voting for control by adding candidates), and vice versa (e.g., approval voting for control by deleting284E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285candidates). We saw that, among the systems studied, none is globally superior to the others. Rather, when choosing avoting system, one’s choice will (along of course with consideration of all the many social-choice benefits/weaknessesof the given system, and other applicable factors) be influenced by the types of control against which protection ismost desired. (We mention in passing that very recent work by the authors has shown that there exists an artificialvoting system that is resistant to each of the twenty types of control discussed in the present paper [24].) Finally, wesaw that tie-handling can have a significant effect: For those control types that involve partitions of the candidate orvoter set, we studied two natural tie-handling rules, and we found cases in which the complexity of the correspondingcontrol problem varies crucially depending on which tie-handling rule is adopted.AcknowledgementsWe thank Jeroen Snippe for helpful comments, and we thank Klaus Wagner and his group for hosting a visit duringwhich this work was done in part. We thank the three Artificial Intelligence referees—two anonymous referees andS. Brams as an open referee—for their careful readings and helpful comments, which much improved this paper.References[1] J. Bartholdi III, J. Orlin, Single transferable vote resists strategic voting, Social Choice and Welfare 8 (4) (1991) 341–354.[2] J. Bartholdi III, C. Tovey, M. Trick, The computational difficulty of manipulating an election, Social Choice and Welfare 6 (3) (1989) 227–241.[3] J. Bartholdi III, C. Tovey, M. Trick, How hard is it to control an election?, Mathematical and Computer Modeling 16 (8/9) (1992) 27–40.[4] D. Black, The Theory of Committees and Elections, Cambridge University Press, 1958.[5] S. Brams, P. Fishburn, Approval Voting, Birkhäuser, Boston, 1983.[6] S. Brams, P. Fishburn, Voting procedures, in: K. Arrow, A. Sen, K. Suzumura (Eds.), Handbook of Social Choice and Welfare, vol. 1, North-Holland, Amsterdam, 2002, pp. 173–236.[7] S. Brams, M. Sanver, Critical strategies under approval voting: Who gets ruled in and ruled out, Electoral Studies 25 (2) (2006) 287–305.[8] J. Condorcet, Essai sur l’Application de L’Analyse à la Probabilité des Décisions Rendues à la Pluralité des Voix, 1785, facsimile reprint oforiginal published in Paris, 1972, by the Imprimerie Royale.[9] V. Conitzer, J. Lang, T. Sandholm, How many candidates are needed to make elections hard to manipulate?, in: Proceedings of the 9thConference on Theoretical Aspects of Rationality and Knowledge, ACM Press, 2003.[10] V. Conitzer, T. Sandholm, Complexity of manipulating elections with few candidates, in: Proceedings of the 18th National Conference onArtificial Intelligence, AAAI Press, 2002.[11] C. Dodgson, A method of taking votes on more than two issues, pamphlet printed by the Clarendon Press, Oxford, and headed “not yetpublished” (see the discussions in [4,28], both of which reprint this paper) (1876).[12] C. Dwork, R. Kumar, M. Naor, D. Sivakumar, Rank aggregation methods for the web, in: Proceedings of the 10th International World WideWeb Conference, ACM Press, 2001.[13] E. Ephrati, J. Rosenschein, The Clarke tax as a consensus mechanism among automated agents, in: Proceedings of the 9th National Conferenceon Artificial Intelligence, AAAI Press, 1991.[14] E. Ephrati, J. Rosenschein, Multi-agent planning as a dynamic search for social consensus, in: Proceedings of the 13th International JointConference on Artificial Intelligence, Morgan Kaufmann, 1993.[15] R. Fagin, R. Kumar, D. Sivakumar, Efficient similarity search and classification via rank aggregation, in: Proceedings of the 2003 ACMSIGMOD International Conference on Management of Data, ACM Press, 2003.[16] P. Faliszewski, E. Hemaspaandra, L. Hemaspaandra, The complexity of bribery in elections, in: Proceedings of the 21st National Conferenceon Artificial Intelligence, AAAI Press, 2006.[17] P. Faliszewski, E. Hemaspaandra, L. Hemaspaandra, J. Rothe, A richer understanding of the complexity of election systems, in: S. Ravi,S. Shukla (Eds.), Fundamental Problems in Computing: Essays in Honor of Professor Daniel J. Rosenkrantz, Springer, in press. Preliminaryversion available as [18].[18] P. Faliszewski, E. Hemaspaandra, L. Hemaspaandra, J. Rothe, A richer understanding of the complexity of election systems, Tech. Rep.TR-903, Department of Computer Science, University of Rochester, Rochester, NY, September 2006.[19] M. Garey, D. Johnson, Computers and Intractability: A Guide to the Theory of NP-Completeness, W.H. Freeman and Company, 1979.[20] E. Hemaspaandra, L. Hemaspaandra, Computational politics: Electoral systems, in: Proceedings of the 25th International Symposium onMathematical Foundations of Computer Science, in: Lecture Notes in Computer Science, vol. 1893, Springer-Verlag, 2000.[21] E. Hemaspaandra, L. Hemaspaandra, Dichotomy for voting systems, Journal of Computer and System Sciences 73 (1) (2007) 73–83.[22] E. Hemaspaandra, L. Hemaspaandra, J. Rothe, Exact analysis of Dodgson elections: Lewis Carroll’s 1876 voting system is complete forparallel access to NP, Journal of the ACM 44 (6) (1997) 806–825.[23] E. Hemaspaandra, L. Hemaspaandra, J. Rothe, Anyone but him: The complexity of precluding an alternative, in: Proceedings of the 20thNational Conference on Artificial Intelligence, AAAI Press, 2005.[24] E. Hemaspaandra, L. Hemaspaandra, J. Rothe, Hybrid elections broaden complexity-theoretic resistance to control, in: Proceedings of the20th International Joint Conference on Artificial Intelligence, AAAI Press, 2007.[25] E. Hemaspaandra, H. Spakowski, J. Vogel, The complexity of Kemeny elections, Theoretical Computer Science 349 (3) (2005) 382–391.E. Hemaspaandra et al. / Artificial Intelligence 171 (2007) 255–285285[26] J. Hopcroft, J. Ullman, Introduction to Automata Theory, Languages, and Computation, Addison-Wesley, 1979.[27] R. Ladner, N. Lynch, A. Selman, A comparison of polynomial time reducibilities, Theoretical Computer Science 1 (2) (1975) 103–124.[28] I. McLean, A. Urken, Classics of Social Choice, University of Michigan Press, 1995.[29] D. Pennock, E. Horvitz, C. Giles, Social choice theory and recommender systems: Analysis of the axiomatic foundations of collaborativefiltering, in: Proceedings of the 17th National Conference on Artificial Intelligence, AAAI Press, 2000.[30] A. Procaccia, J. Rosenschein, A. Zohar, Multi-winner elections: Complexity of manipulation, control, and winner-determination, in: Pre-proceedings of the Eighth Trading Agent Design and Analysis & Agent Mediated Electronic Commerce Joint International Workshop(TADA/AMEC 2006), 2006.[31] A. Procaccia, J. Rosenschein, A. Zohar, Multi-winner elections: Complexity of manipulation, control, and winner-determination, in: Proceed-ings of the 20th International Joint Conference on Artificial Intelligence, AAAI Press, 2007.[32] W. Riker, The Art of Political Manipulation, Yale University Press, 1986.[33] J. Rothe, H. Spakowski, J. Vogel, Exact complexity of the winner problem for Young elections, Theory of Computing Systems 36 (4) (2003)375–386.[34] H. Spakowski, J. Vogel, (cid:3)pSoftware Technology and Theoretical Computer Science, in: Lecture Notes in Computer Science, vol. 1974, Springer-Verlag, 2000.2 -completeness: A classical approach for new results, in: Proceedings of the 20th Conference on Foundations of[35] H. Spakowski, J. Vogel, The complexity of Kemeny’s voting system, in: Proceedings of the Workshop Argentino de Informática Teórica, in:Anales Jornadas Argentinas de Informática e Investigación Operativa, vol. 30, SADIO, 2001.[36] A. Taylor, Social Choice and the Mathematics of Manipulation, Cambridge University Press, 2005.